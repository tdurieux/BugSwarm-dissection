diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
index d58554f9b6..2aeb83e7a3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
@@ -40,7 +40,7 @@
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
-                + "blocks" + File.separator + "emptyblock" + File.separator + filename);
+                + "blocks" + File.separator + filename);
     }
 
     /* Additional test for jacoco, since valueOf()
@@ -68,7 +68,7 @@ public void testDefault()
             "73:41: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
             "84:12: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
         };
-        verify(checkConfig, getPath("InputEmptyBlockDefault.java"), expected);
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
     }
 
     @Test
@@ -84,7 +84,7 @@ public void testText()
             "71:29: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "synchronized"),
             "84:12: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "STATIC_INIT"),
         };
-        verify(checkConfig, getPath("InputEmptyBlockDefault.java"), expected);
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
     }
 
     @Test
@@ -103,7 +103,7 @@ public void testStatement()
             "73:41: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
             "84:12: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
         };
-        verify(checkConfig, getPath("InputEmptyBlockDefault.java"), expected);
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
     }
 
     @Test
@@ -120,7 +120,7 @@ public void allowEmptyLoops() throws Exception {
             "22:29: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
             "23:28: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT),
         };
-        verify(checkConfig, getPath("InputEmptyBlockAllowEmptyLoops.java"), expected);
+        verify(checkConfig, getPath("InputSemantic2.java"), expected);
     }
 
     @Test
@@ -137,7 +137,7 @@ public void allowEmptyLoopsText() throws Exception {
             "22:29: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "if"),
             "23:28: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "switch"),
         };
-        verify(checkConfig, getPath("InputEmptyBlockAllowEmptyLoops.java"), expected);
+        verify(checkConfig, getPath("InputSemantic2.java"), expected);
     }
 
     @Test
@@ -148,7 +148,7 @@ public void testInvalidOption() throws Exception {
         try {
             final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
-            verify(checkConfig, getPath("InputEmptyBlockDefault.java"), expected);
+            verify(checkConfig, getPath("InputSemantic.java"), expected);
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
@@ -170,7 +170,7 @@ public void testAllowEmptyCaseWithText() throws Exception {
             "31:37: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "case"),
             "32:29: " + getCheckMessage(MSG_KEY_BLOCK_EMPTY, "case"),
         };
-        verify(checkConfig, getPath("InputEmptyBlockCase.java"), expected);
+        verify(checkConfig, getPath("InputEmptyCase.java"), expected);
     }
 
     @Test
@@ -187,7 +187,7 @@ public void testForbidCaseWithoutStmt() throws Exception {
             "32:29: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, "case"),
             "32:40: " + getCheckMessage(MSG_KEY_BLOCK_NO_STMT, "case"),
         };
-        verify(checkConfig, getPath("InputEmptyBlockCase.java"), expected);
+        verify(checkConfig, getPath("InputEmptyCase.java"), expected);
     }
 
     @Test
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCase.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCase.java
new file mode 100755
index 0000000000..b8c1df3f66
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCase.java
@@ -0,0 +1,36 @@
+////////////////////////////////////////////////////////////////////////////////
+// Input test file for testing empty LITERAL_CASE.
+// Created: 2017
+////////////////////////////////////////////////////////////////////////////////
+package com.puppycrawl.tools.checkstyle.checks.blocks;
+
+class InputEmptyCase
+{
+    void method1(int a) {
+        switch (a) {}
+        switch (a) {case 1: ; } // no violation
+        switch (a) {case 1:{}}  // 1 violation
+        switch (a) {
+            case 1:
+        }
+        switch (a) {
+            case 1: // 1 violation
+            {}
+        }
+        switch (a) {
+            case 1: // 1 violation if checking statements
+            {// none if checking text
+            }
+        }
+    }
+
+    public void method2(char c) {
+        switch(c) { case 0: } // no violation
+        switch(c) { case 0: {} method1(1); } // 1 violation
+        switch(c) { case 0: method1(0); {} } // no violation
+        switch(c) { case 0: case 1: {} } // 1 violation
+        switch(c) { case 0: {} case 1: {// 2 violations if checking statements
+        }
+        }
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic.java
new file mode 100755
index 0000000000..94cda5d53d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic.java
@@ -0,0 +1,87 @@
+////////////////////////////////////////////////////////////////////////////////
+// Test case file for checkstyle.
+// Created: 2001
+////////////////////////////////////////////////////////////////////////////////
+package com.puppycrawl.tools.checkstyle.checks.blocks;
+
+import java.io.*; // star import for instantiation tests
+import java.awt.Dimension; // explicit import for instantiation tests
+import java.awt.Color;
+
+/**
+ * Test case for detecting empty block statements.
+ * @author Lars KÃ¼hne
+ **/
+class InputSemantic
+{
+    static {
+        Boolean x = new Boolean(true);
+    }
+
+    {
+        Boolean x = new Boolean(true);
+        Boolean[] y = new Boolean[]{Boolean.TRUE, Boolean.FALSE};
+    }
+
+    Boolean getBoolean()
+    {
+        return new java.lang.Boolean(true);
+    }
+
+    void exHandlerTest()
+    {
+        try {
+        }
+        finally {
+        }
+        try {
+        // something
+        }
+        finally {
+            // something
+        }
+        try {
+            ; // something
+        }
+        finally {
+            ; // statement
+        }
+    }
+
+    /** test **/
+    private static final long IGNORE = 666l + 666L;
+
+    public class EqualsVsHashCode1
+    {
+        public boolean equals(int a)
+        {
+            return a == 1;
+        }
+    }
+
+    // empty instance initializer
+    {
+    }
+
+    private class InputBraces {
+        
+    }
+
+    synchronized void foo() {
+        synchronized (this) {} // not OK
+        synchronized (Class.class) { // OK
+            synchronized (new Object()) {
+                // not OK if checking statements
+            }
+        }
+    }
+    
+    
+    static {
+       
+    int a = 0;}
+    
+    static {
+        
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java
new file mode 100755
index 0000000000..01b93dfdaa
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java
@@ -0,0 +1,38 @@
+////////////////////////////////////////////////////////////////////////////////
+// Test case file for checkstyle.
+// Created: 2001
+////////////////////////////////////////////////////////////////////////////////
+package com.puppycrawl.tools.checkstyle.checks.blocks;
+
+import java.io.*; // star import for instantiation tests
+import java.awt.Dimension; // explicit import for instantiation tests
+import java.awt.Color;
+
+class UpdateClass
+{
+	public void fooMethod()
+	{
+		int a = 1;
+		if (a == 1) {} //is not OK 
+		char[] s = {'1', '2'};
+		int index = 2;
+		if (doSideEffect() == 1) {} //is not OK, 
+		while ((a = index - 1) != 0) {} // is OK 
+		for (; index < s.length && s[index] != 'x'; index++) {} // is OK
+		if (a == 1) {} else {System.identityHashCode("a");} // is not OK
+		switch (a) {} //warn
+		switch (a) { //ok
+        case 1:
+            a = 2;
+        case 2:
+            a = 3;
+        default:
+            a = 0;
+        }
+	}
+	
+	public int doSideEffect()
+	{
+		return 1;
+	}
+}
