diff --git a/dev-requirements.txt b/dev-requirements.txt
index ee4ecdfb18..138418e243 100755
--- a/dev-requirements.txt
+++ b/dev-requirements.txt
@@ -8,3 +8,4 @@ wheel==0.24
 twine==1.9.1
 flake8==2.6.2
 pytest==3.2.1
+pytest_relaxed==1.0.0
diff --git a/paramiko/client.py b/paramiko/client.py
index 5f0e927451..6f0cb847a8 100755
--- a/paramiko/client.py
+++ b/paramiko/client.py
@@ -230,6 +230,7 @@ def connect(
         banner_timeout=None,
         auth_timeout=None,
         gss_trust_dns=True,
+        passphrase=None,
     ):
         """
         Connect to an SSH server and authenticate to it.  The server's host key
@@ -270,7 +271,10 @@ def connect(
             the username to authenticate as (defaults to the current local
             username)
         :param str password:
-            a password to use for authentication or for unlocking a private key
+            Used for password authentication; is also used for private key
+            decryption if ``passphrase`` is not given.
+        :param str passphrase:
+            Used for decrypting private keys.
         :param .PKey pkey: an optional private key to use for authentication
         :param str key_filename:
             the filename, or list of filenames, of optional private key(s)
@@ -316,6 +320,8 @@ def connect(
             ``gss_deleg_creds`` and ``gss_host`` arguments.
         .. versionchanged:: 2.3
             Added the ``gss_trust_dns`` argument.
+        .. versionchanged:: 2.4
+            Added the ``passphrase`` argument.
         """
         if not sock:
             errors = {}
@@ -415,6 +421,7 @@ def connect(
         self._auth(
             username, password, pkey, key_filenames, allow_agent,
             look_for_keys, gss_auth, gss_kex, gss_deleg_creds, t.gss_host,
+            passphrase,
         )
 
     def close(self):
@@ -555,8 +562,11 @@ def _key_from_filepath(self, filename, klass, password):
             self._log(DEBUG, "Adding public certificate {}".format(cert_path))
         return key
 
-    def _auth(self, username, password, pkey, key_filenames, allow_agent,
-              look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host):
+    def _auth(
+        self, username, password, pkey, key_filenames, allow_agent,
+        look_for_keys, gss_auth, gss_kex, gss_deleg_creds, gss_host,
+        passphrase,
+    ):
         """
         Try, in order:
 
@@ -566,13 +576,16 @@ def _auth(self, username, password, pkey, key_filenames, allow_agent,
               (if allowed).
             - Plain username/password auth, if a password was given.
 
-        (The password might be needed to unlock a private key, or for
-        two-factor authentication [for which it is required].)
+        (The password might be needed to unlock a private key [if 'passphrase'
+        isn't also given], or for two-factor authentication [for which it is
+        required].)
         """
         saved_exception = None
         two_factor = False
         allowed_types = set()
         two_factor_types = {'keyboard-interactive', 'password'}
+        if passphrase is None and password is not None:
+            passphrase = password
 
         # If GSS-API support and GSS-PI Key Exchange was performed, we attempt
         # authentication with gssapi-keyex.
@@ -614,7 +627,7 @@ def _auth(self, username, password, pkey, key_filenames, allow_agent,
                 for pkey_class in (RSAKey, DSSKey, ECDSAKey, Ed25519Key):
                     try:
                         key = self._key_from_filepath(
-                            key_filename, pkey_class, password,
+                            key_filename, pkey_class, passphrase,
                         )
                         allowed_types = set(
                             self._transport.auth_publickey(username, key))
@@ -670,7 +683,7 @@ def _auth(self, username, password, pkey, key_filenames, allow_agent,
             for pkey_class, filename in keyfiles:
                 try:
                     key = self._key_from_filepath(
-                        filename, pkey_class, password,
+                        filename, pkey_class, passphrase,
                     )
                     # for 2-factor auth a successfully auth'd key will result
                     # in ['password']
diff --git a/setup.cfg b/setup.cfg
index 8cc271fe48..00e34ca3ca 100755
--- a/setup.cfg
+++ b/setup.cfg
@@ -11,3 +11,8 @@ omit = paramiko/_winapi.py
 exclude = sites,.git,build,dist,demos,tests
 ignore = E124,E125,E128,E261,E301,E302,E303,E402
 max-line-length = 79
+
+[tool:pytest]
+# We use pytest-relaxed just for its utils at the moment, so disable it at the
+# plugin level until we adapt test organization to really use it.
+addopts = -p no:relaxed
diff --git a/sites/www/changelog.rst b/sites/www/changelog.rst
index e08048bdbe..b0b0ab177b 100755
--- a/sites/www/changelog.rst
+++ b/sites/www/changelog.rst
@@ -2,6 +2,11 @@
 Changelog
 =========
 
+* :feature:`-` Add a new ``passphrase`` kwarg to `SSHClient.connect
+  <paramiko.client.SSHClient.connect>` so users may disambiguate key-decryption
+  passphrases from password-auth passwords. (This is a backwards compatible
+  change; ``password`` will still pull double duty as a passphrase when
+  ``passphrase`` is not given.)
 * :support:`-` Update ``tearDown`` of client test suite to avoid hangs due to
   eternally blocking ``accept()`` calls on the internal server thread (which
   can occur when test code raises an exception before actually connecting to
diff --git a/tests/test_client.py b/tests/test_client.py
index 25ec327f6e..7163fdcfbf 100755
--- a/tests/test_client.py
+++ b/tests/test_client.py
@@ -20,7 +20,7 @@
 Some unit tests for SSHClient.
 """
 
-from __future__ import with_statement
+from __future__ import with_statement, print_function
 
 import gc
 import os
@@ -33,6 +33,8 @@
 import weakref
 from tempfile import mkstemp
 
+from pytest_relaxed import raises
+
 import paramiko
 from paramiko.pkey import PublicBlob
 from paramiko.common import PY2
@@ -157,7 +159,7 @@ def _run(
         # If the kill event was set at this point, it indicates an early
         # shutdown, so bail out now and don't even try setting up a Transport
         # (which will just verbosely die.)
-        if kill_event.is_set():
+        if kill_event and kill_event.is_set():
             self.socks.close()
             return
         self.ts = paramiko.Transport(self.socks)
@@ -640,3 +642,45 @@ def test_missing_key_policy_accepts_classes_or_instances(self):
         # Hand in just the class (new behavior)
         client.set_missing_host_key_policy(paramiko.AutoAddPolicy)
         assert isinstance(client._policy, paramiko.AutoAddPolicy)
+
+
+class PasswordPassphraseTests(ClientTest):
+    # TODO: most of these could reasonably be set up to use mocks/assertions
+    # (e.g. "gave passphrase -> expect PKey was given it as the passphrase")
+    # instead of suffering a real connection cycle.
+    # TODO: in that case, move the below to be part of an integration suite?
+
+    def test_password_kwarg_works_for_password_auth(self):
+        # Straightforward / duplicate of earlier basic password test.
+        self._test_connection(password='pygmalion')
+
+    # TODO: more granular exception pending #387; should be signaling "no auth
+    # methods available" because no key and no password
+    @raises(SSHException)
+    def test_passphrase_kwarg_not_used_for_password_auth(self):
+        # Using the "right" password in the "wrong" field shouldn't work.
+        self._test_connection(passphrase='pygmalion')
+
+    def test_passphrase_kwarg_used_for_key_passphrase(self):
+        # Straightforward again, with new passphrase kwarg.
+        self._test_connection(
+            key_filename=_support('test_rsa_password.key'),
+            passphrase='television',
+        )
+
+    def test_password_kwarg_used_for_passphrase_when_no_passphrase_kwarg_given(self): # noqa
+        # Backwards compatibility: passphrase in the password field.
+        self._test_connection(
+            key_filename=_support('test_rsa_password.key'),
+            password='television',
+        )
+
+    @raises(AuthenticationException) # TODO: more granular
+    def test_password_kwarg_not_used_for_passphrase_when_passphrase_kwarg_given(self): # noqa
+        # Sanity: if we're given both fields, the password field is NOT used as
+        # a passphrase.
+        self._test_connection(
+            key_filename=_support('test_rsa_password.key'),
+            password='television',
+            passphrase='wat? lol no',
+        )
