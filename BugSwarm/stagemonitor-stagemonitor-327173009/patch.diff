diff --git a/stagemonitor-core/src/test/java/org/stagemonitor/core/CorePluginTest.java b/stagemonitor-core/src/test/java/org/stagemonitor/core/CorePluginTest.java
index c6af8f52c6..67e6ae49ae 100755
--- a/stagemonitor-core/src/test/java/org/stagemonitor/core/CorePluginTest.java
+++ b/stagemonitor-core/src/test/java/org/stagemonitor/core/CorePluginTest.java
@@ -68,22 +68,4 @@ public void testNoElasticsearchUrl() throws Exception {
 		assertNull(corePlugin.getElasticsearchUrl());
 	}
 
-	@Test
-	public void testOnlyLogElasticsearchMetricReports() throws Exception {
-		Metric2Registry registry = new Metric2Registry();
-		CorePlugin corePlugin = new CorePlugin(mock(ElasticsearchClient.class));
-		ConfigurationRegistry configuration = ConfigurationRegistry.builder()
-				.addOptionProvider(corePlugin)
-				.addConfigSource(new SimpleSource("test")
-					.add("stagemonitor.reporting.elasticsearch.onlyLogElasticsearchMetricReports", "true"))
-				.build();
-
-		corePlugin.registerReporters(registry, configuration, new MeasurementSession("OnlyLogElasticsearchMetricReportsTest", "test", "test"));
-
-		boolean found = false;
-		for (Closeable c : corePlugin.getReporters()) {
-			found |= (c instanceof ElasticsearchReporter);
-		}
-		Assert.assertTrue("No ElasticsearchReporter found", found);
-	}
 }
diff --git a/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporterTest.java b/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporterTest.java
index 8d7702ea64..26e4c4de85 100755
--- a/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporterTest.java
+++ b/stagemonitor-core/src/test/java/org/stagemonitor/core/metrics/metrics2/ElasticsearchReporterTest.java
@@ -79,6 +79,7 @@ public Integer answer(InvocationOnMock invocation) throws Throwable {
 		final ElasticsearchClient elasticsearchClient = mock(ElasticsearchClient.class);
 		when(elasticsearchClient.isElasticsearchAvailable()).thenReturn(true);
 		when(corePlugin.getElasticsearchClient()).thenReturn(elasticsearchClient);
+		when(corePlugin.isStagemonitorActive()).thenReturn(true);
 		elasticsearchReporter = ElasticsearchReporter.forRegistry(registry, corePlugin)
 				.convertDurationsTo(DURATION_UNIT)
 				.globalTags(singletonMap("app", "test"))
diff --git a/stagemonitor-os/src/test/java/org/stagemonitor/os/OsPluginTest.java b/stagemonitor-os/src/test/java/org/stagemonitor/os/OsPluginTest.java
index cf09ca1c0f..02e61a4942 100755
--- a/stagemonitor-os/src/test/java/org/stagemonitor/os/OsPluginTest.java
+++ b/stagemonitor-os/src/test/java/org/stagemonitor/os/OsPluginTest.java
@@ -16,6 +16,7 @@
 import org.stagemonitor.core.MeasurementSession;
 import org.stagemonitor.core.StagemonitorPlugin;
 import org.stagemonitor.core.elasticsearch.ElasticsearchClient;
+import org.stagemonitor.core.grafana.GrafanaClient;
 import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
 import org.stagemonitor.core.metrics.metrics2.MetricName;
 import org.stagemonitor.junit.ConditionalTravisTestRunner;
@@ -49,6 +50,7 @@ public void setUp() throws Exception {
 		final ConfigurationRegistry configuration = mock(ConfigurationRegistry.class);
 		final CorePlugin corePlugin = mock(CorePlugin.class);
 		when(corePlugin.getElasticsearchClient()).thenReturn(mock(ElasticsearchClient.class));
+		when(corePlugin.getGrafanaClient()).thenReturn(mock(GrafanaClient.class));
 		when(configuration.getConfig(CorePlugin.class)).thenReturn(corePlugin);
 		osPlugin.initializePlugin(new StagemonitorPlugin.InitArguments(metricRegistry, configuration, mock(MeasurementSession.class), mock(HealthCheckRegistry.class)));
 		this.sigar = osPlugin.getSigar();
diff --git a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
index 4663c5bff5..36d7a2fc55 100755
--- a/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
+++ b/stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/filter/HttpRequestMonitorFilterTest.java
@@ -14,6 +14,7 @@
 import org.stagemonitor.core.CorePlugin;
 import org.stagemonitor.core.MeasurementSession;
 import org.stagemonitor.core.StagemonitorPlugin;
+import org.stagemonitor.core.grafana.GrafanaClient;
 import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
 import org.stagemonitor.tracing.RequestMonitor;
 import org.stagemonitor.tracing.SpanContextInformation;
@@ -80,6 +81,7 @@ public SpanContextInformation answer(InvocationOnMock invocation) throws Throwab
 		doReturn(true).when(servletPlugin).isClientSpanCollectionEnabled();
 		doReturn(true).when(servletPlugin).isClientSpanCollectionInjectionEnabled();
 		doReturn(true).when(corePlugin).isStagemonitorActive();
+		doReturn(mock(GrafanaClient.class)).when(corePlugin).getGrafanaClient();
 		doReturn(1000000d).when(tracingPlugin).getProfilerRateLimitPerMinute();
 		when(tracingPlugin.isSampled(any())).thenReturn(true);
 		final RequestMonitor requestMonitor = new RequestMonitor(configuration, mock(Metric2Registry.class));
