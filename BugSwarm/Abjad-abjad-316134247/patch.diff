diff --git a/abjad/tools/commandlinetools/ManageSegmentScript.py b/abjad/tools/commandlinetools/ManageSegmentScript.py
index 367cdd360f..bab05664d2 100755
--- a/abjad/tools/commandlinetools/ManageSegmentScript.py
+++ b/abjad/tools/commandlinetools/ManageSegmentScript.py
@@ -285,13 +285,14 @@ def _illustrate_one_segment(self, segment_directory):
             sys.exit(1)
         with systemtools.Timer() as timer:
             try:
-                lilypond_file, metadata = segment_maker(
+                lilypond_file = segment_maker.run(
                     metadata=metadata,
                     previous_metadata=previous_metadata,
                     )
             except:
                 traceback.print_exc()
                 sys.exit(1)
+            metadata = segment_maker.metadata
             self._write_json(metadata, segment_metadata_path)
         self._report_time(timer, prefix='Abjad runtime')
         ly_path = self._write_lilypond_ly(
diff --git a/abjad/tools/commandlinetools/test/base.py b/abjad/tools/commandlinetools/test/base.py
index a9239219b2..d606dea09d 100755
--- a/abjad/tools/commandlinetools/test/base.py
+++ b/abjad/tools/commandlinetools/test/base.py
@@ -1,12 +1,11 @@
+import abjad
 import pathlib
 import shutil
 import sys
-from abjad.tools import commandlinetools
-from abjad.tools import datastructuretools
-from abjad.tools import systemtools
+from abjad import commandlinetools
 
 
-class ScorePackageScriptTestCase(systemtools.TestCase):
+class ScorePackageScriptTestCase(abjad.TestCase):
     r'''A base test class for score-package scripts.
     '''
 
@@ -17,7 +16,7 @@ class ScorePackageScriptTestCase(systemtools.TestCase):
     materials_path = score_path.joinpath('test_score', 'materials')
     segments_path = score_path.joinpath('test_score', 'segments')
     tools_path = score_path.joinpath('test_score', 'tools')
-    fancy_parts_code = datastructuretools.String.normalize(r"""
+    fancy_parts_code = abjad.String.normalize(r"""
     \book {
         \bookOutputSuffix "cello"
         \score {
@@ -47,10 +46,10 @@ class ScorePackageScriptTestCase(systemtools.TestCase):
         }
     }
     """)
-    fancy_segment_maker_code = datastructuretools.String.normalize(r"""
+    fancy_segment_maker_code = abjad.String.normalize(r"""
         import abjad
 
-        class SegmentMaker(abjad.abctools.AbjadObject):
+        class SegmentMaker(abjad.AbjadObject):
 
             ### INITIALIZER ###
 
@@ -60,13 +59,14 @@ def __init__(self, measure_count=1):
                 self.measure_count = measure_count
                 self.score_template = abjad.StringQuartetScoreTemplate()
 
-            ### SPECIAL METHODS ###
+            ### PUBLIC METHODS ###
 
-            def __call__(
+            def run(
                 self,
                 metadata=None,
                 previous_metadata=None,
                 ):
+                self.metadata = metadata
                 score = self.score_template()
                 for i in range(self.measure_count):
                     for voice in abjad.iterate(score).components(abjad.Voice):
@@ -94,7 +94,7 @@ def __call__(
                         to_each_voice=True,
                         )
                 metadata['measure_count'] = self.measure_count
-                return lilypond_file, metadata
+                return lilypond_file
     """)
 
     ### TEST LIFECYCLE ###
@@ -127,7 +127,7 @@ def tearDown(self):
     def collect_segments(self):
         script = commandlinetools.ManageSegmentScript()
         command = ['--collect']
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             script(command)
 
     def create_build_target(
@@ -139,7 +139,7 @@ def create_build_target(
         command = ['--new']
         if force:
             command.insert(0, '-f')
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             if expect_error:
                 with self.assertRaises(SystemExit) as context_manager:
                     script(command)
@@ -161,7 +161,7 @@ def create_material(
         command = ['--new', material_name]
         if force:
             command.insert(0, '-f')
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             if expect_error:
                 with self.assertRaises(SystemExit) as context_manager:
                     script(command)
@@ -191,7 +191,7 @@ def create_score(self, force=False, expect_error=False):
             ]
         if force:
             command.insert(0, '-f')
-        with systemtools.TemporaryDirectoryChange(str(self.test_path)):
+        with abjad.TemporaryDirectoryChange(str(self.test_path)):
             if expect_error:
                 with self.assertRaises(SystemExit) as context_manager:
                     script(command)
@@ -212,7 +212,7 @@ def create_segment(
         command = ['--new', segment_name]
         if force:
             command.insert(0, '-f')
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             if expect_error:
                 with self.assertRaises(SystemExit) as context_manager:
                     script(command)
@@ -231,7 +231,7 @@ def create_segment(
     def illustrate_material(self, material_name):
         script = commandlinetools.ManageMaterialScript()
         command = ['--illustrate', material_name]
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             try:
                 script(command)
             except SystemExit as e:
@@ -240,7 +240,7 @@ def illustrate_material(self, material_name):
     def illustrate_segment(self, segment_name):
         script = commandlinetools.ManageSegmentScript()
         command = ['--illustrate', segment_name]
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             try:
                 script(command)
             except SystemExit as e:
@@ -249,7 +249,7 @@ def illustrate_segment(self, segment_name):
     def illustrate_segments(self):
         script = commandlinetools.ManageSegmentScript()
         command = ['--illustrate', '*']
-        with systemtools.TemporaryDirectoryChange(str(self.score_path)):
+        with abjad.TemporaryDirectoryChange(str(self.score_path)):
             script(command)
 
     def install_fancy_segment_maker(self):
diff --git a/abjad/tools/commandlinetools/test/test_commandlinetools_ManageBuildTargetScript_render.py b/abjad/tools/commandlinetools/test/test_commandlinetools_ManageBuildTargetScript_render.py
index ff3e240be3..abadc91b39 100755
--- a/abjad/tools/commandlinetools/test/test_commandlinetools_ManageBuildTargetScript_render.py
+++ b/abjad/tools/commandlinetools/test/test_commandlinetools_ManageBuildTargetScript_render.py
@@ -162,7 +162,9 @@ def test_success_parts(self, open_file_mock):
             'test_score/test_score/builds/letter-portrait/score.tex',
             ]
         if platform.system().lower() == 'windows':
-            expected_files = [_.replace('/', os.path.sep) for _ in expected_files]
+            expected_files = [
+                _.replace('/', os.path.sep) for _ in expected_files
+                ]
         self.create_score()
         self.install_fancy_segment_maker()
         self.create_segment('test_segment')
diff --git a/abjad/tools/commandlinetools/test/test_commandlinetools_ManageSegmentScript_illustrate.py b/abjad/tools/commandlinetools/test/test_commandlinetools_ManageSegmentScript_illustrate.py
index 274cdcfa01..345de269ac 100755
--- a/abjad/tools/commandlinetools/test/test_commandlinetools_ManageSegmentScript_illustrate.py
+++ b/abjad/tools/commandlinetools/test/test_commandlinetools_ManageSegmentScript_illustrate.py
@@ -51,7 +51,7 @@ class Test(ScorePackageScriptTestCase):
         ''')
 
     def test_lilypond_error(self):
-        """
+        r"""
         Handle failing LilyPond rendering.
         """
         self.create_score()
@@ -66,16 +66,17 @@ def test_lilypond_error(self):
 
             class FaultySegmentMaker(abctools.AbjadObject):
 
-                def __call__(
+                def run(
                     self,
                     metadata=None,
                     previous_metadata=None,
                     ):
+                    self.metadata = metadata
                     lilypond_file = lilypondfiletools.LilyPondFile.new(
                         scoretools.Staff("c'4 ( d'4 e'4 f'4 )")
                         )
                     lilypond_file.items.append(r'\this-does-not-exist')
-                    return lilypond_file, metadata
+                    return lilypond_file
 
             segment_maker = FaultySegmentMaker()
             '''))
diff --git a/abjad/tools/documentationtools/DocumentationManager.py b/abjad/tools/documentationtools/DocumentationManager.py
index e6e6d4c5f8..22a7a52607 100755
--- a/abjad/tools/documentationtools/DocumentationManager.py
+++ b/abjad/tools/documentationtools/DocumentationManager.py
@@ -519,7 +519,7 @@ def _get_tools_package_contents(self, tools_package):
                 if getattr(object_, '__name__', None) == 'abjad':
                     pass
                 else:
-                    message = 'Warning: {} does not implement a {name} object.'
+                    message = 'Warning: {} does not implement a {} object.'
                     message = message.format(tools_package, name)
                     print(message)
                 continue
diff --git a/abjad/tools/scoretools/Component.py b/abjad/tools/scoretools/Component.py
index 75340dd660..8b7da996ee 100755
--- a/abjad/tools/scoretools/Component.py
+++ b/abjad/tools/scoretools/Component.py
@@ -11,7 +11,7 @@ class Component(AbjadObject):
     ### CLASS VARIABLES ###
 
     __slots__ = (
-        '_dependent_wrappers',
+        #'_dependent_wrappers',
         '_indicator_wrappers',
         '_indicators_are_current',
         '_is_forbidden_to_update',
@@ -37,7 +37,7 @@ class Component(AbjadObject):
     @abc.abstractmethod
     def __init__(self, name=None):
         import abjad
-        self._dependent_wrappers = []
+        #self._dependent_wrappers = []
         self._indicator_wrappers = []
         self._indicators_are_current = False
         self._is_forbidden_to_update = False
@@ -313,7 +313,7 @@ def _get_duration(self, in_seconds=False):
             parentage = abjad.inspect(self).get_parentage(include_self=False)
             return parentage.prolation * self._get_preprolated_duration()
 
-    def _get_effective(self, prototype=None, unwrap=True, n=0):
+    def _get_effective(self, prototype, unwrap=True, n=0):
         import abjad
         # return time signature attached to measure regardless of context
         if (prototype == abjad.TimeSignature or
@@ -324,24 +324,21 @@ def _get_effective(self, prototype=None, unwrap=True, n=0):
                     return indicator
                 else:
                     return
-        # gather candidate wrappers
         self._update_now(indicators=True)
         candidate_wrappers = {}
-        for parent in abjad.inspect(self).get_parentage(
+        for component in abjad.inspect(self).get_parentage(
             include_self=True,
             grace_notes=True,
             ):
-            #print('PARENT', parent)
-            #print('DEP', parent._dependent_wrappers)
-            #print('DIR', parent._indicator_wrappers)
-            #print()
-            for wrapper in parent._dependent_wrappers:
+            for wrapper in component._indicator_wrappers:
                 if wrapper.is_annotation:
                     continue
                 if isinstance(wrapper.indicator, prototype):
                     offset = wrapper.start_offset
                     candidate_wrappers.setdefault(offset, []).append(wrapper)
-            for wrapper in parent._indicator_wrappers:
+            if not isinstance(component, abjad.Context):
+                continue
+            for wrapper in component._dependent_wrappers:
                 if wrapper.is_annotation:
                     continue
                 if isinstance(wrapper.indicator, prototype):
@@ -349,7 +346,6 @@ def _get_effective(self, prototype=None, unwrap=True, n=0):
                     candidate_wrappers.setdefault(offset, []).append(wrapper)
         if not candidate_wrappers:
             return
-        # elect most recent candidate wrapper
         all_offsets = sorted(candidate_wrappers)
         start_offset = abjad.inspect(self).get_timespan().start_offset
         index = bisect.bisect(all_offsets, start_offset) - 1 + int(n)
@@ -758,10 +754,12 @@ def _remove_and_shrink_durated_parent_containers(self):
     def _remove_from_parent(self):
         import abjad
         self._update_later(offsets=True)
-        for parent in abjad.inspect(self).get_parentage(include_self=False):
-            for wrapper in parent._dependent_wrappers[:]:
+        for component in abjad.inspect(self).get_parentage(include_self=False):
+            if not isinstance(component, abjad.Context):
+                continue
+            for wrapper in component._dependent_wrappers[:]:
                 if wrapper.component is self:
-                    parent._dependent_wrappers.remove(wrapper)
+                    component._dependent_wrappers.remove(wrapper)
         if self._parent is not None:
             self._parent._components.remove(self)
         self._parent = None
diff --git a/abjad/tools/scoretools/Context.py b/abjad/tools/scoretools/Context.py
index 61ae54d7a4..07dc1104b3 100755
--- a/abjad/tools/scoretools/Context.py
+++ b/abjad/tools/scoretools/Context.py
@@ -30,6 +30,7 @@ class Context(Container):
     __slots__ = (
         '_context_name',
         '_consists_commands',
+        '_dependent_wrappers',
         '_remove_commands',
         )
 
@@ -44,15 +45,16 @@ def __init__(
         is_simultaneous=None,
         name=None,
         ):
+        self._consists_commands = []
+        self._dependent_wrappers = []
+        self._remove_commands = []
         Container.__init__(
             self,
             is_simultaneous=is_simultaneous,
             components=components,
             name=name,
             )
-        self.context_name = context_name
-        self._consists_commands = []
-        self._remove_commands = []
+        self.context_name = context_name 
 
     ### SPECIAL METHODS ###
 
@@ -178,6 +180,29 @@ def _get_repr_kwargs_names(self):
         else:
             return ['is_simultaneous', 'context_name', 'name']
 
+    def _get_last_wrapper(self, prototype):
+        import abjad
+        self._update_now(indicators=True)
+        candidate_wrappers = {}
+        for wrapper in self._indicator_wrappers:
+            if wrapper.is_annotation:
+                continue
+            if isinstance(wrapper.indicator, prototype):
+                offset = wrapper.start_offset
+                candidate_wrappers.setdefault(offset, []).append(wrapper)
+        for wrapper in self._dependent_wrappers:
+            if wrapper.is_annotation:
+                continue
+            if isinstance(wrapper.indicator, prototype):
+                offset = wrapper.start_offset
+                candidate_wrappers.setdefault(offset, []).append(wrapper)
+        if not candidate_wrappers:
+            return
+        last_offset = max(candidate_wrappers)
+        wrappers = candidate_wrappers[last_offset]
+        assert len(wrappers) == 1
+        return wrappers[0]
+
     ### PUBLIC PROPERTIES ###
 
     @property
