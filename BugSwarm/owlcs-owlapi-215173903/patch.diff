diff --git a/api/src/main/java/org/semanticweb/owlapi/reasoner/OWLReasoner.java b/api/src/main/java/org/semanticweb/owlapi/reasoner/OWLReasoner.java
index 29f3cf21fc..145715f73a 100755
--- a/api/src/main/java/org/semanticweb/owlapi/reasoner/OWLReasoner.java
+++ b/api/src/main/java/org/semanticweb/owlapi/reasoner/OWLReasoner.java
@@ -233,6 +233,18 @@
      */
     List<OWLOntologyChange> getPendingChanges();
 
+    /**
+     * Gets the pending changes which need to be taken into consideration by the reasoner so that it
+     * is up to date with the root ontology imports closure. After the {@link #flush()} method is
+     * called the set of pending changes will be empty.
+     *
+     * @return A set of changes. Note that the changes represent the raw changes as applied to the
+     * imports closure of the root ontology.
+     */
+    default Stream<OWLOntologyChange> pendingChanges(){
+    	return getPendingChanges().stream();
+    }
+
     /**
      * Gets the axioms that as a result of ontology changes need to be added to the reasoner to
      * synchronise it with the root ontology imports closure. If the buffering mode is
@@ -244,6 +256,19 @@
      */
     Set<OWLAxiom> getPendingAxiomAdditions();
 
+    /**
+     * Gets the axioms that as a result of ontology changes need to be added to the reasoner to
+     * synchronise it with the root ontology imports closure. If the buffering mode is
+     * {@link org.semanticweb.owlapi.reasoner.BufferingMode#NON_BUFFERING} then there will be no
+     * pending axiom additions.
+     *
+     * @return The set of axioms that need to added to the reasoner to the reasoner to synchronise
+     * it with the root ontology imports closure.
+     */
+    default Stream<OWLAxiom> pendingAxiomAdditions(){
+    	return getPendingAxiomAdditions().stream();
+    }
+
     /**
      * Gets the axioms that as a result of ontology changes need to removed to the reasoner to
      * synchronise it with the root ontology imports closure. If the buffering mode is
@@ -255,6 +280,19 @@
      */
     Set<OWLAxiom> getPendingAxiomRemovals();
 
+    /**
+     * Gets the axioms that as a result of ontology changes need to removed to the reasoner to
+     * synchronise it with the root ontology imports closure. If the buffering mode is
+     * {@link org.semanticweb.owlapi.reasoner.BufferingMode#NON_BUFFERING} then there will be no
+     * pending axiom additions.
+     *
+     * @return The set of axioms that need to added to the reasoner to the reasoner to synchronise
+     * it with the root ontology imports closure.
+     */
+    default Stream<OWLAxiom> pendingAxiomRemovals(){
+    	return getPendingAxiomRemovals().stream();
+    }
+
     /**
      * Gets the "root" ontology that is loaded into this reasoner. The reasoner takes into account
      * the axioms in this ontology and its imports closure, plus the axioms returned by
@@ -370,6 +408,23 @@
      */
     Node<OWLClass> getUnsatisfiableClasses();
 
+    /**
+     * A convenience method that obtains the classes in the signature of the root ontology that are
+     * unsatisfiable.
+     *
+     * @return A {@code Node} that is the bottom node in the class hierarchy. This node represents
+     * {@code owl:Nothing} and contains {@code owl:Nothing} itself plus classes that are equivalent
+     * to {@code owl:Nothing}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     * @throws InconsistentOntologyException if the set of reasoner axioms is inconsistent
+     */
+    default Stream<OWLClass> unsatisfiableClasses(){
+    	return getUnsatisfiableClasses().entities();
+    }
+
     /**
      * A convenience method that determines if the specified axiom is entailed by the set of
      * reasoner axioms.
@@ -460,6 +515,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLClass> getTopClassNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the top node (containing {@code owl:Thing}) in the
+     * class hierarchy.
+     *
+     * @return A {@code Node} containing {@code owl:Thing} that is the top node in the class
+     * hierarchy. This {@code Node} is essentially equal to the {@code Node} returned by calling
+     * {@link #getEquivalentClasses(org.semanticweb.owlapi.model.OWLClassExpression)} with a
+     * parameter of {@code owl:Thing}.
+     */
+    default Stream<OWLClass> topClassNode(){
+    	return getTopClassNode().entities();
+    }
+
     /**
      * Gets the {@code Node} corresponding to the bottom node (containing {@code owl:Nothing}) in
      * the class hierarchy.
@@ -471,6 +539,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLClass> getBottomClassNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the bottom node (containing {@code owl:Nothing}) in
+     * the class hierarchy.
+     *
+     * @return A {@code Node} containing {@code owl:Nothing} that is the bottom node in the class
+     * hierarchy. This {@code Node} is essentially equal to the {@code Node} that will be returned
+     * by calling {@link #getEquivalentClasses(org.semanticweb.owlapi.model.OWLClassExpression)}
+     * with a parameter of {@code owl:Nothing}.
+     */
+    default Stream<OWLClass> bottomClassNode(){
+    	return getBottomClassNode().entities();
+    }
+
     /**
      * Gets the set of named classes that are the strict (potentially direct) subclasses of the
      * specified class expression with respect to the reasoner axioms. Note that the classes are
@@ -499,6 +580,36 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getSubClasses(OWLClassExpression ce, boolean direct);
 
+    /**
+     * Gets the set of named classes that are the strict (potentially direct) subclasses of the
+     * specified class expression with respect to the reasoner axioms. Note that the classes are
+     * returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ce The class expression whose strict (direct) subclasses are to be retrieved.
+     * @param direct Specifies if the direct subclasses should be retrived ( {@code true}) or if the
+     * all subclasses (descendant) classes should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} such that for each class {@code C} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubClassOf(C, ce)}. <br>
+     * If direct is {@code false}, a {@code NodeSet} such that for each class {@code C} in the
+     * {@code NodeSet} the set of reasoner axioms entails {@code StrictSubClassOf(C, ce)}. <br> If
+     * {@code ce} is equivalent to {@code owl:Nothing} then the empty {@code NodeSet} will be
+     * returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code classExpression} is not within the
+     * profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of the classExpression is not contained
+     * within the signature of the imports closure of the root ontology and the undeclared entity
+     * policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> subClasses(OWLClassExpression ce, boolean direct){
+    	return getSubClasses(ce, direct).entities();
+    }
+
     /**
      * @param ce The class expression whose strict (direct) subclasses are to be retrieved.
      * @param depth use {@code DIRECT} for direct subclasses only, {@code ALL} for all subclasses
@@ -513,6 +624,20 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubClasses(ce, depth.isDirectOnly());
     }
 
+    /**
+     * @param ce The class expression whose strict (direct) subclasses are to be retrieved.
+     * @param depth use {@code DIRECT} for direct subclasses only, {@code ALL} for all subclasses
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} such that for each class {@code C} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubClassOf(C, ce)}. <br>
+     * If direct is {@code ALL}, a {@code NodeSet} such that for each class {@code C} in the {@code
+     * NodeSet} the set of reasoner axioms entails {@code StrictSubClassOf(C, ce)}. <br> If {@code
+     * ce} is equivalent to {@code owl:Nothing} then the empty {@code NodeSet} will be returned.
+     * @see OWLReasoner#getSubClasses(OWLClassExpression, boolean)
+     */
+    default Stream<OWLClass> subClasses(OWLClassExpression ce, InferenceDepth depth){
+    	return getSubClasses(ce, depth).entities();
+    }
+
     /**
      * Returns all subclasses.
      *
@@ -526,6 +651,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubClasses(ce, false);
     }
 
+    /**
+     * Returns all subclasses.
+     *
+     * @param ce The class expression whose strict (direct) subclasses are to be retrieved.
+     * @return a {@code NodeSet} such that for each class {@code C} in the {@code NodeSet} the set
+     * of reasoner axioms entails {@code StrictSubClassOf(C, ce)}. <br> If {@code ce} is equivalent
+     * to {@code owl:Nothing} then the empty {@code NodeSet} will be returned.
+     * @see OWLReasoner#getSubClasses(OWLClassExpression, boolean)
+     */
+    default Stream<OWLClass> subClasses(OWLClassExpression ce){
+    	return getSubClasses(ce).entities();
+    }
+
     /**
      * Gets the set of named classes that are the strict (potentially direct) super classes of the
      * specified class expression with respect to the imports closure of the root ontology. Note
@@ -554,6 +692,36 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getSuperClasses(OWLClassExpression ce, boolean direct);
 
+    /**
+     * Gets the set of named classes that are the strict (potentially direct) super classes of the
+     * specified class expression with respect to the imports closure of the root ontology. Note
+     * that the classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ce The class expression whose strict (direct) super classes are to be retrieved.
+     * @param direct Specifies if the direct super classes should be retrived ( {@code true}) or if
+     * the all super classes (ancestors) classes should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} such that for each class {@code C} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubClassOf(ce, C)}. <br>
+     * If direct is {@code false}, a {@code NodeSet} such that for each class {@code C} in the
+     * {@code NodeSet} the set of reasoner axioms entails {@code StrictSubClassOf(ce, C)}. <br> If
+     * {@code ce} is equivalent to {@code owl:Thing} then the empty {@code NodeSet} will be
+     * returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code classExpression} is not within the
+     * profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of the classExpression is not contained
+     * within the signature of the imports closure of the root ontology and the undeclared entity
+     * policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> superClasses(OWLClassExpression ce, boolean direct){
+    	return getSuperClasses(ce, direct).entities();
+    }
+
     /**
      * @param ce The class expression whose strict (direct) super classes are to be retrieved.
      * @param depth Specifies if the direct super classes should be retrived ( {@code DIRECT}) or if
@@ -570,6 +738,22 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperClasses(ce, depth.isDirectOnly());
     }
 
+    /**
+     * @param ce The class expression whose strict (direct) super classes are to be retrieved.
+     * @param depth Specifies if the direct super classes should be retrived ( {@code DIRECT}) or if
+     * the all super classes (ancestors) classes should be retrieved ({@code ALL}).
+     * @return If direct is {@code DIRECT}, a {@code NodeSet} such that for each class {@code C} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubClassOf(ce, C)}. <br>
+     * If direct is {@code false}, a {@code NodeSet} such that for each class {@code C} in the
+     * {@code NodeSet} the set of reasoner axioms entails {@code StrictSubClassOf(ce, C)}. <br> If
+     * {@code ce} is equivalent to {@code owl:Thing} then the empty {@code NodeSet} will be
+     * returned.
+     * @see OWLReasoner#getSuperClasses(OWLClassExpression, boolean)
+     */
+    default Stream<OWLClass> superClasses(OWLClassExpression ce, InferenceDepth depth){
+    	return getSuperClasses(ce, depth).entities();
+    }
+
     /**
      * @param ce The class expression whose strict (direct) super classes are to be retrieved.
      * @return a {@code NodeSet} such that for each class {@code C} in the {@code NodeSet} the set
@@ -581,6 +765,17 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperClasses(ce, false);
     }
 
+    /**
+     * @param ce The class expression whose strict (direct) super classes are to be retrieved.
+     * @return a {@code NodeSet} such that for each class {@code C} in the {@code NodeSet} the set
+     * of reasoner axioms entails {@code StrictSubClassOf(ce, C)}. <br> If {@code ce} is equivalent
+     * to {@code owl:Thing} then the empty {@code NodeSet} will be returned.
+     * @see OWLReasoner#getSuperClasses(OWLClassExpression, boolean) Return all superclasses.
+     */
+    default Stream<OWLClass> superClasses(OWLClassExpression ce){
+    	return getSuperClasses(ce).entities();
+    }
+
     /**
      * Gets the set of named classes that are equivalent to the specified class expression with
      * respect to the set of reasoner axioms. The classes are returned as a
@@ -610,6 +805,37 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLClass> getEquivalentClasses(OWLClassExpression ce);
 
+    /**
+     * Gets the set of named classes that are equivalent to the specified class expression with
+     * respect to the set of reasoner axioms. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.Node}.
+     *
+     * @param ce The class expression whose equivalent classes are to be retrieved.
+     * @return A node containing the named classes such that for each named class {@code C} in the
+     * node the root ontology imports closure entails {@code EquivalentClasses(ce C)}. If {@code ce}
+     * is not a class name (i.e. it is an anonymous class expression) and there are no such classes
+     * {@code C} then the node will be empty. <br> If {@code ce} is a named class then {@code ce}
+     * will be contained in the node. <br> If {@code ce} is unsatisfiable with respect to the set of
+     * reasoner axioms then the node representing and containing {@code owl:Nothing}, i.e. the
+     * bottom node, will be returned. <br> If {@code ce} is equivalent to {@code owl:Thing} with
+     * respect to the set of reasoner axioms then the node representing and containing {@code
+     * owl:Thing}, i.e. the top node, will be returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code classExpression} is not within the
+     * profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of the classExpression is not contained
+     * within the signature of the imports closure of the root ontology and the undeclared entity
+     * policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> equivalentClasses(OWLClassExpression ce){
+    	return getEquivalentClasses(ce).entities();
+    }
+
     /**
      * Gets the classes that are disjoint with the specified class expression {@code ce}. The
      * classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
@@ -632,6 +858,30 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getDisjointClasses(OWLClassExpression ce);
 
+    /**
+     * Gets the classes that are disjoint with the specified class expression {@code ce}. The
+     * classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ce The class expression whose disjoint classes are to be retrieved.
+     * @return The return value is a {@code NodeSet} such that for each class {@code D} in the
+     * {@code NodeSet} the set of reasoner axioms entails {@code EquivalentClasses(D,
+     * ObjectComplementOf(ce))} or {@code StrictSubClassOf(D, ObjectComplementOf(ce))}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code classExpression} is not within the
+     * profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of the classExpression is not contained
+     * within the signature of the imports closure of the root ontology and the undeclared entity
+     * policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> disjointClasses(OWLClassExpression ce){
+    	return getDisjointClasses(ce).entities();
+    }
+
     // Methods for dealing with the object property hierarchy
 
     /**
@@ -645,6 +895,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLObjectPropertyExpression> getTopObjectPropertyNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the top node (containing
+     * {@code owl:topObjectProperty}) in the object property hierarchy.
+     *
+     * @return A {@code Node} containing {@code owl:topObjectProperty} that is the top node in the
+     * object property hierarchy. This {@code Node} is essentially equivalent to the {@code Node}
+     * returned by calling {@link #getEquivalentObjectProperties(org.semanticweb.owlapi.model.OWLObjectPropertyExpression)}
+     * with a parameter of {@code owl:topObjectProperty}.
+     */
+    default Stream<OWLObjectPropertyExpression> topObjectPropertyNode(){
+    	return getTopObjectPropertyNode().entities();
+    }
+
     /**
      * Gets the {@code Node} corresponding to the bottom node (containing
      * {@code owl:bottomObjectProperty}) in the object property hierarchy.
@@ -656,6 +919,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLObjectPropertyExpression> getBottomObjectPropertyNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the bottom node (containing
+     * {@code owl:bottomObjectProperty}) in the object property hierarchy.
+     *
+     * @return A {@code Node}, containing {@code owl:bottomObjectProperty}, that is the bottom node
+     * in the object property hierarchy. This {@code Node} is essentially equal to the {@code Node}
+     * that will be returned by calling {@link #getEquivalentObjectProperties(org.semanticweb.owlapi.model.OWLObjectPropertyExpression)}
+     * with a parameter of {@code owl:bottomObjectProperty}.
+     */
+    default Stream<OWLObjectPropertyExpression> bottomObjectPropertyNode(){
+    	return getBottomObjectPropertyNode().entities();
+    }
+
     /**
      * Gets the set of <a href="#spe">simplified object property expressions</a> that are the strict
      * (potentially direct) subproperties of the specified object property expression with respect
@@ -689,13 +965,46 @@ default boolean isEntailed(OWLAxiom... axioms) {
         boolean direct);
 
     /**
-     * @param pe The object property expression whose strict (direct) super properties are to be
+     * Gets the set of <a href="#spe">simplified object property expressions</a> that are the strict
+     * (potentially direct) subproperties of the specified object property expression with respect
+     * to the imports closure of the root ontology. Note that the properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The object property expression whose strict (direct) subproperties are to be
      * retrieved.
-     * @param depth Specifies if the direct subproperties should be retrived ( {@code DIRECT}) or if
-     * the all subproperties (descendants) should be retrieved ({@code ALL}).
-     * @return If depth is {@code DIRECT}, a {@code NodeSet} of <a href="#spe">simplified object
-     * property expressions</a>, such that for each <a href="#spe">simplified object property
-     * expression</a>, {@code P}, in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * @param direct Specifies if the direct subproperties should be retrived ( {@code true}) or if
+     * the all subproperties (descendants) should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} of <a href="#spe">simplified object
+     * property expressions</a>, such that for each <a href="#spe">simplified object property
+     * expression</a>, {@code P}, in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * DirectSubObjectPropertyOf(P, pe)}. <br> If direct is {@code false}, a {@code NodeSet} of <a
+     * href="#spe">simplified object property expressions</a>, such that for each <a
+     * href="#spe">simplified object property expression</a>, {@code P}, in the {@code NodeSet} the
+     * set of reasoner axioms entails {@code StrictSubObjectPropertyOf(P, pe)}. <br> If {@code pe}
+     * is equivalent to {@code owl:bottomObjectProperty} then the empty {@code NodeSet} will be
+     * returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLObjectPropertyExpression> subObjectProperties(OWLObjectPropertyExpression pe, boolean direct){
+    	return getSubObjectProperties(pe, direct).entities();
+    }
+
+    /**
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @param depth Specifies if the direct subproperties should be retrived ( {@code DIRECT}) or if
+     * the all subproperties (descendants) should be retrieved ({@code ALL}).
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} of <a href="#spe">simplified object
+     * property expressions</a>, such that for each <a href="#spe">simplified object property
+     * expression</a>, {@code P}, in the {@code NodeSet} the set of reasoner axioms entails {@code
      * DirectSubObjectPropertyOf(P, pe)}. <br> If direct is {@code ALL}, a {@code NodeSet} of <a
      * href="#spe">simplified object property expressions</a>, such that for each <a
      * href="#spe">simplified object property expression</a>, {@code P}, in the {@code NodeSet} the
@@ -713,6 +1022,32 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubObjectProperties(pe, depth.isDirectOnly());
     }
 
+
+    /**
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @param depth Specifies if the direct subproperties should be retrived ( {@code DIRECT}) or if
+     * the all subproperties (descendants) should be retrieved ({@code ALL}).
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} of <a href="#spe">simplified object
+     * property expressions</a>, such that for each <a href="#spe">simplified object property
+     * expression</a>, {@code P}, in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * DirectSubObjectPropertyOf(P, pe)}. <br> If direct is {@code ALL}, a {@code NodeSet} of <a
+     * href="#spe">simplified object property expressions</a>, such that for each <a
+     * href="#spe">simplified object property expression</a>, {@code P}, in the {@code NodeSet} the
+     * set of reasoner axioms entails {@code StrictSubObjectPropertyOf(P, pe)}. <br> If {@code pe}
+     * is equivalent to {@code owl:bottomObjectProperty} then the empty {@code NodeSet} will be
+     * returned.
+     * @see OWLReasoner#getSubObjectProperties(OWLObjectPropertyExpression, boolean) Gets the set of
+     * <a href="#spe">simplified object property expressions</a> that are the strict (potentially
+     * direct) subproperties of the specified object property expression with respect to the imports
+     * closure of the root ontology. Note that the properties are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLObjectPropertyExpression> subObjectProperties(
+        OWLObjectPropertyExpression pe, InferenceDepth depth) {
+    	return getSubObjectProperties(pe, depth).entities();
+    }
+
     /**
      * @param pe The object property expression whose strict (direct) super properties are to be
      * retrieved.
@@ -732,6 +1067,24 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubObjectProperties(pe, false);
     }
 
+    /**
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @return A {@code NodeSet} of <a href="#spe">simplified object property expressions</a>, such
+     * that for each <a href="#spe">simplified object property expression</a>, {@code P}, in the
+     * {@code NodeSet} the set of reasoner axioms entails {@code StrictSubObjectPropertyOf(P, pe)}.
+     * <br> If {@code pe} is equivalent to {@code owl:bottomObjectProperty} then the empty {@code
+     * NodeSet} will be returned.
+     * @see OWLReasoner#getSubObjectProperties(OWLObjectPropertyExpression, boolean) Gets the set of
+     * all <a href="#spe">simplified object property expressions</a> that are the strict
+     * (potentially direct) subproperties of the specified object property expression with respect
+     * to the imports closure of the root ontology. Note that the properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLObjectPropertyExpression> subObjectProperties(OWLObjectPropertyExpression pe) {
+    	return getSubObjectProperties(pe, false).entities();
+    }
+
     /**
      * Gets the set of <a href="#spe">simplified object property expressions</a> that are the strict
      * (potentially direct) super properties of the specified object property expression with
@@ -764,6 +1117,39 @@ default boolean isEntailed(OWLAxiom... axioms) {
     NodeSet<OWLObjectPropertyExpression> getSuperObjectProperties(OWLObjectPropertyExpression pe,
         boolean direct);
 
+    /**
+     * Gets the set of <a href="#spe">simplified object property expressions</a> that are the strict
+     * (potentially direct) super properties of the specified object property expression with
+     * respect to the imports closure of the root ontology. Note that the properties are returned as
+     * a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @param direct Specifies if the direct super properties should be retrived ( {@code true}) or
+     * if the all super properties (ancestors) should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} of <a href="#spe">simplified object
+     * property expressions</a>, such that for each <a href="#spe">simplified object property
+     * expression</a>, {@code P}, in the {@code NodeSet}, the set of reasoner axioms entails {@code
+     * DirectSubObjectPropertyOf(pe, P)}. <br> If direct is {@code false}, a {@code NodeSet} of <a
+     * href="#spe">simplified object property expressions</a>, such that for each <a
+     * href="#spe">simplified object property expression</a>, {@code P}, in the {@code NodeSet}, the
+     * set of reasoner axioms entails {@code StrictSubObjectPropertyOf(pe, P)}. <br> If {@code pe}
+     * is equivalent to {@code owl:topObjectProperty} then the empty {@code NodeSet} will be
+     * returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLObjectPropertyExpression> superObjectProperties(OWLObjectPropertyExpression pe, boolean direct) {
+    	return getSuperObjectProperties(pe, direct).entities();
+    }
+
     /**
      * @param pe The object property expression whose strict (direct) super properties are to be
      * retrieved.
@@ -789,6 +1175,31 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperObjectProperties(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @param depth Specifies if the direct super properties should be retrived ( {@code DIRECT}) or
+     * if the all super properties (ancestors) should be retrieved ({@code ALL}).
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} of <a href="#spe">simplified object
+     * property expressions</a>, such that for each <a href="#spe">simplified object property
+     * expression</a>, {@code P}, in the {@code NodeSet}, the set of reasoner axioms entails {@code
+     * DirectSubObjectPropertyOf(pe, P)}. <br> If depth is {@code ALL}, a {@code NodeSet} of <a
+     * href="#spe">simplified object property expressions</a>, such that for each <a
+     * href="#spe">simplified object property expression</a>, {@code P}, in the {@code NodeSet}, the
+     * set of reasoner axioms entails {@code StrictSubObjectPropertyOf(pe, P)}. <br> If {@code pe}
+     * is equivalent to {@code owl:topObjectProperty} then the empty {@code NodeSet} will be
+     * returned.
+     * @see OWLReasoner#getSuperObjectProperties(OWLObjectPropertyExpression, boolean) Gets the set
+     * of <a href="#spe">simplified object property expressions</a> that are the strict (potentially
+     * direct) super properties of the specified object property expression with respect to the
+     * imports closure of the root ontology. Note that the properties are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLObjectPropertyExpression> superObjectProperties(
+    	OWLObjectPropertyExpression pe, InferenceDepth depth) {
+    	return getSuperObjectProperties(pe, depth).entities();
+    }
+
     /**
      * @param pe The object property expression whose strict (direct) super properties are to be
      * retrieved.
@@ -808,6 +1219,25 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperObjectProperties(pe, false);
     }
 
+    /**
+     * @param pe The object property expression whose strict (direct) super properties are to be
+     * retrieved.
+     * @return A {@code NodeSet} of <a href="#spe">simplified object property expressions</a>, such
+     * that for each <a href="#spe">simplified object property expression</a>, {@code P}, in the
+     * {@code NodeSet} , the set of reasoner axioms entails {@code StrictSubObjectPropertyOf(pe,
+     * P)}. <br> If {@code pe} is equivalent to {@code owl:topObjectProperty} then the empty {@code
+     * NodeSet} will be returned.
+     * @see OWLReasoner#getSuperObjectProperties(OWLObjectPropertyExpression, boolean) Gets the set
+     * of all <a href="#spe">simplified object property expressions</a> that are the strict
+     * (potentially direct) super properties of the specified object property expression with
+     * respect to the imports closure of the root ontology. Note that the properties are returned as
+     * a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLObjectPropertyExpression> superObjectProperties(
+		OWLObjectPropertyExpression pe) {
+		return getSuperObjectProperties(pe, false).entities();
+	}
+
     /**
      * Gets the set of <a href="#spe">simplified object property expressions</a> that are equivalent
      * to the specified object property expression with respect to the set of reasoner axioms. The
@@ -835,6 +1265,36 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLObjectPropertyExpression> getEquivalentObjectProperties(OWLObjectPropertyExpression pe);
 
+    /**
+     * Gets the set of <a href="#spe">simplified object property expressions</a> that are equivalent
+     * to the specified object property expression with respect to the set of reasoner axioms. The
+     * properties are returned as a {@link org.semanticweb.owlapi.reasoner.Node}.
+     *
+     * @param pe The object property expression whose equivalent properties are to be retrieved.
+     * @return A node containing the <a href="#spe">simplified object property expressions</a> such
+     * that for each <a href="#spe">simplified object property expression</a>, {@code P}, in the
+     * node, the set of reasoner axioms entails {@code EquivalentObjectProperties(pe P)}. <br> If
+     * {@code pe} is a <a href="#spe">simplified object property expression</a> If {@code pe} is
+     * unsatisfiable with respect to the set of reasoner axioms then the node representing and
+     * containing {@code owl:bottomObjectProperty}, i.e. the bottom node, will be returned. <br> If
+     * {@code pe} is equivalent to {@code owl:topObjectProperty} with respect to the set of reasoner
+     * axioms then the node representing and containing {@code owl:topObjectProperty}, i.e. the top
+     * node, will be returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLObjectPropertyExpression> equivalentObjectProperties(
+    	OWLObjectPropertyExpression pe) {
+		return getEquivalentObjectProperties(pe).entities();
+	}
+
     /**
      * Gets the <a href="#spe">simplified object property expressions</a> that are disjoint with the
      * specified object property expression {@code pe}. The object properties are returned as a
@@ -863,6 +1323,36 @@ default boolean isEntailed(OWLAxiom... axioms) {
     NodeSet<OWLObjectPropertyExpression> getDisjointObjectProperties(
         OWLObjectPropertyExpression pe);
 
+    /**
+     * Gets the <a href="#spe">simplified object property expressions</a> that are disjoint with the
+     * specified object property expression {@code pe}. The object properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The object property expression whose disjoint object properties are to be
+     * retrieved.
+     * @return The return value is a {@code NodeSet} of <a href="#spe">simplified object property
+     * expressions</a>, such that for each <a href="#spe">simplified object property expression</a>,
+     * {@code P}, in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * EquivalentObjectProperties(P, ObjectPropertyComplementOf(pe))} or {@code
+     * StrictSubObjectPropertyOf(P, ObjectPropertyComplementOf(pe))} .
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code object propertyExpression} is not
+     * within the profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of {@code pe} is not contained within the
+     * signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.and the undeclared entity policy
+     * of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLObjectPropertyExpression> disjointObjectProperties(
+		OWLObjectPropertyExpression pe) {
+		return getDisjointObjectProperties(pe).entities();
+	}
+
     /**
      * Gets the set of <a href="#spe">simplified object property expressions</a> that are the
      * inverses of the specified object property expression with respect to the imports closure of
@@ -885,6 +1375,31 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLObjectPropertyExpression> getInverseObjectProperties(OWLObjectPropertyExpression pe);
 
+    /**
+     * Gets the set of <a href="#spe">simplified object property expressions</a> that are the
+     * inverses of the specified object property expression with respect to the imports closure of
+     * the root ontology. The properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}
+     *
+     * @param pe The property expression whose inverse properties are to be retrieved.
+     * @return A {@code NodeSet} of <a href="#spe">simplified object property expressions</a>, such
+     * that for each simplified object property expression {@code P} in the nodes set, the set of
+     * reasoner axioms entails {@code InverseObjectProperties(pe, P)}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLObjectPropertyExpression> inverseObjectProperties(
+		OWLObjectPropertyExpression pe) {
+		return getInverseObjectProperties(pe).entities();
+	}
+
     /**
      * Gets the named classes that are the direct or indirect domains of this property with respect
      * to the imports closure of the root ontology. The classes are returned as a
@@ -911,6 +1426,34 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getObjectPropertyDomains(OWLObjectPropertyExpression pe, boolean direct);
 
+    /**
+     * Gets the named classes that are the direct or indirect domains of this property with respect
+     * to the imports closure of the root ontology. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet} .
+     *
+     * @param pe The property expression whose domains are to be retrieved.
+     * @param direct Specifies if the direct domains should be retrieved ( {@code true} ), or if all
+     * domains should be retrieved ( {@code false}).
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(pe owl:Thing))} . <br> If
+     * {@code direct} is {@code true}: then if {@code N} is not empty then the return value is
+     * {@code N}, else the return value is the result of {@code getSuperClasses(ObjectSomeValuesFrom(pe
+     * owl:Thing), true)} . <br> If {@code direct} is {@code false}: then the result of {@code
+     * getSuperClasses(ObjectSomeValuesFrom(pe owl:Thing), false)} together with {@code N} if {@code
+     * N} is non-empty.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> objectPropertyDomains(OWLObjectPropertyExpression pe, boolean direct) {
+		return getObjectPropertyDomains(pe, direct).entities();
+	}
+
     /**
      * @param pe The property expression whose domains are to be retrieved.
      * @param depth Specifies if the direct domains should be retrieved ( {@code DIRECT} ), or if
@@ -931,6 +1474,26 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getObjectPropertyDomains(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The property expression whose domains are to be retrieved.
+     * @param depth Specifies if the direct domains should be retrieved ( {@code DIRECT} ), or if
+     * all domains should be retrieved ( {@code ALL}).
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(pe owl:Thing))} . <br> If
+     * {@code direct} is {@code DIRECT}: then if {@code N} is not empty then the return value is
+     * {@code N}, else the return value is the result of {@code getSuperClasses(ObjectSomeValuesFrom(pe
+     * owl:Thing), true)} . <br> If {@code direct} is {@code ALL}: then the result of {@code
+     * getSuperClasses(ObjectSomeValuesFrom(pe owl:Thing), false)} together with {@code N} if {@code
+     * N} is non-empty.
+     * @see OWLReasoner#getObjectPropertyDomains(OWLObjectPropertyExpression, boolean) Gets the
+     * named classes that are the direct or indirect domains of this property with respect to the
+     * imports closure of the root ontology. The classes are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet} .
+     */
+    default Stream<OWLClass> objectPropertyDomains(OWLObjectPropertyExpression pe,
+    	InferenceDepth depth) {
+		return getObjectPropertyDomains(pe, depth).entities();
+	}
+
     /**
      * @param pe The property expression whose domains are to be retrieved.
      * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(pe owl:Thing))} . <br>
@@ -945,6 +1508,20 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getObjectPropertyDomains(pe, false);
     }
 
+    /**
+     * @param pe The property expression whose domains are to be retrieved.
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(pe owl:Thing))} . <br>
+     * Return the result of {@code getSuperClasses(ObjectSomeValuesFrom(pe owl:Thing), false)}
+     * together with {@code N} if {@code N} is non-empty.
+     * @see OWLReasoner#getObjectPropertyDomains(OWLObjectPropertyExpression, boolean) Gets the
+     * named classes that are the direct or indirect domains of this property with respect to the
+     * imports closure of the root ontology. The classes are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet} .
+     */
+    default Stream<OWLClass> objectPropertyDomains(OWLObjectPropertyExpression pe) {
+		return getObjectPropertyDomains(pe).entities();
+	}
+
     /**
      * Gets the named classes that are the direct or indirect ranges of this property with respect
      * to the imports closure of the root ontology. The classes are returned as a
@@ -971,6 +1548,34 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getObjectPropertyRanges(OWLObjectPropertyExpression pe, boolean direct);
 
+    /**
+     * Gets the named classes that are the direct or indirect ranges of this property with respect
+     * to the imports closure of the root ontology. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet} .
+     *
+     * @param pe The property expression whose ranges are to be retrieved.
+     * @param direct Specifies if the direct ranges should be retrieved ( {@code true} ), or if all
+     * ranges should be retrieved ( {@code false}).
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing))} . <br> If {@code direct} is {@code true}: then if {@code N} is not empty then
+     * the return value is {@code N}, else the return value is the result of {@code
+     * getSuperClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true)} . <br> If {@code
+     * direct} is {@code false}: then the result of {@code getSuperClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing), false)} together with {@code N} if {@code N} is non-empty.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> objectPropertyRanges(OWLObjectPropertyExpression pe, boolean direct) {
+		return getObjectPropertyRanges(pe, direct).entities();
+	}
+
     /**
      * @param pe The property expression whose ranges are to be retrieved.
      * @param depth Specifies if the direct ranges should be retrieved ( {@code DIRECT} ), or if all
@@ -991,6 +1596,26 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getObjectPropertyRanges(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The property expression whose ranges are to be retrieved.
+     * @param depth Specifies if the direct ranges should be retrieved ( {@code DIRECT} ), or if all
+     * ranges should be retrieved ( {@code ALL}).
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing))} . <br> If {@code depth} is {@code DIRECT}: then if {@code N} is not empty then
+     * the return value is {@code N}, else the return value is the result of {@code
+     * getSuperClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe) owl:Thing), true)} . <br> If {@code
+     * depth} is {@code ALL}: then the result of {@code getSuperClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing), false)} together with {@code N} if {@code N} is non-empty.
+     * @see OWLReasoner#getObjectPropertyRanges(OWLObjectPropertyExpression, boolean) Gets the named
+     * classes that are the direct or indirect ranges of this property with respect to the imports
+     * closure of the root ontology. The classes are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet} .
+     */
+    default Stream<OWLClass> objectPropertyRanges(OWLObjectPropertyExpression pe,
+    InferenceDepth depth) {
+		return getObjectPropertyRanges(pe, depth).entities();
+	}
+
     /**
      * @param pe The property expression whose ranges are to be retrieved.
      * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
@@ -1014,6 +1639,29 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getObjectPropertyRanges(pe, false);
     }
 
+    /**
+     * @param pe The property expression whose ranges are to be retrieved.
+     * @return Let {@code N = getEquivalentClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing))} . <br> Return the result of {@code getSuperClasses(ObjectSomeValuesFrom(ObjectInverseOf(pe)
+     * owl:Thing), false)} together with {@code N} if {@code N} is non-empty.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     * @see OWLReasoner#getObjectPropertyRanges(OWLObjectPropertyExpression, boolean) Gets the named
+     * classes that are the direct or indirect ranges of this property with respect to the imports
+     * closure of the root ontology. The classes are returned as a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet} .
+     */
+    default Stream<OWLClass> objectPropertyRanges(OWLObjectPropertyExpression pe) {
+		return getObjectPropertyRanges(pe, false).entities();
+	}
+
     // Methods for dealing with the data property hierarchy
 
     /**
@@ -1027,6 +1675,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLDataProperty> getTopDataPropertyNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the top node (containing {@code owl:topDataProperty})
+     * in the data property hierarchy.
+     *
+     * @return A {@code Node}, containing {@code owl:topDataProperty}, that is the top node in the
+     * data property hierarchy. This {@code Node} is essentially equal to the {@code Node} returned
+     * by calling {@link #getEquivalentDataProperties(org.semanticweb.owlapi.model.OWLDataProperty)}
+     * with a parameter of {@code owl:topDataProperty}.
+     */
+    default Stream<OWLDataProperty> topDataPropertyNode() {
+		return getTopDataPropertyNode().entities();
+	}
+
     /**
      * Gets the {@code Node} corresponding to the bottom node (containing
      * {@code owl:bottomDataProperty}) in the data property hierarchy.
@@ -1038,6 +1699,19 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLDataProperty> getBottomDataPropertyNode();
 
+    /**
+     * Gets the {@code Node} corresponding to the bottom node (containing
+     * {@code owl:bottomDataProperty}) in the data property hierarchy.
+     *
+     * @return A {@code Node}, containing {@code owl:bottomDataProperty}, that is the bottom node in
+     * the data property hierarchy. This {@code Node} is essentially equal to the {@code Node} that
+     * will be returned by calling {@link #getEquivalentDataProperties(org.semanticweb.owlapi.model.OWLDataProperty)}
+     * with a parameter of {@code owl:bottomDataProperty}.
+     */
+    default Stream<OWLDataProperty> bottomDataPropertyNode() {
+		return getBottomDataPropertyNode().entities();
+	}
+
     /**
      * Gets the set of named data properties that are the strict (potentially direct) subproperties
      * of the specified data property expression with respect to the imports closure of the root
@@ -1065,6 +1739,35 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLDataProperty> getSubDataProperties(OWLDataProperty pe, boolean direct);
 
+    /**
+     * Gets the set of named data properties that are the strict (potentially direct) subproperties
+     * of the specified data property expression with respect to the imports closure of the root
+     * ontology. Note that the properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The data property whose strict (direct) subproperties are to be retrieved.
+     * @param direct Specifies if the direct subproperties should be retrived ( {@code true}) or if
+     * the all subproperties (descendants) should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} such that for each property {@code P} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubDataPropertyOf(P,
+     * pe)}. <br> If direct is {@code false}, a {@code NodeSet} such that for each property {@code
+     * P} in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * StrictSubDataPropertyOf(P, pe)}. <br> If {@code pe} is equivalent to {@code
+     * owl:bottomDataProperty} then the empty {@code NodeSet} will be returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the data property is not contained within
+     * the signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLDataProperty> subDataProperties(OWLDataProperty pe, boolean direct) {
+		return getSubDataProperties(pe, direct).entities();
+	}
+
     /**
      * @param pe The data property whose strict (direct) subproperties are to be retrieved.
      * @param depth Specifies if the direct subproperties should be retrived ( {@code DIRECT}) or if
@@ -1085,6 +1788,26 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubDataProperties(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The data property whose strict (direct) subproperties are to be retrieved.
+     * @param depth Specifies if the direct subproperties should be retrived ( {@code DIRECT}) or if
+     * the all subproperties (descendants) should be retrieved ({@code ALL}).
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} such that for each property {@code P}
+     * in the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubDataPropertyOf(P,
+     * pe)}. <br> If depth is {@code ALL}, a {@code NodeSet} such that for each property {@code P}
+     * in the {@code NodeSet} the set of reasoner axioms entails {@code StrictSubDataPropertyOf(P,
+     * pe)}. <br> If {@code pe} is equivalent to {@code owl:bottomDataProperty} then the empty
+     * {@code NodeSet} will be returned.
+     * @see OWLReasoner#getSubDataProperties(OWLDataProperty, boolean) Gets the set of named data
+     * properties that are the strict (potentially direct) subproperties of the specified data
+     * property expression with respect to the imports closure of the root ontology. Note that the
+     * properties are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLDataProperty> subDataProperties(OWLDataProperty pe,
+    	InferenceDepth depth) {
+		return getSubDataProperties(pe, depth).entities();
+	}
+
     /**
      * @param pe The data property whose strict (direct) subproperties are to be retrieved.
      * @return a {@code NodeSet} such that for each property {@code P} in the {@code NodeSet} the
@@ -1100,6 +1823,21 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSubDataProperties(pe, false);
     }
 
+    /**
+     * @param pe The data property whose strict (direct) subproperties are to be retrieved.
+     * @return a {@code NodeSet} such that for each property {@code P} in the {@code NodeSet} the
+     * set of reasoner axioms entails {@code StrictSubDataPropertyOf(P, pe)}. <br> If {@code pe} is
+     * equivalent to {@code owl:bottomDataProperty} then the empty {@code NodeSet} will be
+     * returned.
+     * @see OWLReasoner#getSubDataProperties(OWLDataProperty, boolean) Gets the set of named data
+     * properties that are the strict (potentially direct) subproperties of the specified data
+     * property expression with respect to the imports closure of the root ontology. Note that the
+     * properties are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLDataProperty> subDataProperties(OWLDataProperty pe) {
+		return getSubDataProperties(pe).entities();
+	}
+
     /**
      * Gets the set of named data properties that are the strict (potentially direct) super
      * properties of the specified data property with respect to the imports closure of the root
@@ -1127,6 +1865,35 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLDataProperty> getSuperDataProperties(OWLDataProperty pe, boolean direct);
 
+    /**
+     * Gets the set of named data properties that are the strict (potentially direct) super
+     * properties of the specified data property with respect to the imports closure of the root
+     * ontology. Note that the properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The data property whose strict (direct) super properties are to be retrieved.
+     * @param direct Specifies if the direct super properties should be retrived ( {@code true}) or
+     * if the all super properties (ancestors) should be retrieved ({@code false}).
+     * @return If direct is {@code true}, a {@code NodeSet} such that for each property {@code P} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubDataPropertyOf(pe,
+     * P)}. <br> If direct is {@code false}, a {@code NodeSet} such that for each property {@code P}
+     * in the {@code NodeSet} the set of reasoner axioms entails {@code StrictSubDataPropertyOf(pe,
+     * P)}. <br> If {@code pe} is equivalent to {@code owl:topDataProperty} then the empty {@code
+     * NodeSet} will be returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the data property is not contained within
+     * the signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLDataProperty> superDataProperties(OWLDataProperty pe, boolean direct) {
+		return getSuperDataProperties(pe, direct).entities();
+	}
+
     /**
      * @param pe The data property whose strict (direct) super properties are to be retrieved.
      * @param depth Specifies if the direct super properties should be retrived ( {@code DIRECT}) or
@@ -1147,6 +1914,26 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperDataProperties(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The data property whose strict (direct) super properties are to be retrieved.
+     * @param depth Specifies if the direct super properties should be retrived ( {@code DIRECT}) or
+     * if the all super properties (ancestors) should be retrieved ({@code ALL}).
+     * @return If depth is {@code DIRECT}, a {@code NodeSet} such that for each property {@code P}
+     * in the {@code NodeSet} the set of reasoner axioms entails {@code DirectSubDataPropertyOf(pe,
+     * P)}. <br> If depth is {@code ALL}, a {@code NodeSet} such that for each property {@code P} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code StrictSubDataPropertyOf(pe,
+     * P)}. <br> If {@code pe} is equivalent to {@code owl:topDataProperty} then the empty {@code
+     * NodeSet} will be returned.
+     * @see OWLReasoner#getSuperDataProperties(OWLDataProperty, boolean) Gets the set of named data
+     * properties that are the strict (potentially direct) super properties of the specified data
+     * property with respect to the imports closure of the root ontology. Note that the properties
+     * are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLDataProperty> superDataProperties(OWLDataProperty pe,
+    	InferenceDepth depth) {
+		return getSuperDataProperties(pe, depth).entities();
+	}
+
     /**
      * @param pe The data property whose strict (direct) super properties are to be retrieved.
      * @return a {@code NodeSet} such that for each property {@code P} in the {@code NodeSet} the
@@ -1161,6 +1948,20 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getSuperDataProperties(pe, false);
     }
 
+    /**
+     * @param pe The data property whose strict (direct) super properties are to be retrieved.
+     * @return a {@code NodeSet} such that for each property {@code P} in the {@code NodeSet} the
+     * set of reasoner axioms entails {@code StrictSubDataPropertyOf(pe, P)}. <br> If {@code pe} is
+     * equivalent to {@code owl:topDataProperty} then the empty {@code NodeSet} will be returned.
+     * @see OWLReasoner#getSuperDataProperties(OWLDataProperty, boolean) Gets the set of named data
+     * properties that are the strict (potentially direct) super properties of the specified data
+     * property with respect to the imports closure of the root ontology. Note that the properties
+     * are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLDataProperty> superDataProperties(OWLDataProperty pe) {
+		return getSuperDataProperties(pe, false).entities();
+	}
+
     /**
      * Gets the set of named data properties that are equivalent to the specified data property
      * expression with respect to the imports closure of the root ontology. The properties are
@@ -1177,15 +1978,67 @@ default boolean isEntailed(OWLAxiom... axioms) {
      * owl:topDataProperty}, i.e. the top node, will be returned <br> .
      * @throws InconsistentOntologyException if the imports closure of the root ontology is
      * inconsistent
-     * @throws FreshEntitiesException if the signature of the data property expression is not
-     * contained within the signature of the imports closure of the root ontology and the undeclared
-     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws FreshEntitiesException if the signature of the data property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    Node<OWLDataProperty> getEquivalentDataProperties(OWLDataProperty pe);
+
+    /**
+     * Gets the set of named data properties that are equivalent to the specified data property
+     * expression with respect to the imports closure of the root ontology. The properties are
+     * returned as a {@link org.semanticweb.owlapi.reasoner.Node}.
+     *
+     * @param pe The data property expression whose equivalent properties are to be retrieved.
+     * @return A node containing the named data properties such that for each named data property
+     * {@code P} in the node, the set of reasoner axioms entails {@code EquivalentDataProperties(pe
+     * P)}. <br> If {@code pe} is a named data property then {@code pe} will be contained in the
+     * node. <br> If {@code pe} is unsatisfiable with respect to the set of reasoner axioms then the
+     * node representing and containing {@code owl:bottomDataProperty}, i.e. the bottom node, will
+     * be returned. <br> If {@code ce} is equivalent to {@code owl:topDataProperty} with respect to
+     * the set of reasoner axioms then the node representing and containing {@code
+     * owl:topDataProperty}, i.e. the top node, will be returned <br> .
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the data property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLDataProperty> equivalentDataProperties(OWLDataProperty pe) {
+		return getEquivalentDataProperties(pe).entities();
+	}
+
+    /**
+     * Gets the data properties that are disjoint with the specified data property expression
+     * {@code pe}. The data properties are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param pe The data property expression whose disjoint data properties are to be retrieved.
+     * @return The return value is a {@code NodeSet} such that for each data property {@code P} in
+     * the {@code NodeSet} the set of reasoner axioms entails {@code EquivalentDataProperties(P,
+     * DataPropertyComplementOf(pe))} or {@code StrictSubDataPropertyOf(P,
+     * DataPropertyComplementOf(pe))} .
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if {@code data propertyExpression} is not within
+     * the profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of {@code pe} is not contained within the
+     * signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
      * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
      * particular reason (for example if reasoning was cancelled by a client process)
      * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
      * {@link #getTimeOut()}.
      */
-    Node<OWLDataProperty> getEquivalentDataProperties(OWLDataProperty pe);
+    NodeSet<OWLDataProperty> getDisjointDataProperties(OWLDataPropertyExpression pe);
 
     /**
      * Gets the data properties that are disjoint with the specified data property expression
@@ -1209,7 +2062,9 @@ default boolean isEntailed(OWLAxiom... axioms) {
      * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
      * {@link #getTimeOut()}.
      */
-    NodeSet<OWLDataProperty> getDisjointDataProperties(OWLDataPropertyExpression pe);
+    default Stream<OWLDataProperty> disjointDataProperties(OWLDataProperty pe) {
+		return getDisjointDataProperties(pe).entities();
+	}
 
     /**
      * Gets the named classes that are the direct or indirect domains of this property with respect
@@ -1237,6 +2092,34 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getDataPropertyDomains(OWLDataProperty pe, boolean direct);
 
+    /**
+     * Gets the named classes that are the direct or indirect domains of this property with respect
+     * to the imports closure of the root ontology. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet} .
+     *
+     * @param pe The property expression whose domains are to be retrieved.
+     * @param direct Specifies if the direct domains should be retrieved ( {@code true} ), or if all
+     * domains should be retrieved ( {@code false}).
+     * @return Let {@code N = getEquivalentClasses(DataSomeValuesFrom(pe rdfs:Literal))} . <br> If
+     * {@code direct} is {@code true}: then if {@code N} is not empty then the return value is
+     * {@code N}, else the return value is the result of {@code getSuperClasses(DataSomeValuesFrom(pe
+     * rdfs:Literal), true)} . <br> If {@code direct} is {@code false}: then the result of {@code
+     * getSuperClasses(DataSomeValuesFrom(pe rdfs:Literal), false)} together with {@code N} if
+     * {@code N} is non-empty. <br> (Note, {@code rdfs:Literal} is the top datatype).
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the object property expression is not
+     * contained within the signature of the imports closure of the root ontology and the undeclared
+     * entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> dataPropertyDomains(OWLDataProperty pe, boolean direct) {
+		return getDataPropertyDomains(pe, direct).entities();
+	}
+
     /**
      * @param pe The property expression whose domains are to be retrieved.
      * @param depth Specifies if the direct domains should be retrieved ( {@code DIRECT} ), or if
@@ -1256,6 +2139,25 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getDataPropertyDomains(pe, depth.isDirectOnly());
     }
 
+    /**
+     * @param pe The property expression whose domains are to be retrieved.
+     * @param depth Specifies if the direct domains should be retrieved ( {@code DIRECT} ), or if
+     * all domains should be retrieved ( {@code ALL}).
+     * @return Let {@code N = getEquivalentClasses(DataSomeValuesFrom(pe rdfs:Literal))} . <br> If
+     * {@code depth} is {@code DIRECT}: then if {@code N} is not empty then the return value is
+     * {@code N}, else the return value is the result of {@code getSuperClasses(DataSomeValuesFrom(pe
+     * rdfs:Literal), true)} . <br> If {@code direct} is {@code ALL}: then the result of {@code
+     * getSuperClasses(DataSomeValuesFrom(pe rdfs:Literal), false)} together with {@code N} if
+     * {@code N} is non-empty. <br> (Note, {@code rdfs:Literal} is the top datatype).
+     * @see OWLReasoner#getDataPropertyDomains(OWLDataProperty, boolean) Gets the named classes that
+     * are the direct or indirect domains of this property with respect to the imports closure of
+     * the root ontology. The classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}
+     * .
+     */
+    default Stream<OWLClass> dataPropertyDomains(OWLDataProperty pe, InferenceDepth depth) {
+		return getDataPropertyDomains(pe, depth.isDirectOnly()).entities();
+	}
+
     /**
      * @param pe The property expression whose domains are to be retrieved.
      * @return Let {@code N = getEquivalentClasses(DataSomeValuesFrom(pe rdfs:Literal))} . <br>
@@ -1271,6 +2173,21 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getDataPropertyDomains(pe, false);
     }
 
+    /**
+     * @param pe The property expression whose domains are to be retrieved.
+     * @return Let {@code N = getEquivalentClasses(DataSomeValuesFrom(pe rdfs:Literal))} . <br>
+     * Return the result of {@code getSuperClasses(DataSomeValuesFrom(pe rdfs:Literal), false)}
+     * together with {@code N} if {@code N} is non-empty. <br> (Note, {@code rdfs:Literal} is the
+     * top datatype).
+     * @see OWLReasoner#getDataPropertyDomains(OWLDataProperty, boolean) Gets the named classes that
+     * are the direct or indirect domains of this property with respect to the imports closure of
+     * the root ontology. The classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}
+     * .
+     */
+    default Stream<OWLClass> dataPropertyDomains(OWLDataProperty pe) {
+		return getDataPropertyDomains(pe, false).entities();
+	}
+
     // Methods for dealing with individuals and their types
 
     /**
@@ -1297,6 +2214,32 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLClass> getTypes(OWLNamedIndividual ind, boolean direct);
 
+    /**
+     * Gets the named classes which are (potentially direct) types of the specified named
+     * individual. The classes are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ind The individual whose types are to be retrieved.
+     * @param direct Specifies if the direct types should be retrieved ( {@code true}), or if all
+     * types should be retrieved ( {@code false}).
+     * @return If {@code direct} is {@code true}, a {@code NodeSet} containing named classes such
+     * that for each named class {@code C} in the node set, the set of reasoner axioms entails
+     * {@code DirectClassAssertion(C, ind)}. <br> If {@code direct} is {@code false}, a {@code
+     * NodeSet} containing named classes such that for each named class {@code C} in the node set,
+     * the set of reasoner axioms entails {@code ClassAssertion(C, ind)}. <br>
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the individual is not contained within the
+     * signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLClass> types(OWLNamedIndividual ind, boolean direct) {
+		return getTypes(ind, direct).entities();
+	}
+
     /**
      * @param ind The individual whose types are to be retrieved.
      * @param depth Specifies if the direct types should be retrieved ( {@code DIRECT} ), or if all
@@ -1314,6 +2257,23 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getTypes(ind, depth.isDirectOnly());
     }
 
+    /**
+     * @param ind The individual whose types are to be retrieved.
+     * @param depth Specifies if the direct types should be retrieved ( {@code DIRECT} ), or if all
+     * types should be retrieved ( {@code ALL}).
+     * @return If {@code depth} is {@code DIRECT}, a {@code NodeSet} containing named classes such
+     * that for each named class {@code C} in the node set, the set of reasoner axioms entails
+     * {@code DirectClassAssertion(C, ind)}. <br> If {@code depth} is {@code ALL}, a {@code NodeSet}
+     * containing named classes such that for each named class {@code C} in the node set, the set of
+     * reasoner axioms entails {@code ClassAssertion(C, ind)}. <br>
+     * @see OWLReasoner#getTypes(OWLNamedIndividual, boolean) Gets the named classes which are
+     * (potentially direct) types of the specified named individual. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLClass> types(OWLNamedIndividual ind, InferenceDepth depth) {
+		return getTypes(ind, depth).entities();
+	}
+
     /**
      * @param ind The individual whose types are to be retrieved.
      * @return a {@code NodeSet} containing named classes such that for each named class {@code C}
@@ -1326,6 +2286,18 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getTypes(ind, false);
     }
 
+    /**
+     * @param ind The individual whose types are to be retrieved.
+     * @return a {@code NodeSet} containing named classes such that for each named class {@code C}
+     * in the node set, the set of reasoner axioms entails {@code ClassAssertion(C, ind)}. <br>
+     * @see OWLReasoner#getTypes(OWLNamedIndividual, boolean) Gets the named classes which are
+     * (potentially direct) types of the specified named individual. The classes are returned as a
+     * {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLClass> types(OWLNamedIndividual ind) {
+		return getTypes(ind, false).entities();
+	}
+
     /**
      * Gets the individuals which are instances of the specified class expression. The individuals
      * are returned a a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
@@ -1355,6 +2327,37 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLNamedIndividual> getInstances(OWLClassExpression ce, boolean direct);
 
+    /**
+     * Gets the individuals which are instances of the specified class expression. The individuals
+     * are returned a a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ce The class expression whose instances are to be retrieved.
+     * @param direct Specifies if the direct instances should be retrieved ( {@code true}), or if
+     * all instances should be retrieved ( {@code false}).
+     * @return If {@code direct} is {@code true}, a {@code NodeSet} containing named individuals
+     * such that for each named individual {@code j} in the node set, the set of reasoner axioms
+     * entails {@code DirectClassAssertion(ce, j)}. <br> If {@code direct} is {@code false}, a
+     * {@code NodeSet} containing named individuals such that for each named individual {@code j} in
+     * the node set, the set of reasoner axioms entails {@code ClassAssertion(ce, j)}. <br> If ce is
+     * unsatisfiable with respect to the set of reasoner axioms then the empty {@code NodeSet} is
+     * returned.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws ClassExpressionNotInProfileException if the class expression {@code ce} is not in the
+     * profile that is supported by this reasoner.
+     * @throws FreshEntitiesException if the signature of the class expression is not contained
+     * within the signature of the imports closure of the root ontology and the undeclared entity
+     * policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     * @see org.semanticweb.owlapi.reasoner.IndividualNodeSetPolicy
+     */
+    default Stream<OWLNamedIndividual> instances(OWLClassExpression ce, boolean direct) {
+		return getInstances(ce, direct).entities();
+	}
+
     /**
      * @param ce The class expression whose instances are to be retrieved.
      * @param depth Specifies if the direct instances should be retrieved ( {@code DIRECT}), or if
@@ -1374,6 +2377,25 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getInstances(ce, depth.isDirectOnly());
     }
 
+    /**
+     * @param ce The class expression whose instances are to be retrieved.
+     * @param depth Specifies if the direct instances should be retrieved ( {@code DIRECT}), or if
+     * all instances should be retrieved ( {@code ALL}).
+     * @return If {@code depth} is {@code DIRECT}, a {@code NodeSet} containing named individuals
+     * such that for each named individual {@code j} in the node set, the set of reasoner axioms
+     * entails {@code DirectClassAssertion(ce, j)}. <br> If {@code depth} is {@code ALL}, a {@code
+     * NodeSet} containing named individuals such that for each named individual {@code j} in the
+     * node set, the set of reasoner axioms entails {@code ClassAssertion(ce, j)}. <br> If ce is
+     * unsatisfiable with respect to the set of reasoner axioms then the empty {@code NodeSet} is
+     * returned.
+     * @see OWLReasoner#getInstances(OWLClassExpression, boolean) Gets the individuals which are
+     * instances of the specified class expression. The individuals are returned a a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLNamedIndividual> instances(OWLClassExpression ce, InferenceDepth depth) {
+		return getInstances(ce, depth).entities();
+	}
+
     /**
      * @param ce The class expression whose instances are to be retrieved.
      * @return a {@code NodeSet} containing named individuals such that for each named individual
@@ -1388,6 +2410,20 @@ default boolean isEntailed(OWLAxiom... axioms) {
         return getInstances(ce, false);
     }
 
+    /**
+     * @param ce The class expression whose instances are to be retrieved.
+     * @return a {@code NodeSet} containing named individuals such that for each named individual
+     * {@code j} in the node set, the set of reasoner axioms entails {@code ClassAssertion(ce, j)}.
+     * <br> If ce is unsatisfiable with respect to the set of reasoner axioms then the empty {@code
+     * NodeSet} is returned.
+     * @see OWLReasoner#getInstances(OWLClassExpression, boolean) Gets the individuals which are
+     * instances of the specified class expression. The individuals are returned a a {@link
+     * org.semanticweb.owlapi.reasoner.NodeSet}.
+     */
+    default Stream<OWLNamedIndividual> instances(OWLClassExpression ce) {
+		return getInstances(ce, false).entities();
+	}
+
     /**
      * Gets the object property values for the specified individual and object property expression.
      * The individuals are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
@@ -1412,6 +2448,32 @@ default boolean isEntailed(OWLAxiom... axioms) {
     NodeSet<OWLNamedIndividual> getObjectPropertyValues(OWLNamedIndividual ind,
         OWLObjectPropertyExpression pe);
 
+    /**
+     * Gets the object property values for the specified individual and object property expression.
+     * The individuals are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ind The individual that is the subject of the object property values
+     * @param pe The object property expression whose values are to be retrieved for the specified
+     * individual
+     * @return A {@code NodeSet} containing named individuals such that for each individual {@code
+     * j} in the node set, the set of reasoner axioms entails {@code ObjectPropertyAssertion(pe ind
+     * j)}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the individual and property expression is
+     * not contained within the signature of the imports closure of the root ontology and the
+     * undeclared entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     * @see org.semanticweb.owlapi.reasoner.IndividualNodeSetPolicy
+     */
+    default Stream<OWLNamedIndividual> objectPropertyValues(OWLNamedIndividual ind,
+    	OWLObjectPropertyExpression pe) {
+		return getObjectPropertyValues(ind, pe).entities();
+	}
+
     /**
      * Gets the data property values for the specified individual and data property expression. The
      * values are a set of literals. Note that the results are not guaranteed to be complete for
@@ -1436,6 +2498,32 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Set<OWLLiteral> getDataPropertyValues(OWLNamedIndividual ind, OWLDataProperty pe);
 
+    /**
+     * Gets the data property values for the specified individual and data property expression. The
+     * values are a set of literals. Note that the results are not guaranteed to be complete for
+     * this method. The reasoner may also return canonical literals or they may be in a form that
+     * bears a resemblance to the syntax of the literals in the root ontology imports closure.
+     *
+     * @param ind The individual that is the subject of the data property values
+     * @param pe The data property expression whose values are to be retrieved for the specified
+     * individual
+     * @return A set of {@code OWLLiteral}s containing literals such that for each literal {@code l}
+     * in the set, the set of reasoner axioms entails {@code DataPropertyAssertion(pe ind l)}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the individual and property expression is
+     * not contained within the signature of the imports closure of the root ontology and the
+     * undeclared entity policy of this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     * @see org.semanticweb.owlapi.reasoner.IndividualNodeSetPolicy
+     */
+    default Stream<OWLLiteral> dataPropertyValues(OWLNamedIndividual ind, OWLDataProperty pe) {
+		return getDataPropertyValues(ind, pe).stream();
+	}
+
     /**
      * Gets the individuals that are the same as the specified individual.
      *
@@ -1455,6 +2543,27 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     Node<OWLNamedIndividual> getSameIndividuals(OWLNamedIndividual ind);
 
+    /**
+     * Gets the individuals that are the same as the specified individual.
+     *
+     * @param ind The individual whose same individuals are to be retrieved.
+     * @return A node containing individuals such that for each individual {@code j} in the node,
+     * the root ontology imports closure entails {@code SameIndividual(j, ind)}. Note that the node
+     * will contain {@code j}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the individual is not contained within the
+     * signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLNamedIndividual> sameIndividuals(OWLNamedIndividual ind) {
+		return getSameIndividuals(ind).entities();
+	}
+
     /**
      * Gets the individuals which are entailed to be different from the specified individual. The
      * individuals are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
@@ -1475,6 +2584,28 @@ default boolean isEntailed(OWLAxiom... axioms) {
      */
     NodeSet<OWLNamedIndividual> getDifferentIndividuals(OWLNamedIndividual ind);
 
+    /**
+     * Gets the individuals which are entailed to be different from the specified individual. The
+     * individuals are returned as a {@link org.semanticweb.owlapi.reasoner.NodeSet}.
+     *
+     * @param ind The individual whose different individuals are to be returned.
+     * @return A {@code NodeSet} containing {@code OWLNamedIndividual} s such that for each
+     * individual {@code i} in the {@code NodeSet} the set of reasoner axioms entails {@code
+     * DifferentIndividuals(ind, i)}.
+     * @throws InconsistentOntologyException if the imports closure of the root ontology is
+     * inconsistent
+     * @throws FreshEntitiesException if the signature of the individual is not contained within the
+     * signature of the imports closure of the root ontology and the undeclared entity policy of
+     * this reasoner is set to {@link FreshEntityPolicy#DISALLOW}.
+     * @throws ReasonerInterruptedException if the reasoning process was interrupted for any
+     * particular reason (for example if reasoning was cancelled by a client process)
+     * @throws TimeOutException if the reasoner timed out during a basic reasoning operation. See
+     * {@link #getTimeOut()}.
+     */
+    default Stream<OWLNamedIndividual> differentIndividuals(OWLNamedIndividual ind) {
+		return getDifferentIndividuals(ind).entities();
+	}
+
     /**
      * Gets the time out (in milliseconds) for the most basic reasoning operations. That is the
      * maximum time for a satisfiability test, subsumption test etc. The time out should be set at
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredEquivalentObjectPropertyAxiomGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredEquivalentObjectPropertyAxiomGenerator.java
index a4b3e6cdb5..2008501f3b 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredEquivalentObjectPropertyAxiomGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredEquivalentObjectPropertyAxiomGenerator.java
@@ -31,7 +31,8 @@
 
     @Override
     protected void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
-        OWLDataFactory dataFactory, Set<OWLEquivalentObjectPropertiesAxiom> result) {
+        OWLDataFactory dataFactory, Set<OWLEquivalentObjectPropertiesAxiom> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties) {
         Set<OWLObjectPropertyExpression> equivProps =
             asUnorderedSet(reasoner.getEquivalentObjectProperties(entity).entities());
         equivProps.add(entity);
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredInverseObjectPropertiesAxiomGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredInverseObjectPropertiesAxiomGenerator.java
index 8e6a20548d..1670e167b8 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredInverseObjectPropertiesAxiomGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredInverseObjectPropertiesAxiomGenerator.java
@@ -29,9 +29,12 @@
 
     @Override
     protected void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
-        OWLDataFactory dataFactory, Set<OWLInverseObjectPropertiesAxiom> result) {
+        OWLDataFactory dataFactory, Set<OWLInverseObjectPropertiesAxiom> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties) {
         for (OWLObjectPropertyExpression prop : reasoner.getInverseObjectProperties(entity)) {
-            result.add(dataFactory.getOWLInverseObjectPropertiesAxiom(entity, prop));
+            if (!prop.isAnonymous()) {
+                result.add(dataFactory.getOWLInverseObjectPropertiesAxiom(entity, prop));
+            }
         }
     }
 
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyAxiomGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyAxiomGenerator.java
index 12c0a6f69a..de4412dc64 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyAxiomGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyAxiomGenerator.java
@@ -12,11 +12,16 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.util;
 
+import java.util.Set;
 import java.util.stream.Stream;
 
+import org.semanticweb.owlapi.model.OWLDataFactory;
+import org.semanticweb.owlapi.model.OWLObject;
 import org.semanticweb.owlapi.model.OWLObjectProperty;
 import org.semanticweb.owlapi.model.OWLObjectPropertyAxiom;
+import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
 import org.semanticweb.owlapi.model.OWLOntology;
+import org.semanticweb.owlapi.reasoner.OWLReasoner;
 
 /**
  * @param <A> the axiom type
@@ -30,4 +35,22 @@
     protected Stream<OWLObjectProperty> getEntities(OWLOntology ont) {
         return ont.objectPropertiesInSignature();
     }
+
+    @Override
+    protected final void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
+        OWLDataFactory dataFactory, Set<A> result) {
+        OWLOntology current = reasoner.getRootOntology();
+        OWLObjectPropertyManager objectPropertyManager = new OWLObjectPropertyManager(current);
+        addAxioms(entity, reasoner, dataFactory, result,
+            objectPropertyManager.getNonSimpleProperties());
+    }
+
+    protected abstract void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
+        OWLDataFactory dataFactory, Set<A> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties);
+
+    protected boolean simple(Set<OWLObjectPropertyExpression> nonSimpleProperties, OWLObject e) {
+        return nonSimpleProperties.contains(e);
+    }
+
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyCharacteristicAxiomGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyCharacteristicAxiomGenerator.java
index b4e70a5a2e..92327f768f 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyCharacteristicAxiomGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredObjectPropertyCharacteristicAxiomGenerator.java
@@ -17,7 +17,9 @@
 import org.semanticweb.owlapi.model.OWLDataFactory;
 import org.semanticweb.owlapi.model.OWLObjectProperty;
 import org.semanticweb.owlapi.model.OWLObjectPropertyCharacteristicAxiom;
+import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
 import org.semanticweb.owlapi.model.OWLObjectSomeValuesFrom;
+import org.semanticweb.owlapi.model.OWLOntology;
 import org.semanticweb.owlapi.reasoner.OWLReasoner;
 
 /**
@@ -33,10 +35,9 @@ protected static void addTransitiveAxiomIfEntailed(OWLObjectProperty property,
         OWLObjectPropertyCharacteristicAxiom axiom =
             dataFactory.getOWLTransitiveObjectPropertyAxiom(property);
         if (reasoner.isEntailmentCheckingSupported(axiom.getAxiomType())
-            && reasoner.isEntailed(axiom)) {
-            if (!triviallyTransitiveCheck(property, reasoner, dataFactory)) {
-                result.add(axiom);
-            }
+            && reasoner.isEntailed(axiom)
+            && !triviallyTransitiveCheck(property, reasoner, dataFactory)) {
+            result.add(axiom);
         }
     }
 
@@ -49,7 +50,7 @@ protected static void addTransitiveAxiomIfEntailed(OWLObjectProperty property,
      * @param reasoner reasoner to use for testing
      * @param df data factory
      * @return true if property is trivially transitive, or if entailment checking for
-     * OWLObjectPropertyAssertionAxioms is not supported.
+     *         OWLObjectPropertyAssertionAxioms is not supported.
      */
     private static boolean triviallyTransitiveCheck(OWLObjectProperty property,
         OWLReasoner reasoner, OWLDataFactory df) {
@@ -69,16 +70,28 @@ protected static void addIfEntailed(OWLObjectPropertyCharacteristicAxiom axiom,
     }
 
     @Override
-    protected void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
-        OWLDataFactory dataFactory, Set<OWLObjectPropertyCharacteristicAxiom> result) {
-        addIfEntailed(dataFactory.getOWLFunctionalObjectPropertyAxiom(entity), reasoner, result);
-        addIfEntailed(dataFactory.getOWLInverseFunctionalObjectPropertyAxiom(entity), reasoner,
-            result);
-        addIfEntailed(dataFactory.getOWLSymmetricObjectPropertyAxiom(entity), reasoner, result);
-        addIfEntailed(dataFactory.getOWLAsymmetricObjectPropertyAxiom(entity), reasoner, result);
-        addTransitiveAxiomIfEntailed(entity, reasoner, dataFactory, result);
-        addIfEntailed(dataFactory.getOWLReflexiveObjectPropertyAxiom(entity), reasoner, result);
-        addIfEntailed(dataFactory.getOWLIrreflexiveObjectPropertyAxiom(entity), reasoner, result);
+    protected void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner, OWLDataFactory df,
+        Set<OWLObjectPropertyCharacteristicAxiom> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties) {
+        addIfEntailed(df.getOWLSymmetricObjectPropertyAxiom(entity), reasoner, result);
+        addIfEntailed(df.getOWLReflexiveObjectPropertyAxiom(entity), reasoner, result);
+        if (simple(entity, reasoner, nonSimpleProperties)) {
+            addIfEntailed(df.getOWLFunctionalObjectPropertyAxiom(entity), reasoner, result);
+            addIfEntailed(df.getOWLInverseFunctionalObjectPropertyAxiom(entity), reasoner, result);
+            addIfEntailed(df.getOWLAsymmetricObjectPropertyAxiom(entity), reasoner, result);
+            addTransitiveAxiomIfEntailed(entity, reasoner, df, result);
+            addIfEntailed(df.getOWLIrreflexiveObjectPropertyAxiom(entity), reasoner, result);
+        }
+    }
+
+    protected boolean simple(OWLObjectProperty entity, OWLReasoner reasoner,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties) {
+        if (nonSimpleProperties.contains(entity)) {
+            return false;
+        }
+        OWLOntology current = reasoner.getRootOntology();
+        OWLObjectPropertyManager objectPropertyManager = new OWLObjectPropertyManager(current);
+        return !objectPropertyManager.isNonSimple(entity);
     }
 
     @Override
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredOntologyGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredOntologyGenerator.java
index ce1f83e60d..f7faa63492 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredOntologyGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredOntologyGenerator.java
@@ -12,6 +12,8 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.util;
 
+import static org.semanticweb.owlapi.model.parameters.AxiomAnnotations.IGNORE_AXIOM_ANNOTATIONS;
+import static org.semanticweb.owlapi.model.parameters.Imports.INCLUDED;
 import static org.semanticweb.owlapi.util.OWLAPIPreconditions.checkNotNull;
 import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.empty;
 
@@ -117,7 +119,9 @@ public void removeGenerator(InferredAxiomGenerator<?> generator) {
     public void fillOntology(OWLDataFactory df, OWLOntology ontology) {
         checkNotNull(df, "df cannot be null");
         checkNotNull(ontology, "ontology cannot be null");
-        axiomGenerators.stream().flatMap(g -> generate(df, g)).forEach(ontology::add);
+        axiomGenerators.stream().flatMap(g -> generate(df, g))
+            .filter(ax -> !ontology.containsAxiom(ax, INCLUDED, IGNORE_AXIOM_ANNOTATIONS))
+            .forEach(ontology::add);
     }
 
     protected Stream<OWLAxiom> generate(OWLDataFactory df,
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/InferredSubObjectPropertyAxiomGenerator.java b/api/src/main/java/org/semanticweb/owlapi/util/InferredSubObjectPropertyAxiomGenerator.java
index 04ffbe4316..667bf6acc7 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/InferredSubObjectPropertyAxiomGenerator.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/InferredSubObjectPropertyAxiomGenerator.java
@@ -18,8 +18,10 @@
 
 import org.semanticweb.owlapi.model.OWLDataFactory;
 import org.semanticweb.owlapi.model.OWLObjectProperty;
+import org.semanticweb.owlapi.model.OWLObjectPropertyExpression;
 import org.semanticweb.owlapi.model.OWLSubObjectPropertyOfAxiom;
 import org.semanticweb.owlapi.reasoner.OWLReasoner;
+import org.semanticweb.owlapi.search.EntitySearcher;
 
 /**
  * @author Matthew Horridge, The University Of Manchester, Bio-Health Informatics Group
@@ -30,13 +32,33 @@
 
     @Override
     protected void addAxioms(OWLObjectProperty entity, OWLReasoner reasoner,
-        OWLDataFactory dataFactory, Set<OWLSubObjectPropertyOfAxiom> result) {
+        OWLDataFactory dataFactory, Set<OWLSubObjectPropertyOfAxiom> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties) {
         checkNotNull(dataFactory, "dataFactory cannot be null");
         checkNotNull(reasoner, "reasoner cannot be null");
         checkNotNull(result, "result cannot be null");
         checkNotNull(entity, "entity cannot be null");
         reasoner.getSuperObjectProperties(entity, true).entities().forEach(
-            p -> result.add(dataFactory.getOWLSubObjectPropertyOfAxiom(entity, p)));
+            p -> addIfSimple(p, entity, dataFactory, result, nonSimpleProperties, reasoner));
+    }
+
+    protected void addIfSimple(OWLObjectPropertyExpression p, OWLObjectProperty entity,
+        OWLDataFactory dataFactory, Set<OWLSubObjectPropertyOfAxiom> result,
+        Set<OWLObjectPropertyExpression> nonSimpleProperties, OWLReasoner reasoner) {
+        boolean nonSimple = false;
+        boolean inverse = false;
+        if (!simple(nonSimpleProperties, entity)) {
+            nonSimple = true;
+        }
+        if (p.isAnonymous()
+            && EntitySearcher.isTransitive(p.getInverseProperty(), reasoner.getRootOntology())) {
+            inverse = true;
+        }
+        if (!(nonSimple && inverse)) {
+            // having both non simple properties and inverses in an subproperty axiom may cause
+            // exceptions later on
+            result.add(dataFactory.getOWLSubObjectPropertyOfAxiom(entity, p));
+        }
     }
 
     @Override
diff --git a/contract/src/test/java/org/semanticweb/owlapi/api/test/NNFTestCase.java b/contract/src/test/java/org/semanticweb/owlapi/api/test/NNFTestCase.java
index f050ce08ec..db559884d5 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/api/test/NNFTestCase.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/api/test/NNFTestCase.java
@@ -74,9 +74,9 @@ public NNFTestCase(OWLAxiom object, String expected) {
         map.put(b.nop(), "NegativeObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)");
         map.put(b.opa(), "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)");
         map.put(b.opaInv(),
-                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)");
+            "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)");
         map.put(b.opaInvj(),
-                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)");
+            "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)");
         map.put(b.oDom(), "ObjectPropertyDomain(<urn:test#op> <urn:test#c>)");
         map.put(b.oRange(), "ObjectPropertyRange(<urn:test#op> <urn:test#c>)");
         map.put(b.chain(),
diff --git a/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLObjectComponentCollectorTestCase.java b/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLObjectComponentCollectorTestCase.java
index 748b08f369..de3e040f74 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLObjectComponentCollectorTestCase.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLObjectComponentCollectorTestCase.java
@@ -209,13 +209,13 @@
                     "NegativeObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)";
     private static final String AOP =
                     "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)";
-    private static final String INVERSE = "InverseOf(<urn:test#op>)";
+    private static final String INVERSE = "ObjectInverseOf(<urn:test#op>)";
     private static final String AOINV =
-                    "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)";
+                    "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)";
     private static final String JI = "<urn:test#j>";
     private static final String J = "urn:test#j";
     private static final String AOPJ =
-                    "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)";
+                    "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)";
     private static final String OPD =
                     "ObjectPropertyDomain(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#c>)";
     private static final String OPR =
diff --git a/contract/src/test/java/org/semanticweb/owlapi/api/test/StructuralTransformationTestCase.java b/contract/src/test/java/org/semanticweb/owlapi/api/test/StructuralTransformationTestCase.java
index f968a6f777..14b93bc1bf 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/api/test/StructuralTransformationTestCase.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/api/test/StructuralTransformationTestCase.java
@@ -66,14 +66,14 @@ public StructuralTransformationTestCase(OWLAxiom object, String expected) {
         map.put(b.eOp(), "[EquivalentObjectProperties(<urn:test#iri> <urn:test#op> )]");
         map.put(b.fdp(), "[SubClassOf(owl:Thing DataMaxCardinality(1 <urn:test#dp> rdfs:Literal))]");
         map.put(b.fop(), "[SubClassOf(owl:Thing ObjectMaxCardinality(1 <urn:test#op> owl:Thing))]");
-        map.put(b.ifp(), "[SubClassOf(owl:Thing ObjectMaxCardinality(1 InverseOf(<urn:test#op>) owl:Thing))]");
-        map.put(b.iop(), "[SubObjectPropertyOf(<urn:test#op> InverseOf(<urn:test#op>))]");
+        map.put(b.ifp(), "[SubClassOf(owl:Thing ObjectMaxCardinality(1 ObjectInverseOf(<urn:test#op>) owl:Thing))]");
+        map.put(b.iop(), "[SubObjectPropertyOf(<urn:test#op> ObjectInverseOf(<urn:test#op>))]");
         map.put(b.irr(), "[IrreflexiveObjectProperty(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op>)]");
         map.put(b.opa(), "[ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)]");
         map.put(b.opaInv(),
-                        "[ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)]");
+                        "[ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)]");
         map.put(b.opaInvj(),
-                        "[ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)]");
+                        "[ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)]");
         map.put(b.oDom(),
                         "[SubClassOf(<http://www.semanticweb.org/ontology#X0> <urn:test#c>), SubClassOf(<http://www.semanticweb.org/ontology#X1> ObjectAllValuesFrom(<urn:test#op> owl:Nothing)), SubClassOf(owl:Thing ObjectUnionOf(<http://www.semanticweb.org/ontology#X0> <http://www.semanticweb.org/ontology#X1>))]");
         map.put(b.oRange(),
diff --git a/contract/src/test/java/org/semanticweb/owlapi/api/test/VisitorsTestCase.java b/contract/src/test/java/org/semanticweb/owlapi/api/test/VisitorsTestCase.java
index 90e8765922..c3266f3383 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/api/test/VisitorsTestCase.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/api/test/VisitorsTestCase.java
@@ -138,9 +138,9 @@ public VisitorsTestCase(OWLObject object, String expected) {
         map.put(b.nop(), "NegativeObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)");
         map.put(b.opa(), "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#i> <urn:test#i>)");
         map.put(b.opaInv(),
-                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)");
+                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#i>)");
         map.put(b.opaInvj(),
-                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) InverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)");
+                        "ObjectPropertyAssertion(Annotation(<urn:test#ann> \"test\"^^xsd:string) ObjectInverseOf(<urn:test#op>) <urn:test#i> <urn:test#j>)");
         map.put(b.oDom(),
                         "ObjectPropertyDomain(Annotation(<urn:test#ann> \"test\"^^xsd:string) <urn:test#op> <urn:test#c>)");
         map.put(b.oRange(),
diff --git a/tools/src/main/java/com/clarkparsia/owlapi/explanation/BlackBoxExplanation.java b/tools/src/main/java/com/clarkparsia/owlapi/explanation/BlackBoxExplanation.java
index 33f80f9b05..a6ad21b4c6 100755
--- a/tools/src/main/java/com/clarkparsia/owlapi/explanation/BlackBoxExplanation.java
+++ b/tools/src/main/java/com/clarkparsia/owlapi/explanation/BlackBoxExplanation.java
@@ -345,18 +345,24 @@ private void performSlowPruning(OWLClassExpression unsatClass) throws OWLExcepti
      * @throws OWLException the oWL exception
      */
     private boolean isSatisfiable(OWLClassExpression unsatClass) throws OWLException {
-        createDebuggingOntology();
-        OWLReasoner reasoner = getReasonerFactory()
-            .createNonBufferingReasoner(verifyNotNull(debuggingOntology));
-        if (OntologyUtils.containsUnreferencedEntity(verifyNotNull(debuggingOntology),
-            unsatClass)) {
+        try {
+            createDebuggingOntology();
+            OWLReasoner reasoner = getReasonerFactory()
+                .createNonBufferingReasoner(verifyNotNull(debuggingOntology));
+            if (OntologyUtils.containsUnreferencedEntity(verifyNotNull(debuggingOntology), unsatClass)) {
+                reasoner.dispose();
+                return true;
+            }
+            satTestCount++;
+            boolean sat = reasoner.isSatisfiable(unsatClass);
             reasoner.dispose();
-            return true;
+            return sat;
+        } catch (IllegalArgumentException e) {
+            LOGGER.warn(
+                "Illegal argument found - satisfiability cannot be checked for {} because of {}",
+                unsatClass, e);
+            return false;
         }
-        satTestCount++;
-        boolean sat = reasoner.isSatisfiable(unsatClass);
-        reasoner.dispose();
-        return sat;
     }
 
     private void createDebuggingOntology() throws OWLException {
diff --git a/tools/src/main/java/uk/ac/manchester/cs/owlapi/modularity/SyntacticLocalityModuleExtractor.java b/tools/src/main/java/uk/ac/manchester/cs/owlapi/modularity/SyntacticLocalityModuleExtractor.java
index 51a1982b0d..3591af0f8c 100755
--- a/tools/src/main/java/uk/ac/manchester/cs/owlapi/modularity/SyntacticLocalityModuleExtractor.java
+++ b/tools/src/main/java/uk/ac/manchester/cs/owlapi/modularity/SyntacticLocalityModuleExtractor.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Queue;
 import java.util.Set;
+import java.util.function.Predicate;
 import java.util.stream.Stream;
 
 import javax.annotation.Nullable;
@@ -57,7 +58,7 @@
 public class SyntacticLocalityModuleExtractor implements OntologySegmenter {
 
     private static final Logger LOGGER =
-                    LoggerFactory.getLogger(SyntacticLocalityModuleExtractor.class);
+        LoggerFactory.getLogger(SyntacticLocalityModuleExtractor.class);
 
     /**
      * Auxiliary inner class for the representation of the associated ontology and all its
@@ -178,10 +179,26 @@ public int subsetCardinality(boolean[] subset) {
      * @param moduleType the type of module this extractor will construct
      */
     public SyntacticLocalityModuleExtractor(OWLOntologyManager man, Stream<OWLAxiom> axs,
-                    ModuleType moduleType) {
+        ModuleType moduleType) {
+        this(man, axs, moduleType, false);
+    }
+
+    /**
+     * Creates a new module extractor for a subset of a given ontology, its manager, and a specified
+     * type of locality.
+     *
+     * @param man the manager for the associated ontology
+     * @param axs the subset of the ontology as a set of axioms
+     * @param moduleType the type of module this extractor will construct
+     * @param excludeAssertions true if assertions should be excluded
+     */
+    public SyntacticLocalityModuleExtractor(OWLOntologyManager man, Stream<OWLAxiom> axs,
+        ModuleType moduleType, boolean excludeAssertions) {
         this.moduleType = checkNotNull(moduleType, "moduleType cannot be null");
         manager = checkNotNull(man, "man cannot be null");
-        List<OWLAxiom> collect = asList(axs);
+        Predicate<OWLAxiom> filter =
+            ax -> excludeAssertions ? !AxiomType.ABoxAxiomTypes.contains(ax.getAxiomType()) : true;
+        List<OWLAxiom> collect = asList(axs.filter(filter));
         ontologyAxiomSet = new OntologyAxiomSet(collect);
         try {
             ontology = checkNotNull(man.createOntology(collect));
@@ -199,7 +216,7 @@ public SyntacticLocalityModuleExtractor(OWLOntologyManager man, Stream<OWLAxiom>
      * @param moduleType the type of module this extractor will construct
      */
     public SyntacticLocalityModuleExtractor(OWLOntologyManager man, OWLOntology ont,
-                    ModuleType moduleType) {
+        ModuleType moduleType) {
         this(man, asAxiomSet(ont), moduleType);
     }
 
@@ -240,7 +257,7 @@ public ModuleType getModuleType() {
      * @return an array of Booleans representing the module
      */
     boolean[] extractLogicalAxioms(boolean[] subOnt, Set<OWLEntity> signature,
-                    LocalityClass localityClass) {
+        LocalityClass localityClass) {
         boolean[] mod = ontologyAxiomSet.getSubset(false);
         boolean[] q2 = ontologyAxiomSet.cloneSubset(subOnt);
         SyntacticLocalityEvaluator sle = new SyntacticLocalityEvaluator(localityClass);
@@ -286,7 +303,7 @@ public ModuleType getModuleType() {
      * @return a set of axioms representing the module
      */
     Set<OWLAxiom> extract(Set<OWLAxiom> subOnt, Set<OWLEntity> signature,
-                    LocalityClass localityClass) {
+        LocalityClass localityClass) {
         HashSet<OWLAxiom> mod = new HashSet<>();
         HashSet<OWLAxiom> q2 = new HashSet<>(subOnt);
         SyntacticLocalityEvaluator sle = new SyntacticLocalityEvaluator(localityClass);
@@ -330,16 +347,17 @@ public ModuleType getModuleType() {
      */
     Set<OWLAxiom> enrich(Set<OWLAxiom> module, Set<OWLEntity> sig) {
         Set<OWLAxiom> enrichedModule = new HashSet<>(module);
-        LOGGER.info("\nEnriching with declaration axioms, annotation axioms, same/different individual axioms ...");
+        LOGGER.info(
+            "\nEnriching with declaration axioms, annotation axioms, same/different individual axioms ...");
         // Adding all entity declaration axioms
         // Adding all entity annotation axioms
         for (OWLEntity entity : sig) {
             List<OWLDeclarationAxiom> declarationAxioms =
-                            asList(ontology.declarationAxioms(entity));
+                asList(ontology.declarationAxioms(entity));
             enrichedModule.addAll(declarationAxioms);
             if (LOGGER.isInfoEnabled()) {
-                declarationAxioms.forEach(
-                                a -> LOGGER.info("  Added entity declaration axiom:   {}", a));
+                declarationAxioms
+                    .forEach(a -> LOGGER.info("  Added entity declaration axiom:   {}", a));
             }
         }
         Set<IRI> iris = new HashSet<>(sig.size());
@@ -356,19 +374,19 @@ public ModuleType getModuleType() {
         // Adding all different-individuals axioms
         for (OWLEntity entity : sig) {
             if (entity.isOWLNamedIndividual()) {
-                List<OWLSameIndividualAxiom> sameIndividualAxioms = asList(
-                                ontology.sameIndividualAxioms(entity.asOWLNamedIndividual()));
+                List<OWLSameIndividualAxiom> sameIndividualAxioms =
+                    asList(ontology.sameIndividualAxioms(entity.asOWLNamedIndividual()));
                 enrichedModule.addAll(sameIndividualAxioms);
                 if (LOGGER.isInfoEnabled()) {
-                    sameIndividualAxioms.forEach(
-                                    i -> LOGGER.info("  Added same individual axiom:   {}", i));
+                    sameIndividualAxioms
+                        .forEach(i -> LOGGER.info("  Added same individual axiom:   {}", i));
                 }
-                List<OWLDifferentIndividualsAxiom> differentIndividualAxioms = asList(
-                                ontology.differentIndividualAxioms(entity.asOWLNamedIndividual()));
+                List<OWLDifferentIndividualsAxiom> differentIndividualAxioms =
+                    asList(ontology.differentIndividualAxioms(entity.asOWLNamedIndividual()));
                 enrichedModule.addAll(differentIndividualAxioms);
                 if (LOGGER.isInfoEnabled()) {
-                    differentIndividualAxioms.forEach(a -> LOGGER
-                                    .info("  Added different individual axiom:   {}", a));
+                    differentIndividualAxioms
+                        .forEach(a -> LOGGER.info("  Added different individual axiom:   {}", a));
                 }
             }
         }
@@ -397,7 +415,7 @@ void outputSignature(String preamble, Set<OWLEntity> sig) {
      */
     Set<OWLAxiom> extractUnnestedModule(Set<OWLEntity> sig, LocalityClass cls) {
         outputSignature("\nExtracting " + cls + " module for the following seed signature ... ",
-                        sig);
+            sig);
         boolean[] subOnt = ontologyAxiomSet.getSubset(true);
         Set<OWLEntity> signature = new HashSet<>(sig);
         boolean[] module = extractLogicalAxioms(subOnt, signature, cls);
@@ -415,7 +433,7 @@ void outputSignature(String preamble, Set<OWLEntity> sig) {
      * @return the sets the
      */
     static Set<OWLClass> superOrSubClasses(int superOrSubClassLevel, boolean superVsSub,
-                    @Nullable OWLReasoner reasoner, Set<OWLClass> classesInSig) {
+        @Nullable OWLReasoner reasoner, Set<OWLClass> classesInSig) {
         checkNotNull(reasoner);
         assert reasoner != null;
         Set<OWLClass> superOrSubClasses = new HashSet<>();
@@ -423,14 +441,13 @@ void outputSignature(String preamble, Set<OWLEntity> sig) {
             negativeLevel(superVsSub, reasoner, classesInSig, superOrSubClasses);
         } else if (superOrSubClassLevel > 0) {
             positiveLevel(superOrSubClassLevel, superVsSub, reasoner, classesInSig,
-                            superOrSubClasses);
+                superOrSubClasses);
         }
         return superOrSubClasses;
     }
 
     protected static void positiveLevel(int superOrSubClassLevel, boolean superVsSub,
-                    OWLReasoner reasoner, Set<OWLClass> classesInSig,
-                    Set<OWLClass> superOrSubClasses) {
+        OWLReasoner reasoner, Set<OWLClass> classesInSig, Set<OWLClass> superOrSubClasses) {
         Queue<OWLClass> toBeSuClassedNow;
         Queue<OWLClass> toBeSuClassedNext = new LinkedList<>(classesInSig);
         Queue<OWLClass> suClassesToBeAdded = new LinkedList<>();
@@ -438,14 +455,14 @@ protected static void positiveLevel(int superOrSubClassLevel, boolean superVsSub
             toBeSuClassedNow = toBeSuClassedNext;
             toBeSuClassedNext = new LinkedList<>();
             processLayer(superVsSub, reasoner, classesInSig, toBeSuClassedNow, toBeSuClassedNext,
-                            suClassesToBeAdded);
+                suClassesToBeAdded);
         }
         superOrSubClasses.addAll(suClassesToBeAdded);
     }
 
     protected static void processLayer(boolean superVsSub, OWLReasoner reasoner,
-                    Set<OWLClass> classesInSig, Queue<OWLClass> toBeSuClassedNow,
-                    Queue<OWLClass> toBeSuClassedNext, Queue<OWLClass> suClassesToBeAdded) {
+        Set<OWLClass> classesInSig, Queue<OWLClass> toBeSuClassedNow,
+        Queue<OWLClass> toBeSuClassedNext, Queue<OWLClass> suClassesToBeAdded) {
         for (OWLClassExpression ce : toBeSuClassedNow) {
             Stream<OWLClass> suClasses;
             if (superVsSub) {
@@ -454,12 +471,12 @@ protected static void processLayer(boolean superVsSub, OWLReasoner reasoner,
                 suClasses = reasoner.getSubClasses(ce, true).entities();
             }
             suClasses.filter(c -> !classesInSig.contains(c) && suClassesToBeAdded.add(c))
-                            .forEach(toBeSuClassedNext::add);
+                .forEach(toBeSuClassedNext::add);
         }
     }
 
     protected static void negativeLevel(boolean superVsSub, OWLReasoner reasoner,
-                    Set<OWLClass> classesInSig, Set<OWLClass> superOrSubClasses) {
+        Set<OWLClass> classesInSig, Set<OWLClass> superOrSubClasses) {
         for (OWLClassExpression ent : classesInSig) {
             NodeSet<OWLClass> nodes;
             if (superVsSub) {
@@ -481,7 +498,7 @@ protected static void negativeLevel(boolean superVsSub, OWLReasoner reasoner,
      * @return the sets the
      */
     Set<OWLEntity> enrichSignature(Set<OWLEntity> sig, int superClassLevel, int subClassLevel,
-                    @Nullable OWLReasoner reasoner) {
+        @Nullable OWLReasoner reasoner) {
         Set<OWLEntity> enrichedSig = new HashSet<>(sig);
         Set<OWLClass> classesInSig = new HashSet<>();
         for (OWLEntity ent : sig) {
@@ -532,7 +549,7 @@ protected static void negativeLevel(boolean superVsSub, OWLReasoner reasoner,
      */
     @Override
     public Set<OWLAxiom> extract(Set<OWLEntity> sig, int superClassLevel, int subClassLevel,
-                    @Nullable OWLReasoner reasoner) {
+        @Nullable OWLReasoner reasoner) {
         Set<OWLEntity> enrichedSig = enrichSignature(sig, superClassLevel, subClassLevel, reasoner);
         switch (moduleType) {
             case TOP:
@@ -553,8 +570,9 @@ protected static void negativeLevel(boolean superVsSub, OWLReasoner reasoner,
         LocalityClass localityClass = LocalityClass.BOTTOM_BOTTOM;
         Set<OWLEntity> seedSig = new HashSet<>(enrichedSig);
         while (nextStepNecessary) {
-            outputSignature("\nExtracting " + localityClass
-                            + " module for the following seed signature: ", enrichedSig);
+            outputSignature(
+                "\nExtracting " + localityClass + " module for the following seed signature: ",
+                enrichedSig);
             int previousModuleSize = ontologyAxiomSet.subsetCardinality(subOnt);
             seedSig = new HashSet<>(enrichedSig);
             subOnt = extractLogicalAxioms(subOnt, seedSig, localityClass);
@@ -574,15 +592,14 @@ protected static void negativeLevel(boolean superVsSub, OWLReasoner reasoner,
 
     @Override
     public OWLOntology extractAsOntology(Set<OWLEntity> signature, IRI iri)
-                    throws OWLOntologyCreationException {
+        throws OWLOntologyCreationException {
         return extractAsOntology(signature, iri, 0, 0, null);
     }
 
     @Override
     public OWLOntology extractAsOntology(Set<OWLEntity> signature, IRI iri, int superClassLevel,
-                    int subClassLevel, @Nullable OWLReasoner reasoner)
-                    throws OWLOntologyCreationException {
+        int subClassLevel, @Nullable OWLReasoner reasoner) throws OWLOntologyCreationException {
         return manager.createOntology(extract(signature, superClassLevel, subClassLevel, reasoner),
-                        iri);
+            iri);
     }
 }
