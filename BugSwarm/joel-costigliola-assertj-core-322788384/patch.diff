diff --git a/src/main/java/org/assertj/core/internal/Arrays.java b/src/main/java/org/assertj/core/internal/Arrays.java
index 0b7b137e8c..6d20de59db 100755
--- a/src/main/java/org/assertj/core/internal/Arrays.java
+++ b/src/main/java/org/assertj/core/internal/Arrays.java
@@ -13,6 +13,7 @@
 package org.assertj.core.internal;
 
 import static java.lang.reflect.Array.getLength;
+import static java.util.Arrays.asList;
 import static org.assertj.core.error.ConditionAndGroupGenericParameterTypeShouldBeTheSame.shouldBeSameGenericBetweenIterableAndCondition;
 import static org.assertj.core.error.ElementsShouldBe.elementsShouldBe;
 import static org.assertj.core.error.ElementsShouldBeAtLeast.elementsShouldBeAtLeast;
@@ -265,20 +266,14 @@ void assertContainsExactly(AssertionInfo info, Failures failures, Object actual,
 
   void assertContainsExactlyInAnyOrder(AssertionInfo info, Failures failures, Object actual, Object values) {
     if (commonChecks(info, actual, values)) return;
-    List<Object> notExpected = asList(actual);
-    List<Object> notFound = asList(values);
 
-    for (Object value : asList(values)) {
-      if (iterableContains(notExpected, value)) {
-        iterablesRemoveFirst(notExpected, value);
-        iterablesRemoveFirst(notFound, value);
-      }
-    }
+    List<Object> actualAsList = asList(actual);
+    IterableDiff diff = diff(actualAsList, asList(values), comparisonStrategy);
 
-    if (notExpected.isEmpty() && notFound.isEmpty()) return;
+    if (!diff.differencesFound()) return;
 
     throw failures.failure(info,
-                           shouldContainExactlyInAnyOrder(actual, values, notFound, notExpected, comparisonStrategy));
+                           shouldContainExactlyInAnyOrder(actual, values, diff.missing, diff.unexpected, comparisonStrategy));
   }
 
   void assertContainsOnlyOnce(AssertionInfo info, Failures failures, Object actual, Object values) {
diff --git a/src/main/java/org/assertj/core/internal/Iterables.java b/src/main/java/org/assertj/core/internal/Iterables.java
index 1ea6965fc6..d02d87c1de 100755
--- a/src/main/java/org/assertj/core/internal/Iterables.java
+++ b/src/main/java/org/assertj/core/internal/Iterables.java
@@ -59,6 +59,7 @@
 import static org.assertj.core.internal.ErrorMessages.emptySubsequence;
 import static org.assertj.core.internal.ErrorMessages.nullSequence;
 import static org.assertj.core.internal.ErrorMessages.nullSubsequence;
+import static org.assertj.core.internal.IterableDiff.*;
 import static org.assertj.core.internal.IterableDiff.diff;
 import static org.assertj.core.util.Arrays.prepend;
 import static org.assertj.core.util.IterableUtil.isNullOrEmpty;
@@ -1001,20 +1002,15 @@ public void assertContainsAnyOf(AssertionInfo info, Iterable<?> actual, Object[]
   public void assertContainsExactlyInAnyOrder(AssertionInfo info, Iterable<?> actual, Object[] values) {
     checkIsNotNull(values);
     assertNotNull(info, actual);
-    List<Object> notExpected = newArrayList(actual);
-    List<Object> notFound = newArrayList(values);
 
-    for (Object value : values) {
-      if (iterableContains(notExpected, value)) {
-        iterablesRemoveFirst(notExpected, value);
-        iterablesRemoveFirst(notFound, value);
-      }
-    }
+    List<Object> actualAsList = newArrayList(actual);
+    IterableDiff diff = diff(actualAsList, asList(values), comparisonStrategy);
 
-    if (notExpected.isEmpty() && notFound.isEmpty()) return;
+    if (!diff.differencesFound()) return;
 
     throw failures.failure(info,
-                           shouldContainExactlyInAnyOrder(actual, values, notFound, notExpected, comparisonStrategy));
+                           shouldContainExactlyInAnyOrder(actual, values, diff.missing, diff.unexpected,
+                                                          comparisonStrategy));
   }
 
   void assertNotNull(AssertionInfo info, Iterable<?> actual) {
diff --git a/src/main/java/org/assertj/core/internal/Strings.java b/src/main/java/org/assertj/core/internal/Strings.java
index c170db3a77..d243b43495 100755
--- a/src/main/java/org/assertj/core/internal/Strings.java
+++ b/src/main/java/org/assertj/core/internal/Strings.java
@@ -58,6 +58,7 @@
 import static org.assertj.core.internal.CommonValidations.checkSameSizes;
 import static org.assertj.core.internal.CommonValidations.checkSizes;
 import static org.assertj.core.internal.CommonValidations.hasSameSizeAsCheck;
+import static org.assertj.core.internal.IterableDiff.diff;
 import static org.assertj.core.util.Lists.newArrayList;
 import static org.assertj.core.util.Preconditions.checkNotNull;
 import static org.assertj.core.util.xml.XmlStringPrettyFormatter.xmlPrettyFormat;
@@ -786,20 +787,18 @@ private void assertNotNull(AssertionInfo info, CharSequence actual) {
   public void assertContainsExactly(AssertionInfo info, CharSequence actual, CharSequence[] values) {
     doCommonCheckForCharSequence(info, actual, values);
 
-    List<String> actualAsList = splitCharSequencesToListOfChars(actual);
-    List<String> valuesAsList = splitCharSequencesToListOfChars(values);
+    List<String> actualAsList = splitCharSequencesToListOfElements(actual);
+    List<String> valuesAsList = splitCharSequencesToListOfElements(values);
 
-    int size = actualAsList.size();
-
-    if (size != valuesAsList.size()) {
-      throw failures.failure(info, shouldHaveSameSizeAs(actual, size, valuesAsList.size()));
+    if (actualAsList.size() != valuesAsList.size()) {
+      throw failures.failure(info, shouldHaveSameSizeAs(actual, actualAsList.size(), valuesAsList.size()));
     }
 
-    IterableDiff diff = IterableDiff.diff(actualAsList, valuesAsList, comparisonStrategy);
+    IterableDiff diff = diff(actualAsList, valuesAsList, comparisonStrategy);
 
     if (!diff.differencesFound()) {
       // actual and values have the same elements but are they in the same order ?
-      for (int i = 0; i < size; i++) {
+      for (int i = 0; i < actualAsList.size(); i++) {
         String elementFromActual = actualAsList.get(i);
         String elementFromValues = valuesAsList.get(i);
         if (!comparisonStrategy.areEqual(elementFromActual, elementFromValues)) {
@@ -828,22 +827,19 @@ public void assertContainsExactly(AssertionInfo info, CharSequence actual, CharS
   public void assertContainsExactlyInAnyOrder(AssertionInfo info, CharSequence actual, CharSequence[] values) {
     doCommonCheckForCharSequence(info, actual, values);
 
-    List<String> actualAsList = splitCharSequencesToListOfChars(actual);
-    List<String> valuesAsList = splitCharSequencesToListOfChars(values);
-
-    int size = actualAsList.size();
+    List<String> actualAsList = splitCharSequencesToListOfElements(actual);
+    List<String> valuesAsList = splitCharSequencesToListOfElements(values);
 
     if (actualAsList.size() != valuesAsList.size()) {
-      throw failures.failure(info, shouldHaveSameSizeAs(actual, size, valuesAsList.size()));
+      throw failures.failure(info, shouldHaveSameSizeAs(actual, actualAsList.size(), valuesAsList.size()));
     }
 
-    IterableDiff diff = IterableDiff.diff(actualAsList, valuesAsList, comparisonStrategy);
+    IterableDiff diff = diff(actualAsList, valuesAsList, comparisonStrategy);
 
     if (!diff.differencesFound()) return;
 
     throw failures
       .failure(info, shouldContainExactlyInAnyOrder(actual, values, valuesAsList, actualAsList, comparisonStrategy));
-
   }
 
   /**
@@ -1064,19 +1060,26 @@ private static String removeNewLines(CharSequence text) {
   }
 
   /**
-   * split charSequences to a linkedList of individual chars.
+   * Split charSequences to a list of individual elements.
    *
    * @param charSequences the multiple charSequences to split.
-   * @return the linkedList of all chars in charSequences.
+   * @return the list of all the elements in charSequences.
    */
-  private List<String> splitCharSequencesToListOfChars(CharSequence... charSequences) {
-    // This can be implemented in JDK8 with String.join() easily.
+  private List<String> splitCharSequencesToListOfElements(CharSequence... charSequences) {
+    // This can be implemented in Java 8 with String.join() easily.
     StringBuilder stringBuilder = new StringBuilder();
     for (CharSequence charSequence : charSequences) {
       stringBuilder.append(charSequence);
     }
-    String[] array = stringBuilder.toString().split("");
-    return newArrayList(array);
+    // concat all charSequences to one string
+    String stringOfcharSequences = stringBuilder.toString();
+
+    // split the string to a list of elements
+    List<String> listOfElements = newArrayList();
+    for (int i = 0; i < stringOfcharSequences.length(); i++) {
+      listOfElements.add(stringOfcharSequences.substring(i, i + 1));
+    }
+    return listOfElements;
   }
 
   private void doCommonCheckForCharSequence(AssertionInfo info, CharSequence actual, CharSequence[] sequence) {
