diff --git a/src/main/java/org/kairosdb/core/CoreModule.java b/src/main/java/org/kairosdb/core/CoreModule.java
index 72805aefe4..3509ff33f3 100755
--- a/src/main/java/org/kairosdb/core/CoreModule.java
+++ b/src/main/java/org/kairosdb/core/CoreModule.java
@@ -21,17 +21,49 @@
 import com.google.inject.Singleton;
 import com.google.inject.TypeLiteral;
 import com.google.inject.name.Names;
-import org.kairosdb.core.aggregator.*;
-import org.kairosdb.core.datapoints.*;
+import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.core.aggregator.AggregatorFactory;
+import org.kairosdb.core.aggregator.AvgAggregator;
+import org.kairosdb.core.aggregator.CountAggregator;
+import org.kairosdb.core.aggregator.DataGapsMarkingAggregator;
+import org.kairosdb.core.aggregator.DiffAggregator;
+import org.kairosdb.core.aggregator.DivideAggregator;
+import org.kairosdb.core.aggregator.FilterAggregator;
+import org.kairosdb.core.aggregator.FirstAggregator;
+import org.kairosdb.core.aggregator.LastAggregator;
+import org.kairosdb.core.aggregator.LeastSquaresAggregator;
+import org.kairosdb.core.aggregator.MaxAggregator;
+import org.kairosdb.core.aggregator.MinAggregator;
+import org.kairosdb.core.aggregator.PercentileAggregator;
+import org.kairosdb.core.aggregator.RateAggregator;
+import org.kairosdb.core.aggregator.SamplerAggregator;
+import org.kairosdb.core.aggregator.SaveAsAggregator;
+import org.kairosdb.core.aggregator.ScaleAggregator;
+import org.kairosdb.core.aggregator.SmaAggregator;
+import org.kairosdb.core.aggregator.StdAggregator;
+import org.kairosdb.core.aggregator.SumAggregator;
+import org.kairosdb.core.aggregator.TrimAggregator;
+import org.kairosdb.core.datapoints.DoubleDataPointFactory;
+import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
+import org.kairosdb.core.datapoints.LegacyDataPointFactory;
+import org.kairosdb.core.datapoints.LongDataPointFactory;
+import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
+import org.kairosdb.core.datapoints.NullDataPointFactory;
+import org.kairosdb.core.datapoints.StringDataPointFactory;
 import org.kairosdb.core.datastore.GuiceQueryPluginFactory;
 import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.datastore.QueryPluginFactory;
 import org.kairosdb.core.datastore.QueryQueuingManager;
-import org.kairosdb.core.groupby.*;
+import org.kairosdb.core.groupby.BinGroupBy;
+import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.core.groupby.GroupByFactory;
+import org.kairosdb.core.groupby.TagGroupBy;
+import org.kairosdb.core.groupby.TimeGroupBy;
+import org.kairosdb.core.groupby.ValueGroupBy;
 import org.kairosdb.core.http.rest.json.QueryParser;
 import org.kairosdb.core.jobs.CacheFileCleaner;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
-import org.kairosdb.core.processingstage.QueryProcessingChain;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.FeatureProcessor;
 import org.kairosdb.core.scheduler.KairosDBScheduler;
 import org.kairosdb.core.scheduler.KairosDBSchedulerImpl;
 import org.kairosdb.util.MemoryMonitor;
@@ -77,10 +109,10 @@ protected void configure()
 		bind(QueryQueuingManager.class).in(Singleton.class);
 		bind(KairosDatastore.class).in(Singleton.class);
 
-		bind(new TypeLiteral<QueryProcessingStageFactory<Aggregator>>() {}).to(AggregatorFactory.class).in(Singleton.class);
-		bind(new TypeLiteral<QueryProcessingStageFactory<GroupBy>>() {}).to(GroupByFactory.class).in(Singleton.class);
+		bind(new TypeLiteral<FeatureProcessingFactory<Aggregator>>() {}).to(AggregatorFactory.class).in(Singleton.class);
+		bind(new TypeLiteral<FeatureProcessingFactory<GroupBy>>() {}).to(GroupByFactory.class).in(Singleton.class);
 
-		bind(QueryProcessingChain.class).to(KairosQueryProcessingChain.class).in(Singleton.class);
+		bind(FeatureProcessor.class).to(KairosFeatureProcessor.class).in(Singleton.class);
 
 		bind(QueryPluginFactory.class).to(GuiceQueryPluginFactory.class).in(Singleton.class);
 		bind(QueryParser.class).in(Singleton.class);
diff --git a/src/main/java/org/kairosdb/core/KairosFeatureProcessor.java b/src/main/java/org/kairosdb/core/KairosFeatureProcessor.java
new file mode 100755
index 0000000000..3c5ab5049a
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/KairosFeatureProcessor.java
@@ -0,0 +1,21 @@
+package org.kairosdb.core;
+
+import com.google.inject.Inject;
+import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.GenericFeatureProcessor;
+
+import java.util.Arrays;
+
+public class KairosFeatureProcessor extends GenericFeatureProcessor
+{
+    @Inject
+    public KairosFeatureProcessor(FeatureProcessingFactory<Aggregator> aggregatorFactory, FeatureProcessingFactory<GroupBy> groupByFactory)
+    {
+        super(Arrays.asList(
+                groupByFactory,
+                aggregatorFactory
+        ));
+    }
+}
diff --git a/src/main/java/org/kairosdb/core/KairosQueryProcessingChain.java b/src/main/java/org/kairosdb/core/KairosQueryProcessingChain.java
deleted file mode 100755
index fa85255b55..0000000000
--- a/src/main/java/org/kairosdb/core/KairosQueryProcessingChain.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.kairosdb.core;
-
-import com.google.inject.Inject;
-import org.kairosdb.core.aggregator.Aggregator;
-import org.kairosdb.core.groupby.GroupBy;
-import org.kairosdb.core.processingstage.GenericQueryProcessingChain;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
-
-import java.util.Arrays;
-
-public class KairosQueryProcessingChain extends GenericQueryProcessingChain
-{
-    @Inject
-    public KairosQueryProcessingChain(QueryProcessingStageFactory<Aggregator> aggregatorFactory, QueryProcessingStageFactory<GroupBy> groupByFactory)
-    {
-        super(Arrays.asList(
-                groupByFactory,
-                aggregatorFactory
-        ));
-    }
-}
diff --git a/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java b/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
index b94ff7e089..d0de39f56c 100755
--- a/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
+++ b/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
@@ -17,16 +17,16 @@
 
 import com.google.inject.Inject;
 import com.google.inject.Injector;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.processingstage.GenericQueryProcessingStageFactory;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.processingstage.GenericFeatureProcessorFactory;
 
 import java.lang.reflect.InvocationTargetException;
 
-@QueryProcessingStage(
+@Feature(
         name = "aggregators",
         label = "Aggregator"
 )
-public class AggregatorFactory extends GenericQueryProcessingStageFactory<Aggregator>
+public class AggregatorFactory extends GenericFeatureProcessorFactory<Aggregator>
 {
     @Inject
     public AggregatorFactory(Injector injector)
diff --git a/src/main/java/org/kairosdb/core/aggregator/AvgAggregator.java b/src/main/java/org/kairosdb/core/aggregator/AvgAggregator.java
index 9e12e7b2ce..0f5fa0d7cc 100755
--- a/src/main/java/org/kairosdb/core/aggregator/AvgAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/AvgAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.exception.KairosDBException;
 
@@ -27,7 +27,7 @@
 /**
  * Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
 		name = "avg",
 		label = "AVG",
 		description = "Averages the data points together."
diff --git a/src/main/java/org/kairosdb/core/aggregator/CountAggregator.java b/src/main/java/org/kairosdb/core/aggregator/CountAggregator.java
index 409e6ac1a6..9b98c9f6aa 100755
--- a/src/main/java/org/kairosdb/core/aggregator/CountAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/CountAggregator.java
@@ -17,13 +17,13 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.LongDataPointFactory;
 
 import java.util.Collections;
 import java.util.Iterator;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "count",
 		description = "Counts the number of data points."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/DataGapsMarkingAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DataGapsMarkingAggregator.java
index 2e38a10475..6f6fcc3454 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DataGapsMarkingAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DataGapsMarkingAggregator.java
@@ -16,13 +16,13 @@
 import com.google.common.collect.ImmutableList;
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.NullDataPoint;
 
 import java.util.Collections;
 import java.util.Iterator;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "gaps",
 		description = "Marks gaps in data according to sampling rate with a null data point."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
index 305657e2e8..57df624c77 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
@@ -2,14 +2,14 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
 
 /**
  Created by bhawkins on 12/16/14.
  */
-@QueryProcessor(
+@FeatureComponent(
 		name = "diff",
 		description = "Computes the difference between successive data points."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
index 05bca74e8d..2865843847 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
@@ -19,8 +19,8 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
@@ -32,7 +32,7 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "div",
 		description = "Divides each data point by a divisor."
 )
@@ -41,7 +41,7 @@
 	private DoubleDataPointFactory m_dataPointFactory;
 
 	@NonZero
-	@QueryProperty(
+	@FeatureProperty(
 			label = "Divisor",
 			description = "The value each data point is divided by.",
             default_value = "1",
diff --git a/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java b/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
index 233d3a036c..c5b448beb8 100755
--- a/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
@@ -17,12 +17,12 @@
 package org.kairosdb.core.aggregator;
 
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.datastore.DataPointGroup;
 
 
-@QueryProcessor(
+@FeatureComponent(
         name = "filter",
 		description = "Filters datapoints according to filter operation with a null data point."
 )
@@ -44,7 +44,7 @@ public FilterAggregator(FilterOperation filterop, double threshold)
 		m_threshold = threshold;
 	}
 
-	@QueryProperty(
+	@FeatureProperty(
 			name = "filter_op",
 			label = "Filter operation",
 			description = "The operation performed for each data point.",
@@ -54,7 +54,7 @@ public FilterAggregator(FilterOperation filterop, double threshold)
 	)
 	private FilterOperation m_filterop;
 
-	@QueryProperty(
+	@FeatureProperty(
 			label = "Threshold",
 			description = "The value the operation is performed on. If the operation is lt, then a null data point is returned if the data point is less than the threshold."
 	)
diff --git a/src/main/java/org/kairosdb/core/aggregator/FirstAggregator.java b/src/main/java/org/kairosdb/core/aggregator/FirstAggregator.java
index b084ef5526..1956a87ed1 100755
--- a/src/main/java/org/kairosdb/core/aggregator/FirstAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/FirstAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.Collections;
@@ -26,7 +26,7 @@
 /**
  Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "first",
 		description = "Returns the first value data point for the time range."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/LastAggregator.java b/src/main/java/org/kairosdb/core/aggregator/LastAggregator.java
index 2d86dfbd74..20209467f6 100755
--- a/src/main/java/org/kairosdb/core/aggregator/LastAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/LastAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.Collections;
@@ -26,7 +26,7 @@
 /**
  Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "last",
 		description = "Returns the last value data point for the time range."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/LeastSquaresAggregator.java b/src/main/java/org/kairosdb/core/aggregator/LeastSquaresAggregator.java
index d01b6f9b15..e26e77e323 100755
--- a/src/main/java/org/kairosdb/core/aggregator/LeastSquaresAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/LeastSquaresAggregator.java
@@ -3,14 +3,14 @@
 import com.google.inject.Inject;
 import org.apache.commons.math3.stat.regression.SimpleRegression;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "least_squares",
 		description = "Returns a best fit line through the datapoints using the least squares algorithm."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/MaxAggregator.java b/src/main/java/org/kairosdb/core/aggregator/MaxAggregator.java
index 505789a4d2..5c86662660 100755
--- a/src/main/java/org/kairosdb/core/aggregator/MaxAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/MaxAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.Collections;
@@ -26,7 +26,7 @@
 /**
  * Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "max",
 		description = "Returns the maximum value data point for the time range."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/MinAggregator.java b/src/main/java/org/kairosdb/core/aggregator/MinAggregator.java
index 093285c086..1c3e21c681 100755
--- a/src/main/java/org/kairosdb/core/aggregator/MinAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/MinAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.Collections;
@@ -26,7 +26,7 @@
 /**
  * Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "min",
 		description = "Returns the minimum value data point for the time range."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/PercentileAggregator.java b/src/main/java/org/kairosdb/core/aggregator/PercentileAggregator.java
index 1caa6a4226..6b5eab56d4 100755
--- a/src/main/java/org/kairosdb/core/aggregator/PercentileAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/PercentileAggregator.java
@@ -18,8 +18,8 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.http.rest.validation.NonZero;
@@ -34,7 +34,7 @@
 
 import static java.lang.Math.floor;
 
-@QueryProcessor(
+@FeatureComponent(
 		name = "percentile",
 		description = "Finds the percentile of the data range."
 )
@@ -63,7 +63,7 @@ public String getAggregatedGroupType(String groupType)
 	}
 
 	@NonZero
-	@QueryProperty(
+	@FeatureProperty(
 			label = "Percentile",
 			description = "Data points returned will be in this percentile.",
 			default_value = "0.1",
diff --git a/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java b/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
index 8a524f088d..4fa499b28e 100755
--- a/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
@@ -20,8 +20,8 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.chrono.GregorianChronology;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryCompoundProperty;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.TimeUnit;
 
@@ -43,7 +43,7 @@
     private boolean m_exhaustive;
     private DateTimeZone m_timeZone = DateTimeZone.UTC;
 
-    @QueryProperty(
+    @FeatureProperty(
             name = "align_sampling",
             label = "Align sampling",
             description = "When set to true the time for the aggregated data point for each range will fall on the start"
@@ -56,14 +56,14 @@
 
     @NotNull
     @Valid
-    @QueryCompoundProperty(
+    @FeatureCompoundProperty(
             name = "sampling",
             label = "Sampling",
             order = {"Value", "Unit"}
     )
     protected Sampling m_sampling = new Sampling(1, TimeUnit.MILLISECONDS);
 
-    @QueryProperty(
+    @FeatureProperty(
             name = "align_start_time",
             label = "Align start time",
             description = "Setting this to true will cause the aggregation range to be aligned based on the sampling"
diff --git a/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java b/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
index 86d1214eca..3adec667c8 100755
--- a/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
@@ -19,20 +19,20 @@
 import com.google.inject.Inject;
 import org.joda.time.DateTimeZone;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryCompoundProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.TimeUnit;
 import org.kairosdb.util.Util;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "rate",
 		description = "Computes the rate of change for the data points."
 )
 public class RateAggregator implements Aggregator, TimezoneAware
 {
-    @QueryCompoundProperty(
+    @FeatureCompoundProperty(
             label = "Sampling",
             order = {"Value", "Unit"}
     )
diff --git a/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
index 792e145b1d..6d5e14a5c6 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
@@ -19,20 +19,20 @@
 import com.google.inject.Inject;
 import org.joda.time.DateTimeZone;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.TimeUnit;
 import org.kairosdb.util.Util;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "sampler",
 		description = "Computes the sampling rate of change for the data points."
 )
 public class SamplerAggregator implements Aggregator, TimezoneAware
 {
-	@QueryProperty(
+	@FeatureProperty(
 			name = "unit",
 			label = "Time Unit",
 			description = "Time unit of sampling",
diff --git a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
index 33846f027a..737e9f3bf9 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
@@ -3,8 +3,8 @@
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.Datastore;
@@ -13,12 +13,16 @@
 import org.kairosdb.core.groupby.GroupByResult;
 import org.kairosdb.core.groupby.TagGroupBy;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 /**
  Created by bhawkins on 8/28/15.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "save_as",
 		description = "Saves the results to a new metric."
 )
@@ -30,7 +34,7 @@
 	private Set<String> m_tagsToKeep = new HashSet<>();
 	private boolean m_addSavedFrom = true;
 
-	@QueryProperty(
+	@FeatureProperty(
 			name = "metric_name",
 			label = "Save As",
 			description = "The name of the new metric.",
diff --git a/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java b/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
index d44cc866b4..b114c4b78c 100755
--- a/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
@@ -19,8 +19,8 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
@@ -31,13 +31,13 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "scale",
 		description = "Scales each data point by a factor."
 )
 public class ScaleAggregator implements Aggregator
 {
-	@QueryProperty(
+	@FeatureProperty(
 			label = "Factor",
 			description = "The value to scale each data point by.",
             validations = {
diff --git a/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
index efcbc3d381..f36bed677f 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
@@ -19,8 +19,8 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
@@ -32,7 +32,7 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "sma",
 		label = "SMA",
 		description = "Simple moving average."
@@ -42,7 +42,7 @@
 	private DoubleDataPointFactory m_dataPointFactory;
 
 	//@NonZero
-	@QueryProperty(
+	@FeatureProperty(
 			label = "Size",
 			description = "The period of the moving average. This is the number of data point to use each time the average is calculated.",
 			default_value = "10",
diff --git a/src/main/java/org/kairosdb/core/aggregator/StdAggregator.java b/src/main/java/org/kairosdb/core/aggregator/StdAggregator.java
index 2bcb4caac7..a1cfdc8d1d 100755
--- a/src/main/java/org/kairosdb/core/aggregator/StdAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/StdAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 
 import java.util.Collections;
@@ -34,7 +34,7 @@
  *
  * Converts all longs to double. This will cause a loss of precision for very large long values.
 */
-@QueryProcessor(
+@FeatureComponent(
         name="dev",
 		description = "Calculates the standard deviation of the time series."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/SumAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SumAggregator.java
index cbe5002a17..ab463aff5b 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SumAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SumAggregator.java
@@ -17,7 +17,7 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -28,7 +28,7 @@
 /**
  * Converts all longs to double. This will cause a loss of precision for very large long values.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "sum",
 		description = "Adds data points together."
 )
diff --git a/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java b/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
index c12bfc6292..8004759d5f 100755
--- a/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
@@ -1,8 +1,8 @@
 package org.kairosdb.core.aggregator;
 
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.datastore.DataPointGroup;
 
 /**
@@ -13,7 +13,7 @@
 
  Created by bhawkins on 8/28/15.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "trim",
 		description = "Trims off the first, last or both (first and last) data points from the results."
 )
@@ -33,7 +33,7 @@ public TrimAggregator(Trim trim)
 		m_trim = trim;
 	}
 
-	@QueryProperty(
+	@FeatureProperty(
 			name = "trim",
 			label = "Trim",
 			description = "Which data point to trim",
diff --git a/src/main/java/org/kairosdb/core/annotation/AnnotationUtils.java b/src/main/java/org/kairosdb/core/annotation/AnnotationUtils.java
index 6bb143392c..4267960c7f 100755
--- a/src/main/java/org/kairosdb/core/annotation/AnnotationUtils.java
+++ b/src/main/java/org/kairosdb/core/annotation/AnnotationUtils.java
@@ -2,7 +2,7 @@
 
 import com.google.common.base.Defaults;
 import org.apache.commons.lang3.ClassUtils;
-import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
+import org.kairosdb.core.processingstage.metadata.FeaturePropertyMetadata;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -17,15 +17,15 @@
 public class AnnotationUtils
 {
     @SuppressWarnings("ConstantConditions")
-    public static List<QueryPropertyMetadata> getPropertyMetadata(Class clazz)
+    public static List<FeaturePropertyMetadata> getPropertyMetadata(Class clazz)
             throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ClassNotFoundException
     {
         checkNotNull(clazz, "class cannot be null");
 
-        List<QueryPropertyMetadata> properties = new ArrayList<>();
+        List<FeaturePropertyMetadata> properties = new ArrayList<>();
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields) {
-            if (field.getAnnotation(QueryProperty.class) != null) {
+            if (field.getAnnotation(FeatureProperty.class) != null) {
                 String type = getType(field);
                 String options = null;
                 if (field.getType().isEnum()) {
@@ -33,15 +33,15 @@
                     type = "enum";
                 }
 
-                QueryProperty property = field.getAnnotation(QueryProperty.class);
-                properties.add(new QueryPropertyMetadata(field.getName(), type, options,
+                FeatureProperty property = field.getAnnotation(FeatureProperty.class);
+                properties.add(new FeaturePropertyMetadata(field.getName(), type, options,
                         isEmpty(property.default_value()) ? getDefaultValue(field) : property.default_value(),
                         property));
             }
 
-            QueryCompoundProperty annotation = field.getAnnotation(QueryCompoundProperty.class);
+            FeatureCompoundProperty annotation = field.getAnnotation(FeatureCompoundProperty.class);
             if (annotation != null) {
-                properties.add(new QueryPropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
+                properties.add(new FeaturePropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
             }
         }
 
@@ -50,10 +50,10 @@
         }
 
         //noinspection Convert2Lambda
-        properties.sort(new Comparator<QueryPropertyMetadata>()
+        properties.sort(new Comparator<FeaturePropertyMetadata>()
         {
             @Override
-            public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
+            public int compare(FeaturePropertyMetadata o1, FeaturePropertyMetadata o2)
             {
                 return o1.getLabel().compareTo(o2.getLabel());
             }
diff --git a/src/main/java/org/kairosdb/core/annotation/QueryProcessingStage.java b/src/main/java/org/kairosdb/core/annotation/Feature.java
similarity index 88%
rename from src/main/java/org/kairosdb/core/annotation/QueryProcessingStage.java
rename to src/main/java/org/kairosdb/core/annotation/Feature.java
index 3c6a182865..08a5fc20f4 100755
--- a/src/main/java/org/kairosdb/core/annotation/QueryProcessingStage.java
+++ b/src/main/java/org/kairosdb/core/annotation/Feature.java
@@ -7,7 +7,7 @@
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
-public @interface QueryProcessingStage
+public @interface Feature
 {
     String name();
 
diff --git a/src/main/java/org/kairosdb/core/annotation/QueryProcessor.java b/src/main/java/org/kairosdb/core/annotation/FeatureComponent.java
similarity index 90%
rename from src/main/java/org/kairosdb/core/annotation/QueryProcessor.java
rename to src/main/java/org/kairosdb/core/annotation/FeatureComponent.java
index 8a5ab47409..b54fa26fc9 100755
--- a/src/main/java/org/kairosdb/core/annotation/QueryProcessor.java
+++ b/src/main/java/org/kairosdb/core/annotation/FeatureComponent.java
@@ -7,7 +7,7 @@
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})
-public @interface QueryProcessor
+public @interface FeatureComponent
 {
     String name();
 
diff --git a/src/main/java/org/kairosdb/core/annotation/QueryCompoundProperty.java b/src/main/java/org/kairosdb/core/annotation/FeatureCompoundProperty.java
similarity index 69%
rename from src/main/java/org/kairosdb/core/annotation/QueryCompoundProperty.java
rename to src/main/java/org/kairosdb/core/annotation/FeatureCompoundProperty.java
index 778e23460a..fbc6760b04 100755
--- a/src/main/java/org/kairosdb/core/annotation/QueryCompoundProperty.java
+++ b/src/main/java/org/kairosdb/core/annotation/FeatureCompoundProperty.java
@@ -6,16 +6,16 @@
 import java.lang.annotation.Target;
 
 /**
- * Aggregators cannot be recursive meaning that QueryProperty cannot contain an QueryProperty.
+ * Aggregators cannot be recursive meaning that FeatureProperty cannot contain a FeatureProperty.
  * Thus this class exists to allow for properties within properties.
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface QueryCompoundProperty
+public @interface FeatureCompoundProperty
 {
     String name() default "";
 	String label();
 
-	QueryProperty[] properties() default {};
+	FeatureProperty[] properties() default {};
 	String[] order() default {};
 }
diff --git a/src/main/java/org/kairosdb/core/annotation/QueryProperty.java b/src/main/java/org/kairosdb/core/annotation/FeatureProperty.java
similarity index 94%
rename from src/main/java/org/kairosdb/core/annotation/QueryProperty.java
rename to src/main/java/org/kairosdb/core/annotation/FeatureProperty.java
index 68efde8a76..f2c825089f 100755
--- a/src/main/java/org/kairosdb/core/annotation/QueryProperty.java
+++ b/src/main/java/org/kairosdb/core/annotation/FeatureProperty.java
@@ -7,7 +7,7 @@
 
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface QueryProperty
+public @interface FeatureProperty
 {
     String name() default "";
 
diff --git a/src/main/java/org/kairosdb/core/datastore/Duration.java b/src/main/java/org/kairosdb/core/datastore/Duration.java
index 0aff54587f..372f6724c5 100755
--- a/src/main/java/org/kairosdb/core/datastore/Duration.java
+++ b/src/main/java/org/kairosdb/core/datastore/Duration.java
@@ -17,7 +17,7 @@
 package org.kairosdb.core.datastore;
 
 
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 
 import javax.validation.constraints.Min;
@@ -26,7 +26,7 @@
 public class Duration
 {
     @Min(1)
-    @QueryProperty(
+    @FeatureProperty(
             name = "value",
             label = "Value",
             description = "The number of units for the aggregation buckets",
@@ -41,7 +41,7 @@
     protected long value;
 
     @NotNull
-    @QueryProperty(
+    @FeatureProperty(
             name = "unit",
             label = "Unit",
             description = "The time unit for the sampling rate",
diff --git a/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java b/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
index 2644efb259..a8a3c55d15 100755
--- a/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
@@ -18,8 +18,8 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.formatter.FormatterException;
 
@@ -32,13 +32,13 @@
  Groups data points by bin values. Data points are a range of values specified by bins.
  Bins array needs to be in ascending order.
  */
-@QueryProcessor(
+@FeatureComponent(
 		name = "bin",
 		description = "Groups data points by bins or buckets."
 )
 public class BinGroupBy implements GroupBy
 {
-    @QueryProperty(
+    @FeatureProperty(
             label = "Bin Values",
             description = "List of bin values. For example, if the list of bins is 10, 20, 30, then values less than 10 are placed in the first group, values between 10-19 into the second group, and so forth.",
             validations = {
diff --git a/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java b/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
index c0aebe6478..77fb4d7550 100755
--- a/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
+++ b/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
@@ -17,16 +17,16 @@
 
 import com.google.inject.Inject;
 import com.google.inject.Injector;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.processingstage.GenericQueryProcessingStageFactory;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.processingstage.GenericFeatureProcessorFactory;
 
 import java.lang.reflect.InvocationTargetException;
 
-@QueryProcessingStage(
+@Feature(
         name = "groupby",
         label = "Group By"
 )
-public class GroupByFactory extends GenericQueryProcessingStageFactory<GroupBy>
+public class GroupByFactory extends GenericFeatureProcessorFactory<GroupBy>
 {
     @Inject
     public GroupByFactory(Injector injector)
diff --git a/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java b/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
index c30f0e9c36..1b07344d26 100755
--- a/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
@@ -17,8 +17,8 @@
 
 import org.apache.bval.constraints.NotEmpty;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 
 import javax.validation.constraints.NotNull;
@@ -29,7 +29,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-@QueryProcessor(
+@FeatureComponent(
 		name = "tag",
 		description = "Groups data points by tag names."
 )
@@ -37,7 +37,7 @@
 {
 	@NotNull
 	@NotEmpty()
-    @QueryProperty(
+    @FeatureProperty(
             label = "Tags",
             description = "A list of tags to group by.",
 			autocomplete = "tags",
diff --git a/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java b/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
index ba0b86913e..c2e3a10f55 100755
--- a/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
@@ -19,7 +19,10 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.*;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
+import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.datastore.Duration;
 import org.kairosdb.core.datastore.TimeUnit;
 import org.kairosdb.core.formatter.FormatterException;
@@ -34,14 +37,14 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
-@QueryProcessor(
+@FeatureComponent(
 		name = "time",
 		description = "Groups data points in time ranges."
 )
 public class TimeGroupBy implements GroupBy
 {
 	@NotNull
-    @QueryCompoundProperty(
+    @FeatureCompoundProperty(
     		name = "range_size",
             label = "Range Size",
             order = {"Value", "Unit"}
@@ -49,7 +52,7 @@
 	private Duration rangeSize;
 
 	@Min(1)
-    @QueryProperty(
+    @FeatureProperty(
     		name = "group_count",
             label = "Count",
             description = "The number of groups. This would typically be 7 to group by day of week.",
diff --git a/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java b/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
index 3a26adc204..ae7bff8750 100755
--- a/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
@@ -18,8 +18,8 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 import org.kairosdb.core.formatter.FormatterException;
 
@@ -32,14 +32,14 @@
 /**
  * Groups data points by value. Data points are a range of values specified by range size.
  */
-@QueryProcessor(
+@FeatureComponent(
         name = "value",
         description = "Groups data points by value."
 )
 public class ValueGroupBy implements GroupBy
 {
     @Min(1)
-    @QueryProperty(
+    @FeatureProperty(
             name = "range_size",
             label = "Target Size",
             description = "The range for each value. For example, if the range size is 10, then values between 0-9 are placed in the first group, values between 10-19 into the second group, and so forth.",
diff --git a/src/main/java/org/kairosdb/core/http/WebServletModule.java b/src/main/java/org/kairosdb/core/http/WebServletModule.java
index 96d57fa9e9..8f4fc7943b 100755
--- a/src/main/java/org/kairosdb/core/http/WebServletModule.java
+++ b/src/main/java/org/kairosdb/core/http/WebServletModule.java
@@ -22,8 +22,8 @@
 import com.sun.jersey.guice.JerseyServletModule;
 import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;
 import org.eclipse.jetty.servlets.GzipFilter;
+import org.kairosdb.core.http.rest.FeaturesResource;
 import org.kairosdb.core.http.rest.MetricsResource;
-import org.kairosdb.core.http.rest.QueryProcessingChainResource;
 
 import javax.ws.rs.core.MediaType;
 import java.util.Properties;
@@ -45,7 +45,7 @@ protected void configureServlets()
 
 		//Bind resource classes here
 		bind(MetricsResource.class).in(Scopes.SINGLETON);
-		bind(QueryProcessingChainResource.class).in(Scopes.SINGLETON);
+		bind(FeaturesResource.class).in(Scopes.SINGLETON);
 
 		bind(GuiceContainer.class);
 
diff --git a/src/main/java/org/kairosdb/core/http/rest/FeaturesResource.java b/src/main/java/org/kairosdb/core/http/rest/FeaturesResource.java
new file mode 100755
index 0000000000..521dfac5e0
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/http/rest/FeaturesResource.java
@@ -0,0 +1,62 @@
+package org.kairosdb.core.http.rest;
+
+
+import com.google.common.collect.ImmutableList;
+import com.google.gson.Gson;
+import com.google.inject.Inject;
+import org.kairosdb.core.http.rest.json.JsonResponseBuilder;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.FeatureProcessor;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessingMetadata;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import static org.kairosdb.core.http.rest.MetricsResource.setHeaders;
+
+@Path("/api/v1/features")
+public class FeaturesResource
+{
+    private FeatureProcessor m_featureProcessor;
+    private Gson gson = new Gson();
+
+    @Inject
+    public FeaturesResource(FeatureProcessor featureProcessor)
+    {
+        this.m_featureProcessor = featureProcessor;
+    }
+
+    @GET
+    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+    @Path("{feature}")
+    public Response getFeature(@PathParam("feature") String feature)
+    {
+        FeatureProcessingFactory<?> featureProcessingFactory = m_featureProcessor.getFeatureProcessingFactory(feature);
+        if (featureProcessingFactory == null)
+        {
+            JsonResponseBuilder builder = new JsonResponseBuilder(Response.Status.NOT_FOUND);
+            builder.addError("Unknown feature '" + feature.toLowerCase() + "'");
+            return builder.build();
+        }
+
+        ImmutableList<FeatureProcessorMetadata> featureProcessorMetadata = featureProcessingFactory.getFeatureProcessorMetadata();
+        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(featureProcessorMetadata));
+        setHeaders(responseBuilder);
+        return responseBuilder.build();
+    }
+
+    @GET
+    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+    public Response getFeatures()
+    {
+        ImmutableList<FeatureProcessingMetadata> processingChainMetadata = m_featureProcessor.getFeatureProcessingMetadata();
+        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(processingChainMetadata));
+        setHeaders(responseBuilder);
+        return responseBuilder.build();
+    }
+}
diff --git a/src/main/java/org/kairosdb/core/http/rest/QueryProcessingChainResource.java b/src/main/java/org/kairosdb/core/http/rest/QueryProcessingChainResource.java
deleted file mode 100755
index 00bb15d6f2..0000000000
--- a/src/main/java/org/kairosdb/core/http/rest/QueryProcessingChainResource.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.kairosdb.core.http.rest;
-
-
-import com.google.common.collect.ImmutableList;
-import com.google.gson.Gson;
-import com.google.inject.Inject;
-import org.kairosdb.core.http.rest.json.JsonResponseBuilder;
-import org.kairosdb.core.processingstage.QueryProcessingChain;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
-import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-
-import static org.kairosdb.core.http.rest.MetricsResource.setHeaders;
-
-@Path("/api/v1/queryprocessing")
-public class QueryProcessingChainResource
-{
-    private QueryProcessingChain queryProcessingChain;
-    private Gson gson = new Gson();
-
-    @Inject
-    public QueryProcessingChainResource(QueryProcessingChain queryProcessingChain)
-    {
-        this.queryProcessingChain = queryProcessingChain;
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/stages/{queryProcessorFamily}")
-    public Response getQueryProcessor(@PathParam("queryProcessorFamily") String queryProcessorFamilyName)
-    {
-        QueryProcessingStageFactory<?> queryProcessingStageFactory = queryProcessingChain.getQueryProcessingStageFactory(queryProcessorFamilyName);
-        if (queryProcessingStageFactory == null)
-        {
-            JsonResponseBuilder builder = new JsonResponseBuilder(Response.Status.NOT_FOUND);
-            builder.addError("Unknown processing stage family '" + queryProcessorFamilyName.toLowerCase() + "'");
-            return builder.build();
-        }
-
-        ImmutableList<QueryProcessorMetadata> queryProcessorMetadata = queryProcessingStageFactory.getQueryProcessorMetadata();
-        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(queryProcessorMetadata));
-        setHeaders(responseBuilder);
-        return responseBuilder.build();
-    }
-
-    @GET
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/stages")
-    public Response getQueryProcessingChain()
-    {
-        ImmutableList<QueryProcessingStageMetadata> processingChainMetadata = queryProcessingChain.getQueryProcessingChainMetadata();
-        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(processingChainMetadata));
-        setHeaders(responseBuilder);
-        return responseBuilder.build();
-    }
-}
diff --git a/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java b/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
index 225d340253..24d53b5862 100755
--- a/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
+++ b/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
@@ -19,7 +19,18 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.TreeMultimap;
-import com.google.gson.*;
+import com.google.gson.FieldNamingPolicy;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonParser;
+import com.google.gson.TypeAdapter;
+import com.google.gson.TypeAdapterFactory;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
@@ -29,20 +40,34 @@
 import org.apache.bval.constraints.NotEmpty;
 import org.apache.bval.jsr303.ApacheValidationProvider;
 import org.joda.time.DateTimeZone;
-import org.kairosdb.core.aggregator.*;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.datastore.*;
+import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.core.aggregator.FilterAggregator;
+import org.kairosdb.core.aggregator.GroupByAware;
+import org.kairosdb.core.aggregator.RangeAggregator;
+import org.kairosdb.core.aggregator.SaveAsAggregator;
+import org.kairosdb.core.aggregator.TimezoneAware;
+import org.kairosdb.core.aggregator.TrimAggregator;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.datastore.Order;
+import org.kairosdb.core.datastore.QueryMetric;
+import org.kairosdb.core.datastore.QueryPlugin;
+import org.kairosdb.core.datastore.QueryPluginFactory;
+import org.kairosdb.core.datastore.TimeUnit;
 import org.kairosdb.core.groupby.GroupBy;
 import org.kairosdb.core.http.rest.BeanValidationException;
 import org.kairosdb.core.http.rest.QueryException;
-import org.kairosdb.core.processingstage.QueryProcessingChain;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.FeatureProcessor;
 import org.kairosdb.rollup.Rollup;
 import org.kairosdb.rollup.RollupTask;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.validation.*;
+import javax.validation.ConstraintViolation;
+import javax.validation.Path;
+import javax.validation.Valid;
+import javax.validation.Validation;
+import javax.validation.Validator;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
 import javax.validation.metadata.ConstraintDescriptor;
@@ -53,7 +78,13 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
 
 
 public class QueryParser
@@ -61,7 +92,7 @@
     protected static final Logger logger = LoggerFactory.getLogger(QueryParser.class);
     protected static final Validator VALIDATOR = Validation.byProvider(ApacheValidationProvider.class).configure().buildValidatorFactory().getValidator();
 
-    protected QueryProcessingChain m_processingChain;
+    protected FeatureProcessor m_processingChain;
     protected QueryPluginFactory m_pluginFactory;
     protected final GsonBuilder m_gsonBuilder;
 
@@ -70,7 +101,7 @@
     private final Object m_descriptorMapLock = new Object();
 
     @Inject
-    public QueryParser(QueryProcessingChain processingChain, QueryPluginFactory pluginFactory)
+    public QueryParser(FeatureProcessor processingChain, QueryPluginFactory pluginFactory)
     {
         m_processingChain = processingChain;
         m_pluginFactory = pluginFactory;
@@ -250,16 +281,16 @@ protected void validateHasRangeAggregator(QueryMetric query, String context) thr
 
                 JsonObject jsMetric = metricsArray.get(I).getAsJsonObject();
 
-                for (QueryProcessingStageFactory<?> factory : m_processingChain.getQueryProcessingStageFactories())
+                for (FeatureProcessingFactory<?> factory : m_processingChain.getFeatureProcessingFactories())
                 {
-                    String factoryName = factory.getClass().getAnnotation(QueryProcessingStage.class).name();
+                    String factoryName = factory.getClass().getAnnotation(Feature.class).name();
 
                     JsonElement queryProcessor = jsMetric.get(factoryName);
                     if (queryProcessor != null)
                     {
                         JsonArray queryProcessorArray = queryProcessor.getAsJsonArray();
                         parseQueryProcessor(context, factoryName,
-                                queryProcessorArray, factory.getQueryProcessorFamily(),
+                                queryProcessorArray, factory.getFeature(),
                                 queryMetric, query.getTimeZone());
                     }
                 }
@@ -339,7 +370,7 @@ protected void parseQueryProcessor(String context, String queryProcessorFamilyNa
 
             String qpContext = context + "." + queryProcessorFamilyName + "[" + J + "]";
             String qpName = name.getAsString();
-            Object queryProcessor = m_processingChain.getQueryProcessingStageFactory(queryProcessorFamilyType).createQueryProcessor(qpName);
+            Object queryProcessor = m_processingChain.getFeatureProcessingFactory(queryProcessorFamilyType).createFeatureProcessor(qpName);
 
             if (queryProcessor == null)
                 throw new BeanValidationException(new SimpleConstraintViolation(qpName, "invalid " + queryProcessorFamilyName + " name"), qpContext);
@@ -493,10 +524,10 @@ public RollupTask parseRollupTask(JsonObject rollupTask, String context) throws
                     validateHasRangeAggregator(query, context);
 
                     // Add aggregators needed for rollups
-                    SaveAsAggregator saveAsAggregator = (SaveAsAggregator) m_processingChain.getQueryProcessingStageFactory(Aggregator.class).createQueryProcessor("save_as");
+                    SaveAsAggregator saveAsAggregator = (SaveAsAggregator) m_processingChain.getFeatureProcessingFactory(Aggregator.class).createFeatureProcessor("save_as");
                     saveAsAggregator.setMetricName(rollup.getSaveAs());
 
-                    TrimAggregator trimAggregator = (TrimAggregator) m_processingChain.getQueryProcessingStageFactory(Aggregator.class).createQueryProcessor("trim");
+                    TrimAggregator trimAggregator = (TrimAggregator) m_processingChain.getFeatureProcessingFactory(Aggregator.class).createFeatureProcessor("trim");
                     trimAggregator.setTrim(TrimAggregator.Trim.LAST);
 
                     query.addAggregator(saveAsAggregator);
diff --git a/src/main/java/org/kairosdb/core/processingstage/FeatureProcessingFactory.java b/src/main/java/org/kairosdb/core/processingstage/FeatureProcessingFactory.java
new file mode 100755
index 0000000000..dbc8b6a7ed
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/processingstage/FeatureProcessingFactory.java
@@ -0,0 +1,30 @@
+package org.kairosdb.core.processingstage;
+
+import com.google.common.collect.ImmutableList;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+
+public interface FeatureProcessingFactory<Feature>
+{
+    /**
+     * Create new instance of a feature processor.
+     *
+     * @param   name    name of the feature processor
+     * @return          created instance of the feature processor
+     */
+    Feature createFeatureProcessor(String name);
+
+    /**
+     * Returns the feature class.
+     *
+     * @return feature class
+     */
+    Class<Feature> getFeature();
+
+    /**
+     * Returns an {@link ImmutableList} of {@link FeatureProcessorMetadata}
+     * describing the feature processor.
+     *
+     * @return the {@link ImmutableList} describing the feature processor
+     */
+    ImmutableList<FeatureProcessorMetadata> getFeatureProcessorMetadata();
+}
diff --git a/src/main/java/org/kairosdb/core/processingstage/FeatureProcessor.java b/src/main/java/org/kairosdb/core/processingstage/FeatureProcessor.java
new file mode 100755
index 0000000000..0631817020
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/processingstage/FeatureProcessor.java
@@ -0,0 +1,43 @@
+package org.kairosdb.core.processingstage;
+
+import com.google.common.collect.ImmutableList;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessingMetadata;
+
+public interface FeatureProcessor
+{
+
+    /**
+     * Returns an {@link ImmutableList} of {@link FeatureProcessingFactory}
+     * instances for the feature.
+     *
+     * @return the {@link ImmutableList} describing the feature
+     */
+    ImmutableList<FeatureProcessingFactory<?>> getFeatureProcessingFactories();
+
+    /**
+     * Returns an {@link FeatureProcessingFactory} instance which can generate
+     * features.
+     * The feature processor type must be specified in parameters.
+     *
+     * @param feature  feature type generated by the {@link FeatureProcessingFactory}
+     * @return instance of {@link FeatureProcessingFactory}
+     */
+    FeatureProcessingFactory<?> getFeatureProcessingFactory(Class<?> feature);
+
+    /**
+     * Returns an {@link FeatureProcessingFactory} instance whose can generate feature processors.
+     * The {@link FeatureProcessingFactory} name must be specified in parameters.
+     *
+     * @param feature  name of the {@link FeatureProcessingFactory}
+     * @return instance of {@link FeatureProcessingFactory}
+     */
+    FeatureProcessingFactory<?> getFeatureProcessingFactory(String feature);
+
+    /**
+     * Returns an {@link ImmutableList} of {@link FeatureProcessingMetadata}
+     * describing the feature.
+     *
+     * @return the {@link ImmutableList} describing the feature
+     */
+    ImmutableList<FeatureProcessingMetadata> getFeatureProcessingMetadata();
+}
diff --git a/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessor.java b/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessor.java
new file mode 100755
index 0000000000..01ce8a62fc
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessor.java
@@ -0,0 +1,78 @@
+package org.kairosdb.core.processingstage;
+
+import com.google.common.collect.ImmutableList;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessingMetadata;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+
+import javax.validation.constraints.NotNull;
+import java.util.ArrayList;
+import java.util.List;
+
+public abstract class GenericFeatureProcessor implements FeatureProcessor
+{
+    private List<FeatureProcessingFactory<?>> featureProcessingFactories = new ArrayList<>();
+    private List<FeatureProcessingMetadata> featureProcessingMetadata = new ArrayList<>();
+
+    /**
+     * Constructor of a generic class to easily generate a feature processor.
+     *
+     * @param featureProcessingFactories   list of {@link FeatureProcessingFactory}
+     * @return instances composing the feature processor
+     */
+    protected GenericFeatureProcessor(@NotNull List<FeatureProcessingFactory<?>> featureProcessingFactories)
+    {
+        if (featureProcessingFactories.size() == 0)
+            throw new IllegalArgumentException("featureProcessingFactories parameter can't be empty");
+        for (int i = 0; i < featureProcessingFactories.size(); i++)
+        {
+            FeatureProcessingFactory<?> factory = featureProcessingFactories.get(i);
+            ArrayList<FeatureProcessorMetadata> featureProcessorMetadata = new ArrayList<>();
+
+            Feature annotation = factory.getClass().getAnnotation(Feature.class);
+            if (annotation == null)
+                throw new IllegalStateException("Feature class " + factory.getClass().getName() +
+                        " does not have required annotation " + Feature.class.getName());
+            if (factory.getFeatureProcessorMetadata() == null)
+                throw new IllegalStateException("Feature processor class " + factory.getClass().getName() +
+                        " does not have feature processor metadata");
+
+            this.featureProcessingFactories.add(i, factory);
+            featureProcessorMetadata.addAll(factory.getFeatureProcessorMetadata());
+            this.featureProcessingMetadata.add(new FeatureProcessingMetadata(annotation.name(), annotation.label(), featureProcessorMetadata));
+        }
+    }
+
+    @Override
+    public ImmutableList<FeatureProcessingFactory<?>> getFeatureProcessingFactories()
+    {
+        return new ImmutableList.Builder<FeatureProcessingFactory<?>>().addAll(featureProcessingFactories).build();
+    }
+
+    @Override
+    public FeatureProcessingFactory<?> getFeatureProcessingFactory(Class<?> feature)
+    {
+        for (FeatureProcessingFactory<?> factory : featureProcessingFactories)
+            if (factory.getFeature() == feature)
+                return factory;
+        return null;
+    }
+
+    @Override
+    public FeatureProcessingFactory<?> getFeatureProcessingFactory(String feature)
+    {
+        for (FeatureProcessingFactory<?> factory : featureProcessingFactories)
+        {
+            String factoryName = factory.getClass().getAnnotation(Feature.class).name();
+            if (factoryName.equalsIgnoreCase(feature))
+                return factory;
+        }
+        return null;
+    }
+
+    @Override
+    public ImmutableList<FeatureProcessingMetadata> getFeatureProcessingMetadata()
+    {
+        return new ImmutableList.Builder<FeatureProcessingMetadata>().addAll(featureProcessingMetadata).build();
+    }
+}
diff --git a/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactory.java b/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactory.java
new file mode 100755
index 0000000000..e86867b730
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactory.java
@@ -0,0 +1,94 @@
+package org.kairosdb.core.processingstage;
+
+import com.google.common.collect.ImmutableList;
+import com.google.inject.Binding;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+import org.kairosdb.core.processingstage.metadata.FeaturePropertyMetadata;
+
+import javax.validation.constraints.NotNull;
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static org.kairosdb.core.annotation.AnnotationUtils.getPropertyMetadata;
+
+public abstract class GenericFeatureProcessorFactory<FEATURE> implements FeatureProcessingFactory<FEATURE>
+{
+    private Class<FEATURE> featureClass;
+    protected Map<String, Class<FEATURE>> featureProcessors = new HashMap<>();
+    protected List<FeatureProcessorMetadata> featureProcessorMetadata = new ArrayList<>();
+    protected Injector injector;
+
+    /**
+     * Constructor of a generic class to easily generate a feature processing factory.
+     *
+     * @param injector Guice {@link Injector} instance needed for binding
+     * @param featureClass feature processor class
+     */
+    @SuppressWarnings("unchecked")
+    protected GenericFeatureProcessorFactory(@NotNull Injector injector, @NotNull Class<FEATURE> featureClass)
+            throws InvocationTargetException, NoSuchMethodException, ClassNotFoundException, IllegalAccessException
+    {
+        this.injector = injector;
+        this.featureClass = featureClass;
+        Map<Key<?>, Binding<?>> bindings = injector.getAllBindings();
+
+        for (Key<?> key : bindings.keySet())
+        {
+            Class<?> bindingClass = key.getTypeLiteral().getRawType();
+
+            if (featureClass.isAssignableFrom(bindingClass))
+            {
+                FeatureComponent annotation = bindingClass.getAnnotation(FeatureComponent.class);
+                if (annotation == null)
+                    throw new IllegalStateException("Processor class " + bindingClass.getName() +
+                            " does not have required annotation " + FeatureComponent.class.getName());
+
+                featureProcessors.put(annotation.name(), (Class<FEATURE>) bindingClass);
+                List<FeaturePropertyMetadata> properties = getPropertyMetadata(bindingClass);
+                featureProcessorMetadata.add(new FeatureProcessorMetadata(annotation.name(), labelizeComponent(annotation), annotation.description(), properties));
+            }
+        }
+        featureProcessorMetadata.sort(Comparator.comparing(FeatureProcessorMetadata::getName));
+    }
+
+    @Override
+    public Class<FEATURE> getFeature() { return featureClass; }
+
+    @Override
+    public ImmutableList<FeatureProcessorMetadata> getFeatureProcessorMetadata()
+    {
+        return new ImmutableList.Builder<FeatureProcessorMetadata>().addAll(featureProcessorMetadata).build();
+    }
+
+    @Override
+    public FEATURE createFeatureProcessor(String name)
+    {
+        Class<FEATURE> processClass = featureProcessors.get(name);
+
+        if (processClass == null)
+            return (null);
+        return (injector.getInstance(processClass));
+    }
+
+    private String labelizeComponent(FeatureComponent annotation)
+    {
+        if (!annotation.label().isEmpty())
+            return annotation.label();
+
+        StringBuilder label = new StringBuilder();
+        for (String word : annotation.name().toLowerCase().split("_"))
+        {
+            label.append(word.substring(0, 1).toUpperCase());
+            label.append(word.substring(1));
+            label.append(" ");
+        }
+        return label.toString().trim();
+    }
+}
diff --git a/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingChain.java b/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingChain.java
deleted file mode 100755
index 0a4efebc6e..0000000000
--- a/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingChain.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package org.kairosdb.core.processingstage;
-
-import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-
-import javax.validation.constraints.NotNull;
-import java.util.ArrayList;
-import java.util.List;
-
-public abstract class GenericQueryProcessingChain implements QueryProcessingChain
-{
-    private List<QueryProcessingStageFactory<?>> processingChain = new ArrayList<>();
-    private List<QueryProcessingStageMetadata> queryProcessingStageMetadata = new ArrayList<>();
-
-    /**
-     * Constructor of a generic class to easily generate a processing chain.
-     *
-     * @param processingChain   list of {@link QueryProcessingStageFactory}
-     *                          instances composing the processing chain
-     */
-    protected GenericQueryProcessingChain(@NotNull List<QueryProcessingStageFactory<?>> processingChain)
-    {
-        if (processingChain.size() == 0)
-            throw new IllegalArgumentException("ProcessingChain parameter can't be empty");
-        for (int i = 0; i < processingChain.size(); i++)
-        {
-            QueryProcessingStageFactory<?> factory = processingChain.get(i);
-            ArrayList<QueryProcessorMetadata> queryProcessorMetadata = new ArrayList<>();
-
-            QueryProcessingStage annotation = factory.getClass().getAnnotation(QueryProcessingStage.class);
-            if (annotation == null)
-                throw new IllegalStateException("Processing Stage class " + factory.getClass().getName() +
-                        " does not have required annotation " + QueryProcessingStage.class.getName());
-            if (factory.getQueryProcessorMetadata() == null)
-                throw new IllegalStateException("Processing Stage class " + factory.getClass().getName() +
-                        " does not have query processor metadata");
-
-            this.processingChain.add(i, factory);
-            queryProcessorMetadata.addAll(factory.getQueryProcessorMetadata());
-            this.queryProcessingStageMetadata.add(new QueryProcessingStageMetadata(annotation.name(), annotation.label(), queryProcessorMetadata));
-        }
-    }
-
-    @Override
-    public ImmutableList<QueryProcessingStageFactory<?>> getQueryProcessingStageFactories()
-    {
-        return new ImmutableList.Builder<QueryProcessingStageFactory<?>>().addAll(processingChain).build();
-    }
-
-    @Override
-    public QueryProcessingStageFactory<?> getQueryProcessingStageFactory(Class<?> queryProcessorFamily)
-    {
-        for (QueryProcessingStageFactory<?> factory : processingChain)
-            if (factory.getQueryProcessorFamily() == queryProcessorFamily)
-                return factory;
-        return null;
-    }
-
-    @Override
-    public QueryProcessingStageFactory<?> getQueryProcessingStageFactory(String queryProcessorFamilyName)
-    {
-        for (QueryProcessingStageFactory<?> factory : processingChain)
-        {
-            String factoryName = factory.getClass().getAnnotation(QueryProcessingStage.class).name();
-            if (factoryName.equalsIgnoreCase(queryProcessorFamilyName))
-                return factory;
-        }
-        return null;
-    }
-
-    @Override
-    public ImmutableList<QueryProcessingStageMetadata> getQueryProcessingChainMetadata()
-    {
-        return new ImmutableList.Builder<QueryProcessingStageMetadata>().addAll(queryProcessingStageMetadata).build();
-    }
-}
diff --git a/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactory.java b/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactory.java
deleted file mode 100755
index 70ee66defa..0000000000
--- a/src/main/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactory.java
+++ /dev/null
@@ -1,90 +0,0 @@
-package org.kairosdb.core.processingstage;
-
-import com.google.common.collect.ImmutableList;
-import com.google.inject.Binding;
-import com.google.inject.Injector;
-import com.google.inject.Key;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
-
-import javax.validation.constraints.NotNull;
-import java.lang.reflect.InvocationTargetException;
-import java.util.*;
-
-import static org.kairosdb.core.annotation.AnnotationUtils.getPropertyMetadata;
-
-public abstract class GenericQueryProcessingStageFactory<QueryProcessorFamily> implements QueryProcessingStageFactory<QueryProcessorFamily>
-{
-    private Class<QueryProcessorFamily> queryProcessorFamily;
-    protected Map<String, Class<QueryProcessorFamily>> queryProcessors = new HashMap<>();
-    protected List<QueryProcessorMetadata> queryProcessorMetadata = new ArrayList<>();
-    protected Injector injector;
-
-    /**
-     * Constructor of a generic class to easily generate a processing stage factory.
-     *
-     * @param injector                      Guice {@link Injector} instance needed for binding
-     * @param queryProcessorFamily          query processor family class
-     */
-    @SuppressWarnings("unchecked")
-    protected GenericQueryProcessingStageFactory(@NotNull Injector injector, @NotNull Class<QueryProcessorFamily> queryProcessorFamily)
-            throws InvocationTargetException, NoSuchMethodException, ClassNotFoundException, IllegalAccessException
-    {
-        this.injector = injector;
-        this.queryProcessorFamily = queryProcessorFamily;
-        Map<Key<?>, Binding<?>> bindings = injector.getAllBindings();
-
-        for (Key<?> key : bindings.keySet())
-        {
-            Class<?> bindingClass = key.getTypeLiteral().getRawType();
-
-            if (queryProcessorFamily.isAssignableFrom(bindingClass))
-            {
-                QueryProcessor annotation = bindingClass.getAnnotation(QueryProcessor.class);
-                if (annotation == null)
-                    throw new IllegalStateException("Processor class " + bindingClass.getName() +
-                            " does not have required annotation " + QueryProcessor.class.getName());
-
-                queryProcessors.put(annotation.name(), (Class<QueryProcessorFamily>) bindingClass);
-                List<QueryPropertyMetadata> properties = getPropertyMetadata(bindingClass);
-                queryProcessorMetadata.add(new QueryProcessorMetadata(annotation.name(), labelizeQueryProcessor(annotation), annotation.description(), properties));
-            }
-        }
-        queryProcessorMetadata.sort(Comparator.comparing(QueryProcessorMetadata::getName));
-    }
-
-    @Override
-    public Class<QueryProcessorFamily> getQueryProcessorFamily() { return queryProcessorFamily; }
-
-    @Override
-    public ImmutableList<QueryProcessorMetadata> getQueryProcessorMetadata()
-    {
-        return new ImmutableList.Builder<QueryProcessorMetadata>().addAll(queryProcessorMetadata).build();
-    }
-
-    @Override
-    public QueryProcessorFamily createQueryProcessor(String name)
-    {
-        Class<QueryProcessorFamily> processClass = queryProcessors.get(name);
-
-        if (processClass == null)
-            return (null);
-        return (injector.getInstance(processClass));
-    }
-
-    private String labelizeQueryProcessor(QueryProcessor annotation)
-    {
-        if (!annotation.label().isEmpty())
-            return annotation.label();
-
-        StringBuilder label = new StringBuilder();
-        for (String word : annotation.name().toLowerCase().split("_"))
-        {
-            label.append(word.substring(0, 1).toUpperCase());
-            label.append(word.substring(1));
-            label.append(" ");
-        }
-        return label.toString().trim();
-    }
-}
diff --git a/src/main/java/org/kairosdb/core/processingstage/QueryProcessingChain.java b/src/main/java/org/kairosdb/core/processingstage/QueryProcessingChain.java
deleted file mode 100755
index 0141d0cbef..0000000000
--- a/src/main/java/org/kairosdb/core/processingstage/QueryProcessingChain.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package org.kairosdb.core.processingstage;
-
-import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
-
-public interface QueryProcessingChain
-{
-
-    /**
-     * Returns an {@link ImmutableList} of {@link QueryProcessingStageFactory}
-     * instance contained into the processing chain.
-     *
-     * @return the {@link ImmutableList} describing the processing chain
-     */
-    ImmutableList<QueryProcessingStageFactory<?>> getQueryProcessingStageFactories();
-
-    /**
-     * Returns an {@link QueryProcessingStageFactory} instance whose can generate
-     * query processors.
-     * The query processor type must be precised in parameters.
-     *
-     * @param queryProcessorFamily  query processor type generated by the
-     *                              {@link QueryProcessingStageFactory}
-     * @return                      instance of {@link QueryProcessingStageFactory}
-     */
-    QueryProcessingStageFactory<?> getQueryProcessingStageFactory(Class<?> queryProcessorFamily);
-
-    /**
-     * Returns an {@link QueryProcessingStageFactory} instance whose can generate
-     * query processors.
-     * The {@link QueryProcessingStageFactory} name must be precised in parameters.
-     *
-     * @param queryProcessorFamilyName  name of the {@link QueryProcessingStageFactory}
-     * @return                          instance of {@link QueryProcessingStageFactory}
-     */
-    QueryProcessingStageFactory<?> getQueryProcessingStageFactory(String queryProcessorFamilyName);
-
-    /**
-     * Returns an {@link ImmutableList} of {@link QueryProcessingStageMetadata}
-     * describing the processing chain.
-     *
-     * @return the {@link ImmutableList} describing the processing chain
-     */
-    ImmutableList<QueryProcessingStageMetadata> getQueryProcessingChainMetadata();
-}
diff --git a/src/main/java/org/kairosdb/core/processingstage/QueryProcessingStageFactory.java b/src/main/java/org/kairosdb/core/processingstage/QueryProcessingStageFactory.java
deleted file mode 100755
index 241b4d6c07..0000000000
--- a/src/main/java/org/kairosdb/core/processingstage/QueryProcessingStageFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.kairosdb.core.processingstage;
-
-import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-
-public interface QueryProcessingStageFactory<QueryProcessorFamily>
-{
-    /**
-     * Create new instance of a query processor.
-     *
-     * @param   name    name of the query processor
-     * @return          created instance of the query processor
-     */
-    QueryProcessorFamily createQueryProcessor(String name);
-
-    /**
-     * Returns the query processor family class.
-     *
-     * @return          query processor family class
-     */
-    Class<QueryProcessorFamily> getQueryProcessorFamily();
-
-    /**
-     * Returns an {@link ImmutableList} of {@link QueryProcessorMetadata}
-     * describing the query processing stage.
-     *
-     * @return the {@link ImmutableList} describing the processing chain
-     */
-    ImmutableList<QueryProcessorMetadata> getQueryProcessorMetadata();
-}
diff --git a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessingStageMetadata.java b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessingMetadata.java
similarity index 53%
rename from src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessingStageMetadata.java
rename to src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessingMetadata.java
index 9a599c6077..8339fc3dbe 100755
--- a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessingStageMetadata.java
+++ b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessingMetadata.java
@@ -5,18 +5,18 @@
 import java.util.Comparator;
 import java.util.List;
 
-public class QueryProcessingStageMetadata
+public class FeatureProcessingMetadata
 {
     private final String name;
     private final String label;
-    private final ImmutableList<QueryProcessorMetadata> properties;
+    private final ImmutableList<FeatureProcessorMetadata> properties;
 
-    public QueryProcessingStageMetadata(String name, String label, List<QueryProcessorMetadata> properties)
+    public FeatureProcessingMetadata(String name, String label, List<FeatureProcessorMetadata> properties)
     {
         this.name = name;
         this.label = label;
 
-        properties.sort(Comparator.comparing(QueryProcessorMetadata::getLabel));
+        properties.sort(Comparator.comparing(FeatureProcessorMetadata::getLabel));
         this.properties = ImmutableList.copyOf(properties);
     }
 
@@ -24,5 +24,5 @@ public QueryProcessingStageMetadata(String name, String label, List<QueryProcess
 
     public String getLabel() { return label; }
 
-    public ImmutableList<QueryProcessorMetadata> getProperties() { return properties; }
+    public ImmutableList<FeatureProcessorMetadata> getProperties() { return properties; }
 }
diff --git a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessorMetadata.java b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessorMetadata.java
similarity index 63%
rename from src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessorMetadata.java
rename to src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessorMetadata.java
index f5694f02fe..93f7f89695 100755
--- a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryProcessorMetadata.java
+++ b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureProcessorMetadata.java
@@ -5,20 +5,20 @@
 import java.util.Comparator;
 import java.util.List;
 
-public class QueryProcessorMetadata
+public class FeatureProcessorMetadata
 {
     private final String name;
     private final String label;
     private final String description;
-    private final ImmutableList<QueryPropertyMetadata> properties;
+    private final ImmutableList<FeaturePropertyMetadata> properties;
 
-    public QueryProcessorMetadata(String name, String label, String description, List<QueryPropertyMetadata> properties)
+    public FeatureProcessorMetadata(String name, String label, String description, List<FeaturePropertyMetadata> properties)
     {
         this.name = name;
         this.label = label;
         this.description = description;
 
-        properties.sort(Comparator.comparing(QueryPropertyMetadata::getLabel));
+        properties.sort(Comparator.comparing(FeaturePropertyMetadata::getLabel));
         this.properties = ImmutableList.copyOf(properties);
     }
 
@@ -34,7 +34,7 @@ public String getDescription()
         return description;
     }
 
-    public ImmutableList<QueryPropertyMetadata> getProperties()
+    public ImmutableList<FeaturePropertyMetadata> getProperties()
     {
         return properties;
     }
diff --git a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryPropertyMetadata.java b/src/main/java/org/kairosdb/core/processingstage/metadata/FeaturePropertyMetadata.java
similarity index 67%
rename from src/main/java/org/kairosdb/core/processingstage/metadata/QueryPropertyMetadata.java
rename to src/main/java/org/kairosdb/core/processingstage/metadata/FeaturePropertyMetadata.java
index 4cb5d191c0..0852d416e9 100755
--- a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryPropertyMetadata.java
+++ b/src/main/java/org/kairosdb/core/processingstage/metadata/FeaturePropertyMetadata.java
@@ -1,19 +1,19 @@
 package org.kairosdb.core.processingstage.metadata;
 
 import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.annotation.QueryCompoundProperty;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 
 import java.util.Arrays;
 import java.util.Comparator;
-import java.util.List;
 import java.util.LinkedList;
+import java.util.List;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static org.apache.commons.lang.StringUtils.isEmpty;
 
-public class QueryPropertyMetadata
+public class FeaturePropertyMetadata
 {
     private String name;
     private String label;
@@ -24,10 +24,10 @@
     private String defaultValue;
     private String autocomplete;
     private boolean multiline;
-    private ImmutableList<QueryValidationMetadata> validations;
-    private ImmutableList<QueryPropertyMetadata> properties;
+    private ImmutableList<FeatureValidationMetadata> validations;
+    private ImmutableList<FeaturePropertyMetadata> properties;
 
-    public QueryPropertyMetadata(String name, String type, String options, String defaultValue, QueryProperty property)
+    public FeaturePropertyMetadata(String name, String type, String options, String defaultValue, FeatureProperty property)
             throws ClassNotFoundException
     {
         this.name = isEmpty(property.name()) ? name : property.name();
@@ -44,13 +44,13 @@ public QueryPropertyMetadata(String name, String type, String options, String de
         fixupName();
     }
 
-    public QueryPropertyMetadata(String name, QueryCompoundProperty property, List<QueryPropertyMetadata> properties)
+    public FeaturePropertyMetadata(String name, FeatureCompoundProperty property, List<FeaturePropertyMetadata> properties)
     {
         this.name = isEmpty(property.name()) ? name : property.name();
         this.label = checkNotNull(property.label(), "Label cannot be null");
         this.type = "Object";
 
-        Comparator<QueryPropertyMetadata> comparator = property.order().length > 0 ?
+        Comparator<FeaturePropertyMetadata> comparator = property.order().length > 0 ?
                 new ExplicitComparator(Arrays.asList(property.order())) :
                 new LabelComparator();
         properties.sort(comparator);
@@ -100,32 +100,32 @@ public Object getDefaultValue()
         return defaultValue;
     }
 
-    public ImmutableList<QueryValidationMetadata> getValidations() { return validations; }
+    public ImmutableList<FeatureValidationMetadata> getValidations() { return validations; }
 
-    public ImmutableList<QueryPropertyMetadata> getProperties()
+    public ImmutableList<FeaturePropertyMetadata> getProperties()
     {
         return properties;
     }
 
-    private ImmutableList<QueryValidationMetadata> extractValidators(QueryProperty property)
+    private ImmutableList<FeatureValidationMetadata> extractValidators(FeatureProperty property)
     {
-        LinkedList<QueryValidationMetadata> validations = new LinkedList<QueryValidationMetadata>();
+        LinkedList<FeatureValidationMetadata> validations = new LinkedList<FeatureValidationMetadata>();
 
         for (ValidationProperty validator : property.validations())
-            validations.addFirst(new QueryValidationMetadata(validator.expression(), validator.type(), validator.message()));
+            validations.addFirst(new FeatureValidationMetadata(validator.expression(), validator.type(), validator.message()));
         return ImmutableList.copyOf(validations);
     }
 
-    private class LabelComparator implements Comparator<QueryPropertyMetadata>
+    private class LabelComparator implements Comparator<FeaturePropertyMetadata>
     {
         @Override
-        public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
+        public int compare(FeaturePropertyMetadata o1, FeaturePropertyMetadata o2)
         {
             return o1.getLabel().compareTo(o2.getLabel());
         }
     }
 
-    private class ExplicitComparator implements Comparator<QueryPropertyMetadata>
+    private class ExplicitComparator implements Comparator<FeaturePropertyMetadata>
     {
         private List<String> order;
 
@@ -134,7 +134,7 @@ private ExplicitComparator(List<String> order)
             this.order = order;
         }
 
-        public int compare(QueryPropertyMetadata left, QueryPropertyMetadata right)
+        public int compare(FeaturePropertyMetadata left, FeaturePropertyMetadata right)
         {
             return Integer.compare(order.indexOf(left.getLabel()), order.indexOf(right.getLabel()));
         }
diff --git a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryValidationMetadata.java b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureValidationMetadata.java
similarity index 76%
rename from src/main/java/org/kairosdb/core/processingstage/metadata/QueryValidationMetadata.java
rename to src/main/java/org/kairosdb/core/processingstage/metadata/FeatureValidationMetadata.java
index c742b644e6..96181ac475 100755
--- a/src/main/java/org/kairosdb/core/processingstage/metadata/QueryValidationMetadata.java
+++ b/src/main/java/org/kairosdb/core/processingstage/metadata/FeatureValidationMetadata.java
@@ -1,12 +1,12 @@
 package org.kairosdb.core.processingstage.metadata;
 
-public class QueryValidationMetadata
+public class FeatureValidationMetadata
 {
     private String expression;
     private String type;
     private String message;
 
-    public QueryValidationMetadata(String expression, String type, String message)
+    public FeatureValidationMetadata(String expression, String type, String message)
     {
         this.expression = expression;
         this.type = type;
diff --git a/src/test/java/org/kairosdb/core/aggregator/GuiceAggregatorFactoryTest.java b/src/test/java/org/kairosdb/core/aggregator/GuiceAggregatorFactoryTest.java
index e55da16002..c430b675d3 100755
--- a/src/test/java/org/kairosdb/core/aggregator/GuiceAggregatorFactoryTest.java
+++ b/src/test/java/org/kairosdb/core/aggregator/GuiceAggregatorFactoryTest.java
@@ -7,9 +7,9 @@
 import com.google.inject.Module;
 import org.junit.Test;
 import org.kairosdb.core.annotatedAggregator.AAggregator;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryValidationMetadata;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+import org.kairosdb.core.processingstage.metadata.FeaturePropertyMetadata;
+import org.kairosdb.core.processingstage.metadata.FeatureValidationMetadata;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
@@ -34,18 +34,18 @@ public void configure(Binder binder)
         });
         AggregatorFactory factory = new AggregatorFactory(injector);
 
-        ImmutableList<QueryProcessorMetadata> queryMetadata = factory.getQueryProcessorMetadata();
+        ImmutableList<FeatureProcessorMetadata> queryMetadata = factory.getFeatureProcessorMetadata();
 
         assertEquals(1, queryMetadata.size());
-        QueryProcessorMetadata metadata = queryMetadata.get(0);
+        FeatureProcessorMetadata metadata = queryMetadata.get(0);
         assertEquals(metadata.getName(), "A");
         assertEquals(metadata.getDescription(), "The A Aggregator");
 
         assertThat(metadata.getProperties().size(), equalTo(8));
-        ImmutableList<QueryPropertyMetadata> properties = metadata.getProperties();
+        ImmutableList<FeaturePropertyMetadata> properties = metadata.getProperties();
         assertProperty(properties.get(0), "allAnnotation", "AllAnnotation", "This is allAnnotation", "int", "2",
-                ImmutableList.copyOf(new QueryValidationMetadata[]{
-                        new QueryValidationMetadata("value > 0", "js", "Value must be greater than 0.")
+                ImmutableList.copyOf(new FeatureValidationMetadata[]{
+                        new FeatureValidationMetadata("value > 0", "js", "Value must be greater than 0.")
                 }));
         assertProperty(properties.get(1), "inherited", "Inherited", "This is alpha", "int", "1", ImmutableList.copyOf(new ArrayList<>()));
         assertProperty(properties.get(2), "myBoolean", "MyBoolean", "This is myBoolean", "boolean", "false", ImmutableList.copyOf(new ArrayList<>()));
@@ -55,23 +55,23 @@ public void configure(Binder binder)
         assertProperty(properties.get(6), "myString", "MyString", "This is myString", "String", "", ImmutableList.copyOf(new ArrayList<>()));
         assertProperty(properties.get(7), "sampling", "Sampling");
 
-        ImmutableList<QueryPropertyMetadata> samplingProperties = properties.get(7).getProperties();
+        ImmutableList<FeaturePropertyMetadata> samplingProperties = properties.get(7).getProperties();
         assertProperty(samplingProperties.get(0), "value", "Value", "The number of units for the aggregation buckets", "long", "1",
-                ImmutableList.copyOf(new QueryValidationMetadata[]{
-                        new QueryValidationMetadata("value > 0", "js", "Value must be greater than 0.")
+                ImmutableList.copyOf(new FeatureValidationMetadata[]{
+                        new FeatureValidationMetadata("value > 0", "js", "Value must be greater than 0.")
                 }));
         assertProperty(samplingProperties.get(1), "unit", "Unit", "The time unit for the sampling rate", "enum", "MILLISECONDS", ImmutableList.copyOf(new ArrayList<>()));
     }
 
-    private static void assertProperty(QueryPropertyMetadata property, String name, String label)
+    private static void assertProperty(FeaturePropertyMetadata property, String name, String label)
     {
         assertEquals("Names don't match", property.getName(), name);
         assertEquals("Labels don't match", property.getLabel(), label);
     }
 
     public static void assertProperty(
-            QueryPropertyMetadata property,
-            String name, String label, String description, String type, Object defaultValue, ImmutableList<QueryValidationMetadata> validations)
+            FeaturePropertyMetadata property,
+            String name, String label, String description, String type, Object defaultValue, ImmutableList<FeatureValidationMetadata> validations)
     {
         assertEquals("Names don't match", property.getName(), name);
         assertEquals("Labels don't match", property.getLabel(), label);
@@ -81,23 +81,23 @@ public static void assertProperty(
         assertValidations(validations, property.getValidations());
     }
 
-    private static void assertValidations(ImmutableList<QueryValidationMetadata> expectedValidations, ImmutableList<QueryValidationMetadata> actualValidations)
+    private static void assertValidations(ImmutableList<FeatureValidationMetadata> expectedValidations, ImmutableList<FeatureValidationMetadata> actualValidations)
     {
         if ((expectedValidations == null || actualValidations == null))
         {
-            assertEquals("QueryValidationMetadata don't match", expectedValidations, actualValidations);
+            assertEquals("FeatureValidationMetadata don't match", expectedValidations, actualValidations);
             return;
         }
 
         assertEquals("Validations quantity does not match", expectedValidations.size(), actualValidations.size());
         for (int i = 0; i < actualValidations.size(); i++)
         {
-            QueryValidationMetadata expectedValidation = expectedValidations.get(i);
-            QueryValidationMetadata actualValidation = actualValidations.get(i);
+            FeatureValidationMetadata expectedValidation = expectedValidations.get(i);
+            FeatureValidationMetadata actualValidation = actualValidations.get(i);
 
-            assertEquals("QueryValidationMetadata.expression don't match", expectedValidation.getExpression(), actualValidation.getExpression());
-            assertEquals("QueryValidationMetadata.message don't match", expectedValidation.getMessage(), actualValidation.getMessage());
-            assertEquals("QueryValidationMetadata.type don't match", expectedValidation.getType(), actualValidation.getType());
+            assertEquals("FeatureValidationMetadata.expression don't match", expectedValidation.getExpression(), actualValidation.getExpression());
+            assertEquals("FeatureValidationMetadata.message don't match", expectedValidation.getMessage(), actualValidation.getMessage());
+            assertEquals("FeatureValidationMetadata.type don't match", expectedValidation.getType(), actualValidation.getType());
         }
     }
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java b/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
index ffbf8fdb07..06a759fbce 100755
--- a/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
+++ b/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
@@ -17,21 +17,21 @@
 package org.kairosdb.core.aggregator;
 
 import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
 import org.kairosdb.core.exception.KairosDBException;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
 
 import java.util.HashMap;
 import java.util.Map;
 
-@QueryProcessingStage(
+@Feature(
         name = "aggregators",
         label = "Test Aggregator"
 )
-public class TestAggregatorFactory implements QueryProcessingStageFactory<Aggregator>
+public class TestAggregatorFactory implements FeatureProcessingFactory<Aggregator>
 {
     private Map<String, Aggregator> m_aggregators = new HashMap<String, Aggregator>();
 
@@ -52,22 +52,22 @@ public TestAggregatorFactory() throws KairosDBException
 
     private void addAggregator(Aggregator agg)
     {
-        String name = (agg.getClass().getAnnotation(QueryProcessor.class)).name();
+        String name = (agg.getClass().getAnnotation(FeatureComponent.class)).name();
         m_aggregators.put(name, agg);
     }
 
     @Override
-    public Aggregator createQueryProcessor(String name)
+    public Aggregator createFeatureProcessor(String name)
     {
         return (m_aggregators.get(name));
     }
 
     @Override
-    public Class<Aggregator> getQueryProcessorFamily()
+    public Class<Aggregator> getFeature()
     {
         return Aggregator.class;
     }
 
     @Override
-    public ImmutableList<QueryProcessorMetadata> getQueryProcessorMetadata() { return ImmutableList.copyOf(new QueryProcessorMetadata[]{});}
+    public ImmutableList<FeatureProcessorMetadata> getFeatureProcessorMetadata() { return ImmutableList.copyOf(new FeatureProcessorMetadata[]{});}
 }
diff --git a/src/test/java/org/kairosdb/core/annotatedAggregator/AAggregator.java b/src/test/java/org/kairosdb/core/annotatedAggregator/AAggregator.java
index 2ad3fc5a41..cd865421f5 100755
--- a/src/test/java/org/kairosdb/core/annotatedAggregator/AAggregator.java
+++ b/src/test/java/org/kairosdb/core/annotatedAggregator/AAggregator.java
@@ -3,18 +3,18 @@
 
 import com.google.inject.Inject;
 import org.kairosdb.core.aggregator.Sampling;
-import org.kairosdb.core.annotation.QueryCompoundProperty;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.annotation.ValidationProperty;
 
-@QueryProcessor(
+@FeatureComponent(
         name = "A",
         description = "The A Aggregator"
 )
 public class AAggregator extends BAggregator
 {
-    @QueryProperty(
+    @FeatureProperty(
             name = "allAnnotation",
             label = "AllAnnotation",
             description = "This is allAnnotation",
@@ -30,37 +30,37 @@
     )
     private int allAnnotation;
 
-    @QueryProperty(
+    @FeatureProperty(
             label = "MyDouble",
             description = "This is myDouble"
     )
     private double myDouble;
 
-    @QueryProperty(
+    @FeatureProperty(
             label = "MyLong",
             description = "This is myLong"
     )
     private long myLong;
 
-    @QueryProperty(
+    @FeatureProperty(
             label = "MyInt",
             description = "This is myInt"
     )
     private int myInt;
 
-   @QueryProperty(
+   @FeatureProperty(
             label = "MyBoolean",
             description = "This is myBoolean"
     )
     private boolean myBoolean;
 
-   @QueryProperty(
+   @FeatureProperty(
             label = "MyString",
             description = "This is myString"
     )
     private String myString;
 
-    @QueryCompoundProperty(
+    @FeatureCompoundProperty(
             label = "Sampling",
             order = {"Value", "Unit"}
     )
diff --git a/src/test/java/org/kairosdb/core/annotatedAggregator/BAggregator.java b/src/test/java/org/kairosdb/core/annotatedAggregator/BAggregator.java
index 47be0842d5..bf293209c6 100755
--- a/src/test/java/org/kairosdb/core/annotatedAggregator/BAggregator.java
+++ b/src/test/java/org/kairosdb/core/annotatedAggregator/BAggregator.java
@@ -2,12 +2,12 @@
 
 
 import org.kairosdb.core.aggregator.Aggregator;
-import org.kairosdb.core.annotation.QueryProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
 import org.kairosdb.core.datastore.DataPointGroup;
 
 public class BAggregator implements Aggregator
 {
-    @QueryProperty(
+    @FeatureProperty(
             name = "inherited",
             label = "Inherited",
             description = "This is alpha",
diff --git a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
index 926165fbe4..122e332e8b 100755
--- a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
+++ b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
@@ -32,7 +32,7 @@
 import org.kairosdb.core.groupby.GroupByResult;
 import org.kairosdb.core.groupby.TagGroupBy;
 import org.kairosdb.core.groupby.TagGroupByResult;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
 
 import java.io.File;
 import java.io.IOException;
@@ -50,7 +50,7 @@
 
 public class KairosDatastoreTest
 {
-	private QueryProcessingStageFactory<Aggregator> aggFactory;
+	private FeatureProcessingFactory<Aggregator> aggFactory;
 
 	public KairosDatastoreTest() throws KairosDBException
 	{
@@ -74,7 +74,7 @@ public void test_query_sumAggregator() throws KairosDBException
 		KairosDatastore datastore = new KairosDatastore(testds, new QueryQueuingManager(1, "hostname"),
 				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
 		QueryMetric metric = new QueryMetric(1L, 1, "metric1");
-		metric.addAggregator(aggFactory.createQueryProcessor("sum"));
+		metric.addAggregator(aggFactory.createFeatureProcessor("sum"));
 
 		DatastoreQuery dq = datastore.createQuery(metric);
 		List<DataPointGroup> results = dq.execute();
diff --git a/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java b/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
index ea2469f3ac..cb56a3e71e 100755
--- a/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
+++ b/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
@@ -19,13 +19,13 @@
 import org.json.JSONException;
 import org.json.JSONWriter;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.annotation.QueryProcessor;
+import org.kairosdb.core.annotation.FeatureComponent;
 import org.kairosdb.core.formatter.FormatterException;
 
 import java.io.StringWriter;
 import java.util.Map;
 
-@QueryProcessor(
+@FeatureComponent(
 		name = "simpleTime",
 		description = "Groups data points by time."
 )
diff --git a/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java b/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
index 78c95e4af2..46714a684c 100755
--- a/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
+++ b/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
@@ -16,19 +16,19 @@
 package org.kairosdb.core.groupby;
 
 import com.google.common.collect.ImmutableList;
-import org.kairosdb.core.annotation.QueryProcessingStage;
-import org.kairosdb.core.annotation.QueryProcessor;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
+import org.kairosdb.core.annotation.Feature;
+import org.kairosdb.core.annotation.FeatureComponent;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
 
 import java.util.HashMap;
 import java.util.Map;
 
-@QueryProcessingStage(
+@Feature(
         name = "group_by",
         label = "Test GroupBy"
 )
-public class TestGroupByFactory implements QueryProcessingStageFactory<GroupBy>
+public class TestGroupByFactory implements FeatureProcessingFactory<GroupBy>
 {
     private Map<String, GroupBy> groupBys = new HashMap<String, GroupBy>();
 
@@ -42,16 +42,16 @@ public TestGroupByFactory()
 
     private void addGroupBy(GroupBy groupBy)
     {
-        String name = (groupBy.getClass().getAnnotation(QueryProcessor.class)).name();
+        String name = (groupBy.getClass().getAnnotation(FeatureComponent.class)).name();
         groupBys.put(name, groupBy);
     }
 
     @Override
-    public GroupBy createQueryProcessor(String name) { return groupBys.get(name); }
+    public GroupBy createFeatureProcessor(String name) { return groupBys.get(name); }
 
     @Override
-    public Class<GroupBy> getQueryProcessorFamily() { return GroupBy.class; }
+    public Class<GroupBy> getFeature() { return GroupBy.class; }
 
     @Override
-    public ImmutableList<QueryProcessorMetadata> getQueryProcessorMetadata() { return ImmutableList.copyOf(new QueryProcessorMetadata[]{});}
+    public ImmutableList<FeatureProcessorMetadata> getFeatureProcessorMetadata() { return ImmutableList.copyOf(new FeatureProcessorMetadata[]{});}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/core/http/rest/QueryProcessingChainResourceTest.java b/src/test/java/org/kairosdb/core/http/rest/FeaturesResourceTest.java
similarity index 81%
rename from src/test/java/org/kairosdb/core/http/rest/QueryProcessingChainResourceTest.java
rename to src/test/java/org/kairosdb/core/http/rest/FeaturesResourceTest.java
index 937c74b3cf..67e6103797 100755
--- a/src/test/java/org/kairosdb/core/http/rest/QueryProcessingChainResourceTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/FeaturesResourceTest.java
@@ -13,7 +13,7 @@
 import org.kairosdb.core.DataPointListenerProvider;
 import org.kairosdb.core.GuiceKairosDataPointFactory;
 import org.kairosdb.core.KairosDataPointFactory;
-import org.kairosdb.core.KairosQueryProcessingChain;
+import org.kairosdb.core.KairosFeatureProcessor;
 import org.kairosdb.core.aggregator.Aggregator;
 import org.kairosdb.core.aggregator.TestAggregatorFactory;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
@@ -32,8 +32,8 @@
 import org.kairosdb.core.http.WebServletModule;
 import org.kairosdb.core.http.rest.json.QueryParser;
 import org.kairosdb.core.http.rest.json.TestQueryPluginFactory;
-import org.kairosdb.core.processingstage.QueryProcessingChain;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.FeatureProcessor;
 import org.kairosdb.testing.Client;
 import org.kairosdb.testing.JsonResponse;
 import org.slf4j.bridge.SLF4JBridgeHandler;
@@ -45,10 +45,9 @@
 
 import static org.kairosdb.core.http.rest.MetricsResourceTest.assertResponse;
 
-public class QueryProcessingChainResourceTest
+public class FeaturesResourceTest
 {
-    private static final String QUERY_PROCESSING_STAGE_URL = "http://localhost:9001/api/v1/queryprocessing/stages/";
-    private static final String QUERY_PROCESSING_CHAIN_URL = "http://localhost:9001/api/v1/queryprocessing/chain";
+    private static final String FEATURE_PROCESSING_URL = "http://localhost:9001/api/v1/features/";
 
     private static MetricsResourceTest.TestDatastore datastore;
     private static QueryQueuingManager queuingManager;
@@ -75,9 +74,9 @@ protected void configure()
                 bind(String.class).annotatedWith(Names.named(WebServer.JETTY_WEB_ROOT_PROPERTY)).toInstance("bogus");
                 bind(Datastore.class).toInstance(datastore);
                 bind(KairosDatastore.class).in(Singleton.class);
-                bind(QueryProcessingChain.class).to(KairosQueryProcessingChain.class).in(Singleton.class);
-                bind(new TypeLiteral<QueryProcessingStageFactory<Aggregator>>() {}).to(TestAggregatorFactory.class);
-                bind(new TypeLiteral<QueryProcessingStageFactory<GroupBy>>() {}).to(TestGroupByFactory.class);
+                bind(FeatureProcessor.class).to(KairosFeatureProcessor.class).in(Singleton.class);
+                bind(new TypeLiteral<FeatureProcessingFactory<Aggregator>>() {}).to(TestAggregatorFactory.class);
+                bind(new TypeLiteral<FeatureProcessingFactory<GroupBy>>() {}).to(TestGroupByFactory.class);
                 bind(QueryParser.class).in(Singleton.class);
                 bind(new TypeLiteral<List<DataPointListener>>(){}).toProvider(DataPointListenerProvider.class);
                 bind(QueryQueuingManager.class).toInstance(queuingManager);
@@ -131,21 +130,21 @@ public static void tearDown() throws Exception
     @Test
     public void testGetAggregatorList() throws IOException
     {
-        JsonResponse response = client.get(QUERY_PROCESSING_STAGE_URL + "aggregators");
+        JsonResponse response = client.get(FEATURE_PROCESSING_URL + "aggregators");
         assertResponse(response, 200, "[]");
     }
 
     @Test
-    public void testGetInvalidQueryProcessorList() throws IOException
+    public void testGetInvalidFeature() throws IOException
     {
-        JsonResponse response = client.get(QUERY_PROCESSING_STAGE_URL + "intel");
-        assertResponse(response, 404, "{\"errors\":[\"Unknown processing stage family 'intel'\"]}");
+        JsonResponse response = client.get(FEATURE_PROCESSING_URL + "intel");
+        assertResponse(response, 404, "{\"errors\":[\"Unknown feature 'intel'\"]}");
     }
 
     @Test
-    public void getTestGetQueryProcessingChain() throws IOException
+    public void getTestGetFeatures() throws IOException
     {
-        JsonResponse response = client.get(QUERY_PROCESSING_CHAIN_URL);
+        JsonResponse response = client.get(FEATURE_PROCESSING_URL);
         assertResponse(response, 200, "[{\"name\":\"group_by\",\"label\":\"Test GroupBy\",\"properties\":[]},{\"name\":\"aggregators\",\"label\":\"Test Aggregator\",\"properties\":[]}]");
     }
 }
diff --git a/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java b/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
index 9bf21a5f18..1f54891e32 100755
--- a/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
@@ -19,16 +19,38 @@
 import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.io.Resources;
-import com.google.inject.*;
+import com.google.inject.AbstractModule;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Singleton;
+import com.google.inject.TypeLiteral;
 import com.google.inject.name.Names;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.kairosdb.core.*;
+import org.kairosdb.core.DataPoint;
+import org.kairosdb.core.DataPointListener;
+import org.kairosdb.core.DataPointListenerProvider;
+import org.kairosdb.core.GuiceKairosDataPointFactory;
+import org.kairosdb.core.KairosDataPointFactory;
+import org.kairosdb.core.KairosFeatureProcessor;
 import org.kairosdb.core.aggregator.Aggregator;
 import org.kairosdb.core.aggregator.TestAggregatorFactory;
-import org.kairosdb.core.datapoints.*;
-import org.kairosdb.core.datastore.*;
+import org.kairosdb.core.datapoints.DoubleDataPoint;
+import org.kairosdb.core.datapoints.DoubleDataPointFactory;
+import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
+import org.kairosdb.core.datapoints.LegacyDataPointFactory;
+import org.kairosdb.core.datapoints.LongDataPoint;
+import org.kairosdb.core.datapoints.LongDataPointFactory;
+import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
+import org.kairosdb.core.datapoints.StringDataPointFactory;
+import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.DatastoreMetricQuery;
+import org.kairosdb.core.datastore.KairosDatastore;
+import org.kairosdb.core.datastore.QueryCallback;
+import org.kairosdb.core.datastore.QueryPluginFactory;
+import org.kairosdb.core.datastore.QueryQueuingManager;
+import org.kairosdb.core.datastore.TagSet;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.groupby.GroupBy;
 import org.kairosdb.core.groupby.TestGroupByFactory;
@@ -36,8 +58,8 @@
 import org.kairosdb.core.http.WebServletModule;
 import org.kairosdb.core.http.rest.json.QueryParser;
 import org.kairosdb.core.http.rest.json.TestQueryPluginFactory;
-import org.kairosdb.core.processingstage.QueryProcessingChain;
-import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
+import org.kairosdb.core.processingstage.FeatureProcessingFactory;
+import org.kairosdb.core.processingstage.FeatureProcessor;
 import org.kairosdb.testing.Client;
 import org.kairosdb.testing.JsonResponse;
 import org.kairosdb.util.LoggingUtils;
@@ -45,7 +67,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.*;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.TreeMap;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.startsWith;
@@ -85,9 +111,9 @@ protected void configure()
 				bind(String.class).annotatedWith(Names.named(WebServer.JETTY_WEB_ROOT_PROPERTY)).toInstance("bogus");
 				bind(Datastore.class).toInstance(datastore);
 				bind(KairosDatastore.class).in(Singleton.class);
-				bind(QueryProcessingChain.class).to(KairosQueryProcessingChain.class).in(Singleton.class);
-				bind(new TypeLiteral<QueryProcessingStageFactory<Aggregator>>() {}).to(TestAggregatorFactory.class);
-				bind(new TypeLiteral<QueryProcessingStageFactory<GroupBy>>() {}).to(TestGroupByFactory.class);
+				bind(FeatureProcessor.class).to(KairosFeatureProcessor.class).in(Singleton.class);
+				bind(new TypeLiteral<FeatureProcessingFactory<Aggregator>>() {}).to(TestAggregatorFactory.class);
+				bind(new TypeLiteral<FeatureProcessingFactory<GroupBy>>() {}).to(TestGroupByFactory.class);
 				bind(QueryParser.class).in(Singleton.class);
 				bind(new TypeLiteral<List<DataPointListener>>(){}).toProvider(DataPointListenerProvider.class);
 				bind(QueryQueuingManager.class).toInstance(queuingManager);
diff --git a/src/test/java/org/kairosdb/core/http/rest/RollUpResourceTest.java b/src/test/java/org/kairosdb/core/http/rest/RollUpResourceTest.java
index ec6d3ba37d..bc9a295dd4 100755
--- a/src/test/java/org/kairosdb/core/http/rest/RollUpResourceTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/RollUpResourceTest.java
@@ -6,7 +6,7 @@
 import com.google.gson.GsonBuilder;
 import org.junit.Before;
 import org.junit.Test;
-import org.kairosdb.core.KairosQueryProcessingChain;
+import org.kairosdb.core.KairosFeatureProcessor;
 import org.kairosdb.core.aggregator.TestAggregatorFactory;
 import org.kairosdb.core.exception.KairosDBException;
 import org.kairosdb.core.groupby.TestGroupByFactory;
@@ -26,14 +26,23 @@
 import java.util.Collections;
 import java.util.List;
 
-import static javax.ws.rs.core.Response.Status.*;
+import static javax.ws.rs.core.Response.Status.BAD_REQUEST;
+import static javax.ws.rs.core.Response.Status.INTERNAL_SERVER_ERROR;
+import static javax.ws.rs.core.Response.Status.NOT_FOUND;
+import static javax.ws.rs.core.Response.Status.NO_CONTENT;
+import static javax.ws.rs.core.Response.Status.OK;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsInAnyOrder;
 import static org.hamcrest.Matchers.isEmptyOrNullString;
 import static org.hamcrest.core.IsNot.not;
 import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.anyCollection;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class RollUpResourceTest
 {
@@ -51,7 +60,7 @@ public void setup() throws KairosDBException
 	{
 		mockStore = mock(RollUpTasksStore.class);
 		mockQueryParser = mock(QueryParser.class);
-		queryParser = new QueryParser(new KairosQueryProcessingChain(new TestAggregatorFactory(), new TestGroupByFactory()),
+		queryParser = new QueryParser(new KairosFeatureProcessor(new TestAggregatorFactory(), new TestGroupByFactory()),
 				new TestQueryPluginFactory());
 		resource = new RollUpResource(mockQueryParser, mockStore);
 	}
diff --git a/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java b/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
index 89e44735b1..ccef9cd492 100755
--- a/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
@@ -21,7 +21,7 @@
 import org.joda.time.DateTimeZone;
 import org.junit.Before;
 import org.junit.Test;
-import org.kairosdb.core.KairosQueryProcessingChain;
+import org.kairosdb.core.KairosFeatureProcessor;
 import org.kairosdb.core.aggregator.TestAggregatorFactory;
 import org.kairosdb.core.datastore.Duration;
 import org.kairosdb.core.datastore.QueryMetric;
@@ -36,7 +36,9 @@
 import java.util.List;
 
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.*;
+import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.hasItem;
+import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.Assert.fail;
 
 public class QueryParserTest
@@ -46,7 +48,7 @@
 	@Before
 	public void setup() throws KairosDBException
 	{
-		parser = new QueryParser(new KairosQueryProcessingChain(new TestAggregatorFactory(), new TestGroupByFactory()), new TestQueryPluginFactory());
+		parser = new QueryParser(new KairosFeatureProcessor(new TestAggregatorFactory(), new TestGroupByFactory()), new TestQueryPluginFactory());
 	}
 
 	@Test
diff --git a/src/test/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactoryTest.java b/src/test/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactoryTest.java
similarity index 60%
rename from src/test/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactoryTest.java
rename to src/test/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactoryTest.java
index 68791a225d..9077ee05a2 100755
--- a/src/test/java/org/kairosdb/core/processingstage/GenericQueryProcessingStageFactoryTest.java
+++ b/src/test/java/org/kairosdb/core/processingstage/GenericFeatureProcessorFactoryTest.java
@@ -12,10 +12,10 @@
 import org.kairosdb.core.aggregator.AggregatorFactory;
 import org.kairosdb.core.aggregator.InvalidAggregator;
 import org.kairosdb.core.annotatedAggregator.AAggregator;
-import org.kairosdb.core.annotation.QueryCompoundProperty;
-import org.kairosdb.core.annotation.QueryProperty;
-import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
-import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
+import org.kairosdb.core.annotation.FeatureCompoundProperty;
+import org.kairosdb.core.annotation.FeatureProperty;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
+import org.kairosdb.core.processingstage.metadata.FeaturePropertyMetadata;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -29,16 +29,16 @@
 import static org.junit.Assert.assertEquals;
 import static org.kairosdb.core.aggregator.GuiceAggregatorFactoryTest.assertProperty;
 
-public class GenericQueryProcessingStageFactoryTest
+public class GenericFeatureProcessorFactoryTest
 {
-    private static QueryProcessingStageFactory<Aggregator> factory;
+    private static FeatureProcessingFactory<Aggregator> factory;
 
     @BeforeClass
     public static void factory_generation_valid()
             throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException
     {
         Injector injector = Guice.createInjector((Module) binder -> binder.bind(AAggregator.class));
-        GenericQueryProcessingStageFactoryTest.factory = new AggregatorFactory(injector);
+        GenericFeatureProcessorFactoryTest.factory = new AggregatorFactory(injector);
     }
 
     @Test(expected = IllegalStateException.class)
@@ -46,20 +46,20 @@ public void factory_generation_invalid_metadata()
             throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException
     {
         Injector injector = Guice.createInjector((Module) binder -> binder.bind(InvalidAggregator.class));
-        QueryProcessingStageFactory<Aggregator> factory = new AggregatorFactory(injector);
+        FeatureProcessingFactory<Aggregator> factory = new AggregatorFactory(injector);
     }
 
     @Test(expected = NullPointerException.class)
     public void factory_generation_invalid_injector()
             throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException
     {
-        QueryProcessingStageFactory<?> factory = new AggregatorFactory(null);
+        FeatureProcessingFactory<?> factory = new AggregatorFactory(null);
     }
 
     @Test
     public void factory_getter_query_processor_family()
     {
-        assertEquals("QueryProcessor family don't match", Aggregator.class, GenericQueryProcessingStageFactoryTest.factory.getQueryProcessorFamily());
+        assertEquals("FeatureComponent family don't match", Aggregator.class, GenericFeatureProcessorFactoryTest.factory.getFeature());
     }
 
     @Test
@@ -68,16 +68,16 @@ public void factory_getter_query_processor_metadata()
     {
         assertQueryProcessors(
                 ImmutableList.copyOf(factory_valid_metadata_generator()),
-                GenericQueryProcessingStageFactoryTest.factory.getQueryProcessorMetadata()
+                GenericFeatureProcessorFactoryTest.factory.getFeatureProcessorMetadata()
         );
     }
 
     @Test
     public void factory_new_query_processor()
     {
-        assertEquals("QueryProcessor created was invalid",
+        assertEquals("FeatureComponent created was invalid",
                 AAggregator.class,
-                GenericQueryProcessingStageFactoryTest.factory.createQueryProcessor("A").getClass());
+                GenericFeatureProcessorFactoryTest.factory.createFeatureProcessor("A").getClass());
     }
 
 
@@ -119,16 +119,16 @@ else if (Collection.class.isAssignableFrom(field.getType()) || field.getType().i
     }
 
     @SuppressWarnings("ConstantConditions")
-    static List<QueryPropertyMetadata> getPropertyMetadata(Class clazz)
+    static List<FeaturePropertyMetadata> getPropertyMetadata(Class clazz)
             throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, ClassNotFoundException
     {
         checkNotNull(clazz, "class cannot be null");
 
-        List<QueryPropertyMetadata> properties = new ArrayList<>();
+        List<FeaturePropertyMetadata> properties = new ArrayList<>();
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields)
         {
-            if (field.getAnnotation(QueryProperty.class) != null)
+            if (field.getAnnotation(FeatureProperty.class) != null)
             {
                 String type = getType(field);
                 String options = null;
@@ -138,16 +138,16 @@ else if (Collection.class.isAssignableFrom(field.getType()) || field.getType().i
                     type = "enum";
                 }
 
-                QueryProperty property = field.getAnnotation(QueryProperty.class);
-                properties.add(new QueryPropertyMetadata(field.getName(), type, options,
+                FeatureProperty property = field.getAnnotation(FeatureProperty.class);
+                properties.add(new FeaturePropertyMetadata(field.getName(), type, options,
                         isEmpty(property.default_value()) ? getDefaultValue(field) : property.default_value(),
                         property));
             }
 
-            QueryCompoundProperty annotation = field.getAnnotation(QueryCompoundProperty.class);
+            FeatureCompoundProperty annotation = field.getAnnotation(FeatureCompoundProperty.class);
             if (annotation != null)
             {
-                properties.add(new QueryPropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
+                properties.add(new FeaturePropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
             }
         }
 
@@ -157,10 +157,10 @@ else if (Collection.class.isAssignableFrom(field.getType()) || field.getType().i
         }
 
         //noinspection Convert2Lambda
-        properties.sort(new Comparator<QueryPropertyMetadata>()
+        properties.sort(new Comparator<FeaturePropertyMetadata>()
         {
             @Override
-            public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
+            public int compare(FeaturePropertyMetadata o1, FeaturePropertyMetadata o2)
             {
                 return o1.getLabel().compareTo(o2.getLabel());
             }
@@ -169,11 +169,11 @@ public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
         return properties;
     }
 
-    static QueryProcessorMetadata[] factory_valid_metadata_generator()
+    static FeatureProcessorMetadata[] factory_valid_metadata_generator()
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException
     {
-        return new QueryProcessorMetadata[]{
-                new QueryProcessorMetadata(
+        return new FeatureProcessorMetadata[]{
+                new FeatureProcessorMetadata(
                         "A",
                         "A",
                         "The A Aggregator",
@@ -182,18 +182,18 @@ public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
         };
     }
 
-    static void assertQueryProcessors(ImmutableList<QueryProcessorMetadata> expectedQueryProcessorMetadatas,
-                                      ImmutableList<QueryProcessorMetadata> actualQueryProcessorMetadatas)
+    static void assertQueryProcessors(ImmutableList<FeatureProcessorMetadata> expectedFeatureProcessorMetadata,
+                                      ImmutableList<FeatureProcessorMetadata> actualFeatureProcessorMetadata)
     {
-        assertEquals("QueryProcessor metadata quantity don't match", expectedQueryProcessorMetadatas.size(), actualQueryProcessorMetadatas.size());
-        for (int i = 0; i < actualQueryProcessorMetadatas.size(); i++)
+        assertEquals("FeatureComponent metadata quantity don't match", expectedFeatureProcessorMetadata.size(), actualFeatureProcessorMetadata.size());
+        for (int i = 0; i < actualFeatureProcessorMetadata.size(); i++)
         {
-            QueryProcessorMetadata expectedQueryProcessor = expectedQueryProcessorMetadatas.get(i);
-            QueryProcessorMetadata actualQueryProcessorActual = actualQueryProcessorMetadatas.get(i);
+            FeatureProcessorMetadata expectedQueryProcessor = expectedFeatureProcessorMetadata.get(i);
+            FeatureProcessorMetadata actualQueryProcessorActual = actualFeatureProcessorMetadata.get(i);
 
-            assertEquals("QueryProcessor metadata name don't match", expectedQueryProcessor.getName(), actualQueryProcessorActual.getName());
-            assertEquals("QueryProcessor metadata description don't match", expectedQueryProcessor.getDescription(), actualQueryProcessorActual.getDescription());
-            assertEquals("QueryProcessor metadata label don't match", expectedQueryProcessor.getLabel(), actualQueryProcessorActual.getLabel());
+            assertEquals("FeatureComponent metadata name don't match", expectedQueryProcessor.getName(), actualQueryProcessorActual.getName());
+            assertEquals("FeatureComponent metadata description don't match", expectedQueryProcessor.getDescription(), actualQueryProcessorActual.getDescription());
+            assertEquals("FeatureComponent metadata label don't match", expectedQueryProcessor.getLabel(), actualQueryProcessorActual.getLabel());
             assertQueryProperties(
                     expectedQueryProcessor.getProperties(),
                     actualQueryProcessorActual.getProperties()
@@ -201,15 +201,15 @@ static void assertQueryProcessors(ImmutableList<QueryProcessorMetadata> expected
         }
     }
 
-    static void assertQueryProperties(ImmutableList<QueryPropertyMetadata> expectedQueryPropertyMetadatas,
-                                      ImmutableList<QueryPropertyMetadata> actualQueryPropertyMetadatas)
+    static void assertQueryProperties(ImmutableList<FeaturePropertyMetadata> expectedFeaturePropertyMetadata,
+                                      ImmutableList<FeaturePropertyMetadata> actualFeaturePropertyMetadata)
     {
-        assertEquals("QueryProperty metadata quantity don't match", expectedQueryPropertyMetadatas.size(), actualQueryPropertyMetadatas.size());
+        assertEquals("FeatureProperty metadata quantity don't match", expectedFeaturePropertyMetadata.size(), actualFeaturePropertyMetadata.size());
 
-        for (int i = 0; i < actualQueryPropertyMetadatas.size(); i++)
+        for (int i = 0; i < actualFeaturePropertyMetadata.size(); i++)
         {
-            QueryPropertyMetadata expectedQueryProperty = expectedQueryPropertyMetadatas.get(i);
-            QueryPropertyMetadata actualQueryProperty = actualQueryPropertyMetadatas.get(i);
+            FeaturePropertyMetadata expectedQueryProperty = expectedFeaturePropertyMetadata.get(i);
+            FeaturePropertyMetadata actualQueryProperty = actualFeaturePropertyMetadata.get(i);
 
             assertProperty(actualQueryProperty,
                     expectedQueryProperty.getName(), expectedQueryProperty.getLabel(), expectedQueryProperty.getDescription(),
diff --git a/src/test/java/org/kairosdb/core/processingstage/GenericProcessingChainTest.java b/src/test/java/org/kairosdb/core/processingstage/GenericProcessingChainTest.java
index db531d618c..a1b04d555f 100755
--- a/src/test/java/org/kairosdb/core/processingstage/GenericProcessingChainTest.java
+++ b/src/test/java/org/kairosdb/core/processingstage/GenericProcessingChainTest.java
@@ -10,19 +10,19 @@
 import org.kairosdb.core.aggregator.AggregatorFactory;
 import org.kairosdb.core.annotatedAggregator.AAggregator;
 import org.kairosdb.core.groupby.GroupBy;
-import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
+import org.kairosdb.core.processingstage.metadata.FeatureProcessingMetadata;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Arrays;
 
 import static org.junit.Assert.assertEquals;
-import static org.kairosdb.core.processingstage.GenericQueryProcessingStageFactoryTest.assertQueryProcessors;
-import static org.kairosdb.core.processingstage.GenericQueryProcessingStageFactoryTest.factory_valid_metadata_generator;
+import static org.kairosdb.core.processingstage.GenericFeatureProcessorFactoryTest.assertQueryProcessors;
+import static org.kairosdb.core.processingstage.GenericFeatureProcessorFactoryTest.factory_valid_metadata_generator;
 
 public class GenericProcessingChainTest
 {
-    private static QueryProcessingChain processingChain;
+    private static FeatureProcessor processingChain;
 
     @BeforeClass
     public static void chain_generation_valid()
@@ -30,7 +30,7 @@ public static void chain_generation_valid()
     {
         Injector injector = Guice.createInjector((Module) binder -> binder.bind(AAggregator.class));
 
-        GenericProcessingChainTest.processingChain = new TestKairosDBProcessingChain(new ArrayList<QueryProcessingStageFactory<?>>()
+        GenericProcessingChainTest.processingChain = new TestKairosDBProcessor(new ArrayList<FeatureProcessingFactory<?>>()
         {{
             add(new AggregatorFactory(injector));
         }});
@@ -40,41 +40,41 @@ public static void chain_generation_valid()
     public void chain_generation_empty_list()
             throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException
     {
-        new TestKairosDBProcessingChain(new ArrayList<>());
+        new TestKairosDBProcessor(new ArrayList<>());
     }
 
     @Test(expected = NullPointerException.class)
     public void chain_generation_null_list()
     {
-        new TestKairosDBProcessingChain(null);
+        new TestKairosDBProcessor(null);
     }
 
     @Test
     public void chain_getter_factory_with_name()
     {
-        QueryProcessingStageFactory<?> factory = GenericProcessingChainTest.processingChain.getQueryProcessingStageFactory(Aggregator.class);
-        assertEquals("Invalid type of QueryProcessingStageFactory", AggregatorFactory.class, factory.getClass());
+        FeatureProcessingFactory<?> factory = GenericProcessingChainTest.processingChain.getFeatureProcessingFactory(Aggregator.class);
+        assertEquals("Invalid type of FeatureProcessingFactory", AggregatorFactory.class, factory.getClass());
     }
 
     @Test
     public void chain_getter_factory_with_name_failure()
     {
-        QueryProcessingStageFactory<?> factory = GenericProcessingChainTest.processingChain.getQueryProcessingStageFactory(GroupBy.class);
-        assertEquals("Invalid type of QueryProcessingStageFactory", null, factory);
+        FeatureProcessingFactory<?> factory = GenericProcessingChainTest.processingChain.getFeatureProcessingFactory(GroupBy.class);
+        assertEquals("Invalid type of FeatureProcessingFactory", null, factory);
     }
 
     @Test
     public void chain_getter_factory_with_class()
     {
-        QueryProcessingStageFactory<?> factory = GenericProcessingChainTest.processingChain.getQueryProcessingStageFactory("aggregators");
-        assertEquals("Invalid type of QueryProcessingStageFactory", AggregatorFactory.class, factory.getClass());
+        FeatureProcessingFactory<?> factory = GenericProcessingChainTest.processingChain.getFeatureProcessingFactory("aggregators");
+        assertEquals("Invalid type of FeatureProcessingFactory", AggregatorFactory.class, factory.getClass());
     }
 
     @Test
     public void chain_getter_factory_with_class_failure()
     {
-        QueryProcessingStageFactory<?> factory = GenericProcessingChainTest.processingChain.getQueryProcessingStageFactory("groupby");
-        assertEquals("Invalid type of QueryProcessingStageFactory", null, factory);
+        FeatureProcessingFactory<?> factory = GenericProcessingChainTest.processingChain.getFeatureProcessingFactory("groupby");
+        assertEquals("Invalid type of FeatureProcessingFactory", null, factory);
     }
 
     @Test
@@ -83,15 +83,15 @@ public void chain_getter_metadata()
     {
         assertQueryProcessorFactories(
                 ImmutableList.copyOf(chain_valid_metadata_generator()),
-                this.processingChain.getQueryProcessingChainMetadata()
+                this.processingChain.getFeatureProcessingMetadata()
         );
     }
 
-    static QueryProcessingStageMetadata[] chain_valid_metadata_generator()
+    static FeatureProcessingMetadata[] chain_valid_metadata_generator()
             throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException
     {
-        return new QueryProcessingStageMetadata[]{
-                new QueryProcessingStageMetadata(
+        return new FeatureProcessingMetadata[]{
+                new FeatureProcessingMetadata(
                         "aggregators",
                         "Aggregator",
                         Arrays.asList(factory_valid_metadata_generator())
@@ -99,16 +99,16 @@ public void chain_getter_metadata()
         };
     }
 
-    static void assertQueryProcessorFactories(ImmutableList<QueryProcessingStageMetadata> expectedProcessingChain,
-                                              ImmutableList<QueryProcessingStageMetadata> actualProcessingChain)
+    static void assertQueryProcessorFactories(ImmutableList<FeatureProcessingMetadata> expectedProcessingChain,
+                                              ImmutableList<FeatureProcessingMetadata> actualProcessingChain)
     {
-        assertEquals("QueryProcessingStage metadata size don't match", expectedProcessingChain.size(), actualProcessingChain.size());
+        assertEquals("Feature metadata size don't match", expectedProcessingChain.size(), actualProcessingChain.size());
         for (int i = 0; i < actualProcessingChain.size(); i++)
         {
-            QueryProcessingStageMetadata expectedQueryProcessorStage = expectedProcessingChain.get(i);
-            QueryProcessingStageMetadata actualQueryProcessorStage = actualProcessingChain.get(i);
-            assertEquals("QueryProcessingStage metadata name don't match", expectedQueryProcessorStage.getName(), actualQueryProcessorStage.getName());
-            assertEquals("QueryProcessingStage metadata label don't match", expectedQueryProcessorStage.getLabel(), actualQueryProcessorStage.getLabel());
+            FeatureProcessingMetadata expectedQueryProcessorStage = expectedProcessingChain.get(i);
+            FeatureProcessingMetadata actualQueryProcessorStage = actualProcessingChain.get(i);
+            assertEquals("Feature metadata name don't match", expectedQueryProcessorStage.getName(), actualQueryProcessorStage.getName());
+            assertEquals("Feature metadata label don't match", expectedQueryProcessorStage.getLabel(), actualQueryProcessorStage.getLabel());
             assertQueryProcessors(expectedQueryProcessorStage.getProperties(), actualQueryProcessorStage.getProperties());
         }
     }
diff --git a/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessingChain.java b/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessingChain.java
deleted file mode 100755
index 300ac18a11..0000000000
--- a/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessingChain.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package org.kairosdb.core.processingstage;
-
-import java.util.List;
-
-public class TestKairosDBProcessingChain extends GenericQueryProcessingChain
-{
-    public TestKairosDBProcessingChain(List<QueryProcessingStageFactory<?>> processingChain)
-    {
-        super(processingChain);
-    }
-}
diff --git a/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessor.java b/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessor.java
new file mode 100755
index 0000000000..b36c4ac11e
--- /dev/null
+++ b/src/test/java/org/kairosdb/core/processingstage/TestKairosDBProcessor.java
@@ -0,0 +1,11 @@
+package org.kairosdb.core.processingstage;
+
+import java.util.List;
+
+public class TestKairosDBProcessor extends GenericFeatureProcessor
+{
+    public TestKairosDBProcessor(List<FeatureProcessingFactory<?>> processingChain)
+    {
+        super(processingChain);
+    }
+}
diff --git a/src/test/java/org/kairosdb/rollup/RollUpTasksFileStoreTest.java b/src/test/java/org/kairosdb/rollup/RollUpTasksFileStoreTest.java
index 8ed96db301..89a6d78b84 100755
--- a/src/test/java/org/kairosdb/rollup/RollUpTasksFileStoreTest.java
+++ b/src/test/java/org/kairosdb/rollup/RollUpTasksFileStoreTest.java
@@ -5,7 +5,7 @@
 import org.apache.commons.io.FileUtils;
 import org.junit.Before;
 import org.junit.Test;
-import org.kairosdb.core.KairosQueryProcessingChain;
+import org.kairosdb.core.KairosFeatureProcessor;
 import org.kairosdb.core.aggregator.TestAggregatorFactory;
 import org.kairosdb.core.exception.KairosDBException;
 import org.kairosdb.core.groupby.TestGroupByFactory;
@@ -38,7 +38,7 @@
 	public void setup() throws IOException, KairosDBException
 	{
 		FileUtils.deleteDirectory(new File(DIRECTORY));
-		parser = new QueryParser(new KairosQueryProcessingChain(new TestAggregatorFactory(), new TestGroupByFactory()), new TestQueryPluginFactory());
+		parser = new QueryParser(new KairosFeatureProcessor(new TestAggregatorFactory(), new TestGroupByFactory()), new TestQueryPluginFactory());
 
 		mockListener = mock(RollupTaskChangeListener.class);
 	}
