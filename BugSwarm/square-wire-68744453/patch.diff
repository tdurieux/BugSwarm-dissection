diff --git a/wire-compiler/src/main/java/com/squareup/wire/model/Util.java b/wire-compiler/src/main/java/com/squareup/wire/model/Util.java
index 25f712d096..12e0e1104c 100755
--- a/wire-compiler/src/main/java/com/squareup/wire/model/Util.java
+++ b/wire-compiler/src/main/java/com/squareup/wire/model/Util.java
@@ -19,6 +19,9 @@
 import java.util.List;
 
 final class Util {
+  private Util() {
+  }
+
   public static <T> T checkNotNull(T value, String name) {
     if (value == null) {
       throw new NullPointerException(name + " == null");
@@ -32,7 +35,7 @@ public static void checkState(boolean assertion) {
     }
   }
 
-  static <T> List<T> concatenate(List<T> a, T b) {
+  public static <T> List<T> concatenate(List<T> a, T b) {
     List<T> result = new ArrayList<T>();
     result.addAll(a);
     result.add(b);
diff --git a/wire-compiler/src/main/java/com/squareup/wire/model/WireEnum.java b/wire-compiler/src/main/java/com/squareup/wire/model/WireEnum.java
index e54775b612..c2922dd22f 100755
--- a/wire-compiler/src/main/java/com/squareup/wire/model/WireEnum.java
+++ b/wire-compiler/src/main/java/com/squareup/wire/model/WireEnum.java
@@ -57,7 +57,7 @@ public WireEnum(ProtoTypeName protoTypeName, EnumElement element) {
     return options;
   }
 
-  @Override public final List<WireType> nestedTypes() {
+  @Override public List<WireType> nestedTypes() {
     return Collections.emptyList(); // Enums do not allow nested type declarations.
   }
 
diff --git a/wire-compiler/src/main/java/com/squareup/wire/model/WireField.java b/wire-compiler/src/main/java/com/squareup/wire/model/WireField.java
index fd914a8ccf..cb39531bbb 100755
--- a/wire-compiler/src/main/java/com/squareup/wire/model/WireField.java
+++ b/wire-compiler/src/main/java/com/squareup/wire/model/WireField.java
@@ -57,15 +57,15 @@ public String documentation() {
     return options;
   }
 
-  public final boolean isDeprecated() {
+  public boolean isDeprecated() {
     return element.isDeprecated();
   }
 
-  public final boolean isPacked() {
+  public boolean isPacked() {
     return element.isPacked();
   }
 
-  public final WireOption getDefault() {
+  public WireOption getDefault() {
     return Util.findOption(options, "default");
   }
 
