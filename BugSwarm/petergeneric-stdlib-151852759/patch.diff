diff --git a/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/HealthRestServiceImpl.java b/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/HealthRestServiceImpl.java
index 82d297df20..c81f17eb5d 100755
--- a/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/HealthRestServiceImpl.java
+++ b/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/HealthRestServiceImpl.java
@@ -5,7 +5,7 @@
 import com.peterphi.std.guice.common.auth.annotations.AuthConstraint;
 import com.peterphi.std.guice.metrics.rest.api.HealthRestService;
 import com.peterphi.std.guice.metrics.rest.types.HealthDocument;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 
 @AuthConstraint(id = "framework-admin", role = "framework-admin")
diff --git a/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/MetricsRestServiceImpl.java b/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/MetricsRestServiceImpl.java
index ab208345b4..3a2eca14f9 100755
--- a/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/MetricsRestServiceImpl.java
+++ b/guice/metrics/src/main/java/com/peterphi/std/guice/metrics/rest/impl/MetricsRestServiceImpl.java
@@ -13,7 +13,7 @@
 import com.peterphi.std.guice.metrics.rest.types.MetricsGauge;
 import com.peterphi.std.guice.metrics.rest.types.MetricsHistogram;
 import com.peterphi.std.guice.metrics.rest.types.MetricsMeter;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 
 import java.util.SortedMap;
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallJWTUser.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallJWTUser.java
index 2c0d260731..e1862262ce 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallJWTUser.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallJWTUser.java
@@ -280,7 +280,7 @@ public boolean hasRole(final String role)
 		final Map<String, Object> data = get();
 
 		// Special case the "authenticated" role - need only have a valid token, no role is required
-		if (StringUtils.equals(WebappAuthenticationModule.ROLE_SPECIAL_AUTHENTICATED, role))
+		if (StringUtils.equals(CurrentUser.ROLE_AUTHENTICATED, role))
 		{
 			return data != null;
 		}
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallUser.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallUser.java
index c880e18897..74d0dfcfc2 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallUser.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/HttpCallUser.java
@@ -62,7 +62,7 @@ public boolean hasRole(final String role)
 	{
 		HttpServletRequest request = HttpCallContext.get().getRequest();
 
-		if (StringUtils.equals(WebappAuthenticationModule.ROLE_SPECIAL_AUTHENTICATED, role))
+		if (StringUtils.equals(CurrentUser.ROLE_AUTHENTICATED, role))
 		{
 			return request.getUserPrincipal() != null;
 		}
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/WebappAuthenticationModule.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/WebappAuthenticationModule.java
index be01a62da1..07c319095a 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/WebappAuthenticationModule.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/auth/userprovider/WebappAuthenticationModule.java
@@ -11,17 +11,13 @@
 import com.peterphi.std.guice.apploader.GuiceProperties;
 import com.peterphi.std.guice.common.auth.iface.CurrentUser;
 import com.peterphi.std.guice.common.serviceprops.composite.GuiceConfig;
-import com.peterphi.std.guice.web.HttpCallContext;
 import com.peterphi.std.guice.web.rest.scoping.SessionScoped;
-import org.apache.log4j.Logger;
 
 import javax.servlet.http.HttpServletRequest;
 import java.util.List;
 
 public class WebappAuthenticationModule extends AbstractModule
 {
-	private static final Logger log = Logger.getLogger(WebappAuthenticationModule.class);
-
 	private final List<String> providerNames;
 
 	private final String jwtHeader;
@@ -76,23 +72,9 @@ public CurrentUser getCurrentUser(Injector injector, HttpServletRequest request)
 			final CurrentUser user = provider.get();
 
 			if (user != null)
-			{
-				applyUserToCurrentSession(user);
 				return user;
-			}
 		}
 
 		throw new IllegalArgumentException("No provider could determine a user for HTTP request!");
 	}
-
-
-	private void applyUserToCurrentSession(final CurrentUser user)
-	{
-		final HttpCallContext ctx = HttpCallContext.peek();
-
-		if (ctx != null)
-			ctx.getRequest().getSession().setAttribute("login", user);
-		else
-			log.warn("applyUserToCurrentSession called without an HttpCallContext in place!");
-	}
 }
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/daemons/GuiceRestDaemonsServiceImpl.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/daemons/GuiceRestDaemonsServiceImpl.java
index 42d87c24b9..b7be82204b 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/daemons/GuiceRestDaemonsServiceImpl.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/daemons/GuiceRestDaemonsServiceImpl.java
@@ -8,7 +8,7 @@
 import com.peterphi.std.guice.common.daemon.GuiceDaemon;
 import com.peterphi.std.guice.common.daemon.GuiceDaemonRegistry;
 import com.peterphi.std.guice.common.daemon.GuiceRecurringDaemon;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 import org.apache.commons.lang.StringUtils;
 import org.joda.time.DateTime;
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/jwt/JwtCreationRestServiceImpl.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/jwt/JwtCreationRestServiceImpl.java
index 5c17cbb89b..6085872779 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/jwt/JwtCreationRestServiceImpl.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/jwt/JwtCreationRestServiceImpl.java
@@ -7,7 +7,7 @@
 import com.peterphi.std.guice.apploader.GuiceProperties;
 import com.peterphi.std.guice.common.auth.annotations.AuthConstraint;
 import com.peterphi.std.guice.web.HttpCallContext;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 import org.apache.commons.lang.StringUtils;
 
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/logging/GuiceRestLoggingServiceImpl.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/logging/GuiceRestLoggingServiceImpl.java
index 6264cd03e1..c7bb8ee676 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/logging/GuiceRestLoggingServiceImpl.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/logging/GuiceRestLoggingServiceImpl.java
@@ -7,7 +7,7 @@
 import com.peterphi.std.guice.common.Log4JModule;
 import com.peterphi.std.guice.common.auth.annotations.AuthConstraint;
 import com.peterphi.std.guice.common.serviceprops.composite.GuiceConfig;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 import com.peterphi.std.io.PropertyFile;
 
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestConfigListImpl.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestConfigListImpl.java
index cc212e1a46..d6b8b390d3 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestConfigListImpl.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestConfigListImpl.java
@@ -8,7 +8,7 @@
 import com.peterphi.std.guice.common.serviceprops.ConfigurationPropertyRegistry;
 import com.peterphi.std.guice.common.serviceprops.annotations.Reconfigurable;
 import com.peterphi.std.guice.common.serviceprops.composite.GuiceConfig;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
 import com.peterphi.std.io.PropertyFile;
 
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestServiceListImpl.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestServiceListImpl.java
index 09c1815515..a8b497fdd8 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestServiceListImpl.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/service/servicedescription/RestServiceListImpl.java
@@ -6,7 +6,7 @@
 import com.peterphi.std.guice.apploader.GuiceProperties;
 import com.peterphi.std.guice.common.auth.annotations.AuthConstraint;
 import com.peterphi.std.guice.serviceregistry.rest.RestResourceRegistry;
-import com.peterphi.std.guice.web.rest.service.GuiceCoreTemplater;
+import com.peterphi.std.guice.web.rest.templating.thymeleaf.GuiceCoreTemplater;
 import com.peterphi.std.guice.web.rest.service.servicedescription.freemarker.RestServiceInfo;
 import com.peterphi.std.guice.web.rest.service.servicedescription.freemarker.SchemaGenerateUtil;
 import com.peterphi.std.guice.web.rest.templating.TemplateCall;
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/GuiceCoreTemplater.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/GuiceCoreTemplater.java
new file mode 100755
index 0000000000..020e91c017
--- /dev/null
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/GuiceCoreTemplater.java
@@ -0,0 +1,115 @@
+package com.peterphi.std.guice.web.rest.templating.thymeleaf;
+
+import com.codahale.metrics.MetricRegistry;
+import com.google.inject.Inject;
+import com.google.inject.Provider;
+import com.google.inject.Singleton;
+import com.google.inject.name.Named;
+import com.peterphi.std.guice.apploader.GuiceProperties;
+import com.peterphi.std.guice.common.auth.iface.CurrentUser;
+import com.peterphi.std.guice.common.serviceprops.composite.GuiceConfig;
+import com.peterphi.std.guice.web.rest.service.GuiceCoreServicesRegistry;
+import org.thymeleaf.TemplateEngine;
+import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;
+
+import java.lang.ref.WeakReference;
+import java.net.URI;
+
+/**
+ * Acts as a ThymeleafTemplater for core guice services
+ */
+@Singleton
+public class GuiceCoreTemplater
+{
+	@Inject
+	GuiceConfig configuration;
+	@Inject
+	MetricRegistry metrics;
+	@Inject
+	@Named(GuiceProperties.REST_SERVICES_PREFIX)
+	String coreRestPrefix;
+	@Inject
+	@Named(GuiceProperties.LOCAL_REST_SERVICES_ENDPOINT)
+	URI coreRestEndpoint;
+	@Inject
+	GuiceCoreServicesRegistry services;
+
+	@Inject
+	Provider<CurrentUser> userProvider;
+
+	/**
+	 * We cache the TemplateEngine directly because Java may discard the ThymeleafTemplater wrapper but not the TemplateEngine
+	 * (which would cost us a lot of time+memory)
+	 */
+	private WeakReference<TemplateEngine> engine = new WeakReference<>(null);
+	private WeakReference<ThymeleafTemplater> templater = new WeakReference<>(null);
+
+
+	public ThymeleafCall template(String template)
+	{
+		final ThymeleafTemplater templater = getOrCreateTemplater();
+
+		return templater.template(template);
+	}
+
+
+	/**
+	 * Retrieve or build a Thymeleaf templater
+	 *
+	 * @return
+	 */
+	private ThymeleafTemplater getOrCreateTemplater()
+	{
+		ThymeleafTemplater templater = this.templater.get();
+
+		// Lazy-create a ThymeleafTemplater
+		if (templater == null)
+		{
+			final TemplateEngine engine = getOrCreateEngine();
+
+			templater = new ThymeleafTemplater(engine, configuration, metrics, userProvider);
+
+			templater.set("coreRestPrefix", coreRestPrefix);
+			templater.set("coreRestEndpoint", coreRestEndpoint.toString());
+			templater.set("coreServices", services);
+			templater.set("currentUser", new ThymeleafCurrentUserUtils(userProvider));
+
+			this.templater = new WeakReference<>(templater);
+		}
+
+		return templater;
+	}
+
+
+	private TemplateEngine getOrCreateEngine()
+	{
+		TemplateEngine engine = this.engine.get();
+
+		// Lazy-create the engine
+		if (engine == null)
+		{
+			// Build and cache a new templater (previous instance must have been garbage collected)
+			engine = createEngine();
+
+			this.engine = new WeakReference<>(engine);
+		}
+
+		return engine;
+	}
+
+
+	private static TemplateEngine createEngine()
+	{
+		ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();
+
+		resolver.setTemplateMode("HTML5");
+
+		resolver.setCacheTTLMs(60 * 1000L);
+		resolver.setCacheable(true);
+
+		TemplateEngine engine = new TemplateEngine();
+		engine.setTemplateResolver(resolver);
+
+		return engine;
+	}
+}
diff --git a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/ThymeleafCurrentUserUtils.java b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/ThymeleafCurrentUserUtils.java
index 593e3e4cfb..df04df8fcf 100755
--- a/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/ThymeleafCurrentUserUtils.java
+++ b/guice/webapp/src/main/java/com/peterphi/std/guice/web/rest/templating/thymeleaf/ThymeleafCurrentUserUtils.java
@@ -1,13 +1,17 @@
 package com.peterphi.std.guice.web.rest.templating.thymeleaf;
 
 import com.google.inject.Provider;
+import com.peterphi.std.guice.common.auth.iface.AccessRefuser;
 import com.peterphi.std.guice.common.auth.iface.CurrentUser;
 import org.joda.time.DateTime;
 
 import java.time.Instant;
 import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
-public class ThymeleafCurrentUserUtils
+class ThymeleafCurrentUserUtils implements CurrentUser
 {
 	private final Provider<CurrentUser> provider;
 
@@ -18,12 +22,14 @@ public ThymeleafCurrentUserUtils(final Provider<CurrentUser> provider)
 	}
 
 
+	@Override
 	public boolean hasRole(String role)
 	{
 		return getUser().hasRole(role);
 	}
 
 
+	@Override
 	public String getAuthType()
 	{
 		return getUser().getAuthType();
@@ -36,42 +42,77 @@ public CurrentUser getUser()
 	}
 
 
+	@Override
 	public String getName()
 	{
 		return getUser().getName();
 	}
 
 
+	@Override
 	public String getUsername()
 	{
 		return getUser().getUsername();
 	}
 
 
+	@Override
 	public DateTime getExpires()
 	{
 		return getUser().getExpires();
 	}
 
 
+	@Override
+	public Map<String, Object> getClaims()
+	{
+		return getUser().getClaims();
+	}
+
+
+	@Override
+	public String getSimpleClaim(final String name)
+	{
+		return getUser().getSimpleClaim(name);
+	}
+
+
+	@Override
+	public List<String> getSimpleListClaim(final String name)
+	{
+		return getUser().getSimpleListClaim(name);
+	}
+
+
+	@Override
+	public Set<String> getSimpleSetClaim(final String name)
+	{
+		return getUser().getSimpleSetClaim(name);
+	}
+
+
+	@Override
 	public boolean isAnonymous()
 	{
 		return getUser().isAnonymous();
 	}
 
 
+	@Override
 	public String format(DateTime date)
 	{
 		return getUser().format(date);
 	}
 
 
+	@Override
 	public String format(Date date)
 	{
 		return getUser().format(date);
 	}
 
 
+	@Override
 	public String format(Instant date)
 	{
 		return getUser().format(date);
@@ -85,4 +126,11 @@ public String format(Long date)
 		else
 			return format(new DateTime(date));
 	}
+
+
+	@Override
+	public AccessRefuser getAccessRefuser()
+	{
+		throw new RuntimeException("Cannot treat ThymeleafCurrentUserUtils as a CurrentUSer!");
+	}
 }
