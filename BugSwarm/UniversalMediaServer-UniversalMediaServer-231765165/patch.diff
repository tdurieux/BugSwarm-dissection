diff --git a/src/main/java/net/pms/formats/v2/AudioAttribute.java b/src/main/java/net/pms/formats/v2/AudioAttribute.java
index f7968b9de4..a572cb6c84 100755
--- a/src/main/java/net/pms/formats/v2/AudioAttribute.java
+++ b/src/main/java/net/pms/formats/v2/AudioAttribute.java
@@ -29,7 +29,7 @@
  * boolean getLargerValue, Integer defaultValue, Integer minimumValue)
  */
 public enum AudioAttribute {
-	BITRATE (set("BitRate"), true, true, AudioProperties.BITRATE_DEFAULT, 1),
+	BITRATE (set("BitRate"), true, true, 8000, 1),
 	CHANNELS_NUMBER (set("Channel(s)"), true, true, 2, 1),
 	DELAY (set("Video_Delay"), false, false, 0, null),
 	SAMPLE_FREQUENCY (set("SamplingRate"), true, true, 48000, 1),
diff --git a/src/main/java/net/pms/formats/v2/AudioProperties.java b/src/main/java/net/pms/formats/v2/AudioProperties.java
index 8c0f742da0..34265f3354 100755
--- a/src/main/java/net/pms/formats/v2/AudioProperties.java
+++ b/src/main/java/net/pms/formats/v2/AudioProperties.java
@@ -38,17 +38,11 @@
 	private static final Pattern intPattern = Pattern.compile("([\\+-]?\\d+)([eE][\\+-]?\\d+)?");
 //	private static final Pattern floatPattern = Pattern.compile("([\\+-]?\\d(\\.\\d*)?|\\.\\d+)([eE][\\+-]?(\\d(\\.\\d*)?|\\.\\d+))?");
 
-	public static final int BITRATE_DEFAULT = 8000;
-	public static final int NUMBEROFCHANNELS_DEFAULT = 2;
-	public static final int BITSPERSAMPLE_DEFAULT = 16;
-	public static final int AUDIODELAY_DEFAULT = 0;
-	public static final int SAMPLEFREQUENCY_DEFAULT = 48000;
-
-	private int bitRate;
-	private int numberOfChannels;
-	private int bitsperSample;
-	private int audioDelay;
-	private int sampleFrequency;
+	private int bitRate = 8000;
+	private int numberOfChannels = 2;
+	private int audioDelay = 0;
+	private int sampleFrequency = 48000;
+	private int bitsperSample = 16;
 
 	public int getAttribute(AudioAttribute attribute) {
 		switch (attribute) {
@@ -69,12 +63,10 @@ public int getAttribute(AudioAttribute attribute) {
 
 	/**
 	 * Get bitrate for this audio track.
-	 *
-	 * @return The bitrate, or {@link #BITRATE_DEFAULT} if {@code bitRate} is
-	 *         invalid.
+	 * @return bitrate (default is 8000).
 	 */
 	public int getBitRate() {
-		return bitRate > 0 ? bitRate : BITRATE_DEFAULT;
+		return bitRate;
 	}
 
 	/**
@@ -83,6 +75,9 @@ public int getBitRate() {
 	 * @param bitrate to set.
 	 */
 	public void setBitRate(int bitRate) {
+		if (bitRate < 1) {
+			throw new IllegalArgumentException("Bitrate can't be less than 1.");
+		}
 		this.bitRate = bitRate;
 	}
 
@@ -97,12 +92,10 @@ public void setBitRate(String mediaInfoValue) {
 
 	/**
 	 * Get number of channels for this audio track.
-	 *
-	 * @return The number of channels, or {@link #NUMBEROFCHANNELS_DEFAULT} if {@code numberOfChannels} is
-	 *         invalid.
+	 * @return number of channels (default is 2).
 	 */
 	public int getNumberOfChannels() {
-		return numberOfChannels > 0 ? numberOfChannels : NUMBEROFCHANNELS_DEFAULT;
+		return numberOfChannels;
 	}
 
 	/**
@@ -111,6 +104,9 @@ public int getNumberOfChannels() {
 	 * @param numberOfChannels number of channels to set.
 	 */
 	public void setNumberOfChannels(int numberOfChannels) {
+		if (numberOfChannels < 1) {
+			throw new IllegalArgumentException("Channel number can't be less than 1.");
+		}
 		this.numberOfChannels = numberOfChannels;
 	}
 
@@ -125,12 +121,10 @@ public void setNumberOfChannels(String mediaInfoValue) {
 
 	/**
 	 * Get bits per sample for this audio track.
-	 *
-	 * @return The bits per sample, or {@link #BITSPERSAMPLE_DEFAULT} if {@code bitsperSample} is
-	 *         invalid.
+	 * @return bits per sample (default is 16).
 	 */
 	public int getBitsperSample() {
-		return bitsperSample > 0 ? bitsperSample : BITSPERSAMPLE_DEFAULT;
+		return bitsperSample;
 	}
 
 	/**
@@ -139,6 +133,9 @@ public int getBitsperSample() {
 	 * @param bitsperSample bits per sample to set.
 	 */
 	public void setBitsperSample(int bitsperSample) {
+		if (bitsperSample < 1) {
+			throw new IllegalArgumentException("Bits per sample can't be less than 1.");
+		}
 		this.bitsperSample = bitsperSample;
 	}
 
@@ -153,9 +150,7 @@ public void setBitsperSample(String mediaInfoValue) {
 
 	/**
 	 * Get delay for this audio track.
-	 *
-	 * @return The audio delay, or {@link #AUDIODELAY_DEFAULT} if {@code audioDelay} is
-	 *         invalid.
+	 * @return audio delay in ms. May be negative.
 	 */
 	public int getAudioDelay() {
 		return audioDelay;
@@ -181,20 +176,21 @@ public void setAudioDelay(String mediaInfoValue) {
 
 	/**
 	 * Get sample frequency for this audio track.
-	 *
-	 * @return The sample frequency, or {@link #SAMPLEFREQUENCY_DEFAULT} if {@code sampleFrequency} is
-	 *         invalid.
+	 * @return sample frequency in Hz.
 	 */
 	public int getSampleFrequency() {
-		return sampleFrequency > 0 ? sampleFrequency : SAMPLEFREQUENCY_DEFAULT;
+		return sampleFrequency;
 	}
 
 	/**
 	 * Set sample frequency for this audio track.
 	 *
-	 * @param sampleFrequency sample frequency in Hz.
+	 * @param sampleFrequency sample frequency in Hz
 	 */
 	public void setSampleFrequency(int sampleFrequency) {
+		if (sampleFrequency < 1) {
+			throw new IllegalArgumentException("Sample frequency can't be less than 1 Hz.");
+		}
 		this.sampleFrequency = sampleFrequency;
 	}
 
@@ -209,8 +205,8 @@ public void setSampleFrequency(String mediaInfoValue) {
 
 	public static int getChannelsNumberFromLibMediaInfo(String mediaInfoValue) {
 		if (isEmpty(mediaInfoValue)) {
-			LOGGER.warn("Empty value passed in. Returning default number {}.", NUMBEROFCHANNELS_DEFAULT);
-			return NUMBEROFCHANNELS_DEFAULT;
+			LOGGER.warn("Empty value passed in. Returning default number 2.");
+			return 2;
 		}
 
 		// examples of libmediainfo  (mediainfo --Full --Language=raw file):
@@ -220,26 +216,30 @@ public static int getChannelsNumberFromLibMediaInfo(String mediaInfoValue) {
 
 		int result = -1;
 		Matcher intMatcher = intPattern.matcher(mediaInfoValue);
-		if (intMatcher.find()) {
+		while (intMatcher.find()) {
 			String matchResult = intMatcher.group();
 			try {
-				result = Integer.parseInt(matchResult);
+				int currentResult = Integer.parseInt(matchResult);
+				if (currentResult > result) {
+					result = currentResult;
+				}
 			} catch (NumberFormatException ex) {
 				LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
 			}
 		}
 
 		if (result <= 0) {
-			LOGGER.warn("Can't parse number of channels {}. Returning default value {}.", mediaInfoValue, NUMBEROFCHANNELS_DEFAULT);
-			return NUMBEROFCHANNELS_DEFAULT;
+			LOGGER.warn("Can't parse value {}. Returning default number 2.", mediaInfoValue);
+			return 2;
+		} else {
+			return result;
 		}
-		return result;
 	}
 
 	public static int getBitsperSampleFromLibMediaInfo(String mediaInfoValue) {
 		if (isEmpty(mediaInfoValue)) {
-			LOGGER.warn("Empty value passed in. Returning default number {}.", BITSPERSAMPLE_DEFAULT);
-			return BITSPERSAMPLE_DEFAULT;
+			LOGGER.warn("Empty value passed in. Returning default number 16.");
+			return 16;
 		}
 
 		// examples of libmediainfo  (mediainfo --Full --Language=raw file):
@@ -249,27 +249,31 @@ public static int getBitsperSampleFromLibMediaInfo(String mediaInfoValue) {
 
 		int result = -1;
 		Matcher intMatcher = intPattern.matcher(mediaInfoValue);
-		if (intMatcher.find()) {
+		while (intMatcher.find()) {
 			String matchResult = intMatcher.group();
 			try {
-				result = Integer.parseInt(matchResult);
+				int currentResult = Integer.parseInt(matchResult);
+				if (currentResult > result) {
+					result = currentResult;
+				}
 			} catch (NumberFormatException ex) {
 				LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
 			}
 		}
 
 		if (result <= 0) {
-			LOGGER.warn("Can't parse bits per sample {}. Returning default value {}.", mediaInfoValue, BITSPERSAMPLE_DEFAULT);
-			return BITSPERSAMPLE_DEFAULT;
+			LOGGER.warn("Can't parse value {}. Returning default number 16.", mediaInfoValue);
+			return 16;
+		} else {
+			return result;
 		}
-		return result;
 	}
 
 
 	public static int getAudioDelayFromLibMediaInfo(String mediaInfoValue) {
 		if (isEmpty(mediaInfoValue)) {
-			LOGGER.warn("Empty value passed in. Returning default number {}.", AUDIODELAY_DEFAULT);
-			return AUDIODELAY_DEFAULT;
+			LOGGER.warn("Empty value passed in. Returning default number 0.");
+			return 0;
 		}
 
 		// examples of libmediainfo output (mediainfo --Full --Language=raw file):
@@ -290,8 +294,8 @@ public static int getAudioDelayFromLibMediaInfo(String mediaInfoValue) {
 
 	public static int getSampleFrequencyFromLibMediaInfo(String mediaInfoValue) {
 		if (isEmpty(mediaInfoValue)) {
-			LOGGER.warn("Empty value passed in. Returning default number {}.", SAMPLEFREQUENCY_DEFAULT);
-			return SAMPLEFREQUENCY_DEFAULT;
+			LOGGER.warn("Empty value passed in. Returning default number 48000 Hz.");
+			return 48000;
 		}
 
 		// examples of libmediainfo output (mediainfo --Full --Language=raw file):
@@ -300,26 +304,30 @@ public static int getSampleFrequencyFromLibMediaInfo(String mediaInfoValue) {
 
 		int result = -1;
 		Matcher intMatcher = intPattern.matcher(mediaInfoValue);
-		if (intMatcher.find()) {
+		while (intMatcher.find()) {
 			String matchResult = intMatcher.group();
 			try {
-				result = Integer.parseInt(matchResult);
+				int currentResult = Integer.parseInt(matchResult);
+				if (currentResult > result) {
+					result = currentResult;
+				}
 			} catch (NumberFormatException ex) {
 				LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
 			}
 		}
 
 		if (result < 1) {
-			LOGGER.warn("Can't parse sample frequency {}. Returning default value {}.", mediaInfoValue, SAMPLEFREQUENCY_DEFAULT);
-			return SAMPLEFREQUENCY_DEFAULT;
+			LOGGER.warn("Can't parse value {}. Returning default number 48000 Hz.", mediaInfoValue);
+			return 48000;
+		} else {
+			return result;
 		}
-		return result;
 	}
 
 	public static int getBitRateFromLibMediaInfo(String mediaInfoValue) {
 		if (isEmpty(mediaInfoValue)) {
-			LOGGER.warn("Empty value passed in. Returning default number {}.", BITRATE_DEFAULT);
-			return BITRATE_DEFAULT;
+			LOGGER.warn("Empty value passed in. Returning default number 8000.");
+			return 8000;
 		}
 
 		// examples of libmediainfo output (mediainfo --Full --Language=raw file):
@@ -328,20 +336,24 @@ public static int getBitRateFromLibMediaInfo(String mediaInfoValue) {
 
 		int result = -1;
 		Matcher intMatcher = intPattern.matcher(mediaInfoValue);
-		if (intMatcher.find()) {
+		while (intMatcher.find()) {
 			String matchResult = intMatcher.group();
 			try {
-				result = Integer.parseInt(matchResult);
+				int currentResult = Integer.parseInt(matchResult);
+				if (currentResult > result) {
+					result = currentResult;
+				}
 			} catch (NumberFormatException ex) {
 				LOGGER.warn("NumberFormatException during parsing substring {} from value {}", matchResult, mediaInfoValue);
 			}
 		}
 
 		if (result < 1) {
-			LOGGER.warn("Can't parse bitrate {}. Returning default value {}.", mediaInfoValue, BITRATE_DEFAULT);
-			return BITRATE_DEFAULT;
+			LOGGER.warn("Can't parse value {}. Returning default number 8000.", mediaInfoValue);
+			return 8000;
+		} else {
+			return result;
 		}
-		return result;
 	}
 
 	@Override
diff --git a/src/test/java/net/pms/formats/v2/AudioAttributeTest.java b/src/test/java/net/pms/formats/v2/AudioAttributeTest.java
index d36faa45f9..719ae9b6e7 100755
--- a/src/test/java/net/pms/formats/v2/AudioAttributeTest.java
+++ b/src/test/java/net/pms/formats/v2/AudioAttributeTest.java
@@ -25,7 +25,7 @@
 public class AudioAttributeTest {
 	@Test
 	public void testGetAudioAttributeByLibMediaInfoKeyValuePair_matchingKeyValuePairs() throws Exception {
-		assertThat(getAudioAttributeByLibMediaInfoKeyValuePair("BitRate                          : " + AudioProperties.BITRATE_DEFAULT)).isEqualTo(BITRATE);
+		assertThat(getAudioAttributeByLibMediaInfoKeyValuePair("BitRate                          : 8000")).isEqualTo(BITRATE);
 		assertThat(getAudioAttributeByLibMediaInfoKeyValuePair("Channel(s)                       : 6")).isEqualTo(CHANNELS_NUMBER);
 		assertThat(getAudioAttributeByLibMediaInfoKeyValuePair(" Channel(s):6")).isEqualTo(CHANNELS_NUMBER);
 		assertThat(getAudioAttributeByLibMediaInfoKeyValuePair("Video_Delay                      : 0")).isEqualTo(DELAY);
diff --git a/src/test/java/net/pms/formats/v2/AudioPropertiesTest.java b/src/test/java/net/pms/formats/v2/AudioPropertiesTest.java
index 45211384fe..0e74079cda 100755
--- a/src/test/java/net/pms/formats/v2/AudioPropertiesTest.java
+++ b/src/test/java/net/pms/formats/v2/AudioPropertiesTest.java
@@ -38,11 +38,31 @@ public void setUp() {
 
 	@Test
 	public void testDefaultValues() {
-		assertThat(properties.getBitRate()).isEqualTo(AudioProperties.BITRATE_DEFAULT);
-		assertThat(properties.getNumberOfChannels()).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
-		assertThat(properties.getAudioDelay()).isEqualTo(AudioProperties.AUDIODELAY_DEFAULT);
-		assertThat(properties.getSampleFrequency()).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
-		assertThat(properties.getBitsperSample()).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
+		assertThat(properties.getBitRate()).isEqualTo(8000);
+		assertThat(properties.getNumberOfChannels()).isEqualTo(2);
+		assertThat(properties.getAudioDelay()).isEqualTo(0);
+		assertThat(properties.getSampleFrequency()).isEqualTo(48000);
+		assertThat(properties.getBitsperSample()).isEqualTo(16);
+	}
+
+	@Test(expected = IllegalArgumentException.class)
+	public void testSetBitRate_withIllegalArgument() {
+		properties.setBitRate(0);
+	}
+
+	@Test(expected = IllegalArgumentException.class)
+	public void testSetNumberOfChannels_withIllegalArgument() {
+		properties.setNumberOfChannels(0);
+	}
+
+	@Test(expected = IllegalArgumentException.class)
+	public void testSampleFrequency_withIllegalArgument() {
+		properties.setSampleFrequency(0);
+	}
+
+	@Test(expected = IllegalArgumentException.class)
+	public void testBitsperSample_withIllegalArgument() {
+		properties.setBitsperSample(0);
 	}
 
 	@Test
@@ -58,10 +78,8 @@ public void testSetBitRate() {
 		assertThat(properties.getBitRate()).isEqualTo(5000);
 		properties.setBitRate("unknown / unknown / 1509000");
 		assertThat(properties.getBitRate()).isEqualTo(1509000);
-		properties.setBitRate("0");
-		assertThat(properties.getBitRate()).isEqualTo(AudioProperties.BITRATE_DEFAULT);
 		properties.setBitRate("-3");
-		assertThat(properties.getBitRate()).isEqualTo(AudioProperties.BITRATE_DEFAULT);
+		assertThat(properties.getBitRate()).isEqualTo(8000);
 	}
 
 	@Test
@@ -70,10 +88,8 @@ public void testSetNumberOfChannels() {
 		assertThat(properties.getNumberOfChannels()).isEqualTo(5);
 		properties.setNumberOfChannels("2 channels / 4 channel / 3 channel");
 		assertThat(properties.getNumberOfChannels()).isEqualTo(4);
-		properties.setNumberOfChannels("0");
-		assertThat(properties.getNumberOfChannels()).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
 		properties.setNumberOfChannels("-3 channel");
-		assertThat(properties.getNumberOfChannels()).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
+		assertThat(properties.getNumberOfChannels()).isEqualTo(2);
 	}
 
 	@Test
@@ -92,10 +108,8 @@ public void testSetSampleFrequency() {
 		assertThat(properties.getSampleFrequency()).isEqualTo(22050);
 		properties.setSampleFrequency("22050 / 44100");
 		assertThat(properties.getSampleFrequency()).isEqualTo(44100);
-		properties.setSampleFrequency("0");
-		assertThat(properties.getSampleFrequency()).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
 		properties.setSampleFrequency("-3");
-		assertThat(properties.getSampleFrequency()).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
+		assertThat(properties.getSampleFrequency()).isEqualTo(48000);
 	}
 
 	@Test
@@ -104,19 +118,17 @@ public void testSetBitsperSample() {
 		assertThat(properties.getBitsperSample()).isEqualTo(24);
 		properties.setBitsperSample("16 / 24");
 		assertThat(properties.getBitsperSample()).isEqualTo(24);
-		properties.setBitsperSample("0");
-		assertThat(properties.getBitsperSample()).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
 		properties.setBitsperSample("-3");
-		assertThat(properties.getBitsperSample()).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
+		assertThat(properties.getBitsperSample()).isEqualTo(16);
 	}
 
 	@Test
 	public void testGetChannelsNumberFromLibMediaInfo_withNullEmptyOrNegativeValue() {
-		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo(null)).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
-		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("")).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
-		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("-2chan")).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
-		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("0")).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
-		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("zero number")).isEqualTo(AudioProperties.NUMBEROFCHANNELS_DEFAULT);
+		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo(null)).isEqualTo(2);
+		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("")).isEqualTo(2);
+		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("-2chan")).isEqualTo(2);
+		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("0")).isEqualTo(2);
+		assertThat(AudioProperties.getChannelsNumberFromLibMediaInfo("zero number")).isEqualTo(2);
 	}
 
 	@Test
@@ -131,9 +143,9 @@ public void testGetChannelsNumberFromLibMediaInfo() {
 
 	@Test
 	public void testGetAudioDelayFromLibMediaInfo_withNullEmpty() {
-		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo(null)).isEqualTo(AudioProperties.AUDIODELAY_DEFAULT);
-		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo("")).isEqualTo(AudioProperties.AUDIODELAY_DEFAULT);
-		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo("zero number")).isEqualTo(AudioProperties.AUDIODELAY_DEFAULT);
+		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo(null)).isEqualTo(0);
+		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo("")).isEqualTo(0);
+		assertThat(AudioProperties.getAudioDelayFromLibMediaInfo("zero number")).isEqualTo(0);
 	}
 
 	@Test
@@ -148,9 +160,9 @@ public void testGetAudioDelayFromLibMediaInfo() {
 
 	@Test
 	public void testGetSampleFrequencyFromLibMediaInfo_withNullEmpty() {
-		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo(null)).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
-		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("")).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
-		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("freq unknown")).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
+		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo(null)).isEqualTo(48000);
+		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("")).isEqualTo(48000);
+		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("freq unknown")).isEqualTo(48000);
 	}
 
 	@Test
@@ -161,14 +173,14 @@ public void testGetSampleFrequencyFromLibMediaInfo() {
 		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("44100 Hz")).isEqualTo(44100);
 		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("44100 / 22050")).isEqualTo(44100);
 		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("22050 / 44100 Hz")).isEqualTo(44100);
-		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("-7 kHz")).isEqualTo(AudioProperties.SAMPLEFREQUENCY_DEFAULT);
+		assertThat(AudioProperties.getSampleFrequencyFromLibMediaInfo("-7 kHz")).isEqualTo(48000);
 	}
 
 	@Test
 	public void testGetBitRateFromLibMediaInfo_withNullEmpty() {
-		assertThat(AudioProperties.getBitRateFromLibMediaInfo(null)).isEqualTo(AudioProperties.BITRATE_DEFAULT);
-		assertThat(AudioProperties.getBitRateFromLibMediaInfo("")).isEqualTo(AudioProperties.BITRATE_DEFAULT);
-		assertThat(AudioProperties.getBitRateFromLibMediaInfo("bitrate unknown")).isEqualTo(AudioProperties.BITRATE_DEFAULT);
+		assertThat(AudioProperties.getBitRateFromLibMediaInfo(null)).isEqualTo(8000);
+		assertThat(AudioProperties.getBitRateFromLibMediaInfo("")).isEqualTo(8000);
+		assertThat(AudioProperties.getBitRateFromLibMediaInfo("bitrate unknown")).isEqualTo(8000);
 	}
 
 	@Test
@@ -177,14 +189,14 @@ public void testGetBitRateFromLibMediaInfo() {
 		assertThat(AudioProperties.getBitRateFromLibMediaInfo("8000")).isEqualTo(8000);
 		assertThat(AudioProperties.getBitRateFromLibMediaInfo("3018000 / 1509000 / 640000")).isEqualTo(3018000);
 		assertThat(AudioProperties.getBitRateFromLibMediaInfo("3018000 / 1509000")).isEqualTo(3018000);
-		assertThat(AudioProperties.getBitRateFromLibMediaInfo("-3 kb/s")).isEqualTo(AudioProperties.BITRATE_DEFAULT);
+		assertThat(AudioProperties.getBitRateFromLibMediaInfo("-3 kb/s")).isEqualTo(8000);
 	}
 
 	@Test
 	public void testGetBitperSampleFromLibMediaInfo_withNullEmpty() {
-		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo(null)).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
-		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("")).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
-		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("bitdepth unknown")).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
+		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo(null)).isEqualTo(16);
+		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("")).isEqualTo(16);
+		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("bitdepth unknown")).isEqualTo(16);
 	}
 
 	@Test
@@ -195,7 +207,7 @@ public void testGetBitperSampleFromLibMediaInfo() {
 		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("32 bits")).isEqualTo(32);
 		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("32 bits / 24 bits / 16 bits")).isEqualTo(32);
 		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("24 / 16")).isEqualTo(24);
-		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("-3 bits")).isEqualTo(AudioProperties.BITSPERSAMPLE_DEFAULT);
+		assertThat(AudioProperties.getBitsperSampleFromLibMediaInfo("-3 bits")).isEqualTo(16);
 	}
 
 }
