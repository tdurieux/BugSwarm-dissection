-- Type checking of union types

[case testUnion1]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    elif isinstance(x, str):
        z = 'a'
        z = x
[builtins fixtures/isinstance.pyi]

[case testUnion2]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    else:
        z = 'a'
        z = x
[builtins fixtures/isinstance.pyi]

[case testUnion3]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    else:
        z = 2
        z = x # E: Incompatible types in assignment (expression has type "str", variable has type "int")
[builtins fixtures/isinstance.pyi]
[out]

[case testUnionAnyIsInstance]
from typing import Any, Union

def func(v:Union[int, Any]) -> None:
    if isinstance(v, int):
        reveal_type(v) # E: Revealed type is 'builtins.int'
    else:
        reveal_type(v) # E: Revealed type is 'Any'
[builtins fixtures/isinstance.pyi]
[out]

[case testUnionAttributeAccess]
from typing import Union

class A: y = 1
class B: y = 2
class C: pass

w = None # type: Union[A, B]
x = None # type: Union[A, C]
y = None # type: int
z = None # type: str

y = w.y
z = w.y       # E: Incompatible types in assignment (expression has type "int", variable has type "str")
w.y = 'a'     # E: Incompatible types in assignment (expression has type "str", variable has type "int")
y = x.y       # E: Some element of union has no attribute "y"
z = x.y       # E: Some element of union has no attribute "y"

[builtins fixtures/isinstance.pyi]

[case testUnionMethodCalls]
from typing import Union

class A:
    def foo(self) -> int: pass
class B:
    def foo(self) -> int: pass
class C:
    def foo(self) -> str: pass

x = None # type: Union[A, B]
y = None # type: Union[A, C]
i = None # type: int

x.foo()
y.foo()
i = x.foo()
i = y.foo()   # E: Incompatible types in assignment (expression has type "Union[int, str]", variable has type "int")

[builtins fixtures/isinstance.pyi]

[case testUnionIndexing]
from typing import Union, List
x = None # type: Union[List[int], str]
x[2]
x[2] + 1 # E: Unsupported operand types for + (likely involving Union)
[builtins fixtures/isinstancelist.pyi]

[case testUnionAsOverloadArg]
from foo import *
x = 0
x = f(1)
x = f('')
s = ''
s = f(int)
s = f(1)    # E: Incompatible types in assignment (expression has type "int", variable has type "str")
x = f(int)  # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[file foo.pyi]
from typing import Union, overload
@overload
def f(x: Union[int, str]) -> int: pass
@overload
def f(x: type) -> str: pass

[case testUnionWithNoneItem]
from typing import Union
def f() -> Union[int, None]: pass
x = 1
x = f()

[case testOptional]
from typing import Optional
def f(x: Optional[int]) -> None: pass
f(1)
f(None)
f('') # E: Argument 1 to "f" has incompatible type "str"; expected "int"

[case testUnionSimplificationGenericFunction]
from typing import TypeVar, Union, List
T = TypeVar('T')
def f(x: List[T]) -> Union[T, int]: pass
def g(y: str) -> None: pass
a = f([1])
g(a) # E: Argument 1 to "g" has incompatible type "int"; expected "str"
[builtins fixtures/list.pyi]

[case testUnionSimplificationGenericClass]
from typing import TypeVar, Union, Generic
T = TypeVar('T')
U = TypeVar('U')
class C(Generic[T, U]):
    def f(self, x: str) -> Union[T, U]: pass
a = C() # type: C[int, int]
b = a.f('a')
a.f(b) # E: Argument 1 to "f" of "C" has incompatible type "int"; expected "str"

[case testUnionOrderEquivalence]
from typing import Union

def foo(): pass

S = str
T = int

if foo():
    def f(x: Union[int, str]) -> None: pass
elif foo():
    def f(x: Union[str, int]) -> None: pass
elif foo():
    def f(x: Union[int, str, int, int, str]) -> None: pass
elif foo():
    def f(x: Union[int, str, float]) -> None: pass  # E: All conditional function variants must have identical signatures
elif foo():
    def f(x: Union[S, T]) -> None: pass
elif foo():
    def f(x: Union[str]) -> None: pass  # E: All conditional function variants must have identical signatures
else:
    def f(x: Union[Union[int, T], Union[S, T], str]) -> None: pass

# Checks bidirectionality of testing. The first definition of g is consistent with
# the second, but not vice-versa.
if foo():
    def g(x: Union[int, str, bytes]) -> None: pass
else:
    def g(x: Union[int, str]) -> None: pass  # E: All conditional function variants must have identical signatures

[case testUnionSimplificationSpecialCases]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

a = None # type: Any

reveal_type(u(C(), None))  # E: Revealed type is '__main__.C*'
reveal_type(u(None, C()))  # E: Revealed type is '__main__.C*'

# This will be fixed later
reveal_type(u(C(), a))  # E: Revealed type is 'Any'
reveal_type(u(a, C()))  # E: Revealed type is 'Any'

reveal_type(u(C(), C()))  # E: Revealed type is '__main__.C*'
reveal_type(u(a, a))  # E: Revealed type is 'Any'

[case testUnionSimplificationSpecialCase2]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

def f(x: T) -> None:
    reveal_type(u(C(), x)) # E: Revealed type is 'Union[T`-1, __main__.C*]'
    reveal_type(u(x, C())) # E: Revealed type is 'Union[__main__.C*, T`-1]'

[case testUnionSimplificationSpecialCase3]
from typing import Any, TypeVar, Generic, Union

class C(Any): pass

V = TypeVar('V')
T = TypeVar('T')

class M(Generic[V]):
    def get(self, default: T) -> Union[V, T]: ...

def f(x: M[C]) -> None:
    y = x.get(None)
    reveal_type(y) # E: Revealed type is '__main__.C'
