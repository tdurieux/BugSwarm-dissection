travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: 0440c6a6-d270-4ddf-bc97-435ce00d22ff@1.i-0b6c41f-production-2-worker-org-ec2.travisci.net
version: v3.5.0 https://github.com/travis-ci/worker/tree/77dbc57c72d00592aeb754773b712da843c7e00d
instance: f3bbc8b travisci/ci-garnet:packer-1512502276-986baf0 (via amqp)
startup: 594.300772ms
travis_fold:end:worker_info[0Kmode of â€˜/usr/local/clang-5.0.0/binâ€™ changed from 0777 (rwxrwxrwx) to 0775 (rwxrwxr-x)
travis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: python
Build group: stable
Build dist: trusty
Build id: 341622703
Job id: 341622705
Runtime kernel version: 4.14.12-041412-generic
travis-build version: 86020898a
[34m[1mBuild image provisioning date and time[0m
Tue Dec  5 20:11:19 UTC 2017
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty
[34m[1mCookbooks Version[0m
7c2c6a6 https://github.com/travis-ci/travis-cookbooks/tree/7c2c6a6
[34m[1mgit version[0m
git version 2.15.1
[34m[1mbash version[0m
GNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)
[34m[1mgcc version[0m
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mdocker version[0m
Client:
 Version:      17.09.0-ce
 API version:  1.32
 Go version:   go1.8.3
 Git commit:   afdb6d4
 Built:        Tue Sep 26 22:39:28 2017
 OS/Arch:      linux/amd64
[34m[1mclang version[0m
clang version 5.0.0 (tags/RELEASE_500/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/clang-5.0.0/bin
[34m[1mjq version[0m
jq-1.5
[34m[1mbats version[0m
Bats 0.4.0
[34m[1mshellcheck version[0m
0.4.6
[34m[1mshfmt version[0m
v2.0.0
[34m[1mccache version[0m
ccache version 3.1.9

Copyright (C) 2002-2007 Andrew Tridgell
Copyright (C) 2009-2011 Joel Rosdahl

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
[34m[1mcmake version[0m
cmake version 3.9.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
[34m[1mheroku version[0m
heroku-cli/6.14.39-addc925 (linux-x64) node-v9.2.0
[34m[1mimagemagick version[0m
Version: ImageMagick 6.7.7-10 2017-07-31 Q16 http://www.imagemagick.org
[34m[1mmd5deep version[0m
4.2
[34m[1mmercurial version[0m
Mercurial Distributed SCM (version 4.2.2)
(see https://mercurial-scm.org for more information)

Copyright (C) 2005-2017 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
[34m[1mmysql version[0m
mysql  Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using  EditLine wrapper
[34m[1mopenssl version[0m
OpenSSL 1.0.1f 6 Jan 2014
[34m[1mpacker version[0m
Packer v1.0.2

Your version of Packer is out of date! The latest version
is 1.1.2. You can update by downloading from www.packer.io
[34m[1mpostgresql client version[0m
psql (PostgreSQL) 9.6.6
[34m[1mragel version[0m
Ragel State Machine Compiler version 6.8 Feb 2013
Copyright (c) 2001-2009 by Adrian Thurston
[34m[1msubversion version[0m
svn, version 1.8.8 (r1568071)
   compiled Aug 10 2017, 17:20:39 on x86_64-pc-linux-gnu

Copyright (C) 2013 The Apache Software Foundation.
This software consists of contributions made by many people;
see the NOTICE file for more information.
Subversion is open source software, see http://subversion.apache.org/

The following repository access (RA) modules are available:

* ra_svn : Module for accessing a repository using the svn network protocol.
  - with Cyrus SASL authentication
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme
* ra_serf : Module for accessing a repository via WebDAV protocol using serf.
  - using serf 1.3.3
  - handles 'http' scheme
  - handles 'https' scheme

[34m[1msudo version[0m
Sudo version 1.8.9p5
Configure options: --prefix=/usr -v --with-all-insults --with-pam --with-fqdn --with-logging=syslog --with-logfac=authpriv --with-env-editor --with-editor=/usr/bin/editor --with-timeout=15 --with-password-timeout=0 --with-passprompt=[sudo] password for %p:  --without-lecture --with-tty-tickets --disable-root-mailer --enable-admin-flag --with-sendmail=/usr/sbin/sendmail --with-timedir=/var/lib/sudo --mandir=/usr/share/man --libexecdir=/usr/lib/sudo --with-sssd --with-sssd-lib=/usr/lib/x86_64-linux-gnu --with-selinux
Sudoers policy plugin version 1.8.9p5
Sudoers file grammar version 43

Sudoers path: /etc/sudoers
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: authpriv
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Send mail if the user is not in sudoers
Use a separate timestamp for each user/tty combo
Lecture user the first time they run sudo
Root may run sudo
Allow some information gathering to give useful error messages
Require fully-qualified hostnames in the sudoers file
Visudo will honor the EDITOR environment variable
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 15.0 minutes
Password prompt timeout: 0.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to authentication timestamp dir: /var/lib/sudo
Default password prompt: [sudo] password for %p: 
Default user to run commands as: root
Value to override user's $PATH with: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
Path to the editor for use by visudo: /usr/bin/editor
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Environment variables to check for sanity:
	TZ
	TERM
	LINGUAS
	LC_*
	LANGUAGE
	LANG
	COLORTERM
Environment variables to remove:
	RUBYOPT
	RUBYLIB
	PYTHONUSERBASE
	PYTHONINSPECT
	PYTHONPATH
	PYTHONHOME
	TMPPREFIX
	ZDOTDIR
	READNULLCMD
	NULLCMD
	FPATH
	PERL5DB
	PERL5OPT
	PERL5LIB
	PERLLIB
	PERLIO_DEBUG 
	JAVA_TOOL_OPTIONS
	SHELLOPTS
	GLOBIGNORE
	PS4
	BASH_ENV
	ENV
	TERMCAP
	TERMPATH
	TERMINFO_DIRS
	TERMINFO
	_RLD*
	LD_*
	PATH_LOCALE
	NLSPATH
	HOSTALIASES
	RES_OPTIONS
	LOCALDOMAIN
	CDPATH
	IFS
Environment variables to preserve:
	JAVA_HOME
	TRAVIS
	CI
	DEBIAN_FRONTEND
	XAUTHORIZATION
	XAUTHORITY
	PS2
	PS1
	PATH
	LS_COLORS
	KRB5CCNAME
	HOSTNAME
	HOME
	DISPLAY
	COLORS
Locale to use while parsing sudoers: C
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use
PAM service name to use for login shells
Create a new PAM session for the command to run in
Maximum I/O log sequence number: 0

Local IP address and netmask pairs:
	172.17.0.2/255.255.0.0

Sudoers I/O plugin version 1.8.9p5
[34m[1mgzip version[0m
gzip 1.6
Copyright (C) 2007, 2010, 2011 Free Software Foundation, Inc.
Copyright (C) 1993 Jean-loup Gailly.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.

Written by Jean-loup Gailly.
[34m[1mzip version[0m
Copyright (c) 1990-2008 Info-ZIP - Type 'zip "-L"' for software license.
This is Zip 3.0 (July 5th 2008), by Info-ZIP.
Currently maintained by E. Gordon.  Please send bug reports to
the authors using the web page at www.info-zip.org; see README for details.

Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,
as of above date; see http://www.info-zip.org/ for other sites.

Compiled with gcc 4.8.2 for Unix (Linux ELF) on Oct 21 2013.

Zip special compilation options:
	USE_EF_UT_TIME       (store Universal Time)
	BZIP2_SUPPORT        (bzip2 library version 1.0.6, 6-Sept-2010)
	    bzip2 code and library copyright (c) Julian R Seward
	    (See the bzip2 license for terms of use)
	SYMLINK_SUPPORT      (symbolic links supported)
	LARGE_FILE_SUPPORT   (can read and write large files on file system)
	ZIP64_SUPPORT        (use Zip64 to store large files in archives)
	UNICODE_SUPPORT      (store and read UTF-8 Unicode paths)
	STORE_UNIX_UIDs_GIDs (store UID/GID sizes/values using new extra field)
	UIDGID_NOT_16BIT     (old Unix 16-bit UID/GID extra field not used)
	[encryption, version 2.91 of 05 Jan 2007] (modified for Zip 3)

Encryption notice:
	The encryption code of this program is not copyrighted and is
	put in the public domain.  It was originally written in Europe
	and, to the best of our knowledge, can be freely distributed
	in both source and object forms from any country, including
	the USA under License Exception TSU of the U.S. Export
	Administration Regulations (section 740.13(e)) of 6 June 2002.

Zip environment options:
             ZIP:  [none]
          ZIPOPT:  [none]
[34m[1mvim version[0m
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Nov 24 2016 16:43:18)
Included patches: 1-52
Extra patches: 8.0.0056
Modified by pkg-vim-maintainers@lists.alioth.debian.org
Compiled by buildd@
Huge version without GUI.  Features included (+) or not (-):
+acl             +farsi           +mouse_netterm   +syntax
+arabic          +file_in_path    +mouse_sgr       +tag_binary
+autocmd         +find_in_path    -mouse_sysmouse  +tag_old_static
-balloon_eval    +float           +mouse_urxvt     -tag_any_white
-browse          +folding         +mouse_xterm     -tcl
++builtin_terms  -footer          +multi_byte      +terminfo
+byte_offset     +fork()          +multi_lang      +termresponse
+cindent         +gettext         -mzscheme        +textobjects
-clientserver    -hangul_input    +netbeans_intg   +title
-clipboard       +iconv           +path_extra      -toolbar
+cmdline_compl   +insert_expand   -perl            +user_commands
+cmdline_hist    +jumplist        +persistent_undo +vertsplit
+cmdline_info    +keymap          +postscript      +virtualedit
+comments        +langmap         +printer         +visual
+conceal         +libcall         +profile         +visualextra
+cryptv          +linebreak       +python          +viminfo
+cscope          +lispindent      -python3         +vreplace
+cursorbind      +listcmds        +quickfix        +wildignore
+cursorshape     +localmap        +reltime         +wildmenu
+dialog_con      -lua             +rightleft       +windows
+diff            +menu            -ruby            +writebackup
+digraphs        +mksession       +scrollbind      -X11
-dnd             +modify_fname    +signs           -xfontset
-ebcdic          +mouse           +smartindent     -xim
+emacs_tags      -mouseshape      -sniff           -xsmp
+eval            +mouse_dec       +startuptime     -xterm_clipboard
+ex_extra        +mouse_gpm       +statusline      -xterm_save
+extra_search    -mouse_jsbterm   -sun_workshop    -xpm
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux  -lacl -lattr -lgpm -ldl    -L/usr/lib/python2.7/config-x86_64-linux-gnu -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions      
[34m[1miptables version[0m
iptables v1.4.21
[34m[1mcurl version[0m
curl 7.35.0 (x86_64-pc-linux-gnu) libcurl/7.35.0 OpenSSL/1.0.1f zlib/1.2.8 libidn/1.28 librtmp/2.3
[34m[1mwget version[0m
GNU Wget 1.15 built on linux-gnu.
[34m[1mrsync version[0m
rsync  version 3.1.0  protocol version 31
[34m[1mgimme version[0m
v1.2.0
[34m[1mnvm version[0m
0.33.6
[34m[1mperlbrew version[0m
/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.80
[34m[1mphpenv version[0m
rbenv 1.1.1-25-g6aa70b6
[34m[1mrvm version[0m
rvm 1.29.3 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]
[34m[1mdefault ruby version[0m
ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-linux]
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mElasticSearch version[0m
5.5.0
[34m[1mInstalled Firefox version[0m
firefox 56.0.2
[34m[1mMongoDB version[0m
MongoDB 3.4.10
[34m[1mPhantomJS version[0m
2.1.1
[34m[1mPre-installed PostgreSQL versions[0m
9.2.24
9.3.20
9.4.15
9.5.10
9.6.6
[34m[1mRabbitMQ Version[0m
3.6.14
[34m[1mRedis version[0m
redis-server 4.0.6
[34m[1mriak version[0m
2.2.3
[34m[1mPre-installed Go versions[0m
1.7.4
[34m[1mant version[0m
Apache Ant(TM) version 1.9.3 compiled on April 8 2014
[34m[1mmvn version[0m
Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z)
Maven home: /usr/local/maven-3.5.2
Java version: 1.8.0_151, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-8-oracle/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "4.4.0-101-generic", arch: "amd64", family: "unix"
[34m[1mgradle version[0m

------------------------------------------------------------
Gradle 4.0.1
------------------------------------------------------------

Build time:   2017-07-07 14:02:41 UTC
Revision:     38e5dc0f772daecca1d2681885d3d85414eb6826

Groovy:       2.4.11
Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015
JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)
OS:           Linux 4.4.0-101-generic amd64

[34m[1mlein version[0m
Leiningen 2.8.1 on Java 1.8.0_151 Java HotSpot(TM) 64-Bit Server VM
[34m[1mPre-installed Node.js versions[0m
v4.8.6
v6.12.0
v6.12.1
v8.9
v8.9.1
[34m[1mphpenv versions[0m
  system
  5.6
* 5.6.32 (set by /home/travis/.phpenv/version)
  7.0
  7.0.25
  7.1
  7.1.11
  hhvm
  hhvm-stable
[34m[1mcomposer --version[0m
Composer version 1.5.2 2017-09-11 16:59:25
[34m[1mPre-installed Ruby versions[0m
ruby-2.2.7
ruby-2.3.4
ruby-2.4.1
travis_fold:end:system_info[0K
removed â€˜/etc/apt/sources.list.d/basho_riak.listâ€™
W: http://ppa.launchpad.net/couchdb/stable/ubuntu/dists/trusty/Release.gpg: Signature by key 15866BAFD9BCC4F3C1E0DFC7D69548E1C17EAB57 uses weak digest algorithm (SHA1)
127.0.0.1	localhost
::1	 ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
172.17.0.12	travis-job-spesmilo-electrum-341622705.travisci.net travis-job-spesmilo-electrum-341622705
travis_fold:start:git.checkout[0Ktravis_time:start:06937900[0K$ git clone --depth=50 --branch=master https://github.com/spesmilo/electrum.git spesmilo/electrum
Cloning into 'spesmilo/electrum'...

travis_time:end:06937900:start=1518642015316593883,finish=1518642016972424644,duration=1655830761[0K$ cd spesmilo/electrum
$ git checkout -qf e3a082d58dff5d2cf4ca8b42fc285ff34b995aba
travis_fold:end:git.checkout[0K
[33;1mSetting environment variables from repository settings[0m
$ export crowdin_api_key=[secure]

travis_time:start:11e5fbee[0K$ source ~/virtualenv/python3.6/bin/activate

travis_time:end:11e5fbee:start=1518642026150218591,finish=1518642026170316618,duration=20098027[0Ktravis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=$HOME/.casher
travis_time:start:0d1faeb4[0K$ Installing caching utilities

travis_time:end:0d1faeb4:start=1518642037851882641,finish=1518642037907757877,duration=55875236[0Ktravis_time:start:1b36d592[0K
travis_time:end:1b36d592:start=1518642037928953434,finish=1518642037947802080,duration=18848646[0Ktravis_time:start:08be993e[0K[32;1mattempting to download cache archive[0m
[32;1mfetching master/cache-linux-trusty-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--python-3.6.tgz[0m
[32;1mfound cache[0m

travis_time:end:08be993e:start=1518642037967719555,finish=1518642052837171365,duration=14869451810[0Ktravis_fold:end:cache.1[0Ktravis_fold:start:cache.pip[0K
travis_time:start:22838cf4[0K
travis_time:end:22838cf4:start=1518642052847878989,finish=1518642052861328557,duration=13449568[0Ktravis_time:start:0d9a3646[0K[32;1madding /home/travis/.cache/pip to cache[0m

travis_time:end:0d9a3646:start=1518642052877935531,finish=1518642057419828755,duration=4541893224[0Ktravis_fold:end:cache.pip[0K$ python --version
Python 3.6.3
$ pip --version
pip 9.0.1 from /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (python 3.6)
travis_fold:start:install[0Ktravis_time:start:0df1f0b8[0K$ pip install -r contrib/requirements/requirements-travis.txt
Collecting tox (from -r contrib/requirements/requirements-travis.txt (line 1))
  Using cached tox-2.9.1-py2.py3-none-any.whl
Collecting python-coveralls (from -r contrib/requirements/requirements-travis.txt (line 2))
  Using cached python_coveralls-2.9.1-py2.py3-none-any.whl
Collecting tox-travis (from -r contrib/requirements/requirements-travis.txt (line 3))
  Using cached tox_travis-0.10-py2.py3-none-any.whl
Requirement already satisfied: py>=1.4.17 in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from tox->-r contrib/requirements/requirements-travis.txt (line 1))
Requirement already satisfied: pluggy<1.0,>=0.3.0 in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from tox->-r contrib/requirements/requirements-travis.txt (line 1))
Requirement already satisfied: six in /home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages (from tox->-r contrib/requirements/requirements-travis.txt (line 1))
Collecting virtualenv>=1.11.2; python_version != "3.2" (from tox->-r contrib/requirements/requirements-travis.txt (line 1))
  Using cached virtualenv-15.1.0-py2.py3-none-any.whl
Collecting coverage==4.0.3 (from python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
Collecting PyYAML (from python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
Collecting requests (from python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
  Using cached requests-2.18.4-py2.py3-none-any.whl
Collecting chardet<3.1.0,>=3.0.2 (from requests->python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting certifi>=2017.4.17 (from requests->python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
  Using cached certifi-2018.1.18-py2.py3-none-any.whl
Collecting urllib3<1.23,>=1.21.1 (from requests->python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting idna<2.7,>=2.5 (from requests->python-coveralls->-r contrib/requirements/requirements-travis.txt (line 2))
  Using cached idna-2.6-py2.py3-none-any.whl
Installing collected packages: virtualenv, tox, coverage, PyYAML, chardet, certifi, urllib3, idna, requests, python-coveralls, tox-travis
Successfully installed PyYAML-3.12 certifi-2018.1.18 chardet-3.0.4 coverage-4.0.3 idna-2.6 python-coveralls-2.9.1 requests-2.18.4 tox-2.9.1 tox-travis-0.10 urllib3-1.22 virtualenv-15.1.0

travis_time:end:0df1f0b8:start=1518642059337662460,finish=1518642068628956026,duration=9291293566[0Ktravis_fold:end:install[0Ktravis_time:start:0b5e1aaa[0K$ tox
GLOB sdist-make: /home/travis/build/spesmilo/electrum/setup.py
py36 create: /home/travis/build/spesmilo/electrum/.tox/py36
py36 installdeps: pytest, coverage
py36 inst: /home/travis/build/spesmilo/electrum/.tox/dist/Electrum-3.1.zip
py36 installed: attrs==17.4.0,certifi==2018.1.18,chardet==3.0.4,coverage==4.5.1,dnspython==1.15.0,ecdsa==0.13,Electrum==3.1,idna==2.6,jsonrpclib-pelix==0.3.1,pbkdf2==1.3,pluggy==0.6.0,protobuf==3.5.1,py==1.5.2,pyaes==1.6.1,PySocks==1.6.8,pytest==3.4.0,qrcode==5.3,requests==2.18.4,six==1.11.0,urllib3==1.22
py36 runtests: PYTHONHASHSEED='4273928612'
py36 runtests: commands[0] | coverage run --source=lib -m py.test -v
============================= test session starts ==============================
platform linux -- Python 3.6.3, pytest-3.4.0, py-1.5.2, pluggy-0.6.0 -- /home/travis/build/spesmilo/electrum/.tox/py36/bin/python3.6
cachedir: .pytest_cache
rootdir: /home/travis/build/spesmilo/electrum, inifile:
collecting ... collected 247 items

lib/tests/test_bitcoin.py::Test_bitcoin::test_address_to_script PASSED   [  0%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_aes_decode_with_invalid_password PASSED [  0%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_aes_deencode_without_password PASSED [  1%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_aes_encode_without_password PASSED [  1%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_aes_homomorphic PASSED     [  2%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_crypto PASSED              [  2%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_hash PASSED                [  2%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_msg_signing PASSED         [  3%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_op_push PASSED             [  3%]
lib/tests/test_bitcoin.py::Test_bitcoin::test_var_int PASSED             [  4%]
lib/tests/test_bitcoin.py::Test_bitcoin_testnet::test_address_to_script PASSED [  4%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_bip32 PASSED             [  4%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_is_bip32_derivation PASSED [  5%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_is_xprv PASSED           [  5%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_is_xpub PASSED           [  6%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_xpub_from_xprv PASSED    [  6%]
lib/tests/test_bitcoin.py::Test_xprv_xpub::test_xpub_type PASSED         [  6%]
lib/tests/test_bitcoin.py::Test_keyImport::test_address_from_private_key PASSED [  7%]
lib/tests/test_bitcoin.py::Test_keyImport::test_address_to_scripthash PASSED [  7%]
lib/tests/test_bitcoin.py::Test_keyImport::test_is_compressed PASSED     [  8%]
lib/tests/test_bitcoin.py::Test_keyImport::test_is_minikey PASSED        [  8%]
lib/tests/test_bitcoin.py::Test_keyImport::test_is_private_key PASSED    [  8%]
lib/tests/test_bitcoin.py::Test_keyImport::test_is_valid_address PASSED  [  9%]
lib/tests/test_bitcoin.py::Test_keyImport::test_public_key_from_private_key PASSED [  9%]
lib/tests/test_bitcoin.py::Test_keyImport::test_serialize_privkey PASSED [ 10%]
lib/tests/test_bitcoin.py::Test_seeds::test_new_seed PASSED              [ 10%]
lib/tests/test_bitcoin.py::Test_seeds::test_old_seed PASSED              [ 10%]
lib/tests/test_bitcoin.py::Test_seeds::test_seed_type PASSED             [ 11%]
lib/tests/test_interface.py::TestInterface::test_check_host_name PASSED  [ 11%]
lib/tests/test_interface.py::TestInterface::test_match_host_name PASSED  [ 12%]
lib/tests/test_mnemonic.py::Test_NewMnemonic::test_random_seeds PASSED   [ 12%]
lib/tests/test_mnemonic.py::Test_NewMnemonic::test_to_seed PASSED        [ 12%]
lib/tests/test_mnemonic.py::Test_OldMnemonic::test PASSED                [ 13%]
lib/tests/test_mnemonic.py::Test_BIP39Checksum::test PASSED              [ 13%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_can_set_options_set_in_user_config PASSED [ 14%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_cannot_set_options_passed_by_command_line PASSED [ 14%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_simple_config_command_line_overrides_everything PASSED [ 14%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_simple_config_key_rename PASSED [ 15%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_simple_config_user_config_is_used_if_others_arent_specified PASSED [ 15%]
lib/tests/test_simple_config.py::Test_SimpleConfig::test_user_config_is_not_written_with_read_only_config PASSED [ 16%]
lib/tests/test_simple_config.py::TestUserConfig::test_no_path_means_no_result PASSED [ 16%]
lib/tests/test_simple_config.py::TestUserConfig::test_path_with_reprd_object PASSED [ 17%]
lib/tests/test_simple_config.py::TestUserConfig::test_path_without_config_file PASSED [ 17%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_1_9_8_seeded PASSED [ 17%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_importedkeys PASSED [ 18%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_multisig PASSED [ 18%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_seeded PASSED [ 19%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_trezor_multiacc PASSED [ 19%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_trezor_singleacc PASSED [ 19%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_0_4_watchaddresses PASSED [ 20%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_importedkeys PASSED [ 20%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_multisig PASSED [ 21%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_seeded PASSED [ 21%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_trezor_multiacc PASSED [ 21%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_trezor_singleacc PASSED [ 22%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_1_1_watchaddresses PASSED [ 22%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_importedkeys PASSED [ 23%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_multisig PASSED [ 23%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_seeded PASSED [ 23%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_trezor_multiacc PASSED [ 24%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_trezor_singleacc PASSED [ 24%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_2_0_watchaddresses PASSED [ 25%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_importedkeys PASSED [ 25%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_multisig PASSED [ 25%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_seeded PASSED [ 26%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_trezor_multiacc PASSED [ 26%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_trezor_singleacc PASSED [ 27%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_3_2_watchaddresses PASSED [ 27%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_importedkeys PASSED [ 27%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_multisig PASSED [ 28%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_seeded PASSED [ 28%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_trezor_multiacc PASSED [ 29%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_trezor_singleacc PASSED [ 29%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_4_3_watchaddresses PASSED [ 29%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_importedkeys PASSED [ 30%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_multisig PASSED [ 30%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_seeded PASSED [ 31%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_trezor_multiacc PASSED [ 31%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_trezor_singleacc PASSED [ 31%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_5_4_watchaddresses PASSED [ 32%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_6_4_importedkeys PASSED [ 32%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_6_4_multisig PASSED [ 33%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_6_4_seeded PASSED [ 33%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_6_4_watchaddresses PASSED [ 34%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_7_18_importedkeys PASSED [ 34%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_7_18_multisig PASSED [ 34%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_7_18_seeded PASSED [ 35%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_7_18_trezor_singleacc PASSED [ 35%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_7_18_watchaddresses PASSED [ 36%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_importedkeys PASSED [ 36%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_importedkeys_flawed_previous_upgrade_from_2_7_18 PASSED [ 36%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_multisig PASSED [ 37%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_seeded PASSED [ 37%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_trezor_singleacc PASSED [ 38%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_8_3_watchaddresses PASSED [ 38%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_9_3_importedkeys PASSED [ 38%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_9_3_multisig PASSED [ 39%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_9_3_seeded PASSED [ 39%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_9_3_trezor_singleacc PASSED [ 40%]
lib/tests/test_storage_upgrade.py::TestStorageUpgrade::test_upgrade_from_client_2_9_3_watchaddresses PASSED [ 40%]
lib/tests/test_transaction.py::TestBCDataStream::test_bytes PASSED       [ 40%]
lib/tests/test_transaction.py::TestBCDataStream::test_compact_size PASSED [ 41%]
lib/tests/test_transaction.py::TestBCDataStream::test_string PASSED      [ 41%]
lib/tests/test_transaction.py::TestTransaction::test_errors PASSED       [ 42%]
lib/tests/test_transaction.py::TestTransaction::test_estimated_output_size PASSED [ 42%]
lib/tests/test_transaction.py::TestTransaction::test_parse_xpub PASSED   [ 42%]
lib/tests/test_transaction.py::TestTransaction::test_tx_signed PASSED    [ 43%]
lib/tests/test_transaction.py::TestTransaction::test_tx_signed_segwit PASSED [ 43%]
lib/tests/test_transaction.py::TestTransaction::test_tx_unsigned PASSED  [ 44%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0001 FAILED [ 44%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0002 FAILED [ 44%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0003 PASSED [ 45%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0004 PASSED [ 45%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0005 PASSED [ 46%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0006 PASSED [ 46%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0007 PASSED [ 46%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0008 PASSED [ 47%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0009 PASSED [ 47%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0010 PASSED [ 48%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0011 PASSED [ 48%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0012 PASSED [ 48%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0013 PASSED [ 49%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0014 PASSED [ 49%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0015 PASSED [ 50%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0016 PASSED [ 50%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0017 PASSED [ 51%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0018 PASSED [ 51%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0019 PASSED [ 51%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0020 PASSED [ 52%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0021 PASSED [ 52%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0022 FAILED [ 53%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0023 FAILED [ 53%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0024 FAILED [ 53%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0025 PASSED [ 54%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0026 PASSED [ 54%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0027 PASSED [ 55%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0028 PASSED [ 55%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0029 PASSED [ 55%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0030 PASSED [ 56%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0031 PASSED [ 56%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0032 PASSED [ 57%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0033 PASSED [ 57%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0034 PASSED [ 57%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0035 PASSED [ 58%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0036 PASSED [ 58%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0037 PASSED [ 59%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0038 FAILED [ 59%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0039 PASSED [ 59%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0040 PASSED [ 60%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0041 PASSED [ 60%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0042 PASSED [ 61%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0043 PASSED [ 61%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0044 PASSED [ 61%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0045 PASSED [ 62%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0046 PASSED [ 62%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0047 PASSED [ 63%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0048 PASSED [ 63%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0049 PASSED [ 63%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0050 PASSED [ 64%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0051 PASSED [ 64%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0052 PASSED [ 65%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0053 PASSED [ 65%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0054 PASSED [ 65%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0055 PASSED [ 66%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0056 PASSED [ 66%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0057 PASSED [ 67%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0058 PASSED [ 67%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0059 PASSED [ 68%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0060 PASSED [ 68%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0061 PASSED [ 68%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0062 PASSED [ 69%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0063 PASSED [ 69%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0064 PASSED [ 70%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0065 PASSED [ 70%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0066 FAILED [ 70%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0067 FAILED [ 71%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0068 FAILED [ 71%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0069 FAILED [ 72%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0070 FAILED [ 72%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0071 FAILED [ 72%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0072 FAILED [ 73%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0073 FAILED [ 73%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0074 FAILED [ 74%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0075 FAILED [ 74%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0076 FAILED [ 74%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0077 FAILED [ 75%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0078 PASSED [ 75%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0079 PASSED [ 76%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0080 PASSED [ 76%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0081 FAILED [ 76%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0082 PASSED [ 77%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0083 PASSED [ 77%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0084 PASSED [ 78%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0085 PASSED [ 78%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0086 PASSED [ 78%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0087 PASSED [ 79%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0088 PASSED [ 79%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0089 PASSED [ 80%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0090 PASSED [ 80%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0091 PASSED [ 80%]
lib/tests/test_transaction.py::TestTransaction::test_txid_bitcoin_core_0092 PASSED [ 81%]
lib/tests/test_transaction.py::TestTransaction::test_txid_coinbase_to_p2pk PASSED [ 81%]
lib/tests/test_transaction.py::TestTransaction::test_txid_coinbase_to_p2pkh PASSED [ 82%]
lib/tests/test_transaction.py::TestTransaction::test_txid_input_p2wsh_p2sh_not_multisig PASSED [ 82%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pk_to_p2pkh PASSED [ 82%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pk_to_p2sh PASSED [ 83%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pk_to_p2wpkh PASSED [ 83%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pkh_to_p2pkh PASSED [ 84%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pkh_to_p2sh PASSED [ 84%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2pkh_to_p2wpkh PASSED [ 85%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2sh_to_p2pkh PASSED [ 85%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2sh_to_p2sh PASSED [ 85%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2sh_to_p2wpkh PASSED [ 86%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2wpkh_to_p2pkh PASSED [ 86%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2wpkh_to_p2sh PASSED [ 87%]
lib/tests/test_transaction.py::TestTransaction::test_txid_p2wpkh_to_p2wpkh PASSED [ 87%]
lib/tests/test_transaction.py::TestTransaction::test_txid_segwit_coinbase_to_p2pk PASSED [ 87%]
lib/tests/test_transaction.py::TestTransaction::test_txid_segwit_coinbase_to_p2pkh PASSED [ 88%]
lib/tests/test_transaction.py::TestTransaction::test_version_field PASSED [ 88%]
lib/tests/test_util.py::TestUtil::test_format_satoshis PASSED            [ 89%]
lib/tests/test_util.py::TestUtil::test_format_satoshis_diff_negative PASSED [ 89%]
lib/tests/test_util.py::TestUtil::test_format_satoshis_diff_positive PASSED [ 89%]
lib/tests/test_util.py::TestUtil::test_parse_URI_address PASSED          [ 90%]
lib/tests/test_util.py::TestUtil::test_parse_URI_address_amount PASSED   [ 90%]
lib/tests/test_util.py::TestUtil::test_parse_URI_address_label PASSED    [ 91%]
lib/tests/test_util.py::TestUtil::test_parse_URI_address_message PASSED  [ 91%]
lib/tests/test_util.py::TestUtil::test_parse_URI_address_request_url PASSED [ 91%]
lib/tests/test_util.py::TestUtil::test_parse_URI_ignore_args PASSED      [ 92%]
lib/tests/test_util.py::TestUtil::test_parse_URI_invalid PASSED          [ 92%]
lib/tests/test_util.py::TestUtil::test_parse_URI_invalid_address PASSED  [ 93%]
lib/tests/test_util.py::TestUtil::test_parse_URI_multiple_args PASSED    [ 93%]
lib/tests/test_util.py::TestUtil::test_parse_URI_no_address_request_url PASSED [ 93%]
lib/tests/test_util.py::TestUtil::test_parse_URI_only_address PASSED     [ 94%]
lib/tests/test_util.py::TestUtil::test_parse_URI_parameter_polution PASSED [ 94%]
lib/tests/test_wallet.py::TestWalletStorage::test_read_dictionary_from_file PASSED [ 95%]
lib/tests/test_wallet.py::TestWalletStorage::test_write_dictionary_to_file PASSED [ 95%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_bip39_multisig_seed_bip45_standard PASSED [ 95%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_bip39_multisig_seed_p2sh_segwit PASSED [ 96%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_bip39_seed_bip44_standard PASSED [ 96%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_bip39_seed_bip49_p2sh_segwit PASSED [ 97%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_bip39_seed_bip84_native_segwit PASSED [ 97%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_multisig_seed_segwit PASSED [ 97%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_multisig_seed_standard PASSED [ 98%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_seed_2fa PASSED [ 98%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_seed_old PASSED [ 99%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_seed_segwit PASSED [ 99%]
lib/tests/test_wallet_vertical.py::TestWalletKeystoreAddressIntegrity::test_electrum_seed_standard PASSED [100%]

=================================== FAILURES ===================================
_________________ TestTransaction.test_txid_bitcoin_core_0001 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0001>

    def test_txid_bitcoin_core_0001(self):
        tx = transaction.Transaction('0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000490047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000')
>       self.assertEqual('23b397edccd3740a74adb603c9756370fafcde9bcc4483eb271ecad09a94dd63', tx.txid())

lib/tests/test_transaction.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'0D\x02 ?\x16\xc6\xf4\x01b\xabhf!\xef0\x00\xb0NuA\x8a\x0c\x0c\xb2\xd8\xae\xbe\xac\x89J\xe3`\xac\x1ex\x02 \xdd\xc1^\xcd\xfc5\x07\xacH\xe1h\x1a3\xeb`\x99f1\xbfk\xf5\xbc\n\x06\x82\xc4\xdbt<\xe7\xca+\x01')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
        m = dec2[0][0] - opcodes.OP_1 + 1
        n = dec2[-2][0] - opcodes.OP_1 + 1
        op_m = opcodes.OP_1 + m - 1
        op_n = opcodes.OP_1 + n - 1
        match_multisig = [ op_m ] + [opcodes.OP_PUSHDATA4]*n + [ op_n, opcodes.OP_CHECKMULTISIG ]
        if not match_decoded(dec2, match_multisig):
            print_error("cannot find address in input script", bh2u(s))
>           raise NotRecognizedRedeemScript()
E           lib.transaction.NotRecognizedRedeemScript

lib/transaction.py:384: NotRecognizedRedeemScript
----------------------------- Captured stderr call -----------------------------
cannot find address in input script 304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01
_________________ TestTransaction.test_txid_bitcoin_core_0002 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0002>

    def test_txid_bitcoin_core_0002(self):
        tx = transaction.Transaction('0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a0048304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2bab01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000')
>       self.assertEqual('fcabc409d8e685da28536e1e5ccc91264d755cd4c57ed4cae3dbaa4d3b93e8ed', tx.txid())

lib/tests/test_transaction.py:248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'0D\x02 ?\x16\xc6\xf4\x01b\xabhf!\xef0\x00\xb0NuA\x8a\x0c\x0c\xb2\xd8\xae\xbe\xac\x89J\xe3`\xac\x1ex\x02 \xdd\xc1^\xcd\xfc5\x07\xacH\xe1h\x1a3\xeb`\x99f1\xbfk\xf5\xbc\n\x06\x82\xc4\xdbt<\xe7\xca+\xab\x01')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
        m = dec2[0][0] - opcodes.OP_1 + 1
        n = dec2[-2][0] - opcodes.OP_1 + 1
        op_m = opcodes.OP_1 + m - 1
        op_n = opcodes.OP_1 + n - 1
        match_multisig = [ op_m ] + [opcodes.OP_PUSHDATA4]*n + [ op_n, opcodes.OP_CHECKMULTISIG ]
        if not match_decoded(dec2, match_multisig):
            print_error("cannot find address in input script", bh2u(s))
>           raise NotRecognizedRedeemScript()
E           lib.transaction.NotRecognizedRedeemScript

lib/transaction.py:384: NotRecognizedRedeemScript
----------------------------- Captured stderr call -----------------------------
cannot find address in input script 304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2bab01
_________________ TestTransaction.test_txid_bitcoin_core_0022 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0022>

    def test_txid_bitcoin_core_0022(self):
        tx = transaction.Transaction('0100000001f725ea148d92096a79b1709611e06e94c63c4ef61cbae2d9b906388efd3ca99c000000000100ffffffff0101000000000000002321028a1d66975dbdf97897e3a4aef450ebeb5b5293e4a0b4a6d3a2daaa0b2b110e02ac00000000')
>       self.assertEqual('018adb7133fde63add9149a2161802a1bcf4bdf12c39334e880c073480eda2ff', tx.txid())

lib/tests/test_transaction.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
>       m = dec2[0][0] - opcodes.OP_1 + 1
E       IndexError: list index out of range

lib/transaction.py:377: IndexError
_________________ TestTransaction.test_txid_bitcoin_core_0023 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0023>

    def test_txid_bitcoin_core_0023(self):
        tx = transaction.Transaction('0100000001be599efaa4148474053c2fa031c7262398913f1dc1d9ec201fd44078ed004e44000000004900473044022022b29706cb2ed9ef0cb3c97b72677ca2dfd7b4160f7b4beb3ba806aa856c401502202d1e52582412eba2ed474f1f437a427640306fd3838725fab173ade7fe4eae4a01ffffffff010100000000000000232103ac4bba7e7ca3e873eea49e08132ad30c7f03640b6539e9b59903cf14fd016bbbac00000000')
>       self.assertEqual('1464caf48c708a6cc19a296944ded9bb7f719c9858986d2501cf35068b9ce5a2', tx.txid())

lib/tests/test_transaction.py:332: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'0D\x02 "\xb2\x97\x06\xcb.\xd9\xef\x0c\xb3\xc9{rg|\xa2\xdf\xd7\xb4\x16\x0f{K\xeb;\xa8\x06\xaa\x85l@\x15\x02 -\x1eRX$\x12\xeb\xa2\xedGO\x1fCzBv@0o\xd3\x83\x87%\xfa\xb1s\xad\xe7\xfeN\xaeJ\x01')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
        m = dec2[0][0] - opcodes.OP_1 + 1
        n = dec2[-2][0] - opcodes.OP_1 + 1
        op_m = opcodes.OP_1 + m - 1
        op_n = opcodes.OP_1 + n - 1
        match_multisig = [ op_m ] + [opcodes.OP_PUSHDATA4]*n + [ op_n, opcodes.OP_CHECKMULTISIG ]
        if not match_decoded(dec2, match_multisig):
            print_error("cannot find address in input script", bh2u(s))
>           raise NotRecognizedRedeemScript()
E           lib.transaction.NotRecognizedRedeemScript

lib/transaction.py:384: NotRecognizedRedeemScript
----------------------------- Captured stderr call -----------------------------
cannot find address in input script 3044022022b29706cb2ed9ef0cb3c97b72677ca2dfd7b4160f7b4beb3ba806aa856c401502202d1e52582412eba2ed474f1f437a427640306fd3838725fab173ade7fe4eae4a01
_________________ TestTransaction.test_txid_bitcoin_core_0024 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0024>

    def test_txid_bitcoin_core_0024(self):
        tx = transaction.Transaction('010000000112b66d5e8c7d224059e946749508efea9d66bf8d0c83630f080cf30be8bb6ae100000000490047304402206ffe3f14caf38ad5c1544428e99da76ffa5455675ec8d9780fac215ca17953520220779502985e194d84baa36b9bd40a0dbd981163fa191eb884ae83fc5bd1c86b1101ffffffff010100000000000000232103905380c7013e36e6e19d305311c1b81fce6581f5ee1c86ef0627c68c9362fc9fac00000000')
>       self.assertEqual('1fb73fbfc947d52f5d80ba23b67c06a232ad83fdd49d1c0a657602f03fbe8f7a', tx.txid())

lib/tests/test_transaction.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'0D\x02 o\xfe?\x14\xca\xf3\x8a\xd5\xc1TD(\xe9\x9d\xa7o\xfaTUg^\xc8\xd9x\x0f\xac!\\\xa1ySR\x02 w\x95\x02\x98^\x19M\x84\xba\xa3k\x9b\xd4\n\r\xbd\x98\x11c\xfa\x19\x1e\xb8\x84\xae\x83\xfc[\xd1\xc8k\x11\x01')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
        m = dec2[0][0] - opcodes.OP_1 + 1
        n = dec2[-2][0] - opcodes.OP_1 + 1
        op_m = opcodes.OP_1 + m - 1
        op_n = opcodes.OP_1 + n - 1
        match_multisig = [ op_m ] + [opcodes.OP_PUSHDATA4]*n + [ op_n, opcodes.OP_CHECKMULTISIG ]
        if not match_decoded(dec2, match_multisig):
            print_error("cannot find address in input script", bh2u(s))
>           raise NotRecognizedRedeemScript()
E           lib.transaction.NotRecognizedRedeemScript

lib/transaction.py:384: NotRecognizedRedeemScript
----------------------------- Captured stderr call -----------------------------
cannot find address in input script 304402206ffe3f14caf38ad5c1544428e99da76ffa5455675ec8d9780fac215ca17953520220779502985e194d84baa36b9bd40a0dbd981163fa191eb884ae83fc5bd1c86b1101
_________________ TestTransaction.test_txid_bitcoin_core_0038 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0038>

    def test_txid_bitcoin_core_0038(self):
        tx = transaction.Transaction('0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000')
>       self.assertEqual('ded7ff51d89a4e1ec48162aee5a96447214d93dfb3837946af2301a28f65dbea', tx.txid())

lib/tests/test_transaction.py:392: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
lib/transaction.py:510: in deserialize
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:510: in <listcomp>
    d['inputs'] = [parse_input(vds) for i in range(n_vin)]
lib/transaction.py:439: in parse_input
    parse_scriptSig(d, scriptSig)
lib/transaction.py:364: in parse_scriptSig
    m, n, x_pubkeys, pubkeys, redeemScript = parse_redeemScript(decoded[-1][1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = bytearray(b'0E\x02 \x15\xbd\x019\xbc\xcc\xf9\x90\xa6\xafn\xc5\xc1\xc5.\xd8".\x03\xa0\xd5\x1c3M\xf19\x96\x85%\xd2\xfc\xd2\x02!\x00\x9f\x9e\xfe2Tv\xebd\xc3\x95\x8eG\x13\xe9\xee\xfeI\xbf\x1d\x82\x0e\xd5\x8d!\x12r\x1b\x13N*\x1aS\x03')

    def parse_redeemScript(s):
        dec2 = [ x for x in script_GetOp(s) ]
        m = dec2[0][0] - opcodes.OP_1 + 1
        n = dec2[-2][0] - opcodes.OP_1 + 1
        op_m = opcodes.OP_1 + m - 1
        op_n = opcodes.OP_1 + n - 1
        match_multisig = [ op_m ] + [opcodes.OP_PUSHDATA4]*n + [ op_n, opcodes.OP_CHECKMULTISIG ]
        if not match_decoded(dec2, match_multisig):
            print_error("cannot find address in input script", bh2u(s))
>           raise NotRecognizedRedeemScript()
E           lib.transaction.NotRecognizedRedeemScript

lib/transaction.py:384: NotRecognizedRedeemScript
----------------------------- Captured stderr call -----------------------------
cannot find address in input script 3045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303
_________________ TestTransaction.test_txid_bitcoin_core_0066 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0066>

    def test_txid_bitcoin_core_0066(self):
        tx = transaction.Transaction('0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff05540b0000000000000151d0070000000000000151840300000000000001513c0f00000000000001512c010000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71000000000000')
>       self.assertEqual('07dfa2da3d67c8a2b9f7bd31862161f7b497829d5da90a88ba0f1a905e7a43f7', tx.txid())

lib/tests/test_transaction.py:504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff000100000000000000000...19e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc71000000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0067 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0067>

    def test_txid_bitcoin_core_0067(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210092f4777a0f17bf5aeb8ae768dec5f2c14feabf9d1fe2c89c78dfed0f13fdb86902206da90a86042e252bcd1e80a168c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...c719e4a1ddcc3cebea24b9812c5453c79107e9832103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0068 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0068>

    def test_txid_bitcoin_core_0068(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff0484030000000000000151d0070000000000000151540b0000000000000151c800000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('f92bb6e4f3ff89172f23ef647f74c13951b665848009abb5862cdf7a0412415a', tx.txid())

lib/tests/test_transaction.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0069 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0069>

    def test_txid_bitcoin_core_0069(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b000000000000015100024730440220699e6b0cfe015b64ca3283e6551440a34f901ba62dd4c72fe1cb815afb2e6761022021cc5e84db498b1479de14efda49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:516: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...49093219441adc6c543e5534979605e273d80b032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0070 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0070>

    def test_txid_bitcoin_core_0070(self):
        tx = transaction.Transaction('0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff04b60300000000000001519e070000000000000151860b00000000000001009600000000000000015100000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('e657e25fc9f2b33842681613402759222a58cf7dd504d6cdc0b69a0b8c2e7dcb', tx.txid())

lib/tests/test_transaction.py:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff000100000000000000000...2a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0071 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0071>

    def test_txid_bitcoin_core_0071(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000248304502210091b32274295c2a3fa02f5bce92fb2789e3fc6ea947fbe1a76e52ea3f4ef2381a022079ad72aefa3837a2e0c033a8652a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:524: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...2a59731da05fa4a813f4fc48e87c075037256b822103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0072 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0072>

    def test_txid_bitcoin_core_0072(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff04b60300000000000001519e070000000000000151860b0000000000000100960000000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('4ede5e22992d43d42ccdf6553fb46e448aa1065ba36423f979605c1e5ab496b8', tx.txid())

lib/tests/test_transaction.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...e3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0073 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0073>

    def test_txid_bitcoin_core_0073(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:532: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...e3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0074 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0074>

    def test_txid_bitcoin_core_0074(self):
        tx = transaction.Transaction('01000000000103000100000000000000000000000000000000000000000000000000000000000000000000000200000000010000000000000000000000000000000000000000000000000000000000000100000000ffffffff000100000000000000000000000000000000000000000000000000000000000002000000000200000003e8030000000000000151d0070000000000000151b80b00000000000001510002473044022022fceb54f62f8feea77faac7083c3b56c4676a78f93745adc8a35800bc36adfa022026927df9abcf0a8777829bcfcce3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('cfe9f4b19f52b8366860aec0d2b5815e329299b2e9890d477edd7f1182be7ac8', tx.txid())

lib/tests/test_transaction.py:536: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '010000000001030001000000000000000000000000000000000000000000000000000000000000000000000002000000000100000000000000000...e3ff0a385fa54c3f9df577405e3ef24ee56479022103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0075 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0075>

    def test_txid_bitcoin_core_0075(self):
        tx = transaction.Transaction('0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000300000000ffffffff03e8030000000000000151d0070000000000000151b80b0000000000000151000002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('aee8f4865ca40fa77ff2040c0d7de683bea048b103d42ca406dc07dd29d539cb', tx.txid())

lib/tests/test_transaction.py:540: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010400010000000000000000000000000000000000000000000000000000000000000200000000ffffffff000100000000000000000...6b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0076 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0076>

    def test_txid_bitcoin_core_0076(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623eeef89e0ba1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:544: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...6b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0077 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0077>

    def test_txid_bitcoin_core_0077(self):
        tx = transaction.Transaction('0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff00010000000000000000000000000000000000000000000000000000000000000200000000ffffffff03e8030000000000000151d0070000000000000151b80b00000000000001510002483045022100a3cec69b52cba2d2de623ffffffffff1606184ea55476c0f8189fda231bc9cbb022003181ad597f7c380a7d1c740286b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000')
>       self.assertEqual('8a1bddf924d24570074b09d7967c145e54dc4cee7972a92fd975a2ad9e64b424', tx.txid())

lib/tests/test_transaction.py:548: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010300010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...6b1d022b8b04ded028b833282e055e03b8efef812103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc710000000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
_________________ TestTransaction.test_txid_bitcoin_core_0081 __________________

self = <lib.tests.test_transaction.TestTransaction testMethod=test_txid_bitcoin_core_0081>

    def test_txid_bitcoin_core_0081(self):
        tx = transaction.Transaction('0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff00010000000000000000000000000000000000000000000000000000000000000100000000ffffffff01d00700000000000001510003483045022100e078de4e96a0e05dcdc0a414124dd8475782b5f3f0ed3f607919e9a5eeeb22bf02201de309b3a3109adb3de8074b3610d4cf454c49b61247a2779a0bcbf31c889333032103596d3451025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc711976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac00000000')
>       self.assertEqual('60ebb1dd0b598e20dd0dd462ef6723dd49f8f803b6a2492926012360119cfdd7', tx.txid())

lib/tests/test_transaction.py:564: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/transaction.py:883: in txid
    all_segwit = all(self.is_segwit_input(x) for x in self.inputs())
lib/transaction.py:578: in inputs
    self.deserialize()
lib/transaction.py:633: in deserialize
    d = deserialize(self.raw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

raw = '0100000000010200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff000100000000000000000...51025c19dbbdeb932d6bf8bfb4ad499b95b6f88db8899efac102e5fc711976a9144c9c3dfac4207d5d8cb89df5722cb3d712385e3f88ac00000000'

    def deserialize(raw):
        vds = BCDataStream()
        vds.write(bfh(raw))
        d = {}
        start = vds.read_cursor
        d['version'] = vds.read_int32()
        n_vin = vds.read_compact_size()
        is_segwit = (n_vin == 0)
        if is_segwit:
            marker = vds.read_bytes(1)
            assert marker == b'\x01'
            n_vin = vds.read_compact_size()
        d['inputs'] = [parse_input(vds) for i in range(n_vin)]
        n_vout = vds.read_compact_size()
        d['outputs'] = [parse_output(vds, i) for i in range(n_vout)]
        if is_segwit:
            for i in range(n_vin):
                txin = d['inputs'][i]
                try:
                    parse_witness(vds, txin)
                except UnknownTxinType:
                    txin['type'] = 'unknown'
                    # FIXME: GUI might show 'unknown' address (e.g. for a non-multisig p2wsh)
                    continue
                # segwit-native script
                if not txin.get('scriptSig'):
                    if txin['num_sig'] == 1:
                        txin['type'] = 'p2wpkh'
                        txin['address'] = bitcoin.public_key_to_p2wpkh(bfh(txin['pubkeys'][0]))
                    else:
                        txin['type'] = 'p2wsh'
>                       txin['address'] = bitcoin.script_to_p2wsh(txin['witnessScript'])
E                       KeyError: 'witnessScript'

lib/transaction.py:529: KeyError
=================== 19 failed, 228 passed in 131.30 seconds ====================
[Plugins] stopped
ERROR: InvocationError: '/home/travis/build/spesmilo/electrum/.tox/py36/bin/coverage run --source=lib -m py.test -v'
___________________________________ summary ____________________________________
ERROR:   py36: commands failed

travis_time:end:0b5e1aaa:start=1518642068643454611,finish=1518642234268880111,duration=165625425500[0K
[31;1mThe command "tox" exited with 1.[0m
travis_fold:start:cache.2[0Kstore build cache
travis_time:start:16fe7c18[0K
travis_time:end:16fe7c18:start=1518642234338532974,finish=1518642234390503813,duration=51970839[0Ktravis_time:start:07e2502c[0K[32;1mchange detected (content changed, file is created, or file is deleted):
/home/travis/.cache/pip/wheels/8b/54/d8/eec0f14c95d52a8e8d90781ac4c2dde2c0924bf69b1fd9ed9b/Electrum-3.1-cp36-none-any.whl

[0m
[32;1mchanges detected, packing new archive[0m
[32;1muploading archive[0m

travis_time:end:07e2502c:start=1518642234458528118,finish=1518642242287781676,duration=7829253558[0Ktravis_fold:end:cache.2[0K
Done. Your build exited with 1.
