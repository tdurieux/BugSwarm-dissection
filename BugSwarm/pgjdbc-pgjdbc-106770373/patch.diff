diff --git a/pgjdbc/src/main/java/org/postgresql/jdbc/PgStatement.java b/pgjdbc/src/main/java/org/postgresql/jdbc/PgStatement.java
index dc354e52bd..ee1a36a387 100755
--- a/pgjdbc/src/main/java/org/postgresql/jdbc/PgStatement.java
+++ b/pgjdbc/src/main/java/org/postgresql/jdbc/PgStatement.java
@@ -967,13 +967,23 @@ protected BatchResultHandler createBatchHandler(int[] updateCounts, Query[] quer
       flags |= QueryExecutor.QUERY_SUPPRESS_BEGIN;
     }
 
+    BatchResultHandler handler;
+    handler = createBatchHandler(updateCounts, queries, parameterLists);
+
     if (preDescribe || forceBinaryTransfers) {
       // Do a client-server round trip, parsing and describing the query so we
       // can determine its result types for use in binary parameters, batch sizing,
       // etc.
       int flags2 = flags | QueryExecutor.QUERY_DESCRIBE_ONLY;
       StatementResultHandler handler2 = new StatementResultHandler();
-      connection.getQueryExecutor().execute(queries[0], parameterLists[0], handler2, 0, 0, flags2);
+      try {
+        connection.getQueryExecutor().execute(queries[0], parameterLists[0], handler2, 0, 0, flags2);
+      } catch (SQLException e) {
+        // Unable to parse the first statement -> throw BatchUpdateException
+        handler.handleError(e);
+        handler.handleCompletion();
+        // Will not reach here (see above)
+      }
       ResultWrapper result2 = handler2.getResults();
       if (result2 != null) {
         result2.getResultSet().close();
@@ -982,9 +992,6 @@ protected BatchResultHandler createBatchHandler(int[] updateCounts, Query[] quer
 
     result = null;
 
-    BatchResultHandler handler;
-    handler = createBatchHandler(updateCounts, queries, parameterLists);
-
     try {
       startTimer();
       connection.getQueryExecutor().execute(queries, parameterLists, handler, maxrows, fetchSize,
diff --git a/pgjdbc/src/test/java/org/postgresql/test/jdbc2/BatchFailureTest.java b/pgjdbc/src/test/java/org/postgresql/test/jdbc2/BatchFailureTest.java
index d8150d9cb0..3c0174ef09 100755
--- a/pgjdbc/src/test/java/org/postgresql/test/jdbc2/BatchFailureTest.java
+++ b/pgjdbc/src/test/java/org/postgresql/test/jdbc2/BatchFailureTest.java
@@ -75,10 +75,12 @@ public void addRow(Statement statement, String value) throws SQLException {
   }
 
   enum FailMode {
-    NO_FAIL_JUST_INSERTS, NO_FAIL_SELECT, FAIL_VIA_SELECT, FAIL_VIA_DUP_KEY;
+    NO_FAIL_JUST_INSERTS, NO_FAIL_SELECT,
+    FAIL_VIA_SELECT_PARSE, FAIL_VIA_SELECT_RUNTIME,
+    FAIL_VIA_DUP_KEY;
 
     public boolean supports(BatchType batchType) {
-      return batchType != BatchType.SIMPLE ^ this.name().endsWith("SELECT");
+      return batchType != BatchType.SIMPLE ^ this.name().contains("SELECT");
     }
 
     public void injectFailure(Statement statement, BatchType batchType) throws SQLException {
@@ -88,8 +90,11 @@ public void injectFailure(Statement statement, BatchType batchType) throws SQLEx
         case NO_FAIL_SELECT:
           statement.addBatch("select 1 union all select 2");
           break;
-        case FAIL_VIA_SELECT:
-          statement.addBatch("select 1 union all select 0/0");
+        case FAIL_VIA_SELECT_RUNTIME:
+          statement.addBatch("select 0/count(*) where 1=2");
+          break;
+        case FAIL_VIA_SELECT_PARSE:
+          statement.addBatch("seeeeleeeect 1");
           break;
         case FAIL_VIA_DUP_KEY:
           batchType.addRow(statement, "key-2");
@@ -202,14 +207,13 @@ public void run() throws SQLException {
       batchResult = statement.executeBatch();
       Assert.assertTrue("Expecting BatchUpdateException due to " + failMode
               + ", executeBatch returned " + Arrays.toString(batchResult),
-          failMode.name().startsWith("NO"));
-      expectedRows = pos - (failPosition == FailPosition.NONE ? 0 : 1);
-      expectedRows++; // +1 since key-2 is already in the DB
+          failPosition == FailPosition.NONE);
+      expectedRows = pos + 1; // +1 since key-2 is already in the DB
     } catch (BatchUpdateException ex) {
       batchResult = ex.getUpdateCounts();
       Assert.assertTrue("Should not fail since fail mode should be " + failMode
               + ", executeBatch returned " + Arrays.toString(batchResult),
-          failMode.name().startsWith("FAIL"));
+          failPosition != FailPosition.NONE);
 
       for (int i : batchResult) {
         if (i != Statement.EXECUTE_FAILED) {
