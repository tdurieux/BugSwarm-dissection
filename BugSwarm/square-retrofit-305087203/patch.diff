diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 1edf3b882..8379968da 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -27,6 +27,7 @@
 import okio.Okio;
 
 import static retrofit2.Utils.checkNotNull;
+import static retrofit2.Utils.throwIfFatal;
 
 final class OkHttpCall<T> implements Call<T> {
   private final ServiceMethod<T, ?> serviceMethod;
@@ -37,7 +38,7 @@
   @GuardedBy("this")
   private @Nullable okhttp3.Call rawCall;
   @GuardedBy("this")
-  private @Nullable Throwable creationFailure; // Either a RuntimeException, Error, or IOException.
+  private @Nullable Throwable creationFailure;
   @GuardedBy("this")
   private boolean executed;
 
@@ -92,6 +93,7 @@
         try {
           call = rawCall = createRawCall();
         } catch (Throwable t) {
+          throwIfFatal(t);
           failure = creationFailure = t;
         }
       }
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 1b05c65a0..9d832bcb7 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -494,4 +494,15 @@ static Type getCallResponseType(Type returnType) {
       return "? extends " + typeToString(upperBound);
     }
   }
+
+  // github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/exceptions/Exceptions.java#L66
+  static void throwIfFatal(Throwable t) {
+    if (t instanceof VirtualMachineError) {
+      throw (VirtualMachineError) t;
+    } else if (t instanceof ThreadDeath) {
+      throw (ThreadDeath) t;
+    } else if (t instanceof LinkageError) {
+      throw (LinkageError) t;
+    }
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index c5b436a50..1cda80bb9 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -768,7 +768,7 @@
     assertThat(writeCount.get()).isEqualTo(1);
   }
 
-  @Test public void requestThrowingErrorBeforeExecuteFailsExecute() throws IOException {
+  @Test public void requestThrowingRecoverableErrorBeforeExecuteFailsExecute() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory())
@@ -781,7 +781,7 @@
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new OutOfMemoryError("Broken!");
+        throw new AssertionError("Broken!");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -789,16 +789,16 @@
     try {
       call.request();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
 
     try {
       call.execute();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
   }
@@ -863,7 +863,7 @@
     assertThat(writeCount.get()).isEqualTo(1);
   }
 
-  @Test public void requestAfterExecuteThrowingAlsoThrowsForErrors() throws IOException {
+  @Test public void requestAfterExecuteThrowingAlsoThrowsForRecoverableErrors() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory())
@@ -876,7 +876,7 @@
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new OutOfMemoryError("Broken!");
+        throw new AssertionError("Broken!");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -884,16 +884,16 @@
     try {
       call.execute();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
 
     try {
       call.request();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
   }
@@ -973,7 +973,7 @@
     assertTrue(latch.await(10, SECONDS));
   }
 
-  @Test public void requestThrowingErrorBeforeEnqueueFailsEnqueue()
+  @Test public void requestThrowingRecoverableErrorBeforeEnqueueFailsEnqueue()
       throws IOException, InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -987,7 +987,7 @@
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new OutOfMemoryError("Broken!");
+        throw new AssertionError("Broken!");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -995,8 +995,8 @@
     try {
       call.request();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
 
@@ -1006,7 +1006,7 @@
       }
 
       @Override public void onFailure(Call<String> call, Throwable t) {
-        assertThat(t).isExactlyInstanceOf(OutOfMemoryError.class).hasMessage("Broken!");
+        assertThat(t).isExactlyInstanceOf(AssertionError.class).hasMessage("Broken!");
         assertThat(writeCount.get()).isEqualTo(1);
         latch.countDown();
       }
@@ -1090,7 +1090,7 @@
     assertThat(writeCount.get()).isEqualTo(1);
   }
 
-  @Test public void requestAfterEnqueueFailingThrowsForErrors() throws IOException,
+  @Test public void requestAfterEnqueueFailingThrowsForRecoverableErrors() throws IOException,
       InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -1104,7 +1104,7 @@
     Object a = new Object() {
       @Override public String toString() {
         writeCount.incrementAndGet();
-        throw new OutOfMemoryError("Broken!");
+        throw new AssertionError("Broken!");
       }
     };
     Call<String> call = service.postRequestBody(a);
@@ -1115,7 +1115,7 @@
       }
 
       @Override public void onFailure(Call<String> call, Throwable t) {
-        assertThat(t).isExactlyInstanceOf(OutOfMemoryError.class).hasMessage("Broken!");
+        assertThat(t).isExactlyInstanceOf(AssertionError.class).hasMessage("Broken!");
         assertThat(writeCount.get()).isEqualTo(1);
         latch.countDown();
       }
@@ -1125,9 +1125,49 @@
     try {
       call.request();
       fail();
-    } catch (OutOfMemoryError e) {
-      assertThat(e).hasMessage("Broken!");
+    } catch (AssertionError expected) {
+      assertThat(expected).hasMessage("Broken!");
     }
     assertThat(writeCount.get()).isEqualTo(1);
   }
+
+  @Test public void unrecoverableErrorsAreNotCaughtForCallback() throws Exception {
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .addConverterFactory(new ToStringConverterFactory())
+        .build();
+    Service service = retrofit.create(Service.class);
+
+    server.enqueue(new MockResponse());
+
+    final AtomicInteger writeCount = new AtomicInteger();
+    Object a = new Object() {
+      @Override public String toString() {
+        writeCount.incrementAndGet();
+        throw new OutOfMemoryError("Broken!");
+      }
+    };
+    Call<String> call = service.postRequestBody(a);
+
+    try {
+      call.enqueue(new Callback<String>() {
+        @Override public void onResponse(Call<String> call, Response<String> response) {
+        }
+
+        @Override public void onFailure(Call<String> call, Throwable t) {
+        }
+      });
+      fail();
+    } catch (OutOfMemoryError expected) {
+      assertThat(expected).hasMessage("Broken!");
+    }
+
+    try {
+      call.request();
+      fail();
+    } catch (OutOfMemoryError expected) {
+      assertThat(expected).hasMessage("Broken!");
+    }
+    assertThat(writeCount.get()).isEqualTo(2);
+  }
 }
