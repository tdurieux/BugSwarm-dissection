diff --git a/modules/wyc/src/wyc/builder/FlowTypeChecker.java b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
index a73159e33f..7de652bd59 100755
--- a/modules/wyc/src/wyc/builder/FlowTypeChecker.java
+++ b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
@@ -2309,7 +2309,7 @@ private static ValidCandidate validateCandidate(NameID candidateId, Nominal.Func
 		if (parameters == null) {
 			if (candidates.size() == 1) {
 				Pair<NameID, Nominal.FunctionOrMethod> p = candidates.iterator().next();
-				return new Triple<>(p.first(), p.second(), null);
+				return new Triple<NameID, Nominal.FunctionOrMethod,List<String>>(p.first(), p.second(), null);
 			}
 
 			// More than one candidate and all will match. Clearly ambiguous!
@@ -3032,7 +3032,7 @@ private int resolveAsType(SyntacticType type, Context context, ArrayList<Automat
 				SyntacticType pt = utReturnTypes.get(i);
 				myChildren[i + numParamTypes] = resolveAsType(pt, context, states, roots, nominal, unconstrained);
 			}
-			myData = new Type.FunctionOrMethod.Data(utParamTypes.size(), new HashSet<>(utContextLifetimes), utLifetimeParameters);
+			myData = new Type.FunctionOrMethod.Data(utParamTypes.size(), new HashSet<String>(utContextLifetimes), utLifetimeParameters);
 		}
 
 		states.set(myIndex, new Automaton.State(myKind, myData, myDeterministic, myChildren));
diff --git a/modules/wycs/src/wycs/syntax/Expr.java b/modules/wycs/src/wycs/syntax/Expr.java
index afb81017b0..f90277c594 100755
--- a/modules/wycs/src/wycs/syntax/Expr.java
+++ b/modules/wycs/src/wycs/syntax/Expr.java
@@ -677,10 +677,10 @@ public boolean equivalent(Expr e) {
 		
 		@Override
 		public Expr.Record copy() {
-			ArrayList<Pair<String,Expr>> nOperands = new ArrayList<>();
+			ArrayList<Pair<String,Expr>> nOperands = new ArrayList<Pair<String,Expr>>();
 			for (int i = 0; i != operands.size(); ++i) {
 				Pair<String, Expr> operand = operands.get(i);
-				nOperands.add(new Pair<>(operand.first(), operand.second()
+				nOperands.add(new Pair<String,Expr>(operand.first(), operand.second()
 						.copy()));
 			}
 			return new Expr.Record(nOperands, attributes());
diff --git a/modules/wycs/src/wycs/syntax/SyntacticType.java b/modules/wycs/src/wycs/syntax/SyntacticType.java
index 1e70e57d94..7ef19b4080 100755
--- a/modules/wycs/src/wycs/syntax/SyntacticType.java
+++ b/modules/wycs/src/wycs/syntax/SyntacticType.java
@@ -869,7 +869,7 @@ public boolean equivalent(SyntacticType t) {
 
 		@Override
 		public SyntacticType.Record copy() {
-			ArrayList<Pair<SyntacticType, Expr.Variable>> nElements = new ArrayList<>();
+			ArrayList<Pair<SyntacticType, Expr.Variable>> nElements = new ArrayList<Pair<SyntacticType,Expr.Variable>>();
 			for (int i = 0; i != elements.size(); ++i) {
 				Pair<SyntacticType, Expr.Variable> e = elements.get(i);
 				nElements.add(new Pair<>(e.first().copy(),e.second().copy()));
diff --git a/modules/wyil/src/wyil/builders/VerificationConditionGenerator.java b/modules/wyil/src/wyil/builders/VerificationConditionGenerator.java
index f8d882e064..54686c66de 100755
--- a/modules/wyil/src/wyil/builders/VerificationConditionGenerator.java
+++ b/modules/wyil/src/wyil/builders/VerificationConditionGenerator.java
@@ -10,7 +10,6 @@
 import java.math.BigInteger;
 import java.util.*;
 
-import sun.text.normalizer.RangeValueIterator;
 import wycc.lang.Attribute;
 import wycc.lang.NameID;
 import wycc.lang.SyntacticElement;
@@ -600,7 +599,7 @@ private Context translateAssign(Location<?>[] lval, Location<?> rval, Context co
 			}
 			Expr j = new Expr.Constant(Value.Integer(BigInteger.valueOf(index)));
 			Expr newField = new Expr.IndexOf(newSource, j, lval.attributes());
-			return new Pair<>(newField,context);
+			return new Pair<Expr,Context>(newField,context);
 		} catch (ResolveError e) {
 			internalFailure(e.getMessage(), decl.parent().filename(), e, lval.attributes());
 			return null;
@@ -649,7 +648,7 @@ private Context translateAssign(Location<?>[] lval, Location<?> rval, Context co
 			// result
 			Expr newLVal = new Expr.IndexOf(newSource, index, lval.attributes());
 			//
-			return new Pair<>(newLVal,context.assume(macro));
+			return new Pair<Expr,Context>(newLVal,context.assume(macro));
 		} catch (ResolveError e) {
 			internalFailure(e.getMessage(), decl.parent().filename(), e, lval.attributes());
 			return null;
@@ -669,7 +668,7 @@ private Context translateAssign(Location<?>[] lval, Location<?> rval, Context co
 	 */
 	private Pair<Expr,Context> translateDereference(Location<?> lval, Context context) {
 		Expr e = translateAsUnknown(lval,context.getEnvironment());
-		return new Pair<>(e,context);
+		return new Pair<Expr,Context>(e,context);
 	}
 
 	/**
@@ -688,7 +687,7 @@ private Context translateAssign(Location<?>[] lval, Location<?> rval, Context co
 		context = context.havoc(decl.getIndex());
 		String nVersionedVar = context.read(decl);
 		Expr.Variable var = new Expr.Variable(nVersionedVar);
-		return new Pair<>(var,context);
+		return new Pair<Expr,Context>(var,context);
 	}
 
 	/**
@@ -1164,7 +1163,7 @@ private Context translateVariableDeclaration(Location<VariableDeclaration> stmt,
 			context = assumeExpressionPostconditions(expr, context);
 		}
 		// Translate expression in the normal fashion
-		return new Pair<>(translateExpressions(exprs, context.getEnvironment()), context);
+		return new Pair<Expr[],Context>(translateExpressions(exprs, context.getEnvironment()), context);
 	}
 
 	/**
@@ -1185,7 +1184,7 @@ private Context translateVariableDeclaration(Location<VariableDeclaration> stmt,
 		// Gather up any postconditions from function invocations
 		context = assumeExpressionPostconditions(expr, context);
 		// Translate expression in the normal fashion
-		return new Pair<>(translateExpression(expr, context.getEnvironment()), context);
+		return new Pair<Expr,Context>(translateExpression(expr, context.getEnvironment()), context);
 	}
 
 	@SuppressWarnings("unchecked")
diff --git a/modules/wyil/src/wyil/io/WyilFilePrinter.java b/modules/wyil/src/wyil/io/WyilFilePrinter.java
index c4386d181a..5260a238b9 100755
--- a/modules/wyil/src/wyil/io/WyilFilePrinter.java
+++ b/modules/wyil/src/wyil/io/WyilFilePrinter.java
@@ -28,8 +28,6 @@
 import java.io.*;
 import java.util.*;
 
-import com.sun.glass.ui.Pixels.Format;
-
 import wycc.lang.Transform;
 import wyil.lang.*;
 import wyil.lang.Constant;
diff --git a/modules/wyil/src/wyil/util/type/LifetimeSubstitution.java b/modules/wyil/src/wyil/util/type/LifetimeSubstitution.java
index ae712323b0..1350cf6400 100755
--- a/modules/wyil/src/wyil/util/type/LifetimeSubstitution.java
+++ b/modules/wyil/src/wyil/util/type/LifetimeSubstitution.java
@@ -140,7 +140,7 @@ public Type getType() {
 	private SubstitutedState copy(int index, Set<String> ignored) {
 		List<SubstitutedState> mapped = mapping.get(index);
 		if (mapped == null) {
-			mapped = new LinkedList<>();
+			mapped = new LinkedList<SubstitutedState>();
 			mapping.put(index, mapped);
 		} else {
 			outer: for (SubstitutedState entry : mapped) {
diff --git a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
index 84e8b0fff2..a22d2e87aa 100755
--- a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
+++ b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
@@ -1592,7 +1592,7 @@ private void translateInvariantTest(String falseTarget, Type type, int variableR
 		} else if (type instanceof Type.Record) {
 			Type.Record tt = (Type.Record) type;
 			HashMap<String, Type> fields = tt.fields();
-			ArrayList<String> fieldNames = new ArrayList<>(fields.keySet());
+			ArrayList<String> fieldNames = new ArrayList<String>(fields.keySet());
 			Collections.sort(fieldNames);
 			for (int i = 0; i != fieldNames.size(); ++i) {
 				String field = fieldNames.get(i);
@@ -1687,7 +1687,7 @@ private void translateInvariantTest(String falseTarget, Type type, int variableR
 				Bytecode.InvokeMode.INTERFACE));
 
 		// Done
-		return new Triple<>(loopHeader, loopFooter, loopExit);
+		return new Triple<String,String,String>(loopHeader, loopFooter, loopExit);
 	}
 
 	private void translateLoopEnd(Triple<String, String, String> labels, Context context) {
