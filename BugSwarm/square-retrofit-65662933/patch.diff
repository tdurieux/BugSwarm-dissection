diff --git a/retrofit-adapters/rxjava/src/main/java/retrofit/ObservableCallAdapterFactory.java b/retrofit-adapters/rxjava/src/main/java/retrofit/ObservableCallAdapterFactory.java
index 5bef817bdd..b40be0e698 100755
--- a/retrofit-adapters/rxjava/src/main/java/retrofit/ObservableCallAdapterFactory.java
+++ b/retrofit-adapters/rxjava/src/main/java/retrofit/ObservableCallAdapterFactory.java
@@ -75,10 +75,10 @@ private ObservableCallAdapterFactory() {
     return new SimpleCallAdapter(observableType);
   }
 
-  static final class CallOnSubcribe<T> implements Observable.OnSubscribe<Response<T>> {
+  static final class CallOnSubscribe<T> implements Observable.OnSubscribe<Response<T>> {
     private final Call<T> originalCall;
 
-    private CallOnSubcribe(Call<T> originalCall) {
+    private CallOnSubscribe(Call<T> originalCall) {
       this.originalCall = originalCall;
     }
 
@@ -129,7 +129,7 @@ private CallOnSubcribe(Call<T> originalCall) {
     }
 
     @Override public Observable<Response<T>> adapt(Call<T> call) {
-      return Observable.create(new CallOnSubcribe<>(call));
+      return Observable.create(new CallOnSubscribe<>(call));
     }
   }
 
@@ -145,7 +145,7 @@ private CallOnSubcribe(Call<T> originalCall) {
     }
 
     @Override public Observable<T> adapt(Call<T> call) {
-      return Observable.create(new CallOnSubcribe<>(call)) //
+      return Observable.create(new CallOnSubscribe<>(call)) //
           .flatMap(new Func1<Response<T>, Observable<T>>() {
             @Override public Observable<T> call(Response<T> response) {
               if (response.isSuccess()) {
@@ -169,7 +169,7 @@ private CallOnSubcribe(Call<T> originalCall) {
     }
 
     @Override public Observable<Result<T>> adapt(Call<T> call) {
-      return Observable.create(new CallOnSubcribe<>(call)) //
+      return Observable.create(new CallOnSubscribe<>(call)) //
           .map(new Func1<Response<T>, Result<T>>() {
             @Override public Result<T> call(Response<T> response) {
               return Result.fromResponse(response);
diff --git a/retrofit/src/main/java/retrofit/MethodInfo.java b/retrofit/src/main/java/retrofit/MethodInfo.java
index 540e7380e8..3d0e5a4a20 100755
--- a/retrofit/src/main/java/retrofit/MethodInfo.java
+++ b/retrofit/src/main/java/retrofit/MethodInfo.java
@@ -213,6 +213,9 @@ private void parseHttpMethodAndPath(String method, String path, boolean hasBody)
   /** Loads {@link #adapter}. */
   private void parseResponseType() {
     Type returnType = method.getGenericReturnType();
+    if (Utils.hasUnresolvableType(returnType)) {
+      throw methodError("Method return type must not include a type variable or wildcard.");
+    }
 
     // Check for invalid configurations.
     if (returnType == void.class) {
@@ -226,9 +229,6 @@ private void parseResponseType() {
           "Registered call adapter factory was unable to handle return type " + returnType);
     }
     Type responseType = adapter.responseType();
-    if (Utils.hasUnresolvableType(responseType)) {
-      throw methodError("Method response type must not include a type variable or wildcard.");
-    }
     if (converter == null && responseType != ResponseBody.class) {
       throw methodError("Method response type is "
           + responseType
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index e282039b5a..8db5f48ad4 100755
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -305,38 +305,38 @@
     }
   }
 
-  //@Test public void formEncodingFailsOnNonBodyMethod() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @GET("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage(
-  //        "Example.method: FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).");
-  //  }
-  //}
-  //
-  //@Test public void formEncodingFailsWithNoParts() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: Form-encoded method must contain at least one @Field.");
-  //  }
-  //}
+  @Test public void formEncodingFailsOnNonBodyMethod() {
+    class Example {
+      @FormUrlEncoded //
+      @GET("/") //
+      Call<Object> method() {
+        return null;
+      }
+    }
+    try {
+      buildRequest(Example.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "Example.method: FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).");
+    }
+  }
+
+  @Test public void formEncodingFailsWithNoParts() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/") //
+      Call<Object> method() {
+        return null;
+      }
+    }
+    try {
+      buildRequest(Example.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage("Example.method: Form-encoded method must contain at least one @Field.");
+    }
+  }
 
   @Test public void headersFailWhenEmptyOnMethod() {
     class Example {
@@ -585,6 +585,20 @@
     assertThat(request.body()).isNull();
   }
 
+  @Test public void getWithUnusedAndInvalidNamedPathParam() {
+    class Example {
+      @GET("/foo/bar/{ping}/{kit,kat}/") //
+      Call<Object> method(@Path("ping") String ping) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, "pong");
+    assertThat(request.method()).isEqualTo("GET");
+    assertThat(request.headers().size()).isZero();
+    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/%7Bkit,kat%7D/");
+    assertThat(request.body()).isNull();
+  }
+
   @Test public void getWithEncodedPathParam() {
     class Example {
       @GET("/foo/bar/{ping}/") //
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
index 71cec4b068..2c3b76a34e 100755
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -40,10 +40,12 @@
   interface StringService {
     @GET("/") String get();
   }
-  interface BoundsService {
-    @GET("/") <T> Call<T> none();
-    @GET("/") <T extends ResponseBody> Call<T> upper();
+  interface Unresolvable {
+    @GET("/") <T> Call<T> typeVariable();
+    @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();
     @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();
+    @GET("/") Call<?> wildcard();
+    @GET("/") Call<? extends ResponseBody> wildcardUpperBound();
   }
 
   @SuppressWarnings("EqualsBetweenInconvertibleTypes") // We are explicitly testing this behavior.
@@ -210,51 +212,47 @@
     assertThat(server.takeRequest().getBody().readUtf8()).isEqualTo("Hey");
   }
 
-  @Test public void typeVariableNoBoundThrows() {
+  @Test public void unresolvableTypeThrows() {
     RestAdapter ra = new RestAdapter.Builder()
         .endpoint(server.getUrl("/").toString())
         .converter(new StringConverter())
         .build();
-    BoundsService example = ra.create(BoundsService.class);
+    Unresolvable example = ra.create(Unresolvable.class);
 
     try {
-      example.none();
+      example.typeVariable();
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
-          "BoundsService.none: Method response type must not include a type variable.");
+          "Unresolvable.typeVariable: Method return type must not include a type variable or wildcard.");
     }
-  }
-
-  @Test public void typeVariableUpperBoundThrows() {
-    RestAdapter ra = new RestAdapter.Builder()
-        .endpoint(server.getUrl("/").toString())
-        .converter(new StringConverter())
-        .build();
-    BoundsService example = ra.create(BoundsService.class);
-
     try {
-      example.upper();
+      example.typeVariableUpperBound();
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
-          "BoundsService.upper: Method response type must not include a type variable.");
+          "Unresolvable.typeVariableUpperBound: Method return type must not include a type variable or wildcard.");
     }
-  }
-
-  @Test public void typeVariableNestedThrows() {
-    RestAdapter ra = new RestAdapter.Builder()
-        .endpoint(server.getUrl("/").toString())
-        .converter(new StringConverter())
-        .build();
-    BoundsService example = ra.create(BoundsService.class);
-
     try {
       example.crazy();
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
-          "BoundsService.crazy: Method response type must not include a type variable.");
+          "Unresolvable.crazy: Method return type must not include a type variable or wildcard.");
+    }
+    try {
+      example.wildcard();
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "Unresolvable.wildcard: Method return type must not include a type variable or wildcard.");
+    }
+    try {
+      example.wildcardUpperBound();
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "Unresolvable.wildcardUpperBound: Method return type must not include a type variable or wildcard.");
     }
   }
 }
