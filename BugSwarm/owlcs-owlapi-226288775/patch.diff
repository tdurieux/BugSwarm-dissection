diff --git a/api/src/main/java/org/semanticweb/owlapi/io/FileDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/FileDocumentSource.java
index 0bd3ab7882..37f8e6c771 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/FileDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/FileDocumentSource.java
@@ -58,7 +58,7 @@ public FileDocumentSource(File file, OWLDocumentFormat format) {
      */
     public FileDocumentSource(File file, @Nullable OWLDocumentFormat format,
         @Nullable String mime) {
-        super(IRI.create(file), format, mime);
-        inputStream = () -> new FileInputStream(checkNotNull(file, "file cannot be null"));
+        super(IRI.create(file),
+            () -> new FileInputStream(checkNotNull(file, "file cannot be null")), format, mime);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/GZipFileDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/GZipFileDocumentSource.java
index a8f0a0f4b8..010f89aab4 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/GZipFileDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/GZipFileDocumentSource.java
@@ -50,7 +50,6 @@ public GZipFileDocumentSource(File input) {
      */
     public GZipFileDocumentSource(File input, IRI documentIRI, @Nullable OWLDocumentFormat format,
         @Nullable String mime) {
-        super(documentIRI, format, mime);
-        inputStream = () -> new GZIPInputStream(new FileInputStream(input));
+        super(documentIRI, () -> new GZIPInputStream(new FileInputStream(input)), format, mime);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/GZipStreamDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/GZipStreamDocumentSource.java
index 0adbf1bf10..4397150d70 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/GZipStreamDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/GZipStreamDocumentSource.java
@@ -12,13 +12,14 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.io;
 
+import static org.apache.commons.io.IOUtils.toByteArray;
+
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.util.zip.GZIPInputStream;
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.io.IOUtils;
 import org.semanticweb.owlapi.model.IRI;
 import org.semanticweb.owlapi.model.OWLDocumentFormat;
 
@@ -45,17 +46,12 @@ public GZipStreamDocumentSource(InputStream is) {
      * specified stream.
      *
      * @param stream The stream that the ontology representation will be read from.
-     * @param documentIRI The document IRI
-     * @param format ontology format
-     * @param mime mime type
+     * @param iri The document IRI
+     * @param f ontology format
+     * @param m mime type
      */
-    public GZipStreamDocumentSource(InputStream stream, IRI documentIRI,
-        @Nullable OWLDocumentFormat format, @Nullable String mime) {
-        super(documentIRI, format, mime);
-        readIntoBuffer(stream);
-    }
-
-    private void readIntoBuffer(InputStream in) {
-        inputStream = () -> new GZIPInputStream(new ByteArrayInputStream(IOUtils.toByteArray(in)));
+    public GZipStreamDocumentSource(InputStream stream, IRI iri, @Nullable OWLDocumentFormat f,
+        @Nullable String m) {
+        super(iri, () -> new GZIPInputStream(new ByteArrayInputStream(toByteArray(stream))), f, m);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/IRIDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/IRIDocumentSource.java
index 3391365384..1ca7db495f 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/IRIDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/IRIDocumentSource.java
@@ -37,7 +37,7 @@ public IRIDocumentSource(IRI documentIRI) {
      */
     public IRIDocumentSource(IRI documentIRI, @Nullable OWLDocumentFormat format,
         @Nullable String mime) {
-        super(documentIRI, format, mime);
+        super(documentIRI, () -> null, format, mime);
         failedOnStreams.set(true);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/OWLOntologyDocumentSourceBase.java b/api/src/main/java/org/semanticweb/owlapi/io/OWLOntologyDocumentSourceBase.java
index 16f5938a5d..7e2f4b09f1 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/OWLOntologyDocumentSourceBase.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/OWLOntologyDocumentSourceBase.java
@@ -77,44 +77,50 @@
     @Nullable
     private final String mimeType;
     protected Charset encoding = StandardCharsets.UTF_8;
-    protected final StreamerWrapper<Reader, InputStream> defaultReader =
+    private final StreamerWrapper<Reader, InputStream> defaultReader =
         (i) -> new InputStreamReader(new BOMInputStream(new BufferedInputStream(i), UTF_8, UTF_16BE,
             UTF_16LE, UTF_32BE, UTF_32LE), encoding);
-    protected Streamer<InputStream> inputStream;
-    protected Streamer<Reader> reader = () -> defaultReader.get(inputStream.get());
+    private Streamer<InputStream> inputStream;
+    private Streamer<Reader> reader = () -> defaultReader.get(inputStream.get());
     protected String stringContent = "";
-    protected @Nullable OWLParserParameters parameters;
+    @Nullable
+    protected OWLParserParameters parametersAtLoading;
 
 
     /**
      * Constructs an ontology input source using the specified file.
      *
      * @param iri document IRI
+     * @param in input stream
      * @param format ontology format. If null, it is considered unspecified
      * @param mime mime type. If null or empty, it is considered unspecified.
      */
-    public OWLOntologyDocumentSourceBase(IRI iri, @Nullable OWLDocumentFormat format,
-        @Nullable String mime) {
+    protected OWLOntologyDocumentSourceBase(IRI iri, Streamer<InputStream> in,
+        @Nullable OWLDocumentFormat format, @Nullable String mime) {
         this.format = format;
         mimeType = mime;
         documentIRI = checkNotNull(iri, "document iri cannot be null");
+        inputStream = in;
     }
 
     /**
      * Constructs an ontology input source using the specified file.
      *
      * @param iriPrefix document IRI prefix - used to generate a new IRI
+     * @param in input stream
      * @param format ontology format. If null, it is considered unspecified
      * @param mime mime type. If null or empty, it is considered unspecified.
      */
-    public OWLOntologyDocumentSourceBase(String iriPrefix, @Nullable OWLDocumentFormat format,
-        @Nullable String mime) {
-        this(IRI.getNextDocumentIRI(iriPrefix), format, mime);
+    protected OWLOntologyDocumentSourceBase(String iriPrefix, Streamer<InputStream> in,
+        @Nullable OWLDocumentFormat format, @Nullable String mime) {
+        this(IRI.getNextDocumentIRI(iriPrefix), in, format, mime);
     }
 
     @Override
+    @SuppressWarnings("null")
     public Optional<OWLOntologyLoaderMetaData> getOntologyLoaderMetaData() {
-        return Optional.ofNullable(parameters == null ? null : parameters.getLoaderMetaData());
+        return Optional.ofNullable(
+            parametersAtLoading == null ? null : parametersAtLoading.getLoaderMetaData());
     }
 
     private static InputStream getInputStreamFromContentEncoding(IRI iri, Response response)
@@ -194,7 +200,9 @@ private static String getFileNameFromContentDisposition(@Nullable String disposi
     public OWLDocumentFormat acceptParser(OWLParser parser, OWLOntology o,
         OntologyConfigurator config) {
         boolean textual = parser.getSupportedFormat().isTextual();
-        parameters = new OWLParserParameters(o, config, documentIRI).withEncoding(encoding);
+        OWLParserParameters parameters =
+            new OWLParserParameters(o, config, documentIRI).withEncoding(encoding);
+        parametersAtLoading = parameters;
         // For document sources that are string based, this is a performance
         // shortcut: no streams, no buffers, no IOExceptions
         if (!stringContent.isEmpty() && textual) {
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/OWLParser.java b/api/src/main/java/org/semanticweb/owlapi/io/OWLParser.java
index 5e249e4304..5a9175c7a7 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/OWLParser.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/OWLParser.java
@@ -25,6 +25,7 @@
 import org.semanticweb.owlapi.model.OWLOntology;
 import org.semanticweb.owlapi.model.OWLOntologyChangeException;
 import org.semanticweb.owlapi.model.OWLOntologyManager;
+import org.semanticweb.owlapi.model.OntologyConfigurator;
 import org.semanticweb.owlapi.model.UnloadableImportException;
 
 /**
@@ -50,7 +51,7 @@
      * Parses the ontology with a concrete representation available at {@code documentIRI} and adds
      * its axioms to {@code ontology}. Implementors of this method should load imported ontologies
      * through
-     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OWLOntologyLoaderConfiguration)
+     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OntologyConfigurator)
      * makeLoadImportRequest()}.
      *
      * @param documentIRI the IRI of the document to parse
@@ -82,7 +83,7 @@ default String getName() {
     /**
      * Parses the ontology with a concrete representation in {@code in} and adds its axioms to
      * {@code ontology}. Implementors of this method should load imported ontologies through
-     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OWLOntologyLoaderConfiguration)
+     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OntologyConfigurator)
      * makeLoadImportRequest()}.
      *
      * @param in the source of a concrete representation of the document to parse
@@ -102,7 +103,7 @@ default OWLDocumentFormat parse(String in, OWLParserParameters parameters) {
     /**
      * Parses the ontology with a concrete representation in {@code r} and adds its axioms to {@code
      * ontology}. Implementors of this method should load imported ontologies through
-     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OWLOntologyLoaderConfiguration)
+     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OntologyConfigurator)
      * makeLoadImportRequest()}.
      *
      * @param r the source of a concrete representation of the document to parse
@@ -120,7 +121,7 @@ default OWLDocumentFormat parse(String in, OWLParserParameters parameters) {
     /**
      * Parses the ontology with a concrete representation in {@code in} and adds its axioms to
      * {@code ontology}. Implementors of this method should load imported ontologies through
-     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OWLOntologyLoaderConfiguration)
+     * {@link OWLOntologyManager#makeLoadImportRequest(org.semanticweb.owlapi.model.OWLImportsDeclaration, OntologyConfigurator)
      * makeLoadImportRequest()}.
      *
      * @param in the source of a concrete representation of the document to parse
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/OWLStorerParameters.java b/api/src/main/java/org/semanticweb/owlapi/io/OWLStorerParameters.java
index 6a865e5702..38e00f6c51 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/OWLStorerParameters.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/OWLStorerParameters.java
@@ -32,6 +32,7 @@ public void setParameter(Serializable key, Serializable value) {
      * @param <T> type
      * @return the value
      */
+    @SuppressWarnings("unchecked")
     public <T> T getParameter(Serializable key, T defaultValue) {
         Serializable val = parameterMap.get(key);
         if (val == null) {
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/StreamDocumentSourceBase.java b/api/src/main/java/org/semanticweb/owlapi/io/StreamDocumentSourceBase.java
index 8269ae5813..d37cbf0bda 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/StreamDocumentSourceBase.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/StreamDocumentSourceBase.java
@@ -21,6 +21,7 @@
 import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 
@@ -51,8 +52,8 @@
      */
     public StreamDocumentSourceBase(InputStream stream, IRI documentIRI,
         @Nullable OWLDocumentFormat format, @Nullable String mime) {
-        super(documentIRI, format, mime);
-        readIntoBuffer(checkNotNull(stream, "stream cannot be null"));
+        super(documentIRI, readIntoBuffer(checkNotNull(stream, "stream cannot be null")), format,
+            mime);
     }
 
     /**
@@ -80,14 +81,13 @@ protected StreamDocumentSourceBase(InputStream stream, String prefix,
      */
     public StreamDocumentSourceBase(Reader stream, IRI documentIRI,
         @Nullable OWLDocumentFormat format, @Nullable String mime) {
-        super(documentIRI, format, mime);
-        checkNotNull(stream, "stream cannot be null");
+        super(documentIRI, readIntoBuffer(checkNotNull(stream, "stream cannot be null")), format,
+            mime);
         // if the input stream carries encoding information, use it; else leave
         // the default as UTF-8
         if (stream instanceof InputStreamReader) {
             encoding = Charset.forName(((InputStreamReader) stream).getEncoding());
         }
-        readIntoBuffer(stream);
     }
 
     /**
@@ -110,28 +110,36 @@ protected StreamDocumentSourceBase(Reader stream, String prefix,
      * caches the input stream.
      *
      * @param in The stream to be "cached"
+     * @return streamer
      */
-    private void readIntoBuffer(InputStream in) {
+    private static Streamer<InputStream> readIntoBuffer(InputStream in) {
         try (BufferByteArray bos = new BufferByteArray();
             GZIPOutputStream out = new GZIPOutputStream(bos)) {
             IOUtils.copy(in, out);
             out.finish();
             out.flush();
-            inputStream = () -> new GZIPInputStream(new ByteArrayInputStream(bos.byteArray()));
+            return () -> new GZIPInputStream(new ByteArrayInputStream(bos.byteArray()));
         } catch (IOException e) {
             throw new OWLRuntimeException(e);
         }
     }
 
-    private void readIntoBuffer(Reader in) {
+    private static Streamer<InputStream> readIntoBuffer(Reader in) {
+        // if the input stream carries encoding information, use it; else leave
+        // the default as UTF-8
+        Charset enc = StandardCharsets.UTF_8;
+        if (in instanceof InputStreamReader) {
+            enc = Charset.forName(((InputStreamReader) in).getEncoding());
+        }
+
         try (BufferByteArray bos = new BufferByteArray();
             GZIPOutputStream out = new GZIPOutputStream(bos)) {
-            OutputStreamWriter writer = new OutputStreamWriter(out, encoding);
+            OutputStreamWriter writer = new OutputStreamWriter(out, enc);
             IOUtils.copy(in, writer);
             writer.flush();
             out.finish();
             out.flush();
-            inputStream = () -> new GZIPInputStream(new ByteArrayInputStream(bos.byteArray()));
+            return () -> new GZIPInputStream(new ByteArrayInputStream(bos.byteArray()));
         } catch (IOException e) {
             throw new OWLRuntimeException(e);
         }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/StringDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/StringDocumentSource.java
index e204147fd3..b7b835f8eb 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/StringDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/StringDocumentSource.java
@@ -27,12 +27,14 @@
  */
 public class StringDocumentSource extends OWLOntologyDocumentSourceBase {
 
+    private static final String STRING_ONTOLOGY = "string:ontology";
+
     /**
      * @param target a document target
      * @param f format
      */
     public StringDocumentSource(StringDocumentTarget target, OWLDocumentFormat f) {
-        this(target.toString(), "string:ontology", f, null);
+        this(target.toString(), STRING_ONTOLOGY, f, null);
     }
 
     /**
@@ -40,14 +42,14 @@ public StringDocumentSource(StringDocumentTarget target, OWLDocumentFormat f) {
      * @param f format
      */
     public StringDocumentSource(String string, OWLDocumentFormat f) {
-        this(string, "string:ontology", f, null);
+        this(string, STRING_ONTOLOGY, f, null);
     }
 
     /**
      * @param string the source string
      */
     public StringDocumentSource(String string) {
-        this(string, "string:ontology", null, null);
+        this(string, STRING_ONTOLOGY, null, null);
     }
 
     /**
@@ -81,7 +83,7 @@ public StringDocumentSource(String string, String prefix, @Nullable OWLDocumentF
      */
     public StringDocumentSource(String string, IRI documentIRI, @Nullable OWLDocumentFormat f,
         @Nullable String mime) {
-        super(documentIRI, f, mime);
+        super(documentIRI, () -> null, f, mime);
         checkNotNull(string, "string cannot be null");
         stringContent = string;
         // avoid attempting IRI resolution if it is known to be failed
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/XZFileDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/XZFileDocumentSource.java
index 4656eeb766..26abeeb573 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/XZFileDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/XZFileDocumentSource.java
@@ -50,7 +50,6 @@ public XZFileDocumentSource(File in) {
      */
     public XZFileDocumentSource(File in, IRI documentIRI, @Nullable OWLDocumentFormat format,
         @Nullable String mime) {
-        super(documentIRI, format, mime);
-        inputStream = () -> new XZInputStream(new FileInputStream(in));
+        super(documentIRI, () -> new XZInputStream(new FileInputStream(in)), format, mime);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/io/XZStreamDocumentSource.java b/api/src/main/java/org/semanticweb/owlapi/io/XZStreamDocumentSource.java
index 50c9ce17d7..b54e03a34f 100755
--- a/api/src/main/java/org/semanticweb/owlapi/io/XZStreamDocumentSource.java
+++ b/api/src/main/java/org/semanticweb/owlapi/io/XZStreamDocumentSource.java
@@ -12,12 +12,13 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.io;
 
+import static org.apache.commons.io.IOUtils.toByteArray;
+
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.io.IOUtils;
 import org.semanticweb.owlapi.model.IRI;
 import org.semanticweb.owlapi.model.OWLDocumentFormat;
 import org.tukaani.xz.XZInputStream;
@@ -51,8 +52,7 @@ public XZStreamDocumentSource(InputStream is) {
      */
     public XZStreamDocumentSource(InputStream stream, IRI documentIRI,
         @Nullable OWLDocumentFormat format, @Nullable String mime) {
-        super(documentIRI, format, mime);
-        inputStream = () -> new XZInputStream(
-            new ByteArrayInputStream(IOUtils.toByteArray(stream)));
+        super(documentIRI, () -> new XZInputStream(new ByteArrayInputStream(toByteArray(stream))),
+            format, mime);
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/model/OWLObjectVisitorEx.java b/api/src/main/java/org/semanticweb/owlapi/model/OWLObjectVisitorEx.java
index 6895eda6aa..1d62949f6e 100755
--- a/api/src/main/java/org/semanticweb/owlapi/model/OWLObjectVisitorEx.java
+++ b/api/src/main/java/org/semanticweb/owlapi/model/OWLObjectVisitorEx.java
@@ -24,6 +24,7 @@
      * @param object The object that was visited.
      * @return The default return value
      */
+    @SuppressWarnings("null")
     default O doDefault(@SuppressWarnings("unused") OWLObject object) {
         // no other way to provide a default implementation
         return null;
diff --git a/api/src/main/java/org/semanticweb/owlapi/search/AnnotationVisitor.java b/api/src/main/java/org/semanticweb/owlapi/search/AnnotationVisitor.java
index 55ed52fb46..bca300ad8b 100755
--- a/api/src/main/java/org/semanticweb/owlapi/search/AnnotationVisitor.java
+++ b/api/src/main/java/org/semanticweb/owlapi/search/AnnotationVisitor.java
@@ -25,17 +25,11 @@
     }
 
     private C get(OWLAnnotation a) {
-        if (value) {
-            return (C) a.getValue();
-        }
-        return (C) a;
+        return (C) (value ? a.getValue() : a);
     }
 
     @Override
     public Set<C> visit(OWLAnnotationAssertionAxiom axiom) {
-        if (value) {
-            return asUnorderedSet((C) axiom.getValue());
-        }
-        return asUnorderedSet((C) axiom.getAnnotation());
+        return asUnorderedSet((C) (value ? axiom.getValue() : axiom.getAnnotation()));
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/search/EquivalentVisitor.java b/api/src/main/java/org/semanticweb/owlapi/search/EquivalentVisitor.java
index 5c8fff419c..1b2bb93ead 100755
--- a/api/src/main/java/org/semanticweb/owlapi/search/EquivalentVisitor.java
+++ b/api/src/main/java/org/semanticweb/owlapi/search/EquivalentVisitor.java
@@ -31,65 +31,41 @@
 
     @Override
     public Stream<C> visit(OWLEquivalentClassesAxiom axiom) {
-        if (equiv) {
-            return (Stream<C>) axiom.classExpressions();
-        }
-        return doDefault(axiom);
+        return equiv ? (Stream<C>) axiom.classExpressions() : doDefault(axiom);
     }
 
     @Override
     public Stream<C> visit(OWLEquivalentDataPropertiesAxiom axiom) {
-        if (equiv) {
-            return (Stream<C>) axiom.properties();
-        }
-        return doDefault(axiom);
+        return equiv ? (Stream<C>) axiom.properties() : doDefault(axiom);
     }
 
     @Override
     public Stream<C> visit(OWLEquivalentObjectPropertiesAxiom axiom) {
-        if (equiv) {
-            return (Stream<C>) axiom.properties();
-        }
-        return doDefault(axiom);
+        return equiv ? (Stream<C>) axiom.properties() : doDefault(axiom);
     }
 
     @Override
     public Stream<C> visit(OWLDifferentIndividualsAxiom axiom) {
-        if (!equiv) {
-            return (Stream<C>) axiom.individuals();
-        }
-        return doDefault(axiom);
+        return equiv ? doDefault(axiom) : (Stream<C>) axiom.individuals();
     }
 
     @Override
     public Stream<C> visit(OWLSameIndividualAxiom axiom) {
-        if (equiv) {
-            return (Stream<C>) axiom.individuals();
-        }
-        return doDefault(axiom);
+        return equiv ? (Stream<C>) axiom.individuals() : doDefault(axiom);
     }
 
     @Override
     public Stream<C> visit(OWLDisjointClassesAxiom axiom) {
-        if (!equiv) {
-            return (Stream<C>) axiom.classExpressions();
-        }
-        return doDefault(axiom);
+        return equiv ? doDefault(axiom) : (Stream<C>) axiom.classExpressions();
     }
 
     @Override
     public Stream<C> visit(OWLDisjointDataPropertiesAxiom axiom) {
-        if (!equiv) {
-            return (Stream<C>) axiom.properties();
-        }
-        return doDefault(axiom);
+        return equiv ? doDefault(axiom) : (Stream<C>) axiom.properties();
     }
 
     @Override
     public Stream<C> visit(OWLDisjointObjectPropertiesAxiom axiom) {
-        if (!equiv) {
-            return (Stream<C>) axiom.properties();
-        }
-        return doDefault(axiom);
+        return equiv ? doDefault(axiom) : (Stream<C>) axiom.properties();
     }
 }
diff --git a/api/src/main/java/org/semanticweb/owlapi/search/Filters.java b/api/src/main/java/org/semanticweb/owlapi/search/Filters.java
index a73d7a2bf1..053d16e574 100755
--- a/api/src/main/java/org/semanticweb/owlapi/search/Filters.java
+++ b/api/src/main/java/org/semanticweb/owlapi/search/Filters.java
@@ -12,6 +12,17 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.search;
 
+import static org.semanticweb.owlapi.model.AxiomType.ANNOTATION_ASSERTION;
+import static org.semanticweb.owlapi.model.AxiomType.ANNOTATION_PROPERTY_DOMAIN;
+import static org.semanticweb.owlapi.model.AxiomType.ANNOTATION_PROPERTY_RANGE;
+import static org.semanticweb.owlapi.model.AxiomType.AXIOM_TYPES;
+import static org.semanticweb.owlapi.model.AxiomType.DATATYPE_DEFINITION;
+import static org.semanticweb.owlapi.model.AxiomType.SUBCLASS_OF;
+import static org.semanticweb.owlapi.model.AxiomType.SUB_ANNOTATION_PROPERTY_OF;
+import static org.semanticweb.owlapi.model.AxiomType.SUB_DATA_PROPERTY;
+import static org.semanticweb.owlapi.model.AxiomType.SUB_OBJECT_PROPERTY;
+import static org.semanticweb.owlapi.model.AxiomType.TBoxAndRBoxAxiomTypes;
+
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -42,57 +53,57 @@
      * filter returning subannotation axioms where the super property matches the input key.
      */
     public static final OWLAxiomSearchFilter subAnnotationWithSuper = new AxiomFilter<>(
-        AxiomType.SUB_ANNOTATION_PROPERTY_OF, OWLSubAnnotationPropertyOfAxiom::getSuperProperty);
+        SUB_ANNOTATION_PROPERTY_OF, OWLSubAnnotationPropertyOfAxiom::getSuperProperty);
     /**
      * filter returning subannotation axioms where the sub property matches the input key.
      */
     public static final OWLAxiomSearchFilter subAnnotationWithSub = new AxiomFilter<>(
-        AxiomType.SUB_ANNOTATION_PROPERTY_OF, OWLSubAnnotationPropertyOfAxiom::getSubProperty);
+        SUB_ANNOTATION_PROPERTY_OF, OWLSubAnnotationPropertyOfAxiom::getSubProperty);
     /**
      * filter returning subclass axioms where the super class matches the input key.
      */
     public static final OWLAxiomSearchFilter subClassWithSuper =
-        new AxiomFilter<>(AxiomType.SUBCLASS_OF, OWLSubClassOfAxiom::getSuperClass);
+        new AxiomFilter<>(SUBCLASS_OF, OWLSubClassOfAxiom::getSuperClass);
     /**
      * filter returning subclass axioms where the sub class matches the input key.
      */
     public static final OWLAxiomSearchFilter subClassWithSub =
-        new AxiomFilter<>(AxiomType.SUBCLASS_OF, OWLSubClassOfAxiom::getSubClass);
+        new AxiomFilter<>(SUBCLASS_OF, OWLSubClassOfAxiom::getSubClass);
     /**
      * filter returning sub object property axioms where the super property matches the input key.
      */
-    public static final OWLAxiomSearchFilter subObjectPropertyWithSuper = new AxiomFilter<>(
-        AxiomType.SUB_OBJECT_PROPERTY, OWLSubObjectPropertyOfAxiom::getSuperProperty);
+    public static final OWLAxiomSearchFilter subObjectPropertyWithSuper =
+        new AxiomFilter<>(SUB_OBJECT_PROPERTY, OWLSubObjectPropertyOfAxiom::getSuperProperty);
     /**
      * filter returning sub object property axioms where the sub property matches the input key.
      */
-    public static final OWLAxiomSearchFilter subObjectPropertyWithSub = new AxiomFilter<>(
-        AxiomType.SUB_OBJECT_PROPERTY, OWLSubObjectPropertyOfAxiom::getSubProperty);
+    public static final OWLAxiomSearchFilter subObjectPropertyWithSub =
+        new AxiomFilter<>(SUB_OBJECT_PROPERTY, OWLSubObjectPropertyOfAxiom::getSubProperty);
     /**
      * filter returning sub data property axioms where the super property matches the input key.
      */
     public static final OWLAxiomSearchFilter subDataPropertyWithSuper =
-        new AxiomFilter<>(AxiomType.SUB_DATA_PROPERTY, OWLSubDataPropertyOfAxiom::getSuperProperty);
+        new AxiomFilter<>(SUB_DATA_PROPERTY, OWLSubDataPropertyOfAxiom::getSuperProperty);
     /**
      * filter returning sub data property axioms where the sub property matches the input key.
      */
     public static final OWLAxiomSearchFilter subDataPropertyWithSub =
-        new AxiomFilter<>(AxiomType.SUB_DATA_PROPERTY, OWLSubDataPropertyOfAxiom::getSubProperty);
+        new AxiomFilter<>(SUB_DATA_PROPERTY, OWLSubDataPropertyOfAxiom::getSubProperty);
     /**
      * filter returning datatype definition axioms where the datatype matches the input key.
      */
     public static final OWLAxiomSearchFilter datatypeDefFilter =
-        new AxiomFilter<>(AxiomType.DATATYPE_DEFINITION, OWLDatatypeDefinitionAxiom::getDatatype);
+        new AxiomFilter<>(DATATYPE_DEFINITION, OWLDatatypeDefinitionAxiom::getDatatype);
     /**
      * filter returning annotation property range axioms where the property matches the input key.
      */
-    public static final OWLAxiomSearchFilter apRangeFilter = new AxiomFilter<>(
-        AxiomType.ANNOTATION_PROPERTY_RANGE, OWLAnnotationPropertyRangeAxiom::getProperty);
+    public static final OWLAxiomSearchFilter apRangeFilter =
+        new AxiomFilter<>(ANNOTATION_PROPERTY_RANGE, OWLAnnotationPropertyRangeAxiom::getProperty);
     /**
      * filter returning annotation property domain axioms where the property matches the input key.
      */
     public static final OWLAxiomSearchFilter apDomainFilter = new AxiomFilter<>(
-        AxiomType.ANNOTATION_PROPERTY_DOMAIN, OWLAnnotationPropertyDomainAxiom::getProperty);
+        ANNOTATION_PROPERTY_DOMAIN, OWLAnnotationPropertyDomainAxiom::getProperty);
     /**
      * filter returning annotation assertions where the subject matches the input key.
      *
@@ -101,13 +112,13 @@
      */
     @Deprecated
     public static final OWLAxiomSearchFilter annotations =
-        new AxiomFilter<>(AxiomType.ANNOTATION_ASSERTION, OWLAnnotationAssertionAxiom::getSubject);
+        new AxiomFilter<>(ANNOTATION_ASSERTION, OWLAnnotationAssertionAxiom::getSubject);
     /**
      * filter returning all axioms included in TBox or RBox. No assertions, nonlogical axioms or
      * SWRL rules.
      */
     public static final OWLAxiomSearchFilter axiomsFromTBoxAndRBox =
-        new AxiomFilter<OWLAxiom>(AxiomType.TBoxAndRBoxAxiomTypes, a -> a) {
+        new AxiomFilter<OWLAxiom>(TBoxAndRBoxAxiomTypes, a -> a) {
 
             @Override
             public boolean pass(OWLAxiom axiom, Object key) {
@@ -120,13 +131,13 @@ public boolean pass(OWLAxiom axiom, Object key) {
      * and SWRL rules.
      */
     public static final OWLAxiomSearchFilter axiomsNotInTBoxOrRBox =
-        new AxiomFilter<OWLAxiom>(AxiomType.AXIOM_TYPES, a -> a) {
+        new AxiomFilter<OWLAxiom>(AXIOM_TYPES, a -> a) {
 
             @Override
             public boolean pass(@Nonnull OWLAxiom axiom, Object key) {
                 // for this filter, only accept the axioms whose types are not in
                 // tbox or rbox
-                return !AxiomType.TBoxAndRBoxAxiomTypes.contains(axiom.getAxiomType());
+                return !TBoxAndRBoxAxiomTypes.contains(axiom.getAxiomType());
             }
         };
 
diff --git a/api/src/main/java/org/semanticweb/owlapi/search/Searcher.java b/api/src/main/java/org/semanticweb/owlapi/search/Searcher.java
index b13dab9814..08d5aa5626 100755
--- a/api/src/main/java/org/semanticweb/owlapi/search/Searcher.java
+++ b/api/src/main/java/org/semanticweb/owlapi/search/Searcher.java
@@ -246,6 +246,7 @@ protected static OWLObjectPropertyExpression getInverse(OWLObjectPropertyExpress
      * @param p optional annotation property to filter. Null means all.
      * @return annotations
      */
+    @SuppressWarnings("resource")
     public static Stream<OWLAnnotation> annotations(OWLAxiom axiom,
         @Nullable OWLAnnotationProperty p) {
         Stream<OWLAnnotation> stream = empty();
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/RemappingIndividualProvider.java b/api/src/main/java/org/semanticweb/owlapi/util/RemappingIndividualProvider.java
index cbc0782c28..eac9fd35da 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/RemappingIndividualProvider.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/RemappingIndividualProvider.java
@@ -12,7 +12,7 @@
 
 /**
  * A provider for anonymous individuals that remaps input ids consistently across all requests. This
- * class obeys the preferences set in {@link OWLOntologyManager#getOntologyWriterConfiguration()}.
+ * class obeys the preferences set in {@link OWLOntologyManager#getOntologyConfigurator()}.
  */
 public class RemappingIndividualProvider implements AnonymousIndividualByIdProvider {
 
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/package-info.java b/api/src/main/java/org/semanticweb/owlapi/util/package-info.java
new file mode 100755
index 0000000000..65891bb4c1
--- /dev/null
+++ b/api/src/main/java/org/semanticweb/owlapi/util/package-info.java
@@ -0,0 +1,17 @@
+/* This file is part of the OWL API.
+ * The contents of this file are subject to the LGPL License, Version 3.0.
+ * Copyright 2014, The University of Manchester
+ * 
+ * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
+ *
+ * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
+/**
+ * Utilities package.
+ */
+@javax.annotation.ParametersAreNonnullByDefault
+package org.semanticweb.owlapi.util;
diff --git a/api/src/main/java/org/semanticweb/owlapi/vocab/OWLRDFVocabulary.java b/api/src/main/java/org/semanticweb/owlapi/vocab/OWLRDFVocabulary.java
index 463ffe1104..c622ca83b7 100755
--- a/api/src/main/java/org/semanticweb/owlapi/vocab/OWLRDFVocabulary.java
+++ b/api/src/main/java/org/semanticweb/owlapi/vocab/OWLRDFVocabulary.java
@@ -18,6 +18,8 @@
 import java.util.Set;
 import java.util.stream.Stream;
 
+import javax.annotation.Nullable;
+
 import org.semanticweb.owlapi.model.HasIRI;
 import org.semanticweb.owlapi.model.HasPrefixedName;
 import org.semanticweb.owlapi.model.HasShortForm;
@@ -194,13 +196,14 @@
     private final Namespaces namespace;
     private final String shortName;
     private final String prefixedName;
+    @Nullable
     private final String damlName;
 
     OWLRDFVocabulary(Namespaces namespace, String shortName) {
         this(namespace, shortName, null);
     }
 
-    OWLRDFVocabulary(Namespaces namespace, String shortName, String damlName) {
+    OWLRDFVocabulary(Namespaces namespace, String shortName, @Nullable String damlName) {
         this.namespace = namespace;
         this.shortName = shortName;
         this.damlName = damlName;
diff --git a/api/src/test/java/org/semanticweb/owlapi/io/StreamDocumentSourceBaseTestCase.java b/api/src/test/java/org/semanticweb/owlapi/io/StreamDocumentSourceBaseTestCase.java
index 2b481b9cfe..24e32ae9aa 100755
--- a/api/src/test/java/org/semanticweb/owlapi/io/StreamDocumentSourceBaseTestCase.java
+++ b/api/src/test/java/org/semanticweb/owlapi/io/StreamDocumentSourceBaseTestCase.java
@@ -2,6 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -16,6 +17,8 @@
 import org.semanticweb.owlapi.model.IRI;
 import org.semanticweb.owlapi.model.OWLDocumentFormat;
 import org.semanticweb.owlapi.model.OWLDocumentFormatFactory;
+import org.semanticweb.owlapi.model.OWLOntology;
+import org.semanticweb.owlapi.model.OntologyConfigurator;
 
 @SuppressWarnings("javadoc")
 public class StreamDocumentSourceBaseTestCase {
@@ -52,7 +55,7 @@ public OWLDocumentFormatFactory getSupportedFormat() {
                 return new RDFXMLDocumentFormatFactory();
             }
         };
-        source.acceptParser(mockParser, null, null);
+        source.acceptParser(mockParser, mock(OWLOntology.class), mock(OntologyConfigurator.class));
         assertEquals(input, w.toString());
     }
 }
diff --git a/api/src/test/java/org/semanticweb/owlapi/io/XZStreamDocumentSourceTestCase.java b/api/src/test/java/org/semanticweb/owlapi/io/XZStreamDocumentSourceTestCase.java
index a8b2e11f24..f62cc24c39 100755
--- a/api/src/test/java/org/semanticweb/owlapi/io/XZStreamDocumentSourceTestCase.java
+++ b/api/src/test/java/org/semanticweb/owlapi/io/XZStreamDocumentSourceTestCase.java
@@ -2,6 +2,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
 
 import java.io.IOException;
 import java.io.Reader;
@@ -12,6 +13,8 @@
 import org.semanticweb.owlapi.formats.RDFXMLDocumentFormatFactory;
 import org.semanticweb.owlapi.model.OWLDocumentFormat;
 import org.semanticweb.owlapi.model.OWLDocumentFormatFactory;
+import org.semanticweb.owlapi.model.OWLOntology;
+import org.semanticweb.owlapi.model.OntologyConfigurator;
 
 /**
  * Created by ses on 3/12/15.
@@ -72,7 +75,7 @@ public OWLDocumentFormatFactory getSupportedFormat() {
                 return new RDFXMLDocumentFormatFactory();
             }
         };
-        source.acceptParser(mockParser, null, null);
+        source.acceptParser(mockParser, mock(OWLOntology.class), mock(OntologyConfigurator.class));
         assertEquals(input, w.toString());
     }
 }
diff --git a/oboformat/pom.xml b/oboformat/pom.xml
index 9e49e475d5..674519c8bc 100755
--- a/oboformat/pom.xml
+++ b/oboformat/pom.xml
@@ -32,5 +32,10 @@
 			<artifactId>owlapi-parsers</artifactId>
 			<version>${project.version}</version>
 		</dependency>
+		<dependency>
+			<groupId>${project.groupId}</groupId>
+			<artifactId>owlapi-tools</artifactId>
+			<version>${project.version}</version>
+		</dependency>
 	</dependencies>
 </project>
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/dlsyntax/parser/DLSyntaxParserTokenManager.java b/parsers/src/main/java/org/semanticweb/owlapi/dlsyntax/parser/DLSyntaxParserTokenManager.java
index de98e57168..5912691bc2 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/dlsyntax/parser/DLSyntaxParserTokenManager.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/dlsyntax/parser/DLSyntaxParserTokenManager.java
@@ -870,7 +870,9 @@ protected Token jjFillToken()
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
-   t = Token.newToken(jjmatchedKind, curTokenImage);
+   t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   t.image = curTokenImage;
 
    t.beginLine = beginLine;
    t.endLine = endLine;
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/functional/parser/OWLFunctionalSyntaxParserTokenManager.java b/parsers/src/main/java/org/semanticweb/owlapi/functional/parser/OWLFunctionalSyntaxParserTokenManager.java
index 180f6b331c..27fac9c9c4 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/functional/parser/OWLFunctionalSyntaxParserTokenManager.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/functional/parser/OWLFunctionalSyntaxParserTokenManager.java
@@ -2795,7 +2795,9 @@ protected Token jjFillToken()
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
-   t = Token.newToken(jjmatchedKind, curTokenImage);
+   t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   t.image = curTokenImage;
 
    t.beginLine = beginLine;
    t.endLine = endLine;
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/krss1/parser/KRSSParserTokenManager.java b/parsers/src/main/java/org/semanticweb/owlapi/krss1/parser/KRSSParserTokenManager.java
index 98944fb41f..9d8f3741c3 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/krss1/parser/KRSSParserTokenManager.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/krss1/parser/KRSSParserTokenManager.java
@@ -1286,7 +1286,9 @@ protected Token jjFillToken()
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
-   t = Token.newToken(jjmatchedKind, curTokenImage);
+   t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   t.image = curTokenImage;
 
    t.beginLine = beginLine;
    t.endLine = endLine;
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/krss2/parser/KRSS2ParserTokenManager.java b/parsers/src/main/java/org/semanticweb/owlapi/krss2/parser/KRSS2ParserTokenManager.java
index 72a9f2942f..4f54cdcf74 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/krss2/parser/KRSS2ParserTokenManager.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/krss2/parser/KRSS2ParserTokenManager.java
@@ -1820,7 +1820,9 @@ protected Token jjFillToken()
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
-   t = Token.newToken(jjmatchedKind, curTokenImage);
+   t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   t.image = curTokenImage;
 
    t.beginLine = beginLine;
    t.endLine = endLine;
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/rdf/turtle/parser/TurtleParserTokenManager.java b/parsers/src/main/java/org/semanticweb/owlapi/rdf/turtle/parser/TurtleParserTokenManager.java
index 67b08fc894..a5680c65e4 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/rdf/turtle/parser/TurtleParserTokenManager.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/rdf/turtle/parser/TurtleParserTokenManager.java
@@ -1581,7 +1581,9 @@ protected Token jjFillToken()
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
-   t = Token.newToken(jjmatchedKind, curTokenImage);
+   t = Token.newToken(jjmatchedKind);
+   t.kind = jjmatchedKind;
+   t.image = curTokenImage;
 
    t.beginLine = beginLine;
    t.endLine = endLine;
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/util/BidirectionalShortFormProviderAdapter.java b/parsers/src/main/java/org/semanticweb/owlapi/util/BidirectionalShortFormProviderAdapter.java
new file mode 100755
index 0000000000..6b9a840068
--- /dev/null
+++ b/parsers/src/main/java/org/semanticweb/owlapi/util/BidirectionalShortFormProviderAdapter.java
@@ -0,0 +1,139 @@
+/* This file is part of the OWL API.
+ * The contents of this file are subject to the LGPL License, Version 3.0.
+ * Copyright 2014, The University of Manchester
+ * 
+ * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
+ *
+ * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
+package org.semanticweb.owlapi.util;
+
+import static org.semanticweb.owlapi.util.OWLAPIPreconditions.checkNotNull;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.annotation.Nullable;
+
+import org.semanticweb.owlapi.model.AddAxiom;
+import org.semanticweb.owlapi.model.OWLEntity;
+import org.semanticweb.owlapi.model.OWLOntology;
+import org.semanticweb.owlapi.model.OWLOntologyChange;
+import org.semanticweb.owlapi.model.OWLOntologyChangeVisitor;
+import org.semanticweb.owlapi.model.OWLOntologyManager;
+import org.semanticweb.owlapi.model.RemoveAxiom;
+
+/**
+ * A bidirectional short form provider which uses a specified short form provider to generate the
+ * bidirectional entity--shortform mappings.
+ *
+ * @author Matthew Horridge, The University Of Manchester, Bio-Health Informatics Group
+ * @since 2.0.0
+ */
+public class BidirectionalShortFormProviderAdapter extends CachingBidirectionalShortFormProvider {
+
+    @Nullable
+    protected final Collection<OWLOntology> ontologies;
+    private final ShortFormProvider shortFormProvider;
+    @Nullable
+    private OWLOntologyManager man;
+
+    /**
+     * @param shortFormProvider the short form provider to use
+     */
+    public BidirectionalShortFormProviderAdapter(ShortFormProvider shortFormProvider) {
+        this.shortFormProvider =
+            checkNotNull(shortFormProvider, "shortFormProvider cannot be null");
+        ontologies = null;
+    }
+
+    /**
+     * Creates a BidirectionalShortFormProvider that maps between the entities that are referenced
+     * in the specified ontologies and the short forms of these entities.
+     *
+     * @param ontologies The ontologies that contain references to the entities to be mapped.
+     * @param shortFormProvider The short form provider that should be used to generate the short
+     * forms of the referenced entities.
+     */
+    public BidirectionalShortFormProviderAdapter(Collection<OWLOntology> ontologies,
+        ShortFormProvider shortFormProvider) {
+        this.shortFormProvider =
+            checkNotNull(shortFormProvider, "shortFormProvider cannot be null");
+        this.ontologies = checkNotNull(ontologies, "ontologies cannot be null");
+        rebuild(ontologies.stream().flatMap(OWLOntology::signature));
+    }
+
+    /**
+     * Creates a BidirectionalShortFormProvider that maps between the entities that are referenced
+     * in the specified ontologies and the shortforms of these entities. Note that the
+     * {@code dispose} method must be called when the provider has been finished with so that the
+     * provider may remove itself as a listener from the manager.
+     *
+     * @param ontologies The ontologies that contain references to the entities to be mapped.
+     * @param shortFormProvider The short form provider that should be used to generate the short
+     * forms of the referenced entities.
+     * @param man This short form provider will track changes to ontologies. The provider will
+     * listen for ontology changes and update the cache of entity--shortform mappings based on
+     * whether the specified ontologies contain references to entities or not.
+     */
+    public BidirectionalShortFormProviderAdapter(OWLOntologyManager man,
+        Collection<OWLOntology> ontologies, ShortFormProvider shortFormProvider) {
+        this(ontologies, shortFormProvider);
+        this.man = checkNotNull(man, "man cannot be null");
+        this.man.addOntologyChangeListener(this::handleChanges);
+    }
+
+    @Override
+    protected String generateShortForm(OWLEntity entity) {
+        return shortFormProvider.getShortForm(entity);
+    }
+
+    @Override
+    public void dispose() {
+        if (man != null) {
+            man.removeOntologyChangeListener(this::handleChanges);
+        }
+    }
+
+    void handleChanges(List<? extends OWLOntologyChange> changes) {
+        if (ontologies == null) {
+            return;
+        }
+        Set<OWLEntity> processed = new HashSet<>();
+        for (OWLOntologyChange chg : changes) {
+            assert ontologies != null;
+            if (ontologies.contains(chg.getOntology())) {
+                OWLOntologyChangeVisitor v = new OWLOntologyChangeVisitor() {
+
+                    @Override
+                    public void visit(AddAxiom change) {
+                        change.signature().filter(processed::add)
+                            .forEach(BidirectionalShortFormProviderAdapter.this::add);
+                    }
+
+                    @Override
+                    public void visit(RemoveAxiom change) {
+                        change.signature().filter(processed::add).filter(
+                            BidirectionalShortFormProviderAdapter.this::noLongerReferenced)
+                            .forEach(BidirectionalShortFormProviderAdapter.this::remove);
+                    }
+                };
+                chg.accept(v);
+            }
+        }
+    }
+
+    protected boolean noLongerReferenced(OWLEntity ent) {
+        if (ontologies == null) {
+            return true;
+        }
+        assert ontologies != null;
+        return ontologies.stream().noneMatch(ont -> ont.containsEntityInSignature(ent));
+    }
+}
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/util/CachingBidirectionalShortFormProvider.java b/parsers/src/main/java/org/semanticweb/owlapi/util/CachingBidirectionalShortFormProvider.java
new file mode 100755
index 0000000000..5c1ac55197
--- /dev/null
+++ b/parsers/src/main/java/org/semanticweb/owlapi/util/CachingBidirectionalShortFormProvider.java
@@ -0,0 +1,126 @@
+/* This file is part of the OWL API.
+ * The contents of this file are subject to the LGPL License, Version 3.0.
+ * Copyright 2014, The University of Manchester
+ * 
+ * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
+ *
+ * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
+package org.semanticweb.owlapi.util;
+
+import static org.semanticweb.owlapi.util.CollectionFactory.createSyncMap;
+import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.empty;
+
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Stream;
+
+import javax.annotation.Nullable;
+
+import org.semanticweb.owlapi.model.OWLEntity;
+
+/**
+ * A bidirectional short form provider that caches entity short forms. The provider has various
+ * methods to add, remove, update entities in the cache and also to rebuild the cache from scratch.
+ *
+ * @author Matthew Horridge, The University Of Manchester, Bio-Health Informatics Group
+ * @since 2.0.0
+ */
+public abstract class CachingBidirectionalShortFormProvider
+    implements BidirectionalShortFormProvider {
+
+    private final Map<String, Set<OWLEntity>> shortForm2EntityMap = createSyncMap();
+    private final Map<OWLEntity, String> entity2ShortFormMap = createSyncMap();
+
+    protected CachingBidirectionalShortFormProvider() {}
+
+    /**
+     * Generates the short form for the specified entity. This short form will be cached so that it
+     * can be retrieved efficiently and so that the entity can be obtained from the short form. If
+     * the short form for the entity changes then the cach must explicilty be updated using the
+     * {@code update} method.
+     *
+     * @param entity The entity whose short form should be generated.
+     * @return short form
+     */
+    protected abstract String generateShortForm(OWLEntity entity);
+
+    @Override
+    public Stream<String> shortForms() {
+        return shortForm2EntityMap.keySet().stream();
+    }
+
+    /**
+     * Rebuilds the cache using entities obtained from the specified entity set provider.
+     *
+     * @param entities The entities whose short forms will be cached.
+     */
+    protected void rebuild(Stream<OWLEntity> entities) {
+        shortForm2EntityMap.clear();
+        entity2ShortFormMap.clear();
+        entities.forEach(this::add);
+    }
+
+    /**
+     * Adds an entity to the cache.
+     *
+     * @param entity The entity to be added to the cache - the short form will automatically be
+     *        generated and added to the cache.
+     */
+    public void add(OWLEntity entity) {
+        String shortForm = generateShortForm(entity);
+        entity2ShortFormMap.put(entity, shortForm);
+        shortForm2EntityMap.computeIfAbsent(shortForm, s -> new HashSet<>(1)).add(entity);
+    }
+
+    /**
+     * Removes an entity and its short form from the cache.
+     *
+     * @param entity The entity to be removed.
+     */
+    protected void remove(OWLEntity entity) {
+        String shortForm = entity2ShortFormMap.remove(entity);
+        if (shortForm != null) {
+            shortForm2EntityMap.remove(shortForm);
+        }
+    }
+
+    @Override
+    public Stream<OWLEntity> entities(String shortForm) {
+        Set<OWLEntity> entities = shortForm2EntityMap.get(shortForm);
+        if (entities != null && !entities.isEmpty()) {
+            return entities.stream();
+        }
+        return empty();
+    }
+
+    @Override
+    @Nullable
+    public OWLEntity getEntity(String shortForm) {
+        Set<OWLEntity> entities = shortForm2EntityMap.get(shortForm);
+        if (entities != null && !entities.isEmpty()) {
+            return entities.iterator().next();
+        }
+        return null;
+    }
+
+    @Override
+    public String getShortForm(OWLEntity entity) {
+        String sf = entity2ShortFormMap.get(entity);
+        if (sf != null) {
+            return sf;
+        }
+        return generateShortForm(entity);
+    }
+
+    @Override
+    public void dispose() {
+        shortForm2EntityMap.clear();
+        entity2ShortFormMap.clear();
+    }
+}
diff --git a/tools/src/main/java/org/semanticweb/owlapi/util/OntologyAxiomPair.java b/tools/src/main/java/org/semanticweb/owlapi/util/OntologyAxiomPair.java
new file mode 100755
index 0000000000..c981ff7adf
--- /dev/null
+++ b/tools/src/main/java/org/semanticweb/owlapi/util/OntologyAxiomPair.java
@@ -0,0 +1,89 @@
+/* This file is part of the OWL API.
+ * The contents of this file are subject to the LGPL License, Version 3.0.
+ * Copyright 2014, The University of Manchester
+ * 
+ * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
+ *
+ * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
+package org.semanticweb.owlapi.util;
+
+import static org.semanticweb.owlapi.util.OWLAPIPreconditions.verifyNotNull;
+
+import javax.annotation.Nullable;
+
+import org.semanticweb.owlapi.model.OWLAxiom;
+import org.semanticweb.owlapi.model.OWLOntology;
+
+/**
+ * @author Matthew Horridge, The University of Manchester, Information Management Group
+ * @since 3.0.0
+ */
+public class OntologyAxiomPair {
+
+    @Nullable
+    private final OWLOntology ontology;
+    private final OWLAxiom axiom;
+
+    /**
+     * @param ontology ontology
+     * @param axiom axiom
+     */
+    public OntologyAxiomPair(@Nullable OWLOntology ontology, OWLAxiom axiom) {
+        this.ontology = ontology;
+        this.axiom = axiom;
+    }
+
+    /**
+     * @return the ontology
+     */
+    @Nullable
+    public OWLOntology getOntology() {
+        return ontology;
+    }
+
+    /**
+     * @return the axiom
+     */
+    public OWLAxiom getAxiom() {
+        return axiom;
+    }
+
+    @Override
+    public boolean equals(@Nullable Object obj) {
+        if (obj == null) {
+            return false;
+        }
+        if (obj == this) {
+            return true;
+        }
+        if (!(obj instanceof OntologyAxiomPair)) {
+            return false;
+        }
+        OntologyAxiomPair other = (OntologyAxiomPair) obj;
+        if (ontology != null && other.ontology != null) {
+            return verifyNotNull(ontology).equals(other.ontology) && axiom.equals(other.axiom);
+        }
+        if (ontology != other.ontology) {
+            return false;
+        }
+        return axiom.equals(other.axiom);
+    }
+
+    @Override
+    public int hashCode() {
+        if (ontology != null) {
+            return verifyNotNull(ontology).hashCode() + axiom.hashCode();
+        }
+        return 37 + axiom.hashCode();
+    }
+
+    @Override
+    public String toString() {
+        return axiom + " in " + (ontology != null ? verifyNotNull(ontology).toString() : "");
+    }
+}
