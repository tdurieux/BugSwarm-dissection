diff --git a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java
index 0f802f2c00..6a5187dc90 100755
--- a/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java
+++ b/okhttp-dnsoverhttps/src/main/java/okhttp3/dnsoverhttps/DnsOverHttps.java
@@ -304,12 +304,14 @@ static boolean isPrivateHost(String host) {
     @Nullable HttpUrl url = null;
     boolean includeIPv6 = true;
     boolean post = false;
-    MediaType contentType = DNS_MESSAGE;
     Dns systemDns = Dns.SYSTEM;
     @Nullable List<InetAddress> bootstrapDnsHosts = null;
     boolean resolvePrivateAddresses = false;
     boolean resolvePublicAddresses = true;
 
+    public Builder() {
+    }
+
     public DnsOverHttps build() {
       return new DnsOverHttps(this);
     }
@@ -334,11 +336,6 @@ public Builder post(boolean post) {
       return this;
     }
 
-    public Builder contentType(MediaType contentType) {
-      this.contentType = contentType;
-      return this;
-    }
-
     public Builder resolvePrivateAddresses(boolean resolvePrivateAddresses) {
       this.resolvePrivateAddresses = resolvePrivateAddresses;
       return this;
diff --git a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
index 31c8da16ca..fad755f982 100755
--- a/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
+++ b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DnsOverHttpsTest.java
@@ -35,6 +35,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 
+import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -44,9 +45,8 @@
   @Rule public final MockWebServer server = new MockWebServer();
 
   private final OkHttpClient bootstrapClient =
-      new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.HTTP_2, Protocol.HTTP_1_1))
-          .build();
-  private final Dns dns = buildLocalhost(bootstrapClient);
+      new OkHttpClient.Builder().protocols(asList(Protocol.HTTP_2, Protocol.HTTP_1_1)).build();
+  private Dns dns = buildLocalhost(bootstrapClient, false);
 
   @Before public void setUp() {
     server.setProtocols(bootstrapClient.protocols());
@@ -64,24 +64,36 @@
 
     RecordedRequest recordedRequest = server.takeRequest();
     assertEquals("GET", recordedRequest.getMethod());
-    assertEquals("/lookup?ct&dns=AAABAAACAAAAAAAABmdvb2dsZQNjb20AAAEAAQZnb29nbGUDY29t"
-        + "AAAcAAE", recordedRequest.getPath());
+    assertEquals("/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",
+        recordedRequest.getPath());
   }
 
   @Test public void getIpv6() throws Exception {
+    server.enqueue(dnsResponse(
+        "0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001"
+            + "00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010"
+            + "0010000003b00049df00112"));
     server.enqueue(dnsResponse(
         "0000818000010003000000000567726170680866616365626f6f6b03636f6d00001c0001c00c00050001"
             + "00000a1b000603617069c012c0300005000100000b1f000c04737461720463313072c012c042001c0"
             + "0010000003b00102a032880f0290011faceb00c00000002"));
 
+    dns = buildLocalhost(bootstrapClient, true);
+
     List<InetAddress> result = dns.lookup("google.com");
 
-    assertEquals(singletonList(address("2a03:2880:f029:11:face:b00c:0:2")), result);
+    assertEquals(asList(address("157.240.1.18"), address("2a03:2880:f029:11:face:b00c:0:2")),
+        result);
 
-    RecordedRequest recordedRequest = server.takeRequest();
-    assertEquals("GET", recordedRequest.getMethod());
-    assertEquals("/lookup?ct&dns=AAABAAACAAAAAAAABmdvb2dsZQNjb20AAAEAAQZnb29nbGUDY29t"
-        + "AAAcAAE", recordedRequest.getPath());
+    RecordedRequest recordedRequestIpv4 = server.takeRequest();
+    assertEquals("GET", recordedRequestIpv4.getMethod());
+    assertEquals("/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",
+        recordedRequestIpv4.getPath());
+
+    RecordedRequest recordedRequestIpv6 = server.takeRequest();
+    assertEquals("GET", recordedRequestIpv6.getMethod());
+    assertEquals("/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AABwAAQ",
+        recordedRequestIpv6.getPath());
   }
 
   @Test public void failure() throws Exception {
@@ -100,8 +112,8 @@
 
     RecordedRequest recordedRequest = server.takeRequest();
     assertEquals("GET", recordedRequest.getMethod());
-    assertEquals("/lookup?ct&dns=AAABAAACAAAAAAAABmdvb2dsZQNjb20AAAEAAQZnb29nbGUDY29t"
-        + "AAAcAAE", recordedRequest.getPath());
+    assertEquals("/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",
+        recordedRequest.getPath());
   }
 
   @Test public void failOnExcessiveResponse() {
@@ -145,13 +157,12 @@
   @Test public void usesCache() throws Exception {
     Cache cache = new Cache(new File("./target/DnsOverHttpsTest.cache"), 100 * 1024);
     OkHttpClient cachedClient = bootstrapClient.newBuilder().cache(cache).build();
-    DnsOverHttps cachedDns = buildLocalhost(cachedClient);
+    DnsOverHttps cachedDns = buildLocalhost(cachedClient, false);
 
     server.enqueue(dnsResponse(
         "0000818000010003000000000567726170680866616365626f6f6b03636f6d0000010001c00c00050001"
             + "00000a6d000603617069c012c0300005000100000cde000c04737461720463313072c012c04200010"
-            + "0010000003b00049df00112")
-        .setHeader("cache-control", "private, max-age=298"));
+            + "0010000003b00049df00112").setHeader("cache-control", "private, max-age=298"));
 
     List<InetAddress> result = cachedDns.lookup("google.com");
 
@@ -159,23 +170,26 @@
 
     RecordedRequest recordedRequest = server.takeRequest();
     assertEquals("GET", recordedRequest.getMethod());
-    assertEquals("/lookup?ct&dns=AAABAAACAAAAAAAABmdvb2dsZQNjb20AAAEAAQZnb29nbGUDY29t"
-        + "AAAcAAE", recordedRequest.getPath());
+    assertEquals("/lookup?ct&dns=AAABAAABAAAAAAAABmdvb2dsZQNjb20AAAEAAQ",
+        recordedRequest.getPath());
 
     result = cachedDns.lookup("google.com");
     assertEquals(singletonList(address("157.240.1.18")), result);
   }
 
   private MockResponse dnsResponse(String s) {
-    return new MockResponse()
-        .setBody(new Buffer().write(ByteString.decodeHex(s)))
+    return new MockResponse().setBody(new Buffer().write(ByteString.decodeHex(s)))
         .addHeader("content-type", "application/dns-message")
         .addHeader("content-length", s.length() / 2);
   }
 
-  private DnsOverHttps buildLocalhost(OkHttpClient bootstrapClient) {
+  private DnsOverHttps buildLocalhost(OkHttpClient bootstrapClient, boolean includeIPv6) {
     HttpUrl url = server.url("/lookup?ct");
-    return new DnsOverHttps.Builder().client(bootstrapClient).resolvePrivateAddresses(true).url(url).build();
+    return new DnsOverHttps.Builder().client(bootstrapClient)
+        .includeIPv6(includeIPv6)
+        .resolvePrivateAddresses(true)
+        .url(url)
+        .build();
   }
 
   private static InetAddress address(String host) {
