diff --git a/pom.xml b/pom.xml
index 8bc87fdbc2..88eb789176 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1092,9 +1092,6 @@
                   <regex><pattern>.*.checks.coding.DeclarationOrderCheck</pattern><branchRate>82</branchRate><lineRate>93</lineRate></regex>
 
                   <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>90</branchRate><lineRate>87</lineRate></regex>
-
-                  <regex><pattern>.*.checks.regexp.CommentSuppressor</pattern><branchRate>75</branchRate><lineRate>100</lineRate></regex>
-
                 </regexes>
               </check>
               <instrumentation>
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
index ab4239dac8..acc344451c 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
@@ -13,9 +13,9 @@
 import com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck;
 
 public class OuterTypeFilenameTest extends BaseCheckTestSupport{
-    
+
     static ConfigurationBuilder builder;
-    
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException, IOException {
         builder = new ConfigurationBuilder(new File("src/it/"));
@@ -24,39 +24,37 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
     @Test
     public void outerTypeFilenameTest_1() throws IOException, Exception {
 
-        String msg = getCheckMessage(OuterTypeFilenameCheck.class, "type.file.mismatch");
-
         final String[] expected = {};
-        
+
         Configuration checkConfig = builder.getCheckConfig("OuterTypeFilename");
         String filePath = builder.getFilePath("OuterTypeFilenameInput_1");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
-    } 
-    
+    }
+
     @Test
     public void outerTypeFilenameTest_2() throws IOException, Exception {
-         
+
         final String[] expected = {};
-        
+
         Configuration checkConfig = builder.getCheckConfig("OuterTypeFilename");
         String filePath = builder.getFilePath("OuterTypeFilenameInput_2");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
-    
+
     @Test
     public void outerTypeFilenameTest_3() throws IOException, Exception {
-         
+
         final String[] expected = {
-            "3: " + getCheckMessage(OuterTypeFilenameCheck.class, "type.file.mismatch"), 
+            "3: " + getCheckMessage(OuterTypeFilenameCheck.class, "type.file.mismatch"),
         };
-        
+
         Configuration checkConfig = builder.getCheckConfig("OuterTypeFilename");
         String filePath = builder.getFilePath("OuterTypeFilenameInput_3");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
index bb56a48ecc..158f23a3ca 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
@@ -14,9 +14,9 @@
 import com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck;
 
 public class NoLineWrapTest extends BaseCheckTestSupport{
-    
+
     static ConfigurationBuilder builder;
-    
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException, IOException {
         builder = new ConfigurationBuilder(new File("src/it/"));
@@ -24,29 +24,27 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
 
     @Test
     public void badLineWrapTest() throws IOException, Exception {
-        
-        String msg = getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import");
 
         final String[] expected = {
             "1: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "package"),
-            "6: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import"),            
+            "6: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import"),
         };
 
         Configuration checkConfig = builder.getCheckConfig("NoLineWrap");
         String filePath = builder.getFilePath("NoLineWrap_Bad");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
-    
+
     @Test
     public void goodLineWrapTest() throws IOException, Exception {
-        
+
         final String[] expected = {};
-        
+
         Configuration checkConfig = builder.getCheckConfig("NoLineWrap");
         String filePath = builder.getFilePath("NoLineWrap_Good");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
@@ -68,7 +66,7 @@ public void goodLineLength() throws IOException, Exception {
 
         Configuration checkConfig = builder.getCheckConfig("LineLength");
         String filePath = builder.getFilePath("LineLengthInput2");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
index 10d3ef4f73..c5b1f30cd3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
@@ -13,9 +13,9 @@
 import com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck;
 
 public class VariableDeclarationUsageDistanceTest extends BaseCheckTestSupport{
-    
+
     static ConfigurationBuilder builder;
-    
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException, IOException {
         builder = new ConfigurationBuilder(new File("src/it/"));
@@ -23,8 +23,7 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
 
     @Test
     public void arrayTypeStyleTest() throws IOException, Exception {
-        
-        String msg = "variable.declaration.usage.distance";
+
         String msgExt = "variable.declaration.usage.distance.extend";
         Class<VariableDeclarationUsageDistanceCheck> clazz = VariableDeclarationUsageDistanceCheck.class;
 
@@ -34,10 +33,10 @@ public void arrayTypeStyleTest() throws IOException, Exception {
                 "479: " + getCheckMessage(clazz, msgExt, "myOption", 7, 3),
                 "491: " + getCheckMessage(clazz, msgExt, "myOption", 6, 3),
         };
-        
+
         Configuration checkConfig = builder.getCheckConfig("VariableDeclarationUsageDistance");
         String filePath = builder.getFilePath("InputVariableDeclarationUsageDistanceCheck");
-        
+
         Integer[] warnList = builder.getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 3a8fc05634..6a44d8dba4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -28,6 +28,7 @@
 import java.util.Set;
 import java.util.SortedSet;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -93,7 +94,7 @@
     private final FilterSet filters = new FilterSet();
 
     /** the file extensions that are accepted */
-    private String[] fileExtensions = {};
+    private String[] fileExtensions = ArrayUtils.EMPTY_STRING_ARRAY;
 
     /**
      * The severity level of any violations found by submodules.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index 88a8b51c4b..3f629948c0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -505,8 +505,7 @@ else if (qName.equals(MESSAGE)) {
         @Override
         public void endElement(String namespaceURI,
                                String localName,
-                               String qName)
-            throws SAXException {
+                               String qName) {
             if (qName.equals(MODULE)) {
 
                 final Configuration recentModule =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
index afc60056f9..85f6835f9d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java
@@ -89,8 +89,7 @@ private PackageNamesLoader()
     public void startElement(String namespaceURI,
                              String localName,
                              String qName,
-                             Attributes atts)
-        throws SAXException {
+                             Attributes atts) {
         if ("package".equals(qName)) {
             //push package name, name is mandatory attribute with not empty value by DTD
             final String name = atts.getValue("name");
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
index 47061b95dc..89133fbdbc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java
@@ -43,20 +43,17 @@ private ScopeUtils() {
      */
     public static Scope getScopeFromMods(DetailAST aMods) {
         Scope retVal = Scope.PACKAGE; // default scope
-        for (AST token = aMods.getFirstChild();
-            token != null;
-            token = token.getNextSibling()) {
+        for (AST token = aMods.getFirstChild(); token != null
+                && retVal == Scope.PACKAGE;
+                token = token.getNextSibling()) {
             if ("public".equals(token.getText())) {
                 retVal = Scope.PUBLIC;
-                break;
             }
             else if ("protected".equals(token.getText())) {
                 retVal = Scope.PROTECTED;
-                break;
             }
             else if ("private".equals(token.getText())) {
                 retVal = Scope.PRIVATE;
-                break;
             }
         }
         return retVal;
@@ -105,21 +102,20 @@ public static boolean inInterfaceBlock(DetailAST aAST) {
 
         // Loop up looking for a containing interface block
         for (DetailAST token = aAST.getParent();
-             token != null;
+             token != null && !retVal;
              token = token.getParent()) {
+
             final int type = token.getType();
-            if (type == TokenTypes.CLASS_DEF
+
+            if (type == TokenTypes.INTERFACE_DEF) {
+                retVal = true;
+            }
+            else if (type == TokenTypes.CLASS_DEF
                 || type == TokenTypes.ENUM_DEF
-                || type == TokenTypes.ANNOTATION_DEF) {
+                || type == TokenTypes.ANNOTATION_DEF
+                || type == TokenTypes.LITERAL_NEW) {
                 break; // in a class, enum or annotation
             }
-            else if (type == TokenTypes.LITERAL_NEW) {
-                break; // inner implementation
-            }
-            else if (type == TokenTypes.INTERFACE_DEF) {
-                retVal = true;
-                break;
-            }
         }
 
         return retVal;
@@ -137,21 +133,19 @@ public static boolean inAnnotationBlock(DetailAST aAST) {
 
         // Loop up looking for a containing interface block
         for (DetailAST token = aAST.getParent();
-             token != null;
+             token != null && !retVal;
              token = token.getParent()) {
             final int type = token.getType();
-            if (type == TokenTypes.CLASS_DEF
+            if (type == TokenTypes.ANNOTATION_DEF) {
+                retVal = true;
+            }
+            else if (type == TokenTypes.CLASS_DEF
                 || type == TokenTypes.ENUM_DEF
-                || type == TokenTypes.INTERFACE_DEF) {
+                || type == TokenTypes.INTERFACE_DEF
+                || type == TokenTypes.LITERAL_NEW) {
                 break; // in a class, enum or interface
             }
-            else if (type == TokenTypes.LITERAL_NEW) {
-                break; // inner implementation
-            }
-            else if (type == TokenTypes.ANNOTATION_DEF) {
-                retVal = true;
-                break;
-            }
+
         }
 
         return retVal;
@@ -181,21 +175,18 @@ public static boolean inEnumBlock(DetailAST aAST) {
 
         // Loop up looking for a containing interface block
         for (DetailAST token = aAST.getParent();
-             token != null;
+             token != null && !retVal;
              token = token.getParent()) {
             final int type = token.getType();
-            if (type == TokenTypes.INTERFACE_DEF
+            if (type == TokenTypes.ENUM_DEF) {
+                retVal = true;
+            }
+            else if (type == TokenTypes.INTERFACE_DEF
                 || type == TokenTypes.ANNOTATION_DEF
-                || type == TokenTypes.CLASS_DEF) {
+                || type == TokenTypes.CLASS_DEF
+                || type == TokenTypes.LITERAL_NEW) {
                 break; // in an interface, annotation or class
             }
-            else if (type == TokenTypes.LITERAL_NEW) {
-                break; // inner implementation, enums can't be inner classes
-            }
-            else if (type == TokenTypes.ENUM_DEF) {
-                retVal = true;
-                break;
-            }
         }
 
         return retVal;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index fd76e1662f..7ea82de117 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -56,7 +56,7 @@
         final ImmutableMap.Builder<String, Integer> builder =
                 ImmutableMap.builder();
         final Field[] fields = TokenTypes.class.getDeclaredFields();
-        String[] tempTokenValueToName = new String[0];
+        String[] tempTokenValueToName = ArrayUtils.EMPTY_STRING_ARRAY;
         for (final Field field : fields) {
             // Only process the int declarations.
             if (field.getType() != Integer.TYPE) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
index a5e3b23f6a..3ef8f6f138 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java
@@ -22,6 +22,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.Utils;
 
@@ -87,7 +89,7 @@ public boolean isCommentNodesRequired() {
      * @see TokenTypes
      */
     public int[] getRequiredTokens() {
-        return new int[] {};
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
index 74736d0d6e..4d832f8609 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java
@@ -100,7 +100,7 @@ public final String getFormat() {
     private void updateRegexp(String regexpFormat, int compileFlagsParam) {
         try {
             regexp = Pattern.compile(regexpFormat, compileFlagsParam);
-            this.format = regexpFormat;
+            format = regexpFormat;
             compileFlags |= compileFlagsParam;
         }
         catch (final PatternSyntaxException e) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 7112ca330d..83c073fcbf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -453,7 +453,7 @@ private boolean isLoadable() {
          * @param clazz {@code Class} to associate with.
          */
         private void setClazz(Class<?> clazz) {
-            this.classObj = clazz;
+            classObj = clazz;
             loadable = clazz != null;
         }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index f07d675ad2..b970760928 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -22,8 +22,9 @@
 import java.util.Arrays;
 import java.util.Set;
 
-import antlr.collections.AST;
+import org.apache.commons.lang3.ArrayUtils;
 
+import antlr.collections.AST;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -202,7 +203,7 @@
     /** Whether to sum the number of tokens found. */
     private boolean sumTokenCounts;
     /** limited tokens */
-    private int[] limitedTokens = new int[0];
+    private int[] limitedTokens = ArrayUtils.EMPTY_INT_ARRAY;
     /** error message when minimum count not reached */
     private String minimumMessage;
     /** error message when maximum count exceeded */
@@ -212,11 +213,11 @@
      * Counts of descendant tokens.
      * Indexed by (token ID - 1) for performance.
      */
-    private int[] counts = new int[0];
+    private int[] counts = ArrayUtils.EMPTY_INT_ARRAY;
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
index 7d00b248ed..eaaa2d5e53 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/FileContentsHolder.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
@@ -42,7 +44,7 @@ public static FileContents getContents() {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
index dad0be724e..d95e79da8d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java
@@ -24,6 +24,8 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -128,7 +130,7 @@ public void setLegalComment(final String format) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[0];
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
index 41f0a3c68a..78592ca437 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
@@ -182,7 +182,7 @@
      * @throws ConversionException if cannot convert string.
      */
     public void setElementStyle(final String style) {
-        this.elementStyle = getOption(ElementStyle.class, style);
+        elementStyle = getOption(ElementStyle.class, style);
     }
 
     /**
@@ -192,7 +192,7 @@ public void setElementStyle(final String style) {
      * @throws ConversionException if cannot convert string.
      */
     public void setTrailingArrayComma(final String comma) {
-        this.trailingArrayComma = getOption(TrailingArrayComma.class, comma);
+        trailingArrayComma = getOption(TrailingArrayComma.class, comma);
     }
 
     /**
@@ -202,7 +202,7 @@ public void setTrailingArrayComma(final String comma) {
      * @throws ConversionException if cannot convert string.
      */
     public void setClosingParens(final String parens) {
-        this.closingParens = getOption(ClosingParens.class, parens);
+        closingParens = getOption(ClosingParens.class, parens);
     }
 
     /**
@@ -386,12 +386,12 @@ private void logCommaViolation(final DetailAST ast) {
         //comma can be null if array is empty
         final DetailAST comma = rCurly.getPreviousSibling();
 
-        if (this.trailingArrayComma == TrailingArrayComma.ALWAYS
+        if (trailingArrayComma == TrailingArrayComma.ALWAYS
             && (comma == null || comma.getType() != TokenTypes.COMMA)) {
             log(rCurly.getLineNo(),
                 rCurly.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING);
         }
-        else if (this.trailingArrayComma == TrailingArrayComma.NEVER
+        else if (trailingArrayComma == TrailingArrayComma.NEVER
             && comma != null && comma.getType() == TokenTypes.COMMA) {
             log(comma.getLineNo(),
                 comma.getColumnNo(), MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index 63a3a52f26..044c57dc0a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -671,10 +671,7 @@ private static int compareImports(String import1, String import2) {
         int result = 0;
         final String[] import1Tokens = import1.split("\\.");
         final String[] import2Tokens = import2.split("\\.");
-        for (int i = 0; i < import1Tokens.length; i++) {
-            if (i == import2Tokens.length) {
-                break;
-            }
+        for (int i = 0; i < import1Tokens.length && i != import2Tokens.length; i++) {
             final String import1Token = import1Tokens[i];
             final String import2Token = import2Tokens[i];
             result = import1Token.compareTo(import2Token);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index f2b01c1e08..347bf68b7b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -68,7 +68,7 @@ protected DetailAST getLCurly() {
     @Override
     protected IndentLevel curlyLevel() {
         final IndentLevel level = new IndentLevel(getLevel(), getBraceAdjustment());
-        level.addAcceptedIndent(level.getLastIndentLevel() + getLineWrappingIndent());
+        level.addAcceptedIndent(level.getLastIndentLevel() + getLineWrappingIndentation());
         return level;
     }
 
@@ -104,7 +104,7 @@ protected IndentLevel getChildrenExpectedLevel() {
             getNextFirstNonblankOnLineAfter(firstLine, lcurlyPos);
         if (firstChildPos >= 0) {
             expectedIndent.addAcceptedIndent(firstChildPos);
-            expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndent());
+            expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndentation());
         }
         return expectedIndent;
     }
@@ -134,7 +134,7 @@ private int getNextFirstNonblankOnLineAfter(int lineNo, int columnNo) {
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
-    private int getLineWrappingIndent() {
+    private int getLineWrappingIndentation() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
index 948bd2c600..88c6a5ae01 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.Utils;
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -97,7 +99,7 @@
 
     @Override
     public int[] getRequiredTokens() {
-        return new int[] {};
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
index 0dafad951c..3f8da688e9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ObjectBlockHandler.java
@@ -93,7 +93,7 @@ protected void checkRCurly() {
         final DetailAST rcurly = getRCurly();
         final int rcurlyPos = expandedTabsColumnNo(rcurly);
         final IndentLevel level = curlyLevel();
-        level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent());
+        level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndentation());
 
         if (!level.accept(rcurlyPos) && startsLine(rcurly)) {
             logError(rcurly, "rcurly", rcurlyPos, curlyLevel());
@@ -105,7 +105,7 @@ protected void checkRCurly() {
      * @return value of lineWrappingIndentation property
      *         of {@code IndentationCheck}
      */
-    private int getLineWrappingIndent() {
+    private int getLineWrappingIndentation() {
         return getIndentCheck().getLineWrappingIndentation();
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 0adef80331..f0268cac6c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -22,6 +22,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.commons.lang3.ArrayUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -58,7 +60,7 @@
 
     @Override
     public int[] getRequiredTokens() {
-        return new int[] {};
+        return ArrayUtils.EMPTY_INT_ARRAY;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
index d2bdeecf69..6dc76b09b7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java
@@ -30,19 +30,21 @@
     /** File contents to check for comments. */
     private FileContents currentContents;
 
+    /**
+     * Constructor for this suppressor.
+     *
+     * @param currentContents
+     *            content of checked file.
+     **/
+    public CommentSuppressor(FileContents currentContents) {
+        this.currentContents = currentContents;
+    }
+
     @Override
     public boolean shouldSuppress(int startLineNo, int startColNo,
             int endLineNo, int endColNo) {
-        return currentContents != null
-                && currentContents.hasIntersectionWithComment(startLineNo,
-                        startColNo, endLineNo, endColNo);
+        return currentContents
+                .hasIntersectionWithComment(startLineNo, startColNo, endLineNo, endColNo);
     }
 
-    /**
-     * Set the current file contents.
-     * @param currentContents the new contents.
-     */
-    public void setCurrentContents(FileContents currentContents) {
-        this.currentContents = currentContents;
-    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
index b1dc6c797d..3d69a84080 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
@@ -34,8 +34,8 @@
     private final DetectorOptions options = new DetectorOptions(0, this);
     /** The detector to use. */
     private SinglelineDetector detector;
-    /** The suppressor to use. */
-    private final CommentSuppressor suppressor = new CommentSuppressor();
+    /** Suppress comments. **/
+    private boolean ignoreComments;
 
     @Override
     public int[] getDefaultTokens() {
@@ -50,7 +50,14 @@ public void init() {
 
     @Override
     public void beginTree(DetailAST rootAST) {
-        suppressor.setCurrentContents(getFileContents());
+
+        if (ignoreComments) {
+            options.setSuppressor(new CommentSuppressor(getFileContents()));
+        }
+        else {
+            options.setSuppressor(NeverSuppress.INSTANCE);
+        }
+
         detector.processLines(Arrays.asList(getLines()));
     }
 
@@ -99,11 +106,6 @@ public void setIgnoreCase(boolean ignore) {
      * @param ignore whether to ignore comments when matching.
      */
     public void setIgnoreComments(boolean ignore) {
-        if (ignore) {
-            options.setSuppressor(suppressor);
-        }
-        else {
-            options.setSuppressor(NeverSuppress.INSTANCE);
-        }
+        this.ignoreComments = ignore;
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 1e8a350b54..414596a391 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -42,13 +42,13 @@
 import javax.swing.SwingUtilities;
 import javax.swing.filechooser.FileFilter;
 
+import antlr.ANTLRException;
+
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FileContents;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 
-import antlr.ANTLRException;
-
 /**
  * Displays information about a parse tree.
  * The user can change the file that is parsed and displayed
@@ -296,6 +296,10 @@ public void actionPerformed(ActionEvent e) {
     private class FileDropListener implements FileDrop.Listener {
         private final JScrollPane mSp;
 
+        public FileDropListener(JScrollPane aSp) {
+            mSp = aSp;
+        }
+
         @Override
         public void filesDropped(File... files) {
             if (files != null && files.length > 0) {
@@ -303,9 +307,5 @@ public void filesDropped(File... files) {
                 openFile(file, mSp);
             }
         }
-
-        public FileDropListener(JScrollPane aSp) {
-            mSp = aSp;
-        }
     }
 }
diff --git a/src/site/resources/css/site.css b/src/site/resources/css/site.css
index 47f9656a71..c4a8476ad4 100755
--- a/src/site/resources/css/site.css
+++ b/src/site/resources/css/site.css
@@ -27,7 +27,7 @@ h4 {
 #bannerLeft img {
   float:left;
   position: relative;
-  top: 0px;
+  top: 0;
   left: 40px;
 
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
index ced1d681a9..be5ac33ae2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -127,8 +127,7 @@ public void testPackagesWithSaxException() throws Exception {
         when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumer);
 
         try {
-            final Set<String> packageNames = PackageNamesLoader
-                    .getPackageNames(classLoader);
+            PackageNamesLoader.getPackageNames(classLoader);
             fail();
         }
         catch (CheckstyleException ex) {
@@ -152,8 +151,7 @@ public void testPackagesWithIoException() throws Exception {
         when(classLoader.getResources("checkstyle_packages.xml")).thenReturn(enumer);
 
         try {
-            final Set<String> packageNames = PackageNamesLoader
-                    .getPackageNames(classLoader);
+            PackageNamesLoader.getPackageNames(classLoader);
             fail();
         }
         catch (CheckstyleException ex) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertiesExpanderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertiesExpanderTest.java
index 8af77f551d..3605ea67ba 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertiesExpanderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertiesExpanderTest.java
@@ -27,7 +27,7 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void testCtorException()  throws CheckstyleException {
-        PropertiesExpander object = new PropertiesExpander(null);
+        new PropertiesExpander(null);
     }
 
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
index c511be2650..b46b2013a1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -25,7 +25,6 @@
 import static org.junit.Assert.fail;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
-import static org.powermock.api.support.membermodification.MemberMatcher.method;
 
 import java.io.File;
 import java.io.IOException;
@@ -58,20 +57,20 @@ public void testNonAccessibleFile() throws IOException {
         file.setReadable(true, false);
         file.setWritable(false, false);
 
-        PropertyCacheFile cache = new PropertyCacheFile(config, file.getAbsolutePath());
+        new PropertyCacheFile(config, file.getAbsolutePath());
     }
 
     @Test
     public void testCtor() throws IOException {
         try {
-            PropertyCacheFile cache = new PropertyCacheFile(null, "");
+            new PropertyCacheFile(null, "");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("config can not be null", ex.getMessage());
         }
         try {
             Configuration config = new DefaultConfiguration("myname");
-            PropertyCacheFile cache = new PropertyCacheFile(config, null);
+            new PropertyCacheFile(config, null);
         }
         catch (IllegalArgumentException ex) {
             assertEquals("fileName can not be null", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ScopeUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ScopeUtilsTest.java
index cb1d7b3cf5..db3fa74752 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ScopeUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ScopeUtilsTest.java
@@ -51,6 +51,20 @@ public void testInEnumBlockInNew() throws ReflectiveOperationException {
         Assert.assertFalse(ScopeUtils.inEnumBlock(ast2));
     }
 
+    @Test
+    public void testInEnumBlockWithEnum() throws ReflectiveOperationException {
+        DetailAST ast0 = new DetailAST();
+        ast0.setType(TokenTypes.OBJBLOCK);
+        DetailAST ast1 = new DetailAST();
+        ast1.setType(TokenTypes.ENUM_DEF);
+        ast0.addChild(ast1);
+        DetailAST ast2 = new DetailAST();
+        ast2.setType(TokenTypes.MODIFIERS);
+        ast1.addChild(ast2);
+
+        Assert.assertTrue(ScopeUtils.inEnumBlock(ast2));
+    }
+
     @Test
     public void testInEnumBlockInInterface() throws ReflectiveOperationException {
         DetailAST ast = new DetailAST();
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index c43b976ec0..6564dad14e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -237,13 +237,6 @@ public void testForInvalidCheckImplementation() throws Exception {
         verify(checkConfig, pathToEmptyFile, expected);
     }
 
-    public static class BadJavaDocCheck extends Check {
-        @Override
-        public int[] getDefaultTokens() {
-            return new int[]{TokenTypes.SINGLE_LINE_COMMENT};
-        }
-    }
-
     @Test
     public void testProcessNonJavaFiles() throws Exception {
         final TreeWalker treeWalker = new TreeWalker();
@@ -300,4 +293,11 @@ public void testProcessWithRecognitionException() throws Exception {
 
         treeWalker.processFiltered(file, lines);
     }
+
+    public static class BadJavaDocCheck extends Check {
+        @Override
+        public int[] getDefaultTokens() {
+            return new int[]{TokenTypes.SINGLE_LINE_COMMENT};
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
index 28b8525cd2..572715b44e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
@@ -49,7 +49,7 @@
     @Test
     public void testEncode()
         throws IOException {
-        final XMLLogger logger = new XMLLogger(outStream, false);
+        new XMLLogger(outStream, false);
         final String[][] encodings = {
             {"<", "&lt;"},
             {">", "&gt;"},
@@ -72,7 +72,7 @@ public void testEncode()
     @Test
     public void testIsReference()
         throws IOException {
-        final XMLLogger logger = new XMLLogger(outStream, false);
+        new XMLLogger(outStream, false);
         final String[] reference = {
             "&#0;",
             "&#x0;",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
index 0a02db45de..c04062fac2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
@@ -33,39 +33,6 @@
 
 public class AutomaticBeanTest {
 
-    public class TestBean extends AutomaticBean {
-
-        private String privateField;
-
-        private String wrong;
-
-        private int val;
-
-        public void setWrong(String wrong) {
-            this.wrong = wrong;
-        }
-
-        public void setVal(int val) {
-            this.val = val;
-        }
-
-        public void setExceptionalMethod(String value) {
-            throw new IllegalStateException("for UT");
-        }
-
-        public void setName(String name) {
-        }
-
-        /**
-         * just for code coverage
-         * @param childConf a child of this component's Configuration
-         */
-        @Override
-        protected void setupChild(Configuration childConf) throws CheckstyleException {
-            super.setupChild(childConf);
-        }
-    }
-
     @Test
     public void testConfigure_NoSuchAttribute() {
         final TestBean testBean = new TestBean();
@@ -130,4 +97,36 @@ public void testContextualize_ConversionException() {
         }
     }
 
+    public class TestBean extends AutomaticBean {
+
+        private String privateField;
+
+        private String wrong;
+
+        private int val;
+
+        public void setWrong(String wrong) {
+            this.wrong = wrong;
+        }
+
+        public void setVal(int val) {
+            this.val = val;
+        }
+
+        public void setExceptionalMethod(String value) {
+            throw new IllegalStateException("for UT");
+        }
+
+        public void setName(String name) {
+        }
+
+        /**
+         * just for code coverage
+         * @param childConf a child of this component's Configuration
+         */
+        @Override
+        protected void setupChild(Configuration childConf) throws CheckstyleException {
+            super.setupChild(childConf);
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
index 922d722656..9192678565 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
@@ -68,8 +68,6 @@ public void testGetChildCount() {
     public void testSetSiblingNull() {
         final DetailAST root = new DetailAST();
         final DetailAST firstLevelA = new DetailAST();
-        final DetailAST firstLevelB = new DetailAST();
-        final DetailAST secondLevelA = new DetailAST();
 
         root.setFirstChild(firstLevelA);
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
index a7e7072750..4f8b6521c6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
@@ -35,7 +35,7 @@ public void testUnsupportedCharset() throws IOException {
         // just to make UT coverage 100%
         String charsetName = "STRANGE_CHARSET";
         try {
-            FileText o = new FileText(new File("any name"), charsetName);
+            new FileText(new File("any name"), charsetName);
             fail();
         }
         catch (UnsupportedEncodingException e) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessageTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessageTest.java
index ecd438f348..ab4e105a6c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessageTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessageTest.java
@@ -73,7 +73,6 @@ public void testBundleReload_UrlNotNull() throws IOException {
 
         ClassLoader classloader = mock(ClassLoader.class);
         String resource = "com/puppycrawl/tools/checkstyle/checks/coding/messages_en.properties";
-        String urlPath = "file:com/puppycrawl/tools/checkstyle/checks/coding/messages.properties";
         final URLConnection mockConnection = Mockito.mock(URLConnection.class);
         when(mockConnection.getInputStream()).thenReturn(
                 new ByteArrayInputStream(new byte[]{}));
@@ -92,7 +91,6 @@ public void testBundleReload_UrlNotNullStreamNull() throws IOException {
 
         ClassLoader classloader = mock(ClassLoader.class);
         String resource = "com/puppycrawl/tools/checkstyle/checks/coding/messages_en.properties";
-        String urlPath = "file:com/puppycrawl/tools/checkstyle/checks/coding/messages.properties";
 
         URL url = getMockUrl(null);
         when(classloader.getResource(resource)).thenReturn(url);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
index 023d2a1c5b..d530ac44da 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounterTest.java
@@ -26,7 +26,7 @@
 
     @Test(expected = IllegalArgumentException.class)
     public void testCtorException() {
-        final SeverityLevelCounter o = new SeverityLevelCounter(null);
+        new SeverityLevelCounter(null);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
index 168528b786..2ac7f53164 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
@@ -45,33 +45,6 @@ protected DefaultConfiguration createCheckerConfig(
         return dc;
     }
 
-    public static class TestFileSetCheck extends AbstractFileSetCheck {
-        private static boolean destroyed;
-        private static boolean fileContentAvailable;
-
-        @Override
-        public void destroy() {
-            destroyed = true;
-        }
-
-        public static boolean isDestroyed() {
-            return destroyed;
-        }
-
-        public static boolean isFileContentAvailable() {
-            return fileContentAvailable;
-        }
-
-        @Override
-        protected void processFiltered(File file, List<String> lines) {
-        }
-
-        @Override
-        public void finishProcessing() {
-            fileContentAvailable = FileContentsHolder.getContents() != null;
-        }
-    }
-
     @Test
     public void testTranslation() throws Exception {
         final Configuration checkConfig =
@@ -111,4 +84,31 @@ public void testProcessCallsFinishBeforeCallingDestroy() throws Exception {
         assertTrue("FileContent should be available during finishProcessing() call",
                 TestFileSetCheck.isFileContentAvailable());
     }
+
+    public static class TestFileSetCheck extends AbstractFileSetCheck {
+        private static boolean destroyed;
+        private static boolean fileContentAvailable;
+
+        @Override
+        public void destroy() {
+            destroyed = true;
+        }
+
+        public static boolean isDestroyed() {
+            return destroyed;
+        }
+
+        public static boolean isFileContentAvailable() {
+            return fileContentAvailable;
+        }
+
+        @Override
+        protected void processFiltered(File file, List<String> lines) {
+        }
+
+        @Override
+        public void finishProcessing() {
+            fileContentAvailable = FileContentsHolder.getContents() != null;
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index 7eae0527bc..18daf6f3b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -74,7 +74,6 @@ public void testDefault() throws Exception {
      */
     @Test
     public void testNotFoundKey() throws Exception {
-        final UniquePropertiesCheck check = new UniquePropertiesCheck();
         final List<String> testStrings = new ArrayList<>(3);
         testStrings.add("");
         testStrings.add("0 = 0");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index a02d6a359e..5be3c7f111 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -33,19 +33,6 @@
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 
 public class AbstractJavadocCheckTest extends BaseCheckTestSupport {
-    public static class TempCheck extends AbstractJavadocCheck {
-
-        @Override
-        public int[] getDefaultJavadocTokens() {
-            return null;
-        }
-
-        @Override
-        public void visitJavadocToken(DetailNode ast) {
-            // do nothing
-        }
-
-    }
 
     @Test
     public void testNumberFormatException() throws Exception {
@@ -92,4 +79,17 @@ public void testWithMultipleChecks() throws Exception {
         };
         verify(checker, getPath("javadoc/InputCorrectJavaDocParagraphCheck.java"), expected);
     }
+
+    public static class TempCheck extends AbstractJavadocCheck {
+
+        @Override
+        public int[] getDefaultJavadocTokens() {
+            return null;
+        }
+
+        @Override
+        public void visitJavadocToken(DetailNode ast) {
+            // do nothing
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckInput3.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckInput3.java
new file mode 100755
index 0000000000..4b1d6aa08a
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckInput3.java
@@ -0,0 +1,38 @@
+package com.puppycrawl.tools.checkstyle.checks.sizes;
+
+public class MethodCountCheckInput3 {
+
+    /**
+     * Dummy inner class to check that the inner-classes methods are not counted for the outer class.
+     */
+    /**
+     * Dummy method doing nothing
+     */
+    void doNothing50() {
+    }
+
+    /**
+     * Dummy method doing nothing
+     */
+    void doNothing51() {
+    }
+
+    /**
+     * Dummy method doing nothing
+     */
+    void doNothing52() {
+    }
+
+    /**
+     * Dummy method doing nothing
+     */
+    void doNothing53() {
+    }
+
+    /**
+     * Dummy method doing nothing
+     */
+    void doNothing54() {
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
index 46a08fde89..04ef74f9cc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
@@ -102,4 +102,18 @@ public void testEnum() throws Exception {
         verify(checkConfig,
             getSrcPath("checks/sizes/MethodCountCheckInput2.java"), expected);
     }
+
+    @Test
+    public void testWithPackageModifier() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(MethodCountCheck.class);
+        checkConfig.addAttribute("maxPrivate", "0");
+        checkConfig.addAttribute("maxTotal", "2");
+
+        final String[] expected = {
+            "3: " + getCheckMessage(MSG_MANY_METHODS, 5, 2),
+        };
+
+        verify(checkConfig,
+                getSrcPath("checks/sizes/MethodCountCheckInput3.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
index 59149dd85e..cea443a9d1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllBlockCommentsTest.java
@@ -38,6 +38,15 @@
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
+    @Test
+    public void testAllBlockComments() throws Exception {
+        DefaultConfiguration checkConfig = createCheckConfig(BlockCommentListenerCheck.class);
+        final String[] expected = {};
+        verify(checkConfig, getPath("comments" + File.separator
+                + "InputFullOfBlockComments.java"), expected);
+        Assert.assertTrue(allComments.isEmpty());
+    }
+
     public static class BlockCommentListenerCheck extends Check {
         @Override
         public boolean isCommentNodesRequired() {
@@ -74,15 +83,5 @@ public void visitToken(DetailAST aAST) {
                 Assert.fail("Unexpected comment: " + commentContent);
             }
         }
-
-    }
-
-    @Test
-    public void testAllBlockComments() throws Exception {
-        DefaultConfiguration checkConfig = createCheckConfig(BlockCommentListenerCheck.class);
-        final String[] expected = {};
-        verify(checkConfig, getPath("comments" + File.separator
-                + "InputFullOfBlockComments.java"), expected);
-        Assert.assertTrue(allComments.isEmpty());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
index becdd12304..e9b6023a73 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/AllSinglelineCommentsTest.java
@@ -37,6 +37,15 @@
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
+    @Test
+    public void testAllBlockComments() throws Exception {
+        DefaultConfiguration checkConfig = createCheckConfig(SinglelineCommentListenerCheck.class);
+        final String[] expected = {};
+        verify(checkConfig, getPath("comments" + File.separator
+                + "InputFullOfSinglelineComments.java"), expected);
+        Assert.assertTrue(allComments.isEmpty());
+    }
+
     public static class SinglelineCommentListenerCheck extends Check {
         @Override
         public boolean isCommentNodesRequired() {
@@ -69,15 +78,5 @@ public void visitToken(DetailAST aAST) {
                 Assert.fail("Unexpected comment: " + commentContent);
             }
         }
-
-    }
-
-    @Test
-    public void testAllBlockComments() throws Exception {
-        DefaultConfiguration checkConfig = createCheckConfig(SinglelineCommentListenerCheck.class);
-        final String[] expected = {};
-        verify(checkConfig, getPath("comments" + File.separator
-                + "InputFullOfSinglelineComments.java"), expected);
-        Assert.assertTrue(allComments.isEmpty());
     }
 }
