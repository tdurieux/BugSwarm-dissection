diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
index 2bb91ff76c..1c89dde60f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -113,6 +113,8 @@ public DefaultLogger(OutputStream infoStream,
     /**
      * Print an Emacs compliant line on the error stream.
      * If the column number is non zero, then also display it.
+     *
+     * @param event the event details
      * @see AuditListener
      **/
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
index 53b407061d..095f9a20fc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java
@@ -116,6 +116,8 @@ private static BeanUtilsBean createBeanUtilsBean() {
      * is called for each {@link Configuration#getChildren child Configuration}
      * of {@code configuration}.
      *
+     * @param config the configuration to use.
+     * @throws CheckstyleException if there is a configuration error.
      * @see Configurable
      */
     @Override
@@ -187,6 +189,9 @@ private void tryCopyProperty(String moduleName, String key, Object value, boolea
 
     /**
      * Implements the Contextualizable interface using bean introspection.
+     *
+     * @param context the context.
+     * @throws CheckstyleException if there is a contextualization error.
      * @see Contextualizable
      */
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index 102baa0674..dadaa85459 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -24,11 +24,12 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.apache.commons.lang3.StringUtils;
+
 import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.ScopeUtils;
-import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>
@@ -173,7 +174,7 @@ private static boolean doesNameInExtendMatchSuperClassName(String superClassFull
      */
     private static String getFullClassName(String outerClassFullName,
                                            String packageName, String className) {
-        String fullClassName;
+        final String fullClassName;
 
         if (outerClassFullName == null) {
             if (packageName.isEmpty()) {
@@ -206,7 +207,7 @@ private String getPackageName(DetailAST ast) {
             traversalAst = traversalAst.getPreviousSibling();
         }
 
-        String packageName;
+        final String packageName;
         if (traversalAst.getType() == TokenTypes.PACKAGE_DEF) {
             packageName = extractFullName(traversalAst);
         }
@@ -223,12 +224,12 @@ private String getPackageName(DetailAST ast) {
      * @return super class name
      */
     private String extractFullName(DetailAST classExtend) {
-        String className;
+        final String className;
 
         if (classExtend.findFirstToken(TokenTypes.IDENT) == null) {
             // Name specified with packages, have to traverse DOT
             final DetailAST firstChild = classExtend.findFirstToken(TokenTypes.DOT);
-            List<String> fullNameParts = new LinkedList<>();
+            final List<String> fullNameParts = new LinkedList<>();
 
             fullNameParts.add(0, firstChild.findFirstToken(TokenTypes.IDENT).getText());
             DetailAST traverse = firstChild.findFirstToken(TokenTypes.DOT);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 5e0088a754..f5e0deab7f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -346,11 +346,6 @@ public boolean isCommentNodesRequired() {
 
     @Override
     protected final void processAST(DetailAST ast) {
-        if ((ast.getType() == TokenTypes.METHOD_DEF || ast.getType() == TokenTypes.CTOR_DEF)
-            && getMethodsNumberOfLine(ast) <= minLineCount
-            || hasAllowedAnnotations(ast)) {
-            return;
-        }
         final Scope theScope = calculateScope(ast);
         if (shouldCheck(ast, theScope)) {
             final FileContents contents = getFileContents();
@@ -430,7 +425,20 @@ protected boolean isMissingJavadocAllowed(final DetailAST ast) {
         return allowMissingJavadoc
             || allowMissingPropertyJavadoc
                 && (CheckUtils.isSetterMethod(ast) || CheckUtils.isGetterMethod(ast))
-            || matchesSkipRegex(ast);
+            || matchesSkipRegex(ast)
+            || isContentsAllowMissingJavadoc(ast);
+    }
+
+    /**
+     * Checks if the Javadoc can be missing if the method or constructor is
+     * below the minimum line count or has a special annotation.
+     *
+     * @param ast the tree node for the method or constructor.
+     * @return True if this method or constructor doesn't need Javadoc.
+     */
+    private boolean isContentsAllowMissingJavadoc(DetailAST ast) {
+        return (ast.getType() == TokenTypes.METHOD_DEF || ast.getType() == TokenTypes.CTOR_DEF)
+                && (getMethodsNumberOfLine(ast) <= minLineCount || hasAllowedAnnotations(ast));
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
index a89753a665..05549818e8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
@@ -131,7 +131,9 @@ public void visitJavadocToken(DetailNode ast) {
         String firstSentence = getFirstSentence(ast);
         final int endOfSentence = firstSentence.lastIndexOf(period);
         if (endOfSentence == -1) {
-            log(ast.getLineNumber(), MSG_SUMMARY_FIRST_SENTENCE);
+            if (!firstSentence.trim().startsWith("{@inheritDoc}")) {
+                log(ast.getLineNumber(), MSG_SUMMARY_FIRST_SENTENCE);
+            }
         }
         else {
             firstSentence = firstSentence.substring(0, endOfSentence);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index a115e34d1f..563f870ad4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -211,6 +211,8 @@ public int getEditingRow() {
 
     /**
      * Overridden to pass the new rowHeight to the tree.
+     *
+     * @param newRowHeight new row height
      */
     @Override
     public final void setRowHeight(int newRowHeight) {
@@ -277,6 +279,9 @@ public Component getTableCellEditorComponent(JTable table,
          * <p>By returning false we are also enforcing the policy that
          * the tree will never be editable (at least by a key sequence).
          *
+         * @param event the event the editor should use to consider
+         *              whether to begin editing or not
+         * @return true if editing can be started
          * @see TableCellEditor
          */
         @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
index 9eda08ef70..602cad3a03 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java
@@ -81,6 +81,8 @@ public void updateUI() {
     /**
      * Sets the row height of the tree, and forwards the row height to
      * the table.
+     *
+     * @param newRowHeight the height of each cell, in pixels
      */
     @Override
     public void setRowHeight(int newRowHeight) {
@@ -95,6 +97,11 @@ public void setRowHeight(int newRowHeight) {
 
     /**
      * This is overridden to set the height to match that of the JTable.
+     *
+     * @param x the new <i>x</i>-coordinate of this component
+     * @param y the new <i>y</i>-coordinate of this component
+     * @param w the new <code>width</code> of this component
+     * @param h the new <code>height</code> of this component
      */
     @Override
     public void setBounds(int x, int y, int w, int h) {
@@ -104,6 +111,8 @@ public void setBounds(int x, int y, int w, int h) {
     /**
      * Subclassed to translate the graphics such that the last visible
      * row will be drawn at 0,0.
+     *
+     * @param graph  the <code>Graphics</code> context in which to paint
      */
     @Override
     public void paint(Graphics graph) {
@@ -113,6 +122,16 @@ public void paint(Graphics graph) {
 
     /**
      * TreeCellRenderer method. Overridden to update the visible row.
+     *
+     * @param   table           the <code>JTable</code> that is asking the
+     *                          renderer to draw; can be <code>null</code>
+     * @param   value           the value of the cell to be rendered.
+     * @param   isSelected      true if the cell is to be rendered with the
+     *                          selection highlighted; otherwise false
+     * @param   hasFocus        if true, render cell appropriately.
+     * @param   row             the row index of the cell being drawn.
+     * @param   column          the column index of the cell being drawn
+     * @return The component used for drawing the cell.
      * @see TableCellRenderer
      */
     @Override
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
index 43028a151d..cf94405fed 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
@@ -571,4 +571,14 @@ public void testNotSkipAnythingWhenSkipRegexDoesNotMatch() throws Exception {
         };
         verify(checkConfig, getPath("InputJavadocMethodIgnoreNameRegex.java"), expected);
     }
+
+    @Test
+    public void testMethodsNotSkipWrittenJavadocs() throws Exception {
+        checkConfig.addAttribute("allowedAnnotations", "MyAnnotation");
+        final String[] expected = {
+            "7:8: " + getCheckMessage(MSG_UNUSED_TAG, "@param", "BAD"),
+            "17:8: " + getCheckMessage(MSG_UNUSED_TAG, "@param", "BAD"),
+        };
+        verify(checkConfig, getPath("InputJavadocMethodsNotSkipWritten.java"), expected);
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputCorrectSummaryJavaDoc.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputCorrectSummaryJavaDoc.java
index 93f441e991..0c5a130e76 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputCorrectSummaryJavaDoc.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputCorrectSummaryJavaDoc.java
@@ -29,6 +29,9 @@ void foo5() {}
      */
     void foo6() {}
 
+    /** {@inheritDoc} */
+    void foo7() {}
+
     /** 
      * <a href="mailto:vlad@htmlbook.ru"/> 
      */
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputJavadocMethodsNotSkipWritten.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputJavadocMethodsNotSkipWritten.java
new file mode 100755
index 0000000000..ced09283b1
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputJavadocMethodsNotSkipWritten.java
@@ -0,0 +1,28 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc;
+
+public class InputJavadocMethodsNotSkipWritten {
+    /**
+     * Description.
+     * 
+     * @param BAD
+     *            This param doesn't exist.
+     */
+    @MyAnnotation
+    public void InputJavadocMethodsNotSkipWritten() {
+    }
+
+    /**
+     * Description.
+     * 
+     * @param BAD
+     *            This param doesn't exist.
+     */
+    @MyAnnotation
+    public void test() {
+    }
+
+    /** Description. */
+    @MyAnnotation
+    public void test2() {
+    }
+}
