diff --git a/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStoreTest.java b/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStoreTest.java
index 688a109e4a..a6957fe0c7 100755
--- a/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStoreTest.java
+++ b/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/ElasticsearchQueryStoreTest.java
@@ -25,11 +25,14 @@
 import com.flipkart.foxtrot.core.MockElasticsearchServer;
 import com.flipkart.foxtrot.core.TestUtils;
 import com.flipkart.foxtrot.core.datastore.DataStore;
+import com.flipkart.foxtrot.core.querystore.DocumentTranslator;
 import com.flipkart.foxtrot.core.querystore.QueryExecutor;
 import com.flipkart.foxtrot.core.querystore.QueryStoreException;
 import com.flipkart.foxtrot.core.querystore.actions.spi.AnalyticsLoader;
 import com.flipkart.foxtrot.core.table.TableMetadataManager;
+import com.shash.hbase.ds.RowKeyDistributorByHashPrefix;
 import org.elasticsearch.action.get.GetResponse;
+import org.elasticsearch.common.collect.ImmutableList;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -51,6 +54,9 @@
     private DataStore dataStore;
     private ElasticsearchQueryStore queryStore;
     private ObjectMapper mapper;
+    private TableMetadataManager tableMetadataManager;
+    private final DocumentTranslator translator = new DocumentTranslator(new RowKeyDistributorByHashPrefix(
+            new RowKeyDistributorByHashPrefix.OneByteSimpleHash(32)));
 
     @Before
     public void setUp() throws Exception {
@@ -62,7 +68,7 @@ public void setUp() throws Exception {
         ElasticsearchConnection elasticsearchConnection = Mockito.mock(ElasticsearchConnection.class);
         when(elasticsearchConnection.getClient()).thenReturn(elasticsearchServer.getClient());
         ElasticsearchUtils.initializeMappings(elasticsearchConnection.getClient());
-        TableMetadataManager tableMetadataManager = Mockito.mock(TableMetadataManager.class);
+        tableMetadataManager = Mockito.mock(TableMetadataManager.class);
         when(tableMetadataManager.exists(TestUtils.TEST_TABLE_NAME)).thenReturn(true);
         when(tableMetadataManager.get(anyString())).thenReturn(TestUtils.TEST_TABLE);
         AnalyticsLoader analyticsLoader = new AnalyticsLoader(tableMetadataManager, dataStore, queryStore, elasticsearchConnection);
@@ -78,22 +84,22 @@ public void tearDown() throws Exception {
 
     @Test
     public void testSaveSingle() throws Exception {
-        Document expectedDocument = new Document();
-        expectedDocument.setId(UUID.randomUUID().toString());
-        expectedDocument.setTimestamp(System.currentTimeMillis());
+        Document originalDocument = new Document();
+        originalDocument.setId(UUID.randomUUID().toString());
+        originalDocument.setTimestamp(System.currentTimeMillis());
         JsonNode data = mapper.valueToTree(Collections.singletonMap("TEST_NAME", "SINGLE_SAVE_TEST"));
-        expectedDocument.setData(data);
-        queryStore.save(TestUtils.TEST_TABLE_NAME, expectedDocument);
-
+        originalDocument.setData(data);
+        queryStore.save(TestUtils.TEST_TABLE_NAME, originalDocument);
+        final Document translatedDocuemnt = translator.translate(tableMetadataManager.get(TestUtils.TEST_TABLE_NAME), originalDocument);
         GetResponse getResponse = elasticsearchServer
                 .getClient()
-                .prepareGet(ElasticsearchUtils.getCurrentIndex(TestUtils.TEST_TABLE_NAME, expectedDocument.getTimestamp()),
+                .prepareGet(ElasticsearchUtils.getCurrentIndex(TestUtils.TEST_TABLE_NAME, originalDocument.getTimestamp()),
                         ElasticsearchUtils.DOCUMENT_TYPE_NAME,
-                        expectedDocument.getId())
+                        translatedDocuemnt.getId())
                 .setFields("_timestamp").execute().actionGet();
         assertTrue("Id should exist in ES", getResponse.isExists());
-        assertEquals("Id should match requestId", expectedDocument.getId(), getResponse.getId());
-        assertEquals("Timestamp should match request timestamp", expectedDocument.getTimestamp(), getResponse.getField("_timestamp").getValue());
+        assertEquals("Id should match requestId", translatedDocuemnt.getId(), getResponse.getId());
+        assertEquals("Timestamp should match request timestamp", translatedDocuemnt.getTimestamp(), getResponse.getField("_timestamp").getValue());
     }
 
     @Test(expected = QueryStoreException.class)
@@ -151,8 +157,8 @@ public void testSaveBulk() throws Exception {
                     mapper.valueToTree(Collections.singletonMap("TEST_NAME", "SINGLE_SAVE_TEST"))));
         }
         queryStore.save(TestUtils.TEST_TABLE_NAME, documents);
-
-        for (Document document : documents) {
+        final List<Document> translatedDocuemtns = translator.translate(tableMetadataManager.get(TestUtils.TEST_TABLE_NAME), documents);
+        for (Document document : translatedDocuemtns) {
             GetResponse getResponse = elasticsearchServer
                     .getClient()
                     .prepareGet(ElasticsearchUtils.getCurrentIndex(TestUtils.TEST_TABLE_NAME, document.getTimestamp()),
@@ -249,8 +255,8 @@ public void testGetSingle() throws Exception {
         JsonNode data = mapper.valueToTree(Collections.singletonMap("TEST_NAME", "SINGLE_SAVE_TEST"));
         Document document = new Document(id, System.currentTimeMillis(), data);
         document.setTimestamp(timestamp);
-        dataStore.save(TestUtils.TEST_TABLE, document);
-
+        queryStore.save(TestUtils.TEST_TABLE_NAME, document);
+        elasticsearchServer.refresh(ElasticsearchUtils.getIndices(TestUtils.TEST_TABLE_NAME));
         Document responseDocument = queryStore.get(TestUtils.TEST_TABLE_NAME, id);
         assertNotNull(responseDocument);
         assertEquals(id, responseDocument.getId());
@@ -292,10 +298,8 @@ public void testGetBulk() throws Exception {
                             mapper.valueToTree(Collections.singletonMap("TEST_NAME", "SINGLE_SAVE_TEST"))));
             idValues.get(id).setTimestamp(System.currentTimeMillis());
         }
-        for (Document document : idValues.values()) {
-            dataStore.save(TestUtils.TEST_TABLE, document);
-        }
-
+        queryStore.save(TestUtils.TEST_TABLE_NAME, ImmutableList.copyOf(idValues.values()));
+        elasticsearchServer.refresh(ElasticsearchUtils.getIndices(TestUtils.TEST_TABLE_NAME));
         List<Document> responseDocuments = queryStore.getAll(TestUtils.TEST_TABLE_NAME, ids);
         HashMap<String, Document> responseIdValues = new HashMap<String, Document>();
         for (Document doc : responseDocuments) {
diff --git a/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/DocumentResource.java b/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/DocumentResource.java
index 2da610f2e7..e73503071c 100755
--- a/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/DocumentResource.java
+++ b/foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/DocumentResource.java
@@ -15,10 +15,10 @@
  */
 package com.flipkart.foxtrot.server.resources;
 
+import com.codahale.metrics.annotation.Timed;
 import com.flipkart.foxtrot.common.Document;
 import com.flipkart.foxtrot.core.querystore.QueryStore;
 import com.flipkart.foxtrot.core.querystore.QueryStoreException;
-import com.yammer.metrics.annotation.Timed;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableManagerResourceTest.java b/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableManagerResourceTest.java
index 56f1fd43e4..3d0b5c549c 100755
--- a/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableManagerResourceTest.java
+++ b/foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableManagerResourceTest.java
@@ -18,6 +18,7 @@
 import com.flipkart.foxtrot.common.Table;
 import com.flipkart.foxtrot.core.TestUtils;
 import com.flipkart.foxtrot.core.table.TableManager;
+import com.flipkart.foxtrot.core.table.TableManagerException;
 import io.dropwizard.testing.junit.ResourceTestRule;
 import org.apache.http.HttpStatus;
 import org.junit.Before;
@@ -80,7 +81,7 @@ public void testSaveNullTableName() throws Exception {
     @Test
     public void testSaveBackendError() throws Exception {
         Table table = new Table(UUID.randomUUID().toString(), 30);
-        doThrow(new Exception()).when(tableManager).save(any(Table.class));
+        doThrow(new TableManagerException(TableManagerException.ErrorCode.INTERNAL_ERROR, "Dummy")).when(tableManager).save(any(Table.class));
         Response response = resource.client().target("/v1/tables").request(MediaType.APPLICATION_JSON_TYPE).post(Entity.json(table));
         assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
     }
@@ -130,14 +131,14 @@ public void testDelete() throws Exception {
 
     @Test
     public void testDeleteError() throws Exception {
-        doThrow(new Exception()).when(tableManager).delete(anyString());
+        doThrow(new TableManagerException(TableManagerException.ErrorCode.INTERNAL_ERROR, "Dummy Error")).when(tableManager).delete(anyString());
         Response response = resource.client().target("/v1/tables/random/delete").request().delete();
         assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());
     }
 
     @Test
     public void testGetMissingTable() throws Exception {
-        doReturn(null).when(tableManager).get(anyString());
+        doThrow(new TableManagerException(TableManagerException.ErrorCode.TABLE_NOT_FOUND, "Dummy")).when(tableManager).get(anyString());
         Response response = resource.client().target(String.format("/v1/tables/%s", TestUtils.TEST_TABLE_NAME)).request().get();
         assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());
     }
