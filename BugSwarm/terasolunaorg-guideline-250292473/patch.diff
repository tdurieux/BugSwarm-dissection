diff --git a/source/ArchitectureInDetail/MessagingDetail/JMS.rst b/source/ArchitectureInDetail/MessagingDetail/JMS.rst
index e9c89a5986..3c2a4688ec 100755
--- a/source/ArchitectureInDetail/MessagingDetail/JMS.rst
+++ b/source/ArchitectureInDetail/MessagingDetail/JMS.rst
@@ -77,13 +77,13 @@ JMSとは
  | QueueまたはTopicへのメッセージ送信方式には、同期送信方式と非同期送信方式の2通りの処理方式が考えられるが、JMS1.1では同期送信方式のみがサポートされる。
 
  (1) 同期送信方式
- 
+
   | 明示的にメッセージを送信する機能を呼び出すことで、メッセージに対する処理と送信が開始される。
   | JMSプロバイダからの応答があるまで待機するため、後続処理がブロックされる。
   |
 
  (2) 非同期送信方式
- 
+
   | 明示的にメッセージを送信する機能を呼び出すことで、メッセージに対する処理と送信が開始される。
   | JMSプロバイダからの応答を待たないため、後続処理を続けて実行する。
   | 非同期送信方式の詳細については、\ `Java Message Service(Version 2.0) <http://download.oracle.com/otndocs/jcp/jms-2_0-fr-eval-spec/>`_\ の"7.3. Asynchronous send"を参照されたい。
@@ -94,23 +94,23 @@ JMSとは
 
  | QueueまたはTopicに受信したメッセージに対する処理を実装する際には、同期受信方式と非同期受信方式の2通りの処理方式を選択することができる。
  | 後述するように、同期受信方式の利用ケースは限定的であるため、一般的には非同期受信方式が利用されることが多い。
- 
+
 
  (1) 非同期受信方式
- 
+
   | QueueまたはTopicがメッセージを受信すると、受信したメッセージに対する処理が開始される。
   | 1つのメッセージに対する処理が終了しなくても別のメッセージの処理が開始されるため、並列処理に向いている。
   |
 
  (2) 同期受信方式
- 
+
   | 明示的にメッセージを受信する機能を呼び出すことで、受信とメッセージに対する処理が開始される。
   | メッセージを受信する機能は、QueueまたはTopicにメッセージが存在しない場合、受信するまで待機する。
   | そのため、タイムアウト値を設定することで、メッセージの待ち時間を指定する必要がある。
-  
+
   | メッセージの同期受信を使用する一例として、WebアプリケーションにおいてQueueに溜まったメッセージを、画面操作時など任意のタイミングで取得・処理したい場合や、
     バッチで定期的にメッセージの処理を行いたい場合に使用することができる。
-  | 
+  |
 
 
 | JMSではメッセージは以下のパートで構成される。
@@ -120,7 +120,7 @@ JMSとは
  .. list-table::
   :header-rows: 1
   :widths: 20 80
-  
+
   * - 構成
     - 説明
   * - | ヘッダ
@@ -192,11 +192,11 @@ Spring Frameworkのコンポーネントを使用したJMSの利用
 * \ ``javax.jms.MessageConsumer``\
     | メッセージの受信用インタフェース。
 
-* \ ``javax.jms.Message``\ 
+* \ ``javax.jms.Message``\
     | ヘッダとボディを保持するメッセージであることを示すインタフェース。
     | 送受信はこのインタフェースの実装クラスがやり取りされる。
 
-* \ ``org.springframework.messaging.Message``\ 
+* \ ``org.springframework.messaging.Message``\
     | さまざまなメッセージングで扱うメッセージを抽象化したインタフェース。
     | JMSでも利用可能である。
     | 前述したとおり、メッセージングの実装方式を合わせるため、基本的にはspring-messagingで提供されている\ ``org.springframework.messaging.Message``\ を使用する。
@@ -276,7 +276,7 @@ Spring Frameworkのコンポーネントを使用したJMSの利用
       - | \ ``MessageConsumer``\ は\ ``Destination``\ からメッセージを受信する。
     * - | (4)
       - | 受信したメッセージを引数として、\ ``MessageListener``\ 内の\ ``@JmsListener``\ アノテーションが設定されたメソッド(リスナーメソッド)が呼び出される。リスナーメソッドは\ ``DefaultMessageListenerContainer``\ で管理される。
-        | 
+        |
 
 .. _JMSOverviewSyncReceive:
 
@@ -356,10 +356,10 @@ Spring Frameworkのコンポーネントを使用したJMSの利用
 
 
  | modelプロジェクトを追加するためには、以下を実施する。
- 
+
   * modelプロジェクトの作成
   * domainプロジェクトからmodelプロジェクトへの依存関係の追加
- 
+
  | 詳細な追加方法については、同じようにJavaBeanの共有を行っている
    \ :doc:`../WebServiceDetail/SOAP`\ の\ :ref:`SOAPAppendixAddProject` \ を参照されたい。
 
@@ -463,7 +463,7 @@ How to use
 - :file:`[projectName]-domain/src/main/resources/META-INF/spring/[projectName]-infra.xml`
 
  .. code-block:: xml
-   
+
     <!-- (1) -->
     <bean id="destinationResolver"
        class="org.springframework.jms.support.destination.JndiDestinationResolver">
@@ -481,7 +481,7 @@ How to use
       - | \ ``JndiDestinationResolver``\ をBean定義する。
     * - | (2)
       - | JNDI名にプレフィックス(java:comp/env/)がないときに、自動的に付与させる場合は\ ``true``\ を設定する。デフォルトは\ ``false``\ である。
-        
+
         .. warning::
 
            \ ``<jee:jndi-lookup/>``\ の\ ``resource-ref``\ 属性とはデフォルト値が異なることに注意されたい。
@@ -574,13 +574,13 @@ How to use
       - | メッセージングモデルについて設定する。
         | PTP（Queue）モデルは\ ``false``\ 、Pub/Sub（Topic）は\ ``true``\ に設定する。
       - \-
-      - \ ``false``\ 
+      - \ ``false``\
     * - 3.
       - \ ``sessionTransacted``\
       - | セッションでのトランザクション管理をするかどうか設定する。
         | 本ガイドラインでは、後述するトランザクション管理を使用するため、デフォルトのままの\ ``false``\ を推奨する。
       - \-
-      - \ ``false``\ 
+      - \ ``false``\
     * - 4.
       - \ ``messageConverter``\
       - | メッセージコンバータを設定する。
@@ -635,9 +635,9 @@ How to use
 
     \newpage
 
-(\*1)\ ``org.springframework.jms.support.converter.SimpleMessageConverter``\ 
+(\*1)\ ``org.springframework.jms.support.converter.SimpleMessageConverter``\
 
-(\*2)\ ``org.springframework.jms.support.destination.DynamicDestinationResolver``\ 
+(\*2)\ ``org.springframework.jms.support.destination.DynamicDestinationResolver``\
 
 |
 
@@ -648,13 +648,13 @@ How to use
  .. code-block:: java
 
     package com.example.domain.model;
-    
+
     import java.io.Serializable;
-    
+
     public class Todo implements Serializable { // (1)
-    
+
         private static final long serialVersionUID = -1L;
-    
+
         // omitted
 
         private String description;
@@ -664,23 +664,23 @@ How to use
         private boolean finished;
 
         // omitted
-    
+
         public String getDescription() {
             return description;
         }
-    
+
         public void setDescription(String description) {
             this.description = description;
         }
-    
+
         public boolean isFinished() {
             return finished;
         }
-    
+
         public void setFinished(boolean finished) {
             this.finished = finished;
         }
-    
+
     }
 
 
@@ -704,11 +704,11 @@ How to use
 
     package com.example.domain.service.todo;
 
-    import javax.inject.Inject; 
+    import javax.inject.Inject;
     import org.springframework.jms.core.JmsMessagingTemplate;
-    import org.springframework.stereotype.Service; 
+    import org.springframework.stereotype.Service;
     import com.example.domain.model.Todo;
-    
+
     @Service
     public class TodoServiceImpl implements TodoService {
 
@@ -717,12 +717,12 @@ How to use
 
         @Override
         public void sendMessage(String message) {
-       
+
            Todo todo = new Todo();
            // omitted
-           
+
            jmsMessagingTemplate.convertAndSend("jms/queue/TodoMessageQueue", todo);  // (2)
-          
+
         }
     }
 
@@ -739,9 +739,9 @@ How to use
       - | \ ``JmsMessagingTemplate``\ の\ ``convertAndSend``\ メソッドを使用して、引数のJavaBeanを\ ``org.springframework.messaging.Message``\ インタフェースの実装クラスに変換し、指定したDestinationに対しメッセージを同期送信する。
         | デフォルトで変換には、\ ``org.springframework.jms.support.converter.SimpleMessageConverter``\ が使用される。
         | \ ``SimpleMessageConverter``\ を使用すると、\ ``javax.jms.Message``\ 、\ ``java.lang.String``\ 、\ ``byte配列``\ 、\ ``java.util.Map``\ 、\ ``java.io.Serializable``\ インタフェースを実装したクラスを送信可能である。
-          
+
  .. note:: **業務ロジック内でJMSの例外ハンドリング**
-    
+
     \ `JMS (Java Message Service)のIntroduction <http://docs.spring.io/spring/docs/4.3.5.RELEASE/javadoc-api/org/springframework/jms/core/JmsTemplate.html>`_\ で触れられているように、Spring Frameworkでは検査例外を非検査例外に変換している。
     そのため、業務ロジック内でJMSの例外をハンドリングする場合は、非検査例外を扱う必要がある。
 
@@ -753,16 +753,16 @@ How to use
         * - Templateクラス
           - 例外の変換を行うメソッド
           - 変換後の例外
-        * - | \ ``JmsMessagingTemplate``\ 
+        * - | \ ``JmsMessagingTemplate``\
           - | \ ``JmsMessagingTemplate``\ の\ ``convertJmsException``\ メソッド
           - | \ ``MessagingException``\ (\*1)及びそのサブ例外
-        * - | \ ``JmsTemplate``\ 
+        * - | \ ``JmsTemplate``\
           - | \ ``JmsAccessor``\ の\ ``convertJmsAccessException``\ メソッド
           - | \ ``JmsException``\ (\*2)及びそのサブ例外
 
-    (\*1) \ ``org.springframework.messaging.MessagingException``\ 
+    (\*1) \ ``org.springframework.messaging.MessagingException``\
 
-    (\*2) \ ``org.springframework.jms.JmsException``\ 
+    (\*2) \ ``org.springframework.jms.JmsException``\
 
 |
 
@@ -779,36 +779,36 @@ How to use
 - :file:`[projectName]-domain/src/main/java/com/example/domain/service/todo/TodoServiceImpl.java`
 
  .. code-block:: java
- 
+
   package com.example.domain.service.todo;
-  
+
   import java.util.Map;
   import javax.inject.Inject;
   import org.springframework.jms.core.JmsMessagingTemplate;
   import org.springframework.stereotype.Service;
   import org.springframework.jms.support.JmsHeaders;
   import com.example.domain.model.Todo;
-  
+
   @Service
   public class TodoServiceImpl implements TodoService {
-  
+
   @Inject
   JmsMessagingTemplate jmsMessagingTemplate;
-  
+
     public void sendMessageWithCorrelationId(String correlationId) {
-    
+
       Todo todo = new Todo();
       // omitted
-      
+
       Map<String, Object> headers = new HashMap<>();
       headers.put(JmsHeaders.CORRELATION_ID, correlationId);// (1)
-      
+
       jmsMessagingTemplate.convertAndSend("jms/queue/TodoMessageQueue",
               todo, headers); // (2)
-      
+
     }
   }
-  
+
  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
  .. list-table::
     :header-rows: 1
@@ -822,7 +822,7 @@ How to use
       - | \ ``JmsMessagingTemplate``\ の\ ``convertAndSend``\ メソッドを使用することで、(2)で作成したヘッダ情報を付与したメッセージを同期送信する。
 
  .. warning:: **編集可能なヘッダ属性について**
- 
+
    Spring Frameworkの\ ``SimpleMessageConverter``\ によるメッセージ変換時には、ヘッダ属性の一部(\ ``JMSDestination``\ 、\ ``JMSDeliveryMode``\ 、\ ``JMSExpiration``\ 、\ ``JMSMessageID``\ 、\ ``JMSPriority``\ 、\ ``JMSRedelivered``\ と\ ``JMSTimestamp``\ )をread-onlyとして扱っている。
    そのため、上記の実装例のようにread-onlyのヘッダ属性を設定しても、送信したメッセージのヘッダには格納されない。（メッセージのプロパティとして保持される。）
    read-onlyのヘッダ属性うち、\ ``JMSDeliveryMode``\ や\ ``JMSPriority``\ については、\ ``JmsTemplate``\ 単位での設定が可能である。
@@ -848,7 +848,7 @@ How to use
     <!-- (1) -->
     <bean id="sendJmsTransactionManager"
        class="org.springframework.jms.connection.JmsTransactionManager">
-       <!-- (2) -->  
+       <!-- (2) -->
        <property name="connectionFactory" ref="cachingConnectionFactory" />
     </bean>
 
@@ -861,17 +861,17 @@ How to use
       - 説明
     * - | (1)
       - | \ ``JmsTransactionManager``\ をBean定義する。
-      
+
         .. note:: **TransactionManagerのbean名について**
 
             \ ``@Transactional``\ アノテーションを付与した場合、デフォルトではBean名\ ``transactionManager``\ で登録されているBeanが使用される。
             (詳細は、\ :ref:`DomainLayerAppendixTransactionManagement` \ を参照されたい)
-            
+
             Blankプロジェクトには、\ ``transactionManager``\ というBean名で\ ``DataSourceTransactionManager``\ が定義されているため、上記の設定では別名でBeanを定義している。
-            
+
             そのため、アプリケーション内で、\ ``TransactionManager``\ を1つしか使用しない場合は、bean名を\ ``transactionManager``\ にすることで\ ``@Transactional``\ アノテーションでの\ ``transactionManager``\ 属性の指定を省略することができる。
-       
-       
+
+
     * - | (2)
       - | トランザクションを管理する\ ``CachingConnectionFactory``\ を指定する。
 
@@ -883,12 +883,12 @@ How to use
 
     package com.example.domain.service.todo;
 
-    import javax.inject.Inject; 
+    import javax.inject.Inject;
     import org.springframework.jms.core.JmsMessagingTemplate;
-    import org.springframework.stereotype.Service; 
-    import org.springframework.transaction.annotation.Transactional; 
+    import org.springframework.stereotype.Service;
+    import org.springframework.transaction.annotation.Transactional;
     import com.example.domain.model.Todo;
-    
+
     @Service
     @Transactional("sendJmsTransactionManager")  // (1)
     public class TodoServiceImpl implements TodoService {
@@ -897,15 +897,15 @@ How to use
 
        @Override
        public void sendMessage(String message) {
-          
+
           Todo todo = new Todo();
           // omitted
-          
+
           jmsMessagingTemplate.convertAndSend("jms/queue/TodoMessageQueue", todo);  // (2)
        }
 
     }
-    
+
  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
  .. list-table::
     :header-rows: 1
@@ -927,12 +927,12 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
   JMSとDBのトランザクションの連携にはJTAによるグローバルトランザクションを使用する方法があるが、プロトコルの特性上、性能面のオーバーヘッドがかかるため、"Best Effort 1 Phase Commit"の使用を推奨する。詳細は以下を参照されたい。
 
-  | \ `Distributed transactions in Spring, with and without XA <http://www.javaworld.com/article/2077963/open-source-tools/distributed-transactions-in-spring--with-and-without-xa.html>`_\ 
-  | \ `Spring Distributed transactions using Best Effort 1 Phase Commit <http://gharshangupta.blogspot.jp/2015/03/spring-distributed-transactions-using_2.html>`_\ 
+  | \ `Distributed transactions in Spring, with and without XA <http://www.javaworld.com/article/2077963/open-source-tools/distributed-transactions-in-spring--with-and-without-xa.html>`_\
+  | \ `Spring Distributed transactions using Best Effort 1 Phase Commit <http://gharshangupta.blogspot.jp/2015/03/spring-distributed-transactions-using_2.html>`_\
 
 
   .. warning:: **メッセージ受信後にJMSプロバイダとの接続が切れるなどでJMSプロバイダにトランザクションの処理結果が返らない場合**
-    
+
     メッセージ受信後にJMSプロバイダとの接続が切れるなどで、JMSプロバイダにトランザクションの処理結果が返らない場合、トランザクションの扱いはJMSプロバイダに依存する。
     そのため、\ **受信したメッセージの消失などを考慮した設計**\ を行うこと。
     特に、メッセージの消失が絶対に許されないような場合には、\ **メッセージの消失を補う仕組みを用意するか、グローバルトランザクションなどの利用を検討する**\ 必要がある。
@@ -943,7 +943,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
   - :file:`[projectName]-domain/src/main/resources/META-INF/spring/[projectName]-env.xml`
 
    .. code-block:: xml
-     
+
       <!-- (1) -->
       <bean id="sendChainedTransactionManager" class="org.springframework.data.transaction.ChainedTransactionManager">
           <constructor-arg>
@@ -959,7 +959,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
    .. list-table::
       :header-rows: 1
       :widths: 10 90
-     
+
       * - 項番
         - 説明
       * - | (1)
@@ -977,12 +977,12 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
       package com.example.domain.service.todo;
 
-      import javax.inject.Inject; 
+      import javax.inject.Inject;
       import org.springframework.jms.core.JmsMessagingTemplate;
-      import org.springframework.stereotype.Service; 
-      import org.springframework.transaction.annotation.Transactional; 
+      import org.springframework.stereotype.Service;
+      import org.springframework.transaction.annotation.Transactional;
       import com.example.domain.model.Todo;
-      
+
       @Service
       @Transactional("sendChainedTransactionManager")  // (1)
       public class ChainedTransactionalTodoServiceImpl implements ChainedTransactionalTodoService {
@@ -996,7 +996,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
          public void sendMessage(String message) {
              Todo todo = new Todo();
              // omitted
-             
+
              jmsMessagingTemplate.convertAndSend("jms/queue/TodoMessageQueue", todo); // (2)
 
              // omitted
@@ -1096,7 +1096,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
       - | JMS Namespaceを定義する。
         | 値として\ ``http://www.springframework.org/schema/jms``\ を指定する。
         | JMS Namespaceの詳細については、\ `JMS Namespace Support <http://docs.spring.io/autorepo/docs/spring-framework/4.3.5.RELEASE/spring-framework-reference/html/jms.html#jms-namespace>`_\ を参照されたい。
-    * - 
+    * -
       - xsi:schemaLocation
       - | スキーマのURLを指定する。
         | 値に\ ``http://www.springframework.org/schema/jms``\ と\ ``http://www.springframework.org/schema/jms/spring-jms.xsd``\ を追加する。
@@ -1113,11 +1113,11 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
         .. warning::
 
-            \ ``DefaultMessageListenerContainer``\ 内部には独自のキャッシュ機能が備わっている。一方で、MOMの製品によってはMOMで関連リソースをキャッシュする場合もある。両者の管理に不整合が生じないように\ ``cache``\ 属性でキャッシュレベルを指定すること。
+            \ ``DefaultMessageListenerContainer``\ 内部には独自のキャッシュ機能が備わっている。一方で、APサーバ製品やMOM製品によって関連リソースをキャッシュする場合もある。両者の管理に不整合が生じないように\ ``cache``\ 属性でキャッシュレベルを指定すること。
             詳細については、\ `DefaultMessageListenerContainerのJavadoc <http://docs.spring.io/autorepo/docs/spring-framework/4.3.5.RELEASE/javadoc-api/org/springframework/jms/listener/DefaultMessageListenerContainer.html>`_\ を参照されたい。
             本ガイドラインでは、\ ``<jms:listener-container/>``\ の\ ``connection-factory``\ 属性には、\ :ref:`JMSHowToUseConnectionFactory`\ で定義した\ ``ConnectionFactory``\ を指定する。
 
-    * - 
+    * -
       - \ ``concurrency``\
       - | \ ``DefaultMessageListenerContainer``\ が管理するリスナーメソッドごとの並列数に対する上限を指定する。
         | \ ``concurrency``\ 属性のデフォルトは1である。
@@ -1129,23 +1129,23 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
           リスナーメソッド単位で並列数を指定したい場合は、\ ``@JmsListener``\ アノテーションの\ ``concurrency``\ 属性を利用することができる。
 
-    * - 
+    * -
       - \ ``destination-resolver``\
       - | 非同期受信時のDestination名解決で使用する\ ``DestinationResolver``\ のBean名を設定する。
         | \ ``DestinationResolver``\ のBean定義については、\ :ref:`JMSHowToUseDestinationResolver`\ を参照されたい。
         | \ ``destination-resolver``\ 属性を指定していない場合は\ ``DefaultMessageListenerContainer``\ 内で生成された\ ``DynamicDestinationResolver``\ が利用される。
-    * - 
+    * -
       - \ ``factory-id``\
       - | Bean定義を行う\ ``DefaultJmsListenerContainerFactory``\ の名前を設定する。
         | \ ``@JmsListener``\ アノテーションがデフォルトでBean名\ ``jmsListenerContainerFactory``\ を参照するため、\ ``<jms:listener-container/>``\ が一つの場合はBean名を\ ``jmsListenerContainerFactory``\ とすることを推奨する。
-    * - 
+    * -
       - \ ``cache``\
       - | \ ``Connection``\ 、\ ``Session``\ や\ ``Consumer``\ などのキャッシュ対象を決定するために、キャッシュレベルを指定する。
         | デフォルトは\ ``auto``\ である。
         | 後述する\ ``transaction-manager``\ 属性の設定時に、アプリケーションサーバ内でConnectionなどをプールしない場合は、性能向上のため、\ ``consumer``\ を指定することを推奨する。
-        
+
         .. note::
-        
+
            \ ``auto``\ の場合、\ ``transaction-manager``\ 属性の未設定時は、\ ``consumer``\ (\ ``Consumer``\ をキャッシュ)と同じ挙動となる。
            しかし、\ ``transaction-manager``\ 属性の設定時は、グローバルトランザクションなどによるアプリケーションサーバ内のプールを考慮して、\ ``none``\ (キャッシュが無効)と同じ挙動となる。
 
@@ -1168,15 +1168,15 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
     import org.springframework.jms.annotation.JmsListener;
     import org.springframework.stereotype.Component;
-    import com.example.domain.model.Todo; 
+    import com.example.domain.model.Todo;
     @Component
     public class TodoMessageListener {
-   
+
        @JmsListener(destination = "jms/queue/TodoMessageQueue")   // (1)
        public void receive(Todo todo) {
           // omitted
        }
-   
+
     }
 
  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
@@ -1188,7 +1188,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
       - 説明
     * - | (1)
       - | 非同期受信用のメソッドに対し\ ``@JmsListener``\ アノテーションを設定する。\ ``destination``\ 属性には、受信先のDestination名を指定する。
-      
+
 
 
  \ ``@JmsListener``\ アノテーションの主な属性の一覧を以下に示す。
@@ -1304,24 +1304,24 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
  | 動的に送信先のDestinationを変更する場合は\ ``JmsResponse``\ クラスの\ ``forDestination``\ や\ ``forQueue``\ メソッドを用いる。
  | 送信先のDestinationやDestination名を動的に変更することで、任意のDestinationに処理結果を送信することができる。実装例を以下に示す。
- 
+
  - :file:`[projectName]-web/src/main/java/com/example/listener/todo/TodoMessageListener.java`
 
   .. code-block:: java
 
      @JmsListener(destination = "jms/queue/TodoMessageQueue")
      public JmsResponse<Todo> receiveMessageJmsResponse(Todo todo) {
-   
+
          // omitted
-   
+
          String resQueue = null;
-   
+
          if (todo.isFinished()) {
              resQueue = "jms/queue/FinihedTodoMessageQueue";
          } else {
              resQueue = "jms/queue/ActiveTodoMessageQueue";
          }
-   
+
          return JmsResponse.forQueue(todo, resQueue); // (1)
      }
 
@@ -1333,11 +1333,11 @@ DBのトランザクション管理を行う必要があるアプリケーショ
      * - 項番
        - 説明
      * - | (1)
-       - | 処理内容に応じて送信先のQueueを変更する場合は\ ``JmsResponse``\ クラスの\ ``forDestination``\ や\ ``forQueue``\ メソッドを使用する。 
+       - | 処理内容に応じて送信先のQueueを変更する場合は\ ``JmsResponse``\ クラスの\ ``forDestination``\ や\ ``forQueue``\ メソッドを使用する。
          | この例では、\ ``forQueue``\ メソッドを利用して、Destination名から送信を行っている。
-         
+
          .. note::
-         
+
             \ ``JmsResponse``\ クラスの\ ``forQueue``\ メソッドを利用する場合は、文字列であるDestination名を利用する。
             Destination名の解決には、\ ``DefaultMessageListenerContainer``\ に指定した\ ``DestinationResolver``\ が利用される。
 
@@ -1414,7 +1414,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
     import javax.validation.Valid;
     import org.springframework.validation.annotation.Validated;
     import com.example.domain.model.Todo;
-    
+
     @Validated // (1)
     public interface TodoService {
 
@@ -1440,15 +1440,15 @@ DBのトランザクション管理を行う必要があるアプリケーショ
  .. code-block:: java
 
     package com.example.domain.model;
-    
+
     import java.io.Serializable;
     import javax.validation.constraints.Null;
-    
+
     // (1)
     public class Todo implements Serializable {
-    
+
         private static final long serialVersionUID = -1L;
-    
+
         // omitted
 
         @Null
@@ -1459,23 +1459,23 @@ DBのトランザクション管理を行う必要があるアプリケーショ
         private boolean finished;
 
         // omitted
-    
+
         public String getDescription() {
             return description;
         }
-    
+
         public void setDescription(String description) {
             this.description = description;
         }
-    
+
         public boolean isFinished() {
             return finished;
         }
-    
+
         public void setFinished(boolean finished) {
             this.finished = finished;
         }
-    
+
     }
 
 
@@ -1503,7 +1503,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
     public void receive(Todo todo) {
         try {
             todoService.updateTodo(todo); // (1)
-        } catch (ConstraintViolationException e) { // (2) 
+        } catch (ConstraintViolationException e) { // (2)
             // omitted
         }
     }
@@ -1531,7 +1531,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 | データの一貫性を保証する必要がある場合は、トランザクション管理機能を使用する。
 | 非同期受信で使用するSpring JMS の \ ``DefaultMessageListenerContainer``\ には、JMSのトランザクション管理の仕組みが組み込まれている。\ ``listener-container``\ の\ ``acknowledge``\ 属性でその機能を切り替えられる。それを利用した場合の実装例を以下に示す。
 
-    .. note:: 
+    .. note::
 
        メッセージがQueueに戻されると、そのメッセージが再度非同期受信されるため、エラーの原因が解決していない場合は、ロールバック、非同期受信を繰り返すこととなる。
        JMSプロバイダによっては、ロールバック後の再送信回数に閾値を設定でき、再送信された回数が閾値を超えた場合、Dead Letter Queueにメッセージを格納する。
@@ -1559,7 +1559,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
       - 属性名
       - 内容
     * - | (1)
-      - \ ``cache``\ 
+      - \ ``cache``\
       - | \ ``Connection``\ 、\ ``Session``\ や\ ``Consumer``\ などのキャッシュ対象を決定するために、キャッシュレベルを指定する。
         | デフォルトは\ ``auto``\ である。
         | \ :ref:`JMSHowToUseListenerContainer`\ で前述したように、アプリケーションサーバ内でConnectionなどをプールしない場合は\ ``consumer``\ を指定する。
@@ -1573,9 +1573,12 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
  .. warning::
 
-    非同期受信と同期送信・受信を併用し、かつ、同一のトランザクションで管理する場合、\ ``jms:listener-container``\ の\ ``factory-id``\ 属性と\ ``jmsTemplate``\ の\ ``connectionFactory``\ プロパティで指定する\ ``ConnectionFactory``\ のインスタンスを同一にすること。これによって、Springが非同期受信と同期送受信で利用するsessionを同一にするから、同一のトランザクションになる。具体的には以下のような手法が考えられる。以下のいずれの場合も\ ``listener-container``\ の\ ``cache``\ は\ ``none``\ を指定する。
-	* JMS関連リソースをキャッシュをAPサーバのpoolingに任せ、JNDIルックアップ経由で取得したオブジェクトを非同期受信と同期送信・受信の両方でそのまま使用する。
-	* MOM製品が\ ``connectionfactory``\ のcache機能を持っている場合、それを非同期受信と同期送信・受信の両方でそのまま使用する。
+    非同期受信と同期送信・受信を併用し、かつ、単一のトランザクションで管理したい場合、\ ``jms:listener-container``\ の\ ``factory-id``\ 属性と\ ``jmsTemplate``\ の\ ``connectionFactory``\ プロパティで指定する\ ``ConnectionFactory``\ のインスタンスを同一にすること。これによって、Springは非同期受信と同期送受信で利用するsessionを同期するため、単一のトランザクションとなる。
+    このとき、\ ``jms:listener-container``\ および \ ``jmsTemplate``\ の両方でキャッシュを有効にするには、以下のような手段が候補となる。
+    * JMS関連リソースをキャッシュをAPサーバ製品に任せ、JNDIルックアップ経由で取得したオブジェクトを非同期受信と同期送信・受信の両方でそのまま使用する。
+    * MOM製品が\ ``connectionfactory``\ のcache機能を持っている場合、それを非同期受信と同期送信・受信の両方でそのまま使用する。
+    * \ ``org.springframework.jms.connection.CachingConnectionFactory``\ を非同期受信と同期送信・受信の両方でそのまま使用する。
+    いずれの場合も\ ``listener-container``\ の\ ``cache``\ には\ ``none``\ を指定すること。
 
 |
 
@@ -1588,16 +1591,15 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
 
 DBのトランザクション管理を行う必要があるアプリケーションでは、業務の要件をもとにJMSとDBのトランザクションの関連を精査した上でトランザクションの管理方針を決定すること。
+  非同期受信でJMSとDBのトランザクションを連携させるには以下のような方法が考えられるが、3つ目めのJMSとDBのトランザクションを分離させる方法を検討されたい。
 
-　　非同期受信でJMSとDBのトランザクションを連携させるには以下のような方法が考えられるが、3つ目めのJMSとDBのトランザクションを分離させる方法を検討されたい。
-
-　　  #. JTAによるグローバルトランザクションを使用する方法
-  　　#. ”Best Effort 1 Phase Commit”を許容する方法
-  　　#. JMSとDBのトランザクションを分離させる方法
+  #. JTAによるグローバルトランザクションを使用する方法
+  #. ”Best Effort 1 Phase Commit”を使用する方法
+  #. JMSとDBのトランザクションを個別に指定する方法
 
-  同期送信のトランザクション管理(\ :ref:`JMSHowToUseSettingForSyncSendTransactionManagement`\ )でも紹介したようにJTAによるグローバルトランザクションは、プロトコルの特性上、性能面のオーバーヘッドがかかる。そのため、同期送信では”Best Effort 1 Phase Commit”を許容するトランザクション管理方法を紹介したが、非同期受信ではトランザクション構成の想定外のかたちになるため推奨されない。
-　　一般的に、業務要件にもよるがリカバリの観点からDBトランザクション境界よりJMSトランザクション境界を外側に置く。Springの``DefaultMessageListenerContainer``を使用する場合、内部に独自のトランザクション管理機構を持つために、グローバルトランザクションを使用するとDBトランザクション境界がJMSトランザクション境界の外側になってしまう。それによって非同期で受信したメッセージが正常に処理されたのにDBトランザクションがロールバックされる可能性が生じるため、非同期受信では、”Best Effort 1 Phase Commit”を許容する方法は避けるべきである。
-　　以上の理由から、非同期受信ではJMSとDBのトランザクションを分離させる方法が望ましい。
+  同期送信のトランザクション管理(\ :ref:`JMSHowToUseSettingForSyncSendTransactionManagement`\ )でも紹介したようにJTAによるグローバルトランザクションは、プロトコルの特性上、性能面のオーバーヘッドがかかる。そのため、同期送信では”Best Effort 1 Phase Commit”を使用するトランザクション管理方法を紹介したが、非同期受信ではトランザクションが不適切な構成になるため推奨されない。
+  一般的に、リカバリの観点からDBトランザクション境界よりJMSトランザクション境界を外側に置く。Springの\ ``DefaultMessageListenerContainer``\ を使用する場合、内部に独自のトランザクション管理機構を持つために、\ ``jms:listener-container``\ の \ ``transaction-manager``\ 属性を指定すること”Best Effort 1 Phase Commit”を実現しようとすると、DBトランザクション境界がJMSトランザクション境界の外側になってしまう。結果、非同期で受信したメッセージが正常に処理されたにもかかわらず、DBトランザクションがロールバックされる可能性が生じる。
+  よって、非同期受信ではJMSとDBのトランザクションを個別に指定する方法が望ましい。
 
   .. warning::
 
@@ -1608,16 +1610,16 @@ DBのトランザクション管理を行う必要があるアプリケーショ
   本ガイドラインではグローバルトランザクションは使わずに、上記の通りJMSのトランザクションはSpring JMSが内部で実装しているトランザクション管理に委ね、DBのトランザクションをブランクプロジェクトのデフォルトの設定で定義されている\ ``transactionManager``\ で管理する設定例を示す。
 
   - :file:`[projectName]-web/src/main/java/com/example/listener/todo/TodoMessageListener.java`
-  
+
    .. code-block:: java
-   
+
       package com.example.listener.todo;
-      
+
       import javax.inject.Inject;
       import org.springframework.jms.annotation.JmsListener;
       import org.springframework.stereotype.Component;
       import com.example.domain.service.todo.TodoService;
-      import com.example.domain.model.Todo; 
+      import com.example.domain.model.Todo;
       @Component
       public class TodoMessageListener {
           @Inject
@@ -1632,19 +1634,19 @@ DBのトランザクション管理を行う必要があるアプリケーショ
       }
 
   - :file:`[projectName]-domain/src/main/java/com/example/domain/service/todo/TodoServiceImpl.java`
-  
+
    .. code-block:: java
-  
+
       package com.example.domain.service.todo;
-  
+
       import org.springframework.stereotype.Service;
       import org.springframework.transaction.annotation.Transactional;
       import com.example.domain.model.Todo;
-      
+
       @Transactional // (2)
       @Service
       public class TodoServiceImpl implements TodoService {
-          
+
           @Override
           public void update(Todo todo) {
               // omitted
@@ -1733,10 +1735,11 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
   * **メッセージ受信後にJMSプロバイダとの接続が切れた場合などで、DBのトランザクションのみコミットしてしまう場合**
 
-   | 非同期受信を伴う処理をグローバルトランザクションで管理しない場合は、DBトランザクションがコミットされてからJMSトランザクションをコミットするまでの間隔が比較的長い。JMSのトランザクションの扱いはJMSプロバイダに依存するが、その間に例外が発生するとDBのトランザクションはコミットしているため、JMSとDBの状態に不整合が生じる可能性がある。
-   　　具体的には、JMSのトランザクションがロールバックでMOMが同一メッセージを再送することもあれば、送信側の手違いで同一内容のメッセージを複数回送信してしまうことがある。そのような背景で同じメッセージを複数受信した場合でもデータの完全性を保障する必要がある。
-   　　その対策として、\ ``JMSMessageID``\ 、または、\ ``JMSProperty``\ や\ ``Body``\に含まれる、リクエストを一意に特定するための情報を記録する方法がある。
-     メッセージの受信ごとに、過去に記録したそれら情報と受信したメッセージの情報を比較し、一致した場合はそのメッセージが処理済みかどうかを確認し、処理し分けるように設計する。
+   非同期受信を伴う処理をグローバルトランザクションで管理しない場合は、DBトランザクションがコミットされてからJMSトランザクションをコミットするまでの間隔が比較的長い。JMSのトランザクションの扱いはJMSプロバイダに依存するが、その間に例外が発生するとDBのトランザクションはコミットしているため、JMSとDBの状態に不整合が生じる可能性がある。
+   具体的には、JMSのトランザクションをロールバック後に再度同じメッセージを処理することもあれば、送信側によって同一内容のメッセージを複数回送信してしまうことがある。そのような背景で同じメッセージを複数受信した場合でもデータの完全性を保障する必要がある。
+   その対策として、\ ``JMSMessageID``\ 、または、\ ``JMSProperty``\ や\ ``Body``\に含まれる、リクエストを一意に特定するための情報を記録する方法がある。
+   これは、メッセージの受信ごとに過去に記録した情報と比較し、処理の状況に応じて処理し分けることを意味する。
+   なお、以下のとおり、利用する情報によって対応できる事象に差がある。
 
    * \ ``JMSMessageID``\ を記録する場合、メッセージがロールバックされた際の二重処理にのみ対応できる。
    * \ ``JMSProperty``\ や\ ``Body``\の一部を記録する場合、メッセージがロールバックされた際に加えて、異常時などに業務上同一の意味をもつメッセージが複数回送信された際の二重処理にも対応できる。
@@ -1798,7 +1801,7 @@ DBのトランザクション管理を行う必要があるアプリケーショ
     * - | (2)
       - | リスナーメソッドからthrowされた例外を統一的にハンドリングする場合
       - | 入出力エラーなどのシステム例外
-      - | \ ``ErrorHandler``\ 
+      - | \ ``ErrorHandler``\
       - | JMSListenerContainer単位
 
 
@@ -1807,11 +1810,11 @@ DBのトランザクション管理を行う必要があるアプリケーショ
   | メッセージの内容が不正である場合など、ビジネス層で発生した例外をリスナーメソッドで捕捉(try-catch)し、リスナーメソッド単位でハンドリングを行う。
   | トランザクション管理を行う場合、ロールバックが必要なケースは例外を\ ``DefaultMessageListenerContainer``\ にthrowする必要があるため、補足した例外をthrowし直すこと。
   | 実装例を以下に示す。
-  
+
   - :file:`[projectName]-web/src/main/java/com/example/listener/todo/TodoMessageListener.java`
-  
+
    .. code-block:: java
-     
+
      @Inject
      TodoService todoService;
 
@@ -1874,28 +1877,28 @@ DBのトランザクション管理を行う必要があるアプリケーショ
         - | \ ``<jms:listener-container/>``\ の\ ``error-handler``\ 属性にエラーハンドリングクラスのBean名を定義する。
       * - | (2)
         - | エラーハンドリングクラスをBean定義する。
-       
+
 
   実装方法を以下に示す。
 
   - :file:`[projectName]-web/src/main/java/com/example/listener/todo/JmsErrorHandler.java`
-  
+
    .. code-block:: java
-  
+
       package com.example.listener.todo;
-      
+
       import org.springframework.util.ErrorHandler;
       import org.terasoluna.gfw.common.exception.SystemException;
-     
+
       public class JmsErrorHandler implements ErrorHandler {  // (1)
-             
+
          @Override
           public void handleError(Throwable t) { // (2)
               // omitted
               if (t.getCause() instanceof SystemException) {  // (3)
-               
+
                   // omitted system error handling
-               
+
               } else {
                   // omitted error handling
               }
@@ -2001,13 +2004,13 @@ DBのトランザクション管理を行う必要があるアプリケーショ
       - | メッセージングモデルについて設定する。
         | PTP（Queue）モデルは\ ``false``\ 、Pub/Sub（Topic）は\ ``true``\ に設定する。
       - \-
-      - \ ``false``\ 
+      - \ ``false``\
     * - 3.
       - \ ``sessionTransacted``\
       - | セッションでのトランザクション管理をするかどうか設定する。
         | 本ガイドラインでは、後述するトランザクション管理を使用するため、デフォルトのままの\ ``false``\ を推奨する。
       - \-
-      - \ ``false``\ 
+      - \ ``false``\
     * - 4.
       - \ ``sessionAcknowledgeMode``\
       - | \ ``sessionAcknowledgeMode``\ はセッションの確認応答モードを設定する。
@@ -2016,15 +2019,15 @@ DBのトランザクション管理を行う必要があるアプリケーショ
         .. todo::
 
            sessionAcknowledgeModeの詳細については今後追記する。
-           
+
       - \-
-      - | 1 
+      - | 1
     * - 5.
       - \ ``receiveTimeout``\
       - | 同期受信時のタイムアウト時間（ミリ秒）を設定する。未設定の場合、メッセージを受信するまで待機する。
         | 未設定の状態だと、後続の処理に影響が出てしまうため、必ず適切なタイムアウト時間を設定すること。
       - \-
-      - | 0 
+      - | 0
     * - 6.
       - \ ``messageConverter``\
       - | メッセージコンバータを設定する。
@@ -2049,9 +2052,9 @@ DBのトランザクション管理を行う必要があるアプリケーショ
 
     \newpage
 
-(\*1)\ ``org.springframework.jms.support.converter.SimpleMessageConverter``\ 
+(\*1)\ ``org.springframework.jms.support.converter.SimpleMessageConverter``\
 
-(\*2)\ ``org.springframework.jms.support.destination.DynamicDestinationResolver``\ 
+(\*2)\ ``org.springframework.jms.support.destination.DynamicDestinationResolver``\
 
 
 \ ``JmsMessagingTemplate``\ クラスの\ ``receiveAndConvert``\ メソッドにより、メッセージの同期受信を行う。実装例を以下に示す。
@@ -2061,20 +2064,20 @@ DBのトランザクション管理を行う必要があるアプリケーショ
  .. code-block:: java
 
     package com.example.domain.service.todo;
-    
-    import javax.inject.Inject; 
+
+    import javax.inject.Inject;
     import org.springframework.jms.core.JmsMessagingTemplate;
-    import org.springframework.stereotype.Service; 
+    import org.springframework.stereotype.Service;
     import com.example.domain.model.Todo;
-    
+
     @Service
     public class TodoServiceImpl implements TodoService {
         @Inject
         JmsMessagingTemplate jmsMessagingTemplate;
-        
+
         @Override
         public String receiveTodo() {
-       
+
            // omitted
            Todo retTodo = jmsMessagingTemplate.receiveAndConvert("jms/queue/TodoMessageQueue", Todo.class);   // (1)
 
@@ -2123,10 +2126,10 @@ Apache ActiveMQを利用する場合の設定について説明する。
 
    .. code-block:: properties
 
-      # omitted 
+      # omitted
       # (1)
       -Dorg.apache.activemq.SERIALIZABLE_PACKAGES=java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper,com.example.domain.model
-      # omitted 
+      # omitted
 
    .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
    .. list-table::
@@ -2210,7 +2213,7 @@ Apache ActiveMQを利用する場合の設定について説明する。
    .. code-block:: xml
 
       <!-- (1) -->
-      <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory"> 
+      <bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
           <constructor-arg value="tcp://localhost:61616"/>  <!-- (2) -->
       </bean>
 
@@ -2227,7 +2230,7 @@ Apache ActiveMQを利用する場合の設定について説明する。
         - | Apache ActiveMQの起動URLを指定する。起動URLは各環境に沿った値を設定する。
 
  .. note::
- 
+
    開発フェーズなどによって、ConnectionFactoryの設定方法をJNDIとBean定義で切り替えたい場合、
    \ ``[projectName]-env/src/main/resources/META-INF/spring/[projectName]-env.xml``\ に設定を記述すること。
 
@@ -2247,7 +2250,7 @@ Apache ActiveMQを利用する場合の設定について説明する。
  .. code-block:: java
 
      package com.example.domain.service.todo;
-     
+
      import java.io.IOException;
      import javax.inject.Inject;
      import javax.jms.JMSException;
@@ -2256,8 +2259,8 @@ Apache ActiveMQを利用する場合の設定について説明する。
      import javax.jms.TextMessage;
      import org.springframework.jms.core.JmsTemplate;
      import org.springframework.jms.core.MessageCreator;
-     import org.springframework.stereotype.Service; 
-     
+     import org.springframework.stereotype.Service;
+
      @Service
      public class TodoServiceImpl implements TodoService {
 
@@ -2344,7 +2347,7 @@ Apache ActiveMQを利用する場合
       * - | (1)
         - | 一時的にメッセージを格納するApache ActiveMQのサーバのディレクトリを定義する。
           | \ ``jms.blobTransferPolicy.uploadUrl``\ にはデフォルトで\ ``http://localhost:8080/uploads/``\ が設定されており、デフォルトか\ ``brokerURL``\ をオーバーロードすることで一時ファイルの置き場を指定できる。
-          | 例では\ ``/tmp``\ に一時的にファイルを格納している。 
+          | 例では\ ``/tmp``\ に一時的にファイルを格納している。
 
 
 * **送信**
@@ -2357,7 +2360,7 @@ Apache ActiveMQを利用する場合
    .. code-block:: java
 
       package com.example.domain.service.todo;
-      
+
       import java.io.IOException;
       import java.io.InputStream;
       import java.nio.file.Files;
@@ -2372,12 +2375,12 @@ Apache ActiveMQを利用する場合
       import org.springframework.jms.core.JmsTemplate;
       import org.springframework.jms.core.MessageCreator;
       import org.springframework.stereotype.Service;
-      
+
       @Service
       public class TodoServiceImpl implements TodoService {
           @Inject
           JmsTemplate jmsTemplate;
-          
+
           @Override
           public void sendBlobMessage(String inputFilePath) throws IOException {
 
@@ -2396,7 +2399,7 @@ Apache ActiveMQを利用する場合
               }
           }
       }
-     
+
    .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
    .. list-table::
       :header-rows: 1
@@ -2407,7 +2410,7 @@ Apache ActiveMQを利用する場合
       * - | (1)
         - | \ ``BlobMessage``\ を使用するにはApache ActiveMQ独自APIである\ ``org.apache.activemq.ActiveMQSession``\ を使用する。
       * - | (2)
-        - | \ ``ActiveMQSession``\ より、送信データを指定して\ ``BlobMessage``\ を生成する。 
+        - | \ ``ActiveMQSession``\ より、送信データを指定して\ ``BlobMessage``\ を生成する。
           | \ ``createBlobMessage``\ メソッドの引数は\ ``File``\ 、\ ``InputStream``\ 、\ ``URL``\ クラスが指定可能である。
 
 
@@ -2417,11 +2420,11 @@ Apache ActiveMQを利用する場合
 
 
   - :file:`[projectName]-web/src/main/java/com/example/listener/todo/TodoMessageListener.java`
-  
+
    .. code-block:: java
-   
+
       package com.example.listener.todo;
-      
+
       import java.io.IOException;
       import javax.inject.Inject;
       import javax.jms.JMSException;
@@ -2445,7 +2448,7 @@ Apache ActiveMQを利用する場合
    .. code-block:: java
 
       package com.example.domain.service.todo;
-      
+
       import java.io.IOException;
       import java.io.InputStream;
       import java.nio.file.Files;
@@ -2453,10 +2456,10 @@ Apache ActiveMQを利用する場合
       import java.nio.file.Paths;
       import org.apache.activemq.BlobMessage;
       import org.springframework.stereotype.Service;
-      
+
       @Service
       public class TodoServiceImpl implements TodoService {
-      
+
           @Override
           public void fileInputBlobMessage(BlobMessage message) throws IOException {
               try(InputStream is =  message.getInputStream()){   // (1)
@@ -2481,6 +2484,3 @@ Apache ActiveMQを利用する場合
 .. raw:: latex
 
    \newpage
-
-
-
