travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: i-008c1b4-precise-production-2-worker-org-docker.travisci.net:1978d0b6-9b20-44d1-969e-af92ceb3f7d5
version: v2.5.0 https://github.com/travis-ci/worker/tree/da3a43228dffc0fcca5a46569ca786b22991979f
instance: 51268c9:travis:java
startup: 566.455359ms
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: java
Build group: stable
Build dist: precise
Build id: 270270538
Job id: 270270539
Runtime kernel version: 4.8.12-040812-generic
travis-build version: 826b19c20
[34m[1mBuild image provisioning date and time[0m
Thu Feb  5 15:09:33 UTC 2015
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 12.04.5 LTS
Release:	12.04
Codename:	precise
[34m[1mLinux Version[0m
3.13.0-29-generic
[34m[1mCookbooks Version[0m
a68419e https://github.com/travis-ci/travis-cookbooks/tree/a68419e
[34m[1mGCC version[0m
gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mLLVM version[0m
clang version 3.4 (tags/RELEASE_34/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
[34m[1mPre-installed Ruby versions[0m
ruby-1.9.3-p551
[34m[1mPre-installed Node.js versions[0m
v0.10.36
[34m[1mPre-installed Go versions[0m
1.4.1
[34m[1mRedis version[0m
redis-server 2.8.19
[34m[1mriak version[0m
2.0.2
[34m[1mMongoDB version[0m
MongoDB 2.4.12
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mNeo4j version[0m
1.9.4
[34m[1mRabbitMQ Version[0m
3.4.3
[34m[1mElasticSearch version[0m
1.4.0
[34m[1mInstalled Sphinx versions[0m
2.0.10
2.1.9
2.2.6
[34m[1mDefault Sphinx version[0m
2.2.6
[34m[1mInstalled Firefox version[0m
firefox 31.0esr
[34m[1mPhantomJS version[0m
1.9.8
[34m[1mant -version[0m
Apache Ant(TM) version 1.8.2 compiled on December 3 2011
[34m[1mmvn -version[0m
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T17:29:23+00:00)
Maven home: /usr/local/maven
Java version: 1.7.0_76, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "3.13.0-29-generic", arch: "amd64", family: "unix"
travis_fold:end:system_info[0K
travis_fold:start:fix.CVE-2015-7547[0K$ export DEBIAN_FRONTEND=noninteractive
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libc-bin libc-dev-bin libc6-dev
Suggested packages:
  glibc-doc
The following packages will be upgraded:
  libc-bin libc-dev-bin libc6 libc6-dev
4 upgraded, 0 newly installed, 0 to remove and 278 not upgraded.
Need to get 8,856 kB of archives.
After this operation, 13.3 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6-dev amd64 2.15-0ubuntu10.18 [2,948 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-dev-bin amd64 2.15-0ubuntu10.18 [84.5 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-bin amd64 2.15-0ubuntu10.18 [1,178 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6 amd64 2.15-0ubuntu10.18 [4,646 kB]
Preconfiguring packages ...
Fetched 8,856 kB in 0s (36.4 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72019 files and directories currently installed.)
Preparing to replace libc6-dev 2.15-0ubuntu10.10 (using .../libc6-dev_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6-dev ...
Preparing to replace libc-dev-bin 2.15-0ubuntu10.10 (using .../libc-dev-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-dev-bin ...
Preparing to replace libc-bin 2.15-0ubuntu10.10 (using .../libc-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-bin ...
Processing triggers for man-db ...
Setting up libc-bin (2.15-0ubuntu10.18) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libc6 2.15-0ubuntu10.10 (using .../libc6_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6 ...
Setting up libc6 (2.15-0ubuntu10.18) ...
Setting up libc-dev-bin (2.15-0ubuntu10.18) ...
Setting up libc6-dev (2.15-0ubuntu10.18) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
travis_fold:end:fix.CVE-2015-7547[0Ktravis_fold:start:update_libssl1.0.0[0K$ sudo apt-get install ca-certificates libssl1.0.0
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libssl-dev
The following packages will be upgraded:
  ca-certificates libssl-dev libssl1.0.0
3 upgraded, 0 newly installed, 0 to remove and 275 not upgraded.
Need to get 2,842 kB of archives.
After this operation, 41.0 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl-dev amd64 1.0.1-4ubuntu5.39 [1,580 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl1.0.0 amd64 1.0.1-4ubuntu5.39 [1,054 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main ca-certificates all 20160104ubuntu0.12.04.1 [208 kB]
Preconfiguring packages ...
Fetched 2,842 kB in 0s (17.5 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libssl-dev 1.0.1-4ubuntu5.21 (using .../libssl-dev_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl-dev ...
Preparing to replace libssl1.0.0 1.0.1-4ubuntu5.21 (using .../libssl1.0.0_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl1.0.0 ...
Setting up libssl1.0.0 (1.0.1-4ubuntu5.39) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace ca-certificates 20130906ubuntu0.12.04.1 (using .../ca-certificates_20160104ubuntu0.12.04.1_all.deb) ...
Unpacking replacement ca-certificates ...
Processing triggers for man-db ...
Setting up libssl-dev (1.0.1-4ubuntu5.39) ...
Setting up ca-certificates (20160104ubuntu0.12.04.1) ...
Updating certificates in /etc/ssl/certs... 35 added, 26 removed; done.
Running hooks in /etc/ca-certificates/update.d....
Adding debian:ACCVRAIZ1.pem
Adding debian:Atos_TrustedRoot_2011.pem
Adding debian:CA_WoSign_ECC_Root.pem
Adding debian:Certification_Authority_of_WoSign_G2.pem
Adding debian:Certinomis_-_Root_CA.pem
Adding debian:CFCA_EV_ROOT.pem
Adding debian:COMODO_RSA_Certification_Authority.pem
Adding debian:DigiCert_Assured_ID_Root_G2.pem
Adding debian:DigiCert_Assured_ID_Root_G3.pem
Adding debian:DigiCert_Global_Root_G2.pem
Adding debian:DigiCert_Global_Root_G3.pem
Adding debian:DigiCert_Trusted_Root_G4.pem
Adding debian:Entrust_Root_Certification_Authority_-_EC1.pem
Adding debian:Entrust_Root_Certification_Authority_-_G2.pem
Adding debian:E-Tugra_Certification_Authority.pem
Adding debian:GlobalSign_ECC_Root_CA_-_R4.pem
Adding debian:GlobalSign_ECC_Root_CA_-_R5.pem
Adding debian:IdenTrust_Commercial_Root_CA_1.pem
Adding debian:IdenTrust_Public_Sector_Root_CA_1.pem
Adding debian:OISTE_WISeKey_Global_Root_GB_CA.pem
Adding debian:QuoVadis_Root_CA_1_G3.pem
Adding debian:QuoVadis_Root_CA_2_G3.pem
Adding debian:QuoVadis_Root_CA_3_G3.pem
Adding debian:Staat_der_Nederlanden_EV_Root_CA.pem
Adding debian:Staat_der_Nederlanden_Root_CA_-_G3.pem
Adding debian:S-TRUST_Universal_Root_CA.pem
Adding debian:TeliaSonera_Root_CA_v1.pem
Adding debian:T-TeleSec_GlobalRoot_Class_2.pem
Adding debian:TÃœRKTRUST_Elektronik_Sertifika_Hizmet_SaÄŸlayÄ±cÄ±sÄ±_H5.pem
Adding debian:TÃœRKTRUST_Elektronik_Sertifika_Hizmet_SaÄŸlayÄ±cÄ±sÄ±_H6.pem
Adding debian:TWCA_Global_Root_CA.pem
Adding debian:USERTrust_ECC_Certification_Authority.pem
Adding debian:USERTrust_RSA_Certification_Authority.pem
Adding debian:WoSign_China.pem
Adding debian:WoSign.pem
Removing debian:A-Trust-nQual-03.pem
Removing debian:America_Online_Root_Certification_Authority_1.pem
Removing debian:America_Online_Root_Certification_Authority_2.pem
Removing debian:Buypass_Class_3_CA_1.pem
Removing debian:ComSign_Secured_CA.pem
Removing debian:Digital_Signature_Trust_Co._Global_CA_1.pem
Removing debian:Digital_Signature_Trust_Co._Global_CA_3.pem
Removing debian:E-Guven_Kok_Elektronik_Sertifika_Hizmet_Saglayicisi.pem
Removing debian:Entrust.net_Secure_Server_CA.pem
Removing debian:Firmaprofesional_Root_CA.pem
Removing debian:GTE_CyberTrust_Global_Root.pem
Removing debian:RSA_Root_Certificate_1.pem
Removing debian:TC_TrustCenter_Class_2_CA_II.pem
Removing debian:TC_TrustCenter_Universal_CA_I.pem
Removing debian:TDC_Internet_Root_CA.pem
Removing debian:TDC_OCES_Root_CA.pem
Removing debian:TURKTRUST_Certificate_Services_Provider_Root_1.pem
Removing debian:TURKTRUST_Certificate_Services_Provider_Root_2.pem
Removing debian:Thawte_Premium_Server_CA.pem
Removing debian:Thawte_Server_CA.pem
Removing debian:UTN_DATACorp_SGC_Root_CA.pem
Removing debian:ValiCert_Class_1_VA.pem
Removing debian:ValiCert_Class_2_VA.pem
Removing debian:Verisign_Class_4_Public_Primary_Certification_Authority_-_G3.pem
Removing debian:Wells_Fargo_Root_CA.pem
Removing debian:spi-cacert-2008.pem
done.
done.
travis_fold:end:update_libssl1.0.0[0K$ jdk_switcher use oraclejdk8
Switching to Oracle JDK8 (java-8-oracle), JAVA_HOME will be set to /usr/lib/jvm/java-8-oracle
travis_fold:start:git.checkout[0Ktravis_time:start:19f908d0[0K$ git clone --depth=50 --branch=master https://github.com/cbeust/testng.git cbeust/testng
Cloning into 'cbeust/testng'...

travis_time:end:19f908d0:start=1504152135015925536,finish=1504152136315558487,duration=1299632951[0K$ cd cbeust/testng
$ git checkout -qf 4b8def11f38bf1c5345f37d2fe07f5a9505fcd22
travis_fold:end:git.checkout[0K
[33;1mSetting environment variables from repository settings[0m
$ export SONATYPE_USER=[secure]
$ export SONATYPE_PASSWORD=[secure]
$ export SONAR_TOKEN=[secure]
$ export SONAR_GITHUB_OAUTH=[secure]

[33;1mSetting environment variables from .travis.yml[0m
$ export GRADLE_OPTS=-Xmx512m

$ export TERM=dumb
[33;1mDisabling Gradle daemon[0m
travis_time:start:0aa0e8fc[0K$ mkdir -p ~/.gradle && echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties

travis_time:end:0aa0e8fc:start=1504152141605984958,finish=1504152141612237892,duration=6252934[0K$ export PATH=$JAVA_HOME/bin:$PATH
travis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=$HOME/.casher
travis_time:start:08ed0baa[0K$ Installing caching utilities

travis_time:end:08ed0baa:start=1504152141840384138,finish=1504152141868933231,duration=28549093[0Ktravis_time:start:0b570ae8[0K
travis_time:end:0b570ae8:start=1504152141874585834,finish=1504152141878573893,duration=3988059[0Ktravis_time:start:16c8eee4[0K[32;1mattempting to download cache archive[0m
[32;1mfetching master/cache-linux-precise-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--jdk-oraclejdk8.tgz[0m
[32;1mfound cache[0m

travis_time:end:16c8eee4:start=1504152141883131737,finish=1504152145452875124,duration=3569743387[0Ktravis_time:start:170c88c7[0K
travis_time:end:170c88c7:start=1504152145459864405,finish=1504152145464836928,duration=4972523[0Ktravis_time:start:054f9c28[0K[32;1madding /home/travis/.gradle/caches to cache[0m
[32;1mcreating directory /home/travis/.gradle/caches[0m
[32;1madding /home/travis/.gradle/wrapper to cache[0m
[32;1mcreating directory /home/travis/.gradle/wrapper[0m

travis_time:end:054f9c28:start=1504152145472009780,finish=1504152149871039269,duration=4399029489[0Ktravis_fold:end:cache.1[0K$ java -Xmx32m -version
java version "1.8.0_31"
Java(TM) SE Runtime Environment (build 1.8.0_31-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.31-b07, mixed mode)
$ javac -J-Xmx32m -version
javac 1.8.0_31
travis_fold:start:install[0Ktravis_time:start:069654cc[0K$ ./gradlew assemble
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileGroovy NO-SOURCE
:processResources
:classes
:jar
:javadoc
:javadocJar
:sourcesJar
:signArchives SKIPPED
:assemble

BUILD SUCCESSFUL

Total time: 25.243 secs

travis_time:end:069654cc:start=1504152151083871947,finish=1504152176434863966,duration=25350992019[0Ktravis_fold:end:install[0Ktravis_fold:start:before_script[0Ktravis_time:start:0519e490[0K$ if [[ "x$JDK" == *'x9'* ]]; then remove_dir_from_path $JAVA_HOME/bin; export JAVA_HOME=/usr/lib/jvm/java-9-oracle; export PATH=$JAVA_HOME/bin:$PATH; java -Xmx32m -version; fi

travis_time:end:0519e490:start=1504152176440325016,finish=1504152176444869317,duration=4544301[0Ktravis_fold:end:before_script[0Ktravis_time:start:0480fa66[0K$ ./gradlew check --stacktrace
:compileJava UP-TO-DATE
:compileGroovy NO-SOURCE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:compileTestJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileTestGroovy
:processTestResources
:testClasses
:test

Gradle Test Executor 2 STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter

TestNG Running Junit Tests > Junit via TestNG XML STANDARD_ERROR
    org.testng.TestNGException: 
    Failure in JUnit mode for class test.junit.SetNameTest
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:114)
    	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:70)
    	at org.testng.TestRunner$1.run(TestRunner.java:714)
    	at org.testng.TestRunner.runJUnitWorkers(TestRunner.java:1014)
    	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:745)
    	at org.testng.TestRunner.run(TestRunner.java:646)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.AssertionError
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter.onTestStart(TestNGTestResultProcessorAdapter.java:116)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:89)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:83)
    	at com.sun.proxy.$Proxy5.onTestStart(Unknown Source)
    	at org.testng.junit.JUnit4TestRunner$RL.testStarted(JUnit4TestRunner.java:207)
    	at org.junit.runner.notification.SynchronizedRunListener.testStarted(SynchronizedRunListener.java:49)
    	at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:121)
    	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
    	at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:118)
    	at org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(JUnit38ClassRunner.java:37)
    	at junit.framework.TestResult.startTest(TestResult.java:168)
    	at junit.framework.TestResult.run(TestResult.java:119)
    	at junit.framework.TestCase.run(TestCase.java:129)
    	at junit.framework.TestSuite.runTest(TestSuite.java:252)
    	at junit.framework.TestSuite.run(TestSuite.java:247)
    	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:82)
    	... 43 more
Executed test ==> test.guice.GuiceParentModuleTest.testService() with result: SUCCESS
Executed test ==> NoPackageTest.test() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test3TestNG1() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testNonExistentParameter[0](null)() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testSingleString[0](Cedric)() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.noNPEInCountingResults STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.noNPEInCountingResults() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.beforeMethodWithParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.enumParameters() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParameterTest.invalidEnumParameters STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: No enum constant test.parameters.EnumParameterSample.MyEnum.INVALID_VALUE
    	at java.lang.Enum.valueOf(Enum.java:238)
    	at org.testng.internal.Parameters.convertType(Parameters.java:413)
    	at org.testng.internal.Parameters.createParams(Parameters.java:255)
    	at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:289)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:543)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:692)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.parameters.ParameterTest.invalidEnumParameters(ParameterTest.java:86)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.parameters.ParameterTest.invalidEnumParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.stringSingle() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod1() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod2() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod3() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptions() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptionsDeprecatedSyntax() with result: SUCCESS
Executed test ==> test.access.PrivateAccessConfigurationMethods.allAccessModifiersConfiguration() with result: SUCCESS
Executed test ==> test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.CountTest.skippedMethodsShouldBeCounted() with result: SUCCESS
Executed test ==> test.StaticTest$InnerStaticClass.test() with result: SUCCESS
Executed test ==> test.MethodTest.excludeMethodsOnly() with result: SUCCESS
Executed test ==> test.MethodTest.excludePackage() with result: SUCCESS
Executed test ==> test.MethodTest.includeMethodsOnly() with result: SUCCESS
Executed test ==> test.EclipseTest.xmlFileShouldBeRunAtItsPlaceAndNotCopied[0](org.testng.TestRunner@2cbff3dc)() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS
Executed test ==> test.ReporterApiTest.testApi() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldBeCorrect() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldFail() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessors() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessorsTiming() with result: SUCCESS
Executed test ==> test.GraphTest.sort() with result: SUCCESS
Executed test ==> test.reports.UniqueReporterInjectionTest.testPruningOfDuplicateReporter() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test2() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test3() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test4() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test8() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.testOrderingOfEdgesWithSameWeight() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporterWithMultipleClasses() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitXMLReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testTestCaseOrderingInJUnitReportReporterWhenPrioritiesDefined() with result: SUCCESS
Executed test ==> test.ReflectionHelperTest.testMethodCount() with result: SUCCESS
Executed test ==> test.abstractmethods.AbstractTest.abstractShouldRun() with result: SUCCESS
Executed test ==> test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest.testPrivateMethod() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeAndExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeAndExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeShouldWork() with result: SUCCESS
Executed test ==> test.multiple.TestMultiple.multiple() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential1() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential2() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependencyAndFailures() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependsOnMethods() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testOne() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testThree() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testTwo() with result: SUCCESS
Executed test ==> test.NestedStaticTest.nestedClassShouldBeIncluded() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfterMethod() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunBefore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationListenerTest.listenerShouldBeCalled() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestClassFails() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestSuiteFails() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[0]([Ljava.lang.String;@6803dbd0, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[1]([Ljava.lang.String;@1a630bc3, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[2]([Ljava.lang.String;@1437a0c8, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[3]([Ljava.lang.String;@78f81627, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[4]([Ljava.lang.String;@61347678, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[5]([Ljava.lang.String;@40bfda0d, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[0]([Ljava.lang.String;@3a56d0b3, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[1]([Ljava.lang.String;@6a70da44, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[2]([Ljava.lang.String;@4f5fbe70, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[3]([Ljava.lang.String;@3f62c505, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[4]([Ljava.lang.String;@71a1d60d, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[5]([Ljava.lang.String;@4139fdba, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Xml() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[0]([Ljava.lang.String;@cb7b2dd, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[1]([Ljava.lang.String;@46edb4e9, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[2]([Ljava.lang.String;@1b4ad0ee, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[3]([Ljava.lang.String;@240094f9, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[4]([Ljava.lang.String;@5ff9b261, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[5]([Ljava.lang.String;@4e46fa76, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[0]([Ljava.lang.String;@5930e9c5, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[1]([Ljava.lang.String;@5a2a6dd5, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[2]([Ljava.lang.String;@556db1eb, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[3]([Ljava.lang.String;@3893f7ff, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[4]([Ljava.lang.String;@22e2fa1f, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[5]([Ljava.lang.String;@3af6beb8, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[0]([Ljava.lang.String;@6c6acb9f, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[1]([Ljava.lang.String;@526945fa, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[2]([Ljava.lang.String;@5019e34a, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[3]([Ljava.lang.String;@303a787, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[4]([Ljava.lang.String;@1814e8b, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[5]([Ljava.lang.String;@7c78f970, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Xml() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithClassTest() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithMethodTest() with result: SUCCESS
Executed test ==> test.StaticTest.test() with result: SUCCESS
Executed test ==> test.superclass.Test3.shouldExcludeBaseMethods() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWork() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWorkWithConfigurationListener() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderWithNoClassLoader() with result: SUCCESS
Executed test ==> test.failures.FailuresTest.shouldIncludeFailedMethodsFromBaseClass() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineExcludedGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.shouldRunBothMethods() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationOthers() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyExpectedExceptions() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyFactory() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyParameters() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestClassLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestMethodLevel() with result: SUCCESS
Executed test ==> test.jason.MainTest.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyConfigurationGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnMethodsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestGroupsInheritance() with result: SUCCESS
Executed test ==> test.bug90.Bug90Test.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryNotParallel() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelMethods() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelTests() with result: SUCCESS
Executed test ==> test.bug92.Bug92Test.BeforeTestShouldRunOnce() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential3() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded3() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldNotBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.testReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[2](true, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[3](false, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[4](true, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[5](false, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[6](true, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[7](false, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[8](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[9](false, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[2](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[3](false, instances, 2)() with result: SUCCESS

TestNG > Regression2 > test.groupbug.GroupBugTest.shouldOrderByClass STANDARD_OUT
    RUN class test.groupbug.ITCaseOne.beforeClass()
    RUN class test.groupbug.ITCaseOne.one1()
    RUN class test.groupbug.ITCaseOne.one2()
    RUN class test.groupbug.ITCaseOne.afterClass()
    RUN class test.groupbug.ITCaseTwo.beforeClass()
    RUN class test.groupbug.ITCaseTwo.two1()
    RUN class test.groupbug.ITCaseTwo.two2()
    RUN class test.groupbug.ITCaseTwo.afterClass()
    ===== Invoked methods
      ITCaseOne.beforeClassOne()[pri:0, instance:test.groupbug.ITCaseOne@4d87da36] 1300748854
        ITCaseOne.one1()[pri:0, instance:test.groupbug.ITCaseOne@4d87da36] 1300748854
        ITCaseOne.one2()[pri:0, instance:test.groupbug.ITCaseOne@4d87da36] 1300748854
      ITCaseOne.afterClassOne()[pri:0, instance:test.groupbug.ITCaseOne@4d87da36] 1300748854
      ITCaseTwo.beforeClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@7fa2c41d] 2141373469
        ITCaseTwo.two1()[pri:0, instance:test.groupbug.ITCaseTwo@7fa2c41d] 2141373469
        ITCaseTwo.two2()[pri:0, instance:test.groupbug.ITCaseTwo@7fa2c41d] 2141373469
      ITCaseTwo.afterClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@7fa2c41d] 2141373469
    =====

    ===============================================
    Command line suite
    Total tests run: 4, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.groupbug.GroupBugTest.shouldOrderByClass() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldNotUseThreadsIfNotUsingParallel() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseDefaultDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseSpecifiedDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.parameters.ShadowTest.parametersShouldNotBeShadowed() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test2Threads() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test3Threads() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[0](testOverrideSuite, PASS_TEST)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[1](classOverrideSuite, PASS_CLASS)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[2](includeOverrideClass, PASS_INCLUDE)() with result: SUCCESS
Executed test ==> test.thread.TrueParallelTest.shouldRunInParallel() with result: SUCCESS
Executed test ==> test.reports.FailedReporterTest.failedFile() with result: SUCCESS
Executed test ==> test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest.testMethod() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusion() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusionForJunit() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[0](class test.cli.github1517.TestClassWithConfigFailureSample, 3)() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[1](class test.cli.github1517.TestClassWithConfigSkipSample, 2)() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[2](class test.cli.github1517.TestClassWithConfigSkipAndFailureSample, 3)() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount1() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount2() with result: SUCCESS
Executed test ==> test.reports.ReportTest.directoryShouldBeSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.github1090() with result: SUCCESS
Executed test ==> test.reports.ReportTest.oneDirectoryPerSuite() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableEvenWithTimeOut() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableWithListener() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[0](class test.reports.GitHub1148Sample, [Ljava.lang.String;@2caf4671, [Ljava.lang.String;@4a33f8e8)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[1](class test.reports.GitHub148Sample, [Ljava.lang.String;@46fb6159, [Ljava.lang.String;@4fb4bf56)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.shouldHonorSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.verifyIndex() with result: SUCCESS

TestNG > Regression2 > test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass2() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerHasOnlyOneNonNullArgument() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerMethod() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationWithoutTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyConfigurationTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyDataProviderTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyFactoryTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyInvocationCountTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyListenerAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyMyParamTransformerOnlyOneNonNull() with result: SUCCESS

TestNG > Regression2 > test.xml.XmlVerifyTest.handleInvalidSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.xml.XmlVerifyTest.handleInvalidSuites() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.preserverOrderAttribute() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.simple() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue629_InvokedMethodDoesNotRecognizeConfigurationMethod() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue87_method_orderning_with_disable_test_class() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.testMethodsWithExpectedExceptionsShouldShowUpAsPass() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withFailure() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withSuccess() with result: SUCCESS
Executed test ==> test.testng249.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.testng195.AfterMethodTest.testContextShouldBeInitialized() with result: SUCCESS
Executed test ==> test.regression.BeforeTestFailingTest.beforeTestFailingShouldCauseSkips() with result: SUCCESS
Executed test ==> test.testng285.TestNG285Test.verifyBug() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedAndSkippedMethodsShouldBeIncluded() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedMethodWithDataProviderShouldHaveInvocationNumbers() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigs() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsAmidstInheritance() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtSuiteLevel() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtTestLevel() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f1[0](org.testng.TestRunner@2cbff3dc)() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f2[0](org.testng.TestRunner@2cbff3dc)() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyBaseClassTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithAnnotation() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithoutAnnotation() with result: SUCCESS
Executed test ==> test.abstractconfmethod.C.test1() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.factoryPreserve() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.orderShouldBePreservedWithDependencies() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[0]([Ljava.lang.Class;@1dcda457)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[1]([Ljava.lang.Class;@22ea46e8)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[2]([Ljava.lang.Class;@69901d36)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[3]([Ljava.lang.Class;@21c01a28)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[4]([Ljava.lang.Class;@c13ee19)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[5]([Ljava.lang.Class;@6a81a4aa)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[0]([Ljava.lang.String;@3e61955a)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[1]([Ljava.lang.String;@201f82cf)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[2]([Ljava.lang.String;@74b735c1)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[3]([Ljava.lang.String;@792609ce)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[4]([Ljava.lang.String;@69a6f01f)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[5]([Ljava.lang.String;@65dbe1b7)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveOrderValueShouldBeTheDefaultOne() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationInMixedMode() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationSkipWhenNoFailuresExist() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationWhenFailuresExist() with result: SUCCESS
Executed test ==> test_result.GitHub1197Test.testGitHub1197() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterParametersTest.failedSuiteShouldHaveParameters() with result: SUCCESS
Executed test ==> test.listeners.github1319.TestResultInstanceCheckTest.testInstances() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[0](class test.reports.ReporterLogSuccessSample, Listener: onTestSuccess)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[1](class test.reports.ReporterLogSkippedSample, Listener: onTestSkipped)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[2](class test.reports.ReporterLogFailureSample, Listener: onTestFailure)() with result: SUCCESS
Executed test ==> test.testng1396.ParallelByInstancesInterceptorTest.should_honor_interceptor_order_when_running_parallel_instances() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS

TestNG > Regression2 > test.github1417.TestParamsInjectionInBeforeClass.testMethod STANDARD_OUT
    ...
    ... TestNG 6.11.1-SNAPSHOT by CÃ©dric Beust (cedric@beust.com)
    ...

    PASSED: testMethod
    PASSED: testMethod

    ===============================================
        1417_test
        Tests run: 2, Failures: 0, Skips: 0
    ===============================================

    PASSED: testMethod

    ===============================================
        1417_test_regular
        Tests run: 1, Failures: 0, Skips: 0
    ===============================================


    ===============================================
    1417_suite
    Total tests run: 3, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.github1417.TestParamsInjectionInBeforeClass.testMethod() with result: SUCCESS
Executed test ==> test.testng1231.TestExecutionListenerInvocationOrder.testListenerOrder() with result: SUCCESS
Executed test ==> test.order.OrderTest.interleavingMethodsInDifferentClasses() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag() with result: SUCCESS

TestNG > Regression2 > test.github1461.MemoryLeakTestNg.testMemoryLeak STANDARD_OUT
    constructor
    test method 1
    test method 2

    ===============================================
    Command line suite
    Total tests run: 2, Failures: 0, Skips: 0
    ===============================================

    waiting for clean up...
    TestNG finalized
    finalize
    [0] test object(s) still exist.
    waiting for clean up...
Executed test ==> test.github1461.MemoryLeakTestNg.testMemoryLeak() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsUsingGroupsWithFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasExplicitSkipInConfiguration() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasMultipleFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenConfigHasAlwaysRun() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInABaseClass() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInSuiteConfigs() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasException() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasExceptionInInheritance() with result: SUCCESS
Executed test ==> test.factory.github328.GitHub328Test.testFactoryExecutionWhenNoIncludedTests() with result: SUCCESS
Executed test ==> test.testng106.TestNG106.testFailingBeforeSuiteShouldSkipAllTests() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithListenerViaSuiteXml() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithoutListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testInstanceBasedDataProviderInformation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleFactoriesShareSameDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleMethodsFactoriesShareSampleDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleTestMethodsShareSameDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerAnnotationAndInvolvingInheritance() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerViaSuiteXml() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithoutListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testStaticDataProviderInformation() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterModificationFromListener() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterSetFromListener() with result: SUCCESS
Executed test ==> test.test111.Test1.testAbstract() with result: SUCCESS
Executed test ==> test.test111.Test1.test() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClasses() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClassesAndDifferentPackage() with result: SUCCESS
Executed test ==> test.listeners.github551.Test551.testExecutionTimeOfFailedConfig() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.verify() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.threadPoolAndTimeOutShouldFail() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.verify() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f1() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f2() with result: SUCCESS
Executed test ==> test.listeners.ResultEndMillisTest.endMillisShouldBeNonNull() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.aggregateListeners() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldBeOnlyRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkFromAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkWithManyTestMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.failureBeforeAfterMethod() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.invokedMethodListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.listenerRegistration STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
Executed test ==> test.listeners.ListenerTest.listenerRegistration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.listenerShouldBeCalledBeforeConfiguration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodInterceptorShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodListenersShouldNotBeCalledForSkippedMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.setStatusShouldWorkInListener() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.shouldAttachOnlyOneInstanceOfTheSameListenerClassPerTest() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenerInListernersAnnotationShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyIdenticalTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldWork() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.testFailATestFromOnTestStart STANDARD_OUT
    In onTestStart
Executed test ==> test.listeners.ListenerTest.testFailATestFromOnTestStart() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.testListenerCallInvocation() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndInvokedMethodListenerTest.bothListenersShouldRun() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndConfigurationListenerTest.bothListenersShouldRun() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithXml() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithoutListener() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldFail() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSkip() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSucceed() with result: SUCCESS

TestNG > Listeners > test.multiplelisteners.TestMaker.run STANDARD_ERROR
    [TestNG] Reporter test.multiplelisteners.SimpleReporter@3fd06e0e failed
    java.lang.RuntimeException: java.lang.NoSuchFieldException: m_configuration
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:31)
    	at org.testng.TestNG.generateReports(TestNG.java:1213)
    	at org.testng.TestNG.run(TestNG.java:1138)
    	at test.multiplelisteners.TestMaker.run(TestMaker.java:26)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.NoSuchFieldException: m_configuration
    	at java.lang.Class.getDeclaredField(Class.java:2062)
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:24)
    	... 52 more
Executed test ==> test.multiplelisteners.TestMaker.run() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnce() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnceInMultiTestContext() with result: SUCCESS
Executed test ==> test.listeners.github1296.GitHub1296Test.test_number_of_call_of_configuration_listener() with result: SUCCESS

TestNG > Reflection STANDARD_OUT
    exactMatchDP:
    s0, [[Ljava.lang.Object;@3f204c94
    s0, [[Ljava.lang.Object;@4018fa88
    s0, [[Ljava.lang.Object;@e79127e
    s0, [[Ljava.lang.Object;@62f2c78f
    s0, [[Ljava.lang.Object;@5f8b63a9
    s1, [[Ljava.lang.Object;@58401e6a
    s1, [[Ljava.lang.Object;@1e6c1dfe
    s1, [[Ljava.lang.Object;@6a567f03
    s1, [[Ljava.lang.Object;@6ec4cfcb
    s1, [[Ljava.lang.Object;@362f3f37
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[0]([[Ljava.lang.Object;@3f204c94, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[1]([[Ljava.lang.Object;@4018fa88, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[2]([[Ljava.lang.Object;@e79127e, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[3]([[Ljava.lang.Object;@62f2c78f, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[4]([[Ljava.lang.Object;@5f8b63a9, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0())() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[5]([[Ljava.lang.Object;@58401e6a, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[6]([[Ljava.lang.Object;@1e6c1dfe, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[7]([[Ljava.lang.Object;@6a567f03, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[8]([[Ljava.lang.Object;@6ec4cfcb, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[9]([[Ljava.lang.Object;@362f3f37, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
    matchArrayEndingDP:
    s0, [[Ljava.lang.Object;@4b821196
    s0, [[Ljava.lang.Object;@4cbd462
    s0, [[Ljava.lang.Object;@7560c2e1
    s0, [[Ljava.lang.Object;@17f1794f
    s0, [[Ljava.lang.Object;@4c24d486
    s1, [[Ljava.lang.Object;@169661a4
    s1, [[Ljava.lang.Object;@6592de5d
    s1, [[Ljava.lang.Object;@7935e8a1
    s1, [[Ljava.lang.Object;@135f93e5
    s1, [[Ljava.lang.Object;@36614b6b
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[0]([[Ljava.lang.Object;@4b821196, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[1]([[Ljava.lang.Object;@4cbd462, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,float[],org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[2]([[Ljava.lang.Object;@7560c2e1, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[],org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[3]([[Ljava.lang.Object;@17f1794f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[4]([[Ljava.lang.Object;@4c24d486, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[5]([[Ljava.lang.Object;@169661a4, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[6]([[Ljava.lang.Object;@6592de5d, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[7]([[Ljava.lang.Object;@7935e8a1, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,float[],org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[8]([[Ljava.lang.Object;@135f93e5, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[9]([[Ljava.lang.Object;@36614b6b, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@116accae) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@116accae)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@3f36c95) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@3f36c95)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@d02fedf) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@d02fedf)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@1fd6a5c7) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@1fd6a5c7)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@1dcede60, [Ljava.lang.Object;@55ec39ba) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@1dcede60, [Ljava.lang.Object;@55ec39ba)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@79fa5f23, [Ljava.lang.Object;@55ec39ba) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, null, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@79fa5f23, [Ljava.lang.Object;@55ec39ba)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@263969b4, [Ljava.lang.Object;@55ec39ba) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@263969b4, [Ljava.lang.Object;@55ec39ba)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@909e93, [Ljava.lang.Object;@55ec39ba) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@909e93, [Ljava.lang.Object;@55ec39ba)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[0](class org.testng.TestRunner)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[1](interface org.testng.ITestContext)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[2](class test.reflect.TestContextJustForTesting)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[0](class java.lang.Object)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[1](class java.lang.Class)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[2](interface java.sql.Connection)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@5f87885f, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@5f87885f, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@7ac0dc0a, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@7ac0dc0a, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@723a0188, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@723a0188, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@365633a1, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@365633a1, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@609ee4e1, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@609ee4e1, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@797508ef, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@797508ef, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@789cdd90, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri0(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@18ca6a7c"
    ITestContext is "org.testng.TestRunner@5ed20faa"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@63a8bdc3"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@789cdd90, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@7d469c7b, org.testng.TestRunner@5ed20faa, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri1(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@36b3394e"
    ITestContext is "org.testng.TestRunner@5ed20faa"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@10d3dcfe"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@7d469c7b, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@59bf3fdb, org.testng.TestRunner@5ed20faa, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: goodTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@59bf3fdb, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@ceed552, org.testng.TestRunner@5ed20faa, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: badTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@ceed552, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@326a1396, org.testng.TestRunner@5ed20faa, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: mixedArgs([Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=[Ljava.lang.String;, declaredAnnotations=[]}, Parameter{index=3, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.Boolean) true,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@326a1396, org.testng.TestRunner@5ed20faa, null)() with result: SUCCESS
Executed test ==> test.inject.InjectTestContextTest.injectionAndParameters[0](Cedric, org.testng.TestRunner@2c6c767d)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[0](a)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[1](b)() with result: SUCCESS
Executed test ==> test.inject.InjectTestResultTest.verifyTestResultInjection() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[0](1, org.testng.TestRunner@2c6c767d, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[1](2, org.testng.TestRunner@2c6c767d, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[0](org.testng.TestRunner@2c6c767d, 1, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[1](org.testng.TestRunner@2c6c767d, 2, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[0](1, a, org.testng.TestRunner@2c6c767d)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[1](2, b, org.testng.TestRunner@2c6c767d)() with result: SUCCESS

TestNG > Injection STANDARD_ERROR
    :::WARNING:::
    Missing one or more parameters that are being injected by the data provider. Please add the below arguments to the method.
    Method: withInjection([Parameter{index=0, type=java.lang.reflect.Method, declaredAnnotations=[]}])
    Arguments: [(java.lang.reflect.Method) public void test.inject.CC.f()]
Executed test ==> test.inject.NoInjectionTest.withInjection[0](public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withoutInjection[0](public void test.inject.CC.f())() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[0](class test.inject.NativeInjectionTestSamples$BadBeforeSuiteSample, beforeSuite, Can inject only one of <ITestContext, XmlTest> into a @BeforeSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[1](class test.inject.NativeInjectionTestSamples$BadBeforeTestSample, beforeTest, Can inject only one of <ITestContext, XmlTest> into a @BeforeTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[2](class test.inject.NativeInjectionTestSamples$BadBeforeClassSample, beforeClass, Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[3](class test.inject.NativeInjectionTestSamples$BadBeforeMethodSample, beforeMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[4](class test.inject.NativeInjectionTestSamples$BadAfterMethodSample, afterMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[5](class test.inject.NativeInjectionTestSamples$BadAfterClassSample, afterClass, Can inject only one of <ITestContext, XmlTest> into a @AfterClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[6](class test.inject.NativeInjectionTestSamples$BadAfterTestSample, afterTest, Can inject only one of <ITestContext, XmlTest> into a @AfterTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[7](class test.inject.NativeInjectionTestSamples$BadAfterSuiteSample, afterSuite, Can inject only one of <ITestContext, XmlTest> into a @AfterSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[8](class test.inject.NativeInjectionTestSamples$BadBeforeGroupsSample, beforeGroups, Can inject only one of <ITestContext, XmlTest> into a @BeforeGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[9](class test.inject.NativeInjectionTestSamples$BadAfterGroupsSample, afterGroups, Can inject only one of <ITestContext, XmlTest> into a @AfterGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.Github1298Test.testPlugin() with result: SUCCESS
Executed test ==> test.configuration.BeforeMethodTest.mainTest() with result: SUCCESS
Executed test ==> test.sample.Basic1.basic1() with result: SUCCESS
Executed test ==> test.Misc.makeSureSetUpWithParameterWithNoParametersFails() with result: SUCCESS
Executed test ==> test.sample.Basic2.basic2() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_first0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_premiere1() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentGroupsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethods() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithNonExistentMethod() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithSkip() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentWithDataProvider() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.instanceDependencies() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[0]([Ljava.lang.Class;@500f1a99, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[1]([Ljava.lang.Class;@6bfc12f, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[2]([Ljava.lang.Class;@55690744, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[3]([Ljava.lang.Class;@215b764c, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.multipleSkips() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[0](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@31872167, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[1](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@544f8b1c, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[2](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@3cd5d91b, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[3](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@462664d0, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[4](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@40c0f8b8, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[5](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@1ec85d57, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[6](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@4b4a7520, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[7](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@4657d9a2, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleSkip() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentTest.test2() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.canBeRunAnytime() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneB() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one[0](Cedric)() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentConfigurationMethods.verifyDependents() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyDependsOnGroups() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyGroupsAcrossClasses() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups1AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups2AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnMethodsAlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.MultiGroupTest.verifyDependsOnMultiGroups() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion2() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion3() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion4() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitMethodInclusion() with result: SUCCESS
Executed test ==> test.dependent.ClassWide1Test.m1() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.send() with result: SUCCESS
Executed test ==> test.dependent.DepBugVerifyTest.verify() with result: SUCCESS
Executed test ==> test.dependent.DependsOnProtectedMethodTest.verifyBeforeInvocations() with result: SUCCESS
Executed test ==> test.dependsongroup.DependsOnGroupsTest.methodsShouldBeGroupedByClasses() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.dontGroupByInstances() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.groupByInstances() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[0]([Ljava.lang.String;@19651ae2)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[1]([Ljava.lang.String;@f2fe4c7)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[2]([Ljava.lang.String;@2446dafd)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[3]([Ljava.lang.String;@64531694)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[4]([Ljava.lang.String;@6110bca9)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[5]([Ljava.lang.String;@70b572b8)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[0]([Ljava.lang.String;@5a08863b)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[1]([Ljava.lang.String;@1613af5a)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[2]([Ljava.lang.String;@6846fd7f)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[3]([Ljava.lang.String;@2d68572a)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[4]([Ljava.lang.String;@2fd2e562)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[5]([Ljava.lang.String;@74d64dfd)() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingGroup() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second1() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.secondA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.secondA() with result: SUCCESS
Executed test ==> test.dependent.ClassWide2Test.m2() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.get() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.third0() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.thirdA() with result: SUCCESS
Executed test ==> test.SampleInheritance.baseMethod() with result: SUCCESS
Executed test ==> test.SampleInheritance.configurationsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.setVerify() with result: SUCCESS
Executed test ==> test.inheritance.testng739.TestNG739.test_classes_should_be_skipped_when_a_before_class_fails() with result: SUCCESS
Executed test ==> test.inheritance.testng234.PolymorphicFailureTest.superclassFailureShouldCauseFailure() with result: SUCCESS

TestNG > Inheritance > test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails STANDARD_OUT
    ===== Invoked methods
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class1@7a49395c] 2051619164
      Class1.beforeClass1()[pri:0, instance:test.inheritance.testng471.Class1@7a49395c] 2051619164
      Class1.beforeMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@7a49395c] 2051619164
        Class1.test1_1()[pri:0, instance:test.inheritance.testng471.Class1@7a49395c] 2051619164
      Class1.afterMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@7a49395c] 2051619164
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.beforeClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
        Class2.test2_1()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
        Class2.test2_2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      Class2.afterClass2()[pri:0, instance:test.inheritance.testng471.Class2@673e81d] 108259357
      SuperClass2.beforeSuperClass2()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.beforeClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
        Class3.test3_1()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
        Class3.test3_2()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
      Class3.afterClass3()[pri:0, instance:test.inheritance.testng471.Class3@6e51107c] 1850806396
    =====

    ===============================================
    Command line suite
    Total tests run: 7, Failures: 1, Skips: 1
    Configuration Failures: 1, Skips: 2
    ===============================================

Executed test ==> test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails() with result: SUCCESS
Executed test ==> test.SampleInheritance.testBooleans() with result: SUCCESS
Executed test ==> test.SampleInheritance.inheritedMethodsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.verify() with result: SUCCESS

TestNG > Inheritance STANDARD_OUT
    ===== Invoked methods
      BaseSampleInheritance.baseConfiguration()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
      SampleInheritance.configuration0()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
      BaseSampleInheritance.configuration1()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
      SampleInheritance.configuration2()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
        BaseSampleInheritance.baseMethod()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
        SampleInheritance.configurationsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
        ClassScopeTest.setVerify()[pri:0, instance:test.inheritance.ClassScopeTest@34f4fd56] 888470870
        TestNG739.test_classes_should_be_skipped_when_a_before_class_fails()[pri:0, instance:test.inheritance.testng739.TestNG739@3cb9998] 63674776
        PolymorphicFailureTest.superclassFailureShouldCauseFailure()[pri:0, instance:test.inheritance.testng234.PolymorphicFailureTest@7b9960ab] 2073649323
        TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails()[pri:0, instance:test.inheritance.testng471.TestNG471@68942cc3] 1754541251
        BaseSampleInheritance.testBooleans()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
        SampleInheritance.inheritedMethodsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@16d7e69b] 383248027
        ClassScopeTest.verify()[pri:0, instance:test.inheritance.ClassScopeTest@34f4fd56] 888470870
    =====
Executed test ==> test.sample.Scope.outerDeprecated[0](out)() with result: SUCCESS

TestNG > Test outer scope STANDARD_OUT
    ===== Invoked methods
        Scope.outerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@6e7131b2]out  1852912050
    =====
Executed test ==> test.sample.Scope.innerDeprecated[0](in)() with result: SUCCESS

TestNG > Test inner scope STANDARD_OUT
    ===== Invoked methods
        Scope.innerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@32d6d5f]in  53308767
    =====
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS

TestNG > AfterClassCalledAtEnd STANDARD_OUT
    ===== Invoked methods
      AfterClassCalledAtEnd.before1Class()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
        AfterClassCalledAtEnd.test1()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
        AfterClassCalledAtEnd.test2()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
        AfterClassCalledAtEnd.test3()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
      AfterClassCalledAtEnd.afterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
      BaseAfterClassCalledAtEnd.baseAfterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@2d68b51d] 761836829
    =====
Executed test ==> test.triangle.Child1.child1() with result: SUCCESS
Executed test ==> test.triangle.Child1.child1a() with result: SUCCESS
Executed test ==> test.triangle.Child2.child2() with result: SUCCESS

TestNG > Triangle STANDARD_OUT
    ===== Invoked methods
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child1@59fbc3ea] 1509671914
        Child1.child1()[pri:0, instance:test.triangle.Child1@59fbc3ea] 1509671914
        Child1.child1a()[pri:0, instance:test.triangle.Child1@59fbc3ea] 1509671914
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child1@59fbc3ea] 1509671914
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child2@6d401188] 1832915336
        Child2.child2()[pri:0, instance:test.triangle.Child2@6d401188] 1832915336
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child2@6d401188] 1832915336
    =====
Executed test ==> test.triangle.CheckCount.testCheckCount[0](2)() with result: SUCCESS
Executed test ==> test.triangle.CheckCount.testCheckCountDeprecated[0](2)() with result: SUCCESS

TestNG > CheckTrianglePost STANDARD_OUT
    ===== Invoked methods
        CheckCount.testCheckCount(java.lang.String)[pri:0, instance:test.triangle.CheckCount@51a35a7f]2  1369660031
        CheckCount.testCheckCountDeprecated(java.lang.String)[pri:0, instance:test.triangle.CheckCount@51a35a7f]2  1369660031
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 1 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@12f53123] 318058787
        First.first2()[pri:0, instance:test.classgroup.First@12f53123] 318058787
        Second.verify()[pri:0, instance:test.classgroup.Second@44100ad5] 1141902037
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 2 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@43121a99] 1125259929
        First.first2()[pri:0, instance:test.classgroup.First@43121a99] 1125259929
        Second.verify()[pri:0, instance:test.classgroup.Second@78d557f1] 2027247601
    =====
Executed test ==> test.factory.TestClassAnnotationTest.testOne() with result: SUCCESS
Executed test ==> test.factory.FactoryWithDataProviderTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryOrderMainTest.factoriesShouldBeInvokedInTheOrderOfCreation() with result: SUCCESS
Executed test ==> test.factory.FactoryFailureTest.factoryThrowingShouldNotRunTests() with result: SUCCESS
Executed test ==> test.factory.FactoryInSuperClassTest.factoryInSuperClassShouldWork() with result: SUCCESS
Executed test ==> test.factory.classconf.XClassOrderWithFactoryTest.testBeforeAfterClassInvocationsWithFactory() with result: SUCCESS
Executed test ==> test.factory.FactoryInterleavingTest.methodsShouldBeInterleaved() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithLocalDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNotStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.DisabledFactoryTest.disabledFactoryShouldNotRun() with result: SUCCESS
Executed test ==> test.factory.FactoryAndTestMethodTest$NullArgsTest.test() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.doubleFactoryMethodShouldWork() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithBadFactoryMethodReturnType() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithNonStaticFactoryMethod() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testNonPublicFactoryMethodShouldWork() with result: SUCCESS

TestNG > Factory > test.factory.EmptyFactoryDataProviderTest.test STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 0, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.factory.EmptyFactoryDataProviderTest.test() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnEmptyConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnIntConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnStringConstructor() with result: SUCCESS
Executed test ==> test.factory.nested.GitHub1307Test.testGitHub1307() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 42]() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 43]() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.FactoryInSeparateClassTest.checkSum() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryWithInstanceInfoTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.testWithOnlyOneThread() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInNonParallel() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[0](tests)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[1](methods)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[2](classes)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[3](instances)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[4](none)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[5](true)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[6](false)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.verifyInvocationTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.noTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutInParallelTestsFromXml() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnSuiteTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnTestTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.twoDifferentTests() with result: SUCCESS

TestNG > TimeOut > test.timeout.TimeOutIntegrationTest.testGitHub1314 STANDARD_OUT
    Test1
    Test2
Executed test ==> test.timeout.TimeOutIntegrationTest.testGitHub1314() with result: SUCCESS
Executed test ==> test.timeout.TimeOutIntegrationTest.testTimeOutWhenParallelIsTest() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.invocationCount() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatFails() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatSucceeds() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyAttributeShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldNotStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueTrue() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.factoryReceivesContext() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnSuite() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnTestNG() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CombinedTestAndObjectFactoryTest.combinedTestAndObjectFactory() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnSuiteShouldWork() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnTestNGShouldWork() with result: SUCCESS
Executed test ==> test.ParameterConstructorTest.verify() with result: SUCCESS
Executed test ==> test.Exclude.included1() with result: SUCCESS
Executed test ==> test.Exclude.included2() with result: SUCCESS
Executed test ==> test.Exclude.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value1)() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value2)() with result: SUCCESS
Executed test ==> test.IndividualMethodsTest.testMethod() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest$LocalTestClass.helloWorld() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest.testDescriptionInclusion() with result: SUCCESS
Executed test ==> test.inheritance.DChild_2.test() with result: SUCCESS
Executed test ==> test.inheritance.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.greaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.testNoMethodsAreExecutedWithNoMatchFound() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellTest.onlyGroup1() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellNegativeTest.testNegativeScenario() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineGreaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineMultipleSelectors() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNoTest1Selector() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineTestWithXmlFile() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.programmaticXmlSuite() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite() with result: SUCCESS
Executed test ==> test.interleavedorder.InterleavedInvocationTest.invocationOrder() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyExternal[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyStatic[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[0](10, verifyTen)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[1](5, verifyFive)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verifySix() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.duplicateDataProviders STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Found two providers called &apos;duplicate&apos; on class test.dataprovider.DuplicateDataProviderSample
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:432)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:614)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.duplicateDataProviders(FailingDataProviderTest.java:20)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.duplicateDataProviders() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProvider STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: expected exception from @DP
    	at test.dataprovider.FailingDataProviderSample.throwsExpectedException(FailingDataProviderSample.java:11)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProvider(FailingDataProviderTest.java:13)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProvider() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProvider() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProviderWithInvocationNumber() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test2() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.allMethodsShouldBeInvoked() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.booleanTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classInjectionTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.configurationAndDataProvidersTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorOrMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.createDataTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.dataProviderAsTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.emptyDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.failedDataProviderShouldCauseSkip() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.iTestNGMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.inheritedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.instanceDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.methodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.mixedVarArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.oneDimDataProviderShouldWork() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.parallelDataProviderSample() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.should_prefer_dataProvider_explicit_name() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderSampleWithoutGuiceTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderTest() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Data Provider public java.lang.Object[][] test.dataprovider.Github1509TestClassSample.getData() returned a null value
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:117)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull(DataProviderTest.java:330)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testExceptions() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testInstanceFactoryTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testNG411Test() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.unnamedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.varArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore1.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore2.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestAfter.testAfter() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationInheritGroupsSampleTest.test1() with result: SUCCESS
Executed test ==> test.nested.GarfTest.testGarf() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue599() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue862() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.g1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.run() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.verify() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsThatStartWithTest() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsWithSetup() with result: SUCCESS
Executed test ==> test.JUnitTest1.setNameShouldBeInvoked() with result: SUCCESS
Executed test ==> test.JUnitTest1.setUpFailingShouldCauseMethodsToBeSkipped() with result: SUCCESS
Executed test ==> test.JUnitTest1.testAbstract() with result: SUCCESS
Executed test ==> test.JUnitTest1.testNewInstance() with result: SUCCESS
Executed test ==> test.JUnitTest1.testSuite() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing2() with result: SUCCESS
Executed test ==> test.CommandLineTest.suiteNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testMethodParameter() with result: SUCCESS
Executed test ==> test.CommandLineTest.testNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testUseDefaultListenersArgument() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[0]([Ljava.lang.Class;@10363773, [Ljava.lang.String;@54e5ccf, [Ljava.lang.String;@514f006a, [Ljava.lang.String;@103172f)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[1]([Ljava.lang.Class;@20faf46a, [Ljava.lang.String;@7bc02f31, [Ljava.lang.String;@4756f20d, [Ljava.lang.String;@5264be2a)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[2]([Ljava.lang.Class;@aab7b5d, [Ljava.lang.String;@7b8b1e1, [Ljava.lang.String;@4b6d4b79, [Ljava.lang.String;@7292f93b)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[3]([Ljava.lang.Class;@262dac59, [Ljava.lang.String;@35582e22, [Ljava.lang.String;@50eba708, [Ljava.lang.String;@3d3f94ea)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[4]([Ljava.lang.Class;@64297c46, [Ljava.lang.String;@1fac609f, [Ljava.lang.String;@499da48b, [Ljava.lang.String;@822f57c)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[5]([Ljava.lang.Class;@63bb5409, [Ljava.lang.String;@66770d16, [Ljava.lang.String;@67bb0bcd, [Ljava.lang.String;@32763b5a)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[6]([Ljava.lang.Class;@5da19811, [Ljava.lang.String;@37680802, [Ljava.lang.String;@2dd3b309, [Ljava.lang.String;@74f744de)() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.easyGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.reporterWithSpockSampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.specialNameGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.spockSampleShouldWork() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testDOSPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testUnixPathResolution() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testA() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testAB() with result: SUCCESS
Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInConfigurationMethods() with result: SUCCESS

TestNG > SkipExceptions > test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 3, Failures: 1, Skips: 1
    ===============================================

Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods() with result: SUCCESS
Executed test ==> test.skipex.SkipAndExpectedTest.shouldSkip() with result: SUCCESS

TestNG > RetryAnalyzer > test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts STANDARD_OUT
    Test Called : Test8
    Test Called : Test3
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test0
    Test Called : Test7
    Test Called : Test2
    Test Called : Test1
    Test Called : Test9
    Test Called : Test6
    Test Called : Test4
Executed test ==> test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithNonzeroOnFailure() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroAfterSuccessfulRetry() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroOnSuccess() with result: SUCCESS
Executed test ==> test.retryAnalyzer.dataprovider.RetryAnalyzerWithDataProviderTest.testRetryCounts() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldNotRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.noMethodsShouldRun() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.nullMethodInterceptorWorksInTestngXml() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.shouldNotLockUpWithInterceptorThatRemovesMethods() with result: SUCCESS
Executed test ==> test.methodinterceptors.Issue392Test.AfterClass_method_should_be_fired_when_IMethodInterceptor_removes_test_methods() with result: SUCCESS
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptors() with result: SUCCESS

TestNG > MethodInterceptor > test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsMapShouldFail() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricScalar() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareBooleanArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareCharacterArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareDoubleArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareFloatArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareIntArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLargeArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLongArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareShortArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.mapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullCollectionAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertNoOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.setAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_1() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_2() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_3() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.doubleNaNAssertion() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsDetectsTypeMismatchesViaExplicitTypeHint() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsIncludesAnInformativeDefaultMessage() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsRequiresAnExceptionToBeThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsReturnsTheSameObjectThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsWrapsAndPropagatesUnexpectedExceptions() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.intArray_Issue4() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderFailure() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderSuccess() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.setsSuccess() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArrayAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInIterablesAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListAndMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideIterableAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeepWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertNotEquals() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoin() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.escapeUnicode() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.joinTwoStringsWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testCreateInstance1WithOneArgStringParamForConstructor() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testGetAvailableMethods() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testGetAvailableMethodsWhenOverrdingIsInvolved() with result: SUCCESS
Executed test ==> test.issue1430.TestFileToClass.testFileToClass() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$RedundantGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$UniqueGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithRedundantGroups() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithUniqueGroups() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[0]([Ljava.lang.Class;@1b7b5ff0, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[1]([Ljava.lang.Class;@481797c5, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[2]([Ljava.lang.Class;@3b78f5e0, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[3]([Ljava.lang.Class;@1e7af7b1, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[4]([Ljava.lang.Class;@564df1d, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[5]([Ljava.lang.Class;@13349898, 4, 0, 4)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[6]([Ljava.lang.Class;@37c0415b, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[7]([Ljava.lang.Class;@61095fc1, 1, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[8]([Ljava.lang.Class;@18925891, 2, 3, 3)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[9]([Ljava.lang.Class;@2fb92bed, 0, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[10]([Ljava.lang.Class;@5d602408, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[11]([Ljava.lang.Class;@1b918a96, 8, 0, 8)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[12]([Ljava.lang.Class;@2f04980e, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithTest.nestedA() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithInheritedTest.nestedWithInheritedTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceWithNoModules() with result: SUCCESS
Executed test ==> test.guice.GuiceInheritanceTest.singletonShouldWork() with result: SUCCESS
Executed test ==> test.guice.GuiceModuleFactoryTest.singletonShouldWork() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingExtendedListenerInstance() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingSimpleListenerInstance() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[0](a1)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[1](a2)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[2](a3)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[3](a4)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[0](goodWithDoctype.xml, true)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[2](badWithDoctype.xml, false)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[4](issue174.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroups() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroupsWithRun() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkNoError STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkNoError() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkTestNamesForProgrammaticSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkProgrammaticSuitesFails() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifyBeforeGroupUseAppropriateInstance() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifySingleInvocation() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyBothAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyIteratorDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyParametersAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassThreadTest.beforeClassMethodsShouldRunInParallel() with result: SUCCESS
Executed test ==> test.configuration.MethodCallOrderTest.realTest() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassWithDisabledTest.afterClassShouldRunEvenWithDisabledMethods() with result: SUCCESS
Executed test ==> test.configuration.BeforeTestOrderingTest.verifyBeforeTestOrdering() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.test() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2() with result: SUCCESS
Executed test ==> test.configuration.SuiteFactoryOnceTest.suiteMethodsShouldOnlyRunOnce() with result: SUCCESS
Executed test ==> test.configuration.SuiteTest.test1() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[0]({two=orld, one=ello}, H{{one}} W{{two}}, Hello World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[1]({}, E{{#foo}}xxx{{/foo}}lephant, Elephant)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[2]({}, Hello
{{#foo}}@
{{/foo}}World, Hello
World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[3]({day=Monday, person=test.mustache.MustacheTest$Person@3e4d412e}, Hello {{#person}}{{name}}{{/person}}, {{day}}, Hello John, Monday)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[4]({name=Carl, person=test.mustache.MustacheTest$Person@3c841b42}, Hello {{#person}}{{name}}{{/person}}, {{name}}, Hello John, Carl)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[5]({people=[test.mustache.MustacheTest$Person@66ee7ec1, test.mustache.MustacheTest$Person@7aac2755]}, People:@{{#people}}-{{/people}}!, People:@--!)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[6]({ages=[test.mustache.MustacheTest$Age@129ef3a5, test.mustache.MustacheTest$Age@7939f41], people=[test.mustache.MustacheTest$Person@66ee7ec1, test.mustache.MustacheTest$Person@7aac2755]}, :@{{#people}}{{name}}{{#ages}}{{age}}{{/ages}}@{{/people}}!_, :@Carl4243@Christopher4243@!_)() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedClasses() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedMethods() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedWithExcludedGroups() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test1() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2_fails() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testAssertAllCount() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testOnSucceedAndFailureCalled() with result: SUCCESS
Executed test ==> test.enable.EnableTest.disabled_methods_should_not_be_run() with result: SUCCESS
Executed test ==> test.enable.EnableTest.issue420() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.complexITestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testOnClassFromReporter() with result: SUCCESS
Executed test ==> test.name.github1046.TestCustomNamesForTests.testCustomTestNames() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatAllEventsForATestMethodInClassInstanceExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTwoInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThreeInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfWarningsAreServed() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfExceptionIsRaised() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.methodsOrderTest() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.randomOrderTestMethod() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testInstancesOrder() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testMethod() with result: SUCCESS
:check

BUILD SUCCESSFUL

Total time: 5 mins 3.358 secs

travis_time:end:0480fa66:start=1504152176450058499,finish=1504152480135603210,duration=303685544711[0K
[32;1mThe command "./gradlew check --stacktrace" exited with 0.[0m
travis_fold:start:before_cache.1[0Ktravis_time:start:004647cc[0K$ rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock

travis_time:end:004647cc:start=1504152480143942417,finish=1504152480153689279,duration=9746862[0Ktravis_fold:end:before_cache.1[0Ktravis_fold:start:before_cache.2[0Ktravis_time:start:2f6e90c2[0K$ rm -fr $HOME/.gradle/caches/*/plugin-resolution/

travis_time:end:2f6e90c2:start=1504152480159494411,finish=1504152480165592276,duration=6097865[0Ktravis_fold:end:before_cache.2[0Ktravis_fold:start:cache.2[0Kstore build cache
travis_time:start:2d226893[0K
travis_time:end:2d226893:start=1504152480171012456,finish=1504152480175470494,duration=4458038[0Ktravis_time:start:002c681a[0K[32;1mchange detected (content changed, file is created, or file is deleted):
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.bin
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.lock

[0m
[32;1mchanges detected, packing new archive[0m
.
.
[32;1muploading archive[0m

travis_time:end:002c681a:start=1504152480181751448,finish=1504152501782657819,duration=21600906371[0Ktravis_fold:end:cache.2[0Ktravis_fold:start:after_success.1[0Ktravis_time:start:0dd1c618[0K$ ./travis.sh deploy
Deploy skipped: Only on Oracle JDK7

travis_time:end:0dd1c618:start=1504152501788345070,finish=1504152501795197278,duration=6852208[0Ktravis_fold:end:after_success.1[0Ktravis_fold:start:after_success.2[0Ktravis_time:start:0045ab37[0K$ ./travis.sh sonarqube
Initialized native services in: /home/travis/.gradle/native
Creating new cache for fileHashes, path /home/travis/.gradle/caches/3.4/fileHashes/fileHashes.bin, access org.gradle.cache.internal.DefaultCacheAccess@3081f72c
Creating new cache for plugin-use-metadata, path /home/travis/.gradle/caches/3.4/plugin-resolution/plugin-use-metadata.bin, access org.gradle.cache.internal.DefaultCacheAccess@7a1a3478
Creating new cache for client-status, path /home/travis/.gradle/caches/3.4/plugin-resolution/client-status.bin, access org.gradle.cache.internal.DefaultCacheAccess@7a1a3478
Starting Build
Settings evaluated using settings file '/home/travis/build/cbeust/testng/settings.gradle'.
Projects loaded. Root project using build file '/home/travis/build/cbeust/testng/build.gradle'.
Included projects: [root project 'testng']
Evaluating root project 'testng' using build file '/home/travis/build/cbeust/testng/build.gradle'.
Creating new cache for metadata-2.23/module-metadata, path /home/travis/.gradle/caches/modules-2/metadata-2.23/module-metadata.bin, access org.gradle.cache.internal.DefaultCacheAccess@303c55fa
Creating new cache for metadata-2.23/artifact-at-repository, path /home/travis/.gradle/caches/modules-2/metadata-2.23/artifact-at-repository.bin, access org.gradle.cache.internal.DefaultCacheAccess@303c55fa
Using 32 worker leases.
All projects evaluated.
Configuring artifactoryPublish task ':artifactoryPublish' for project 'testng'.
Selected primary task 'sonarqube' from project :
Creating new cache for fileHashes, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/fileHashes.bin, access org.gradle.cache.internal.DefaultCacheAccess@4e951fb1
Creating new cache for annotation-processors, path /home/travis/build/cbeust/testng/.gradle/3.4/fileContent/annotation-processors.bin, access org.gradle.cache.internal.DefaultCacheAccess@3ea9a091
Tasks to be executed: [task ':compileJava', task ':compileGroovy', task ':processResources', task ':classes', task ':compileTestJava', task ':compileTestGroovy', task ':processTestResources', task ':testClasses', task ':test', task ':sonarqube']
Creating new cache for jvmClassSignatures, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/jvmClassSignatures.bin, access org.gradle.cache.internal.DefaultCacheAccess@4e951fb1
Creating new cache for fileSnapshots, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/fileSnapshots.bin, access org.gradle.cache.internal.DefaultCacheAccess@4e951fb1
Creating new cache for taskHistory, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/taskHistory.bin, access org.gradle.cache.internal.DefaultCacheAccess@4e951fb1
:compileJava (Thread[main,5,main]) started.
:compileJava
Putting task artifact state for task ':compileJava' into context took 0.013 secs.
Task :compileJava class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileJava actions class loader hash: 483ba3697bb1616b2939f2a370280d0e
Skipping task ':compileJava' as it is up-to-date (took 0.308 secs).
:compileJava UP-TO-DATE
:compileJava (Thread[main,5,main]) completed. Took 0.349 secs.
:compileGroovy (Thread[main,5,main]) started.
:compileGroovy
Putting task artifact state for task ':compileGroovy' into context took 0.0 secs.
file or directory '/home/travis/build/cbeust/testng/src/main/groovy', not found
Skipping task ':compileGroovy' as it has no source files and no previous output files.
:compileGroovy NO-SOURCE
:compileGroovy (Thread[main,5,main]) completed. Took 0.002 secs.
:processResources (Thread[main,5,main]) started.
:processResources
Putting task artifact state for task ':processResources' into context took 0.003 secs.
Task :processResources class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :processResources actions class loader hash: 921e077e8d7918b0e60fb90df8b9d794
Skipping task ':processResources' as it is up-to-date (took 0.011 secs).
:processResources UP-TO-DATE
:processResources (Thread[main,5,main]) completed. Took 0.019 secs.
:classes (Thread[main,5,main]) started.
:classes
Skipping task ':classes' as it has no actions.
:classes UP-TO-DATE
:classes (Thread[main,5,main]) completed. Took 0.001 secs.
:compileTestJava (Thread[main,5,main]) started.
:compileTestJava
Putting task artifact state for task ':compileTestJava' into context took 0.002 secs.
Task :compileTestJava class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileTestJava actions class loader hash: 10a55fdc909a1d0579fff2771b7a973b
Skipping task ':compileTestJava' as it is up-to-date (took 0.588 secs).
:compileTestJava UP-TO-DATE
:compileTestJava (Thread[main,5,main]) completed. Took 0.593 secs.
:compileTestGroovy (Thread[main,5,main]) started.
:compileTestGroovy
Putting task artifact state for task ':compileTestGroovy' into context took 0.013 secs.
Task :compileTestGroovy class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileTestGroovy actions class loader hash: 10a55fdc909a1d0579fff2771b7a973b
Skipping task ':compileTestGroovy' as it is up-to-date (took 0.011 secs).
:compileTestGroovy UP-TO-DATE
:compileTestGroovy (Thread[main,5,main]) completed. Took 0.028 secs.
:processTestResources (Thread[main,5,main]) started.
:processTestResources
Putting task artifact state for task ':processTestResources' into context took 0.001 secs.
Task :processTestResources class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :processTestResources actions class loader hash: 921e077e8d7918b0e60fb90df8b9d794
Skipping task ':processTestResources' as it is up-to-date (took 0.051 secs).
:processTestResources UP-TO-DATE
:processTestResources (Thread[main,5,main]) completed. Took 0.057 secs.
:testClasses (Thread[main,5,main]) started.
:testClasses
Skipping task ':testClasses' as it has no actions.
:testClasses UP-TO-DATE
:testClasses (Thread[main,5,main]) completed. Took 0.001 secs.
:test (Thread[main,5,main]) started.
:test
Putting task artifact state for task ':test' into context took 0.016 secs.
Task :test class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :test actions class loader hash: 4ee8aba1cf986be6f98f567428174ee5
Executing task ':test' (up-to-date check took 0.139 secs) due to:
  Value of input property 'systemProperties' has changed for task ':test'
Starting process 'Gradle Test Executor 1'. Working directory: /home/travis/build/cbeust/testng Command: /usr/lib/jvm/java-8-oracle/bin/java -Dawt.toolkit=sun.awt.X11.XToolkit -Dfile.encoding.pkg=sun.io -Dfile.separator=/ -Djava.awt.graphicsenv=sun.awt.X11GraphicsEnvironment -Djava.awt.printerjob=sun.print.PSPrinterJob -Djava.class.path=/home/travis/build/cbeust/testng/gradle/wrapper/gradle-wrapper.jar -Djava.class.version=52.0 -Djava.endorsed.dirs=/usr/lib/jvm/java-8-oracle/jre/lib/endorsed -Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext -Djava.home=/usr/lib/jvm/java-8-oracle/jre -Djava.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib -Djava.runtime.name=Java(TM) SE Runtime Environment -Djava.runtime.version=1.8.0_31-b13 -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Djava.specification.name=Java Platform API Specification -Djava.specification.vendor=Oracle Corporation -Djava.specification.version=1.8 -Djava.vendor=Oracle Corporation -Djava.vendor.url=http://java.oracle.com/ -Djava.vendor.url.bug=http://bugreport.sun.com/bugreport/ -Djava.version=1.8.0_31 -Djava.vm.info=mixed mode -Djava.vm.name=Java HotSpot(TM) 64-Bit Server VM -Djava.vm.specification.name=Java Virtual Machine Specification -Djava.vm.specification.vendor=Oracle Corporation -Djava.vm.specification.version=1.8 -Djava.vm.vendor=Oracle Corporation -Djava.vm.version=25.31-b07 -Dlibrary.jansi.path=/home/travis/.gradle/native/jansi/1.14/linux64 -Dline.separator=
 -Dorg.gradle.appname=gradlew -Dos.arch=amd64 -Dos.name=Linux -Dos.version=4.8.12-040812-generic -Dpath.separator=: -Dsonar.login=[secure] -Dsun.arch.data.model=64 -Dsun.boot.class.path=/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes -Dsun.boot.library.path=/usr/lib/jvm/java-8-oracle/jre/lib/amd64 -Dsun.cpu.endian=little -Dsun.cpu.isalist -Dsun.io.unicode.encoding=UnicodeLittle -Dsun.java.command=org.gradle.wrapper.GradleWrapperMain sonarqube -Dsonar.login=[secure] --stacktrace --info -Dsun.java.launcher=SUN_STANDARD -Dsun.jnu.encoding=UTF-8 -Dsun.management.compiler=HotSpot 64-Bit Tiered Compilers -Dsun.os.patch.level=unknown -Dtest.resources.dir=build/resources/test/ -Duser.dir=/home/travis/build/cbeust/testng -Duser.home=/home/travis -Duser.name=travis -Duser.timezone=Etc/UTC -javaagent:build/tmp/expandedArchives/org.jacoco.agent-0.7.8.jar_5d9j4zag85dqrmizz3ut3i065/jacocoagent.jar=destfile=build/jacoco/test.exec,append=true,inclnolocationclasses=false,dumponexit=true,output=file,jmx=false -Xmx1500m -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/tmp -Duser.country=US -Duser.language=en -Duser.variant -ea -cp /home/travis/.gradle/caches/3.4/workerMain/gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 1'
Successfully started process 'Gradle Test Executor 1'
Initialized native services in: /home/travis/.gradle/native
Gradle Test Executor 1 started executing tests.

Gradle Test Executor 1 STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter

TestNG Running Junit Tests > Junit via TestNG XML STANDARD_ERROR
    org.testng.TestNGException: 
    Failure in JUnit mode for class test.junit.SetNameTest
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:114)
    	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:70)
    	at org.testng.TestRunner$1.run(TestRunner.java:714)
    	at org.testng.TestRunner.runJUnitWorkers(TestRunner.java:1014)
    	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:745)
    	at org.testng.TestRunner.run(TestRunner.java:646)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.AssertionError
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter.onTestStart(TestNGTestResultProcessorAdapter.java:116)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:89)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:83)
    	at com.sun.proxy.$Proxy5.onTestStart(Unknown Source)
    	at org.testng.junit.JUnit4TestRunner$RL.testStarted(JUnit4TestRunner.java:207)
    	at org.junit.runner.notification.SynchronizedRunListener.testStarted(SynchronizedRunListener.java:49)
    	at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:121)
    	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
    	at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:118)
    	at org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(JUnit38ClassRunner.java:37)
    	at junit.framework.TestResult.startTest(TestResult.java:168)
    	at junit.framework.TestResult.run(TestResult.java:119)
    	at junit.framework.TestCase.run(TestCase.java:129)
    	at junit.framework.TestSuite.runTest(TestSuite.java:252)
    	at junit.framework.TestSuite.run(TestSuite.java:247)
    	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:82)
    	... 43 more
Executed test ==> test.guice.GuiceParentModuleTest.testService() with result: SUCCESS
Executed test ==> NoPackageTest.test() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test3TestNG1() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testNonExistentParameter[0](null)() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testSingleString[0](Cedric)() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.noNPEInCountingResults STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.noNPEInCountingResults() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.beforeMethodWithParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.enumParameters() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParameterTest.invalidEnumParameters STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: No enum constant test.parameters.EnumParameterSample.MyEnum.INVALID_VALUE
    	at java.lang.Enum.valueOf(Enum.java:238)
    	at org.testng.internal.Parameters.convertType(Parameters.java:413)
    	at org.testng.internal.Parameters.createParams(Parameters.java:255)
    	at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:289)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:543)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:692)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.parameters.ParameterTest.invalidEnumParameters(ParameterTest.java:86)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.parameters.ParameterTest.invalidEnumParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.stringSingle() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod1() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod2() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod3() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptions() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptionsDeprecatedSyntax() with result: SUCCESS
Executed test ==> test.access.PrivateAccessConfigurationMethods.allAccessModifiersConfiguration() with result: SUCCESS
Executed test ==> test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.CountTest.skippedMethodsShouldBeCounted() with result: SUCCESS
Executed test ==> test.StaticTest$InnerStaticClass.test() with result: SUCCESS
Executed test ==> test.MethodTest.excludeMethodsOnly() with result: SUCCESS
Executed test ==> test.MethodTest.excludePackage() with result: SUCCESS
Executed test ==> test.MethodTest.includeMethodsOnly() with result: SUCCESS
Executed test ==> test.EclipseTest.xmlFileShouldBeRunAtItsPlaceAndNotCopied[0](org.testng.TestRunner@67d9fbe4)() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS
Executed test ==> test.ReporterApiTest.testApi() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldBeCorrect() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldFail() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessors() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessorsTiming() with result: SUCCESS
Executed test ==> test.GraphTest.sort() with result: SUCCESS
Executed test ==> test.reports.UniqueReporterInjectionTest.testPruningOfDuplicateReporter() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test2() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test3() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test4() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test8() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.testOrderingOfEdgesWithSameWeight() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporterWithMultipleClasses() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitXMLReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testTestCaseOrderingInJUnitReportReporterWhenPrioritiesDefined() with result: SUCCESS
Executed test ==> test.ReflectionHelperTest.testMethodCount() with result: SUCCESS
Executed test ==> test.abstractmethods.AbstractTest.abstractShouldRun() with result: SUCCESS
Executed test ==> test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest.testPrivateMethod() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeAndExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeAndExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeShouldWork() with result: SUCCESS
Executed test ==> test.multiple.TestMultiple.multiple() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential1() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential2() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependencyAndFailures() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependsOnMethods() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testOne() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testThree() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testTwo() with result: SUCCESS
Executed test ==> test.NestedStaticTest.nestedClassShouldBeIncluded() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfterMethod() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunBefore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationListenerTest.listenerShouldBeCalled() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestClassFails() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestSuiteFails() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[0]([Ljava.lang.String;@441abb70, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[1]([Ljava.lang.String;@27fb4faa, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[2]([Ljava.lang.String;@6413e197, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[3]([Ljava.lang.String;@6241ed45, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[4]([Ljava.lang.String;@50e03c87, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[5]([Ljava.lang.String;@4a1a390, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[0]([Ljava.lang.String;@523d02ea, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[1]([Ljava.lang.String;@10bf37f2, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[2]([Ljava.lang.String;@4e4d0cda, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[3]([Ljava.lang.String;@629af1ea, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[4]([Ljava.lang.String;@17f5f9c, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[5]([Ljava.lang.String;@73a6aaf3, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Xml() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[0]([Ljava.lang.String;@2970bf40, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[1]([Ljava.lang.String;@48abc206, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[2]([Ljava.lang.String;@717a61cd, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[3]([Ljava.lang.String;@103d4fee, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[4]([Ljava.lang.String;@1d306b9b, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[5]([Ljava.lang.String;@476c8c70, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[0]([Ljava.lang.String;@580a5367, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[1]([Ljava.lang.String;@5bc6d026, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[2]([Ljava.lang.String;@4729b10e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[3]([Ljava.lang.String;@5e1e4404, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[4]([Ljava.lang.String;@61a4f222, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[5]([Ljava.lang.String;@6e73ed5d, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[0]([Ljava.lang.String;@724653b9, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[1]([Ljava.lang.String;@4ab5b9fd, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[2]([Ljava.lang.String;@2be2b66c, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[3]([Ljava.lang.String;@3d42c333, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[4]([Ljava.lang.String;@7900351b, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[5]([Ljava.lang.String;@444dc3b1, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Xml() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithClassTest() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithMethodTest() with result: SUCCESS
Executed test ==> test.StaticTest.test() with result: SUCCESS
Executed test ==> test.superclass.Test3.shouldExcludeBaseMethods() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWork() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWorkWithConfigurationListener() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderWithNoClassLoader() with result: SUCCESS
Executed test ==> test.failures.FailuresTest.shouldIncludeFailedMethodsFromBaseClass() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineExcludedGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.shouldRunBothMethods() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationOthers() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyExpectedExceptions() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyFactory() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyParameters() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestClassLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestMethodLevel() with result: SUCCESS
Executed test ==> test.jason.MainTest.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyConfigurationGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnMethodsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestGroupsInheritance() with result: SUCCESS
Executed test ==> test.bug90.Bug90Test.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryNotParallel() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelMethods() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelTests() with result: SUCCESS
Executed test ==> test.bug92.Bug92Test.BeforeTestShouldRunOnce() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential3() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded3() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldNotBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.testReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[2](true, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[3](false, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[4](true, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[5](false, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[6](true, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[7](false, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[8](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[9](false, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[2](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[3](false, instances, 2)() with result: SUCCESS

TestNG > Regression2 > test.groupbug.GroupBugTest.shouldOrderByClass STANDARD_OUT
    RUN class test.groupbug.ITCaseOne.beforeClass()
    RUN class test.groupbug.ITCaseOne.one1()
    RUN class test.groupbug.ITCaseOne.one2()
    RUN class test.groupbug.ITCaseOne.afterClass()
    RUN class test.groupbug.ITCaseTwo.beforeClass()
    RUN class test.groupbug.ITCaseTwo.two1()
    RUN class test.groupbug.ITCaseTwo.two2()
    RUN class test.groupbug.ITCaseTwo.afterClass()
    ===== Invoked methods
      ITCaseOne.beforeClassOne()[pri:0, instance:test.groupbug.ITCaseOne@315fc736] 828360502
        ITCaseOne.one1()[pri:0, instance:test.groupbug.ITCaseOne@315fc736] 828360502
        ITCaseOne.one2()[pri:0, instance:test.groupbug.ITCaseOne@315fc736] 828360502
      ITCaseOne.afterClassOne()[pri:0, instance:test.groupbug.ITCaseOne@315fc736] 828360502
      ITCaseTwo.beforeClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@26c2c8c8] 650299592
        ITCaseTwo.two1()[pri:0, instance:test.groupbug.ITCaseTwo@26c2c8c8] 650299592
        ITCaseTwo.two2()[pri:0, instance:test.groupbug.ITCaseTwo@26c2c8c8] 650299592
      ITCaseTwo.afterClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@26c2c8c8] 650299592
    =====

    ===============================================
    Command line suite
    Total tests run: 4, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.groupbug.GroupBugTest.shouldOrderByClass() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldNotUseThreadsIfNotUsingParallel() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseDefaultDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseSpecifiedDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.parameters.ShadowTest.parametersShouldNotBeShadowed() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test2Threads() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test3Threads() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[0](testOverrideSuite, PASS_TEST)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[1](classOverrideSuite, PASS_CLASS)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[2](includeOverrideClass, PASS_INCLUDE)() with result: SUCCESS
Executed test ==> test.thread.TrueParallelTest.shouldRunInParallel() with result: SUCCESS
Executed test ==> test.reports.FailedReporterTest.failedFile() with result: SUCCESS
Executed test ==> test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest.testMethod() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusion() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusionForJunit() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[0](class test.cli.github1517.TestClassWithConfigFailureSample, 3)() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[1](class test.cli.github1517.TestClassWithConfigSkipSample, 2)() with result: SUCCESS
Executed test ==> test.cli.github1517.ExitCodeListenerBehaviorTest.testMethod[2](class test.cli.github1517.TestClassWithConfigSkipAndFailureSample, 3)() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount1() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount2() with result: SUCCESS
Executed test ==> test.reports.ReportTest.directoryShouldBeSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.github1090() with result: SUCCESS
Executed test ==> test.reports.ReportTest.oneDirectoryPerSuite() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableEvenWithTimeOut() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableWithListener() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[0](class test.reports.GitHub1148Sample, [Ljava.lang.String;@75c8732e, [Ljava.lang.String;@c123417)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[1](class test.reports.GitHub148Sample, [Ljava.lang.String;@5fb3daa8, [Ljava.lang.String;@3b63c694)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.shouldHonorSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.verifyIndex() with result: SUCCESS

TestNG > Regression2 > test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass2() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerHasOnlyOneNonNullArgument() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerMethod() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationWithoutTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyConfigurationTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyDataProviderTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyFactoryTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyInvocationCountTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyListenerAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyMyParamTransformerOnlyOneNonNull() with result: SUCCESS

TestNG > Regression2 > test.xml.XmlVerifyTest.handleInvalidSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.xml.XmlVerifyTest.handleInvalidSuites() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.preserverOrderAttribute() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.simple() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue629_InvokedMethodDoesNotRecognizeConfigurationMethod() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue87_method_orderning_with_disable_test_class() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.testMethodsWithExpectedExceptionsShouldShowUpAsPass() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withFailure() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withSuccess() with result: SUCCESS
Executed test ==> test.testng249.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.testng195.AfterMethodTest.testContextShouldBeInitialized() with result: SUCCESS
Executed test ==> test.regression.BeforeTestFailingTest.beforeTestFailingShouldCauseSkips() with result: SUCCESS
Executed test ==> test.testng285.TestNG285Test.verifyBug() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedAndSkippedMethodsShouldBeIncluded() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedMethodWithDataProviderShouldHaveInvocationNumbers() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigs() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsAmidstInheritance() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtSuiteLevel() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtTestLevel() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f1[0](org.testng.TestRunner@67d9fbe4)() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f2[0](org.testng.TestRunner@67d9fbe4)() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyBaseClassTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithAnnotation() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithoutAnnotation() with result: SUCCESS
Executed test ==> test.abstractconfmethod.C.test1() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.factoryPreserve() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.orderShouldBePreservedWithDependencies() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[0]([Ljava.lang.Class;@460a1263)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[1]([Ljava.lang.Class;@3b8b832)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[2]([Ljava.lang.Class;@3fc338ed)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[3]([Ljava.lang.Class;@401a2719)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[4]([Ljava.lang.Class;@41e7b40)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[5]([Ljava.lang.Class;@60a67a5f)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[0]([Ljava.lang.String;@6bf2b8b8)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[1]([Ljava.lang.String;@247462c9)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[2]([Ljava.lang.String;@3a203ffc)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[3]([Ljava.lang.String;@5ecd2c1b)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[4]([Ljava.lang.String;@472fedca)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[5]([Ljava.lang.String;@2f3c2736)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveOrderValueShouldBeTheDefaultOne() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationInMixedMode() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationSkipWhenNoFailuresExist() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationWhenFailuresExist() with result: SUCCESS
Executed test ==> test_result.GitHub1197Test.testGitHub1197() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterParametersTest.failedSuiteShouldHaveParameters() with result: SUCCESS
Executed test ==> test.listeners.github1319.TestResultInstanceCheckTest.testInstances() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[0](class test.reports.ReporterLogSuccessSample, Listener: onTestSuccess)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[1](class test.reports.ReporterLogSkippedSample, Listener: onTestSkipped)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[2](class test.reports.ReporterLogFailureSample, Listener: onTestFailure)() with result: SUCCESS
Executed test ==> test.testng1396.ParallelByInstancesInterceptorTest.should_honor_interceptor_order_when_running_parallel_instances() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS

TestNG > Regression2 > test.github1417.TestParamsInjectionInBeforeClass.testMethod STANDARD_OUT
    ...
    ... TestNG 6.11.1-SNAPSHOT by CÃ©dric Beust (cedric@beust.com)
    ...

    PASSED: testMethod
    PASSED: testMethod

    ===============================================
        1417_test
        Tests run: 2, Failures: 0, Skips: 0
    ===============================================

    PASSED: testMethod

    ===============================================
        1417_test_regular
        Tests run: 1, Failures: 0, Skips: 0
    ===============================================


    ===============================================
    1417_suite
    Total tests run: 3, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.github1417.TestParamsInjectionInBeforeClass.testMethod() with result: SUCCESS
Executed test ==> test.testng1231.TestExecutionListenerInvocationOrder.testListenerOrder() with result: SUCCESS
Executed test ==> test.order.OrderTest.interleavingMethodsInDifferentClasses() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag() with result: SUCCESS

TestNG > Regression2 > test.github1461.MemoryLeakTestNg.testMemoryLeak STANDARD_OUT
    constructor
    test method 1
    test method 2

    ===============================================
    Command line suite
    Total tests run: 2, Failures: 0, Skips: 0
    ===============================================

    waiting for clean up...
    finalize
    TestNG finalized
    [0] test object(s) still exist.
    waiting for clean up...
Executed test ==> test.github1461.MemoryLeakTestNg.testMemoryLeak() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsUsingGroupsWithFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasExplicitSkipInConfiguration() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasMultipleFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenConfigHasAlwaysRun() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInABaseClass() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInSuiteConfigs() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasException() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasExceptionInInheritance() with result: SUCCESS
Executed test ==> test.factory.github328.GitHub328Test.testFactoryExecutionWhenNoIncludedTests() with result: SUCCESS
Executed test ==> test.testng106.TestNG106.testFailingBeforeSuiteShouldSkipAllTests() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithListenerViaSuiteXml() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testFactoryPoweredDataProviderWithoutListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testInstanceBasedDataProviderInformation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleFactoriesShareSameDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleMethodsFactoriesShareSampleDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testMultipleTestMethodsShareSameDataProvider() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerAnnotationAndInvolvingInheritance() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithListenerViaSuiteXml() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testSimpleDataProviderWithoutListenerAnnotation() with result: SUCCESS
Executed test ==> test.github1490.VerifyDataProviderListener.testStaticDataProviderInformation() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterModificationFromListener() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterSetFromListener() with result: SUCCESS
Executed test ==> test.test111.Test1.testAbstract() with result: SUCCESS
Executed test ==> test.test111.Test1.test() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClasses() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClassesAndDifferentPackage() with result: SUCCESS
Executed test ==> test.listeners.github551.Test551.testExecutionTimeOfFailedConfig() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.verify() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.threadPoolAndTimeOutShouldFail() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.verify() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f1() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f2() with result: SUCCESS
Executed test ==> test.listeners.ResultEndMillisTest.endMillisShouldBeNonNull() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.aggregateListeners() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldBeOnlyRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkFromAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkWithManyTestMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.failureBeforeAfterMethod() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.invokedMethodListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.listenerRegistration STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
Executed test ==> test.listeners.ListenerTest.listenerRegistration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.listenerShouldBeCalledBeforeConfiguration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodInterceptorShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodListenersShouldNotBeCalledForSkippedMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.setStatusShouldWorkInListener() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.shouldAttachOnlyOneInstanceOfTheSameListenerClassPerTest() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenerInListernersAnnotationShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyIdenticalTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldWork() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.testFailATestFromOnTestStart STANDARD_OUT
    In onTestStart
Executed test ==> test.listeners.ListenerTest.testFailATestFromOnTestStart() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.testListenerCallInvocation() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndInvokedMethodListenerTest.bothListenersShouldRun() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndConfigurationListenerTest.bothListenersShouldRun() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithXml() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithoutListener() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldFail() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSkip() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSucceed() with result: SUCCESS

TestNG > Listeners > test.multiplelisteners.TestMaker.run STANDARD_ERROR
    [TestNG] Reporter test.multiplelisteners.SimpleReporter@15f43e88 failed
    java.lang.RuntimeException: java.lang.NoSuchFieldException: m_configuration
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:31)
    	at org.testng.TestNG.generateReports(TestNG.java:1213)
    	at org.testng.TestNG.run(TestNG.java:1138)
    	at test.multiplelisteners.TestMaker.run(TestMaker.java:26)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.NoSuchFieldException: m_configuration
    	at java.lang.Class.getDeclaredField(Class.java:2062)
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:24)
    	... 52 more
Executed test ==> test.multiplelisteners.TestMaker.run() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnce() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnceInMultiTestContext() with result: SUCCESS
Executed test ==> test.listeners.github1296.GitHub1296Test.test_number_of_call_of_configuration_listener() with result: SUCCESS

TestNG > Reflection STANDARD_OUT
    exactMatchDP:
    s0, [[Ljava.lang.Object;@303e198b
    s0, [[Ljava.lang.Object;@7567dfee
    s0, [[Ljava.lang.Object;@42d88b9d
    s0, [[Ljava.lang.Object;@78b64c5d
    s0, [[Ljava.lang.Object;@3804e081
    s1, [[Ljava.lang.Object;@7357c0c0
    s1, [[Ljava.lang.Object;@75552954
    s1, [[Ljava.lang.Object;@3fcb4707
    s1, [[Ljava.lang.Object;@2054b897
    s1, [[Ljava.lang.Object;@6dc82d9d
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[0]([[Ljava.lang.Object;@303e198b, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[1]([[Ljava.lang.Object;@7567dfee, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[2]([[Ljava.lang.Object;@42d88b9d, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[3]([[Ljava.lang.Object;@78b64c5d, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[4]([[Ljava.lang.Object;@3804e081, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0())() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[5]([[Ljava.lang.Object;@7357c0c0, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[6]([[Ljava.lang.Object;@75552954, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[7]([[Ljava.lang.Object;@3fcb4707, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[8]([[Ljava.lang.Object;@2054b897, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[9]([[Ljava.lang.Object;@6dc82d9d, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
    matchArrayEndingDP:
    s0, [[Ljava.lang.Object;@2af3876e
    s0, [[Ljava.lang.Object;@bbf03a7
    s0, [[Ljava.lang.Object;@7644f9bb
    s0, [[Ljava.lang.Object;@1c0d0dee
    s0, [[Ljava.lang.Object;@2a7321f6
    s1, [[Ljava.lang.Object;@5922bd24
    s1, [[Ljava.lang.Object;@8fa0e9a
    s1, [[Ljava.lang.Object;@7c6c0016
    s1, [[Ljava.lang.Object;@4fa3e2fc
    s1, [[Ljava.lang.Object;@3a4adb1
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[0]([[Ljava.lang.Object;@2af3876e, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[1]([[Ljava.lang.Object;@bbf03a7, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,float[],org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[2]([[Ljava.lang.Object;@7644f9bb, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[],org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[3]([[Ljava.lang.Object;@1c0d0dee, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[4]([[Ljava.lang.Object;@2a7321f6, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[5]([[Ljava.lang.Object;@5922bd24, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[6]([[Ljava.lang.Object;@8fa0e9a, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[7]([[Ljava.lang.Object;@7c6c0016, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,float[],org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[8]([[Ljava.lang.Object;@4fa3e2fc, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[9]([[Ljava.lang.Object;@3a4adb1, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@47cc8ef4) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@47cc8ef4)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@451728b9) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@451728b9)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@ec45f99) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@ec45f99)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@6a1fe507) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@6a1fe507)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@d637f83, [Ljava.lang.Object;@11e2e6a2) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@d637f83, [Ljava.lang.Object;@11e2e6a2)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@1b0d00a3, [Ljava.lang.Object;@11e2e6a2) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, null, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@1b0d00a3, [Ljava.lang.Object;@11e2e6a2)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@b55dbc2, [Ljava.lang.Object;@11e2e6a2) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@b55dbc2, [Ljava.lang.Object;@11e2e6a2)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7c98c785, [Ljava.lang.Object;@11e2e6a2) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7c98c785, [Ljava.lang.Object;@11e2e6a2)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[0](class org.testng.TestRunner)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[1](interface org.testng.ITestContext)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[2](class test.reflect.TestContextJustForTesting)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[0](class java.lang.Object)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[1](class java.lang.Class)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[2](interface java.sql.Connection)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@4922ec33, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@4922ec33, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@293a6e52, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@293a6e52, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@6f658031, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@6f658031, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@5f98cca5, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@5f98cca5, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@68b935bc, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@68b935bc, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@7f4e39a, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@7f4e39a, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@7fe1ac5d, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri0(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@46680de4"
    ITestContext is "org.testng.TestRunner@525caa9d"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@3b76f0d1"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@7fe1ac5d, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@498720a6, org.testng.TestRunner@525caa9d, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri1(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@2f9260e6"
    ITestContext is "org.testng.TestRunner@525caa9d"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@236efdbd"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@498720a6, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@531c7b66, org.testng.TestRunner@525caa9d, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: goodTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@531c7b66, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@8baf924, org.testng.TestRunner@525caa9d, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: badTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@8baf924, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@4a5bb134, org.testng.TestRunner@525caa9d, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: mixedArgs([Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=[Ljava.lang.String;, declaredAnnotations=[]}, Parameter{index=3, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.Boolean) true,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@4a5bb134, org.testng.TestRunner@525caa9d, null)() with result: SUCCESS
Executed test ==> test.inject.InjectTestContextTest.injectionAndParameters[0](Cedric, org.testng.TestRunner@37e24c75)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[0](a)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[1](b)() with result: SUCCESS
Executed test ==> test.inject.InjectTestResultTest.verifyTestResultInjection() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[0](1, org.testng.TestRunner@37e24c75, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[1](2, org.testng.TestRunner@37e24c75, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[0](org.testng.TestRunner@37e24c75, 1, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[1](org.testng.TestRunner@37e24c75, 2, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[0](1, a, org.testng.TestRunner@37e24c75)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[1](2, b, org.testng.TestRunner@37e24c75)() with result: SUCCESS

TestNG > Injection STANDARD_ERROR
    :::WARNING:::
    Missing one or more parameters that are being injected by the data provider. Please add the below arguments to the method.
    Method: withInjection([Parameter{index=0, type=java.lang.reflect.Method, declaredAnnotations=[]}])
    Arguments: [(java.lang.reflect.Method) public void test.inject.CC.f()]
Executed test ==> test.inject.NoInjectionTest.withInjection[0](public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withoutInjection[0](public void test.inject.CC.f())() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[0](class test.inject.NativeInjectionTestSamples$BadBeforeSuiteSample, beforeSuite, Can inject only one of <ITestContext, XmlTest> into a @BeforeSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[1](class test.inject.NativeInjectionTestSamples$BadBeforeTestSample, beforeTest, Can inject only one of <ITestContext, XmlTest> into a @BeforeTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[2](class test.inject.NativeInjectionTestSamples$BadBeforeClassSample, beforeClass, Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[3](class test.inject.NativeInjectionTestSamples$BadBeforeMethodSample, beforeMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[4](class test.inject.NativeInjectionTestSamples$BadAfterMethodSample, afterMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[5](class test.inject.NativeInjectionTestSamples$BadAfterClassSample, afterClass, Can inject only one of <ITestContext, XmlTest> into a @AfterClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[6](class test.inject.NativeInjectionTestSamples$BadAfterTestSample, afterTest, Can inject only one of <ITestContext, XmlTest> into a @AfterTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[7](class test.inject.NativeInjectionTestSamples$BadAfterSuiteSample, afterSuite, Can inject only one of <ITestContext, XmlTest> into a @AfterSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[8](class test.inject.NativeInjectionTestSamples$BadBeforeGroupsSample, beforeGroups, Can inject only one of <ITestContext, XmlTest> into a @BeforeGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[9](class test.inject.NativeInjectionTestSamples$BadAfterGroupsSample, afterGroups, Can inject only one of <ITestContext, XmlTest> into a @AfterGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.Github1298Test.testPlugin() with result: SUCCESS
Executed test ==> test.configuration.BeforeMethodTest.mainTest() with result: SUCCESS
Executed test ==> test.sample.Basic1.basic1() with result: SUCCESS
Executed test ==> test.Misc.makeSureSetUpWithParameterWithNoParametersFails() with result: SUCCESS
Executed test ==> test.sample.Basic2.basic2() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_first0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_premiere1() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentGroupsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethods() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithNonExistentMethod() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithSkip() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentWithDataProvider() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.instanceDependencies() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[0]([Ljava.lang.Class;@370860d, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[1]([Ljava.lang.Class;@2d9894d4, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[2]([Ljava.lang.Class;@4aae9d94, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[3]([Ljava.lang.Class;@67273235, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.multipleSkips() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[0](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@7c760aae, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[1](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@5190e7cb, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[2](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@1a616570, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[3](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@321d921f, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[4](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@1a78cdfc, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[5](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@5db2b454, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[6](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@4cb0e055, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[7](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@74b91a13, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleSkip() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentTest.test2() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.canBeRunAnytime() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneB() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one[0](Cedric)() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentConfigurationMethods.verifyDependents() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyDependsOnGroups() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyGroupsAcrossClasses() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups1AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups2AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnMethodsAlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.MultiGroupTest.verifyDependsOnMultiGroups() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion2() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion3() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion4() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitMethodInclusion() with result: SUCCESS
Executed test ==> test.dependent.ClassWide1Test.m1() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.send() with result: SUCCESS
Executed test ==> test.dependent.DepBugVerifyTest.verify() with result: SUCCESS
Executed test ==> test.dependent.DependsOnProtectedMethodTest.verifyBeforeInvocations() with result: SUCCESS
Executed test ==> test.dependsongroup.DependsOnGroupsTest.methodsShouldBeGroupedByClasses() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.dontGroupByInstances() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.groupByInstances() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[0]([Ljava.lang.String;@4d042ec8)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[1]([Ljava.lang.String;@5e057086)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[2]([Ljava.lang.String;@7d4fac9d)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[3]([Ljava.lang.String;@3c5f35be)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[4]([Ljava.lang.String;@6be44932)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[5]([Ljava.lang.String;@6cb77686)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[0]([Ljava.lang.String;@5117b569)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[1]([Ljava.lang.String;@6600528e)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[2]([Ljava.lang.String;@461d23ad)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[3]([Ljava.lang.String;@509b89d3)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[4]([Ljava.lang.String;@1104a9fc)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[5]([Ljava.lang.String;@4e85bc66)() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingGroup() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second1() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.secondA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.secondA() with result: SUCCESS
Executed test ==> test.dependent.ClassWide2Test.m2() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.get() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.third0() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.thirdA() with result: SUCCESS
Executed test ==> test.SampleInheritance.baseMethod() with result: SUCCESS
Executed test ==> test.SampleInheritance.configurationsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.setVerify() with result: SUCCESS
Executed test ==> test.inheritance.testng739.TestNG739.test_classes_should_be_skipped_when_a_before_class_fails() with result: SUCCESS
Executed test ==> test.inheritance.testng234.PolymorphicFailureTest.superclassFailureShouldCauseFailure() with result: SUCCESS

TestNG > Inheritance > test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails STANDARD_OUT
    ===== Invoked methods
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class1@5e4b8eef] 1582010095
      Class1.beforeClass1()[pri:0, instance:test.inheritance.testng471.Class1@5e4b8eef] 1582010095
      Class1.beforeMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@5e4b8eef] 1582010095
        Class1.test1_1()[pri:0, instance:test.inheritance.testng471.Class1@5e4b8eef] 1582010095
      Class1.afterMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@5e4b8eef] 1582010095
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.beforeClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
        Class2.test2_1()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
        Class2.test2_2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      Class2.afterClass2()[pri:0, instance:test.inheritance.testng471.Class2@2517ae66] 622308966
      SuperClass2.beforeSuperClass2()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.beforeClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
        Class3.test3_1()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
        Class3.test3_2()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
      Class3.afterClass3()[pri:0, instance:test.inheritance.testng471.Class3@6de4e75f] 1843717983
    =====

    ===============================================
    Command line suite
    Total tests run: 7, Failures: 1, Skips: 1
    Configuration Failures: 1, Skips: 2
    ===============================================

Executed test ==> test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails() with result: SUCCESS
Executed test ==> test.SampleInheritance.testBooleans() with result: SUCCESS
Executed test ==> test.SampleInheritance.inheritedMethodsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.verify() with result: SUCCESS

TestNG > Inheritance STANDARD_OUT
    ===== Invoked methods
      BaseSampleInheritance.baseConfiguration()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
      SampleInheritance.configuration0()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
      BaseSampleInheritance.configuration1()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
      SampleInheritance.configuration2()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
        BaseSampleInheritance.baseMethod()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
        SampleInheritance.configurationsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
        ClassScopeTest.setVerify()[pri:0, instance:test.inheritance.ClassScopeTest@283c91a] 42191130
        TestNG739.test_classes_should_be_skipped_when_a_before_class_fails()[pri:0, instance:test.inheritance.testng739.TestNG739@5871b4d6] 1483846870
        PolymorphicFailureTest.superclassFailureShouldCauseFailure()[pri:0, instance:test.inheritance.testng234.PolymorphicFailureTest@901cbba] 151112634
        TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails()[pri:0, instance:test.inheritance.testng471.TestNG471@15d60899] 366348441
        BaseSampleInheritance.testBooleans()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
        SampleInheritance.inheritedMethodsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@6211f4f3] 1645343987
        ClassScopeTest.verify()[pri:0, instance:test.inheritance.ClassScopeTest@283c91a] 42191130
    =====
Executed test ==> test.sample.Scope.outerDeprecated[0](out)() with result: SUCCESS

TestNG > Test outer scope STANDARD_OUT
    ===== Invoked methods
        Scope.outerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@433b76d]out  70498157
    =====
Executed test ==> test.sample.Scope.innerDeprecated[0](in)() with result: SUCCESS

TestNG > Test inner scope STANDARD_OUT
    ===== Invoked methods
        Scope.innerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@41159b70]in  1091935088
    =====
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS

TestNG > AfterClassCalledAtEnd STANDARD_OUT
    ===== Invoked methods
      AfterClassCalledAtEnd.before1Class()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
        AfterClassCalledAtEnd.test1()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
        AfterClassCalledAtEnd.test2()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
        AfterClassCalledAtEnd.test3()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
      AfterClassCalledAtEnd.afterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
      BaseAfterClassCalledAtEnd.baseAfterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3b1954f1] 991515889
    =====
Executed test ==> test.triangle.Child1.child1() with result: SUCCESS
Executed test ==> test.triangle.Child1.child1a() with result: SUCCESS
Executed test ==> test.triangle.Child2.child2() with result: SUCCESS

TestNG > Triangle STANDARD_OUT
    ===== Invoked methods
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child1@2e8297b9] 780310457
        Child1.child1()[pri:0, instance:test.triangle.Child1@2e8297b9] 780310457
        Child1.child1a()[pri:0, instance:test.triangle.Child1@2e8297b9] 780310457
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child1@2e8297b9] 780310457
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child2@6a6344f8] 1784890616
        Child2.child2()[pri:0, instance:test.triangle.Child2@6a6344f8] 1784890616
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child2@6a6344f8] 1784890616
    =====
Executed test ==> test.triangle.CheckCount.testCheckCount[0](2)() with result: SUCCESS
Executed test ==> test.triangle.CheckCount.testCheckCountDeprecated[0](2)() with result: SUCCESS

TestNG > CheckTrianglePost STANDARD_OUT
    ===== Invoked methods
        CheckCount.testCheckCount(java.lang.String)[pri:0, instance:test.triangle.CheckCount@60fceb20]2  1627188000
        CheckCount.testCheckCountDeprecated(java.lang.String)[pri:0, instance:test.triangle.CheckCount@60fceb20]2  1627188000
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 1 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@669adefe] 1721425662
        First.first2()[pri:0, instance:test.classgroup.First@669adefe] 1721425662
        Second.verify()[pri:0, instance:test.classgroup.Second@7350bc01] 1934670849
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 2 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@5697762] 90797922
        First.first2()[pri:0, instance:test.classgroup.First@5697762] 90797922
        Second.verify()[pri:0, instance:test.classgroup.Second@3534241f] 892609567
    =====
Executed test ==> test.factory.TestClassAnnotationTest.testOne() with result: SUCCESS
Executed test ==> test.factory.FactoryWithDataProviderTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryOrderMainTest.factoriesShouldBeInvokedInTheOrderOfCreation() with result: SUCCESS
Executed test ==> test.factory.FactoryFailureTest.factoryThrowingShouldNotRunTests() with result: SUCCESS
Executed test ==> test.factory.FactoryInSuperClassTest.factoryInSuperClassShouldWork() with result: SUCCESS
Executed test ==> test.factory.classconf.XClassOrderWithFactoryTest.testBeforeAfterClassInvocationsWithFactory() with result: SUCCESS
Executed test ==> test.factory.FactoryInterleavingTest.methodsShouldBeInterleaved() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithLocalDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNotStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.DisabledFactoryTest.disabledFactoryShouldNotRun() with result: SUCCESS
Executed test ==> test.factory.FactoryAndTestMethodTest$NullArgsTest.test() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.doubleFactoryMethodShouldWork() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithBadFactoryMethodReturnType() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithNonStaticFactoryMethod() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testNonPublicFactoryMethodShouldWork() with result: SUCCESS

TestNG > Factory > test.factory.EmptyFactoryDataProviderTest.test STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 0, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.factory.EmptyFactoryDataProviderTest.test() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnEmptyConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnIntConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnStringConstructor() with result: SUCCESS
Executed test ==> test.factory.nested.GitHub1307Test.testGitHub1307() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 42]() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 43]() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.FactoryInSeparateClassTest.checkSum() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryWithInstanceInfoTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.testWithOnlyOneThread() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInNonParallel() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[0](tests)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[1](methods)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[2](classes)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[3](instances)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[4](none)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[5](true)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[6](false)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.verifyInvocationTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.noTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutInParallelTestsFromXml() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnSuiteTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnTestTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.twoDifferentTests() with result: SUCCESS

TestNG > TimeOut > test.timeout.TimeOutIntegrationTest.testGitHub1314 STANDARD_OUT
    Test1
    Test2
Executed test ==> test.timeout.TimeOutIntegrationTest.testGitHub1314() with result: SUCCESS
Executed test ==> test.timeout.TimeOutIntegrationTest.testTimeOutWhenParallelIsTest() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.invocationCount() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatFails() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatSucceeds() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyAttributeShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldNotStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueTrue() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.factoryReceivesContext() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnSuite() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnTestNG() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CombinedTestAndObjectFactoryTest.combinedTestAndObjectFactory() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnSuiteShouldWork() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnTestNGShouldWork() with result: SUCCESS
Executed test ==> test.ParameterConstructorTest.verify() with result: SUCCESS
Executed test ==> test.Exclude.included1() with result: SUCCESS
Executed test ==> test.Exclude.included2() with result: SUCCESS
Executed test ==> test.Exclude.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value1)() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value2)() with result: SUCCESS
Executed test ==> test.IndividualMethodsTest.testMethod() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest$LocalTestClass.helloWorld() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest.testDescriptionInclusion() with result: SUCCESS
Executed test ==> test.inheritance.DChild_2.test() with result: SUCCESS
Executed test ==> test.inheritance.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.greaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.testNoMethodsAreExecutedWithNoMatchFound() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellTest.onlyGroup1() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellNegativeTest.testNegativeScenario() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineGreaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineMultipleSelectors() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNoTest1Selector() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineTestWithXmlFile() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.programmaticXmlSuite() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite() with result: SUCCESS
Executed test ==> test.interleavedorder.InterleavedInvocationTest.invocationOrder() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyExternal[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyStatic[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[0](10, verifyTen)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[1](5, verifyFive)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verifySix() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.duplicateDataProviders STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Found two providers called &apos;duplicate&apos; on class test.dataprovider.DuplicateDataProviderSample
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:516)
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:432)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:614)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.duplicateDataProviders(FailingDataProviderTest.java:20)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.duplicateDataProviders() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProvider STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: expected exception from @DP
    	at test.dataprovider.FailingDataProviderSample.throwsExpectedException(FailingDataProviderSample.java:11)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProvider(FailingDataProviderTest.java:13)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProvider() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProvider() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProviderWithInvocationNumber() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test2() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.allMethodsShouldBeInvoked() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.booleanTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classInjectionTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.configurationAndDataProvidersTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorOrMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.createDataTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.dataProviderAsTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.emptyDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.failedDataProviderShouldCauseSkip() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.iTestNGMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.inheritedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.instanceDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.methodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.mixedVarArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.oneDimDataProviderShouldWork() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.parallelDataProviderSample() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.should_prefer_dataProvider_explicit_name() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderSampleWithoutGuiceTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderTest() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Data Provider public java.lang.Object[][] test.dataprovider.Github1509TestClassSample.getData() returned a null value
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:117)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:629)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1320)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1048)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1138)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull(DataProviderTest.java:330)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:881)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1205)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:791)
    	at org.testng.TestRunner.run(TestRunner.java:649)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:452)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:447)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:412)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:361)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1322)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1247)
    	at org.testng.TestNG.runSuites(TestNG.java:1165)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.DataProviderTest.testDataProvidersThatReturnNull() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testExceptions() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testInstanceFactoryTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testNG411Test() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.unnamedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.varArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore1.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore2.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestAfter.testAfter() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationInheritGroupsSampleTest.test1() with result: SUCCESS
Executed test ==> test.nested.GarfTest.testGarf() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue599() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue862() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.g1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.run() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.verify() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsThatStartWithTest() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsWithSetup() with result: SUCCESS
Executed test ==> test.JUnitTest1.setNameShouldBeInvoked() with result: SUCCESS
Executed test ==> test.JUnitTest1.setUpFailingShouldCauseMethodsToBeSkipped() with result: SUCCESS
Executed test ==> test.JUnitTest1.testAbstract() with result: SUCCESS
Executed test ==> test.JUnitTest1.testNewInstance() with result: SUCCESS
Executed test ==> test.JUnitTest1.testSuite() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing2() with result: SUCCESS
Executed test ==> test.CommandLineTest.suiteNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testMethodParameter() with result: SUCCESS
Executed test ==> test.CommandLineTest.testNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testUseDefaultListenersArgument() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[0]([Ljava.lang.Class;@1aa70836, [Ljava.lang.String;@4b0c1f16, [Ljava.lang.String;@667944e9, [Ljava.lang.String;@74e29f9)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[1]([Ljava.lang.Class;@bc6c8ac, [Ljava.lang.String;@20e3c9aa, [Ljava.lang.String;@4f325cfc, [Ljava.lang.String;@5eeace1d)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[2]([Ljava.lang.Class;@617da06, [Ljava.lang.String;@aed178c, [Ljava.lang.String;@36892eef, [Ljava.lang.String;@37943aa0)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[3]([Ljava.lang.Class;@28afa350, [Ljava.lang.String;@6e33634a, [Ljava.lang.String;@1dafa047, [Ljava.lang.String;@725cf645)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[4]([Ljava.lang.Class;@1d771009, [Ljava.lang.String;@52be5b01, [Ljava.lang.String;@62ac2ca0, [Ljava.lang.String;@6a2bd8a1)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[5]([Ljava.lang.Class;@bd920cc, [Ljava.lang.String;@56df2ef6, [Ljava.lang.String;@4262593e, [Ljava.lang.String;@4979be79)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[6]([Ljava.lang.Class;@144e7dfb, [Ljava.lang.String;@11593e44, [Ljava.lang.String;@6d3453b4, [Ljava.lang.String;@4bd62374)() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.easyGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.reporterWithSpockSampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.specialNameGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.spockSampleShouldWork() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testDOSPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testUnixPathResolution() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testA() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testAB() with result: SUCCESS
Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInConfigurationMethods() with result: SUCCESS

TestNG > SkipExceptions > test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 3, Failures: 1, Skips: 1
    ===============================================

Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods() with result: SUCCESS
Executed test ==> test.skipex.SkipAndExpectedTest.shouldSkip() with result: SUCCESS

TestNG > RetryAnalyzer > test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts STANDARD_OUT
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test8
    Test Called : Test1
    Test Called : Test7
    Test Called : Test4
    Test Called : Test2
    Test Called : Test0
    Test Called : Test9
    Test Called : Test3
    Test Called : Test6
Executed test ==> test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithNonzeroOnFailure() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroAfterSuccessfulRetry() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroOnSuccess() with result: SUCCESS
Executed test ==> test.retryAnalyzer.dataprovider.RetryAnalyzerWithDataProviderTest.testRetryCounts() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldNotRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.noMethodsShouldRun() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.nullMethodInterceptorWorksInTestngXml() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.shouldNotLockUpWithInterceptorThatRemovesMethods() with result: SUCCESS
Executed test ==> test.methodinterceptors.Issue392Test.AfterClass_method_should_be_fired_when_IMethodInterceptor_removes_test_methods() with result: SUCCESS
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptors() with result: SUCCESS

TestNG > MethodInterceptor > test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsMapShouldFail() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricScalar() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareBooleanArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareCharacterArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareDoubleArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareFloatArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareIntArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLargeArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLongArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareShortArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.mapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullCollectionAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertNoOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.setAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_1() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_2() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_3() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.doubleNaNAssertion() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsDetectsTypeMismatchesViaExplicitTypeHint() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsIncludesAnInformativeDefaultMessage() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsRequiresAnExceptionToBeThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsReturnsTheSameObjectThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsWrapsAndPropagatesUnexpectedExceptions() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.intArray_Issue4() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderFailure() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderSuccess() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.setsSuccess() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArrayAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInIterablesAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListAndMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideIterableAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeepWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertNotEquals() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoin() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.escapeUnicode() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.joinTwoStringsWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testCreateInstance1WithOneArgStringParamForConstructor() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testGetAvailableMethods() with result: SUCCESS
Executed test ==> org.testng.internal.ClassHelperTest.testGetAvailableMethodsWhenOverrdingIsInvolved() with result: SUCCESS
Executed test ==> test.issue1430.TestFileToClass.testFileToClass() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$RedundantGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$UniqueGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithRedundantGroups() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithUniqueGroups() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[0]([Ljava.lang.Class;@2b3986dc, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[1]([Ljava.lang.Class;@4b970b11, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[2]([Ljava.lang.Class;@6fe6a900, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[3]([Ljava.lang.Class;@54d44605, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[4]([Ljava.lang.Class;@5c949f93, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[5]([Ljava.lang.Class;@c4e13c5, 4, 0, 4)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[6]([Ljava.lang.Class;@1dc1ea52, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[7]([Ljava.lang.Class;@11407d38, 1, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[8]([Ljava.lang.Class;@439cdac7, 2, 3, 3)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[9]([Ljava.lang.Class;@35d85e80, 0, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[10]([Ljava.lang.Class;@705223ca, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[11]([Ljava.lang.Class;@3cf19b34, 8, 0, 8)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[12]([Ljava.lang.Class;@4b58b06d, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithTest.nestedA() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithInheritedTest.nestedWithInheritedTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceWithNoModules() with result: SUCCESS
Executed test ==> test.guice.GuiceInheritanceTest.singletonShouldWork() with result: SUCCESS
Executed test ==> test.guice.GuiceModuleFactoryTest.singletonShouldWork() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingExtendedListenerInstance() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingSimpleListenerInstance() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[0](a1)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[1](a2)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[2](a3)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[3](a4)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[0](goodWithDoctype.xml, true)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[2](badWithDoctype.xml, false)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[4](issue174.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroups() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroupsWithRun() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkNoError STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkNoError() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkTestNamesForProgrammaticSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkProgrammaticSuitesFails() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifyBeforeGroupUseAppropriateInstance() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifySingleInvocation() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyBothAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyIteratorDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyParametersAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassThreadTest.beforeClassMethodsShouldRunInParallel() with result: SUCCESS
Executed test ==> test.configuration.MethodCallOrderTest.realTest() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassWithDisabledTest.afterClassShouldRunEvenWithDisabledMethods() with result: SUCCESS
Executed test ==> test.configuration.BeforeTestOrderingTest.verifyBeforeTestOrdering() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.test() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2() with result: SUCCESS
Executed test ==> test.configuration.SuiteFactoryOnceTest.suiteMethodsShouldOnlyRunOnce() with result: SUCCESS
Executed test ==> test.configuration.SuiteTest.test1() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[0]({two=orld, one=ello}, H{{one}} W{{two}}, Hello World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[1]({}, E{{#foo}}xxx{{/foo}}lephant, Elephant)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[2]({}, Hello
{{#foo}}@
{{/foo}}World, Hello
World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[3]({day=Monday, person=test.mustache.MustacheTest$Person@277debd8}, Hello {{#person}}{{name}}{{/person}}, {{day}}, Hello John, Monday)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[4]({name=Carl, person=test.mustache.MustacheTest$Person@783a53cf}, Hello {{#person}}{{name}}{{/person}}, {{name}}, Hello John, Carl)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[5]({people=[test.mustache.MustacheTest$Person@2da04334, test.mustache.MustacheTest$Person@7aec964]}, People:@{{#people}}-{{/people}}!, People:@--!)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[6]({ages=[test.mustache.MustacheTest$Age@4d78bfb3, test.mustache.MustacheTest$Age@62eefccb], people=[test.mustache.MustacheTest$Person@2da04334, test.mustache.MustacheTest$Person@7aec964]}, :@{{#people}}{{name}}{{#ages}}{{age}}{{/ages}}@{{/people}}!_, :@Carl4243@Christopher4243@!_)() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedClasses() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedMethods() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedWithExcludedGroups() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test1() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2_fails() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testAssertAllCount() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testOnSucceedAndFailureCalled() with result: SUCCESS
Executed test ==> test.enable.EnableTest.disabled_methods_should_not_be_run() with result: SUCCESS
Executed test ==> test.enable.EnableTest.issue420() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.complexITestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testOnClassFromReporter() with result: SUCCESS
Executed test ==> test.name.github1046.TestCustomNamesForTests.testCustomTestNames() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatAllEventsForATestMethodInClassInstanceExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTwoInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThreeInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfWarningsAreServed() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfExceptionIsRaised() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.methodsOrderTest() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.randomOrderTestMethod() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testInstancesOrder() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testMethod() with result: SUCCESS
Gradle Test Executor 1 finished executing tests.
Finished generating test XML results (0.161 secs) into: /home/travis/build/cbeust/testng/build/test-results/test
Generating HTML test report...
Finished generating test html results (0.132 secs) into: /home/travis/build/cbeust/testng/build/reports/tests/test
:test (Thread[main,5,main]) completed. Took 4 mins 36.899 secs.
:sonarqube (Thread[main,5,main]) started.
:sonarqube
Putting task artifact state for task ':sonarqube' into context took 0.001 secs.
Executing task ':sonarqube' (up-to-date check took 0.0 secs) due to:
  Task has not declared any outputs.
User cache: /home/travis/.sonar/cache
Load global settings
Load global settings (done) | time=156ms
User cache: /home/travis/.sonar/cache
Load plugins index
Load plugins index (done) | time=7ms
Download sonar-scm-cvs-plugin-1.0.jar
Download sonar-scm-svn-plugin-1.3.jar
Download sonar-plsql-plugin-2.9.1.1051.jar
Download sonar-billing-plugin-1.1.0.476.jar
Download sonar-csharp-plugin-6.3.0.2862.jar
Download sonar-java-plugin-4.12.0.11033.jar
Download sonar-web-plugin-2.5.0.476.jar
Download sonar-xml-plugin-1.4.3.1027.jar
Download sonar-flex-plugin-2.3.jar
Download sonar-typescript-plugin-1.0.0.340.jar
Download sonar-vbnet-plugin-3.0.3.346.jar
Download sonar-swift-plugin-2.1.0.1504.jar
Download sonar-github-plugin-1.4.1.822.jar
Download sonar-python-plugin-1.8.0.1496.jar
Download sonar-cfamily-plugin-4.11.0.8443.jar
Download sonar-auth-github-plugin-1.3.jar
Download sonar-rpg-plugin-2.1.0.736.jar
Download sonar-scm-mercurial-plugin-1.1.1.jar
Download sonar-googleanalytics-plugin-1.1.jar
Download sonar-tsql-plugin-1.0.1.2094.jar
Download sonar-pli-plugin-1.6.0.1010.jar
Download sonar-javascript-plugin-3.1.1.5128.jar
Download sonar-cobol-plugin-3.4.0.1932.jar
Download sonar-scm-git-plugin-1.2.jar
Download sonar-php-plugin-2.10.0.2087.jar
Download sonar-abap-plugin-3.3.jar
Download qualinsight-sonarqube-badges-3.0.1.jar
Default locale: "en_US", source code encoding: "UTF-8" (analysis is platform dependent)
Process project properties
Load project repositories
Load project repositories (done) | time=457ms
Execute project builders
Execute project builders (done) | time=0ms
Load quality profiles
Load quality profiles (done) | time=81ms
Load active rules
Load active rules (done) | time=935ms
Load metrics repository
Load metrics repository (done) | time=58ms
Publish mode
Project key: org.testng:testng
-------------  Scan testng
Load server rules
Load server rules (done) | time=134ms
Base dir: /home/travis/build/cbeust/testng
Working dir: /home/travis/build/cbeust/testng/build/sonar
Source paths: src/main/resources, src/main/java
Test paths: src/test/resources, src/test/java, src/test/groovy
Source encoding: UTF-8, default locale: en_US
Index files
1605 files indexed
Quality profile for java: Sonar way
Quality profile for js: Sonar way
Quality profile for web: Sonar way
Quality profile for xml: Sonar way
Sensor JavaSquidSensor [java]
Configured Java source version (sonar.java.source): 7
JavaClasspath initialization
JavaClasspath initialization (done) | time=14ms
JavaTestClasspath initialization
JavaTestClasspath initialization (done) | time=4ms
Java Main Files AST scan
362 source files to be analyzed
71/362 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/TestNG.java
153/362 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/internal/Invoker.java
219/362 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/internal/annotations/TestAnnotation.java
299/362 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/reporters/VerboseReporter.java
347/362 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/xml/XmlTest.java
362/362 source files have been analyzed
Java Main Files AST scan (done) | time=53291ms
Java Test Files AST scan
1113 source files to be analyzed
932/1113 files analyzed, current file: /home/travis/build/cbeust/testng/src/test/java/test/testng387/TestNG387.java
1113/1113 source files have been analyzed
Classes not found during the analysis : [org.testng.IAlterSuiteListener, org.testng.IAnnotationTransformer, org.testng.IAnnotationTransformer2, org.testng.IAnnotationTransformer3, org.testng.IClass, org.testng.IClassListener, org.testng.IConfigurable, org.testng.IConfigurationListener, org.testng.IConfigureCallBack, org.testng.IDataProviderListener, org.testng.IDataProviderMethod, org.testng.IExecutionListener, org.testng.IHookCallBack, org.testng.IHookable, org.testng.IInvokedMethod, org.testng.IInvokedMethodListener, org.testng.IMethodInstance, org.testng.IMethodInterceptor, org.testng.IObjectFactory, org.testng.IObjectFactory2, org.testng.IReporter, org.testng.IResultMap, org.testng.IRetryAnalyzer, org.testng.ISuite, org.testng.ISuiteListener, org.testng.ITest, org.testng.ITestClass, org.testng.ITestContext, org.testng.ITestListener, org.testng.ITestNGListener, org.testng.ITestNGMethod, org.testng.ITestResult, org.testng.ITestRunnerFactory, org.testng.TestListenerAdapter, org.testng.TestNG, org.testng.TestNGException, org.testng.annotations.IConfigurationAnnotation, org.testng.annotations.IDataProviderAnnotation, org.testng.annotations.IFactoryAnnotation, org.testng.annotations.IListenersAnnotation, org.testng.annotations.ITestAnnotation, org.testng.asserts.Assertion, org.testng.asserts.IAssert, org.testng.asserts.SoftAssert, org.testng.internal.ConstructorOrMethod, org.testng.internal.IConfiguration, org.testng.internal.IResultListener, org.testng.internal.IResultListener2, org.testng.internal.ObjectFactoryImpl, org.testng.internal.collections.Pair, ...]
Java Test Files AST scan (done) | time=12866ms
Sensor JavaSquidSensor [java] (done) | time=66870ms
Sensor SurefireSensor [java]
Property 'sonar.junit.reportsPath' is deprecated. Use property 'sonar.junit.reportPaths' instead.
parsing [/home/travis/build/cbeust/testng/build/test-results/test]
Resource not found: test.groovy.GroovyTest
Sensor SurefireSensor [java] (done) | time=355ms
Sensor JaCoCoSensor [java]
Property 'sonar.jacoco.reportPath' is deprecated. Please use 'sonar.jacoco.reportPaths' instead.
Analysing /home/travis/build/cbeust/testng/build/jacoco/test.exec
No information about coverage per test.
Sensor JaCoCoSensor [java] (done) | time=633ms
Sensor SonarJavaXmlFileSensor [java]
90 source files to be analyzed
Sensor SonarJavaXmlFileSensor [java] (done) | time=542ms
90/90 source files have been analyzed
Sensor Web [web]
Sensor Web [web] (done) | time=162ms
Sensor XML Sensor [xml]
Sensor XML Sensor [xml] (done) | time=7ms
Sensor Coverage Report Import [vbnet]
Sensor Coverage Report Import [vbnet] (done) | time=0ms
Sensor Coverage Report Import [vbnet]
Sensor Coverage Report Import [vbnet] (done) | time=0ms
Sensor Unit Test Results Import [vbnet]
Sensor Unit Test Results Import [vbnet] (done) | time=0ms
Sensor JavaScript Squid Sensor [javascript]
2 source files to be analyzed
2/2 source files have been analyzed
Unit Test Coverage Sensor is started
Integration Test Coverage Sensor is started
Overall Coverage Sensor is started
Sensor JavaScript Squid Sensor [javascript] (done) | time=447ms
Sensor Analyzer for "php.ini" files [php]
Sensor Analyzer for "php.ini" files [php] (done) | time=12ms
Sensor Zero Coverage Sensor
Sensor Zero Coverage Sensor (done) | time=140ms
Sensor CPD Block Indexer
Sensor CPD Block Indexer (done) | time=367ms
SCM provider for this project is: git
35 files to be analyzed
35/35 files analyzed
140 files had no CPD blocks
Calculating CPD for 224 files
CPD calculation finished
Analysis report generated in 1253ms, dir size=6 MB
Analysis reports compressed in 2155ms, zip size=3 MB
Analysis report uploaded in 1563ms
ANALYSIS SUCCESSFUL, you can browse https://sonarcloud.io/dashboard/index/org.testng:testng
Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
More about the report processing at https://sonarcloud.io/api/ce/task?id=AV42f-R2-ycAxoR9jTZn
Task total time: 1:22.697 s
:sonarqube (Thread[main,5,main]) completed. Took 1 mins 58.407 secs.

BUILD SUCCESSFUL

Total time: 6 mins 43.27 secs
Stopped 0 worker daemon(s).

travis_time:end:0045ab37:start=1504152501800514573,finish=1504152905275149800,duration=403474635227[0Ktravis_fold:end:after_success.2[0K
Done. Your build exited with 0.
