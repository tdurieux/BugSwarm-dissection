diff --git a/CHANGES.txt b/CHANGES.txt
index 211b4322a..04d390d40 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,4 +1,5 @@
 Current
+Fixed: GITHUB-1517: TestNG exits with a zero when there are configuration failures (Krishnan Mahadevan)
 New  : GITHUB-1490: Add a listener for data provider interception (Krishnan Mahadevan)
 Fixed: GITHUB-1456: Remove/Warn support of constructor with String param (Krishnan Mahadevan)
 Fixed: GITHUB-1509: Improve error message when data provider returns a null value (Krishnan Mahadevan)
diff --git a/src/main/java/org/testng/TestNG.java b/src/main/java/org/testng/TestNG.java
index 7851c43cb..0f4949100 100644
--- a/src/main/java/org/testng/TestNG.java
+++ b/src/main/java/org/testng/TestNG.java
@@ -947,8 +947,7 @@ private void addReporter(Class<? extends IReporter> r) {
   }
 
   private void initializeDefaultListeners() {
-    m_testListeners.put(ExitCodeListener.class, new ExitCodeListener(this));
-
+    addListener((ITestNGListener) new ExitCodeListener(this));
     if (m_useDefaultListeners) {
       addReporter(SuiteHTMLReporter.class);
       addReporter(Main.class);
diff --git a/src/test/java/test/cli/github1517/ExitCodeListenerBehaviorTest.java b/src/test/java/test/cli/github1517/ExitCodeListenerBehaviorTest.java
new file mode 100644
index 000000000..57a642d02
--- /dev/null
+++ b/src/test/java/test/cli/github1517/ExitCodeListenerBehaviorTest.java
@@ -0,0 +1,27 @@
+package test.cli.github1517;
+
+import org.testng.Assert;
+import org.testng.TestNG;
+import org.testng.annotations.DataProvider;
+import org.testng.annotations.Test;
+import test.SimpleBaseTest;
+
+public class ExitCodeListenerBehaviorTest extends SimpleBaseTest {
+
+    @Test(dataProvider = "getData")
+    public void testMethod(Class<?> clazz, int expectedStatus) {
+        TestNG testNG = create(clazz);
+        testNG.run();
+        Assert.assertEquals(testNG.getStatus(), expectedStatus);
+    }
+
+    @DataProvider
+    public Object[][] getData() {
+        return new Object[][]{
+                {TestClassWithConfigFailureSample.class, 3},
+                {TestClassWithConfigSkipSample.class, 2},
+                {TestClassWithConfigSkipAndFailureSample.class, 3},
+        };
+    }
+
+}
diff --git a/src/test/java/test/cli/github1517/TestClassWithConfigFailureSample.java b/src/test/java/test/cli/github1517/TestClassWithConfigFailureSample.java
new file mode 100644
index 000000000..25f0d8865
--- /dev/null
+++ b/src/test/java/test/cli/github1517/TestClassWithConfigFailureSample.java
@@ -0,0 +1,16 @@
+package test.cli.github1517;
+
+import org.testng.Assert;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+public class TestClassWithConfigFailureSample {
+    @BeforeClass
+    public void beforeClass() {
+        throw new RuntimeException("Simulating a configuration failure");
+    }
+    @Test
+    public void testMethod() {
+        Assert.assertTrue(true);
+    }
+}
diff --git a/src/test/java/test/cli/github1517/TestClassWithConfigSkipAndFailureSample.java b/src/test/java/test/cli/github1517/TestClassWithConfigSkipAndFailureSample.java
new file mode 100644
index 000000000..329ed03c9
--- /dev/null
+++ b/src/test/java/test/cli/github1517/TestClassWithConfigSkipAndFailureSample.java
@@ -0,0 +1,21 @@
+package test.cli.github1517;
+
+import org.testng.Assert;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.Test;
+
+public class TestClassWithConfigSkipAndFailureSample {
+    @BeforeClass
+    public void beforeClass() {
+        throw new RuntimeException("Simulating a configuration failure");
+    }
+    @BeforeMethod
+    public void beforeMethod() {
+        //Intentionally left empty
+    }
+    @Test
+    public void testMethod() {
+        Assert.assertTrue(true);
+    }
+}
diff --git a/src/test/java/test/cli/github1517/TestClassWithConfigSkipSample.java b/src/test/java/test/cli/github1517/TestClassWithConfigSkipSample.java
new file mode 100644
index 000000000..9de8d5e15
--- /dev/null
+++ b/src/test/java/test/cli/github1517/TestClassWithConfigSkipSample.java
@@ -0,0 +1,17 @@
+package test.cli.github1517;
+
+import org.testng.Assert;
+import org.testng.SkipException;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+public class TestClassWithConfigSkipSample {
+    @BeforeClass
+    public void beforeClass() {
+        throw new SkipException("Simulating a configuration skip");
+    }
+    @Test
+    public void testMethod() {
+        Assert.assertTrue(true);
+    }
+}
diff --git a/src/test/resources/testng.xml b/src/test/resources/testng.xml
index 30d9b87c2..d0629cf79 100644
--- a/src/test/resources/testng.xml
+++ b/src/test/resources/testng.xml
@@ -98,6 +98,7 @@
       <class name="test.thread.TrueParallelTest" />
       <class name="test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest"/>
       <class name="test.github1405.TestExclusionOfMainMethod"/>
+      <class name="test.cli.github1517.ExitCodeListenerBehaviorTest"/>
 <!--
       <class name="test.thread.ParallelSuiteTest"/>
 -->
