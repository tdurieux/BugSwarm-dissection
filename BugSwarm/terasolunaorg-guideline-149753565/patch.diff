diff --git a/source/Appendix/Nexus.rst b/source/Appendix/Nexus.rst
index b5d2d0aa68..97995aa758 100755
--- a/source/Appendix/Nexus.rst
+++ b/source/Appendix/Nexus.rst
@@ -1,241 +1,241 @@
-NEXUSによるMavenリポジトリの管理
-================================================================================
-
-`Sonatype NEXUS <http://www.sonatype.org/nexus/>`_ はパッケージリポジトリマネージャソフトウェアである。
-OSS版と商用版がありますが、OSS版でも十分な機能がある。
-
-本章ではOSS版のNEXUSの役割と設定方法などについて解決する。
-
-Why NEXUS ?
---------------------------------------------------------------------------------
-
-開発者が一人しかいない場合には、インターネット上のセントラルリポジトリと、
-その開発者のPC内のローカルリポジトリだけでも、mavenやant+ivyを使って開発することは可能である。
-
-しかし、Javaアプリケーションを複数のサブプロジェクトに分けてチームで開発する場合には
-ライブラリの依存性解決が複雑になるため、ライブラリの依存性解決の自動化が必要となる。
-そのためにはパッケージリポジトリサーバの存在が不可欠である。
-
-Javaアプリケーション開発プロジェクトにおいて必要となるパッケージリポジトリは次のようなものがある。
-
-* セントラルリポジトリをはじめとする外部のリポジトリサーバへのアクセスをプロキシする **プロキシリポジトリ**
-* インターネット上のリポジトリでは公開されていない、他者から提供されたartifactを組織内部で配布するための **サードパーティリポジトリ**
-* そのプロジェクト自体で開発されたartifactを格納するための **プライベートリポジトリ**
-* 複数の異なるリポジトリのartifactへのアクセスを一つのリポジトリURLに集約するための **グループリポジトリ**
-
-NEXUSならこうした複数のリポジトリを楽に運用管理できる。
-
-Install and Start up
---------------------------------------------------------------------------------
-
-NEXUSをインストールするマシンは次の条件を満たしている必要がある。
-
-* JRE6以上がインストール済みであること
-* インターネット上の下記のURLにhttpアクセス可能であること
-
- * 先頭がhttp://repo1.maven.org/ で始まるURL（セントラルリポジトリ）
- * 先頭がhttp://repo.terasoluna.org/ で始まるURL（Terasolunaリポジトリ）
-
-インストール手順は次の通り。
-
-#. `NEXUS OSS <http://www.sonatype.org/nexus/>`_ をダウンロードし、アーカイブを展開する。
-#. bin/nexus または bin/nexus.bat を実行するとNEXUSが起動する。
-#. http://[IP or FQDN]:8081/nexus/ へアクセスし、NEXUSの初期画面が見えることを確認する。
-
-いくつかのリポジトリがデフォルトで用意されている。特別な場合を除いて、デフォルトのままでも十分に開発に使える。
-画面左のメニュー部のRepositoriesをクリックするとリポジトリ一覧が表示される。
-
-.. figure:: ./images/appendix-nexus-repositories.png
-   :alt: default repositories on nexus
-
-* **Central** = インターネット上のセントラルリポジトリ(http://repo1.maven.org/maven2/)へのproxyの役割を果たすリポジトリ。
-* **3rd party** = インターネット上で公開されているリポジトリにはないが、開発で必要となるサードパーティ製ライブラリを保管するリポジトリ。
-* **Releases** = 自分たちで開発したアプリケーションのリリースバージョンの成果物を格納するリポジトリ。
-* **Snapshots** = 自分たちで開発したアプリケーションのSNAPSHOTバージョンの成果物を格納するリポジトリ。
-* **Public Repositories** = 上記4つのリポジトリへ、一つのURLでアクセスできるようにするためのグループリポジトリ。
-
-Add TERASOLUNA Server Framework for Java (5.x) repository
---------------------------------------------------------------------------------
-
-TERASOLUNA Server Framework for Java (5.x)を用いて開発する場合、上記で説明したリポジトリに加えて、TERASOLUNA Server Framework for Java (5.x)のリポジトリを追加する必要がある。
-
-.. todo::
-
-    http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases/とhttp://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-3rdparty/へのproxyリポジトリの追加と、
-    publicリポジトリグループへの追加方法をキャプチャつきで書く。
-
-settings.xml
---------------------------------------------------------------------------------
-
-構築したNEXUSをmavenコマンドから使用するには、
-ローカル開発環境のユーザーホームディレクトリにsettings.xmlファイルを作成しておく必要がある。
-
-* Windows: C:/Users/[OSaccount]/.m2/settings.xml
-* Unix: $HOME/.m2/settings.xml
-
-.. code-block:: xml
-
- <?xml version="1.0" encoding="UTF-8"?>
- <settings>
- 
-   <mirrors>
-     <mirror>
-       <id>myteam-nexus</id>
-       <mirrorOf>*</mirrorOf>
-       <!-- CHANGE HERE by your team own nexus server -->
-       <url>http:// IP or FQDN /nexus/content/groups/public </url>
-     </mirror>
-   </mirrors>
- 
-   <activeProfiles>
-     <activeProfile>myteam-nexus</activeProfile>
-   </activeProfiles>
- 
-   <profiles>
-     <profile>
-       <id>myteam-nexus</id>
-       <repositories>
-         <repository>
-           <id>central</id>
-           <url>http://central</url>
-           <releases><enabled>true</enabled></releases>
-           <snapshots><enabled>true</enabled></snapshots>
-         </repository>
-       </repositories>
-       <pluginRepositories>
-         <pluginRepository>
-           <id>central</id>
-           <url>http://central</url>
-           <releases><enabled>true</enabled></releases>
-           <snapshots><enabled>true</enabled></snapshots>
-         </pluginRepository>
-       </pluginRepositories>
-     </profile>
-   </profiles>
- 
- </settings>
-
-.. note::
-
-  see also: `Configuring Maven to Use a Single Repository Group / Documentation Sonatype.com <http://books.sonatype.com/nexus-book/reference/config-maven.html>`_
-
-mvn deploy how to
---------------------------------------------------------------------------------
-
-jar/warファイルをartifactとしてパッケージリポジトリ（NEXUS）にアップロードするには、mvn deployコマンドを使用する。
-
-パッケージリポジトリに誰でもデプロイ可能な状態は混乱を招くので避けるべきである。
-そこで、Jenkinsだけがパッケージリポジトリに対してmvn deploy可能とする運用を推奨する。
-
-Jenkinsサーバ内のJenkinsの実行ユーザーのホームディレクトリ配下の.m2/settings.xmlに、
-前述と同じ内容に加えて、さらに下記を追加しておく。
-
-.. code-block:: xml
-
-  <servers>
-    <server>
-     <id>releases</id>
-     <username>deployment</username>
-     <password>deployment123</password>
-    </server>
-    <server>
-      <id>snapshots</id>
-      <username>deployment</username>
-      <password>deployment123</password>
-    </server>
-  </servers>
-
-deploymentはデプロイ権限を持つアカウント（NEXUSにデフォルトで設定済みの）であり、
-deployment123はそのパスワードである。
-もちろん、NEXUSのGUI画面上であらかじめパスワードを変更しておくことを推奨する。
-
-.. note::
- settings.xml上にplain textでパスワードを保存することを避けたい場合には、
- mavenのパスワード暗号化機能を利用するとよい。詳しくは
- `Maven - Password Encryption <http://maven.apache.org/guides/mini/guide-encryption.html>`_
- を参照のこと。
-
-Jenkinsのビルドジョブでは次のようにしてmvn deploy手順を設定する。
-
-.. todo::
-
-  Jenkinsのビルドジョブのキャプチャ画像
-
-pom.xml
---------------------------------------------------------------------------------
-
-mavenで管理されたプロジェクトでは、artifactとなった自分自身をどのパッケージリポジトリに格納されるべきかを
-pom.xml上の<distributionManagement>タグで表明する必要がある。
-
-.. code-block:: xml
-
- <distributionManagement>
-   <repository>
-     <id>releases</id>
-     <!-- CHANGE HERE by your team nexus server -->
-     <url>http://192.168.0.1:8081/nexus/content/repositories/releases/</url>
-   </repository>
-   <snapshotRepository>
-     <id>snapshots</id>
-     <!-- CHANGE HERE by your team nexus server -->
-     <url>http://192.168.0.1:8081/nexus/content/repositories/snapshots/</url>
-   </snapshotRepository>
- </distributionManagement>
-
-前述のmvn deployコマンドは、<distributionManagement>タグで指定されたURLに対してHTTP PUTでartifactをアップロードする。
-
-Upload 3rd party artifact (ex. ojdbc6.jar)
---------------------------------------------------------------------------------
-
-サードパーティ用リポジトリには、外部のリモートリポジトリでは公開されていないartifactを格納する。
-
-典型的な例が、oracleのJDBCドライバ(ojdbc\*.jar)である。
-RDBMSとしてoracleを使用する場合に必須だが、
-セントラルリポジトリはもちろん、インターネット上の公開リポジトリに格納されていることはほとんどない。
-そのため、組織内のパッケージリポジトリに格納しておく必要がある。
-
-1. adminユーザーでログインします。（デフォルトのパスワードはadmin123）
-
- .. figure:: ./images/appendix-nexus-login.png
-
-2. 3rdPartyリポジトリを選択し、 **Artifact Upload** タブを選択する。
-
- .. figure:: ./images/appendix-nexus-select-3rdparty.png
-
-3. GAV情報を入力します。(GAV = groupId, artifactId, version)
-
- .. figure:: ./images/appendix-nexus-ojdbc6-input-gav.png
-
-4. ローカルPC上のojdbc6.jarファイルを選択し、 **Add Artifact** ボタンを押す。
-
- .. figure:: ./images/appendix-nexus-ojdbc6-selectfile.png
-
-5. 最後に **Upload Artifact(s)** ボタンを押すと、リポジトリにjarファイルが格納される。
-
- .. figure:: ./images/appendix-nexus-ojdbc6-upload.png
-
-以上でアップロード作業は完了。
-
-.. note::
- 
- NEXUSのGUI画面を使ってartifactをアップロードする作業は完全に手作業であり
- オペレーションミスを誘発しやすいため、推奨しない。
- odjbc6.jarのような、サードパーティ製で、しかも1個または数個程度のファイルで
- 構成可能な単純なライブラリに対してのみ、ここで説明している方法を用いるべきである。
- それ以外のケースでは **mvn deploy** コマンドを使うべきである。
-
-use artifact
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-3rd partyリポジトリ上のojdbc6をプロジェクトの依存性管理に追加するには、
-そのプロジェクトのpom.xmlにdependencyタグを追加するだけである。
-
-**Browse Storage** タブから目的のartifactを選択すると、画面右側にdependencyタグのサンプルが表示される。
-それをpom.xmlにコピー＆ペーストすればよい。
-
-.. figure:: ./images/appendix-nexus-ojdbc6-dependency-tag.png
-
-.. raw:: latex
-
-   \newpage
-
+NEXUSによるMavenリポジトリの管理
+================================================================================
+
+`Sonatype NEXUS <http://www.sonatype.org/nexus/>`_ はパッケージリポジトリマネージャソフトウェアである。
+OSS版と商用版がありますが、OSS版でも十分な機能がある。
+
+本章ではOSS版のNEXUSの役割と設定方法などについて解決する。
+
+Why NEXUS ?
+--------------------------------------------------------------------------------
+
+開発者が一人しかいない場合には、インターネット上のセントラルリポジトリと、
+その開発者のPC内のローカルリポジトリだけでも、mavenやant+ivyを使って開発することは可能である。
+
+しかし、Javaアプリケーションを複数のサブプロジェクトに分けてチームで開発する場合には
+ライブラリの依存性解決が複雑になるため、ライブラリの依存性解決の自動化が必要となる。
+そのためにはパッケージリポジトリサーバの存在が不可欠である。
+
+Javaアプリケーション開発プロジェクトにおいて必要となるパッケージリポジトリは次のようなものがある。
+
+* セントラルリポジトリをはじめとする外部のリポジトリサーバへのアクセスをプロキシする **プロキシリポジトリ**
+* インターネット上のリポジトリでは公開されていない、他者から提供されたartifactを組織内部で配布するための **サードパーティリポジトリ**
+* そのプロジェクト自体で開発されたartifactを格納するための **プライベートリポジトリ**
+* 複数の異なるリポジトリのartifactへのアクセスを一つのリポジトリURLに集約するための **グループリポジトリ**
+
+NEXUSならこうした複数のリポジトリを楽に運用管理できる。
+
+Install and Start up
+--------------------------------------------------------------------------------
+
+NEXUSをインストールするマシンは次の条件を満たしている必要がある。
+
+* JRE6以上がインストール済みであること
+* インターネット上の下記のURLにhttpアクセス可能であること
+
+ * 先頭がhttp://repo1.maven.org/ で始まるURL（セントラルリポジトリ）
+ * 先頭がhttp://repo.terasoluna.org/ で始まるURL（Terasolunaリポジトリ）
+
+インストール手順は次の通り。
+
+#. `NEXUS OSS <http://www.sonatype.org/nexus/>`_ をダウンロードし、アーカイブを展開する。
+#. bin/nexus または bin/nexus.bat を実行するとNEXUSが起動する。
+#. http://[IP or FQDN]:8081/nexus/ へアクセスし、NEXUSの初期画面が見えることを確認する。
+
+いくつかのリポジトリがデフォルトで用意されている。特別な場合を除いて、デフォルトのままでも十分に開発に使える。
+画面左のメニュー部のRepositoriesをクリックするとリポジトリ一覧が表示される。
+
+.. figure:: ./images/appendix-nexus-repositories.png
+   :alt: default repositories on nexus
+
+* **Central** = インターネット上のセントラルリポジトリ(http://repo1.maven.org/maven2/)へのproxyの役割を果たすリポジトリ。
+* **3rd party** = インターネット上で公開されているリポジトリにはないが、開発で必要となるサードパーティ製ライブラリを保管するリポジトリ。
+* **Releases** = 自分たちで開発したアプリケーションのリリースバージョンの成果物を格納するリポジトリ。
+* **Snapshots** = 自分たちで開発したアプリケーションのSNAPSHOTバージョンの成果物を格納するリポジトリ。
+* **Public Repositories** = 上記4つのリポジトリへ、一つのURLでアクセスできるようにするためのグループリポジトリ。
+
+Add TERASOLUNA Server Framework for Java (5.x) repository
+--------------------------------------------------------------------------------
+
+TERASOLUNA Server Framework for Java (5.x)を用いて開発する場合、上記で説明したリポジトリに加えて、TERASOLUNA Server Framework for Java (5.x)のリポジトリを追加する必要がある。
+
+.. todo::
+
+    http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases/とhttp://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-3rdparty/へのproxyリポジトリの追加と、
+    publicリポジトリグループへの追加方法をキャプチャつきで書く。
+
+settings.xml
+--------------------------------------------------------------------------------
+
+構築したNEXUSをmavenコマンドから使用するには、
+ローカル開発環境のユーザーホームディレクトリにsettings.xmlファイルを作成しておく必要がある。
+
+* Windows: C:/Users/[OSaccount]/.m2/settings.xml
+* Unix: $HOME/.m2/settings.xml
+
+.. code-block:: xml
+
+ <?xml version="1.0" encoding="UTF-8"?>
+ <settings>
+ 
+   <mirrors>
+     <mirror>
+       <id>myteam-nexus</id>
+       <mirrorOf>*</mirrorOf>
+       <!-- CHANGE HERE by your team own nexus server -->
+       <url>http:// IP or FQDN /nexus/content/groups/public </url>
+     </mirror>
+   </mirrors>
+ 
+   <activeProfiles>
+     <activeProfile>myteam-nexus</activeProfile>
+   </activeProfiles>
+ 
+   <profiles>
+     <profile>
+       <id>myteam-nexus</id>
+       <repositories>
+         <repository>
+           <id>central</id>
+           <url>http://central</url>
+           <releases><enabled>true</enabled></releases>
+           <snapshots><enabled>true</enabled></snapshots>
+         </repository>
+       </repositories>
+       <pluginRepositories>
+         <pluginRepository>
+           <id>central</id>
+           <url>http://central</url>
+           <releases><enabled>true</enabled></releases>
+           <snapshots><enabled>true</enabled></snapshots>
+         </pluginRepository>
+       </pluginRepositories>
+     </profile>
+   </profiles>
+ 
+ </settings>
+
+.. note::
+
+  see also: `Configuring Maven to Use a Single Repository Group / Documentation Sonatype.com <http://books.sonatype.com/nexus-book/reference/config-maven.html>`_
+
+mvn deploy how to
+--------------------------------------------------------------------------------
+
+jar/warファイルをartifactとしてパッケージリポジトリ（NEXUS）にアップロードするには、mvn deployコマンドを使用する。
+
+パッケージリポジトリに誰でもデプロイ可能な状態は混乱を招くので避けるべきである。
+そこで、Jenkinsだけがパッケージリポジトリに対してmvn deploy可能とする運用を推奨する。
+
+Jenkinsサーバ内のJenkinsの実行ユーザーのホームディレクトリ配下の.m2/settings.xmlに、
+前述と同じ内容に加えて、さらに下記を追加しておく。
+
+.. code-block:: xml
+
+  <servers>
+    <server>
+     <id>releases</id>
+     <username>deployment</username>
+     <password>deployment123</password>
+    </server>
+    <server>
+      <id>snapshots</id>
+      <username>deployment</username>
+      <password>deployment123</password>
+    </server>
+  </servers>
+
+deploymentはデプロイ権限を持つアカウント（NEXUSにデフォルトで設定済みの）であり、
+deployment123はそのパスワードである。
+もちろん、NEXUSのGUI画面上であらかじめパスワードを変更しておくことを推奨する。
+
+.. note::
+ settings.xml上にplain textでパスワードを保存することを避けたい場合には、
+ mavenのパスワード暗号化機能を利用するとよい。詳しくは
+ `Maven - Password Encryption <http://maven.apache.org/guides/mini/guide-encryption.html>`_
+ を参照のこと。
+
+Jenkinsのビルドジョブでは次のようにしてmvn deploy手順を設定する。
+
+.. todo::
+
+  Jenkinsのビルドジョブのキャプチャ画像
+
+pom.xml
+--------------------------------------------------------------------------------
+
+mavenで管理されたプロジェクトでは、artifactとなった自分自身をどのパッケージリポジトリに格納されるべきかを
+pom.xml上の<distributionManagement>タグで表明する必要がある。
+
+.. code-block:: xml
+
+ <distributionManagement>
+   <repository>
+     <id>releases</id>
+     <!-- CHANGE HERE by your team nexus server -->
+     <url>http://192.168.0.1:8081/nexus/content/repositories/releases/</url>
+   </repository>
+   <snapshotRepository>
+     <id>snapshots</id>
+     <!-- CHANGE HERE by your team nexus server -->
+     <url>http://192.168.0.1:8081/nexus/content/repositories/snapshots/</url>
+   </snapshotRepository>
+ </distributionManagement>
+
+前述のmvn deployコマンドは、<distributionManagement>タグで指定されたURLに対してHTTP PUTでartifactをアップロードする。
+
+Upload 3rd party artifact (ex. ojdbc6.jar)
+--------------------------------------------------------------------------------
+
+サードパーティ用リポジトリには、外部のリモートリポジトリでは公開されていないartifactを格納する。
+
+典型的な例が、oracleのJDBCドライバ(ojdbc\*.jar)である。
+RDBMSとしてoracleを使用する場合に必須だが、
+セントラルリポジトリはもちろん、インターネット上の公開リポジトリに格納されていることはほとんどない。
+そのため、組織内のパッケージリポジトリに格納しておく必要がある。
+
+1. adminユーザーでログインします。（デフォルトのパスワードはadmin123）
+
+ .. figure:: ./images/appendix-nexus-login.png
+
+2. 3rdPartyリポジトリを選択し、 **Artifact Upload** タブを選択する。
+
+ .. figure:: ./images/appendix-nexus-select-3rdparty.png
+
+3. GAV情報を入力します。(GAV = groupId, artifactId, version)
+
+ .. figure:: ./images/appendix-nexus-ojdbc6-input-gav.png
+
+4. ローカルPC上のojdbc6.jarファイルを選択し、 **Add Artifact** ボタンを押す。
+
+ .. figure:: ./images/appendix-nexus-ojdbc6-selectfile.png
+
+5. 最後に **Upload Artifact(s)** ボタンを押すと、リポジトリにjarファイルが格納される。
+
+ .. figure:: ./images/appendix-nexus-ojdbc6-upload.png
+
+以上でアップロード作業は完了。
+
+.. note::
+ 
+ NEXUSのGUI画面を使ってartifactをアップロードする作業は完全に手作業であり
+ オペレーションミスを誘発しやすいため、推奨しない。
+ odjbc6.jarのような、サードパーティ製で、しかも1個または数個程度のファイルで
+ 構成可能な単純なライブラリに対してのみ、ここで説明している方法を用いるべきである。
+ それ以外のケースでは **mvn deploy** コマンドを使うべきである。
+
+use artifact
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+3rd partyリポジトリ上のojdbc6をプロジェクトの依存性管理に追加するには、
+そのプロジェクトのpom.xmlにdependencyタグを追加するだけである。
+
+**Browse Storage** タブから目的のartifactを選択すると、画面右側にdependencyタグのサンプルが表示される。
+それをpom.xmlにコピー＆ペーストすればよい。
+
+.. figure:: ./images/appendix-nexus-ojdbc6-dependency-tag.png
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Appendix/ReferenceBooks.rst b/source/Appendix/ReferenceBooks.rst
index b4f6aeb7e0..a6cd65098d 100755
--- a/source/Appendix/ReferenceBooks.rst
+++ b/source/Appendix/ReferenceBooks.rst
@@ -1,50 +1,50 @@
-参考書籍
-================================================================================
-本ガイドラインを執筆する上で参考にした書籍を列挙する。必要に応じて参照されたい。
-
-.. tabularcolumns:: |p{0.60\linewidth}|p{0.25\linewidth}|p{0.15\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 60 25 15
-
-   * - 書籍名
-     - 出版社
-     - 備考
-   * - `Pro Spring 4th Edition <http://www.apress.com/9781430261513>`_
-     - APress
-     -
-   * - `Pro Spring 3 <http://www.apress.com/9781430241072>`_
-     - APress
-     - 
-   * - `Pro Spring MVC: With Web Flow <http://www.apress.com/9781430241553>`_
-     - APress
-     - 
-   * - `Spring Persistence with Hibernate <http://www.apress.com/9781430226321>`_
-     - APress
-     - 
-   * - `Spring in Practice <http://www.manning.com/wheeler/>`_
-     - Manning
-     - 
-   * - `Spring in Action, Third Edition <http://www.manning.com/walls4/>`_
-     - Manning
-     - 
-   * - `Spring Data Modern Data Access for Enterprise Java <http://shop.oreilly.com/product/0636920024767.do>`_
-     - O'Reilly Media
-     - 
-   * - `Spring Security 3.1 <http://www.packtpub.com/spring-security-3-1/book>`_
-     - Packt Publishing
-     - 
-   * - `Spring3入門―Javaフレームワーク・より良い設計とアーキテクチャ <http://gihyo.jp/book/2012/978-4-7741-5380-3>`_
-     - 技術評論社
-     - 日本語
-   * - `Beginning Java EE 6 GlassFish 3で始めるエンタープライズJava <http://books.shoeisha.co.jp/book/b92647.html>`_
-     - 翔泳社
-     - 日本語
-   * - Seasar2とHibernateで学ぶデータベースアクセス JPA入門
-     - 毎日コミュニケーションズ
-     - 日本語
-
-.. raw:: latex
-
-   \newpage
-
+参考書籍
+================================================================================
+本ガイドラインを執筆する上で参考にした書籍を列挙する。必要に応じて参照されたい。
+
+.. tabularcolumns:: |p{0.60\linewidth}|p{0.25\linewidth}|p{0.15\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 60 25 15
+
+   * - 書籍名
+     - 出版社
+     - 備考
+   * - `Pro Spring 4th Edition <http://www.apress.com/9781430261513>`_
+     - APress
+     -
+   * - `Pro Spring 3 <http://www.apress.com/9781430241072>`_
+     - APress
+     - 
+   * - `Pro Spring MVC: With Web Flow <http://www.apress.com/9781430241553>`_
+     - APress
+     - 
+   * - `Spring Persistence with Hibernate <http://www.apress.com/9781430226321>`_
+     - APress
+     - 
+   * - `Spring in Practice <http://www.manning.com/wheeler/>`_
+     - Manning
+     - 
+   * - `Spring in Action, Third Edition <http://www.manning.com/walls4/>`_
+     - Manning
+     - 
+   * - `Spring Data Modern Data Access for Enterprise Java <http://shop.oreilly.com/product/0636920024767.do>`_
+     - O'Reilly Media
+     - 
+   * - `Spring Security 3.1 <http://www.packtpub.com/spring-security-3-1/book>`_
+     - Packt Publishing
+     - 
+   * - `Spring3入門―Javaフレームワーク・より良い設計とアーキテクチャ <http://gihyo.jp/book/2012/978-4-7741-5380-3>`_
+     - 技術評論社
+     - 日本語
+   * - `Beginning Java EE 6 GlassFish 3で始めるエンタープライズJava <http://books.shoeisha.co.jp/book/b92647.html>`_
+     - 翔泳社
+     - 日本語
+   * - Seasar2とHibernateで学ぶデータベースアクセス JPA入門
+     - 毎日コミュニケーションズ
+     - 日本語
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Appendix/SpringComprehensionCheck.rst b/source/Appendix/SpringComprehensionCheck.rst
index 3c4e1000a8..a4e1dc25aa 100755
--- a/source/Appendix/SpringComprehensionCheck.rst
+++ b/source/Appendix/SpringComprehensionCheck.rst
@@ -1,145 +1,145 @@
-Spring Framework理解度チェックテスト
-================================================================================
-
-#. Beanの依存関係が以下の図のようになるように(1)～(4)を埋めてください。import文は省略してください。
-
-    .. figure:: images/appendix-spring_comprehension_check-dependency_relation.png
-       :width: 80%
-
-    .. code-block:: java
-    
-        @Contoller
-        public class XxxController {
-          (1)
-          protected (2) yyyService;
-        
-          // omitted
-        }
-    
-    .. code-block:: java
-    
-        @Service
-        @Transactional
-        public class YyyServiceImpl implements YyyService {
-          (1)
-          protected (4) zzzRepository;
-        
-          // omitted
-        }
-
-    .. note::
-    
-        ``@Service``\ ,\ ``@Controller``\ は\ ``org.springframework.stereotype``\ パッケージのアノテーション、\ ``@Transactional``\ は\ ``org.springframework.transaction.annotation``\ のアノテーションである。
-
-#. \ ``@Controller``\ と\ ``@Service``\ と\ ``@Repository``\ はそれぞれどういう場合に使用するか説明してください。
-    
-    .. note::
-    
-        それぞれ\ ``org.springframework.stereotype``\ パッケージのアノテーションです。
-
-#. \ ``@Resource``\ と\ ``@Inject``\ の違いを説明してください
-
-    .. note:: \ ``@Resource``\ は\ ``javax.annotation``\ パッケージ、\ ``@Inject``\ は\ ``javax.inject``\ パッケージのアノテーションです。
-    
-#. Scopeがsingletonの場合とprototypeの場合の違いを説明してください。
-
-#. Scopeに関する次の説明で(1)～(3)を埋めてください。ただし(1)、(2)には"singleton"または"prototype"のどちらが入り、同じ値は入りません。またimport文は省略してください。
-
-    .. code-block:: java
-    
-        @Component
-        (3)
-        public class XxxComponent {
-          // omitted
-        }
-        
-    .. note::
-        
-        \ ``@Component``\ は\ ``org.springframework.stereotype.Component``\ 
-        
-    \ ``@Component``\ をつけたBeanのscopeはデフォルトで(1)である。scopeを(2)にする場合、(3)をつければよい(上記ソース参照)。
-
-#. 次のBean定義を行った場合、どのようなBeanがDIコンテナに登録されますか。
-
-    .. code-block:: xml
-    
-        <bean id="foo" class="xxx.yyy.zzz.Foo" factory-method="create">
-            <constructor-arg index="0" value="aaa" />
-            <constructor-arg index="1" value="bbb" />
-        </bean>
-
-#. \ ``com.example.domain``\ パッケージ以下がcomponent scanの対象となるように以下のBean定義の(1)～(3)を埋めてください。
-
-
-    .. code-block:: text
-    
-        <context:(1) (2)="(3)" />
-        
-    .. note::
-    
-        Bean定義ファイルには
-        
-        xmlns:context="http://www.springframework.org/schema/context"
-        
-        の定義があるものとする。
-        
-
-#. プロパティファイルに関する次の説明で(1)～(2)を埋めてください。import文は省略してください。
-
-    設定値をプロパティファイルに外出しし、Bean定義ファイル内から\ ``${key}``\ 形式で参照したい場合に\ ``<context:property-placeholder>``\ 要素の\ ``locations``\ 属性にプロパティファイルのパスを設定すれば読み込むことができる。クラスパス直下のMETA-INF/springディレクトリ以下の任意のプロパティファイルを読み込む場合は(1)のように指定する。また読み込んだプロパティ値はBeanにもインジェクション可能であり下記コードのように@(2)アノテーションをつければよい。
-
-    .. code-block:: xml
-
-        <context:property-placeholder locations="(1)" />
-
-    .. code-block:: properties
-    
-        emails.min.count=1
-        emails.max.count=4
-
-    .. code-block:: java
-
-        @Service
-        @Transactional
-        public class XxxServiceImpl implements XxxService {
-          @xxx("${emails.min.count}") // (2)xxx部分
-          protected int emailsMinCount;
-          @xxx("${emails.max.count}") // (2)xxx部分
-          protected int emailsMaxCount;
-          // omitted
-        }
-
-    .. note::
-    
-          Bean定義ファイルには
-          
-          xmlns:context="http://www.springframework.org/schema/context"
-          
-          の定義があるものとする。
-        
-
-#. Springが提供するAOPのAdviceについての次の説明で(1)～(5)を埋めてください。尚、(1)～(5)には全て別の内容が入ります。
-
-    .. note::
-    
-        特定のメソッド呼び出しの前に処理を割り込ませたい場合のAdviceは(1)で、メソッド呼び出し後に割り込ませたい場合のAdviceは(2)である。前後両方に割り込ませたい場合は(3) Adviceを使用すればよい。メソッドが正常終了したときにのみ実行されるAdviceは(4)であり、例外発生時に実行されるAdviceは(5)である。
-
-
-#. \ ``@Transactional``\ アノテーションによるトランザクション管理を行うために以下のBean定義の(*)を埋めてください。
-
-    .. code-block:: text
-
-        <tx:(*) />
-
-    .. note::
-    
-       Bean定義ファイルには
-       
-       xmlns:tx="http://www.springframework.org/schema/tx"
-       
-       の定義があるものとする。
-
-.. raw:: latex
-
-   \newpage
-
+Spring Framework理解度チェックテスト
+================================================================================
+
+#. Beanの依存関係が以下の図のようになるように(1)～(4)を埋めてください。import文は省略してください。
+
+    .. figure:: images/appendix-spring_comprehension_check-dependency_relation.png
+       :width: 80%
+
+    .. code-block:: java
+    
+        @Contoller
+        public class XxxController {
+          (1)
+          protected (2) yyyService;
+        
+          // omitted
+        }
+    
+    .. code-block:: java
+    
+        @Service
+        @Transactional
+        public class YyyServiceImpl implements YyyService {
+          (1)
+          protected (4) zzzRepository;
+        
+          // omitted
+        }
+
+    .. note::
+    
+        ``@Service``\ ,\ ``@Controller``\ は\ ``org.springframework.stereotype``\ パッケージのアノテーション、\ ``@Transactional``\ は\ ``org.springframework.transaction.annotation``\ のアノテーションである。
+
+#. \ ``@Controller``\ と\ ``@Service``\ と\ ``@Repository``\ はそれぞれどういう場合に使用するか説明してください。
+    
+    .. note::
+    
+        それぞれ\ ``org.springframework.stereotype``\ パッケージのアノテーションです。
+
+#. \ ``@Resource``\ と\ ``@Inject``\ の違いを説明してください
+
+    .. note:: \ ``@Resource``\ は\ ``javax.annotation``\ パッケージ、\ ``@Inject``\ は\ ``javax.inject``\ パッケージのアノテーションです。
+    
+#. Scopeがsingletonの場合とprototypeの場合の違いを説明してください。
+
+#. Scopeに関する次の説明で(1)～(3)を埋めてください。ただし(1)、(2)には"singleton"または"prototype"のどちらが入り、同じ値は入りません。またimport文は省略してください。
+
+    .. code-block:: java
+    
+        @Component
+        (3)
+        public class XxxComponent {
+          // omitted
+        }
+        
+    .. note::
+        
+        \ ``@Component``\ は\ ``org.springframework.stereotype.Component``\ 
+        
+    \ ``@Component``\ をつけたBeanのscopeはデフォルトで(1)である。scopeを(2)にする場合、(3)をつければよい(上記ソース参照)。
+
+#. 次のBean定義を行った場合、どのようなBeanがDIコンテナに登録されますか。
+
+    .. code-block:: xml
+    
+        <bean id="foo" class="xxx.yyy.zzz.Foo" factory-method="create">
+            <constructor-arg index="0" value="aaa" />
+            <constructor-arg index="1" value="bbb" />
+        </bean>
+
+#. \ ``com.example.domain``\ パッケージ以下がcomponent scanの対象となるように以下のBean定義の(1)～(3)を埋めてください。
+
+
+    .. code-block:: text
+    
+        <context:(1) (2)="(3)" />
+        
+    .. note::
+    
+        Bean定義ファイルには
+        
+        xmlns:context="http://www.springframework.org/schema/context"
+        
+        の定義があるものとする。
+        
+
+#. プロパティファイルに関する次の説明で(1)～(2)を埋めてください。import文は省略してください。
+
+    設定値をプロパティファイルに外出しし、Bean定義ファイル内から\ ``${key}``\ 形式で参照したい場合に\ ``<context:property-placeholder>``\ 要素の\ ``locations``\ 属性にプロパティファイルのパスを設定すれば読み込むことができる。クラスパス直下のMETA-INF/springディレクトリ以下の任意のプロパティファイルを読み込む場合は(1)のように指定する。また読み込んだプロパティ値はBeanにもインジェクション可能であり下記コードのように@(2)アノテーションをつければよい。
+
+    .. code-block:: xml
+
+        <context:property-placeholder locations="(1)" />
+
+    .. code-block:: properties
+    
+        emails.min.count=1
+        emails.max.count=4
+
+    .. code-block:: java
+
+        @Service
+        @Transactional
+        public class XxxServiceImpl implements XxxService {
+          @xxx("${emails.min.count}") // (2)xxx部分
+          protected int emailsMinCount;
+          @xxx("${emails.max.count}") // (2)xxx部分
+          protected int emailsMaxCount;
+          // omitted
+        }
+
+    .. note::
+    
+          Bean定義ファイルには
+          
+          xmlns:context="http://www.springframework.org/schema/context"
+          
+          の定義があるものとする。
+        
+
+#. Springが提供するAOPのAdviceについての次の説明で(1)～(5)を埋めてください。尚、(1)～(5)には全て別の内容が入ります。
+
+    .. note::
+    
+        特定のメソッド呼び出しの前に処理を割り込ませたい場合のAdviceは(1)で、メソッド呼び出し後に割り込ませたい場合のAdviceは(2)である。前後両方に割り込ませたい場合は(3) Adviceを使用すればよい。メソッドが正常終了したときにのみ実行されるAdviceは(4)であり、例外発生時に実行されるAdviceは(5)である。
+
+
+#. \ ``@Transactional``\ アノテーションによるトランザクション管理を行うために以下のBean定義の(*)を埋めてください。
+
+    .. code-block:: text
+
+        <tx:(*) />
+
+    .. note::
+    
+       Bean定義ファイルには
+       
+       xmlns:tx="http://www.springframework.org/schema/tx"
+       
+       の定義があるものとする。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Appendix/index.rst b/source/Appendix/index.rst
index c258c60ee5..61de66891e 100755
--- a/source/Appendix/index.rst
+++ b/source/Appendix/index.rst
@@ -1,16 +1,16 @@
-========================
-Appendix(Know How)
-========================
-
-.. toctree::
-   :maxdepth: 1
-
-   Nexus
-   Lombok
-   ReferenceBooks
-   SpringComprehensionCheck
-
-.. raw:: latex
-
-   \newpage
-
+========================
+Appendix(Know How)
+========================
+
+.. toctree::
+   :maxdepth: 1
+
+   Nexus
+   Lombok
+   ReferenceBooks
+   SpringComprehensionCheck
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/ArchitectureInDetail/WebApplicationDetail/Validation.rst b/source/ArchitectureInDetail/WebApplicationDetail/Validation.rst
index 37b4b28ddc..162a9330d5 100755
--- a/source/ArchitectureInDetail/WebApplicationDetail/Validation.rst
+++ b/source/ArchitectureInDetail/WebApplicationDetail/Validation.rst
@@ -3700,16 +3700,6 @@ Bean Validationの制約アノテーションを指定する方法について
 
     \ ``@ControllerAdvice``\ アノテーションの詳細については「:ref:`application_layer_controller_advice`」を参照されたい。
 
-.. warning::
-
-    \ ``ConstraintViolation#getMessage``\ メソッドを使用することでエラーメッセージを取得することができるが、Springの機能によるメッセージ補完は行われないため、エラーメッセージに \ ``{0}``\ でフィールド名を埋め込むことはできない。
-    
-    代わりに、フィールド名は\ ``ConstraintViolation#getPropertyPath``\メソッドで取得することが可能である。
-    
-    Springの機能によるメッセージ補完については、:ref:`Validation_message_in_validationmessages` のNoteを参照されたい。
-    
-    \ ``ConstraintViolation``\ の詳細については、\ `Hibernate Validatorのリファレンス <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#section-constraint-violation-methods>`_\ を参照されたい。
-    
 
 Appendix
 --------------------------------------------------------------------------------
diff --git a/source/ArchitectureInDetail/WebServiceDetail/RestClient.rst b/source/ArchitectureInDetail/WebServiceDetail/RestClient.rst
index 7664efac8d..3112d9d280 100755
--- a/source/ArchitectureInDetail/WebServiceDetail/RestClient.rst
+++ b/source/ArchitectureInDetail/WebServiceDetail/RestClient.rst
@@ -1908,212 +1908,212 @@ Appendix
 HTTP Proxyサーバの設定方法
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-サーバへアクセスする際にHTTP Proxyサーバを経由する必要がある場合は、システムプロパティやJVM起動引数、または\ ``RestTemplate``\ の\ ``RequestFactory``\ プロパティにHTTP Proxyサーバの設定が必要となる。
-
-システムプロパティやJVM起動引数に設定した場合、アプリケーション全体に影響を与えてしまうため、\ ``RestTemplate``\ 毎にHTTP Proxyサーバの設定を行うことのできる\ ``RequestFactory``\ プロパティに設定を行う例を紹介する。
-また、\ ``RequestFactory``\ プロパティには、HTTP Proxyサーバの資格情報が不要な場合、\ ``RestTemplate``\ でデフォルトで使用されている\ ``SimpleClientHttpRequestFactory``\ を使用することもできるが、
-例では、資格情報が必要な場合に使用することができる\ ``HttpComponentsClientHttpRequestFactory``\ と、その内部で使用する\ ``Apache HTTP Client``\ を使用する方法を紹介する。
-
+サーバへアクセスする際にHTTP Proxyサーバを経由する必要がある場合は、システムプロパティやJVM起動引数、または\ ``RestTemplate``\ の\ ``RequestFactory``\ プロパティにHTTP Proxyサーバの設定が必要となる。
 
+システムプロパティやJVM起動引数に設定した場合、アプリケーション全体に影響を与えてしまうため、\ ``RestTemplate``\ 毎にHTTP Proxyサーバの設定を行うことのできる\ ``RequestFactory``\ プロパティに設定を行う例を紹介する。
+また、\ ``RequestFactory``\ プロパティには、HTTP Proxyサーバの資格情報が不要な場合、\ ``RestTemplate``\ でデフォルトで使用されている\ ``SimpleClientHttpRequestFactory``\ を使用することもできるが、
+例では、資格情報が必要な場合に使用することができる\ ``HttpComponentsClientHttpRequestFactory``\ と、その内部で使用する\ ``Apache HTTP Client``\ を使用する方法を紹介する。
+
+
 HTTP Proxyサーバの指定方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-HTTP Proxyサーバの接続先の指定は、\ ``RestTemplate``\ に対して、\ ``org.springframework.http.client.HttpComponentsClientHttpRequestFactory``\ を使用し指定する。
-
-**pom.xml**
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <dependency>
-        <groupId>org.apache.httpcomponents</groupId>
-        <artifactId>httpclient</artifactId>
-    </dependency>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``HttpComponentsClientHttpRequestFactory``\ 内で使用する\ ``Apache HTTP Client``\ を使用するために、\ ``Apache HttpComponents Client``\ を :file:`pom.xml` の依存ライブラリに追加する。
-        | なお、\ ``Apache HttpComponents Client``\ のバージョンは、 Spring IO Platform にて管理されているため、ここで\ ``Apache HttpComponents Client``\ のバージョンを定義する必要はない。
-
-
-**Bean定義ファイル**
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <bean id="proxyHttpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create" >
-        <!-- (2) -->
-        <property name="proxy">
-            <bean class="org.apache.http.HttpHost" >
-                <constructor-arg index="0" value="${rscl.http.proxyHost}" />    <!-- (3) -->
-                <constructor-arg index="1" value="${rscl.http.proxyPort}" />    <!-- (4) -->
-            </bean>
-        </property>
-    </bean>
-
-    <!-- (5) -->
-    <bean id="proxyRestTemplate" class="org.springframework.web.client.RestTemplate" >
-        <constructor-arg>
-            <!-- (6) -->
-            <bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
-                <!-- (7) -->
-                <constructor-arg>
-                    <bean factory-bean="proxyHttpClientBuilder" factory-method="build" />
-                </constructor-arg>
-            </bean>
-        </constructor-arg>
-    </bean>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``org.apache.http.impl.client.HttpClientBuilder``\ を使用し、\ ``org.apache.http.client.HttpClient``\ の設定を行う。
-    * - | (2)
-      - | \ ``HttpClientBuilder``\ の\ ``proxy``\ プロパティに、\ HTTP Proxyサーバの設定を行った\ ``org.apache.http.HttpHost``\ を設定する。
-    * - | (3)
-      - | \ ``HttpHost``\ のコンストラクタの引数に、プロパティファイルに設定されたキー\ ``rscl.http.proxyHost``\ の値をHTTP Proxyサーバのホスト名として設定する。
-    * - | (4)
-      - | \ ``HttpHost``\ のコンストラクタの引数に、プロパティファイルに設定されたキー\ ``rscl.http.proxyPort``\ の値をHTTP Proxyサーバのポート番号として設定する。
-    * - | (5)
-      - | \ ``RestTemplate``\ のBean定義を行う。
-    * - | (6)
-      - | \ ``RestTemplate``\ のコンストラクタの引数に、\ ``org.springframework.http.client.HttpComponentsClientHttpRequestFactory``\ を設定することで、コンストラクタ内で、\ ``RequestFactory``\ プロパティに設定される。
-    * - | (7)
-      - | \ ``HttpComponentsClientHttpRequestFactory``\ のコンストラクタの引数に、\ ``HttpClientBuilder``\ から生成した\ ``HttpClient``\ オブジェクトを設定する。
-
-
+HTTP Proxyサーバの接続先の指定は、\ ``RestTemplate``\ に対して、\ ``org.springframework.http.client.HttpComponentsClientHttpRequestFactory``\ を使用し指定する。
+
+**pom.xml**
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <dependency>
+        <groupId>org.apache.httpcomponents</groupId>
+        <artifactId>httpclient</artifactId>
+    </dependency>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``HttpComponentsClientHttpRequestFactory``\ 内で使用する\ ``Apache HTTP Client``\ を使用するために、\ ``Apache HttpComponents Client``\ を :file:`pom.xml` の依存ライブラリに追加する。
+        | なお、\ ``Apache HttpComponents Client``\ のバージョンは、 Spring IO Platform にて管理されているため、ここで\ ``Apache HttpComponents Client``\ のバージョンを定義する必要はない。
+
+
+**Bean定義ファイル**
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="proxyHttpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create" >
+        <!-- (2) -->
+        <property name="proxy">
+            <bean class="org.apache.http.HttpHost" >
+                <constructor-arg index="0" value="${rscl.http.proxyHost}" />    <!-- (3) -->
+                <constructor-arg index="1" value="${rscl.http.proxyPort}" />    <!-- (4) -->
+            </bean>
+        </property>
+    </bean>
+
+    <!-- (5) -->
+    <bean id="proxyRestTemplate" class="org.springframework.web.client.RestTemplate" >
+        <constructor-arg>
+            <!-- (6) -->
+            <bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
+                <!-- (7) -->
+                <constructor-arg>
+                    <bean factory-bean="proxyHttpClientBuilder" factory-method="build" />
+                </constructor-arg>
+            </bean>
+        </constructor-arg>
+    </bean>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.apache.http.impl.client.HttpClientBuilder``\ を使用し、\ ``org.apache.http.client.HttpClient``\ の設定を行う。
+    * - | (2)
+      - | \ ``HttpClientBuilder``\ の\ ``proxy``\ プロパティに、\ HTTP Proxyサーバの設定を行った\ ``org.apache.http.HttpHost``\ を設定する。
+    * - | (3)
+      - | \ ``HttpHost``\ のコンストラクタの引数に、プロパティファイルに設定されたキー\ ``rscl.http.proxyHost``\ の値をHTTP Proxyサーバのホスト名として設定する。
+    * - | (4)
+      - | \ ``HttpHost``\ のコンストラクタの引数に、プロパティファイルに設定されたキー\ ``rscl.http.proxyPort``\ の値をHTTP Proxyサーバのポート番号として設定する。
+    * - | (5)
+      - | \ ``RestTemplate``\ のBean定義を行う。
+    * - | (6)
+      - | \ ``RestTemplate``\ のコンストラクタの引数に、\ ``org.springframework.http.client.HttpComponentsClientHttpRequestFactory``\ を設定することで、コンストラクタ内で、\ ``RequestFactory``\ プロパティに設定される。
+    * - | (7)
+      - | \ ``HttpComponentsClientHttpRequestFactory``\ のコンストラクタの引数に、\ ``HttpClientBuilder``\ から生成した\ ``HttpClient``\ オブジェクトを設定する。
+
+
 HTTP Proxyサーバの資格情報の指定方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-HTTP Proxyサーバにアクセスする際に資格情報(ユーザ名とパスワード)が必要な場合は、\ ``org.apache.http.impl.client.BasicCredentialsProvider``\ を使用し資格情報を設定する。
-
-\ ``BasicCredentialsProvider``\ の\ ``setCredentials``\ メソッドが引数を2つ取るため、セッターインジェクションを利用してBeanを生成することができない。このため、\ ``org.springframework.beans.factory.FactoryBean``\ を利用してBeanを生成する。
-
-**FactoryBeanクラス**
-
-.. code-block:: java
-
-    import org.apache.http.auth.AuthScope;
-    import org.apache.http.auth.UsernamePasswordCredentials;
-    import org.apache.http.impl.client.BasicCredentialsProvider;
-    import org.springframework.beans.factory.FactoryBean;
-    import org.springframework.beans.factory.annotation.Value;
-
-    // (1)
-    public class BasicCredentialsProviderFactoryBean implements FactoryBean<BasicCredentialsProvider> {
-
-        // (2)
-        @Value("${rscl.http.proxyHost}")
-        String host;
-
-        // (3)
-        @Value("${rscl.http.proxyPort}")
-        int port;
-
-        // (4)
-        @Value("${rscl.http.proxyUserName}")
-        String userName;
-
-        // (5)
-        @Value("${rscl.http.proxyPassword}")
-        String password;
-
-        @Override
-        public BasicCredentialsProvider getObject() throws Exception {
-
-            // (6)
-            AuthScope authScope = new AuthScope(this.host, this.port);
-
-            // (7)
-            UsernamePasswordCredentials usernamePasswordCredentials =
-                    new UsernamePasswordCredentials(this.userName, this.password);
-
-            // (8)
-            BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();
-            credentialsProvider.setCredentials(authScope, usernamePasswordCredentials);
-
-            return credentialsProvider;
-        }
-
-        @Override
-        public Class<?> getObjectType() {
-            return BasicCredentialsProvider.class;
-        }
-
-        @Override
-        public boolean isSingleton() {
-            return true;
-        }
-    }
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``org.springframework.beans.factory.FactoryBean``\ を実装した\ ``BasicCredentialsProviderFactoryBean``\ クラスを定義する。
-        | Beanの型に\ ``BasicCredentialsProvider``\ を設定する。
-    * - | (2)
-      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyHost``\ の値をHTTP Proxyサーバのホスト名として、インスタンス変数に設定する。
-    * - | (3)
-      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyPort``\ の値をHTTP Proxyサーバのポート番号として、インスタンス変数に設定する。
-    * - | (4)
-      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyUserName``\ の値をHTTP Proxyサーバのユーザ名として、インスタンス変数に設定する。
-    * - | (5)
-      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyPassword``\ の値をHTTP Proxyサーバのパスワードとして、インスタンス変数に設定する。
-    * - | (6)
-      - | \ ``org.apache.http.auth.AuthScope`` \ を作成し資格情報のスコープを設定する。この例は、HTTP Proxyサーバのホスト名とポート番号を指定したものである。その他の設定方法については、\ `AuthScope (Apache HttpClient API) <https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/auth/AuthScope.html>`_\ を参照されたい。
-    * - | (7)
-      - | \ ``org.apache.http.auth.UsernamePasswordCredentials`` \ を作成し資格情報を設定する。
-    * - | (8)
-      - | \ ``org.apache.http.impl.client.BasicCredentialsProvider``\ を作成し、\ ``setCredentials``\ メソッドを使用し、資格情報のスコープと資格情報を設定する。
-
-
-**Bean定義ファイル**
-
-.. code-block:: xml
-
-    <bean id="proxyHttpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
-        <!-- (1) -->
-        <property name="defaultCredentialsProvider">
-            <bean class="com.example.restclient.BasicCredentialsProviderFactoryBean" />
-        </property>
-        <property name="proxy">
-            <bean id="proxyHost" class="org.apache.http.HttpHost">
-                <constructor-arg index="0" value="${rscl.http.proxyHost}" />
-                <constructor-arg index="1" value="${rscl.http.proxyPort}" />
-            </bean>
-        </property>
-    </bean>
-
-    <bean id="proxyRestTemplate" class="org.springframework.web.client.RestTemplate">
-        <constructor-arg>
-            <bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
-                <constructor-arg>
-                    <bean factory-bean="proxyHttpClientBuilder" factory-method="build" />
-                </constructor-arg>
-            </bean>
-        </constructor-arg>
-    </bean>
-
-
+HTTP Proxyサーバにアクセスする際に資格情報(ユーザ名とパスワード)が必要な場合は、\ ``org.apache.http.impl.client.BasicCredentialsProvider``\ を使用し資格情報を設定する。
+
+\ ``BasicCredentialsProvider``\ の\ ``setCredentials``\ メソッドが引数を2つ取るため、セッターインジェクションを利用してBeanを生成することができない。このため、\ ``org.springframework.beans.factory.FactoryBean``\ を利用してBeanを生成する。
+
+**FactoryBeanクラス**
+
+.. code-block:: java
+
+    import org.apache.http.auth.AuthScope;
+    import org.apache.http.auth.UsernamePasswordCredentials;
+    import org.apache.http.impl.client.BasicCredentialsProvider;
+    import org.springframework.beans.factory.FactoryBean;
+    import org.springframework.beans.factory.annotation.Value;
+
+    // (1)
+    public class BasicCredentialsProviderFactoryBean implements FactoryBean<BasicCredentialsProvider> {
+
+        // (2)
+        @Value("${rscl.http.proxyHost}")
+        String host;
+
+        // (3)
+        @Value("${rscl.http.proxyPort}")
+        int port;
+
+        // (4)
+        @Value("${rscl.http.proxyUserName}")
+        String userName;
+
+        // (5)
+        @Value("${rscl.http.proxyPassword}")
+        String password;
+
+        @Override
+        public BasicCredentialsProvider getObject() throws Exception {
+
+            // (6)
+            AuthScope authScope = new AuthScope(this.host, this.port);
+
+            // (7)
+            UsernamePasswordCredentials usernamePasswordCredentials =
+                    new UsernamePasswordCredentials(this.userName, this.password);
+
+            // (8)
+            BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();
+            credentialsProvider.setCredentials(authScope, usernamePasswordCredentials);
+
+            return credentialsProvider;
+        }
+
+        @Override
+        public Class<?> getObjectType() {
+            return BasicCredentialsProvider.class;
+        }
+
+        @Override
+        public boolean isSingleton() {
+            return true;
+        }
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.springframework.beans.factory.FactoryBean``\ を実装した\ ``BasicCredentialsProviderFactoryBean``\ クラスを定義する。
+        | Beanの型に\ ``BasicCredentialsProvider``\ を設定する。
+    * - | (2)
+      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyHost``\ の値をHTTP Proxyサーバのホスト名として、インスタンス変数に設定する。
+    * - | (3)
+      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyPort``\ の値をHTTP Proxyサーバのポート番号として、インスタンス変数に設定する。
+    * - | (4)
+      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyUserName``\ の値をHTTP Proxyサーバのユーザ名として、インスタンス変数に設定する。
+    * - | (5)
+      - | プロパティファイルに設定されたキー\ ``rscl.http.proxyPassword``\ の値をHTTP Proxyサーバのパスワードとして、インスタンス変数に設定する。
+    * - | (6)
+      - | \ ``org.apache.http.auth.AuthScope`` \ を作成し資格情報のスコープを設定する。この例は、HTTP Proxyサーバのホスト名とポート番号を指定したものである。その他の設定方法については、\ `AuthScope (Apache HttpClient API) <https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/auth/AuthScope.html>`_\ を参照されたい。
+    * - | (7)
+      - | \ ``org.apache.http.auth.UsernamePasswordCredentials`` \ を作成し資格情報を設定する。
+    * - | (8)
+      - | \ ``org.apache.http.impl.client.BasicCredentialsProvider``\ を作成し、\ ``setCredentials``\ メソッドを使用し、資格情報のスコープと資格情報を設定する。
+
+
+**Bean定義ファイル**
+
+.. code-block:: xml
+
+    <bean id="proxyHttpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder" factory-method="create">
+        <!-- (1) -->
+        <property name="defaultCredentialsProvider">
+            <bean class="com.example.restclient.BasicCredentialsProviderFactoryBean" />
+        </property>
+        <property name="proxy">
+            <bean id="proxyHost" class="org.apache.http.HttpHost">
+                <constructor-arg index="0" value="${rscl.http.proxyHost}" />
+                <constructor-arg index="1" value="${rscl.http.proxyPort}" />
+            </bean>
+        </property>
+    </bean>
+
+    <bean id="proxyRestTemplate" class="org.springframework.web.client.RestTemplate">
+        <constructor-arg>
+            <bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
+                <constructor-arg>
+                    <bean factory-bean="proxyHttpClientBuilder" factory-method="build" />
+                </constructor-arg>
+            </bean>
+        </constructor-arg>
+    </bean>
+
+
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
     :header-rows: 1
@@ -2122,9 +2122,9 @@ HTTP Proxyサーバにアクセスする際に資格情報(ユーザ名とパス
     * - 項番
       - 説明
     * - | (1)
-      - | \ ``HttpClientBuilder``\ の\ ``defaultCredentialsProvider``\ プロパティに、\ ``BasicCredentialsProvider``\ を設定する。
-        | \ ``BasicCredentialsProvider``\ は、\ ``FactoryBean``\ を実装した\ ``BasicCredentialsProviderFactoryBean``\ を使用しBeanを作成する。
-
+      - | \ ``HttpClientBuilder``\ の\ ``defaultCredentialsProvider``\ プロパティに、\ ``BasicCredentialsProvider``\ を設定する。
+        | \ ``BasicCredentialsProvider``\ は、\ ``FactoryBean``\ を実装した\ ``BasicCredentialsProviderFactoryBean``\ を使用しBeanを作成する。
+
 
 JSONでJSR-310 Date and Time APIを使う場合の設定
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
diff --git a/source/ArchitectureInDetail/index.rst b/source/ArchitectureInDetail/index.rst
index ed1e1db4b7..ab4e164921 100755
--- a/source/ArchitectureInDetail/index.rst
+++ b/source/ArchitectureInDetail/index.rst
@@ -1,19 +1,19 @@
-:orphan:
-
-機能詳細
-================================================================================
-
-本ガイドラインで想定しているアーキテクチャについて説明する。
-
-.. toctree::
-   :maxdepth: 1
-
-   ./WebApplicationDetail/index
-   ./WebServiceDetail/index
-   ./DataAccessDetail/index
-   ./GeneralFuncDetail/index
-   ./MessagingDetail/index
-
-.. raw:: latex
-
-   \newpage
+:orphan:
+
+機能詳細
+================================================================================
+
+本ガイドラインで想定しているアーキテクチャについて説明する。
+
+.. toctree::
+   :maxdepth: 1
+
+   ./WebApplicationDetail/index
+   ./WebServiceDetail/index
+   ./DataAccessDetail/index
+   ./GeneralFuncDetail/index
+   ./MessagingDetail/index
+
+.. raw:: latex
+
+   \newpage
diff --git a/source/ImplementationAtEachLayer/ApplicationLayer.rst b/source/ImplementationAtEachLayer/ApplicationLayer.rst
index 85fb90879f..387b13fcdc 100755
--- a/source/ImplementationAtEachLayer/ApplicationLayer.rst
+++ b/source/ImplementationAtEachLayer/ApplicationLayer.rst
@@ -1,28235 +1,4032 @@
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    @DateTimeFormat の pattern でフォーマットを指定した場合、 JSR310の java.time.LocalDate ではSTRICTにチェックがされない。
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    \ ``@DateTimeFormat`` \ の pattern でフォーマットを指定し、プロパティとして  JSR-310 Date and Time APIが提供する\ ``java.time.LocalDate`` \を使用した場合、STRICTにチェックがされない
-    (\ ``"20150229"`` \を変換した場合、本来は型ミスマッチエラーとなるはずが、\ ``2015年2月28日`` \ がバインドされる)。
-    本事象の詳細は「`@DateTimeFormat's JSR-310 formatter is not strict in case of pattern <https://jira.spring.io/browse/SPR-13567>`_\」を参照されたい。
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> add warninng DateTimeFormat's formatter is not strict #1991
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    @DateTimeFormat の pattern でフォーマットを指定した場合、`JSR310の java.time.LocalDate ではSTRICTにチェックがされない <https://jira.spring.io/browse/SPR-13567>`_\。
-    Software Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Software Framework 4.2 を使用しているので影響を受ける。
-    ("2015/2/29"が2015/2/28"を示す ` java.time.LocalDate ` インスタンスへ変換される)
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> add DateTimeFormat's warninng of Link,version information,example #1991
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    @DateTimeFormat の pattern でフォーマットを指定した場合、`JSR310の java.time.LocalDate ではSTRICTにチェックがされない <https://jira.spring.io/browse/SPR-13567>`_\。
-    Spring Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Spring Framework 4.2 を使用しているので影響を受ける。
-    ("2015/2/29"が2015/2/28"を示す ` java.time.LocalDate ` インスタンスへ変換される)
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> modify  Framework name #1991
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    \ ``@DateTimeFormat`` \ の pattern でフォーマットを指定した場合、`JSR310の \ ``java.time.LocalDate`` \ ではSTRICTにチェックがされない <https://jira.spring.io/browse/SPR-13567>`_\。
-    Spring Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Spring Framework 4.2 を使用しているので影響を受ける。
-    (\ ``"2015/2/29"`` \が\ ``2015/2/28`` \を示す \ `` java.time.LocalDate `` \ インスタンスへ変換される)
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> modify  in line code block #1991
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    \ ``@DateTimeFormat`` \ の pattern でフォーマットを指定し、プロパティとしてJSR-310 Date and Time APIを使用した場合、STRICTにチェックがされない
-    (\ ``"2015/2/29"`` \を変換した場合、本来は変換エラーとなるはずが、\ ``2015年2月28日`` \ がバインドされる)。
-    Spring Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Spring Framework 4.2 を使用しているので影響を受ける。
-    本事象の詳細は「`@DateTimeFormat's JSR-310 formatter is not strict in case of pattern <https://jira.spring.io/browse/SPR-13567>`_\」を参照
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> modify a decent form #1991
-=======
-アプリケーション層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
-
-.. note::
-
-   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
-
-   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-
-アプリケーション層の実装は、以下の3つにわかれる。
-
-#. | :ref:`controller-label`
-   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
-   | アプリケーション層の実装において、もっとも重要な実装となる。
-#. | :ref:`formobject`
-   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
-#. | :ref:`view`
-   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
-
-
-.. _controller-label:
-
-Controllerの実装
---------------------------------------------------------------------------------
-| まず、Controllerの実装から説明する。
-| Controllerは、以下5つの役割を担う。
-
-#. | **リクエストを受け取るためのメソッドを提供する。**
-   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
-#. | **リクエストパラメータの入力チェックを行う。**
-   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
-   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
-#. | **業務処理の呼び出しを行う。**
-   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
-#. | **業務処理の処理結果をModelに反映する。**
-   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
-#. | **処理結果に対応するView名を返却する。**
-   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
-   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
-   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
-
-.. figure:: images_ApplicationLayer/application_logic-of-controller.png
-   :alt: responsibility of logic
-   :width: 80%
-   :align: center
-
-   **Picture - Logic of controller**
-
-.. note::
-
- Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
-
-|
-
-Controllerの実装について、以下4つの点に着目して説明する。
-
-- :ref:`controller-new-label`
-- :ref:`controller_mapping-label`
-- :ref:`controller_method_argument-label`
-- :ref:`controller_method_return-label`
-
-|
-
-.. _controller-new-label:
-
-Controllerクラスの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
-| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
-
- .. code-block:: java
-
-    @Controller
-    public class SampleController {
-        // ...
-    }
-
-|
-|
-
-.. _controller_mapping-label:
-
-リクエストとハンドラメソッドのマッピング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
-| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-        // ...
-    }
-
-|
-
-リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - value
-     - | マッピング対象にするリクエストパスを指定する(複数可)。
-   * - 2.
-     - method
-     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
-       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
-   * - 3.
-     - params
-     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
-       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
-   * - 4.
-     - headers
-     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 5.
-     - consumes
-     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-   * - 6.
-     - produces
-     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
-       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
-
- .. note:: **マッピングの組み合わせについて**
-
-    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
-    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
-
-|
-
-| 以下、マッピングの具体例を6つ示す。
-
-- :ref:`controller-mapping-path-label`
-- :ref:`controller-mapping-method-label`
-- :ref:`controller-mapping-params-label`
-- :ref:`controller-mapping-headers-label`
-- :ref:`controller-mapping-contenttype-label`
-- :ref:`controller-mapping-accept-label`
-
-| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Controller // (1)
-    @RequestMapping("sample") // (2)
-    public class SampleController {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
-   * - | (2)
-     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
-
-|
-
-.. _controller-mapping-path-label:
-
-リクエストパスでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello")
-    public String hello() {
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = {"hello", "bonjour"})
-    public String hello() {
-
-指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
-
-- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
-- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
-- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
-- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
-
-|
-
-.. _controller-mapping-method-label:
-
-HTTPメソッドでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
-サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
-指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = RequestMethod.POST)
-    public String hello() {
-
-
-| 複数指定した場合は、OR条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
-    public String hello() {
-
-|
-
-.. _controller-mapping-params-label:
-
-リクエストパラメータでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
-| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = "form")
-    public String hello() {
-
-
-| 複数指定した場合は、AND条件で扱われる。
-| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
-
- .. code-block:: java
-
-    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
-    public String hello(@RequestParam("formType") String formType) {
-
-サポートされている指定形式は以下の通り。
-
- .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 8 25 67
-
-   * - 項番
-     - 形式
-     - 説明
-   * - 1.
-     - paramName
-     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
-   * - 2.
-     - !paramName
-     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
-   * - 3.
-     - paramName=paramValue
-     - 指定したparameNameの値がparamValueの場合にマッピングされる。
-   * - 4.
-     - paramName!=paramValue
-     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
-
-|
-
-.. _controller-mapping-headers-label:
-
-リクエストヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-contenttype-label:
-
-Content-Typeヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-
-.. _controller-mapping-accept-label:
-
-Acceptヘッダでマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
-
-- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-
-|
-|
-
-.. _controller-mapping-policy-label:
-
-リクエストとハンドラメソッドのマッピング方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-以下の方針でマッピングを行うことを推奨する。
-
-- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
-  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
-
-- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
-  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
-  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
-
-以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
-
- * :ref:`controller-mapping-policy-sampleapp-overview-label`
- * :ref:`controller-mapping-policy-sampleapp-url-design-label`
- * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
- * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
- * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-overview-label:
-
-サンプルアプリケーションの概要
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-サンプルアプリケーションの機能概要は以下の通り。
-
-- | EntityのCRUD処理を行う機能を提供する。
-- | 以下の5つの処理を提供する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - 処理名
-      - 処理概要
-    * - 1.
-      - Entity一覧取得
-      - 作成済みのEntityを全て取得し、一覧画面に表示する。
-    * - 2.
-      - Entity新規作成
-      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 3.
-      - Entity参照
-      - 指定されたIDのEntityを取得し、詳細画面に表示する。
-    * - 4.
-      - Entity更新
-      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
-    * - 5.
-      - Entity削除
-      - 指定されたIDのEntityを削除する。
-
-- | 機能全体の画面フローは以下の通り。
-  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
-   :alt: Screen flow of entity management function
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function**
-
-|
-
-.. _controller-mapping-policy-sampleapp-url-design-label:
-
-リクエストURL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-必要となるリクエストのURLの設計を行う。
-
-- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
-  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
-
-- 処理毎にリクエストURLを設ける。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 30 60
-
-    * - 項番
-      - 処理名
-      - 処理毎のURL(パターン)
-    * - 1.
-      - Entity一覧取得
-      - /abc/list
-    * - 2.
-      - Entity新規作成
-      - /abc/create
-    * - 3.
-      - Entity参照
-      - /abc/{id}
-    * - 4.
-      - Entity更新
-      - /abc/{id}/update
-    * - 5.
-      - Entity削除
-      - /abc/{id}/delete
-
- .. note::
-
-     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
-     サンプルアプリケーションでは、操作するEntityのIDを指定する。
-
- 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
-
-.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
-   :alt: Screen flow of entity management function and assigned URL
-   :width: 90%
-   :align: center
-
-   **Picture - Screen flow of entity management function and assigned URL**
-
-|
-
-.. _controller-mapping-policy-sampleapp-mapping-design-label:
-
-リクエストとハンドラメソッドのマッピング
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストとハンドラメソッドのマッピングの設計を行う。
-| 以下は、マッピング方針に則って設計したマッピング定義となる。
-
- .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 5 20 15 22 10 13 15
-
-   * - | 項番
-     - | 処理名
-     - | URL
-     - | リクエスト名
-     - | HTTP
-       | メソッド
-     - | HTTP
-       | パラメータ
-     - | ハンドラメソッド
-   * - 1.
-     - Entity一覧取得
-     - /abc/list
-     - 一覧表示
-     - GET
-     - \-
-     - list
-   * - 2.
-     - Entity新規作成
-     - /abc/create
-     - フォーム表示
-     - \-
-     - form
-     - createForm
-   * - 3.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - createConfirm
-   * - 4.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - createRedo
-   * - 5.
-     -
-     -
-     - 新規作成
-     - POST
-     - \-
-     - create
-   * - 6.
-     -
-     -
-     - 新規作成完了表示
-     - GET
-     - complete
-     - createComplete
-   * - 7.
-     - Entity参照
-     - /abc/{id}
-     - 詳細表示
-     - GET
-     - \-
-     - read
-   * - 8.
-     - Entity更新
-     - /abc/{id}/update
-     - フォーム表示
-     - \-
-     - form
-     - updateForm
-   * - 9.
-     -
-     -
-     - 入力内容確認表示
-     - POST
-     - confirm
-     - updateConfirm
-   * - 10.
-     -
-     -
-     - フォーム再表示
-     - POST
-     - redo
-     - updateRedo
-   * - 11.
-     -
-     -
-     - 更新
-     - POST
-     - \-
-     - update
-   * - 12.
-     -
-     -
-     - 更新完了表示
-     - GET
-     - complete
-     - updateComplete
-   * - 13.
-     - Entity削除
-     - /abc/{id}/delete
-     - 削除
-     - POST
-     - \-
-     - delete
-   * - 14.
-     -
-     -
-     - 削除完了表示
-     - GET
-     - complete
-     - deleteComplete
-
-| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
-| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
-| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
-
-.. figure:: images_ApplicationLayer/applicationScreenflow.png
-   :alt: Request flow of entity create processing
-   :width: 90%
-   :align: center
-
-   **Picture - Request flow of entity create processing**
-
-|
-
-| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
-| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
-| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
-
-- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
-- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
-
-|
-
-.. _controller-mapping-policy-sampleapp-form-impl-label:
-
-フォーム表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "form") // (1)
-    public String createForm(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"form"`` を指定する。
-   * - | (2)
-     - フォーム画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-フォーム表示を行う場合、ハンドラメソッドの実装以外に、
-
-- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
-- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-以下のフォームオブジェクトを使用する。
-
- .. code-block:: java
-
-  public class AbcForm implements Serializable {
-      private static final long serialVersionUID = 1L;
-
-      @NotEmpty
-      private String input1;
-
-      @NotNull
-      @Min(1)
-      @Max(10)
-      private Integer input2;
-
-      // omitted setter&getter
-  }
-
-フォームオブジェクトを生成する。
-
- .. code-block:: java
-
-    @ModelAttribute
-    public AbcForm setUpAbcForm() {
-        return new AbcForm();
-    }
-
-
-フォーム画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 12
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      <form:input path="input1" />
-      <form:errors path="input1" />
-      <br>
-      <form:label path="input2">Input2</form:label>
-      <form:input path="input2" />
-      <form:errors path="input2" />
-      <br>
-      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
-
-|
-
-以下に、フォーム表示の動作について説明する。
-
-| フォーム表示処理を呼び出す。
-| ``"abc/create?form"`` というURIにアクセスする。
-| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-confirm-impl-label:
-
-入力内容確認表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,5,8
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
-    public String createConfirm(@Validated AbcForm form, BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm"; (2)
-        }
-        // omitted
-        return "abc/createConfirm"; // (3)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
-   * - | (2)
-     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
-   * - | (3)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
- .. note::
-    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
-    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
-
-|
-
-以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
-
-入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
-
-- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
-
-が必要になる。
-
-入力内容確認画面のView(JSP)を作成する。
-
- .. code-block:: jsp
-    :emphasize-lines: 6,10,12-13
-
-    <h1>Abc Create Form</h1>
-    <form:form modelAttribute="abcForm"
-      action="${pageContext.request.contextPath}/abc/create">
-      <form:label path="input1">Input1</form:label>
-      ${f:h(abcForm.input1)}
-      <form:hidden path="input1" /> <!-- (1) -->
-      <br>
-      <form:label path="input2">Input2</form:label>
-      ${f:h(abcForm.input2)}
-      <form:hidden path="input2" /> <!-- (1) -->
-      <br>
-      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
-      <input type="submit" value="Create" /> <!-- (3) -->
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
-   * - | (2)
-     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
-   * - | (3)
-     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
-
- .. note::
-    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
-    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-|
-
-以下に、入力内容確認の動作について説明する。
-
-| 入力内容確認表示処理を呼び出す。
-| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
-| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
-| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
-   :width: 90%
-
-|
-
-.. _controller-mapping-policy-sampleapp-redo-impl-label:
-
-フォーム再表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
-    public String createRedo(AbcForm form, Model model) {
-        // omitted
-        return "abc/createForm"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
-   * - | (2)
-     - 入力内容確認画面を描画するためのJSPのView名を返却する。
-
-|
-
-以下に、フォーム再表示の動作について説明する。
-
-| フォーム再表示リクエストを呼び出す。
-| 入力内容確認画面で、Backボタンを押下する。
-| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
-| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
-
- .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
-   :width: 90%
-
-Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
-また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
-   :width: 90%
-
-.. note::
-
-    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
-    両者では以下が異なり、要件に応じて選択する必要がある。
-
-    * ブラウザの戻るボタンを押した場合の挙動
-    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
-    * ブラウザの履歴
-
-|
-
-.. _controller-mapping-policy-sampleapp-create-impl-label:
-
-新規作成の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
-| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
-| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
-| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
- .. code-block:: java
-    :emphasize-lines: 1,7
-
-    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
-    public String create(@Validated AbcForm form, BindingResult result, Model model) {
-        if (result.hasErrors()) {
-            return createRedo(form, model); // return "abc/createForm";
-        }
-        // omitted
-        return "redirect:/abc/create?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
-   * - | (2)
-     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
-
- .. note::
-    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
-
-.. warning::
-    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
-    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
-    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-以下に、「新規作成」の動作について説明する。
-
-| 新規作成処理を呼び出す。
-| 入力内容確認画面で、Createボタンを押下する。
-| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
-| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
-
-| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
-
- .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
-   :width: 90%
-
-
-|
-
-.. _controller-mapping-policy-sampleapp-complete-impl-label:
-
-新規作成完了表示の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
-
- .. code-block:: java
-    :emphasize-lines: 1,4
-
-    @RequestMapping(value = "create", params = "complete") // (1)
-    public String createComplete() {
-        // omitted
-        return "abc/createComplete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - params属性に ``"complete"`` を指定する。
-   * - | (2)
-     - 新規作成完了画面を描画するため、JSPのView名を返却する。
-
- .. note::
-    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
-
-|
-
-以下に、「新規作成完了表示」の動作について説明する。
-
-| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
-| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
-
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
-   :width: 90%
-
- .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
-   :width: 90%
-
- .. note::
-    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
-
-|
-
-.. _controller-mapping-policy-sampleapp-multi-impl-label:
-
-HTML form上に複数のボタンを配置する場合の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
-実行するハンドラメソッドを切り替える。
-ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
-
-下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
-
-.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
-   :alt: Multiple button in the HTML form
-   :width: 80%
-   :align: center
-
-   **Picture - Multiple button in the HTML form**
-
-Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
-HTML form内に以下のコードが必要となる。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
-    <input type="submit" value="Create" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
-
-Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
-
-|
-
-.. _controller-mapping-policy-sampleapp-all-impl-label:
-
-サンプルアプリケーションのControllerのソースコード
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
-| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
-
- .. code-block:: java
-
-    @Controller
-    @RequestMapping("abc")
-    public class AbcController {
-
-        @ModelAttribute
-        public AbcForm setUpAbcForm() {
-            return new AbcForm();
-        }
-
-        // Handling request of "/abc/create?form"
-        @RequestMapping(value = "create", params = "form")
-        public String createForm(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create?confirm"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
-        public String createConfirm(@Validated AbcForm form, BindingResult result,
-                Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "abc/createConfirm";
-        }
-
-        // Handling request of "POST /abc/create?redo"
-        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
-        public String createRedo(AbcForm form, Model model) {
-            // omitted
-            return "abc/createForm";
-        }
-
-        // Handling request of "POST /abc/create"
-        @RequestMapping(value = "create", method = RequestMethod.POST)
-        public String create(@Validated AbcForm form, BindingResult result, Model model) {
-            if (result.hasErrors()) {
-                return createRedo(form, model);
-            }
-            // omitted
-            return "redirect:/abc/create?complete";
-        }
-
-        // Handling request of "/abc/create?complete"
-        @RequestMapping(value = "create", params = "complete")
-        public String createComplete() {
-            // omitted
-            return "abc/createComplete";
-        }
-
-    }
-
-|
-|
-
-.. _controller_method_argument-label:
-
-ハンドラメソッドの引数について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
-基本的には次に挙げるものは原則として使用しないこと。
-
-* ServletRequest
-* HttpServletRequest
-* org.springframework.web.context.request.WebRequest
-* org.springframework.web.context.request.NativeWebRequest
-* java.io.InputStream
-* java.io.Reader
-* java.io.OutputStream
-* java.io.Writer
-* java.util.Map
-* org.springframework.ui.ModelMap
-
-.. note::
-    ``HttpServletRequest`` のgetAttribute/setAttribute
-    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
-    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
-
-    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
-
-    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
-    後述の :ref:`methodargumentresolver` を使用することで実現できる。
-
-|
-
-以下に、引数の使用方法について、目的別に13例示す。
-
-- :ref:`controller_method_argument-model-label`
-- :ref:`controller_method_argument-pathvariable-label`
-- :ref:`controller_method_argument-requestparam-label`
-- :ref:`controller_method_argument-form-label`
-- :ref:`controller_method_argument-validation-label`
-- :ref:`controller_method_argument-redirectattributes-label`
-- :ref:`controller_method_argument-redirectattributes-param-label`
-- :ref:`controller_method_argument-redirectattributes-path-label`
-- :ref:`controller_method_argument-cookievalue-label`
-- :ref:`controller_method_argument-cookiewrite-label`
-- :ref:`controller_method_argument-pagination-label`
-- :ref:`controller_method_argument-upload-label`
-- :ref:`controller_method_argument-message-label`
-
-|
-
-.. _controller_method_argument-model-label:
-
-画面(View)にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
-\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-4
-
-    @RequestMapping("hello")
-    public String hello(Model model) { // (1)
-        model.addAttribute("hello", "Hello World!"); // (2)
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (4) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
-
-- HTML of created by View(hello.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (6) -->
-    Message : Bean Hello World!<br>　<!-- (6) -->
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
-       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (5)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
-   * - | (6)
-     - | JSP実行後に出力されるHTML。
-
- .. note::
-  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
-  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
-
- .. note::
-  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
-  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
-
-|
-
-.. _controller_method_argument-pathvariable-label:
-
-URLのパスから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
-| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 1,3,4
-
-    @RequestMapping("hello/{id}/{version}") // (1)
-    public String hello(
-            @PathVariable("id") String id, // (2)
-            @PathVariable Integer version, // (3)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
-       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
-   * - | (2)
-     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (3)
-     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
-
- .. warning::
-    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
-    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
-    基本的には、value属性を明示的に指定する方法を推奨する。
-
-|
-
-.. _controller_method_argument-requestparam-label:
-
-リクエストパラメータを個別に取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 3-6
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id, // (1)
-            @RequestParam String name, // (2)
-            @RequestParam(value = "age", required = false) Integer age, // (3)
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
-       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
-   * - | (2)
-     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
-       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
-       | ただしこの方法は、
-
-       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
-       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
-
-       のどちらかを指定してコンパイルする必要がある。
-   * - | (3)
-     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
-       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
-   * - | (4)
-     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
-       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
-
-
- .. note::
-    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
-
- .. note::
-    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
-    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
-
-|
-
-**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
-
-- リクエストパラメータがHTML form内の項目である。
-- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
-- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
-- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
-
-|
-
-.. _controller_method_argument-form-label:
-
-リクエストパラメータをまとめて取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
-| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
-
-以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
-
-``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
-
- .. code-block:: java
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(
-            @RequestParam("id") String id,
-            @RequestParam String name,
-            @RequestParam(value = "age", required = false) Integer age,
-            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
-| フォームオブジェクトクラスを作成する。
-| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable{
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-
-        // omit setters and getters
-
-    }
-
- .. note::
-  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
-
-  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
-  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
-
-``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
-
- .. note::
-    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
-    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
-
-.. warning::
-    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
-    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
-    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
-    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
-
-|
-
-.. _controller_method_argument-validation-label:
-
-入力チェックを行う
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
-フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
-フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
-
-入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private static final long serialVersionUID = 1477614498217715937L;
-
-        @NotNull
-        @Size(min = 10, max = 10)
-        private String id;
-
-        @NotNull
-        @Size(min = 1, max = 10)
-        private String name;
-
-        @Min(1)
-        @Max(100)
-        private Integer age;
-
-        @Size(min = 1, max = 10)
-        private Integer genderCode;
-
-        // omit setters and getters
-    }
-
-
-| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
-| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
-| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
-
- .. code-block:: java
-    :emphasize-lines: 2,3,5
-
-    @RequestMapping("bindRequestParams")
-    public String bindRequestParams(@Validated SampleForm form, // (1)
-            BindingResult result, // (2)
-            Model model) {
-        if (result.hasErrors()) { // (3)
-            return "sample/input"; // back to the input view
-        }
-        // do something
-        return "sample/hello"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
-   * - | (2)
-     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
-   * - | (3)
-     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
-
-|
-
-.. _controller_method_argument-redirectattributes-label:
-
-リダイレクト先にデータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
-``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2-5,10
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) { // (1)
-        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
-        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
-        return "redirect:/sample/hello?complete"; // (4)
-    }
-
-    @RequestMapping(value = "hello", params = "complete")
-    public String helloComplete() {
-        return "sample/complete"; // (5)
-    }
-
-- complete.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1-2
-
-    Message : ${f:h(hello)}<br> <%-- (6) --%>
-    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
-
-- HTML of created by View(complete.jsp)
-
- .. code-block:: html
-    :emphasize-lines: 1-2
-
-    Message : Hello World!<br> <!-- (8) -->
-    Message : Bean Hello World!<br>　<!-- (8) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
-   * - | (2)
-     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
-       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
-   * - | (3)
-     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
-       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
-   * - | (4)
-     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
-   * - | (5)
-     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
-   * - | (6)
-     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
-       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-   * - | (7)
-     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
-   * - | (8)
-     - | HTMLの出力例。
-
-.. warning::
-    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
-
-.. note::
-
-    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
-    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
-    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
-
-.. figure:: images_ApplicationLayer/applicationFlashscope.png
-   :alt: Survival time of flush scope
-   :width: 80%
-   :align: center
-
-   **Picture - Survival time of flush scope**
-
-|
-
-.. _controller_method_argument-redirectattributes-param-label:
-
-リダイレクト先へリクエストパラメータを渡す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello?complete&id=" + id;
-        return "redirect:/sample/hello?complete";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
-    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
-    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
-
-|
-
-.. _controller_method_argument-redirectattributes-path-label:
-
-リダイレクト先URLのパスに値を埋め込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(RedirectAttributes redirectAttrs) {
-        String id = "aaaa";
-        redirectAttrs.addAttribute("id", id); // (1)
-        // must not return "redirect:/sample/hello/" + id + "?complete";
-        return "redirect:/sample/hello/{id}?complete"; // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
-   * - | (2)
-     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
-       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
-
-.. warning::
-    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
-    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
-    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
-
-|
-
-.. _controller_method_argument-cookievalue-label:
-
-Cookieから値を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping("readCookie")
-    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
-        // do something
-        return "sample/readCookie"; // returns view name
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
-       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
-
-.. note::
-    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
-    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
-
-|
-
-.. _controller_method_argument-cookiewrite-label:
-
-Cookieに値を書き込む
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
-| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
-
- .. code-block:: java
-    :emphasize-lines: 3,5
-
-    @RequestMapping("writeCookie")
-    public String writeCookie(Model model,
-            HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
-        response.addCookie(cookie); // (2)
-        // do something
-        return "sample/writeCookie";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
-   * - | (2)
-     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
-       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
-
-.. tip::
-
-    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
-    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
-
-|
-
-.. _controller_method_argument-pagination-label:
-
-ページネーション情報を取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
-| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
-
- 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
-
-|
-
-.. _controller_method_argument-upload-label:
-
-アップロードファイルを取得する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-アップロードされたファイルを取得する方法は大きく２つある。
-
-- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
-- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
-
-|
-
-.. _controller_method_argument-message-label:
-
-画面に結果メッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
-\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
-
-詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
-|
-|
-
-.. _controller_method_return-label:
-
-ハンドラメソッドの返り値について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
-基本的には次に挙げるもののみを使用すること。
-
-- String(View論理名)
-
-以下に、目的別に返り値の使用方法について説明する。
-
-- :ref:`controller_method_return-html-label`
-- :ref:`controller_method_return-download-label`
-
-|
-
-.. _controller_method_return-html-label:
-
-HTMLを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
-| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
-
-| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
-| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
-        <property name="suffix" value=".jsp" /> <!-- (3) -->
-        <property name="order" value="1" /> <!-- (4) -->
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-
-    <mvc:view-resolvers>
-        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
-    </mvc:view-resolvers>
-
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("hello")
-    public String hello() {
-        // omitted
-        return "sample/hello"; // (6)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSP用の\ ``InternalViewResolver``\ を定義する。
-   * - | (2)
-     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-
-       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
-   * - | (3)
-     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
-
-       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
-   * - | (4)
-     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
-
-       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
-   * - | (5)
-     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
-
-       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
-       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-
-   * - | (6)
-     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
-
-.. note::
-    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
-    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
-
-|
-
-.. _controller_method_return-download-label:
-
-ダウンロードデータを応答する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
-| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
-| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
-
-| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
-| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
-
-- spring-mvc.xml
-
- \ ``<bean>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 1-4
-
-    <!-- (1) -->
-    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
-        <property name="order" value="0"/> <!-- (2) -->
-    </bean>
-
-    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-        <property name="prefix" value="/WEB-INF/views/" />
-        <property name="suffix" value=".jsp" />
-        <property name="order" value="1" />
-    </bean>
-
- Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
-
- .. code-block:: xml
-    :emphasize-lines: 2
-
-    <mvc:view-resolvers>
-        <mvc:bean-name /> <!-- (3) -->
-        <mvc:jsp prefix="/WEB-INF/views/" />
-    </mvc:view-resolvers>
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 4
-
-    @RequestMapping("report")
-    public String report() {
-        // omitted
-        return "sample/report"; // (4)
-    }
-
-
-- XxxExcelView.java
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    @Component("sample/report") // (5)
-    public class XxxExcelView extends AbstractExcelView { // (6)
-        @Override
-        protected void buildExcelDocument(Map<String, Object> model,
-                HSSFWorkbook workbook, HttpServletRequest request,
-                HttpServletResponse response) throws Exception {
-            HSSFSheet sheet;
-            HSSFCell cell;
-
-            sheet = workbook.createSheet("Spring");
-            sheet.setDefaultColumnWidth(12);
-
-            // write a text at A1
-            cell = getCell(sheet, 0, 0);
-            setText(cell, "Spring-Excel test");
-
-            cell = getCell(sheet, 2, 0);
-            setText(cell, (Date) model.get("serverTime")).toString());
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
-   * - | (2)
-     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
-       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-   * - | (3)
-     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
-
-       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
-       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
-
-       .. note::
-
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
-           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
-   * - | (4)
-     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
-   * - | (5)
-     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
-
-       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
-   * - | (6)
-     - Viewの実装例。
-
-       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
-
-|
-|
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
-| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
-| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
-
-.. note::
-    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
-    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
-
-|
-
-Controllerで実装すべき処理を以下に4つ示す。
-
-- :ref:`controller_logic_correlationcheck-label`
-- :ref:`controller_logic_businesslogic-label`
-- :ref:`controller_logic_domainobject-label`
-- :ref:`controller_logic_formobject-label`
-
-|
-
-.. _controller_logic_correlationcheck-label:
-
-入力値の相関チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
-| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    PasswordEqualsValidator passwordEqualsValidator; // (1)
-
-    @InitBinder
-    protected void initBinder(WebDataBinder binder){
-        binder.addValidators(passwordEqualsValidator); // (2)
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 相関チェックを行う\ ``Validator``\ をInjectする。
-   * - | (2)
-     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
-       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
-
-|
-
-.. _controller_logic_businesslogic-label:
-
-業務処理の呼び出し
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
-
- .. code-block:: java
-    :emphasize-lines: 2,6
-
-    @Inject
-    SampleService sampleService; // (1)
-
-    @RequestMapping("hello")
-    public String hello(Model model){
-        String message = sampleService.hello(); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 業務処理が実装されている ``Service`` をInjectする。
-   * - | (2)
-     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
-
-|
-
-.. _controller_logic_domainobject-label:
-
-ドメインオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
-| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
-
- .. code-block:: java
-    :emphasize-lines: 4,11-12
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = new Sample(); // (1)
-        sample.setField1(form.getField1());
-        sample.setField2(form.getField2());
-        sample.setField3(form.getField3());
-        // ...
-        // and more ...
-        // ...
-        String message = sampleService.hello(sample); // (2)
-        model.addAttribute("message", message); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
-   * - | (2)
-     - Serviceのメソッドを呼び出し業務処理を実行する。
-   * - | (3)
-     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
-
-| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
-| 以下にHelperメソッドに処理を委譲した場合の例を示す。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 2,7
-
-    @Inject
-    SampleHelper sampleHelper; // (1)
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        String message = sampleHelper.hello(form); // (2)
-        model.addAttribute("message", message);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 6
-
-    public class SampleHelper {
-
-        @Inject
-        SampleService sampleService;
-
-        public String hello(SampleForm form){ // (3)
-            Sample sample = new Sample();
-            sample.setField1(form.getField1());
-            sample.setField2(form.getField2());
-            sample.setField3(form.getField3());
-            // ...
-            // and more ...
-            // ...
-            String message = sampleService.hello(sample);
-            return message;
-        }
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ControllerにHelperクラスのオブジェクトをInjectする。
-   * - | (2)
-     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
-       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
-   * - | (3)
-     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-
-.. _controller_logic_formobject-label:
-
-フォームオブジェクトへの値反映
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
-| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
-
-
- .. code-block:: java
-    :emphasize-lines: 4,5,11
-
-    @RequestMapping("hello")
-    public String hello(SampleForm form, BindingResult result, Model model){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId()); // (1)
-        form.setField1(sample.getField1()); // (2)
-        form.setField2(sample.getField2());
-        form.setField3(sample.getField3());
-        // ...
-        // and more ...
-        // ...
-        model.addAttribute(sample); // (3)
-        return "sample/hello";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
-   * - | (2)
-     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
-   * - | (3)
-     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
-
- .. note::
-    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
-
-フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
-コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 5
-
-    @RequestMapping("hello")
-    public String hello(@Validated SampleForm form, BindingResult result){
-        // omitted
-        Sample sample = sampleService.getSample(form.getId());
-        sampleHelper.applyToForm(sample, form); // (1)
-        model.addAttribute(sample);
-        return "sample/hello";
-    }
-
-- SampleHelper.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public void applyToForm(SampleForm destForm, Sample srcSample){
-        destForm.setField1(srcSample.getField1()); // (2)
-        destForm.setField2(srcSample.getField2());
-        destForm.setField3(srcSample.getField3());
-        // ...
-        // and more ...
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
-   * - | (2)
-     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
-
- .. note::
-    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
-    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
-
-|
-|
-
-.. _formobject:
-
-フォームオブジェクトの実装
---------------------------------------------------------------------------------
-フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
-
-#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
-#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
-
-.. figure:: ./images_ApplicationLayer/applicationFormobject.png
-   :width: 80%
-   :align: center
-
-|
-
-フォームオブジェクトの実装について、以下4点に着目して説明する。
-
-- :ref:`formobject_new-label`
-- :ref:`formobject_init-label`
-- :ref:`formobject_bindhtmlform-label`
-- :ref:`formobject_bindrequestparam-label`
-
-|
-
-.. _formobject_new-label:
-
-フォームオブジェクトの作成方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-フォームオブジェクトはJavaBeanとして作成する。
-Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
-フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
-
- .. code-block:: java
-
-    public class SampleForm implements Serializable {
-        private String id;
-        private String name;
-        private Integer age;
-        private String genderCode;
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
-
-    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
-
-    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
-    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
-    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
-
- .. warning::
-
-    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
-    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
-    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
-
-|
-
-フィールド単位の数値型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @NumberFormat(pattern = "#,#") // (1)
-        private Integer price;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
-       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
-
-``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - style
-     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
-   * - 2.
-     - pattern
-     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
-
-|
-
-.. _ApplicationLayer-DateTimeFormat:
-
-フィールド単位の日時型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public class SampleForm implements Serializable {
-        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
-        private Date birthDate;
-        // ommitted getter/setter
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
-       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
-
-\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 10 80
-
-   * - 項番
-     - 属性名
-     - 説明
-   * - 1.
-     - iso
-     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
-   * - 2.
-     - pattern
-     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
-   * - 3.
-     - style
-     - | 日付と時刻のスタイルを2桁の文字列として指定する。
-       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
-       | スタイルとして指定できる値は以下の値となる。
-       |
-       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
-       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
-       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
-       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
-       | - : 省略を意味するスタイル。
-       |
-       | 指定例及び変換例)
-       | MM : Dec 9, 2013 3:37:47 AM
-       | M- : Dec 9, 2013
-       | -M : 3:41:45 AM
-
-.. warning::
-    \ ``@DateTimeFormat`` \ の pattern でフォーマットを指定し、プロパティとして  JSR-310 Date and Time APIが提供する\ ``java.time.LocalDate`` \を使用した場合、STRICTにチェックがされない
-    (\ ``"20150229"`` \を変換した場合、本来は型ミスマッチエラーとなるはずが、\ ``2015年2月28日`` \ がバインドされる)。
-    Spring Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Spring Framework 4.2 を使用しているので影響を受ける。
-    本事象の詳細は「`@DateTimeFormat's JSR-310 formatter is not strict in case of pattern <https://jira.spring.io/browse/SPR-13567>`_\」を参照されたい。
-
-|
-
-Controller単位の型変換
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
-
- .. code-block:: java
-    :emphasize-lines: 1,5
-
-    @InitBinder // (1)
-    public void initWebDataBinder(WebDataBinder binder) {
-        binder.registerCustomEditor(
-                Long.class,
-                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @InitBinder("sampleForm") // (3)
-    public void initSampleFormWebDataBinder(WebDataBinder binder) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
-   * - | (2)
-     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
-   * - | (3)
-     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
-       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
-
-|
-
-入力チェック用のアノテーションの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
-入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
-|
-
-.. _formobject_init-label:
-
-フォームオブジェクトの初期化方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
-form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
-このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute // (1)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    @ModelAttribute("xxx") // (2)
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @ModelAttribute
-    public SampleForm setUpSampleForm(
-            @CookieValue(value = "name", required = false) String name, // (3)
-            @CookieValue(value = "age", required = false) Integer age,
-            @CookieValue(value = "birthDate", required = false) Date birthDate) {
-        SampleForm form = new SampleForm();
-        form.setName(name);
-        form.setAge(age);
-        form.setBirthDate(birthDate);
-        return form;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
-       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-   * - | (2)
-     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
-        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
-        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
-   * - | (3)
-     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
-
-.. note::
-    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
-    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
-
-.. note::
-    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
-
-.. warning::
-    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
-    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
-
-|
-
-.. _formobjectjsp:
-
-.. _formobject_bindhtmlform-label:
-
-HTML formへのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
-| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
-
- .. code-block:: jsp
-    :emphasize-lines: 2,3
-
-    <form:form modelAttribute="sampleForm"
-               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
-        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
-        Name       : <form:input path="name" /><form:errors path="name" /><br />
-        Age        : <form:input path="age" /><form:errors path="age" /><br />
-        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
-        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
-   * - | (2)
-     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (3)
-     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
-
-|
-
-.. _formobject_bindrequestparam-label:
-
-リクエストパラメータのバインディング方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form, // (1)
-            BindingResult result,
-            Model model) {
-        if (result.hasErrors()) {
-            return "sample/input";
-        }
-        // process form...
-        return "sample/hello";
-    }
-
- .. code-block:: java
-    :emphasize-lines: 10
-
-    @ModelAttribute("xxx")
-    public SampleForm setUpSampleForm() {
-        SampleForm form = new SampleForm();
-        // populate form
-        return form;
-    }
-
-    @RequestMapping("hello")
-    public String hello(
-            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
-            BindingResult result,
-            Model model) {
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
-   * - | (2)
-     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
-
-.. warning::
-
-    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
-    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
-
-|
-
-バインディング結果の判定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
-
- .. code-block:: java
-    :emphasize-lines: 4,6
-
-    @RequestMapping("hello")
-    public String hello(
-            @Validated SampleForm form,
-            BindingResult result, // (1)
-            Model model) {
-        if (result.hasErrors()) { // (2)
-            return "sample/input";
-        }
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
-   * - | (2)
-     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
-
-フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 40 50
-
-   * - 項番
-     - メソッド
-     - 説明
-   * - 1.
-     - ``hasGlobalErrors()``
-     - グローバルエラーの有無を判定するメソッド
-   * - 2.
-     - ``hasFieldErrors()``
-     - フィールドエラーの有無を判定するメソッド
-   * - 3.
-     - ``hasFieldErrors(String field)``
-     - 指定したフィールドのエラー有無を判定するメソッド
-
-|
-
-.. _view:
-
-Viewの実装
---------------------------------------------------------------------------------
-Viewは以下の役割を担う。
-
-#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
-   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
-
-|
-
-JSPの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
-| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
-
-以下に、基本的なJSPの実装方法について説明する。
-
-- :ref:`view_jsp_include-label`
-- :ref:`view_jsp_out-label`
-- :ref:`view_jsp_outnumber-label`
-- :ref:`view_jsp_outdate-label`
-- :ref:`view_jsp_requesturl-label`
-- :ref:`view_jsp_form-label`
-- :ref:`view_jsp_errors-label`
-- :ref:`view_jsp_resultmessages-label`
-- :ref:`view_jsp_codelist-label`
-- :ref:`view_jsp_message-label`
-- :ref:`view_jsp_if-label`
-- :ref:`view_jsp_forEach-label`
-- :ref:`view_jsp_pagination-label`
-- :ref:`view_jsp_authorization-label`
-
-本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - JSPタグライブラリ名
-     - ドキュメント
-   * - 1.
-     - Spring's form tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
-       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
-   * - 2.
-     - Spring's tag library
-     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
-   * - 3.
-     - JSTL
-     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
-   * - 4.
-     - Common library's tags & el functions
-     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
-
- .. warning::
-
-    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
-
-    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
-    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
-
-    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
-
-
-
-|
-
-.. _view_jsp_include-label:
-
-インクルード用の共通JSPの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
-このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
-なお、このファイルはブランクプロジェクトで提供している。
-
-- include.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1,4,8
-
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
-    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
-
-    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
-    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
-    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
-
-    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
-    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 7
-
-    <jsp-config>
-        <jsp-property-group>
-            <url-pattern>*.jsp</url-pattern>
-            <el-ignored>false</el-ignored>
-            <page-encoding>UTF-8</page-encoding>
-            <scripting-invalid>false</scripting-invalid>
-            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
-        </jsp-property-group>
-    </jsp-config>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
-   * - | (2)
-     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
-   * - | (3)
-     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
-   * - | (4)
-     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
-
- .. note::
-
-   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
-
- .. note::
-
-   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
-
-|
-
-.. _view_jsp_out-label:
-
-モデルに格納されている値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
-
-EL式を使用して表示する。
-
-- SampleController.java
-
- .. code-block:: java
-    :emphasize-lines: 3
-
-    @RequestMapping("hello")
-    public String hello(Model model) {
-        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
-        return "sample/hello"; // returns view name
-    }
-
-- hello.jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : ${f:h(helloBean.message)} <%-- (2) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
-   * - | (2)
-     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
-       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
-
- .. note::
-    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
-    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
-
-JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
-
- .. note::
-    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outnumber-label:
-
-モデルに格納されている数値を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
-       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
-
-.. note::
-    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-|
-
-.. _view_jsp_outdate-label:
-
-モデルに格納されている日時を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
-       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
-
-.. note::
-    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
-
-.. note::
-    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
-    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
-
-
-|
-
-.. _view_jsp_requesturl-label:
-
-リクエストURLを生成する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
-以下のいずれかの方法を使用してURLを生成する。
-
-* 文字列としてリクエストURLを組み立てる
-* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
-
-.. note::
-
-    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
-    保守性を低下させる可能性があるので避けた方がよい。
-
-|
-
-| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
-| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
-
- .. code-block:: java
-
-    package com.example.app.hello;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.web.bind.annotation.RequestMapping;
-
-    @RequestMapping("hello")
-    @Controller
-    public class HelloController {
-
-        // (1)
-        @RequestMapping({"", "/"})
-        public String hello() {
-            return "hello/home";
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
-
-|
-
-**文字列としてリクエストURLを組み立てる**
-
-まず、文字列としてリクエストURLを組み立てる方法について説明する。
-
- .. code-block:: jsp
-
-    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (2)
-      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
-        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
-
- .. tip::
-
-    URLを組み立てるJSPタグライブラリとして、
-
-    * JSTLから提供されている \ ``<c:url>``\
-    * Spring Frameworkから提供されている \ ``<spring:url>``\
-
-    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
-
-    リクエストURLを動的に組み立てる必要がある場合は、
-    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
-
-|
-
-**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
-
-つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
-
-\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
-リクエストURLを組み立てる事ができる。
-
- .. code-block:: jsp
-
-    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
-        <!-- ... -->
-    </form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
-
-        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
-        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
-
-        * \ ``arg``\ メソッド
-        * \ ``build``\ メソッド
-        * \ ``buildAndExpand``\ メソッド
-
-        が用意されており、それぞれ、以下の役割を持つ。
-
-        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
-        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
-        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
-
-        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
-        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
-        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
-
-        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
-        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
-
-
- .. note:: **リクエストマッピング名について**
-
-    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
-    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
-
-    リクエストマッピング名は重複しないようにする必要がある。
-    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
-
-    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
-    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
-
-     .. code-block:: xml
-
-        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
-            <level value="trace" />
-        </logger>
-
-    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
-
-     .. code-block:: text
-
-        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
-
-|
-
-.. _view_jsp_form-label:
-
-HTML formへフォームオブジェクトをバインドする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
-
- .. code-block:: jsp
-    :emphasize-lines: 2-3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm"> <%-- (1) --%>
-        Id : <form:input path="id" /> <%-- (2) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
-   * - | (2)
-     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
-
-.. note::
-    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
-
-|
-
-.. _view_jsp_errors-label:
-
-入力チェックエラーを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:form action="${pageContext.request.contextPath}/sample/hello"
-               modelAttribute="sampleForm">
-        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
-    </form:form>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
-
-|
-
-.. _view_jsp_resultmessages-label:
-
-処理結果のメッセージを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
-
-| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <div class="messages">
-        <h2>Message pattern</h2>
-        <t:messagesPanel /> <%-- (1) --%>
-    </div>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
-
-|
-
-.. _view_jsp_codelist-label:
-
-コードリストを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
-
-| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
-
-コードリストをセレクトボックスに表示する。
-
- .. code-block:: jsp
-    :emphasize-lines: 3
-
-    <form:select path="orderStatus">
-        <form:option value="" label="--Select--" />
-        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
-    </form:select>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
-       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
-       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
-
-セレクトボックスで選択した値のコード名を表示する。
-
- .. code-block:: jsp
-
-    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
-       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
-
-|
-
-.. _view_jsp_message-label:
-
-固定文言を表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
-| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
-
-| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
-| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
-
-- properties
-
- .. code-block:: properties
-    :emphasize-lines: 1-2
-
-    # (1)
-    label.orderStatus=注文ステータス
-
-- jsp
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
-        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - プロパティファイルにラベルの値を定義する。
-   * - | (2)
-     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
-
-.. note::
-     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
-
-|
-
-.. _view_jsp_if-label:
-
-条件によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
-
-``<c:if>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 1
-
-    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
-            <%-- ... --%>
-    </c:if>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
-
-``<c:choose>`` を使用して表示を切り替える。
-
- .. code-block:: jsp
-    :emphasize-lines: 2,8
-
-    <c:choose>
-        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
-            <%-- ... --%>
-        </c:when>
-        <c:when test="${customer.type == 'general'}">
-            <%-- ... --%>
-        </c:when>
-        <c:otherwise> <%-- (2) --%>
-            <%-- ... --%>
-        </c:otherwise>
-    </c:choose>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
-       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
-   * - | (2)
-     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
-
-|
-
-.. _view_jsp_forEach-label:
-
-コレクションの要素に対して表示処理を繰り返す
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
-
-JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
-
-
- .. code-block:: jsp
-    :emphasize-lines: 6,8-9
-
-    <table>
-        <tr>
-            <th>No</th>
-            <th>Name</th>
-        </tr>
-        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
-            <tr>
-                <td>${status.count}</td> <%-- (2) --%>
-                <td>${f:h(customer.name)}</td> <%-- (3) --%>
-            </tr>
-        </c:forEach>
-    </table>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
-       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
-   * - | (2)
-     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
-       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
-   * - | (3)
-     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
-
-.. note::
-    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
-
-|
-
-.. _view_jsp_pagination-label:
-
-ページネーション用のリンクを表示する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
-
-共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
-詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
-
-
-|
-
-.. _view_jsp_authorization-label:
-
-権限によって表示を切り替える
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
-
-Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
-詳細は、 :doc:`../Security/Authorization` を参照されたい。
-
-
-|
-|
-
-JavaScriptの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細を記載する予定である。
-
-|
-
-スタイルシートの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
-| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
-| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
-| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
-
-.. note::
-    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
-
-|
-
-共通処理の実装
---------------------------------------------------------------------------------
-
-|
-
-.. _controller-common-process:
-
-Controllerの呼び出し前後で行う共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
-
-|
-
-Servlet Filterの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
-| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
-
-| 以下に、Servlet Filterのサンプルを示す。
-| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
-
-- java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
-
-        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
-        protected final void doFilterInternal(HttpServletRequest request,
-                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
-            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
-            if (remoteIp == null) {
-                remoteIp = request.getRemoteAddr();
-            }
-            MDC.put(ATTRIBUTE_NAME, remoteIp);
-            try {
-                filterChain.doFilter(request, response);
-            } finally {
-                MDC.remove(ATTRIBUTE_NAME);
-            }
-        }
-    }
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1,5
-
-    <filter> <!-- (2) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
-    </filter>
-    <filter-mapping> <!-- (3) -->
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
-   * - | (2)
-     - 作成したServlet Filterを ``web.xml`` に登録する。
-   * - | (3)
-     - 登録したServlet Filterを適用するURLのパターンを指定する。
-
-
-Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
-
-- web.xml
-
- .. code-block:: xml
-    :emphasize-lines: 3
-
-    <filter>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
-    </filter>
-    <filter-mapping>
-        <filter-name>clientInfoPutFilter</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-- applicationContext.xml
-
- .. code-block:: xml
-    :emphasize-lines: 1
-
-    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
-   * - | (2)
-     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
-       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
-
-|
-
-HandlerInterceptorの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
-| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
-
-HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
-
-- | Controllerのハンドラメソッドを実行する前
-  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドが正常終了した後
-  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
-- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
-  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
-
-| 以下に、HandlerInterceptorのサンプルを示す。
-| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(SuccessLoggingInterceptor.class);
-
-        @Override
-        public void postHandle(HttpServletRequest request,
-                HttpServletResponse response, Object handler,
-                ModelAndView modelAndView) throws Exception {
-            HandlerMethod handlerMethod = (HandlerMethod) handler;
-            Method m = handlerMethod.getMethod();
-            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
-                    m.getDeclaringClass().getSimpleName(), m.getName()});
-        }
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4-5,7
-
-    <mvc:interceptors>
-        <!-- ... -->
-        <mvc:interceptor>
-            <mvc:mapping path="/**" /> <!-- (2) -->
-            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
-            <mvc:exclude-mapping path="/**/*.html" />
-            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
-        </mvc:interceptor>
-        <!-- ... -->
-    </mvc:interceptors>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
-       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
-   * - | (2)
-     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
-   * - | (3)
-     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
-   * - | (4)
-     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
-
-|
-
-Controllerの共通処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
-
-.. _methodargumentresolver:
-
-HandlerMethodArgumentResolverの実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
-HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
-
-| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
-
-
-- JavaBean
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public class CommonParameters implements Serializable { // (1)
-
-        private String param1;
-        private String param2;
-        private String param3;
-
-        // ....
-
-    }
-
-
-- HandlerMethodArgumentResolver
-
- .. code-block:: java
-    :emphasize-lines: 2,6,13
-
-    public class CommonParametersMethodArgumentResolver implements
-                                                       HandlerMethodArgumentResolver { // (2)
-
-        @Override
-        public boolean supportsParameter(MethodParameter parameter) {
-            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
-        }
-
-        @Override
-        public Object resolveArgument(MethodParameter parameter,
-                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
-                WebDataBinderFactory binderFactory) throws Exception {
-            CommonParameters params = new CommonParameters(); // (4)
-            params.setParam1(webRequest.getParameter("param1"));
-            params.setParam2(webRequest.getParameter("param2"));
-            params.setParam3(webRequest.getParameter("param3"));
-            return params;
-        }
-
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(CommonParameters commonParams) { // (5)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-
-    }
-
-- spring-mvc.xml
-
- .. code-block:: xml
-    :emphasize-lines: 4
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- ... -->
-            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
-            <!-- ... -->
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - 共通パラメータを保持するJavaBean。
-   * - | (2)
-     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
-   * - | (3)
-     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
-   * - | (4)
-     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
-   * - | (5)
-     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
-       | (4)で返却されるオブジェクトが渡される。
-   * - | (6)
-     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
-
-.. note::
-    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
-    ここでいうパラメータとは、リクエストパラメータに限らない。
-
-|
-
-.. _application_layer_controller_advice:
-
-\ ``@ControllerAdvice``\ の実装
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
-複数のControllerで実行したい共通的な処理を実装する。
-
-\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
-
-- ``@InitBinder`` を付与したメソッド
-- ``@ExceptionHandler`` を付与したメソッド
-- ``@ModelAttribute`` を付与したメソッド
-
-で実装した処理を、複数のControllerに適用する事ができる。
-
-.. tip::
-
-    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
-    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
-
-    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
-    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
-
-|
-
-.. _application_layer_controller_advice_attribute:
-
-以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 15 75
-
-   * - 項番
-     - 属性
-     - 説明と指定例
-   * - | (1)
-     - ``annotations``
-     - アノテーションを指定する。
-
-       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
-           public class LoginFormModelAttributeSetter {
-               @Target(ElementType.TYPE)
-               @Retention(RetentionPolicy.RUNTIME)
-               public static @interface LoginFormModelAttribute {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class WelcomeController {
-               // ...
-           }
-
-       .. code-block:: java
-
-           @LoginFormModelAttribute
-           @Controller
-           public class LoginController {
-               // ...
-           }
-
-       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
-       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
-   * - | (2)
-     - ``assignableTypes``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
-       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
-       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
-       以下の指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
-           public class ISODateInitBinder {
-               public static interface ISODateApplicable {}
-               // ...
-           }
-
-       .. code-block:: java
-
-           @Controller
-           public class SampleController implements ISODateApplicable {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
-       \ ``SampleController``\ に共通処理が適用される。
-   * - | (3)
-     - ``basePackageClasses``
-     - クラス又はインタフェースを指定する。
-
-       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
-
-       本属性を使用する場合は、
-
-       * \ ``@ControllerAdvice``\ を付与したクラス
-       * パッケージを識別するためのマーカーインタフェース
-
-       を属性値に指定するスタイルを採用することを推奨する。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           package com.example.app
-
-           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app.sample
-
-           @Controller
-           public class SampleController {
-               // ...
-           }
-
-       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
-       \ ``SampleController``\ に共通処理が適用される。
-
-       .. code-block:: java
-
-           package com.example.app.common
-
-           @ControllerAdvice(basePackageClasses = AppPackage.class)
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-       .. code-block:: java
-
-           package com.example.app
-
-           public interface AppPackage {
-           }
-
-       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
-       パッケージを識別するためのマーカインタフェースを用意すればよい。
-   * - | (4)
-     - ``basePackages``
-     - パッケージ名を指定する。
-
-       指定したパッケージ配下のControllerに対して共通処理が適用される。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice(basePackages = "com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-   * - | (5)
-     - ``value``
-     - \ ``basePackages``\ へのエイリアス。
-
-       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
-       以下に指定例を示す。
-
-       .. code-block:: java
-
-           @ControllerAdvice("com.example.app")
-           public class AppGlobalExceptionHandler {
-               // ...
-           }
-
-.. tip::
-
-    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
-    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
-    \ ``basePackageClasses``\ 属性を使用した場合、
-
-    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
-    * IDE上で行ったパッケージ名変更と連動することが出来る
-
-    ため、タイプセーフな指定方法と言える。
-
-|
-
-| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
-
- .. code-block:: java
-    :emphasize-lines: 1,2,5-6
-
-    @ControllerAdvice // (1)
-    @Order(0) // (2)
-    public class SampleControllerAdvice {
-
-        // (3)
-        @InitBinder
-        public void initBinder(WebDataBinder binder) {
-            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
-            dateFormat.setLenient(false);
-            binder.registerCustomEditor(Date.class,
-                    new CustomDateEditor(dateFormat, true));
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
-   * - | (2)
-     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
-   * - | (3)
-     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ExceptionHandler(PessimisticLockingFailureException.class)
-    public String handlePessimisticLockingFailureException(
-            PessimisticLockingFailureException e) {
-        return "error/lockError";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
-
-|
-
-| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
-| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
-
-- ControllerAdvice
-
- .. code-block:: java
-    :emphasize-lines: 1-2
-
-    // (1)
-    @ModelAttribute
-    public CommonParameters setUpCommonParameters(
-            @RequestParam(value = "param1", defaultValue="def1") String param1,
-            @RequestParam(value = "param2", defaultValue="def2") String param2,
-            @RequestParam(value = "param3", defaultValue="def3") String param3) {
-        CommonParameters params = new CommonParameters();
-        params.setParam1(param1);
-        params.setParam2(param2);
-        params.setParam3(param3);
-        return params;
-    }
-
-- Controller
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    @RequestMapping(value = "home")
-    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
-        logger.debug("param1 : {}",commonParams.getParam1());
-        logger.debug("param2 : {}",commonParams.getParam2());
-        logger.debug("param3 : {}",commonParams.getParam3());
-        // ...
-        return "sample/home";
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
-   * - | (2)
-     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
-
-
-|
-
-二重送信防止について
---------------------------------------------------------------------------------
-送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
-
-対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
-
-|
-
-セッションの使用について
---------------------------------------------------------------------------------
-| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
-| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
-| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
-| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
-
-セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
-
-.. raw:: latex
-
-   \newpage
->>>>>>> modify an explanation #1991
+アプリケーション層の実装
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+本節では、HTML formを使った画面遷移型のアプリケーションにおけるアプリケーション層の実装について説明する。
+
+.. note::
+
+   Ajaxの開発やREST APIの開発で必要となる実装についての説明は以下のページを参照されたい。
+
+   - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+
+|
+
+アプリケーション層の実装は、以下の3つにわかれる。
+
+#. | :ref:`controller-label`
+   | Controllerは、リクエストの受付、業務処理の呼び出し、モデルの更新、Viewの決定といった処理を行い、リクエストを受けてからの一連の処理フローを制御する。
+   | アプリケーション層の実装において、もっとも重要な実装となる。
+#. | :ref:`formobject`
+   | フォームオブジェクトは、HTML formとアプリケーションの間での値の受け渡しを行う。
+#. | :ref:`view`
+   | View(JSP)は、モデル（フォームオブジェクトやドメインオブジェクトなど）からデータを取得し、画面(HTML)を生成する。
+
+
+.. _controller-label:
+
+Controllerの実装
+--------------------------------------------------------------------------------
+| まず、Controllerの実装から説明する。
+| Controllerは、以下5つの役割を担う。
+
+#. | **リクエストを受け取るためのメソッドを提供する。**
+   | \ ``@RequestMapping``\ アノテーションが付与されたメソッドを実装することで、リクエストを受け取ることができる。
+#. | **リクエストパラメータの入力チェックを行う。**
+   | 入力チェックが必要なリクエストを受け取るメソッドでは、\ ``@Validated``\ アノテーションをフォームオブジェクトの引数に指定することで、リクエストパラメータの入力チェックを行うことができる。
+   | 単項目チェックはBean Validation、相関チェックはSpring Validator又はBean Validationでチェックを行う。
+#. | **業務処理の呼び出しを行う。**
+   | Controllerでは業務処理の実装は行わず、Serviceのメソッドに処理を委譲する。
+#. | **業務処理の処理結果をModelに反映する。**
+   | Serviceのメソッドから返却されたドメインオブジェクトを\ ``Model``\ に反映することで、Viewから処理結果を参照できるようにする。
+#. | **処理結果に対応するView名を返却する。**
+   | Controllerでは処理結果に対する描画処理を実装せず、描画処理はJSP等のViewで実装する。
+   | Controllerでは描画処理が実装されているViewのView名の返却のみ行う。
+   | View名に対応するViewの解決は、Spring Frameworkより提供されている\ ``ViewResolver``\ によって行われ、処理結果に対応するView(JSPなど）が呼び出される仕組みになっている。
+
+.. figure:: images_ApplicationLayer/application_logic-of-controller.png
+   :alt: responsibility of logic
+   :width: 80%
+   :align: center
+
+   **Picture - Logic of controller**
+
+.. note::
+
+ Controllerでは、業務処理の呼び出し、処理結果の\ ``Model``\ への反映、遷移先(View名)の決定などの **ルーティング処理の実装に徹することを推奨する。**
+
+|
+
+Controllerの実装について、以下4つの点に着目して説明する。
+
+- :ref:`controller-new-label`
+- :ref:`controller_mapping-label`
+- :ref:`controller_method_argument-label`
+- :ref:`controller_method_return-label`
+
+|
+
+.. _controller-new-label:
+
+Controllerクラスの作成方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| **Controllerは、POJOクラスに @Controller アノテーションを付加したクラス (Annotation-based Controller)として作成する。**
+| Spring MVCのControllerとしては、``org.springframework.web.servlet.mvc.Controller``\ インタフェースを実装する方法 (Interface-based Controller)もあるが、Spring3以降はDeprecatedになっているため、原則使用しない。
+
+ .. code-block:: java
+
+    @Controller
+    public class SampleController {
+        // ...
+    }
+
+|
+|
+
+.. _controller_mapping-label:
+
+リクエストとハンドラメソッドのマッピング方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| リクエストを受け取るメソッドは、\ ``@RequestMapping``\ アノテーションを付与する。
+| 本ガイドラインでは、\ ``@RequestMapping``\ が付加されたメソッドのことを「ハンドラメソッド」と呼ぶ。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello")
+    public String hello() {
+        // ...
+    }
+
+|
+
+リクエストとハンドラメソッドをマッピングするためのルールは、\ ``@RequestMapping``\ アノテーションの属性に指定する。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 10 80
+
+   * - 項番
+     - 属性名
+     - 説明
+   * - 1.
+     - value
+     - | マッピング対象にするリクエストパスを指定する(複数可)。
+   * - 2.
+     - method
+     - | マッピング対象にするHTTPメソッド(\ ``RequestMethod``\ 型)を指定する(複数可)。
+       | GET/POSTについてはHTML form向けのリクエストをマッピングする際にも使用するが、それ以外のHTTPメソッド(PUT/DELETEなど)はREST API向けのリクエストをマッピングする際に使用する。
+   * - 3.
+     - params
+     - | マッピング対象にするリクエストパラメータを指定する(複数可)。
+       | 主にHTML form向けのリクエストをマッピングする際に使用する。このマッピング方法を使用すると、HTML form上に複数のボタンが存在する場合のマッピングを簡単に実現する事ができる。
+   * - 4.
+     - headers
+     - | マッピング対象とするリクエストヘッダを指定する(複数可)。
+       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
+   * - 5.
+     - consumes
+     - | リクエストのContent-Typeヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
+       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
+   * - 6.
+     - produces
+     - | リクエストのAcceptヘッダを使ってマッピングすることが出来る。マッピング対象とするメディアタイプを指定する(複数可)。
+       | 主にREST APIやAjax向けのリクエストをマッピングする際に使用する。
+
+ .. note:: **マッピングの組み合わせについて**
+
+    複数の属性を組み合わせることで複雑なマッピングを行うことも可能だが、保守性を考慮し、可能な限りシンプルな定義になるようにマッピングの設計を行うこと。
+    2つの属性の組み合わせ（value属性と別の属性1つ）を目安にすることを推奨する。
+
+|
+
+| 以下、マッピングの具体例を6つ示す。
+
+- :ref:`controller-mapping-path-label`
+- :ref:`controller-mapping-method-label`
+- :ref:`controller-mapping-params-label`
+- :ref:`controller-mapping-headers-label`
+- :ref:`controller-mapping-contenttype-label`
+- :ref:`controller-mapping-accept-label`
+
+| 以降の説明では、以下のControllerクラスにハンドラメソッドを定義する前提となっている。
+
+ .. code-block:: java
+    :emphasize-lines: 1-2
+
+    @Controller // (1)
+    @RequestMapping("sample") // (2)
+    public class SampleController {
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ``@Controller``\ アノテーションを付加することでAnnotation-basedなコントローラークラスとして認識され、component scanの対象となる。
+   * - | (2)
+     - クラスレベルで\ ``@RequestMapping("sample")``\ アノテーションを付けることでこのクラス内のハンドラメソッドがsample配下のURLにマッピングされる。
+
+|
+
+.. _controller-mapping-path-label:
+
+リクエストパスでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+下記の定義の場合、``"sample/hello"`` というURLにアクセスすると、helloメソッドが実行される。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello")
+    public String hello() {
+
+| 複数指定した場合は、OR条件で扱われる。
+| 下記の定義の場合、 ``"sample/hello"`` 又は ``"sample/bonjour"`` というURLにアクセスすると、helloメソッドが実行される。
+
+ .. code-block:: java
+
+    @RequestMapping(value = {"hello", "bonjour"})
+    public String hello() {
+
+指定するリクエストパスは、具体的な値ではなくパターンを指定することも可能である。パターン指定の詳細は、Spring FrameworkのReference Documentを参照。
+
+- `URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\
+- `URI Template Patterns with Regular Expressions <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates-regex>`_\
+- `Path Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-patterns>`_\
+- `Patterns with Placeholders <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-placeholders>`_\
+
+|
+
+.. _controller-mapping-method-label:
+
+HTTPメソッドでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+下記の定義の場合、 ``"sample/hello"`` というURLにPOSTメソッドでアクセスすると、helloメソッドが実行される。
+サポートしているHTTPメソッドの一覧は `RequestMethodのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/bind/annotation/RequestMethod.html>`_ を参照されたい。
+指定しない場合、サポートしている全てのHTTPメソッドがマッピング対象となる。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello", method = RequestMethod.POST)
+    public String hello() {
+
+
+| 複数指定した場合は、OR条件で扱われる。
+| 下記の定義の場合、 ``"sample/hello"`` というURLにGET又はHEADメソッドでアクセスすると、helloメソッドが実行される。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello", method = {RequestMethod.GET, RequestMethod.HEAD})
+    public String hello() {
+
+|
+
+.. _controller-mapping-params-label:
+
+リクエストパラメータでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 下記の定義の場合、 ``"sample/hello?form"`` というURLにアクセスすると、helloメソッドが実行される。
+| POSTでリクエストする場合は、リクエストパラメータはURLになくてもリクエストBODYに存在していればよい。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello", params = "form")
+    public String hello() {
+
+
+| 複数指定した場合は、AND条件で扱われる。
+| 下記の定義の場合、 ``"sample/hello?form&formType=foo"`` というURLにアクセスすると、helloメソッドが実行される。
+
+ .. code-block:: java
+
+    @RequestMapping(value = "hello", params = {"form", "formType=foo"})
+    public String hello(@RequestParam("formType") String formType) {
+
+サポートされている指定形式は以下の通り。
+
+ .. tabularcolumns:: |p{0.08\linewidth}|p{0.25\linewidth}|p{0.67\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 8 25 67
+
+   * - 項番
+     - 形式
+     - 説明
+   * - 1.
+     - paramName
+     - 指定したparameNameのリクエストパラメータが存在する場合にマッピングされる。
+   * - 2.
+     - !paramName
+     - 指定したparameNameのリクエストパラメータが存在しない場合にマッピングされる。
+   * - 3.
+     - paramName=paramValue
+     - 指定したparameNameの値がparamValueの場合にマッピングされる。
+   * - 4.
+     - paramName!=paramValue
+     - 指定したparameNameの値がparamValueでない場合にマッピングされる。
+
+|
+
+.. _controller-mapping-headers-label:
+
+リクエストヘッダでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
+
+- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+
+
+.. _controller-mapping-contenttype-label:
+
+Content-Typeヘッダでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
+
+- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+
+
+.. _controller-mapping-accept-label:
+
+Acceptヘッダでマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+主にREST APIやAjax向けのリクエストをマッピングする際に使用するため、詳細は以下のページを参照されたい。
+
+- :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+
+|
+|
+
+.. _controller-mapping-policy-label:
+
+リクエストとハンドラメソッドのマッピング方針
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+以下の方針でマッピングを行うことを推奨する。
+
+- | **業務や機能といった意味のある単位で、リクエストのURLをグループ化する。**
+  | URLのグループ化とは、 \ ``@RequestMapping(value = "xxx")``\ をクラスレベルのアノテーションとして定義することを意味する。
+
+- | **処理内の画面フローで使用するリクエストのURLは、同じURLにする。**
+  | 同じURLとは \ ``@RequestMapping(value = "xxx")``\ のvalue属性の値を同じ値にすることを意味する。
+  | 処理内の画面フローで使用するハンドラメソッドの切り替えは、HTTPメソッドとHTTPパラメータによって行う。
+
+以下にベーシックな画面フローを行うサンプルアプリケーションを例にして、リクエストとハンドラメソッドの具体的なマッピング例を示す。
+
+ * :ref:`controller-mapping-policy-sampleapp-overview-label`
+ * :ref:`controller-mapping-policy-sampleapp-url-design-label`
+ * :ref:`controller-mapping-policy-sampleapp-mapping-design-label`
+ * :ref:`controller-mapping-policy-sampleapp-form-impl-label`
+ * :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
+ * :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
+ * :ref:`controller-mapping-policy-sampleapp-create-impl-label`
+
+|
+
+.. _controller-mapping-policy-sampleapp-overview-label:
+
+サンプルアプリケーションの概要
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+サンプルアプリケーションの機能概要は以下の通り。
+
+- | EntityのCRUD処理を行う機能を提供する。
+- | 以下の5つの処理を提供する。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 20 70
+
+    * - 項番
+      - 処理名
+      - 処理概要
+    * - 1.
+      - Entity一覧取得
+      - 作成済みのEntityを全て取得し、一覧画面に表示する。
+    * - 2.
+      - Entity新規作成
+      - 指定した内容で新たにEntityを作成する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
+    * - 3.
+      - Entity参照
+      - 指定されたIDのEntityを取得し、詳細画面に表示する。
+    * - 4.
+      - Entity更新
+      - 指定されたIDのEntityを更新する。処理内には、画面フロー（フォーム画面、確認画面、完了画面）が存在する。
+    * - 5.
+      - Entity削除
+      - 指定されたIDのEntityを削除する。
+
+- | 機能全体の画面フローは以下の通り。
+  | 画面フロー図には記載していないが、入力チェックエラーが発生した場合はフォーム画面を再描画するものとする。
+
+.. figure:: images_ApplicationLayer/application_sample-screen-flow.png
+   :alt: Screen flow of entity management function
+   :width: 90%
+   :align: center
+
+   **Picture - Screen flow of entity management function**
+
+|
+
+.. _controller-mapping-policy-sampleapp-url-design-label:
+
+リクエストURL
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+必要となるリクエストのURLの設計を行う。
+
+- | 機能内で必要となるリクエストのリクエストURLをグループ化する。
+  | ここではAbcというEntityのCRUD操作を行う機能となるので、 ``"/abc/"`` から始まるURLとする。
+
+- 処理毎にリクエストURLを設ける。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 30 60
+
+    * - 項番
+      - 処理名
+      - 処理毎のURL(パターン)
+    * - 1.
+      - Entity一覧取得
+      - /abc/list
+    * - 2.
+      - Entity新規作成
+      - /abc/create
+    * - 3.
+      - Entity参照
+      - /abc/{id}
+    * - 4.
+      - Entity更新
+      - /abc/{id}/update
+    * - 5.
+      - Entity削除
+      - /abc/{id}/delete
+
+ .. note::
+
+     Entity参照、Entity更新、Entity削除処理のURL内に指定している ``"{id}"`` は、`URI Template Patterns <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates>`_\ と呼ばれ、任意の値を指定する事ができる。
+     サンプルアプリケーションでは、操作するEntityのIDを指定する。
+
+ 画面フロー図に各処理に割り振られたURLをマッピングすると以下のようになる。
+
+.. figure:: images_ApplicationLayer/application_sample-screen-flow-assigned-url.png
+   :alt: Screen flow of entity management function and assigned URL
+   :width: 90%
+   :align: center
+
+   **Picture - Screen flow of entity management function and assigned URL**
+
+|
+
+.. _controller-mapping-policy-sampleapp-mapping-design-label:
+
+リクエストとハンドラメソッドのマッピング
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| リクエストとハンドラメソッドのマッピングの設計を行う。
+| 以下は、マッピング方針に則って設計したマッピング定義となる。
+
+ .. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.22\linewidth}|p{0.10\linewidth}|p{0.13\linewidth}|p{0.15\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 5 20 15 22 10 13 15
+
+   * - | 項番
+     - | 処理名
+     - | URL
+     - | リクエスト名
+     - | HTTP
+       | メソッド
+     - | HTTP
+       | パラメータ
+     - | ハンドラメソッド
+   * - 1.
+     - Entity一覧取得
+     - /abc/list
+     - 一覧表示
+     - GET
+     - \-
+     - list
+   * - 2.
+     - Entity新規作成
+     - /abc/create
+     - フォーム表示
+     - \-
+     - form
+     - createForm
+   * - 3.
+     -
+     -
+     - 入力内容確認表示
+     - POST
+     - confirm
+     - createConfirm
+   * - 4.
+     -
+     -
+     - フォーム再表示
+     - POST
+     - redo
+     - createRedo
+   * - 5.
+     -
+     -
+     - 新規作成
+     - POST
+     - \-
+     - create
+   * - 6.
+     -
+     -
+     - 新規作成完了表示
+     - GET
+     - complete
+     - createComplete
+   * - 7.
+     - Entity参照
+     - /abc/{id}
+     - 詳細表示
+     - GET
+     - \-
+     - read
+   * - 8.
+     - Entity更新
+     - /abc/{id}/update
+     - フォーム表示
+     - \-
+     - form
+     - updateForm
+   * - 9.
+     -
+     -
+     - 入力内容確認表示
+     - POST
+     - confirm
+     - updateConfirm
+   * - 10.
+     -
+     -
+     - フォーム再表示
+     - POST
+     - redo
+     - updateRedo
+   * - 11.
+     -
+     -
+     - 更新
+     - POST
+     - \-
+     - update
+   * - 12.
+     -
+     -
+     - 更新完了表示
+     - GET
+     - complete
+     - updateComplete
+   * - 13.
+     - Entity削除
+     - /abc/{id}/delete
+     - 削除
+     - POST
+     - \-
+     - delete
+   * - 14.
+     -
+     -
+     - 削除完了表示
+     - GET
+     - complete
+     - deleteComplete
+
+| Entity新規作成、Entity更新、Entity削除処理では、処理内に複数のリクエストが存在しているため、HTTPメソッドとHTTPパラメータによってハンドラメソッドを切り替えている。
+| 以下に、Entity新規作成処理を例に、処理内に複数のリクエストが存在する場合のリクエストフローを示す。
+| URLは全て ``"/abc/create"`` で、HTTPメソッドとHTTPパラメータの組み合わせでハンドラメソッドを切り替えている点に注目すること。
+
+.. figure:: images_ApplicationLayer/applicationScreenflow.png
+   :alt: Request flow of entity create processing
+   :width: 90%
+   :align: center
+
+   **Picture - Request flow of entity create processing**
+
+|
+
+| 以下に、Entity新規作成処理のハンドラメソッドの実装コードを示す。
+| ここではリクエストとハンドラメソッドのマッピングについて理解してもらうのが目的なので、\ ``@RequestMapping``\ の書き方に注目すること。
+| ハンドラメソッドの引数や返り値(View名及びView)の詳細については、次章以降で説明する。
+
+- :ref:`controller-mapping-policy-sampleapp-form-impl-label`
+- :ref:`controller-mapping-policy-sampleapp-confirm-impl-label`
+- :ref:`controller-mapping-policy-sampleapp-redo-impl-label`
+- :ref:`controller-mapping-policy-sampleapp-create-impl-label`
+- :ref:`controller-mapping-policy-sampleapp-complete-impl-label`
+- :ref:`controller-mapping-policy-sampleapp-multi-impl-label`
+
+|
+
+.. _controller-mapping-policy-sampleapp-form-impl-label:
+
+フォーム表示の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+フォーム表示する場合は、HTTPパラメータとして ``form`` を指定させる。
+
+ .. code-block:: java
+    :emphasize-lines: 1,4
+
+    @RequestMapping(value = "create", params = "form") // (1)
+    public String createForm(AbcForm form, Model model) {
+        // omitted
+        return "abc/createForm"; // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - params属性に ``"form"`` を指定する。
+   * - | (2)
+     - フォーム画面を描画するためのJSPのView名を返却する。
+
+ .. note::
+    この処理でHTTPメソッドをGETに限る必要がないのでmethod属性を指定していない。
+
+|
+
+以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
+
+フォーム表示を行う場合、ハンドラメソッドの実装以外に、
+
+- フォームオブジェクトの生成処理の実装。フォームオブジェクトの詳細は、 :ref:`formobject` を参照されたい。
+- フォーム画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
+
+が必要になる。
+
+以下のフォームオブジェクトを使用する。
+
+ .. code-block:: java
+
+  public class AbcForm implements Serializable {
+      private static final long serialVersionUID = 1L;
+
+      @NotEmpty
+      private String input1;
+
+      @NotNull
+      @Min(1)
+      @Max(10)
+      private Integer input2;
+
+      // omitted setter&getter
+  }
+
+フォームオブジェクトを生成する。
+
+ .. code-block:: java
+
+    @ModelAttribute
+    public AbcForm setUpAbcForm() {
+        return new AbcForm();
+    }
+
+
+フォーム画面のView(JSP)を作成する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 12
+
+    <h1>Abc Create Form</h1>
+    <form:form modelAttribute="abcForm"
+      action="${pageContext.request.contextPath}/abc/create">
+      <form:label path="input1">Input1</form:label>
+      <form:input path="input1" />
+      <form:errors path="input1" />
+      <br>
+      <form:label path="input2">Input2</form:label>
+      <form:input path="input2" />
+      <form:errors path="input2" />
+      <br>
+      <input type="submit" name="confirm" value="Confirm" /> <!-- (1) -->
+    </form:form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - 確認画面へ遷移するためのsubmitボタンには\ ``name="confirm"``\ というパラメータを指定しておく。
+
+|
+
+以下に、フォーム表示の動作について説明する。
+
+| フォーム表示処理を呼び出す。
+| ``"abc/create?form"`` というURIにアクセスする。
+| ``form`` というHTTPパラメータの指定があるため、ControllerのcreateFormメソッドが呼び出されフォーム画面が表示される。
+
+ .. figure:: images_ApplicationLayer/applicationCreateFormDisplay.png
+   :width: 90%
+
+|
+
+.. _controller-mapping-policy-sampleapp-confirm-impl-label:
+
+入力内容確認表示の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+フォームの入力内容を確認する場合は、POSTメソッドでデータを送信し、HTTPパラメータに ``confirm`` を指定させる。
+
+ .. code-block:: java
+    :emphasize-lines: 1,5,8
+
+    @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm") // (1)
+    public String createConfirm(@Validated AbcForm form, BindingResult result,
+            Model model) {
+        if (result.hasErrors()) {
+            return createRedo(form, model); // return "abc/createForm"; (2)
+        }
+        // omitted
+        return "abc/createConfirm"; // (3)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - method属性に ``RequestMethod.POST`` 、params属性に ``"confirm"`` を指定する。
+   * - | (2)
+     - 入力チェックエラーが発生した場合の処理は、フォーム再表示用のハンドラメソッドを呼び出すことを推奨する。フォーム画面を再表示するための処理の共通化を行うことができる。
+   * - | (3)
+     - 入力内容確認画面を描画するためのJSPのView名を返却する。
+
+ .. note::
+    POSTメソッドを指定させる理由は、個人情報やパスワードなどの秘密情報がブラウザのアドレスバーに現れ、他人に容易に閲覧されることを防ぐためである。
+    (もちろんセキュリティ対策としては十分ではなく、SSLなどのセキュアなサイトにする必要がある)。
+
+|
+
+以下に、ハンドラメソッド以外の部分の実装例についても説明しておく。
+
+入力内容確認表示を行う場合、ハンドラメソッドの実装以外に、
+
+- 入力内容確認画面のViewの実装。Viewの詳細は、 :ref:`view` を参照されたい。
+
+が必要になる。
+
+入力内容確認画面のView(JSP)を作成する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 6,10,12-13
+
+    <h1>Abc Create Form</h1>
+    <form:form modelAttribute="abcForm"
+      action="${pageContext.request.contextPath}/abc/create">
+      <form:label path="input1">Input1</form:label>
+      ${f:h(abcForm.input1)}
+      <form:hidden path="input1" /> <!-- (1) -->
+      <br>
+      <form:label path="input2">Input2</form:label>
+      ${f:h(abcForm.input2)}
+      <form:hidden path="input2" /> <!-- (1) -->
+      <br>
+      <input type="submit" name="redo" value="Back" /> <!-- (2) -->
+      <input type="submit" value="Create" /> <!-- (3) -->
+    </form:form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - フォーム画面で入力された値は、Createボタン及びBackボタンが押下された際に再度サーバに送る必要があるため、HTML formのhidden項目とする。
+   * - | (2)
+     - フォーム画面に戻るためのsubmitボタンには\ ``name="redo"``\ というパラメータを指定しておく。
+   * - | (3)
+     - 新規作成を行うためのsubmitボタンにはパラメータ名の指定は不要。
+
+ .. note::
+    この例では確認項目を表示する際にHTMLエスケープするため、 ``f:h()`` 関数を使用している。
+    XSS対策のため、必ず行うこと。詳細については :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
+
+|
+
+以下に、入力内容確認の動作について説明する。
+
+| 入力内容確認表示処理を呼び出す。
+| フォーム画面でInput1に ``"aa"`` を、Input2に ``"5"`` を入力し、Confirmボタンを押下する。
+| Confirmボタンを押下すると、 ``"abc/create?confirm"`` というURIにPOSTメソッドでアクセスする。
+| ``confirm`` というHTTPパラメータがあるため、ControllerのcreateConfirmメソッドが呼び出され、入力内容確認画面が表示される。
+
+ .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
+   :width: 90%
+
+Confirmボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``confirm`` が含まれている。
+
+ .. figure:: images_ApplicationLayer/applicationCreateConfirmNetwork.png
+   :width: 90%
+
+|
+
+.. _controller-mapping-policy-sampleapp-redo-impl-label:
+
+フォーム再表示の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+フォームを再表示する場合は、HTTPパラメータにredoを指定させる。
+
+ .. code-block:: java
+    :emphasize-lines: 1,4
+
+    @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo") // (1)
+    public String createRedo(AbcForm form, Model model) {
+        // omitted
+        return "abc/createForm"; // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - method属性に ``RequestMethod.POST`` 、params属性に ``"redo"`` を指定する。
+   * - | (2)
+     - 入力内容確認画面を描画するためのJSPのView名を返却する。
+
+|
+
+以下に、フォーム再表示の動作について説明する。
+
+| フォーム再表示リクエストを呼び出す。
+| 入力内容確認画面で、Backボタンを押下する。
+| Backボタンを押下すると、 ``abc/create?redo`` というURIにPOSTメソッドでアクセスする。
+| ``redo`` というHTTPパラメータがあるため、ControllerのcreateRedoメソッドが呼び出され、フォーム画面が再表示される。
+
+ .. figure:: images_ApplicationLayer/applicationCreateConfirmDisplay.png
+   :width: 90%
+
+Backボタンを押下するとPOSTメソッドでHTTPパラメータが送信されるため、URIには現れていないが、HTTPパラメータとして ``redo`` が含まれている。
+また、フォームの入力値をhidden項目として送信されるため、フォーム画面で入力値を復元することが出来る。
+
+ .. figure:: images_ApplicationLayer/applicationBackToCreateFormDisplay.png
+   :width: 90%
+
+ .. figure:: images_ApplicationLayer/applicationBackToCreateFormNetwork.png
+   :width: 90%
+
+.. note::
+
+    戻るボタンの実現方法には、ボタンの属性に ``onclick="javascript:history.back()"`` を設定する方法もある。
+    両者では以下が異なり、要件に応じて選択する必要がある。
+
+    * ブラウザの戻るボタンを押した場合の挙動
+    * 戻るボタンがあるページに直接アクセスして戻るボタンを押した場合の挙動
+    * ブラウザの履歴
+
+|
+
+.. _controller-mapping-policy-sampleapp-create-impl-label:
+
+新規作成の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| フォームの入力内容を登録する場合は、POSTで登録対象のデータ(hiddenパラメータ)を送信させる。
+| 新規作成リクエストはこの処理のメインリクエストになるので、HTTPパラメータによる振り分けは行っていない。
+| この処理ではデータベースの状態を変更するので、二重送信によって新規作成処理が複数回実行されないように制御する必要がある。
+| そのため、この処理が終了した後はView(画面)を直接表示するのではなく、次の画面(新規作成完了画面)へリダイレクトしている。このパターンをPOST-Redirect-GET(PRG)パターンと呼ぶ。  :abbr:`PRG (Post-Redirect-Get)` パターンの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
+
+ .. code-block:: java
+    :emphasize-lines: 1,7
+
+    @RequestMapping(value = "create", method = RequestMethod.POST) // (1)
+    public String create(@Validated AbcForm form, BindingResult result, Model model) {
+        if (result.hasErrors()) {
+            return createRedo(form, model); // return "abc/createForm";
+        }
+        // omitted
+        return "redirect:/abc/create?complete"; // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - method属性に ``RequestMethod.POST`` を指定し、params属性は指定しない。
+   * - | (2)
+     -  :abbr:`PRG (Post-Redirect-Get)` パターンとするため、新規作成完了表示リクエストにリダイレクトするためのURLをView名として返却する。
+
+ .. note::
+    "redirect:/xxx"を返却すると"/xxx"へリダイレクトさせることができる。
+
+.. warning::
+    PRGパターンとすることで、ブラウザのF5ボタン押下時のリロードによる二重送信を防ぐ事はできるが、二重送信の対策としてはとしては十分ではない。
+    二重送信の対策としては、共通部品として提供しているTransactionTokenCheckを行う必要がある。
+    TransactionTokenCheckの詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
+
+|
+
+以下に、「新規作成」の動作について説明する。
+
+| 新規作成処理を呼び出す。
+| 入力内容確認画面で、Createボタンを押下する。
+| Createボタンを押下すると、 ``"abc/create"`` というURIにPOSTメソッドでアクセスする。
+| ボタンを識別するためのHTTPパラメータを送信していないので、Entity新規作成処理のメインのリクエストと判断され、Controllerのcreateメソッドが呼び出される。
+
+| 新規作成リクエストでは、直接画面を返さず、新規作成完了表示( ``"/abc/create?complete"`` )へリダイレクトしているため、HTTPステータスが302になっている。
+
+ .. figure:: images_ApplicationLayer/applicationCreateNetwork.png
+   :width: 90%
+
+
+|
+
+.. _controller-mapping-policy-sampleapp-complete-impl-label:
+
+新規作成完了表示の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+新規作成処理が完了した事を通知する場合は、HTTPパラメータに ``complete`` を指定させる。
+
+ .. code-block:: java
+    :emphasize-lines: 1,4
+
+    @RequestMapping(value = "create", params = "complete") // (1)
+    public String createComplete() {
+        // omitted
+        return "abc/createComplete"; // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - params属性に ``"complete"`` を指定する。
+   * - | (2)
+     - 新規作成完了画面を描画するため、JSPのView名を返却する。
+
+ .. note::
+    この処理もHTTPメソッドをGETに限る必要がないのでmethod属性を指定しなくても良い。
+
+|
+
+以下に、「新規作成完了表示」の動作について説明する。
+
+| 新規作成完了後、リダイレクト先に指定されたURI( ``"/abc/create?complete"`` )にアクセスする。
+| ``complete`` というHTTPパラメータがあるため、ControllerのcreateCompleteメソッドが呼び出され、新規作成完了画面が表示される。
+
+
+ .. figure:: images_ApplicationLayer/applicationCreateCompleteDisplay.png
+   :width: 90%
+
+ .. figure:: images_ApplicationLayer/applicationCreateCompleteNetwork.png
+   :width: 90%
+
+ .. note::
+    PRGパターンを利用しているため、ブラウザをリロードしても、新規作成処理は実行されず、新規作成完了が再度表示されるだけである。
+
+|
+
+.. _controller-mapping-policy-sampleapp-multi-impl-label:
+
+HTML form上に複数のボタンを配置する場合の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+1つのフォームに対して複数のボタンを設置したい場合、ボタンを識別するためのHTTPパラメータを送ることで、
+実行するハンドラメソッドを切り替える。
+ここではサンプルアプリケーションの入力内容確認画面のCreateボタンとBackボタンを例に説明する。
+
+下図のように、入力内容確認画面のフォームには、新規作成を行うCreateボタンと新規作成フォーム画面を再表示するBackボタンが存在する。
+
+.. figure:: images_ApplicationLayer/applicationControllerBackToForm.png
+   :alt: Multiple button in the HTML form
+   :width: 80%
+   :align: center
+
+   **Picture - Multiple button in the HTML form**
+
+Backボタンを押下した場合、新規作成フォーム画面を再表示するためのリクエスト( ``"/abc/create?redo"`` )を送信する必要があるため、
+HTML form内に以下のコードが必要となる。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    <input type="submit" name="redo" value="Back" /> <!-- (1) -->
+    <input type="submit" value="Create" />
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - 上記のように、入力内容確認画面( ``"abc/createConfirm.jsp"`` )のBackボタンに\ ``name="redo"``\ というパラメータを指定する。
+
+Backボタン押下時の動作については、 :ref:`controller-mapping-policy-sampleapp-redo-impl-label` を参照されたい。
+
+|
+
+.. _controller-mapping-policy-sampleapp-all-impl-label:
+
+サンプルアプリケーションのControllerのソースコード
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 以下に、サンプルアプリケーションの新規作成処理実装後のControllerの全ソースを示す。
+| Entity一覧取得、Entity参照、Entity更新、Entity削除も同じ要領で実装することになるが、説明は割愛する。
+
+ .. code-block:: java
+
+    @Controller
+    @RequestMapping("abc")
+    public class AbcController {
+
+        @ModelAttribute
+        public AbcForm setUpAbcForm() {
+            return new AbcForm();
+        }
+
+        // Handling request of "/abc/create?form"
+        @RequestMapping(value = "create", params = "form")
+        public String createForm(AbcForm form, Model model) {
+            // omitted
+            return "abc/createForm";
+        }
+
+        // Handling request of "POST /abc/create?confirm"
+        @RequestMapping(value = "create", method = RequestMethod.POST, params = "confirm")
+        public String createConfirm(@Validated AbcForm form, BindingResult result,
+                Model model) {
+            if (result.hasErrors()) {
+                return createRedo(form, model);
+            }
+            // omitted
+            return "abc/createConfirm";
+        }
+
+        // Handling request of "POST /abc/create?redo"
+        @RequestMapping(value = "create", method = RequestMethod.POST, params = "redo")
+        public String createRedo(AbcForm form, Model model) {
+            // omitted
+            return "abc/createForm";
+        }
+
+        // Handling request of "POST /abc/create"
+        @RequestMapping(value = "create", method = RequestMethod.POST)
+        public String create(@Validated AbcForm form, BindingResult result, Model model) {
+            if (result.hasErrors()) {
+                return createRedo(form, model);
+            }
+            // omitted
+            return "redirect:/abc/create?complete";
+        }
+
+        // Handling request of "/abc/create?complete"
+        @RequestMapping(value = "create", params = "complete")
+        public String createComplete() {
+            // omitted
+            return "abc/createComplete";
+        }
+
+    }
+
+|
+|
+
+.. _controller_method_argument-label:
+
+ハンドラメソッドの引数について
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+`ハンドラメソッドの引数は様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-arguments>`_ が、
+基本的には次に挙げるものは原則として使用しないこと。
+
+* ServletRequest
+* HttpServletRequest
+* org.springframework.web.context.request.WebRequest
+* org.springframework.web.context.request.NativeWebRequest
+* java.io.InputStream
+* java.io.Reader
+* java.io.OutputStream
+* java.io.Writer
+* java.util.Map
+* org.springframework.ui.ModelMap
+
+.. note::
+    ``HttpServletRequest`` のgetAttribute/setAttribute
+    や ``Map`` のget/putのような汎用的なメソッドの利用を許可すると自由な値の受け渡しができてしまい、
+    プロジェクトの規模が大きくなると保守性を著しく低下させる可能性がある。
+
+    同様の理由で、他で代替できる場合は ``HttpSession`` を極力使用しないことを推奨する。
+
+    共通的なパラメータ(リクエストパラメータ)をJavaBeanに格納してControllerの引数に渡したい場合は
+    後述の :ref:`methodargumentresolver` を使用することで実現できる。
+
+|
+
+以下に、引数の使用方法について、目的別に13例示す。
+
+- :ref:`controller_method_argument-model-label`
+- :ref:`controller_method_argument-pathvariable-label`
+- :ref:`controller_method_argument-requestparam-label`
+- :ref:`controller_method_argument-form-label`
+- :ref:`controller_method_argument-validation-label`
+- :ref:`controller_method_argument-redirectattributes-label`
+- :ref:`controller_method_argument-redirectattributes-param-label`
+- :ref:`controller_method_argument-redirectattributes-path-label`
+- :ref:`controller_method_argument-cookievalue-label`
+- :ref:`controller_method_argument-cookiewrite-label`
+- :ref:`controller_method_argument-pagination-label`
+- :ref:`controller_method_argument-upload-label`
+- :ref:`controller_method_argument-message-label`
+
+|
+
+.. _controller_method_argument-model-label:
+
+画面(View)にデータを渡す
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+画面(View)に表示するデータを渡したい場合は、``org.springframework.ui.Model``\ (以降 ``Model`` と呼ぶ) をハンドラメソッドの引数として受け取り、
+\ ``Model``\ オブジェクトに渡したいデータ(オブジェクト)を追加する。
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 2-4
+
+    @RequestMapping("hello")
+    public String hello(Model model) { // (1)
+        model.addAttribute("hello", "Hello World!"); // (2)
+        model.addAttribute(new HelloBean("Bean Hello World!")); // (3)
+        return "sample/hello"; // returns view name
+    }
+
+- hello.jsp
+
+ .. code-block:: jsp
+    :emphasize-lines: 1-2
+
+    Message : ${f:h(hello)}<br> <%-- (4) --%>
+    Message : ${f:h(helloBean.message)}<br> <%-- (5) --%>
+
+- HTML of created by View(hello.jsp)
+
+ .. code-block:: html
+    :emphasize-lines: 1-2
+
+    Message : Hello World!<br> <!-- (6) -->
+    Message : Bean Hello World!<br>　<!-- (6) -->
+
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``Model``\ オブジェクトを引数として受け取る。
+   * - | (2)
+     - | 引数で受け取った\ ``Model``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出し、渡したいデータを\ ``Model``\ オブジェクトに追加する。
+       | 例では、``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
+   * - | (3)
+     - | \ ``addAttribute``\ メソッドの第一引数を省略すると値のクラス名の先頭を小文字にした文字列が属性名になる。
+       | 例では、 ``model.addAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
+   * - | (4)
+     - | View(JSP)側では、「${属性名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
+       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
+       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
+   * - | (5)
+     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\に格納されているJavaBeanから値を取得することができる。
+   * - | (6)
+     - | JSP実行後に出力されるHTML。
+
+ .. note::
+  \ ``Model``\ は使用しない場合でも引数に指定しておいてもよい。実装初期段階では必要なくても
+  後で使う場合がある(後々メソッドのシグニチャを変更する必要がなくなる)。
+
+ .. note::
+  ``Model`` に ``addAttribute`` することで、 ``HttpServletRequest`` に ``setAttribute`` されるため、
+  Spring MVCの管理下にないモジュール(例えばServletFilterなど)からも値を参照することが出来る。
+
+|
+
+.. _controller_method_argument-pathvariable-label:
+
+URLのパスから値を取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| URLのパスから値を取得する場合は、引数に\ ``@PathVariable``\ アノテーションを付与する。
+| \ ``@PathVariable``\ アノテーションを使用してパスから値を取得する場合、 \ ``@RequestMapping``\ アノテーションのvalue属性に取得したい部分を変数化しておく必要がある。
+
+ .. code-block:: java
+    :emphasize-lines: 1,3,4
+
+    @RequestMapping("hello/{id}/{version}") // (1)
+    public String hello(
+            @PathVariable("id") String id, // (2)
+            @PathVariable Integer version, // (3)
+            Model model) {
+        // do something
+        return "sample/hello"; // returns view name
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``@RequestMapping``\ アノテーションのvalue属性に、抜き出したい箇所をパス変数として指定する。パス変数は、「{変数名}」の形式で指定する。
+       | 上記例では、 ``"id"`` と ``"version"`` という二つのパス変数を指定している。
+   * - | (2)
+     - | \ ``@PathVariable``\ アノテーションのvalue属性には、パス変数の変数名を指定する。
+       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
+   * - | (3)
+     - | ``@PathVariable``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
+       | 上記例では、 ``"sample/hello/aaaa/1"`` というURLにアクセスした場合、引数versionに数値 ``"1"`` が渡る。
+       | ただしこの方法は、
+
+       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
+       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
+
+       のどちらかを指定してコンパイルする必要がある。
+
+ .. note::
+    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
+    例えば、上記例で ``"sample/hello/aaaa/v1"`` というURLでアクセスした場合、``"v1"`` をIntegerに変換できないため、例外がスローされる。
+
+ .. warning::
+    ``@PathVariable``\ アノテーションのvalue属性を省略する場合、デプロイするアプリケーションは\ ``-g``\ オプション又はJava8から追加された\ ``-parameters``\ オプションを指定してコンパイルする必要がある。
+    これらのオプションを指定した場合、コンパイル後のクラスにはデバッグ時に必要となる情報や処理などが挿入されるため、メモリや処理性能に影響を与えることがあるので注意が必要である。
+    基本的には、value属性を明示的に指定する方法を推奨する。
+
+|
+
+.. _controller_method_argument-requestparam-label:
+
+リクエストパラメータを個別に取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+リクエストパラメータを1つずつ取得したい場合は、引数に\ ``@RequestParam``\ アノテーションを付与する。
+
+ .. code-block:: java
+    :emphasize-lines: 3-6
+
+    @RequestMapping("bindRequestParams")
+    public String bindRequestParams(
+            @RequestParam("id") String id, // (1)
+            @RequestParam String name, // (2)
+            @RequestParam(value = "age", required = false) Integer age, // (3)
+            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode, // (4)
+            Model model) {
+        // do something
+        return "sample/hello"; // returns view name
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``@RequestParam``\ アノテーションのvalue属性には、リクエストパラメータ名を指定する。
+       | 上記例では、 ``"sample/hello?id=aaaa"`` というURLにアクセスした場合、引数idに文字列 ``"aaaa"`` が渡る。
+   * - | (2)
+     - | ``@RequestParam``\ アノテーションのvalue属性は省略可能で、省略した場合は引数名がリクエストパラメータ名となる。
+       | 上記例では、 ``"sample/hello?name=bbbb&...."`` というURLにアクセスした場合、引数nameに文字列 ``"bbbb"`` が渡る。
+       | ただしこの方法は、
+
+       * \ ``-g``\ オプション(デバッグ情報を出力するモード)
+       * Java8から追加された\ ``-parameters``\ オプション(メソッド・パラメータにリフレクション用のメタデータを生成するモード)
+
+       のどちらかを指定してコンパイルする必要がある。
+   * - | (3)
+     - | デフォルトの動作では、指定したリクエストパラメータが存在しないとエラーとなる。リクエストパラメータが存在しないケースを許容する場合は、required属性を ``false`` に指定する。
+       | 上記例では、``age`` というリクエストパラメータがない状態でアクセスした場合、引数ageに\ ``null``\ が渡る。
+   * - | (4)
+     - | 指定したリクエストパラメータが存在しない場合にデフォルト値を使用したい場合は、defaultValue属性にデフォルト値を指定する。
+       | 上記例では、``genderCode`` というリクエストパラメータがない状態でアクセスした場合、引数genderCodeに ``"unknown"`` が渡る。
+
+
+ .. note::
+    必須パラメータを指定しないでアクセスした場合は、\ ``org.springframework.web.bind.MissingServletRequestParameterException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
+    ただし、defaultValue属性を指定している場合は例外はスローされず、defaultValue属性で指定した値が渡る。
+
+ .. note::
+    バインドする引数の型はString以外でも良い。型が合わない場合は\ ``org.springframework.beans.TypeMismatchException``\ がスローされ、デフォルトの動作は400(Bad Request)が応答される。
+    例えば、上記例で ``"sample/hello?age=aaaa&..."`` というURLでアクセスした場合、 ``"aaaa"`` をIntegerに変換できないため、例外がスローされる。
+
+|
+
+**以下の条件に当てはまる場合は、次に説明するフォームオブジェクトにバインドすること。**
+
+- リクエストパラメータがHTML form内の項目である。
+- リクエストパラメータはHTML form内の項目ではないが、リクエストパラメータに必須チェック以外の入力チェックを行う必要がある。
+- リクエストパラメータの入力チェックエラーのエラー詳細をパラメータ毎に出力する必要がある。
+- 3つ以上のリクエストパラメータをバインドする。(保守性、可読性の観点)
+
+|
+
+.. _controller_method_argument-form-label:
+
+リクエストパラメータをまとめて取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| リクエストパラメータをオブジェクトにまとめて取得する場合は、フォームオブジェクトを使用する。
+| フォームオブジェクトは、HTML formを表現するJavaBeanである。フォームオブジェクトの詳細は :ref:`formobject` を参照されたい。
+
+以下は、``@RequestParam`` で個別にリクエストパラメータを受け取っていたハンドラメソッドを、フォームオブジェクトで受け取るように変更した場合の実装例である。
+
+``@RequestParam`` を使って個別にリクエストパラメータを受け取っているハンドラメソッドは以下の通り。
+
+ .. code-block:: java
+
+    @RequestMapping("bindRequestParams")
+    public String bindRequestParams(
+            @RequestParam("id") String id,
+            @RequestParam String name,
+            @RequestParam(value = "age", required = false) Integer age,
+            @RequestParam(value = "genderCode", required = false, defaultValue = "unknown") String genderCode,
+            Model model) {
+        // do something
+        return "sample/hello"; // returns view name
+    }
+
+| フォームオブジェクトクラスを作成する。
+| このフォームオブジェクトに対応するHTML formのjspは :ref:`formobjectjsp` を参照されたい。
+
+ .. code-block:: java
+
+    public class SampleForm implements Serializable{
+        private static final long serialVersionUID = 1477614498217715937L;
+
+        private String id;
+        private String name;
+        private Integer age;
+        private String genderCode;
+
+        // omit setters and getters
+
+    }
+
+ .. note::
+  **リクエストパラメータ名とフォームオブジェクトのプロパティ名は一致させる必要がある。**
+
+  上記のフォームオブジェクトに対して ``"id=aaa&name=bbbb&age=19&genderCode=men?tel=01234567"`` というパラメータが送信された場合、
+  ``id`` , ``name`` , ``age`` , ``genderCode`` は名前が一致するプロパティに値が格納されるが、 ``tel`` は名前が一致するプロパティがないため、フォームオブジェクトに取り込まれない。
+
+``@RequestParam`` を使って個別に受け取っていたリクエストパラメータをフォームオブジェクトとして受け取るようにする。
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    @RequestMapping("bindRequestParams")
+    public String bindRequestParams(@Validated SampleForm form, // (1)
+            BindingResult result,
+            Model model) {
+        // do something
+        return "sample/hello"; // returns view name
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``SampleForm``\ オブジェクトを引数として受け取る。
+
+ .. note::
+    フォームオブジェクトを引数に用いた場合、\ ``@RequestParam``\ の場合とは異なり、
+    必須チェックは行われない。\ **フォームオブジェクトを使用する場合は、次に説明する** :ref:`controller_method_argument-validation-label` **を行うこと**\ 。
+
+.. warning::
+    EntityなどDomainオブジェクトをそのままフォームオブジェクトとして使うこともできるが、
+    実際には、WEBの画面上にしか存在しないパラメータ（確認用パスワードや、規約確認チェックボックス等）が存在する。
+    Domainオブジェクトにそのような画面項目に依存する項目を入れるべきではないので、Domainオブジェクトとは別にフォームオブジェクト用のクラスを作成することを推奨する。
+    リクエストパラメータからDomainオブジェクトを作成する場合は、一旦フォームオブジェクトにバインドしてからプロパティ値をDomainオブジェクトにコピーすること。
+
+|
+
+.. _controller_method_argument-validation-label:
+
+入力チェックを行う
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+リクエストパラメータがバインドされているフォームオブジェクトに対して入力チェックを行う場合は、
+フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付け、
+フォームオブジェクト引数の直後に\ ``org.springframework.validation.BindingResult``\ (以降\ ``BindingResult``\ と呼ぶ) を引数に指定する。
+
+入力チェックの詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
+
+フォームオブジェクトクラスのフィールドに入力チェックで必要となるアノテーションを付加する。
+
+ .. code-block:: java
+
+    public class SampleForm implements Serializable {
+        private static final long serialVersionUID = 1477614498217715937L;
+
+        @NotNull
+        @Size(min = 10, max = 10)
+        private String id;
+
+        @NotNull
+        @Size(min = 1, max = 10)
+        private String name;
+
+        @Min(1)
+        @Max(100)
+        private Integer age;
+
+        @Size(min = 1, max = 10)
+        private Integer genderCode;
+
+        // omit setters and getters
+    }
+
+
+| フォームオブジェクト引数に\ ``@Validated``\ アノテーションを付与する。
+| ``@Validated``\ アノテーションを付けた引数は、ハンドラメソッド実行前に入力チェックが行われ、チェック結果が直後の\ ``BindingResult``\ 引数に格納される。
+| フォームオブジェクトにString型以外を指定した場合に発生する型変換エラーも \ ``BindingResult``\ に格納されている。
+
+ .. code-block:: java
+    :emphasize-lines: 2,3,5
+
+    @RequestMapping("bindRequestParams")
+    public String bindRequestParams(@Validated SampleForm form, // (1)
+            BindingResult result, // (2)
+            Model model) {
+        if (result.hasErrors()) { // (3)
+            return "sample/input"; // back to the input view
+        }
+        // do something
+        return "sample/hello"; // returns view name
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``SampleForm``\ オブジェクトに\ ``@Validated``\ アノテーションを付与し、入力チェック対象のオブジェクトにする。
+   * - | (2)
+     - 入力チェック結果が格納される\ ``BindingResult``\ を引数に指定する。
+   * - | (3)
+     - 入力チェックエラーが存在するか判定する。エラーがある場合は、``true`` が返却される。
+
+|
+
+.. _controller_method_argument-redirectattributes-label:
+
+リダイレクト先にデータを渡す
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+ハンドラメソッドを実行した後にリダイレクトする場合に、リダイレクト先で表示するデータを渡したい場合は、\ ``org.springframework.web.servlet.mvc.support.RedirectAttributes``\ (以降\ ``RedirectAttributes``\ と呼ぶ) をハンドラメソッドの引数として受け取り、
+``RedirectAttributes``\ オブジェクトに渡したいデータを追加する。
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 2-5,10
+
+    @RequestMapping("hello")
+    public String hello(RedirectAttributes redirectAttrs) { // (1)
+        redirectAttrs.addFlashAttribute("hello", "Hello World!"); // (2)
+        redirectAttrs.addFlashAttribute(new HelloBean("Bean Hello World!")); // (3)
+        return "redirect:/sample/hello?complete"; // (4)
+    }
+
+    @RequestMapping(value = "hello", params = "complete")
+    public String helloComplete() {
+        return "sample/complete"; // (5)
+    }
+
+- complete.jsp
+
+ .. code-block:: jsp
+    :emphasize-lines: 1-2
+
+    Message : ${f:h(hello)}<br> <%-- (6) --%>
+    Message : ${f:h(helloBean.message)}<br> <%-- (7) --%>
+
+- HTML of created by View(complete.jsp)
+
+ .. code-block:: html
+    :emphasize-lines: 1-2
+
+    Message : Hello World!<br> <!-- (8) -->
+    Message : Bean Hello World!<br>　<!-- (8) -->
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``RedirectAttributes``\ オブジェクトを引数として受け取る。
+   * - | (2)
+     - | \ ``RedirectAttributes``\ オブジェクトの\ ``addFlashAttribute``\ メソッドを呼び出し、渡したいデータを\ ``RedirectAttributes``\ オブジェクトに追加する。
+       | 例では、 ``"hello"`` という属性名で ``"HelloWorld!"`` という文字列のデータを追加している。
+   * - | (3)
+     - | \ ``addFlashAttribute``\ メソッドの第一引数を省略すると値に渡したオブジェクトのクラス名の先頭を小文字にした文字列が属性名になる。
+       | 例では、 ``model.addFlashAttribute("helloBean", new HelloBean());`` を行ったのと同じ結果となる。
+   * - | (4)
+     - | 画面(View)を直接表示せず、次の画面を表示するためのリクエストにリダイレクトする。
+   * - | (5)
+     - | リダイレクト後のハンドラメソッドでは、(2)(3)で追加したデータを表示する画面のView名を返却する。
+   * - | (6)
+     - | View(JSP)側では、「${属性名}」と記述することで\ ``RedirectAttributes``\ オブジェクトに追加したデータを取得することができる。
+       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名)}」としている。
+       | HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
+   * - | (7)
+     - | 「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``RedirectAttributes``\に格納されているJavaBeanから値を取得することができる。
+   * - | (8)
+     - | HTMLの出力例。
+
+.. warning::
+    ``Model`` に追加してもリダイレクト先にデータを渡すことはできない。
+
+.. note::
+
+    \ ``Model``\ の\ ``addAttribute``\ メソッドに非常によく似ているが、データの生存期間が異なる。
+    \ ``RedirectAttributes``\ の\ ``addFlashAttribute``\ ではflash scopeというスコープにデータが格納され、
+    リダイレクト後の1リクエスト(PRGパターンのG)でのみ追加したデータを参照することができる。2回目以降のリクエストの時にはデータは消えている。
+
+.. figure:: images_ApplicationLayer/applicationFlashscope.png
+   :alt: Survival time of flush scope
+   :width: 80%
+   :align: center
+
+   **Picture - Survival time of flush scope**
+
+|
+
+.. _controller_method_argument-redirectattributes-param-label:
+
+リダイレクト先へリクエストパラメータを渡す
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+リダイレクト先へ動的にリクエストパラメータを設定したい場合は、引数の\ ``RedirectAttributes``\ オブジェクトに渡したい値を追加する。
+
+ .. code-block:: java
+    :emphasize-lines: 4
+
+    @RequestMapping("hello")
+    public String hello(RedirectAttributes redirectAttrs) {
+        String id = "aaaa";
+        redirectAttrs.addAttribute("id", id); // (1)
+        // must not return "redirect:/sample/hello?complete&id=" + id;
+        return "redirect:/sample/hello?complete";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 属性名にリクエストパラメータ名、属性値にリクエストパラメータの値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
+       | 上記例では、 ``"/sample/hello?complete&id=aaaa"`` にリダイレクトされる。
+
+.. warning::
+    上記例ではコメント化しているが、``return "redirect:/sample/hello?complete&id=" + id;``\ と結果は同じになる。
+    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURIエンコーディングも行われるので、
+    動的に埋め込むリクエストパラメータについては、**返り値のリダイレクトURLとして組み立てるのではなく、必ずaddAttributeメソッドを使用してリクエストパラメータに設定すること。**
+    動的に埋め込まないリクエストパラメータ(上記例だと"complete")については、返り値のリダイレクトURLに直接指定してよい。
+
+|
+
+.. _controller_method_argument-redirectattributes-path-label:
+
+リダイレクト先URLのパスに値を埋め込む
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+リダイレクト先URLのパスに動的に値を埋め込みたい場合は、リクエストパラメータの設定と同様引数の\ ``RedirectAttributes``\ オブジェクトに埋め込みたい値を追加する。
+
+ .. code-block:: java
+    :emphasize-lines: 4,6
+
+    @RequestMapping("hello")
+    public String hello(RedirectAttributes redirectAttrs) {
+        String id = "aaaa";
+        redirectAttrs.addAttribute("id", id); // (1)
+        // must not return "redirect:/sample/hello/" + id + "?complete";
+        return "redirect:/sample/hello/{id}?complete"; // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 属性名とパスに埋め込みたい値を指定して、\ ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを呼び出す。
+   * - | (2)
+     - | リダイレクトURLの埋め込みたい箇所に「{属性名}」のパス変数を指定する。
+       | 上記例では、 ``"/sample/hello/aaaa?complete"`` にリダイレクトされる。
+
+.. warning::
+    上記例ではコメント化しているが、``"redirect:/sample/hello/" + id + "?complete";``\ と結果は同じになる。
+    ただし、 ``RedirectAttributes``\ オブジェクトの\ ``addAttribute``\ メソッドを用いるとURLエンコーディングも行われるので、
+    動的に埋め込むパス値については、**返り値のリダイレクトURLとして記述せずに、必ずaddAttributeメソッドを使用し、パス変数を使って埋め込むこと。**
+
+|
+
+.. _controller_method_argument-cookievalue-label:
+
+Cookieから値を取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Cookieから取得したい場合は、引数に\ ``@CookieValue``\ アノテーションを付与する。
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    @RequestMapping("readCookie")
+    public String readCookie(@CookieValue("JSESSIONID") String sessionId, Model model) { // (1)
+        // do something
+        return "sample/readCookie"; // returns view name
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``@CookieValue``\ アノテーションのvalue属性には、Cookie名を指定する。
+       | 上記例では、Cookieから"JSESSIONID"というCookie名の値が引数sessionIdに渡る。
+
+.. note::
+    ``@RequestParam``\ 同様、required属性、defaultValue属性があり、引数の型にはString型以外の指定も可能である。
+    詳細は、 :ref:`controller_method_argument-requestparam-label` を参照されたい。
+
+|
+
+.. _controller_method_argument-cookiewrite-label:
+
+Cookieに値を書き込む
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| Cookieに値を書き込む場合は、\ ``HttpServletResponse``\ オブジェクトの\ ``addCookie``\ メソッドを直接呼び出してCookieに追加する。
+| Spring MVCからCookieに値を書き込む仕組みが提供されていないため(3.2.3時点)、**この場合に限り HttpServletResponse を引数に取っても良い。**
+
+ .. code-block:: java
+    :emphasize-lines: 3,5
+
+    @RequestMapping("writeCookie")
+    public String writeCookie(Model model,
+            HttpServletResponse response) { // (1)
+        Cookie cookie = new Cookie("foo", "hello world!");
+        response.addCookie(cookie); // (2)
+        // do something
+        return "sample/writeCookie";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - Cookieを書き込むために、\ ``HttpServletResponse``\ オブジェクトを引数に指定する。
+   * - | (2)
+     - | \ ``Cookie``\ オブジェクトを生成し、\ ``HttpServletResponse``\ オブジェクトに追加する。
+       | 上記例では、 ``"foo"`` というCookie名で ``"hello world!"`` という値を設定している。
+
+.. tip::
+
+    \ ``HttpServletResponse``\ を引数として受け取ることに変わりはないが、Cookieに値を書き込むためのクラスとして、
+    Spring Frameworkから\ ``org.springframework.web.util.CookieGenerator``\ というクラスが提供されている。必要に応じて使用すること。
+
+|
+
+.. _controller_method_argument-pagination-label:
+
+ページネーション情報を取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 一覧検索を行うリクエストでは、ページネーション情報が必要となる。
+| ``org.springframework.data.domain.Pageable``\ (以降\ ``Pageable``\ と呼ぶ) オブジェクトをハンドラメソッドの引数に取ることで、ページネーション情報(ページ数、取得件数)を容易に扱うことができる。
+
+ 詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照すること。
+
+|
+
+.. _controller_method_argument-upload-label:
+
+アップロードファイルを取得する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+アップロードされたファイルを取得する方法は大きく２つある。
+
+- フォームオブジェクトに\ ``MultipartFile``\のプロパティを用意する。
+- \ ``@RequestParam``\ アノテーションを付与して\ ``org.springframework.web.multipart.MultipartFile``\ をハンドラメソッドの引数とする。
+
+詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` を参照されたい。
+
+|
+
+.. _controller_method_argument-message-label:
+
+画面に結果メッセージを表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ ``Model``\ オブジェクト又は\ ``RedirectAttributes``\ オブジェクトをハンドラメソッドの引数として受け取り、
+\ ``ResultMessages``\ オブジェクトを追加することで処理の結果メッセージを表示できる。
+
+詳細については :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
+
+|
+|
+
+.. _controller_method_return-label:
+
+ハンドラメソッドの返り値について
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+`ハンドラメソッドの返り値についても様々な値をとることができる <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-ann-return-types>`_ が、
+基本的には次に挙げるもののみを使用すること。
+
+- String(View論理名)
+
+以下に、目的別に返り値の使用方法について説明する。
+
+- :ref:`controller_method_return-html-label`
+- :ref:`controller_method_return-download-label`
+
+|
+
+.. _controller_method_return-html-label:
+
+HTMLを応答する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| ハンドラメソッドの実行結果をHTMLとして応答する場合、ハンドラメソッドの返り値は、JSPのView名を返却する。
+| JSPを使ってHTMLを生成する場合の\ ``ViewResolver``\ は、基本的には\ ``UrlBasedViewResolver``\ の継承クラス(\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ 等)となる。
+
+| 以下では、JSP用の\ ``InternalViewResolver``\ を使用する場合の例を記載するが、画面レイアウトがテンプレート化されている場合は\ ``TilesViewResolver``\ を使用することを推奨する。
+| \ ``TilesViewResolver``\ の使用方法については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout` を参照されたい。
+
+- spring-mvc.xml
+
+ \ ``<bean>``\ 要素を使用する場合の定義例
+
+ .. code-block:: xml
+
+    <!-- (1) -->
+    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
+        <property name="prefix" value="/WEB-INF/views/" /> <!-- (2) -->
+        <property name="suffix" value=".jsp" /> <!-- (3) -->
+        <property name="order" value="1" /> <!-- (4) -->
+    </bean>
+
+ Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
+
+ .. code-block:: xml
+
+    <mvc:view-resolvers>
+        <mvc:jsp prefix="/WEB-INF/views/" /> <!-- (5) -->
+    </mvc:view-resolvers>
+
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 4
+
+    @RequestMapping("hello")
+    public String hello() {
+        // omitted
+        return "sample/hello"; // (6)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - JSP用の\ ``InternalViewResolver``\ を定義する。
+   * - | (2)
+     - JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
+
+       プレフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの物理的な格納場所を意識する必要がなくなる。
+   * - | (3)
+     - JSPファイルの拡張子(ファイルパスのサフィックス)を指定する。
+
+       サフィックスを指定しておくことで、ControllerでView名を返却する際に、JSPの拡張子を意識する必要がなくなる。
+   * - | (4)
+     - 複数の\ ``ViewResolver``\ を指定した場合の実行順番を指定する。
+
+       \ ``Integer``\ の範囲で指定することが可能で、値が小さいものから順に実行される。
+   * - | (5)
+     - Spring Framework 4.1から追加された\ ``<mvc:jsp>``\ 要素に使用して、JSP用の\ ``InternalViewResolver``\ を定義する。
+
+       * \ ``prefix``\ 属性には、JSPファイルが格納されているベースディレクトリ(ファイルパスのプレフィックス)を指定する。
+       * \ ``suffix``\ 属性には、デフォルト値として\ ``".jsp"``\が適用されているため、明示的に指定する必要はない。
+
+       .. note::
+
+           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
+           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
+
+   * - | (6)
+     - ハンドラメソッドの返り値として ``"sample/hello"`` というView名を返却した場合、 ``"/WEB-INF/views/sample/hello.jsp"`` が呼び出されてHTMLが応答される。
+
+.. note::
+    上記の例ではJSPを使ってHTMLを生成しているが、VelocityやFreeMarkerなど他のテンプレートエンジンを使用してHTMLを生成する場合でも、ハンドラメソッドの返り値は ``"sample/hello"`` のままでよい。
+    使用するテンプレートエンジンでの差分は ``ViewResolver`` によって解決される。
+
+|
+
+.. _controller_method_return-download-label:
+
+ダウンロードデータを応答する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| データベースなどに格納されているデータをダウンロードデータ(\ ``"application/octet-stream"``\ 等 )として応答する場合、
+| レスポンスデータの生成(ダウンロード処理)を行うViewを作成し、処理を委譲することを推奨する。
+| ハンドラメソッドでは、ダウンロード対象となるデータを \ ``Model``\ に追加し、ダウンロード処理を行うViewのView名を返却する。
+
+| View名からViewを解決する方法としては、個別のViewResolverを作成する方法もあるが、ここではSpring Frameworkから提供されている\ ``BeanNameViewResolver``\ を使用する。
+| ダウンロード処理の詳細については、 :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload` を参照されたい。
+
+- spring-mvc.xml
+
+ \ ``<bean>``\ 要素を使用する場合の定義例
+
+ .. code-block:: xml
+    :emphasize-lines: 1-4
+
+    <!-- (1) -->
+    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
+        <property name="order" value="0"/> <!-- (2) -->
+    </bean>
+
+    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
+        <property name="prefix" value="/WEB-INF/views/" />
+        <property name="suffix" value=".jsp" />
+        <property name="order" value="1" />
+    </bean>
+
+ Spring Framework 4.1から追加された\ ``<mvc:view-resolvers>``\ 要素を使用する場合の定義例
+
+ .. code-block:: xml
+    :emphasize-lines: 2
+
+    <mvc:view-resolvers>
+        <mvc:bean-name /> <!-- (3) -->
+        <mvc:jsp prefix="/WEB-INF/views/" />
+    </mvc:view-resolvers>
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 4
+
+    @RequestMapping("report")
+    public String report() {
+        // omitted
+        return "sample/report"; // (4)
+    }
+
+
+- XxxExcelView.java
+
+ .. code-block:: java
+    :emphasize-lines: 1-2
+
+    @Component("sample/report") // (5)
+    public class XxxExcelView extends AbstractExcelView { // (6)
+        @Override
+        protected void buildExcelDocument(Map<String, Object> model,
+                HSSFWorkbook workbook, HttpServletRequest request,
+                HttpServletResponse response) throws Exception {
+            HSSFSheet sheet;
+            HSSFCell cell;
+
+            sheet = workbook.createSheet("Spring");
+            sheet.setDefaultColumnWidth(12);
+
+            // write a text at A1
+            cell = getCell(sheet, 0, 0);
+            setText(cell, "Spring-Excel test");
+
+            cell = getCell(sheet, 2, 0);
+            setText(cell, (Date) model.get("serverTime")).toString());
+        }
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``BeanNameViewResolver``\ を定義する。
+
+       \ ``BeanNameViewResolver``\ は、返却されたView名に一致するBeanをアプリケーションコンテキストから探してViewを解決するクラスとなっている。
+   * - | (2)
+     - JSP用の\ ``InternalViewResolver``\ や \ ``TilesViewResolver``\ と併用する場合は、これらの\ ``ViewResolver``\ より、高い優先度を指定する事を推奨する。
+       上記例では、 ``"0"`` を指定することで、\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
+   * - | (3)
+     - Spring Framework 4.1から追加された\ ``<mvc:bean-name>``\ 要素を使用して、\ ``BeanNameViewResolver``\ を定義する。
+
+       \ ``<mvc:view-resolvers>``\ 要素を使用して\ ``ViewResolver``\ を定義する場合は、子要素に指定する\ ``ViewResolver``\の定義順が優先順位となる。
+       上記例では、JSP用の\ ``InternalViewResolver``\を定義するための要素(\ ``<mvc:jsp>``\)より上に定義することで、JSP用の\ ``InternalViewResolver``\ より先に\ ``BeanNameViewResolver``\によるView解決が行われる。
+
+       .. note::
+
+           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来るため、
+           本ガイドラインでは\ ``<mvc:view-resolvers>``\ を使用することを推奨する。
+   * - | (4)
+     - ハンドラメソッドの返り値として ``"sample/report"`` というView名を返却した場合、 (5)でBean登録されたViewインスタンスによって生成されたデータがダウンロードデータとして応答される。
+   * - | (5)
+     - コンポーネントの名前にView名を指定して、ViewオブジェクトをBeanとして登録する。
+
+       上記例では、 ``"sample/report"`` というbean名(View名)で ``x.y.z.app.views.XxxExcelView`` のインスタンスがBean登録される。
+   * - | (6)
+     - Viewの実装例。
+
+       上記例では、 ``org.springframework.web.servlet.view.document.AbstractExcelView`` を継承し、Excelデータを生成するViewクラスの実装となる。
+
+|
+|
+
+処理の実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| **Controllerでは、業務処理の実装は行わない** という点がポイントとなる。
+| 業務処理の実装はServiceで行い、Controllerでは業務処理が実装されているServiceのメソッドを呼び出す。
+| 業務処理の実装の詳細については :doc:`DomainLayer` を参照されたい。
+
+.. note::
+    Controllerは、基本的には画面遷移の決定などの処理のルーティングと\ ``Model``\ の設定のみ実装することに徹し、可能な限りシンプルな状態に保つこと。
+    この方針で統一することにより、Controllerで実装すべき処理が明確になり、開発規模が大きくなった場合でもControllerのメンテナンス性を保つことができる。
+
+|
+
+Controllerで実装すべき処理を以下に4つ示す。
+
+- :ref:`controller_logic_correlationcheck-label`
+- :ref:`controller_logic_businesslogic-label`
+- :ref:`controller_logic_domainobject-label`
+- :ref:`controller_logic_formobject-label`
+
+|
+
+.. _controller_logic_correlationcheck-label:
+
+入力値の相関チェック
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 入力値に対する相関チェックは、\ ``org.springframework.validation.Validator``\ インタフェースを実装したValidationクラス、もしくは、Bean Validationで検証を行う。
+| 相関チェックの実装の詳細については、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
+
+| 相関チェックの実装自体はControllerのハンドラメソッドで行うことはないが、相関チェックを行う\ ``Validator``\ を\ ``org.springframework.web.bind.WebDataBinder``\ に追加する必要がある。
+
+ .. code-block:: java
+    :emphasize-lines: 2,6
+
+    @Inject
+    PasswordEqualsValidator passwordEqualsValidator; // (1)
+
+    @InitBinder
+    protected void initBinder(WebDataBinder binder){
+        binder.addValidators(passwordEqualsValidator); // (2)
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - 相関チェックを行う\ ``Validator``\ をInjectする。
+   * - | (2)
+     - | Injectした\ ``Validator``\ を \ ``WebDataBinder``\ に追加する。
+       | \ ``WebDataBinder``\ に追加しておくことで、ハンドラメソッド呼び出し前に行われる入力チェック処理にて、(1)で追加した\ ``Validator``\ が実行され、相関チェックを行うことが出来る。
+
+|
+
+.. _controller_logic_businesslogic-label:
+
+業務処理の呼び出し
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+業務処理が実装されているServiceをInjectし、InjectしたServiceのメソッドを呼び出すことで業務処理を実行する。
+
+ .. code-block:: java
+    :emphasize-lines: 2,6
+
+    @Inject
+    SampleService sampleService; // (1)
+
+    @RequestMapping("hello")
+    public String hello(Model model){
+        String message = sampleService.hello(); // (2)
+        model.addAttribute("message", message);
+        return "sample/hello";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 業務処理が実装されている ``Service`` をInjectする。
+   * - | (2)
+     - Injectした ``Service`` のメソッドを呼び出し、業務処理を実行する。
+
+|
+
+.. _controller_logic_domainobject-label:
+
+ドメインオブジェクトへの値反映
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 本ガイドラインでは、HTML formから送信されたデータは直接ドメインオブジェクトにバインドするのではなく、フォームオブジェクトにバインドする方法を推奨している。
+| そのため、ControllerではServiceのメソッドに渡すドメインオブジェクトにフォームオブジェクトの値を反映する処理を行う必要がある。
+
+ .. code-block:: java
+    :emphasize-lines: 4,11-12
+
+    @RequestMapping("hello")
+    public String hello(@Validated SampleForm form, BindingResult result, Model model){
+        // omitted
+        Sample sample = new Sample(); // (1)
+        sample.setField1(form.getField1());
+        sample.setField2(form.getField2());
+        sample.setField3(form.getField3());
+        // ...
+        // and more ...
+        // ...
+        String message = sampleService.hello(sample); // (2)
+        model.addAttribute("message", message); // (3)
+        return "sample/hello";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | Serviceの引数となるドメインオブジェクトを生成し、フォームオブジェクトにバインドされている値を反映する。
+   * - | (2)
+     - Serviceのメソッドを呼び出し業務処理を実行する。
+   * - | (3)
+     - 業務処理から返却されたデータを \ ``Model``\ に追加する。
+
+| ドメインオブジェクトへ値を反映する処理は、Controllerのハンドラメソッド内で実装してもよいが、コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに処理を委譲することを推奨する。
+| 以下にHelperメソッドに処理を委譲した場合の例を示す。
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 2,7
+
+    @Inject
+    SampleHelper sampleHelper; // (1)
+
+    @RequestMapping("hello")
+    public String hello(@Validated SampleForm form, BindingResult result){
+        // omitted
+        String message = sampleHelper.hello(form); // (2)
+        model.addAttribute("message", message);
+        return "sample/hello";
+    }
+
+- SampleHelper.java
+
+ .. code-block:: java
+    :emphasize-lines: 6
+
+    public class SampleHelper {
+
+        @Inject
+        SampleService sampleService;
+
+        public String hello(SampleForm form){ // (3)
+            Sample sample = new Sample();
+            sample.setField1(form.getField1());
+            sample.setField2(form.getField2());
+            sample.setField3(form.getField3());
+            // ...
+            // and more ...
+            // ...
+            String message = sampleService.hello(sample);
+            return message;
+        }
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ControllerにHelperクラスのオブジェクトをInjectする。
+   * - | (2)
+     - InjectしたHelperクラスのメソッドを呼び出すことで、ドメインオブジェクトへの値の反映を行っている。
+       Helperクラスに処理を委譲することで、Controllerの実装をシンプルな状態に保つことができる。
+   * - | (3)
+     - ドメインオブジェクトを生成した後に、Serviceクラスのメソッド呼び出し業務処理を実行している。
+
+ .. note::
+    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
+    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
+
+|
+
+.. _controller_logic_formobject-label:
+
+フォームオブジェクトへの値反映
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 本ガイドラインでは、HTML formの項目にバインドするデータはドメインオブジェクトではなく、フォームオブジェクトを使用する方法を推奨している。
+| そのため、ControllerではServiceのメソッドから返却されたドメインオブジェクトの値をフォームオブジェクトに反映する処理を行う必要がある。
+
+
+ .. code-block:: java
+    :emphasize-lines: 4,5,11
+
+    @RequestMapping("hello")
+    public String hello(SampleForm form, BindingResult result, Model model){
+        // omitted
+        Sample sample = sampleService.getSample(form.getId()); // (1)
+        form.setField1(sample.getField1()); // (2)
+        form.setField2(sample.getField2());
+        form.setField3(sample.getField3());
+        // ...
+        // and more ...
+        // ...
+        model.addAttribute(sample); // (3)
+        return "sample/hello";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - 業務処理が実装されているServiceのメソッドを呼び出し、ドメインオブジェクトを取得する。
+   * - | (2)
+     - 取得したドメインオブジェクトの値をフォームオブジェクトに反映する。
+   * - | (3)
+     - 表示のみ行う項目がある場合は、データを参照できるようにするために、\ ``Model``\ にドメインオブジェクトを追加する。
+
+ .. note::
+    画面に表示のみ行う項目については、フォームオブジェクトに項目をもつのではなく、Entityなどのドメインオブジェクトから直接値を参照することを推奨する。
+
+フォームオブジェクトへの値反映処理は、Controllerのハンドラメソッド内で実装してもよいが、
+コード量が多くなる場合はハンドラメソッドの可読性を考慮してHelperクラスのメソッドに委譲することを推奨する。
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 5
+
+    @RequestMapping("hello")
+    public String hello(@Validated SampleForm form, BindingResult result){
+        // omitted
+        Sample sample = sampleService.getSample(form.getId());
+        sampleHelper.applyToForm(sample, form); // (1)
+        model.addAttribute(sample);
+        return "sample/hello";
+    }
+
+- SampleHelper.java
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    public void applyToForm(SampleForm destForm, Sample srcSample){
+        destForm.setField1(srcSample.getField1()); // (2)
+        destForm.setField2(srcSample.getField2());
+        destForm.setField3(srcSample.getField3());
+        // ...
+        // and more ...
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドを呼び出す。
+   * - | (2)
+     - ドメインオブジェクトの値をフォームオブジェクトに反映するためのメソッドにて、ドメインオブジェクトの値をフォームオブジェクトに反映する。
+
+ .. note::
+    Helperクラスに処理を委譲する以外の方法として、Bean変換機能を使用する方法がある。
+    Bean変換機能の詳細は、:doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer` を参照されたい。
+
+|
+|
+
+.. _formobject:
+
+フォームオブジェクトの実装
+--------------------------------------------------------------------------------
+フォームオブジェクトはHTML上のformを表現するオブジェクト(JavaBean)であり、以下の役割を担う。
+
+#. **データベース等で保持している業務データを保持し、HTML(JSP) formから参照できるようにする。**
+#. **HTML formから送信されたリクエストパラメータを保持し、ハンドラメソッドで参照できるようにする。**
+
+.. figure:: ./images_ApplicationLayer/applicationFormobject.png
+   :width: 80%
+   :align: center
+
+|
+
+フォームオブジェクトの実装について、以下4点に着目して説明する。
+
+- :ref:`formobject_new-label`
+- :ref:`formobject_init-label`
+- :ref:`formobject_bindhtmlform-label`
+- :ref:`formobject_bindrequestparam-label`
+
+|
+
+.. _formobject_new-label:
+
+フォームオブジェクトの作成方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+フォームオブジェクトはJavaBeanとして作成する。
+Spring Frameworkでは、HTML formから送信されたリクエストパラメータ(文字列)を、フォームオブジェクトに定義されている型に変換してからバインドする機能を提供しているため、
+フォームオブジェクトに定義するフィールドの型は、\ ``java.lang.String``\ だけではなく、任意の型で定義することができる。
+
+ .. code-block:: java
+
+    public class SampleForm implements Serializable {
+        private String id;
+        private String name;
+        private Integer age;
+        private String genderCode;
+        private Date birthDate;
+        // ommitted getter/setter
+    }
+
+ .. tip:: **Spring Frameworkから提供されている型変換を行う仕組みについて**
+
+    Spring Frameworkは、以下の3つの仕組みを使って型変換を行っており、基本的な型への変換は標準でサポートされている。各変換機能の詳細については、リンク先のページを参照されたい。
+
+    * `Spring Type Conversion <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#core-convert>`_\
+    * `Spring Field Formatting <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#format>`_\
+    * `java.beans.PropertyEditor implementations <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#beans-beans-conversion>`_\
+
+ .. warning::
+
+    フォームオブジェクトには画面に表示のみ行う項目は保持せず、HTML formの項目のみ保持することを推奨する。
+    フォームオブジェクトに画面表示のみ行う項目の値を設定した場合、フォームオブジェクトをHTTPセッションオブジェクトに格納する際にメモリを多く消費する事になり、メモリ枯渇の原因になる可能性がある。
+    画面表示のみの項目は、Entityなどのドメイン層のオブジェクトをリクエストスコープに追加(\ ``Model.addAttribute``\ )することでHTML(JSP)にデータを渡すことを推奨する。
+
+|
+
+フィールド単位の数値型変換
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ ``@NumberFormat``\ アノテーションを使用することでフィールド毎に数値の形式を指定することが出来る。
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    public class SampleForm implements Serializable {
+        @NumberFormat(pattern = "#,#") // (1)
+        private Integer price;
+        // ommitted getter/setter
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - HTML formから送信されるリクエストパラメータの数値形式を指定する。例では、patternとして ``"#,#"`` 形式を指定しているので、「,」でフォーマットされた値をバインドすることができる。
+       リクエストパラメータの値が ``"1,050"`` の場合、フォームオブジェクトのpriceには ``"1050"`` のIntegerオブジェクトがバインドされる。
+
+``@NumberFormat``\ アノテーションで指定できる属性は以下の通り。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 10 80
+
+   * - 項番
+     - 属性名
+     - 説明
+   * - 1.
+     - style
+     - 数値のスタイルを指定する。詳細は、`NumberFormat.StyleのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/NumberFormat.Style.html>`_\ を参照されたい。
+   * - 2.
+     - pattern
+     - Javaの数値形式を指定する。詳細は、`DecimalFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html>`_\ を参照されたい。
+
+|
+
+.. _ApplicationLayer-DateTimeFormat:
+
+フィールド単位の日時型変換
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ ``@DateTimeFormat``\ アノテーションを使用することでフィールド毎に日時の形式を指定することが出来る。
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    public class SampleForm implements Serializable {
+        @DateTimeFormat(pattern = "yyyyMMdd") // (1)
+        private Date birthDate;
+        // ommitted getter/setter
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - HTML formから送信されるリクエストパラメータの日時形式を指定する。例では、patternとして ``"yyyyMMdd"`` 形式を指定している。
+       リクエストパラメータの値が ``"20131001"`` の場合、フォームオブジェクトのbirthDateには 2013年10月1日のDateオブジェクトがバインドされる。
+
+\ ``@DateTimeFormat``\ アノテーションで指定できる属性は以下の通り。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 10 80
+
+   * - 項番
+     - 属性名
+     - 説明
+   * - 1.
+     - iso
+     - ISOの日時形式を指定する。詳細は、`DateTimeFormat.ISOのJavadoc <http://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/format/annotation/DateTimeFormat.ISO.html>`_\ を参照。
+   * - 2.
+     - pattern
+     - Javaの日時形式を指定する。詳細は、`SimpleDateFormatのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html>`_\ を参照されたい。
+   * - 3.
+     - style
+     - | 日付と時刻のスタイルを2桁の文字列として指定する。
+       | 1桁目が日付のスタイル、2桁目が時刻のスタイルとなる。
+       | スタイルとして指定できる値は以下の値となる。
+       |
+       | S : \ ``java.text.DateFormat.SHORT``\ と同じ形式となる。
+       | M : \ ``java.text.DateFormat.MEDIUM``\ と同じ形式となる。
+       | L : \ ``java.text.DateFormat.LONG``\ と同じ形式となる。
+       | F : \ ``java.text.DateFormat.FULL``\ と同じ形式となる。
+       | - : 省略を意味するスタイル。
+       |
+       | 指定例及び変換例)
+       | MM : Dec 9, 2013 3:37:47 AM
+       | M- : Dec 9, 2013
+       | -M : 3:41:45 AM
+
+.. warning::
+    \ ``@DateTimeFormat`` \ の pattern でフォーマットを指定し、プロパティとして  JSR-310 Date and Time APIが提供する\ ``java.time.LocalDate`` \を使用した場合、STRICTにチェックがされない
+    (\ ``"20150229"`` \を変換した場合、本来は型ミスマッチエラーとなるはずが、\ ``2015年2月28日`` \ がバインドされる)。
+    Spring Framework  4.3で仕様が改善されて発生しなくなるが、TERASOLUNA Server Framework for Java (5.x)では Spring Framework 4.2 を使用しているので影響を受ける。
+    本事象の詳細は「`@DateTimeFormat's JSR-310 formatter is not strict in case of pattern <https://jira.spring.io/browse/SPR-13567>`_\」を参照されたい。
+
+|
+
+Controller単位の型変換
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ ``@InitBinder``\ アノテーションを使用することでController毎に型変換の定義を指定する事も出来る。
+
+ .. code-block:: java
+    :emphasize-lines: 1,5
+
+    @InitBinder // (1)
+    public void initWebDataBinder(WebDataBinder binder) {
+        binder.registerCustomEditor(
+                Long.class,
+                new CustomNumberEditor(Long.class, new DecimalFormat("#,#"), true)); // (2)
+    }
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    @InitBinder("sampleForm") // (3)
+    public void initSampleFormWebDataBinder(WebDataBinder binder) {
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``@InitBinder``\ アノテーション を付与したメソッド用意すると、バインド処理が行われる前にこのメソッドが呼び出され、デフォルトの動作をカスタマイズすることができる。
+   * - | (2)
+     - 例では、Long型のフィールドの数値形式を ``"#,#"`` に指定しているので、「,」でフォーマットされた値をバインドすることができる。
+   * - | (3)
+     - \ ``@InitBinder``\ アノテーションのvalue属性にフォームオブジェクトの属性名を指定することで、フォームオブジェクト毎にデフォルトの動作をカスタマイズすることもできる。
+       例では、 ``"sampleForm"`` という属性名のフォームオブジェクトに対するバインド処理が行われる前にメソッドが呼び出される。
+
+|
+
+入力チェック用のアノテーションの指定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+フォームオブジェクトのバリデーションは、Bean Validationを使用して行うため、フィールドの制約条件を示すアノテーションを指定する必要がある。
+入力チェックの詳細は、:doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
+
+|
+
+.. _formobject_init-label:
+
+フォームオブジェクトの初期化方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+HTMLのformにバインドするフォームオブジェクトの事をform-backing beanと呼び、\ ``@ModelAttribute``\ アノテーションを使うことで結びつけることができる。
+form-backing beanの初期化は、\ ``@ModelAttribute``\ アノテーションを付与したメソッドで行う。
+このようなメソッドのことを本ガイドラインではModelAttributeメソッドと呼び、\ ``setUpXxxForm``\ というメソッド名で定義することを推奨する。
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    @ModelAttribute // (1)
+    public SampleForm setUpSampleForm() {
+        SampleForm form = new SampleForm();
+        // populate form
+        return form;
+    }
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    @ModelAttribute("xxx") // (2)
+    public SampleForm setUpSampleForm() {
+        SampleForm form = new SampleForm();
+        // populate form
+        return form;
+    }
+
+ .. code-block:: java
+    :emphasize-lines: 3
+
+    @ModelAttribute
+    public SampleForm setUpSampleForm(
+            @CookieValue(value = "name", required = false) String name, // (3)
+            @CookieValue(value = "age", required = false) Integer age,
+            @CookieValue(value = "birthDate", required = false) Date birthDate) {
+        SampleForm form = new SampleForm();
+        form.setName(name);
+        form.setAge(age);
+        form.setBirthDate(birthDate);
+        return form;
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``Model``\ に追加するための属性名は、クラス名の先頭を小文字にした値（デフォルト値）が設定される。この例では ``"sampleForm"`` が属性名になる。
+       返却したオブジェクトは、\ ``model.addAttribute(form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
+   * - | (2)
+     -  ``Model``\ に追加するための属性名を指定したい場合は、\ ``@ModelAttribute``\ アノテーションのvalue属性に指定する。この例では ``"xxx"`` が属性名になる。
+        返却したオブジェクトは、``model.addAttribute("xxx", form)``\ 相当の処理が実行され\ ``Model``\ に追加される。
+        デフォルト値以外の属性名を指定した場合、ハンドラメソッドの引数としてフォームオブジェクトを受け取る時に\ ``@ModelAttribute("xxx")``\ の指定が必要になる。
+   * - | (3)
+     -  ModelAttributeメソッドは、ハンドラメソッドと同様に初期化に必要なパラメータを渡すこともできる。例では、\ ``@CookieValue``\ アノテーションを使用してCookieの値をフォームオブジェクトに設定している。
+
+.. note::
+    フォームオブジェクトにデフォルト値を設定したい場合はModelAttributeメソッドで値を設定すること。
+    例の(3)ではCookieから値を取得しているが、定数クラスなどに定義されている固定値を直接設定してもよい。
+
+.. note::
+    ModelAttributeメソッドはController内に複数定義することができる。各メソッドはControllerのハンドラメソッドが呼び出される前に毎回実行される。
+
+.. warning::
+    ModelAttributeメソッドはリクエスト毎にメソッドが実行されるため、特定のリクエストの時のみに必要なオブジェクトをModelAttributeメソッドを使って生成すると、無駄なオブジェクトの生成及び初期化処理が行われる点に注意すること。
+    特定のリクエストのみで必要なオブジェクトについては、ハンドラメソッド内で生成し\ ``Model``\ に追加する方法にすること。
+
+|
+
+.. _formobjectjsp:
+
+.. _formobject_bindhtmlform-label:
+
+HTML formへのバインディング方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| \ ``Model``\ に追加されたフォームオブジェクトは\ ``<form:xxx>``\ タグを用いて、HTML(JSP)のformにバインドすることができる。
+| \ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %> <!-- (1) -->
+
+ .. code-block:: jsp
+    :emphasize-lines: 2,3
+
+    <form:form modelAttribute="sampleForm"
+               action="${pageContext.request.contextPath}/sample/hello"> <!-- (2) -->
+        Id         : <form:input path="id" /><form:errors path="id" /><br /> <!-- (3) -->
+        Name       : <form:input path="name" /><form:errors path="name" /><br />
+        Age        : <form:input path="age" /><form:errors path="age" /><br />
+        Gender     : <form:input path="genderCode" /><form:errors path="genderCode" /><br />
+        Birth Date : <form:input path="birthDate" /><form:errors path="birthDate" /><br />
+    </form:form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``<form:form>``\ タグを使用するためのtaglibの定義を行う。
+   * - | (2)
+     - \ ``<form:form>``\ タグのmodelAttribute属性には、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
+   * - | (3)
+     - \ ``<form:input>``\ タグのpath属性には、フォームオブジェクトのプロパティ名を指定する。
+
+|
+
+.. _formobject_bindrequestparam-label:
+
+リクエストパラメータのバインディング方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+HTML formから送信されたリクエストパラメータは、フォームオブジェクトにバインドし、Controllerのハンドラメソッドの引数に渡すことができる。
+
+ .. code-block:: java
+    :emphasize-lines: 3
+
+    @RequestMapping("hello")
+    public String hello(
+            @Validated SampleForm form, // (1)
+            BindingResult result,
+            Model model) {
+        if (result.hasErrors()) {
+            return "sample/input";
+        }
+        // process form...
+        return "sample/hello";
+    }
+
+ .. code-block:: java
+    :emphasize-lines: 10
+
+    @ModelAttribute("xxx")
+    public SampleForm setUpSampleForm() {
+        SampleForm form = new SampleForm();
+        // populate form
+        return form;
+    }
+
+    @RequestMapping("hello")
+    public String hello(
+            @ModelAttribute("xxx") @Validated SampleForm form, // (2)
+            BindingResult result,
+            Model model) {
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - フォームオブジェクトにリクエストパラメータが反映された状態で、Controllerのハンドラメソッドの引数に渡される。
+   * - | (2)
+     - ModelAttributeメソッドにて属性名を指定した場合、\ ``@ModelAttribute("xxx")``\ といった感じで、フォームオブジェクトの属性名を明示的に指定する必要がある。
+
+.. warning::
+
+    ModelAttributeメソッドで指定した属性名とメソッドの引数で指定した属性名が異なる場合、ModelAttributeメソッドで生成したインスタンスとは別のインスタンスが生成されるので注意が必要。
+    ハンドラメソッドで属性名の指定を省略した場合、クラス名の先頭を小文字にした値が属性名として扱われる。
+
+|
+
+バインディング結果の判定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+HTML formから送信されたリクエストパラメータをフォームオブジェクトにバインドする際に発生したエラー（入力チェックエラーも含む）は、 \ ``org.springframework.validation.BindingResult``\ に格納される。
+
+ .. code-block:: java
+    :emphasize-lines: 4,6
+
+    @RequestMapping("hello")
+    public String hello(
+            @Validated SampleForm form,
+            BindingResult result, // (1)
+            Model model) {
+        if (result.hasErrors()) { // (2)
+            return "sample/input";
+        }
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - フォームオブジェクトの直後に\ ``BindingResult``\ を宣言すると、フォームオブジェクトへのバインド時のエラーと入力チェックエラーを参照することができる。
+   * - | (2)
+     - \ ``BindingResult.hasErrors()``\ を呼び出すことで、フォームオブジェクトの入力値のエラー有無を判定することができる。
+
+フィールドエラーの有無、グローバルエラー(相関チェックエラーなどのクラスレベルのエラー)の有無を個別に判定することもできるので、要件に応じて使い分けること。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.40\linewidth}|p{0.50\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 40 50
+
+   * - 項番
+     - メソッド
+     - 説明
+   * - 1.
+     - ``hasGlobalErrors()``
+     - グローバルエラーの有無を判定するメソッド
+   * - 2.
+     - ``hasFieldErrors()``
+     - フィールドエラーの有無を判定するメソッド
+   * - 3.
+     - ``hasFieldErrors(String field)``
+     - 指定したフィールドのエラー有無を判定するメソッド
+
+|
+
+.. _view:
+
+Viewの実装
+--------------------------------------------------------------------------------
+Viewは以下の役割を担う。
+
+#. | **クライアントに応答するレスポンスデータ(HTML)を生成する。**
+   | Viewはモデル（フォームオブジェクトやドメインオブジェクトなど）から必要なデータを取得し、クライアントが描画するために必要な形式でレスポンスデータを生成する。
+
+|
+
+JSPの実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| クライアントにHTMLを応答する場合は、JSPを使用してViewを実装する。
+| JSPを呼び出すための ``ViewResolver`` は、Spring Frameworkより提供されているので、提供されているクラスを利用する。``ViewResolver`` の設定方法は、 :ref:`controller_method_return-html-label` を参照されたい。
+
+以下に、基本的なJSPの実装方法について説明する。
+
+- :ref:`view_jsp_include-label`
+- :ref:`view_jsp_out-label`
+- :ref:`view_jsp_outnumber-label`
+- :ref:`view_jsp_outdate-label`
+- :ref:`view_jsp_requesturl-label`
+- :ref:`view_jsp_form-label`
+- :ref:`view_jsp_errors-label`
+- :ref:`view_jsp_resultmessages-label`
+- :ref:`view_jsp_codelist-label`
+- :ref:`view_jsp_message-label`
+- :ref:`view_jsp_if-label`
+- :ref:`view_jsp_forEach-label`
+- :ref:`view_jsp_pagination-label`
+- :ref:`view_jsp_authorization-label`
+
+本章では代表的なJSPタグライブラリの使い方は説明しているが、全てのJSPタグライブラリの説明はしていないので、詳細な使い方については、それぞれのドキュメントを参照すること。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 30 60
+
+   * - 項番
+     - JSPタグライブラリ名
+     - ドキュメント
+   * - 1.
+     - Spring's form tag library
+     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\
+       - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-form-tld.html>`_\
+   * - 2.
+     - Spring's tag library
+     - - `<http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/spring-tld.html>`_\
+   * - 3.
+     - JSTL
+     - - `<http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\
+   * - 4.
+     - Common library's tags & el functions
+     - - 本ガイドラインの「:doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`」
+
+ .. warning::
+
+    terasoluna-gfw-web 1.0.0.RELEASEを使用している場合は、Spring's form tag libraryから提供されている\ ``<form:form>``\タグを使う際は、必ず\ ``action``\属性を指定すること。
+
+    terasoluna-gfw-web 1.0.0.RELEASEが依存しているSpring MVC(3.2.4.RELEASE)では、\ ``<form:form>``\タグの\ ``action``\属性を省略した場合、XSS(Cross-site scripting)の脆弱性が存在する。
+    脆弱性に関する情報については、\ `National Vulnerability Database (NVD)のCVE-2014-1904 <http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1904>`_\を参照されたい。
+
+    尚、terasoluna-gfw-web 1.0.1.RELEASE以上では、XSS対策が行われているSpring MVC(3.2.10.RELEASE以上)に依存しているため、本脆弱性は存在しない。
+
+
+
+|
+
+.. _view_jsp_include-label:
+
+インクルード用の共通JSPの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+全てのJSPで必要となるディレクティブの宣言などを行うためのJSPを作成する。
+このJSPを ``web.xml`` の ``<jsp-config>/<jsp-property-group>/<include-prelude>`` 要素に指定することで、個々のJSPで宣言する必要がなくなる。
+なお、このファイルはブランクプロジェクトで提供している。
+
+- include.jsp
+
+ .. code-block:: jsp
+    :emphasize-lines: 1,4,8
+
+    <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%> <%-- (1) --%>
+    <%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
+
+    <%@ taglib uri="http://www.springframework.org/tags" prefix="spring"%> <%-- (2) --%>
+    <%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
+    <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
+
+    <%@ taglib uri="http://terasoluna.org/functions" prefix="f"%> <%-- (3) --%>
+    <%@ taglib uri="http://terasoluna.org/tags" prefix="t"%>
+
+- web.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 7
+
+    <jsp-config>
+        <jsp-property-group>
+            <url-pattern>*.jsp</url-pattern>
+            <el-ignored>false</el-ignored>
+            <page-encoding>UTF-8</page-encoding>
+            <scripting-invalid>false</scripting-invalid>
+            <include-prelude>/WEB-INF/views/common/include.jsp</include-prelude> <!-- (4) -->
+        </jsp-property-group>
+    </jsp-config>
+
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - JSTLのJSPタグライブラリを宣言している。 例では、 ``core`` と ``fmt`` を利用している。
+   * - | (2)
+     - Spring FrameworkのJSPタグライブラリを宣言している。 例では、 ``spring`` と ``form`` と ``sec`` を利用している。
+   * - | (3)
+     - 共通ライブラリから提供しているJSPタグライブラリを宣言している。
+   * - | (4)
+     - インクルード用のJSP(\ ``/WEB-INF/views/common/include.jsp``\ )に指定した内容が、各JSP(\ ``<url-pattern>``\ で指定されているファイル)の先頭にインクルードされる。
+
+ .. note::
+
+   ディレクティブの詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.1.10 Directives" を参照されたい。
+
+ .. note::
+
+   <jsp-property-group>要素の詳細は、 `JavaServer Pages Specification(Version2.2) <http://download.oracle.com/otndocs/jcp/jsp-2.2-mrel-eval-oth-JSpec/>`_\ の "JSP.3.3 JSP Property Groups" を参照されたい。
+
+|
+
+.. _view_jsp_out-label:
+
+モデルに格納されている値を表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+モデル（フォームオブジェクトやドメインオブジェクトなど）に格納されている値をHTMLに表示する場合、EL式又はJSTLから提供されているJSPタグライブラリを使用する。
+
+EL式を使用して表示する。
+
+- SampleController.java
+
+ .. code-block:: java
+    :emphasize-lines: 3
+
+    @RequestMapping("hello")
+    public String hello(Model model) {
+        model.addAttribute(new HelloBean("Bean Hello World!")); // (1)
+        return "sample/hello"; // returns view name
+    }
+
+- hello.jsp
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    Message : ${f:h(helloBean.message)} <%-- (2) --%>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``Model``\ オブジェクトに \ ``HelloBean``\ オブジェクトを追加する。
+   * - | (2)
+     - | View(JSP)側では、「${属性名.JavaBeanのプロパティ名}」と記述することで\ ``Model``\ オブジェクトに追加したデータを取得することができる。
+       | 例ではHTMLエスケープを行うEL式の関数を呼び出しているため、「${f:h(属性名.JavaBeanのプロパティ名)}」としている。
+
+ .. note::
+    共通部品よりEL式用のHTMLエスケープ関数( ``f:h`` )を提供しているので、EL式を使用してHTMLに値を出力する場合は、必ず使用すること。
+    HTMLエスケープを行うEL式の関数の詳細については、 :doc:`Cross Site Scripting <../Security/XSS>` を参照されたい。
+
+JSTLのJSPタグライブラリから提供されている ``<c:out>`` タグを使用して表示する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    Message : <c:out value="${helloBean.message}" /> <%-- (1) --%>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式で取得した値を ``<c:out>`` タグのvalue属性に指定する。HTMLエスケープも行われる。
+
+ .. note::
+    ``<c:out>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 4 General-Purpose Actions" を参照されたい。
+
+|
+
+.. _view_jsp_outnumber-label:
+
+モデルに格納されている数値を表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+数値型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
+
+| JSTLのJSPタグライブラリから提供されている ``<fmt:formatNumber>`` タグを使用して表示する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    Number Item : <fmt:formatNumber value="${helloBean.numberItem}" pattern="0.00" /> <%-- (1) --%>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式で取得した値を ``<fmt:formatNumber>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``0.00``" を指定している。
+       | 仮に ``${helloBean.numberItem}`` で取得した値が ``"1.2"`` の場合、画面には ``"1.20"`` が出力される。
+
+.. note::
+    ``<fmt:formatNumber>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
+
+|
+
+.. _view_jsp_outdate-label:
+
+モデルに格納されている日時を表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+日時型の値をフォーマットして出力する場合、JSTLから提供されているJSPタグライブラリを使用する。
+
+JSTLのJSPタグライブラリから提供されている ``<fmt:formatDate>`` タグを使用して表示する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    Date Item : <fmt:formatDate value="${helloBean.dateItem}" pattern="yyyy-MM-dd" /> <%-- (1) --%>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式で取得した値を ``<fmt:formatDate>`` タグのvalue属性に指定する。表示するフォーマットはpattern属性に指定する。例では、"``yyyy-MM-dd``" を指定している。
+       | 仮に ``${helloBean.dateItem}`` で取得した値が2013年3月2日の場合、画面には ``"2013-03-02"`` が出力される。
+
+.. note::
+    ``<fmt:formatDate>`` の詳細は、`JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 9 Formatting Actions" を参照されたい。
+
+.. note::
+    日時オブジェクトの型として、Joda Timeから提供されている ``org.joda.time.DateTime`` などを利用する場合は、Jada Timeから提供されているJSPタグライブラリを使用すること。
+    Joda Timeの詳細は、 :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime` を参照されたい。
+
+
+|
+
+.. _view_jsp_requesturl-label:
+
+リクエストURLを生成する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+HTMLの\ ``<form>``\ 要素(JSPタグライブラリの\ ``<form:form>``\ 要素)の\ ``action``\ 属性や\ ``<a>``\ 要素の\ ``href``\ 属性などに対してリクエストURL(Controllerのメソッドを呼び出すためのURL)を設定する場合は、
+以下のいずれかの方法を使用してURLを生成する。
+
+* 文字列としてリクエストURLを組み立てる
+* Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる
+
+.. note::
+
+    どちらの方法を使用してもよいが、一つのアプリケーションの中で混在して使用することは、
+    保守性を低下させる可能性があるので避けた方がよい。
+
+|
+
+| 以降の説明で使用するControllerのメソッドの実装サンプルを示す。
+| 以降の説明では、以下に示すメソッドを呼び出すためのリクエストURLを生成するための実装方法について説明する。
+
+ .. code-block:: java
+
+    package com.example.app.hello;
+
+    import org.springframework.stereotype.Controller;
+    import org.springframework.web.bind.annotation.RequestMapping;
+
+    @RequestMapping("hello")
+    @Controller
+    public class HelloController {
+
+        // (1)
+        @RequestMapping({"", "/"})
+        public String hello() {
+            return "hello/home";
+        }
+
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - このメソッドに割り当てられるリクエストURLは、\ "``{コンテキストパス}/hello"``\ となる。
+
+|
+
+**文字列としてリクエストURLを組み立てる**
+
+まず、文字列としてリクエストURLを組み立てる方法について説明する。
+
+ .. code-block:: jsp
+
+    <form action="${pageContext.request.contextPath}/hello"> <!-- (2) -->
+        <!-- ... -->
+    </form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (2)
+      - \ ``pageContext``\ (JSPの暗黙オブジェクト)からWebアプリケーションに割り振られているコンテキスパスを取得し(\ ``${pageContext.request.contextPath}``\ )、
+        コンテキストパスの後ろに呼び出すControllerのメソッドに割り振られているサーブレットパス(上記例では、\ ``/hello``\)を加える。
+
+ .. tip::
+
+    URLを組み立てるJSPタグライブラリとして、
+
+    * JSTLから提供されている \ ``<c:url>``\
+    * Spring Frameworkから提供されている \ ``<spring:url>``\
+
+    が存在する。これらのJSPタグライブラリを使用して、リクエストURLを組み立ててもよい。
+
+    リクエストURLを動的に組み立てる必要がある場合は、
+    これらのJSPタグライブラリを使用してURLを組み立てた方がよいケースがある。
+
+|
+
+**Spring Framework 4.1から追加されたEL関数を使用してリクエストURLを組み立てる**
+
+つぎに、Spring Framework 4.1から追加されたEL関数(\ ``spring:mvcUrl``\ )を使用してリクエストURLを組み立てる方法について説明する。
+
+\ ``spring:mvcUrl``\ 関数を使用すると、Controllerのメソッドのメタ情報(メソッドシグネチャやアノテーションなど)と連携して、
+リクエストURLを組み立てる事ができる。
+
+ .. code-block:: jsp
+
+    <form action="${spring:mvcUrl('HC#hello').build()}"> <!-- (3) -->
+        <!-- ... -->
+    </form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (3)
+      - \ ``spring:mvcUrl``\ 関数の引数には、呼び出すControllerのメソッドに割り振られているリクエストマッピング名を指定する。
+
+        \ ``spring:mvcUrl``\ 関数からは、リクエストURLを組み立てるクラス(\ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ )のオブジェクトが返却される。
+        \ ``MvcUriComponentsBuilder.MethodArgumentBuilder``\ クラスには、
+
+        * \ ``arg``\ メソッド
+        * \ ``build``\ メソッド
+        * \ ``buildAndExpand``\ メソッド
+
+        が用意されており、それぞれ、以下の役割を持つ。
+
+        * \ ``arg``\ メソッドは、Controllerのメソッドの引数に渡す値を指定するためのメソッドである。
+        * \ ``build``\ メソッドは、リクエストURLを生成するためのメソッドである。
+        * \ ``buildAndExpand``\ メソッドは、Controllerのメソッドの引数として宣言されていない動的な部分(パス変数など)に埋め込む値を指定した上で、リクエストURLを生成するためのメソッドである。
+
+        上記例では、リクエストURLが静的なURLであるため、\ ``build``\ メソッドのみを呼び出してリクエストURLを生成している。
+        リクエストURLが動的なURL(パス変数やクエリ文字列が存在するURL)の場合は、
+        \ ``arg``\ メソッドや\ ``buildAndExpand``\ メソッドを呼び出す必要がある。
+
+        \ ``arg``\ メソッドと\ ``buildAndExpand``\ メソッドの具体的な使用例については、
+        「\ `Spring Framework Reference Documentation(Building URIs to Controllers and methods from views) <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-links-to-controllers-from-views>`_\ 」を参照されたい。
+
+
+ .. note:: **リクエストマッピング名について**
+
+    リクエストマッピング名は、デフォルト実装(\ ``org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMethodMappingNamingStrategy``\ の実装)では、
+    「クラス名の大文字部分(クラスの短縮名) + \ ``"#"``\  + メソッド名」となる。
+
+    リクエストマッピング名は重複しないようにする必要がある。
+    名前が重複してしまった場合は、\ ``@RequestMapping``\ アノテーションの\ ``name``\ 属性に一意となる名前を指定する必要がある。
+
+    Controllerのメソッドに割り当てられたリクエストマッピング名を確認したい場合は、
+    \ :file:`logback.xml`\ に以下の設定を追加すればよい。
+
+     .. code-block:: xml
+
+        <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
+            <level value="trace" />
+        </logger>
+
+    上記設定を行った後に再起動すると、以下のようなログが出力されるようになる。
+
+     .. code-block:: text
+
+        date:2014-12-09 18:34:29	thread:RMI TCP Connection(2)-127.0.0.1	X-Track:	level:TRACE	logger:o.s.w.s.m.m.a.RequestMappingHandlerMapping      	message:Mapping name=HC#hello
+
+|
+
+.. _view_jsp_form-label:
+
+HTML formへフォームオブジェクトをバインドする
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+HTML formへフォームオブジェクトをバインドし、フォームオブジェクトで保持している値を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
+
+Spring Frameworkから提供されている ``<form:form>`` タグを使用してバインドする。
+
+ .. code-block:: jsp
+    :emphasize-lines: 2-3
+
+    <form:form action="${pageContext.request.contextPath}/sample/hello"
+               modelAttribute="sampleForm"> <%-- (1) --%>
+        Id : <form:input path="id" /> <%-- (2) --%>
+    </form:form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``<form:form>``\ タグのmodelAttribute属性に、\ ``Model``\ に格納されているフォームオブジェクトの属性名を指定する。
+   * - | (2)
+     - \ ``<form:xxx>``\ タグのpath属性に、バインドしたいプロパティのプロパティ名を指定する。  ``xxx`` の部分は、入力項目のタイプによってかわる。
+
+.. note::
+    \ ``<form:form>``\ 、\ ``<form:xxx>``\ タグの詳細は、 `Using Spring's form tag library <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib>`_\ を参照されたい。
+
+|
+
+.. _view_jsp_errors-label:
+
+入力チェックエラーを表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+入力チェックエラーの内容を表示する場合、Spring Frameworkから提供されているJSPタグライブラリを使用する。
+
+| Spring Frameworkから提供されている ``<form:errors>`` タグを使用して表示する。
+| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation` を参照されたい。
+
+ .. code-block:: jsp
+    :emphasize-lines: 3
+
+    <form:form action="${pageContext.request.contextPath}/sample/hello"
+               modelAttribute="sampleForm">
+        Id : <form:input path="id" /><form:errors path="id" /><%-- (1) --%>
+    </form:form>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``<form:errors>``\ タグのpath属性に、エラー表示したいプロパティのプロパティ名を指定する。
+
+|
+
+.. _view_jsp_resultmessages-label:
+
+処理結果のメッセージを表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+処理結果を通知するメッセージを表示する場合、共通部品から提供しているJSPタグライブラリを使用する。
+
+| 共通部品から提供している ``<t:messagesPanel>`` タグを使用する。
+| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement` を参照されたい。
+
+ .. code-block:: jsp
+    :emphasize-lines: 3
+
+    <div class="messages">
+        <h2>Message pattern</h2>
+        <t:messagesPanel /> <%-- (1) --%>
+    </div>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ``"resultMessages"`` という属性名で格納されているメッセージを出力する。
+
+|
+
+.. _view_jsp_codelist-label:
+
+コードリストを表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+共通部品から提供されているコードリストを表示する場合は、Spring Frameworkから提供されているJSPタグライブラリを使用する。
+
+| JSPからコードリストを参照する場合は、 ``java.util.Map`` インタフェースと同じ方法で参照することができる。
+| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist` を参照されたい。
+
+コードリストをセレクトボックスに表示する。
+
+ .. code-block:: jsp
+    :emphasize-lines: 3
+
+    <form:select path="orderStatus">
+        <form:option value="" label="--Select--" />
+        <form:options items="${CL_ORDERSTATUS}" /> <%-- (1) --%>
+    </form:select>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)が格納されている。
+       そのためJSPでは、EL式を使ってコードリスト( ``java.util.Map`` インタフェース)にアクセスすることができる。
+       取得した ``Map`` インタフェースを ``<form:options>`` のitems属性に渡すことで、コードリストをセレクトボックスに表示することができる。
+
+セレクトボックスで選択した値のコード名を表示する。
+
+ .. code-block:: jsp
+
+    Order Status : ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - セレクトボックス作成時と同様に、コードリスト名( ``"CL_ORDERSTATUS"`` ) を属性名として、コードリスト( ``java.util.Map`` インタフェース)を取得する。
+       取得した ``Map`` インタフェースのキー値として、セレクトボックスで選択した値を指定することで、コード名を表示することができる。
+
+|
+
+.. _view_jsp_message-label:
+
+固定文言を表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 画面名、項目名、ガイダンス用のメッセージなどについては、国際化の必要がない場合はJSPに直接記載してもよい。
+| ただし、国際化の必要がある場合はSpring Frameworkから提供されているJSPタグライブラリを使用して、プロパティファイルから取得した値を表示する。
+
+| Spring Frameworkから提供されている ``<spring:message>`` タグを使用して表示する。
+| 詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization` を参照されたい。
+
+- properties
+
+ .. code-block:: properties
+    :emphasize-lines: 1-2
+
+    # (1)
+    label.orderStatus=注文ステータス
+
+- jsp
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    <spring:message code="label.orderStatus" text="Order Status" /> : <%-- (2) --%>
+        ${f:h(CL_ORDERSTATUS[orderForm.orderStatus])}
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - プロパティファイルにラベルの値を定義する。
+   * - | (2)
+     - ``<spring:message>`` のcode属性にプロパティファイルのキー名を指定するとキー名に一致するプロパティ値が表示される。
+
+.. note::
+     text属性に指定した値は、プロパティ値が取得できなかった場合に表示される。
+
+|
+
+.. _view_jsp_if-label:
+
+条件によって表示を切り替える
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+モデルが保持する値によって表示を切り替えたい場合は、JSTLから提供されているJSPタグライブラリを使用する。
+
+JSTLのJSPタグライブラリから提供されている ``<c:if>`` タグ又は ``<c:choose>`` を使用して、表示の切り替えを行う。
+
+``<c:if>`` を使用して表示を切り替える。
+
+ .. code-block:: jsp
+    :emphasize-lines: 1
+
+    <c:if test="${orderForm.orderStatus != 'complete'}"> <%-- (1) --%>
+            <%-- ... --%>
+    </c:if>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ``<c:if>`` のtest属性に分岐に入る条件を実装する。例では注文ステータスが ``'complete'`` ではない場合に分岐内の表示処理が実行される。
+
+``<c:choose>`` を使用して表示を切り替える。
+
+ .. code-block:: jsp
+    :emphasize-lines: 2,8
+
+    <c:choose>
+        <c:when test="${customer.type == 'premium'}"> <%-- (1) --%>
+            <%-- ... --%>
+        </c:when>
+        <c:when test="${customer.type == 'general'}">
+            <%-- ... --%>
+        </c:when>
+        <c:otherwise> <%-- (2) --%>
+            <%-- ... --%>
+        </c:otherwise>
+    </c:choose>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ``<c:when>`` タグのtest属性に分岐に入る条件を実装する。例では顧客の種別が ``'premium'`` の場合に分岐内の表示処理が実行される。
+       test属性で指定した条件が ``false`` の場合は、次の ``<c:when>`` タグの処理が実行される。
+   * - | (2)
+     - 全ての ``<c:when>`` タグのtest属性の結果が ``false`` の場合、 ``<c:otherwise>`` タグ内の表示処理が実行される。
+
+.. note::
+    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 5 Conditional Actions" を参照されたい。
+
+|
+
+.. _view_jsp_forEach-label:
+
+コレクションの要素に対して表示処理を繰り返す
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+モデルが保持するコレクションに対して表示処理を繰り返したい場合は、JSTLから提供されているJSPタグライブラリを使用する。
+
+JSTLのJSPタグライブラリから提供されている ``<c:forEach>`` を使用して表示処理を繰り返す。
+
+
+ .. code-block:: jsp
+    :emphasize-lines: 6,8-9
+
+    <table>
+        <tr>
+            <th>No</th>
+            <th>Name</th>
+        </tr>
+        <c:forEach var="customer" items="${customers}" varStatus="status"> <%-- (1) --%>
+            <tr>
+                <td>${status.count}</td> <%-- (2) --%>
+                <td>${f:h(customer.name)}</td> <%-- (3) --%>
+            </tr>
+        </c:forEach>
+    </table>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - ``<c:forEach>`` タグのitems属性にコレクションを指定する事で、``<c:forEach>`` タグ内の表示処理が繰り返し実行される。
+       処理対象となっている要素のオブジェクトを参照する場合は、var属性にオブジェクトを格納するための変数名を指定する。
+   * - | (2)
+     - ``<c:forEach>`` タグのvarStatus属性で指定した変数から現在処理を行っている要素位置(count)を取得している。
+       count以外の属性については、 ``javax.servlet.jsp.jstl.core.LoopTagStatus`` の `JavaDoc <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ を参照されたい。
+   * - | (3)
+     - ``<c:forEach>`` タグのvar属性で指定した変数に格納されているオブジェクトから値を取得している。
+
+.. note::
+    詳細は、 `JavaServer Pages Standard Tag Library(Version 1.2) <http://download.oracle.com/otndocs/jcp/jstl-1.2-mrel2-eval-oth-JSpec/>`_\ の "CHAPTER 6 Iterator Actions" を参照されたい。
+
+|
+
+.. _view_jsp_pagination-label:
+
+ページネーション用のリンクを表示する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+一覧表示を行う画面にてページネーション用のリンクを表示する場合は、共通部品から提供しているJSPタグライブラリを使用する。
+
+共通部品から提供している ``<t:pagination>`` を使用してページネーション用のリンクを表示する。
+詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination` を参照されたい。
+
+
+|
+
+.. _view_jsp_authorization-label:
+
+権限によって表示を切り替える
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+ログインしているユーザの権限によって表示を切り替える場合は、Spring Securityから提供されているJSPタグライブラリを使用する。
+
+Spring Securityから提供されている ``<sec:authorize>`` を使用して表示の切り替えを行う。
+詳細は、 :doc:`../Security/Authorization` を参照されたい。
+
+
+|
+|
+
+JavaScriptの実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+画面描画後に画面項目の制御(表示/非表示、活性/非活性などの制御)を行う必要がある場合は、JavaScriptを使用して、項目の制御を行う。
+
+.. todo::
+
+    **TBD**
+
+    次版以降で詳細を記載する予定である。
+
+|
+
+スタイルシートの実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| 画面のデザインに関わる属性値の指定はJSP(HTML)に直接指定するのではなく、スタイルシート(cssファイル)に指定することを推奨する。
+| JSP(HTML)では、項目を一意に特定するためのid属性の指定と項目の分類を示すclass属性の指定を行い、実際の項目の配置や見た目にかかわる属性値の指定はスタイルシート(cssファイル)で指定する。
+| このような構成にすることで、JSPの実装からデザインに関わる処理を減らすことができる。
+| 同時にちょっとしたデザイン変更であれば、JSPを修正せずにスタイルシート(cssファイル)の修正のみで対応可能となる。
+
+.. note::
+    ``<form:xxx>`` タグを使ってフォームを生成した場合、id属性は自動で設定される。class属性については、アプリケーション開発者によって指定が必要。
+
+|
+
+共通処理の実装
+--------------------------------------------------------------------------------
+
+|
+
+.. _controller-common-process:
+
+Controllerの呼び出し前後で行う共通処理の実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+本項でいう共通処理とは、Controllerを呼び出し前後に行う必要がある共通的な処理のことを指す。
+
+|
+
+Servlet Filterの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| Spring MVCに依存しない共通処理については、Servlet Filterで実装する。
+| ただし、Controllerのハンドラメソッドにマッピングされるリクエストに対してのみ共通処理を行いたい場合は、Servlet FilterではなくHandlerInterceptorで実装すること。
+
+| 以下に、Servlet Filterのサンプルを示す。
+| サンプルコードでは、クライアントのIPアドレスをログ出力するために ``MDC`` に値を格納している。
+
+- java
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    public class ClientInfoPutFilter extends OncePerRequestFilter { // (1)
+
+        private static final String ATTRIBUTE_NAME = "X-Forwarded-For";
+        protected final void doFilterInternal(HttpServletRequest request,
+                HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
+            String remoteIp = request.getHeader(ATTRIBUTE_NAME);
+            if (remoteIp == null) {
+                remoteIp = request.getRemoteAddr();
+            }
+            MDC.put(ATTRIBUTE_NAME, remoteIp);
+            try {
+                filterChain.doFilter(request, response);
+            } finally {
+                MDC.remove(ATTRIBUTE_NAME);
+            }
+        }
+    }
+
+- web.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 1,5
+
+    <filter> <!-- (2) -->
+        <filter-name>clientInfoPutFilter</filter-name>
+        <filter-class>x.y.z.ClientInfoPutFilter</filter-class>
+    </filter>
+    <filter-mapping> <!-- (3) -->
+        <filter-name>clientInfoPutFilter</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.OncePerRequestFilter`` の子クラスとしてServlet Filterを作成することで、同一リクエスト内で1回だけ実行されることを保証している。
+   * - | (2)
+     - 作成したServlet Filterを ``web.xml`` に登録する。
+   * - | (3)
+     - 登録したServlet Filterを適用するURLのパターンを指定する。
+
+
+Servlet FilterをSpring FrameworkのBeanとして定義することもできる。
+
+- web.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 3
+
+    <filter>
+        <filter-name>clientInfoPutFilter</filter-name>
+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class> <!-- (1) -->
+    </filter>
+    <filter-mapping>
+        <filter-name>clientInfoPutFilter</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+- applicationContext.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 1
+
+    <bean id="clientInfoPutFilter" class="x.y.z.ClientInfoPutFilter" /> <!-- (2) -->
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.filter.DelegatingFilterProxy`` をServlet Filterのクラスに指定することで、(2)で定義したServlet Filterに処理が委譲される。
+   * - | (2)
+     - 作成したServlet FilterのクラスをBean定義ファイル( ``applicationContext.xml`` )に追加する。
+       その際に、id属性には ``web.xml`` で指定したフィルター名( ``<filter-name>`` タグで指定した値 )にすること。
+
+|
+
+HandlerInterceptorの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| Spring MVCに依存する共通処理については、 HandlerInterceptorで実装する。
+| HandlerInterceptorは、リクエストにマッピングされたハンドラメソッドが決定した後に呼び出されるので、アプリケーションが許可しているリクエストに対してのみ共通処理を行うことができる。
+
+HandlerInterceptorでは以下の３つのポイントで処理を実行することが出来る。
+
+- | Controllerのハンドラメソッドを実行する前
+  | ``HandlerInterceptor#preHandle`` メソッドとして実装する。
+- | Controllerのハンドラメソッドが正常終了した後
+  | ``HandlerInterceptor#postHandle`` メソッドとして実装する。
+- | Controllerのハンドラメソッドの処理が完了した後(正常/異常に関係なく実行される)
+  | ``HandlerInterceptor#afterCompletion`` メソッドとして実装する。
+
+| 以下に、HandlerInterceptorのサンプルを示す。
+| サンプルコードでは、Controllerの処理が正常終了した後にinfoレベルのログを出力している。
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    public class SuccessLoggingInterceptor extends HandlerInterceptorAdapter { // (1)
+
+        private static final Logger logger = LoggerFactory
+                .getLogger(SuccessLoggingInterceptor.class);
+
+        @Override
+        public void postHandle(HttpServletRequest request,
+                HttpServletResponse response, Object handler,
+                ModelAndView modelAndView) throws Exception {
+            HandlerMethod handlerMethod = (HandlerMethod) handler;
+            Method m = handlerMethod.getMethod();
+            logger.info("[SUCCESS CONTROLLER] {}.{}", new Object[] {
+                    m.getDeclaringClass().getSimpleName(), m.getName()});
+        }
+
+    }
+
+- spring-mvc.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 4-5,7
+
+    <mvc:interceptors>
+        <!-- ... -->
+        <mvc:interceptor>
+            <mvc:mapping path="/**" /> <!-- (2) -->
+            <mvc:exclude-mapping path="/resources/**" /> <!-- (3) -->
+            <mvc:exclude-mapping path="/**/*.html" />
+            <bean class="x.y.z.SuccessLoggingInterceptor" /> <!-- (4) -->
+        </mvc:interceptor>
+        <!-- ... -->
+    </mvc:interceptors>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - サンプルではSpring Frameworkから提供されている ``org.springframework.web.servlet.handler.HandlerInterceptorAdapter`` の子クラスとしてHandlerInterceptorを作成している。
+       ``HandlerInterceptorAdapter`` は ``HandlerInterceptor`` インタフェースの空実装を提供しているため、子クラスで不要なメソッドの実装をしないで済む。
+   * - | (2)
+     - 作成したHandlerInterceptorを適用するパスのパターンを指定する。
+   * - | (3)
+     - 作成したHandlerInterceptorを適用しないパスのパターンを指定する。
+   * - | (4)
+     - 作成したHandlerInterceptorを ``spring-mvc.xml`` の ``<mvc:interceptors>`` タグ内に追加する。
+
+|
+
+Controllerの共通処理の実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ここでいう共通処理とは、すべてのControllerで共通的に実装する必要がある処理のことを指す。
+
+.. _methodargumentresolver:
+
+HandlerMethodArgumentResolverの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Spring FrameworkのデフォルトでサポートされていないオブジェクトをControllerの引数として渡したい場合は、
+HandlerMethodArgumentResolverを実装してControllerの引数として受け取れるようにする。
+
+| 以下に、HandlerMethodArgumentResolverのサンプルを示す。
+| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換してControllerのメソッドで受け取れるようにしている。
+
+
+- JavaBean
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    public class CommonParameters implements Serializable { // (1)
+
+        private String param1;
+        private String param2;
+        private String param3;
+
+        // ....
+
+    }
+
+
+- HandlerMethodArgumentResolver
+
+ .. code-block:: java
+    :emphasize-lines: 2,6,13
+
+    public class CommonParametersMethodArgumentResolver implements
+                                                       HandlerMethodArgumentResolver { // (2)
+
+        @Override
+        public boolean supportsParameter(MethodParameter parameter) {
+            return CommonParameters.class.equals(parameter.getParameterType()); // (3)
+        }
+
+        @Override
+        public Object resolveArgument(MethodParameter parameter,
+                ModelAndViewContainer mavContainer, NativeWebRequest webRequest,
+                WebDataBinderFactory binderFactory) throws Exception {
+            CommonParameters params = new CommonParameters(); // (4)
+            params.setParam1(webRequest.getParameter("param1"));
+            params.setParam2(webRequest.getParameter("param2"));
+            params.setParam3(webRequest.getParameter("param3"));
+            return params;
+        }
+
+
+- Controller
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    @RequestMapping(value = "home")
+    public String home(CommonParameters commonParams) { // (5)
+        logger.debug("param1 : {}",commonParams.getParam1());
+        logger.debug("param2 : {}",commonParams.getParam2());
+        logger.debug("param3 : {}",commonParams.getParam3());
+        // ...
+        return "sample/home";
+
+    }
+
+- spring-mvc.xml
+
+ .. code-block:: xml
+    :emphasize-lines: 4
+
+    <mvc:annotation-driven>
+        <mvc:argument-resolvers>
+            <!-- ... -->
+            <bean class="x.y.z.CommonParametersMethodArgumentResolver" /> <!-- (6) -->
+            <!-- ... -->
+        </mvc:argument-resolvers>
+    </mvc:annotation-driven>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - 共通パラメータを保持するJavaBean。
+   * - | (2)
+     - ``org.springframework.web.method.support.HandlerMethodArgumentResolver`` インタフェースを実装する。
+   * - | (3)
+     - 処理対象とする型を判定する。例では、共通パラメータを保持するJavaBeanの型がControllerの引数として指定されていた場合に、このクラスのresolveArgumentメソッドが呼び出される。
+   * - | (4)
+     - リクエストパラメータから値を取得し、共通パラメータを保持するJavaBeanに設定し返却する。
+   * - | (5)
+     - | Controllerのハンドラメソッドの引数に共通パラメータを保持するJavaBeanを指定する。
+       | (4)で返却されるオブジェクトが渡される。
+   * - | (6)
+     - 作成したHandlerMethodArgumentResolverを ``spring-mvc.xml`` の ``<mvc:argument-resolvers>`` タグ内に追加する。
+
+.. note::
+    全てのControllerのハンドラメソッドで共通的に渡すパラメータがある場合は、HandlerMethodArgumentResolverを使ってJavaBeanに変換してから渡す方法が有効的である。
+    ここでいうパラメータとは、リクエストパラメータに限らない。
+
+|
+
+.. _application_layer_controller_advice:
+
+\ ``@ControllerAdvice``\ の実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ ``@ControllerAdvice``\ アノテーションを付与したクラスでは、
+複数のControllerで実行したい共通的な処理を実装する。
+
+\ ``@ControllerAdvice``\ アノテーションを付与したクラスを作成すると、
+
+- ``@InitBinder`` を付与したメソッド
+- ``@ExceptionHandler`` を付与したメソッド
+- ``@ModelAttribute`` を付与したメソッド
+
+で実装した処理を、複数のControllerに適用する事ができる。
+
+.. tip::
+
+    \ ``@ControllerAdvice``\ アノテーションは、Spring Framework 3.2 から追加された仕組みだが、
+    全てのControllerに処理が適用される仕組みになっていたため、アプリケーション全体の共通処理しか実装できなかった。
+
+    Spring Framework 4.0 からは、共通処理を適用するControllerを柔軟に指定する事ができるように改善されている。
+    この改善により、様々な粒度で共通処理を実装する事ができるようになった。
+
+|
+
+.. _application_layer_controller_advice_attribute:
+
+以下に、共通処理を適用するControllerを指定する方法(属性の指定方法)について説明する。
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 15 75
+
+   * - 項番
+     - 属性
+     - 説明と指定例
+   * - | (1)
+     - ``annotations``
+     - アノテーションを指定する。
+
+       指定したアノテーションが付与されたControllerに対して共通処理が適用される。
+       以下に指定例を示す。
+
+       .. code-block:: java
+
+           @ControllerAdvice(annotations = LoginFormModelAttributeSetter.LoginFormModelAttribute.class)
+           public class LoginFormModelAttributeSetter {
+               @Target(ElementType.TYPE)
+               @Retention(RetentionPolicy.RUNTIME)
+               public static @interface LoginFormModelAttribute {}
+               // ...
+           }
+
+       .. code-block:: java
+
+           @LoginFormModelAttribute
+           @Controller
+           public class WelcomeController {
+               // ...
+           }
+
+       .. code-block:: java
+
+           @LoginFormModelAttribute
+           @Controller
+           public class LoginController {
+               // ...
+           }
+
+       上記例では、\ ``WelcomeController``\ と\ ``LoginController``\ に\ ``@LoginFormModelAttribute``\ アノテーションを付与しているため、
+       \ ``WelcomeController``\ と\ ``LoginController``\ に共通処理が適用される。
+   * - | (2)
+     - ``assignableTypes``
+     - クラス又はインタフェースを指定する。
+
+       指定したクラス又はインタフェースに割り当て可能(キャスト可能)なControllerに対して共通処理が適用される。
+       本属性を使用する場合は、共通処理を適用するControllerであることを示すためのマーカーインタフェースを属性値に指定するスタイルを採用することを推奨する。
+       このスタイルを採用した場合、Controller側では、適用したい共通処理用のマーカーインタフェースを実装するだけでよい。
+       以下の指定例を示す。
+
+       .. code-block:: java
+
+           @ControllerAdvice(assignableTypes = ISODateInitBinder.ISODateApplicable.class)
+           public class ISODateInitBinder {
+               public static interface ISODateApplicable {}
+               // ...
+           }
+
+       .. code-block:: java
+
+           @Controller
+           public class SampleController implements ISODateApplicable {
+               // ...
+           }
+
+       上記例では、\ ``SampleController``\ が\ ``@ISODateApplicable``\ インタフェース(マーカーインタフェース)を実装しているため、
+       \ ``SampleController``\ に共通処理が適用される。
+   * - | (3)
+     - ``basePackageClasses``
+     - クラス又はインタフェースを指定する。
+
+       指定したクラス又はインタフェースのパッケージ配下のControllerに対して共通処理が適用される。
+
+       本属性を使用する場合は、
+
+       * \ ``@ControllerAdvice``\ を付与したクラス
+       * パッケージを識別するためのマーカーインタフェース
+
+       を属性値に指定するスタイルを採用することを推奨する。
+       以下に指定例を示す。
+
+       .. code-block:: java
+
+           package com.example.app
+
+           @ControllerAdvice(basePackageClasses = AppGlobalExceptionHandler.class)
+           public class AppGlobalExceptionHandler {
+               // ...
+           }
+
+       .. code-block:: java
+
+           package com.example.app.sample
+
+           @Controller
+           public class SampleController {
+               // ...
+           }
+
+       上記例では、\ ``SampleController``\ が\ ``@ControllerAdvice``\ を付与したクラス(\ ``AppGlobalExceptionHandler``\)が格納されているパッケージ(\ ``com.example.app``\ )配下に格納されているため、
+       \ ``SampleController``\ に共通処理が適用される。
+
+       .. code-block:: java
+
+           package com.example.app.common
+
+           @ControllerAdvice(basePackageClasses = AppPackage.class)
+           public class AppGlobalExceptionHandler {
+               // ...
+           }
+
+       .. code-block:: java
+
+           package com.example.app
+
+           public interface AppPackage {
+           }
+
+       \ ``@ControllerAdvice``\ が付与されているクラスとControllerが格納されているクラスのパッケージ階層が異なる場合や、複数のベースパッケージに共通処理を適用したい場合は、
+       パッケージを識別するためのマーカインタフェースを用意すればよい。
+   * - | (4)
+     - ``basePackages``
+     - パッケージ名を指定する。
+
+       指定したパッケージ配下のControllerに対して共通処理が適用される。
+       以下に指定例を示す。
+
+       .. code-block:: java
+
+           @ControllerAdvice(basePackages = "com.example.app")
+           public class AppGlobalExceptionHandler {
+               // ...
+           }
+   * - | (5)
+     - ``value``
+     - \ ``basePackages``\ へのエイリアス。
+
+       \ ``basePackages``\ 属性を指定した際と同じ動作となる。
+       以下に指定例を示す。
+
+       .. code-block:: java
+
+           @ControllerAdvice("com.example.app")
+           public class AppGlobalExceptionHandler {
+               // ...
+           }
+
+.. tip::
+
+    \ ``basePackageClasses``\ 属性 / \ ``basePackages``\ 属性 / \ ``value``\ 属性は、
+    共通処理を適用したいControllerが格納されているベースパッケージを指定するための属性であるが、
+    \ ``basePackageClasses``\ 属性を使用した場合、
+
+    * 存在しないパッケージを指定してしまう事を防ぐことが出来る
+    * IDE上で行ったパッケージ名変更と連動することが出来る
+
+    ため、タイプセーフな指定方法と言える。
+
+|
+
+| 以下に、\ ``@InitBinder``\ メソッドの実装サンプルを示す。
+| サンプルコードでは、 リクエストパラメータで指定できる日付型で形式を ``"yyyy/MM/dd"`` に設定している。
+
+ .. code-block:: java
+    :emphasize-lines: 1,2,5-6
+
+    @ControllerAdvice // (1)
+    @Order(0) // (2)
+    public class SampleControllerAdvice {
+
+        // (3)
+        @InitBinder
+        public void initBinder(WebDataBinder binder) {
+            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
+            dateFormat.setLenient(false);
+            binder.registerCustomEditor(Date.class,
+                    new CustomDateEditor(dateFormat, true));
+        }
+
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``@ControllerAdvice``\ アノテーションを付与することで、ControllerAdviceのBeanであることを示している。
+   * - | (2)
+     - \ ``@Order``\ アノテーションを付与することで、共通処理が適用される優先度を指定する。複数のControllerAdviceに依存関係があるなど、ControllerAdviceに順序性を持たせたい場合は必ず指定すること。順序性を持たせる必要がなければ指定しなくてもよい。
+   * - | (3)
+     - \ ``@InitBinder``\ メソッドを実装する。全てのControllerに対して\ ``@InitBinder``\ メソッドが適用される。
+
+|
+
+| 以下に、\ ``@ExceptionHandler``\ メソッドの実装サンプルを示す。
+| サンプルコードでは、  ``org.springframework.dao.PessimisticLockingFailureException`` をハンドリングしてロックエラー画面のViewを返却している。
+
+ .. code-block:: java
+    :emphasize-lines: 1-2
+
+    // (1)
+    @ExceptionHandler(PessimisticLockingFailureException.class)
+    public String handlePessimisticLockingFailureException(
+            PessimisticLockingFailureException e) {
+        return "error/lockError";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``@ExceptionHandler``\ メソッドを実装する。全てのControllerに対して\ ``@ExceptionHandler``\ メソッドが適用される。
+
+|
+
+| 以下に、\ ``@ModelAttribute``\ メソッドの実装サンプルを示す。
+| サンプルコードでは、 共通的なリクエストパラメータをJavaBeanに変換して ``Model`` に格納している。
+
+- ControllerAdvice
+
+ .. code-block:: java
+    :emphasize-lines: 1-2
+
+    // (1)
+    @ModelAttribute
+    public CommonParameters setUpCommonParameters(
+            @RequestParam(value = "param1", defaultValue="def1") String param1,
+            @RequestParam(value = "param2", defaultValue="def2") String param2,
+            @RequestParam(value = "param3", defaultValue="def3") String param3) {
+        CommonParameters params = new CommonParameters();
+        params.setParam1(param1);
+        params.setParam2(param2);
+        params.setParam3(param3);
+        return params;
+    }
+
+- Controller
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    @RequestMapping(value = "home")
+    public String home(@ModelAttribute CommonParameters commonParams) { // (2)
+        logger.debug("param1 : {}",commonParams.getParam1());
+        logger.debug("param2 : {}",commonParams.getParam2());
+        logger.debug("param3 : {}",commonParams.getParam3());
+        // ...
+        return "sample/home";
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``@ModelAttribute``\ メソッドを実装する。全てのControllerに対して\ ``@ModelAttribute``\ メソッドが適用される。
+   * - | (2)
+     - \ ``@ModelAttribute``\ メソッドで生成されたオブジェクトが渡る。
+
+
+|
+
+二重送信防止について
+--------------------------------------------------------------------------------
+送信ボタンの複数回押下や完了画面の再読み込み(F5ボタンによる再読み込み)などで、 同じ処理が複数回実行されてしまう可能性があるため、二重送信を防止するための対策は必ず行うこと。
+
+対策を行わない場合に発生する問題点や対策方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection` を参照されたい。
+
+|
+
+セッションの使用について
+--------------------------------------------------------------------------------
+| Spring MVCのデフォルトの動作では、モデル（フォームオブジェクトやドメインオブジェクトなど）はセッションには格納されない。
+| セッションに格納したい場合は、\ ``@SessionAttributes``\ アノテーションをControllerクラスに付与する必要がある。
+| 入力フォームが複数の画面にわかれている場合は、 一連の画面遷移を行うリクエストでモデル（フォームオブジェクトやドメインオブジェクトなど）を共有できるため、 \ ``@SessionAttributes``\ アノテーションの利用を検討すること。
+| ただし、セッションを使用する際の注意点があるので、そちらを確認した上で\ ``@SessionAttributes``\ アノテーションの利用有無を判断すること。
+
+セッションの利用指針及びセッション使用時の実装方法の詳細は、 :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement` を参照されたい。
+
+.. raw:: latex
+
+   \newpage
diff --git a/source/ImplementationAtEachLayer/DomainLayer.rst b/source/ImplementationAtEachLayer/DomainLayer.rst
index 8743fd9c33..2656c3052e 100755
--- a/source/ImplementationAtEachLayer/DomainLayer.rst
+++ b/source/ImplementationAtEachLayer/DomainLayer.rst
@@ -1,2120 +1,2120 @@
-ドメイン層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-    :depth: 3
-
-ドメイン層の役割
---------------------------------------------------------------------------------
-ドメイン層は、 アプリケーション層に提供する\ **業務ロジックを実装する**\ ためのレイヤとなる。
-
-ドメイン層の実装は、以下3つに分かれる。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - 分類
-     - 説明
-   * - | 1.
-     - | :ref:`domainlayer_entity`
-     - | 業務データを保持するためのクラス(Entityクラス)を作成する。
-   * - | 2.
-     - | :ref:`repository-label`
-     - | 業務データを操作するためのメソッドを実装し、Serviceクラスに提供する。
-       | 業務データを操作するためのメソッドとは、具体的には、Entityオブジェクトに対するCRUD操作となる。
-   * - | 3.
-     - | :ref:`service-label`
-     - | 業務ロジックを実行するためのメソッドを実装し、アプリケーション層に提供する。
-       | 業務ロジック内で必要となる業務データは、Repositoryを介して、Entityオブジェクトとして取得する。
-
-本ガイドラインでは、以下2点を目的として、EntityクラスおよびRepositoryを作成する構成を推奨している。
-
-#. 業務ロジック(Service)と業務データへアクセスするためのロジックを分離することで、\ **業務ロジックの実装範囲をビジネスルールに関する実装に専念させる。**\
-#. 業務データに対する操作をRepositoryに集約することで、\ **業務データへのアクセスの共通化を行う。**\
-
- .. note::
-
-    本ガイドラインでは、EntityクラスおよびRepositoryを作成する構成を推奨しているが、この構成で開発することを強制するものではない。
-
-    作成するアプリケーションの特性、プロジェクトの特性(開発体制や開発プロセスなど)を加味して、採用する構成を決めて頂きたい。
-
-
-ドメイン層の開発の流れ
---------------------------------------------------------------------------------
-| ドメイン層の開発の流れと、役割分担について説明する。
-| 下記の説明では、複数の開発チームが存在する状態でアプリケーションを構築するケースを想定しているが、 １チームで開発する場合でも、開発フロー自体は変わらない。
-
- .. figure:: images/service_implementation_flow.png
-    :alt: implementation flow of domain layer
-    :width: 100%
-    :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 20 80
-
-   * - 項番
-     - 担当チーム
-     - 説明
-   * - | (1)
-     - | 共通開発チーム
-     - | 共通開発チームは、Entityクラスの設計およびEntityクラスの作成を行う。
-   * - | (2)
-     - | 共通開発チーム
-     - | 共通開発チームは、(1)で抽出したEntityクラスに対するアクセスパターンを整理し、Repositoryインタフェースのメソッド設計を行う。
-       | 複数の開発チームで共有するメソッドに対する実装については、共通開発チームで実装することが望ましい。
-   * - | (3)
-     - | 共通開発チーム
-     - | 共通開発チームは、(1)と(2)で作成したEntityクラスと、Repositoryを業務アプリケーション開発チームに提供する。
-       | このタイミングで、各業務アプリケーション開発チームに対して、Repositoryインタフェースの実装を依頼する。
-   * - | (4)
-     - | 業務アプリケーション開発チーム
-     - | 業務アプリケーション開発チームは、自チーム担当分のRepositoryインタフェースの実装を行う。
-   * - | (5)
-     - | 業務アプリケーション開発チーム
-     - | 業務アプリケーション開発チームは、共通開発チームから提供されたEntityクラスおよびRepositoryと自チームで作成したRepositoryを利用して、ServiceインタフェースおよびServiceクラスの実装を行う。
-
- .. warning::
-
-    開発規模が大きいシステムでは、アプリケーションを複数のチームに分担して開発を行う場合がある。
-    その場合は、EntityクラスおよびRepositoryを設計するための共通チームを設けることを強く推奨する。
-
-    共通チームを設ける体制が組めない場合は、EntityクラスおよびRepositoryの作成せずに、
-    ServiceからO/R Mapper(MyBatisなど)を直接呼び出して、業務データにアクセスする方法を採用することを検討すること。
-
-
-.. _domainlayer_entity:
-
-Entityの実装
---------------------------------------------------------------------------------
-
-Entityクラスの作成方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| Entityは原則以下の方針で作成する。
-| 具体的な作成方法については、\ :ref:`domainlayer_entity_example`\ で示す。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 35 55
-
-   * - 項番
-     - 方針
-     - 補足
-   * - | 1.
-     - | Entityクラスは、テーブル毎に作成する。
-     - | ただし、テーブル間の関連を保持するためのマッピングテーブルについては、Entityクラスは不要である。
-       | また、テーブルが正規化されていない場合は、必ずしもテーブル毎にはならない。テーブルが正規化されていない時のアプローチは、\ :ref:`表外の警告欄と備考欄 <domainlayer_entity_policy_warning_note>`\ を参照されたい。
-   * - | 2.
-     - | テーブルにFK(Foreign Key)がある場合は、FK先のテーブルのEntityクラスをプロパティとして定義する。
-     - | FK先のテーブルとの関係が、1:Nになる場合は、\ ``java.util.List<E>``\ または\ ``java.util.Set<E>``\ のどちらかを使用する。
-       | FK先のテーブルに対応するEntityのことを、本ガイドライン上では、関連Entityと呼ぶ。
-   * - | 3.
-     - | コード系テーブルは、Entityとして扱うのではなく、\ ``java.lang.String``\ などの基本型で扱う。
-     - | コード系テーブルとは、コード値と、コード名のペアを管理するためのテーブルのことである。
-       | コード値によって処理分岐する必要がある場合は、コード値に対応するenumクラスを作成し、作成したenumをプロパティとして定義することを推奨する。
-
-.. _domainlayer_entity_policy_warning_note:
-
- .. warning::
-
-    テーブルが正規化されていない場合は、 以下の点を考慮して **EntityクラスおよびRepositoryを作成する方式を採用すべきか検討した方がよい。**
-    特に正規化されていないテーブルとJPAとの相性はあまりよくないので、テーブルが正規化されていない場合は、JPAを使用してEntityオブジェクトを操作する方式は採用しない方が無難である。
-
-    * | Entityを作成する難易度が高くなるため、適切なEntityクラスの作成が出来ない可能性がある。
-      | 加えて、Entityクラスを作成するために、必要な工数が多くなる可能性も高い。
-      | 前者は、「適切に正規化できるエンジニアをアサインできるか？」という観点、後者は、「工数をかけて正規化されたEntityクラスを作成する価値があるか？」という観点で、検討することになる。
-    * | 業務データにアクセスする際の処理として、Entityクラスとテーブルの構成の差分を埋めるための処理が、必要となる。
-      | これは、「工数をかけて、Entityとテーブルの差分を埋めるための処理を実装する価値があるか？」という観点で検討することになる。
-
-    EntityクラスとRepositoryを作成する方式を採用することを推奨するが、作成するアプリケーションの特性、
-    プロジェクトの特性(開発体制や開発プロセスなど)を加味して、採用する構成を決めて頂きたい。
-
-.. _domainlayer_entity_policy_note:
-
- .. note::
-
-    テーブルは正規化されていないが、アプリケーションとして、正規化されたEntityとして業務データを扱いたい場合は、
-    インフラストラクチャ層のRepositoryImplの実装として、MyBatisを採用することを推奨する。
-
-    MyBatisは、データベースで管理されているレコードとオブジェクトをマッピングするという考え方ではなく、
-    SQLとオブジェクトをマッピングという考え方で開発されたO/R Mapperであるため、
-    SQLの実装次第で、テーブル構成に依存しないオブジェクトへのマッピングができる。
-
-
-.. _domainlayer_entity_example:
-
-Entityクラスの作成例
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| Entityクラスの作成方法を、具体例を用いて説明する。
-| 以下は、ショッピングサイトで商品を購入する際に必要となる業務データを、Entityクラスとして作成する例となっている。
-
-テーブル構成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-商品を購入する際に必要となる業務データを保持するテーブルは、以下の構成となっている。
-
- .. figure:: images/service_entity_table_layout.png
-    :alt: Example of table layout
-    :width: 100%
-    :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.55\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 15 55
-
-    * - 項番
-      - 分類
-      - テーブル名
-      - 説明
-    * - | (1)
-      - | トランザクション系
-      - | t_order
-      - | 注文を保持するテーブル。１つの注文に対して1レコードが格納される。
-    * - | (2)
-      - |
-      - | t_order_item
-      - | １つの注文で購入された商品を保持するテーブル。１つの注文で複数の商品が購入された場合は商品数分レコードが格納される。
-    * - | (3)
-      - |
-      - | t_order_coupon
-      - | １つの注文で使用されたクーポンを保持するテーブル。１つの注文で複数のクーポンが使用された場合はクーポン数分レコードが格納される。クーポンを使用しなかった場合はレコードは格納されない。
-    * - | (4)
-      - | マスタ系
-      - | m_item
-      - | 商品を定義するマスタテーブル。
-    * - | (5)
-      - |
-      - | m_category
-      - | 商品のカテゴリを定義するマスタテーブル。
-    * - | (6)
-      - |
-      - | m_item_category
-      - | 商品が所属するカテゴリを定義するマスタテーブル。商品とカテゴリのマッピングを保持している。1つの商品は複数のカテゴリに属すことができるモデルとなっている。
-    * - | (7)
-      - |
-      - | m_coupon
-      - | クーポンを定義するマスタテーブル。
-    * - | (8)
-      - | コード系
-      - | c_order_status
-      - | 注文ステータスを定義するコードテーブル。
-
-
-Entity構成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-上記テーブルから作成方針に則ってEntityクラスを作成すると、以下のような構成となる。
-
- .. figure:: images/service_entity_entity_layout.png
-    :alt: Example of entity layout
-    :width: 100%
-    :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.65\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 15 65
-
-    * - 項番
-      - クラス名
-      - 説明
-    * - | (1)
-      - | Order
-      - | t_orderテーブルの1レコードを表現するEntityクラス。
-        | 関連Entityとして、\ ``OrderItem``\ および\ ``OrderCoupon``\ を複数保持する。
-    * - | (2)
-      - | OrderItem
-      - | t_order_itemテーブルの1レコードを表現するEntityクラス。
-        | 関連Entityとして、 ``Item`` を保持する。
-    * - | (3)
-      - | OrderCoupon
-      - | t_order_couponテーブルの1コードを表現するEntityクラス。
-        | 関連Entityとして、\ ``Coupon``\ を保持する。
-    * - | (4)
-      - | Item
-      - | m_itemテーブルの1コードを表現するEntityクラス。
-        | 関連Entityとして、所属している\ ``Category``\ を複数保持する。\ ``Item``\ と\ ``Category``\ の紐づけは、m_item_categoryテーブルによって行われる。
-    * - | (5)
-      - | Category
-      - | m_categoryテーブルの1レコードを表現するEntityクラス。
-    * - | (6)
-      - | ItemCategory
-      - | m_item_categoryテーブルは、m_itemテーブルとm_categoryテーブルとの関連を保持するためのマッピングテーブルなので、Entityクラスは作成しない。
-    * - | (7)
-      - | Coupon
-      - | m_couponテーブルの1レコードを表現するEntityクラス。
-    * - | (8)
-      - | OrderStatus
-      - | c_order_statusテーブルはコード系テーブルなので、Entityクラスは作成しない。
-
-
-上記のエンティティ図をみると、ショッピングサイトのアプリケーションとして主体のEntityクラスとして扱われるのは、
-Orderクラスのみと思ってしまうかもしれないが、主体となる得るEntityクラスはOrderクラス以外にも存在する。
-
-以下に、主体のEntityとしてなり得るEntityと、主体のEntityにならないEntityを分類する。
-
- .. figure:: images/service_entity_entity_class_layout.png
-    :alt: Example of entity layout
-    :width: 100%
-    :align: center
-
-|
-
-ショッピングサイトのアプリケーションを作成する上で、主体のEntityとしてなり得るのは、以下4つである。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - Entityクラス
-     - 主体のEntityとなる得る理由
-   * - | (1)
-     - | Orderクラス
-     - | ショッピングサイトにおいて、最も重要な主体となるEntityクラスのひとつである。
-       | Orderクラスは、注文そのものを表現するEntityであり、Orderクラスなくしてショッピングサイトを作成することはできない。
-   * - | (2)
-     - | Itemクラス
-     - | ショッピングサイトにおいて、最も重要な主体となるEntityクラスのひとつである。
-       | Itemクラスは、ショッピングサイトで扱っている商品そのものを表現するEntityであり、Itemクラスなくしてショッピングサイトを作成することはできない。
-   * - | (3)
-     - | Categoryクラス
-     - | 一般的なショッピングサイトでは、トップページや共通的メニューとして、サイトで扱っている商品のカテゴリを表示している。
-       | このようなショッピングサイトのアプリケーションでは、Categoryクラスを主体のEntityとして扱うことになる。カテゴリの一覧検索などの処理が想定される。
-   * - | (4)
-     - | Couponクラス
-     - | ショッピングサイトにおいて、商品の販売促進を行う手段としてクーポンによる値引きを行うことがある。
-       | このようなショッピングサイトのアプリケーションでは、Couponクラスを主体のEntityとして扱うことなる。クーポンの一覧検索などの処理が想定される。
-
-
-ショッピングサイトのアプリケーションを作成する上で、主体のEntityとならないのは、以下2つである。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 30 60
-
-   * - 項番
-     - Entityクラス
-     - 主体のEntityにならない理由
-   * - | (5)
-     - | OrderItemクラス
-     - | このクラスは、1つの注文で購入された商品1つを表現するクラスであり、Orderクラスの関連Entityとしてのみ存在するクラスとなる。
-       | そのため、OrderItemクラスが、主体のEntityとして扱われることは原則ない。
-   * - | (6)
-     - | OrderCoupon
-     - | このクラスは、1つの注文で使用されたクーポン1つを表現するクラスであり、Orderクラスの関連Entityとしてのみ存在するクラスとなる。
-       | そのため、OrderCouponクラスが主体のEntityとして扱われることは原則ない。
-
-
-.. _repository-label:
-
-Repositoryの実装
---------------------------------------------------------------------------------
-
-Repositoryの役割
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Repositoryは、以下2つの役割を担う。
-
-1. | **Serviceに対して、Entityのライフサイクルを制御するための操作（Repositoryインタフェース）を提供する。**
-   | Entityのライフサイクルを制御するための操作は、EntityオブジェクトへのCRUD操作となる。
-
- .. figure:: images/repository_responsibility_1.png
-    :alt: provide access operations to entity
-    :width: 100%
-    :align: center
-
-
-2. | **Entityを永続化する処理(Repositoryインタフェースの実装クラス)を提供する。**
-   | Entityオブジェクトは、アプリケーションのライフサイクル(サーバの起動や、停止など)に依存しないレイヤに、永続化しておく必要がある。
-   | Entityの永続先は、リレーショナルデータベースになることが多いが、NoSQLデータベース、キャッシュサーバ、外部システム、ファイル（共有ディスク）などになることもある。
-   | 実際の永続化処理は、O/R Mapperなどから提供されているAPIを使って行う。
-   | この役割は、インフラストラクチャ層のRepositoryImplで実装することになる。詳細については、\ :doc:`InfrastructureLayer`\ を参照されたい。
-
- .. figure:: images/repository_responsibility_2.png
-    :alt: persist entity
-    :width: 100%
-    :align: center
-
-
-Repositoryの構成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Repositoryは、RepositoryインタフェースとRepositoryImplで構成され、それぞれ以下の役割を担う。
-
- .. figure:: images/repository_classes_responsibility.png
-   :alt: persist entity
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.30\linewidth}|p{0.40\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 20 30 40
-
-   * - 項番
-     - クラス(インタフェース)
-     - 役割
-     - 説明
-
-   * - | (1)
-     - | Repositoryインタフェース
-     - | 業務ロジック(Service)を実装する上で必要となるEntityのライフサイクルを制御するメソッドを定義する。
-     - | 永続先に依存しないEntityの、CRUD操作用のメソッドを定義する。
-       | Repositoryインタフェースは、業務ロジック(Service)を実装する上で必要となるEntityの操作を定義する役割を担うので、ドメイン層に属することになる。
-
-   * - | (2)
-     - | RepositoryImpl
-     - | Repositoryインタフェースで定義されたメソッドの実装を行う。
-     - | 永続先に依存したEntityのCRUD操作の実装を行う。実際のCRUD処理は、Spring Framework、O/R Mapper、ミドルウェアなどから提供されている永続処理用のAPIを利用して行う。
-       | RepositoryImplは、Repositoryインタフェースで定義された操作の実装を行う役割を担うので、インフラストラクチャ層に属することになる。
-       | RepositoryImplの実装については、\ :doc:`InfrastructureLayer`\ を参照されたい。
-
-
-| 永続先が複数になる場合、以下のような構成となる。
-| 以下のような構成を取ることで、Entityの永続先に依存したロジックを、業務ロジック(Service)から排除することができる。
-
- .. figure:: images/repository_not_depends_on.png
-   :alt: persist entity
-   :width: 100%
-   :align: center
-
- .. note:: **永続先に依存したロジックを、Serviceから100％排除できるのか？**
-
-    永続先の制約や、使用するライブラリの制約などにより、排除できないケースもある。
-    可能な限り、永続先に依存するロジックは、Serviceではなく、RepositoryImplで実装することを推奨するが、
-    永続先に依存するロジックを排除するのが難しい場合や、排除することで得られるメリットが少ない場合は、
-    無理に排除せず、業務ロジック(Service)の処理として、永続先に依存するロジックを実装してもよい。
-
-    排除できない具体例として、Spring Data JPAから提供されている\ ``org.springframework.data.jpa.repository.JpaRepository``\ インタフェース
-    のsaveメソッドの呼び出し時に、一意制約エラーをハンドリングしたい場合である。
-    JPAではEntityへの操作はキャッシュされ、トランザクションコミット時にSQLを発行する仕組みになっている。
-    そのため、JpaRepositoryのsaveメソッドを呼び出しても、SQLは発行されないので、一意制約違反をロジックでハンドリングすることができない。
-    JPAでは、明示的にSQLを発行する手段として、キャッシュされている操作を反映するためのメソッド（flushメソッド）があり、
-    JpaRepositoryではsaveAndFlush、flushというメソッドが同じ目的で提供されている。
-    そのため、Spring Data JPAのJpaRepositoryを使って、一意制約違反エラーをハンドリングする必要がある場合は、
-    JPA依存のメソッド（saveAndFlushや、flush）を呼び出す必要がある。
-
- .. warning::
-
-    Repositoryを設ける最も重要な目的は、永続先に依存するロジックを、業務ロジックから排除することではないという点である。
-    最も重要な目的は、業務データへアクセスするための操作をRepositoryへ分離することで、業務ロジック(Service)の実装範囲をビジネスルールに関する実装に専念させるという点である。
-    結果として、永続先に依存するロジックは業務ロジック(Service)ではなく、Repository側に実装される事になる。
-
-
-Repositoryの作成方針
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Repositoryは原則以下の方針で作成する。
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 35 55
-
-   * - 項番
-     - 方針
-     - 補足
-   * - | 1.
-     - | Repositoryは、主体となるEntityに対して作成する。
-     - | これは、関連Entityを操作するためだけのRepositoryが不要であることを意味する。
-       | ただし、アプリケーションの特性(高い性能要件があるアプリケーションなど)では、関連Entityを操作するためのRepositoryを設けた方が、よい場合もある。
-   * - | 2.
-     - | Repositoryインタフェースと、RepositoryImplは、基本的にドメイン層の同じパッケージに配置する。
-     - | Repositoryは、Repositoryインタフェースがドメイン層、RepositoryImplがインフラストラクチャ層に属することとなるが、
-       | Javaのパッケージとしては、基本的には、ドメイン層のRepositoryインタフェースと同じパッケージでよい。
-   * - | 3.
-     - | Repositoryで使用するDTOは、Repositoryインタフェースと同じパッケージに配置する。
-     - | 例えば、検索条件を保持するDTOや、Entityの一部の項目のみを定義したサマリ用のDTOなどがあげられる。
-
-
-Repositoryの作成例
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| Repositoryの作成例を説明する。
-| 以下は、\ :ref:`domainlayer_entity_example`\ の説明で使用した、EntityクラスのRepositoryを作成する例となっている。
-
-
-Repository構成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ :ref:`domainlayer_entity_example`\ の説明で使用した、EntityクラスのRepositoryを作成すると、以下のような構成となる。
-
- .. figure:: images/domainlayer_repository_layout.png
-   :alt: Example of repository layout
-   :width: 100%
-   :align: center
-
-
-| 主体となるEntityクラスに対して、Repositoryを作成している。
-| パッケージの推奨構成については、\ :ref:`application-layering_project-structure`\ を参照されたい。
-
-
-.. _repository-interface-label:
-
-Repositoryインタフェースの定義
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Repositoryインタフェースの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-以下にRepositoryインタフェースの作成例を紹介する。
-
-- :file:`SimpleCrudRepository.java`
-
- | このインタフェースは、シンプルなCRUD操作のみを提供している。
- | メソッドのシグネチャは、Spring Dataから提供されている\ ``CrudRepository``\ インタフェースや、\  ``PagingAndSortingRepository``\ インタフェースを参考に作成している。
-
- .. code-block:: java
-
-     public interface SimpleCrudRepository<T, ID extends Serializable> {
-         // (1)
-         T findOne(ID id);
-         // (2)
-         boolean exists(ID id);
-         // (3)
-         List<T> findAll();
-         // (4)
-         Page<T> findAll(Pageable pageable);
-         // (5)
-         long count();
-         // (6)
-         T save(T entity);
-         // (7)
-         void delete(T entity);
-     }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 指定したIDに対応するEntityを、取得するためのメソッド。
-    * - | (2)
-      - | 指定したIDに対応するEntityが、存在するか判定するためのメソッド。
-    * - | (3)
-      - | 全てのEntityを取得するためのメソッド。 Spring Dataでは、\ ``java.util.Iterable``\ であったが、サンプルとしては、\ ``java.util.List``\ にしている。
-    * - | (4)
-      - | 指定したページネーション情報（取得開始位置、取得件数、ソート情報）に該当するEntityのコレクションを取得するためのメソッド。
-        | ``Pageable`` インタフェースおよび\ ``Page``\ インタフェースはSpring Dataより提供されているクラス（インターフェース）である。
-    * - | (5)
-      - | Entityの総件数を取得するためのメソッド。
-    * - | (6)
-      - | 指定されたEntityのコレクションを保存（作成、更新）するためのメソッド。
-    * - | (7)
-      - | 指定したEntityを、削除するためのメソッド。
-
-
-- :file:`TodoRepository.java`
-
- 下記は、チュートリアルで作成したTodoエンティティのRepositoryを、上で作成した\ ``SimpleCrudRepository``\ インタフェースベースに作成した場合の例である。
-
- .. code-block:: java
-
-     // (1)
-     public interface TodoRepository extends SimpleCrudRepository<Todo, String> {
-         // (2)
-         long countByFinished(boolean finished);
-     }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-
-    * - | (1)
-      - | エンティティの型を示すジェネリック型「T」にTodoエンティティ、エンティティのID型を示すジェネリック型「ID」にStringクラスを指定することで、
-        | Todoエンティティ用のRepositoryインタフェースが生成される。
-    * - | (2)
-      - | \ ``SimpleCrudRepository``\ インタフェースから提供されていないメソッドを追加している。
-        | ここでは、「指定したタスクの終了状態に一致するTodoエンティティの件数を取得するメソッド」を追加している。
-
-
-Repositoryインタフェースのメソッド定義
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| 汎用的なCRUD操作を行うメソッドについては、Spring Dataから提供されている\ ``CrudRepository``\ や、\ ``PagingAndSortingRepository``\ と同じシグネチャにすることを推奨する。
-| ただし、コレクションを返却する場合は、\ ``java.lang.Iterable``\ ではなく、ロジックで扱いやすいインタフェース（\ ``java.util.Collection``\ や、\ ``java.util.List``\ ）でもよい。
-| 実際のアプリケーション開発では、汎用的なCRUD操作のみで開発できることは稀で、かならずメソッドの追加が必要になる。
-| 追加するメソッドは、以下のルールに則り追加することを推奨する。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 20 70
-
-    * - 項番
-      - メソッドの種類
-      - ルール
-    * - 1.
-      - 1件検索系のメソッド
-      - #. メソッド名は、条件に一致するEntityを、1件取得するためのメソッドであることを明示するために、\ **findOneBy**\ で始める。
-        #. メソッド名のfindOneBy以降は、検索条件となるフィールドの物理名、または、論理的な条件名などを指定し、どのような状態のEntityが取得されるのか、推測できる名前とする。
-        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
-        #. 返り値は、Entityクラスを指定する。
-    * - 2.
-      - 複数件検索系のメソッド
-      - #. メソッド名は、条件に一致するEntityを、すべて取得するためのメソッドであることを明示するために、 **findAllBy** で始める。
-        #. メソッド名のfindAllBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityが取得されるのか推測できる名前とする。
-        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
-        #. 返り値は、Entityクラスのコレクションを指定する。
-    * - 3.
-      - 複数件ページ検索系のメソッド
-      - #. メソッド名は、条件に一致するEntityの該当ページ部分を取得するためのメソッドである事を明示するために、 **findPageBy** で始める。
-        #. メソッド名のfindPageBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityが取得されるのか推測できる名前とする。
-        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。ページネーション情報（取得開始位置、取得件数、ソート情報）は、Spring Dataより提供されている ``Pageable`` インタフェースとすることを推奨する。
-        #. 返り値は、Spring Dataより提供されている ``Page`` インタフェースとすることを推奨する。
-    * - 4.
-      - 件数のカウント系のメソッド
-      - #. メソッド名は、条件に一致するEntityの件数をカウントするためのメソッドである事を明示するために、 **countBy** で始める。
-        #. 返り値は、long型にする。
-        #. メソッド名のcountBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityの件数が取得されるのか推測できる名前とする。
-        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
-    * - 5.
-      - 存在判定系のメソッド
-      - #. メソッド名は、条件に一致するEntityが存在するかチェックするためのメソッドである事を明示するために、 **existsBy** で始める。
-        #. メソッド名のexistsBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityの存在チェックを行うのか推測できる名前とする。
-        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
-        #. 返り値は、boolean型にする。
-
- .. note::
-
-     更新系のメソッドも、同様のルールに則り、追加することを推奨する。
-     findの部分が、updateまたはdeleteとなる。
-
-
-- :file:`Todo.java` (Entity)
-
- .. code-block:: java
-
-     public class Todo implements Serializable {
-         private String todoId;
-         private String todoTitle;
-         private boolean finished;
-         private Date createdAt;
-         // ...
-      }
-
-|
-
-- :file:`TodoRepository.java`
-
- .. code-block:: java
-
-      public interface TodoRepository extends SimpleCrudRepository<Todo, String> {
-          // (1)
-          Todo findOneByTodoTitle(String todoTitle);
-          // (2)
-          List<Todo> findAllByUnfinished();
-          // (3)
-          Page<Todo> findPageByUnfinished();
-          // (4)
-          long countByExpired(int validDays);
-          // (5)
-          boolean existsByCreateAt(Date date);
-      }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | タイトルが一致するTODO(todoTitle=引数で指定した値のTODO)を取得するメソッドの定義例。
-        | findOneBy以降に、条件となるフィールドの物理名(todoTitle)を指定している。
-    * - | (2)
-      - | 未完了のTODO(finished=falseのTODO)を全件取得するメソッドの定義例。
-        | findAllBy以降に、論理的な条件名を指定している。
-    * - | (3)
-      - | 未完了のTODO(finished=falseのTODO)の該当ページ部分を取得するメソッドの定義例。
-        | findPageBy以降に、論理的な条件名を指定している。
-    * - | (4)
-      - | 完了期限を過ぎたTODO(createdAt < sysdate - 引数で指定した有効日数 && finished=falseのTODO)の件数を取得するメソッドの定義例。
-        | countBy以降に、論理的な条件名を指定している。
-    * - | (5)
-      - | 指定日に作成されている、TODO(createdAt=指定日)が存在するか判定するメソッドの定義例。
-        | existsBy以降に、条件となるフィールドの物理名(createdAt)を指定している。
-
-
-RepositoryImplの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-RepositoryImplの実装については、\ :doc:`InfrastructureLayer`\ を参照されたい。
-
-
-.. _service-label:
-
-Serviceの実装
---------------------------------------------------------------------------------
-
-Serviceの役割
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Serviceは、以下2つの役割を担う。
-
-1. | **Controllerに対して業務ロジックを提供する。**
-   | 業務ロジックは、アプリケーションで使用する業務データの参照、更新、整合性チェックおよびビジネスルールに関わる各種処理で構成される。
-   | 業務データの参照および更新処理をRepository(またはO/R Mapper)に委譲し、\ **Serviceではビジネスルールに関わる処理の実装に専念することを推奨する。**\
-
- .. note:: **ControllerとServiceで実装するロジックの責任分界点について**
-
-    本ガイドラインでは、ControllerとServiceで実装するロジックは、以下のルールに則って実装することを推奨する。
-
-    1. クライアントからリクエストされたデータに対する単項目チェック、相関項目チェックはController側(Bean ValidationまたはSpring Validator)で行う。
-
-    2. Serviceに渡すデータへの変換処理(Bean変換、型変換、形式変換など)は、ServiceではなくController側で行う。
-
-    3. \ **ビジネスルールに関わる処理はServiceで行う。**\ 業務データへのアクセスは、RepositoryまたはO/R Mapperに委譲する。
-
-    4. ServiceからControllerに返却するデータ（クライアントへレスポンスするデータ）に対する値の変換処理(型変換、形式変換など)は、Serviceではなく、Controller側（Viewクラスなど）で行う。
-
-
- .. figure:: images/service_responsibility-of-logic.png
-    :alt: responsibility of logic
-    :width: 90%
-    :align: center
-
-
-2. | **トランザクション境界を宣言する。**
-   | データの一貫性を保障する必要がある処理（主にデータの更新処理）を行う業務ロジックの場合、トランザクション境界を宣言する。
-   | データの参照処理の場合でも業務要件によっては、トランザクション管理が必要になる場合もあるので、その場合は、トランザクション境界を宣言する。
-   | \ **トランザクション境界は、原則Serviceに設ける。**\ アプリケーション層(Web層)にトランザクション境界が設けられている場合、業務ロジックの抽出が正しく行われていない可能性があるので、見直しを行うこと。
-
- .. figure:: images/service_transaction-boundary.png
-    :alt: transaction boundary
-    :width: 90%
-    :align: center
-
- 詳細は、\ :ref:`service_transaction_management`\を参照されたい。
-
-
-.. _service-constitution-role-label:
-
-Serviceのクラス構成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-| Serviceは、ServiceクラスとSharedServiceクラスで構成され、それぞれ以下の役割を担う。
-| 本ガイドラインでは、\ ``@Service``\ アノテーションが付与されたPOJO(Plain Old Java Object)のことを、ServiceクラスおよびSharedServiceクラスと定義しているが、メソッドのシグネチャを限定するようなインタフェースや、基底クラスを作成することを、禁止しているわけではない。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.30\linewidth}|p{0.45\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 15 30 45
-
-   * - 項番
-     - クラス
-     - 役割
-     - 依存関係に関する注意点
-
-   * - 1.
-     - Serviceクラス
-     - | **特定のControllerに対して業務ロジックを提供する。**
-       | Serviceクラスのメソッドは、\ **再利用されることを考慮したロジックは実装しない。**\
-     - #. \ **他のServiceクラスのメソッドを呼び出すことは、原則禁止とする（※図中1-1）。**\ 他のServiceと処理を共有したい場合は、SharedServiceクラスのメソッドを作成し、呼び出すようにすることを推奨する。
-       #. Serviceクラスのメソッドは、複数のControllerから呼び出してもよい（※図中1-2）。ただし、\ **呼び出し元のControllerによって、処理分岐が必要になる場合は、Controller毎に、Serviceクラスのメソッドを作成することを推奨する。**\ その上で共通的な処理は、SharedServiceクラスのメソッドを作成し呼び出すようにする。
-   * - 2
-     - SharedServiceクラス
-     - | 複数のControllerやServiceクラスで、\ **共有(再利用)されるロジックを提供する。**\
-     - #. 他のSharedServiceクラスのメソッドを呼び出してもよいが（※図中2-1）、 **呼び出し階層が複雑にならないように考慮すること。** 呼び出し階層が複雑になると保守性が低下する危険性が高まるので注意が必要。
-       #. ControllerからSharedServiceクラスのメソッドを呼び出してもよい（※図中2-2）が、\ **トランザクション管理の観点で問題がない場合に限る。**\ 直接呼び出した場合に、トランザクション管理の観点で問題がある場合は、Serviceクラスにメソッドを用意し、適切なトランザクション管理が行われるようにすること。
-       #. SharedServiceクラスから\ **Serviceクラスのメソッドを呼び出すことは禁止する（※図中2-3）。**\
-
-
-| Serviceクラスと、SharedServiceクラスの依存関係を、以下に示す。
-| 図中の番号は、上の表の「依存関係に関する注意点」欄の記載と連動しているため、あわせて確認すること。
-
- .. figure:: images/service_class-dependency.png
-   :alt: class dependency
-   :width: 100%
-   :align: center
-
-
-ServiceクラスとSharedServiceクラスを分ける理由について
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 業務ロジックを構成する処理の中には、再利用できない(すべきでない)ロジックと再利用できる（すべき）ロジックが存在する。
-| この二つのロジックを、同じクラスのメソッドとして実装してしまうと、再利用してよいメソッドか否かの判断が、難しくなる。
-| この問題を回避する目的として、本ガイドラインでは、\ **再利用されることを想定しているメソッドについては、SharedServiceクラスに実装することを強く推奨している。**\
-
-
-Serviceクラスから、別のServiceクラスの呼び出しを禁止する理由について
-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本ガイドラインでは、Serviceクラスのメソッドから、別のServiceクラスのメソッドを呼び出すことを、原則禁止としている。
-| これは、Serviceクラスは、特定のControllerに対して業務ロジックを提供するクラスであり、別のServiceから利用される前提で作成しないためである。
-| 仮に、別のServiceクラスから直接呼び出してしまうと、以下のような状況が発生しやすくなり、\ **保守性などを低下させる危険性が、高まる。**\
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 発生しうる状況
-   * - 1.
-     - | 本来は、呼び出し元のServiceクラスで実装すべきロジックが、処理を一ヶ所にまとめたいという理由などにより、呼び出し先のServiceクラスで実装されてしまう。
-       | その際に、\ **呼び出し元を意識するための引数（フラグ）などが、安易に追加され、間違った共通化が行われてしまう。結果として、見通しの悪いモジュール構成になってしまう。**\
-   * - 2.
-     - | 呼び出し経路やパターンが多くなることで、\ **仕様変更や、バグ改修の際のソース修正に対する影響範囲の把握が難しくなる。**\
-
-
-メソッドのシグネチャを限定するようなインタフェースや基底クラスについて
-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 業務ロジックの作りを統一したい場合に、シグネチャを限定するようなインタフェースや、基底クラスを作成することがある。
-| シグネチャを限定するインタフェースや基底クラスを設けることで、開発者ごとに、作りの違いが発生しないようにする目的もある。
-
- .. note::
-
-    大規模開発において、サービスイン後の保守性等を考慮して業務ロジックの作りを合わせておきたい場合や、開発者のひとりひとりのスキルがあまり高くない場合などの状況下では、
-    シグネチャを限定するようなインタフェースを設けることも、選択肢の一つとして考えてもよい。
-
-    本ガイドラインでは、シグネチャを限定するようなインタフェースを作成することは、特に推奨していないが、
-    プロジェクトの特性を加味して、どのようなアーキテクチャにするか決めて頂きたい。
-
-\
-
-
- .. note:: **シグネチャを制限するインタフェースおよび基底クラスの実装サンプル**
-    - シグネチャを限定するようなインタフェース
-
-     .. code-block:: java
-
-        // (1)
-        public interface BLogic<I, O> {
-          O execute(I input);
-        }
-
-     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-     .. list-table::
-        :header-rows: 1
-        :widths: 10 90
-
-        * - 項番
-          - 説明
-        * - | (1)
-          - | 業務ロジックの実装メソッドのシグニチャを制限するためのインタフェース。
-            | 上記例では、入力情報(I)と出力情報(O)の総称型として定義されており、 業務ロジックを実行するためのメソッド(execute)を一つもつ。
-            | 本ガイドラインでは、上記のようなインタフェースを、BLogicインタフェースと呼ぶ。
-
-    - Controller
-
-     .. code-block:: java
-
-        // (2)
-        @Inject
-        XxxBLogic<XxxInput, XxxOutput> xxxBLogic;
-
-        public String reserve(XxxForm form, RedirectAttributes redirectAttributes) {
-
-            XxxInput input = new XxxInput();
-            // omitted
-
-            // (3)
-            XxxOutput output = xxxBlogic.execute(input);
-
-            // omitted
-
-            redirectAttributes.addFlashAttribute(output.getTourReservation());
-            return "redirect:/xxx?complete";
-        }
-
-     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-     .. list-table::
-        :header-rows: 1
-        :widths: 10 90
-
-        * - 項番
-          - 説明
-        * - | (2)
-          - | Controllerは、呼び出すBLogicインタフェースをInjectする。
-        * - | (3)
-          - | Controllerは、BLogicインタフェースのexecuteメソッドを呼び出し、業務ロジックを実行する。
-
-    定型的な共通処理をServiceに盛り込む場合、ビジネスロジックの処理フローを統一したい場合に、メソッドのシグネチャを限定するような基底クラスを作成することがある。
-
-    - シグネチャを限定するような基底クラス
-
-     .. code-block:: java
-
-
-        public abstract class AbstractBLogic<I, O> implements BLogic<I, O> {
-
-            public O execute(I input){
-              try{
-
-                  // omitted
-
-                  // (4)
-                  preExecute(input);
-
-                  // (5)
-                  O output = doExecute(input);
-
-                  // omitted
-
-                  return output;
-              } finally {
-                  // omitted
-              }
-
-            }
-
-            protected abstract void preExecute(I input);
-
-            protected abstract O doExecute(I input);
-
-        }
-
-
-     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-     .. list-table::
-        :header-rows: 1
-        :widths: 10 90
-
-        * - 項番
-          - 説明
-        * - | (4)
-          - | 基底クラスより、業務ロジックを実行する前の、事前処理を行うメソッドを呼び出す。
-            | 上記のような事前処理を行うメソッドでは、ビジネスルールのチェックなどを実装することになる。
-        * - | (5)
-          - | 基底クラスより、業務ロジックを実行するメソッドを呼び出す。
-
-
-    以下に、シグネチャを限定するような、基底クラスを継承する場合の、サンプルを示す。
-
-
-    - BLogicクラス(Service)
-
-     .. code-block:: java
-
-        public class XxxBLogic extends AbstractBLogic<XxxInput, XxxOutput> {
-
-            // (6)
-            protected void preExecute(XxxInput input) {
-
-                // omitted
-                Tour tour = tourRepository.findOne(input.getTourId());
-                Date reservationLimitDate = tour.reservationLimitDate();
-                if(input.getReservationDate().after(reservationLimitDate)){
-                    throw new BusinessException(ResultMessages.error().add("e.xx.xx.0001"));
-                }
-
-            }
-
-            // (7)
-            protected XxxOutput doExecute(XxxInput input) {
-                TourReservation tourReservation = new TourReservation();
-
-                // omitted
-
-                tourReservationRepository.save(tourReservation);
-                XxxOutput output = new XxxOutput();
-                output.setTourReservation(tourReservation);
-
-                // omitted
-                return output;
-            }
-
-        }
-
-
-     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-     .. list-table::
-        :header-rows: 1
-        :widths: 10 90
-
-        * - 項番
-          - 説明
-        * - | (6)
-          - | 業務ロジックを実行する前の事前処理を実装する。
-            | ビジネスルールのチェックなどを実装する事になる。
-        * - | (7)
-          - | 業務ロジックを実装する。
-            | ビジネスルールを充たすために、ロジックを実装する事になる。
-
-
-.. _service-creation-unit-label:
-
-Serviceの作成単位
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Serviceの作成単位は主に以下の３パターンとなる。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.25\linewidth}|p{0.50\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 15 25 50
-
-   * - 項番
-     - 単位
-     - 作成方法
-     - 特徴
-
-   * - 1.
-     - | Entity毎
-     - | 主体となるEntityと対でServiceを作成する。
-     - | 主体となるEntityとは、業務データの事であり、 **業務データを中心にしてアプリケーションを設計・実装する場合は、この単位でServiceを作成することを推奨する。**
-       |
-       | この単位でServiceを作成すると、業務データ毎に業務ロジックが集約されるため、業務処理の共通化が図られやすい。
-       | ただし、このパターンでServiceを作成した場合、同時に大量の開発者を投入して作成するアプリケーションとの相性は、あまりよくない。どちらかと言うと、小規模・中規模のアプリケーションを開発する場合に向いているパターンと言える。
-   * - 2.
-     - | ユースケース毎
-     - | ユースケースと対でServiceを作成する。
-     - | **画面からのイベントを中心にしてアプリケーションを設計・実装する場合は、この単位でServiceを作成することになる。**
-       |
-       | この単位でServiceを作成する場合は、ユースケース毎に担当者を割り当てることが出来るため、同時に大量の開発者を投入して開発するアプリケーションとの相性はよい。
-       | 一方で、このパターンでServiceを作成すると、ユースケース内での業務ロジックの共通化は行うことができるが、ユースケースを跨いだ業務ロジックの共通化は行われない可能性が高くなる。
-       | ユースケースを跨いで業務ロジックの共通化を行う必要がある場合は、共通化を行うための共通チームを設けるなどの工夫が必要となる。
-   * - 3
-     - | イベント毎
-     - | 画面から発生するイベントと対でServiceを作成する。
-     - | **画面からのイベントを中心にしてアプリケーションを設計・実装する場合で且つ「TERASOLUNA ViSC」を使用してBLogicクラスを生成する場合は、この単位でServiceを作成することになる。**
-       | 本ガイドラインでは、このような単位で作成されるServiceクラスの事を、BLogicと呼ぶ。
-       |
-       | この単位でServiceを作成する場合の特徴としては、基本的にはユースケース毎に作成する際と同じである。
-       | ただし、イベント毎にServiceクラスを設計・実装する事になるため、ユースケース毎に作成する場合に比べて、より共通化が行われない可能性が高くなる。
-       | 本ガイドラインとしては、イベント毎に作成するパターンは特に推奨しない。ただし、大規模開発において、保守性等を考慮して業務ロジックの作りを合わせておきたいといった理由がある場合は、イベント毎に作成する事を選択肢の一つとして考えてもよい。
-
- .. warning::
-
-    **Serviceの作成単位については、開発するアプリケーションの特性や開発体制などを加味して決めて頂きたい。**
-
-    また、提示した３つの作成パターンの **どれか一つのパターンに絞る必要はない。**
-    無秩序にいろいろな単位のServiceを作成する事は避けるべきだが、 **アーキテクトによって方針が示されている状況下においては、併用しても特に問題はない。**
-    例えば、以下のような組み合わせが考えられる。
-
-    【組み合わせて使用する場合の例】
-
-    * アプリケーションとして重要な業務ロジックについては、Entity毎のSharedServiceクラスとして作成する。
-    * 画面からのイベントを処理するための業務ロジックについては、Controller毎のServiceクラスとして作成する。
-    * Controller毎のServiceクラスでは、必要に応じてSharedServiceクラスのメソッドを呼び出す事で業務ロジックを実装する。
-
- .. tip::
-
-     「TERASOLUNA ViSC」を使用する場合は、BLogicは設計書から出力される。
-
-|
-
-Entity毎にServiceを作成する際の開発イメージ
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Entity毎にServiceを作成する場合は、以下のような開発イメージとなる。
-
- .. note::
-
-    Entity毎にServiceを作成する代表的なアプリケーションの例としては、RESTアプリケーションがあげられる。
-    RESTアプリケーションは、HTTP上に公開するリソースに対してCRUD操作(HTTPのPOST, GET, PUT, DELETE)を提供する事になる。
-    HTTP上に公開するリソースは、業務データ(Entity)または業務データ(Entity)の一部となる事が多いため、Entity毎にServiceを作成する方法との相性がよい。
-
-    RESTアプリケーションの場合は、ユースケースがEntity毎に抽出されることが多い。そのため、ユースケース毎に作成する際の構成イメージと似た構成となる。
-
-|
-
- .. figure:: images/service_unit_resource.png
-   :alt: multiple controller unit
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Entity毎に開発者を割り当てて、Serviceを実装する。
-       | 特に理由がない場合は、ControllerもEntity毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
-   * - | (2)
-     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
-       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
-
-|
-
-
-ユースケース毎に作成する際の開発イメージ
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| ユースケース毎にServiceを作成する場合は、以下のような開発イメージとなる。
-| EntityのCRUD操作を行う様なユースケースの場合は、Entity毎にServiceを作成する際の構成イメージと同じ構成となる。
-
-
- .. figure:: images/service_unit_controller.png
-   :alt: controller unit
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | ユースケース毎に開発者を割り当てて、Serviceを実装する。
-       | 特に理由がない場合は、Controllerもユースケース毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
-   * - | (2)
-     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
-       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
-
- .. note::
-
-    ユースケースの規模が大きくなると、一人が担当する開発範囲が大きくなるため、作業分担しづらくなる。
-    同時に大量の開発者を投入して開発するアプリケーションの場合は、ユースケースを更に分割して、担当者を割り当てる事を検討すること。
-
-|
-
-| ユースケースを更に分割した場合は、以下のような開発イメージとなる。
-| ユースケースの分割を行うことで、SharedServiceに影響はないため、説明は割愛している。
-
- .. figure:: images/service_unit_controller2.png
-   :alt: multiple controller unit
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | ユースケースを構成する処理単位に分割し、処理毎に開発者を割り当てて、Serviceを実装する。
-       | ここで言う処理とは、検索処理、登録処理、更新処理、削除処理といった単位であり、画面から発生するイベント毎の処理ではない点に注意すること。
-       | 例えば「更新処理」であれば、「更新対象データの取得」や「更新内容の妥当性チェック」といった単位の処理が複数含まれる。
-       | 特に理由がない場合は、Controllerも処理毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
-
- .. tip::
-
-    本ガイドライン上で使っている「ユースケース」と「処理」の事を、「ユースケースグループ」と「ユースケース」と呼ぶプロジェクトもある。
-
-|
-
-イベント毎に作成する際の開発イメージ
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-イベント毎にService(BLogic)を作成する場合は、以下のような開発イメージとなる。
-
- .. figure:: images/service_unit_business-ligic.png
-   :alt: constitution image of business logic unit
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | イベント毎に開発者を割り当てて、Service(BLogic)を実装する。
-       | 上記例ではそれぞれ別の担当者を割り当てる図になっているが、これは極端な例である。
-       | 実際は、ユースケース毎に担当者を割り当てる事になる。
-   * - | (2)
-     - | 特に理由がない場合は、Controllerはユースケース毎に作成することが望ましい。
-   * - | (3)
-     - | イベント毎にService(BLogic)を実装する場合でも、担当者はユースケース毎に割り当てることを推奨する。
-   * - | (4)
-     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
-       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
-
- .. note::
-
-    ユースケースの規模が大きくなると、一人が担当する開発範囲が大きくなるため、作業分担しづらくなる。
-    同時に大量の開発者を投入して開発するアプリケーションの場合は、ユースケースを更に分割して、担当者を割り当てる事を検討すること。
-
-|
-
-| ユースケースを更に分割した場合は、以下のような開発イメージとなる。
-| ユースケースの分割を行うことで、SharedServiceに影響はないため、説明は割愛している。
-
- .. figure:: images/service_unit_business-ligic2.png
-   :alt: multiple controller unit
-   :width: 100%
-   :align: center
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | ユースケースを構成する処理単位に分割し、処理毎に開発者を割り当てて、Service(BLogic)を実装する。
-       | ここで言う処理とは、検索処理、登録処理、更新処理、削除処理といった単位であり、画面から発生するイベント毎の処理ではない点に注意すること。
-       | 例えば「更新処理」であれば、「更新対象データの取得」や「更新内容の妥当性チェック」といった単位の処理が複数含まれる。
-       | 特に理由がない場合は、Controllerも処理毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
-
-.. _service-class-label:
-
-Serviceクラスの作成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-.. _service-class-creation-label:
-
-Serviceクラスの作成方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Serviceクラスを作成する際の注意点を、以下に示す。
-
-- Serviceインタフェースの作成
-
- .. code-block:: java
-
-    public interface CartService { // (1)
-        // omitted
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | **Serviceインタフェースを作成することを推奨する。**
-       | インタフェースを設けることで、Serviceとして公開するメソッドを明確にすることが出来る。
-
-\
-
- .. note:: **アーキテクチャ観点でのメリット例**
-
-    #. AOPを使う場合に、JDK標準のDynamic proxies機能が使われる。
-       インタフェースがない場合はSpring Frameworkに内包されているCGLIBが使われるが、finalメソッドに対してAdviceできないなどの制約がある。
-       詳細は、\ `Spring Reference Document -Aspect Oriented Programming with Spring(Proxying mechanisms)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/aop.html#aop-proxying>`_\ を参照されたい。
-    #. 業務ロジックをスタブ化しやすくなる。
-       アプリケーション層とドメイン層を別々の体制で並行して開発する場合は、アプリケーション層を開発するために、Serviceのスタブが必要になるケースがある。
-       スタブを作成する必要がある場合は、インタフェースを設けておくことを推奨する。
-
-- Serviceクラスの作成
-
- .. code-block:: java
-
-    @Service // (1)
-    @Transactional // (2)
-    public class CartServiceImpl implements CartService { // (3) (4)
-        // omitted
-    }
-
- .. code-block:: xml
-
-    <context:component-scan base-package="xxx.yyy.zzz.domain" /> <!-- (1) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | **クラスに @Service アノテーションを付加する。**
-       | アノテーションを付与することで、componentがscan対象となり、設定ファイルへのbean定義が、不要となる。
-       | <context:component-scan>要素のbase-package属性に、componentをscanする対象のパッケージを指定する。
-       | 上記設定の場合、「xxx.yyy.zzz.domain」パッケージ配下に格納されているクラスが、コンテナに登録される。
-   * - | (2)
-     - | **クラスに @Transactional アノテーションを付加する。**
-       | アノテーションを付与することで、すべての業務ロジックに対してトランザクション境界が設定される。
-       | 属性値については、要件に応じた値を指定すること。
-       | 詳細は、\ :ref:`transaction-management-declare-transaction-info-label`\ を参照されたい。
-
-       | また、\ ``@Transactional``\ アノテーションを使用する際の注意点を理解するために、「:ref:`DomainLayerAppendixTransactionManagement`」を合わせて確認するとよい。
-   * - | (3)
-     - | **インターフェース名はXxxService、クラス名はXxxServiceImplとする。**
-       | 上記以外の命名規約でもよいが、ServiceクラスとSharedServiceクラスは、区別できる命名規約を設けることを推奨する。
-   * - | (4)
-     - | **Serviceクラスでは状態は保持せず、singletonスコープのbeanとしてコンテナに登録する 。**
-       | フィールド変数には、スレッド毎に状態が変わるオブジェクト(Entity/DTO/VOなどのPOJO)や、値(プリミティブ型、プリミティブラッパークラスなど)を保持してはいけない。
-       | また、\ ``@Scope``\ アノテーションを使ってsingleton以外のスコープ(prototype, request, session)にしてはいけない。
-
-\
-
- .. note:: **クラスに @Transactional アノテーションを付加する理由**
-
-    トランザクション境界の設定が必須なのは更新処理を含む業務ロジックのみだが、設定漏れによるバグを防ぐ事を目的として、クラスレベルにアノテーションを付与することを推奨している。
-    もちろん必要な箇所（更新処理を行うメソッド）のみに、\ ``@Transactional``\ アノテーションを定義する方法を採用してもよい。
-
- .. note:: **singleton以外のスコープを禁止する理由**
-
-    #. prototype, request, sessionは、状態を保持するbeanを登録するためのスコープであるため、Serviceクラスに対して使用すべきでない。
-    #. スコープをrequestやprototypeにした場合、DIコンテナによるbeanの生成頻度が高くなるため、性能に影響を与えることがある。
-    #. スコープをrequestやsessionにした場合、Webアプリケーション以外のアプリケーション(例えば、Batchアプリケーションなど)で使用できなくなる。
-
-.. _service-class-method-creation-label:
-
-Serviceクラスのメソッドの作成方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Serviceクラスのメソッドを作成する際の注意点を、以下に示す。
-
-- Serviceインタフェースのメソッド作成
-
- .. code-block:: java
-
-    public interface CartService {
-        Cart createCart(); // (1) (2)
-        Cart findCart(String cartId); // (1) (2)
-    }
-
-- Serviceクラスのメソッドの作成
-
- .. code-block:: java
-
-    @Service
-    @Transactional
-    public class CartServiceImpl implements CartService {
-
-        @Inject
-        CartRepository cartRepository;
-
-        public Cart createCart() { // (1) (2)
-            Cart cart = new Cart();
-            // ...
-            cartRepository.save(cart);
-            return cart;
-        }
-
-        @Transactional(readOnly = true) // (3)
-        public Cart findCart(String cartId) { // (1) (2)
-            Cart cart = cartRepository.findByCartId(cartId);
-            // ...
-            return cart;
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | **Serviceクラスのメソッドは、業務ロジック毎に作成する。**
-   * - | (2)
-     - | **業務ロジックは、Serviceインタフェースでメソッドの定義を行い、Serviceクラスのメソッドで実装を行う。**
-   * - | (3)
-     - | **業務ロジックのトランザクション定義をデフォルト（クラスアノテーションで指定した定義）から変更する場合は、@Transactionalアノテーションを付加する。**
-       | 属性値については、要件に応じた値を指定すること。
-       | 詳細は、\ :ref:`transaction-management-declare-transaction-info-label` を参照されたい。
-
-       | また、\ ``@Transactional``\ アノテーションを使用する際の注意点を理解するために、「:ref:`DomainLayerAppendixTransactionManagement`」を合わせて確認するとよい。
-
-\
-
- .. tip:: **参照系の業務ロジックのトランザクション定義について**
-
-    参照系の業務ロジックを実装する場合は、\ ``@Transactional(readOnly = true)``\ を指定することで、
-    JDBCドライバに対して「読み取り専用のトランザクション」のもとでSQLを実行するように指示することができる。
-
-    読み取り専用のトランザクションの扱い方は、JDBCドライバの実装に依存するため、使用するJDBCドライバの仕様を確認されたい。
-
-
- .. note:: **「読み取り専用のトランザクション」を使用する際の注意点**
-
-    コネクションプールからコネクションを取得する際にヘルスチェックを行う設定にしている場合、「読み取り専用のトランザクション」が有効にならないケースがある。
-    本事象の詳細及び回避方法については、:ref:`「読み取り専用のトランザクション」が有効にならないケースについて <DomainLayerTransactionManagementWarningDisableCase>` を参照されたい。
-
-
- .. note:: **新しいトランザクションを開始する必要がある場合のトランザクション定義について**
-
-    呼び出し元のメソッドが参加しているトランザクションには参加せず、
-    新しいトランザクションを開始する必要がある場合は、\ ``@Transactional(propagation = Propagation.REQUIRES_NEW)``\ を設定する。
-
-.. _service-class-method-args-return-label:
-
-Serviceクラスのメソッド引数と返り値について
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Serviceクラスのメソッド引数と返り値は、以下の点を考慮すること。
-
-| Serviceクラスの引数と返り値は、Serialize可能なクラス(\ ``java.io.Serializable``\ を実装しているクラス)とする。
-| Serviceクラスは、分散アプリケーションとしてデプロイされる可能性もあるので、引数と返り値は、Serialize可能なクラスのみ、許可することを推奨する。
-
-**メソッド引数/返り値となる代表的な型を以下に示す。**
-
- * プリミティブ型(\ ``int``\ , \ ``long``\ など)
- * プリミティブラッパークラス(\ ``java.lang.Integer``\ , \ ``java.lang.Long``\ など)
- * java標準クラス(\ ``java.lang.String``\ , \ ``java.util.Date``\ など)
- * ドメインオブジェクト(Entity、DTOなど)
- * 入出力オブジェクト(DTO)
- * 上記型のコレクション(\ ``java.util.Collection``\ の実装クラス)
- * void
- * etc ...
-
-\
-
- .. note:: **入出力オブジェクトとは**
-
-     #. 入力オブジェクトとは、Serviceのメソッドを実行するために必要な入力値をまとめたオブジェクトのことをさす。
-     #. 出力オブジェクトとは、Serviceのメソッドの実行結果（出力値）をまとめたオブジェクトのことをさす。
-
-      「TERASOLUNA ViSC」を使用して、業務ロジック(BLogicクラス)を生成する場合、BLogicの引数と返り値には、入出力オブジェクトを使用することになる。
-
-**メソッド引数/返り値として禁止するものを以下に示す。**
-
- * アプリケーション層の実装アーキテクチャ(Servlet APIやSpringのweb層のAPIなど)に依存するオブジェクト(``javax.servlet.http.HttpServletRequest`` 、 ``javax.servlet.http.HttpServletResponse`` 、 ``javax.servlet.http.HttpSession`` 、 ``org.springframework.http.server.ServletServerHttpRequest`` など)
- * アプリケーション層のモデル(Form,DTOなど)
- * ``java.util.Map`` の実装クラス
-
- .. note:: **禁止する理由**
-
-    #. アプリケーション層の実装アーキテクチャに依存するオブジェクトを許可してしまうと、アプリケーション層とドメイン層が密結合になってしまう。
-    #. \ ``java.util.Map``\ は、インタフェースとして汎用性が高すぎるため、メソッドの引数や返り値に使うと、
-       どのようなオブジェクが格納されているかわかりづらい。 また、値の管理がキー名で行われるため、以下の問題が発生しやすくなる。
-
-     * 値を設定する処理と値を取得する処理で異なるキー名を指定してしまい、値が取得できない。
-     * キー名の変更した場合の影響範囲の把握が困難になる。
-
-
-**アプリケーション層とドメイン層で同じDTOを共有する場合の方針を、以下に示す。**
-
-* ドメイン層のパッケージに属するDTOとして作成し、アプリケーション層で利用する。
-
-\
-
- .. warning::
-
-   アプリケーション層のFormやDTOを、ドメイン層で利用してはいけない。
-
-.. _shared-service-class-label:
-
-SharedServiceクラスの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-.. _shared-service-class-creation-label:
-
-SharedServiceクラスの作成方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| SharedServiceクラスを作成する際の注意点を、以下に示す。
-| ここではServiceクラスと異なる箇所にフォーカスを当てて説明する。
-
-#. | **必要に応じて、クラスに @Transactional アノテーションを付加する。**
-   | データアクセスを伴わない場合は、\ ``@Transactional``\ アノテーションは不要である。
-
-#. | **インターフェース名はXxxSharedService、クラス名はXxxSharedServiceImplとする。**
-   | 上記以外の命名規約でもよいが、ServiceクラスとSharedServiceクラスは、区別できる命名規約を設けることを推奨する。
-
-.. _shared-service-class-method-creation-label:
-
-SharedServiceクラスのメソッドの作成方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| SharedServiceクラスのメソッドを作成する際の注意点を、以下に示す。
-| ここでは、Serviceクラスと異なる箇所にフォーカスを当てて説明する。
-
-#. **SharedServiceクラスのメソッドは、複数の業務ロジックで共有されるロジック毎に作成する。**
-
-#. | **必要に応じて、クラスに @Transactional アノテーションを付加する。**
-   | データアクセスを伴わない場合は、アノテーションは不要である。
-
-.. _shared-service-class-method-args-return-label:
-
-SharedServiceクラスのメソッド引数と返り値について
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ :ref:`service-class-method-args-return-label`\ と同様の点を考慮すること。
-
-.. _service-implementation-label:
-
-処理の実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ServiceおよびSharedServiceのメソッドで実装する処理について説明する。
-
-ServiceおよびSharedServiceでは、アプリケーションで使用する業務データの取得、更新、整合性チェックおよびビジネスルールに関わる各種ロジックの実装を行う。
-
-以下に、代表的な処理の実装例について説明する。
-
-業務データを操作する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-業務データ(Entity)の取得、更新の実装例については、
-
-* MyBatis3を使う場合は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`\
-* JPAを使う場合は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\
-
-を参照されたい。
-
-
-.. _service-return-message-label:
-
-メッセージを返却する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Serviceで解決すべきメッセージは、警告メッセージ、業務エラーメッセージの２つとなる(下図赤破線部参照)。
-| それ以外のメッセージは、アプリケーション層で解決される。
-| メッセージの種類とメッセージのパターンについては、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ を参照されたい。
-
- .. figure:: images/service_target-resolving-message.png
-   :alt: target of resolving message
-   :width: 100%
-   :align: center
-
-\
-
- .. note:: **メッセージの解決について**
-
-    Serviceで解決するのは、メッセージ文言ではなく、\ **メッセージ文言を組み立てるために必要な情報（メッセージコード、メッセージ埋め込み値）の解決**\ であるという点を補足しておく。
-
-詳細な実装方法は、
-
-* :ref:`service-return-warnmessage-label`
-* :ref:`service-return-businesserrormessage-label`
-
-を参照されたい。
-
-.. _service-return-warnmessage-label:
-
-警告メッセージを返却する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 警告メッセージの返却は、戻り値としてメッセージオブジェクトを返却する。
-| Entityなどのドメイン層のオブジェクトと一緒に返却する必要がある場合は、出力オブジェクト(DTO)にメッセージオブジェクトとドメインオブジェクトを詰めて返却する。
-
-| 共通ライブラリとしてメッセージオブジェクト(\ ``org.terasoluna.gfw.common.message.ResultMessages``\ )を用意している。
-| 共通ライブラリで用意しているクラスだと要件を満たせない場合は、プロジェクト毎にメッセージオブジェクトを作成すること。
-
-- DTOの作成
-
- .. code-block:: java
-
-    public class OrderResult implements Serializable {
-        private ResultMessages warnMessages;
-        private Order order;
-
-        // omitted
-
-    }
-
-|
-
-- Serviceクラスのメソッドの実装
-
- 下記の例では、注文した商品の中に取り寄せ商品が含まれているため、分割配達となる可能性がある旨を警告メッセージとして表示する場合の実装例である。
-
- .. code-block:: java
-
-    public OrderResult submitOrder(Order order) {
-
-        // omitted
-
-        boolean hasOrderProduct = orderRepository.existsByOrderProduct(order); // (1)
-
-        // omitted
-
-        Order order = orderRepository.save(order);
-
-        // omitted
-
-        ResultMessages warnMessages = null;
-        // (2)
-        if(hasOrderProduct) {
-            warnMessages = ResultMessages.warn().add("w.xx.xx.0001");
-        }
-        // (3)
-        OrderResult orderResult = new OrderResult();
-        orderResult.setOrder(order);
-        orderResult.setWarnMessages(warnMessages);
-        return orderResult;
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 取り寄せ商品が含まれる場合は、\ ``hasOrderProduct``\ に\ ``true``\ が設定される。
-   * - | (2)
-     - | 上記例では、取り寄せ商品が含まれる場合に、警告メッセージを生成している。
-   * - | (3)
-     - | 上記例では、登録した\ ``Order``\ オブジェクトと警告メッセージを一緒に返却するために、\ ``OrderResult``\ というDTOにオブジェクトを格納して返却している。
-
-.. _service-return-businesserrormessage-label:
-
-業務エラーを通知する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 業務ロジック実行中に、ビジネスルールの違反が発生した場合はビジネス例外をスローする。
-| 例えば次のような場合である。
-
--  旅行を予約する際に予約日が期限を過ぎている場合
--  商品を注文する際に在庫切れの場合
--  etc ...
-
-| 共通ライブラリとしてビジネス例外(\ ``org.terasoluna.gfw.common.exception.BusinessException``\ )を用意している。
-| 共通ライブラリで用意しているビジネス例外クラスだと要件を満たせない場合は、プロジェクト毎にビジネス例外クラスを作成すること。
-| **ビジネス例外クラスは、java.lang.RuntimeException のサブクラスとして作成することを推奨する** 。
-
-\
-
- .. note:: **ビジネス例外を非検査例外にする理由**
-
-   ビジネス例外は、Controllerでハンドリングが必要になるため、本来は検査例外にした方がよい。
-   しかし、本ガイドラインでは、設定漏れによるバグを防ぐ事を目的として、デフォルトでロールバックされる java.lang.RuntimeException のサブクラスとすることを推奨する。
-   もちろん検査例外のサブクラスとしてビジネス例外を作成し、ビジネス例外クラスをロールバック対象として定義する方法を採用してもよい。
-
-| ビジネス例外のスロー例を以下に示す。
-| 下記の例では、予約期限日が過ぎていることを業務エラーとして通知する際の実装例である。
-
- .. code-block:: java
-
-    // omitted
-
-    if(currentDate.after(reservationLimitDate)) { // (1)
-        throw new BusinessException(ResultMessages.error().add("e.xx.xx.0001"));
-    }
-
-    // omitted
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-
-   * - | (1)
-     - 旅行を予約する際に、予約日が期限を過ぎているので、ビジネス例外をスローしている。
-
-例外ハンドリング全体の詳細は、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`\ を参照されたい。
-
-.. _service-return-systemerrormessage-label:
-
-システムエラーを通知する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 業務ロジック実行中に、システムとして異常な状態が発生した場合は、システム例外をスローする。
-| 例えば、次のような場合である。
-
--  事前に存在しているはずのマスタデータ、ディレクトリ、ファイルなどが存在しない場合
--  利用しているライブラリのメソッドから発生する検査例外のうち、システム異常に分類される例外を補足した場合
--  etc ...
-
-| 共通ライブラリとしてシステム例外(\ ``org.terasoluna.gfw.common.exception.SystemException``\ )を用意している。
-| 共通ライブラリで用意しているシステム例外クラスだと要件を満たせない場合は、プロジェクト毎にシステム例外クラスを作成すること。
-| **システム例外クラスは、java.lang.RuntimeException のサブクラスとして作成することを推奨する** 。
-| 理由は、システム例外は、アプリケーションのコード上でハンドリングする必要がないという点と、\ ``@Transactinal``\ アノテーションのデフォルトのロールバック対象が、\ ``java.lang.RuntimeException``\ のためである。
-
-| システム例外のスロー例を以下に示す。
-| 下記の例では、指定された商品が、商品マスタに存在しないことを、システムエラーとして通知する際の実装例である。
-
- .. code-block:: java
-
-    ItemMaster itemMaster = itemMasterRepository.findOne(itemCode);
-    if(itemMaster == null) { // (1)
-        throw new SystemException("e.xx.fw.0001",
-            "Item master data is not found. item code is " + itemCode + ".");
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-
-   * - | (1)
-     - 事前に存在しているはずのマスタデータがないので、システム例外をスローしている。（ロジックで、システム異常を検知した場合の実装例）
-
-下記の例では、ファイルコピー時のIOエラーをシステムエラーとして通知する際の実装例である。
-
- .. code-block:: java
-
-    // ...
-
-    try {
-        FileUtils.copy(srcFile, destFile);
-    } catch(IOException e) { // (1)
-        throw new SystemException("e.xx.fw.0002",
-            "Failed file copy. src file '" + srcFile + "' dest file '" + destFile + "'.", e);
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 利用しているライブラリのメソッドから、システム異常に分類される例外が発生したシステム例外をスローしている。
-       | **利用しているライブラリから発生した例外は、原因例外としてシステム例外クラスに必ず渡すこと。**
-       | 原因例外が失われると、スタックトレースよりエラー発生箇所および本質的なエラー原因が追えなくなってしまう。
-
-\
-
- .. note:: **データアクセスエラーの扱いについて**
-
-    業務ロジック実行中に、RepositoryやO/R Mapperでデータアクセスエラーが発生した場合、\ ``org.springframework.dao.DataAccessException``\ のサブクラスに変換されてスローされる。
-    基本的には、業務ロジックではキャッチせず、アプリケーション層でエラーハンドリングすればよいが、
-    一意制約違反などの一部のエラーについては、業務要件によっては、業務ロジックでハンドリングする必要がある。
-    詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`\ を参照されたい。
-
-.. _service_transaction_management:
-
-トランザクション管理について
---------------------------------------------------------------------------------
-データの一貫性を保証する必要がある処理ではトランザクションの管理が必要となる。
-
-トランザクション管理の方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-トランザクションの管理方法はいろいろあるが、本ガイドラインでは、\ **Spring Frameworkから提供されている「宣言型トランザクション管理」を利用することを推奨する。**\
-
-宣言型トランザクション管理
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-「宣言型トランザクション管理」では、トランザクション管理に必要な情報を以下に２つの方法で宣言することができる。
-
-* XML(bean定義ファイル)で宣言する。
-* **アノテーション（@Transactional）で宣言する。（推奨）**
-
-Spring Frameworkから提供されている「宣言型トランザクション管理」の詳細については、\ `Spring Reference Document -Transaction Management(Declarative transaction management)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative>`_\ を参照されたい。
-\
-
- .. note:: **「アノテーションで指定する」方法を推奨する理由**
-
-    #. ソースコードを見ただけで、どのようなトランザクション管理が行われるかについて、把握することができる。
-    #. XMLにトランザクション管理するためのAOPの設定が不要であり、XMLがシンプルになる。
-
-.. _transaction-management-declare-transaction-info-label:
-
-「宣言型トランザクション管理」で必要となる情報
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| トランザクション管理対象とするクラスまたはクラスメソッドに対して\ ``@Transactional``\ アノテーションを指定する。
-| トランザクション制御に必要となる情報は、\ ``@Transactional``\ アノテーションの属性で指定する。
-
- .. note::
-
-    本ガイドラインでは、Spring Frameworkから提供されている \ ``@org.springframework.transaction.annotation.Transactional``\ アノテーションを使用する前提である。
-
- .. tip::
-
-    Spring 4からは、JTA 1.2から追加された \ ``@javax.transaction.Transactional``\ アノテーションを使用する事ができる。
-
-    ただし、本ガイドラインでは、「宣言型トランザクション管理」で必要となる情報をより細かく指定できるSpring Frameworkのアノテーションを使用することを推奨する。
-
-    Spring Frameworkのアノテーションを使用すると、
-
-    * トランザクションの伝播方法(\ ``propagation``\ 属性)の属性値として\ ``NESTED``\(JDBCのセーブポイント)
-    * トランザクションの独立レベル(\ ``isolation``\ 属性)
-    * トランザクションのタイムアウト時間(\ ``timeout``\ 属性)
-    * トランザクションの読み取り専用フラグ(\ ``readOnly``\ 属性)
-
-    の指定が可能となる。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 10 80
-
-    * - 項番
-      - 属性名
-      - 説明
-
-    * - 1
-      - propagation
-      - | トランザクションの伝播方法を指定する。
-        |
-        | **[REQUIRED]**
-        | トランザクションが開始されていなければ開始する。 (省略時のデフォルト)
-        | **[REQUIRES_NEW]**
-        | 常に、新しいトランザクションを開始する。
-        | **[SUPPORTS]**
-        | トランザクションが開始されていれば、それを利用する。開始されていなければ、利用しない。
-        | **[NOT_SUPPORTED]**
-        | トランザクションを利用しない。
-        | **[MANDATORY]**
-        | トランザクションが開始されている必要がある。開始されていなければ、例外が発生する。
-        | **[NEVER]**
-        | トランザクションを利用しない（開始されていてはいけない）。開始していれば、例外が発生する。
-        | **[NESTED]**
-        | セーブポイントが設定される。JDBCのみ有効である。
-    * - 2
-      - isolation
-      - | トランザクションの独立レベルを指定する。
-        | この設定は、DBの仕様に依存するため、使用するDBの仕様を確認し、設定値を決めること。
-        |
-        | **[DEFAULT]**
-        | DBが提供するデフォルトの独立性レベル。(省略時のデフォルト)
-        | **[READ_UNCOMMITTED]**
-        | 他のトランザクションで変更中（未コミット）のデータが読める。
-        | **[READ_COMMITTED]**
-        | 他のトランザクションで変更中（未コミット）のデータは読めない。
-        | **[REPEATABLE_READ]**
-        | 他のトランザクションが読み出したデータは更新できない。
-        | **[SERIALIZABLE]**
-        | トランザクションを完全に独立させる。
-        |
-        | トランザクションの独立レベルは、排他制御に関連するパラメータとなる。
-        | 排他制御については、\ :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`\ を参照されたい。
-    * - 3
-      - timeout
-      - | トランザクションのタイムアウト時間(秒)を指定する。
-        | デフォルトは-1(使用するDBの仕様や設定に依存)
-    * - 4
-      - readOnly
-      - | トランザクションの読み取り専用フラグを指定する。
-        | デフォルトはfalse(読み取り専用でない)
-    * - 5
-      - rollbackFor
-      - | トランザクションのロールバック対象とする例外クラスのリストを指定する。
-        | デフォルトは空（指定なし）
-    * - 6
-      - rollbackForClassName
-      - | トランザクションのロールバック対象とする例外クラス名のリストを指定する。
-        | デフォルトは空（指定なし）
-    * - 7
-      - noRollbackFor
-      - | トランザクションのコミット対象とする例外クラスのリストを指定する。
-        | デフォルトは空（指定なし）
-    * - 8
-      - noRollbackForClassName
-      - | トランザクションのコミット対象とする例外クラス名のリストを指定する。
-        | デフォルトは空（指定なし）
-
-\
-
- .. note:: **@Transactionalアノテーションを指定する場所**
-
-    **クラスまたはクラスのメソッドに指定することを推奨する。**
-    インタフェースまたはインタフェースのメソッドでない点が、ポイント。
-    理由は、\ `Spring Reference Document -Transaction Management(Using @Transactional)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-annotations>`_\ の2個めのTipsを参照されたい。
-
- .. warning:: **例外発生時のrollbackとcommitのデフォルト動作**
-
-    rollbackForおよびnoRollbackForを指定しない場合、Spring Frameworkは、以下の動作となる。
-
-    * 非検査例外クラス（java.lang.RuntimeExceptionおよびjava.lang.Error）またはそのサブクラスの例外が発生した場合は、rollbackする。
-    * 検査例外クラス（java.lang.Exception）またはそのサブクラスの例外が発生した場合は、commitする。\ **(注意が必要)**\
-
- .. note:: **@Transactionalアノテーションのvalue属性について**
-
-    \ ``@Transactional``\ アノテーションにはvalue属性があるが、これは複数のTransaction Managerを宣言した際に、どのTransaction Managerを使うのかを指定する属性である。
-    Transaction Managerが一つの場合は指定は不要である。
-    複数のTransaction Managerを使う必要がある場合は、\ `Spring Reference Document -Transaction Management(Multiple Transaction Managers with @Transactional)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#tx-multiple-tx-mgrs-with-attransactional>`_\ を参照されたい。
-
- .. note:: **主要DBのisolationのデフォルトについて**
-
-    主要DBのデフォルトの独立性レベルは、以下の通りである。
-
-    * Oracle : READ_COMMITTED
-    * DB2 : READ_COMMITTED
-    * PostgreSQL : READ_COMMITTED
-    * SQL Server : READ_COMMITTED
-    * MySQL : REPEATABLE_READ
-
-.. _DomainLayerTransactionManagementWarningDisableCase:
-
- .. note:: **「読み取り専用のトランザクション」が有効にならないケースについて**
-
-    \ ``readOnly = true``\ を指定することで「読み取り専用のトランザクション」のもとでSQLを実行する仕組みが提供されているが、
-    以下の条件にすべて一致する場合、「読み取り専用のトランザクション」が有効にならないJDBCドライバが存在する。
-
-    **[本事象の発生条件]**
-
-    * コネクションプールからコネクションを取得する際に、ヘルスチェックを行う。
-    * コネクションプールから取得したコネクションの自動コミットを無効にする。
-    * \ ``PlatformTransactionManager``\ として、\ ``DataSourceTransactionManager``\ 又は\ ``JpaTransactionManager``\ を使用する。(\ ``JtaTransactionManager``\ を使用する場合は本事象は発生しない)
-
-    **[本事象の発生が確認されているJDBCドライバ]**
-
-    * ``org.postgresql:postgresql:9.3-1102-jdbc41`` (PostgreSQL 9.3向けJDBC4.1互換のJDBCドライバ)
-
-    **[本事象の回避方法]**
-
-    「読み取り専用のトランザクション」が有効にならないケースに一致する場合は、
-    \ ``readOnly = true``\ を指定すると無駄な処理が行われる事になるため、
-    参照系の処理についても「更新可能なトランザクション」のもとで実行することを推奨する。
-
-    他の回避方法として、
-
-    * コネクションプールからコネクションを取得する際に、ヘルスチェックを行わない。
-    * コネクションプールから取得したコネクションの自動コミットを有効にする。(トランザクション管理が必要な時のみ自動コミットを無効にする)
-
-    という方法もあるが、本事象を回避するために、ヘルスチェックや自動コミットに対する設計を変更する事は避けるべきである。
-
-    **[備考]**
-
-    * 本事象の再現確認は、PostgreSQL 9.3及びOracle 12cで行っており、他のデータベース及びバージョンでは行っていない。
-    * PostgreSQL 9.3では、\ ``java.sql.Connection#setReadOnly(boolean)``\  メソッドを呼び出した際に\ ``SQLException``\ が発生する。
-    * \ :ref:`log4jdbc <DataAccessCommonDataSourceDebug>`\ を使用してSQLやJDBCのAPIの呼び出しをロギングしている場合、JDBCドライバから発生した\ ``SQLException``\ はERRORレベルでログに出力される。
-    * **JDBCドライバから発生するSQLExceptionはSpring Frameworkが行う例外処理によって無視されるため、アプリケーションの動作としてはエラーにはならないが、「読み取り専用のトランザクション」は有効にならない。**
-    * Oracle 12cでは、本事象の発生は確認されていない。
-
-    **[参考]**
-
-    \ :ref:`log4jdbc <DataAccessCommonDataSourceDebug>`\ を使用して以下のようなログが出力された場合は、本事象に該当するケースとなる。
-
-     .. code-block:: text
-
-        date:2015-02-20 16:11:56	thread:main	user:	X-Track:	level:ERROR	logger:jdbc.audit                                      	message:3. Connection.setReadOnly(true)
-        org.postgresql.util.PSQLException: Cannot change transaction read-only property in the middle of a transaction.
-            at org.postgresql.jdbc2.AbstractJdbc2Connection.setReadOnly(AbstractJdbc2Connection.java:741) ~[postgresql-9.3-1102-jdbc41.jar:na]
-            ...
-
- .. note:: **@Transactionalアノテーションのtimeout属性について**
-
-    \ ``@Transactional``\ アノテーションには\ ``timeout``\属性があるが、MyBatis 3.3とMyBatis-Spring 1.2の組み合わせでは
-    \ ``timeout``\属性に指定した値は無視され、使用されない。
-
-
-トランザクションの伝播
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| トランザクションの伝播方法は、ほとんどの場合は「REQUIRED」でよい。
-| ただし、 **アプリケーションの要件によっては「REQUIRES_NEW」を使うこともある** ので、「REQUIRED」と「REQUIRES_NEW」を指定した場合のトランザクション制御フローを、以下に示す。
-| 他の伝播方法の使用頻度は低いと思われるので、本ガイドラインでの説明は省略する。
-
-| **トランザクションの伝播方法を「REQUIRED」にした場合のトランザクション管理フロー**
-| トランザクションの伝播方法を「REQUIRED」にした場合、Controllerから呼び出された一連の処理が、すべて同じトランザクション内で処理される。
-
- .. figure:: images/service_transaction-propagation-required.png
-    :alt: transaction management flow of REQUIRED
-    :width: 100%
-    :align: center
-
-#. Controllerからトランザクション管理対象のServiceのメソッドを呼び出す。
-   この時点で開始されているトランザクションは存在しないため、\ ``TransactionInterceptor``\ によってトランザクションが開始される。
-#. \ ``TransactionInterceptor``\ は、トランザクション開始した後に、トランザクション管理対象のメソッドを呼び出す。
-#. Serviceからトランザクション管理対象の\ ``SharedService``\ のメソッドを呼び出す。
-   この時点で開始済みのトランザクションが存在しているため、\ ``TransactionInterceptor``\ は、新たにトランザクションは開始せず、開始済みのトランザクションに参加する。
-#. \ ``TransactionInterceptor``\ は、開始済みのトランザクションに参加した後に、トランザクション管理対象のメソッドを呼び出す。
-#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクションを終了する。
-
-
-.. note:: **org.springframework.transaction.UnexpectedRollbackExceptionが発生する理由**
-
-  トランザクションの伝播方法を「REQUIRED」にした場合、物理的なトランザクションは一つだが、Spring Frameworkでは内部的なトランザクション制御境界が設けられている。
-  上記例だと、SharedServiceが呼び出された際に実行される\ ``TransactionInterceptor``\ が、内部的なトランザクション制御を行っている。
-  そのため、\ ``SharedService``\ でロールバック対象の例外が発生した場合、\ ``TransactionInterceptor``\ によって、
-  トランザクションはロールバック状態（rollback-only）に設定され、トランザクションをコミットすることはできなくなる。
-  この状態でトランザクションのコミットを行おうとすると、Spring Frameworkは、\ ``UnexpectedRollbackException``\ を発生させ、トランザクション制御に矛盾が発生している事を通知してくれる。
-  \ ``UnexpectedRollbackException``\ が発生した場合、rollbackForおよびnoRollbackForの定義に、矛盾がないか、確認すること。
-
-| **トランザクションの伝播方法を「REQUIRES_NEW」にした場合のトランザクション管理フロー**
-| トランザクションの伝播方法を「REQUIRES_NEW」にした場合、Controllerから呼び出された時に行われる一連の処理の一部（SharedServiceで行っている処理）が別のトランザクションで処理される。
-
- .. figure:: images/service_transaction-propagation-requires_new.png
-    :alt: transaction management flow of REQUIRES_NEW
-    :width: 100%
-    :align: center
-
-#. Controllerからトランザクション管理対象のServiceのメソッドを呼び出す。この時点で開始されているトランザクションは存在しないため、 ``TransactionInterceptor`` によってトランザクションが開始される(ここで開始したトランザクションを以降「Transaction A」と呼ぶ)。
-#. ``TransactionInterceptor`` は、トランザクション（Transaction A）を開始した後に、トランザクション管理対象のメソッドを呼び出す。
-#. Serviceからトランザクション管理対象の ``SharedService`` のメソッドを呼び出す。この時点で開始済みのトランザクション（Transaction A）が存在しているが、トランザクションの伝播方法が「REQUIRES_NEW」なので ``TransactionInterceptor`` によって新しいトランザクションが開始される(ここで開始したトランザクションを以降「Transaction B」と呼ぶ)。この時点で「Transaction A」のトランザクションは、中断され再開待ちの状態となる。
-#. \ ``TransactionInterceptor``\ は、トランザクション（Transaction B）を開始した後に、トランザクション管理対象のメソッドを呼び出す。
-#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクション（Transaction B）を終了する。
-   この時点で、「Transaction A」のトランザクションが再開され、アクティブな状態になる。
-#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクション（Transaction A）を終了する。
-
-トランザクション管理対象となるメソッドの呼び出し方
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring Frameworkから提供されている「宣言型トランザクション管理」はAOPで実現されているため、AOPが有効となるメソッド呼び出しに対してのみ、トランザクション管理が適用される。
-| デフォルトのAOPモードが、\ **proxyモードなので、別のクラスからpublicメソッドが呼び出された場合のみトランザクション管理対象となる。**\
-| \ **publicメソッドであっても、内部呼び出しの場合は、トランザクション管理対象にならない**\ ので注意が必要となる。
-
-- **トランザクション管理対象となるメソッドの呼び出し方**
-
- .. figure:: images/service_transaction-valid-call.png
-   :alt: enabled method calls of transaction management
-   :width: 100%
-   :align: center
-
-- **トランザクション管理対象にならないメソッドの呼び出し方**
-
- .. figure:: images/service_transaction-invalid-call.png
-   :alt: not enabled method calls of transaction management
-   :width: 100%
-   :align: center
-
- .. note:: **内部呼び出しをトランザクション管理対象にしたい場合**
-
-   AOPモードを\ ``"aspectj"``\ にすることで、内部呼び出しをトランザクション管理対象にすることができる。
-   ただし、内部呼び出しもトランザクション管理対象にしてしまうと、トランザクション管理の経路が複雑になる可能性があるので、
-   基本的にはAOPモードはデフォルトの\ ``"proxy"``\ を使用することを推奨する。
-
-.. _service_enable_transaction_management:
-.. _DomainLayerAppendixTransactionManagement:
-
-トランザクション管理を使うための設定について
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-トランザクション管理を使うために必要な設定について説明する。
-
-PlatformTransactionManagerの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| トランザクション管理を行う場合、\ ``PlatformTransactionManager``\ のbeanを設定する必要がある。
-| Spring Frameworkより用途毎のクラスが提供されているので、使用するクラスを指定すればよい。
-
-- :file:`xxx-env.xml`
-
- 以下に、DataSourceから取得されるJDBCコネクションの機能を使って、トランザクションを管理する場合の設定例を示す。
-
- .. code-block:: xml
-
-     <!-- (1) -->
-     <bean id="transactionManager"
-           class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
-         <property name="dataSource" ref="dataSource" />
-     </bean>
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-
-    * - | (1)
-      - | 用途にあった\ ``PlatformTransactionManager``\ の実装クラスを指定する。
-        | idは「transactionManager」としておくことを推奨する。
-
-\
-
- .. note:: **複数DB（複数リソース）に対するトランザクション管理（グローバルトランザクションの管理）が必要な場合**
-
-     * \ ``org.springframework.transaction.jta.JtaTransactionManager``\ を利用し、アプリケーションサーバから提供されているJTAの機能を使って、トランザクション管理を行う必要がある。
-     * WebSphere、Oracle WebLogic ServerでJTAを使う場合、<tx:jta-transaction-manager/> を指定することで、
-       アプリケーションサーバ用に拡張された\ ``JtaTransactionManager``\ が、自動的で設定される。
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
- .. list-table:: **Spring Frameworkから提供されているPlatformTransactionManagerの実装クラス**
-    :header-rows: 1
-    :widths: 10 35 55
-
-    * - 項番
-      - クラス名
-      - 説明
-    * - 1.
-      - | org.springframework.jdbc.datasource.
-        | DataSourceTransactionManager
-      - | JDBC(\ ``java.sql.Connection``\ )のAPIを呼び出して、トランザクションを管理するための実装クラス。
-        | MyBatisや、\ ``JdbcTemplate``\ を使う場合は、本クラスを使用する。
-    * - 2.
-      - | org.springframework.orm.jpa.
-        | JpaTransactionManager
-      - | JPA(\ ``javax.persistence.EntityTransaction``\ )のAPIを呼び出して、トランザクションを管理するための実装クラス。
-        | JPAを使う場合は、本クラスを使用する。
-    * - 3.
-      - | org.springframework.transaction.jta.
-        | JtaTransactionManager
-      - | JTA(\ ``javax.transaction.UserTransaction``\ )のAPIを呼び出してトランザクションを管理するための実装クラス。
-        | アプリケーションサーバから提供されているJTS(Java Transaction Service)を利用して、リソース(データベース/メッセージングサービス/汎用EIS(Enterprise Information System)など)とのトランザクションを管理する場合は、本クラスを使用する。
-        | 複数のリソースに対する操作を同一トランザクションで行う必要がある場合は、JTAを利用して、リソースとのトランザクションを管理する必要がある。
-
-@Transactionalを有効化するための設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| 本ガイドラインでは、\ ``@Transactional``\ アノテーションを使った「宣言型トランザクション管理」を使って、トランザクション管理することを推奨している。
-| ここでは、\ ``@Transactional``\ アノテーションを使うために、必要な設定について説明する。
-
-- :file:`xxx-domain.xml`
-
- .. code-block:: xml
-
-     <tx:annotation-driven /> <!-- (1) -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-
-    * - | (1)
-      - <tx:annotation-driven>要素をXML（bean定義ファイル）に追加することで、\ ``@Transactional``\ アノテーションを使ったトランザクション境界の指定が有効となる。
-
- .. note:: **トランザクション管理の落とし穴について**
-
-    IBM DeveloperWorksに「トランザクションの落とし穴を理解する」という記事がある。
-    この記事ではトランザクション管理で注意しなくてはいけないことや、Spring Frameworkの@Transactionalを使う場合の注意点がまとめられているので、ぜひ一読してほしい。
-    詳細は、\ `IBM DeveloperWorksの記事 <http://www.ibm.com/developerworks/java/library/j-ts1/index.html>`_\ を参照されたい。
-
-    ※IBM DeveloperWorksの記事は2009年の記事のため(古いため)、一部の内容がSpring Framework 4.1使用時の動作と異なる部分がある。
-
-    具体的には、「Listing 7. Using read-only with REQUIRED propagation mode — JPA」の内容である。
-
-    Spring Framework 4.1より、JPAのプロバイダとしてHibernate ORM 4.2以上を使用している場合は、
-    JDBCドライバに対して「読み取り専用のトランザクション」のもとでSQLを実行するように指示することが出来るように改善(\ `SPR-8959 <https://jira.spring.io/browse/SPR-8959>`_\ )されている。
-
-    読み取り専用のトランザクションの扱い方は、JDBCドライバの実装に依存するため、使用するJDBCドライバの仕様を確認されたい。
-
-
- .. note:: **プログラマティックにトランザクションを管理する方法**
-
-    本ガイドラインでは、「宣言型トランザクション管理」を推奨しているが、プログラマティックにトランザクションを管理することもできる。
-    詳細については、\ `Spring Reference Document -Transaction Management(Programmatic transaction management)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-programmatic>`_\ を参照されたい。
-
-
-<tx:annotation-driven>要素の属性について
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-<tx:annotation-driven>にはいくつかの属性が指定でき、デフォルトの振る舞いを拡張することができる。
-
-- :file:`xxx-domain.xml`
-
- .. code-block:: xml
-
-     <tx:annotation-driven
-          transaction-manager="txManager"
-          mode="aspectj"
-          proxy-target-class="true"
-          order="0" />
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 15 75
-
-    * - 項番
-      - 属性
-      - 説明
-
-    * - 1
-      - transaction-manager
-      - \ ``PlatformTransactionManager``\ のbeanを指定する。省略した場合「transactionManager」というbean名で登録されているbeanが使用される。
-
-    * - 2
-      - mode
-      - AOPのモードを指定する。省略した場合、\ ``"proxy"``\ となる。\ ``"aspectj"``\ を指定できるが、原則デフォルトの\ ``"proxy"``\ を使う。
-
-    * - 3
-      - proxy-target-class
-      - proxyのターゲットをクラスに限定するかを指定するフラグ（mode="proxy"の場合のみ、有効な設定）。省略した場合「false」となる。
-
-        * false の場合、対象がインタフェースを実装している場合は、JDK標準のDynamic proxies機能によってproxyされ、
-          インタフェースを実装していない場合はSpring Frameworkに内包されているGCLIBの機能によってproxyされる。
-        * true の場合、インタフェースの実装有無に関係なく、GCLIBの機能によってproxyされる。
-
-    * - 4
-      - order
-      - AOPでAdviceされる順番（優先度）を指定する。省略した場合「最後（もっとも低い優先度）」となる。
-
-|
-
-Tips
---------------------------------------------------------------------------------
-
-.. _tips_business_error-label:
-
-ビジネスルールの違反をフィールドエラーとして扱う方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-| ビジネスルールのエラーをフィールド毎に出力する必要がある場合、Controller側(Bean ValidationまたはSpring Validator)の仕組みを利用する必要がある。
-| このケースの場合、チェックロジック自体はServiceとして実装し、Bean ValidationまたはSpring ValidatorからServiceのメソッドを呼び出す方式で実現することを推奨する。
-| 詳細は、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ の業務ロジックチェックを参照されたい。
-
-.. raw:: latex
-
-   \newpage
-
+ドメイン層の実装
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+    :depth: 3
+
+ドメイン層の役割
+--------------------------------------------------------------------------------
+ドメイン層は、 アプリケーション層に提供する\ **業務ロジックを実装する**\ ためのレイヤとなる。
+
+ドメイン層の実装は、以下3つに分かれる。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 30 60
+
+   * - 項番
+     - 分類
+     - 説明
+   * - | 1.
+     - | :ref:`domainlayer_entity`
+     - | 業務データを保持するためのクラス(Entityクラス)を作成する。
+   * - | 2.
+     - | :ref:`repository-label`
+     - | 業務データを操作するためのメソッドを実装し、Serviceクラスに提供する。
+       | 業務データを操作するためのメソッドとは、具体的には、Entityオブジェクトに対するCRUD操作となる。
+   * - | 3.
+     - | :ref:`service-label`
+     - | 業務ロジックを実行するためのメソッドを実装し、アプリケーション層に提供する。
+       | 業務ロジック内で必要となる業務データは、Repositoryを介して、Entityオブジェクトとして取得する。
+
+本ガイドラインでは、以下2点を目的として、EntityクラスおよびRepositoryを作成する構成を推奨している。
+
+#. 業務ロジック(Service)と業務データへアクセスするためのロジックを分離することで、\ **業務ロジックの実装範囲をビジネスルールに関する実装に専念させる。**\
+#. 業務データに対する操作をRepositoryに集約することで、\ **業務データへのアクセスの共通化を行う。**\
+
+ .. note::
+
+    本ガイドラインでは、EntityクラスおよびRepositoryを作成する構成を推奨しているが、この構成で開発することを強制するものではない。
+
+    作成するアプリケーションの特性、プロジェクトの特性(開発体制や開発プロセスなど)を加味して、採用する構成を決めて頂きたい。
+
+
+ドメイン層の開発の流れ
+--------------------------------------------------------------------------------
+| ドメイン層の開発の流れと、役割分担について説明する。
+| 下記の説明では、複数の開発チームが存在する状態でアプリケーションを構築するケースを想定しているが、 １チームで開発する場合でも、開発フロー自体は変わらない。
+
+ .. figure:: images/service_implementation_flow.png
+    :alt: implementation flow of domain layer
+    :width: 100%
+    :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.80\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 20 80
+
+   * - 項番
+     - 担当チーム
+     - 説明
+   * - | (1)
+     - | 共通開発チーム
+     - | 共通開発チームは、Entityクラスの設計およびEntityクラスの作成を行う。
+   * - | (2)
+     - | 共通開発チーム
+     - | 共通開発チームは、(1)で抽出したEntityクラスに対するアクセスパターンを整理し、Repositoryインタフェースのメソッド設計を行う。
+       | 複数の開発チームで共有するメソッドに対する実装については、共通開発チームで実装することが望ましい。
+   * - | (3)
+     - | 共通開発チーム
+     - | 共通開発チームは、(1)と(2)で作成したEntityクラスと、Repositoryを業務アプリケーション開発チームに提供する。
+       | このタイミングで、各業務アプリケーション開発チームに対して、Repositoryインタフェースの実装を依頼する。
+   * - | (4)
+     - | 業務アプリケーション開発チーム
+     - | 業務アプリケーション開発チームは、自チーム担当分のRepositoryインタフェースの実装を行う。
+   * - | (5)
+     - | 業務アプリケーション開発チーム
+     - | 業務アプリケーション開発チームは、共通開発チームから提供されたEntityクラスおよびRepositoryと自チームで作成したRepositoryを利用して、ServiceインタフェースおよびServiceクラスの実装を行う。
+
+ .. warning::
+
+    開発規模が大きいシステムでは、アプリケーションを複数のチームに分担して開発を行う場合がある。
+    その場合は、EntityクラスおよびRepositoryを設計するための共通チームを設けることを強く推奨する。
+
+    共通チームを設ける体制が組めない場合は、EntityクラスおよびRepositoryの作成せずに、
+    ServiceからO/R Mapper(MyBatisなど)を直接呼び出して、業務データにアクセスする方法を採用することを検討すること。
+
+
+.. _domainlayer_entity:
+
+Entityの実装
+--------------------------------------------------------------------------------
+
+Entityクラスの作成方針
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| Entityは原則以下の方針で作成する。
+| 具体的な作成方法については、\ :ref:`domainlayer_entity_example`\ で示す。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 35 55
+
+   * - 項番
+     - 方針
+     - 補足
+   * - | 1.
+     - | Entityクラスは、テーブル毎に作成する。
+     - | ただし、テーブル間の関連を保持するためのマッピングテーブルについては、Entityクラスは不要である。
+       | また、テーブルが正規化されていない場合は、必ずしもテーブル毎にはならない。テーブルが正規化されていない時のアプローチは、\ :ref:`表外の警告欄と備考欄 <domainlayer_entity_policy_warning_note>`\ を参照されたい。
+   * - | 2.
+     - | テーブルにFK(Foreign Key)がある場合は、FK先のテーブルのEntityクラスをプロパティとして定義する。
+     - | FK先のテーブルとの関係が、1:Nになる場合は、\ ``java.util.List<E>``\ または\ ``java.util.Set<E>``\ のどちらかを使用する。
+       | FK先のテーブルに対応するEntityのことを、本ガイドライン上では、関連Entityと呼ぶ。
+   * - | 3.
+     - | コード系テーブルは、Entityとして扱うのではなく、\ ``java.lang.String``\ などの基本型で扱う。
+     - | コード系テーブルとは、コード値と、コード名のペアを管理するためのテーブルのことである。
+       | コード値によって処理分岐する必要がある場合は、コード値に対応するenumクラスを作成し、作成したenumをプロパティとして定義することを推奨する。
+
+.. _domainlayer_entity_policy_warning_note:
+
+ .. warning::
+
+    テーブルが正規化されていない場合は、 以下の点を考慮して **EntityクラスおよびRepositoryを作成する方式を採用すべきか検討した方がよい。**
+    特に正規化されていないテーブルとJPAとの相性はあまりよくないので、テーブルが正規化されていない場合は、JPAを使用してEntityオブジェクトを操作する方式は採用しない方が無難である。
+
+    * | Entityを作成する難易度が高くなるため、適切なEntityクラスの作成が出来ない可能性がある。
+      | 加えて、Entityクラスを作成するために、必要な工数が多くなる可能性も高い。
+      | 前者は、「適切に正規化できるエンジニアをアサインできるか？」という観点、後者は、「工数をかけて正規化されたEntityクラスを作成する価値があるか？」という観点で、検討することになる。
+    * | 業務データにアクセスする際の処理として、Entityクラスとテーブルの構成の差分を埋めるための処理が、必要となる。
+      | これは、「工数をかけて、Entityとテーブルの差分を埋めるための処理を実装する価値があるか？」という観点で検討することになる。
+
+    EntityクラスとRepositoryを作成する方式を採用することを推奨するが、作成するアプリケーションの特性、
+    プロジェクトの特性(開発体制や開発プロセスなど)を加味して、採用する構成を決めて頂きたい。
+
+.. _domainlayer_entity_policy_note:
+
+ .. note::
+
+    テーブルは正規化されていないが、アプリケーションとして、正規化されたEntityとして業務データを扱いたい場合は、
+    インフラストラクチャ層のRepositoryImplの実装として、MyBatisを採用することを推奨する。
+
+    MyBatisは、データベースで管理されているレコードとオブジェクトをマッピングするという考え方ではなく、
+    SQLとオブジェクトをマッピングという考え方で開発されたO/R Mapperであるため、
+    SQLの実装次第で、テーブル構成に依存しないオブジェクトへのマッピングができる。
+
+
+.. _domainlayer_entity_example:
+
+Entityクラスの作成例
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| Entityクラスの作成方法を、具体例を用いて説明する。
+| 以下は、ショッピングサイトで商品を購入する際に必要となる業務データを、Entityクラスとして作成する例となっている。
+
+テーブル構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+商品を購入する際に必要となる業務データを保持するテーブルは、以下の構成となっている。
+
+ .. figure:: images/service_entity_table_layout.png
+    :alt: Example of table layout
+    :width: 100%
+    :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.15\linewidth}|p{0.55\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 20 15 55
+
+    * - 項番
+      - 分類
+      - テーブル名
+      - 説明
+    * - | (1)
+      - | トランザクション系
+      - | t_order
+      - | 注文を保持するテーブル。１つの注文に対して1レコードが格納される。
+    * - | (2)
+      - |
+      - | t_order_item
+      - | １つの注文で購入された商品を保持するテーブル。１つの注文で複数の商品が購入された場合は商品数分レコードが格納される。
+    * - | (3)
+      - |
+      - | t_order_coupon
+      - | １つの注文で使用されたクーポンを保持するテーブル。１つの注文で複数のクーポンが使用された場合はクーポン数分レコードが格納される。クーポンを使用しなかった場合はレコードは格納されない。
+    * - | (4)
+      - | マスタ系
+      - | m_item
+      - | 商品を定義するマスタテーブル。
+    * - | (5)
+      - |
+      - | m_category
+      - | 商品のカテゴリを定義するマスタテーブル。
+    * - | (6)
+      - |
+      - | m_item_category
+      - | 商品が所属するカテゴリを定義するマスタテーブル。商品とカテゴリのマッピングを保持している。1つの商品は複数のカテゴリに属すことができるモデルとなっている。
+    * - | (7)
+      - |
+      - | m_coupon
+      - | クーポンを定義するマスタテーブル。
+    * - | (8)
+      - | コード系
+      - | c_order_status
+      - | 注文ステータスを定義するコードテーブル。
+
+
+Entity構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+上記テーブルから作成方針に則ってEntityクラスを作成すると、以下のような構成となる。
+
+ .. figure:: images/service_entity_entity_layout.png
+    :alt: Example of entity layout
+    :width: 100%
+    :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.65\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 15 65
+
+    * - 項番
+      - クラス名
+      - 説明
+    * - | (1)
+      - | Order
+      - | t_orderテーブルの1レコードを表現するEntityクラス。
+        | 関連Entityとして、\ ``OrderItem``\ および\ ``OrderCoupon``\ を複数保持する。
+    * - | (2)
+      - | OrderItem
+      - | t_order_itemテーブルの1レコードを表現するEntityクラス。
+        | 関連Entityとして、 ``Item`` を保持する。
+    * - | (3)
+      - | OrderCoupon
+      - | t_order_couponテーブルの1コードを表現するEntityクラス。
+        | 関連Entityとして、\ ``Coupon``\ を保持する。
+    * - | (4)
+      - | Item
+      - | m_itemテーブルの1コードを表現するEntityクラス。
+        | 関連Entityとして、所属している\ ``Category``\ を複数保持する。\ ``Item``\ と\ ``Category``\ の紐づけは、m_item_categoryテーブルによって行われる。
+    * - | (5)
+      - | Category
+      - | m_categoryテーブルの1レコードを表現するEntityクラス。
+    * - | (6)
+      - | ItemCategory
+      - | m_item_categoryテーブルは、m_itemテーブルとm_categoryテーブルとの関連を保持するためのマッピングテーブルなので、Entityクラスは作成しない。
+    * - | (7)
+      - | Coupon
+      - | m_couponテーブルの1レコードを表現するEntityクラス。
+    * - | (8)
+      - | OrderStatus
+      - | c_order_statusテーブルはコード系テーブルなので、Entityクラスは作成しない。
+
+
+上記のエンティティ図をみると、ショッピングサイトのアプリケーションとして主体のEntityクラスとして扱われるのは、
+Orderクラスのみと思ってしまうかもしれないが、主体となる得るEntityクラスはOrderクラス以外にも存在する。
+
+以下に、主体のEntityとしてなり得るEntityと、主体のEntityにならないEntityを分類する。
+
+ .. figure:: images/service_entity_entity_class_layout.png
+    :alt: Example of entity layout
+    :width: 100%
+    :align: center
+
+|
+
+ショッピングサイトのアプリケーションを作成する上で、主体のEntityとしてなり得るのは、以下4つである。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 30 60
+
+   * - 項番
+     - Entityクラス
+     - 主体のEntityとなる得る理由
+   * - | (1)
+     - | Orderクラス
+     - | ショッピングサイトにおいて、最も重要な主体となるEntityクラスのひとつである。
+       | Orderクラスは、注文そのものを表現するEntityであり、Orderクラスなくしてショッピングサイトを作成することはできない。
+   * - | (2)
+     - | Itemクラス
+     - | ショッピングサイトにおいて、最も重要な主体となるEntityクラスのひとつである。
+       | Itemクラスは、ショッピングサイトで扱っている商品そのものを表現するEntityであり、Itemクラスなくしてショッピングサイトを作成することはできない。
+   * - | (3)
+     - | Categoryクラス
+     - | 一般的なショッピングサイトでは、トップページや共通的メニューとして、サイトで扱っている商品のカテゴリを表示している。
+       | このようなショッピングサイトのアプリケーションでは、Categoryクラスを主体のEntityとして扱うことになる。カテゴリの一覧検索などの処理が想定される。
+   * - | (4)
+     - | Couponクラス
+     - | ショッピングサイトにおいて、商品の販売促進を行う手段としてクーポンによる値引きを行うことがある。
+       | このようなショッピングサイトのアプリケーションでは、Couponクラスを主体のEntityとして扱うことなる。クーポンの一覧検索などの処理が想定される。
+
+
+ショッピングサイトのアプリケーションを作成する上で、主体のEntityとならないのは、以下2つである。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 30 60
+
+   * - 項番
+     - Entityクラス
+     - 主体のEntityにならない理由
+   * - | (5)
+     - | OrderItemクラス
+     - | このクラスは、1つの注文で購入された商品1つを表現するクラスであり、Orderクラスの関連Entityとしてのみ存在するクラスとなる。
+       | そのため、OrderItemクラスが、主体のEntityとして扱われることは原則ない。
+   * - | (6)
+     - | OrderCoupon
+     - | このクラスは、1つの注文で使用されたクーポン1つを表現するクラスであり、Orderクラスの関連Entityとしてのみ存在するクラスとなる。
+       | そのため、OrderCouponクラスが主体のEntityとして扱われることは原則ない。
+
+
+.. _repository-label:
+
+Repositoryの実装
+--------------------------------------------------------------------------------
+
+Repositoryの役割
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Repositoryは、以下2つの役割を担う。
+
+1. | **Serviceに対して、Entityのライフサイクルを制御するための操作（Repositoryインタフェース）を提供する。**
+   | Entityのライフサイクルを制御するための操作は、EntityオブジェクトへのCRUD操作となる。
+
+ .. figure:: images/repository_responsibility_1.png
+    :alt: provide access operations to entity
+    :width: 100%
+    :align: center
+
+
+2. | **Entityを永続化する処理(Repositoryインタフェースの実装クラス)を提供する。**
+   | Entityオブジェクトは、アプリケーションのライフサイクル(サーバの起動や、停止など)に依存しないレイヤに、永続化しておく必要がある。
+   | Entityの永続先は、リレーショナルデータベースになることが多いが、NoSQLデータベース、キャッシュサーバ、外部システム、ファイル（共有ディスク）などになることもある。
+   | 実際の永続化処理は、O/R Mapperなどから提供されているAPIを使って行う。
+   | この役割は、インフラストラクチャ層のRepositoryImplで実装することになる。詳細については、\ :doc:`InfrastructureLayer`\ を参照されたい。
+
+ .. figure:: images/repository_responsibility_2.png
+    :alt: persist entity
+    :width: 100%
+    :align: center
+
+
+Repositoryの構成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Repositoryは、RepositoryインタフェースとRepositoryImplで構成され、それぞれ以下の役割を担う。
+
+ .. figure:: images/repository_classes_responsibility.png
+   :alt: persist entity
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.30\linewidth}|p{0.40\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 20 30 40
+
+   * - 項番
+     - クラス(インタフェース)
+     - 役割
+     - 説明
+
+   * - | (1)
+     - | Repositoryインタフェース
+     - | 業務ロジック(Service)を実装する上で必要となるEntityのライフサイクルを制御するメソッドを定義する。
+     - | 永続先に依存しないEntityの、CRUD操作用のメソッドを定義する。
+       | Repositoryインタフェースは、業務ロジック(Service)を実装する上で必要となるEntityの操作を定義する役割を担うので、ドメイン層に属することになる。
+
+   * - | (2)
+     - | RepositoryImpl
+     - | Repositoryインタフェースで定義されたメソッドの実装を行う。
+     - | 永続先に依存したEntityのCRUD操作の実装を行う。実際のCRUD処理は、Spring Framework、O/R Mapper、ミドルウェアなどから提供されている永続処理用のAPIを利用して行う。
+       | RepositoryImplは、Repositoryインタフェースで定義された操作の実装を行う役割を担うので、インフラストラクチャ層に属することになる。
+       | RepositoryImplの実装については、\ :doc:`InfrastructureLayer`\ を参照されたい。
+
+
+| 永続先が複数になる場合、以下のような構成となる。
+| 以下のような構成を取ることで、Entityの永続先に依存したロジックを、業務ロジック(Service)から排除することができる。
+
+ .. figure:: images/repository_not_depends_on.png
+   :alt: persist entity
+   :width: 100%
+   :align: center
+
+ .. note:: **永続先に依存したロジックを、Serviceから100％排除できるのか？**
+
+    永続先の制約や、使用するライブラリの制約などにより、排除できないケースもある。
+    可能な限り、永続先に依存するロジックは、Serviceではなく、RepositoryImplで実装することを推奨するが、
+    永続先に依存するロジックを排除するのが難しい場合や、排除することで得られるメリットが少ない場合は、
+    無理に排除せず、業務ロジック(Service)の処理として、永続先に依存するロジックを実装してもよい。
+
+    排除できない具体例として、Spring Data JPAから提供されている\ ``org.springframework.data.jpa.repository.JpaRepository``\ インタフェース
+    のsaveメソッドの呼び出し時に、一意制約エラーをハンドリングしたい場合である。
+    JPAではEntityへの操作はキャッシュされ、トランザクションコミット時にSQLを発行する仕組みになっている。
+    そのため、JpaRepositoryのsaveメソッドを呼び出しても、SQLは発行されないので、一意制約違反をロジックでハンドリングすることができない。
+    JPAでは、明示的にSQLを発行する手段として、キャッシュされている操作を反映するためのメソッド（flushメソッド）があり、
+    JpaRepositoryではsaveAndFlush、flushというメソッドが同じ目的で提供されている。
+    そのため、Spring Data JPAのJpaRepositoryを使って、一意制約違反エラーをハンドリングする必要がある場合は、
+    JPA依存のメソッド（saveAndFlushや、flush）を呼び出す必要がある。
+
+ .. warning::
+
+    Repositoryを設ける最も重要な目的は、永続先に依存するロジックを、業務ロジックから排除することではないという点である。
+    最も重要な目的は、業務データへアクセスするための操作をRepositoryへ分離することで、業務ロジック(Service)の実装範囲をビジネスルールに関する実装に専念させるという点である。
+    結果として、永続先に依存するロジックは業務ロジック(Service)ではなく、Repository側に実装される事になる。
+
+
+Repositoryの作成方針
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Repositoryは原則以下の方針で作成する。
+
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 35 55
+
+   * - 項番
+     - 方針
+     - 補足
+   * - | 1.
+     - | Repositoryは、主体となるEntityに対して作成する。
+     - | これは、関連Entityを操作するためだけのRepositoryが不要であることを意味する。
+       | ただし、アプリケーションの特性(高い性能要件があるアプリケーションなど)では、関連Entityを操作するためのRepositoryを設けた方が、よい場合もある。
+   * - | 2.
+     - | Repositoryインタフェースと、RepositoryImplは、基本的にドメイン層の同じパッケージに配置する。
+     - | Repositoryは、Repositoryインタフェースがドメイン層、RepositoryImplがインフラストラクチャ層に属することとなるが、
+       | Javaのパッケージとしては、基本的には、ドメイン層のRepositoryインタフェースと同じパッケージでよい。
+   * - | 3.
+     - | Repositoryで使用するDTOは、Repositoryインタフェースと同じパッケージに配置する。
+     - | 例えば、検索条件を保持するDTOや、Entityの一部の項目のみを定義したサマリ用のDTOなどがあげられる。
+
+
+Repositoryの作成例
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| Repositoryの作成例を説明する。
+| 以下は、\ :ref:`domainlayer_entity_example`\ の説明で使用した、EntityクラスのRepositoryを作成する例となっている。
+
+
+Repository構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ :ref:`domainlayer_entity_example`\ の説明で使用した、EntityクラスのRepositoryを作成すると、以下のような構成となる。
+
+ .. figure:: images/domainlayer_repository_layout.png
+   :alt: Example of repository layout
+   :width: 100%
+   :align: center
+
+
+| 主体となるEntityクラスに対して、Repositoryを作成している。
+| パッケージの推奨構成については、\ :ref:`application-layering_project-structure`\ を参照されたい。
+
+
+.. _repository-interface-label:
+
+Repositoryインタフェースの定義
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Repositoryインタフェースの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+以下にRepositoryインタフェースの作成例を紹介する。
+
+- :file:`SimpleCrudRepository.java`
+
+ | このインタフェースは、シンプルなCRUD操作のみを提供している。
+ | メソッドのシグネチャは、Spring Dataから提供されている\ ``CrudRepository``\ インタフェースや、\  ``PagingAndSortingRepository``\ インタフェースを参考に作成している。
+
+ .. code-block:: java
+
+     public interface SimpleCrudRepository<T, ID extends Serializable> {
+         // (1)
+         T findOne(ID id);
+         // (2)
+         boolean exists(ID id);
+         // (3)
+         List<T> findAll();
+         // (4)
+         Page<T> findAll(Pageable pageable);
+         // (5)
+         long count();
+         // (6)
+         T save(T entity);
+         // (7)
+         void delete(T entity);
+     }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 指定したIDに対応するEntityを、取得するためのメソッド。
+    * - | (2)
+      - | 指定したIDに対応するEntityが、存在するか判定するためのメソッド。
+    * - | (3)
+      - | 全てのEntityを取得するためのメソッド。 Spring Dataでは、\ ``java.util.Iterable``\ であったが、サンプルとしては、\ ``java.util.List``\ にしている。
+    * - | (4)
+      - | 指定したページネーション情報（取得開始位置、取得件数、ソート情報）に該当するEntityのコレクションを取得するためのメソッド。
+        | ``Pageable`` インタフェースおよび\ ``Page``\ インタフェースはSpring Dataより提供されているクラス（インターフェース）である。
+    * - | (5)
+      - | Entityの総件数を取得するためのメソッド。
+    * - | (6)
+      - | 指定されたEntityのコレクションを保存（作成、更新）するためのメソッド。
+    * - | (7)
+      - | 指定したEntityを、削除するためのメソッド。
+
+
+- :file:`TodoRepository.java`
+
+ 下記は、チュートリアルで作成したTodoエンティティのRepositoryを、上で作成した\ ``SimpleCrudRepository``\ インタフェースベースに作成した場合の例である。
+
+ .. code-block:: java
+
+     // (1)
+     public interface TodoRepository extends SimpleCrudRepository<Todo, String> {
+         // (2)
+         long countByFinished(boolean finished);
+     }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+
+    * - | (1)
+      - | エンティティの型を示すジェネリック型「T」にTodoエンティティ、エンティティのID型を示すジェネリック型「ID」にStringクラスを指定することで、
+        | Todoエンティティ用のRepositoryインタフェースが生成される。
+    * - | (2)
+      - | \ ``SimpleCrudRepository``\ インタフェースから提供されていないメソッドを追加している。
+        | ここでは、「指定したタスクの終了状態に一致するTodoエンティティの件数を取得するメソッド」を追加している。
+
+
+Repositoryインタフェースのメソッド定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| 汎用的なCRUD操作を行うメソッドについては、Spring Dataから提供されている\ ``CrudRepository``\ や、\ ``PagingAndSortingRepository``\ と同じシグネチャにすることを推奨する。
+| ただし、コレクションを返却する場合は、\ ``java.lang.Iterable``\ ではなく、ロジックで扱いやすいインタフェース（\ ``java.util.Collection``\ や、\ ``java.util.List``\ ）でもよい。
+| 実際のアプリケーション開発では、汎用的なCRUD操作のみで開発できることは稀で、かならずメソッドの追加が必要になる。
+| 追加するメソッドは、以下のルールに則り追加することを推奨する。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.70\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 20 70
+
+    * - 項番
+      - メソッドの種類
+      - ルール
+    * - 1.
+      - 1件検索系のメソッド
+      - #. メソッド名は、条件に一致するEntityを、1件取得するためのメソッドであることを明示するために、\ **findOneBy**\ で始める。
+        #. メソッド名のfindOneBy以降は、検索条件となるフィールドの物理名、または、論理的な条件名などを指定し、どのような状態のEntityが取得されるのか、推測できる名前とする。
+        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
+        #. 返り値は、Entityクラスを指定する。
+    * - 2.
+      - 複数件検索系のメソッド
+      - #. メソッド名は、条件に一致するEntityを、すべて取得するためのメソッドであることを明示するために、 **findAllBy** で始める。
+        #. メソッド名のfindAllBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityが取得されるのか推測できる名前とする。
+        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
+        #. 返り値は、Entityクラスのコレクションを指定する。
+    * - 3.
+      - 複数件ページ検索系のメソッド
+      - #. メソッド名は、条件に一致するEntityの該当ページ部分を取得するためのメソッドである事を明示するために、 **findPageBy** で始める。
+        #. メソッド名のfindPageBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityが取得されるのか推測できる名前とする。
+        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。ページネーション情報（取得開始位置、取得件数、ソート情報）は、Spring Dataより提供されている ``Pageable`` インタフェースとすることを推奨する。
+        #. 返り値は、Spring Dataより提供されている ``Page`` インタフェースとすることを推奨する。
+    * - 4.
+      - 件数のカウント系のメソッド
+      - #. メソッド名は、条件に一致するEntityの件数をカウントするためのメソッドである事を明示するために、 **countBy** で始める。
+        #. 返り値は、long型にする。
+        #. メソッド名のcountBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityの件数が取得されるのか推測できる名前とする。
+        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
+    * - 5.
+      - 存在判定系のメソッド
+      - #. メソッド名は、条件に一致するEntityが存在するかチェックするためのメソッドである事を明示するために、 **existsBy** で始める。
+        #. メソッド名のexistsBy以降は、検索条件となるフィールドの物理名または論理的な条件名を指定し、どのような状態のEntityの存在チェックを行うのか推測できる名前とする。
+        #. 引数は、条件となるフィールド毎に用意する。ただし、条件が多い場合は、条件をまとめたDTOを用意してもよい。
+        #. 返り値は、boolean型にする。
+
+ .. note::
+
+     更新系のメソッドも、同様のルールに則り、追加することを推奨する。
+     findの部分が、updateまたはdeleteとなる。
+
+
+- :file:`Todo.java` (Entity)
+
+ .. code-block:: java
+
+     public class Todo implements Serializable {
+         private String todoId;
+         private String todoTitle;
+         private boolean finished;
+         private Date createdAt;
+         // ...
+      }
+
+|
+
+- :file:`TodoRepository.java`
+
+ .. code-block:: java
+
+      public interface TodoRepository extends SimpleCrudRepository<Todo, String> {
+          // (1)
+          Todo findOneByTodoTitle(String todoTitle);
+          // (2)
+          List<Todo> findAllByUnfinished();
+          // (3)
+          Page<Todo> findPageByUnfinished();
+          // (4)
+          long countByExpired(int validDays);
+          // (5)
+          boolean existsByCreateAt(Date date);
+      }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | タイトルが一致するTODO(todoTitle=引数で指定した値のTODO)を取得するメソッドの定義例。
+        | findOneBy以降に、条件となるフィールドの物理名(todoTitle)を指定している。
+    * - | (2)
+      - | 未完了のTODO(finished=falseのTODO)を全件取得するメソッドの定義例。
+        | findAllBy以降に、論理的な条件名を指定している。
+    * - | (3)
+      - | 未完了のTODO(finished=falseのTODO)の該当ページ部分を取得するメソッドの定義例。
+        | findPageBy以降に、論理的な条件名を指定している。
+    * - | (4)
+      - | 完了期限を過ぎたTODO(createdAt < sysdate - 引数で指定した有効日数 && finished=falseのTODO)の件数を取得するメソッドの定義例。
+        | countBy以降に、論理的な条件名を指定している。
+    * - | (5)
+      - | 指定日に作成されている、TODO(createdAt=指定日)が存在するか判定するメソッドの定義例。
+        | existsBy以降に、条件となるフィールドの物理名(createdAt)を指定している。
+
+
+RepositoryImplの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+RepositoryImplの実装については、\ :doc:`InfrastructureLayer`\ を参照されたい。
+
+
+.. _service-label:
+
+Serviceの実装
+--------------------------------------------------------------------------------
+
+Serviceの役割
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Serviceは、以下2つの役割を担う。
+
+1. | **Controllerに対して業務ロジックを提供する。**
+   | 業務ロジックは、アプリケーションで使用する業務データの参照、更新、整合性チェックおよびビジネスルールに関わる各種処理で構成される。
+   | 業務データの参照および更新処理をRepository(またはO/R Mapper)に委譲し、\ **Serviceではビジネスルールに関わる処理の実装に専念することを推奨する。**\
+
+ .. note:: **ControllerとServiceで実装するロジックの責任分界点について**
+
+    本ガイドラインでは、ControllerとServiceで実装するロジックは、以下のルールに則って実装することを推奨する。
+
+    1. クライアントからリクエストされたデータに対する単項目チェック、相関項目チェックはController側(Bean ValidationまたはSpring Validator)で行う。
+
+    2. Serviceに渡すデータへの変換処理(Bean変換、型変換、形式変換など)は、ServiceではなくController側で行う。
+
+    3. \ **ビジネスルールに関わる処理はServiceで行う。**\ 業務データへのアクセスは、RepositoryまたはO/R Mapperに委譲する。
+
+    4. ServiceからControllerに返却するデータ（クライアントへレスポンスするデータ）に対する値の変換処理(型変換、形式変換など)は、Serviceではなく、Controller側（Viewクラスなど）で行う。
+
+
+ .. figure:: images/service_responsibility-of-logic.png
+    :alt: responsibility of logic
+    :width: 90%
+    :align: center
+
+
+2. | **トランザクション境界を宣言する。**
+   | データの一貫性を保障する必要がある処理（主にデータの更新処理）を行う業務ロジックの場合、トランザクション境界を宣言する。
+   | データの参照処理の場合でも業務要件によっては、トランザクション管理が必要になる場合もあるので、その場合は、トランザクション境界を宣言する。
+   | \ **トランザクション境界は、原則Serviceに設ける。**\ アプリケーション層(Web層)にトランザクション境界が設けられている場合、業務ロジックの抽出が正しく行われていない可能性があるので、見直しを行うこと。
+
+ .. figure:: images/service_transaction-boundary.png
+    :alt: transaction boundary
+    :width: 90%
+    :align: center
+
+ 詳細は、\ :ref:`service_transaction_management`\を参照されたい。
+
+
+.. _service-constitution-role-label:
+
+Serviceのクラス構成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| Serviceは、ServiceクラスとSharedServiceクラスで構成され、それぞれ以下の役割を担う。
+| 本ガイドラインでは、\ ``@Service``\ アノテーションが付与されたPOJO(Plain Old Java Object)のことを、ServiceクラスおよびSharedServiceクラスと定義しているが、メソッドのシグネチャを限定するようなインタフェースや、基底クラスを作成することを、禁止しているわけではない。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.30\linewidth}|p{0.45\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 15 30 45
+
+   * - 項番
+     - クラス
+     - 役割
+     - 依存関係に関する注意点
+
+   * - 1.
+     - Serviceクラス
+     - | **特定のControllerに対して業務ロジックを提供する。**
+       | Serviceクラスのメソッドは、\ **再利用されることを考慮したロジックは実装しない。**\
+     - #. \ **他のServiceクラスのメソッドを呼び出すことは、原則禁止とする（※図中1-1）。**\ 他のServiceと処理を共有したい場合は、SharedServiceクラスのメソッドを作成し、呼び出すようにすることを推奨する。
+       #. Serviceクラスのメソッドは、複数のControllerから呼び出してもよい（※図中1-2）。ただし、\ **呼び出し元のControllerによって、処理分岐が必要になる場合は、Controller毎に、Serviceクラスのメソッドを作成することを推奨する。**\ その上で共通的な処理は、SharedServiceクラスのメソッドを作成し呼び出すようにする。
+   * - 2
+     - SharedServiceクラス
+     - | 複数のControllerやServiceクラスで、\ **共有(再利用)されるロジックを提供する。**\
+     - #. 他のSharedServiceクラスのメソッドを呼び出してもよいが（※図中2-1）、 **呼び出し階層が複雑にならないように考慮すること。** 呼び出し階層が複雑になると保守性が低下する危険性が高まるので注意が必要。
+       #. ControllerからSharedServiceクラスのメソッドを呼び出してもよい（※図中2-2）が、\ **トランザクション管理の観点で問題がない場合に限る。**\ 直接呼び出した場合に、トランザクション管理の観点で問題がある場合は、Serviceクラスにメソッドを用意し、適切なトランザクション管理が行われるようにすること。
+       #. SharedServiceクラスから\ **Serviceクラスのメソッドを呼び出すことは禁止する（※図中2-3）。**\
+
+
+| Serviceクラスと、SharedServiceクラスの依存関係を、以下に示す。
+| 図中の番号は、上の表の「依存関係に関する注意点」欄の記載と連動しているため、あわせて確認すること。
+
+ .. figure:: images/service_class-dependency.png
+   :alt: class dependency
+   :width: 100%
+   :align: center
+
+
+ServiceクラスとSharedServiceクラスを分ける理由について
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 業務ロジックを構成する処理の中には、再利用できない(すべきでない)ロジックと再利用できる（すべき）ロジックが存在する。
+| この二つのロジックを、同じクラスのメソッドとして実装してしまうと、再利用してよいメソッドか否かの判断が、難しくなる。
+| この問題を回避する目的として、本ガイドラインでは、\ **再利用されることを想定しているメソッドについては、SharedServiceクラスに実装することを強く推奨している。**\
+
+
+Serviceクラスから、別のServiceクラスの呼び出しを禁止する理由について
+"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 本ガイドラインでは、Serviceクラスのメソッドから、別のServiceクラスのメソッドを呼び出すことを、原則禁止としている。
+| これは、Serviceクラスは、特定のControllerに対して業務ロジックを提供するクラスであり、別のServiceから利用される前提で作成しないためである。
+| 仮に、別のServiceクラスから直接呼び出してしまうと、以下のような状況が発生しやすくなり、\ **保守性などを低下させる危険性が、高まる。**\
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 発生しうる状況
+   * - 1.
+     - | 本来は、呼び出し元のServiceクラスで実装すべきロジックが、処理を一ヶ所にまとめたいという理由などにより、呼び出し先のServiceクラスで実装されてしまう。
+       | その際に、\ **呼び出し元を意識するための引数（フラグ）などが、安易に追加され、間違った共通化が行われてしまう。結果として、見通しの悪いモジュール構成になってしまう。**\
+   * - 2.
+     - | 呼び出し経路やパターンが多くなることで、\ **仕様変更や、バグ改修の際のソース修正に対する影響範囲の把握が難しくなる。**\
+
+
+メソッドのシグネチャを限定するようなインタフェースや基底クラスについて
+"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 業務ロジックの作りを統一したい場合に、シグネチャを限定するようなインタフェースや、基底クラスを作成することがある。
+| シグネチャを限定するインタフェースや基底クラスを設けることで、開発者ごとに、作りの違いが発生しないようにする目的もある。
+
+ .. note::
+
+    大規模開発において、サービスイン後の保守性等を考慮して業務ロジックの作りを合わせておきたい場合や、開発者のひとりひとりのスキルがあまり高くない場合などの状況下では、
+    シグネチャを限定するようなインタフェースを設けることも、選択肢の一つとして考えてもよい。
+
+    本ガイドラインでは、シグネチャを限定するようなインタフェースを作成することは、特に推奨していないが、
+    プロジェクトの特性を加味して、どのようなアーキテクチャにするか決めて頂きたい。
+
+\
+
+
+ .. note:: **シグネチャを制限するインタフェースおよび基底クラスの実装サンプル**
+    - シグネチャを限定するようなインタフェース
+
+     .. code-block:: java
+
+        // (1)
+        public interface BLogic<I, O> {
+          O execute(I input);
+        }
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - 項番
+          - 説明
+        * - | (1)
+          - | 業務ロジックの実装メソッドのシグニチャを制限するためのインタフェース。
+            | 上記例では、入力情報(I)と出力情報(O)の総称型として定義されており、 業務ロジックを実行するためのメソッド(execute)を一つもつ。
+            | 本ガイドラインでは、上記のようなインタフェースを、BLogicインタフェースと呼ぶ。
+
+    - Controller
+
+     .. code-block:: java
+
+        // (2)
+        @Inject
+        XxxBLogic<XxxInput, XxxOutput> xxxBLogic;
+
+        public String reserve(XxxForm form, RedirectAttributes redirectAttributes) {
+
+            XxxInput input = new XxxInput();
+            // omitted
+
+            // (3)
+            XxxOutput output = xxxBlogic.execute(input);
+
+            // omitted
+
+            redirectAttributes.addFlashAttribute(output.getTourReservation());
+            return "redirect:/xxx?complete";
+        }
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - 項番
+          - 説明
+        * - | (2)
+          - | Controllerは、呼び出すBLogicインタフェースをInjectする。
+        * - | (3)
+          - | Controllerは、BLogicインタフェースのexecuteメソッドを呼び出し、業務ロジックを実行する。
+
+    定型的な共通処理をServiceに盛り込む場合、ビジネスロジックの処理フローを統一したい場合に、メソッドのシグネチャを限定するような基底クラスを作成することがある。
+
+    - シグネチャを限定するような基底クラス
+
+     .. code-block:: java
+
+
+        public abstract class AbstractBLogic<I, O> implements BLogic<I, O> {
+
+            public O execute(I input){
+              try{
+
+                  // omitted
+
+                  // (4)
+                  preExecute(input);
+
+                  // (5)
+                  O output = doExecute(input);
+
+                  // omitted
+
+                  return output;
+              } finally {
+                  // omitted
+              }
+
+            }
+
+            protected abstract void preExecute(I input);
+
+            protected abstract O doExecute(I input);
+
+        }
+
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - 項番
+          - 説明
+        * - | (4)
+          - | 基底クラスより、業務ロジックを実行する前の、事前処理を行うメソッドを呼び出す。
+            | 上記のような事前処理を行うメソッドでは、ビジネスルールのチェックなどを実装することになる。
+        * - | (5)
+          - | 基底クラスより、業務ロジックを実行するメソッドを呼び出す。
+
+
+    以下に、シグネチャを限定するような、基底クラスを継承する場合の、サンプルを示す。
+
+
+    - BLogicクラス(Service)
+
+     .. code-block:: java
+
+        public class XxxBLogic extends AbstractBLogic<XxxInput, XxxOutput> {
+
+            // (6)
+            protected void preExecute(XxxInput input) {
+
+                // omitted
+                Tour tour = tourRepository.findOne(input.getTourId());
+                Date reservationLimitDate = tour.reservationLimitDate();
+                if(input.getReservationDate().after(reservationLimitDate)){
+                    throw new BusinessException(ResultMessages.error().add("e.xx.xx.0001"));
+                }
+
+            }
+
+            // (7)
+            protected XxxOutput doExecute(XxxInput input) {
+                TourReservation tourReservation = new TourReservation();
+
+                // omitted
+
+                tourReservationRepository.save(tourReservation);
+                XxxOutput output = new XxxOutput();
+                output.setTourReservation(tourReservation);
+
+                // omitted
+                return output;
+            }
+
+        }
+
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - 項番
+          - 説明
+        * - | (6)
+          - | 業務ロジックを実行する前の事前処理を実装する。
+            | ビジネスルールのチェックなどを実装する事になる。
+        * - | (7)
+          - | 業務ロジックを実装する。
+            | ビジネスルールを充たすために、ロジックを実装する事になる。
+
+
+.. _service-creation-unit-label:
+
+Serviceの作成単位
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Serviceの作成単位は主に以下の３パターンとなる。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.25\linewidth}|p{0.50\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 15 25 50
+
+   * - 項番
+     - 単位
+     - 作成方法
+     - 特徴
+
+   * - 1.
+     - | Entity毎
+     - | 主体となるEntityと対でServiceを作成する。
+     - | 主体となるEntityとは、業務データの事であり、 **業務データを中心にしてアプリケーションを設計・実装する場合は、この単位でServiceを作成することを推奨する。**
+       |
+       | この単位でServiceを作成すると、業務データ毎に業務ロジックが集約されるため、業務処理の共通化が図られやすい。
+       | ただし、このパターンでServiceを作成した場合、同時に大量の開発者を投入して作成するアプリケーションとの相性は、あまりよくない。どちらかと言うと、小規模・中規模のアプリケーションを開発する場合に向いているパターンと言える。
+   * - 2.
+     - | ユースケース毎
+     - | ユースケースと対でServiceを作成する。
+     - | **画面からのイベントを中心にしてアプリケーションを設計・実装する場合は、この単位でServiceを作成することになる。**
+       |
+       | この単位でServiceを作成する場合は、ユースケース毎に担当者を割り当てることが出来るため、同時に大量の開発者を投入して開発するアプリケーションとの相性はよい。
+       | 一方で、このパターンでServiceを作成すると、ユースケース内での業務ロジックの共通化は行うことができるが、ユースケースを跨いだ業務ロジックの共通化は行われない可能性が高くなる。
+       | ユースケースを跨いで業務ロジックの共通化を行う必要がある場合は、共通化を行うための共通チームを設けるなどの工夫が必要となる。
+   * - 3
+     - | イベント毎
+     - | 画面から発生するイベントと対でServiceを作成する。
+     - | **画面からのイベントを中心にしてアプリケーションを設計・実装する場合で且つ「TERASOLUNA ViSC」を使用してBLogicクラスを生成する場合は、この単位でServiceを作成することになる。**
+       | 本ガイドラインでは、このような単位で作成されるServiceクラスの事を、BLogicと呼ぶ。
+       |
+       | この単位でServiceを作成する場合の特徴としては、基本的にはユースケース毎に作成する際と同じである。
+       | ただし、イベント毎にServiceクラスを設計・実装する事になるため、ユースケース毎に作成する場合に比べて、より共通化が行われない可能性が高くなる。
+       | 本ガイドラインとしては、イベント毎に作成するパターンは特に推奨しない。ただし、大規模開発において、保守性等を考慮して業務ロジックの作りを合わせておきたいといった理由がある場合は、イベント毎に作成する事を選択肢の一つとして考えてもよい。
+
+ .. warning::
+
+    **Serviceの作成単位については、開発するアプリケーションの特性や開発体制などを加味して決めて頂きたい。**
+
+    また、提示した３つの作成パターンの **どれか一つのパターンに絞る必要はない。**
+    無秩序にいろいろな単位のServiceを作成する事は避けるべきだが、 **アーキテクトによって方針が示されている状況下においては、併用しても特に問題はない。**
+    例えば、以下のような組み合わせが考えられる。
+
+    【組み合わせて使用する場合の例】
+
+    * アプリケーションとして重要な業務ロジックについては、Entity毎のSharedServiceクラスとして作成する。
+    * 画面からのイベントを処理するための業務ロジックについては、Controller毎のServiceクラスとして作成する。
+    * Controller毎のServiceクラスでは、必要に応じてSharedServiceクラスのメソッドを呼び出す事で業務ロジックを実装する。
+
+ .. tip::
+
+     「TERASOLUNA ViSC」を使用する場合は、BLogicは設計書から出力される。
+
+|
+
+Entity毎にServiceを作成する際の開発イメージ
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Entity毎にServiceを作成する場合は、以下のような開発イメージとなる。
+
+ .. note::
+
+    Entity毎にServiceを作成する代表的なアプリケーションの例としては、RESTアプリケーションがあげられる。
+    RESTアプリケーションは、HTTP上に公開するリソースに対してCRUD操作(HTTPのPOST, GET, PUT, DELETE)を提供する事になる。
+    HTTP上に公開するリソースは、業務データ(Entity)または業務データ(Entity)の一部となる事が多いため、Entity毎にServiceを作成する方法との相性がよい。
+
+    RESTアプリケーションの場合は、ユースケースがEntity毎に抽出されることが多い。そのため、ユースケース毎に作成する際の構成イメージと似た構成となる。
+
+|
+
+ .. figure:: images/service_unit_resource.png
+   :alt: multiple controller unit
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | Entity毎に開発者を割り当てて、Serviceを実装する。
+       | 特に理由がない場合は、ControllerもEntity毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
+   * - | (2)
+     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
+       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
+
+|
+
+
+ユースケース毎に作成する際の開発イメージ
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| ユースケース毎にServiceを作成する場合は、以下のような開発イメージとなる。
+| EntityのCRUD操作を行う様なユースケースの場合は、Entity毎にServiceを作成する際の構成イメージと同じ構成となる。
+
+
+ .. figure:: images/service_unit_controller.png
+   :alt: controller unit
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | ユースケース毎に開発者を割り当てて、Serviceを実装する。
+       | 特に理由がない場合は、Controllerもユースケース毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
+   * - | (2)
+     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
+       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
+
+ .. note::
+
+    ユースケースの規模が大きくなると、一人が担当する開発範囲が大きくなるため、作業分担しづらくなる。
+    同時に大量の開発者を投入して開発するアプリケーションの場合は、ユースケースを更に分割して、担当者を割り当てる事を検討すること。
+
+|
+
+| ユースケースを更に分割した場合は、以下のような開発イメージとなる。
+| ユースケースの分割を行うことで、SharedServiceに影響はないため、説明は割愛している。
+
+ .. figure:: images/service_unit_controller2.png
+   :alt: multiple controller unit
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | ユースケースを構成する処理単位に分割し、処理毎に開発者を割り当てて、Serviceを実装する。
+       | ここで言う処理とは、検索処理、登録処理、更新処理、削除処理といった単位であり、画面から発生するイベント毎の処理ではない点に注意すること。
+       | 例えば「更新処理」であれば、「更新対象データの取得」や「更新内容の妥当性チェック」といった単位の処理が複数含まれる。
+       | 特に理由がない場合は、Controllerも処理毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
+
+ .. tip::
+
+    本ガイドライン上で使っている「ユースケース」と「処理」の事を、「ユースケースグループ」と「ユースケース」と呼ぶプロジェクトもある。
+
+|
+
+イベント毎に作成する際の開発イメージ
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+イベント毎にService(BLogic)を作成する場合は、以下のような開発イメージとなる。
+
+ .. figure:: images/service_unit_business-ligic.png
+   :alt: constitution image of business logic unit
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | イベント毎に開発者を割り当てて、Service(BLogic)を実装する。
+       | 上記例ではそれぞれ別の担当者を割り当てる図になっているが、これは極端な例である。
+       | 実際は、ユースケース毎に担当者を割り当てる事になる。
+   * - | (2)
+     - | 特に理由がない場合は、Controllerはユースケース毎に作成することが望ましい。
+   * - | (3)
+     - | イベント毎にService(BLogic)を実装する場合でも、担当者はユースケース毎に割り当てることを推奨する。
+   * - | (4)
+     - | 複数の業務ロジックで共有したいロジックがある場合は、SharedServiceに実装する。
+       | 上の図では、別の開発者(共通チームの担当者)を割り当てているが、プロジェクトの体制によっては(1)と同じ開発者でもよい。
+
+ .. note::
+
+    ユースケースの規模が大きくなると、一人が担当する開発範囲が大きくなるため、作業分担しづらくなる。
+    同時に大量の開発者を投入して開発するアプリケーションの場合は、ユースケースを更に分割して、担当者を割り当てる事を検討すること。
+
+|
+
+| ユースケースを更に分割した場合は、以下のような開発イメージとなる。
+| ユースケースの分割を行うことで、SharedServiceに影響はないため、説明は割愛している。
+
+ .. figure:: images/service_unit_business-ligic2.png
+   :alt: multiple controller unit
+   :width: 100%
+   :align: center
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | ユースケースを構成する処理単位に分割し、処理毎に開発者を割り当てて、Service(BLogic)を実装する。
+       | ここで言う処理とは、検索処理、登録処理、更新処理、削除処理といった単位であり、画面から発生するイベント毎の処理ではない点に注意すること。
+       | 例えば「更新処理」であれば、「更新対象データの取得」や「更新内容の妥当性チェック」といった単位の処理が複数含まれる。
+       | 特に理由がない場合は、Controllerも処理毎に作成し、Serviceと同じ開発者を担当者にすることが望ましい。
+
+.. _service-class-label:
+
+Serviceクラスの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. _service-class-creation-label:
+
+Serviceクラスの作成方法
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Serviceクラスを作成する際の注意点を、以下に示す。
+
+- Serviceインタフェースの作成
+
+ .. code-block:: java
+
+    public interface CartService { // (1)
+        // omitted
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | **Serviceインタフェースを作成することを推奨する。**
+       | インタフェースを設けることで、Serviceとして公開するメソッドを明確にすることが出来る。
+
+\
+
+ .. note:: **アーキテクチャ観点でのメリット例**
+
+    #. AOPを使う場合に、JDK標準のDynamic proxies機能が使われる。
+       インタフェースがない場合はSpring Frameworkに内包されているCGLIBが使われるが、finalメソッドに対してAdviceできないなどの制約がある。
+       詳細は、\ `Spring Reference Document -Aspect Oriented Programming with Spring(Proxying mechanisms)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/aop.html#aop-proxying>`_\ を参照されたい。
+    #. 業務ロジックをスタブ化しやすくなる。
+       アプリケーション層とドメイン層を別々の体制で並行して開発する場合は、アプリケーション層を開発するために、Serviceのスタブが必要になるケースがある。
+       スタブを作成する必要がある場合は、インタフェースを設けておくことを推奨する。
+
+- Serviceクラスの作成
+
+ .. code-block:: java
+
+    @Service // (1)
+    @Transactional // (2)
+    public class CartServiceImpl implements CartService { // (3) (4)
+        // omitted
+    }
+
+ .. code-block:: xml
+
+    <context:component-scan base-package="xxx.yyy.zzz.domain" /> <!-- (1) -->
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | **クラスに @Service アノテーションを付加する。**
+       | アノテーションを付与することで、componentがscan対象となり、設定ファイルへのbean定義が、不要となる。
+       | <context:component-scan>要素のbase-package属性に、componentをscanする対象のパッケージを指定する。
+       | 上記設定の場合、「xxx.yyy.zzz.domain」パッケージ配下に格納されているクラスが、コンテナに登録される。
+   * - | (2)
+     - | **クラスに @Transactional アノテーションを付加する。**
+       | アノテーションを付与することで、すべての業務ロジックに対してトランザクション境界が設定される。
+       | 属性値については、要件に応じた値を指定すること。
+       | 詳細は、\ :ref:`transaction-management-declare-transaction-info-label`\ を参照されたい。
+
+       | また、\ ``@Transactional``\ アノテーションを使用する際の注意点を理解するために、「:ref:`DomainLayerAppendixTransactionManagement`」を合わせて確認するとよい。
+   * - | (3)
+     - | **インターフェース名はXxxService、クラス名はXxxServiceImplとする。**
+       | 上記以外の命名規約でもよいが、ServiceクラスとSharedServiceクラスは、区別できる命名規約を設けることを推奨する。
+   * - | (4)
+     - | **Serviceクラスでは状態は保持せず、singletonスコープのbeanとしてコンテナに登録する 。**
+       | フィールド変数には、スレッド毎に状態が変わるオブジェクト(Entity/DTO/VOなどのPOJO)や、値(プリミティブ型、プリミティブラッパークラスなど)を保持してはいけない。
+       | また、\ ``@Scope``\ アノテーションを使ってsingleton以外のスコープ(prototype, request, session)にしてはいけない。
+
+\
+
+ .. note:: **クラスに @Transactional アノテーションを付加する理由**
+
+    トランザクション境界の設定が必須なのは更新処理を含む業務ロジックのみだが、設定漏れによるバグを防ぐ事を目的として、クラスレベルにアノテーションを付与することを推奨している。
+    もちろん必要な箇所（更新処理を行うメソッド）のみに、\ ``@Transactional``\ アノテーションを定義する方法を採用してもよい。
+
+ .. note:: **singleton以外のスコープを禁止する理由**
+
+    #. prototype, request, sessionは、状態を保持するbeanを登録するためのスコープであるため、Serviceクラスに対して使用すべきでない。
+    #. スコープをrequestやprototypeにした場合、DIコンテナによるbeanの生成頻度が高くなるため、性能に影響を与えることがある。
+    #. スコープをrequestやsessionにした場合、Webアプリケーション以外のアプリケーション(例えば、Batchアプリケーションなど)で使用できなくなる。
+
+.. _service-class-method-creation-label:
+
+Serviceクラスのメソッドの作成方法
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Serviceクラスのメソッドを作成する際の注意点を、以下に示す。
+
+- Serviceインタフェースのメソッド作成
+
+ .. code-block:: java
+
+    public interface CartService {
+        Cart createCart(); // (1) (2)
+        Cart findCart(String cartId); // (1) (2)
+    }
+
+- Serviceクラスのメソッドの作成
+
+ .. code-block:: java
+
+    @Service
+    @Transactional
+    public class CartServiceImpl implements CartService {
+
+        @Inject
+        CartRepository cartRepository;
+
+        public Cart createCart() { // (1) (2)
+            Cart cart = new Cart();
+            // ...
+            cartRepository.save(cart);
+            return cart;
+        }
+
+        @Transactional(readOnly = true) // (3)
+        public Cart findCart(String cartId) { // (1) (2)
+            Cart cart = cartRepository.findByCartId(cartId);
+            // ...
+            return cart;
+        }
+
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | **Serviceクラスのメソッドは、業務ロジック毎に作成する。**
+   * - | (2)
+     - | **業務ロジックは、Serviceインタフェースでメソッドの定義を行い、Serviceクラスのメソッドで実装を行う。**
+   * - | (3)
+     - | **業務ロジックのトランザクション定義をデフォルト（クラスアノテーションで指定した定義）から変更する場合は、@Transactionalアノテーションを付加する。**
+       | 属性値については、要件に応じた値を指定すること。
+       | 詳細は、\ :ref:`transaction-management-declare-transaction-info-label` を参照されたい。
+
+       | また、\ ``@Transactional``\ アノテーションを使用する際の注意点を理解するために、「:ref:`DomainLayerAppendixTransactionManagement`」を合わせて確認するとよい。
+
+\
+
+ .. tip:: **参照系の業務ロジックのトランザクション定義について**
+
+    参照系の業務ロジックを実装する場合は、\ ``@Transactional(readOnly = true)``\ を指定することで、
+    JDBCドライバに対して「読み取り専用のトランザクション」のもとでSQLを実行するように指示することができる。
+
+    読み取り専用のトランザクションの扱い方は、JDBCドライバの実装に依存するため、使用するJDBCドライバの仕様を確認されたい。
+
+
+ .. note:: **「読み取り専用のトランザクション」を使用する際の注意点**
+
+    コネクションプールからコネクションを取得する際にヘルスチェックを行う設定にしている場合、「読み取り専用のトランザクション」が有効にならないケースがある。
+    本事象の詳細及び回避方法については、:ref:`「読み取り専用のトランザクション」が有効にならないケースについて <DomainLayerTransactionManagementWarningDisableCase>` を参照されたい。
+
+
+ .. note:: **新しいトランザクションを開始する必要がある場合のトランザクション定義について**
+
+    呼び出し元のメソッドが参加しているトランザクションには参加せず、
+    新しいトランザクションを開始する必要がある場合は、\ ``@Transactional(propagation = Propagation.REQUIRES_NEW)``\ を設定する。
+
+.. _service-class-method-args-return-label:
+
+Serviceクラスのメソッド引数と返り値について
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Serviceクラスのメソッド引数と返り値は、以下の点を考慮すること。
+
+| Serviceクラスの引数と返り値は、Serialize可能なクラス(\ ``java.io.Serializable``\ を実装しているクラス)とする。
+| Serviceクラスは、分散アプリケーションとしてデプロイされる可能性もあるので、引数と返り値は、Serialize可能なクラスのみ、許可することを推奨する。
+
+**メソッド引数/返り値となる代表的な型を以下に示す。**
+
+ * プリミティブ型(\ ``int``\ , \ ``long``\ など)
+ * プリミティブラッパークラス(\ ``java.lang.Integer``\ , \ ``java.lang.Long``\ など)
+ * java標準クラス(\ ``java.lang.String``\ , \ ``java.util.Date``\ など)
+ * ドメインオブジェクト(Entity、DTOなど)
+ * 入出力オブジェクト(DTO)
+ * 上記型のコレクション(\ ``java.util.Collection``\ の実装クラス)
+ * void
+ * etc ...
+
+\
+
+ .. note:: **入出力オブジェクトとは**
+
+     #. 入力オブジェクトとは、Serviceのメソッドを実行するために必要な入力値をまとめたオブジェクトのことをさす。
+     #. 出力オブジェクトとは、Serviceのメソッドの実行結果（出力値）をまとめたオブジェクトのことをさす。
+
+      「TERASOLUNA ViSC」を使用して、業務ロジック(BLogicクラス)を生成する場合、BLogicの引数と返り値には、入出力オブジェクトを使用することになる。
+
+**メソッド引数/返り値として禁止するものを以下に示す。**
+
+ * アプリケーション層の実装アーキテクチャ(Servlet APIやSpringのweb層のAPIなど)に依存するオブジェクト(``javax.servlet.http.HttpServletRequest`` 、 ``javax.servlet.http.HttpServletResponse`` 、 ``javax.servlet.http.HttpSession`` 、 ``org.springframework.http.server.ServletServerHttpRequest`` など)
+ * アプリケーション層のモデル(Form,DTOなど)
+ * ``java.util.Map`` の実装クラス
+
+ .. note:: **禁止する理由**
+
+    #. アプリケーション層の実装アーキテクチャに依存するオブジェクトを許可してしまうと、アプリケーション層とドメイン層が密結合になってしまう。
+    #. \ ``java.util.Map``\ は、インタフェースとして汎用性が高すぎるため、メソッドの引数や返り値に使うと、
+       どのようなオブジェクが格納されているかわかりづらい。 また、値の管理がキー名で行われるため、以下の問題が発生しやすくなる。
+
+     * 値を設定する処理と値を取得する処理で異なるキー名を指定してしまい、値が取得できない。
+     * キー名の変更した場合の影響範囲の把握が困難になる。
+
+
+**アプリケーション層とドメイン層で同じDTOを共有する場合の方針を、以下に示す。**
+
+* ドメイン層のパッケージに属するDTOとして作成し、アプリケーション層で利用する。
+
+\
+
+ .. warning::
+
+   アプリケーション層のFormやDTOを、ドメイン層で利用してはいけない。
+
+.. _shared-service-class-label:
+
+SharedServiceクラスの実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. _shared-service-class-creation-label:
+
+SharedServiceクラスの作成方法
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SharedServiceクラスを作成する際の注意点を、以下に示す。
+| ここではServiceクラスと異なる箇所にフォーカスを当てて説明する。
+
+#. | **必要に応じて、クラスに @Transactional アノテーションを付加する。**
+   | データアクセスを伴わない場合は、\ ``@Transactional``\ アノテーションは不要である。
+
+#. | **インターフェース名はXxxSharedService、クラス名はXxxSharedServiceImplとする。**
+   | 上記以外の命名規約でもよいが、ServiceクラスとSharedServiceクラスは、区別できる命名規約を設けることを推奨する。
+
+.. _shared-service-class-method-creation-label:
+
+SharedServiceクラスのメソッドの作成方法
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SharedServiceクラスのメソッドを作成する際の注意点を、以下に示す。
+| ここでは、Serviceクラスと異なる箇所にフォーカスを当てて説明する。
+
+#. **SharedServiceクラスのメソッドは、複数の業務ロジックで共有されるロジック毎に作成する。**
+
+#. | **必要に応じて、クラスに @Transactional アノテーションを付加する。**
+   | データアクセスを伴わない場合は、アノテーションは不要である。
+
+.. _shared-service-class-method-args-return-label:
+
+SharedServiceクラスのメソッド引数と返り値について
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+\ :ref:`service-class-method-args-return-label`\ と同様の点を考慮すること。
+
+.. _service-implementation-label:
+
+処理の実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ServiceおよびSharedServiceのメソッドで実装する処理について説明する。
+
+ServiceおよびSharedServiceでは、アプリケーションで使用する業務データの取得、更新、整合性チェックおよびビジネスルールに関わる各種ロジックの実装を行う。
+
+以下に、代表的な処理の実装例について説明する。
+
+業務データを操作する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+業務データ(Entity)の取得、更新の実装例については、
+
+* MyBatis3を使う場合は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`\
+* JPAを使う場合は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\
+
+を参照されたい。
+
+
+.. _service-return-message-label:
+
+メッセージを返却する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| Serviceで解決すべきメッセージは、警告メッセージ、業務エラーメッセージの２つとなる(下図赤破線部参照)。
+| それ以外のメッセージは、アプリケーション層で解決される。
+| メッセージの種類とメッセージのパターンについては、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ を参照されたい。
+
+ .. figure:: images/service_target-resolving-message.png
+   :alt: target of resolving message
+   :width: 100%
+   :align: center
+
+\
+
+ .. note:: **メッセージの解決について**
+
+    Serviceで解決するのは、メッセージ文言ではなく、\ **メッセージ文言を組み立てるために必要な情報（メッセージコード、メッセージ埋め込み値）の解決**\ であるという点を補足しておく。
+
+詳細な実装方法は、
+
+* :ref:`service-return-warnmessage-label`
+* :ref:`service-return-businesserrormessage-label`
+
+を参照されたい。
+
+.. _service-return-warnmessage-label:
+
+警告メッセージを返却する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 警告メッセージの返却は、戻り値としてメッセージオブジェクトを返却する。
+| Entityなどのドメイン層のオブジェクトと一緒に返却する必要がある場合は、出力オブジェクト(DTO)にメッセージオブジェクトとドメインオブジェクトを詰めて返却する。
+
+| 共通ライブラリとしてメッセージオブジェクト(\ ``org.terasoluna.gfw.common.message.ResultMessages``\ )を用意している。
+| 共通ライブラリで用意しているクラスだと要件を満たせない場合は、プロジェクト毎にメッセージオブジェクトを作成すること。
+
+- DTOの作成
+
+ .. code-block:: java
+
+    public class OrderResult implements Serializable {
+        private ResultMessages warnMessages;
+        private Order order;
+
+        // omitted
+
+    }
+
+|
+
+- Serviceクラスのメソッドの実装
+
+ 下記の例では、注文した商品の中に取り寄せ商品が含まれているため、分割配達となる可能性がある旨を警告メッセージとして表示する場合の実装例である。
+
+ .. code-block:: java
+
+    public OrderResult submitOrder(Order order) {
+
+        // omitted
+
+        boolean hasOrderProduct = orderRepository.existsByOrderProduct(order); // (1)
+
+        // omitted
+
+        Order order = orderRepository.save(order);
+
+        // omitted
+
+        ResultMessages warnMessages = null;
+        // (2)
+        if(hasOrderProduct) {
+            warnMessages = ResultMessages.warn().add("w.xx.xx.0001");
+        }
+        // (3)
+        OrderResult orderResult = new OrderResult();
+        orderResult.setOrder(order);
+        orderResult.setWarnMessages(warnMessages);
+        return orderResult;
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 取り寄せ商品が含まれる場合は、\ ``hasOrderProduct``\ に\ ``true``\ が設定される。
+   * - | (2)
+     - | 上記例では、取り寄せ商品が含まれる場合に、警告メッセージを生成している。
+   * - | (3)
+     - | 上記例では、登録した\ ``Order``\ オブジェクトと警告メッセージを一緒に返却するために、\ ``OrderResult``\ というDTOにオブジェクトを格納して返却している。
+
+.. _service-return-businesserrormessage-label:
+
+業務エラーを通知する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 業務ロジック実行中に、ビジネスルールの違反が発生した場合はビジネス例外をスローする。
+| 例えば次のような場合である。
+
+-  旅行を予約する際に予約日が期限を過ぎている場合
+-  商品を注文する際に在庫切れの場合
+-  etc ...
+
+| 共通ライブラリとしてビジネス例外(\ ``org.terasoluna.gfw.common.exception.BusinessException``\ )を用意している。
+| 共通ライブラリで用意しているビジネス例外クラスだと要件を満たせない場合は、プロジェクト毎にビジネス例外クラスを作成すること。
+| **ビジネス例外クラスは、java.lang.RuntimeException のサブクラスとして作成することを推奨する** 。
+
+\
+
+ .. note:: **ビジネス例外を非検査例外にする理由**
+
+   ビジネス例外は、Controllerでハンドリングが必要になるため、本来は検査例外にした方がよい。
+   しかし、本ガイドラインでは、設定漏れによるバグを防ぐ事を目的として、デフォルトでロールバックされる java.lang.RuntimeException のサブクラスとすることを推奨する。
+   もちろん検査例外のサブクラスとしてビジネス例外を作成し、ビジネス例外クラスをロールバック対象として定義する方法を採用してもよい。
+
+| ビジネス例外のスロー例を以下に示す。
+| 下記の例では、予約期限日が過ぎていることを業務エラーとして通知する際の実装例である。
+
+ .. code-block:: java
+
+    // omitted
+
+    if(currentDate.after(reservationLimitDate)) { // (1)
+        throw new BusinessException(ResultMessages.error().add("e.xx.xx.0001"));
+    }
+
+    // omitted
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+
+   * - | (1)
+     - 旅行を予約する際に、予約日が期限を過ぎているので、ビジネス例外をスローしている。
+
+例外ハンドリング全体の詳細は、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`\ を参照されたい。
+
+.. _service-return-systemerrormessage-label:
+
+システムエラーを通知する
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 業務ロジック実行中に、システムとして異常な状態が発生した場合は、システム例外をスローする。
+| 例えば、次のような場合である。
+
+-  事前に存在しているはずのマスタデータ、ディレクトリ、ファイルなどが存在しない場合
+-  利用しているライブラリのメソッドから発生する検査例外のうち、システム異常に分類される例外を補足した場合
+-  etc ...
+
+| 共通ライブラリとしてシステム例外(\ ``org.terasoluna.gfw.common.exception.SystemException``\ )を用意している。
+| 共通ライブラリで用意しているシステム例外クラスだと要件を満たせない場合は、プロジェクト毎にシステム例外クラスを作成すること。
+| **システム例外クラスは、java.lang.RuntimeException のサブクラスとして作成することを推奨する** 。
+| 理由は、システム例外は、アプリケーションのコード上でハンドリングする必要がないという点と、\ ``@Transactinal``\ アノテーションのデフォルトのロールバック対象が、\ ``java.lang.RuntimeException``\ のためである。
+
+| システム例外のスロー例を以下に示す。
+| 下記の例では、指定された商品が、商品マスタに存在しないことを、システムエラーとして通知する際の実装例である。
+
+ .. code-block:: java
+
+    ItemMaster itemMaster = itemMasterRepository.findOne(itemCode);
+    if(itemMaster == null) { // (1)
+        throw new SystemException("e.xx.fw.0001",
+            "Item master data is not found. item code is " + itemCode + ".");
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+
+   * - | (1)
+     - 事前に存在しているはずのマスタデータがないので、システム例外をスローしている。（ロジックで、システム異常を検知した場合の実装例）
+
+下記の例では、ファイルコピー時のIOエラーをシステムエラーとして通知する際の実装例である。
+
+ .. code-block:: java
+
+    // ...
+
+    try {
+        FileUtils.copy(srcFile, destFile);
+    } catch(IOException e) { // (1)
+        throw new SystemException("e.xx.fw.0002",
+            "Failed file copy. src file '" + srcFile + "' dest file '" + destFile + "'.", e);
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 利用しているライブラリのメソッドから、システム異常に分類される例外が発生したシステム例外をスローしている。
+       | **利用しているライブラリから発生した例外は、原因例外としてシステム例外クラスに必ず渡すこと。**
+       | 原因例外が失われると、スタックトレースよりエラー発生箇所および本質的なエラー原因が追えなくなってしまう。
+
+\
+
+ .. note:: **データアクセスエラーの扱いについて**
+
+    業務ロジック実行中に、RepositoryやO/R Mapperでデータアクセスエラーが発生した場合、\ ``org.springframework.dao.DataAccessException``\ のサブクラスに変換されてスローされる。
+    基本的には、業務ロジックではキャッチせず、アプリケーション層でエラーハンドリングすればよいが、
+    一意制約違反などの一部のエラーについては、業務要件によっては、業務ロジックでハンドリングする必要がある。
+    詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`\ を参照されたい。
+
+.. _service_transaction_management:
+
+トランザクション管理について
+--------------------------------------------------------------------------------
+データの一貫性を保証する必要がある処理ではトランザクションの管理が必要となる。
+
+トランザクション管理の方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+トランザクションの管理方法はいろいろあるが、本ガイドラインでは、\ **Spring Frameworkから提供されている「宣言型トランザクション管理」を利用することを推奨する。**\
+
+宣言型トランザクション管理
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+「宣言型トランザクション管理」では、トランザクション管理に必要な情報を以下に２つの方法で宣言することができる。
+
+* XML(bean定義ファイル)で宣言する。
+* **アノテーション（@Transactional）で宣言する。（推奨）**
+
+Spring Frameworkから提供されている「宣言型トランザクション管理」の詳細については、\ `Spring Reference Document -Transaction Management(Declarative transaction management)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative>`_\ を参照されたい。
+\
+
+ .. note:: **「アノテーションで指定する」方法を推奨する理由**
+
+    #. ソースコードを見ただけで、どのようなトランザクション管理が行われるかについて、把握することができる。
+    #. XMLにトランザクション管理するためのAOPの設定が不要であり、XMLがシンプルになる。
+
+.. _transaction-management-declare-transaction-info-label:
+
+「宣言型トランザクション管理」で必要となる情報
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| トランザクション管理対象とするクラスまたはクラスメソッドに対して\ ``@Transactional``\ アノテーションを指定する。
+| トランザクション制御に必要となる情報は、\ ``@Transactional``\ アノテーションの属性で指定する。
+
+ .. note::
+
+    本ガイドラインでは、Spring Frameworkから提供されている \ ``@org.springframework.transaction.annotation.Transactional``\ アノテーションを使用する前提である。
+
+ .. tip::
+
+    Spring 4からは、JTA 1.2から追加された \ ``@javax.transaction.Transactional``\ アノテーションを使用する事ができる。
+
+    ただし、本ガイドラインでは、「宣言型トランザクション管理」で必要となる情報をより細かく指定できるSpring Frameworkのアノテーションを使用することを推奨する。
+
+    Spring Frameworkのアノテーションを使用すると、
+
+    * トランザクションの伝播方法(\ ``propagation``\ 属性)の属性値として\ ``NESTED``\(JDBCのセーブポイント)
+    * トランザクションの独立レベル(\ ``isolation``\ 属性)
+    * トランザクションのタイムアウト時間(\ ``timeout``\ 属性)
+    * トランザクションの読み取り専用フラグ(\ ``readOnly``\ 属性)
+
+    の指定が可能となる。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.10\linewidth}|p{0.80\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 10 80
+
+    * - 項番
+      - 属性名
+      - 説明
+
+    * - 1
+      - propagation
+      - | トランザクションの伝播方法を指定する。
+        |
+        | **[REQUIRED]**
+        | トランザクションが開始されていなければ開始する。 (省略時のデフォルト)
+        | **[REQUIRES_NEW]**
+        | 常に、新しいトランザクションを開始する。
+        | **[SUPPORTS]**
+        | トランザクションが開始されていれば、それを利用する。開始されていなければ、利用しない。
+        | **[NOT_SUPPORTED]**
+        | トランザクションを利用しない。
+        | **[MANDATORY]**
+        | トランザクションが開始されている必要がある。開始されていなければ、例外が発生する。
+        | **[NEVER]**
+        | トランザクションを利用しない（開始されていてはいけない）。開始していれば、例外が発生する。
+        | **[NESTED]**
+        | セーブポイントが設定される。JDBCのみ有効である。
+    * - 2
+      - isolation
+      - | トランザクションの独立レベルを指定する。
+        | この設定は、DBの仕様に依存するため、使用するDBの仕様を確認し、設定値を決めること。
+        |
+        | **[DEFAULT]**
+        | DBが提供するデフォルトの独立性レベル。(省略時のデフォルト)
+        | **[READ_UNCOMMITTED]**
+        | 他のトランザクションで変更中（未コミット）のデータが読める。
+        | **[READ_COMMITTED]**
+        | 他のトランザクションで変更中（未コミット）のデータは読めない。
+        | **[REPEATABLE_READ]**
+        | 他のトランザクションが読み出したデータは更新できない。
+        | **[SERIALIZABLE]**
+        | トランザクションを完全に独立させる。
+        |
+        | トランザクションの独立レベルは、排他制御に関連するパラメータとなる。
+        | 排他制御については、\ :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`\ を参照されたい。
+    * - 3
+      - timeout
+      - | トランザクションのタイムアウト時間(秒)を指定する。
+        | デフォルトは-1(使用するDBの仕様や設定に依存)
+    * - 4
+      - readOnly
+      - | トランザクションの読み取り専用フラグを指定する。
+        | デフォルトはfalse(読み取り専用でない)
+    * - 5
+      - rollbackFor
+      - | トランザクションのロールバック対象とする例外クラスのリストを指定する。
+        | デフォルトは空（指定なし）
+    * - 6
+      - rollbackForClassName
+      - | トランザクションのロールバック対象とする例外クラス名のリストを指定する。
+        | デフォルトは空（指定なし）
+    * - 7
+      - noRollbackFor
+      - | トランザクションのコミット対象とする例外クラスのリストを指定する。
+        | デフォルトは空（指定なし）
+    * - 8
+      - noRollbackForClassName
+      - | トランザクションのコミット対象とする例外クラス名のリストを指定する。
+        | デフォルトは空（指定なし）
+
+\
+
+ .. note:: **@Transactionalアノテーションを指定する場所**
+
+    **クラスまたはクラスのメソッドに指定することを推奨する。**
+    インタフェースまたはインタフェースのメソッドでない点が、ポイント。
+    理由は、\ `Spring Reference Document -Transaction Management(Using @Transactional)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-declarative-annotations>`_\ の2個めのTipsを参照されたい。
+
+ .. warning:: **例外発生時のrollbackとcommitのデフォルト動作**
+
+    rollbackForおよびnoRollbackForを指定しない場合、Spring Frameworkは、以下の動作となる。
+
+    * 非検査例外クラス（java.lang.RuntimeExceptionおよびjava.lang.Error）またはそのサブクラスの例外が発生した場合は、rollbackする。
+    * 検査例外クラス（java.lang.Exception）またはそのサブクラスの例外が発生した場合は、commitする。\ **(注意が必要)**\
+
+ .. note:: **@Transactionalアノテーションのvalue属性について**
+
+    \ ``@Transactional``\ アノテーションにはvalue属性があるが、これは複数のTransaction Managerを宣言した際に、どのTransaction Managerを使うのかを指定する属性である。
+    Transaction Managerが一つの場合は指定は不要である。
+    複数のTransaction Managerを使う必要がある場合は、\ `Spring Reference Document -Transaction Management(Multiple Transaction Managers with @Transactional)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#tx-multiple-tx-mgrs-with-attransactional>`_\ を参照されたい。
+
+ .. note:: **主要DBのisolationのデフォルトについて**
+
+    主要DBのデフォルトの独立性レベルは、以下の通りである。
+
+    * Oracle : READ_COMMITTED
+    * DB2 : READ_COMMITTED
+    * PostgreSQL : READ_COMMITTED
+    * SQL Server : READ_COMMITTED
+    * MySQL : REPEATABLE_READ
+
+.. _DomainLayerTransactionManagementWarningDisableCase:
+
+ .. note:: **「読み取り専用のトランザクション」が有効にならないケースについて**
+
+    \ ``readOnly = true``\ を指定することで「読み取り専用のトランザクション」のもとでSQLを実行する仕組みが提供されているが、
+    以下の条件にすべて一致する場合、「読み取り専用のトランザクション」が有効にならないJDBCドライバが存在する。
+
+    **[本事象の発生条件]**
+
+    * コネクションプールからコネクションを取得する際に、ヘルスチェックを行う。
+    * コネクションプールから取得したコネクションの自動コミットを無効にする。
+    * \ ``PlatformTransactionManager``\ として、\ ``DataSourceTransactionManager``\ 又は\ ``JpaTransactionManager``\ を使用する。(\ ``JtaTransactionManager``\ を使用する場合は本事象は発生しない)
+
+    **[本事象の発生が確認されているJDBCドライバ]**
+
+    * ``org.postgresql:postgresql:9.3-1102-jdbc41`` (PostgreSQL 9.3向けJDBC4.1互換のJDBCドライバ)
+
+    **[本事象の回避方法]**
+
+    「読み取り専用のトランザクション」が有効にならないケースに一致する場合は、
+    \ ``readOnly = true``\ を指定すると無駄な処理が行われる事になるため、
+    参照系の処理についても「更新可能なトランザクション」のもとで実行することを推奨する。
+
+    他の回避方法として、
+
+    * コネクションプールからコネクションを取得する際に、ヘルスチェックを行わない。
+    * コネクションプールから取得したコネクションの自動コミットを有効にする。(トランザクション管理が必要な時のみ自動コミットを無効にする)
+
+    という方法もあるが、本事象を回避するために、ヘルスチェックや自動コミットに対する設計を変更する事は避けるべきである。
+
+    **[備考]**
+
+    * 本事象の再現確認は、PostgreSQL 9.3及びOracle 12cで行っており、他のデータベース及びバージョンでは行っていない。
+    * PostgreSQL 9.3では、\ ``java.sql.Connection#setReadOnly(boolean)``\  メソッドを呼び出した際に\ ``SQLException``\ が発生する。
+    * \ :ref:`log4jdbc <DataAccessCommonDataSourceDebug>`\ を使用してSQLやJDBCのAPIの呼び出しをロギングしている場合、JDBCドライバから発生した\ ``SQLException``\ はERRORレベルでログに出力される。
+    * **JDBCドライバから発生するSQLExceptionはSpring Frameworkが行う例外処理によって無視されるため、アプリケーションの動作としてはエラーにはならないが、「読み取り専用のトランザクション」は有効にならない。**
+    * Oracle 12cでは、本事象の発生は確認されていない。
+
+    **[参考]**
+
+    \ :ref:`log4jdbc <DataAccessCommonDataSourceDebug>`\ を使用して以下のようなログが出力された場合は、本事象に該当するケースとなる。
+
+     .. code-block:: text
+
+        date:2015-02-20 16:11:56	thread:main	user:	X-Track:	level:ERROR	logger:jdbc.audit                                      	message:3. Connection.setReadOnly(true)
+        org.postgresql.util.PSQLException: Cannot change transaction read-only property in the middle of a transaction.
+            at org.postgresql.jdbc2.AbstractJdbc2Connection.setReadOnly(AbstractJdbc2Connection.java:741) ~[postgresql-9.3-1102-jdbc41.jar:na]
+            ...
+
+ .. note:: **@Transactionalアノテーションのtimeout属性について**
+
+    \ ``@Transactional``\ アノテーションには\ ``timeout``\属性があるが、MyBatis 3.3とMyBatis-Spring 1.2の組み合わせでは
+    \ ``timeout``\属性に指定した値は無視され、使用されない。
+
+
+トランザクションの伝播
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| トランザクションの伝播方法は、ほとんどの場合は「REQUIRED」でよい。
+| ただし、 **アプリケーションの要件によっては「REQUIRES_NEW」を使うこともある** ので、「REQUIRED」と「REQUIRES_NEW」を指定した場合のトランザクション制御フローを、以下に示す。
+| 他の伝播方法の使用頻度は低いと思われるので、本ガイドラインでの説明は省略する。
+
+| **トランザクションの伝播方法を「REQUIRED」にした場合のトランザクション管理フロー**
+| トランザクションの伝播方法を「REQUIRED」にした場合、Controllerから呼び出された一連の処理が、すべて同じトランザクション内で処理される。
+
+ .. figure:: images/service_transaction-propagation-required.png
+    :alt: transaction management flow of REQUIRED
+    :width: 100%
+    :align: center
+
+#. Controllerからトランザクション管理対象のServiceのメソッドを呼び出す。
+   この時点で開始されているトランザクションは存在しないため、\ ``TransactionInterceptor``\ によってトランザクションが開始される。
+#. \ ``TransactionInterceptor``\ は、トランザクション開始した後に、トランザクション管理対象のメソッドを呼び出す。
+#. Serviceからトランザクション管理対象の\ ``SharedService``\ のメソッドを呼び出す。
+   この時点で開始済みのトランザクションが存在しているため、\ ``TransactionInterceptor``\ は、新たにトランザクションは開始せず、開始済みのトランザクションに参加する。
+#. \ ``TransactionInterceptor``\ は、開始済みのトランザクションに参加した後に、トランザクション管理対象のメソッドを呼び出す。
+#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクションを終了する。
+
+
+.. note:: **org.springframework.transaction.UnexpectedRollbackExceptionが発生する理由**
+
+  トランザクションの伝播方法を「REQUIRED」にした場合、物理的なトランザクションは一つだが、Spring Frameworkでは内部的なトランザクション制御境界が設けられている。
+  上記例だと、SharedServiceが呼び出された際に実行される\ ``TransactionInterceptor``\ が、内部的なトランザクション制御を行っている。
+  そのため、\ ``SharedService``\ でロールバック対象の例外が発生した場合、\ ``TransactionInterceptor``\ によって、
+  トランザクションはロールバック状態（rollback-only）に設定され、トランザクションをコミットすることはできなくなる。
+  この状態でトランザクションのコミットを行おうとすると、Spring Frameworkは、\ ``UnexpectedRollbackException``\ を発生させ、トランザクション制御に矛盾が発生している事を通知してくれる。
+  \ ``UnexpectedRollbackException``\ が発生した場合、rollbackForおよびnoRollbackForの定義に、矛盾がないか、確認すること。
+
+| **トランザクションの伝播方法を「REQUIRES_NEW」にした場合のトランザクション管理フロー**
+| トランザクションの伝播方法を「REQUIRES_NEW」にした場合、Controllerから呼び出された時に行われる一連の処理の一部（SharedServiceで行っている処理）が別のトランザクションで処理される。
+
+ .. figure:: images/service_transaction-propagation-requires_new.png
+    :alt: transaction management flow of REQUIRES_NEW
+    :width: 100%
+    :align: center
+
+#. Controllerからトランザクション管理対象のServiceのメソッドを呼び出す。この時点で開始されているトランザクションは存在しないため、 ``TransactionInterceptor`` によってトランザクションが開始される(ここで開始したトランザクションを以降「Transaction A」と呼ぶ)。
+#. ``TransactionInterceptor`` は、トランザクション（Transaction A）を開始した後に、トランザクション管理対象のメソッドを呼び出す。
+#. Serviceからトランザクション管理対象の ``SharedService`` のメソッドを呼び出す。この時点で開始済みのトランザクション（Transaction A）が存在しているが、トランザクションの伝播方法が「REQUIRES_NEW」なので ``TransactionInterceptor`` によって新しいトランザクションが開始される(ここで開始したトランザクションを以降「Transaction B」と呼ぶ)。この時点で「Transaction A」のトランザクションは、中断され再開待ちの状態となる。
+#. \ ``TransactionInterceptor``\ は、トランザクション（Transaction B）を開始した後に、トランザクション管理対象のメソッドを呼び出す。
+#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクション（Transaction B）を終了する。
+   この時点で、「Transaction A」のトランザクションが再開され、アクティブな状態になる。
+#. \ ``TransactionInterceptor``\ は、処理結果に応じてコミットまたはロールバックを行い、トランザクション（Transaction A）を終了する。
+
+トランザクション管理対象となるメソッドの呼び出し方
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| Spring Frameworkから提供されている「宣言型トランザクション管理」はAOPで実現されているため、AOPが有効となるメソッド呼び出しに対してのみ、トランザクション管理が適用される。
+| デフォルトのAOPモードが、\ **proxyモードなので、別のクラスからpublicメソッドが呼び出された場合のみトランザクション管理対象となる。**\
+| \ **publicメソッドであっても、内部呼び出しの場合は、トランザクション管理対象にならない**\ ので注意が必要となる。
+
+- **トランザクション管理対象となるメソッドの呼び出し方**
+
+ .. figure:: images/service_transaction-valid-call.png
+   :alt: enabled method calls of transaction management
+   :width: 100%
+   :align: center
+
+- **トランザクション管理対象にならないメソッドの呼び出し方**
+
+ .. figure:: images/service_transaction-invalid-call.png
+   :alt: not enabled method calls of transaction management
+   :width: 100%
+   :align: center
+
+ .. note:: **内部呼び出しをトランザクション管理対象にしたい場合**
+
+   AOPモードを\ ``"aspectj"``\ にすることで、内部呼び出しをトランザクション管理対象にすることができる。
+   ただし、内部呼び出しもトランザクション管理対象にしてしまうと、トランザクション管理の経路が複雑になる可能性があるので、
+   基本的にはAOPモードはデフォルトの\ ``"proxy"``\ を使用することを推奨する。
+
+.. _service_enable_transaction_management:
+.. _DomainLayerAppendixTransactionManagement:
+
+トランザクション管理を使うための設定について
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+トランザクション管理を使うために必要な設定について説明する。
+
+PlatformTransactionManagerの設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| トランザクション管理を行う場合、\ ``PlatformTransactionManager``\ のbeanを設定する必要がある。
+| Spring Frameworkより用途毎のクラスが提供されているので、使用するクラスを指定すればよい。
+
+- :file:`xxx-env.xml`
+
+ 以下に、DataSourceから取得されるJDBCコネクションの機能を使って、トランザクションを管理する場合の設定例を示す。
+
+ .. code-block:: xml
+
+     <!-- (1) -->
+     <bean id="transactionManager"
+           class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
+         <property name="dataSource" ref="dataSource" />
+     </bean>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+
+    * - | (1)
+      - | 用途にあった\ ``PlatformTransactionManager``\ の実装クラスを指定する。
+        | idは「transactionManager」としておくことを推奨する。
+
+\
+
+ .. note:: **複数DB（複数リソース）に対するトランザクション管理（グローバルトランザクションの管理）が必要な場合**
+
+     * \ ``org.springframework.transaction.jta.JtaTransactionManager``\ を利用し、アプリケーションサーバから提供されているJTAの機能を使って、トランザクション管理を行う必要がある。
+     * WebSphere、Oracle WebLogic ServerでJTAを使う場合、<tx:jta-transaction-manager/> を指定することで、
+       アプリケーションサーバ用に拡張された\ ``JtaTransactionManager``\ が、自動的で設定される。
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.35\linewidth}|p{0.55\linewidth}|
+ .. list-table:: **Spring Frameworkから提供されているPlatformTransactionManagerの実装クラス**
+    :header-rows: 1
+    :widths: 10 35 55
+
+    * - 項番
+      - クラス名
+      - 説明
+    * - 1.
+      - | org.springframework.jdbc.datasource.
+        | DataSourceTransactionManager
+      - | JDBC(\ ``java.sql.Connection``\ )のAPIを呼び出して、トランザクションを管理するための実装クラス。
+        | MyBatisや、\ ``JdbcTemplate``\ を使う場合は、本クラスを使用する。
+    * - 2.
+      - | org.springframework.orm.jpa.
+        | JpaTransactionManager
+      - | JPA(\ ``javax.persistence.EntityTransaction``\ )のAPIを呼び出して、トランザクションを管理するための実装クラス。
+        | JPAを使う場合は、本クラスを使用する。
+    * - 3.
+      - | org.springframework.transaction.jta.
+        | JtaTransactionManager
+      - | JTA(\ ``javax.transaction.UserTransaction``\ )のAPIを呼び出してトランザクションを管理するための実装クラス。
+        | アプリケーションサーバから提供されているJTS(Java Transaction Service)を利用して、リソース(データベース/メッセージングサービス/汎用EIS(Enterprise Information System)など)とのトランザクションを管理する場合は、本クラスを使用する。
+        | 複数のリソースに対する操作を同一トランザクションで行う必要がある場合は、JTAを利用して、リソースとのトランザクションを管理する必要がある。
+
+@Transactionalを有効化するための設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| 本ガイドラインでは、\ ``@Transactional``\ アノテーションを使った「宣言型トランザクション管理」を使って、トランザクション管理することを推奨している。
+| ここでは、\ ``@Transactional``\ アノテーションを使うために、必要な設定について説明する。
+
+- :file:`xxx-domain.xml`
+
+ .. code-block:: xml
+
+     <tx:annotation-driven /> <!-- (1) -->
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+
+    * - | (1)
+      - <tx:annotation-driven>要素をXML（bean定義ファイル）に追加することで、\ ``@Transactional``\ アノテーションを使ったトランザクション境界の指定が有効となる。
+
+ .. note:: **トランザクション管理の落とし穴について**
+
+    IBM DeveloperWorksに「トランザクションの落とし穴を理解する」という記事がある。
+    この記事ではトランザクション管理で注意しなくてはいけないことや、Spring Frameworkの@Transactionalを使う場合の注意点がまとめられているので、ぜひ一読してほしい。
+    詳細は、\ `IBM DeveloperWorksの記事 <http://www.ibm.com/developerworks/java/library/j-ts1/index.html>`_\ を参照されたい。
+
+    ※IBM DeveloperWorksの記事は2009年の記事のため(古いため)、一部の内容がSpring Framework 4.1使用時の動作と異なる部分がある。
+
+    具体的には、「Listing 7. Using read-only with REQUIRED propagation mode — JPA」の内容である。
+
+    Spring Framework 4.1より、JPAのプロバイダとしてHibernate ORM 4.2以上を使用している場合は、
+    JDBCドライバに対して「読み取り専用のトランザクション」のもとでSQLを実行するように指示することが出来るように改善(\ `SPR-8959 <https://jira.spring.io/browse/SPR-8959>`_\ )されている。
+
+    読み取り専用のトランザクションの扱い方は、JDBCドライバの実装に依存するため、使用するJDBCドライバの仕様を確認されたい。
+
+
+ .. note:: **プログラマティックにトランザクションを管理する方法**
+
+    本ガイドラインでは、「宣言型トランザクション管理」を推奨しているが、プログラマティックにトランザクションを管理することもできる。
+    詳細については、\ `Spring Reference Document -Transaction Management(Programmatic transaction management)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/transaction.html#transaction-programmatic>`_\ を参照されたい。
+
+
+<tx:annotation-driven>要素の属性について
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+<tx:annotation-driven>にはいくつかの属性が指定でき、デフォルトの振る舞いを拡張することができる。
+
+- :file:`xxx-domain.xml`
+
+ .. code-block:: xml
+
+     <tx:annotation-driven
+          transaction-manager="txManager"
+          mode="aspectj"
+          proxy-target-class="true"
+          order="0" />
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.15\linewidth}|p{0.75\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 15 75
+
+    * - 項番
+      - 属性
+      - 説明
+
+    * - 1
+      - transaction-manager
+      - \ ``PlatformTransactionManager``\ のbeanを指定する。省略した場合「transactionManager」というbean名で登録されているbeanが使用される。
+
+    * - 2
+      - mode
+      - AOPのモードを指定する。省略した場合、\ ``"proxy"``\ となる。\ ``"aspectj"``\ を指定できるが、原則デフォルトの\ ``"proxy"``\ を使う。
+
+    * - 3
+      - proxy-target-class
+      - proxyのターゲットをクラスに限定するかを指定するフラグ（mode="proxy"の場合のみ、有効な設定）。省略した場合「false」となる。
+
+        * false の場合、対象がインタフェースを実装している場合は、JDK標準のDynamic proxies機能によってproxyされ、
+          インタフェースを実装していない場合はSpring Frameworkに内包されているGCLIBの機能によってproxyされる。
+        * true の場合、インタフェースの実装有無に関係なく、GCLIBの機能によってproxyされる。
+
+    * - 4
+      - order
+      - AOPでAdviceされる順番（優先度）を指定する。省略した場合「最後（もっとも低い優先度）」となる。
+
+|
+
+Tips
+--------------------------------------------------------------------------------
+
+.. _tips_business_error-label:
+
+ビジネスルールの違反をフィールドエラーとして扱う方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| ビジネスルールのエラーをフィールド毎に出力する必要がある場合、Controller側(Bean ValidationまたはSpring Validator)の仕組みを利用する必要がある。
+| このケースの場合、チェックロジック自体はServiceとして実装し、Bean ValidationまたはSpring ValidatorからServiceのメソッドを呼び出す方式で実現することを推奨する。
+| 詳細は、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ の業務ロジックチェックを参照されたい。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/ImplementationAtEachLayer/InfrastructureLayer.rst b/source/ImplementationAtEachLayer/InfrastructureLayer.rst
index c799feefa0..9b17824a11 100755
--- a/source/ImplementationAtEachLayer/InfrastructureLayer.rst
+++ b/source/ImplementationAtEachLayer/InfrastructureLayer.rst
@@ -1,207 +1,207 @@
-インフラストラクチャ層の実装
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-インフラストラクチャ層では、\ :ref:`repository-class-label`\ を行う。
-
-RepositoryImplは、Repositoryインタフェースで定義したメソッドの実装を行う。
-
-
-.. _repository-class-label:
-
-RepositoryImplの実装
---------------------------------------------------------------------------------
-
-以下に、MyBatis3とJPAを使って、リレーショナルデータベース用のRepositoryを作成する方法を紹介する。
-
-* :ref:`repository-mybatis3-label`
-* :ref:`repository-jpa-label`
-
-
-.. _repository-mybatis3-label:
-
-MyBatis3を使ってRepositoryを実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-リレーショナルデータベースとの永続APIとしてMyBatis3を使う場合、
-MyBatis3から提供されている「:ref:`DataAccessMyBatis3AppendixAboutMapperMechanism`」を利用してRepositoryインタフェースを作成すると、
-基本的にはRepositoryImplを実装する必要はない。
-
-これは、MyBatis3が、Mapperインタフェースのメソッドと呼び出すステートメント(SQL)のマッピングを自動で行う仕組みになっているためである。
-
-MyBatis3を使用する場合、アプリケーション開発者は、
-
-* Repositoryインタフェース(メソッドの定義)
-* マッピングファイル(SQLとO/Rマッピングの定義)
-
-の作成を行う。
-
-| 以下に、Repositoryインタフェースとマッピングファイルの作成例を示す。
-| MyBatis3の使用方法の詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`\ を参照されたい。
-
-- Repositoryインタフェース(Mapperインタフェース)の作成例
-
- .. code-block:: java
-
-    package com.example.domain.repository.todo;
-
-    import com.example.domain.model.Todo;
-
-    // (1)
-    public interface TodoRepository {
-        // (2)
-        Todo findOne(String todoId);
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - POJOのインタフェースとして作成する。
-
-        MyBatis3のインタフェースやアノテーションなどを指定する必要はない。
-    * - | (2)
-      - Repositoryのメソッドを定義する。
-
-        基本的には、MyBatis3のアノテーションを付与する必要はないが、
-        一部のケースでアノテーションを指定する事もある。
-
-
-- マッピングファイルの作成例
-
- .. code-block:: xml
-
-    <?xml version="1.0" encoding="UTF-8"?>
-    <!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
-        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
-    <!-- (3) -->
-    <mapper namespace="com.example.domain.repository.todo.TodoRepository">
-
-        <!-- (4) -->
-        <select id="findOne" parameterType="string" resultMap="todoResultMap">
-          SELECT
-              todo_id,
-              title,
-              finished
-          FROM
-              t_todo
-          WHERE
-              todo_id = #{todoId}
-        </select>
-
-        <!-- (5) -->
-        <resultMap id="todoResultMap" type="Todo">
-            <result column="todo_id" property="todoId" />
-            <result column="title" property="title" />
-            <result column="finished" property="finished" />
-        </resultMap>
-
-    </mapper>
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (3)
-      - Repositoryインタフェース毎にマッピングファイルを作成する。
-
-        マッピングファイルのネームスペース(\ ``mapper``\ 要素の\ ``namespace``\ 属性)には、
-        RepositoryインタフェースのFQCN(Fully Qualified Class Name)を指定する。
-    * - | (4)
-      - Repositoryインタフェースに定義したメソッド毎に実行するステートメント(SQL)の定義を行う。
-
-        ステートメントID(各ステートメント要素(\ ``select``\/\ ``insert``\/\ ``update``\/\ ``delete``\ 要素の\ ``id``\ 属性)には、
-        Repositoryインタフェースのメソッド名を指定する。
-    * - | (5)
-      - クエリを発行する場合は、必要に応じてO/Rマッピングの定義を行う。
-
-        シンプルなO/Rマッピングであれば自動マッピングを利用する事ができるが、複雑なO/Rマッピングを行う場合は、
-        個別にマッピングの定義が必要となる。
-
-        上記例のマッピング定義は、シンプルなO/Rマッピングなので自動マッピングを利用する事もできる。
-
-
-.. _repository-jpa-label:
-
-JPAを使ってRepositoryを実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-| リレーショナルデータベースとの永続APIとして、JPAを使う場合、Spring Data JPAの\ ``org.springframework.data.jpa.repository.JpaRepository``\ を使用すると、非常に簡単にRepositoryを作成することが出来る。
-| Spring Data JPAの使用方法の詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\ を参照されたい。
-
-| Spring Data JPAを使った場合、基本的なCRUD操作は、JpaRepositoryを継承したインタフェースを作成するだけでよい。つまり、基本的には、RepositoryImplは不要である。
-| ただし、動的なクエリ(JPQL)を発行する必要がある場合は、RepositoryImplが必要となる。
-| Spring Data JPA使用時のRepositoryImplの実装については、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\ を参照されたい。
-
-- TodoRepository.java
-
- .. code-block:: java
-    :emphasize-lines: 1
-
-    public interface TodoRepository extends JpaRepository<Todo, String> { // (1)
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - JpaRepositoryを継承したインタフェースを定義するだけで、Todoエンティティに対する基本的なCRUD操作を実装なしで実現できる。
-
-| JpaRepositoryから提供されていない操作を追加する場合について説明する。
-| Spring Data JPAを使った場合、静的なクエリであればインタフェースにメソッドを追加し、そのメソッドが呼び出された時に実行するクエリ（JPQL）をアノテーションで指定すればよい。
-
-- TodoRepository.java
-
- .. code-block:: java
-    :emphasize-lines: 2
-
-    public interface TodoRepository extends JpaRepository<Todo, String> {
-        @Query("SELECT COUNT(t) FROM Todo t WHERE finished = :finished") // (1)
-        long countByFinished(@Param("finished") boolean finished);
-        // ...
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - \ ``@Query``\ アノテーションで、クエリ（JPQL）を指定する。
-
-.. _repository-rest-label:
-
-RestTemplateを使って外部システムと連携するRepositoryを実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-.. todo::
-
-    **TBD**
-
-    次版以降で詳細化する予定である。
-
-
-.. raw:: latex
-
-   \newpage
-
+インフラストラクチャ層の実装
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+インフラストラクチャ層では、\ :ref:`repository-class-label`\ を行う。
+
+RepositoryImplは、Repositoryインタフェースで定義したメソッドの実装を行う。
+
+
+.. _repository-class-label:
+
+RepositoryImplの実装
+--------------------------------------------------------------------------------
+
+以下に、MyBatis3とJPAを使って、リレーショナルデータベース用のRepositoryを作成する方法を紹介する。
+
+* :ref:`repository-mybatis3-label`
+* :ref:`repository-jpa-label`
+
+
+.. _repository-mybatis3-label:
+
+MyBatis3を使ってRepositoryを実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+リレーショナルデータベースとの永続APIとしてMyBatis3を使う場合、
+MyBatis3から提供されている「:ref:`DataAccessMyBatis3AppendixAboutMapperMechanism`」を利用してRepositoryインタフェースを作成すると、
+基本的にはRepositoryImplを実装する必要はない。
+
+これは、MyBatis3が、Mapperインタフェースのメソッドと呼び出すステートメント(SQL)のマッピングを自動で行う仕組みになっているためである。
+
+MyBatis3を使用する場合、アプリケーション開発者は、
+
+* Repositoryインタフェース(メソッドの定義)
+* マッピングファイル(SQLとO/Rマッピングの定義)
+
+の作成を行う。
+
+| 以下に、Repositoryインタフェースとマッピングファイルの作成例を示す。
+| MyBatis3の使用方法の詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`\ を参照されたい。
+
+- Repositoryインタフェース(Mapperインタフェース)の作成例
+
+ .. code-block:: java
+
+    package com.example.domain.repository.todo;
+
+    import com.example.domain.model.Todo;
+
+    // (1)
+    public interface TodoRepository {
+        // (2)
+        Todo findOne(String todoId);
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - POJOのインタフェースとして作成する。
+
+        MyBatis3のインタフェースやアノテーションなどを指定する必要はない。
+    * - | (2)
+      - Repositoryのメソッドを定義する。
+
+        基本的には、MyBatis3のアノテーションを付与する必要はないが、
+        一部のケースでアノテーションを指定する事もある。
+
+
+- マッピングファイルの作成例
+
+ .. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
+        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+    <!-- (3) -->
+    <mapper namespace="com.example.domain.repository.todo.TodoRepository">
+
+        <!-- (4) -->
+        <select id="findOne" parameterType="string" resultMap="todoResultMap">
+          SELECT
+              todo_id,
+              title,
+              finished
+          FROM
+              t_todo
+          WHERE
+              todo_id = #{todoId}
+        </select>
+
+        <!-- (5) -->
+        <resultMap id="todoResultMap" type="Todo">
+            <result column="todo_id" property="todoId" />
+            <result column="title" property="title" />
+            <result column="finished" property="finished" />
+        </resultMap>
+
+    </mapper>
+
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (3)
+      - Repositoryインタフェース毎にマッピングファイルを作成する。
+
+        マッピングファイルのネームスペース(\ ``mapper``\ 要素の\ ``namespace``\ 属性)には、
+        RepositoryインタフェースのFQCN(Fully Qualified Class Name)を指定する。
+    * - | (4)
+      - Repositoryインタフェースに定義したメソッド毎に実行するステートメント(SQL)の定義を行う。
+
+        ステートメントID(各ステートメント要素(\ ``select``\/\ ``insert``\/\ ``update``\/\ ``delete``\ 要素の\ ``id``\ 属性)には、
+        Repositoryインタフェースのメソッド名を指定する。
+    * - | (5)
+      - クエリを発行する場合は、必要に応じてO/Rマッピングの定義を行う。
+
+        シンプルなO/Rマッピングであれば自動マッピングを利用する事ができるが、複雑なO/Rマッピングを行う場合は、
+        個別にマッピングの定義が必要となる。
+
+        上記例のマッピング定義は、シンプルなO/Rマッピングなので自動マッピングを利用する事もできる。
+
+
+.. _repository-jpa-label:
+
+JPAを使ってRepositoryを実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| リレーショナルデータベースとの永続APIとして、JPAを使う場合、Spring Data JPAの\ ``org.springframework.data.jpa.repository.JpaRepository``\ を使用すると、非常に簡単にRepositoryを作成することが出来る。
+| Spring Data JPAの使用方法の詳細は、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\ を参照されたい。
+
+| Spring Data JPAを使った場合、基本的なCRUD操作は、JpaRepositoryを継承したインタフェースを作成するだけでよい。つまり、基本的には、RepositoryImplは不要である。
+| ただし、動的なクエリ(JPQL)を発行する必要がある場合は、RepositoryImplが必要となる。
+| Spring Data JPA使用時のRepositoryImplの実装については、\ :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`\ を参照されたい。
+
+- TodoRepository.java
+
+ .. code-block:: java
+    :emphasize-lines: 1
+
+    public interface TodoRepository extends JpaRepository<Todo, String> { // (1)
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - JpaRepositoryを継承したインタフェースを定義するだけで、Todoエンティティに対する基本的なCRUD操作を実装なしで実現できる。
+
+| JpaRepositoryから提供されていない操作を追加する場合について説明する。
+| Spring Data JPAを使った場合、静的なクエリであればインタフェースにメソッドを追加し、そのメソッドが呼び出された時に実行するクエリ（JPQL）をアノテーションで指定すればよい。
+
+- TodoRepository.java
+
+ .. code-block:: java
+    :emphasize-lines: 2
+
+    public interface TodoRepository extends JpaRepository<Todo, String> {
+        @Query("SELECT COUNT(t) FROM Todo t WHERE finished = :finished") // (1)
+        long countByFinished(@Param("finished") boolean finished);
+        // ...
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - \ ``@Query``\ アノテーションで、クエリ（JPQL）を指定する。
+
+.. _repository-rest-label:
+
+RestTemplateを使って外部システムと連携するRepositoryを実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+.. todo::
+
+    **TBD**
+
+    次版以降で詳細化する予定である。
+
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/ImplementationAtEachLayer/index.rst b/source/ImplementationAtEachLayer/index.rst
index 9bf3cb6974..57fb48a82c 100755
--- a/source/ImplementationAtEachLayer/index.rst
+++ b/source/ImplementationAtEachLayer/index.rst
@@ -1,21 +1,21 @@
-アプリケーション開発
-================================================================================
-TERASOLUNA Server Framework for Java (5.x)を使用する上での各種ルールや推奨実装方法を記述する。
-
-本ガイドラインでは以下のような開発の流れを想定している。
-
-.. toctree::
-   :maxdepth: 1
-
-   CreateWebApplicationProject
-   DomainLayer
-   InfrastructureLayer
-   ApplicationLayer
-   CreateProject
-
-レイヤ定義については、 :doc:`アプリケーションのレイヤ化 <../Overview/ApplicationLayering>` を参照。
-
-.. raw:: latex
-
-   \newpage
-
+アプリケーション開発
+================================================================================
+TERASOLUNA Server Framework for Java (5.x)を使用する上での各種ルールや推奨実装方法を記述する。
+
+本ガイドラインでは以下のような開発の流れを想定している。
+
+.. toctree::
+   :maxdepth: 1
+
+   CreateWebApplicationProject
+   DomainLayer
+   InfrastructureLayer
+   ApplicationLayer
+   CreateProject
+
+レイヤ定義については、 :doc:`アプリケーションのレイヤ化 <../Overview/ApplicationLayering>` を参照。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Introduction/ChangeLog.rst b/source/Introduction/ChangeLog.rst
index 18d59ab706..c92c0e2489 100755
--- a/source/Introduction/ChangeLog.rst
+++ b/source/Introduction/ChangeLog.rst
@@ -1,942 +1,942 @@
-更新履歴
-================================================================================
-
-.. tabularcolumns:: |p{0.15\linewidth}|p{0.25\linewidth}|p{0.60\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 15 25 60
-
-    * - 更新日付
-      - 更新箇所
-      - 更新内容
-
-    * - 2016-08-31
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
-      - 「How To Extend プログラマティックにトランザクショントークンのライフサイクルを管理する方法について」を削除。
-        
-        * \ ``TransactionTokenContext``\が提供していたアプリケーション向けAPIを使用した場合、
-          \ ``TransactionToken``\を正しい状態に維持できなくなるなど、フレームワーク内部の挙動に影響を及ぼすような作り込ができてしまうことから、
-          当該APIの非推奨化がなされた。非推奨化にあわせて該当機能の利用方法の記述を削除した。 
-
-    * - 
-      - :doc:`../Overview/FrameworkStack`
-      - 記載内容の追加
-      
-        * 利用するOSSのバージョンににmybatis-typehandlers-jsr310 、jackson-datatype-jsr310を追加 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-
-    * - 
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-      - 記載内容の追加
-      
-        * JSR-310 Date and Time APIをMybatis3.3で使用するための設定方法を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-        * MyBatisをJava SE 7環境で使用する場合の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-
-    * - 
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-      - 記載内容の変更、追加
-      
-        * JSR-310 Date and Time API / Joda Timeを使う場合の設定の記述を変更 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-        * JacksonをJava SE 7環境で使用する場合の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-
-    * - 
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/RestClient`
-      - 記載内容の追加
-      
-        * JSONでJSR-310 Date and Time APIを使う場合の設定を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-
-    * - 
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer`
-      - 記載内容の追加
-      
-        * JSR-310 Date and Time APIを使用する際の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
-
-    * - 2016-07-20
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
-      - Spring Framework 4.2.7対応に伴う修正
-      
-        * HTTPレスポンスヘッダー出力に関する説明内容を修正(\ `guideline#1965 <https://github.com/terasolunaorg/guideline/issues/1965>`_\ )
-
-    * - 
-      - :doc:`../Security/Authentication`
-      - Spring Security 4.0.4対応に伴う修正
-      
-        * Spring 4.0.4にて authentication-failure-url の仕様が改善されたことによるコード例の修正とNoteの削除 (\ `guideline#1963 <https://github.com/terasolunaorg/guideline/issues/1963>`_\ )
-
-    * - 2016-06-31
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
-      - 記載内容の追加
-      
-        * JIS漢字\ ``U+2014``\(EM DASH)のUCS(Unicode)文字対応について記載を追加(\ `guideline#1914 <https://github.com/terasolunaorg/guideline/issues/1914>`_\ )
-
-    * - 
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-      - 記載内容の追加
-      
-        * OSコマンドインジェクションに関する記載を追加 (\ `guideline#1957 <https://github.com/terasolunaorg/guideline/issues/1957>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-      - 記載内容の追加
-        
-        * ID付きログメッセージを出力するための拡張方法を記載 (\ `guideline#1928 <https://github.com/terasolunaorg/guideline/issues/1928>`_\ )
-
-    * - 2016-05-19
-      - \-
-      - 章立てを全面見直し
-      
-        * 更新内容の詳細は、\ `Optimize the order of chapters and sections #1683 <https://github.com/terasolunaorg/guideline/issues/1683>`_\ を参照されたい。
-      
-    * - 2016-02-24
-      - \-
-      - 5.1.0 RELEASE版公開
-
-        * 更新内容の詳細は、\ `5.1.0のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.1.0+is%3Aclosed>`_\ を参照されたい。
-    * -
-      - 全般
-      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
-
-        記載内容の改善
-
-        * 改善内容の詳細は、\ `5.1.0のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.1.0+label%3Aimprovement+is%3Aclosed>`_\ を参照されたい。
-
-    * -
-      - :doc:`index`
-      - 記載内容の追加
-
-        * ガイドラインに記載している内容の動作検証環境に関する記載を追加
-
-    * -
-      - :doc:`../Overview/FrameworkStack`
-      - 利用するOSSのバージョン(Spring IO Platformのバージョン)を更新
-
-        * Spring IO Platformのバージョンを2.0.1.RELEASEに更新
-        * Spring Frameworkのバージョンを4.2.4.RELEASEに更新
-        * Spring Securityのバージョンを4.0.3.RELEASEに更新
-
-        Spring IO Platformのバージョン更新に伴い利用するOSSのバージョンを更新
-
-        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.1.0の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.1.0_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
-
-        新規プロジェクト追加
-
-        * \ ``terasoluna-gfw-string``\ 、\ ``terasoluna-gfw-codepoints``\ 、\ ``terasoluna-gfw-validator``\ 、\ ``terasoluna-gfw-web-jsp``\ プロジェクトの説明を追加。
-
-        共通ライブラリの新機能追加
-
-        \ ``terasoluna-gfw-string``\ 
-         * 半角全角変換
-
-        \ ``terasoluna-gfw-codepoints``\
-         * コードポイントチェック
-         * コードポイントチェック用Bean Validation制約アノテーション
-
-        \ ``terasoluna-gfw-validator``\
-         * バイト長チェック用Bean Validation制約アノテーション
-         * フィールド値比較相関チェック用Bean Validation制約アノテーション
-
-    * -
-      - :doc:`../Overview/FirstApplication`
-      - 記述内容の改善
-
-        *  Spring Security 4 対応に伴うサンプルソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-         * \ ``AuthenticationPrincipalArgumentResolver``\のパッケージ変更
-
-    * -
-      - :doc:`../Tutorial/TutorialTodo`
-      - Spring Security 4 対応に伴う修正
-
-        *  Spring Security 4 対応に伴うソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-         * \ ``AuthenticationPrincipalArgumentResolver``\のパッケージ変更
-         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
-
-    * -
-      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
-      - 記述内容の改善
-
-        *  オフライン環境上でmvnコマンドを利用する方法を追加(\ `guideline#1197 <https://github.com/terasolunaorg/guideline/issues/1197>`_\ )
-
-    * -
-      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
-      - 記述内容の改善
-
-        *  EL関数を用いたリクエストURL作成方法について追加(\ `guideline#632 <https://github.com/terasolunaorg/guideline/issues/632>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
-      - 記載内容の追加
-
-        *  \ ``Log4jdbcProxyDataSource``\のオーバヘッドに対する注意点を追加(\ `guideline#1471 <https://github.com/terasolunaorg/guideline/issues/1471>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-      - MyBatis 3.3 対応に伴う記載内容の追加
-
-        *  \ ``defaultFetchSize``\の設定方法を追加(\ `guideline#965 <https://github.com/terasolunaorg/guideline/issues/965>`_\ )
-        * 遅延読み込み時のデフォルトが \ ``JAVASSIST``\に変更されている点を追加(\ `guideline#1384 <https://github.com/terasolunaorg/guideline/issues/1384>`_\ )
-        * \ ``ResultHandler``\にGenricsを付与したサンプルコードに修正(\ `guideline#1384 <https://github.com/terasolunaorg/guideline/issues/1384>`_\ )
-        * 新規追加された\ ``@Flush``\アノテーションを利用したソース例、及び注意点を追加(\ `guideline#915 <https://github.com/terasolunaorg/guideline/issues/915>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`
-      - ガイドラインのバグ修正
-
-        *  Like条件を使用するユーティリティを適切に修正(\ `guideline#1464 <https://github.com/terasolunaorg/guideline/issues/1464>`_\ )
-        *  JPQLにおける真偽値の不適切な実装を修正(\ `guideline#1525 <https://github.com/terasolunaorg/guideline/issues/1525>`_\ )
-        *  ページネーションの不適切な実装を修正(\ `guideline#1463 <https://github.com/terasolunaorg/guideline/issues/1463>`_\ )
-        *  \ ``DateTimeProvider``\を実装したサンプルコードの不適切な実装を修正(\ `guideline#1327 <https://github.com/terasolunaorg/guideline/issues/1327>`_\ )
-        *  共通Repositoryインタフェースの実装クラスのインスタンスを生成するためのFactoryクラスにおいて不適切な実装を修正(\ `guideline#1327 <https://github.com/terasolunaorg/guideline/issues/1327>`_\ )
-
-        記載内容の改善
-
-        *  \ ``hibernate.hbm2ddl.auto``\のデフォルト値を修正(\ `guideline#1282 <https://github.com/terasolunaorg/guideline/issues/1282>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-      - 記述内容の改善
-
-        *  MethodValidationに対する記述を追加(\ `guideline#708 <https://github.com/terasolunaorg/guideline/issues/708>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-      - 記述内容の改善
-
-        * Logbackの設定に\ ``ServiceLoader``\の仕組みを利用した記述の追加(\ `guideline#1275 <https://github.com/terasolunaorg/guideline/issues/1275>`_\ )
-        * Spring Security 4 対応に伴うサンプルソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-         * デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
-      - 記述内容の改善
-
-        *  SpEL式を用いたセッションスコープ参照の記述を追加(\ `guideline#1306 <https://github.com/terasolunaorg/guideline/issues/1306>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization`
-      - 記述内容の改善
-
-        *  JSPに適切にロケールを反映させるための記述を追加(\ `guideline#1439 <https://github.com/terasolunaorg/guideline/issues/1439>`_\ )
-        *  \ ``SessionLocalResolver``\の\ ``defaultLocale``\の説明を修正(\ `guideline#686 <https://github.com/terasolunaorg/guideline/issues/686>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-      - 記載内容の追加
-
-        *  JdbcCodeListに\ ``JdbcTemplate``\を指定するパターンを推奨とする記述を追加(\ `guideline#501 <https://github.com/terasolunaorg/guideline/issues/501>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-      - 記述内容の改善
-
-        *  \ ``Jackson2ObjectMapperFactoryBean``\を利用したObjectMapper作成を追加(\ `guideline#1022 <https://github.com/terasolunaorg/guideline/issues/1022>`_\ )
-        *  REST APIアプリケーションのドメイン層の実装にMyBatis3を前提とした形に修正 (\ `guideline#1323 <https://github.com/terasolunaorg/guideline/issues/1323>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/RestClient`
-      - 新規追加
-
-        *  RESTクライアント（HTTPクライアント）を追加(\ `guideline#1307 <https://github.com/terasolunaorg/guideline/issues/1307>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/SOAP`
-      - 新規追加
-
-        *  SOAP Web Service（サーバ/クライアント）を追加(\ `guideline#1340 <https://github.com/terasolunaorg/guideline/issues/1340>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
-      - 記述内容の改善
-
-        * アップロード処理の基本フロー、及びその説明をSpringの\ ``MultipartFilter``\を用いた記述に修正 (\ `guideline#193 <https://github.com/terasolunaorg/guideline/issues/193>`_\ )
-        * セキュリティ上の問題や、APサーバによって動作が異なる等の課題があるため、「クエリパラメータでCSRFトークンを送る方法」を削除。
-          ファイルアップロードの許容サイズを超過した場合、一部APサーバでCSRFトークンチェックが正しく行われない注意点を追加(\ `guideline#1602 <https://github.com/terasolunaorg/guideline/issues/1602>`_\ )
-
-
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
-      - Spring Framework4.2 対応に伴う記載内容の追加
-
-        *  xlsx形式を操作する\ ``AbstractXlsxView``\の追加\(\ `guideline#996 <https://github.com/terasolunaorg/guideline/issues/996>`_\ )
-
-        記述内容の改善
-
-        * iTextの仕様変更のため、\ ``com.lowagie:itext:4.2.1``\を利用したソース例を\ ``com.lowagie:itext:2.1.7``\を利用する形に修正
-
-    * -
-      - :doc:`../ArchitectureInDetail/MessagingDetail/Email`
-      - 新規追加
-
-        *  E-mail送信(SMTP)を追加(\ `guideline#1165 <https://github.com/terasolunaorg/guideline/issues/1165>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/DateAndTime`
-      - 新規追加
-
-        *  日付操作(JSR-310 Date and Time API)を追加(\ `guideline#1450 <https://github.com/terasolunaorg/guideline/issues/1450>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
-      - 記載内容の改善・追加
-
-        *  タイムゾーンを利用しない年月日を扱うサンプルコードのオブジェクトを\ ``LocalDate``\に修正(\ `guideline#1283 <https://github.com/terasolunaorg/guideline/issues/1283>`_\ )
-        *  Java8未満のバージョンで和暦を扱う方法を追加(\ `guideline#1450 <https://github.com/terasolunaorg/guideline/issues/1450>`_\ )
-
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
-      - 新規追加
-
-        *  文字列処理を追加(\ `guideline#1451 <https://github.com/terasolunaorg/guideline/issues/1451>`_\ )
-
-    * -
-      - :doc:`../Security/index`
-      - 構成見直し
-
-        * \ ``パスワードハッシュ化``\は、:doc:`../Security/Authentication` に移動
-        * :doc:`../Security/Authentication` から、セッション管理の項目を :doc:`../Security/SessionManagement` として独立
-
-    * -
-      - :doc:`../Security/SpringSecurity`
-      - Spring Security 4 対応に伴う修正
-
-        * 全記述の再編
-
-         *  \ ``spring-security-testの紹介``\
-         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
-         * \ ``RedirectAuthenticationHandler``\非推奨化に伴う説明の削除
-
-    * -
-      - :doc:`../Tutorial/TutorialSecurity`
-      - Spring Security 4 対応に伴う修正
-
-        * チュートリアルのソースをSpring Security 4 に対応した形に修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-    * -
-      - :doc:`../Security/Authentication`
-      - Spring Security 4 対応に伴う修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-        * 全記述の再編
-
-         *  \ ``auto-config="true"``\の削除
-         * 認証イベントリスナを\ ``@org.springframework.context.event.EventListener``\に修正
-         *  \ ``AuthenticationPrincipal``\のパッケージを修正
-         *  デフォルトでプレフィックスが付与されるため、サンプルソースから\ ``ROLE_``\プレフィックスの削除
-
-    * -
-      - :doc:`../Security/Authorization`
-      - Spring Security 4 対応に伴う修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-        * 全記述の再編
-
-         *  デフォルトでプレフィックスが付与されるため、サンプルソースから\ ``ROLE_``\プレフィックスの削除
-         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
-         *  \ ``@PreAuthorize``\の定義例追加
-
-    * -
-      - :doc:`../Security/CSRF`
-      - Spring Security 4 対応に伴う修正
-
-        * 全記述の再編
-
-         * CSRF無効化の設定を修正\ ``<sec:csrf disabled="true"/>``\
-
-        * 記述内容の改善
-
-         * マルチパートリクエストに関する項目を :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` に移動 (\ `guideline#1602 <https://github.com/terasolunaorg/guideline/issues/1602>`_\ )
-
-    * -
-      - :doc:`../Security/Encryption`
-      - 新規追加
-
-        * 暗号化ガイドラインの追加 (\ `guideline#1106 <https://github.com/terasolunaorg/guideline/issues/1106>`_\ )
-
-    * -
-      - :doc:`../Security/SecureLoginDemo`
-      - 新規追加
-
-        *  代表的なセキュリティ要件の実装例を追加(\ `guideline#1604 <https://github.com/terasolunaorg/guideline/issues/1604>`_\ )
-
-    * -
-      - :doc:`../Tutorial/TutorialSession`
-      - 新規追加
-
-        *  セッションチュートリアルを追加(\ `guideline#1599 <https://github.com/terasolunaorg/guideline/issues/1599>`_\ )
-
-    * -
-      - :doc:`../Tutorial/TutorialREST`
-      - Spring Security 4 対応に伴う修正
-
-        *  Spring Security 4 対応に伴うソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
-
-         * CSRF無効化の設定を修正\ ``<sec:csrf disabled="true"/>``\
-         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
-
-    * - 2015-08-05
-      - \-
-      - 5.0.1 RELEASE版公開
-
-        * 更新内容の詳細は、\ `5.0.1のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.0.1+is%3Aclosed>`_\ を参照されたい。
-    * -
-      - 全般
-      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
-
-        * 修正内容の詳細は、\ `5.0.1のIssue一覧(clerical error) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A5.0.1+label%3A%22clerical+error%22>`_\ を参照されたい。
-
-        記載内容の改善
-
-        * 改善内容の詳細は、\ `5.0.1のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.0.1+label%3Aimprovement+is%3Aclosed>`_\ を参照されたい。
-
-        アプリケーションサーバに関する記載内容の修正
-
-        * Resinに関する記載を削除
-        * リファレンスページへのリンクを最新化
-    * -
-      - :doc:`index`
-      - 記載内容の追加
-
-        * ガイドラインに記載している内容の動作検証環境に関する記載を追加
-    * -
-      - :doc:`../Overview/FrameworkStack`
-      - セキュリティ脆弱性対応に伴い利用するOSSのバージョン(Spring IO Platformのバージョン)を更新
-
-        * Spring IO Platformのバージョンを1.1.3.RELEASEに更新
-        * Spring Frameworkのバージョンを4.1.7.RELEASEに更新 (\ `CVE-2015-3192 <http://pivotal.io/security/cve-2015-3192>`_\ )
-        * JSTLのバージョンを1.2.5に更新 (\ `CVE-2015-0254 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0254>`_\ )
-
-        Spring IO Platformのバージョン更新に伴い利用するOSSのバージョンを更新
-
-        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.0.1の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.0.1_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
-
-        記載内容の改善 (\ `guideline#1148 <https://github.com/terasolunaorg/guideline/issues/1148>`_\ )
-
-        * \ ``terasoluna-gfw-recommended-dependencies``\ 、\ ``terasoluna-gfw-recommended-web-dependencies``\ 、\ ``terasoluna-gfw-parent``\ プロジェクトの説明を追加。
-        * プロジェクトの説明を修正。
-        * プロジェクト間の依存関係を示す図を追加。
-    * -
-      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
-      - 記載内容の追加
-
-        * warファイルのビルド方法を追加 (\ `guideline#1146 <https://github.com/terasolunaorg/guideline/issues/1146>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
-      - 記載内容の追加
-
-        * データソース切り替え機能の説明を追加 (\ `guideline#1071 <https://github.com/terasolunaorg/guideline/issues/1071>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-      - ガイドラインのバグ修正
-
-        * バッチ実行のタイミングに関する説明を修正 (\ `guideline#903 <https://github.com/terasolunaorg/guideline/issues/903>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-      - 記載内容の改善
-
-        * \ ``<logger>``\ タグの\ ``additivity``\ 属性に関する説明を追加 (\ `guideline#977 <https://github.com/terasolunaorg/guideline/issues/977>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
-      - 記載内容の改善
-
-        * セッションスコープのBeanの定義方法に関する説明を修正 (\ `guideline#1082 <https://github.com/terasolunaorg/guideline/issues/1082>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
-      - 記載内容の追加
-
-        * レスポンスをキャッシュしないように設定している時のトランザクショントークンチェックの動作を補足 (\ `guideline#1260 <https://github.com/terasolunaorg/guideline/issues/1260>`_\ )
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-      - 記載内容の追加
-
-        * コード名の表示方法を追加 (\ `guideline#1109 <https://github.com/terasolunaorg/guideline/issues/1109>`_\ )
-    * -
-      - | :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-        | :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-      - \ `CVE-2015-3192 <http://pivotal.io/security/cve-2015-3192>`_\ (XMLの脆弱性)に関する注意喚起を追加
-
-        * StAX(Streaming API for XML)を使用する際の注意事項を追加 (\ `guideline#1211 <https://github.com/terasolunaorg/guideline/issues/1211>`_\ )
-    * -
-      - | :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
-        | :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
-      - 共通ライブラリのバグ改修に伴う修正
-
-        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#297 <https://github.com/terasolunaorg/terasoluna-gfw/issues/297>`_\)に伴い、\ ``f:query``\ の仕様に関する説明を修正 (\ `guideline#1244 <https://github.com/terasolunaorg/guideline/issues/1244>`_\ )
-    * -
-      - :doc:`../Security/Authentication`
-      - 記載内容の改善
-
-        * \ ``ExceptionMappingAuthenticationFailureHandler``\ の親クラスのプロパティの扱いに関する注意点を追加 (\ `guideline#812 <https://github.com/terasolunaorg/guideline/issues/812>`_\ )
-        * \ ``AbstractAuthenticationProcessingFilter``\ の\ ``requiresAuthenticationRequestMatcher``\ プロパティの設定例を修正 (\ `guideline#1110 <https://github.com/terasolunaorg/guideline/issues/1110>`_\ )
-    * -
-      - :doc:`../Security/Authorization`
-      - ガイドラインのバグ修正
-
-        * \ ``<sec:authorize>``\ タグ(JSPタグライブラリ)の\ ``access``\ 属性の設定例を修正 (\ `guideline#1003 <https://github.com/terasolunaorg/guideline/issues/1003>`_\ )
-    * -
-      - 環境依存性の排除
-      - 記載内容の追加
-
-        * Tomcat8使用時の外部クラスパス(Tomcat7の\ ``VirtualWebappLoader``\ の代替機能)の適用方法を追加 (\ `guideline#1081 <https://github.com/terasolunaorg/guideline/issues/1081>`_\ )
-    * - 2015-06-12
-      - 全般
-      - 5.0.0 RELEASE英語版公開
-    * - 2015-03-06
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-      - ガイドラインのバグ修正
-
-        * 例外ハンドリング用のサンプルコード(\ ``NullPointerException``\ が発生するコードが含まれている問題)を修正。
-          修正内容の詳細は、\ `guideline#918のIssue <https://github.com/terasolunaorg/guideline/issues/918>`_\ を参照されたい。
-    * -
-      - :doc:`../Tutorial/TutorialREST`
-      - ガイドラインのバグ修正
-
-        * 例外ハンドリングの処理で\ ``NullPointerException``\ が発生する問題を修正。
-          修正内容の詳細は、\ `guideline#918のIssue <https://github.com/terasolunaorg/guideline/issues/918>`_\ を参照されたい。
-    * - 2015-02-23
-      - \-
-      - 5.0.0 RELEASE版公開
-
-        * 更新内容の詳細は、\ `5.0.0のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.0.0+is%3Aclosed>`_\ と\ `1.0.2のバックポートIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Abackport>`_\ を参照されたい。
-    * -
-      - 全般
-      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
-
-        * 修正内容の詳細は、\ `1.0.2のバックポートIssue一覧(clerical error) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Abackport+label%3A%22clerical+error%22>`_\ を参照されたい。
-
-        記載内容の改善
-
-        * 改善内容の詳細は、\ `5.0.0のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.0.0+label%3Aimprovement+is%3Aclosed>`_\ と\ `1.0.2のバックポートIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Aimprovement+label%3Abackport>`_\ を参照されたい。
-
-        新規追加
-
-        * :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
-        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
-        * :doc:`../Appendix/Lombok`
-
-        version 5.0.0対応に伴う更新
-
-        * MyBatis2の説明を削除
-    * -
-      - :doc:`../Overview/FrameworkStack`
-      - Spring IO Platform対応
-
-        * 一部のライブラリを除き、推奨ライブラリの管理をSpring IO Platformに委譲する構成に変更した旨を追加。
-
-        OSSバージョンの更新
-
-        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.0.0の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.0.0_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
-    * -
-      - :doc:`../Overview/FirstApplication`
-      - version 5.0.0対応に伴う更新
-
-        * Spring Framework 4.1の適用。
-        * ドキュメント上の構成の見直し。
-    * -
-      - :doc:`../Overview/ApplicationLayering`
-      - 英語翻訳のバグ修正
-
-        * ドメイン層と他の層との関係に関する翻訳ミスを修正。
-          修正内容の詳細は、\ `guideline#364のIssue <https://github.com/terasolunaorg/guideline/issues/364>`_\ を参照されたい。
-    * -
-      - :doc:`../Tutorial/TutorialTodo`
-      - version 5.0.0対応に伴う更新
-
-        * Spring Framework 4.1の適用。
-        * インフラストラクチャ層としてMyBatis3をサポート。
-        * ドキュメント上の構成の見直し。
-    * -
-      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
-      - 新規追加
-
-        * マルチプロジェクト構成のプロジェクト作成方法を追加。
-    * -
-      - :doc:`../ImplementationAtEachLayer/DomainLayer`
-      - Spring Framework 4.1対応に伴う修正
-
-        * JTA 1.2の\ ``@Transactional``\ の扱いに関する記載を追加。
-          修正内容の詳細は、\ `guideline#562のIssue <https://github.com/terasolunaorg/guideline/issues/562>`_\ を参照されたい。
-        * JPA(Hibernate実装)使用時の\ ``@Transactional(readOnly = true)``\ の扱い関する説明を修正。
-          \ `SPR-8959 <https://jira.spring.io/browse/SPR-8959>`_\ (Spring Framework 4.1以降)の対応により、
-          JDBCドライバに対して「読み取り専用のトランザクション」として扱うように指示できるように改善された。
-
-        記載内容の追加
-
-        * 「読み取り専用のトランザクション」が有効にならないケースに関する注意点を追加。
-          追加内容の詳細は、\ `guideline#861のIssue <https://github.com/terasolunaorg/guideline/issues/861>`_\ を参照されたい。
-    * -
-      - :doc:`../ImplementationAtEachLayer/InfrastructureLayer`
-      - MyBatis3対応に伴う修正
-
-        * RepositoryImplの実装としてMyBatis3の仕組みを利用する方法を追加。
-    * -
-      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
-      - Spring Framework 4.1対応に伴う修正
-
-        * \ ``@ControllerAdvice``\ に追加された属性(適用対象をControllerを絞り込むための属性)に関する説明を追加。
-          修正内容の詳細は、\ `guideline#549のIssue <https://github.com/terasolunaorg/guideline/issues/549>`_\ を参照されたい。
-        * \ ``<mvc:view-resolvers>``\ に関する説明を追加。
-          修正内容の詳細は、\ `guideline#609のIssue <https://github.com/terasolunaorg/guideline/issues/609>`_\ を参照されたい。
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
-      - 共通ライブラリのバグ改修に伴う修正
-
-        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#78 <https://github.com/terasolunaorg/terasoluna-gfw/issues/78>`_\)に伴い、全角文字のワイルドカード文字(\ ``％``\ , \ ``＿``\ )\ の扱いに関する説明を追加。
-          修正内容の詳細は、\ `guideline#712のIssue <https://github.com/terasolunaorg/guideline/issues/712>`_\ を参照されたい。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
-          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
-
-        Apache Commons DBCP 2.0対応に伴う修正
-
-        * Apache Commons DBCP 2.0用のコンポーネントを使用するようにサンプルコード及び説明を変更。
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-      - 新規追加
-
-        * O/R MapperとしてMyBatis3を使用してインフラストラクチャ層を実装する方法を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`
-      - ガイドラインのバグ修正
-
-        * ロングトランザクションの楽観ロックのサンプルコード(レコードが取得できない時の処理)の修正。
-          修正内容の詳細は、\ `guideline#450のIssue <https://github.com/terasolunaorg/guideline/issues/450>`_\ を参照されたい。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
-          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
-
-        MyBatis3対応に伴う修正
-
-        * MyBatis3使用時の排他制御の実装方法を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-      - ガイドラインのバグ修正
-
-        * \ ``@GroupSequence``\ の説明を修正。
-          修正内容の詳細は、\ `guideline#296のIssue <https://github.com/terasolunaorg/guideline/issues/296>`_\ を参照されたい。
-
-        共通ライブラリのバグ改修に伴う修正
-
-        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#256 <https://github.com/terasolunaorg/terasoluna-gfw/issues/256>`_\)に伴い、\ ``ValidationMessages.properties``\ に関する注意点を追加。
-          修正内容の詳細は、\ `guideline#766のIssue <https://github.com/terasolunaorg/guideline/issues/766>`_\ を参照されたい。
-
-        記載内容の追加
-
-        * Spring Validatorを使用した相関項目チェック時に、Bean ValidationのGroup Validationの仕組みと連携する方法を追加。
-          追加内容の詳細は、\ `guideline#320のIssue <https://github.com/terasolunaorg/guideline/issues/320>`_\ を参照されたい。
-
-        Bean Validation 1.1(Hibernate Validator 5.1)対応に伴う修正
-
-        * \ ``@DecimalMin``\ と\ ``@DecimalMax``\ の\ ``inclusive``\ 属性の説明を追加。
-        * Expression Languageに関する記載を追加。
-        * Bean Validation 1.1から非推奨になったAPIについて記載。
-        * Hibernate Validator 5.1.xの\ ``ValidationMessages.properties``\ に関するバグ(\ `HV-881 <https://hibernate.atlassian.net/browse/HV-881>`_\ )に関する記載と回避方法を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
-      - 記載内容の追加
-
-        * 513バイトより小さいサイズのエラーをレスポンスするとInternet Explorerで簡易エラーページが表示される可能性がある旨の説明を追加。
-          追加内容の詳細は、\ `guideline#189のIssue <https://github.com/terasolunaorg/guideline/issues/189>`_\ を参照されたい。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
-          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
-      - Spring Security 3.2対応に伴う修正
-
-        * POSTリクエスト時にセッションタイムアウトではなくCSRFトークンエラーが発生する問題(\ `SEC-2422 <https://jira.springsource.org/browse/SEC-2422>`_\ )に関する記載を削除。
-          Spring Security 3.2の正式版ではセッションタイムアウトを検知できる仕組みが組み込まれており、問題が解消されている。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
-      - 共通ライブラリの変更内容の反映
-
-        * 共通ライブラリの改善(\ `terasoluna-gfw#24 <https://github.com/terasolunaorg/terasoluna-gfw/issues/24>`_\)に伴い、新たに追加したメッセージタイプ(warning)と非推奨にしたメッセージタイプ(warn)に関する説明を追加。
-          修正内容の詳細は、\ `guideline#74のIssue <https://github.com/terasolunaorg/guideline/issues/74>`_\ を参照されたい。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
-      - 共通ライブラリの変更内容の反映
-
-        * 共通ライブラリの改善(\ `terasoluna-gfw#13 <https://github.com/terasolunaorg/terasoluna-gfw/issues/13>`_\)に伴い、active状態のページリンクの説明を変更。
-          修正内容の詳細は、\ `guideline#699のIssue <https://github.com/terasolunaorg/guideline/issues/699>`_\ を参照されたい。
-        * 共通ライブラリの改善(\ `terasoluna-gfw#14 <https://github.com/terasolunaorg/terasoluna-gfw/issues/14>`_\)に伴い、disabled状態のページリンクの説明を変更。
-          修正内容の詳細は、\ `guideline#700のIssue <https://github.com/terasolunaorg/guideline/issues/700>`_\ を参照されたい。
-
-        Spring Data Common 1.9対応に伴う修正
-
-        * バージョンアップに伴い、API仕様が変更されているクラス(\ ``Page``\ インタフェースなど)に対する注意点を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-      - 共通ライブラリのバグ改修に伴う修正
-
-        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#16 <https://github.com/terasolunaorg/terasoluna-gfw/issues/16>`_\)に伴い、\ ``ExistInCodeList`` のメッセージキーを変更とバージョンアップ時の注意点を追加。
-          修正内容の詳細は、\ `guideline#638のIssue <https://github.com/terasolunaorg/guideline/issues/638>`_\ を参照されたい。
-        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#256 <https://github.com/terasolunaorg/terasoluna-gfw/issues/256>`_\)に伴い、\ ``@ExistInCodeList``\ のメッセージ定義に関する注意点を追加。
-          修正内容の詳細は、\ `guideline#766のIssue <https://github.com/terasolunaorg/guideline/issues/766>`_\ を参照されたい。
-
-        共通ライブラリの変更内容の反映
-
-        * 共通ライブラリの機能追加(\ `terasoluna-gfw#25 <https://github.com/terasolunaorg/terasoluna-gfw/issues/25>`_\)に伴い、\ ``EnumCodeList``\ クラスの使用方法を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-      - Spring Security 3.2対応に伴う修正
-
-        * CSRF対策のサンプルコード(CSRF対策用の\ ``<meta>``\ タグの生成方法)を変更。
-
-        Jackson 2.4対応に伴う修正
-
-        * Jackson 2.4用のコンポーネントを使用するようにサンプルコード及び説明を変更。
-    * -
-      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-      - 記載内容の改善
-
-        * Locationヘッダやハイパーメディアリンクに設定するURLを組み立てる方法を改善。
-          改善内容の詳細は、\ `guideline#374のIssue <https://github.com/terasolunaorg/guideline/issues/374>`_\ を参照されたい。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * \ ``@RestController``\ に関する説明を追加。
-          修正内容の詳細は、\ `guideline#560のIssue <https://github.com/terasolunaorg/guideline/issues/560>`_\ を参照されたい。
-        * ビルダースタイルのAPIを使用して\ ``ResponseEntity``\ を生成するようにサンプルコードを変更。
-
-        Jackson 2.4対応に伴う修正
-
-        * Jackson 2.4用のコンポーネントを使用するようにサンプルコード及び説明を変更。
-
-        Spring Data Common 1.9対応に伴う修正
-
-        * バージョンアップに伴い、API仕様が変更されているクラス(\ ``Page``\ インタフェースなど)に対する注意点を追加。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
-      - ガイドラインのバグ修正
-
-        * \ `CVE-2014-0050 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0050>`_\ (File Uploadの脆弱性)が解決されたApache Commons FileUploadのバージョンを修正。
-          修正内容の詳細は、\ `guideline#846のIssue <https://github.com/terasolunaorg/guideline/issues/846>`_\ を参照されたい。
-
-        記載内容の追加
-
-        * 一部のアプリケーションサーバでServlet 3のファイルアップロード機能が文字化けする問題があるため、この事象の回避策としてApache Commons FileUploadを使用する方法を追加。
-          追加内容の詳細は、\ `guideline#778のIssue <https://github.com/terasolunaorg/guideline/issues/778>`_\ を参照されたい。
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
-      - 共通ライブラリの変更内容の反映
-
-        * 共通ライブラリの改善(\ `terasoluna-gfw#224 <https://github.com/terasolunaorg/terasoluna-gfw/issues/224>`_\)に伴い、ドキュメント内の構成とパッケージ名及びクラス名を変更。
-          修正内容の詳細は、\ `guideline#701のIssue <https://github.com/terasolunaorg/guideline/issues/701>`_\ を参照されたい。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout`
-      - Tiles 3.0対応に伴う修正
-
-        * Tiles 3.0用のコンポーネントを使用するように設定例及び説明を変更。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * \ ``<mvc:view-resolvers>``\ 、\ ``<mvc:tiles>``\ 、\ ``<mvc:definitions>``\ に関する説明を追加。
-          修正内容の詳細は、\ `guideline#609のIssue <https://github.com/terasolunaorg/guideline/issues/609>`_\ を参照されたい。
-    * -
-      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
-      - 記載内容の追加
-
-        * \ ``LocalDateTime``\ の使い方を追加。
-          追加内容の詳細は、\ `guideline#584のIssue <https://github.com/terasolunaorg/guideline/issues/584>`_\ を参照されたい。
-
-        Joda Time 2.5対応に伴う修正
-
-        * バージョンアップに伴い\ ``DateMidnight``\ クラスが非推奨になったため、指定日の開始時刻(0:00:00.000)の取得方法を変更。
-    * -
-      - :doc:`../Security/SpringSecurity`
-      - Spring Security 3.2対応に伴う修正
-
-        * Appendixに「セキュアなHTTPヘッダー付与の設定」を追加。
-    * -
-      - :doc:`../Tutorial/TutorialSecurity`
-      - version 5.0.0対応に伴う更新
-
-        * インフラストラクチャ層としてMyBatis3を使用するように変更。
-        * Spring Framework 4.1対応の適用。
-        * Spring Security 3.2対応の適用。
-        * ドキュメント上の構成の見直し。
-    * -
-      - :doc:`../Security/Authentication`
-      - ガイドラインのバグ修正
-
-        * \ ``<form-login>``\ 、\ ``<logout>``\ 、\ ``<session-management>``\ タグの説明不備や説明不足の修正。
-          修正内容の詳細は、\ `guideline#754のIssue <https://github.com/terasolunaorg/guideline/issues/754>`_\ を参照されたい。
-        * AuthenticationFilterの拡張方法を示すサンプルコードの修正(セッション・フィクセーション攻撃対策やCSRF対策を有効にするための設定を追加)。
-          修正内容の詳細は、\ `guideline#765のIssue <https://github.com/terasolunaorg/guideline/issues/765>`_\ を参照されたい。
-
-        Spring Security 3.2対応に伴う修正
-
-        * CSRF対策を有効にしている際のログアウト方法に関する注意点を追加。
-        * Controllerから\ ``UserDetails``\ (認証ユーザ情報クラス)にアクセスする方法として、\ ``@AuthenticationPrincipal``\ の説明を追加。
-        * \ ``<sec:session-management>``\ の\ ``session-fixation-protection``\ 属性のパラメータとして、\ ``changeSessionId``\ の説明を追加。
-        * セッションタイムアウトの検出方法と注意点を追加。
-        * 同一ユーザの同時セッション数制御(Concurrent Session Control)を有効にするための設定方法を変更(\ ``<sec:concurrency-control>``\ を使用するように変更)。
-        * 同一ユーザの同時セッション数制御関連のクラスが非推奨になり別のクラスが提供されている旨を追加。
-    * -
-      - :doc:`../Security/CSRF`
-      - Spring Security 3.2対応に伴う修正
-
-        * version 1.0.xの共通ライブラリに同封していたSpring Security 3.2.0(正式リリース前の暫定バージョン)のCSRF対策用コンポーネントに関する記載を削除。
-        * CSRF対策を有効にするための設定方法をSpring Security 3.2の正式な作法(\ ``<sec:csrf>``\ を使用する方法)に変更。
-        * CSRF対策用のJSPタグライブラリ(\ ``<sec:csrfInput>``\ と\ ``<sec:csrfMetaTags>``\ )に関する記載を追加。
-        * CSRF対策を有効にしている時のセッションタイムアウトの検出方法と注意点を追加。
-
-        Spring Framework 4.1対応に伴う修正
-
-        * \ ``<form:form>``\ を使用した際に、CSRFトークンがhiddenとして出力される条件に関する記載を変更。
-    * -
-      - :doc:`../Tutorial/TutorialREST`
-      - 記載内容の改善
-
-        * \ :doc:`../Tutorial/TutorialTodo`\ で作成したプロジェクトにREST APIを追加する手順にすることで、特定のインフラストラクチャ層(O/R Mapper)に依存しない内容に変更。
-          修正内容の詳細は、\ `guideline#325のIssue <https://github.com/terasolunaorg/guideline/issues/325>`_\ を参照されたい。
-
-        version 5.0.0対応に伴う更新
-
-        * Spring Framework 4.1対応の適用。
-        * Spring Security 3.2対応の適用。
-        * Jackson 2.4対応の適用。
-    * -
-      - ブランクプロジェクトから新規プロジェクトの作成
-      - 記載内容の改善
-
-        * マルチプロジェクト構成のプロジェクト作成方法をサポート。
-        * シングルプロジェクト構成のプロジェクト作成方法を最新化。
-    * -
-      - :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
-      - 新規追加
-
-        * 共通ライブラリから提供しているJSPタグライブラリとEL関数の説明を追加。
-    * -
-      - :doc:`../Appendix/Lombok`
-      - 新規追加
-
-        * Lombokを使用したボイラープレートコードの排除方法の説明を追加。
-    * -
-      - 英語版
-      - 以下の英語版を追加
-
-        * :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
-        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
-        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`
-        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
-        * :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`
-        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/PropertyManagement`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-        * :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout`
-        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
-        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer`
-        * :doc:`../Security/SpringSecurity`
-        * :doc:`../Security/Authentication`
-        * :doc:`../Security/Authorization`
-        * :doc:`../Security/CSRF`
-        * ブランクプロジェクトから新規のプロジェクトの作成
-        * :doc:`../Appendix/Nexus`
-        * 環境依存性の排除
-        * Project Structure Standard
-        * :doc:`../Appendix/Lombok`
-        * :doc:`../Appendix/SpringComprehensionCheck`
-    * - 2014-08-27
-      - \-
-      - 1.0.1 RELEASE版公開
-
-        更新内容の詳細は、\ `1.0.1のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?labels=&milestone=1&state=closed>`_\ を参照されたい。
-    * -
-      - 全般
-      - ガイドラインのバグ(タイプミスや記述ミスなど)を修正
-
-        更新内容の詳細は、\ `1.0.1のIssue一覧(bug & clerical error) <https://github.com/terasolunaorg/guideline/issues?labels=bug&milestone=1&state=closed>`_\ を参照されたい。
-    * -
-      - 日本語版
-      - 以下の日本語版を追加
-
-        * :doc:`CriteriaBasedMapping`
-        * :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
-        * :doc:`../Tutorial/TutorialREST`
-    * -
-      - 英語版
-      - 以下の英語版を追加
-
-        * :doc:`index`
-        * :doc:`../Overview/index`
-        * :doc:`../Tutorial/TutorialTodo`
-        * :doc:`../ImplementationAtEachLayer/index`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
-        * :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
-        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
-        * :doc:`../Security/XSS`
-        * :doc:`../Appendix/ReferenceBooks`
-    * -
-      - :doc:`../Overview/FrameworkStack`
-      - バグ改修に伴い利用するOSSのバージョンを更新
-
-        * GroupId「\ ``org.springframework``\」のバージョンを3.2.4.RELEASEから3.2.10.RELEASEに更新
-        * GroupId「\ ``org.springframework.data``\」ArtifactId「\ ``spring-data-commons``\」のバージョンを1.6.1.RELEASEから1.6.4.RELEASEに更新
-        * GroupId「\ ``org.springframework.data``\」ArtifactId「\ ``spring-data-jpa``\」のバージョンを1.4.1.RELEASEから1.4.3.RELEASEに更新
-        * GroupId「\ ``org.aspectj``\」のバージョンを1.7.3から1.7.4に更新
-        * GroupId「\ ``javax.transaction``\」ArtifactId「\ ``jta``\」を削除
-    * -
-      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
-      - `CVE-2014-1904 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1904>`_\(\ ``<form:form>``\タグのaction属性のXSS脆弱性)に関する注意喚起を追加
-    * -
-      - 日本語版
-
-        :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
-      - バグ改修に関する記載を追加
-
-        * 共通ライブラリから提供している\ ``<t:messagesPanel>``\タグのバグ改修(\ `terasoluna-gfw#10 <https://github.com/terasolunaorg/terasoluna-gfw/issues/10>`_\)
-    * -
-      - 日本語版
-
-        :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
-      - バグ改修に関する記載を更新
-
-        * 共通ライブラリから提供している\ ``<t:pagination>``\タグのバグ改修(\ `terasoluna-gfw#12 <https://github.com/terasolunaorg/terasoluna-gfw/issues/12>`_\)
-        * Spring Data Commonsのバグ改修(\ `terasoluna-gfw#22 <https://github.com/terasolunaorg/terasoluna-gfw/issues/22>`_\)
-    * -
-      - 日本語版
-
-        :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
-      - XXE Injection対策に関する記載を更新
-    * -
-      - 日本語版
-
-        :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
-      - `CVE-2014-0050 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0050>`_\(File Uploadの脆弱性)に関する注意喚起を追加
-
-        ガイドラインのバグを修正
-
-        * \ ``MultipartFilter``\を設定した場合、\ ``SystemExceptionResolver``\を使用して\ ``MultipartException``\をハンドリングする事が出来ないため、サーブレットコンテナのerror-page機能を使用してハンドリングする方法を追加。修正内容の詳細は、\ `guideline#59のIssue <https://github.com/terasolunaorg/guideline/issues/59>`_\ を参照されたい。
-    * -
-      - 日本語版
-      - 以下のプロジェクト作成方法を\ ``mvn archetype:generate``\ から行うように変更
-
-        * :doc:`../Overview/FirstApplication`
-        * :doc:`../Tutorial/TutorialTodo`
-        * :doc:`../Tutorial/TutorialTodo`
-    * -
-      - 日本語版
-      - 以下のMavenアーキタイプ作成方法を微修正
-
-        * :doc:`../Tutorial/TutorialSecurity`
-        * ブランクプロジェクトから新規プロジェクトの作成
-    * - 2013-12-17
-      - 日本語版
-      - 1.0.0 Public Review版公開
-
-.. raw:: latex
-
-   \newpage
+更新履歴
+================================================================================
+
+.. tabularcolumns:: |p{0.15\linewidth}|p{0.25\linewidth}|p{0.60\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 15 25 60
+
+    * - 更新日付
+      - 更新箇所
+      - 更新内容
+
+    * - 2016-08-31
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
+      - 「How To Extend プログラマティックにトランザクショントークンのライフサイクルを管理する方法について」を削除。
+        
+        * \ ``TransactionTokenContext``\が提供していたアプリケーション向けAPIを使用した場合、
+          \ ``TransactionToken``\を正しい状態に維持できなくなるなど、フレームワーク内部の挙動に影響を及ぼすような作り込ができてしまうことから、
+          当該APIの非推奨化がなされた。非推奨化にあわせて該当機能の利用方法の記述を削除した。 
+
+    * - 
+      - :doc:`../Overview/FrameworkStack`
+      - 記載内容の追加
+      
+        * 利用するOSSのバージョンににmybatis-typehandlers-jsr310 、jackson-datatype-jsr310を追加 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+
+    * - 
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+      - 記載内容の追加
+      
+        * JSR-310 Date and Time APIをMybatis3.3で使用するための設定方法を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+        * MyBatisをJava SE 7環境で使用する場合の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+
+    * - 
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - 記載内容の変更、追加
+      
+        * JSR-310 Date and Time API / Joda Timeを使う場合の設定の記述を変更 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+        * JacksonをJava SE 7環境で使用する場合の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+
+    * - 
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/RestClient`
+      - 記載内容の追加
+      
+        * JSONでJSR-310 Date and Time APIを使う場合の設定を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+
+    * - 
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer`
+      - 記載内容の追加
+      
+        * JSR-310 Date and Time APIを使用する際の注意点を記載 (\ `guideline#1966 <https://github.com/terasolunaorg/guideline/issues/1966>`_\ )
+
+    * - 2016-07-20
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
+      - Spring Framework 4.2.7対応に伴う修正
+      
+        * HTTPレスポンスヘッダー出力に関する説明内容を修正(\ `guideline#1965 <https://github.com/terasolunaorg/guideline/issues/1965>`_\ )
+
+    * - 
+      - :doc:`../Security/Authentication`
+      - Spring Security 4.0.4対応に伴う修正
+      
+        * Spring 4.0.4にて authentication-failure-url の仕様が改善されたことによるコード例の修正とNoteの削除 (\ `guideline#1963 <https://github.com/terasolunaorg/guideline/issues/1963>`_\ )
+
+    * - 2016-06-31
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
+      - 記載内容の追加
+      
+        * JIS漢字\ ``U+2014``\(EM DASH)のUCS(Unicode)文字対応について記載を追加(\ `guideline#1914 <https://github.com/terasolunaorg/guideline/issues/1914>`_\ )
+
+    * - 
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      - 記載内容の追加
+      
+        * OSコマンドインジェクションに関する記載を追加 (\ `guideline#1957 <https://github.com/terasolunaorg/guideline/issues/1957>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+      - 記載内容の追加
+        
+        * ID付きログメッセージを出力するための拡張方法を記載 (\ `guideline#1928 <https://github.com/terasolunaorg/guideline/issues/1928>`_\ )
+
+    * - 2016-05-19
+      - \-
+      - 章立てを全面見直し
+      
+        * 更新内容の詳細は、\ `Optimize the order of chapters and sections #1683 <https://github.com/terasolunaorg/guideline/issues/1683>`_\ を参照されたい。
+      
+    * - 2016-02-24
+      - \-
+      - 5.1.0 RELEASE版公開
+
+        * 更新内容の詳細は、\ `5.1.0のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.1.0+is%3Aclosed>`_\ を参照されたい。
+    * -
+      - 全般
+      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
+
+        記載内容の改善
+
+        * 改善内容の詳細は、\ `5.1.0のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.1.0+label%3Aimprovement+is%3Aclosed>`_\ を参照されたい。
+
+    * -
+      - :doc:`index`
+      - 記載内容の追加
+
+        * ガイドラインに記載している内容の動作検証環境に関する記載を追加
+
+    * -
+      - :doc:`../Overview/FrameworkStack`
+      - 利用するOSSのバージョン(Spring IO Platformのバージョン)を更新
+
+        * Spring IO Platformのバージョンを2.0.1.RELEASEに更新
+        * Spring Frameworkのバージョンを4.2.4.RELEASEに更新
+        * Spring Securityのバージョンを4.0.3.RELEASEに更新
+
+        Spring IO Platformのバージョン更新に伴い利用するOSSのバージョンを更新
+
+        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.1.0の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.1.0_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
+
+        新規プロジェクト追加
+
+        * \ ``terasoluna-gfw-string``\ 、\ ``terasoluna-gfw-codepoints``\ 、\ ``terasoluna-gfw-validator``\ 、\ ``terasoluna-gfw-web-jsp``\ プロジェクトの説明を追加。
+
+        共通ライブラリの新機能追加
+
+        \ ``terasoluna-gfw-string``\ 
+         * 半角全角変換
+
+        \ ``terasoluna-gfw-codepoints``\
+         * コードポイントチェック
+         * コードポイントチェック用Bean Validation制約アノテーション
+
+        \ ``terasoluna-gfw-validator``\
+         * バイト長チェック用Bean Validation制約アノテーション
+         * フィールド値比較相関チェック用Bean Validation制約アノテーション
+
+    * -
+      - :doc:`../Overview/FirstApplication`
+      - 記述内容の改善
+
+        *  Spring Security 4 対応に伴うサンプルソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+         * \ ``AuthenticationPrincipalArgumentResolver``\のパッケージ変更
+
+    * -
+      - :doc:`../Tutorial/TutorialTodo`
+      - Spring Security 4 対応に伴う修正
+
+        *  Spring Security 4 対応に伴うソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+         * \ ``AuthenticationPrincipalArgumentResolver``\のパッケージ変更
+         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
+
+    * -
+      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
+      - 記述内容の改善
+
+        *  オフライン環境上でmvnコマンドを利用する方法を追加(\ `guideline#1197 <https://github.com/terasolunaorg/guideline/issues/1197>`_\ )
+
+    * -
+      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
+      - 記述内容の改善
+
+        *  EL関数を用いたリクエストURL作成方法について追加(\ `guideline#632 <https://github.com/terasolunaorg/guideline/issues/632>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
+      - 記載内容の追加
+
+        *  \ ``Log4jdbcProxyDataSource``\のオーバヘッドに対する注意点を追加(\ `guideline#1471 <https://github.com/terasolunaorg/guideline/issues/1471>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+      - MyBatis 3.3 対応に伴う記載内容の追加
+
+        *  \ ``defaultFetchSize``\の設定方法を追加(\ `guideline#965 <https://github.com/terasolunaorg/guideline/issues/965>`_\ )
+        * 遅延読み込み時のデフォルトが \ ``JAVASSIST``\に変更されている点を追加(\ `guideline#1384 <https://github.com/terasolunaorg/guideline/issues/1384>`_\ )
+        * \ ``ResultHandler``\にGenricsを付与したサンプルコードに修正(\ `guideline#1384 <https://github.com/terasolunaorg/guideline/issues/1384>`_\ )
+        * 新規追加された\ ``@Flush``\アノテーションを利用したソース例、及び注意点を追加(\ `guideline#915 <https://github.com/terasolunaorg/guideline/issues/915>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`
+      - ガイドラインのバグ修正
+
+        *  Like条件を使用するユーティリティを適切に修正(\ `guideline#1464 <https://github.com/terasolunaorg/guideline/issues/1464>`_\ )
+        *  JPQLにおける真偽値の不適切な実装を修正(\ `guideline#1525 <https://github.com/terasolunaorg/guideline/issues/1525>`_\ )
+        *  ページネーションの不適切な実装を修正(\ `guideline#1463 <https://github.com/terasolunaorg/guideline/issues/1463>`_\ )
+        *  \ ``DateTimeProvider``\を実装したサンプルコードの不適切な実装を修正(\ `guideline#1327 <https://github.com/terasolunaorg/guideline/issues/1327>`_\ )
+        *  共通Repositoryインタフェースの実装クラスのインスタンスを生成するためのFactoryクラスにおいて不適切な実装を修正(\ `guideline#1327 <https://github.com/terasolunaorg/guideline/issues/1327>`_\ )
+
+        記載内容の改善
+
+        *  \ ``hibernate.hbm2ddl.auto``\のデフォルト値を修正(\ `guideline#1282 <https://github.com/terasolunaorg/guideline/issues/1282>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      - 記述内容の改善
+
+        *  MethodValidationに対する記述を追加(\ `guideline#708 <https://github.com/terasolunaorg/guideline/issues/708>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+      - 記述内容の改善
+
+        * Logbackの設定に\ ``ServiceLoader``\の仕組みを利用した記述の追加(\ `guideline#1275 <https://github.com/terasolunaorg/guideline/issues/1275>`_\ )
+        * Spring Security 4 対応に伴うサンプルソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+         * デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
+      - 記述内容の改善
+
+        *  SpEL式を用いたセッションスコープ参照の記述を追加(\ `guideline#1306 <https://github.com/terasolunaorg/guideline/issues/1306>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization`
+      - 記述内容の改善
+
+        *  JSPに適切にロケールを反映させるための記述を追加(\ `guideline#1439 <https://github.com/terasolunaorg/guideline/issues/1439>`_\ )
+        *  \ ``SessionLocalResolver``\の\ ``defaultLocale``\の説明を修正(\ `guideline#686 <https://github.com/terasolunaorg/guideline/issues/686>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+      - 記載内容の追加
+
+        *  JdbcCodeListに\ ``JdbcTemplate``\を指定するパターンを推奨とする記述を追加(\ `guideline#501 <https://github.com/terasolunaorg/guideline/issues/501>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - 記述内容の改善
+
+        *  \ ``Jackson2ObjectMapperFactoryBean``\を利用したObjectMapper作成を追加(\ `guideline#1022 <https://github.com/terasolunaorg/guideline/issues/1022>`_\ )
+        *  REST APIアプリケーションのドメイン層の実装にMyBatis3を前提とした形に修正 (\ `guideline#1323 <https://github.com/terasolunaorg/guideline/issues/1323>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/RestClient`
+      - 新規追加
+
+        *  RESTクライアント（HTTPクライアント）を追加(\ `guideline#1307 <https://github.com/terasolunaorg/guideline/issues/1307>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/SOAP`
+      - 新規追加
+
+        *  SOAP Web Service（サーバ/クライアント）を追加(\ `guideline#1340 <https://github.com/terasolunaorg/guideline/issues/1340>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
+      - 記述内容の改善
+
+        * アップロード処理の基本フロー、及びその説明をSpringの\ ``MultipartFilter``\を用いた記述に修正 (\ `guideline#193 <https://github.com/terasolunaorg/guideline/issues/193>`_\ )
+        * セキュリティ上の問題や、APサーバによって動作が異なる等の課題があるため、「クエリパラメータでCSRFトークンを送る方法」を削除。
+          ファイルアップロードの許容サイズを超過した場合、一部APサーバでCSRFトークンチェックが正しく行われない注意点を追加(\ `guideline#1602 <https://github.com/terasolunaorg/guideline/issues/1602>`_\ )
+
+
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
+      - Spring Framework4.2 対応に伴う記載内容の追加
+
+        *  xlsx形式を操作する\ ``AbstractXlsxView``\の追加\(\ `guideline#996 <https://github.com/terasolunaorg/guideline/issues/996>`_\ )
+
+        記述内容の改善
+
+        * iTextの仕様変更のため、\ ``com.lowagie:itext:4.2.1``\を利用したソース例を\ ``com.lowagie:itext:2.1.7``\を利用する形に修正
+
+    * -
+      - :doc:`../ArchitectureInDetail/MessagingDetail/Email`
+      - 新規追加
+
+        *  E-mail送信(SMTP)を追加(\ `guideline#1165 <https://github.com/terasolunaorg/guideline/issues/1165>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/DateAndTime`
+      - 新規追加
+
+        *  日付操作(JSR-310 Date and Time API)を追加(\ `guideline#1450 <https://github.com/terasolunaorg/guideline/issues/1450>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
+      - 記載内容の改善・追加
+
+        *  タイムゾーンを利用しない年月日を扱うサンプルコードのオブジェクトを\ ``LocalDate``\に修正(\ `guideline#1283 <https://github.com/terasolunaorg/guideline/issues/1283>`_\ )
+        *  Java8未満のバージョンで和暦を扱う方法を追加(\ `guideline#1450 <https://github.com/terasolunaorg/guideline/issues/1450>`_\ )
+
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
+      - 新規追加
+
+        *  文字列処理を追加(\ `guideline#1451 <https://github.com/terasolunaorg/guideline/issues/1451>`_\ )
+
+    * -
+      - :doc:`../Security/index`
+      - 構成見直し
+
+        * \ ``パスワードハッシュ化``\は、:doc:`../Security/Authentication` に移動
+        * :doc:`../Security/Authentication` から、セッション管理の項目を :doc:`../Security/SessionManagement` として独立
+
+    * -
+      - :doc:`../Security/SpringSecurity`
+      - Spring Security 4 対応に伴う修正
+
+        * 全記述の再編
+
+         *  \ ``spring-security-testの紹介``\
+         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
+         * \ ``RedirectAuthenticationHandler``\非推奨化に伴う説明の削除
+
+    * -
+      - :doc:`../Tutorial/TutorialSecurity`
+      - Spring Security 4 対応に伴う修正
+
+        * チュートリアルのソースをSpring Security 4 に対応した形に修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+    * -
+      - :doc:`../Security/Authentication`
+      - Spring Security 4 対応に伴う修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+        * 全記述の再編
+
+         *  \ ``auto-config="true"``\の削除
+         * 認証イベントリスナを\ ``@org.springframework.context.event.EventListener``\に修正
+         *  \ ``AuthenticationPrincipal``\のパッケージを修正
+         *  デフォルトでプレフィックスが付与されるため、サンプルソースから\ ``ROLE_``\プレフィックスの削除
+
+    * -
+      - :doc:`../Security/Authorization`
+      - Spring Security 4 対応に伴う修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+        * 全記述の再編
+
+         *  デフォルトでプレフィックスが付与されるため、サンプルソースから\ ``ROLE_``\プレフィックスの削除
+         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
+         *  \ ``@PreAuthorize``\の定義例追加
+
+    * -
+      - :doc:`../Security/CSRF`
+      - Spring Security 4 対応に伴う修正
+
+        * 全記述の再編
+
+         * CSRF無効化の設定を修正\ ``<sec:csrf disabled="true"/>``\
+
+        * 記述内容の改善
+
+         * マルチパートリクエストに関する項目を :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload` に移動 (\ `guideline#1602 <https://github.com/terasolunaorg/guideline/issues/1602>`_\ )
+
+    * -
+      - :doc:`../Security/Encryption`
+      - 新規追加
+
+        * 暗号化ガイドラインの追加 (\ `guideline#1106 <https://github.com/terasolunaorg/guideline/issues/1106>`_\ )
+
+    * -
+      - :doc:`../Security/SecureLoginDemo`
+      - 新規追加
+
+        *  代表的なセキュリティ要件の実装例を追加(\ `guideline#1604 <https://github.com/terasolunaorg/guideline/issues/1604>`_\ )
+
+    * -
+      - :doc:`../Tutorial/TutorialSession`
+      - 新規追加
+
+        *  セッションチュートリアルを追加(\ `guideline#1599 <https://github.com/terasolunaorg/guideline/issues/1599>`_\ )
+
+    * -
+      - :doc:`../Tutorial/TutorialREST`
+      - Spring Security 4 対応に伴う修正
+
+        *  Spring Security 4 対応に伴うソースの修正 (\ `guideline#1519 <https://github.com/terasolunaorg/guideline/issues/1519>`_\ )
+
+         * CSRF無効化の設定を修正\ ``<sec:csrf disabled="true"/>``\
+         *  デフォルトでtrueになる仕様のため、サンプルソースから\ ``<use-expressions="true">``\を削除
+
+    * - 2015-08-05
+      - \-
+      - 5.0.1 RELEASE版公開
+
+        * 更新内容の詳細は、\ `5.0.1のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.0.1+is%3Aclosed>`_\ を参照されたい。
+    * -
+      - 全般
+      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
+
+        * 修正内容の詳細は、\ `5.0.1のIssue一覧(clerical error) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A5.0.1+label%3A%22clerical+error%22>`_\ を参照されたい。
+
+        記載内容の改善
+
+        * 改善内容の詳細は、\ `5.0.1のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.0.1+label%3Aimprovement+is%3Aclosed>`_\ を参照されたい。
+
+        アプリケーションサーバに関する記載内容の修正
+
+        * Resinに関する記載を削除
+        * リファレンスページへのリンクを最新化
+    * -
+      - :doc:`index`
+      - 記載内容の追加
+
+        * ガイドラインに記載している内容の動作検証環境に関する記載を追加
+    * -
+      - :doc:`../Overview/FrameworkStack`
+      - セキュリティ脆弱性対応に伴い利用するOSSのバージョン(Spring IO Platformのバージョン)を更新
+
+        * Spring IO Platformのバージョンを1.1.3.RELEASEに更新
+        * Spring Frameworkのバージョンを4.1.7.RELEASEに更新 (\ `CVE-2015-3192 <http://pivotal.io/security/cve-2015-3192>`_\ )
+        * JSTLのバージョンを1.2.5に更新 (\ `CVE-2015-0254 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0254>`_\ )
+
+        Spring IO Platformのバージョン更新に伴い利用するOSSのバージョンを更新
+
+        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.0.1の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.0.1_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
+
+        記載内容の改善 (\ `guideline#1148 <https://github.com/terasolunaorg/guideline/issues/1148>`_\ )
+
+        * \ ``terasoluna-gfw-recommended-dependencies``\ 、\ ``terasoluna-gfw-recommended-web-dependencies``\ 、\ ``terasoluna-gfw-parent``\ プロジェクトの説明を追加。
+        * プロジェクトの説明を修正。
+        * プロジェクト間の依存関係を示す図を追加。
+    * -
+      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
+      - 記載内容の追加
+
+        * warファイルのビルド方法を追加 (\ `guideline#1146 <https://github.com/terasolunaorg/guideline/issues/1146>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
+      - 記載内容の追加
+
+        * データソース切り替え機能の説明を追加 (\ `guideline#1071 <https://github.com/terasolunaorg/guideline/issues/1071>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+      - ガイドラインのバグ修正
+
+        * バッチ実行のタイミングに関する説明を修正 (\ `guideline#903 <https://github.com/terasolunaorg/guideline/issues/903>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+      - 記載内容の改善
+
+        * \ ``<logger>``\ タグの\ ``additivity``\ 属性に関する説明を追加 (\ `guideline#977 <https://github.com/terasolunaorg/guideline/issues/977>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
+      - 記載内容の改善
+
+        * セッションスコープのBeanの定義方法に関する説明を修正 (\ `guideline#1082 <https://github.com/terasolunaorg/guideline/issues/1082>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
+      - 記載内容の追加
+
+        * レスポンスをキャッシュしないように設定している時のトランザクショントークンチェックの動作を補足 (\ `guideline#1260 <https://github.com/terasolunaorg/guideline/issues/1260>`_\ )
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+      - 記載内容の追加
+
+        * コード名の表示方法を追加 (\ `guideline#1109 <https://github.com/terasolunaorg/guideline/issues/1109>`_\ )
+    * -
+      - | :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+        | :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - \ `CVE-2015-3192 <http://pivotal.io/security/cve-2015-3192>`_\ (XMLの脆弱性)に関する注意喚起を追加
+
+        * StAX(Streaming API for XML)を使用する際の注意事項を追加 (\ `guideline#1211 <https://github.com/terasolunaorg/guideline/issues/1211>`_\ )
+    * -
+      - | :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
+        | :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
+      - 共通ライブラリのバグ改修に伴う修正
+
+        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#297 <https://github.com/terasolunaorg/terasoluna-gfw/issues/297>`_\)に伴い、\ ``f:query``\ の仕様に関する説明を修正 (\ `guideline#1244 <https://github.com/terasolunaorg/guideline/issues/1244>`_\ )
+    * -
+      - :doc:`../Security/Authentication`
+      - 記載内容の改善
+
+        * \ ``ExceptionMappingAuthenticationFailureHandler``\ の親クラスのプロパティの扱いに関する注意点を追加 (\ `guideline#812 <https://github.com/terasolunaorg/guideline/issues/812>`_\ )
+        * \ ``AbstractAuthenticationProcessingFilter``\ の\ ``requiresAuthenticationRequestMatcher``\ プロパティの設定例を修正 (\ `guideline#1110 <https://github.com/terasolunaorg/guideline/issues/1110>`_\ )
+    * -
+      - :doc:`../Security/Authorization`
+      - ガイドラインのバグ修正
+
+        * \ ``<sec:authorize>``\ タグ(JSPタグライブラリ)の\ ``access``\ 属性の設定例を修正 (\ `guideline#1003 <https://github.com/terasolunaorg/guideline/issues/1003>`_\ )
+    * -
+      - 環境依存性の排除
+      - 記載内容の追加
+
+        * Tomcat8使用時の外部クラスパス(Tomcat7の\ ``VirtualWebappLoader``\ の代替機能)の適用方法を追加 (\ `guideline#1081 <https://github.com/terasolunaorg/guideline/issues/1081>`_\ )
+    * - 2015-06-12
+      - 全般
+      - 5.0.0 RELEASE英語版公開
+    * - 2015-03-06
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - ガイドラインのバグ修正
+
+        * 例外ハンドリング用のサンプルコード(\ ``NullPointerException``\ が発生するコードが含まれている問題)を修正。
+          修正内容の詳細は、\ `guideline#918のIssue <https://github.com/terasolunaorg/guideline/issues/918>`_\ を参照されたい。
+    * -
+      - :doc:`../Tutorial/TutorialREST`
+      - ガイドラインのバグ修正
+
+        * 例外ハンドリングの処理で\ ``NullPointerException``\ が発生する問題を修正。
+          修正内容の詳細は、\ `guideline#918のIssue <https://github.com/terasolunaorg/guideline/issues/918>`_\ を参照されたい。
+    * - 2015-02-23
+      - \-
+      - 5.0.0 RELEASE版公開
+
+        * 更新内容の詳細は、\ `5.0.0のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aissue+milestone%3A5.0.0+is%3Aclosed>`_\ と\ `1.0.2のバックポートIssue一覧 <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Abackport>`_\ を参照されたい。
+    * -
+      - 全般
+      - ガイドラインの誤記(タイプミスや単純な記述ミスなど)の修正
+
+        * 修正内容の詳細は、\ `1.0.2のバックポートIssue一覧(clerical error) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Abackport+label%3A%22clerical+error%22>`_\ を参照されたい。
+
+        記載内容の改善
+
+        * 改善内容の詳細は、\ `5.0.0のIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=milestone%3A5.0.0+label%3Aimprovement+is%3Aclosed>`_\ と\ `1.0.2のバックポートIssue一覧(improvement) <https://github.com/terasolunaorg/guideline/issues?q=is%3Aclosed+milestone%3A1.0.2+label%3Aimprovement+label%3Abackport>`_\ を参照されたい。
+
+        新規追加
+
+        * :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
+        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
+        * :doc:`../Appendix/Lombok`
+
+        version 5.0.0対応に伴う更新
+
+        * MyBatis2の説明を削除
+    * -
+      - :doc:`../Overview/FrameworkStack`
+      - Spring IO Platform対応
+
+        * 一部のライブラリを除き、推奨ライブラリの管理をSpring IO Platformに委譲する構成に変更した旨を追加。
+
+        OSSバージョンの更新
+
+        * 使用するOSSのバージョンを更新。更新内容は、\ `version 5.0.0の移行ガイド <https://github.com/terasolunaorg/terasoluna-gfw/wiki/Migration-Guide-5.0.0_ja#step-1-update-dependency-libraries>`_\ を参照されたい。
+    * -
+      - :doc:`../Overview/FirstApplication`
+      - version 5.0.0対応に伴う更新
+
+        * Spring Framework 4.1の適用。
+        * ドキュメント上の構成の見直し。
+    * -
+      - :doc:`../Overview/ApplicationLayering`
+      - 英語翻訳のバグ修正
+
+        * ドメイン層と他の層との関係に関する翻訳ミスを修正。
+          修正内容の詳細は、\ `guideline#364のIssue <https://github.com/terasolunaorg/guideline/issues/364>`_\ を参照されたい。
+    * -
+      - :doc:`../Tutorial/TutorialTodo`
+      - version 5.0.0対応に伴う更新
+
+        * Spring Framework 4.1の適用。
+        * インフラストラクチャ層としてMyBatis3をサポート。
+        * ドキュメント上の構成の見直し。
+    * -
+      - :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
+      - 新規追加
+
+        * マルチプロジェクト構成のプロジェクト作成方法を追加。
+    * -
+      - :doc:`../ImplementationAtEachLayer/DomainLayer`
+      - Spring Framework 4.1対応に伴う修正
+
+        * JTA 1.2の\ ``@Transactional``\ の扱いに関する記載を追加。
+          修正内容の詳細は、\ `guideline#562のIssue <https://github.com/terasolunaorg/guideline/issues/562>`_\ を参照されたい。
+        * JPA(Hibernate実装)使用時の\ ``@Transactional(readOnly = true)``\ の扱い関する説明を修正。
+          \ `SPR-8959 <https://jira.spring.io/browse/SPR-8959>`_\ (Spring Framework 4.1以降)の対応により、
+          JDBCドライバに対して「読み取り専用のトランザクション」として扱うように指示できるように改善された。
+
+        記載内容の追加
+
+        * 「読み取り専用のトランザクション」が有効にならないケースに関する注意点を追加。
+          追加内容の詳細は、\ `guideline#861のIssue <https://github.com/terasolunaorg/guideline/issues/861>`_\ を参照されたい。
+    * -
+      - :doc:`../ImplementationAtEachLayer/InfrastructureLayer`
+      - MyBatis3対応に伴う修正
+
+        * RepositoryImplの実装としてMyBatis3の仕組みを利用する方法を追加。
+    * -
+      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
+      - Spring Framework 4.1対応に伴う修正
+
+        * \ ``@ControllerAdvice``\ に追加された属性(適用対象をControllerを絞り込むための属性)に関する説明を追加。
+          修正内容の詳細は、\ `guideline#549のIssue <https://github.com/terasolunaorg/guideline/issues/549>`_\ を参照されたい。
+        * \ ``<mvc:view-resolvers>``\ に関する説明を追加。
+          修正内容の詳細は、\ `guideline#609のIssue <https://github.com/terasolunaorg/guideline/issues/609>`_\ を参照されたい。
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
+      - 共通ライブラリのバグ改修に伴う修正
+
+        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#78 <https://github.com/terasolunaorg/terasoluna-gfw/issues/78>`_\)に伴い、全角文字のワイルドカード文字(\ ``％``\ , \ ``＿``\ )\ の扱いに関する説明を追加。
+          修正内容の詳細は、\ `guideline#712のIssue <https://github.com/terasolunaorg/guideline/issues/712>`_\ を参照されたい。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
+          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
+
+        Apache Commons DBCP 2.0対応に伴う修正
+
+        * Apache Commons DBCP 2.0用のコンポーネントを使用するようにサンプルコード及び説明を変更。
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+      - 新規追加
+
+        * O/R MapperとしてMyBatis3を使用してインフラストラクチャ層を実装する方法を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`
+      - ガイドラインのバグ修正
+
+        * ロングトランザクションの楽観ロックのサンプルコード(レコードが取得できない時の処理)の修正。
+          修正内容の詳細は、\ `guideline#450のIssue <https://github.com/terasolunaorg/guideline/issues/450>`_\ を参照されたい。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
+          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
+
+        MyBatis3対応に伴う修正
+
+        * MyBatis3使用時の排他制御の実装方法を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      - ガイドラインのバグ修正
+
+        * \ ``@GroupSequence``\ の説明を修正。
+          修正内容の詳細は、\ `guideline#296のIssue <https://github.com/terasolunaorg/guideline/issues/296>`_\ を参照されたい。
+
+        共通ライブラリのバグ改修に伴う修正
+
+        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#256 <https://github.com/terasolunaorg/terasoluna-gfw/issues/256>`_\)に伴い、\ ``ValidationMessages.properties``\ に関する注意点を追加。
+          修正内容の詳細は、\ `guideline#766のIssue <https://github.com/terasolunaorg/guideline/issues/766>`_\ を参照されたい。
+
+        記載内容の追加
+
+        * Spring Validatorを使用した相関項目チェック時に、Bean ValidationのGroup Validationの仕組みと連携する方法を追加。
+          追加内容の詳細は、\ `guideline#320のIssue <https://github.com/terasolunaorg/guideline/issues/320>`_\ を参照されたい。
+
+        Bean Validation 1.1(Hibernate Validator 5.1)対応に伴う修正
+
+        * \ ``@DecimalMin``\ と\ ``@DecimalMax``\ の\ ``inclusive``\ 属性の説明を追加。
+        * Expression Languageに関する記載を追加。
+        * Bean Validation 1.1から非推奨になったAPIについて記載。
+        * Hibernate Validator 5.1.xの\ ``ValidationMessages.properties``\ に関するバグ(\ `HV-881 <https://hibernate.atlassian.net/browse/HV-881>`_\ )に関する記載と回避方法を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
+      - 記載内容の追加
+
+        * 513バイトより小さいサイズのエラーをレスポンスするとInternet Explorerで簡易エラーページが表示される可能性がある旨の説明を追加。
+          追加内容の詳細は、\ `guideline#189のIssue <https://github.com/terasolunaorg/guideline/issues/189>`_\ を参照されたい。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * JPA(Hibernate実装)の悲観ロックエラーがSpring Frameworkの\ ``PessimisticLockingFailureException``\ に変換されない問題に関する記載を削除。
+          この問題は、\ `SPR-10815 <https://jira.spring.io/browse/SPR-10815>`_\ (Spring Framework 4.0以降)で解決済みである。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
+      - Spring Security 3.2対応に伴う修正
+
+        * POSTリクエスト時にセッションタイムアウトではなくCSRFトークンエラーが発生する問題(\ `SEC-2422 <https://jira.springsource.org/browse/SEC-2422>`_\ )に関する記載を削除。
+          Spring Security 3.2の正式版ではセッションタイムアウトを検知できる仕組みが組み込まれており、問題が解消されている。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
+      - 共通ライブラリの変更内容の反映
+
+        * 共通ライブラリの改善(\ `terasoluna-gfw#24 <https://github.com/terasolunaorg/terasoluna-gfw/issues/24>`_\)に伴い、新たに追加したメッセージタイプ(warning)と非推奨にしたメッセージタイプ(warn)に関する説明を追加。
+          修正内容の詳細は、\ `guideline#74のIssue <https://github.com/terasolunaorg/guideline/issues/74>`_\ を参照されたい。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
+      - 共通ライブラリの変更内容の反映
+
+        * 共通ライブラリの改善(\ `terasoluna-gfw#13 <https://github.com/terasolunaorg/terasoluna-gfw/issues/13>`_\)に伴い、active状態のページリンクの説明を変更。
+          修正内容の詳細は、\ `guideline#699のIssue <https://github.com/terasolunaorg/guideline/issues/699>`_\ を参照されたい。
+        * 共通ライブラリの改善(\ `terasoluna-gfw#14 <https://github.com/terasolunaorg/terasoluna-gfw/issues/14>`_\)に伴い、disabled状態のページリンクの説明を変更。
+          修正内容の詳細は、\ `guideline#700のIssue <https://github.com/terasolunaorg/guideline/issues/700>`_\ を参照されたい。
+
+        Spring Data Common 1.9対応に伴う修正
+
+        * バージョンアップに伴い、API仕様が変更されているクラス(\ ``Page``\ インタフェースなど)に対する注意点を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+      - 共通ライブラリのバグ改修に伴う修正
+
+        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#16 <https://github.com/terasolunaorg/terasoluna-gfw/issues/16>`_\)に伴い、\ ``ExistInCodeList`` のメッセージキーを変更とバージョンアップ時の注意点を追加。
+          修正内容の詳細は、\ `guideline#638のIssue <https://github.com/terasolunaorg/guideline/issues/638>`_\ を参照されたい。
+        * 共通ライブラリのバグ改修(\ `terasoluna-gfw#256 <https://github.com/terasolunaorg/terasoluna-gfw/issues/256>`_\)に伴い、\ ``@ExistInCodeList``\ のメッセージ定義に関する注意点を追加。
+          修正内容の詳細は、\ `guideline#766のIssue <https://github.com/terasolunaorg/guideline/issues/766>`_\ を参照されたい。
+
+        共通ライブラリの変更内容の反映
+
+        * 共通ライブラリの機能追加(\ `terasoluna-gfw#25 <https://github.com/terasolunaorg/terasoluna-gfw/issues/25>`_\)に伴い、\ ``EnumCodeList``\ クラスの使用方法を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+      - Spring Security 3.2対応に伴う修正
+
+        * CSRF対策のサンプルコード(CSRF対策用の\ ``<meta>``\ タグの生成方法)を変更。
+
+        Jackson 2.4対応に伴う修正
+
+        * Jackson 2.4用のコンポーネントを使用するようにサンプルコード及び説明を変更。
+    * -
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - 記載内容の改善
+
+        * Locationヘッダやハイパーメディアリンクに設定するURLを組み立てる方法を改善。
+          改善内容の詳細は、\ `guideline#374のIssue <https://github.com/terasolunaorg/guideline/issues/374>`_\ を参照されたい。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * \ ``@RestController``\ に関する説明を追加。
+          修正内容の詳細は、\ `guideline#560のIssue <https://github.com/terasolunaorg/guideline/issues/560>`_\ を参照されたい。
+        * ビルダースタイルのAPIを使用して\ ``ResponseEntity``\ を生成するようにサンプルコードを変更。
+
+        Jackson 2.4対応に伴う修正
+
+        * Jackson 2.4用のコンポーネントを使用するようにサンプルコード及び説明を変更。
+
+        Spring Data Common 1.9対応に伴う修正
+
+        * バージョンアップに伴い、API仕様が変更されているクラス(\ ``Page``\ インタフェースなど)に対する注意点を追加。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
+      - ガイドラインのバグ修正
+
+        * \ `CVE-2014-0050 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0050>`_\ (File Uploadの脆弱性)が解決されたApache Commons FileUploadのバージョンを修正。
+          修正内容の詳細は、\ `guideline#846のIssue <https://github.com/terasolunaorg/guideline/issues/846>`_\ を参照されたい。
+
+        記載内容の追加
+
+        * 一部のアプリケーションサーバでServlet 3のファイルアップロード機能が文字化けする問題があるため、この事象の回避策としてApache Commons FileUploadを使用する方法を追加。
+          追加内容の詳細は、\ `guideline#778のIssue <https://github.com/terasolunaorg/guideline/issues/778>`_\ を参照されたい。
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
+      - 共通ライブラリの変更内容の反映
+
+        * 共通ライブラリの改善(\ `terasoluna-gfw#224 <https://github.com/terasolunaorg/terasoluna-gfw/issues/224>`_\)に伴い、ドキュメント内の構成とパッケージ名及びクラス名を変更。
+          修正内容の詳細は、\ `guideline#701のIssue <https://github.com/terasolunaorg/guideline/issues/701>`_\ を参照されたい。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout`
+      - Tiles 3.0対応に伴う修正
+
+        * Tiles 3.0用のコンポーネントを使用するように設定例及び説明を変更。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * \ ``<mvc:view-resolvers>``\ 、\ ``<mvc:tiles>``\ 、\ ``<mvc:definitions>``\ に関する説明を追加。
+          修正内容の詳細は、\ `guideline#609のIssue <https://github.com/terasolunaorg/guideline/issues/609>`_\ を参照されたい。
+    * -
+      - :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
+      - 記載内容の追加
+
+        * \ ``LocalDateTime``\ の使い方を追加。
+          追加内容の詳細は、\ `guideline#584のIssue <https://github.com/terasolunaorg/guideline/issues/584>`_\ を参照されたい。
+
+        Joda Time 2.5対応に伴う修正
+
+        * バージョンアップに伴い\ ``DateMidnight``\ クラスが非推奨になったため、指定日の開始時刻(0:00:00.000)の取得方法を変更。
+    * -
+      - :doc:`../Security/SpringSecurity`
+      - Spring Security 3.2対応に伴う修正
+
+        * Appendixに「セキュアなHTTPヘッダー付与の設定」を追加。
+    * -
+      - :doc:`../Tutorial/TutorialSecurity`
+      - version 5.0.0対応に伴う更新
+
+        * インフラストラクチャ層としてMyBatis3を使用するように変更。
+        * Spring Framework 4.1対応の適用。
+        * Spring Security 3.2対応の適用。
+        * ドキュメント上の構成の見直し。
+    * -
+      - :doc:`../Security/Authentication`
+      - ガイドラインのバグ修正
+
+        * \ ``<form-login>``\ 、\ ``<logout>``\ 、\ ``<session-management>``\ タグの説明不備や説明不足の修正。
+          修正内容の詳細は、\ `guideline#754のIssue <https://github.com/terasolunaorg/guideline/issues/754>`_\ を参照されたい。
+        * AuthenticationFilterの拡張方法を示すサンプルコードの修正(セッション・フィクセーション攻撃対策やCSRF対策を有効にするための設定を追加)。
+          修正内容の詳細は、\ `guideline#765のIssue <https://github.com/terasolunaorg/guideline/issues/765>`_\ を参照されたい。
+
+        Spring Security 3.2対応に伴う修正
+
+        * CSRF対策を有効にしている際のログアウト方法に関する注意点を追加。
+        * Controllerから\ ``UserDetails``\ (認証ユーザ情報クラス)にアクセスする方法として、\ ``@AuthenticationPrincipal``\ の説明を追加。
+        * \ ``<sec:session-management>``\ の\ ``session-fixation-protection``\ 属性のパラメータとして、\ ``changeSessionId``\ の説明を追加。
+        * セッションタイムアウトの検出方法と注意点を追加。
+        * 同一ユーザの同時セッション数制御(Concurrent Session Control)を有効にするための設定方法を変更(\ ``<sec:concurrency-control>``\ を使用するように変更)。
+        * 同一ユーザの同時セッション数制御関連のクラスが非推奨になり別のクラスが提供されている旨を追加。
+    * -
+      - :doc:`../Security/CSRF`
+      - Spring Security 3.2対応に伴う修正
+
+        * version 1.0.xの共通ライブラリに同封していたSpring Security 3.2.0(正式リリース前の暫定バージョン)のCSRF対策用コンポーネントに関する記載を削除。
+        * CSRF対策を有効にするための設定方法をSpring Security 3.2の正式な作法(\ ``<sec:csrf>``\ を使用する方法)に変更。
+        * CSRF対策用のJSPタグライブラリ(\ ``<sec:csrfInput>``\ と\ ``<sec:csrfMetaTags>``\ )に関する記載を追加。
+        * CSRF対策を有効にしている時のセッションタイムアウトの検出方法と注意点を追加。
+
+        Spring Framework 4.1対応に伴う修正
+
+        * \ ``<form:form>``\ を使用した際に、CSRFトークンがhiddenとして出力される条件に関する記載を変更。
+    * -
+      - :doc:`../Tutorial/TutorialREST`
+      - 記載内容の改善
+
+        * \ :doc:`../Tutorial/TutorialTodo`\ で作成したプロジェクトにREST APIを追加する手順にすることで、特定のインフラストラクチャ層(O/R Mapper)に依存しない内容に変更。
+          修正内容の詳細は、\ `guideline#325のIssue <https://github.com/terasolunaorg/guideline/issues/325>`_\ を参照されたい。
+
+        version 5.0.0対応に伴う更新
+
+        * Spring Framework 4.1対応の適用。
+        * Spring Security 3.2対応の適用。
+        * Jackson 2.4対応の適用。
+    * -
+      - ブランクプロジェクトから新規プロジェクトの作成
+      - 記載内容の改善
+
+        * マルチプロジェクト構成のプロジェクト作成方法をサポート。
+        * シングルプロジェクト構成のプロジェクト作成方法を最新化。
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/TagLibAndELFunctions`
+      - 新規追加
+
+        * 共通ライブラリから提供しているJSPタグライブラリとEL関数の説明を追加。
+    * -
+      - :doc:`../Appendix/Lombok`
+      - 新規追加
+
+        * Lombokを使用したボイラープレートコードの排除方法の説明を追加。
+    * -
+      - 英語版
+      - 以下の英語版を追加
+
+        * :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`
+        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
+        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessJpa`
+        * :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+        * :doc:`../ArchitectureInDetail/DataAccessDetail/ExclusionControl`
+        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/PropertyManagement`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Internationalization`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+        * :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/TilesLayout`
+        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
+        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/Dozer`
+        * :doc:`../Security/SpringSecurity`
+        * :doc:`../Security/Authentication`
+        * :doc:`../Security/Authorization`
+        * :doc:`../Security/CSRF`
+        * ブランクプロジェクトから新規のプロジェクトの作成
+        * :doc:`../Appendix/Nexus`
+        * 環境依存性の排除
+        * Project Structure Standard
+        * :doc:`../Appendix/Lombok`
+        * :doc:`../Appendix/SpringComprehensionCheck`
+    * - 2014-08-27
+      - \-
+      - 1.0.1 RELEASE版公開
+
+        更新内容の詳細は、\ `1.0.1のIssue一覧 <https://github.com/terasolunaorg/guideline/issues?labels=&milestone=1&state=closed>`_\ を参照されたい。
+    * -
+      - 全般
+      - ガイドラインのバグ(タイプミスや記述ミスなど)を修正
+
+        更新内容の詳細は、\ `1.0.1のIssue一覧(bug & clerical error) <https://github.com/terasolunaorg/guideline/issues?labels=bug&milestone=1&state=closed>`_\ を参照されたい。
+    * -
+      - 日本語版
+      - 以下の日本語版を追加
+
+        * :doc:`CriteriaBasedMapping`
+        * :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+        * :doc:`../Tutorial/TutorialREST`
+    * -
+      - 英語版
+      - 以下の英語版を追加
+
+        * :doc:`index`
+        * :doc:`../Overview/index`
+        * :doc:`../Tutorial/TutorialTodo`
+        * :doc:`../ImplementationAtEachLayer/index`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
+        * :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
+        * :doc:`../ArchitectureInDetail/GeneralFuncDetail/JodaTime`
+        * :doc:`../Security/XSS`
+        * :doc:`../Appendix/ReferenceBooks`
+    * -
+      - :doc:`../Overview/FrameworkStack`
+      - バグ改修に伴い利用するOSSのバージョンを更新
+
+        * GroupId「\ ``org.springframework``\」のバージョンを3.2.4.RELEASEから3.2.10.RELEASEに更新
+        * GroupId「\ ``org.springframework.data``\」ArtifactId「\ ``spring-data-commons``\」のバージョンを1.6.1.RELEASEから1.6.4.RELEASEに更新
+        * GroupId「\ ``org.springframework.data``\」ArtifactId「\ ``spring-data-jpa``\」のバージョンを1.4.1.RELEASEから1.4.3.RELEASEに更新
+        * GroupId「\ ``org.aspectj``\」のバージョンを1.7.3から1.7.4に更新
+        * GroupId「\ ``javax.transaction``\」ArtifactId「\ ``jta``\」を削除
+    * -
+      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
+      - `CVE-2014-1904 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1904>`_\(\ ``<form:form>``\タグのaction属性のXSS脆弱性)に関する注意喚起を追加
+    * -
+      - 日本語版
+
+        :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
+      - バグ改修に関する記載を追加
+
+        * 共通ライブラリから提供している\ ``<t:messagesPanel>``\タグのバグ改修(\ `terasoluna-gfw#10 <https://github.com/terasolunaorg/terasoluna-gfw/issues/10>`_\)
+    * -
+      - 日本語版
+
+        :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
+      - バグ改修に関する記載を更新
+
+        * 共通ライブラリから提供している\ ``<t:pagination>``\タグのバグ改修(\ `terasoluna-gfw#12 <https://github.com/terasolunaorg/terasoluna-gfw/issues/12>`_\)
+        * Spring Data Commonsのバグ改修(\ `terasoluna-gfw#22 <https://github.com/terasolunaorg/terasoluna-gfw/issues/22>`_\)
+    * -
+      - 日本語版
+
+        :doc:`../ArchitectureInDetail/WebApplicationDetail/Ajax`
+      - XXE Injection対策に関する記載を更新
+    * -
+      - 日本語版
+
+        :doc:`../ArchitectureInDetail/WebApplicationDetail/FileUpload`
+      - `CVE-2014-0050 <http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0050>`_\(File Uploadの脆弱性)に関する注意喚起を追加
+
+        ガイドラインのバグを修正
+
+        * \ ``MultipartFilter``\を設定した場合、\ ``SystemExceptionResolver``\を使用して\ ``MultipartException``\をハンドリングする事が出来ないため、サーブレットコンテナのerror-page機能を使用してハンドリングする方法を追加。修正内容の詳細は、\ `guideline#59のIssue <https://github.com/terasolunaorg/guideline/issues/59>`_\ を参照されたい。
+    * -
+      - 日本語版
+      - 以下のプロジェクト作成方法を\ ``mvn archetype:generate``\ から行うように変更
+
+        * :doc:`../Overview/FirstApplication`
+        * :doc:`../Tutorial/TutorialTodo`
+        * :doc:`../Tutorial/TutorialTodo`
+    * -
+      - 日本語版
+      - 以下のMavenアーキタイプ作成方法を微修正
+
+        * :doc:`../Tutorial/TutorialSecurity`
+        * ブランクプロジェクトから新規プロジェクトの作成
+    * - 2013-12-17
+      - 日本語版
+      - 1.0.0 Public Review版公開
+
+.. raw:: latex
+
+   \newpage
diff --git a/source/Introduction/Introduction.rst b/source/Introduction/Introduction.rst
index 7d2fb76eb9..8c95fb806f 100755
--- a/source/Introduction/Introduction.rst
+++ b/source/Introduction/Introduction.rst
@@ -1,93 +1,93 @@
-このドキュメントが示すこと
-================================================================================
-
-本ガイドラインではSpring、Spring MVCやJPA、MyBatisを中心としたフルスタックフレームワークを利用して、
-保守性の高いWebアプリケーション開発をするためのベストプラクティスを提供する。
-
-本ガイドラインを読むことで、ソフトウェア開発(主にコーディング)が円滑に進むことを期待する。
-
-このドキュメントの対象読者
-================================================================================
-
-本ガイドラインはソフトウェア開発経験のあるアーキテクトやプログラマ向けに書かれており、
-以下の知識があることを前提としている。
-
-* Spring FrameworkのDIやAOPに関する基礎的な知識がある
-* Servlet/JSPを使用してWebアプリケーションを開発したことがある
-* SQLに関する知識がある
-* Mavenを使用してWebアプリケションをビルドしたことがある
-
-これからJavaを勉強し始めるという人向けではない。
-
-Spring Frameworkに関して、本ドキュメントを読むための基礎知識があるかどうかを測るために
-\ :doc:`../Appendix/SpringComprehensionCheck`\ を参照されたい。
-この理解度テストが4割回答できない場合は、別途以下のような入門書籍で学習することを推奨する。
-
-* `Spring3入門―Javaフレームワーク・より良い設計とアーキテクチャ (技術評論社) [日本語] <http://gihyo.jp/book/2012/978-4-7741-5380-3>`_
-* `Pro Spring 4th Edition (Apress) <http://www.apress.com/9781430261513>`_
-
-このドキュメントの構成
-================================================================================
-
-* \ :doc:`../Overview/index`\ 
-    Spring MVCの概要や、TERASOLUNA Server Framework for Java (5.x)の基本的な考え方を説明する。
-* \ :doc:`../ImplementationAtEachLayer/index`\ 
-    TERASOLUNA Server Framework for Java (5.x)を利用してアプリケーション開発する上で必ず押さえておかなくてはならない知識や作法について説明する。
-* \ :doc:`../ArchitectureInDetail/index`\
-    一般的にアプリケーション開発で必要となる機能をTERASOLUNA Server Framework for Java (5.x)を利用してどう実装するか、何に気を付けるべきかを機能ごとに説明する。
-* \ :doc:`../Security/index`\
-    Spring Securityを中心としたセキュリティ対策について説明する。
-* \ :doc:`../Tutorial/index`\
-    簡単なアプリケーション開発を通して、TERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発を体験する。
-* \ :doc:`../Appendix/index`\
-    TERASOLUNA Server Framework for Java (5.x)を利用する場合の付加情報を説明する。
-
-このドキュメントの読み方
-================================================================================
-
-まずは"\ :doc:`../Overview/index`\ "
-から読み進めていただきたい。特にSpring MVCの経験がない場合は"\ :doc:`../Overview/FirstApplication`\ "を実施すること。
-"\ :doc:`../Overview/ApplicationLayering`\ "は本ガイドラインで共通する用語と概念の説明を行っているため、必ず一読されたい。
-
-次に"\ :doc:`../Tutorial/index`\ "に進む。
-このチュートリアルでは"習うより慣れろ"を目的として、
-詳細な説明の前にまず手を動かして、TERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発を体感していただきたい。
-
-チュートリアルを実践したのちに、"\ :doc:`../ImplementationAtEachLayer/index`\ "でアプリケーション開発の詳細を学ぶ。
-特に"\ :doc:`../ImplementationAtEachLayer/ApplicationLayer`\ "でSpring MVCによる開発のノウハウを凝集して説明しているため、
-何度も読み返すことを推奨する。
-本章を読み終えた後にもう一度"\ :doc:`../Tutorial/index`\ "を振り返るとより理解が深まる。
-
-**ここまではTERASOLUNA Server Framework for Java (5.x)を使用するすべての開発者が読むことを強く推奨する。**
-
-"\ :doc:`../ArchitectureInDetail/index`\ "、"\ :doc:`../Security/index`\ "については
-目的に応じて必要なタイミングで参照すればよい。ただし、":doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`"はアプリケーション開発で通常は必要となるため、基本的には読んでおくこと。
-
-テクニカルリーダーはこれらをすべて読み内容を把握した上で
-プロジェクトにおいて、どのような方針を定めるか検討していただきたい。
-
-
-.. note::
-
-    時間がない場合、まずは
-    
-    #. \ :doc:`../Overview/FirstApplication`\ 
-    #. \ :doc:`../Overview/ApplicationLayering`\ 
-    #. \ :doc:`../Tutorial/TutorialTodo`\ 
-    #. \ :doc:`../ImplementationAtEachLayer/index`\ 
-    #. \ :doc:`../Tutorial/TutorialTodo`\ 
-    #. \ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ 
-    
-    を読むとよい。
-
-このドキュメントの動作検証環境
-================================================================================
-
-本ガイドラインで説明している内容の動作検証環境については、
-「\ `テスト済み環境 <https://github.com/terasolunaorg/terasoluna-gfw-functionaltest/wiki/Tested-Environment>`_\」を参照されたい。
-
-
-.. raw:: latex
-
-   \newpage
-
+このドキュメントが示すこと
+================================================================================
+
+本ガイドラインではSpring、Spring MVCやJPA、MyBatisを中心としたフルスタックフレームワークを利用して、
+保守性の高いWebアプリケーション開発をするためのベストプラクティスを提供する。
+
+本ガイドラインを読むことで、ソフトウェア開発(主にコーディング)が円滑に進むことを期待する。
+
+このドキュメントの対象読者
+================================================================================
+
+本ガイドラインはソフトウェア開発経験のあるアーキテクトやプログラマ向けに書かれており、
+以下の知識があることを前提としている。
+
+* Spring FrameworkのDIやAOPに関する基礎的な知識がある
+* Servlet/JSPを使用してWebアプリケーションを開発したことがある
+* SQLに関する知識がある
+* Mavenを使用してWebアプリケションをビルドしたことがある
+
+これからJavaを勉強し始めるという人向けではない。
+
+Spring Frameworkに関して、本ドキュメントを読むための基礎知識があるかどうかを測るために
+\ :doc:`../Appendix/SpringComprehensionCheck`\ を参照されたい。
+この理解度テストが4割回答できない場合は、別途以下のような入門書籍で学習することを推奨する。
+
+* `Spring3入門―Javaフレームワーク・より良い設計とアーキテクチャ (技術評論社) [日本語] <http://gihyo.jp/book/2012/978-4-7741-5380-3>`_
+* `Pro Spring 4th Edition (Apress) <http://www.apress.com/9781430261513>`_
+
+このドキュメントの構成
+================================================================================
+
+* \ :doc:`../Overview/index`\ 
+    Spring MVCの概要や、TERASOLUNA Server Framework for Java (5.x)の基本的な考え方を説明する。
+* \ :doc:`../ImplementationAtEachLayer/index`\ 
+    TERASOLUNA Server Framework for Java (5.x)を利用してアプリケーション開発する上で必ず押さえておかなくてはならない知識や作法について説明する。
+* \ :doc:`../ArchitectureInDetail/index`\
+    一般的にアプリケーション開発で必要となる機能をTERASOLUNA Server Framework for Java (5.x)を利用してどう実装するか、何に気を付けるべきかを機能ごとに説明する。
+* \ :doc:`../Security/index`\
+    Spring Securityを中心としたセキュリティ対策について説明する。
+* \ :doc:`../Tutorial/index`\
+    簡単なアプリケーション開発を通して、TERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発を体験する。
+* \ :doc:`../Appendix/index`\
+    TERASOLUNA Server Framework for Java (5.x)を利用する場合の付加情報を説明する。
+
+このドキュメントの読み方
+================================================================================
+
+まずは"\ :doc:`../Overview/index`\ "
+から読み進めていただきたい。特にSpring MVCの経験がない場合は"\ :doc:`../Overview/FirstApplication`\ "を実施すること。
+"\ :doc:`../Overview/ApplicationLayering`\ "は本ガイドラインで共通する用語と概念の説明を行っているため、必ず一読されたい。
+
+次に"\ :doc:`../Tutorial/index`\ "に進む。
+このチュートリアルでは"習うより慣れろ"を目的として、
+詳細な説明の前にまず手を動かして、TERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発を体感していただきたい。
+
+チュートリアルを実践したのちに、"\ :doc:`../ImplementationAtEachLayer/index`\ "でアプリケーション開発の詳細を学ぶ。
+特に"\ :doc:`../ImplementationAtEachLayer/ApplicationLayer`\ "でSpring MVCによる開発のノウハウを凝集して説明しているため、
+何度も読み返すことを推奨する。
+本章を読み終えた後にもう一度"\ :doc:`../Tutorial/index`\ "を振り返るとより理解が深まる。
+
+**ここまではTERASOLUNA Server Framework for Java (5.x)を使用するすべての開発者が読むことを強く推奨する。**
+
+"\ :doc:`../ArchitectureInDetail/index`\ "、"\ :doc:`../Security/index`\ "については
+目的に応じて必要なタイミングで参照すればよい。ただし、":doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`"はアプリケーション開発で通常は必要となるため、基本的には読んでおくこと。
+
+テクニカルリーダーはこれらをすべて読み内容を把握した上で
+プロジェクトにおいて、どのような方針を定めるか検討していただきたい。
+
+
+.. note::
+
+    時間がない場合、まずは
+    
+    #. \ :doc:`../Overview/FirstApplication`\ 
+    #. \ :doc:`../Overview/ApplicationLayering`\ 
+    #. \ :doc:`../Tutorial/TutorialTodo`\ 
+    #. \ :doc:`../ImplementationAtEachLayer/index`\ 
+    #. \ :doc:`../Tutorial/TutorialTodo`\ 
+    #. \ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ 
+    
+    を読むとよい。
+
+このドキュメントの動作検証環境
+================================================================================
+
+本ガイドラインで説明している内容の動作検証環境については、
+「\ `テスト済み環境 <https://github.com/terasolunaorg/terasoluna-gfw-functionaltest/wiki/Tested-Environment>`_\」を参照されたい。
+
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Introduction/TermsOfUse.rst b/source/Introduction/TermsOfUse.rst
index d28c682163..565149219b 100755
--- a/source/Introduction/TermsOfUse.rst
+++ b/source/Introduction/TermsOfUse.rst
@@ -1,22 +1,22 @@
-利用規約
-================================================================================
-
-本ドキュメントを使用するにあたり、以下の規約に同意していただく必要があります。同意いただけない場合は、本ドキュメント及びその複製物の全てを直ちに消去又は破棄してください。
-
-#. 本ドキュメントの著作権及びその他一切の権利は、NTTデータあるいはNTTデータに権利を許諾する第三者に帰属します。
-#. 本ドキュメントの一部または全部を、自らが使用する目的において、複製、翻訳、翻案することができます。ただし本ページの規約全文、およびNTTデータの著作権表示を削除することはできません。
-#. 本ドキュメントの一部または全部を、自らが使用する目的において改変したり、本ドキュメントを用いた二次的著作物を作成することができます。ただし、「参考文献：TERASOLUNA Server Framework for Java (5.x) Development Guideline」あるいは同等の表現を、作成したドキュメント及びその複製物に記載するものとします。
-#. 前2項によって作成したドキュメント及びその複製物を、無償の場合に限り、第三者へ提供することができます。
-#. NTTデータの書面による承諾を得ることなく、本規約に定められる条件を超えて、本ドキュメント及びその複製物を使用したり、本規約上の権利の全部又は一部を第三者に譲渡したりすることはできません。
-#. NTTデータは、本ドキュメントの内容の正確性、使用目的への適合性の保証、使用結果についての的確性や信頼性の保証、及び瑕疵担保義務も含め、直接、間接に被ったいかなる損害に対しても一切の責任を負いません。
-#. NTTデータは、本ドキュメントが第三者の著作権、その他如何なる権利も侵害しないことを保証しません。また、著作権、その他の権利侵害を直接又は間接の原因としてなされる如何なる請求（第三者との間の紛争を理由になされる請求を含む。）に関しても、NTTデータは一切の責任を負いません。
-
-本ドキュメントで使用されている各社の会社名及びサービス名、商品名に関する登録商標および商標は、以下の通りです。
-
-* TERASOLUNA は、株式会社NTTデータの登録商標です。
-* その他の会社名、製品名は、各社の登録商標または商標です。
-
-.. raw:: latex
-
-   \newpage
-
+利用規約
+================================================================================
+
+本ドキュメントを使用するにあたり、以下の規約に同意していただく必要があります。同意いただけない場合は、本ドキュメント及びその複製物の全てを直ちに消去又は破棄してください。
+
+#. 本ドキュメントの著作権及びその他一切の権利は、NTTデータあるいはNTTデータに権利を許諾する第三者に帰属します。
+#. 本ドキュメントの一部または全部を、自らが使用する目的において、複製、翻訳、翻案することができます。ただし本ページの規約全文、およびNTTデータの著作権表示を削除することはできません。
+#. 本ドキュメントの一部または全部を、自らが使用する目的において改変したり、本ドキュメントを用いた二次的著作物を作成することができます。ただし、「参考文献：TERASOLUNA Server Framework for Java (5.x) Development Guideline」あるいは同等の表現を、作成したドキュメント及びその複製物に記載するものとします。
+#. 前2項によって作成したドキュメント及びその複製物を、無償の場合に限り、第三者へ提供することができます。
+#. NTTデータの書面による承諾を得ることなく、本規約に定められる条件を超えて、本ドキュメント及びその複製物を使用したり、本規約上の権利の全部又は一部を第三者に譲渡したりすることはできません。
+#. NTTデータは、本ドキュメントの内容の正確性、使用目的への適合性の保証、使用結果についての的確性や信頼性の保証、及び瑕疵担保義務も含め、直接、間接に被ったいかなる損害に対しても一切の責任を負いません。
+#. NTTデータは、本ドキュメントが第三者の著作権、その他如何なる権利も侵害しないことを保証しません。また、著作権、その他の権利侵害を直接又は間接の原因としてなされる如何なる請求（第三者との間の紛争を理由になされる請求を含む。）に関しても、NTTデータは一切の責任を負いません。
+
+本ドキュメントで使用されている各社の会社名及びサービス名、商品名に関する登録商標および商標は、以下の通りです。
+
+* TERASOLUNA は、株式会社NTTデータの登録商標です。
+* その他の会社名、製品名は、各社の登録商標または商標です。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Introduction/index.rst b/source/Introduction/index.rst
index 4f554cb6f0..72550fae55 100755
--- a/source/Introduction/index.rst
+++ b/source/Introduction/index.rst
@@ -1,17 +1,17 @@
-はじめに
-********************************************************************************
-
-
-
-.. toctree::
-   :maxdepth: 1
-
-   TermsOfUse
-   Introduction
-   CriteriaBasedMapping
-   ChangeLog
-
-.. raw:: latex
-
-   \newpage
-
+はじめに
+********************************************************************************
+
+
+
+.. toctree::
+   :maxdepth: 1
+
+   TermsOfUse
+   Introduction
+   CriteriaBasedMapping
+   ChangeLog
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Overview/ApplicationLayering.rst b/source/Overview/ApplicationLayering.rst
index 6c89838419..aedf59ec96 100755
--- a/source/Overview/ApplicationLayering.rst
+++ b/source/Overview/ApplicationLayering.rst
@@ -1,703 +1,703 @@
-アプリケーションのレイヤ化
-********************************************************************************
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-本ガイドラインでは、アプリケーションを、次の3レイヤに分割する。
-
-* アプリケーション層
-* ドメイン層
-* インフラストラクチャ層
-
-各層には、以下のコンポーネントが含まれる。
-
-.. figure:: images/ApplicationLayer.png
-   :alt: application layers
-   :width: 95%
-
-
-
-| アプリケーション層とインフラストラクチャ層は、ドメイン層に依存するが、\ **ドメイン層が、他の層に依存してはいけない。**
-| ドメイン層の変更によって、アプリケーション層に変更が生じるのは良いが、
-| アプリケーション層の変更によって、ドメイン層の変更が生じるべきではない。
-
-各層について、説明する。
-
-.. note::
-
-  アプリケーション層、ドメイン層、インフラストラクチャー層は
-  Eric Evansの"Domain-Driven Design (2004, Addison-Wesley)"で説明されてる用語である。
-  ただし、用語は使用しているが以後Domain Driven Designの考えにのっとっているわけではない。
-
-|
-
-レイヤの定義
-================================================================================
-
-入力から出力までのデータの流れは、アプリケーション層→ドメイン層→インフラストラクチャ層であるため、
-この順に説明する。
-
-アプリケーション層
---------------------------------------------------------------------------------
-
-アプリケーション層は、クライアントとのデータの入出力を制御する層である。
-
-この層では、
-
-* データの入出力を行うUI(User Interface)の提供
-* クライアントからのリクエストハンドリング
-* 入力データの妥当性チェック
-* リクエスト内容に対応するドメイン層のコンポーネントの呼び出し
-
-などの実装を行う。
-
-**この層で行う実装は、できるだけ薄く保たれるべきであり、ビジネスルールを含んではいけない。**
-
-Controller
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Controllerは、主に以下の役割を担う。
-
-* 画面遷移の制御（リクエストマッピングと処理結果に対応するViewを返却する)
-* ドメイン層のServiceの呼び出し (リクエストに対応する主処理を実行する)
-
-Spring MVCでは、\ ``@Controller``\ アノテーションが付与されているPOJOクラスが該当する。
-
-.. note::
-
-    クライアントとの入出力データをセッションに格納する場合は、
-    セッションに格納するデータのライフサイクルを制御する役割も担う。
-
-|
-
-View
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Viewは、クライアントへの出力(UIの提供を含む)を担う。HTML/PDF/Excel/JSONなど、様々な形式で出力結果を返す。
-
-Spring MVCでは、\ ``View``\ クラスが該当する。
-
-.. tip::
-
-    REST APIやAjax向けのリクエストでJSONやXML形式の出力を行う場合は、\ ``HttpMessageConverter``\ クラスが\ ``View``\の役割を担う。
-
-    詳細は、「:doc:`../ArchitectureInDetail/WebServiceDetail/REST`」を参照されたい。
-
-|
-
-Form
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Formは、主に以下の役割を担う。
-
-* HTMLのフォームを表現（フォームのデータをControllerに渡したり、処理結果をフォームに出力する）
-* 入力チェックルールの宣言 (Bean Validationのアノテーションを付与する)
-
-Spring MVCでは、Formオブジェクトは、リクエストパラメータを保持するPOJOクラスが該当する。form backing beanと呼ばれる。
-
-.. note::
-
-    ドメイン層がアプリケーション層に依存しないようにするために、以下の変換処理をアプリケーション層で行う。
-
-    * FormからDomain Object(Entity等)への変換処理
-    * Domain ObjectからFormへの変換処理
-
-    これらの変換処理をController内で行うと、ソースコードが長くなり、
-    本来のControllerの処理(画面遷移など)の見通しが、悪くなりがちである。
-
-    変換処理のコードが多くなる場合は、以下のいずれか又は両方の対策を行い、
-    Controller内のソースコードをシンプルな状態に保つこと推奨する。
-
-    * Helperクラスを作成して変換処理を委譲する
-    * :doc:`Dozer <../ArchitectureInDetail/GeneralFuncDetail/Dozer>` を使用する
-
-.. tip::
-
-    REST APIやAjax向けのリクエストでJSONやXML形式の入力を受ける場合は、\ ``Resource``\ クラスが\ ``Form``\の役割を担う。
-    また、JSONやXML形式の入力データを\ ``Resource``\ クラスに変換する役割は、\ ``HttpMessageConverter``\ クラスが担う。
-
-    詳細は、「:doc:`../ArchitectureInDetail/WebServiceDetail/REST`」を参照されたい。
-
-|
-
-Helper
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Helperは、Controllerを補助する役割を担う。
-
-Helperの作成はオプションである。必要に応じて、POJOクラスとして作成すること。
-
-.. note::
-
-  Controllerの役割はルーティング(URLマッピングと遷移先の返却)であり、
-  それ以外の処理(JavaBeanの変換等)が必要になったらHelperに切り出して、そちらに処理を委譲することを推奨する。
-  
-  HelperはControllerの見通しを良くするためのものであるため、HelperはControllerの一部として扱ってよい。
-  (Controller内のprivateメソッドみたいなものである)
-
-|
-
-ドメイン層
---------------------------------------------------------------------------------
-
-ドメイン層は、アプリケーションのコアとなる層であり、ビジネスルールを実行(業務処理を提供)する。
-
-この層では、
-
-* Domain Object
-* Domain Objectに対するビジネスルールのチェック(口座へ入金する場合に、残高が十分であるかどうかのチェックなど)
-* Domain Objectに対するビジネスルールの実行(ビジネスルールに則った値の反映)
-* Domain Objectに対するCRUD操作
-
-などの実装を行う。
-
-ドメイン層は、他の層からは疎であり、再利用できる。
-
-Domain Object
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Domain Objectはビジネスを行う上で必要な資源や、ビジネスを行っていく過程で発生するものを表現するモデルである。
-
-Domain Objectは、大きく分けて、以下3つに分類される。
-
-* EmployeeやCustomer, Productなどのリソース系モデル(一般的には、名詞で表現される）
-* Order, Paymentなどイベント系モデル(一般的には動詞で表現される)
-* YearlySales, MonthlySalesなどのサマリ系モデル
-
-データベースのテーブルの1レコードを表現するクラスであるEntityは、Domain Objectである。
-
-.. note::
-
-   本ガイドラインでは主に、\ `状態のみもつモデル <http://martinfowler.com/bliki/AnemicDomainModel.html>`_\ を扱う。
-
-   Martin Fowlerの"Patterns of Enterprise Application Architecture (2002, Addison-Wesley)"では、
-   Domain Modelは、\ `状態と振る舞いをもつもの <http://martinfowler.com/eaaCatalog/domainModel.html>`_\ と定義されているが、
-   厳密には触れない。
-
-   Eric Evansの提唱するような\ `Richなドメインモデル <http://dddcommunity.org/>`_\ も、本ガイドラインでは扱わないが、
-   分類上はここに含まれる。
-
-|
-
-Repository
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Domain Objectのコレクションのような位置づけであり、Domain Objectの問い合わせや、作成、更新、削除のようなCRUD処理を担う。
-
-この層では、インタフェースのみ定義する。
-
-実体はインフラストラクチャ層のRepositoryImplで実装するため、
-どのようなデータアクセスが行われているかについての情報は持たない。
-
-|
-
-Service
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-業務処理を提供する。
-
-本ガイドラインでは、Serviceのメソッドをトランザクション境界にすることを推奨している。
-
-.. note::
-
-    Serviceでは、FormやHttpRequestなど、Webに関わる情報を扱うべきではない。
-
-    これらの情報は、Serviceのメソッドを呼び出す前に、アプリケーション層でドメイン層のオブジェクトに変換すべきである。
-
-|
-
-インフラストラクチャ層
---------------------------------------------------------------------------------
-
-インフラストラクチャ層は、ドメイン層(Repositoryインタフェース)の実装を提供する層である。
-
-データストア(RDBMSや、NoSQLなどのデータを格納する場所)への永続化や、メッセージの送信などを担う。
-
-RepositoryImpl
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-RepositoryImplは、Repositoryインタフェースの実装として、Domain Objectのライフサイクル管理を行う処理を提供する。
-
-RepositoryImplの実装はRepositoryインタフェースによって隠蔽されるため、
-ドメイン層のコンポーネント(Serviceなど)では、どのようにデータアクセスされているか意識しなくて済む。
-
-要件によっては、この処理もトランザクション境界となりうる。
-
-.. tip::
-
-    MyBatis3やSpring Data JPAを使用する場合は、RepositoryImplの実体を(一部)自動で作成する仕組みが提供されている。
-
-|
-
-O/R Mapper
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-O/R Mapperは、データベースとEntityの相互マッピングを担う。
-
-MyBatis / JPA / Spring JDBCが、本機能を提供する。
-
-具体的には、
-
-* MyBatis3を用いる場合は、Mapperインタフェースや\ ``SqlSession``\
-* JPAを用いる場合は、\ ``EntityManager``\
-* Spring JDBCを用いる場合は、\ ``JdbcTemplate``\
-
-が、O/R Mapperに該当する。
-
-O/R Mapperは、Repositoryインタフェースの実装に用いられる。
-
-.. note::
-
-  MyBatis, Spring JDBCは「O/R Mapper」というより、「SQL Mapper」と呼んだ方が正確であるが、本ガイドラインでは「O/R Mapper」に分類する。
-
-|
-
-.. _application-layering_Integration-System-Connector:
-
-Integration System Connector
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Integration System Connectorは、
-データベース以外のデータストア（メッセージングシステム、Key-Value-Store、Webサービス、既存システム、外部システムなど）との連携を担う。
-
-Integration System Connectorは、Repositoryインタフェースの実装に用いられる。
-
-|
-
-レイヤ間の依存関係
-================================================================================
-
-冒頭で説明したとおり、ドメイン層がコアとなり、アプリケーション層、インフラストラクチャ層がそれに依存する形となる。
-
-本ガイドラインでは、実装技術として、
-
-* アプリケーション層にSpring MVC
-* インフラストラクチャ層にMyBatis, Spring Data JPA
-
-を使用することを想定しているが、本質的には、実装技術が変わっても、それぞれの層で違いが吸収され、ドメイン層には影響を与えない。
-レイヤ間の結合部は、インタフェースとして公開することで、各層が使用している実装技術に依存しない形式とすることができる。
-
-レイヤ化を意識して、疎結合な設計を行うことを推奨する。
-
-.. figure:: images/LayerDependencies.png
-   :width: 95%
-
-|
-
-各レイヤのオブジェクトの依存関係は、DIコンテナによって解決される。
-
-.. figure:: images/LayerDependencyInjection.png
-   :width: 95%
-
-|
-
-Repositoryを使用する時の処理の流れ
---------------------------------------------------------------------------------
-
-入力から出力までの流れで表現すると、次の図のようになる。
-
-.. figure:: images/LayeringPattern1.png
-   :alt: Data flow from request to response
-   :width: 100%
-
-更新系の処理を例に、シーケンスを説明する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - 1.
-      - Controllerが、Requestを受け付ける
-    * - 2.
-      - (Optional) Controllerは、Helperを呼び出し、Formの情報を、Domain ObjectまたはDTOに変換する
-    * - 3.
-      - Controllerは、Domain ObjectまたはDTOを用いて、Serviceを呼び出す
-    * - 4.
-      - Serviceは、Repositoryを呼び出して、業務処理を行う
-    * - 5.
-      - Repositoryは、O/R Mapperを呼び出し、Domain ObjectまたはDTOを永続化する
-    * - 6.
-      - (実装依存) O/R Mapperは、DBにDomain ObjectまたはDTOの情報を保存する
-    * - 7.
-      - Serviceは、業務処理結果のDomain ObjectまたはDTOを、Controllerに返却する
-    * - 8.
-      - (Optional) Controllerは、Helperを呼び出し、Domain ObjectまたはDTOを、Formに変換する
-    * - 9.
-      - Controllerは、遷移先のView名を返却する
-    * - 10.
-      - Viewは、Responseを出力する。
-
-|
-
-各コンポーネント間の呼び出し可否を、以下にまとめる。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|
-.. list-table:: **コンポーネント間の呼び出し可否**
-    :header-rows: 1
-    :stub-columns: 1
-    :widths: 20 20 20 20 20
-
-    * - Caller/Callee
-      - Controller
-      - Service
-      - Repository
-      - O/R Mapper
-    * - Controller
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/tick.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-    * - Service
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/exclamation.png
-           :align: center
-      - .. image:: images/tick.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-    * - Repository
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/tick.png
-           :align: center
-
-
-注意するべきことは、\ **基本的にServiceからServiceの呼び出しは、禁止している**\ 点である。
-
-もし他のサービスからも利用可能なサービスが必要な場合は、呼び出し可否を明確にするために、SharedServiceを作成すること。
-詳細については、\ :doc:`../ImplementationAtEachLayer/DomainLayer`\ を参照されたい。
-
-
-.. note::
-
-    この呼び出し可否ルールを守ることは、アプリケーション開発の初期段階では、煩わしく感じられるかもしれない。
-    確かに、一つの処理だけみると、たとえばControllerから直接Repositoryを呼び出したほうが、速くアプリケーションを作成できる。
-    しかし、ルールを守らない場合、開発規模が大きくなった際に、修正の影響範囲が分かりにくくなったり、横断的な共通処理を追加しにくくなるなど、
-    保守性に大きな問題が生じることが多い。後で問題にならないように、初めから依存関係に気を付けて開発することを強く推奨する。
-
-|
-
-Repositoryを使用しない時の処理の流れ
---------------------------------------------------------------------------------
-
-Repositoryを作成することにより、永続化技術を隠蔽できたり、データアクセス処理を共通化できるなどのメリットがある。
-
-しかし、プロジェクトのチーム体制によっては、データアクセスの共通化が難しい場合がある（複数の会社が、別々に業務処理を実装し、共通化のコントロールが難しい場合など）。
-その場合、データアクセスの抽象化が必要ないのであれば、Repositoryは作成せず、以下の図のように、Serviceから直接O/R Mapperを呼び出すようにすればよい。
-
-.. figure:: images/LayeringPattern2.png
-   :alt: Data flow from request to response (without Repository)
-   :width: 100%
-
-|
-
-各コンポーネント間の呼び出し可否を、以下にまとめる。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.25\linewidth}|p{0.25\linewidth}|p{0.25\linewidth}|
-.. list-table:: **コンポーネント間の呼び出し可否 (without Repository)**
-    :header-rows: 1
-    :stub-columns: 1
-    :widths: 25 25 25 25
-
-    * - Caller/Callee
-      - Controller
-      - Service
-      - O/R Mapper
-    * - Controller
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/tick.png
-           :align: center
-      - .. image:: images/cross.png
-           :align: center
-    * - Service
-      - .. image:: images/cross.png
-           :align: center
-      - .. image:: images/exclamation.png
-           :align: center
-      - .. image:: images/tick.png
-           :align: center
-
-|
-
-.. _application-layering_project-structure:
-
-プロジェクト構成
-================================================================================
-
-上記のように、アプリケーションのレイヤ化を行った場合に推奨する構成について、説明する。
-
-ここでは、Mavenの標準ディレクトリ構造を前提とする。
-
-基本的には、以下の構成でマルチプロジェクトを作成することを推奨する。
-
-|
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 30 70
-
-    * - プロジェクト名
-      - 説明
-    * - [projectName]-domain
-      - ドメイン層に関するクラス・設定ファイルを格納するプロジェクト
-    * - [projectName]-web
-      - アプリケーション層に関するクラス・設定ファイルを格納するプロジェクト
-    * - [projectName]-env
-      - 環境に依存するファイル等を格納するプロジェクト
-
-([projectName]には、対象のプロジェクト名を入れること)
-
-
-.. note::
-
-    RepositoryImplなどインフラストラクチャ層のクラスも、project-domainに含める。
-
-    本来は、[projectName]-infraプロジェクトを別途作成すべきであるが、
-    通常infraプロジェクトを隠蔽化する必要がなく、domainプロジェクトに格納されている方が開発しやすいためである。
-    必要であれば、[projectName]-infraプロジェクトを作成してよい。
-
-
-.. tip::
-
-    マルチプロジェクト構成の例として、\ `サンプルアプリケーション <https://github.com/terasolunaorg/terasoluna-tourreservation>`_\ や\ `共通ライブラリのテストアプリケーション <https://github.com/terasolunaorg/terasoluna-gfw-functionaltest>`_\ を参照されたい。
-
-|
-
-[projectName]-domain
---------------------------------------------------------------------------------
-
-[projectName]-domainのプロジェクト推奨構成を、以下に示す。
-
-.. code-block:: console
-
-    [projectName]-domain
-      └src
-          └main
-              ├java
-              │  └com
-              │      └example
-              │          └domain ...(1)
-              │              ├model ...(2)
-              │              │  ├Xxx.java
-              │              │  ├Yyy.java
-              │              │  └Zzz.java
-              │              ├repository ...(3)
-              │              │  ├xxx
-              │              │  │  └XxxRepository.java
-              │              │  ├yyy
-              │              │  │  └YyyRepository.java
-              │              │  └zzz
-              │              │      ├ZzzRepository.java
-              │              │      └ZzzRepositoryImpl.java
-              │              └service ...(4)
-              │                  ├aaa
-              │                  │  ├AaaService.java
-              │                  │  └AaaServiceImpl.java
-              │                  └bbb
-              │                      ├BbbService.java
-              │                      └BbbServiceImpl.java
-              └resources
-                  └META-INF
-                      └spring
-                          ├[projectName]-codelist.xml ...(5)
-                          ├[projectName]-domain.xml ...(6)
-                          └[projectName]-infra.xml ...(7)
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - ドメイン層の構成要素を格納するパッケージ。
-    * - | (2)
-      - Domain Objectを格納するパッケージ。
-    * - | (3)
-      - リポジトリを格納するパッケージ。
-
-        エンティティごとにパッケージを作成する。
-        関連するエンティティがあれば、主となるエンティティのパッケージに、従となるエンティティ(OrderとOrderLineの関係であればOrderLine)のRepositoryも配置する。
-        また、検索条件などを保持するDTOなどが必要な場合は、このパッケージに配置する。
-
-        RepositoryImplは、インフラストラクチャ層に属するが、通常、このプロジェクトに含めても問題ない。
-        異なるデータストアを使うなど、複数の永続化先があり、実装を隠蔽したい場合は、別プロジェクト(またはパッケージ)に、RepositoryImplを実装するようにする。
-    * - | (4)
-      - サービスを格納するパッケージ。
-
-        業務(またはエンティティ)ごとに、パッケージインタフェースと実装を、同じ階層に配置する。入出力クラスが必要な場合は、このパッケージに配置する。
-    * - | (5)
-      - コードリストのBean定義を行う。
-    * - | (6)
-      - ドメイン層に関するBean定義を行う。
-    * - | (7)
-      - インフラストラクチャ層に関するBean定義を行う。
-
-|
-
-[projectName]-web
---------------------------------------------------------------------------------
-
-[projectName]-webのプロジェクト推奨構成を、以下に示す。
-
-.. code-block:: console
-
-    [projectName]-web
-      └src
-          └main
-              ├java
-              │  └com
-              │      └example
-              │          └app ...(1)
-              │              ├abc
-              │              │  ├AbcController.java
-              │              │  ├AbcForm.java
-              │              │  └AbcHelper.java
-              │              └def
-              │                  ├DefController.java
-              │                  ├DefForm.java
-              │                  └DefOutput.java
-              ├resources
-              │  ├META-INF
-              │  │  └spring
-              │  │      ├applicationContext.xml ...(2)
-              │  │      ├application.properties ...(3)
-              │  │      ├spring-mvc.xml ...(4)
-              │  │      └spring-security.xml ...(5)
-              │  └i18n
-              │      └application-messages.properties ...(6)
-              └webapp
-                  ├resources ...(7)
-                  └WEB-INF
-                      ├views ...(8)
-                      │  ├abc
-                      │  │ ├list.jsp
-                      │  │ └createForm.jsp
-                      │  └def
-                      │     ├list.jsp
-                      │     └createForm.jsp
-                      └web.xml ...(9)
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - アプリケーション層の構成要素を格納するパッケージ。
-    * - | (2)
-      - アプリケーション全体に関するBean定義を行う。
-    * - | (3)
-      - アプリケーションで使用するプロパティを定義する。
-    * - | (4)
-      - SpringMVCの設定を行うBean定義を行う。
-    * - | (5)
-      - SpringSecurityの設定を行うBean定義を行う。
-    * - | (6)
-      - 画面表示用のメッセージ(国際化対応)定義を行う。
-    * - | (7)
-      - 静的リソース(css、js、画像など)を格納する。
-    * - | (8)
-      - View(jsp)を格納する。
-    * - | (9)
-      - Servletのデプロイメント定義を行う。
-
-|
-
-[projectName]-env
---------------------------------------------------------------------------------
-
-[projectName]-envのプロジェクト推奨構成を、以下に示す。
-
-.. code-block:: console
-
-    [projectName]-env
-      ├configs ...(1)
-      │   └[envName] ...(2)
-      │       └resources ...(3)
-      └src
-          └main
-              └resources ...(4)
-                 ├META-INF
-                 │  └spring
-                 │      ├[projectName]-env.xml ...(5)
-                 │      └[projectName]-infra.properties ...(6)
-                 ├dozer.properties
-                 ├log4jdbc.properties
-                 └logback.xml ...(7)
-
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - 全環境の環境依存ファイルを管理するためのディレクトリ。
-    * - | (2)
-      - 環境毎の環境依存ファイルを管理するためのディレクトリ。
-
-        ディレクトリ名は、環境を識別する名前を指定する。
-    * - | (3)
-      - 環境毎の設定ファイルを管理するためのディレクトリ。
-
-        サブディレクトリの構成や管理する設定ファイルは、(4)と同様。
-    * - | (4)
-      - ローカル開発環境用の設定ファイルを管理するためのディレクトリ。
-    * - | (5)
-      - ローカル開発環境用のBean定義(DataSource等)を行う。
-    * - | (6)
-      - ローカル開発環境用のプロパティを定義する。
-    * - | (7)
-      - ローカル開発環境用のログ出力定義を行う。
-
-
-.. note::
-
-    [projectName]-domainと[projectName]-webを別プロジェクトに分ける理由は、依存関係の逆転を防ぐためである。
-  
-    [projectName]-webが[projectName]-domainを使用するのは当然であるが、[projectName]-domainが[projectName]-webを参照してはいけない。
-  
-    1つのプロジェクトに[projectName]-webと[projectName]-domainの構成要素をまとめてしまうと、誤って不正な参照をしてしまうことがある。
-    プロジェクトを分けて参照順序をつけることで[projectName]-domainが[projectName]-webを参照できないようにすることを強く推奨する。
-
-.. note::
-
-    [projectName]-envを作成する理由は環境に依存する情報を外出し、環境毎に切り替えられるようにするためである。
-  
-    たとえばデフォルトではローカル開発環境用の設定をして、アプリケーションビルド時には[projectName]-envを除いてwarを作成する。
-    結合テスト用の環境やシステムテスト用の環境を別々のjarとして作成すると、そこだけ差し替えてデプロイするということが可能である。
-  
-    また使用するRDBMSが変わるようなプロジェクトの場合にも影響を最小限に抑えることができる。
-  
-    この点を考慮しない場合は、環境ごとに設定ファイルの内容を行いビルドしなおすという作業が入る。
-  
-.. raw:: latex
-
-   \newpage
-
+アプリケーションのレイヤ化
+********************************************************************************
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+本ガイドラインでは、アプリケーションを、次の3レイヤに分割する。
+
+* アプリケーション層
+* ドメイン層
+* インフラストラクチャ層
+
+各層には、以下のコンポーネントが含まれる。
+
+.. figure:: images/ApplicationLayer.png
+   :alt: application layers
+   :width: 95%
+
+
+
+| アプリケーション層とインフラストラクチャ層は、ドメイン層に依存するが、\ **ドメイン層が、他の層に依存してはいけない。**
+| ドメイン層の変更によって、アプリケーション層に変更が生じるのは良いが、
+| アプリケーション層の変更によって、ドメイン層の変更が生じるべきではない。
+
+各層について、説明する。
+
+.. note::
+
+  アプリケーション層、ドメイン層、インフラストラクチャー層は
+  Eric Evansの"Domain-Driven Design (2004, Addison-Wesley)"で説明されてる用語である。
+  ただし、用語は使用しているが以後Domain Driven Designの考えにのっとっているわけではない。
+
+|
+
+レイヤの定義
+================================================================================
+
+入力から出力までのデータの流れは、アプリケーション層→ドメイン層→インフラストラクチャ層であるため、
+この順に説明する。
+
+アプリケーション層
+--------------------------------------------------------------------------------
+
+アプリケーション層は、クライアントとのデータの入出力を制御する層である。
+
+この層では、
+
+* データの入出力を行うUI(User Interface)の提供
+* クライアントからのリクエストハンドリング
+* 入力データの妥当性チェック
+* リクエスト内容に対応するドメイン層のコンポーネントの呼び出し
+
+などの実装を行う。
+
+**この層で行う実装は、できるだけ薄く保たれるべきであり、ビジネスルールを含んではいけない。**
+
+Controller
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Controllerは、主に以下の役割を担う。
+
+* 画面遷移の制御（リクエストマッピングと処理結果に対応するViewを返却する)
+* ドメイン層のServiceの呼び出し (リクエストに対応する主処理を実行する)
+
+Spring MVCでは、\ ``@Controller``\ アノテーションが付与されているPOJOクラスが該当する。
+
+.. note::
+
+    クライアントとの入出力データをセッションに格納する場合は、
+    セッションに格納するデータのライフサイクルを制御する役割も担う。
+
+|
+
+View
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Viewは、クライアントへの出力(UIの提供を含む)を担う。HTML/PDF/Excel/JSONなど、様々な形式で出力結果を返す。
+
+Spring MVCでは、\ ``View``\ クラスが該当する。
+
+.. tip::
+
+    REST APIやAjax向けのリクエストでJSONやXML形式の出力を行う場合は、\ ``HttpMessageConverter``\ クラスが\ ``View``\の役割を担う。
+
+    詳細は、「:doc:`../ArchitectureInDetail/WebServiceDetail/REST`」を参照されたい。
+
+|
+
+Form
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Formは、主に以下の役割を担う。
+
+* HTMLのフォームを表現（フォームのデータをControllerに渡したり、処理結果をフォームに出力する）
+* 入力チェックルールの宣言 (Bean Validationのアノテーションを付与する)
+
+Spring MVCでは、Formオブジェクトは、リクエストパラメータを保持するPOJOクラスが該当する。form backing beanと呼ばれる。
+
+.. note::
+
+    ドメイン層がアプリケーション層に依存しないようにするために、以下の変換処理をアプリケーション層で行う。
+
+    * FormからDomain Object(Entity等)への変換処理
+    * Domain ObjectからFormへの変換処理
+
+    これらの変換処理をController内で行うと、ソースコードが長くなり、
+    本来のControllerの処理(画面遷移など)の見通しが、悪くなりがちである。
+
+    変換処理のコードが多くなる場合は、以下のいずれか又は両方の対策を行い、
+    Controller内のソースコードをシンプルな状態に保つこと推奨する。
+
+    * Helperクラスを作成して変換処理を委譲する
+    * :doc:`Dozer <../ArchitectureInDetail/GeneralFuncDetail/Dozer>` を使用する
+
+.. tip::
+
+    REST APIやAjax向けのリクエストでJSONやXML形式の入力を受ける場合は、\ ``Resource``\ クラスが\ ``Form``\の役割を担う。
+    また、JSONやXML形式の入力データを\ ``Resource``\ クラスに変換する役割は、\ ``HttpMessageConverter``\ クラスが担う。
+
+    詳細は、「:doc:`../ArchitectureInDetail/WebServiceDetail/REST`」を参照されたい。
+
+|
+
+Helper
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Helperは、Controllerを補助する役割を担う。
+
+Helperの作成はオプションである。必要に応じて、POJOクラスとして作成すること。
+
+.. note::
+
+  Controllerの役割はルーティング(URLマッピングと遷移先の返却)であり、
+  それ以外の処理(JavaBeanの変換等)が必要になったらHelperに切り出して、そちらに処理を委譲することを推奨する。
+  
+  HelperはControllerの見通しを良くするためのものであるため、HelperはControllerの一部として扱ってよい。
+  (Controller内のprivateメソッドみたいなものである)
+
+|
+
+ドメイン層
+--------------------------------------------------------------------------------
+
+ドメイン層は、アプリケーションのコアとなる層であり、ビジネスルールを実行(業務処理を提供)する。
+
+この層では、
+
+* Domain Object
+* Domain Objectに対するビジネスルールのチェック(口座へ入金する場合に、残高が十分であるかどうかのチェックなど)
+* Domain Objectに対するビジネスルールの実行(ビジネスルールに則った値の反映)
+* Domain Objectに対するCRUD操作
+
+などの実装を行う。
+
+ドメイン層は、他の層からは疎であり、再利用できる。
+
+Domain Object
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Domain Objectはビジネスを行う上で必要な資源や、ビジネスを行っていく過程で発生するものを表現するモデルである。
+
+Domain Objectは、大きく分けて、以下3つに分類される。
+
+* EmployeeやCustomer, Productなどのリソース系モデル(一般的には、名詞で表現される）
+* Order, Paymentなどイベント系モデル(一般的には動詞で表現される)
+* YearlySales, MonthlySalesなどのサマリ系モデル
+
+データベースのテーブルの1レコードを表現するクラスであるEntityは、Domain Objectである。
+
+.. note::
+
+   本ガイドラインでは主に、\ `状態のみもつモデル <http://martinfowler.com/bliki/AnemicDomainModel.html>`_\ を扱う。
+
+   Martin Fowlerの"Patterns of Enterprise Application Architecture (2002, Addison-Wesley)"では、
+   Domain Modelは、\ `状態と振る舞いをもつもの <http://martinfowler.com/eaaCatalog/domainModel.html>`_\ と定義されているが、
+   厳密には触れない。
+
+   Eric Evansの提唱するような\ `Richなドメインモデル <http://dddcommunity.org/>`_\ も、本ガイドラインでは扱わないが、
+   分類上はここに含まれる。
+
+|
+
+Repository
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Domain Objectのコレクションのような位置づけであり、Domain Objectの問い合わせや、作成、更新、削除のようなCRUD処理を担う。
+
+この層では、インタフェースのみ定義する。
+
+実体はインフラストラクチャ層のRepositoryImplで実装するため、
+どのようなデータアクセスが行われているかについての情報は持たない。
+
+|
+
+Service
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+業務処理を提供する。
+
+本ガイドラインでは、Serviceのメソッドをトランザクション境界にすることを推奨している。
+
+.. note::
+
+    Serviceでは、FormやHttpRequestなど、Webに関わる情報を扱うべきではない。
+
+    これらの情報は、Serviceのメソッドを呼び出す前に、アプリケーション層でドメイン層のオブジェクトに変換すべきである。
+
+|
+
+インフラストラクチャ層
+--------------------------------------------------------------------------------
+
+インフラストラクチャ層は、ドメイン層(Repositoryインタフェース)の実装を提供する層である。
+
+データストア(RDBMSや、NoSQLなどのデータを格納する場所)への永続化や、メッセージの送信などを担う。
+
+RepositoryImpl
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+RepositoryImplは、Repositoryインタフェースの実装として、Domain Objectのライフサイクル管理を行う処理を提供する。
+
+RepositoryImplの実装はRepositoryインタフェースによって隠蔽されるため、
+ドメイン層のコンポーネント(Serviceなど)では、どのようにデータアクセスされているか意識しなくて済む。
+
+要件によっては、この処理もトランザクション境界となりうる。
+
+.. tip::
+
+    MyBatis3やSpring Data JPAを使用する場合は、RepositoryImplの実体を(一部)自動で作成する仕組みが提供されている。
+
+|
+
+O/R Mapper
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+O/R Mapperは、データベースとEntityの相互マッピングを担う。
+
+MyBatis / JPA / Spring JDBCが、本機能を提供する。
+
+具体的には、
+
+* MyBatis3を用いる場合は、Mapperインタフェースや\ ``SqlSession``\
+* JPAを用いる場合は、\ ``EntityManager``\
+* Spring JDBCを用いる場合は、\ ``JdbcTemplate``\
+
+が、O/R Mapperに該当する。
+
+O/R Mapperは、Repositoryインタフェースの実装に用いられる。
+
+.. note::
+
+  MyBatis, Spring JDBCは「O/R Mapper」というより、「SQL Mapper」と呼んだ方が正確であるが、本ガイドラインでは「O/R Mapper」に分類する。
+
+|
+
+.. _application-layering_Integration-System-Connector:
+
+Integration System Connector
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Integration System Connectorは、
+データベース以外のデータストア（メッセージングシステム、Key-Value-Store、Webサービス、既存システム、外部システムなど）との連携を担う。
+
+Integration System Connectorは、Repositoryインタフェースの実装に用いられる。
+
+|
+
+レイヤ間の依存関係
+================================================================================
+
+冒頭で説明したとおり、ドメイン層がコアとなり、アプリケーション層、インフラストラクチャ層がそれに依存する形となる。
+
+本ガイドラインでは、実装技術として、
+
+* アプリケーション層にSpring MVC
+* インフラストラクチャ層にMyBatis, Spring Data JPA
+
+を使用することを想定しているが、本質的には、実装技術が変わっても、それぞれの層で違いが吸収され、ドメイン層には影響を与えない。
+レイヤ間の結合部は、インタフェースとして公開することで、各層が使用している実装技術に依存しない形式とすることができる。
+
+レイヤ化を意識して、疎結合な設計を行うことを推奨する。
+
+.. figure:: images/LayerDependencies.png
+   :width: 95%
+
+|
+
+各レイヤのオブジェクトの依存関係は、DIコンテナによって解決される。
+
+.. figure:: images/LayerDependencyInjection.png
+   :width: 95%
+
+|
+
+Repositoryを使用する時の処理の流れ
+--------------------------------------------------------------------------------
+
+入力から出力までの流れで表現すると、次の図のようになる。
+
+.. figure:: images/LayeringPattern1.png
+   :alt: Data flow from request to response
+   :width: 100%
+
+更新系の処理を例に、シーケンスを説明する。
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - 1.
+      - Controllerが、Requestを受け付ける
+    * - 2.
+      - (Optional) Controllerは、Helperを呼び出し、Formの情報を、Domain ObjectまたはDTOに変換する
+    * - 3.
+      - Controllerは、Domain ObjectまたはDTOを用いて、Serviceを呼び出す
+    * - 4.
+      - Serviceは、Repositoryを呼び出して、業務処理を行う
+    * - 5.
+      - Repositoryは、O/R Mapperを呼び出し、Domain ObjectまたはDTOを永続化する
+    * - 6.
+      - (実装依存) O/R Mapperは、DBにDomain ObjectまたはDTOの情報を保存する
+    * - 7.
+      - Serviceは、業務処理結果のDomain ObjectまたはDTOを、Controllerに返却する
+    * - 8.
+      - (Optional) Controllerは、Helperを呼び出し、Domain ObjectまたはDTOを、Formに変換する
+    * - 9.
+      - Controllerは、遷移先のView名を返却する
+    * - 10.
+      - Viewは、Responseを出力する。
+
+|
+
+各コンポーネント間の呼び出し可否を、以下にまとめる。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|p{0.20\linewidth}|
+.. list-table:: **コンポーネント間の呼び出し可否**
+    :header-rows: 1
+    :stub-columns: 1
+    :widths: 20 20 20 20 20
+
+    * - Caller/Callee
+      - Controller
+      - Service
+      - Repository
+      - O/R Mapper
+    * - Controller
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/tick.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+    * - Service
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/exclamation.png
+           :align: center
+      - .. image:: images/tick.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+    * - Repository
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/tick.png
+           :align: center
+
+
+注意するべきことは、\ **基本的にServiceからServiceの呼び出しは、禁止している**\ 点である。
+
+もし他のサービスからも利用可能なサービスが必要な場合は、呼び出し可否を明確にするために、SharedServiceを作成すること。
+詳細については、\ :doc:`../ImplementationAtEachLayer/DomainLayer`\ を参照されたい。
+
+
+.. note::
+
+    この呼び出し可否ルールを守ることは、アプリケーション開発の初期段階では、煩わしく感じられるかもしれない。
+    確かに、一つの処理だけみると、たとえばControllerから直接Repositoryを呼び出したほうが、速くアプリケーションを作成できる。
+    しかし、ルールを守らない場合、開発規模が大きくなった際に、修正の影響範囲が分かりにくくなったり、横断的な共通処理を追加しにくくなるなど、
+    保守性に大きな問題が生じることが多い。後で問題にならないように、初めから依存関係に気を付けて開発することを強く推奨する。
+
+|
+
+Repositoryを使用しない時の処理の流れ
+--------------------------------------------------------------------------------
+
+Repositoryを作成することにより、永続化技術を隠蔽できたり、データアクセス処理を共通化できるなどのメリットがある。
+
+しかし、プロジェクトのチーム体制によっては、データアクセスの共通化が難しい場合がある（複数の会社が、別々に業務処理を実装し、共通化のコントロールが難しい場合など）。
+その場合、データアクセスの抽象化が必要ないのであれば、Repositoryは作成せず、以下の図のように、Serviceから直接O/R Mapperを呼び出すようにすればよい。
+
+.. figure:: images/LayeringPattern2.png
+   :alt: Data flow from request to response (without Repository)
+   :width: 100%
+
+|
+
+各コンポーネント間の呼び出し可否を、以下にまとめる。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.25\linewidth}|p{0.25\linewidth}|p{0.25\linewidth}|
+.. list-table:: **コンポーネント間の呼び出し可否 (without Repository)**
+    :header-rows: 1
+    :stub-columns: 1
+    :widths: 25 25 25 25
+
+    * - Caller/Callee
+      - Controller
+      - Service
+      - O/R Mapper
+    * - Controller
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/tick.png
+           :align: center
+      - .. image:: images/cross.png
+           :align: center
+    * - Service
+      - .. image:: images/cross.png
+           :align: center
+      - .. image:: images/exclamation.png
+           :align: center
+      - .. image:: images/tick.png
+           :align: center
+
+|
+
+.. _application-layering_project-structure:
+
+プロジェクト構成
+================================================================================
+
+上記のように、アプリケーションのレイヤ化を行った場合に推奨する構成について、説明する。
+
+ここでは、Mavenの標準ディレクトリ構造を前提とする。
+
+基本的には、以下の構成でマルチプロジェクトを作成することを推奨する。
+
+|
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 30 70
+
+    * - プロジェクト名
+      - 説明
+    * - [projectName]-domain
+      - ドメイン層に関するクラス・設定ファイルを格納するプロジェクト
+    * - [projectName]-web
+      - アプリケーション層に関するクラス・設定ファイルを格納するプロジェクト
+    * - [projectName]-env
+      - 環境に依存するファイル等を格納するプロジェクト
+
+([projectName]には、対象のプロジェクト名を入れること)
+
+
+.. note::
+
+    RepositoryImplなどインフラストラクチャ層のクラスも、project-domainに含める。
+
+    本来は、[projectName]-infraプロジェクトを別途作成すべきであるが、
+    通常infraプロジェクトを隠蔽化する必要がなく、domainプロジェクトに格納されている方が開発しやすいためである。
+    必要であれば、[projectName]-infraプロジェクトを作成してよい。
+
+
+.. tip::
+
+    マルチプロジェクト構成の例として、\ `サンプルアプリケーション <https://github.com/terasolunaorg/terasoluna-tourreservation>`_\ や\ `共通ライブラリのテストアプリケーション <https://github.com/terasolunaorg/terasoluna-gfw-functionaltest>`_\ を参照されたい。
+
+|
+
+[projectName]-domain
+--------------------------------------------------------------------------------
+
+[projectName]-domainのプロジェクト推奨構成を、以下に示す。
+
+.. code-block:: console
+
+    [projectName]-domain
+      └src
+          └main
+              ├java
+              │  └com
+              │      └example
+              │          └domain ...(1)
+              │              ├model ...(2)
+              │              │  ├Xxx.java
+              │              │  ├Yyy.java
+              │              │  └Zzz.java
+              │              ├repository ...(3)
+              │              │  ├xxx
+              │              │  │  └XxxRepository.java
+              │              │  ├yyy
+              │              │  │  └YyyRepository.java
+              │              │  └zzz
+              │              │      ├ZzzRepository.java
+              │              │      └ZzzRepositoryImpl.java
+              │              └service ...(4)
+              │                  ├aaa
+              │                  │  ├AaaService.java
+              │                  │  └AaaServiceImpl.java
+              │                  └bbb
+              │                      ├BbbService.java
+              │                      └BbbServiceImpl.java
+              └resources
+                  └META-INF
+                      └spring
+                          ├[projectName]-codelist.xml ...(5)
+                          ├[projectName]-domain.xml ...(6)
+                          └[projectName]-infra.xml ...(7)
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - ドメイン層の構成要素を格納するパッケージ。
+    * - | (2)
+      - Domain Objectを格納するパッケージ。
+    * - | (3)
+      - リポジトリを格納するパッケージ。
+
+        エンティティごとにパッケージを作成する。
+        関連するエンティティがあれば、主となるエンティティのパッケージに、従となるエンティティ(OrderとOrderLineの関係であればOrderLine)のRepositoryも配置する。
+        また、検索条件などを保持するDTOなどが必要な場合は、このパッケージに配置する。
+
+        RepositoryImplは、インフラストラクチャ層に属するが、通常、このプロジェクトに含めても問題ない。
+        異なるデータストアを使うなど、複数の永続化先があり、実装を隠蔽したい場合は、別プロジェクト(またはパッケージ)に、RepositoryImplを実装するようにする。
+    * - | (4)
+      - サービスを格納するパッケージ。
+
+        業務(またはエンティティ)ごとに、パッケージインタフェースと実装を、同じ階層に配置する。入出力クラスが必要な場合は、このパッケージに配置する。
+    * - | (5)
+      - コードリストのBean定義を行う。
+    * - | (6)
+      - ドメイン層に関するBean定義を行う。
+    * - | (7)
+      - インフラストラクチャ層に関するBean定義を行う。
+
+|
+
+[projectName]-web
+--------------------------------------------------------------------------------
+
+[projectName]-webのプロジェクト推奨構成を、以下に示す。
+
+.. code-block:: console
+
+    [projectName]-web
+      └src
+          └main
+              ├java
+              │  └com
+              │      └example
+              │          └app ...(1)
+              │              ├abc
+              │              │  ├AbcController.java
+              │              │  ├AbcForm.java
+              │              │  └AbcHelper.java
+              │              └def
+              │                  ├DefController.java
+              │                  ├DefForm.java
+              │                  └DefOutput.java
+              ├resources
+              │  ├META-INF
+              │  │  └spring
+              │  │      ├applicationContext.xml ...(2)
+              │  │      ├application.properties ...(3)
+              │  │      ├spring-mvc.xml ...(4)
+              │  │      └spring-security.xml ...(5)
+              │  └i18n
+              │      └application-messages.properties ...(6)
+              └webapp
+                  ├resources ...(7)
+                  └WEB-INF
+                      ├views ...(8)
+                      │  ├abc
+                      │  │ ├list.jsp
+                      │  │ └createForm.jsp
+                      │  └def
+                      │     ├list.jsp
+                      │     └createForm.jsp
+                      └web.xml ...(9)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - アプリケーション層の構成要素を格納するパッケージ。
+    * - | (2)
+      - アプリケーション全体に関するBean定義を行う。
+    * - | (3)
+      - アプリケーションで使用するプロパティを定義する。
+    * - | (4)
+      - SpringMVCの設定を行うBean定義を行う。
+    * - | (5)
+      - SpringSecurityの設定を行うBean定義を行う。
+    * - | (6)
+      - 画面表示用のメッセージ(国際化対応)定義を行う。
+    * - | (7)
+      - 静的リソース(css、js、画像など)を格納する。
+    * - | (8)
+      - View(jsp)を格納する。
+    * - | (9)
+      - Servletのデプロイメント定義を行う。
+
+|
+
+[projectName]-env
+--------------------------------------------------------------------------------
+
+[projectName]-envのプロジェクト推奨構成を、以下に示す。
+
+.. code-block:: console
+
+    [projectName]-env
+      ├configs ...(1)
+      │   └[envName] ...(2)
+      │       └resources ...(3)
+      └src
+          └main
+              └resources ...(4)
+                 ├META-INF
+                 │  └spring
+                 │      ├[projectName]-env.xml ...(5)
+                 │      └[projectName]-infra.properties ...(6)
+                 ├dozer.properties
+                 ├log4jdbc.properties
+                 └logback.xml ...(7)
+
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - 全環境の環境依存ファイルを管理するためのディレクトリ。
+    * - | (2)
+      - 環境毎の環境依存ファイルを管理するためのディレクトリ。
+
+        ディレクトリ名は、環境を識別する名前を指定する。
+    * - | (3)
+      - 環境毎の設定ファイルを管理するためのディレクトリ。
+
+        サブディレクトリの構成や管理する設定ファイルは、(4)と同様。
+    * - | (4)
+      - ローカル開発環境用の設定ファイルを管理するためのディレクトリ。
+    * - | (5)
+      - ローカル開発環境用のBean定義(DataSource等)を行う。
+    * - | (6)
+      - ローカル開発環境用のプロパティを定義する。
+    * - | (7)
+      - ローカル開発環境用のログ出力定義を行う。
+
+
+.. note::
+
+    [projectName]-domainと[projectName]-webを別プロジェクトに分ける理由は、依存関係の逆転を防ぐためである。
+  
+    [projectName]-webが[projectName]-domainを使用するのは当然であるが、[projectName]-domainが[projectName]-webを参照してはいけない。
+  
+    1つのプロジェクトに[projectName]-webと[projectName]-domainの構成要素をまとめてしまうと、誤って不正な参照をしてしまうことがある。
+    プロジェクトを分けて参照順序をつけることで[projectName]-domainが[projectName]-webを参照できないようにすることを強く推奨する。
+
+.. note::
+
+    [projectName]-envを作成する理由は環境に依存する情報を外出し、環境毎に切り替えられるようにするためである。
+  
+    たとえばデフォルトではローカル開発環境用の設定をして、アプリケーションビルド時には[projectName]-envを除いてwarを作成する。
+    結合テスト用の環境やシステムテスト用の環境を別々のjarとして作成すると、そこだけ差し替えてデプロイするということが可能である。
+  
+    また使用するRDBMSが変わるようなプロジェクトの場合にも影響を最小限に抑えることができる。
+  
+    この点を考慮しない場合は、環境ごとに設定ファイルの内容を行いビルドしなおすという作業が入る。
+  
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Overview/FirstApplication.rst b/source/Overview/FirstApplication.rst
index f67a25b177..c0772d7caf 100755
--- a/source/Overview/FirstApplication.rst
+++ b/source/Overview/FirstApplication.rst
@@ -1,825 +1,825 @@
-はじめてのSpring MVCアプリケーション
---------------------------------------------------------------
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-Spring MVCの、詳細な使い方の解説に入る前に、実際にSpring MVCに触れることで、
-Spring MVCを用いたWebアプリケーションの開発に対するイメージをつかむ。
-
-検証環境
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-本節の説明では、次の環境で動作検証している。(他の環境で実施する際は、本書をベースに適宜読み替えて設定していくこと。)
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 25 75
-
-    * - 種別
-      - プロダクト
-    * - OS
-      - Windows 7
-    * - JVM
-      - `Java <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_ 1.8
-    * - IDE
-      - `Spring Tool Suite <http://spring.io/tools/sts/all>`_ 3.6.4.RELEASE (以降「STS」と呼ぶ)
-    * - Build Tool
-      - `Apache Maven <http://maven.apache.org/download.cgi>`_ 3.3.9 (以降「Maven」と呼ぶ)
-    * - Application Server
-      - `Pivotal tc Server <https://network.pivotal.io/products/pivotal-tcserver>`_ Developer Edition v3.1 (STSに同封)
-    * - Web Browser
-      - `Google Chrome <https://www.google.co.jp/chrome/browser/desktop/index.html>`_ 46.0.2490.80 m
-
-.. note::
-
-    インターネット接続するために、プロキシサーバーを介する必要がある場合、
-    以下の作業を行うため、STSのProxy設定と、 `MavenのProxy設定 <http://maven.apache.org/guides/mini/guide-proxies.html>`_\ が必要である。
-
-
-新規プロジェクト作成
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-インターネットから `mvn archetype:generate` を利用して、プロジェクトを作成する。
-
-.. code-block:: console
-
-    mvn archetype:generate -B^
-     -DarchetypeCatalog=http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases^
-     -DarchetypeGroupId=org.terasoluna.gfw.blank^
-     -DarchetypeArtifactId=terasoluna-gfw-web-blank-archetype^
-     -DarchetypeVersion=5.1.0.RELEASE^
-     -DgroupId=com.example.helloworld^
-     -DartifactId=helloworld^
-     -Dversion=1.0.0-SNAPSHOT
-
-ここではWindows上にプロジェクトの元を作成する。
-
-.. code-block:: console
-
-    C:\work>mvn archetype:generate -B^
-    More?  -DarchetypeCatalog=http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases^
-    More?  -DarchetypeGroupId=org.terasoluna.gfw.blank^
-    More?  -DarchetypeArtifactId=terasoluna-gfw-web-blank-archetype^
-    More?  -DarchetypeVersion=5.1.0.RELEASE^
-    More?  -DgroupId=com.example.helloworld^
-    More?  -DartifactId=helloworld^
-    More?  -Dversion=1.0.0-SNAPSHOT
-    [INFO] Scanning for projects...
-    [INFO]
-    [INFO] ------------------------------------------------------------------------
-    [INFO] Building Maven Stub Project (No POM) 1
-    [INFO] ------------------------------------------------------------------------
-    [INFO]
-    [INFO] >>> maven-archetype-plugin:2.2:generate (default-cli) > generate-sources @ standalone-pom >>>
-    [INFO]
-    [INFO] <<< maven-archetype-plugin:2.2:generate (default-cli) < generate-sources @ standalone-pom <<<
-    [INFO]
-    [INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom ---
-    [INFO] Generating project in Batch mode
-    [INFO] Archetype repository missing. Using the one from [org.terasoluna.gfw.blank:terasoluna-gfw-web-blank-archetype:1.0.0.RELEASE -> http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases] found in catalog http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases
-    [INFO] ----------------------------------------------------------------------------
-    [INFO] Using following parameters for creating project from Archetype: terasoluna-gfw-web-blank-archetype:5.1.0.RELEASE
-    [INFO] ----------------------------------------------------------------------------
-    [INFO] Parameter: groupId, Value: com.example.helloworld
-    [INFO] Parameter: artifactId, Value: helloworld
-    [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT
-    [INFO] Parameter: package, Value: com.example.helloworld
-    [INFO] Parameter: packageInPathFormat, Value: com/example/helloworld
-    [INFO] Parameter: package, Value: com.example.helloworld
-    [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT
-    [INFO] Parameter: groupId, Value: com.example.helloworld
-    [INFO] Parameter: artifactId, Value: helloworld
-    [INFO] project created from Archetype in dir: C:\work\helloworld
-    [INFO] ------------------------------------------------------------------------
-    [INFO] BUILD SUCCESS
-    [INFO] ------------------------------------------------------------------------
-    [INFO] Total time: 1.631 s
-    [INFO] Finished at: 2015-07-31T08:47:12+00:00
-    [INFO] Final Memory: 11M/26M
-    [INFO] ------------------------------------------------------------------------
-    C:\work>
-
-STSのメニューから、[File] -> [Import] -> [Maven] -> [Existing Maven Projects] -> [Next]を選択し、archetypeで作成したプロジェクトを選択する。
-
-.. figure:: images/NewMVCProjectImport.png
-   :alt: New MVC Project Import
-   :width: 60%
-
-Root Directoryに \ ``C:\work\helloworld``\ を設定し、Projectsにhelloworldのpom.xmlが選択された状態で、 [Finish] を押下する。
-
-.. figure:: images/NewMVCProjectCreate.png
-   :alt: New MVC Project Import
-   :width: 60%
-
-Package Explorerに、次のようなプロジェクトが生成される。
-
-.. figure:: images/HelloWorldWorkspace.png
-   :alt: workspace
-
-Spring MVCの設定方法を理解するために、生成されたSpring MVCの設定ファイル(src/main/resources/META-INF/spring/spring-mvc.xml)について、簡単に説明する。
-
-.. code-block:: xml
-    :emphasize-lines: 15-16, 27-28, 67-73
-
-    <?xml version="1.0" encoding="UTF-8"?>
-    <beans xmlns="http://www.springframework.org/schema/beans"
-        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
-        xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
-        xmlns:aop="http://www.springframework.org/schema/aop"
-        xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
-        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
-        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
-        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
-        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
-
-        <context:property-placeholder
-            location="classpath*:/META-INF/spring/*.properties" />
-
-        <!-- (1) Enables the Spring MVC @Controller programming model -->
-        <mvc:annotation-driven>
-            <mvc:argument-resolvers>
-                <bean
-                    class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
-                <bean
-                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
-            </mvc:argument-resolvers>
-        </mvc:annotation-driven>
-
-        <mvc:default-servlet-handler />
-
-        <!-- (2) -->
-        <context:component-scan base-package="com.example.helloworld.app" />
-
-        <mvc:resources mapping="/resources/**"
-            location="/resources/,classpath:META-INF/resources/"
-            cache-period="#{60 * 60}" />
-
-        <mvc:interceptors>
-            <mvc:interceptor>
-                <mvc:mapping path="/**" />
-                <mvc:exclude-mapping path="/resources/**" />
-                <mvc:exclude-mapping path="/**/*.html" />
-                <bean
-                    class="org.terasoluna.gfw.web.logging.TraceLoggingInterceptor" />
-            </mvc:interceptor>
-            <mvc:interceptor>
-                <mvc:mapping path="/**" />
-                <mvc:exclude-mapping path="/resources/**" />
-                <mvc:exclude-mapping path="/**/*.html" />
-                <bean
-                    class="org.terasoluna.gfw.web.token.transaction.TransactionTokenInterceptor" />
-            </mvc:interceptor>
-            <mvc:interceptor>
-                <mvc:mapping path="/**" />
-                <mvc:exclude-mapping path="/resources/**" />
-                <mvc:exclude-mapping path="/**/*.html" />
-                <bean class="org.terasoluna.gfw.web.codelist.CodeListInterceptor">
-                    <property name="codeListIdPattern" value="CL_.+" />
-                </bean>
-            </mvc:interceptor>
-            <!--  REMOVE THIS LINE IF YOU USE JPA
-            <mvc:interceptor>
-                <mvc:mapping path="/**" />
-                <mvc:exclude-mapping path="/resources/**" />
-                <mvc:exclude-mapping path="/**/*.html" />
-                <bean
-                    class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor" />
-            </mvc:interceptor>
-                REMOVE THIS LINE IF YOU USE JPA  -->
-        </mvc:interceptors>
-
-        <!-- (3) Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
-        <!-- Settings View Resolver. -->
-        <mvc:view-resolvers>
-            <mvc:jsp prefix="/WEB-INF/views/" />
-        </mvc:view-resolvers>
-
-        <bean id="requestDataValueProcessor"
-            class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor">
-            <constructor-arg>
-                <util:list>
-                    <bean class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor" />
-                    <bean
-                        class="org.terasoluna.gfw.web.token.transaction.TransactionTokenRequestDataValueProcessor" />
-                </util:list>
-            </constructor-arg>
-        </bean>
-
-        <!-- Setting Exception Handling. -->
-        <!-- Exception Resolver. -->
-        <bean class="org.terasoluna.gfw.web.exception.SystemExceptionResolver">
-            <property name="exceptionCodeResolver" ref="exceptionCodeResolver" />
-            <!-- Setting and Customization by project. -->
-            <property name="order" value="3" />
-            <property name="exceptionMappings">
-                <map>
-                    <entry key="ResourceNotFoundException" value="common/error/resourceNotFoundError" />
-                    <entry key="BusinessException" value="common/error/businessError" />
-                    <entry key="InvalidTransactionTokenException" value="common/error/transactionTokenError" />
-                    <entry key=".DataAccessException" value="common/error/dataAccessError" />
-                </map>
-            </property>
-            <property name="statusCodes">
-                <map>
-                    <entry key="common/error/resourceNotFoundError" value="404" />
-                    <entry key="common/error/businessError" value="409" />
-                    <entry key="common/error/transactionTokenError" value="409" />
-                    <entry key="common/error/dataAccessError" value="500" />
-                </map>
-            </property>
-            <property name="defaultErrorView" value="common/error/systemError" />
-            <property name="defaultStatusCode" value="500" />
-        </bean>
-        <!-- Setting AOP. -->
-        <bean id="handlerExceptionResolverLoggingInterceptor"
-            class="org.terasoluna.gfw.web.exception.HandlerExceptionResolverLoggingInterceptor">
-            <property name="exceptionLogger" ref="exceptionLogger" />
-        </bean>
-        <aop:config>
-            <aop:advisor advice-ref="handlerExceptionResolverLoggingInterceptor"
-                pointcut="execution(* org.springframework.web.servlet.HandlerExceptionResolver.resolveException(..))" />
-        </aop:config>
-
-    </beans>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - \ ``<mvc:annotation-driven>``\要素を定義することにより、Spring MVCのデフォルト設定が行われる。デフォルトの設定については、 Springの公式ページである `Enabling the MVC Java Config or the MVC XML Namespace <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-config-enable>`_ を参照されたい。
-   * - | (2)
-     - Spring MVCで使用するコンポーネントを探すパッケージを定義する。
-   * - | (3)
-     - JSP用の\ ``ViewResolver``\ を指定し、JSPファイルの配置場所を定義する。
-
-       .. tip::
-
-           \ ``<mvc:view-resolvers>``\ 要素はSpring Framework 4.1から追加されたXML要素である。
-           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来る。
-
-           従来通り\ ``<bean>``\ 要素を使用した場合の定義例を以下に示す。
-
-            .. code-block:: xml
-
-               <bean id="viewResolver"
-                   class="org.springframework.web.servlet.view.InternalResourceViewResolver">
-                   <property name="prefix" value="/WEB-INF/views/" />
-                   <property name="suffix" value=".jsp" />
-               </bean>
-
-|
-
-次に、Welcomeページを表示するためのController (\ ``com.example.helloworld.app.welcome.HomeController``\ ) について、簡単に説明する。
-
-.. code-block:: java
-   :emphasize-lines: 17,26,36,38
-
-    package com.example.helloworld.app.welcome;
-
-    import java.text.DateFormat;
-    import java.util.Date;
-    import java.util.Locale;
-
-    import org.slf4j.Logger;
-    import org.slf4j.LoggerFactory;
-    import org.springframework.stereotype.Controller;
-    import org.springframework.ui.Model;
-    import org.springframework.web.bind.annotation.RequestMapping;
-    import org.springframework.web.bind.annotation.RequestMethod;
-
-    /**
-     * Handles requests for the application home page.
-     */
-    @Controller // (4)
-    public class HomeController {
-
-        private static final Logger logger = LoggerFactory
-                .getLogger(HomeController.class);
-
-        /**
-         * Simply selects the home view to render by returning its name.
-         */
-        @RequestMapping(value = "/", method = {RequestMethod.GET, RequestMethod.POST}) // (5)
-        public String home(Locale locale, Model model) {
-            logger.info("Welcome home! The client locale is {}.", locale);
-
-            Date date = new Date();
-            DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
-                    DateFormat.LONG, locale);
-
-            String formattedDate = dateFormat.format(date);
-
-            model.addAttribute("serverTime", formattedDate); // (6)
-
-            return "welcome/home"; // (7)
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (4)
-     - ``@Controller`` アノテーションを付けることで、DIコンテナにより、コントローラクラスが自動で読み込まれる。前述「Spring MVCの設定ファイルの説明(2)」の設定により、component-scanの対象となっている。
-   * - | (5)
-     - HTTPメソッドがGETまたはPOSTで、Resource（もしくはRequest URL）が"/"で、アクセスする際に実行される。
-   * - | (6)
-     - Viewに渡したいオブジェクトを\ ``Model``\ に設定する。
-   * - | (7)
-     - View名を返却する。前述「Spring MVCの設定ファイルの説明(3)」の設定により、"WEB-INF/views/welcome/home.jsp"がレンダリングされる。
-
-|
-
-最後に、Welcomeページを表示するためのJSP (\ ``src/main/webapp/WEB-INF/views/welcome/home.jsp``\ ) について、簡単に説明する。
-
-.. code-block:: jsp
-    :emphasize-lines: 12
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <meta charset="utf-8">
-    <title>Home</title>
-    <link rel="stylesheet"
-        href="${pageContext.request.contextPath}/resources/app/css/styles.css">
-    </head>
-    <body>
-        <div id="wrapper">
-            <h1>Hello world!</h1>
-            <p>The time on the server is ${serverTime}.</p> <%-- (8) --%>
-        </div>
-    </body>
-    </html>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (8)
-     - 前述の「Controllerの説明(6)」でModelに設定したオブジェクト(serverTime)は、HttpServletRequestに格納される。
-       そのため、JSPで\ ``${serverTime}``\ と記述することで、Controllerで設定した値を画面に出力することができる。
-
-       **ただし、${XXX}の記述は、XSS対象になる可能性があるので、文字列を出力する場合はHTMLエスケープする必要がある。**
-
-|
-
-サーバーを起動する
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-| STSで、"helloworld"プロジェクトを右クリックして、"Run As" -> "Run On Server" -> "localhost" -> "Pivotal tc Server Developer Edition v3.0" -> "Finish"を実行し、helloworldプロジェクトを起動する。
-| ブラウザに "http://localhost:8080/helloworld/" を入力し、実行すると下記の画面が表示される。
-
-.. figure:: images/AppHelloWorldIndex.png
-   :alt: Hello World
-
-.. note::
-
-    tc Serverは内部でTomcatを利用しており、動作検証で使用したSTSでは以下の2つのバージョンを選択する事ができる。
-
-    * tomcat-8.0.15.A.RELEASE (デフォルトで利用されるバージョン)
-    * tomcat-7-0.57.A.RELEASE
-
-    利用するTomcatを切り替えたい場合は、ts Serverの「Edit Server Runtime Environment」ダイアログを開き「Version」フィールドを変更すればよい。
-    Java(JRE)のバージョンもこのダイアログから変更する事ができる。
-
-     .. figure:: images/EditServerRuntimeEnvironment.png
-        :alt: Edit Server Runtime Environment
-        :width: 80%
-
-
-|
-
-.. _first-application-create-an-echo-application:
-
-エコーアプリケーションの作成
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-続いて、簡単なアプリケーションを作成する。作成するのは、次の図のようなテキストフィールドに、名前を入力すると
-メッセージを表示する、いわゆるエコーアプリケーションである。
-
-.. figure:: images/AppEchoIndex.png
-   :alt: Form of Echo Application
-
-.. figure:: images/AppEchoHello.png
-   :alt: Output of Echo Application
-
-|
-
-フォームオブジェクトの作成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| まずは、テキストフィールドの値を受け取るための、フォームオブジェクトを作成する。
-| \ ``com.example.helloworld.app.echo``\ パッケージに\ ``EchoForm``\ クラスを作成する。プロパティを1つだけ持つ、単純なJavaBeanである。
-
-.. code-block:: java
-
-    package com.example.helloworld.app.echo;
-
-    import java.io.Serializable;
-
-    public class EchoForm implements Serializable {
-        private static final long serialVersionUID = 2557725707095364445L;
-
-        private String name;
-
-        public void setName(String name) {
-            this.name = name;
-        }
-
-        public String getName() {
-            return name;
-        }
-    }
-
-|
-
-Controllerの作成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 次に、Controllerを作成する。
-| 同じく ``com.example.helloworld.app.echo`` パッケージに、``EchoController`` クラスを作成する。
-
-.. code-block:: java
-    :emphasize-lines: 10,13,19,21,24-26
-
-    package com.example.helloworld.app.echo;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.ui.Model;
-    import org.springframework.web.bind.annotation.ModelAttribute;
-    import org.springframework.web.bind.annotation.RequestMapping;
-    import org.springframework.web.bind.annotation.RequestMethod;
-
-    @Controller
-    @RequestMapping("echo")
-    public class EchoController {
-
-        @ModelAttribute // (1)
-        public EchoForm setUpEchoForm() {
-            EchoForm form = new EchoForm();
-            return form;
-        }
-
-        @RequestMapping // (2)
-        public String index(Model model) {
-            return "echo/index"; // (3)
-        }
-
-        @RequestMapping(value = "hello", method = RequestMethod.POST) // (4)
-        public String hello(EchoForm form, Model model) {// (5)
-            model.addAttribute("name", form.getName()); // (6)
-            return "echo/hello";
-        }
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | ``@ModelAttribute`` というアノテーションを、メソッドに付加する。このアノテーションがついたメソッドの返り値は、自動でModelに追加される。
-       | Modelの属性名を、 ``@ModelAttribute`` で指定することもできるが、デフォルトでは、クラス名の先頭を小文字にした値が、属性名になる。この場合は、”echoForm”である。フォームの属性名は、次に説明する  ``form:form タグ`` の ``modelAttribute`` 属性の値に一致している必要がある。
-   * - | (2)
-     - | メソッドに付加した ``@RequestMapping`` アノテーションの ``value`` 属性に、何も指定しない場合、クラスに付加した ``@RequestMapping`` のルートに、マッピングされる。この場合、"<contextPath>/echo"にアクセスすると、 ``index`` メソッドが呼ばれる。
-       | ``method`` 属性に何もしない場合は、任意のHTTPメソッドでマッピングされる。
-   * - | (3)
-     - | View名で"echo/index"を返すので、ViewResolverにより、 "WEB-INF/views/echo/index.jsp"がレンダリングされる。
-   * - | (4)
-     - | メソッドに付加した ``@RequestMapping`` アノテーションの\ ``value``\ 属性に"hello"を、\ ``method``\ 属性に\ ``RequestMethod.POST``\ を指定しているので、この場合、"<contextPath>/echo/hello"にPOSTメソッドを使用してアクセスすると ``hello`` メソッドが呼ばれる。
-   * - | (5)
-     - | 引数に、EchoFormには(1)によりModelに追加されたEchoFormオブジェクトが渡される。
-   * - | (6)
-     - | フォームで入力された ``name`` を、Viewにそのまま渡す。
-
-.. note::
-
-    \ ``@RequestMapping``\ アノテーションの\ ``method``\ 属性に指定する値は、
-    クライアントから送信されたデータの扱い方によって変えるのが一般的である。
-
-    * データをサーバに保存する場合(更新系の処理の場合)は、POSTメソッド。
-    * データをサーバに保存しない場合(参照系の処理の場合)は、GETメソッド又は未指定(任意のメソッド)。
-
-    エコーアプリケーションでは、
-
-    * \ ``index``\ メソッドはデータをサーバに保存しない処理なので未指定(任意のメソッド)
-    * \ ``hello``\ メソッドはデータを\ ``Model``\ オブジェクトに保存する処理なのでPOSTメソッド
-
-    を指定している。
-
-|
-
-JSPの作成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-最後に、入力画面と、出力画面のJSPを作成する。それぞれのファイルパスは、View名に合わせて、次のようになる。
-
-入力画面 (src/main/webapp/WEB-INF/views/echo/index.jsp) を作成する。
-
-.. code-block:: jsp
-    :emphasize-lines: 7-8
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <title>Echo Application</title>
-    </head>
-    <body>
-      <%-- (1) --%>
-      <form:form modelAttribute="echoForm" action="${pageContext.request.contextPath}/echo/hello">
-        <form:label path="name">Input Your Name:</form:label>
-        <form:input path="name" />
-        <input type="submit" />
-      </form:form>
-    </body>
-    </html>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | タグライブラリを利用し、HTMLフォームを構築している。 ``modelAttribute`` 属性に、Controllerで用意したフォームオブジェクトの名前を指定する。
-       | タグライブラリは `こちら <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib-formtag>`_\を参照されたい。
-
-.. note::
-
-    \ ``<form:form>``\ タグの\ ``method``\ 属性を省略した場合は、POSTメソッドが使用される。
-
-出力されるHTMLは、
-
-.. code-block:: html
-    :emphasize-lines: 7
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <title>Echo Application</title>
-    </head>
-    <body>
-      <form id="echoForm" action="/helloworld/echo/hello" method="post">
-        <label for="name">Input Your Name:</label>
-        <input id="name" name="name" type="text" value=""/>
-        <input type="submit" />
-      <input type="hidden" name="_csrf" value="43595f38-3edd-4c08-843b-3c31a00d2b15" />
-    </form>
-    </body>
-    </html>
-
-となる。
-
-|
-
-出力画面 (src/main/webapp/WEB-INF/views/echo/hello.jsp) を作成する。
-
-.. code-block:: jsp
-    :emphasize-lines: 8
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <title>Echo Application</title>
-    </head>
-    <body>
-      <p>
-        Hello <c:out value="${name}" /> <%-- (2) --%>
-      </p>
-    </body>
-    </html>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (2)
-     - | Controllerから渡された"name"を出力する。 ``c:out`` タグにより、XSS対策を行っている。
-
-.. note::
-
-    ここではXSS対策を標準タグの ``c:out`` で実現したが、より容易に使用できる ``f:h()`` 関数を共通ライブラリで用意している。
-    詳細は、  :doc:`../Security/XSS` を参照されたい。
-
-|
-
-| これでエコーアプリケーションの実装は完了である。
-| サーバーを起動し、 "http://localhost:8080/helloworld/echo"にアクセスするとフォームが表示される。
-
-|
-
-入力チェックの実装
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ここまでのアプリケーションでは、入力チェックを行っていない。
-Spring MVCでは、 `Bean Validation <http://jcp.org/en/jsr/detail?id=349>`_\ をサポートしており、アノテーションベースな入力チェックを、簡単に
-実装することができる。例として、エコーアプリケーションで名前の入力チェックを行う。
-
-
-\ ``EchoForm``\ の\ ``name``\ フィールドに、入力チェックルールを指定するアノーテションを付与する。
-
-.. code-block:: java
-    :emphasize-lines: 5,6,11,12
-
-    package com.example.helloworld.app.echo;
-
-    import java.io.Serializable;
-
-    import javax.validation.constraints.NotNull;
-    import javax.validation.constraints.Size;
-
-    public class EchoForm implements Serializable {
-        private static final long serialVersionUID = 2557725707095364445L;
-
-        @NotNull // (1)
-        @Size(min = 1, max = 5) // (2)
-        private String name;
-
-        public void setName(String name) {
-            this.name = name;
-        }
-
-        public String getName() {
-            return name;
-        }
-    }
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | ``@NotNull`` アノテーションをつけることで、HTTPリクエスト中に ``name`` パラメータがあることを確認する。
-   * - | (2)
-     - | ``@Size(min = 1, max = 5)`` をつけることで、``name`` のサイズが、1以上5以下であることを確認する。
-
-|
-
-入力チェックが実行されるように修正し、入力チェックでエラーが発生した場合の処理を実装する。
-
-.. code-block:: java
-    :emphasize-lines: 5,6,27-30
-
-    package com.example.helloworld.app.echo;
-
-    import org.springframework.stereotype.Controller;
-    import org.springframework.ui.Model;
-    import org.springframework.validation.BindingResult;
-    import org.springframework.validation.annotation.Validated;
-    import org.springframework.web.bind.annotation.ModelAttribute;
-    import org.springframework.web.bind.annotation.RequestMapping;
-    import org.springframework.web.bind.annotation.RequestMethod;
-
-    @Controller
-    @RequestMapping("echo")
-    public class EchoController {
-
-        @ModelAttribute
-        public EchoForm setUpEchoForm() {
-            EchoForm form = new EchoForm();
-            return form;
-        }
-
-        @RequestMapping
-        public String index(Model model) {
-            return "echo/index";
-        }
-
-        @RequestMapping(value = "hello", method = RequestMethod.POST)
-        public String hello(@Validated EchoForm form, BindingResult result, Model model) { // (1)
-            if (result.hasErrors()) { // (2)
-                return "echo/index";
-            }
-            model.addAttribute("name", form.getName());
-            return "echo/hello";
-        }
-    }
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | コントローラー側には、Validation対象の引数に ``@Validated`` アノテーションを付加し、 ``BindingResult`` オブジェクトを引数に追加する。
-       | Bean Validationによる入力チェックは、自動で行われる。結果は、 ``BindingResult`` オブジェクトに渡される。
-   * - | (2)
-     - | ``hasErrors`` メソッドを実行して、エラーがあるかどうかを確認する。入力エラーがある場合は、入力画面を表示するためのView名を返却する。
-
-|
-
-入力画面 (src/main/webapp/WEB-INF/views/echo/index.jsp) に、入力エラーのメッセージを表示するための実装を追加する。
-
-
-.. code-block:: jsp
-    :emphasize-lines: 10
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <title>Echo Application</title>
-    </head>
-    <body>
-      <form:form modelAttribute="echoForm" action="${pageContext.request.contextPath}/echo/hello">
-        <form:label path="name">Input Your Name:</form:label>
-        <form:input path="name" />
-        <form:errors path="name" cssStyle="color:red" /><%-- (1) --%>
-        <input type="submit" />
-      </form:form>
-    </body>
-    </html>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 入力画面には、エラーがあった場合に、エラーメッセージを表示するため、 ``form:errors`` タグを追加する。
-
-|
-
-| 以上で、入力チェックの実装は完了である。
-| 実際に、次のような場合、エラーメッセージが表示される。
-
-* 名前を空にして送信した場合
-* 5文字より大きいサイズで送信した場合
-
-.. figure:: images/AppValidationEmpty.png
-   :alt: Validation Error (name is empty)
-
-.. figure:: images/AppValidationSizeOver.png
-   :alt: Validation Error (name's size is over 5)
-
-
-出力されるHTMLは、
-
-.. code-block:: html
-    :emphasize-lines: 10
-
-    <!DOCTYPE html>
-    <html>
-    <head>
-    <title>Echo Application</title>
-    </head>
-    <body>
-      <form id="echoForm" action="/helloworld/echo/hello" method="post">
-        <label for="name">Input Your Name:</label>
-        <input id="name" name="name" type="text" value=""/>
-        <span id="name.errors" style="color:red">size must be between 1 and 5</span>
-        <input type="submit" />
-      <input type="hidden" name="_csrf" value="6e94a78d-4a2c-4a41-a514-0a60f0dbedaf" />
-    </form>
-    </body>
-    </html>
-
-となる。
-
-|
-
-まとめ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-この章では、
-
-#. \ ``mvn archetype:generate``\を利用したブランクプロジェクトの作成方法
-#. SpringMVCの基本的な設定方法
-#. 最も簡易な、画面遷移方法
-#. 画面間での値の引き渡し方法
-#. シンプルな入力チェック方法
-
-を学んだ。
-
-上記の内容が理解できていない場合は、もう一度、本節を読み、環境構築から始めて、進めていくことで理解が深まる。
-
-.. raw:: latex
-
-   \newpage
-
+はじめてのSpring MVCアプリケーション
+--------------------------------------------------------------
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+Spring MVCの、詳細な使い方の解説に入る前に、実際にSpring MVCに触れることで、
+Spring MVCを用いたWebアプリケーションの開発に対するイメージをつかむ。
+
+検証環境
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+本節の説明では、次の環境で動作検証している。(他の環境で実施する際は、本書をベースに適宜読み替えて設定していくこと。)
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 種別
+      - プロダクト
+    * - OS
+      - Windows 7
+    * - JVM
+      - `Java <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_ 1.8
+    * - IDE
+      - `Spring Tool Suite <http://spring.io/tools/sts/all>`_ 3.6.4.RELEASE (以降「STS」と呼ぶ)
+    * - Build Tool
+      - `Apache Maven <http://maven.apache.org/download.cgi>`_ 3.3.9 (以降「Maven」と呼ぶ)
+    * - Application Server
+      - `Pivotal tc Server <https://network.pivotal.io/products/pivotal-tcserver>`_ Developer Edition v3.1 (STSに同封)
+    * - Web Browser
+      - `Google Chrome <https://www.google.co.jp/chrome/browser/desktop/index.html>`_ 46.0.2490.80 m
+
+.. note::
+
+    インターネット接続するために、プロキシサーバーを介する必要がある場合、
+    以下の作業を行うため、STSのProxy設定と、 `MavenのProxy設定 <http://maven.apache.org/guides/mini/guide-proxies.html>`_\ が必要である。
+
+
+新規プロジェクト作成
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+インターネットから `mvn archetype:generate` を利用して、プロジェクトを作成する。
+
+.. code-block:: console
+
+    mvn archetype:generate -B^
+     -DarchetypeCatalog=http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases^
+     -DarchetypeGroupId=org.terasoluna.gfw.blank^
+     -DarchetypeArtifactId=terasoluna-gfw-web-blank-archetype^
+     -DarchetypeVersion=5.1.0.RELEASE^
+     -DgroupId=com.example.helloworld^
+     -DartifactId=helloworld^
+     -Dversion=1.0.0-SNAPSHOT
+
+ここではWindows上にプロジェクトの元を作成する。
+
+.. code-block:: console
+
+    C:\work>mvn archetype:generate -B^
+    More?  -DarchetypeCatalog=http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases^
+    More?  -DarchetypeGroupId=org.terasoluna.gfw.blank^
+    More?  -DarchetypeArtifactId=terasoluna-gfw-web-blank-archetype^
+    More?  -DarchetypeVersion=5.1.0.RELEASE^
+    More?  -DgroupId=com.example.helloworld^
+    More?  -DartifactId=helloworld^
+    More?  -Dversion=1.0.0-SNAPSHOT
+    [INFO] Scanning for projects...
+    [INFO]
+    [INFO] ------------------------------------------------------------------------
+    [INFO] Building Maven Stub Project (No POM) 1
+    [INFO] ------------------------------------------------------------------------
+    [INFO]
+    [INFO] >>> maven-archetype-plugin:2.2:generate (default-cli) > generate-sources @ standalone-pom >>>
+    [INFO]
+    [INFO] <<< maven-archetype-plugin:2.2:generate (default-cli) < generate-sources @ standalone-pom <<<
+    [INFO]
+    [INFO] --- maven-archetype-plugin:2.2:generate (default-cli) @ standalone-pom ---
+    [INFO] Generating project in Batch mode
+    [INFO] Archetype repository missing. Using the one from [org.terasoluna.gfw.blank:terasoluna-gfw-web-blank-archetype:1.0.0.RELEASE -> http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases] found in catalog http://repo.terasoluna.org/nexus/content/repositories/terasoluna-gfw-releases
+    [INFO] ----------------------------------------------------------------------------
+    [INFO] Using following parameters for creating project from Archetype: terasoluna-gfw-web-blank-archetype:5.1.0.RELEASE
+    [INFO] ----------------------------------------------------------------------------
+    [INFO] Parameter: groupId, Value: com.example.helloworld
+    [INFO] Parameter: artifactId, Value: helloworld
+    [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT
+    [INFO] Parameter: package, Value: com.example.helloworld
+    [INFO] Parameter: packageInPathFormat, Value: com/example/helloworld
+    [INFO] Parameter: package, Value: com.example.helloworld
+    [INFO] Parameter: version, Value: 1.0.0-SNAPSHOT
+    [INFO] Parameter: groupId, Value: com.example.helloworld
+    [INFO] Parameter: artifactId, Value: helloworld
+    [INFO] project created from Archetype in dir: C:\work\helloworld
+    [INFO] ------------------------------------------------------------------------
+    [INFO] BUILD SUCCESS
+    [INFO] ------------------------------------------------------------------------
+    [INFO] Total time: 1.631 s
+    [INFO] Finished at: 2015-07-31T08:47:12+00:00
+    [INFO] Final Memory: 11M/26M
+    [INFO] ------------------------------------------------------------------------
+    C:\work>
+
+STSのメニューから、[File] -> [Import] -> [Maven] -> [Existing Maven Projects] -> [Next]を選択し、archetypeで作成したプロジェクトを選択する。
+
+.. figure:: images/NewMVCProjectImport.png
+   :alt: New MVC Project Import
+   :width: 60%
+
+Root Directoryに \ ``C:\work\helloworld``\ を設定し、Projectsにhelloworldのpom.xmlが選択された状態で、 [Finish] を押下する。
+
+.. figure:: images/NewMVCProjectCreate.png
+   :alt: New MVC Project Import
+   :width: 60%
+
+Package Explorerに、次のようなプロジェクトが生成される。
+
+.. figure:: images/HelloWorldWorkspace.png
+   :alt: workspace
+
+Spring MVCの設定方法を理解するために、生成されたSpring MVCの設定ファイル(src/main/resources/META-INF/spring/spring-mvc.xml)について、簡単に説明する。
+
+.. code-block:: xml
+    :emphasize-lines: 15-16, 27-28, 67-73
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <beans xmlns="http://www.springframework.org/schema/beans"
+        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+        xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
+        xmlns:aop="http://www.springframework.org/schema/aop"
+        xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
+        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
+        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
+        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
+
+        <context:property-placeholder
+            location="classpath*:/META-INF/spring/*.properties" />
+
+        <!-- (1) Enables the Spring MVC @Controller programming model -->
+        <mvc:annotation-driven>
+            <mvc:argument-resolvers>
+                <bean
+                    class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
+                <bean
+                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
+            </mvc:argument-resolvers>
+        </mvc:annotation-driven>
+
+        <mvc:default-servlet-handler />
+
+        <!-- (2) -->
+        <context:component-scan base-package="com.example.helloworld.app" />
+
+        <mvc:resources mapping="/resources/**"
+            location="/resources/,classpath:META-INF/resources/"
+            cache-period="#{60 * 60}" />
+
+        <mvc:interceptors>
+            <mvc:interceptor>
+                <mvc:mapping path="/**" />
+                <mvc:exclude-mapping path="/resources/**" />
+                <mvc:exclude-mapping path="/**/*.html" />
+                <bean
+                    class="org.terasoluna.gfw.web.logging.TraceLoggingInterceptor" />
+            </mvc:interceptor>
+            <mvc:interceptor>
+                <mvc:mapping path="/**" />
+                <mvc:exclude-mapping path="/resources/**" />
+                <mvc:exclude-mapping path="/**/*.html" />
+                <bean
+                    class="org.terasoluna.gfw.web.token.transaction.TransactionTokenInterceptor" />
+            </mvc:interceptor>
+            <mvc:interceptor>
+                <mvc:mapping path="/**" />
+                <mvc:exclude-mapping path="/resources/**" />
+                <mvc:exclude-mapping path="/**/*.html" />
+                <bean class="org.terasoluna.gfw.web.codelist.CodeListInterceptor">
+                    <property name="codeListIdPattern" value="CL_.+" />
+                </bean>
+            </mvc:interceptor>
+            <!--  REMOVE THIS LINE IF YOU USE JPA
+            <mvc:interceptor>
+                <mvc:mapping path="/**" />
+                <mvc:exclude-mapping path="/resources/**" />
+                <mvc:exclude-mapping path="/**/*.html" />
+                <bean
+                    class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor" />
+            </mvc:interceptor>
+                REMOVE THIS LINE IF YOU USE JPA  -->
+        </mvc:interceptors>
+
+        <!-- (3) Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
+        <!-- Settings View Resolver. -->
+        <mvc:view-resolvers>
+            <mvc:jsp prefix="/WEB-INF/views/" />
+        </mvc:view-resolvers>
+
+        <bean id="requestDataValueProcessor"
+            class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor">
+            <constructor-arg>
+                <util:list>
+                    <bean class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor" />
+                    <bean
+                        class="org.terasoluna.gfw.web.token.transaction.TransactionTokenRequestDataValueProcessor" />
+                </util:list>
+            </constructor-arg>
+        </bean>
+
+        <!-- Setting Exception Handling. -->
+        <!-- Exception Resolver. -->
+        <bean class="org.terasoluna.gfw.web.exception.SystemExceptionResolver">
+            <property name="exceptionCodeResolver" ref="exceptionCodeResolver" />
+            <!-- Setting and Customization by project. -->
+            <property name="order" value="3" />
+            <property name="exceptionMappings">
+                <map>
+                    <entry key="ResourceNotFoundException" value="common/error/resourceNotFoundError" />
+                    <entry key="BusinessException" value="common/error/businessError" />
+                    <entry key="InvalidTransactionTokenException" value="common/error/transactionTokenError" />
+                    <entry key=".DataAccessException" value="common/error/dataAccessError" />
+                </map>
+            </property>
+            <property name="statusCodes">
+                <map>
+                    <entry key="common/error/resourceNotFoundError" value="404" />
+                    <entry key="common/error/businessError" value="409" />
+                    <entry key="common/error/transactionTokenError" value="409" />
+                    <entry key="common/error/dataAccessError" value="500" />
+                </map>
+            </property>
+            <property name="defaultErrorView" value="common/error/systemError" />
+            <property name="defaultStatusCode" value="500" />
+        </bean>
+        <!-- Setting AOP. -->
+        <bean id="handlerExceptionResolverLoggingInterceptor"
+            class="org.terasoluna.gfw.web.exception.HandlerExceptionResolverLoggingInterceptor">
+            <property name="exceptionLogger" ref="exceptionLogger" />
+        </bean>
+        <aop:config>
+            <aop:advisor advice-ref="handlerExceptionResolverLoggingInterceptor"
+                pointcut="execution(* org.springframework.web.servlet.HandlerExceptionResolver.resolveException(..))" />
+        </aop:config>
+
+    </beans>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - \ ``<mvc:annotation-driven>``\要素を定義することにより、Spring MVCのデフォルト設定が行われる。デフォルトの設定については、 Springの公式ページである `Enabling the MVC Java Config or the MVC XML Namespace <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-config-enable>`_ を参照されたい。
+   * - | (2)
+     - Spring MVCで使用するコンポーネントを探すパッケージを定義する。
+   * - | (3)
+     - JSP用の\ ``ViewResolver``\ を指定し、JSPファイルの配置場所を定義する。
+
+       .. tip::
+
+           \ ``<mvc:view-resolvers>``\ 要素はSpring Framework 4.1から追加されたXML要素である。
+           \ ``<mvc:view-resolvers>``\ 要素を使用すると、\ ``ViewResolver``\ をシンプルに定義することが出来る。
+
+           従来通り\ ``<bean>``\ 要素を使用した場合の定義例を以下に示す。
+
+            .. code-block:: xml
+
+               <bean id="viewResolver"
+                   class="org.springframework.web.servlet.view.InternalResourceViewResolver">
+                   <property name="prefix" value="/WEB-INF/views/" />
+                   <property name="suffix" value=".jsp" />
+               </bean>
+
+|
+
+次に、Welcomeページを表示するためのController (\ ``com.example.helloworld.app.welcome.HomeController``\ ) について、簡単に説明する。
+
+.. code-block:: java
+   :emphasize-lines: 17,26,36,38
+
+    package com.example.helloworld.app.welcome;
+
+    import java.text.DateFormat;
+    import java.util.Date;
+    import java.util.Locale;
+
+    import org.slf4j.Logger;
+    import org.slf4j.LoggerFactory;
+    import org.springframework.stereotype.Controller;
+    import org.springframework.ui.Model;
+    import org.springframework.web.bind.annotation.RequestMapping;
+    import org.springframework.web.bind.annotation.RequestMethod;
+
+    /**
+     * Handles requests for the application home page.
+     */
+    @Controller // (4)
+    public class HomeController {
+
+        private static final Logger logger = LoggerFactory
+                .getLogger(HomeController.class);
+
+        /**
+         * Simply selects the home view to render by returning its name.
+         */
+        @RequestMapping(value = "/", method = {RequestMethod.GET, RequestMethod.POST}) // (5)
+        public String home(Locale locale, Model model) {
+            logger.info("Welcome home! The client locale is {}.", locale);
+
+            Date date = new Date();
+            DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
+                    DateFormat.LONG, locale);
+
+            String formattedDate = dateFormat.format(date);
+
+            model.addAttribute("serverTime", formattedDate); // (6)
+
+            return "welcome/home"; // (7)
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (4)
+     - ``@Controller`` アノテーションを付けることで、DIコンテナにより、コントローラクラスが自動で読み込まれる。前述「Spring MVCの設定ファイルの説明(2)」の設定により、component-scanの対象となっている。
+   * - | (5)
+     - HTTPメソッドがGETまたはPOSTで、Resource（もしくはRequest URL）が"/"で、アクセスする際に実行される。
+   * - | (6)
+     - Viewに渡したいオブジェクトを\ ``Model``\ に設定する。
+   * - | (7)
+     - View名を返却する。前述「Spring MVCの設定ファイルの説明(3)」の設定により、"WEB-INF/views/welcome/home.jsp"がレンダリングされる。
+
+|
+
+最後に、Welcomeページを表示するためのJSP (\ ``src/main/webapp/WEB-INF/views/welcome/home.jsp``\ ) について、簡単に説明する。
+
+.. code-block:: jsp
+    :emphasize-lines: 12
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <meta charset="utf-8">
+    <title>Home</title>
+    <link rel="stylesheet"
+        href="${pageContext.request.contextPath}/resources/app/css/styles.css">
+    </head>
+    <body>
+        <div id="wrapper">
+            <h1>Hello world!</h1>
+            <p>The time on the server is ${serverTime}.</p> <%-- (8) --%>
+        </div>
+    </body>
+    </html>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (8)
+     - 前述の「Controllerの説明(6)」でModelに設定したオブジェクト(serverTime)は、HttpServletRequestに格納される。
+       そのため、JSPで\ ``${serverTime}``\ と記述することで、Controllerで設定した値を画面に出力することができる。
+
+       **ただし、${XXX}の記述は、XSS対象になる可能性があるので、文字列を出力する場合はHTMLエスケープする必要がある。**
+
+|
+
+サーバーを起動する
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+| STSで、"helloworld"プロジェクトを右クリックして、"Run As" -> "Run On Server" -> "localhost" -> "Pivotal tc Server Developer Edition v3.0" -> "Finish"を実行し、helloworldプロジェクトを起動する。
+| ブラウザに "http://localhost:8080/helloworld/" を入力し、実行すると下記の画面が表示される。
+
+.. figure:: images/AppHelloWorldIndex.png
+   :alt: Hello World
+
+.. note::
+
+    tc Serverは内部でTomcatを利用しており、動作検証で使用したSTSでは以下の2つのバージョンを選択する事ができる。
+
+    * tomcat-8.0.15.A.RELEASE (デフォルトで利用されるバージョン)
+    * tomcat-7-0.57.A.RELEASE
+
+    利用するTomcatを切り替えたい場合は、ts Serverの「Edit Server Runtime Environment」ダイアログを開き「Version」フィールドを変更すればよい。
+    Java(JRE)のバージョンもこのダイアログから変更する事ができる。
+
+     .. figure:: images/EditServerRuntimeEnvironment.png
+        :alt: Edit Server Runtime Environment
+        :width: 80%
+
+
+|
+
+.. _first-application-create-an-echo-application:
+
+エコーアプリケーションの作成
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+続いて、簡単なアプリケーションを作成する。作成するのは、次の図のようなテキストフィールドに、名前を入力すると
+メッセージを表示する、いわゆるエコーアプリケーションである。
+
+.. figure:: images/AppEchoIndex.png
+   :alt: Form of Echo Application
+
+.. figure:: images/AppEchoHello.png
+   :alt: Output of Echo Application
+
+|
+
+フォームオブジェクトの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| まずは、テキストフィールドの値を受け取るための、フォームオブジェクトを作成する。
+| \ ``com.example.helloworld.app.echo``\ パッケージに\ ``EchoForm``\ クラスを作成する。プロパティを1つだけ持つ、単純なJavaBeanである。
+
+.. code-block:: java
+
+    package com.example.helloworld.app.echo;
+
+    import java.io.Serializable;
+
+    public class EchoForm implements Serializable {
+        private static final long serialVersionUID = 2557725707095364445L;
+
+        private String name;
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public String getName() {
+            return name;
+        }
+    }
+
+|
+
+Controllerの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| 次に、Controllerを作成する。
+| 同じく ``com.example.helloworld.app.echo`` パッケージに、``EchoController`` クラスを作成する。
+
+.. code-block:: java
+    :emphasize-lines: 10,13,19,21,24-26
+
+    package com.example.helloworld.app.echo;
+
+    import org.springframework.stereotype.Controller;
+    import org.springframework.ui.Model;
+    import org.springframework.web.bind.annotation.ModelAttribute;
+    import org.springframework.web.bind.annotation.RequestMapping;
+    import org.springframework.web.bind.annotation.RequestMethod;
+
+    @Controller
+    @RequestMapping("echo")
+    public class EchoController {
+
+        @ModelAttribute // (1)
+        public EchoForm setUpEchoForm() {
+            EchoForm form = new EchoForm();
+            return form;
+        }
+
+        @RequestMapping // (2)
+        public String index(Model model) {
+            return "echo/index"; // (3)
+        }
+
+        @RequestMapping(value = "hello", method = RequestMethod.POST) // (4)
+        public String hello(EchoForm form, Model model) {// (5)
+            model.addAttribute("name", form.getName()); // (6)
+            return "echo/hello";
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | ``@ModelAttribute`` というアノテーションを、メソッドに付加する。このアノテーションがついたメソッドの返り値は、自動でModelに追加される。
+       | Modelの属性名を、 ``@ModelAttribute`` で指定することもできるが、デフォルトでは、クラス名の先頭を小文字にした値が、属性名になる。この場合は、”echoForm”である。フォームの属性名は、次に説明する  ``form:form タグ`` の ``modelAttribute`` 属性の値に一致している必要がある。
+   * - | (2)
+     - | メソッドに付加した ``@RequestMapping`` アノテーションの ``value`` 属性に、何も指定しない場合、クラスに付加した ``@RequestMapping`` のルートに、マッピングされる。この場合、"<contextPath>/echo"にアクセスすると、 ``index`` メソッドが呼ばれる。
+       | ``method`` 属性に何もしない場合は、任意のHTTPメソッドでマッピングされる。
+   * - | (3)
+     - | View名で"echo/index"を返すので、ViewResolverにより、 "WEB-INF/views/echo/index.jsp"がレンダリングされる。
+   * - | (4)
+     - | メソッドに付加した ``@RequestMapping`` アノテーションの\ ``value``\ 属性に"hello"を、\ ``method``\ 属性に\ ``RequestMethod.POST``\ を指定しているので、この場合、"<contextPath>/echo/hello"にPOSTメソッドを使用してアクセスすると ``hello`` メソッドが呼ばれる。
+   * - | (5)
+     - | 引数に、EchoFormには(1)によりModelに追加されたEchoFormオブジェクトが渡される。
+   * - | (6)
+     - | フォームで入力された ``name`` を、Viewにそのまま渡す。
+
+.. note::
+
+    \ ``@RequestMapping``\ アノテーションの\ ``method``\ 属性に指定する値は、
+    クライアントから送信されたデータの扱い方によって変えるのが一般的である。
+
+    * データをサーバに保存する場合(更新系の処理の場合)は、POSTメソッド。
+    * データをサーバに保存しない場合(参照系の処理の場合)は、GETメソッド又は未指定(任意のメソッド)。
+
+    エコーアプリケーションでは、
+
+    * \ ``index``\ メソッドはデータをサーバに保存しない処理なので未指定(任意のメソッド)
+    * \ ``hello``\ メソッドはデータを\ ``Model``\ オブジェクトに保存する処理なのでPOSTメソッド
+
+    を指定している。
+
+|
+
+JSPの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+最後に、入力画面と、出力画面のJSPを作成する。それぞれのファイルパスは、View名に合わせて、次のようになる。
+
+入力画面 (src/main/webapp/WEB-INF/views/echo/index.jsp) を作成する。
+
+.. code-block:: jsp
+    :emphasize-lines: 7-8
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <title>Echo Application</title>
+    </head>
+    <body>
+      <%-- (1) --%>
+      <form:form modelAttribute="echoForm" action="${pageContext.request.contextPath}/echo/hello">
+        <form:label path="name">Input Your Name:</form:label>
+        <form:input path="name" />
+        <input type="submit" />
+      </form:form>
+    </body>
+    </html>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | タグライブラリを利用し、HTMLフォームを構築している。 ``modelAttribute`` 属性に、Controllerで用意したフォームオブジェクトの名前を指定する。
+       | タグライブラリは `こちら <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/view.html#view-jsp-formtaglib-formtag>`_\を参照されたい。
+
+.. note::
+
+    \ ``<form:form>``\ タグの\ ``method``\ 属性を省略した場合は、POSTメソッドが使用される。
+
+出力されるHTMLは、
+
+.. code-block:: html
+    :emphasize-lines: 7
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <title>Echo Application</title>
+    </head>
+    <body>
+      <form id="echoForm" action="/helloworld/echo/hello" method="post">
+        <label for="name">Input Your Name:</label>
+        <input id="name" name="name" type="text" value=""/>
+        <input type="submit" />
+      <input type="hidden" name="_csrf" value="43595f38-3edd-4c08-843b-3c31a00d2b15" />
+    </form>
+    </body>
+    </html>
+
+となる。
+
+|
+
+出力画面 (src/main/webapp/WEB-INF/views/echo/hello.jsp) を作成する。
+
+.. code-block:: jsp
+    :emphasize-lines: 8
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <title>Echo Application</title>
+    </head>
+    <body>
+      <p>
+        Hello <c:out value="${name}" /> <%-- (2) --%>
+      </p>
+    </body>
+    </html>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (2)
+     - | Controllerから渡された"name"を出力する。 ``c:out`` タグにより、XSS対策を行っている。
+
+.. note::
+
+    ここではXSS対策を標準タグの ``c:out`` で実現したが、より容易に使用できる ``f:h()`` 関数を共通ライブラリで用意している。
+    詳細は、  :doc:`../Security/XSS` を参照されたい。
+
+|
+
+| これでエコーアプリケーションの実装は完了である。
+| サーバーを起動し、 "http://localhost:8080/helloworld/echo"にアクセスするとフォームが表示される。
+
+|
+
+入力チェックの実装
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ここまでのアプリケーションでは、入力チェックを行っていない。
+Spring MVCでは、 `Bean Validation <http://jcp.org/en/jsr/detail?id=349>`_\ をサポートしており、アノテーションベースな入力チェックを、簡単に
+実装することができる。例として、エコーアプリケーションで名前の入力チェックを行う。
+
+
+\ ``EchoForm``\ の\ ``name``\ フィールドに、入力チェックルールを指定するアノーテションを付与する。
+
+.. code-block:: java
+    :emphasize-lines: 5,6,11,12
+
+    package com.example.helloworld.app.echo;
+
+    import java.io.Serializable;
+
+    import javax.validation.constraints.NotNull;
+    import javax.validation.constraints.Size;
+
+    public class EchoForm implements Serializable {
+        private static final long serialVersionUID = 2557725707095364445L;
+
+        @NotNull // (1)
+        @Size(min = 1, max = 5) // (2)
+        private String name;
+
+        public void setName(String name) {
+            this.name = name;
+        }
+
+        public String getName() {
+            return name;
+        }
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | ``@NotNull`` アノテーションをつけることで、HTTPリクエスト中に ``name`` パラメータがあることを確認する。
+   * - | (2)
+     - | ``@Size(min = 1, max = 5)`` をつけることで、``name`` のサイズが、1以上5以下であることを確認する。
+
+|
+
+入力チェックが実行されるように修正し、入力チェックでエラーが発生した場合の処理を実装する。
+
+.. code-block:: java
+    :emphasize-lines: 5,6,27-30
+
+    package com.example.helloworld.app.echo;
+
+    import org.springframework.stereotype.Controller;
+    import org.springframework.ui.Model;
+    import org.springframework.validation.BindingResult;
+    import org.springframework.validation.annotation.Validated;
+    import org.springframework.web.bind.annotation.ModelAttribute;
+    import org.springframework.web.bind.annotation.RequestMapping;
+    import org.springframework.web.bind.annotation.RequestMethod;
+
+    @Controller
+    @RequestMapping("echo")
+    public class EchoController {
+
+        @ModelAttribute
+        public EchoForm setUpEchoForm() {
+            EchoForm form = new EchoForm();
+            return form;
+        }
+
+        @RequestMapping
+        public String index(Model model) {
+            return "echo/index";
+        }
+
+        @RequestMapping(value = "hello", method = RequestMethod.POST)
+        public String hello(@Validated EchoForm form, BindingResult result, Model model) { // (1)
+            if (result.hasErrors()) { // (2)
+                return "echo/index";
+            }
+            model.addAttribute("name", form.getName());
+            return "echo/hello";
+        }
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | コントローラー側には、Validation対象の引数に ``@Validated`` アノテーションを付加し、 ``BindingResult`` オブジェクトを引数に追加する。
+       | Bean Validationによる入力チェックは、自動で行われる。結果は、 ``BindingResult`` オブジェクトに渡される。
+   * - | (2)
+     - | ``hasErrors`` メソッドを実行して、エラーがあるかどうかを確認する。入力エラーがある場合は、入力画面を表示するためのView名を返却する。
+
+|
+
+入力画面 (src/main/webapp/WEB-INF/views/echo/index.jsp) に、入力エラーのメッセージを表示するための実装を追加する。
+
+
+.. code-block:: jsp
+    :emphasize-lines: 10
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <title>Echo Application</title>
+    </head>
+    <body>
+      <form:form modelAttribute="echoForm" action="${pageContext.request.contextPath}/echo/hello">
+        <form:label path="name">Input Your Name:</form:label>
+        <form:input path="name" />
+        <form:errors path="name" cssStyle="color:red" /><%-- (1) --%>
+        <input type="submit" />
+      </form:form>
+    </body>
+    </html>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 入力画面には、エラーがあった場合に、エラーメッセージを表示するため、 ``form:errors`` タグを追加する。
+
+|
+
+| 以上で、入力チェックの実装は完了である。
+| 実際に、次のような場合、エラーメッセージが表示される。
+
+* 名前を空にして送信した場合
+* 5文字より大きいサイズで送信した場合
+
+.. figure:: images/AppValidationEmpty.png
+   :alt: Validation Error (name is empty)
+
+.. figure:: images/AppValidationSizeOver.png
+   :alt: Validation Error (name's size is over 5)
+
+
+出力されるHTMLは、
+
+.. code-block:: html
+    :emphasize-lines: 10
+
+    <!DOCTYPE html>
+    <html>
+    <head>
+    <title>Echo Application</title>
+    </head>
+    <body>
+      <form id="echoForm" action="/helloworld/echo/hello" method="post">
+        <label for="name">Input Your Name:</label>
+        <input id="name" name="name" type="text" value=""/>
+        <span id="name.errors" style="color:red">size must be between 1 and 5</span>
+        <input type="submit" />
+      <input type="hidden" name="_csrf" value="6e94a78d-4a2c-4a41-a514-0a60f0dbedaf" />
+    </form>
+    </body>
+    </html>
+
+となる。
+
+|
+
+まとめ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+この章では、
+
+#. \ ``mvn archetype:generate``\を利用したブランクプロジェクトの作成方法
+#. SpringMVCの基本的な設定方法
+#. 最も簡易な、画面遷移方法
+#. 画面間での値の引き渡し方法
+#. シンプルな入力チェック方法
+
+を学んだ。
+
+上記の内容が理解できていない場合は、もう一度、本節を読み、環境構築から始めて、進めていくことで理解が深まる。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Overview/FrameworkStack.rst b/source/Overview/FrameworkStack.rst
index 51d5203f6d..2c6134d3d7 100755
--- a/source/Overview/FrameworkStack.rst
+++ b/source/Overview/FrameworkStack.rst
@@ -1,950 +1,950 @@
-TERASOLUNA Server Framework for Java (5.x)のスタック
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :depth: 3
-    :local:
-
-TERASOLUNA Server Framework for Java (5.x)のSoftware Framework概要
---------------------------------------------------------------------------------
-
-TERASOLUNA Server Framework for Java (5.x)で使用するSoftware Frameworkは独自のフレームワークではなく、\ `Spring Framework <http://projects.spring.io/spring-framework/>`_\ を中心としたOSSの組み合わせである。
-
-.. figure:: images/introduction-software-framework.png
-   :width: 95%
-
-
-Software Frameworkの主な構成要素
---------------------------------------------------------------------------------
-
-TERASOLUNA Server Framework for Java (5.x)を構成するライブラリを以下に示す。
-
-.. figure:: images/introduction-software-stack.png
-   :width: 95%
-
-DIコンテナ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-DIコンテナとしてSpring Frameworkを利用する。
-
-
-* `Spring Framework 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/beans.html>`_
-
-MVCフレームワーク
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Web MVCフレームワークとしてSpring MVCを利用する。
-
-* `Spring MVC 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html>`_
-
-O/R Mapper
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-本ガイドラインでは、以下の\ **いずれか**\ を想定している。
-
-* `MyBatis 3.3 <http://mybatis.github.io/mybatis-3/>`_
-
-  * Spring Frameworkとの連携ライブラリとして、\ `MyBatis-Spring <http://mybatis.github.io/spring/>`_\ を使用する。
-
-* `JPA2.1 <http://download.oracle.com/otn-pub/jcp/persistence-2_1-fr-eval-spec/JavaPersistence.pdf>`_
-
-  * プロバイダは、\ `Hibernate 4.3 <http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html_single/>`_\ を使用する。
-
-.. note::
-
-  MyBatisは正確には「SQL Mapper」であるが、本ガイドラインでは「O/R Mapper」に分類する。
-
-.. warning::
-
-  どんなプロジェクトでもJPAを採用できるわけではない。"テーブルがほとんど正規化されいない"、"テーブルのカラム数が多すぎる"というテーブル設計がされている場合に、JPAの利用は難しい。
-
-  また、本ガイドラインではJPAの基本的な説明は行っておらず、JPA利用経験者がチーム内にいることが前提である。
-
-View
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-ViewにはJSPを利用する。
-
-Viewのレイアウトを共通化する場合は、
-
-* `Apache Tiles 3.0 <http://tiles.apache.org/framework/index.html>`_
-
-を利用する。
-
-セキュリティ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-認証・認可のフレームワークとしてSpring Securityを利用する。
-
-* `Spring Security 4.0 <http://projects.spring.io/spring-security/>`_
-
-.. tip::
-
-    Spring Security 3.2 から、認証・認可の仕組みの提供に加えて、
-    悪意のある攻撃者からWebアプリケーションを守るための仕組みが強化されている。
-
-    悪意のある攻撃者からWebアプリケーションを守るための仕組みについては、
-
-    * :doc:`../Security/CSRF`
-    * :doc:`../Security/LinkageWithBrowser`
-
-    を参照されたい。
-
-バリデーション
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-* 単項目チェックには\ `BeanValidation 1.1 <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\ を利用する。
-
-  * 実装は、\ `Hibernate Validator 5.2 <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/>`_\ を利用する。
-
-* 相関チェックには\ `Bean Validation <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\ 、もしくは\ `Spring Validation <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#validator>`_\ を利用する。
-
-  * 使い分けについては\ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ を参照されたい。
-
-
-
-ロギング
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-* ロガーのAPIは\ `SLF4J <http://www.slf4j.org>`_\ を使用する。
-
-  * ロガーの実装は、\ `Logback <http://logback.qos.ch/>`_\ を利用する。
-
-
-共通ライブラリ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-* \ `https://github.com/terasolunaorg/terasoluna-gfw <https://github.com/terasolunaorg/terasoluna-gfw>`_\
-* 詳細は\ :ref:`frameworkstack_common_library`\ を参照されたい。
-
-.. _frameworkstack_using_oss_version:
-
-利用するOSSのバージョン
---------------------------------------------------------------------------------
-
-version 5.1.0.RELEASEで利用するOSSの一覧を以下に示す。
-
-.. tip::
-
-    version 5.0.0.RELEASEより、
-    `Spring IO platform <http://platform.spring.io/platform/>`_\ の\ ``<dependencyManagement>``\ をインポートする構成を採用している。
-
-    Spring IO platformの\ ``<dependencyManagement>``\ をインポートすることで、
-
-    * Spring Frameworkが提供しているライブラリ
-    * Spring Frameworkが依存しているOSSライブラリ
-    * Spring Frameworkと相性のよいOSSライブラリ
-
-    への依存関係を解決しており、
-    TERASOLUNA Server Framework for Java (5.x)で使用するOSSのバージョンは、原則として、Spring IO platformの定義に準じている。
-
-    なお、version 5.1.0.RELEASEで指定しているSpring IO platformのバージョンは、`2.0.1.RELEASE <http://docs.spring.io/platform/docs/2.0.1.RELEASE/reference/htmlsingle/>`_\ である。
-
-.. tabularcolumns:: |p{0.15\linewidth}|p{0.27\linewidth}|p{0.25\linewidth}|p{0.15\linewidth}|p{0.05\linewidth}|p{0.08\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :stub-columns: 1
-    :widths: 15 27 25 15 5 8
-
-    * - Type
-      - GroupId
-      - ArtifactId
-      - Version
-      - Spring IO platform
-      - Remarks
-    * - Spring
-      - org.springframework
-      - spring-aop
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-aspects
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-beans
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-context
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-context-support
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-core
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-expression
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-jdbc
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-orm
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-tx
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-web
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework
-      - spring-webmvc
-      - 4.2.4.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.data
-      - spring-data-commons
-      - 1.11.2.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.security
-      - spring-security-acl
-      - 4.0.3.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.security
-      - spring-security-config
-      - 4.0.3.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.security
-      - spring-security-core
-      - 4.0.3.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.security
-      - spring-security-taglibs
-      - 4.0.3.RELEASE
-      - \*
-      -
-    * - Spring
-      - org.springframework.security
-      - spring-security-web
-      - 4.0.3.RELEASE
-      - \*
-      -
-    * - MyBatis3
-      - org.mybatis
-      - mybatis
-      - 3.3.0
-      -
-      - \*1
-    * - MyBatis3
-      - org.mybatis
-      - mybatis-spring
-      - 1.2.3
-      -
-      - \*1
-    * - MyBatis3
-      - org.mybatis
-      - mybatis-typehandlers-jsr310
-      - 1.0.1
-      -
-      - \*1*6
-    * - JPA(Hibernate)
-      - antlr
-      - antlr
-      - 2.7.7
-      - \*
-      - \*2
-    * - JPA(Hibernate)
-      - dom4j
-      - dom4j
-      - 1.6.1
-      - \*
-      - \*2
-    * - JPA(Hibernate)
-      - org.hibernate
-      - hibernate-core
-      - 4.3.11.Final
-      - \*
-      - \*2
-    * - JPA(Hibernate)
-      - org.hibernate
-      - hibernate-entitymanager
-      - 4.3.11.Final
-      - \*
-      - \*2
-    * - JPA(Hibernate)
-      - org.hibernate.common
-      - hibernate-commons-annotations
-      - 4.0.5.Final
-      - \*
-      - \*2 \*4
-    * - JPA(Hibernate)
-      - org.hibernate.javax.persistence
-      - hibernate-jpa-2.1-api
-      - 1.0.0.Final
-      - \*
-      - \*2 \*4
-    * - JPA(Hibernate)
-      - org.javassist
-      - javassist
-      - 3.18.1-GA
-      - \*
-      - \*2
-    * - JPA(Hibernate)
-      - org.jboss
-      - jandex
-      - 1.1.0.Final
-      - \*
-      - \*2 \*4
-    * - JPA(Hibernate)
-      - org.jboss.logging
-      - jboss-logging-annotations
-      - 1.2.0.Final
-      - \*
-      - \*2 \*4 \*5
-    * - JPA(Hibernate)
-      - org.jboss.spec.javax.transaction
-      - jboss-transaction-api_1.2_spec
-      - 1.0.0.Final
-      - \*
-      - \*2 \*4
-    * - JPA(Hibernate)
-      - org.springframework.data
-      - spring-data-jpa
-      - 1.9.2.RELEASE
-      - \*
-      - \*2
-    * - DI
-      - javax.inject
-      - javax.inject
-      - 1
-      - \*
-      -
-    * - AOP
-      - aopalliance
-      - aopalliance
-      - 1
-      - \*
-      -
-    * - AOP
-      - org.aspectj
-      - aspectjrt
-      - 1.8.7
-      - \*
-      -
-    * - AOP
-      - org.aspectj
-      - aspectjweaver
-      - 1.8.7
-      - \*
-      -
-    * - ログ出力
-      - ch.qos.logback
-      - logback-classic
-      - 1.1.3
-      - \*
-      -
-    * - ログ出力
-      - ch.qos.logback
-      - logback-core
-      - 1.1.3
-      - \*
-      - \*4
-    * - ログ出力
-      - org.lazyluke
-      - log4jdbc-remix
-      - 0.2.7
-      -
-      -
-    * - ログ出力
-      - org.slf4j
-      - jcl-over-slf4j
-      - 1.7.13
-      - \*
-      -
-    * - ログ出力
-      - org.slf4j
-      - slf4j-api
-      - 1.7.13
-      - \*
-      -
-    * - JSON
-      - com.fasterxml.jackson.core
-      - jackson-annotations
-      - 2.6.4
-      - \*
-      -
-    * - JSON
-      - com.fasterxml.jackson.core
-      - jackson-core
-      - 2.6.4
-      - \*
-      -
-    * - JSON
-      - com.fasterxml.jackson.core
-      - jackson-databind
-      - 2.6.4
-      - \*
-      -
-    * - JSON
-      - com.fasterxml.jackson.datatype
-      - jackson-datatype-joda
-      - 2.6.4
-      - \*
-      -
-    * - JSON
-      - com.fasterxml.jackson.datatype
-      - jackson-datatype-jsr310
-      - 2.6.4
-      - \*
-      - \*6
-    * - 入力チェック
-      - javax.validation
-      - validation-api
-      - 1.1.0.Final
-      - \*
-      -
-    * - 入力チェック
-      - org.hibernate
-      - hibernate-validator
-      - 5.2.2.Final
-      - \*
-      -
-    * - 入力チェック
-      - org.jboss.logging
-      - jboss-logging
-      - 3.3.0.Final
-      - \*
-      - \*4
-    * - 入力チェック
-      - com.fasterxml
-      - classmate
-      - 1.1.0
-      - \*
-      - \*4
-    * - Bean変換
-      - commons-beanutils
-      - commons-beanutils
-      - 1.9.2
-      - \*
-      - \*3
-    * - Bean変換
-      - net.sf.dozer
-      - dozer
-      - 5.5.1
-      -
-      - \*3
-    * - Bean変換
-      - net.sf.dozer
-      - dozer-spring
-      - 5.5.1
-      -
-      - \*3
-    * - Bean変換
-      - org.apache.commons
-      - commons-lang3
-      - 3.3.2
-      - \*
-      - \*3
-    * - 日付操作
-      - joda-time
-      - joda-time
-      - 2.8.2
-      - \*
-      -
-    * - 日付操作
-      - joda-time
-      - joda-time-jsptags
-      - 1.1.1
-      -
-      - \*3
-    * - 日付操作
-      - org.jadira.usertype
-      - usertype.core
-      - 3.2.0.GA
-      -
-      - \*2
-    * - 日付操作
-      - org.jadira.usertype
-      - usertype.spi
-      - 3.2.0.GA
-      -
-      - \*2
-    * - コネクションプール
-      - org.apache.commons
-      - commons-dbcp2
-      - 2.1.1
-      - \*
-      - \*3
-    * - コネクションプール
-      - org.apache.commons
-      - commons-pool2
-      - 2.4.2
-      - \*
-      - \*3
-    * - Tiles
-      - commons-digester
-      - commons-digester
-      - 2.1
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-api
-      - 3.0.5
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-core
-      - 3.0.5
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-jsp
-      - 3.0.5
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-servlet
-      - 3.0.5
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-template
-      - 3.0.5
-      - \*
-      - \*3 \*4
-    * - Tiles
-      - org.apache.tiles
-      - tiles-autotag-core-runtime
-      - 1.1.0
-      - \*
-      - \*3 \*4
-    * - Tiles
-      - org.apache.tiles
-      - tiles-request-servlet
-      - 1.0.6
-      - \*
-      - \*3 \*4
-    * - Tiles
-      - org.apache.tiles
-      - tiles-request-api
-      - 1.0.6
-      - \*
-      - \*3
-    * - Tiles
-      - org.apache.tiles
-      - tiles-request-jsp
-      - 1.0.6
-      - \*
-      - \*3 \*4
-    * - ユーティリティ
-      - com.google.guava
-      - guava
-      - 17.0
-      - \*
-      -
-    * - ユーティリティ
-      - commons-collections
-      - commons-collections
-      - 3.2.2
-      - \*
-      - \*3
-    * - ユーティリティ
-      - commons-io
-      - commons-io
-      - 2.4
-      - \*
-      - \*3
-    * - サーブレット
-      - org.apache.taglibs
-      - taglibs-standard-jstlel
-      - 1.2.5
-      - \*
-      -
-    * - サーブレット
-      - org.apache.taglibs
-      - taglibs-standard-spec
-      - 1.2.5
-      - \*
-      - \*4
-    * - サーブレット
-      - org.apache.taglibs
-      - taglibs-standard-impl
-      - 1.2.5
-      - \*
-      - \*4
-
-#. | データアクセスに、MyBatis3を使用する場合に依存するライブラリ
-#. | データアクセスに、JPAを使用する場合に依存するライブラリ
-#. | 共通ライブラリに依存しないが、TERASOLUNA Server Framework for Java (5.x)でアプリケーションを開発する場合に、利用することを推奨しているライブラリ
-#. | Spring IO platformでサポートしているライブラリが個別に依存しているライブラリ
-   | (Spring IO platformとしては依存関係の管理は行っていないライブラリ)
-#. | Spring IO platformで適用されるバージョンが、BetaやRC(Release Candidate)であるライブラリ
-   | (TERASOLUNA Server Framework for Java (5.x)側でGAのバージョンを明示的に指定しているライブラリ)
-#. | Java SE 8以降のAPIを前提としたライブラリ
-   | Java SE 7以下の場合は本ライブラリへの依存関係を明示的に除去する必要がある
-
-
-.. _frameworkstack_common_library:
-
-
-共通ライブラリの構成要素
---------------------------------------------------------------------------------
-
-\ `共通ライブラリ <https://github.com/terasolunaorg/terasoluna-gfw>`_\ は、TERASOLUNA Server Framework for Java (5.x)が含むSpring Ecosystem や、その他依存ライブラリでは足りない+αな機能を提供するライブラリである。
-基本的には、このライブラリがなくてもTERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発は可能であるが、"あると便利"な存在である。
-また、提供している2種類の \ `マルチプロジェクト構成のブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ および \ `シングルプロジェクト構成のブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-blank>`_\ の共通ライブラリの標準の組込状況は以下の通りである。
-
-.. tabularcolumns:: |p{0.05\linewidth}|p{0.30\linewidth}|p{0.45\linewidth}|p{0.20\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 5 22 45 10 17 18
-
-    * - 項番
-      - プロジェクト名
-      - 概要
-      - Javaソースコード有無
-      - マルチプロジェクト構成のブランクプロジェクト組込
-      - シングルプロジェクト構成のブランクプロジェクト組込
-    * - \ (1)
-      - terasoluna-gfw-common
-      - Webに依存しない汎用的に使用できる機能と依存関係定義を提供する。
-      - 有
-      - 有
-      - 有
-    * - \ (2)
-      - terasoluna-gfw-string
-      - 文字列処理に関連する機能を提供する。(5.1.0から追加)
-      - 有
-      - 無
-      - 無
-    * - \ (3)
-      - terasoluna-gfw-codepoints
-      - 対象の文字列を構成するコードポイントがコードポイント集合に含まれることをチェックする機能を提供する。(5.1.0から追加)
-      - 有
-      - 無
-      - 無
-    * - \ (4)
-      - terasoluna-gfw-validator
-      - 汎用的なBean Validationの制約アノテーションを追加して提供する。(5.1.0から追加)
-      - 有
-      - 無
-      - 無
-    * - \ (5)
-      - terasoluna-gfw-jodatime
-      - Joda Timeに依存する機能と依存関係定義を提供する。(5.0.0から追加)
-      - 有
-      - 有
-      - 有
-    * - \ (6)
-      - terasoluna-gfw-web
-      - Webアプリケーションを作成する場合に使用する機能と依存関係定義を提供する。Viewに依存しない機能や依存関係定義を集約している。
-      - 有
-      - 有
-      - 有
-    * - \ (7)
-      - terasoluna-gfw-web-jsp
-      - ViewにJSPを採用するWebアプリケーションを作成する場合に使用する機能と依存関係定義を提供する。
-      - 有
-      - 有
-      - 有
-    * - \ (8)
-      - terasoluna-gfw-mybatis3
-      - MyBatis3を使用する場合の依存関係定義を提供する。
-      - 無
-      - 有*1
-      - 有*1
-    * - \ (9)
-      - terasoluna-gfw-jpa
-      - JPAを使用する場合の依存関係定義を提供する。
-      - 無
-      - 有*2
-      - 有*2
-    * - \ (10)
-      - terasoluna-gfw-security-core
-      - Spring Securityを使用する場合の依存関係定義(Web以外)を提供する。
-      - 無
-      - 有
-      - 有
-    * - \ (11)
-      - terasoluna-gfw-security-web
-      - Spring Securityを使用する場合の依存関係定義(Web関連)とSpring Securityの拡張部品を提供する。
-      - 有
-      - 有
-      - 有
-    * - \ (12)
-      - terasoluna-gfw-recommended-dependencies
-      - Webに依存しない推奨ライブラリへの依存関係定義を提供する。
-      - 無
-      - 有
-      - 有
-    * - \ (13)
-      - terasoluna-gfw-recommended-web-dependencies
-      - Webに依存する推奨ライブラリへの依存関係定義を提供する。
-      - 無
-      - 有
-      - 有
-    * - \ (14)
-      - terasoluna-gfw-parent
-      - 依存ライブラリの管理とビルド用プラグインの推奨設定を提供する。
-      - 無
-      - 有*3
-      - 有*3
-
-#. | データアクセスに、MyBatis3を使用する場合に標準で組み込まれる共通ライブラリ
-#. | データアクセスに、JPAを使用する場合に標準で組み込まれる共通ライブラリ
-#. | \ ``<dependency>``\ 要素ではないが、各プロジェクトの\ ``<parent>``\ 要素として組み込まれる。
-
-Javaソースコードを含まないものは、ライブラリの依存関係のみ定義しているプロジェクトである。
-
-なお、プロジェクトの依存関係は以下の通りである。
-
-.. figure:: images_FrameworkStack/FrameworkStackProjectDependencies.png
-    :width: 75%
-
-
-terasoluna-gfw-common
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-commonは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
-      - 例外クラス
-      - 汎用的に使用できる例外クラスを提供する。
-    * -
-      - 例外ロガー
-      - プリケーション内で発生した例外をログに出力するためのロガークラスを提供する。
-    * -
-      - 例外コード
-      - 例外クラスに対応する例外コード(メッセージID)を解決するための仕組み(クラス)を提供する。
-    * -
-      - 例外ログ出力インターセプタ
-      - ドメイン層で発生した例外をログ出力するためのインターセプタクラス(AOP)を提供する。
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
-      - システム時刻ファクトリ
-      - システム時刻を取得するためのクラスを提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-      - コードリスト
-      - コードリストを生成するためのクラスを提供する。
-    * - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
-      - クエリエスケープ
-      - SQL及びJPQLにバインドする値のエスケープ処理を行うクラスを提供する。
-    * -
-      - シーケンサ
-      - シーケンス値を取得するためのクラスを提供する。
-
-terasoluna-gfw-string
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-stringは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
-      - 半角全角変換
-      - 半角文字列と全角文字列のマッピングテーブルに基づき、入力文字列の半角文字を全角に変換する処理と全角文字を半角に変換する処理を行うクラスを提供する。
-
-
-terasoluna-gfw-codepoints
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-codepointsは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
-      - コードポイントチェック
-      - 対象の文字列を構成するコードポイントが、定義されたコードポイント集合に含まれることをチェックするクラスを提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-      - コードポイントチェック用Bean Validation制約アノテーション
-      - コードポイントチェックをBean Validationで行うための制約アノテーションを提供する。
-
-
-terasoluna-gfw-validator
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-validatorは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
-      - バイト長チェック用Bean Validation制約アノテーション
-      - 入力文字列の文字コードにおけるバイト長が、指定した最大値以下であること、最小値以上であることのチェックをBean Validationで行うための制約アノテーションを提供する。
-    * -
-      - フィールド値比較相関チェック用Bean Validation制約アノテーション
-      - 2つのフィールド値の大小関係チェックをBean Validationで行うための制約アノテーションを提供する。
-
-terasoluna-gfw-jodatime
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-jodatimeは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
-      - Joda Time用システム時刻ファクトリ
-      - Joda TimeのAPIを利用してシステム時刻を取得するためのクラスを提供する。
-
-
-terasoluna-gfw-web
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-webは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
-      - トランザクショントークンチェック
-      - リクエストの二重送信からWebアプリケーションを守るための仕組み(クラス)を提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
-      - 例外ハンドラ
-      - 共通ライブラリが提供する例外ハンドリングの部品と連携するための例外ハンドラクラス(Spring MVC提供のクラスのサブクラス)を提供する。
-    * -
-      - 例外ログ出力インターセプタ
-      - Spring MVCの例外ハンドラがハンドリングした例外をログ出力するためのインターセプタクラス(AOP)を提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
-      - コードリスト埋込インターセプタ
-      - Viewからコードリストを取得できるようにするために、コードリストの情報をリクエストスコープに格納するためのインターセプタクラス(Spring MVC Interceptor)を提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
-      - 汎用ダウンロードView
-      - ストリームから取得したデータを、ダウンロード用のストリームに出力するための抽象クラスを提供する。
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-      - トラッキングID格納用サーブレットフィルタ
-      - トレーサビリティを向上させるために、
-        クライアントから指定されたトラッキングIDを、ロガーのMDC(Mapped Diagnostic Context)、リクエストスコープ、レスポンスヘッダに設定するためのサーブレットフィルタクラスを提供する。
-        (クライアントからトラッキングIDの指定がない場合は、本クラスでトラッキングIDを生成する)
-    * -
-      - 汎用MDC格納用サーブレットフィルタ
-      - ロガーのMDCに任意の値を設定するための抽象クラスを提供する。
-    * -
-      - MDCクリア用サーブレットフィルタ
-      - ロガーのMDCに格納されている情報をクリアするためのサーブレットフィルタクラスを提供する。
-
-terasoluna-gfw-web-jsp
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-web-jspは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
-      - トランザクショントークン出力用のJSPタグ
-      - トランザクショントークンをhidden項目として出力するためのJSPタグライブラリを提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
-      - ページネーションリンク表示用のJSPタグ
-      - Spring Data Commons提供のクラスと連携してページネーションリンクを表示するためのJSPタグライブラリを提供する。
-    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
-      - 結果メッセージ表示用のJSPタグ
-      - 処理結果を表示するためのJSPタグライブラリを提供する。
-    * - :ref:`TagLibAndELFunctionsOverviewELFunctions`
-      - XSS対策用EL関数
-      - XSS対策用のEL関数を提供する。
-    * -
-      - URL用EL関数
-      - URLエンコーディングなどのURL用のEL関数を提供する。
-    * -
-      - DOM変換用EL関数
-      - DOM文字列に変換するためのEL関数を提供する。
-    * -
-      - ユーティリティEL関数
-      - 汎用的なユーティリティ処理を行うためのEL関数を提供する。
-
-terasoluna-gfw-security-web
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-terasoluna-gfw-security-webは以下の部品を提供している。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 30 50
-
-    * - 分類
-      - 部品名
-      - 説明
-    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
-      - 認証ユーザ名格納用サーブレットフィルタ
-      - トレーサビリティを向上させるために、
-        認証ユーザ名をロガーのMDCに設定するためのサーブレットフィルタクラスを提供する。
-
-
-.. raw:: latex
-
-   \newpage
-
+TERASOLUNA Server Framework for Java (5.x)のスタック
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+TERASOLUNA Server Framework for Java (5.x)のSoftware Framework概要
+--------------------------------------------------------------------------------
+
+TERASOLUNA Server Framework for Java (5.x)で使用するSoftware Frameworkは独自のフレームワークではなく、\ `Spring Framework <http://projects.spring.io/spring-framework/>`_\ を中心としたOSSの組み合わせである。
+
+.. figure:: images/introduction-software-framework.png
+   :width: 95%
+
+
+Software Frameworkの主な構成要素
+--------------------------------------------------------------------------------
+
+TERASOLUNA Server Framework for Java (5.x)を構成するライブラリを以下に示す。
+
+.. figure:: images/introduction-software-stack.png
+   :width: 95%
+
+DIコンテナ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+DIコンテナとしてSpring Frameworkを利用する。
+
+
+* `Spring Framework 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/beans.html>`_
+
+MVCフレームワーク
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Web MVCフレームワークとしてSpring MVCを利用する。
+
+* `Spring MVC 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html>`_
+
+O/R Mapper
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+本ガイドラインでは、以下の\ **いずれか**\ を想定している。
+
+* `MyBatis 3.3 <http://mybatis.github.io/mybatis-3/>`_
+
+  * Spring Frameworkとの連携ライブラリとして、\ `MyBatis-Spring <http://mybatis.github.io/spring/>`_\ を使用する。
+
+* `JPA2.1 <http://download.oracle.com/otn-pub/jcp/persistence-2_1-fr-eval-spec/JavaPersistence.pdf>`_
+
+  * プロバイダは、\ `Hibernate 4.3 <http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html_single/>`_\ を使用する。
+
+.. note::
+
+  MyBatisは正確には「SQL Mapper」であるが、本ガイドラインでは「O/R Mapper」に分類する。
+
+.. warning::
+
+  どんなプロジェクトでもJPAを採用できるわけではない。"テーブルがほとんど正規化されいない"、"テーブルのカラム数が多すぎる"というテーブル設計がされている場合に、JPAの利用は難しい。
+
+  また、本ガイドラインではJPAの基本的な説明は行っておらず、JPA利用経験者がチーム内にいることが前提である。
+
+View
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+ViewにはJSPを利用する。
+
+Viewのレイアウトを共通化する場合は、
+
+* `Apache Tiles 3.0 <http://tiles.apache.org/framework/index.html>`_
+
+を利用する。
+
+セキュリティ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+認証・認可のフレームワークとしてSpring Securityを利用する。
+
+* `Spring Security 4.0 <http://projects.spring.io/spring-security/>`_
+
+.. tip::
+
+    Spring Security 3.2 から、認証・認可の仕組みの提供に加えて、
+    悪意のある攻撃者からWebアプリケーションを守るための仕組みが強化されている。
+
+    悪意のある攻撃者からWebアプリケーションを守るための仕組みについては、
+
+    * :doc:`../Security/CSRF`
+    * :doc:`../Security/LinkageWithBrowser`
+
+    を参照されたい。
+
+バリデーション
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+* 単項目チェックには\ `BeanValidation 1.1 <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\ を利用する。
+
+  * 実装は、\ `Hibernate Validator 5.2 <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/>`_\ を利用する。
+
+* 相関チェックには\ `Bean Validation <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\ 、もしくは\ `Spring Validation <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html#validator>`_\ を利用する。
+
+  * 使い分けについては\ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ を参照されたい。
+
+
+
+ロギング
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+* ロガーのAPIは\ `SLF4J <http://www.slf4j.org>`_\ を使用する。
+
+  * ロガーの実装は、\ `Logback <http://logback.qos.ch/>`_\ を利用する。
+
+
+共通ライブラリ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+* \ `https://github.com/terasolunaorg/terasoluna-gfw <https://github.com/terasolunaorg/terasoluna-gfw>`_\
+* 詳細は\ :ref:`frameworkstack_common_library`\ を参照されたい。
+
+.. _frameworkstack_using_oss_version:
+
+利用するOSSのバージョン
+--------------------------------------------------------------------------------
+
+version 5.1.0.RELEASEで利用するOSSの一覧を以下に示す。
+
+.. tip::
+
+    version 5.0.0.RELEASEより、
+    `Spring IO platform <http://platform.spring.io/platform/>`_\ の\ ``<dependencyManagement>``\ をインポートする構成を採用している。
+
+    Spring IO platformの\ ``<dependencyManagement>``\ をインポートすることで、
+
+    * Spring Frameworkが提供しているライブラリ
+    * Spring Frameworkが依存しているOSSライブラリ
+    * Spring Frameworkと相性のよいOSSライブラリ
+
+    への依存関係を解決しており、
+    TERASOLUNA Server Framework for Java (5.x)で使用するOSSのバージョンは、原則として、Spring IO platformの定義に準じている。
+
+    なお、version 5.1.0.RELEASEで指定しているSpring IO platformのバージョンは、`2.0.1.RELEASE <http://docs.spring.io/platform/docs/2.0.1.RELEASE/reference/htmlsingle/>`_\ である。
+
+.. tabularcolumns:: |p{0.15\linewidth}|p{0.27\linewidth}|p{0.25\linewidth}|p{0.15\linewidth}|p{0.05\linewidth}|p{0.08\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :stub-columns: 1
+    :widths: 15 27 25 15 5 8
+
+    * - Type
+      - GroupId
+      - ArtifactId
+      - Version
+      - Spring IO platform
+      - Remarks
+    * - Spring
+      - org.springframework
+      - spring-aop
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-aspects
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-beans
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-context
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-context-support
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-core
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-expression
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-jdbc
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-orm
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-tx
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-web
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework
+      - spring-webmvc
+      - 4.2.4.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.data
+      - spring-data-commons
+      - 1.11.2.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.security
+      - spring-security-acl
+      - 4.0.3.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.security
+      - spring-security-config
+      - 4.0.3.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.security
+      - spring-security-core
+      - 4.0.3.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.security
+      - spring-security-taglibs
+      - 4.0.3.RELEASE
+      - \*
+      -
+    * - Spring
+      - org.springframework.security
+      - spring-security-web
+      - 4.0.3.RELEASE
+      - \*
+      -
+    * - MyBatis3
+      - org.mybatis
+      - mybatis
+      - 3.3.0
+      -
+      - \*1
+    * - MyBatis3
+      - org.mybatis
+      - mybatis-spring
+      - 1.2.3
+      -
+      - \*1
+    * - MyBatis3
+      - org.mybatis
+      - mybatis-typehandlers-jsr310
+      - 1.0.1
+      -
+      - \*1*6
+    * - JPA(Hibernate)
+      - antlr
+      - antlr
+      - 2.7.7
+      - \*
+      - \*2
+    * - JPA(Hibernate)
+      - dom4j
+      - dom4j
+      - 1.6.1
+      - \*
+      - \*2
+    * - JPA(Hibernate)
+      - org.hibernate
+      - hibernate-core
+      - 4.3.11.Final
+      - \*
+      - \*2
+    * - JPA(Hibernate)
+      - org.hibernate
+      - hibernate-entitymanager
+      - 4.3.11.Final
+      - \*
+      - \*2
+    * - JPA(Hibernate)
+      - org.hibernate.common
+      - hibernate-commons-annotations
+      - 4.0.5.Final
+      - \*
+      - \*2 \*4
+    * - JPA(Hibernate)
+      - org.hibernate.javax.persistence
+      - hibernate-jpa-2.1-api
+      - 1.0.0.Final
+      - \*
+      - \*2 \*4
+    * - JPA(Hibernate)
+      - org.javassist
+      - javassist
+      - 3.18.1-GA
+      - \*
+      - \*2
+    * - JPA(Hibernate)
+      - org.jboss
+      - jandex
+      - 1.1.0.Final
+      - \*
+      - \*2 \*4
+    * - JPA(Hibernate)
+      - org.jboss.logging
+      - jboss-logging-annotations
+      - 1.2.0.Final
+      - \*
+      - \*2 \*4 \*5
+    * - JPA(Hibernate)
+      - org.jboss.spec.javax.transaction
+      - jboss-transaction-api_1.2_spec
+      - 1.0.0.Final
+      - \*
+      - \*2 \*4
+    * - JPA(Hibernate)
+      - org.springframework.data
+      - spring-data-jpa
+      - 1.9.2.RELEASE
+      - \*
+      - \*2
+    * - DI
+      - javax.inject
+      - javax.inject
+      - 1
+      - \*
+      -
+    * - AOP
+      - aopalliance
+      - aopalliance
+      - 1
+      - \*
+      -
+    * - AOP
+      - org.aspectj
+      - aspectjrt
+      - 1.8.7
+      - \*
+      -
+    * - AOP
+      - org.aspectj
+      - aspectjweaver
+      - 1.8.7
+      - \*
+      -
+    * - ログ出力
+      - ch.qos.logback
+      - logback-classic
+      - 1.1.3
+      - \*
+      -
+    * - ログ出力
+      - ch.qos.logback
+      - logback-core
+      - 1.1.3
+      - \*
+      - \*4
+    * - ログ出力
+      - org.lazyluke
+      - log4jdbc-remix
+      - 0.2.7
+      -
+      -
+    * - ログ出力
+      - org.slf4j
+      - jcl-over-slf4j
+      - 1.7.13
+      - \*
+      -
+    * - ログ出力
+      - org.slf4j
+      - slf4j-api
+      - 1.7.13
+      - \*
+      -
+    * - JSON
+      - com.fasterxml.jackson.core
+      - jackson-annotations
+      - 2.6.4
+      - \*
+      -
+    * - JSON
+      - com.fasterxml.jackson.core
+      - jackson-core
+      - 2.6.4
+      - \*
+      -
+    * - JSON
+      - com.fasterxml.jackson.core
+      - jackson-databind
+      - 2.6.4
+      - \*
+      -
+    * - JSON
+      - com.fasterxml.jackson.datatype
+      - jackson-datatype-joda
+      - 2.6.4
+      - \*
+      -
+    * - JSON
+      - com.fasterxml.jackson.datatype
+      - jackson-datatype-jsr310
+      - 2.6.4
+      - \*
+      - \*6
+    * - 入力チェック
+      - javax.validation
+      - validation-api
+      - 1.1.0.Final
+      - \*
+      -
+    * - 入力チェック
+      - org.hibernate
+      - hibernate-validator
+      - 5.2.2.Final
+      - \*
+      -
+    * - 入力チェック
+      - org.jboss.logging
+      - jboss-logging
+      - 3.3.0.Final
+      - \*
+      - \*4
+    * - 入力チェック
+      - com.fasterxml
+      - classmate
+      - 1.1.0
+      - \*
+      - \*4
+    * - Bean変換
+      - commons-beanutils
+      - commons-beanutils
+      - 1.9.2
+      - \*
+      - \*3
+    * - Bean変換
+      - net.sf.dozer
+      - dozer
+      - 5.5.1
+      -
+      - \*3
+    * - Bean変換
+      - net.sf.dozer
+      - dozer-spring
+      - 5.5.1
+      -
+      - \*3
+    * - Bean変換
+      - org.apache.commons
+      - commons-lang3
+      - 3.3.2
+      - \*
+      - \*3
+    * - 日付操作
+      - joda-time
+      - joda-time
+      - 2.8.2
+      - \*
+      -
+    * - 日付操作
+      - joda-time
+      - joda-time-jsptags
+      - 1.1.1
+      -
+      - \*3
+    * - 日付操作
+      - org.jadira.usertype
+      - usertype.core
+      - 3.2.0.GA
+      -
+      - \*2
+    * - 日付操作
+      - org.jadira.usertype
+      - usertype.spi
+      - 3.2.0.GA
+      -
+      - \*2
+    * - コネクションプール
+      - org.apache.commons
+      - commons-dbcp2
+      - 2.1.1
+      - \*
+      - \*3
+    * - コネクションプール
+      - org.apache.commons
+      - commons-pool2
+      - 2.4.2
+      - \*
+      - \*3
+    * - Tiles
+      - commons-digester
+      - commons-digester
+      - 2.1
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-api
+      - 3.0.5
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-core
+      - 3.0.5
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-jsp
+      - 3.0.5
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-servlet
+      - 3.0.5
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-template
+      - 3.0.5
+      - \*
+      - \*3 \*4
+    * - Tiles
+      - org.apache.tiles
+      - tiles-autotag-core-runtime
+      - 1.1.0
+      - \*
+      - \*3 \*4
+    * - Tiles
+      - org.apache.tiles
+      - tiles-request-servlet
+      - 1.0.6
+      - \*
+      - \*3 \*4
+    * - Tiles
+      - org.apache.tiles
+      - tiles-request-api
+      - 1.0.6
+      - \*
+      - \*3
+    * - Tiles
+      - org.apache.tiles
+      - tiles-request-jsp
+      - 1.0.6
+      - \*
+      - \*3 \*4
+    * - ユーティリティ
+      - com.google.guava
+      - guava
+      - 17.0
+      - \*
+      -
+    * - ユーティリティ
+      - commons-collections
+      - commons-collections
+      - 3.2.2
+      - \*
+      - \*3
+    * - ユーティリティ
+      - commons-io
+      - commons-io
+      - 2.4
+      - \*
+      - \*3
+    * - サーブレット
+      - org.apache.taglibs
+      - taglibs-standard-jstlel
+      - 1.2.5
+      - \*
+      -
+    * - サーブレット
+      - org.apache.taglibs
+      - taglibs-standard-spec
+      - 1.2.5
+      - \*
+      - \*4
+    * - サーブレット
+      - org.apache.taglibs
+      - taglibs-standard-impl
+      - 1.2.5
+      - \*
+      - \*4
+
+#. | データアクセスに、MyBatis3を使用する場合に依存するライブラリ
+#. | データアクセスに、JPAを使用する場合に依存するライブラリ
+#. | 共通ライブラリに依存しないが、TERASOLUNA Server Framework for Java (5.x)でアプリケーションを開発する場合に、利用することを推奨しているライブラリ
+#. | Spring IO platformでサポートしているライブラリが個別に依存しているライブラリ
+   | (Spring IO platformとしては依存関係の管理は行っていないライブラリ)
+#. | Spring IO platformで適用されるバージョンが、BetaやRC(Release Candidate)であるライブラリ
+   | (TERASOLUNA Server Framework for Java (5.x)側でGAのバージョンを明示的に指定しているライブラリ)
+#. | Java SE 8以降のAPIを前提としたライブラリ
+   | Java SE 7以下の場合は本ライブラリへの依存関係を明示的に除去する必要がある
+
+
+.. _frameworkstack_common_library:
+
+
+共通ライブラリの構成要素
+--------------------------------------------------------------------------------
+
+\ `共通ライブラリ <https://github.com/terasolunaorg/terasoluna-gfw>`_\ は、TERASOLUNA Server Framework for Java (5.x)が含むSpring Ecosystem や、その他依存ライブラリでは足りない+αな機能を提供するライブラリである。
+基本的には、このライブラリがなくてもTERASOLUNA Server Framework for Java (5.x)によるアプリケーション開発は可能であるが、"あると便利"な存在である。
+また、提供している2種類の \ `マルチプロジェクト構成のブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ および \ `シングルプロジェクト構成のブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-blank>`_\ の共通ライブラリの標準の組込状況は以下の通りである。
+
+.. tabularcolumns:: |p{0.05\linewidth}|p{0.30\linewidth}|p{0.45\linewidth}|p{0.20\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 5 22 45 10 17 18
+
+    * - 項番
+      - プロジェクト名
+      - 概要
+      - Javaソースコード有無
+      - マルチプロジェクト構成のブランクプロジェクト組込
+      - シングルプロジェクト構成のブランクプロジェクト組込
+    * - \ (1)
+      - terasoluna-gfw-common
+      - Webに依存しない汎用的に使用できる機能と依存関係定義を提供する。
+      - 有
+      - 有
+      - 有
+    * - \ (2)
+      - terasoluna-gfw-string
+      - 文字列処理に関連する機能を提供する。(5.1.0から追加)
+      - 有
+      - 無
+      - 無
+    * - \ (3)
+      - terasoluna-gfw-codepoints
+      - 対象の文字列を構成するコードポイントがコードポイント集合に含まれることをチェックする機能を提供する。(5.1.0から追加)
+      - 有
+      - 無
+      - 無
+    * - \ (4)
+      - terasoluna-gfw-validator
+      - 汎用的なBean Validationの制約アノテーションを追加して提供する。(5.1.0から追加)
+      - 有
+      - 無
+      - 無
+    * - \ (5)
+      - terasoluna-gfw-jodatime
+      - Joda Timeに依存する機能と依存関係定義を提供する。(5.0.0から追加)
+      - 有
+      - 有
+      - 有
+    * - \ (6)
+      - terasoluna-gfw-web
+      - Webアプリケーションを作成する場合に使用する機能と依存関係定義を提供する。Viewに依存しない機能や依存関係定義を集約している。
+      - 有
+      - 有
+      - 有
+    * - \ (7)
+      - terasoluna-gfw-web-jsp
+      - ViewにJSPを採用するWebアプリケーションを作成する場合に使用する機能と依存関係定義を提供する。
+      - 有
+      - 有
+      - 有
+    * - \ (8)
+      - terasoluna-gfw-mybatis3
+      - MyBatis3を使用する場合の依存関係定義を提供する。
+      - 無
+      - 有*1
+      - 有*1
+    * - \ (9)
+      - terasoluna-gfw-jpa
+      - JPAを使用する場合の依存関係定義を提供する。
+      - 無
+      - 有*2
+      - 有*2
+    * - \ (10)
+      - terasoluna-gfw-security-core
+      - Spring Securityを使用する場合の依存関係定義(Web以外)を提供する。
+      - 無
+      - 有
+      - 有
+    * - \ (11)
+      - terasoluna-gfw-security-web
+      - Spring Securityを使用する場合の依存関係定義(Web関連)とSpring Securityの拡張部品を提供する。
+      - 有
+      - 有
+      - 有
+    * - \ (12)
+      - terasoluna-gfw-recommended-dependencies
+      - Webに依存しない推奨ライブラリへの依存関係定義を提供する。
+      - 無
+      - 有
+      - 有
+    * - \ (13)
+      - terasoluna-gfw-recommended-web-dependencies
+      - Webに依存する推奨ライブラリへの依存関係定義を提供する。
+      - 無
+      - 有
+      - 有
+    * - \ (14)
+      - terasoluna-gfw-parent
+      - 依存ライブラリの管理とビルド用プラグインの推奨設定を提供する。
+      - 無
+      - 有*3
+      - 有*3
+
+#. | データアクセスに、MyBatis3を使用する場合に標準で組み込まれる共通ライブラリ
+#. | データアクセスに、JPAを使用する場合に標準で組み込まれる共通ライブラリ
+#. | \ ``<dependency>``\ 要素ではないが、各プロジェクトの\ ``<parent>``\ 要素として組み込まれる。
+
+Javaソースコードを含まないものは、ライブラリの依存関係のみ定義しているプロジェクトである。
+
+なお、プロジェクトの依存関係は以下の通りである。
+
+.. figure:: images_FrameworkStack/FrameworkStackProjectDependencies.png
+    :width: 75%
+
+
+terasoluna-gfw-common
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-commonは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
+      - 例外クラス
+      - 汎用的に使用できる例外クラスを提供する。
+    * -
+      - 例外ロガー
+      - プリケーション内で発生した例外をログに出力するためのロガークラスを提供する。
+    * -
+      - 例外コード
+      - 例外クラスに対応する例外コード(メッセージID)を解決するための仕組み(クラス)を提供する。
+    * -
+      - 例外ログ出力インターセプタ
+      - ドメイン層で発生した例外をログ出力するためのインターセプタクラス(AOP)を提供する。
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
+      - システム時刻ファクトリ
+      - システム時刻を取得するためのクラスを提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+      - コードリスト
+      - コードリストを生成するためのクラスを提供する。
+    * - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessCommon`
+      - クエリエスケープ
+      - SQL及びJPQLにバインドする値のエスケープ処理を行うクラスを提供する。
+    * -
+      - シーケンサ
+      - シーケンス値を取得するためのクラスを提供する。
+
+terasoluna-gfw-string
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-stringは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
+      - 半角全角変換
+      - 半角文字列と全角文字列のマッピングテーブルに基づき、入力文字列の半角文字を全角に変換する処理と全角文字を半角に変換する処理を行うクラスを提供する。
+
+
+terasoluna-gfw-codepoints
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-codepointsは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/StringProcessing`
+      - コードポイントチェック
+      - 対象の文字列を構成するコードポイントが、定義されたコードポイント集合に含まれることをチェックするクラスを提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      - コードポイントチェック用Bean Validation制約アノテーション
+      - コードポイントチェックをBean Validationで行うための制約アノテーションを提供する。
+
+
+terasoluna-gfw-validator
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-validatorは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      - バイト長チェック用Bean Validation制約アノテーション
+      - 入力文字列の文字コードにおけるバイト長が、指定した最大値以下であること、最小値以上であることのチェックをBean Validationで行うための制約アノテーションを提供する。
+    * -
+      - フィールド値比較相関チェック用Bean Validation制約アノテーション
+      - 2つのフィールド値の大小関係チェックをBean Validationで行うための制約アノテーションを提供する。
+
+terasoluna-gfw-jodatime
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-jodatimeは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/SystemDate`
+      - Joda Time用システム時刻ファクトリ
+      - Joda TimeのAPIを利用してシステム時刻を取得するためのクラスを提供する。
+
+
+terasoluna-gfw-web
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-webは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
+      - トランザクショントークンチェック
+      - リクエストの二重送信からWebアプリケーションを守るための仕組み(クラス)を提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
+      - 例外ハンドラ
+      - 共通ライブラリが提供する例外ハンドリングの部品と連携するための例外ハンドラクラス(Spring MVC提供のクラスのサブクラス)を提供する。
+    * -
+      - 例外ログ出力インターセプタ
+      - Spring MVCの例外ハンドラがハンドリングした例外をログ出力するためのインターセプタクラス(AOP)を提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Codelist`
+      - コードリスト埋込インターセプタ
+      - Viewからコードリストを取得できるようにするために、コードリストの情報をリクエストスコープに格納するためのインターセプタクラス(Spring MVC Interceptor)を提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`
+      - 汎用ダウンロードView
+      - ストリームから取得したデータを、ダウンロード用のストリームに出力するための抽象クラスを提供する。
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+      - トラッキングID格納用サーブレットフィルタ
+      - トレーサビリティを向上させるために、
+        クライアントから指定されたトラッキングIDを、ロガーのMDC(Mapped Diagnostic Context)、リクエストスコープ、レスポンスヘッダに設定するためのサーブレットフィルタクラスを提供する。
+        (クライアントからトラッキングIDの指定がない場合は、本クラスでトラッキングIDを生成する)
+    * -
+      - 汎用MDC格納用サーブレットフィルタ
+      - ロガーのMDCに任意の値を設定するための抽象クラスを提供する。
+    * -
+      - MDCクリア用サーブレットフィルタ
+      - ロガーのMDCに格納されている情報をクリアするためのサーブレットフィルタクラスを提供する。
+
+terasoluna-gfw-web-jsp
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-web-jspは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/DoubleSubmitProtection`
+      - トランザクショントークン出力用のJSPタグ
+      - トランザクショントークンをhidden項目として出力するためのJSPタグライブラリを提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/Pagination`
+      - ページネーションリンク表示用のJSPタグ
+      - Spring Data Commons提供のクラスと連携してページネーションリンクを表示するためのJSPタグライブラリを提供する。
+    * - :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`
+      - 結果メッセージ表示用のJSPタグ
+      - 処理結果を表示するためのJSPタグライブラリを提供する。
+    * - :ref:`TagLibAndELFunctionsOverviewELFunctions`
+      - XSS対策用EL関数
+      - XSS対策用のEL関数を提供する。
+    * -
+      - URL用EL関数
+      - URLエンコーディングなどのURL用のEL関数を提供する。
+    * -
+      - DOM変換用EL関数
+      - DOM文字列に変換するためのEL関数を提供する。
+    * -
+      - ユーティリティEL関数
+      - 汎用的なユーティリティ処理を行うためのEL関数を提供する。
+
+terasoluna-gfw-security-web
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+terasoluna-gfw-security-webは以下の部品を提供している。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.30\linewidth}|p{0.50\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 30 50
+
+    * - 分類
+      - 部品名
+      - 説明
+    * - :doc:`../ArchitectureInDetail/GeneralFuncDetail/Logging`
+      - 認証ユーザ名格納用サーブレットフィルタ
+      - トレーサビリティを向上させるために、
+        認証ユーザ名をロガーのMDCに設定するためのサーブレットフィルタクラスを提供する。
+
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Overview/SpringMVCOverview.rst b/source/Overview/SpringMVCOverview.rst
index 4833104ce6..7cc73527f1 100755
--- a/source/Overview/SpringMVCOverview.rst
+++ b/source/Overview/SpringMVCOverview.rst
@@ -1,122 +1,122 @@
-Spring MVCアーキテクチャ概要
---------------------------------
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-.. Spring MVC is explained as follows in
-
-Spring MVCは、公式で以下のように説明されている。
-
-`Spring Reference Document <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html>`_\ .
-
-     Spring's web MVC framework is, like many other web MVC frameworks, request-driven,
-     designed around a central Servlet that dispatches requests to controllers and offers other functionality
-     that facilitates the development of web applications. Spring's DispatcherServlet however, does more than just that.
-     It is completely integrated with the Spring IoC container and as such allows you to use every other feature that Spring has.
-
-Overview of Spring MVC Processing Sequence
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-.. The request processing workflow of the Spring MVC is illustrated in the following diagram.
-
-リクエストを受けてから、レスポンスを返すまでのSpring MVCの処理フローを、以下の図に示す。
-
-.. figure:: ./images/RequestLifecycle.png
-   :alt: request lifecycle
-   :width: 100%
-
-1. \ ``DispatcherServlet``\ が、リクエストを受け取る。
-2. \ ``DispatcherServlet``\ は、リクエスト処理を行う\ ``Controller``\ の選択を\ ``HandlerMapping``\ に委譲する。\ ``HandlerMapping``\ は、リクエストURLにマッピングされている\ ``Controller``\ を選定し\ ``（Choose Handler）``\ 、 \ ``Controller``\ を\ ``DispatcherServlet``\ へ返却する。
-3. \ ``DispatcherServlet`` は、\ ``Controller``\ のビジネスロジック処理の実行を\ ``HandlerAdapter``\ に委譲する。
-4. \ ``HandlerAdapter`` は、\ ``Controller``\ のビジネスロジック処理を呼び出す。
-5. \ ``Controller``\ は、ビジネスロジックを実行し、処理結果を\ ``Model``\ に設定し、ビューの論理名を\ ``HandlerAdapter``\ に返却する。
-6. \ ``DispatcherServlet``\ は、ビュー名に対応する\ ``View``\ の解決を、\ ``ViewResolver``\ に委譲する。\ ``ViewResolver``\ は、ビュー名にマッピングされている\ ``View``\ を返却する。
-7. \ ``DispatcherServlet``\ は、返却された\ ``View``\ にレンダリング処理を委譲する。
-8. \ ``View``\ は、\ ``Model``\ の持つ情報をレンダリングしてレスポンスを返却する。
-
-Implementations of each component
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-これまで説明したコンポーネントのうち、拡張可能なコンポーネントを紹介する。
-
-Implementaion of HandlerMapping
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Springから提供されている\ ``HandlerMapping``\ のクラス階層を、以下に示す。
-
-.. figure:: ./images/HandlerMapping-Hierarchy.png
-   :alt: HandlerMapping Hierarchy
-
-
-| 通常使用するのは、\ ``org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping``\ である。
-| このクラスは、Bean定義されている\ ``Contorller``\ から\ ``@RequestMapping``\ アノテーションを読み取り、
-| URLと合致する\ ``Controller``\ のメソッドをHandlerクラスとして扱うクラスである。
-
-| Spring3.1からは、\ ``RequestMappingHandlerMapping``\ は、\ ``DispatcherServlet``\ が読み込むBean定義ファイルに、
-| \ ``<mvc:annotation-driven>``\ の設定がある場合、デフォルトで設定される。
-| (\ ``<mvc:annotation-driven>``\ アノテーションで有効になる設定は、\ `Web MVC framework <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-config-enable>`_\ を参照されたい。)
-
-
-Implementaion of HandlerAdapter
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Springから提供されている\ ``HandlerAdapter``\ のクラス階層を、以下に示す。
-
-.. figure:: ./images/HandlerAdapter-Hierarchy.png
-   :alt: HandlerAdapter Hierarchy
-
-| 通常使用するのは、\ ``org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter``\ である。
-| このクラスは、\ ``HandlerMapping``\ によって選択されたHandlerクラス(\ ``Controller``\ )のメソッドを呼び出すクラスである。
-
-| このクラスもSpring3.1からは、\ ``<mvc:annotation-driven>``\ の設定がある場合、デフォルトで設定される。
-
-Implementaion of ViewResolver
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Springおよび依存ライブラリから提供されている\ ``ViewResolver``\ のクラスを、以下に示す。
-
-.. figure:: ./images/ViewResolver-Hierarchy.png
-   :alt: ViewResolver Hierarchy
-
-通常(JSPを使う場合)は、
-
-*  \ ``org.springframework.web.servlet.view.InternalResourceViewResolver``\ を使用するが、
-
-テンプレートエンジンTilesを使う場合は、
-
-* \ ``org.springframework.web.servlet.view.tiles3.TilesViewResolver``\
-
-ファイルダウンロード用にストリームを返す場合は
-
-* ``org.springframework.web.servlet.view.BeanNameViewResolver``
-
-のように、返す\ ``View``\ によって使い分ける必要がある。
-
-| 複数の種類の\ ``View``\ を扱う場合、\ ``ViewResolver``\ の定義が複数必要となるケースがある。
-| 複数の\ ``ViewResolver``\ を使う代表的な例として、ファイルのダウンロード処理が存在する画面アプリケーションが挙げられる。
-| 画面(JSP)は、\ ``InternalResourceViewResolver``\ で\ ``View``\ を解決し、
-| ファイルダウンロードは、\ ``BeanNameViewResolver``\ などを使って\ ``View``\ を解決する。
-| 詳細は\ :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`\ を参照されたい。
-
-
-Implementaion of View
-^^^^^^^^^^^^^^^^^^^^^
-
-Springおよび依存ライブラリから提供されている\ ``View``\ のクラスを、以下に示す。
-
-.. figure:: ./images/View-Hierarchy.png
-   :alt: View Hierarchy
-
-| \ ``View``\ は、返したいレスポンスの種類によって変わる。
-| JSPを返す場合、\ ``org.springframework.web.servlet.view.JstlView``\ が使用される。
-
-| Springおよび依存ライブラリから提供されていない\ ``View``\ を扱いたい場合、\ ``View``\ インタフェースを実装したクラスを拡張する必要がある。
-| 詳細は\ :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`\ を参照されたい。
-
-.. raw:: latex
-
-   \newpage
-
+Spring MVCアーキテクチャ概要
+--------------------------------
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+.. Spring MVC is explained as follows in
+
+Spring MVCは、公式で以下のように説明されている。
+
+`Spring Reference Document <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html>`_\ .
+
+     Spring's web MVC framework is, like many other web MVC frameworks, request-driven,
+     designed around a central Servlet that dispatches requests to controllers and offers other functionality
+     that facilitates the development of web applications. Spring's DispatcherServlet however, does more than just that.
+     It is completely integrated with the Spring IoC container and as such allows you to use every other feature that Spring has.
+
+Overview of Spring MVC Processing Sequence
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. The request processing workflow of the Spring MVC is illustrated in the following diagram.
+
+リクエストを受けてから、レスポンスを返すまでのSpring MVCの処理フローを、以下の図に示す。
+
+.. figure:: ./images/RequestLifecycle.png
+   :alt: request lifecycle
+   :width: 100%
+
+1. \ ``DispatcherServlet``\ が、リクエストを受け取る。
+2. \ ``DispatcherServlet``\ は、リクエスト処理を行う\ ``Controller``\ の選択を\ ``HandlerMapping``\ に委譲する。\ ``HandlerMapping``\ は、リクエストURLにマッピングされている\ ``Controller``\ を選定し\ ``（Choose Handler）``\ 、 \ ``Controller``\ を\ ``DispatcherServlet``\ へ返却する。
+3. \ ``DispatcherServlet`` は、\ ``Controller``\ のビジネスロジック処理の実行を\ ``HandlerAdapter``\ に委譲する。
+4. \ ``HandlerAdapter`` は、\ ``Controller``\ のビジネスロジック処理を呼び出す。
+5. \ ``Controller``\ は、ビジネスロジックを実行し、処理結果を\ ``Model``\ に設定し、ビューの論理名を\ ``HandlerAdapter``\ に返却する。
+6. \ ``DispatcherServlet``\ は、ビュー名に対応する\ ``View``\ の解決を、\ ``ViewResolver``\ に委譲する。\ ``ViewResolver``\ は、ビュー名にマッピングされている\ ``View``\ を返却する。
+7. \ ``DispatcherServlet``\ は、返却された\ ``View``\ にレンダリング処理を委譲する。
+8. \ ``View``\ は、\ ``Model``\ の持つ情報をレンダリングしてレスポンスを返却する。
+
+Implementations of each component
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+これまで説明したコンポーネントのうち、拡張可能なコンポーネントを紹介する。
+
+Implementaion of HandlerMapping
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Springから提供されている\ ``HandlerMapping``\ のクラス階層を、以下に示す。
+
+.. figure:: ./images/HandlerMapping-Hierarchy.png
+   :alt: HandlerMapping Hierarchy
+
+
+| 通常使用するのは、\ ``org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping``\ である。
+| このクラスは、Bean定義されている\ ``Contorller``\ から\ ``@RequestMapping``\ アノテーションを読み取り、
+| URLと合致する\ ``Controller``\ のメソッドをHandlerクラスとして扱うクラスである。
+
+| Spring3.1からは、\ ``RequestMappingHandlerMapping``\ は、\ ``DispatcherServlet``\ が読み込むBean定義ファイルに、
+| \ ``<mvc:annotation-driven>``\ の設定がある場合、デフォルトで設定される。
+| (\ ``<mvc:annotation-driven>``\ アノテーションで有効になる設定は、\ `Web MVC framework <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html#mvc-config-enable>`_\ を参照されたい。)
+
+
+Implementaion of HandlerAdapter
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Springから提供されている\ ``HandlerAdapter``\ のクラス階層を、以下に示す。
+
+.. figure:: ./images/HandlerAdapter-Hierarchy.png
+   :alt: HandlerAdapter Hierarchy
+
+| 通常使用するのは、\ ``org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter``\ である。
+| このクラスは、\ ``HandlerMapping``\ によって選択されたHandlerクラス(\ ``Controller``\ )のメソッドを呼び出すクラスである。
+
+| このクラスもSpring3.1からは、\ ``<mvc:annotation-driven>``\ の設定がある場合、デフォルトで設定される。
+
+Implementaion of ViewResolver
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Springおよび依存ライブラリから提供されている\ ``ViewResolver``\ のクラスを、以下に示す。
+
+.. figure:: ./images/ViewResolver-Hierarchy.png
+   :alt: ViewResolver Hierarchy
+
+通常(JSPを使う場合)は、
+
+*  \ ``org.springframework.web.servlet.view.InternalResourceViewResolver``\ を使用するが、
+
+テンプレートエンジンTilesを使う場合は、
+
+* \ ``org.springframework.web.servlet.view.tiles3.TilesViewResolver``\
+
+ファイルダウンロード用にストリームを返す場合は
+
+* ``org.springframework.web.servlet.view.BeanNameViewResolver``
+
+のように、返す\ ``View``\ によって使い分ける必要がある。
+
+| 複数の種類の\ ``View``\ を扱う場合、\ ``ViewResolver``\ の定義が複数必要となるケースがある。
+| 複数の\ ``ViewResolver``\ を使う代表的な例として、ファイルのダウンロード処理が存在する画面アプリケーションが挙げられる。
+| 画面(JSP)は、\ ``InternalResourceViewResolver``\ で\ ``View``\ を解決し、
+| ファイルダウンロードは、\ ``BeanNameViewResolver``\ などを使って\ ``View``\ を解決する。
+| 詳細は\ :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`\ を参照されたい。
+
+
+Implementaion of View
+^^^^^^^^^^^^^^^^^^^^^
+
+Springおよび依存ライブラリから提供されている\ ``View``\ のクラスを、以下に示す。
+
+.. figure:: ./images/View-Hierarchy.png
+   :alt: View Hierarchy
+
+| \ ``View``\ は、返したいレスポンスの種類によって変わる。
+| JSPを返す場合、\ ``org.springframework.web.servlet.view.JstlView``\ が使用される。
+
+| Springおよび依存ライブラリから提供されていない\ ``View``\ を扱いたい場合、\ ``View``\ インタフェースを実装したクラスを拡張する必要がある。
+| 詳細は\ :doc:`../ArchitectureInDetail/WebApplicationDetail/FileDownload`\ を参照されたい。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Overview/index.rst b/source/Overview/index.rst
index 02aa4e194a..6b50280081 100755
--- a/source/Overview/index.rst
+++ b/source/Overview/index.rst
@@ -1,17 +1,17 @@
-アーキテクチャ概要
-================================================================================
-
-本ガイドラインで想定しているアーキテクチャについて説明する。
-
-.. toctree::
-   :maxdepth: 1
-
-   FrameworkStack
-   SpringMVCOverview
-   FirstApplication
-   ApplicationLayering
-
-.. raw:: latex
-
-   \newpage
-
+アーキテクチャ概要
+================================================================================
+
+本ガイドラインで想定しているアーキテクチャについて説明する。
+
+.. toctree::
+   :maxdepth: 1
+
+   FrameworkStack
+   SpringMVCOverview
+   FirstApplication
+   ApplicationLayering
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/Authentication.rst b/source/Security/Authentication.rst
index c669d0ce9f..a22d5ffcf6 100755
--- a/source/Security/Authentication.rst
+++ b/source/Security/Authentication.rst
@@ -1,2802 +1,2802 @@
-.. _SpringSecurityAuthentication:
-
-認証
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-.. _SpringSecurityAuthenticationOverview:
-
-Overview
---------------------------------------------------------------------------------
-本節では、Spring Securityが提供している認証機能について説明する。
-
-認証処理は、アプリケーションを利用するユーザーの正当性を確認するための処理である。
-
-ユーザーの正当性を確認するためのもっとも標準的な方法は、アプリケーションを使用できるユーザーをデータストアに登録しておき、
-利用者が入力した認証情報（ユーザー名とパスワードなど）と照合する方法である。
-ユーザーの情報を登録しておくデータストアにはリレーショナルデータベースを利用するのが一般的だが、ディレクトリサービスや外部システムなどを利用するケースもある。
-
-また、利用者に認証情報を入力してもらう方式もいくつか存在する。
-HTMLの入力フォームを使う方式やRFCで定められているHTTP標準の認証方式(Basic認証やDigest認証など)を利用するのが一般的だが、
-OpenID認証やシングルサインオン認証などの認証方式を利用するケースもある。
-
-本節では、HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う実装例を紹介しながら、
-Spring Securityの認証機能の使い方を説明する。
-
-|
-
-認証処理のアーキテクチャ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、以下のような流れで認証処理を行う。
-
-.. figure:: ./images_Authentication/AuthenticationArchitecture.png
-    :width: 100%
-
-    **認証処理のアーキテクチャ**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | クライアントは、認証処理を行うパスに対して資格情報（ユーザー名とパスワード）を指定してリクエストを送信する。
-    * - | (2)
-      - | Authentication Filterは、リクエストから資格情報を取得して、\ ``AuthenticationManager``\ クラスの認証処理を呼び出す。
-    * - | (3)
-      - | \ ``ProviderManager``\ (デフォルトで使用される\ ``AuthenticationManager``\ の実装クラス)は、実際の認証処理を\ ``AuthenticationProvider``\ インタフェースの実装クラスに委譲する。
-
-|
-
-.. _SpringSecurityAuthenticationFilter:
-
-Authentication Filter
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Authentication Filterは、認証方式に対する実装を提供するサーブレットフィルタである。
-Spring Securityがサポートしている主な認証方式は以下の通り。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供している主なAuthentication Filter**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``UsernamePasswordAuthenticationFilter``\
-      - | フォーム認証用のサーブレットフィルタクラスで、HTTPリクエストのパラメータから資格情報を取得する。
-    * - | \ ``BasicAuthenticationFilter``\
-      - | Basic認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
-    * - | \ ``DigestAuthenticationFilter``\
-      - | Digest認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
-    * - | \ ``RememberMeAuthenticationFilter``\
-      - | Remember Me認証用のサーブレットフィルタクラスで、HTTPリクエストのCookieから資格情報を取得する。
-        | Remember Me認証を有効にすると、ブラウザを閉じたりセッションタイムアウトが発生しても、ログイン状態を保つことができる。
-
-これらのサーブレットフィルタは、 :ref:`SpringSecurityProcess`\ で紹介したAuthentication Filterの１つである。
-
-.. note::
-
-    Spring Securityによってサポートされていない認証方式を実現する必要がある場合は、
-    認証方式を実現するための\ ``Authentication Filter``\ を作成し、Spring Securityに組み込むことで実現することが可能である。
-
-|
-
-AuthenticationManager
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AuthenticationManager``\ は、認証処理を実行するためのインタフェースである。
-Spring Securityが提供するデフォルト実装(\ ``ProviderManager``\ )では、
-実際の認証処理は\ ``AuthenticationProvider``\ に委譲し、\ ``AuthenticationProvider``\ で行われた認証処理の処理結果をハンドリングする仕組みになっている。
-
-|
-
-AuthenticationProvider
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AuthenticationProvider``\ は、認証処理の実装を提供するためのインタフェースである。
-Spring Securityが提供している主な\ ``AuthenticationProvider``\の実装クラスは以下の通り。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供している主なAuthenticationProvider**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``DaoAuthenticationProvider``\
-      - | データストアに登録しているユーザーの資格情報とユーザーの状態をチェックして認証処理を行う実装クラス。
-        | チェックで必要となる資格情報とユーザーの状態は\ ``UserDetails``\ というインタフェースを実装しているクラスから取得する。
-
-.. note::
-
-    Spring Securityが提供していない認証処理を実現する必要がある場合は、
-    認証処理を実現するための\ ``AuthenticationProvider``\を作成し、Spring Securityに組み込むことで実現することが可能である。
-
-|
-
-.. _howtouse_springsecurity:
-
-How to use
---------------------------------------------------------------------------------
-
-認証機能を使用するために必要となるbean定義例や実装方法について説明する。
-
-本項では :ref:`SpringSecurityAuthenticationOverview`\ で説明したとおり、
-HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う方法について説明する。
-
-.. _form-login:
-
-フォーム認証
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、以下のような流れでフォーム認証を行う。
-
-.. figure:: ./images_Authentication/AuthenticationForm.png
-    :width: 100%
-
-    **フォーム認証の仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | クライアントは、フォーム認証を行うパスに対して資格情報（ユーザー名とパスワード）をリクエストパラメータとして送信する。
-    * - | (2)
-      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、リクエストパラメータから資格情報を取得して、\ ``AuthenticationManager``\ の認証処理を呼び出す。
-    * - | (3)
-      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、\ ``AuthenticationManager``\ から返却された認証結果をハンドリングする。
-        | 認証処理が成功した場合は \ ``AuthenticationSuccessHandler``\ のメソッドを、認証処理が失敗した場合は\ ``AuthenticationFailureHandler``\ のメソッドを呼び出し画面遷移を行う。
-
-|
-
-.. _form-login-usage:
-
-フォーム認証の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-フォーム認証を使用する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <sec:form-login />    <!-- (1) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:form-login>``\ タグを定義することで、フォーム認証が有効になる。
-
-.. tip:: **auto-config属性について**
-
-    \ ``<sec:http>``\ には、フォーム認証(\ ``<sec:form-login>``\ タグ)、Basic認証(\ ``<sec:http-basic>``\ タグ)、ログアウト(\ ``<sec:logout>``\ タグ)に対するコンフィギュレーションを自動で行うか否かを指定する\ ``auto-config``\ 属性が用意されている。
-    デフォルト値は\ ``false``\ (自動でコンフィギュレーションしない)となっており、Spring Securityのリファレンスドキュメントでもデフォルト値の使用が推奨されている。
-
-    本ガイドラインでも、明示的にタグを指定するスタイルを推奨する。
-
-     .. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-     .. list-table::
-         :header-rows: 1
-         :widths: 25 75
-
-         * - 要素名
-           - 説明
-         * - | ``<form-login>``\
-           - | フォーム認証処理を行うSecurity Filter(\ ``UsernamePasswordAuthenticationFilter``\ )が適用される。
-         * - | \ ``<http-basic>``\
-           - | RFC1945に準拠したBasic認証を行うSecurity Filter(\ ``BasicAuthenticationFilter``\ )が適用される。
-             | 詳細な利用方法は、\ `BasicAuthenticationFilterのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.html>`_\ を参照されたい。
-         * - | \ ``<logout>``\
-           - | ログアウト処理を行うSecurity Filter(\ ``LogoutFilter``\ )が適用される。
-             | ログアウト処理の詳細については、「\ :ref:`SpringSecurityAuthenticationLogout`\ 」を参照されたい。
-
-    なお、 ``auto-config``\を定義しない場合は、フォーム認証(\ ``<sec:form-login>``\ タグ)、もしくはBasic認証(\ ``<sec:http-basic>``\ タグ)を定義する必要がある。
-    これは、ひとつの\ ``SecurityFilterChain``\(\ ``<sec:http>``\)内には、ひとつ以上のAuthentication FilterのBean定義が必要であるという、Spring Securityの仕様をみたすためである。
-
-.. _form-login-default-operation:
-
-デフォルトの動作
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、\ ``"/login"``\ に対してGETメソッドでアクセスするとSpring Securityが用意しているデフォルトのログインフォームが表示され、
-ログインボタンを押下すると\ ``"/login"``\ に対してPOSTメソッドでアクセスして認証処理を行う。
-
-|
-
-.. _SpringSecurityAuthenticationLoginForm:
-
-ログインフォームの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-Spring Securityはフォーム認証用のログインフォームをデフォルトで提供しているが、そのまま利用するケースは少ない。
-ここでは、自身で作成したログインフォームをSpring Securityに適用する方法を説明する。
-
-まず、ログインフォームを表示するためのJSPを作成する。
-ここでは、Spring MVCでリクエストをうけてログインフォームを表示する際の実装例になっている。
-
-* ログインフォームを表示するためのJSPの作成例(xxx-web/src/main/webapp/WEB-INF/views/login/loginForm.jsp)
-
-.. code-block:: jsp
-
-    <%@ page contentType="text/html;charset=UTF-8" pageEncoding="UTF-8" %>
-    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-    <%-- omitted --%>
-    <div id="wrapper">
-        <h3>Login Screen</h3>
-        <%-- (1) --%>
-        <c:if test="${param.containsKey('error')}">
-            <t:messagesPanel messagesType="error"
-                messagesAttributeName="SPRING_SECURITY_LAST_EXCEPTION"/> <%-- (2) --%>
-        </c:if>
-        <form:form action="${pageContext.request.contextPath}/login" method="post"> <%-- (3) --%>
-            <table>
-                <tr>
-                    <td><label for="username">User Name</label></td>
-                    <td><input type="text" id="username" name="username"></td>
-                </tr>
-                <tr>
-                    <td><label for="password">Password</label></td>
-                    <td><input type="password" id="password" name="password"></td>
-                </tr>
-                <tr>
-                    <td>&nbsp;</td>
-                    <td><button>Login</button></td>
-                </tr>
-            </table>
-        </form:form>
-    </div>
-    <%-- omitted --%>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 認証エラーを表示するためのエリア。
-    * - | (2)
-      - | 認証エラー時に出力させる例外メッセージを出力する。
-        | 共通ライブラリで提供している\ ``<t:messagesPanel>``\ タグを使用して出力することを推奨する。
-        | \ ``<t:messagesPanel>``\ タグの使用方法については、「\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ 」を参照されたい。
-        | なお、認証エラーが発生した場合は、セッション又はリクエストスコープに\ ``"SPRING_SECURITY_LAST_EXCEPTION"``\ という属性名で例外オブジェクトが格納される。
-    * - | (3)
-      - | ユーザー名とパスワードを入力するためのログインフォーム。
-        | ここではユーザー名を\ ``username``\、パスワードを\ ``passowrd``\ というリクエストパラメータで送信する。
-        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
-        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
-
-|
-
-つぎに、作成したログインフォームをSpring Securityに適用する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-      <sec:form-login 
-          login-page="/login/loginForm"
-          login-processing-url="/login"  /> <!-- (1)(2) -->
-      <sec:intercept-url pattern="/login/**" access="permitAll"/>  <!-- (3) -->
-      <sec:intercept-url pattern="/**" access="isAuthenticated()"/> <!-- (4) -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``login-page``\ 属性にログインフォームを表示するためのパスを指定する。
-        | 匿名ユーザーが認証を必要とするWebリソースにアクセスした場合は、この属性に指定したパスにリダイレクトしてログインフォームを表示する。
-        | ここでは、Spring MVCでリクエストを受けてログインフォームを表示している。
-        | 詳細は 「:ref:`spring-security-authentication-mvc`」を参照されたい。
-    * - | (2)
-      - | \ ``login-processing-url``\ 属性に認証処理を行うためのパスを指定する。
-        | デフォルトのパスも\ ``"/login"``\ であるが、ここでは明示的に指定することとする。
-    * - | (3)
-      - | ログインフォームが格納されている\ ``/login``\ パス配下に対し、すべてのユーザーがアクセスできる権限を付与する。
-        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
-    * - | (4)
-      - | アプリケーションで扱うWebリソースに対してアクセス権を付与する。
-        | 上記例では、Webアプリケーションのルートパスの配下に対して、認証済みユーザーのみがアクセスできる権限を付与している。
-        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
-
-.. note:: **Spring Security 4.0における変更**
-
-    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
-
-    * username-parameter
-    * password-parameter
-    * login-processing-url
-    * authentication-failure-url 
-
-|
-
-.. _SpringSecurityAuthenticationScreenFlowOnSuccess:
-
-認証成功時のレスポンス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、認証成功時のレスポンスを制御するためのコンポーネントとして、
-\ ``AuthenticationSuccessHandler``\ というインタフェースと実装クラスを提供している。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **AuthenticationSuccessHandlerの実装クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - 実装クラス
-      - 説明
-    * - | \ ``SavedRequestAwareAuthenticationSuccessHandler``\
-      - | 認証前にアクセスを試みたURLにリダイレクトを行う実装クラス。
-        | **デフォルトで使用される実装クラス。**
-    * - | \ ``SimpleUrlAuthenticationSuccessHandler``\
-      - | \ ``defaultTargetUrl``\ にリダイレクト又はフォワードを行う実装クラス。
-
-デフォルトの動作
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、認証前にアクセスを拒否したリクエストをHTTPセッションに保存しておいて、
-認証が成功した際にアクセスを拒否したリクエストを復元してリダイレクトする。
-認証したユーザーにリダイレクト先へのアクセス権があればページが表示され、アクセス権がなければ認可エラーとなる。
-この動作を実現するために使用されるのが、\ ``SavedRequestAwareAuthenticationSuccessHandler``\ クラスである。
-
-ログインフォームを明示的に表示してから認証処理を行った後の遷移先はSpring Securityのデフォルトの設定では、
-Webアプリケーションのルートパス(\ ``"/"``\ )となっているため、認証成功時はWebアプリケーションのルートパスにリダイレクトされる。
-
-|
-
-.. _SpringSecurityAuthenticationScreenFlowOnFailure:
-
-認証失敗時のレスポンス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、認証失敗時のレスポンスを制御するためのコンポーネントとして、
-\ ``AuthenticationFailureHandler``\ というインタフェースと実装クラスを提供している。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **AuthenticationFailureHandlerの実装クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - 実装クラス
-      - 説明
-    * - | \ ``SimpleUrlAuthenticationFailureHandler``\
-      - | 指定したパス(\ ``defaultFailureUrl``\ )にリダイレクト又はフォワードを行う実装クラス。
-    * - | \ ``ExceptionMappingAuthenticationFailureHandler``\
-      - | 認証例外と遷移先のURLをマッピングすることができる実装クラス。
-        | Spring Securityはエラー原因毎に発生する例外クラスが異なるため、この実装クラスを使用するとエラーの種類毎に遷移先を切り替えることが可能である。
-    * - | \ ``DelegatingAuthenticationFailureHandler``\
-      - | 認証例外と\ ``AuthenticationFailureHandler``\ をマッピングすることができる実装クラス。 
-        | \ ``ExceptionMappingAuthenticationFailureHandler``\ と似ているが、認証例外毎に\ ``AuthenticationFailureHandler``\ を指定できるので、より柔軟な振る舞いをサポートすることができる。
-
-デフォルトの動作
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトする。
-
-例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?error"``\ にリダイレクトされる。
-  
-
-|
-
-DB認証
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、以下のような流れでDB認証を行う。
-
-.. figure:: ./images_Authentication/AuthenticationDatabase.png
-    :width: 100%
-
-    **DB認証の仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Spring Securityはクライアントからの認証依頼を受け、\ ``DaoAuthenticationProvider``\ の認証処理を呼び出す。
-    * - | (2)
-      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ のユーザー情報取得処理を呼び出す。
-    * - | (3)
-      - | ``UserDetailsService``\ の実装クラスは、データストアからユーザー情報を取得する。
-    * - | (4)
-      - | ``UserDetailsService``\ の実装クラスは、データストアから取得したユーザー情報から\ ``UserDetails``\ を生成する。
-    * - | (5)
-      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ から返却された\ ``UserDetails``\ とクライアントが指定した認証情報との照合を行い、クライアントが指定したユーザーの正当性をチェックする。
-
-
-.. note:: **Spring Securityが提供するDB認証**
-
-    Spring Securityは、ユーザー情報をリレーショナルデータベースからJDBC経由で取得するための実装クラスを提供している。
-
-    * \ ``org.springframework.security.core.userdetails.User``\ (\ ``UserDetails``\ の実装クラス)
-    * \ ``org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl`` \ (\ ``UserDetailsService``\ の実装クラス)
-
-    これらの実装クラスは最低限の認証処理(パスワードの照合、有効ユーザーの判定)しか行わないため、そのまま利用できるケースは少ない。
-    そのため、本ガイドラインでは、\ ``UserDetails``\ と\ ``UserDetailsService``\ の実装クラスを作成する方法について説明する。
-
-|
-
-UserDetailsの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``UserDetails``\ は、認証処理で必要となる資格情報(ユーザー名とパスワード)とユーザーの状態を提供するためのインタフェースで、以下のメソッドが定義されている。
-\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、アプリケーションの要件に合わせて\ ``UserDetails``\ の実装クラスを作成する。
-
-*UserDetailsインタフェース*
-
-.. code-block:: java
-
-    public interface UserDetails extends Serializable {
-        String getUsername(); // (1)
-        String getPassword(); // (2)
-        boolean isEnabled(); // (3)
-        boolean isAccountNonLocked(); // (4)
-        boolean isAccountNonExpired(); // (5)
-        boolean isCredentialsNonExpired(); // (6)
-        Collection<? extends GrantedAuthority> getAuthorities(); // (7)
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.25\linewidth}|p{0.65\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 25 65
-
-    * - 項番
-      - メソッド名
-      - 説明
-    * - | (1)
-      - | \ ``getUsername``\
-      - | ユーザー名を返却する。
-    * - | (2)
-      - | \ ``getPassword``\
-      - | 登録されているパスワードを返却する。
-        | このメソッドで返却したパスワードとクライアントから指定されたパスワードが一致しない場合は、\ ``DaoAuthenticationProvider``\ は\ ``BadCredentialsException``\ を発生させる。
-    * - | (3)
-      - | \ ``isEnabled``\
-      - | 有効なユーザーかを判定する。有効な場合は\ ``true``\ を返却する。
-        | 無効なユーザーの場合は、\ ``DaoAuthenticationProvider``\ は\ ``DisabledException``\ を発生させる。
-    * - | (4)
-      - | \ ``isAccountNonLocked``\
-      - | アカウントのロック状態を判定する。ロックされていない場合は\ ``true``\ を返却する。
-        | アカウントがロックされている場合は、\ ``DaoAuthenticationProvider``\ は\ ``LockedException``\ を発生させる。
-    * - | (5)
-      - | \ ``isAccountNonExpired``\
-      - | アカウントの有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
-        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``AccountExpiredException``\ を発生させる。
-    * - | (6)
-      - | \ ``isCredentialsNonExpired``\
-      - | 資格情報の有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
-        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``CredentialsExpiredException``\ を発生させる。
-    * - | (7)
-      - | \ ``getAuthorities``\
-      - | ユーザーに与えられている権限リストを返却する。
-        | このメソッドは認可処理で使用される。
-
-.. note:: **認証例外による遷移先の切り替え**
-
-    \ ``DaoAuthenticationProvider``\ が発生させる例外毎に画面遷移を切り替えたい場合は、
-    \ ``AuthenticationFailureHandler``\ として\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用すると実現することができる。
-
-    例として、ユーザーのパスワードの有効期限が切れた際にパスワード変更画面に遷移させたい場合は、
-    \ ``ExceptionMappingAuthenticationFailureHandler``\ を使って\ ``CredentialsExpiredException``\ をハンドリングすると画面遷移を切り替えることができる。
-    
-    詳細は、:ref:`SpringSecurityAuthenticationCustomizingScreenFlowOnFailure`\ を参照されたい。
-
-.. note:: **Spring Securityが提供する資格情報**
-
-    Spring Securityは、資格情報(ユーザー名とパスワード)とユーザーの状態を保持するための実装クラス(\ ``org.springframework.security.core.userdetails.User``\ )を提供してるが、
-    このクラスは認証処理に必要な情報しか保持することができない。
-    一般的なアプリケーションでは、認証処理で使用しないユーザーの情報（ユーザーの氏名など）も必要になるケースが多いため、\ ``User``\ クラスをそのまま利用できるケースは少ない。
-
-|
-
-ここでは、アカウントの情報を保持する\ ``UserDetails``\ の実装クラスを作成する。 
-本例は\ ``User``\ を継承することでも実現することができるが、\ ``UserDetails``\  を実装する方法の例として紹介している。
-
-* UserDetailsの実装クラスの作成例
-
-
-.. code-block:: java
-
-    public class AccountUserDetails implements UserDetails { // (1)
-
-        private final Account account;
-        private final Collection<GrantedAuthority> authorities;
-
-        public AccountUserDetails(
-            Account account, Collection<GrantedAuthority> authorities) {
-            // (2)
-            this.account = account;
-            this.authorities = authorities;
-        }
-
-        // (3)
-        public String getPassword() {
-            return account.getPassword();
-        }
-        public String getUsername() {
-            return account.getUsername();
-        }
-        public boolean isEnabled() {
-            return account.isEnabled();
-        }
-        public Collection<GrantedAuthority> getAuthorities() {
-            return authorities;
-        }
-
-        // (4)
-        public boolean isAccountNonExpired() {
-            return true;
-        }
-        public boolean isAccountNonLocked() {
-            return true;
-        }
-        public boolean isCredentialsNonExpired() {
-            return true;
-        }
-
-        // (5)
-        public Account getAccount() {
-            return account;
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``UserDetails``\ インタフェースを実装したクラスを作成する。
-    * - | (2)
-      - | ユーザー情報と権限情報をプロパティに保持する。
-    * - | (3)
-      - | \ ``UserDetails``\ インタフェースに定義されているメソッドを実装する。
-    * - | (4)
-      - | 本節の例では、「アカウントのロック」「アカウントの有効期限切れ」「資格情報の有効期限切れ」に対するチェックは未実装であるが、要件に合わせて実装されたい。
-    * - | (5)
-      - | 認証処理成功後の処理でアカウント情報にアクセスできるようにするために、getterメソッドを用意する。
-
-|
-
-Spring Securityは、\ ``UserDetails``\ の実装クラスとして\ ``User``\ クラスを提供している。
-\ ``User``\ クラスを継承すると資格情報とユーザーの状態を簡単に保持することができる。
-
-* Userクラスを継承したUserDetails実装クラスの作成例
-
-.. code-block:: java
-
-    public class AccountUserDetails extends User {
-
-        private final Account account;
-
-        public AccountUserDetails(Account account, boolean accountNonExpired,
-                boolean credentialsNonExpired, boolean accountNonLocked,
-                Collection<GrantedAuthority> authorities) {
-            super(account.getUsername(), account.getPassword(),
-                    account.isEnabled(), true, true, true, authorities);
-            this.account = account;
-        }
-
-        public Account getAccount() {
-            return account;
-        }
-    }
-
-|
-
-.. _SpringSecurityAuthenticationUserDetailsService:
-
-UserDetailsServiceの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``UserDetailsService``\ は、認証処理で必要となる資格情報とユーザーの状態をデータストア
-から取得するためのインタフェースで、以下のメソッドが定義されている。
-\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、
-アプリケーションの要件に合わせて\ ``UserDetailsService``\ の実装クラスを作成する。
-
-* UserDetailsServiceインタフェース
-
-.. code-block:: java
-
-    public interface UserDetailsService {
-        UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
-    }
-
-|
-
-ここでは、データベースからアカウント情報を検索して、\ ``UserDetails``\ のインスタンス
-を生成するためのサービスクラスを作成する。
-本サンプルでは、\ ``SharedService``\ を使用して、アカウント情報を取得している。
-\ ``SharedService``\ については、:ref:`service-label`\ を参照されたい。
-
-* AccountSharedServiceインタフェースの作成例
-
-.. code-block:: java
-
-    public interface AccountSharedService {
-        Account findOne(String username);
-    }
-
-* AccountSharedServiceの実装クラスの作成例
-
-.. code-block:: java
-
-    // (1)
-    @Service
-    @Transactional
-    public class AccountSharedServiceImpl implements AccountSharedService {
-        @Inject
-        AccountRepository accountRepository;
-
-        // (2)
-        @Override
-        public Account findOne(String username) {
-            Account account = accountRepository.findOneByUsername(username);
-            if (account == null) {
-                throw new ResourceNotFoundException("The given account is not found! username="
-                        + username);
-            }
-            return account;
-        }
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``AccountSharedService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
-        | 上記例では、コンポーネントスキャン機能を使って\ ``AccountSharedServiceImpl``\ をDIコンテナに登録している。
-    * - |  (2)
-      - | データベースからアカウント情報を検索する。
-        | アカウント情報が見つからない場合は、共通ライブラリの例外である\ ``ResourceNotFoundException``\ を発生させる。
-        | Repositoryの作成例については、「:doc:`../Tutorial/TutorialSecurity`」を参照されたい。
-
-* UserDetailsServiceの実装クラスの作成例
-
-.. code-block:: java
-
-    // (1)
-    @Service
-    @Transactional
-    public class AccountUserDetailsService implements UserDetailsService {
-        @Inject
-        AccountSharedService accountSharedService;
-
-        public UserDetails loadUserByUsername(String username)
-                throws UsernameNotFoundException {
-
-            try {
-                Account account = accountSharedService.findOne(username);
-                // (2)
-                return new AccountUserDetails(account, getAuthorities(account));
-            } catch (ResourceNotFoundException e) {
-                // (3)
-                throw new UsernameNotFoundException("user not found", e);
-            }
-        }
-
-        // (4)
-        private Collection<GrantedAuthority> getAuthorities(Account account) {
-            if (account.isAdmin()) {
-                return AuthorityUtils.createAuthorityList("ROLE_USER", "ROLE_ADMIN");
-            } else {
-                return AuthorityUtils.createAuthorityList("ROLE_USER");
-            }
-        }
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``UserDetailsService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
-        | 上記例では、コンポーネントスキャン機能を使って\ ``UserDetailsService``\ をDIコンテナに登録している。
-    * - | (2)
-      - | \ ``AccountSharedService``\ を使用してアカウント情報を取得する。
-        | アカウント情報が見つかった場合は、\ ``UserDetails``\ を生成する。
-        | 上記例では、ユーザー名、パスワード、ユーザーの有効状態をアカウント情報から取得している。
-    * - | (3)
-      - | アカウント情報が見つからない場合は、\ ``UsernameNotFoundException``\ を発生させる。
-    * - | (4)
-      - | ユーザーが保持する権限(ロール)情報を生成する。ここで生成した権限(ロール)情報は、認可処理で使用される。
-
-.. note:: **認可で使用する権限情報**
-
-    Spring Securityの認可処理は、\ ``"ROLE_"``\ で始まる権限情報をロールとして扱う。
-    そのため、ロールを使用してリソースへのアクセス制御を行う場合は、 ロールとして扱う権限情報に\ ``"ROLE_"``\ プレフィックスを付与する必要がある。
-
-.. note:: **認証例外情報の隠蔽**
-
-    Spring Securityのデフォルトの動作では、\ ``UsernameNotFoundException``\ は\ ``BadCredentialsException``\ という例外に変換してからエラー処理を行う。
-    \ ``BadCredentialsException``\ は、クライアントから指定された資格情報のいずれかの項目に誤りがあることを通知するための例外であり、具体的なエラー理由がクライアントに通知されることはない。
-
-|
-
-.. _AuthenticationProviderConfiguration:
-
-DB認証の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-作成した\ ``UserDetailsService``\ を使用して認証処理を行うためには、
-\ ``DaoAuthenticationProvider``\ を有効化して、作成した\ ``UserDetailsService``\ を適用する必要がある。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:authentication-manager> <!-- (1) -->
-        <sec:authentication-provider user-service-ref="accountUserDetailsService"> <!-- (2) -->
-            <sec:password-encoder ref="passwordEncoder" /> <!-- (3) -->
-        </sec:authentication-provider>
-    </sec:authentication-manager>
-
-    <bean id="passwordEncoder"
-        class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> <!-- (4) -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``AuthenticationManager``\ をbean定義する。
-    * - | (2)
-      - | \ ``<sec:authentication-manager>``\ 要素内に ``<sec:authentication-provider>``\ 要素を定義する。
-        | ``user-service-ref``\ 属性に「:ref:`SpringSecurityAuthenticationUserDetailsService`」で作成した ``AccountUserDetailsService``\ のbeanを指定する。
-        | 本定義により、デフォルト設定の\ ``DaoAuthenticationProvider``\ が有効になる。
-    * - | (3)
-      - | パスワード照合時に使用する\ ``PasswordEncoder``\ のbeanを指定する。
-    * - | (4)
-      - | パスワード照合時に使用する\ ``PasswordEncoder``\ をBean定義する。
-        | 上記例では、パスワードをBCryptアルゴリズムでハッシュ化する\ ``BCryptPasswordEncoder``\ を定義している。
-        | パスワードのハッシュ化については、「:ref:`SpringSecurityAuthenticationPasswordHashing`」を参照されたい。
-
-|
-
-.. _SpringSecurityAuthenticationPasswordHashing:
-
-パスワードのハッシュ化
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-パスワードをデータベースなどに保存する場合は、パスワードそのものではなくパスワードの
-ハッシュ値を保存するのが一般的である。
-
-Spring Securityは、パスワードをハッシュ化するためのインタフェースと実装クラスを
-提供しており、認証機能と連携して動作する。
-
-Spring Securityが提供するインタフェースには、以下の2種類がある。
-
-* \ ``org.springframework.security.crypto.password.PasswordEncoder``\
-* \ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
-
-どちらも\ ``PasswordEncoder``\ という名前のインタフェースであるが、
-\ ``org.springframework.security.authentication.encoding``\ パッケージの\ ``PasswordEncoder``\
-は非推奨になっている。
-パスワードのハッシュ化要件に制約がない場合は、\ ``org.springframework.security.crypto.password``\
-パッケージの\ ``PasswordEncoder``\ インタフェースの実装クラスを使用することを推奨する。
-
-.. note::
-
-    非推奨の\ ``PasswordEncoder``\ の利用方法については、
-    「:ref:`AuthenticationHowToExtendUsingDeprecatedPasswordEncoder`」を参照されたい。
-
-|
-
-*org.springframework.security.crypto.password.PasswordEncoderのメソッド定義*
-
-.. code-block:: java
-
-    public interface PasswordEncoder {
-        String encode(CharSequence rawPassword);
-        boolean matches(CharSequence rawPassword, String encodedPassword);
-    }
-
-.. tabularcolumns:: |p{0.15\linewidth}|p{0.85\linewidth}|
-.. list-table:: **PasswordEncoderに定義されているメソッド**
-    :header-rows: 1
-    :widths: 15 85
-
-    * - メソッド名
-      - 説明
-    * - | \ ``encode``\
-      - | パスワードをハッシュ化するためのメソッド。
-        | アカウントの登録処理やパスワード変更処理などでデータストアに保存するパスワードをハッシュ化する際に使用できる。
-    * - | \ ``matches``\
-      - | 平文のパスワードとハッシュ化されたパスワードを照合するためのメソッド。
-        | このメソッドはSpring Securityの認証処理でも利用されるが、パスワード変更処理などで現在のパスワードや過去に使用していたパスワードと照合する際にも使用できる。
-
-|
-
-Spring Securityは、\ ``PasswordEncoder``\ インタフェースの実装クラスとして、以下のクラスを提供している。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **PasswordEncoderの実装クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - 実装クラス
-      - 説明
-    * - | \ ``BCryptPasswordEncoder``\
-      - | BCryptアルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
-        | **パスワードのハッシュ化要件に制約がない場合は、このクラスを使用することを推奨する。**
-        | 詳細は、\ `BCryptPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html>`_\ を参照されたい。
-    * - | \ ``StandardPasswordEncoder``\
-      - | SHA-256アルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
-        | 詳細は、\ `StandardPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/password/StandardPasswordEncoder.html>`_\ を参照されたい。
-    * - | \ ``NoOpPasswordEncoder``\
-      - | ハッシュ化しない実装クラス。
-        | テスト用のクラスなであり、実際のアプリケーションで使用することはない。
-
-本節では、Spring Securityが利用を推奨している\ ``BCryptPasswordEncoder``\ の使い方について説明する。
-
-|
-
-BCryptPasswordEncoder
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``BCryptPasswordEncoder``\ は、BCryptアルゴリズムを使用してパスワードのハッシュ化及びパスワードの照合を行う実装クラスである。
-:ref:`ソルト<SpringSecurityAuthenticationPasswordHashSalt>` には16バイトの乱数(\ ``java.security.SecureRandom``\ )が使用され、
-デフォルトでは1,024(2の10乗)回 :ref:`ストレッチング<SpringSecurityAuthenticationPasswordHashStength>` を行う。
-
-* applicationContext.xmlの定義例
-
-.. code-block:: xml
-
-  <bean id="passwordEncoder"
-      class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" > <!-- (1) -->
-      <constructor-arg name="strength" value="11" /> <!-- (2) -->
-  </bean>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | passwordEncoderのクラスに\ ``BCryptPasswordEncoder``\ を指定する。
-    * - | (2)
-      - | コンストラクタの引数に、ハッシュ化のストレッチング回数のラウンド数を指定する。
-        | 本引数は省略可能であり、指定できる値は\ ``4``\から\ ``31``\ である。
-        | なお、未指定時のデフォルト値は\ ``10``\ である。
-        | 本ガイドラインでは説明を省略するが、コンストラクタ引数として\ ``java.security.SecureRandom.SecureRandom``\ を指定することも可能である。
-
-.. warning:: **SecureRandomの使用について**
-  
-    Linux環境で\ ``SecureRandom``\ を使用する場合、処理の遅延やタイムアウトが発生する場合がある。
-    これは使用する乱数生成器に左右される事象であり、以下のJava Bug Databaseに説明がある。
-  
-    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
-  
-    JDK 7のb20以降のバージョンでは、修正されている。
-  
-    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6521844
-  
-    本事象が発生する場合は、JVMのシステムプロパティに以下の設定を追加することで回避することができる。
-  
-    * ``-Djava.security.egd=file:/dev/./urandom``
-
-|
-
-\ ``BCryptPasswordEncoder``\ を使用して処理を行うクラスでは、\ ``PasswordEncoder``\ をDIコンテナからインジェクションして使用する。
-
-.. code-block:: java
-
-    @Service
-    @Transactional
-    public class AccountServiceImpl implements AccountService {
-
-        @Inject
-        AccountRepository accountRepository;
-
-        @Inject
-        PasswordEncoder passwordEncoder; // (1)
-
-        public Account register(Account account, String rawPassword) {
-            // omitted
-            String encodedPassword = passwordEncoder.encode(rawPassword); // (2)
-            account.setPassword(encodedPassword);
-            // omitted
-            return accountRepository.save(account);
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``PasswordEncoder``\ をインジェクションする。
-    * - | (2)
-      - | インジェクションした\ ``PasswordEncoder``\ のメソッドを呼び出す。
-        | ここでは、データストアに保存するパスワードをハッシュ化していいる。
-
-.. _SpringSecurityAuthenticationPasswordHashSalt:
-
-.. note:: **ソルト**
-
-    ハッシュ化対象のデータに追加する文字列のことである。
-    ソルトをパスワードに付与することで、実際のパスワードより桁数が長くなるため、レインボークラックなどのパスワード解析を困難にすることができる。
-    なお、**ソルトはユーザーごとに異なる値（ランダム値等）を設定することを推奨する。**
-    これは、同じソルトを使用していると、ハッシュ値からハッシュ化前の文字列(パスワード)がわかってしまう可能性があるためである。
-
-.. _SpringSecurityAuthenticationPasswordHashStength:
-
-.. note:: **ストレッチング**
-
-    ハッシュ関数の計算を繰り返し行うことで、保管するパスワードに関する情報を繰り返し暗号化することである。
-    パスワードの総当たり攻撃への対策として、パスワード解析に必要な時間を延ばすために行う。
-    しかし、ストレッチングはシステムの性能に影響を与えるので、システムの性能を考慮してストレッチング回数を決める必要がある。
-
-    Spring Securityのデフォルトでは1,024(2の10乗)回ストレッチングを行うが、この回数はコンストラクタ引数(\ ``strength``\ )で変更することができる。
-    \ ``strength``\ には4(16回)から31(2,147,483,648回)を指定することが可能である。
-    ストレッチング回数が多いほどパスワードの強度は増すが、計算量が多くなるため性能にあたえる影響も大きくなる。
-
-|
-
-.. _SpringSecurityAuthenticationEvent:
-
-認証イベントのハンドリング
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、Spring Frameworkが提供しているイベント通知の仕組みを利用して、
-認証処理の処理結果を他のコンポーネントと連携する仕組みを提供している。
-
-この仕組みを利用すると、以下のようなセキュリティ要件をSpring Securityの認証機能に組み込むことが可能である。
-
-* 認証成功、失敗などの認証履歴をデータベースやログに保存する。
-* パスワードを連続して間違った場合にアカウントをロックする。
-
-認証イベントの通知は、以下のような仕組みで行われる。
-
-.. figure:: ./images_Authentication/AuthenticationEventNotification.png
-    :width: 100%
-
-    **イベント通知の仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Spring Securityの認証機能は、認証結果(認証情報や認証例外)を
-        | \ ``AuthenticationEventPublisher``\ に渡して認証イベントの通知依頼を行う。
-    * - | (2)
-      - | \ ``AuthenticationEventPublisher``\ インタフェースのデフォルトの実装クラスは
-        | \ 認証結果に対応する認証イベントクラスのインスタンスを生成し、\ ``ApplicationEventPublisher``\ に渡してイベントの通知依頼を行う。
-    * - | (3)
-      - | \ ``ApplicationEventPublisher``\ インタフェースの実装クラスは、\ ``ApplicationListener``\ インタフェースの実装クラスにイベントを通知する。
-    * - | (4)
-      - | ``ApplicationListener``\ の実装クラスの一つである\ ``ApplicationListenerMethodAdaptor``\ は、
-        | \ ``@org.springframework.context.event.EventListener``\ が付与されているメソッドを呼び出してイベントを通知する。
-
-.. note:: **メモ**
-
-    Spring 4.1までは\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取る必要があったが、
-    Spring 4.2からはPOJOに\ ``@EventListener``\ を付与したメソッドを実装するだけでイベントを受け取ることが可能である。
-    なお、Spring 4.2以降でも、従来通り\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取ることもで可能である。
-
-Spring Security使用しているイベントは、認証が成功したことを通知するイベントと認証が失敗したことを通知するイベントの2種類に分類される。
-以下にSpring Securityが用意しているイベントクラスを説明する。
-
-|
-
-認証成功イベント
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証が成功した時にSpring Securityが通知する主なイベントは以下の3つである。
-この3つのイベントは途中でエラーが発生しなければ、以下の順番ですべて通知される。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **認証が成功したことを通知するイベントクラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - イベントクラス
-      - 説明
-    * - \ ``AuthenticationSuccessEvent``\
-      - \ ``AuthenticationProvider``\ による認証処理が成功したことを通知するためのイベントクラス。
-        このイベントをハンドリングすると、クライアントが正しい認証情報を指定したことを検知することが可能である。
-        なお、このイベントをハンドリングした後の後続処理でエラーが発生する可能性がある点に注意されたい。
-    * - \ ``SessionFixationProtectionEvent``\
-      - セッション固定攻撃対策の処理(セッションIDの変更処理)が成功したことを通知するためのイベントクラス。
-        このイベントをハンドリングすると、変更後のセッションIDを検知することがで可能になる。
-    * - \ ``InteractiveAuthenticationSuccessEvent``\
-      - 認証処理がすべて成功したことを通知するためのイベントクラス。
-        このイベントをハンドリングすると、画面遷移を除くすべての認証処理が成功したことを検知することが可能になる。
-
-|
-
-認証失敗イベント
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証が失敗した時にSpring Securityが通知する主なイベントは以下の通り。
-認証に失敗した場合は、いずれか一つのイベントが通知される。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **認証が失敗したことを通知するイベントクラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - イベントクラス
-      - 説明
-    * - | \ ``AuthenticationFailureBadCredentialsEvent``\
-      - | \ ``BadCredentialsException``\ が発生したことを通知するためのイベントクラス。
-    * - | \ ``AuthenticationFailureDisabledEvent``\
-      - | \ ``DisabledException``\ が発生したことを通知するためのイベントクラス。
-    * - | \ ``AuthenticationFailureLockedEvent``\
-      - | \ ``LockedException``\ が発生したことを通知するためのイベントクラス。
-    * - | \ ``AuthenticationFailureExpiredEvent``\
-      - | \ ``AccountExpiredException``\ が発生したことを通知するためのイベントクラス。
-    * - | \ ``AuthenticationFailureCredentialsExpiredEvent``\
-      - | \ ``CredentialsExpiredException``\ が発生したことを通知するためのイベントクラス。
-    * - | \ ``AuthenticationFailureServiceExceptionEvent``\
-      - | \ ``AuthenticationServiceException``\ が発生したことを通知するためのイベントクラス。
-
-|
-
-イベントリスナの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証イベントの通知を受け取って処理を行いたい場合は、\ ``@EventListener``\ を付与したメソッドを実装したクラスを作成し、DIコンテナに登録する。
-
-* イベントリスナクラスの実装例
-
-.. code-block:: java
-
-    @Component
-    public class AuthenticationEventListeners {
-
-        private static final Logger log =
-                LoggerFactory.getLogger(AuthenticationEventListeners.class);
-
-    @EventListener // (1) 
-    public void handleBadCredentials( 
-        AuthenticationFailureBadCredentialsEvent event) { // (2) 
-        log.info("Bad credentials is detected. username : {}", event.getAuthentication().getName()); 
-        // omitted 
-    } 
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | ``@EventListener``\ をメソッドに付与したメソッドを作成する。
-    * - | (2)
-      - | メソッドの引数にハンドリングしたい認証イベントクラスを指定する。
-
-上記例では、クライアントが指定した認証情報に誤りがあった場合に通知される\ ``AuthenticationFailureBadCredentialsEvent``\ をハンドリングするクラスを作成する例としているが、
-他のイベントも同じ要領でハンドリングすることが可能である。
-
-|
-
-.. _SpringSecurityAuthenticationLogout:
-
-ログアウト
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、以下のような流れでログアウト処理を行いう。
-
-.. figure:: ./images_Authentication/AuthenticationLogout.png
-    :width: 100%
-
-    **ログアウト処理の仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | クライアントは、ログアウト処理を行うためのパスにリクエストを送信する。
-    * - | (2)
-      - | \ ``LogoutFilter``\ は、\ ``LogoutHandler``\ のメソッドを呼び出し、実際のログアウト処理を行う。
-    * - | (3)
-      - | \ ``LogoutFilter``\ は、\ ``LogoutSuccessHandler``\ のメソッドを呼び出し、画面遷移を行う。
-
-|
-
-\ ``LogoutHandler``\ の実装クラスは複数存在し、それぞれ以下の役割をもっている。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **主なLogoutHandlerの実装クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - 実装クラス
-      - 説明
-    * - | \ ``SecurityContextLogoutHandler``\
-      - | ログインユーザーの認証情報のクリアとセッションの破棄を行うクラス。
-    * - | \ ``CookieClearingLogoutHandler``\
-      - | 指定したクッキーを削除するためのレスポンスを行うクラス。
-    * - | \ ``CsrfLogoutHandler``\
-      - | CSRF対策用トークンの破棄を行うクラス。
-
-これらの\ ``LogoutHandler``\ は、Spring Securityが提供しているbean定義をサポートするクラスが自動で\ ``LogoutFilter``\ に設定する仕組みになっているため、
-基本的にはアプリケーションの開発者が直接意識する必要はない。
-また、:ref:`Remember Me認証機能<SpringSecurityAuthenticationRememberMe>` を有効にすると、Remember Me認証用のTokenを破棄するための\ ``LogoutHandler``\ の実装クラスも設定される。
-
-|
-
-ログアウト処理の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ログアウト処理を適用するためには、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <!-- omitted -->
-      <sec:logout /> <!-- (1) -->
-      <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:logout>``\ タグを定義することで、ログアウト処理が有効となる。
-
-.. note:: **Spring Security 4.0における変更**
-
-    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
-
-    * logout-url 
-
-.. tip:: **Cookieの削除**
-
-   本ガイドラインでは説明を割愛するが、 \ ``<sec:logout>``\ タグには、ログアウト時に指定したCookieを削除するための\ ``delete-cookies``\ 属性が存在する。
-   ただし、この属性を使用しても正常にCookieが削除できないケースが報告されている。
-
-   詳細はSpring Securityの以下のJIRAを参照されたい。
-
-   * https://jira.spring.io/browse/SEC-2091
-
-デフォルトの動作
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、\ ``"/logout"``\ というパスにリクエストを送るとログアウト処理が行われる。
-ログアウト処理では、「ログインユーザーの認証情報のクリア」「セッションの破棄」が行われる。
-
-また、
-
-* CSRF対策を行っている場合は、「CSRF対策用トークンの破棄」
-* Remember Me認証機能を使用している場合は、「Remember Me認証用のTokenの破棄」
-
-も行われる
-
-.. _SpringSecurityAuthenticationLogoutForm:
-
-* ログアウト処理を呼び出すためのJSPの実装例
-
-.. code-block:: jsp
-
-    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-    <%-- omitted --%>
-    <form:form action="${pageContext.request.contextPath}/logout" method="post"> <%-- (1) --%>
-        <button>ログアウト</button>
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | ログアウト用のフォームを作成する。
-        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
-        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
-
-.. note:: **CSRFトークンの送信**
-
-    CSRF対策を有効にしている場合は、CSRF対策用のトークンをPOSTメソッドを使って送信する必要がる。
-
-|
-
-ログアウト成功時のレスポンス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、ログアウト成功時のレスポンスを制御するためのコンポーネントとして、
-\ ``LogoutSuccessHandler``\ というインタフェースと実装クラスを提供している。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **AuthenticationFailureHandlerの実装クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - 実装クラス
-      - 説明
-    * - | \ ``SimpleUrlLogoutSuccessHandler``\
-      - | 指定したパス(\ ``defaultTargetUrl``\ )にリダイレクトを行う実装クラス。
-
-
-デフォルトの動作
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"logout"``\
-というクエリパラメータが付与されたURLにリダイレクトする。
-
-例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?logout"``\
-にリダイレクトされる。
-
-|
-
-.. _SpringSecurityAuthenticationAccess:
-
-認証情報へのアクセス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-認証されたユーザーの認証情報は、Spring Securityのデフォルト実装ではセッションに格納される。
-セッションに格納された認証情報は、リクエスト毎に\ ``SecurityContextPersistenceFilter``\ クラスによって\ ``SecurityContextHolder``\ というクラスに格納され、同一スレッド内であればどこからでもアクセスすることができるようになる。
-
-ここでは、認証情報から\ ``UserDetails``\ を取得し、取得した\ ``UserDetails``\ が保持している情報にアクセスする方法を説明する。
-
-Javaからのアクセス
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-一般的な業務アプリケーションでは、「いつ」「誰が」「どのデータに」「どのようなアクセスをしたか」を記録する監査ログを取得することがある。
-このような要件を実現する際の「誰が」は、認証情報から取得することができる。
-
-* Javaから認証情報へアクセスする実装例
-
-.. code-block:: java
-
-    Authentication authentication =
-            SecurityContextHolder.getContext().getAuthentication(); // (1)
-    String userUuid = null;
-    if (authentication.getPrincipal() instanceof AccountUserDetails) {
-        AccountUserDetails userDetails =
-                AccountUserDetails.class.cast(authentication.getPrincipal()); // (2)
-        userUuid = userDetails.getAccount().getUserUuid(); // (3)
-    }
-    if (log.isInfoEnabled()) {
-        log.info("type:Audit\tuserUuid:{}\tresource:{}\tmethod:{}",
-                userUuid, httpRequest.getRequestURI(), httpRequest.getMethod());
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``SecurityContextHolder``\ から認証情報(\ ``Authentication``\ オブジェクト) を取得する。
-    * - | (2)
-      - | \ ``Authentication#getPrincipal()``\ メソッドを呼び出して、\ ``UserDetails``\ オブジェクトを取得する。
-        | 認証済みでない場合(匿名ユーザーの場合)は、匿名ユーザーであることを示す文字列が返却されるため注意されたい。
-    * - | (3)
-      - | \ ``UserDetails``\ から処理に必要な情報を取得する。
-        | ここでは、ユーザーを一意に識別するための値(UUID)を取得している。
-
-.. warning:: **認証情報へのアクセスと結合度**
-
-    Spring Securityのデフォルト実装では、認証情報をスレッドローカルの変数に格納しているため、リクエストを受けたスレッドと同じスレッドであればどこからでもアクセス可能である。
-    この仕組みは便利ではあるが、認証情報を必要とするクラスが\ ``SecurityContextHolder``\ クラスに直接依存してしまうため、乱用するとコンポーネントの疎結合性が低下するので注意が必要である。
-
-    Spring Securityでは、Spring MVCの機能と連携してコンポーネント間の疎結合性を保つための仕組みを別途提供している。
-    Spring MVCとの連携方法については、「:ref:`SpringSecurityAuthenticationIntegrationWithSpringMVC`」で説明する。
-    **本ガイドラインではSpring MVCとの連携を使用して認証情報を取得することを推奨する。**
-
-|
-
-JSPからのアクセス
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-一般的なWebアプリケーションでは、ログインユーザーのユーザー情報などを画面に表示することがある。
-このような要件を実現する際のログインユーザーのユーザー情報は、認証情報から取得することができる。
-
-* JSPから認証情報へアクセスする実装例
-
-.. code-block:: jsp
-
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-    <%-- omitted --%>
-    ようこそ、
-    <sec:authentication property="principal.account.lastName"/> <%-- (1) --%>
-    さん。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Spring Securityから提供されている\ ``<sec:authentication>``\ タグを使用して、認証情報(\ ``Authentication``\ オブジェクト) を取得する。
-        | \ ``property``\ 属性にアクセスしたいプロパティへのパスを指定する。
-        | ネストしているオブジェクトへアクセスしたい場合は、プロパティ名を\ ``"."``\ でつなげればよい。
-
-.. tip:: **認証情報の表示方法**
-
-    ここでは、認証情報が保持するユーザー情報を表示する際の実装例を説明したが、\ ``var``\ 属性と\ ``scope``\ 属性を組み合わせて任意のスコープ変数に値を格納することも可能である。
-    ログインユーザーの状態によって表示内容を切り替えたい場合は、ユーザー情報を変数に格納しておき、JSTLのタグライブラリなどを使って表示を切り替えることが可能である。
-
-    上記の例は、以下のように記述することでも実現することができる。
-    本例では、\ ``scope``\ 属性を省略しているため、\ ``page``\スコープが適用される。
-
-        .. code-block:: jsp
-
-            <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-            <%-- omitted --%>
-            <sec:authentication var="principal" property="principal"/>
-            <%-- omitted --%>
-            ようこそ、
-            ${f:h(principal.account.lastName)}
-            さん。
-
-|
-
-.. _SpringSecurityAuthenticationIntegrationWithSpringMVC:
-
-認証処理とSpring MVCの連携
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
-ここでは、認証処理と連携するためのコンポーネントの使い方を説明する。
-
-認証情報へのアクセス
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、認証情報(\ ``UserDetails``\ )をSpring MVCのコントローラーのメソッドに引き渡すためのコンポーネントとして、\ ``AuthenticationPrincipalArgumentResolver``\ クラスを提供している。
-\ ``AuthenticationPrincipalArgumentResolver``\ を使用すると、コントローラーのメソッド引数として\ ``UserDetails``\ インタフェースまたはその実装クラスのインスタンスを受け取ることができるため、コンポーネントの疎結合性を高めることができる。
-
-認証情報(\ ``UserDetails``\ )をコントローラーの引数として受け取るためには、まず\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する必要がある。
-\ ``AuthenticationPrincipalArgumentResolver``\ を適用するためのbean定義は以下の通りである。
-\ なお、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ には\ ``AuthenticationPrincipalArgumentResolver``\ が設定済みである。
-
-* spring-mvc.xmlの定義例
-
-.. code-block:: xml
-
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <!-- omitted -->
-            <!-- (1) -->
-            <bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
-            <!-- omitted -->
-        </mvc:argument-resolvers>
-  </mvc:annotation-driven>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``HandlerMethodArgumentResolver``\ の実装クラスとして、\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する。
-
-|
-
-認証情報(\ ``UserDetails``\ )をコントローラーのメソッドで受け取る際は、以下のようなメソッドを作成する。
-
-* 認証情報(UserDetails)を受け取るメソッドの作成例
-
-.. code-block:: java
-
-    @RequestMapping("account")
-    @Controller
-    public class AccountController {
-
-        public String view(
-                @AuthenticationPrincipal AccountUserDetails userDetails, // (1)
-                Model model) {
-            model.addAttribute(userDetails.getAccount());
-            return "profile";
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 認証情報(\ ``UserDetails``\ ) を受け取るための引数を宣言し、\ ``@org.springframework.security.core.annotation.AuthenticationPrincipal``\を引数アノテーションとして指定する。
-        | \ ``AuthenticationPrincipalArgumentResolver``\ は、\ ``@AuthenticationPrincipal``\ が付与されている引数に認証情報(\ ``UserDetails``\ )が設定される。
-
-|
-
-.. _SpringSecurityAuthenticationHowToExtend:
-
-How to extend
---------------------------------------------------------------------------------
-
-本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
-
-Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントを紹介することはできないため、ここでは代表的なカスタマイズポイントに絞って説明を行う。
-
-|
-
-.. _SpringSecurityAuthenticationCustomizingForm:
-
-フォーム認証のカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-フォーム認証処理のカスタマイズポイントを説明する。
-
-認証パスの変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトでは、認証処理を実行するためのパスは「\ ``"/login"``\」であるが、
-以下のようなbean定義を行うことで変更することが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-    <sec:form-login login-processing-url="/authentication" /> <!-- (1) --> 
-    <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``login-processing-url``\ 属性に認証処理を行うためのパスを指定する。
-
-.. note::
-
-    認証処理のパスを変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` のリクエスト先も変更する必要がある。
-
-|
-
-資格情報を送るリクエストパラメータ名の変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトでは、資格情報(ユーザー名とパスワード)を送るためのリクエストパラメータは「\ ``username``\」と「\ ``password``\ 」であるが、
-以下のようなbean定義を行うことで変更することが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <sec:form-login
-          username-parameter="uid"
-          password-parameter="pwd" /> <!-- (1) (2) -->
-      <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``username-parameter``\ 属性にユーザー名のリクエストパラメータ名を指定する。
-    * - | (2)
-      - | \ ``password-parameter``\ 属性にパスワードのリクエストパラメータ名を指定する。
-
-.. note::
-
-    リクエストパラメータ名を変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` 内の項目名も変更する必要がある。
-
-|
-
-認証成功時のレスポンスのカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-認証成功時のレスポンスのカスタマイズポイントを説明する。
-
-デフォルト遷移先の変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ログインフォームを自分で表示して認証処理を行った後の遷移先(デフォルトURL)は、
-Webアプリケーションのルートパス(\ ``"/"``\ )だが、以下のようなbean定義を行うことで変更することが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <sec:form-login default-target-url="/menu" /> <!-- (1) -->
-  </sec:http>
-
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``default-target-url``\ 属性に認証成功時に遷移するデフォルトのパスを指定する。
-
-|
-
-遷移先の固定化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、未認証時に認証が必要なページへのリクエストを受信した場合は、受信したリクエストを一旦HTTPセッションに保存し、認証ページに遷移する。
-認証成功時にリクエストを復元してリダイレクトするが、以下のようなbean定義を行うことで常に同じ画面に遷移させることが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <sec:form-login
-          default-target-url="/menu"
-          always-use-default-target="true" /> <!-- (1) -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``always-use-default-target``\ 属性に\ ``true``\ を指定する。
-
-|
-
-AuthenticationSuccessHandlerの適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
-以下のようなbean定義を行うことで\ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスを直接適用することができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <bean id="authenticationSuccessHandler" class="com.example.app.security.handler.MyAuthenticationSuccessHandler"> <!-- (1) -->
-
-  <sec:http>
-      <sec:form-login authentication-success-handler-ref="authenticationSuccessHandler" /> <!-- (2) -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスをbean定義する。
-    * - | (2)
-      - | ``authentication-success-handler-ref``\ 属性に定義した\ ``authenticationSuccessHandler``\ を指定する。
-
-.. warning:: **AuthenticationSuccessHandlerの責務**
-
-    \ ``AuthenticationSuccessHandler``\ は、認証成功時におけるWeb層の処理(主に画面遷移に関する処理)を行うためのインタフェースである。
-    そのため、認証失敗回数のクリアなどのビジネスルールに依存する処理（ビジネスロジック）をこのインタフェースの実装クラスを経由して呼び出すべきではない。
-
-    ビジネスルールに依存する処理の呼び出しは、前節で紹介している「:ref:`SpringSecurityAuthenticationEvent`」の仕組みを使用されたい。
-
-|
-
-.. _SpringSecurityAuthenticationCustomizingScreenFlowOnFailure:
-
-認証失敗時のレスポンスのカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-認証失敗時のレスポンスのカスタマイズポイントを説明する。
-
-遷移先の変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトするが、
-以下のようなbean定義を行うことで変更することが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <sec:form-login authentication-failure-url="/loginFailure" /> <!-- (1) -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - |  (1)
-      - | \ ``authentication-failure-url``\ 属性に認証失敗時に遷移するパスを指定する。
-
-|
-
-AuthenticationFailureHandlerの適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
-以下のようなbean定義を行うことで\ ``AuthenticationFailureHandler``\ インタフェースの実装クラスを直接適用することができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-   <!-- (1) -->
-  <bean id="authenticationFailureHandler"
-      class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler" />
-      <property name="defaultFailureUrl" value="/login/systemError" /> <!-- (2) -->
-      <property name="exceptionMappings"> <!-- (3) -->
-          <props>
-              <prop key="org.springframework.security.authentication.BadCredentialsException"> <!-- (4) -->
-                  /login/badCredentials
-              </prop>
-              <prop key="org.springframework.security.core.userdetails.UsernameNotFoundException"> <!-- (5) -->
-                  /login/usernameNotFound
-              </prop>
-              <prop key="org.springframework.security.authentication.DisabledException"> <!-- (6) -->
-                  /login/disabled
-              </prop>
-              <!-- omitted -->
-          </props>
-      </property>
-  </bean>
-
-  <sec:http>
-      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" /> <!-- (7) -->
-  </sec:http>
-
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 20 80
-
-    * - | 項番
-      - | 説明
-    * - | (1)
-      - | \ ``AuthenticationFailureHandler``\ インタフェースの実装クラスをbean定義する。
-    * - | (2)
-      - | \ ``defaultFailureUrl``\ 属性にデフォルトの遷移先のURLを指定する。
-        | 下記(4)-(6)の定義に合致しない例外が発生した際は、本設定の遷移先に遷移する。
-    * - | (3)
-      - | \ ``exceptionMappings``\ プロパティにハンドルする\ ``org.springframework.security.authentication.AuthenticationServiceException``\ の実装クラスと例外発生時の遷移先を \ ``Map``\ 形式で設定する。
-        | キーに\ ``org.springframework.security.authentication.AuthenticationServiceException``\ 実装クラスを設定し、値に遷移先URLを設定する。
-    * - | (4)
-      - | \ ``BadCredentialsException``\ 
-        | パスワード照合失敗による認証エラー時にスローされる。
-    * - | (5)
-      - | \ ``UsernameNotFoundException``\ 
-        | 不正ユーザーID（存在しないユーザーID）による認証エラー時にスローされる。
-        | ``org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider``\ を
-        | 継承したクラスを認証プロバイダに指定している場合、``hideUserNotFoundExceptions``\ プロパティを\ ``false``\ に変更しないと本例外は、\ ``BadCredentialsException``\ に変更される。
-    * - | (6)
-      - | \  ``DisabledException``\
-        | 無効ユーザーIDによる認証エラー時にスローされる。
-    * - | (7)
-      - | \ ``authentication-failure-handler-ref``\ 属性に\ ``authenticationFailureHandler``\ を設定する。
-
-.. note:: **例外発生時の制御**
-
-    \ ``exceptionMappings``\ プロパティに定義した例外が発生した場合、例外にマッピングした遷移先にリダイレクトされるが、
-    発生した例外オブジェクトがセッションスコープに格納されないため、Spring Securityが生成したエラーメッセージを画面に表示する事ができない。
-
-    そのため、遷移先の画面で表示するエラーメッセージは、リダイレクト先の処理(Controller又はViewの処理)で生成する必要がある。
-
-    また、以下のプロパティを参照する処理が呼び出されないため、設定値を変更しても動作が変わらないという点を補足しておく。
-
-    * ``useForward``
-    * ``allowSessionCreation``
-
-|
-
-ログアウト処理のカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ログアウト処理のカスタマイズポイントを説明する。
-
-ログアウトパスの変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトでは、ログアウト処理を実行するためのパスは「\ ``"/logout"``\」であるが、
-以下のようなbean定義を行うことで変更することが可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-      <!-- omitted -->
-      <sec:logout logout-url="/auth/logout" /> <!-- (1) -->
-      <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``logout-url``\ 属性を設定し、ログアウト処理を行うパスを指定する。
-
-.. note::
-
-    ログアウトパスを変更した場合は、:ref:`ログアウトフォーム<SpringSecurityAuthenticationLogoutForm>` のリクエスト先も変更する必要がある。
-
-.. tip:: **システムエラー発生時の振る舞い**
-    システムエラーが発生した場合は、業務継続不可となるケースが多いと考えられる。
-    システムエラー発生後、業務を継続させたくない場合は、以下のような対策を講じることを推奨する。
-    
-      * システムエラー発生時にセッション情報をクリアする。
-      * システムエラー発生時に認証情報をクリアする。
-    
-    ここでは、共通ライブラリの例外ハンドリング機能を使用してシステム例外発生時に認証情報をクリアする例を説明する。
-    例外ハンドリング機能の詳細についは「\ :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`\」を参照されたい。
-
-      .. code-block:: java
-
-        // (1)
-        public class LogoutSystemExceptionResolver extends SystemExceptionResolver {
-            // (2)
-            @Override
-            protected ModelAndView doResolveException(HttpServletRequest request,
-                    HttpServletResponse response, java.lang.Object handler,
-                    java.lang.Exception ex) {
-
-                // SystemExceptionResolverの処理を行う
-                ModelAndView resulut = super.doResolveException(request, response,
-                        handler, ex);
-
-                // 認証情報をクリアする (2)
-                SecurityContextHolder.clearContext();
-
-                return resulut;
-            }
-        }
-
-      .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-      .. list-table::
-          :header-rows: 1
-          :widths: 10 90
-      
-          * - 項番
-            - 説明
-          * - | (1)
-            - | \ ``org.terasoluna.gfw.web.exception.SystemExceptionResolver.SystemExceptionResolver``\ を拡張する。
-          * - | (2)
-            - | \ 認証情報をクリアする。
-
-    なお、認証情報をクリアする方法以外にも、セッションをクリアすることでも、同様の要件を満たすことができる。
-    プロジェクトの要件に合わせて実装されたい。
-
-|
-
-.. _SpringSecurityLogoutCustomizingScreenFlowOnSuccess:
-
-ログアウト成功時のレスポンスのカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ログアウト処理成功時のレスポンスのカスタマイズポイントを説明する。
-
-遷移先の変更
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-  <sec:http>
-    <!-- omitted -->
-    <sec:logout logout-success-url="/logoutSuccess" /> <!-- (1) -->
-    <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``logout-success-url``\ 属性を設定し、ログアウト成功時に遷移するパスを指定する。
-
-|
-
-LogoutSuccessHandlerの適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-  
-  <!-- (1) -->
-  <bean id="logoutSuccessHandler" class="com.example.app.security.handler.MyLogoutSuccessHandler" /> 
-
-  <sec:http>
-      <!-- omitted -->
-      <sec:logout success-handler-ref="logoutSuccessHandler" /> <!-- (2) -->
-      <!-- omitted -->
-  </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``LogoutSuccessHandler``\ インタフェースの実装クラスをbean定義する。
-    * - | (2)
-      - | ``success-handler-ref``\ 属性に\ ``LogoutSuccessHandler``\ を設定する。
-
-|
-
-.. _SpringSecurityAuthenticationCustomizingMessage:
-
-エラーメッセージのカスタマイズ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-認証に失敗した場合、Spring Securityが用意しているエラーメッセージが表示されるが、
-このエラーメッセージは変更することが可能である。
-
-メッセージ変更方法の詳細については、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ を参照されたい。
-
-システムエラー時のメッセージ
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証処理の中で予期しないエラー（システムエラーなど）が発生した場合、\ ``InternalAuthenticationServiceException``\ という例外が発生する。
-\ ``InternalAuthenticationServiceException``\ が保持するメッセージには、原因例外のメッセージが設定されるため、画面にそのまま表示するのは適切ではない。
-
-例えばユーザー情報をデーターベースから取得する時にDBアクセスエラーが発生した場合、\ ``SQLException``\ が保持する例外メッセージが画面に表示されることになる。
-システムエラーの例外メッセージを画面に表示させないためには、\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用して\ ``InternalAuthenticationServiceException``\ をハンドリングし、
-システムエラーが発生したことを通知するためのパスに遷移させるなどの対応が必要となる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <bean id="authenticationFailureHandler"
-        class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
-        <property name="defaultFailureUrl" value="/login?error" />
-        <property name="exceptionMappings">
-            <props>
-                <prop key="org.springframework.security.authentication.InternalAuthenticationServiceException">
-                    /login?systemError
-                </prop>
-                <!-- omitted -->
-            </props>
-        </property>
-    </bean>
-
-  <sec:http>
-      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" />
-  </sec:http>
-
-|
-
-ここでは、システムエラーが発生したことを識別するためのクエリパラメータ(\ ``systemError``\ )を付けてログインフォームに遷移させている。
-遷移先に指定したログインフォームでは、クエリパラメータに\ ``systemError``\ が指定されている場合は、認証例外のメッセージを表示するのではなく、
-固定のエラーメッセージを表示するようにしている。
-
-* ログインフォームの実装例
-
-.. code-block:: jsp
-
-    <c:choose>
-        <c:when test="${param.containsKey('error')}">
-            <span style="color: red;">
-                <c:out value="${SPRING_SECURITY_LAST_EXCEPTION.message}"/>
-            </span>
-        </c:when>
-        <c:when test="${param.containsKey('systemError')}">
-            <span style="color: red;">
-                System Error occurred.
-            </span>
-        </c:when>
-    </c:choose>
-
-.. note::
-
-    ここでは、ログインフォームに遷移させる場合の実装例を紹介したが、システムエラー画面に遷移させてもよい。
-
-|
-
-.. _SpringSecurityAuthenticationBeanValidation:
-
-認証時の入力チェック
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-DBサーバへの負荷軽減等で、認証ページおける、あきらかな入力誤りに対しては、事前にチェックを行いたい場合がある。
-このような場合は、Bean Validationを使用した入力チェックも可能である。
-
-Bean Validationによる入力チェック
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-以下にBean Validationを使用した入力チェックの例を説明する。
-Bean Validationに関する詳細は \ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ を参照すること。
-
-* フォームクラスの実装例
-
-.. code-block:: java
-
-    public class LoginForm implements Serializable {
-
-        // omitted
-        @NotEmpty // (1)
-        private String username;
-
-        @NotEmpty // (1)
-        private String password;
-        // omitted
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 本例では、\ ``username``\ 、\ ``password``\ をそれぞれ必須入力としている。
-
-
-* コントローラクラスの実装例
-
-.. code-block:: java
-
-    @ModelAttribute
-    public LoginForm setupForm() { // (1)
-        return new LoginForm();
-    }
-
-    @RequestMapping(value = "login")
-    public String login(@Validated LoginForm form, BindingResult result) {
-        // omitted
-        if (result.hasErrors()) {
-            // omitted
-        }
-        return "forward:/authenticate"; // (2)
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``LoginForm``\ を初期化する。
-    * - | (2)
-      - | forwardで\ ``<sec:form-login>``\ 要素の\ ``login-processing-url``\ 属性に指定したパスに **Forward** する。
-        | 認証に関する設定は、\ :ref:`SpringSecurityAuthenticationCustomizingForm`\を参照すること。
-
-加えて、Forwardによる遷移でもSpring Securityの処理が行われるよう、認証パスをSpring Securityサーブレットフィルタに追加する。
-
-* web.xmlの設定例
-
-.. code-block:: xml
-
-    <filter>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <filter-class>
-            org.springframework.web.filter.DelegatingFilterProxy
-        </filter-class>
-    </filter>
-    <filter-mapping>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-    <!-- (1) -->
-    <filter-mapping>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <url-pattern>/authenticate</url-pattern>
-        <dispatcher>FORWARD</dispatcher>
-    </filter-mapping>    
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Forwardで認証するためのパターンを指定する
-        | ここでは認証パスである\ ``"/authenticate"``\ を指定している。
-
-|
-
-認証処理の拡張
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityから提供されている\ `認証プロバイダ <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/authentication/AuthenticationProvider.html>`_\ で対応できない認証要件がある場合は、
-\ ``org.springframework.security.authentication.AuthenticationProvider``\ インタフェースを実装したクラスを作成する必要がある。
-
-ここでは、ユーザー名、パスワード、\ **会社識別子(独自の認証パラメータ)**\ の3つのパラメータを使用してDB認証を行うための拡張例を示す。
-
-.. figure:: ./images_Authentication/Authentication_HowToExtends_LoginForm.png
-   :alt: Authentication_HowToExtends_LoginForm
-   :width: 50%
-
-上記の要件を実現するためには、以下に示すクラスを作成する必要がある。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | ユーザー名、パスワード、会社識別子を保持する\ ``org.springframework.security.core.Authentication``\ インタフェースの実装クラス。
-        | ここでは、\ ``org.springframework.security.authentication.UsernamePasswordAuthenticationToken``\ クラスを継承して作成する。
-    * - | (2)
-      - | ユーザー名、パスワード、会社識別子を使用してDB認証を行う\ ``org.springframework.security.authentication.AuthenticationProvider``\ の実装クラス。
-        | ここでは、\ ``org.springframework.security.authentication.dao.DaoAuthenticationProvider``\ クラスを継承して作成する。
-    * - | (3)
-      - | ユーザー名、パスワード、会社識別子をリクエストパラメータから取得して、\ ``AuthenticationManager``\ (\ ``AuthenticationProvider``\ )に渡す\ ``Authentication``\ を生成するためのAuthentication Filterクラス。
-        | ここでは、\ ``org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter``\ クラスを継承して作成する。
-
-.. note::
-
-    ここでは、認証用のパラメータとして独自のパラメータを追加する例にしているため、
-    \ ``Authentication``\ インタフェースの実装クラスと\ ``Authentication``\ を生成するためのAuthentication Filterクラスの拡張が必要となる。
-
-    ユーザー名とパスワードのみで認証する場合は、\ ``AuthenticationProvider``\ インタフェースの実装クラスを作成するだけで、
-    認証処理を拡張することができる。
-
-|
-
-Authenticationインターフェースの実装クラスの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``UsernamePasswordAuthenticationToken``\ クラスを継承し、ユーザー名とパスワードに加えて、会社識別子(独自の認証パラメータ)を保持するクラスを作成する。
-
-.. code-block:: java
-
-    // import omitted
-    public class CompanyIdUsernamePasswordAuthenticationToken extends
-        UsernamePasswordAuthenticationToken {
-
-        private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;
-
-        // (1)
-        private final String companyId;
-
-        // (2)
-        public CompanyIdUsernamePasswordAuthenticationToken(
-                Object principal, Object credentials, String companyId) {
-            super(principal, credentials);
-            this.companyId = companyId;
-        }
-
-        // (3)
-        public CompanyIdUsernamePasswordAuthenticationToken(
-                Object principal, Object credentials, String companyId,
-                Collection<? extends GrantedAuthority> authorities) {
-            super(principal, credentials, authorities);
-            this.companyId = companyId;
-        }
-
-        public String getCompanyId() {
-            return companyId;
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 会社識別子を保持するフィールドを作成する。
-   * - | (2)
-     - | 認証前の情報(リクエストパラメータで指定された情報)を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
-   * - | (3)
-     - | 認証済みの情報を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
-       | 親クラスのコンストラクタの引数に認可情報を渡すことで、認証済みの状態となる。
-
-|
-
-AuthenticationProviderインターフェースの実装クラスの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``DaoAuthenticationProvider``\ クラスを継承し、ユーザー名、パスワード、会社識別子を使用してDB認証を行うクラスを作成する。
-
-.. code-block:: java
-
-    // import omitted
-    public class CompanyIdUsernamePasswordAuthenticationProvider extends
-        DaoAuthenticationProvider {
-
-        // omitted
-
-        @Override
-        protected void additionalAuthenticationChecks(UserDetails userDetails,
-                UsernamePasswordAuthenticationToken authentication)
-                throws AuthenticationException {
-
-            // (1)
-            super.additionalAuthenticationChecks(userDetails, authentication);
-
-            // (2)
-            CompanyIdUsernamePasswordAuthenticationToken companyIdUsernamePasswordAuthentication =
-                    (CompanyIdUsernamePasswordAuthenticationToken) authentication;
-            String requestedCompanyId = companyIdUsernamePasswordAuthentication.getCompanyId();
-            String companyId = ((SampleUserDetails) userDetails).getAccount().getCompanyId();
-            if (!companyId.equals(requestedCompanyId)) {
-                throw new BadCredentialsException(messages.getMessage(
-                        "AbstractUserDetailsAuthenticationProvider.badCredentials",
-                        "Bad credentials"));
-            }
-        }
-
-        @Override
-        protected Authentication createSuccessAuthentication(Object principal,
-                Authentication authentication, UserDetails user) {
-            String companyId = ((SampleUserDetails) user).getAccount()
-                    .getCompanyId();
-            // (3)
-            return new CompanyIdUsernamePasswordAuthenticationToken(user,
-                    authentication.getCredentials(), companyId,
-                    user.getAuthorities());
-        }
-
-        @Override
-        public boolean supports(Class<?> authentication) {
-            // (4)
-            return CompanyIdUsernamePasswordAuthenticationToken.class
-                    .isAssignableFrom(authentication);
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 親クラスのメソッドを呼び出し、Spring Securityが提供しているチェック処理を実行する。
-       | この処理にはパスワード認証処理も含まれる。
-   * - | (2)
-     - | パスワード認証が成功した場合は、会社識別子(独自の認証パラメータ)の妥当性をチェックする。
-       | 上記例では、リクエストされた会社識別子とテーブルに保持している会社識別子が一致するかをチェックしている。
-   * - | (3)
-     - | パスワード認証及び独自の認証処理が成功した場合は、認証済み状態の\ ``CompanyIdUsernamePasswordAuthenticationToken``\ を作成して返却する。
-   * - | (4)
-     - | \ ``CompanyIdUsernamePasswordAuthenticationToken``\ にキャスト可能な\ ``Authentication``\ が指定された場合に、本クラスを使用して認証処理を行うようにする。
-
-.. note::
-
-    ユーザーの存在チェック、ユーザーの状態チェック(無効ユーザー、ロック中ユーザー、利用期限切れユーザーなどのチェック)は、
-    \ ``additionalAuthenticationChecks``\ メソッドが呼び出される前に親クラスの処理として行われる。
-
-|
-
-.. _authentication_custom_usernamepasswordauthenticationfilter:
-
-Authentication Filterの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``UsernamePasswordAuthenticationFilter``\ クラスを継承し、
-認証情報(ユーザー名、パスワード、会社識別子)を\ ``AuthenticationProvider``\ に引き渡すためのAuthentication Filterクラスを作成する。
-
-\ ``attemptAuthentication``\ メソッドの実装は、\ ``UsernamePasswordAuthenticationFilter``\ クラスのメソッドをコピーしてカスタマイズしたものである。
-
-.. code-block:: java
-
-    // import omitted
-    public class CompanyIdUsernamePasswordAuthenticationFilter extends
-        UsernamePasswordAuthenticationFilter {
-
-        @Override
-        public Authentication attemptAuthentication(HttpServletRequest request,
-                HttpServletResponse response) throws AuthenticationException {
-
-            if (!request.getMethod().equals("POST")) {
-                throw new AuthenticationServiceException("Authentication method not supported: "
-                        + request.getMethod());
-            }
-
-            // (1)
-            // Obtain UserName, Password, CompanyId
-            String username = super.obtainUsername(request);
-            String password = super.obtainPassword(request);
-            String companyId = obtainCompanyId(request);
-            if (username == null) {
-                username = "";
-            } else {
-                username = username.trim();
-            }
-            if (password == null) {
-                password = "";
-            }
-            CompanyIdUsernamePasswordAuthenticationToken authRequest =
-                new CompanyIdUsernamePasswordAuthenticationToken(username, password, companyId);
-
-            // Allow subclasses to set the "details" property
-            setDetails(request, authRequest);
-
-            return this.getAuthenticationManager().authenticate(authRequest); // (2)
-        }
-
-        // (3)
-        protected String obtainCompanyId(HttpServletRequest request) {
-            return request.getParameter("companyId");
-        }
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | リクエストパラメータから取得した認証情報(ユーザー名、パスワード、会社識別子)より、\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンスを生成する。
-   * - | (2)
-     - | リクエストパラメータで指定された認証情報(\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンス)を指定して、\ ``org.springframework.security.authentication.AuthenticationManager``\ の\ ``authenticate``\ メソッドを呼び出す。
-       | 
-       | \ ``AuthenticationManager``\ のメソッドを呼び出すと、\ ``AuthenticationProvider``\ の認証処理が呼び出される。
-   * - | (3)
-     - | 会社識別子は、\ ``"companyId"``\ というリクエストパラメータより取得する。
-
-|
-
-ログインフォームの修正
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ :ref:`SpringSecurityAuthenticationLoginForm`\ で作成したログインフォーム(JSP)に対して、会社識別子を追加する。
-
-.. code-block:: jsp
-
-    <form:form action="${pageContext.request.contextPath}/login" method="post">
-        <!-- omitted -->
-            <tr>
-                <td><label for="username">User Name</label></td>
-                <td><input type="text" id="username" name="username"></td>
-            </tr>
-            <tr>
-                <td><label for="companyId">Company Id</label></td>
-                <td><input type="text" id="companyId" name="companyId"></td> <!-- (1) -->
-            </tr>
-            <tr>
-                <td><label for="password">Password</label></td>
-                <td><input type="password" id="password" name="password"></td>
-            </tr>
-        <!-- omitted -->
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 会社識別子の入力フィールド名に\ ``"companyId"``\ を指定する。
-
-|
-
-拡張した認証処理の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ユーザー名、パスワード、会社識別子(独自の認証パラメータ)を使用したDB認証機能をSpring Securityに適用する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <!-- omitted -->
-
-    <!-- (1) -->
-    <sec:http
-        entry-point-ref="loginUrlAuthenticationEntryPoint">
-
-        <!-- omitted -->
-
-        <!-- (2) -->
-        <sec:custom-filter
-            position="FORM_LOGIN_FILTER" ref="companyIdUsernamePasswordAuthenticationFilter" />
-
-        <!-- omitted -->
-
-        <sec:csrf token-repository-ref="csrfTokenRepository" />
-
-        <sec:logout
-            logout-url="/logout"
-            logout-success-url="/login" />
-
-        <!-- omitted -->
-
-        <sec:intercept-url pattern="/login" access="permitAll" />
-        <sec:intercept-url pattern="/**" access="isAuthenticated()" />
-
-        <!-- omitted -->
-
-    </sec:http>
-
-    <!-- (3) -->
-    <bean id="loginUrlAuthenticationEntryPoint"
-        class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
-        <constructor-arg value="/login" />
-    </bean>
-
-    <!-- (4) -->
-    <bean id="companyIdUsernamePasswordAuthenticationFilter"
-        class="com.example.app.common.security.CompanyIdUsernamePasswordAuthenticationFilter">
-        <!-- (5) -->
-        <property name="requiresAuthenticationRequestMatcher">
-            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
-                <constructor-arg index="0" value="/authentication" />
-                <constructor-arg index="1" value="POST" />
-            </bean>
-        </property>
-        <!-- (6) -->
-        <property name="authenticationManager" ref="authenticationManager" />
-        <!-- (7) -->
-        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
-        <!-- (8) -->
-        <property name="authenticationFailureHandler">
-            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
-                <constructor-arg value="/login?error=true" />
-            </bean>
-        </property>
-        <!-- (9) -->
-        <property name="authenticationSuccessHandler">
-            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler" />
-        </property>
-    </bean>
-
-    <!-- (6') -->
-    <sec:authentication-manager alias="authenticationManager">
-        <sec:authentication-provider ref="companyIdUsernamePasswordAuthenticationProvider" />
-    </sec:authentication-manager>
-    <bean id="companyIdUsernamePasswordAuthenticationProvider"
-        class="com.example.app.common.security.CompanyIdUsernamePasswordAuthenticationProvider">
-        <property name="userDetailsService" ref="sampleUserDetailsService" />
-        <property name="passwordEncoder" ref="passwordEncoder" />
-    </bean>
-
-    <!-- (7') -->
-    <bean id="sessionAuthenticationStrategy"
-        class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
-        <constructor-arg>
-            <util:list>
-                <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy">
-                    <constructor-arg ref="csrfTokenRepository" />
-                </bean>
-                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
-            </util:list>
-        </constructor-arg>
-    </bean>
-
-    <bean id="csrfTokenRepository"
-        class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />
-
-
-    <!-- omitted -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | (2)の\ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える場合は、\ ``<sec:http>``\ タグの属性に以下の設定を行う必要がある。
-
-        * 自動設定を使用することができないため、\ ``auto-config="false"``\ を指定するか、\ ``auto-config``\ 属性を削除する。
-        * \ ``<sec:form-login>``\ タグが使用できないため、\ ``entry-point-ref``\ 属性を使用して\ ``AuthenticationEntryPoint``\ を明示的に指定する。
-
-    * - | (2)
-      - | \ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える。
-        | 
-        | \ ``<sec:custom-filter>``\ タグの\ ``position``\ 属性に\ ``"FORM_LOGIN_FILTER"``\を指定し、\ ``ref``\ 属性に拡張したAuthentication Filterのbeanを指定する。
-    * - | (3)
-      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に使用する\ ``AuthenticationEntryPoint``\ のbeanを指定する。
-        | 
-        | ここでは、\ ``<sec:form-login>``\ タグを指定した際に使用される\ ``org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint``\ クラスのbeanを指定している。
-    * - | (4)
-      - | \ ``"FORM_LOGIN_FILTER"``\ として使用するAuthentication Filterクラスのbeanを定義する。
-        | 
-        | ここでは、拡張したAuthentication Filterクラス(\ ``CompanyIdUsernamePasswordAuthenticationFilter``\ )のbeanを定義している。
-    * - | (5)
-      - | \ ``requiresAuthenticationRequestMatcher``\ プロパティに、認証処理を行うリクエストを検出するための\ ``RequestMatcher``\ インスタンスを指定する。
-        | 
-        | ここでは、\ ``"/authentication"``\ というパスにリクエストがあった場合に認証処理を行うように設定している。
-        | これは、\ ``<sec:form-login>``\ タグの\ ``login-processing-url``\ 属性に\ ``"/authentication"``\ を指定したのと同義である。
-    * - | (6)
-      - | \ ``authenticationManager``\ プロパティに、\ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性に設定した値を指定する。
-        | 
-        | \ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性を指定すると、
-        | Spring Securityが生成した\ ``AuthenticationManager``\ のbeanを、他のbeanへDIすることができる様になる。
-    * - | (6')
-      - | Spring Securityが生成する\ ``AuthenticationManager``\ に対して、拡張した\ ``AuthenticationProvider``\ (\ ``CompanyIdUsernamePasswordAuthenticationProvider``\ )を設定する。
-    * - | (7)
-      - | \ ``sessionAuthenticationStrategy``\ プロパティに、認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを指定する。
-        | 
-    * - | (7')
-      - | 認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを定義する。
-        | 
-        | ここでは、Spring Securityから提供されている、
-         
-        * CSRFトークンを作り直すコンポーネント(\ ``CsrfAuthenticationStrategy``\ )
-        * セッション・フィクセーション攻撃を防ぐために新しいセッションを生成するコンポーネント(\ ``SessionFixationProtectionStrategy``\ )
-        
-        | を有効化している。
-    * - | (8)
-      - | \ ``authenticationFailureHandler``\ プロパティに、認証失敗時に呼ばれるハンドラクラスを指定する。
-    * - | (9)
-      - | \ ``authenticationSuccessHandler``\ プロパティに、認証成功時に呼ばれるハンドラクラスを指定する。
-
-.. note:: **auto-configについて**
-
-    \ ``auto-config="false"``\ を指定又は指定を省略した際にBasic認証処理とログアウト処理を有効化したい場合は、\ ``<sec:http-basic>``\ タグと\ ``<sec:logout>``\ タグを明示的に定義する必要がある。
-
-|
-
-.. _AuthenticationHowToExtendUsingDeprecatedPasswordEncoder:
-
-非推奨パッケージのPasswordEncoderの利用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-セキュリティ要件によっては、前述した\ ``PasswordEncoder``\ を実装したクラスでは実現できない場合がある。
-特に、既存のアカウント情報で使用しているハッシュ化要件を踏襲する必要がある場合は、前述の\ ``PasswordEncoder``\ では要件を満たせないことがある。
-
-具体的には、既存のハッシュ化要件が以下のようなケースである。
-
-* アルゴリズムがSHA-512である。
-* ストレッチング回数が1000回である。
-* ソルトがアカウントテーブルのカラムに格納されており、\ ``PasswordEncoder``\ の外から渡す必要がある。
-
-このようなケースでは、\ ``org.springframework.security.crypto.password.PasswordEncoder``\ インタフェースの実装クラスではなく、
-\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスの使用することで要件を満たすことができる。
-
-.. warning::
-
-    Spring Security 3.1.4以前では、\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
-    を実装したクラスをハッシュ化に使用していたが、3.1.4以降では非推奨となっている。
-
-|
-
-ShaPasswordEncoderの利用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-本ガイドラインでは、\ ``ShaPasswordEncoder``\ を例に、非推奨パッケージの\ ``PasswordEncoder``\ の利用について説明する。
-
-ハッシュ化要件が以下のケースの場合は、\ ``ShaPasswordEncoder``\ を利用することで要件を満たすことができる。
-
-* アルゴリズムがSHA-512
-* ストレッチング回数を1000回
-
-|
-
-まず、\ ``ShaPasswordEncoder``\ のbeanを定義する。
-
-* applicationContext.xmlの定義例
-
-.. code-block:: xml
-  
-    <bean id ="passwordEncoder"
-        class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"> <!-- (1) -->
-        <constructor-arg value="512" /> <!-- (2) -->
-        <property name="iterations" value="1000" /> <!-- (3) -->
-    </bean>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-  
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``org.springframework.security.authentication.encoding.ShaPasswordEncoder``\ のbeanを定義する。
-    * - | (2)
-      - | SHAアルゴリズムの種類を指定する。
-        | 指定可能な値は、「\ ``1``\ 、\ ``256``\ 、\ ``384``\ 、\ ``512``\ 」である。
-        | 省略した場合は、「\ ``1``\ 」となる。
-    * - | (3)
-      - | ハッシュ化時のストレッチング回数を指定する。
-        | 省略した場合は、1回となる。
-
-|
-
-次に、\ ``ShaPasswordEncoder``\ をSpring Securityの認証処理(\ ``DaoAuthenticationProvider``\ )に適用する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-  
-    <bean id="authenticationProvider"
-        class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
-        <!-- omitted -->
-        <property name="saltSource" ref="saltSource" /> <!-- (1) -->
-        <property name="userDetailsService" ref="userDetailsService" />
-        <property name="passwordEncoder" ref="passwordEncoder" /> <!-- (2) -->
-    </bean>
-  
-    <bean id="saltSource"
-        class="org.springframework.security.authentication.dao.ReflectionSaltSource"> <!-- (3) -->
-        <property name="userPropertyToUse" value="username" /> <!-- (4) -->
-    </bean>
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-  
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``saltSource``\ プロパティに\ ``org.springframework.security.authentication.dao.SaltSource``\ インタフェースの実装クラスのbeanを指定する。
-        | \ ``SaltSource``\ は、ソルトを\ ``UserDetails``\ から取得するためのインタフェースである。
-    * - | (2)
-      - | \ ``passwordEncoder``\ プロパティに\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスのbeanを指定する。
-        | 上記例では、\ ``ShaPasswordEncoder``\ のbeanを指定している。
-    * - | (3)
-      - | \ ``SaltSource``\ のbeanを定義する。
-        | 上記例では、リフレクションを使用して\ ``UserDetails``\ のプロパティからソルトを取得するクラス(\ ``ReflectionSaltSource``\ )を利用している。
-    * - | (4)
-      - | ソルトが格納されている\ ``UserDetails``\ のプロパティを指定する。
-        | 上記例では、\ ``UserDetails``\ の\ ``username``\ プロパティの値をソルトとして使用する。
-
-|
-
-アプリケーションの処理で非推奨の\ ``PasswordEncoder``\ を使用する場合は、\ ``PasswordEncoder``\ をインジェクションして使用する。
-
-* Javaクラスの実装例
-
-.. code-block:: java
-  
-    @Inject
-    PasswordEncoder passwordEncoder;
-  
-    public String register(Customer customer, String rawPassword, String userSalt) {
-        // omitted
-        String password = passwordEncoder.encodePassword(rawPassword, userSalt); // (1)
-        customer.setPassword(password);
-        // omitted
-    }
-  
-    public boolean matches(Customer customer, String rawPassword, String userSalt) {
-        return passwordEncoder.isPasswordValid(customer.getPassword(), rawPassword, userSalt); // (2)
-    }
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-  
-    * - 項番
-      - 説明
-    * - | (1)
-      - | パスワードをハッシュ化する場合は、\ ``encodePassword``\ メソッドを使用する。
-        | メソッドの引数には、パスワード、ソルト文字列の順で指定する。
-    * - | (2)
-      - | パスワードを照合する場合ば、\ ``isPasswordValid``\ メソッドを使用する。
-        | メソッドの引数には、ハッシュ化済みのパスワード、平文のパスワード、ソルト文字列の順で指定する。
-
-|
-
-Appendix
---------------------------------------------------------------------------------
-
-.. _spring-security-authentication-mvc:
-
-Spring MVCでリクエストを受けてログインフォームを表示する
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring MVCでリクエストを受けてログインフォームを表示する方法を説明する。
-
-* spring-mvc.xmlの定義例
-
-ログインフォームを表示するControllerの定義例。
-
-.. code-block:: java
-
-    @Controller
-    @RequestMapping("/login")
-    public class LoginController { // (1)
-
-        @RequestMapping
-        public String index() {
-            return "login";
-        }
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | view名として"login"を返却する。\ ``InternalResourceViewResolver``\ によってsrc/main/webapp/WEB-INF/views/login.jspが出力される。
-
-本例のように、単純にview名を返すだけのメソッドが一つだけあるControllerであれば、\ ``<mvc:view-controller>``\ を使用して代用することも可能である。  
-
-* \ ``<mvc:view-controller>``\ を使用したControllerの定義例。
-
-.. code-block:: xml
-
-    <mvc:view-controller path="/login" view-name="login" /><!-- (1) -->
-
-|
-
-.. _SpringSecurityAuthenticationRememberMe:
-
-Remember Me認証の利用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-「\ `Remember Me認証 <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me>`_\ 」とは、
-Webサイトに頻繁にアクセスするユーザーの利便性を高めるための機能の一つで、ログイン状態を通常のライフサイクルより長く保持するための機能である。
-本機能を使用すると、ブラウザを閉じた後やセッションタイムが発生した後でも、Cookieに保持しているRemember Me認証用のTokenを使用して、
-ユーザ名とパスワードを再入力することなく自動でログインすることができる。
-なお、本機能は、ユーザーがログイン状態を保持することを許可した場合のみ有効となる。
-
-Spring Securityは、「`Hash-Based Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-hash-token>`_ 方式のRemember Me認証」と「`Persistent Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-persistent-token>`_ 方式のRemember Me認証」をサポートしており、
-デフォルトではHash-Based Token方式が使用される。
-
-|
-
-Remember Me認証を利用する場合は、\ ``<sec:remember-me>``\ タグを追加する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:remember-me key="terasoluna-tourreservation-km/ylnHv"
-            token-validity-seconds="#{30 * 24 * 60 * 60}" />  <!-- (1) (2) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``key``\ 属性に、Remember Me認証用のTokenを生成したアプリケーションを識別するキー値を指定する。
-        | キー値の指定が無い場合、アプリケーションの起動毎にユニークな値が生成される。
-        | なお、Hash-Based Tokenが保持しているキー値とサーバーで保持しているキー値が異なる場合、無効なTokenとして扱われる。
-        | つまり、アプリケーションを再起動する前に生成したHash-Based Tokenを有効なTokenとして扱いたい場合は、\ ``key``\ 属性の指定は必須である。
-    * - | (2)
-      - | \ ``token-validity-seconds``\ 属性に、Remember Me認証用のTokenの有効時間を秒単位で指定する。
-        | 指定が無い場合、デフォルトで14日間が有効時間になる。
-        | 上記例では、有効時間として30日間を設定している。
-
-上記以外の属性については、\ `Spring Security Reference -The Security Namespace (<remember-me>) - <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-remember-me>`_\ を参照されたい。
-
-.. note:: **Spring Security 4.0における変更**
-
-    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
-
-    * remember-me-parameter
-    * remember-me-cookie
-
-|
-
-ログインフォームには、「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を用意する。
-
-* ログインフォームのJSPの実装例
-
-.. code-block:: jsp
-
-    <form:form action="${pageContext.request.contextPath}/login" method="post">
-            <!-- omitted -->
-            <tr>
-                <td><label for="remember-me">Remember Me : </label></td>
-                <td><input name="remember-me" id="remember-me" type="checkbox" checked="checked"></td> <!-- (1) -->
-            </tr>
-            <!-- omitted -->
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を追加し、フィールド名(リクエストパラメータ名)には\ ``remember_me``\ を指定する。
-        | チェックボックスをチェック状態にしてから認証処理を実行すると、以降のリクエストから「Remember Me認証」機能が適用される。
-
-.. raw:: latex
-
-   \newpage
-
+.. _SpringSecurityAuthentication:
+
+認証
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+.. _SpringSecurityAuthenticationOverview:
+
+Overview
+--------------------------------------------------------------------------------
+本節では、Spring Securityが提供している認証機能について説明する。
+
+認証処理は、アプリケーションを利用するユーザーの正当性を確認するための処理である。
+
+ユーザーの正当性を確認するためのもっとも標準的な方法は、アプリケーションを使用できるユーザーをデータストアに登録しておき、
+利用者が入力した認証情報（ユーザー名とパスワードなど）と照合する方法である。
+ユーザーの情報を登録しておくデータストアにはリレーショナルデータベースを利用するのが一般的だが、ディレクトリサービスや外部システムなどを利用するケースもある。
+
+また、利用者に認証情報を入力してもらう方式もいくつか存在する。
+HTMLの入力フォームを使う方式やRFCで定められているHTTP標準の認証方式(Basic認証やDigest認証など)を利用するのが一般的だが、
+OpenID認証やシングルサインオン認証などの認証方式を利用するケースもある。
+
+本節では、HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う実装例を紹介しながら、
+Spring Securityの認証機能の使い方を説明する。
+
+|
+
+認証処理のアーキテクチャ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れで認証処理を行う。
+
+.. figure:: ./images_Authentication/AuthenticationArchitecture.png
+    :width: 100%
+
+    **認証処理のアーキテクチャ**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、認証処理を行うパスに対して資格情報（ユーザー名とパスワード）を指定してリクエストを送信する。
+    * - | (2)
+      - | Authentication Filterは、リクエストから資格情報を取得して、\ ``AuthenticationManager``\ クラスの認証処理を呼び出す。
+    * - | (3)
+      - | \ ``ProviderManager``\ (デフォルトで使用される\ ``AuthenticationManager``\ の実装クラス)は、実際の認証処理を\ ``AuthenticationProvider``\ インタフェースの実装クラスに委譲する。
+
+|
+
+.. _SpringSecurityAuthenticationFilter:
+
+Authentication Filter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Authentication Filterは、認証方式に対する実装を提供するサーブレットフィルタである。
+Spring Securityがサポートしている主な認証方式は以下の通り。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供している主なAuthentication Filter**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``UsernamePasswordAuthenticationFilter``\
+      - | フォーム認証用のサーブレットフィルタクラスで、HTTPリクエストのパラメータから資格情報を取得する。
+    * - | \ ``BasicAuthenticationFilter``\
+      - | Basic認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
+    * - | \ ``DigestAuthenticationFilter``\
+      - | Digest認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
+    * - | \ ``RememberMeAuthenticationFilter``\
+      - | Remember Me認証用のサーブレットフィルタクラスで、HTTPリクエストのCookieから資格情報を取得する。
+        | Remember Me認証を有効にすると、ブラウザを閉じたりセッションタイムアウトが発生しても、ログイン状態を保つことができる。
+
+これらのサーブレットフィルタは、 :ref:`SpringSecurityProcess`\ で紹介したAuthentication Filterの１つである。
+
+.. note::
+
+    Spring Securityによってサポートされていない認証方式を実現する必要がある場合は、
+    認証方式を実現するための\ ``Authentication Filter``\ を作成し、Spring Securityに組み込むことで実現することが可能である。
+
+|
+
+AuthenticationManager
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AuthenticationManager``\ は、認証処理を実行するためのインタフェースである。
+Spring Securityが提供するデフォルト実装(\ ``ProviderManager``\ )では、
+実際の認証処理は\ ``AuthenticationProvider``\ に委譲し、\ ``AuthenticationProvider``\ で行われた認証処理の処理結果をハンドリングする仕組みになっている。
+
+|
+
+AuthenticationProvider
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AuthenticationProvider``\ は、認証処理の実装を提供するためのインタフェースである。
+Spring Securityが提供している主な\ ``AuthenticationProvider``\の実装クラスは以下の通り。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供している主なAuthenticationProvider**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``DaoAuthenticationProvider``\
+      - | データストアに登録しているユーザーの資格情報とユーザーの状態をチェックして認証処理を行う実装クラス。
+        | チェックで必要となる資格情報とユーザーの状態は\ ``UserDetails``\ というインタフェースを実装しているクラスから取得する。
+
+.. note::
+
+    Spring Securityが提供していない認証処理を実現する必要がある場合は、
+    認証処理を実現するための\ ``AuthenticationProvider``\を作成し、Spring Securityに組み込むことで実現することが可能である。
+
+|
+
+.. _howtouse_springsecurity:
+
+How to use
+--------------------------------------------------------------------------------
+
+認証機能を使用するために必要となるbean定義例や実装方法について説明する。
+
+本項では :ref:`SpringSecurityAuthenticationOverview`\ で説明したとおり、
+HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う方法について説明する。
+
+.. _form-login:
+
+フォーム認証
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れでフォーム認証を行う。
+
+.. figure:: ./images_Authentication/AuthenticationForm.png
+    :width: 100%
+
+    **フォーム認証の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、フォーム認証を行うパスに対して資格情報（ユーザー名とパスワード）をリクエストパラメータとして送信する。
+    * - | (2)
+      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、リクエストパラメータから資格情報を取得して、\ ``AuthenticationManager``\ の認証処理を呼び出す。
+    * - | (3)
+      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、\ ``AuthenticationManager``\ から返却された認証結果をハンドリングする。
+        | 認証処理が成功した場合は \ ``AuthenticationSuccessHandler``\ のメソッドを、認証処理が失敗した場合は\ ``AuthenticationFailureHandler``\ のメソッドを呼び出し画面遷移を行う。
+
+|
+
+.. _form-login-usage:
+
+フォーム認証の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+フォーム認証を使用する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <sec:form-login />    <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``<sec:form-login>``\ タグを定義することで、フォーム認証が有効になる。
+
+.. tip:: **auto-config属性について**
+
+    \ ``<sec:http>``\ には、フォーム認証(\ ``<sec:form-login>``\ タグ)、Basic認証(\ ``<sec:http-basic>``\ タグ)、ログアウト(\ ``<sec:logout>``\ タグ)に対するコンフィギュレーションを自動で行うか否かを指定する\ ``auto-config``\ 属性が用意されている。
+    デフォルト値は\ ``false``\ (自動でコンフィギュレーションしない)となっており、Spring Securityのリファレンスドキュメントでもデフォルト値の使用が推奨されている。
+
+    本ガイドラインでも、明示的にタグを指定するスタイルを推奨する。
+
+     .. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+     .. list-table::
+         :header-rows: 1
+         :widths: 25 75
+
+         * - 要素名
+           - 説明
+         * - | ``<form-login>``\
+           - | フォーム認証処理を行うSecurity Filter(\ ``UsernamePasswordAuthenticationFilter``\ )が適用される。
+         * - | \ ``<http-basic>``\
+           - | RFC1945に準拠したBasic認証を行うSecurity Filter(\ ``BasicAuthenticationFilter``\ )が適用される。
+             | 詳細な利用方法は、\ `BasicAuthenticationFilterのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.html>`_\ を参照されたい。
+         * - | \ ``<logout>``\
+           - | ログアウト処理を行うSecurity Filter(\ ``LogoutFilter``\ )が適用される。
+             | ログアウト処理の詳細については、「\ :ref:`SpringSecurityAuthenticationLogout`\ 」を参照されたい。
+
+    なお、 ``auto-config``\を定義しない場合は、フォーム認証(\ ``<sec:form-login>``\ タグ)、もしくはBasic認証(\ ``<sec:http-basic>``\ タグ)を定義する必要がある。
+    これは、ひとつの\ ``SecurityFilterChain``\(\ ``<sec:http>``\)内には、ひとつ以上のAuthentication FilterのBean定義が必要であるという、Spring Securityの仕様をみたすためである。
+
+.. _form-login-default-operation:
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、\ ``"/login"``\ に対してGETメソッドでアクセスするとSpring Securityが用意しているデフォルトのログインフォームが表示され、
+ログインボタンを押下すると\ ``"/login"``\ に対してPOSTメソッドでアクセスして認証処理を行う。
+
+|
+
+.. _SpringSecurityAuthenticationLoginForm:
+
+ログインフォームの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Spring Securityはフォーム認証用のログインフォームをデフォルトで提供しているが、そのまま利用するケースは少ない。
+ここでは、自身で作成したログインフォームをSpring Securityに適用する方法を説明する。
+
+まず、ログインフォームを表示するためのJSPを作成する。
+ここでは、Spring MVCでリクエストをうけてログインフォームを表示する際の実装例になっている。
+
+* ログインフォームを表示するためのJSPの作成例(xxx-web/src/main/webapp/WEB-INF/views/login/loginForm.jsp)
+
+.. code-block:: jsp
+
+    <%@ page contentType="text/html;charset=UTF-8" pageEncoding="UTF-8" %>
+    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    <div id="wrapper">
+        <h3>Login Screen</h3>
+        <%-- (1) --%>
+        <c:if test="${param.containsKey('error')}">
+            <t:messagesPanel messagesType="error"
+                messagesAttributeName="SPRING_SECURITY_LAST_EXCEPTION"/> <%-- (2) --%>
+        </c:if>
+        <form:form action="${pageContext.request.contextPath}/login" method="post"> <%-- (3) --%>
+            <table>
+                <tr>
+                    <td><label for="username">User Name</label></td>
+                    <td><input type="text" id="username" name="username"></td>
+                </tr>
+                <tr>
+                    <td><label for="password">Password</label></td>
+                    <td><input type="password" id="password" name="password"></td>
+                </tr>
+                <tr>
+                    <td>&nbsp;</td>
+                    <td><button>Login</button></td>
+                </tr>
+            </table>
+        </form:form>
+    </div>
+    <%-- omitted --%>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認証エラーを表示するためのエリア。
+    * - | (2)
+      - | 認証エラー時に出力させる例外メッセージを出力する。
+        | 共通ライブラリで提供している\ ``<t:messagesPanel>``\ タグを使用して出力することを推奨する。
+        | \ ``<t:messagesPanel>``\ タグの使用方法については、「\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ 」を参照されたい。
+        | なお、認証エラーが発生した場合は、セッション又はリクエストスコープに\ ``"SPRING_SECURITY_LAST_EXCEPTION"``\ という属性名で例外オブジェクトが格納される。
+    * - | (3)
+      - | ユーザー名とパスワードを入力するためのログインフォーム。
+        | ここではユーザー名を\ ``username``\、パスワードを\ ``passowrd``\ というリクエストパラメータで送信する。
+        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
+        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
+
+|
+
+つぎに、作成したログインフォームをSpring Securityに適用する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+      <sec:form-login 
+          login-page="/login/loginForm"
+          login-processing-url="/login"  /> <!-- (1)(2) -->
+      <sec:intercept-url pattern="/login/**" access="permitAll"/>  <!-- (3) -->
+      <sec:intercept-url pattern="/**" access="isAuthenticated()"/> <!-- (4) -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``login-page``\ 属性にログインフォームを表示するためのパスを指定する。
+        | 匿名ユーザーが認証を必要とするWebリソースにアクセスした場合は、この属性に指定したパスにリダイレクトしてログインフォームを表示する。
+        | ここでは、Spring MVCでリクエストを受けてログインフォームを表示している。
+        | 詳細は 「:ref:`spring-security-authentication-mvc`」を参照されたい。
+    * - | (2)
+      - | \ ``login-processing-url``\ 属性に認証処理を行うためのパスを指定する。
+        | デフォルトのパスも\ ``"/login"``\ であるが、ここでは明示的に指定することとする。
+    * - | (3)
+      - | ログインフォームが格納されている\ ``/login``\ パス配下に対し、すべてのユーザーがアクセスできる権限を付与する。
+        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
+    * - | (4)
+      - | アプリケーションで扱うWebリソースに対してアクセス権を付与する。
+        | 上記例では、Webアプリケーションのルートパスの配下に対して、認証済みユーザーのみがアクセスできる権限を付与している。
+        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
+
+.. note:: **Spring Security 4.0における変更**
+
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
+
+    * username-parameter
+    * password-parameter
+    * login-processing-url
+    * authentication-failure-url 
+
+|
+
+.. _SpringSecurityAuthenticationScreenFlowOnSuccess:
+
+認証成功時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、認証成功時のレスポンスを制御するためのコンポーネントとして、
+\ ``AuthenticationSuccessHandler``\ というインタフェースと実装クラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationSuccessHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SavedRequestAwareAuthenticationSuccessHandler``\
+      - | 認証前にアクセスを試みたURLにリダイレクトを行う実装クラス。
+        | **デフォルトで使用される実装クラス。**
+    * - | \ ``SimpleUrlAuthenticationSuccessHandler``\
+      - | \ ``defaultTargetUrl``\ にリダイレクト又はフォワードを行う実装クラス。
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、認証前にアクセスを拒否したリクエストをHTTPセッションに保存しておいて、
+認証が成功した際にアクセスを拒否したリクエストを復元してリダイレクトする。
+認証したユーザーにリダイレクト先へのアクセス権があればページが表示され、アクセス権がなければ認可エラーとなる。
+この動作を実現するために使用されるのが、\ ``SavedRequestAwareAuthenticationSuccessHandler``\ クラスである。
+
+ログインフォームを明示的に表示してから認証処理を行った後の遷移先はSpring Securityのデフォルトの設定では、
+Webアプリケーションのルートパス(\ ``"/"``\ )となっているため、認証成功時はWebアプリケーションのルートパスにリダイレクトされる。
+
+|
+
+.. _SpringSecurityAuthenticationScreenFlowOnFailure:
+
+認証失敗時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、認証失敗時のレスポンスを制御するためのコンポーネントとして、
+\ ``AuthenticationFailureHandler``\ というインタフェースと実装クラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationFailureHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SimpleUrlAuthenticationFailureHandler``\
+      - | 指定したパス(\ ``defaultTargetUrl``\ )にリダイレクト又はフォワードを行う実装クラス。
+    * - | \ ``ExceptionMappingAuthenticationFailureHandler``\
+      - | 認証例外と遷移先のURLをマッピングすることができる実装クラス。
+        | Spring Securityはエラー原因毎に発生する例外クラスが異なるため、この実装クラスを使用するとエラーの種類毎に遷移先を切り替えることが可能である。
+    * - | \ ``DelegatingAuthenticationFailureHandler``\
+      - | 認証例外と\ ``AuthenticationFailureHandler``\ をマッピングすることができる実装クラス。 
+        | \ ``ExceptionMappingAuthenticationFailureHandler``\ と似ているが、認証例外毎に\ ``AuthenticationFailureHandler``\ を指定できるので、より柔軟な振る舞いをサポートすることができる。
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトする。
+
+例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?error"``\ にリダイレクトされる。
+  
+
+|
+
+DB認証
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れでDB認証を行う。
+
+.. figure:: ./images_Authentication/AuthenticationDatabase.png
+    :width: 100%
+
+    **DB認証の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityはクライアントからの認証依頼を受け、\ ``DaoAuthenticationProvider``\ の認証処理を呼び出す。
+    * - | (2)
+      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ のユーザー情報取得処理を呼び出す。
+    * - | (3)
+      - | ``UserDetailsService``\ の実装クラスは、データストアからユーザー情報を取得する。
+    * - | (4)
+      - | ``UserDetailsService``\ の実装クラスは、データストアから取得したユーザー情報から\ ``UserDetails``\ を生成する。
+    * - | (5)
+      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ から返却された\ ``UserDetails``\ とクライアントが指定した認証情報との照合を行い、クライアントが指定したユーザーの正当性をチェックする。
+
+
+.. note:: **Spring Securityが提供するDB認証**
+
+    Spring Securityは、ユーザー情報をリレーショナルデータベースからJDBC経由で取得するための実装クラスを提供している。
+
+    * \ ``org.springframework.security.core.userdetails.User``\ (\ ``UserDetails``\ の実装クラス)
+    * \ ``org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl`` \ (\ ``UserDetailsService``\ の実装クラス)
+
+    これらの実装クラスは最低限の認証処理(パスワードの照合、有効ユーザーの判定)しか行わないため、そのまま利用できるケースは少ない。
+    そのため、本ガイドラインでは、\ ``UserDetails``\ と\ ``UserDetailsService``\ の実装クラスを作成する方法について説明する。
+
+|
+
+UserDetailsの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``UserDetails``\ は、認証処理で必要となる資格情報(ユーザー名とパスワード)とユーザーの状態を提供するためのインタフェースで、以下のメソッドが定義されている。
+\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、アプリケーションの要件に合わせて\ ``UserDetails``\ の実装クラスを作成する。
+
+*UserDetailsインタフェース*
+
+.. code-block:: java
+
+    public interface UserDetails extends Serializable {
+        String getUsername(); // (1)
+        String getPassword(); // (2)
+        boolean isEnabled(); // (3)
+        boolean isAccountNonLocked(); // (4)
+        boolean isAccountNonExpired(); // (5)
+        boolean isCredentialsNonExpired(); // (6)
+        Collection<? extends GrantedAuthority> getAuthorities(); // (7)
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.25\linewidth}|p{0.65\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 25 65
+
+    * - 項番
+      - メソッド名
+      - 説明
+    * - | (1)
+      - | \ ``getUsername``\
+      - | ユーザー名を返却する。
+    * - | (2)
+      - | \ ``getPassword``\
+      - | 登録されているパスワードを返却する。
+        | このメソッドで返却したパスワードとクライアントから指定されたパスワードが一致しない場合は、\ ``DaoAuthenticationProvider``\ は\ ``BadCredentialsException``\ を発生させる。
+    * - | (3)
+      - | \ ``isEnabled``\
+      - | 有効なユーザーかを判定する。有効な場合は\ ``true``\ を返却する。
+        | 無効なユーザーの場合は、\ ``DaoAuthenticationProvider``\ は\ ``DisabledException``\ を発生させる。
+    * - | (4)
+      - | \ ``isAccountNonLocked``\
+      - | アカウントのロック状態を判定する。ロックされていない場合は\ ``true``\ を返却する。
+        | アカウントがロックされている場合は、\ ``DaoAuthenticationProvider``\ は\ ``LockedException``\ を発生させる。
+    * - | (5)
+      - | \ ``isAccountNonExpired``\
+      - | アカウントの有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
+        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``AccountExpiredException``\ を発生させる。
+    * - | (6)
+      - | \ ``isCredentialsNonExpired``\
+      - | 資格情報の有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
+        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``CredentialsExpiredException``\ を発生させる。
+    * - | (7)
+      - | \ ``getAuthorities``\
+      - | ユーザーに与えられている権限リストを返却する。
+        | このメソッドは認可処理で使用される。
+
+.. note:: **認証例外による遷移先の切り替え**
+
+    \ ``DaoAuthenticationProvider``\ が発生させる例外毎に画面遷移を切り替えたい場合は、
+    \ ``AuthenticationFailureHandler``\ として\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用すると実現することができる。
+
+    例として、ユーザーのパスワードの有効期限が切れた際にパスワード変更画面に遷移させたい場合は、
+    \ ``ExceptionMappingAuthenticationFailureHandler``\ を使って\ ``CredentialsExpiredException``\ をハンドリングすると画面遷移を切り替えることができる。
+    
+    詳細は、:ref:`SpringSecurityAuthenticationCustomizingScreenFlowOnFailure`\ を参照されたい。
+
+.. note:: **Spring Securityが提供する資格情報**
+
+    Spring Securityは、資格情報(ユーザー名とパスワード)とユーザーの状態を保持するための実装クラス(\ ``org.springframework.security.core.userdetails.User``\ )を提供してるが、
+    このクラスは認証処理に必要な情報しか保持することができない。
+    一般的なアプリケーションでは、認証処理で使用しないユーザーの情報（ユーザーの氏名など）も必要になるケースが多いため、\ ``User``\ クラスをそのまま利用できるケースは少ない。
+
+|
+
+ここでは、アカウントの情報を保持する\ ``UserDetails``\ の実装クラスを作成する。 
+本例は\ ``User``\ を継承することでも実現することができるが、\ ``UserDetails``\  を実装する方法の例として紹介している。
+
+* UserDetailsの実装クラスの作成例
+
+
+.. code-block:: java
+
+    public class AccountUserDetails implements UserDetails { // (1)
+
+        private final Account account;
+        private final Collection<GrantedAuthority> authorities;
+
+        public AccountUserDetails(
+            Account account, Collection<GrantedAuthority> authorities) {
+            // (2)
+            this.account = account;
+            this.authorities = authorities;
+        }
+
+        // (3)
+        public String getPassword() {
+            return account.getPassword();
+        }
+        public String getUsername() {
+            return account.getUsername();
+        }
+        public boolean isEnabled() {
+            return account.isEnabled();
+        }
+        public Collection<GrantedAuthority> getAuthorities() {
+            return authorities;
+        }
+
+        // (4)
+        public boolean isAccountNonExpired() {
+            return true;
+        }
+        public boolean isAccountNonLocked() {
+            return true;
+        }
+        public boolean isCredentialsNonExpired() {
+            return true;
+        }
+
+        // (5)
+        public Account getAccount() {
+            return account;
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``UserDetails``\ インタフェースを実装したクラスを作成する。
+    * - | (2)
+      - | ユーザー情報と権限情報をプロパティに保持する。
+    * - | (3)
+      - | \ ``UserDetails``\ インタフェースに定義されているメソッドを実装する。
+    * - | (4)
+      - | 本節の例では、「アカウントのロック」「アカウントの有効期限切れ」「資格情報の有効期限切れ」に対するチェックは未実装であるが、要件に合わせて実装されたい。
+    * - | (5)
+      - | 認証処理成功後の処理でアカウント情報にアクセスできるようにするために、getterメソッドを用意する。
+
+|
+
+Spring Securityは、\ ``UserDetails``\ の実装クラスとして\ ``User``\ クラスを提供している。
+\ ``User``\ クラスを継承すると資格情報とユーザーの状態を簡単に保持することができる。
+
+* Userクラスを継承したUserDetails実装クラスの作成例
+
+.. code-block:: java
+
+    public class AccountUserDetails extends User {
+
+        private final Account account;
+
+        public AccountUserDetails(Account account, boolean accountNonExpired,
+                boolean credentialsNonExpired, boolean accountNonLocked,
+                Collection<GrantedAuthority> authorities) {
+            super(account.getUsername(), account.getPassword(),
+                    account.isEnabled(), true, true, true, authorities);
+            this.account = account;
+        }
+
+        public Account getAccount() {
+            return account;
+        }
+    }
+
+|
+
+.. _SpringSecurityAuthenticationUserDetailsService:
+
+UserDetailsServiceの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``UserDetailsService``\ は、認証処理で必要となる資格情報とユーザーの状態をデータストア
+から取得するためのインタフェースで、以下のメソッドが定義されている。
+\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、
+アプリケーションの要件に合わせて\ ``UserDetailsService``\ の実装クラスを作成する。
+
+* UserDetailsServiceインタフェース
+
+.. code-block:: java
+
+    public interface UserDetailsService {
+        UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
+    }
+
+|
+
+ここでは、データベースからアカウント情報を検索して、\ ``UserDetails``\ のインスタンス
+を生成するためのサービスクラスを作成する。
+本サンプルでは、\ ``SharedService``\ を使用して、アカウント情報を取得している。
+\ ``SharedService``\ については、:ref:`service-label`\ を参照されたい。
+
+* AccountSharedServiceインタフェースの作成例
+
+.. code-block:: java
+
+    public interface AccountSharedService {
+        Account findOne(String username);
+    }
+
+* AccountSharedServiceの実装クラスの作成例
+
+.. code-block:: java
+
+    // (1)
+    @Service
+    @Transactional
+    public class AccountSharedServiceImpl implements AccountSharedService {
+        @Inject
+        AccountRepository accountRepository;
+
+        // (2)
+        @Override
+        public Account findOne(String username) {
+            Account account = accountRepository.findOneByUsername(username);
+            if (account == null) {
+                throw new ResourceNotFoundException("The given account is not found! username="
+                        + username);
+            }
+            return account;
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AccountSharedService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
+        | 上記例では、コンポーネントスキャン機能を使って\ ``AccountSharedServiceImpl``\ をDIコンテナに登録している。
+    * - |  (2)
+      - | データベースからアカウント情報を検索する。
+        | アカウント情報が見つからない場合は、共通ライブラリの例外である\ ``ResourceNotFoundException``\ を発生させる。
+        | Repositoryの作成例については、「:doc:`../Tutorial/TutorialSecurity`」を参照されたい。
+
+* UserDetailsServiceの実装クラスの作成例
+
+.. code-block:: java
+
+    // (1)
+    @Service
+    @Transactional
+    public class AccountUserDetailsService implements UserDetailsService {
+        @Inject
+        AccountSharedService accountSharedService;
+
+        public UserDetails loadUserByUsername(String username)
+                throws UsernameNotFoundException {
+
+            try {
+                Account account = accountSharedService.findOne(username);
+                // (2)
+                return new AccountUserDetails(account, getAuthorities(account));
+            } catch (ResourceNotFoundException e) {
+                // (3)
+                throw new UsernameNotFoundException("user not found", e);
+            }
+        }
+
+        // (4)
+        private Collection<GrantedAuthority> getAuthorities(Account account) {
+            if (account.isAdmin()) {
+                return AuthorityUtils.createAuthorityList("ROLE_USER", "ROLE_ADMIN");
+            } else {
+                return AuthorityUtils.createAuthorityList("ROLE_USER");
+            }
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``UserDetailsService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
+        | 上記例では、コンポーネントスキャン機能を使って\ ``UserDetailsService``\ をDIコンテナに登録している。
+    * - | (2)
+      - | \ ``AccountSharedService``\ を使用してアカウント情報を取得する。
+        | アカウント情報が見つかった場合は、\ ``UserDetails``\ を生成する。
+        | 上記例では、ユーザー名、パスワード、ユーザーの有効状態をアカウント情報から取得している。
+    * - | (3)
+      - | アカウント情報が見つからない場合は、\ ``UsernameNotFoundException``\ を発生させる。
+    * - | (4)
+      - | ユーザーが保持する権限(ロール)情報を生成する。ここで生成した権限(ロール)情報は、認可処理で使用される。
+
+.. note:: **認可で使用する権限情報**
+
+    Spring Securityの認可処理は、\ ``"ROLE_"``\ で始まる権限情報をロールとして扱う。
+    そのため、ロールを使用してリソースへのアクセス制御を行う場合は、 ロールとして扱う権限情報に\ ``"ROLE_"``\ プレフィックスを付与する必要がある。
+
+.. note:: **認証例外情報の隠蔽**
+
+    Spring Securityのデフォルトの動作では、\ ``UsernameNotFoundException``\ は\ ``BadCredentialsException``\ という例外に変換してからエラー処理を行う。
+    \ ``BadCredentialsException``\ は、クライアントから指定された資格情報のいずれかの項目に誤りがあることを通知するための例外であり、具体的なエラー理由がクライアントに通知されることはない。
+
+|
+
+.. _AuthenticationProviderConfiguration:
+
+DB認証の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+作成した\ ``UserDetailsService``\ を使用して認証処理を行うためには、
+\ ``DaoAuthenticationProvider``\ を有効化して、作成した\ ``UserDetailsService``\ を適用する必要がある。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:authentication-manager> <!-- (1) -->
+        <sec:authentication-provider user-service-ref="accountUserDetailsService"> <!-- (2) -->
+            <sec:password-encoder ref="passwordEncoder" /> <!-- (3) -->
+        </sec:authentication-provider>
+    </sec:authentication-manager>
+
+    <bean id="passwordEncoder"
+        class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> <!-- (4) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationManager``\ をbean定義する。
+    * - | (2)
+      - | \ ``<sec:authentication-manager>``\ 要素内に ``<sec:authentication-provider>``\ 要素を定義する。
+        | ``user-service-ref``\ 属性に「:ref:`SpringSecurityAuthenticationUserDetailsService`」で作成した ``AccountUserDetailsService``\ のbeanを指定する。
+        | 本定義により、デフォルト設定の\ ``DaoAuthenticationProvider``\ が有効になる。
+    * - | (3)
+      - | パスワード照合時に使用する\ ``PasswordEncoder``\ のbeanを指定する。
+    * - | (4)
+      - | パスワード照合時に使用する\ ``PasswordEncoder``\ をBean定義する。
+        | 上記例では、パスワードをBCryptアルゴリズムでハッシュ化する\ ``BCryptPasswordEncoder``\ を定義している。
+        | パスワードのハッシュ化については、「:ref:`SpringSecurityAuthenticationPasswordHashing`」を参照されたい。
+
+|
+
+.. _SpringSecurityAuthenticationPasswordHashing:
+
+パスワードのハッシュ化
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+パスワードをデータベースなどに保存する場合は、パスワードそのものではなくパスワードの
+ハッシュ値を保存するのが一般的である。
+
+Spring Securityは、パスワードをハッシュ化するためのインタフェースと実装クラスを
+提供しており、認証機能と連携して動作する。
+
+Spring Securityが提供するインタフェースには、以下の2種類がある。
+
+* \ ``org.springframework.security.crypto.password.PasswordEncoder``\
+* \ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
+
+どちらも\ ``PasswordEncoder``\ という名前のインタフェースであるが、
+\ ``org.springframework.security.authentication.encoding``\ パッケージの\ ``PasswordEncoder``\
+は非推奨になっている。
+パスワードのハッシュ化要件に制約がない場合は、\ ``org.springframework.security.crypto.password``\
+パッケージの\ ``PasswordEncoder``\ インタフェースの実装クラスを使用することを推奨する。
+
+.. note::
+
+    非推奨の\ ``PasswordEncoder``\ の利用方法については、
+    「:ref:`AuthenticationHowToExtendUsingDeprecatedPasswordEncoder`」を参照されたい。
+
+|
+
+*org.springframework.security.crypto.password.PasswordEncoderのメソッド定義*
+
+.. code-block:: java
+
+    public interface PasswordEncoder {
+        String encode(CharSequence rawPassword);
+        boolean matches(CharSequence rawPassword, String encodedPassword);
+    }
+
+.. tabularcolumns:: |p{0.15\linewidth}|p{0.85\linewidth}|
+.. list-table:: **PasswordEncoderに定義されているメソッド**
+    :header-rows: 1
+    :widths: 15 85
+
+    * - メソッド名
+      - 説明
+    * - | \ ``encode``\
+      - | パスワードをハッシュ化するためのメソッド。
+        | アカウントの登録処理やパスワード変更処理などでデータストアに保存するパスワードをハッシュ化する際に使用できる。
+    * - | \ ``matches``\
+      - | 平文のパスワードとハッシュ化されたパスワードを照合するためのメソッド。
+        | このメソッドはSpring Securityの認証処理でも利用されるが、パスワード変更処理などで現在のパスワードや過去に使用していたパスワードと照合する際にも使用できる。
+
+|
+
+Spring Securityは、\ ``PasswordEncoder``\ インタフェースの実装クラスとして、以下のクラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **PasswordEncoderの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``BCryptPasswordEncoder``\
+      - | BCryptアルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
+        | **パスワードのハッシュ化要件に制約がない場合は、このクラスを使用することを推奨する。**
+        | 詳細は、\ `BCryptPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html>`_\ を参照されたい。
+    * - | \ ``StandardPasswordEncoder``\
+      - | SHA-256アルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
+        | 詳細は、\ `StandardPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/password/StandardPasswordEncoder.html>`_\ を参照されたい。
+    * - | \ ``NoOpPasswordEncoder``\
+      - | ハッシュ化しない実装クラス。
+        | テスト用のクラスなであり、実際のアプリケーションで使用することはない。
+
+本節では、Spring Securityが利用を推奨している\ ``BCryptPasswordEncoder``\ の使い方について説明する。
+
+|
+
+BCryptPasswordEncoder
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``BCryptPasswordEncoder``\ は、BCryptアルゴリズムを使用してパスワードのハッシュ化及びパスワードの照合を行う実装クラスである。
+:ref:`ソルト<SpringSecurityAuthenticationPasswordHashSalt>` には16バイトの乱数(\ ``java.security.SecureRandom``\ )が使用され、
+デフォルトでは1,024(2の10乗)回 :ref:`ストレッチング<SpringSecurityAuthenticationPasswordHashStength>` を行う。
+
+* applicationContext.xmlの定義例
+
+.. code-block:: xml
+
+  <bean id="passwordEncoder"
+      class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" > <!-- (1) -->
+      <constructor-arg name="strength" value="11" /> <!-- (2) -->
+  </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | passwordEncoderのクラスに\ ``BCryptPasswordEncoder``\ を指定する。
+    * - | (2)
+      - | コンストラクタの引数に、ハッシュ化のストレッチング回数のラウンド数を指定する。
+        | 本引数は省略可能であり、指定できる値は\ ``4``\から\ ``31``\ である。
+        | なお、未指定時のデフォルト値は\ ``10``\ である。
+        | 本ガイドラインでは説明を省略するが、コンストラクタ引数として\ ``java.security.SecureRandom.SecureRandom``\ を指定することも可能である。
+
+.. warning:: **SecureRandomの使用について**
+  
+    Linux環境で\ ``SecureRandom``\ を使用する場合、処理の遅延やタイムアウトが発生する場合がある。
+    これは使用する乱数生成器に左右される事象であり、以下のJava Bug Databaseに説明がある。
+  
+    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
+  
+    JDK 7のb20以降のバージョンでは、修正されている。
+  
+    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6521844
+  
+    本事象が発生する場合は、JVMのシステムプロパティに以下の設定を追加することで回避することができる。
+  
+    * ``-Djava.security.egd=file:/dev/./urandom``
+
+|
+
+\ ``BCryptPasswordEncoder``\ を使用して処理を行うクラスでは、\ ``PasswordEncoder``\ をDIコンテナからインジェクションして使用する。
+
+.. code-block:: java
+
+    @Service
+    @Transactional
+    public class AccountServiceImpl implements AccountService {
+
+        @Inject
+        AccountRepository accountRepository;
+
+        @Inject
+        PasswordEncoder passwordEncoder; // (1)
+
+        public Account register(Account account, String rawPassword) {
+            // omitted
+            String encodedPassword = passwordEncoder.encode(rawPassword); // (2)
+            account.setPassword(encodedPassword);
+            // omitted
+            return accountRepository.save(account);
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``PasswordEncoder``\ をインジェクションする。
+    * - | (2)
+      - | インジェクションした\ ``PasswordEncoder``\ のメソッドを呼び出す。
+        | ここでは、データストアに保存するパスワードをハッシュ化していいる。
+
+.. _SpringSecurityAuthenticationPasswordHashSalt:
+
+.. note:: **ソルト**
+
+    ハッシュ化対象のデータに追加する文字列のことである。
+    ソルトをパスワードに付与することで、実際のパスワードより桁数が長くなるため、レインボークラックなどのパスワード解析を困難にすることができる。
+    なお、**ソルトはユーザーごとに異なる値（ランダム値等）を設定することを推奨する。**
+    これは、同じソルトを使用していると、ハッシュ値からハッシュ化前の文字列(パスワード)がわかってしまう可能性があるためである。
+
+.. _SpringSecurityAuthenticationPasswordHashStength:
+
+.. note:: **ストレッチング**
+
+    ハッシュ関数の計算を繰り返し行うことで、保管するパスワードに関する情報を繰り返し暗号化することである。
+    パスワードの総当たり攻撃への対策として、パスワード解析に必要な時間を延ばすために行う。
+    しかし、ストレッチングはシステムの性能に影響を与えるので、システムの性能を考慮してストレッチング回数を決める必要がある。
+
+    Spring Securityのデフォルトでは1,024(2の10乗)回ストレッチングを行うが、この回数はコンストラクタ引数(\ ``strength``\ )で変更することができる。
+    \ ``strength``\ には4(16回)から31(2,147,483,648回)を指定することが可能である。
+    ストレッチング回数が多いほどパスワードの強度は増すが、計算量が多くなるため性能にあたえる影響も大きくなる。
+
+|
+
+.. _SpringSecurityAuthenticationEvent:
+
+認証イベントのハンドリング
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、Spring Frameworkが提供しているイベント通知の仕組みを利用して、
+認証処理の処理結果を他のコンポーネントと連携する仕組みを提供している。
+
+この仕組みを利用すると、以下のようなセキュリティ要件をSpring Securityの認証機能に組み込むことが可能である。
+
+* 認証成功、失敗などの認証履歴をデータベースやログに保存する。
+* パスワードを連続して間違った場合にアカウントをロックする。
+
+認証イベントの通知は、以下のような仕組みで行われる。
+
+.. figure:: ./images_Authentication/AuthenticationEventNotification.png
+    :width: 100%
+
+    **イベント通知の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityの認証機能は、認証結果(認証情報や認証例外)を
+        | \ ``AuthenticationEventPublisher``\ に渡して認証イベントの通知依頼を行う。
+    * - | (2)
+      - | \ ``AuthenticationEventPublisher``\ インタフェースのデフォルトの実装クラスは
+        | \ 認証結果に対応する認証イベントクラスのインスタンスを生成し、\ ``ApplicationEventPublisher``\ に渡してイベントの通知依頼を行う。
+    * - | (3)
+      - | \ ``ApplicationEventPublisher``\ インタフェースの実装クラスは、\ ``ApplicationListener``\ インタフェースの実装クラスにイベントを通知する。
+    * - | (4)
+      - | ``ApplicationListener``\ の実装クラスの一つである\ ``ApplicationListenerMethodAdaptor``\ は、
+        | \ ``@org.springframework.context.event.EventListener``\ が付与されているメソッドを呼び出してイベントを通知する。
+
+.. note:: **メモ**
+
+    Spring 4.1までは\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取る必要があったが、
+    Spring 4.2からはPOJOに\ ``@EventListener``\ を付与したメソッドを実装するだけでイベントを受け取ることが可能である。
+    なお、Spring 4.2以降でも、従来通り\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取ることもで可能である。
+
+Spring Security使用しているイベントは、認証が成功したことを通知するイベントと認証が失敗したことを通知するイベントの2種類に分類される。
+以下にSpring Securityが用意しているイベントクラスを説明する。
+
+|
+
+認証成功イベント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証が成功した時にSpring Securityが通知する主なイベントは以下の3つである。
+この3つのイベントは途中でエラーが発生しなければ、以下の順番ですべて通知される。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **認証が成功したことを通知するイベントクラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - イベントクラス
+      - 説明
+    * - \ ``AuthenticationSuccessEvent``\
+      - \ ``AuthenticationProvider``\ による認証処理が成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、クライアントが正しい認証情報を指定したことを検知することが可能である。
+        なお、このイベントをハンドリングした後の後続処理でエラーが発生する可能性がある点に注意されたい。
+    * - \ ``SessionFixationProtectionEvent``\
+      - セッション固定攻撃対策の処理(セッションIDの変更処理)が成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、変更後のセッションIDを検知することがで可能になる。
+    * - \ ``InteractiveAuthenticationSuccessEvent``\
+      - 認証処理がすべて成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、画面遷移を除くすべての認証処理が成功したことを検知することが可能になる。
+
+|
+
+認証失敗イベント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証が失敗した時にSpring Securityが通知する主なイベントは以下の通り。
+認証に失敗した場合は、いずれか一つのイベントが通知される。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **認証が失敗したことを通知するイベントクラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - イベントクラス
+      - 説明
+    * - | \ ``AuthenticationFailureBadCredentialsEvent``\
+      - | \ ``BadCredentialsException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureDisabledEvent``\
+      - | \ ``DisabledException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureLockedEvent``\
+      - | \ ``LockedException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureExpiredEvent``\
+      - | \ ``AccountExpiredException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureCredentialsExpiredEvent``\
+      - | \ ``CredentialsExpiredException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureServiceExceptionEvent``\
+      - | \ ``AuthenticationServiceException``\ が発生したことを通知するためのイベントクラス。
+
+|
+
+イベントリスナの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証イベントの通知を受け取って処理を行いたい場合は、\ ``@EventListener``\ を付与したメソッドを実装したクラスを作成し、DIコンテナに登録する。
+
+* イベントリスナクラスの実装例
+
+.. code-block:: java
+
+    @Component
+    public class AuthenticationEventListeners {
+
+        private static final Logger log =
+                LoggerFactory.getLogger(AuthenticationEventListeners.class);
+
+    @EventListener // (1) 
+    public void handleBadCredentials( 
+        AuthenticationFailureBadCredentialsEvent event) { // (2) 
+        log.info("Bad credentials is detected. username : {}", event.getAuthentication().getName()); 
+        // omitted 
+    } 
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ``@EventListener``\ をメソッドに付与したメソッドを作成する。
+    * - | (2)
+      - | メソッドの引数にハンドリングしたい認証イベントクラスを指定する。
+
+上記例では、クライアントが指定した認証情報に誤りがあった場合に通知される\ ``AuthenticationFailureBadCredentialsEvent``\ をハンドリングするクラスを作成する例としているが、
+他のイベントも同じ要領でハンドリングすることが可能である。
+
+|
+
+.. _SpringSecurityAuthenticationLogout:
+
+ログアウト
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れでログアウト処理を行いう。
+
+.. figure:: ./images_Authentication/AuthenticationLogout.png
+    :width: 100%
+
+    **ログアウト処理の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、ログアウト処理を行うためのパスにリクエストを送信する。
+    * - | (2)
+      - | \ ``LogoutFilter``\ は、\ ``LogoutHandler``\ のメソッドを呼び出し、実際のログアウト処理を行う。
+    * - | (3)
+      - | \ ``LogoutFilter``\ は、\ ``LogoutSuccessHandler``\ のメソッドを呼び出し、画面遷移を行う。
+
+|
+
+\ ``LogoutHandler``\ の実装クラスは複数存在し、それぞれ以下の役割をもっている。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **主なLogoutHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SecurityContextLogoutHandler``\
+      - | ログインユーザーの認証情報のクリアとセッションの破棄を行うクラス。
+    * - | \ ``CookieClearingLogoutHandler``\
+      - | 指定したクッキーを削除するためのレスポンスを行うクラス。
+    * - | \ ``CsrfLogoutHandler``\
+      - | CSRF対策用トークンの破棄を行うクラス。
+
+これらの\ ``LogoutHandler``\ は、Spring Securityが提供しているbean定義をサポートするクラスが自動で\ ``LogoutFilter``\ に設定する仕組みになっているため、
+基本的にはアプリケーションの開発者が直接意識する必要はない。
+また、:ref:`Remember Me認証機能<SpringSecurityAuthenticationRememberMe>` を有効にすると、Remember Me認証用のTokenを破棄するための\ ``LogoutHandler``\ の実装クラスも設定される。
+
+|
+
+ログアウト処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ログアウト処理を適用するためには、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout /> <!-- (1) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``<sec:logout>``\ タグを定義することで、ログアウト処理が有効となる。
+
+.. note:: **Spring Security 4.0における変更**
+
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
+
+    * logout-url 
+
+.. tip:: **Cookieの削除**
+
+   本ガイドラインでは説明を割愛するが、 \ ``<sec:logout>``\ タグには、ログアウト時に指定したCookieを削除するための\ ``delete-cookies``\ 属性が存在する。
+   ただし、この属性を使用しても正常にCookieが削除できないケースが報告されている。
+
+   詳細はSpring Securityの以下のJIRAを参照されたい。
+
+   * https://jira.spring.io/browse/SEC-2091
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、\ ``"/logout"``\ というパスにリクエストを送るとログアウト処理が行われる。
+ログアウト処理では、「ログインユーザーの認証情報のクリア」「セッションの破棄」が行われる。
+
+また、
+
+* CSRF対策を行っている場合は、「CSRF対策用トークンの破棄」
+* Remember Me認証機能を使用している場合は、「Remember Me認証用のTokenの破棄」
+
+も行われる
+
+.. _SpringSecurityAuthenticationLogoutForm:
+
+* ログアウト処理を呼び出すためのJSPの実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    <form:form action="${pageContext.request.contextPath}/logout" method="post"> <%-- (1) --%>
+        <button>ログアウト</button>
+    </form:form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ログアウト用のフォームを作成する。
+        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
+        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
+
+.. note:: **CSRFトークンの送信**
+
+    CSRF対策を有効にしている場合は、CSRF対策用のトークンをPOSTメソッドを使って送信する必要がる。
+
+|
+
+ログアウト成功時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、ログアウト成功時のレスポンスを制御するためのコンポーネントとして、
+\ ``LogoutSuccessHandler``\ というインタフェースと実装クラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationFailureHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SimpleUrlLogoutSuccessHandler``\
+      - | 指定したパス(\ ``defaultTargetUrl``\ )にリダイレクトを行う実装クラス。
+
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"logout"``\
+というクエリパラメータが付与されたURLにリダイレクトする。
+
+例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?logout"``\
+にリダイレクトされる。
+
+|
+
+.. _SpringSecurityAuthenticationAccess:
+
+認証情報へのアクセス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証されたユーザーの認証情報は、Spring Securityのデフォルト実装ではセッションに格納される。
+セッションに格納された認証情報は、リクエスト毎に\ ``SecurityContextPersistenceFilter``\ クラスによって\ ``SecurityContextHolder``\ というクラスに格納され、同一スレッド内であればどこからでもアクセスすることができるようになる。
+
+ここでは、認証情報から\ ``UserDetails``\ を取得し、取得した\ ``UserDetails``\ が保持している情報にアクセスする方法を説明する。
+
+Javaからのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+一般的な業務アプリケーションでは、「いつ」「誰が」「どのデータに」「どのようなアクセスをしたか」を記録する監査ログを取得することがある。
+このような要件を実現する際の「誰が」は、認証情報から取得することができる。
+
+* Javaから認証情報へアクセスする実装例
+
+.. code-block:: java
+
+    Authentication authentication =
+            SecurityContextHolder.getContext().getAuthentication(); // (1)
+    String userUuid = null;
+    if (authentication.getPrincipal() instanceof AccountUserDetails) {
+        AccountUserDetails userDetails =
+                AccountUserDetails.class.cast(authentication.getPrincipal()); // (2)
+        userUuid = userDetails.getAccount().getUserUuid(); // (3)
+    }
+    if (log.isInfoEnabled()) {
+        log.info("type:Audit\tuserUuid:{}\tresource:{}\tmethod:{}",
+                userUuid, httpRequest.getRequestURI(), httpRequest.getMethod());
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``SecurityContextHolder``\ から認証情報(\ ``Authentication``\ オブジェクト) を取得する。
+    * - | (2)
+      - | \ ``Authentication#getPrincipal()``\ メソッドを呼び出して、\ ``UserDetails``\ オブジェクトを取得する。
+        | 認証済みでない場合(匿名ユーザーの場合)は、匿名ユーザーであることを示す文字列が返却されるため注意されたい。
+    * - | (3)
+      - | \ ``UserDetails``\ から処理に必要な情報を取得する。
+        | ここでは、ユーザーを一意に識別するための値(UUID)を取得している。
+
+.. warning:: **認証情報へのアクセスと結合度**
+
+    Spring Securityのデフォルト実装では、認証情報をスレッドローカルの変数に格納しているため、リクエストを受けたスレッドと同じスレッドであればどこからでもアクセス可能である。
+    この仕組みは便利ではあるが、認証情報を必要とするクラスが\ ``SecurityContextHolder``\ クラスに直接依存してしまうため、乱用するとコンポーネントの疎結合性が低下するので注意が必要である。
+
+    Spring Securityでは、Spring MVCの機能と連携してコンポーネント間の疎結合性を保つための仕組みを別途提供している。
+    Spring MVCとの連携方法については、「:ref:`SpringSecurityAuthenticationIntegrationWithSpringMVC`」で説明する。
+    **本ガイドラインではSpring MVCとの連携を使用して認証情報を取得することを推奨する。**
+
+|
+
+JSPからのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+一般的なWebアプリケーションでは、ログインユーザーのユーザー情報などを画面に表示することがある。
+このような要件を実現する際のログインユーザーのユーザー情報は、認証情報から取得することができる。
+
+* JSPから認証情報へアクセスする実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    ようこそ、
+    <sec:authentication property="principal.account.lastName"/> <%-- (1) --%>
+    さん。
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityから提供されている\ ``<sec:authentication>``\ タグを使用して、認証情報(\ ``Authentication``\ オブジェクト) を取得する。
+        | \ ``property``\ 属性にアクセスしたいプロパティへのパスを指定する。
+        | ネストしているオブジェクトへアクセスしたい場合は、プロパティ名を\ ``"."``\ でつなげればよい。
+
+.. tip:: **認証情報の表示方法**
+
+    ここでは、認証情報が保持するユーザー情報を表示する際の実装例を説明したが、\ ``var``\ 属性と\ ``scope``\ 属性を組み合わせて任意のスコープ変数に値を格納することも可能である。
+    ログインユーザーの状態によって表示内容を切り替えたい場合は、ユーザー情報を変数に格納しておき、JSTLのタグライブラリなどを使って表示を切り替えることが可能である。
+
+    上記の例は、以下のように記述することでも実現することができる。
+    本例では、\ ``scope``\ 属性を省略しているため、\ ``page``\スコープが適用される。
+
+        .. code-block:: jsp
+
+            <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+            <%-- omitted --%>
+            <sec:authentication var="principal" property="principal"/>
+            <%-- omitted --%>
+            ようこそ、
+            ${f:h(principal.account.lastName)}
+            さん。
+
+|
+
+.. _SpringSecurityAuthenticationIntegrationWithSpringMVC:
+
+認証処理とSpring MVCの連携
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
+ここでは、認証処理と連携するためのコンポーネントの使い方を説明する。
+
+認証情報へのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、認証情報(\ ``UserDetails``\ )をSpring MVCのコントローラーのメソッドに引き渡すためのコンポーネントとして、\ ``AuthenticationPrincipalArgumentResolver``\ クラスを提供している。
+\ ``AuthenticationPrincipalArgumentResolver``\ を使用すると、コントローラーのメソッド引数として\ ``UserDetails``\ インタフェースまたはその実装クラスのインスタンスを受け取ることができるため、コンポーネントの疎結合性を高めることができる。
+
+認証情報(\ ``UserDetails``\ )をコントローラーの引数として受け取るためには、まず\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する必要がある。
+\ ``AuthenticationPrincipalArgumentResolver``\ を適用するためのbean定義は以下の通りである。
+\ なお、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ には\ ``AuthenticationPrincipalArgumentResolver``\ が設定済みである。
+
+* spring-mvc.xmlの定義例
+
+.. code-block:: xml
+
+    <mvc:annotation-driven>
+        <mvc:argument-resolvers>
+            <!-- omitted -->
+            <!-- (1) -->
+            <bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
+            <!-- omitted -->
+        </mvc:argument-resolvers>
+  </mvc:annotation-driven>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``HandlerMethodArgumentResolver``\ の実装クラスとして、\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する。
+
+|
+
+認証情報(\ ``UserDetails``\ )をコントローラーのメソッドで受け取る際は、以下のようなメソッドを作成する。
+
+* 認証情報(UserDetails)を受け取るメソッドの作成例
+
+.. code-block:: java
+
+    @RequestMapping("account")
+    @Controller
+    public class AccountController {
+
+        public String view(
+                @AuthenticationPrincipal AccountUserDetails userDetails, // (1)
+                Model model) {
+            model.addAttribute(userDetails.getAccount());
+            return "profile";
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認証情報(\ ``UserDetails``\ ) を受け取るための引数を宣言し、\ ``@org.springframework.security.core.annotation.AuthenticationPrincipal``\を引数アノテーションとして指定する。
+        | \ ``AuthenticationPrincipalArgumentResolver``\ は、\ ``@AuthenticationPrincipal``\ が付与されている引数に認証情報(\ ``UserDetails``\ )が設定される。
+
+|
+
+.. _SpringSecurityAuthenticationHowToExtend:
+
+How to extend
+--------------------------------------------------------------------------------
+
+本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
+
+Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントを紹介することはできないため、ここでは代表的なカスタマイズポイントに絞って説明を行う。
+
+|
+
+.. _SpringSecurityAuthenticationCustomizingForm:
+
+フォーム認証のカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+フォーム認証処理のカスタマイズポイントを説明する。
+
+認証パスの変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトでは、認証処理を実行するためのパスは「\ ``"/login"``\」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+    <sec:form-login login-processing-url="/authentication" /> <!-- (1) --> 
+    <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``login-processing-url``\ 属性に認証処理を行うためのパスを指定する。
+
+.. note::
+
+    認証処理のパスを変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` のリクエスト先も変更する必要がある。
+
+|
+
+資格情報を送るリクエストパラメータ名の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトでは、資格情報(ユーザー名とパスワード)を送るためのリクエストパラメータは「\ ``username``\」と「\ ``password``\ 」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <sec:form-login
+          username-parameter="uid"
+          password-parameter="pwd" /> <!-- (1) (2) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``username-parameter``\ 属性にユーザー名のリクエストパラメータ名を指定する。
+    * - | (2)
+      - | \ ``password-parameter``\ 属性にパスワードのリクエストパラメータ名を指定する。
+
+.. note::
+
+    リクエストパラメータ名を変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` 内の項目名も変更する必要がある。
+
+|
+
+認証成功時のレスポンスのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証成功時のレスポンスのカスタマイズポイントを説明する。
+
+デフォルト遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ログインフォームを自分で表示して認証処理を行った後の遷移先(デフォルトURL)は、
+Webアプリケーションのルートパス(\ ``"/"``\ )だが、以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <sec:form-login default-target-url="/menu" /> <!-- (1) -->
+  </sec:http>
+
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``default-target-url``\ 属性に認証成功時に遷移するデフォルトのパスを指定する。
+
+|
+
+遷移先の固定化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、未認証時に認証が必要なページへのリクエストを受信した場合は、受信したリクエストを一旦HTTPセッションに保存し、認証ページに遷移する。
+認証成功時にリクエストを復元してリダイレクトするが、以下のようなbean定義を行うことで常に同じ画面に遷移させることが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <sec:form-login
+          default-target-url="/menu"
+          always-use-default-target="true" /> <!-- (1) -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``always-use-default-target``\ 属性に\ ``true``\ を指定する。
+
+|
+
+AuthenticationSuccessHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
+以下のようなbean定義を行うことで\ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスを直接適用することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <bean id="authenticationSuccessHandler" class="com.example.app.security.handler.MyAuthenticationSuccessHandler"> <!-- (1) -->
+
+  <sec:http>
+      <sec:form-login authentication-success-handler-ref="authenticationSuccessHandler" /> <!-- (2) -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | ``authentication-success-handler-ref``\ 属性に定義した\ ``authenticationSuccessHandler``\ を指定する。
+
+.. warning:: **AuthenticationSuccessHandlerの責務**
+
+    \ ``AuthenticationSuccessHandler``\ は、認証成功時におけるWeb層の処理(主に画面遷移に関する処理)を行うためのインタフェースである。
+    そのため、認証失敗回数のクリアなどのビジネスルールに依存する処理（ビジネスロジック）をこのインタフェースの実装クラスを経由して呼び出すべきではない。
+
+    ビジネスルールに依存する処理の呼び出しは、前節で紹介している「:ref:`SpringSecurityAuthenticationEvent`」の仕組みを使用されたい。
+
+|
+
+.. _SpringSecurityAuthenticationCustomizingScreenFlowOnFailure:
+
+認証失敗時のレスポンスのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証失敗時のレスポンスのカスタマイズポイントを説明する。
+
+遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトするが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <sec:form-login authentication-failure-url="/loginFailure" /> <!-- (1) -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - |  (1)
+      - | \ ``authentication-failure-url``\ 属性に認証失敗時に遷移するパスを指定する。
+
+|
+
+AuthenticationFailureHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
+以下のようなbean定義を行うことで\ ``AuthenticationFailureHandler``\ インタフェースの実装クラスを直接適用することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+   <!-- (1) -->
+  <bean id="authenticationFailureHandler"
+      class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler" />
+      <property name="defaultFailureUrl" value="/login/systemError" /> <!-- (2) -->
+      <property name="exceptionMappings"> <!-- (3) -->
+          <props>
+              <prop key="org.springframework.security.authentication.BadCredentialsException"> <!-- (4) -->
+                  /login/badCredentials
+              </prop>
+              <prop key="org.springframework.security.core.userdetails.UsernameNotFoundException"> <!-- (5) -->
+                  /login/usernameNotFound
+              </prop>
+              <prop key="org.springframework.security.authentication.DisabledException"> <!-- (6) -->
+                  /login/disabled
+              </prop>
+              <!-- omitted -->
+          </props>
+      </property>
+  </bean>
+
+  <sec:http>
+      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" /> <!-- (7) -->
+  </sec:http>
+
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 20 80
+
+    * - | 項番
+      - | 説明
+    * - | (1)
+      - | \ ``AuthenticationFailureHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | \ ``defaultFailureUrl``\ 属性にデフォルトの遷移先のURLを指定する。
+        | 下記(4)-(6)の定義に合致しない例外が発生した際は、本設定の遷移先に遷移する。
+    * - | (3)
+      - | \ ``exceptionMappings``\ プロパティにハンドルする\ ``org.springframework.security.authentication.AuthenticationServiceException``\ の実装クラスと例外発生時の遷移先を \ ``Map``\ 形式で設定する。
+        | キーに\ ``org.springframework.security.authentication.AuthenticationServiceException``\ 実装クラスを設定し、値に遷移先URLを設定する。
+    * - | (4)
+      - | \ ``BadCredentialsException``\ 
+        | パスワード照合失敗による認証エラー時にスローされる。
+    * - | (5)
+      - | \ ``UsernameNotFoundException``\ 
+        | 不正ユーザーID（存在しないユーザーID）による認証エラー時にスローされる。
+        | ``org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider``\ を
+        | 継承したクラスを認証プロバイダに指定している場合、``hideUserNotFoundExceptions``\ プロパティを\ ``false``\ に変更しないと本例外は、\ ``BadCredentialsException``\ に変更される。
+    * - | (6)
+      - | \  ``DisabledException``\
+        | 無効ユーザーIDによる認証エラー時にスローされる。
+    * - | (7)
+      - | \ ``authentication-failure-handler-ref``\ 属性に\ ``authenticationFailureHandler``\ を設定する。
+
+.. note:: **例外発生時の制御**
+
+    \ ``exceptionMappings``\ プロパティに定義した例外が発生した場合、例外にマッピングした遷移先にリダイレクトされるが、
+    発生した例外オブジェクトがセッションスコープに格納されないため、Spring Securityが生成したエラーメッセージを画面に表示する事ができない。
+
+    そのため、遷移先の画面で表示するエラーメッセージは、リダイレクト先の処理(Controller又はViewの処理)で生成する必要がある。
+
+    また、以下のプロパティを参照する処理が呼び出されないため、設定値を変更しても動作が変わらないという点を補足しておく。
+
+    * ``useForward``
+    * ``allowSessionCreation``
+
+|
+
+ログアウト処理のカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ログアウト処理のカスタマイズポイントを説明する。
+
+ログアウトパスの変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトでは、ログアウト処理を実行するためのパスは「\ ``"/logout"``\」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout logout-url="/auth/logout" /> <!-- (1) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``logout-url``\ 属性を設定し、ログアウト処理を行うパスを指定する。
+
+.. note::
+
+    ログアウトパスを変更した場合は、:ref:`ログアウトフォーム<SpringSecurityAuthenticationLogoutForm>` のリクエスト先も変更する必要がある。
+
+.. tip:: **システムエラー発生時の振る舞い**
+    システムエラーが発生した場合は、業務継続不可となるケースが多いと考えられる。
+    システムエラー発生後、業務を継続させたくない場合は、以下のような対策を講じることを推奨する。
+    
+      * システムエラー発生時にセッション情報をクリアする。
+      * システムエラー発生時に認証情報をクリアする。
+    
+    ここでは、共通ライブラリの例外ハンドリング機能を使用してシステム例外発生時に認証情報をクリアする例を説明する。
+    例外ハンドリング機能の詳細についは「\ :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`\」を参照されたい。
+
+      .. code-block:: java
+
+        // (1)
+        public class LogoutSystemExceptionResolver extends SystemExceptionResolver {
+            // (2)
+            @Override
+            protected ModelAndView doResolveException(HttpServletRequest request,
+                    HttpServletResponse response, java.lang.Object handler,
+                    java.lang.Exception ex) {
+
+                // SystemExceptionResolverの処理を行う
+                ModelAndView resulut = super.doResolveException(request, response,
+                        handler, ex);
+
+                // 認証情報をクリアする (2)
+                SecurityContextHolder.clearContext();
+
+                return resulut;
+            }
+        }
+
+      .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+      .. list-table::
+          :header-rows: 1
+          :widths: 10 90
+      
+          * - 項番
+            - 説明
+          * - | (1)
+            - | \ ``org.terasoluna.gfw.web.exception.SystemExceptionResolver.SystemExceptionResolver``\ を拡張する。
+          * - | (2)
+            - | \ 認証情報をクリアする。
+
+    なお、認証情報をクリアする方法以外にも、セッションをクリアすることでも、同様の要件を満たすことができる。
+    プロジェクトの要件に合わせて実装されたい。
+
+|
+
+.. _SpringSecurityLogoutCustomizingScreenFlowOnSuccess:
+
+ログアウト成功時のレスポンスのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ログアウト処理成功時のレスポンスのカスタマイズポイントを説明する。
+
+遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+    <!-- omitted -->
+    <sec:logout logout-success-url="/logoutSuccess" /> <!-- (1) -->
+    <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``logout-success-url``\ 属性を設定し、ログアウト成功時に遷移するパスを指定する。
+
+|
+
+LogoutSuccessHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+  <!-- (1) -->
+  <bean id="logoutSuccessHandler" class="com.example.app.security.handler.MyLogoutSuccessHandler" /> 
+
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout success-handler-ref="logoutSuccessHandler" /> <!-- (2) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``LogoutSuccessHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | ``success-handler-ref``\ 属性に\ ``LogoutSuccessHandler``\ を設定する。
+
+|
+
+.. _SpringSecurityAuthenticationCustomizingMessage:
+
+エラーメッセージのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証に失敗した場合、Spring Securityが用意しているエラーメッセージが表示されるが、
+このエラーメッセージは変更することが可能である。
+
+メッセージ変更方法の詳細については、\ :doc:`../ArchitectureInDetail/WebApplicationDetail/MessageManagement`\ を参照されたい。
+
+システムエラー時のメッセージ
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証処理の中で予期しないエラー（システムエラーなど）が発生した場合、\ ``InternalAuthenticationServiceException``\ という例外が発生する。
+\ ``InternalAuthenticationServiceException``\ が保持するメッセージには、原因例外のメッセージが設定されるため、画面にそのまま表示するのは適切ではない。
+
+例えばユーザー情報をデーターベースから取得する時にDBアクセスエラーが発生した場合、\ ``SQLException``\ が保持する例外メッセージが画面に表示されることになる。
+システムエラーの例外メッセージを画面に表示させないためには、\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用して\ ``InternalAuthenticationServiceException``\ をハンドリングし、
+システムエラーが発生したことを通知するためのパスに遷移させるなどの対応が必要となる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <bean id="authenticationFailureHandler"
+        class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
+        <property name="defaultFailureUrl" value="/login?error" />
+        <property name="exceptionMappings">
+            <props>
+                <prop key="org.springframework.security.authentication.InternalAuthenticationServiceException">
+                    /login?systemError
+                </prop>
+                <!-- omitted -->
+            </props>
+        </property>
+    </bean>
+
+  <sec:http>
+      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" />
+  </sec:http>
+
+|
+
+ここでは、システムエラーが発生したことを識別するためのクエリパラメータ(\ ``systemError``\ )を付けてログインフォームに遷移させている。
+遷移先に指定したログインフォームでは、クエリパラメータに\ ``systemError``\ が指定されている場合は、認証例外のメッセージを表示するのではなく、
+固定のエラーメッセージを表示するようにしている。
+
+* ログインフォームの実装例
+
+.. code-block:: jsp
+
+    <c:choose>
+        <c:when test="${param.containsKey('error')}">
+            <span style="color: red;">
+                <c:out value="${SPRING_SECURITY_LAST_EXCEPTION.message}"/>
+            </span>
+        </c:when>
+        <c:when test="${param.containsKey('systemError')}">
+            <span style="color: red;">
+                System Error occurred.
+            </span>
+        </c:when>
+    </c:choose>
+
+.. note::
+
+    ここでは、ログインフォームに遷移させる場合の実装例を紹介したが、システムエラー画面に遷移させてもよい。
+
+|
+
+.. _SpringSecurityAuthenticationBeanValidation:
+
+認証時の入力チェック
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+DBサーバへの負荷軽減等で、認証ページおける、あきらかな入力誤りに対しては、事前にチェックを行いたい場合がある。
+このような場合は、Bean Validationを使用した入力チェックも可能である。
+
+Bean Validationによる入力チェック
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+以下にBean Validationを使用した入力チェックの例を説明する。
+Bean Validationに関する詳細は \ :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`\ を参照すること。
+
+* フォームクラスの実装例
+
+.. code-block:: java
+
+    public class LoginForm implements Serializable {
+
+        // omitted
+        @NotEmpty // (1)
+        private String username;
+
+        @NotEmpty // (1)
+        private String password;
+        // omitted
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 本例では、\ ``username``\ 、\ ``password``\ をそれぞれ必須入力としている。
+
+
+* コントローラクラスの実装例
+
+.. code-block:: java
+
+    @ModelAttribute
+    public LoginForm setupForm() { // (1)
+        return new LoginForm();
+    }
+
+    @RequestMapping(value = "login")
+    public String login(@Validated LoginForm form, BindingResult result) {
+        // omitted
+        if (result.hasErrors()) {
+            // omitted
+        }
+        return "forward:/authenticate"; // (2)
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``LoginForm``\ を初期化する。
+    * - | (2)
+      - | forwardで\ ``<sec:form-login>``\ 要素の\ ``login-processing-url``\ 属性に指定したパスに **Forward** する。
+        | 認証に関する設定は、\ :ref:`SpringSecurityAuthenticationCustomizingForm`\を参照すること。
+
+加えて、Forwardによる遷移でもSpring Securityの処理が行われるよう、認証パスをSpring Securityサーブレットフィルタに追加する。
+
+* web.xmlの設定例
+
+.. code-block:: xml
+
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>
+            org.springframework.web.filter.DelegatingFilterProxy
+        </filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+    <!-- (1) -->
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/authenticate</url-pattern>
+        <dispatcher>FORWARD</dispatcher>
+    </filter-mapping>    
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Forwardで認証するためのパターンを指定する
+        | ここでは認証パスである\ ``"/authenticate"``\ を指定している。
+
+|
+
+認証処理の拡張
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityから提供されている\ `認証プロバイダ <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/authentication/AuthenticationProvider.html>`_\ で対応できない認証要件がある場合は、
+\ ``org.springframework.security.authentication.AuthenticationProvider``\ インタフェースを実装したクラスを作成する必要がある。
+
+ここでは、ユーザー名、パスワード、\ **会社識別子(独自の認証パラメータ)**\ の3つのパラメータを使用してDB認証を行うための拡張例を示す。
+
+.. figure:: ./images_Authentication/Authentication_HowToExtends_LoginForm.png
+   :alt: Authentication_HowToExtends_LoginForm
+   :width: 50%
+
+上記の要件を実現するためには、以下に示すクラスを作成する必要がある。
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ユーザー名、パスワード、会社識別子を保持する\ ``org.springframework.security.core.Authentication``\ インタフェースの実装クラス。
+        | ここでは、\ ``org.springframework.security.authentication.UsernamePasswordAuthenticationToken``\ クラスを継承して作成する。
+    * - | (2)
+      - | ユーザー名、パスワード、会社識別子を使用してDB認証を行う\ ``org.springframework.security.authentication.AuthenticationProvider``\ の実装クラス。
+        | ここでは、\ ``org.springframework.security.authentication.dao.DaoAuthenticationProvider``\ クラスを継承して作成する。
+    * - | (3)
+      - | ユーザー名、パスワード、会社識別子をリクエストパラメータから取得して、\ ``AuthenticationManager``\ (\ ``AuthenticationProvider``\ )に渡す\ ``Authentication``\ を生成するためのAuthentication Filterクラス。
+        | ここでは、\ ``org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter``\ クラスを継承して作成する。
+
+.. note::
+
+    ここでは、認証用のパラメータとして独自のパラメータを追加する例にしているため、
+    \ ``Authentication``\ インタフェースの実装クラスと\ ``Authentication``\ を生成するためのAuthentication Filterクラスの拡張が必要となる。
+
+    ユーザー名とパスワードのみで認証する場合は、\ ``AuthenticationProvider``\ インタフェースの実装クラスを作成するだけで、
+    認証処理を拡張することができる。
+
+|
+
+Authenticationインターフェースの実装クラスの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``UsernamePasswordAuthenticationToken``\ クラスを継承し、ユーザー名とパスワードに加えて、会社識別子(独自の認証パラメータ)を保持するクラスを作成する。
+
+.. code-block:: java
+
+    // import omitted
+    public class CompanyIdUsernamePasswordAuthenticationToken extends
+        UsernamePasswordAuthenticationToken {
+
+        private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;
+
+        // (1)
+        private final String companyId;
+
+        // (2)
+        public CompanyIdUsernamePasswordAuthenticationToken(
+                Object principal, Object credentials, String companyId) {
+            super(principal, credentials);
+            this.companyId = companyId;
+        }
+
+        // (3)
+        public CompanyIdUsernamePasswordAuthenticationToken(
+                Object principal, Object credentials, String companyId,
+                Collection<? extends GrantedAuthority> authorities) {
+            super(principal, credentials, authorities);
+            this.companyId = companyId;
+        }
+
+        public String getCompanyId() {
+            return companyId;
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 会社識別子を保持するフィールドを作成する。
+   * - | (2)
+     - | 認証前の情報(リクエストパラメータで指定された情報)を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
+   * - | (3)
+     - | 認証済みの情報を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
+       | 親クラスのコンストラクタの引数に認可情報を渡すことで、認証済みの状態となる。
+
+|
+
+AuthenticationProviderインターフェースの実装クラスの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``DaoAuthenticationProvider``\ クラスを継承し、ユーザー名、パスワード、会社識別子を使用してDB認証を行うクラスを作成する。
+
+.. code-block:: java
+
+    // import omitted
+    public class CompanyIdUsernamePasswordAuthenticationProvider extends
+        DaoAuthenticationProvider {
+
+        // omitted
+
+        @Override
+        protected void additionalAuthenticationChecks(UserDetails userDetails,
+                UsernamePasswordAuthenticationToken authentication)
+                throws AuthenticationException {
+
+            // (1)
+            super.additionalAuthenticationChecks(userDetails, authentication);
+
+            // (2)
+            CompanyIdUsernamePasswordAuthenticationToken companyIdUsernamePasswordAuthentication =
+                    (CompanyIdUsernamePasswordAuthenticationToken) authentication;
+            String requestedCompanyId = companyIdUsernamePasswordAuthentication.getCompanyId();
+            String companyId = ((SampleUserDetails) userDetails).getAccount().getCompanyId();
+            if (!companyId.equals(requestedCompanyId)) {
+                throw new BadCredentialsException(messages.getMessage(
+                        "AbstractUserDetailsAuthenticationProvider.badCredentials",
+                        "Bad credentials"));
+            }
+        }
+
+        @Override
+        protected Authentication createSuccessAuthentication(Object principal,
+                Authentication authentication, UserDetails user) {
+            String companyId = ((SampleUserDetails) user).getAccount()
+                    .getCompanyId();
+            // (3)
+            return new CompanyIdUsernamePasswordAuthenticationToken(user,
+                    authentication.getCredentials(), companyId,
+                    user.getAuthorities());
+        }
+
+        @Override
+        public boolean supports(Class<?> authentication) {
+            // (4)
+            return CompanyIdUsernamePasswordAuthenticationToken.class
+                    .isAssignableFrom(authentication);
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | 親クラスのメソッドを呼び出し、Spring Securityが提供しているチェック処理を実行する。
+       | この処理にはパスワード認証処理も含まれる。
+   * - | (2)
+     - | パスワード認証が成功した場合は、会社識別子(独自の認証パラメータ)の妥当性をチェックする。
+       | 上記例では、リクエストされた会社識別子とテーブルに保持している会社識別子が一致するかをチェックしている。
+   * - | (3)
+     - | パスワード認証及び独自の認証処理が成功した場合は、認証済み状態の\ ``CompanyIdUsernamePasswordAuthenticationToken``\ を作成して返却する。
+   * - | (4)
+     - | \ ``CompanyIdUsernamePasswordAuthenticationToken``\ にキャスト可能な\ ``Authentication``\ が指定された場合に、本クラスを使用して認証処理を行うようにする。
+
+.. note::
+
+    ユーザーの存在チェック、ユーザーの状態チェック(無効ユーザー、ロック中ユーザー、利用期限切れユーザーなどのチェック)は、
+    \ ``additionalAuthenticationChecks``\ メソッドが呼び出される前に親クラスの処理として行われる。
+
+|
+
+.. _authentication_custom_usernamepasswordauthenticationfilter:
+
+Authentication Filterの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``UsernamePasswordAuthenticationFilter``\ クラスを継承し、
+認証情報(ユーザー名、パスワード、会社識別子)を\ ``AuthenticationProvider``\ に引き渡すためのAuthentication Filterクラスを作成する。
+
+\ ``attemptAuthentication``\ メソッドの実装は、\ ``UsernamePasswordAuthenticationFilter``\ クラスのメソッドをコピーしてカスタマイズしたものである。
+
+.. code-block:: java
+
+    // import omitted
+    public class CompanyIdUsernamePasswordAuthenticationFilter extends
+        UsernamePasswordAuthenticationFilter {
+
+        @Override
+        public Authentication attemptAuthentication(HttpServletRequest request,
+                HttpServletResponse response) throws AuthenticationException {
+
+            if (!request.getMethod().equals("POST")) {
+                throw new AuthenticationServiceException("Authentication method not supported: "
+                        + request.getMethod());
+            }
+
+            // (1)
+            // Obtain UserName, Password, CompanyId
+            String username = super.obtainUsername(request);
+            String password = super.obtainPassword(request);
+            String companyId = obtainCompanyId(request);
+            if (username == null) {
+                username = "";
+            } else {
+                username = username.trim();
+            }
+            if (password == null) {
+                password = "";
+            }
+            CompanyIdUsernamePasswordAuthenticationToken authRequest =
+                new CompanyIdUsernamePasswordAuthenticationToken(username, password, companyId);
+
+            // Allow subclasses to set the "details" property
+            setDetails(request, authRequest);
+
+            return this.getAuthenticationManager().authenticate(authRequest); // (2)
+        }
+
+        // (3)
+        protected String obtainCompanyId(HttpServletRequest request) {
+            return request.getParameter("companyId");
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | リクエストパラメータから取得した認証情報(ユーザー名、パスワード、会社識別子)より、\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンスを生成する。
+   * - | (2)
+     - | リクエストパラメータで指定された認証情報(\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンス)を指定して、\ ``org.springframework.security.authentication.AuthenticationManager``\ の\ ``authenticate``\ メソッドを呼び出す。
+       | 
+       | \ ``AuthenticationManager``\ のメソッドを呼び出すと、\ ``AuthenticationProvider``\ の認証処理が呼び出される。
+   * - | (3)
+     - | 会社識別子は、\ ``"companyId"``\ というリクエストパラメータより取得する。
+
+|
+
+ログインフォームの修正
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ :ref:`SpringSecurityAuthenticationLoginForm`\ で作成したログインフォーム(JSP)に対して、会社識別子を追加する。
+
+.. code-block:: jsp
+
+    <form:form action="${pageContext.request.contextPath}/login" method="post">
+        <!-- omitted -->
+            <tr>
+                <td><label for="username">User Name</label></td>
+                <td><input type="text" id="username" name="username"></td>
+            </tr>
+            <tr>
+                <td><label for="companyId">Company Id</label></td>
+                <td><input type="text" id="companyId" name="companyId"></td> <!-- (1) -->
+            </tr>
+            <tr>
+                <td><label for="password">Password</label></td>
+                <td><input type="password" id="password" name="password"></td>
+            </tr>
+        <!-- omitted -->
+    </form:form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 会社識別子の入力フィールド名に\ ``"companyId"``\ を指定する。
+
+|
+
+拡張した認証処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ユーザー名、パスワード、会社識別子(独自の認証パラメータ)を使用したDB認証機能をSpring Securityに適用する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- omitted -->
+
+    <!-- (1) -->
+    <sec:http
+        entry-point-ref="loginUrlAuthenticationEntryPoint">
+
+        <!-- omitted -->
+
+        <!-- (2) -->
+        <sec:custom-filter
+            position="FORM_LOGIN_FILTER" ref="companyIdUsernamePasswordAuthenticationFilter" />
+
+        <!-- omitted -->
+
+        <sec:csrf token-repository-ref="csrfTokenRepository" />
+
+        <sec:logout
+            logout-url="/logout"
+            logout-success-url="/login" />
+
+        <!-- omitted -->
+
+        <sec:intercept-url pattern="/login" access="permitAll" />
+        <sec:intercept-url pattern="/**" access="isAuthenticated()" />
+
+        <!-- omitted -->
+
+    </sec:http>
+
+    <!-- (3) -->
+    <bean id="loginUrlAuthenticationEntryPoint"
+        class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
+        <constructor-arg value="/login" />
+    </bean>
+
+    <!-- (4) -->
+    <bean id="companyIdUsernamePasswordAuthenticationFilter"
+        class="com.example.app.common.security.CompanyIdUsernamePasswordAuthenticationFilter">
+        <!-- (5) -->
+        <property name="requiresAuthenticationRequestMatcher">
+            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                <constructor-arg index="0" value="/authentication" />
+                <constructor-arg index="1" value="POST" />
+            </bean>
+        </property>
+        <!-- (6) -->
+        <property name="authenticationManager" ref="authenticationManager" />
+        <!-- (7) -->
+        <property name="sessionAuthenticationStrategy" ref="sessionAuthenticationStrategy" />
+        <!-- (8) -->
+        <property name="authenticationFailureHandler">
+            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
+                <constructor-arg value="/login?error=true" />
+            </bean>
+        </property>
+        <!-- (9) -->
+        <property name="authenticationSuccessHandler">
+            <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler" />
+        </property>
+    </bean>
+
+    <!-- (6') -->
+    <sec:authentication-manager alias="authenticationManager">
+        <sec:authentication-provider ref="companyIdUsernamePasswordAuthenticationProvider" />
+    </sec:authentication-manager>
+    <bean id="companyIdUsernamePasswordAuthenticationProvider"
+        class="com.example.app.common.security.CompanyIdUsernamePasswordAuthenticationProvider">
+        <property name="userDetailsService" ref="sampleUserDetailsService" />
+        <property name="passwordEncoder" ref="passwordEncoder" />
+    </bean>
+
+    <!-- (7') -->
+    <bean id="sessionAuthenticationStrategy"
+        class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
+        <constructor-arg>
+            <util:list>
+                <bean class="org.springframework.security.web.csrf.CsrfAuthenticationStrategy">
+                    <constructor-arg ref="csrfTokenRepository" />
+                </bean>
+                <bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
+            </util:list>
+        </constructor-arg>
+    </bean>
+
+    <bean id="csrfTokenRepository"
+        class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository" />
+
+
+    <!-- omitted -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | (2)の\ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える場合は、\ ``<sec:http>``\ タグの属性に以下の設定を行う必要がある。
+
+        * 自動設定を使用することができないため、\ ``auto-config="false"``\ を指定するか、\ ``auto-config``\ 属性を削除する。
+        * \ ``<sec:form-login>``\ タグが使用できないため、\ ``entry-point-ref``\ 属性を使用して\ ``AuthenticationEntryPoint``\ を明示的に指定する。
+
+    * - | (2)
+      - | \ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える。
+        | 
+        | \ ``<sec:custom-filter>``\ タグの\ ``position``\ 属性に\ ``"FORM_LOGIN_FILTER"``\を指定し、\ ``ref``\ 属性に拡張したAuthentication Filterのbeanを指定する。
+    * - | (3)
+      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に使用する\ ``AuthenticationEntryPoint``\ のbeanを指定する。
+        | 
+        | ここでは、\ ``<sec:form-login>``\ タグを指定した際に使用される\ ``org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint``\ クラスのbeanを指定している。
+    * - | (4)
+      - | \ ``"FORM_LOGIN_FILTER"``\ として使用するAuthentication Filterクラスのbeanを定義する。
+        | 
+        | ここでは、拡張したAuthentication Filterクラス(\ ``CompanyIdUsernamePasswordAuthenticationFilter``\ )のbeanを定義している。
+    * - | (5)
+      - | \ ``requiresAuthenticationRequestMatcher``\ プロパティに、認証処理を行うリクエストを検出するための\ ``RequestMatcher``\ インスタンスを指定する。
+        | 
+        | ここでは、\ ``"/authentication"``\ というパスにリクエストがあった場合に認証処理を行うように設定している。
+        | これは、\ ``<sec:form-login>``\ タグの\ ``login-processing-url``\ 属性に\ ``"/authentication"``\ を指定したのと同義である。
+    * - | (6)
+      - | \ ``authenticationManager``\ プロパティに、\ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性に設定した値を指定する。
+        | 
+        | \ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性を指定すると、
+        | Spring Securityが生成した\ ``AuthenticationManager``\ のbeanを、他のbeanへDIすることができる様になる。
+    * - | (6')
+      - | Spring Securityが生成する\ ``AuthenticationManager``\ に対して、拡張した\ ``AuthenticationProvider``\ (\ ``CompanyIdUsernamePasswordAuthenticationProvider``\ )を設定する。
+    * - | (7)
+      - | \ ``sessionAuthenticationStrategy``\ プロパティに、認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを指定する。
+        | 
+    * - | (7')
+      - | 認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを定義する。
+        | 
+        | ここでは、Spring Securityから提供されている、
+         
+        * CSRFトークンを作り直すコンポーネント(\ ``CsrfAuthenticationStrategy``\ )
+        * セッション・フィクセーション攻撃を防ぐために新しいセッションを生成するコンポーネント(\ ``SessionFixationProtectionStrategy``\ )
+        
+        | を有効化している。
+    * - | (8)
+      - | \ ``authenticationFailureHandler``\ プロパティに、認証失敗時に呼ばれるハンドラクラスを指定する。
+    * - | (9)
+      - | \ ``authenticationSuccessHandler``\ プロパティに、認証成功時に呼ばれるハンドラクラスを指定する。
+
+.. note:: **auto-configについて**
+
+    \ ``auto-config="false"``\ を指定又は指定を省略した際にBasic認証処理とログアウト処理を有効化したい場合は、\ ``<sec:http-basic>``\ タグと\ ``<sec:logout>``\ タグを明示的に定義する必要がある。
+
+|
+
+.. _AuthenticationHowToExtendUsingDeprecatedPasswordEncoder:
+
+非推奨パッケージのPasswordEncoderの利用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+セキュリティ要件によっては、前述した\ ``PasswordEncoder``\ を実装したクラスでは実現できない場合がある。
+特に、既存のアカウント情報で使用しているハッシュ化要件を踏襲する必要がある場合は、前述の\ ``PasswordEncoder``\ では要件を満たせないことがある。
+
+具体的には、既存のハッシュ化要件が以下のようなケースである。
+
+* アルゴリズムがSHA-512である。
+* ストレッチング回数が1000回である。
+* ソルトがアカウントテーブルのカラムに格納されており、\ ``PasswordEncoder``\ の外から渡す必要がある。
+
+このようなケースでは、\ ``org.springframework.security.crypto.password.PasswordEncoder``\ インタフェースの実装クラスではなく、
+\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスの使用することで要件を満たすことができる。
+
+.. warning::
+
+    Spring Security 3.1.4以前では、\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
+    を実装したクラスをハッシュ化に使用していたが、3.1.4以降では非推奨となっている。
+
+|
+
+ShaPasswordEncoderの利用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+本ガイドラインでは、\ ``ShaPasswordEncoder``\ を例に、非推奨パッケージの\ ``PasswordEncoder``\ の利用について説明する。
+
+ハッシュ化要件が以下のケースの場合は、\ ``ShaPasswordEncoder``\ を利用することで要件を満たすことができる。
+
+* アルゴリズムがSHA-512
+* ストレッチング回数を1000回
+
+|
+
+まず、\ ``ShaPasswordEncoder``\ のbeanを定義する。
+
+* applicationContext.xmlの定義例
+
+.. code-block:: xml
+  
+    <bean id ="passwordEncoder"
+        class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"> <!-- (1) -->
+        <constructor-arg value="512" /> <!-- (2) -->
+        <property name="iterations" value="1000" /> <!-- (3) -->
+    </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.springframework.security.authentication.encoding.ShaPasswordEncoder``\ のbeanを定義する。
+    * - | (2)
+      - | SHAアルゴリズムの種類を指定する。
+        | 指定可能な値は、「\ ``1``\ 、\ ``256``\ 、\ ``384``\ 、\ ``512``\ 」である。
+        | 省略した場合は、「\ ``1``\ 」となる。
+    * - | (3)
+      - | ハッシュ化時のストレッチング回数を指定する。
+        | 省略した場合は、1回となる。
+
+|
+
+次に、\ ``ShaPasswordEncoder``\ をSpring Securityの認証処理(\ ``DaoAuthenticationProvider``\ )に適用する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+    <bean id="authenticationProvider"
+        class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
+        <!-- omitted -->
+        <property name="saltSource" ref="saltSource" /> <!-- (1) -->
+        <property name="userDetailsService" ref="userDetailsService" />
+        <property name="passwordEncoder" ref="passwordEncoder" /> <!-- (2) -->
+    </bean>
+  
+    <bean id="saltSource"
+        class="org.springframework.security.authentication.dao.ReflectionSaltSource"> <!-- (3) -->
+        <property name="userPropertyToUse" value="username" /> <!-- (4) -->
+    </bean>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``saltSource``\ プロパティに\ ``org.springframework.security.authentication.dao.SaltSource``\ インタフェースの実装クラスのbeanを指定する。
+        | \ ``SaltSource``\ は、ソルトを\ ``UserDetails``\ から取得するためのインタフェースである。
+    * - | (2)
+      - | \ ``passwordEncoder``\ プロパティに\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスのbeanを指定する。
+        | 上記例では、\ ``ShaPasswordEncoder``\ のbeanを指定している。
+    * - | (3)
+      - | \ ``SaltSource``\ のbeanを定義する。
+        | 上記例では、リフレクションを使用して\ ``UserDetails``\ のプロパティからソルトを取得するクラス(\ ``ReflectionSaltSource``\ )を利用している。
+    * - | (4)
+      - | ソルトが格納されている\ ``UserDetails``\ のプロパティを指定する。
+        | 上記例では、\ ``UserDetails``\ の\ ``username``\ プロパティの値をソルトとして使用する。
+
+|
+
+アプリケーションの処理で非推奨の\ ``PasswordEncoder``\ を使用する場合は、\ ``PasswordEncoder``\ をインジェクションして使用する。
+
+* Javaクラスの実装例
+
+.. code-block:: java
+  
+    @Inject
+    PasswordEncoder passwordEncoder;
+  
+    public String register(Customer customer, String rawPassword, String userSalt) {
+        // omitted
+        String password = passwordEncoder.encodePassword(rawPassword, userSalt); // (1)
+        customer.setPassword(password);
+        // omitted
+    }
+  
+    public boolean matches(Customer customer, String rawPassword, String userSalt) {
+        return passwordEncoder.isPasswordValid(customer.getPassword(), rawPassword, userSalt); // (2)
+    }
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | パスワードをハッシュ化する場合は、\ ``encodePassword``\ メソッドを使用する。
+        | メソッドの引数には、パスワード、ソルト文字列の順で指定する。
+    * - | (2)
+      - | パスワードを照合する場合ば、\ ``isPasswordValid``\ メソッドを使用する。
+        | メソッドの引数には、ハッシュ化済みのパスワード、平文のパスワード、ソルト文字列の順で指定する。
+
+|
+
+Appendix
+--------------------------------------------------------------------------------
+
+.. _spring-security-authentication-mvc:
+
+Spring MVCでリクエストを受けてログインフォームを表示する
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring MVCでリクエストを受けてログインフォームを表示する方法を説明する。
+
+* spring-mvc.xmlの定義例
+
+ログインフォームを表示するControllerの定義例。
+
+.. code-block:: java
+
+    @Controller
+    @RequestMapping("/login")
+    public class LoginController { // (1)
+
+        @RequestMapping
+        public String index() {
+            return "login";
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | view名として"login"を返却する。\ ``InternalResourceViewResolver``\ によってsrc/main/webapp/WEB-INF/views/login.jspが出力される。
+
+本例のように、単純にview名を返すだけのメソッドが一つだけあるControllerであれば、\ ``<mvc:view-controller>``\ を使用して代用することも可能である。  
+
+* \ ``<mvc:view-controller>``\ を使用したControllerの定義例。
+
+.. code-block:: xml
+
+    <mvc:view-controller path="/login" view-name="login" /><!-- (1) -->
+
+|
+
+.. _SpringSecurityAuthenticationRememberMe:
+
+Remember Me認証の利用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+「\ `Remember Me認証 <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me>`_\ 」とは、
+Webサイトに頻繁にアクセスするユーザーの利便性を高めるための機能の一つで、ログイン状態を通常のライフサイクルより長く保持するための機能である。
+本機能を使用すると、ブラウザを閉じた後やセッションタイムが発生した後でも、Cookieに保持しているRemember Me認証用のTokenを使用して、
+ユーザ名とパスワードを再入力することなく自動でログインすることができる。
+なお、本機能は、ユーザーがログイン状態を保持することを許可した場合のみ有効となる。
+
+Spring Securityは、「`Hash-Based Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-hash-token>`_ 方式のRemember Me認証」と「`Persistent Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-persistent-token>`_ 方式のRemember Me認証」をサポートしており、
+デフォルトではHash-Based Token方式が使用される。
+
+|
+
+Remember Me認証を利用する場合は、\ ``<sec:remember-me>``\ タグを追加する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:remember-me key="terasoluna-tourreservation-km/ylnHv"
+            token-validity-seconds="#{30 * 24 * 60 * 60}" />  <!-- (1) (2) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``key``\ 属性に、Remember Me認証用のTokenを生成したアプリケーションを識別するキー値を指定する。
+        | キー値の指定が無い場合、アプリケーションの起動毎にユニークな値が生成される。
+        | なお、Hash-Based Tokenが保持しているキー値とサーバーで保持しているキー値が異なる場合、無効なTokenとして扱われる。
+        | つまり、アプリケーションを再起動する前に生成したHash-Based Tokenを有効なTokenとして扱いたい場合は、\ ``key``\ 属性の指定は必須である。
+    * - | (2)
+      - | \ ``token-validity-seconds``\ 属性に、Remember Me認証用のTokenの有効時間を秒単位で指定する。
+        | 指定が無い場合、デフォルトで14日間が有効時間になる。
+        | 上記例では、有効時間として30日間を設定している。
+
+上記以外の属性については、\ `Spring Security Reference -The Security Namespace (<remember-me>) - <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-remember-me>`_\ を参照されたい。
+
+.. note:: **Spring Security 4.0における変更**
+
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
+
+    * remember-me-parameter
+    * remember-me-cookie
+
+|
+
+ログインフォームには、「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を用意する。
+
+* ログインフォームのJSPの実装例
+
+.. code-block:: jsp
+
+    <form:form action="${pageContext.request.contextPath}/login" method="post">
+            <!-- omitted -->
+            <tr>
+                <td><label for="remember-me">Remember Me : </label></td>
+                <td><input name="remember-me" id="remember-me" type="checkbox" checked="checked"></td> <!-- (1) -->
+            </tr>
+            <!-- omitted -->
+    </form:form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を追加し、フィールド名(リクエストパラメータ名)には\ ``remember_me``\ を指定する。
+        | チェックボックスをチェック状態にしてから認証処理を実行すると、以降のリクエストから「Remember Me認証」機能が適用される。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/Authorization.rst b/source/Security/Authorization.rst
index 61878a9cd3..a2e9fcd7bf 100755
--- a/source/Security/Authorization.rst
+++ b/source/Security/Authorization.rst
@@ -1,1117 +1,1117 @@
-.. _SpringSecurityAuthorization:
-
-認可
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-Overview
---------------------------------------------------------------------------------
-本節では、Spring Securityが提供している認可機能について説明する。
-
-認可処理は、アプリケーションの利用者がアクセスできるリソースを制御するための処理である。
-利用者がアクセスできるリソースを制御するためのもっとも標準的な方法は、
-リソース(又はリソースの集合)毎にアクセスポリシーを定義してき、利用者がリソースにアクセスしようとした時にアクセスポリシーを調べて制御する方法である。
-
-アクセスポリシーには、どのリソースにどのユーザーからのアクセスを許可するかを定義する。
-Spring Securityでは、以下の3つのリソースに対してアクセスポリシーを定義することができる。
-
-* Webリソース
-* Javaメソッド
-* ドメインオブジェクト \ [#fSpringSecurityAuthorization1]_\
-* JSPの画面項目
-
-本節では、「Webリソース」「Javaメソッド」「JSPの画面項目」のアクセスに対して認可処理を適用するための実装例(定義例)を紹介しながら、Spring Securityの認可機能について説明する。
-
-.. [#fSpringSecurityAuthorization1] ドメインオブジェクトのアクセスに対する認可処理については、 \ `Spring Security Reference -Domain Object Security (ACLs)- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#domain-acls>`_\ を参照されたい。
-
-|
-
-認可処理のアーキテクチャ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、以下のような流れで認可処理を行う。
-
-.. figure:: ./images_Authorization/AuthorizationArchitecture.png
-    :width: 100%
-
-    **認可処理のアーキテクチャ**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | クライアントは、任意のリソースにアクセスする。
-    * - | (2)
-      - | \ ``FilterSecurityInterceptor``\ クラスは、\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出し、リソースへのアクセス権の有無をチェックする。
-    * - | (3)
-      - | \ ``AffirmativeBased``\ クラス(デフォルトで使用される\ ``AccessDecisionManager``\ の実装クラス)は、\ ``AccessDecisionVoter``\ インタフェースのメソッドを呼び出し、アクセス権の有無を投票させる。
-    * - | (4)
-      - | \ ``FilterSecurityInterceptor``\ は、\ ``AccessDecisionManager``\ によってアクセス権が付与された場合に限り、リソースへアクセスする。
-
-|
-
-ExceptionTranslationFilter
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``ExceptionTranslationFilter``\ は、認可処理(\ ``AccessDecisionManager``\ )で発生した例外をハンドリングし、クライアントへ適切なレスポンスを行うためのSecurity Filterである。
-デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
-
-|
-
-FilterSecurityInterceptor
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``FilterSecurityInterceptor``\ は、HTTPリクエストに対して認可処理を適用するためのSecurity Filterで、実際の認可処理は\ ``AccessDecisionManager``\ に委譲する。
-\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出す際には、クライアントがアクセスしようとしたリソースに指定されているアクセスポリシーを連携する。
-
-|
-
-AccessDecisionManager
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AccessDecisionManager``\ は、アクセスしようとしたリソースに対してアクセス権があるかチェックを行うためのインタフェースである。
-
-Spring Securityが提供する実装クラスは3種類存在するが、いずれも\ ``AccessDecisionVoter``\というインタフェースのメソッドを呼び出してアクセス権を付与するか否かを判定させている。
-\ ``AccessDecisionVoter``\ は「付与」「拒否」「棄権」のいずれかを投票し、\ ``AccessDecisionManager``\ の実装クラスが投票結果を集約して最終的なアクセス権を判断する。
-アクセス権がないと判断した場合は、\ ``AccessDeniedException``\ を発生させアクセスを拒否する。
-
-なお、すべての投票結果が「棄権」であった場合、Spring Securityのでデフォルトでは、「アクセス権なし」と判定される。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供するAccessDecisionManagerの実装クラス**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``AffirmativeBased``\
-      - | \ ``AccessDecisionVoter``\ に投票させ、「付与」が１件投票された時点でアクセス権を与える実装クラス。
-        | **デフォルトで使用される実装クラス。**
-    * - | \ ``ConsensusBased``\
-      - | 全ての\ ``AccessDecisionVoter``\ に投票させ、「付与」の投票数が多い場合にアクセス権を与える実装クラス。
-        | 「付与」「拒否」が１件以上、且つ同数の場合、Spring Securityのデフォルトでは、「アクセス権あり」と判定される。
-    * - | \ ``UnanimousBased``\
-      - | \ ``AccessDecisionVoter``\ に投票させ、「拒否」が１件投票された時点で **アクセス権を与えない** 実装クラス。
-
-.. note:: **AccessDecisionVoterの選択**
-
-    使用する\ ``AccessDecisionVoter``\ が1つの場合はどの実装クラスを使っても動作に違いはない。
-    複数の\ ``AccessDecisionVoter``\ を使用する場合は、要件に合わせて実装クラスを選択されたい。
-
-|
-
-AccessDecisionVoter
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AccessDecisionVoter``\ は、アクセスしようとしたリソースに指定されているアクセスポリシーを参照してアクセス権を付与するかを投票するためのインタフェースである。
-
-Spring Securityが提供する主な実装クラスは以下の通り。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供するAccessDecisionVoterの主な実装クラス**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``WebExpressionVoter``\
-      - | SpEL経由で認証情報(\ ``Authentication``\ )が保持する権限情報とリクエスト情報(\ ``HttpServletRequest``\ )を参照して投票を行う実装クラス。
-    * - | \ ``RoleVoter``\
-      - | 利用者が持つロールを参照して投票を行う実装クラス。
-    * - | \ ``RoleHierarchyVoter``\
-      - | 利用者が持つ階層化されたロールを参照して投票を行う実装クラス。
-    * - | \ ``AuthenticatedVoter``\
-      - | 認証状態を参照して投票を行う実装クラス。
-
-.. note:: **デフォルトで適用されるAccessDecisionVoter**
-
-    デフォルトで適用される\ ``AccessDecisionVoter``\ インタフェースの実装クラスは、Spring Security 4.0から\ ``WebExpressionVoter``\ に統一されている。
-    \ ``WebExpressionVoter``\ は、\ ``RoleVoter``\ 、\ ``RoleHierarchyVoter``\ 、\ ``AuthenticatedVoter``\ を使用した時と同じことが実現できるため、
-    本ガイドラインでも、デフォルトの\ ``WebExpressionVoter``\ を使って認可処理を行う前提で説明を行う。
-
-|
-
-How to use
---------------------------------------------------------------------------------
-
-認可機能を使用するために必要となるbean定義例(アクセスポリシーの指定方法)や実装方法について説明する。
-
-|
-
-.. _SpringSecurityAuthorizationPolicy:
-
-アクセスポリシーの記述方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-アクセスポリシーの記述方法を説明する。
-
-Spring Securityは、アクセスポリシーを指定する記述方法としてSpring Expression Language(SpEL)をサポートしている。
-SpELを使わない方法もあるが、本ガイドラインではExpressionを使ってアクセスポリシーを指定する方法で説明を行う。
-SpELの使い方については本節でも紹介するが、より詳しい使い方を知りたい場合は \ `Spring Framework Reference Documentation -Spring Expression Language (SpEL)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/htmlsingle/#expressions>`_\ を参照されたい。
-
-|
-
-Built-InのCommon Expressions
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityが用意している共通的なExpressionは以下の通り。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table:: **Spring Securityが提供している共通的なExpression**
-    :header-rows: 1
-    :widths: 30 70
-
-    * - Expression
-      - 説明
-    * - | \ ``hasRole(String role)``\
-      - | ログインユーザーが、引数に指定したロールを保持している場合に\ ``true``\ を返却する。
-    * - | \ ``hasAnyRole(String... roles)``\
-      - | ログインユーザー、が引数に指定したロールのいずれかを保持している場合に\ ``true``\ を返却する。
-    * - | \ ``isAnonymous()``\
-      - | ログインしていない匿名ユーザーの場合に\ ``true``\ を返却する。
-    * - | \ ``isRememberMe()``\
-      - | Remember Me認証によってログインしたユーザーの場合に\ ``true``\ を返却する。
-    * - | \ ``isAuthenticated()``\
-      - | ログイン中の場合に\ ``true``\ を返却する。
-    * - | \ ``isFullyAuthenticated()``\
-      - | Remember Me認証ではなく通常の認証プロセスによってログインしたユーザーの場合に\ ``true``\ を返却する。
-    * - | \ ``permitAll``\
-      - | 常に\ ``true``\ を返却する。
-    * - | \ ``denyAll``\
-      - | 常に\ ``false``\ を返却する。
-    * - | \ ``principal``\
-      - | 認証されたユーザーのユーザー情報(\ ``UserDetails``\ インタフェースを実装したクラスのオブジェクト)を返却する。
-    * - | \ ``authentication``\
-      - | 認証されたユーザーの認証情報(\ ``Authentication``\ インタフェースを実装したクラスのオブジェクト)を返却する。
-
-.. note:: **Expressionを使用した認証情報へのアクセス**
-
-    Expressionとして\ ``principal``\ や\ ``authentication``\ を使用すると、ログインユーザーのユーザー情報や認証情報を参照することができるため、ロール以外の属性を使ってアクセスポリシーを設定することが可能になる。
-
-.. note:: **ロール名のプレフィックス** 
-
-    Spring Security 3.2までは、ロール名には\ ``"ROLE_"`` \ プレフィックスを指定する必要があったが、Spring Security 4.0から\ ``"ROLE_"`` \ プレフィックスの指定が不要となっている。 
-
-    例）
-
-    * Spring Secuirty 3.2以前 : \ ``hasRole('ROLE_USER')``\ 
-    * Spring Security 4.0以降 : \ ``hasRole('USER')``\ 
-
-|
-
-Built-InのWeb Expressions
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityが用意しているWebアプリケーション向けExpressionは以下の通り。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table:: **Spring Securityが提供するWebアプリケーション向けExpression**
-    :header-rows: 1
-    :widths: 30 70
-
-    * - Expression
-      - 説明
-    * - | \ ``hasIpAddress(String ipAddress)``\
-      - | リクエスト元のIPアドレスが、引数に指定したIPアドレス体系に一致する場合に\ ``true``\ を返却する。
-
-演算子の使用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-演算子を使用した判定も行うことができる。
-以下の例では、ロールと、リクエストされたIPアドレス両方に合致した場合、アクセス可能となる。
-
-* spring-security.xmlの定義例
-
-  .. code-block:: xml
-  
-    <sec:http>
-        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN') and hasIpAddress('192.168.10.1')"/>
-        <!-- omitted -->
-    </sec:http>
-  
-  **使用可能な演算子一覧**
-  
-  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 20 80
-  
-     * - 演算子
-       - 説明
-     * - | \ ``[式1] and [式2]``\ 
-       - | 式1、式2が、どちらも真の場合に、真を返す。
-     * - | \ ``[式1] or [式2]``\ 
-       - | いずれかの式が、真の場合に、真を返す。
-     * - | \ ``![式]``\ 
-       - | 式が真の場合は偽を、偽の場合は真を返す。
-
-|
-
-Webリソースへの認可
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、サーブレットフィルタの仕組みを利用してWebリソース(HTTPリクエスト)に対して認可処理を行う。
-
-認可処理の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Webリソースに対して認可処理を適用する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:intercept-url pattern="/**" access="isAuthenticated()" />  <!-- (1) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:intercept-url>``\ タグに、HTTPリクエストに対してアクセスポリシーを定義する。
-        | ここでは、SpELを使用して「Webアプリケーション配下の全てのリクエストに対して認証済みのユーザーのみアクセスを許可する」というアクセスポリシーを定義している。
-
-.. note:: **use-expressionsのデフォルト定義**
-
-    Spring Security 4.0から、\ ``<sec:http>``\  タグの\ ``use-expressions``\ 属性のデフォルト値が\ ``true``\ に変更になっているため、\ ``true``\を使用する場合に明示的な記述は不要となった。
-
-アクセスポリシーの定義
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-bean定義ファイルを使用して、Webリソースに対してアクセスポリシーを定義する方法について説明する。
-
-アクセスポリシーを適用するWebリソースの指定
-''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-
-
-まず、アクセスポリシーを適用するリソース(HTTPリクエスト)を指定する。
-アクセスポリシーを適用するリソースの指定は、\ ``<sec:intercept-url>``\ タグの以下の属性を使用する。
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-.. list-table:: **アクセスポリシーを適用するリソースを指定するための属性**
-    :header-rows: 1
-    :widths: 20 80
-
-    * - 属性名
-      - 説明
-    * - | \ ``pattern``\
-      - | Ant形式又は正規表現で指定したパスパターンに一致するリソースを適用対象にするための属性。
-    * - | \ ``method``\
-      - | 指定したHTTPメソッド(GET,POSTなど)を使ってアクセスがあった場合に適用対象にするための属性。
-    * - | \ ``requires-channel``\ 
-      - | 「http」、もしくは「https」を指定する。指定したプロトコルでのアクセスを強制するための属性。
-        | 指定しない場合、どちらでもアクセス可能である。
-
-上記以外の属性については、\ `<intercept-url> <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-intercept-url>`_\ を参照されたい。
-
-* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
-
-.. code-block:: xml
-
-    <sec:http >
-        <sec:intercept-url pattern="/admin/accounts/**" access="..."/>
-        <sec:intercept-url pattern="/admin/**" access="..."/>
-        <sec:intercept-url pattern="/**" access="..."/>
-        <!-- omitted -->
-    </sec:http>
-
-
-Spring Securityは定義した順番でリクエストとのマッチング処理を行い、最初にマッチした定義を適用する。
-そのため、bean定義ファイルを使用してアクセスポリシーを指定する場合も定義順番には注意が必要である。
-
-.. tip:: **パスパターンの解釈**
-
-    Spring Securityのデフォルトの動作では、パスパターンはAnt形式で解釈する。
-    パスパターンを正規表現で指定したい場合は、\ ``<sec:http>``\ タグの\ ``request-matcher``\ 属性に
-    \ ``"regex"``\ を指定すること。
-
-      .. code-block:: xml
-
-          <sec:http request-matcher="regex">
-              <sec:intercept-url pattern="/admin/accounts/.*" access=hasRole('ACCOUNT_MANAGER')" />
-              <!-- omitted -->
-          </sec:http>
-
-アクセスポリシーの指定
-''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-
-つぎに、アクセスポリシーを指定する。
-アクセスポリシーの指定は、\ ``<sec:intercept-url>``\ タグの\ ``access``\ 属性に指定する。
-
-* \ ``<sec:intercept-url>``\ タグ\ ``access``\ 属性の定義例（\ ``spring-security.xml``\ ）
-
-  .. code-block:: xml
-  
-    <sec:http>
-        <sec:intercept-url pattern="/admin/accounts/**" access="hasRole('ACCOUNT_MANAGER')"/>
-        <sec:intercept-url pattern="/admin/configurations/**" access="hasIpAddress('127.0.0.1') and hasRole('CONFIGURATION_MANAGER')" />
-        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
-        <!-- omitted -->
-    </sec:http>
-  
-  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-  .. list-table:: **アクセスポリシーを指定するための属性**
-     :header-rows: 1
-     :widths: 20 80
-  
-     * - 属性名
-       - 説明
-     * - | \ ``access``\ 
-       - | SpELでのアクセス制御式や、アクセス可能なロールを指定する。
-
-| ログインユーザーに「ROLE_USER」「ROLE_ADMIN」というロールがある場合を例に、設定例を示す。
-
-* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
-
-  .. code-block:: xml
-  
-    <sec:http>
-        <sec:intercept-url pattern="/reserve/**" access="hasAnyRole('USER','ADMIN')" /> <!-- (1) -->
-        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" /> <!-- (2) -->
-        <sec:intercept-url pattern="/**" access="denyAll" /> <!-- (3) -->
-        <!-- omitted -->
-    </sec:http>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 「/reserve/\**」にアクセスするためには、「ROLE_USER」もしくは「ROLE_ADMIN」ロールが必要である。
-         | \ ``hasAnyRole``\ については、後述する。
-     * - | (2)
-       - | 「/admin/\**」にアクセスするためには、「ROLE_ADMIN」ロールが必要である。
-         | \ ``hasRole``\ については、後述する。
-     * - | (3)
-       - | \ ``denyAll``\ を全てのパターンに設定し、
-         | 権限設定が記述されていないURLに対してはどのユーザーもアクセス出来ない設定としている。
-         | \ ``denyAll``\ については、後述する。
-
-  .. note:: **URLパターンの記述順序について**
-
-     クライアントからのリクエストに対して、intercept-urlで記述されているパターンに、上から順にマッチさせ、マッチしたパターンに対してアクセス認可を行う。
-     そのため、パターンの記述は、必ず、より限定されたパターンから記述すること。
-
-\ Spring Securiyではデフォルトで、SpELが有効になっている。 
-\ ``access``\ 属性に記述したSpELは真偽値で評価され、式が真の場合に、アクセスが認可される。
-以下に使用例を示す。
-
-* spring-security.xmlの定義例
-
-  .. code-block:: xml
-  
-    <sec:http>
-        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>  <!-- (1) -->
-        <!-- omitted -->
-    </sec:http>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``hasRole('ロール名')``\ を指定することで、ログインユーザーが指定したロールを保持していれば真を返す。
-  
-  .. _spring-el:
-  
-使用可能な主なExpressionは、:ref:`SpringSecurityAuthorizationPolicy` を参照されたい。
-
-|
-
-メソッドへの認可
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、Spring AOPの仕組みを利用してDIコンテナで管理しているBeanのメソッド呼び出しに対して認可処理を行う。
-
-メソッドに対する認可処理は、ドメイン層(サービス層)のメソッド呼び出しに対して行うことを想定して提供されている。
-メソッドに対する認可処理を使用すると、ドメインオブジェクトのプロパティを参照することができるため、きめの細かいアクセスポリシーの定義を行うことが可能になる。
-
-|
-
-AOPの有効化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-メソッドへの認可処理を使用する場合は、メソッド呼び出しに対して認可処理を行うためのコンポーネント(AOP)を有効化する必要がある。
-AOPを有効化すると、アクセスポリシーをメソッドのアノテーションに定義できるようになる。
-
-Spring Securityは、以下のアノテーションをサポートしている。
-
-* \ ``@PreAuthorize``\ 、\ ``@PostAuthorize``\ 、\ ``@PreFilter``\ 、\ ``@PostFilter``\
-* JSR-250 (\ ``javax.annotation.security``\ パッケージ)のアノテーション(\ ``@RolesAllowed``\ など)
-* \ ``@Secured``\
-
-本ガイドラインでは、アクセスポリシーをExpressionで使用することができる\ ``@PreAuthorize``\、\ ``@PostAuthorize``\ を使用する方法を説明する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:global-method-security pre-post-annotations="enabled" /> <!-- (1) (2) -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:global-method-security>``\ タグを付与すると、メソッド呼び出しに対する認可処理を行うAOPが有効になる。
-    * - | (2)
-      - | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定する。
-        | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定すると、Expressionを指定してアクセスポリシーを定義できるアノテーションが有効になる。
-
-|
-
-認可処理の適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-メソッドに対して認可処理を適用する際は、アクセスポリシーを指定するアノテーションを使用して、メソッド毎にアクセスポリシーを定義する。
-
-アクセスポリシーの定義
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-メソッド実行前に適用するアクセスポリシーの指定
-''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-
-メソッドの実行前に適用するアクセスポリシーを指定する場合は、\ ``@PreAuthorize``\ を使用する。
-
-\ ``@PreAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行が許可される。
-下記例では、管理者以外は、他人のアカウント情報にアクセスできないように定義している。
-
-* \ ``@PreAuthorize``\ の定義例
-
-.. code-block:: java
-
-    // (1) (2)
-    @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
-    public Account findOne(String username) {
-        return accountRepository.findOne(username);
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | 認可処理を適用したいメソッドに、\ ``@PreAuthorize``\ を付与する。
-    * - | (2)
-      - | \ ``value``\ 属性に、メソッドに対してアクセスポリシーを定義する。
-        | ここでは、「管理者の場合は全てのアカウントへのアクセスを許可する」「管理者以外の場合は自身のアカウントへのアクセスのみ許可する」というアクセスポリシーを定義している。
-
-ここでポイントになるのは、Expressionの中からメソッドの引数にアクセスしている部分である。
-具体的には、「\ ``#username``\ 」の部分が引数にアクセスしている部分である。
-Expression内で「# + 引数名」形式のExpressionを指定することで、メソッドの引数にアクセスすることができる。
-
-.. tip:: **引数名を指定するアノテーション**
-
-    Spring Securityは、クラスに出力されているデバッグ情報から引数名を解決する仕組み
-    になっているが、アノテーション(\ ``@org.springframework.security.access.method.P``\ )
-    を使用して明示的に引数名を指定することもできる。
-
-    以下のケースにあてはまる場合は、アノテーションを使用して明示的に変数名を指定する。
-
-    * クラスに変数のデバッグ情報を出力しない
-    * Expressionの中から実際の変数名とは別の名前を使ってアクセスしたい (例えば短縮した名前)
-
-      .. code-block:: java
-
-          @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
-          public Account findOne(@P("username") String username) {
-              return accountRepository.findOne(username);
-          }
-    
-    なお、\ ``#username``\ と、メソッドの引数である \ ``username``\ の名称が一致している場合は \ ``@P``\ を省略することが可能である。
-    ただし、Spring Securityは引数名の解決を、実装クラスの引数名を使用して行っているため ``@PreAuthorize`` アノテーションをインターフェースに定義している場合には、
-    **実装クラスの引数名を、 @PreAuthorize 内で指定した #username と一致させる必要がある** ので、注意されたい。
-
-    JDK 8 から追加されたコンパイルオプション(\ ``-parameters``\ )を使用すると、メソッドパラメータにリフレクション用のメタデータが生成されるため、アノテーションを指定しなくても引数名が解決される。
-
-メソッド実行後に適用するアクセスポリシーの指定
-''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-
-メソッドの実行後に適用するアクセスポリシーを指定する場合は、\ ``@PostAuthorize``\ を使用する。
-
-\ ``@PostAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行結果が呼び出し元に返却される。
-下記例では、所属する部署が違うユーザーのアカウント情報にアクセスできないように定義している。
-
-* \ ``@PostAuthorize``\ の定義例
-
-.. code-block:: java
-
-    @PreAuthorize("...")
-    @PostAuthorize("(returnObject == null) " +
-            "or (returnObject.departmentCode == principal.account.departmentCode)")
-    public Account findOne(String username) {
-        return accountRepository.findOne(username);
-    }
-
-ここでポイントになるのは、Expressionの中からメソッドの返り値にアクセスしている部分である。
-具体的には、「\ ``returnObject.departmentCode``\ 」の部分が返り値にアクセスしている部分である。
-Expression内で「\ ``returnObject``\ 」を指定すると、メソッドの返り値にアクセスすることができる。
-
-|
-
-JSPの画面項目への認可
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、JSPタグライブラリを使用してJSPの画面項目に対して認可処理を適用することができる。
-
-ここでは最もシンプルな定義を例に、JSPの画面項目のアクセスに対して認可処理を適用する方法について説明する。
-
-|
-
-アクセスポリシーの定義
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-JSPタグライブラリを使用してJSPの画面項目に対してアクセスポリシーを定義する際は、表示を許可する条件(アクセスポリシー)をJSPに定義する。
-
-* アクセスポリシー定義例
-
-.. code-block:: jsp
-
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-
-    <!-- (1) -->
-    <sec:authorize access="hasRole('ADMIN')"> <!-- (2) -->
-        <h2>Admin Menu</h2>
-        <!-- omitted -->
-    </sec:authorize>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | アクセスポリシーを適用したい部分を\ ``<sec:authorize>``\ タグで囲む。
-    * - | (2)
-      - | \ ``access``\ 属性にアクセスポリシーを定義する。ここでは、「管理者の場合は表示を許可する」というアクセスポリシーを定義している。
-
-|
-
-Webリソースに指定したアクセスポリシーとの連動
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ボタンやリンクなど(サーバーへのリクエストを伴う画面項目)に対してアクセスポリシーを定義する際は、リクエスト先のWebリソースに定義されているアクセスポリシーと連動させる。
-Webリソースに指定したアクセスポリシーと連動させる場合は、\ ``<sec:authorize>``\ タグの\ ``url``\ 属性を使用する。
-
-\ ``url``\ 属性に指定したWebリソースにアクセスできる場合に限り\ ``<sec:authorize>``\ タグの中に実装したJSPの処理が実行される。
-
-* Webリソースに定義されているアクセスポリシーとの連携例
-
-.. code-block:: jsp
-
-    <ul>
-        <!-- (1) -->
-        <sec:authorize url="/admin/accounts"> <!-- (2) -->
-            <li>
-                <a href="<c:url value='/admin/accounts' />">Account Management</a>
-            </li>
-        </sec:authorize>
-    </ul>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | ボタンやリンクを出力する部分を\ ``<sec:authorize>``\ タグで囲む。
-    * - | (2)
-      - | \ ``<sec:authorize>``\ タグの\ ``url``\ 属性にWebリソースへアクセスするためのURLを指定する。
-        | ここでは、「\ ``"/admin/accounts"``\ というURLが割り振られているWebリソースにアクセス可能な場合は表示を許可する」というアクセスポリシーを定義しており、Webリソースに定義されているアクセスポリシーを直接意識する必要がない。
-
-.. note:: **HTTPメソッドによるポリシーの指定**
-
-    Webリソースのアクセスポリシーの定義をする際に、HTTPメソッドによって異なるアクセスポリシーを指定している場合は、\ ``<sec:authorize>``\ タグの\ ``method``\ 属性を指定して、連動させる定義を特定すること。
-
-.. warning:: **表示制御に関する留意点**
-
-    ボタンやリンクなどの表示制御を行う場合は、必ずWebリソースに定義されているアクセスポリシーと連動させること。
-
-    ボタンやリンクに対して直接アクセスポリシーの指定を行い、Webリソース自体にアクセスポリシーを定義していないと、
-    URLを直接してアクセスするような不正なアクセスを防ぐことができない。
-
-|
-
-認可処理の判定結果を変数に格納
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``<sec:authorize>``\ タグを使って呼び出した認可処理の判定結果は、変数に格納して使いまわすことができる。
-
-* JSPの実装例
-
-.. code-block:: jsp
-
-    <sec:authorize url="/admin/accounts"
-                   var="hasAccountsAuthority"/> <!-- (1) -->
-
-    <c:if test="${hasAccountsAuthority}"> <!-- (2) -->
-        <!-- omitted -->
-    </c:if>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - |  (1)
-      - | \ ``var``\ 属性に判定結果を格納するための変数名を指定する。
-        | アクセスが許可された場合は、変数に\ ``true``\ が設定される。
-    * - | (2)
-      - | 変数の値を参照して表示処理を実装する。
-
-|
-
-認可エラー時のレスポンス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、リソースへのアクセスを拒否した場合、以下のような流れでエラーをハンドリングしてレスポンスの制御を行う。
-
-.. figure:: ./images_Authorization/AuthorizationAccessDeniedHandling.png
-    :width: 100%
-
-    **認可エラーのハンドリングの仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Spring Securityは、リソースやメソッドへのアクセスを拒否するために、\ ``AccessDeniedException``\ を発生させる。
-    * - | (2)
-      - | \ ``ExceptionTranslationFilter``\ クラスは、\ ``AccessDeniedException``\ をキャッチし、\ ``AccessDeniedHandler``\ または\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
-    * - | (3)
-      - | 認証済みのユーザーからのアクセスの場合は、\ ``AccessDeniedHandler``\ インタフェースのメソッドを呼び出してエラー応答を行う。
-    * - | (4)
-      - | 未認証のユーザーからのアクセスの場合は、\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
-
-|
-
-AccessDeniedHandler
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AccessDeniedHandler``\ インタフェースは、認証済みのユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
-Spring Securityは、\ ``AccessDeniedHandler``\ インタフェースの実装クラスとして以下のクラスを提供している。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供するAccessDeniedHandlerの実装クラス**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``AccessDeniedHandlerImpl``\
-      - | HTTPレスポンスコードに403(Forbidden)を設定し、指定されたエラーページに遷移する。
-        | エラーページの指定がない場合は、HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
-    * - | \ ``InvalidSessionAccessDeniedHandler``\
-      - | \ ``InvalidSessionStrategy``\ インタフェースの実装クラスに処理を委譲する。
-        | このクラスは、CSRF対策とセッション管理機能を使用してセッションタイムアウトを検知する設定を有効にした際に、CSRFトークンがセッションに存在しない(つまりセッションタイムアウトが発生している)場合に使用される。
-    * - | \ ``DelegatingAccessDeniedHandler``\
-      - | \ ``AccessDeniedException``\ と\ ``AccessDeniedHandler``\ インタフェースの実装クラスのマッピングを行い、発生した\ ``AccessDeniedException``\に対応する\ ``AccessDeniedHandler``\ インタフェースの実装クラスに処理を委譲する。
-        | \ ``InvalidSessionAccessDeniedHandler``\ はこの仕組みを利用して呼び出されている。
-
-
-Spring Securityのデフォルトの設定では、エラーページの指定がない\ ``AccessDeniedHandlerImpl``\ が使用される。
-
-|
-
-AuthenticationEntryPoint
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``AuthenticationEntryPoint``\ インタフェースは、未認証のユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
-Spring Securityは、\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスとして以下のクラスを提供している。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **Spring Securityが提供する主なAuthenticationEntryPointの実装クラス**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - クラス名
-      - 説明
-    * - | \ ``LoginUrlAuthenticationEntryPoint``\
-      - | フォーム認証用のログインフォームを表示する。
-    * - | \ ``BasicAuthenticationEntryPoint``\
-      - | Basic認証用のエラー応答を行う。
-        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてBasic認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
-    * - | \ ``DigestAuthenticationEntryPoint``\
-      - | Digest認証用のエラー応答を行う。
-        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてDigest認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
-    * - | \ ``Http403ForbiddenEntryPoint``\
-      - | HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
-    * - | \ ``DelegatingAuthenticationEntryPoint``\
-      - | \ ``RequestMatcher``\ と\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスのマッピングを行い、HTTPリクエストに対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスに処理を委譲する。
-
-Spring Securityのデフォルトの設定では、認証方式に対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される。
-
-|
-
-.. _SpringSecurityAuthorizationOnError:
-
-
-認可エラー時の遷移先
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルトの設定だと、認証済みのユーザーからのアクセスを拒否した際は、アプリケーションサーバのエラーページが表示される。
-アプリケーションサーバーのエラーページを表示してしまうと、システムのセキュリティを低下させる要因になるのため、適切なエラー画面を表示することを推奨する。
-エラーページの指定は、以下のようなbean定義を行うことで可能である。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:access-denied-handler
-            error-page="/WEB-INF/views/common/error/accessDeniedError.jsp" /> <!-- (1) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:access-denied-handler>``\ タグの\ ``error-page``\ 属性に認可エラー用のエラーページを指定する。
-
-.. tip:: **サーブレットコンテナのエラーページ機能の利用**
-
-    認可エラーのエラーページは、サーブレットコンテナのエラーページ機能を使って指定することもできる。
-
-    サーブレットコンテナのエラーページ機能を使う場合は、\ ``web.xml``\ の\ \ ``<error-page>``\ タグを使用してエラーページを指定する。
-
-     .. code-block:: xml
-
-         <error-page>
-             <error-code>403</error-code>
-             <location>/WEB-INF/views/common/error/accessDeniedError.jsp</location>
-         </error-page>
-
-How to extend
---------------------------------------------------------------------------------
-
-本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
-
-Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントは紹介しない。
-本節では代表的なカスタマイズポイントに絞って説明を行う。
-
-|
-
-認可エラー時のレスポンス (認証済みユーザー編)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ここでは、認証済みユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
-
-.. _SpringSecurityAuthorizationAccessDeniedHandler:
-
-AccessDeniedHandlerの適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを直接適用することができる。
-
-例えば、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、エラーページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
-そのような場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを作成してSpring Securityに適用することで実現することができる。
-
-* AccessDeniedHandlerインタフェースの実装クラスの作成例
-
-.. code-block:: java
-
-    public class JsonDelegatingAccessDeniedHandler implements AccessDeniedHandler {
-
-        private final RequestMatcher jsonRequestMatcher;
-        private final AccessDeniedHandler delegateHandler;
-
-        public JsonDelegatingAccessDeniedHandler(
-                RequestMatcher jsonRequestMatcher, AccessDeniedHandler delegateHandler) {
-            this.jsonRequestMatcher = jsonRequestMatcher;
-            this.delegateHandler = delegateHandler;
-        }
-
-        public void handle(HttpServletRequest request, HttpServletResponse response,
-                           AccessDeniedException accessDeniedException)
-                throws IOException, ServletException {
-            if (jsonRequestMatcher.matches(request)) {
-                // response error information of JSON format
-                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
-                // omitted
-            } else {
-                // response error page of HTML format
-                delegateHandler.handle(
-                        request, response, accessDeniedException);
-            }
-        }
-
-    }
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <bean id="accessDeniedHandler"
-          class="com.example.web.security.JsonDelegatingAccessDeniedHandler">
-        <constructor-arg>
-            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
-                <constructor-arg value="/api/**"/>
-            </bean>
-        </constructor-arg>
-        <constructor-arg>
-            <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
-                <property name="errorPage"
-                          value="/WEB-INF/views/common/error/accessDeniedError.jsp"/>
-            </bean>
-        </constructor-arg>
-    </bean>
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:access-denied-handler ref="accessDeniedHandler" />  <!-- (2) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - \ (1)
-      - \ ``AccessDeniedHandler``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
-    * - \ (2)
-      - \ ``<sec:access-denied-handler>``\ タグの\ ``ref``\ 属性に\ ``AccessDeniedHandler``\ のbeanを指定する。
-
-|
-
-認可エラー時のレスポンス (未認証ユーザー編)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ここでは、未認証ユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
-
-リクエスト毎にAuthenticationEntryPointを適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証済みユーザーと同様に、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、ログインページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
-そのような場合は、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをSpring Securityに適用することで実現することができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <bean id="authenticationEntryPoint"
-          class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
-        <constructor-arg>
-            <map>
-                <entry>
-                    <key>
-                        <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
-                            <constructor-arg value="/api/**"/>
-                        </bean>
-                    </key>
-                    <bean class="com.example.web.security.JsonAuthenticationEntryPoint"/>
-                </entry>
-            </map>
-        </constructor-arg>
-        <property name="defaultEntryPoint">
-            <bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
-                <constructor-arg value="/login"/>
-            </bean>
-        </property>
-    </bean>
-
-    <sec:http entry-point-ref="authenticationEntryPoint"> <!-- (2) -->
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
-        | ここでは、Spring Securityが提供している\ ``DelegatingAuthenticationEntryPoint``\ クラスを利用して、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスを適用している。
-    * - | (2)
-      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に\ ``AuthenticationEntryPoint``\ のbeanを指定する。
-
-.. note:: **デフォルトで適用されるAuthenticationEntryPoint**
-
-    リクエストに対応する\ \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスの指定がない場合は、Spring Securityがデフォルトで定義する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される仕組みになっている。
-    認証方式としてフォーム認証を使用する場合は、\ ``LoginUrlAuthenticationEntryPoint``\ クラスが使用されログインフォームが表示される。
-
-|
-
-ロールの階層化
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-認可処理では、ロールに階層関係を設けることができる。
-
-上位に指定したロールは、下位のロールにアクセスが許可されているリソースにもアクセスすることができる。
-ロールの関係が複雑な場合は、階層関係も設けることも検討されたい。
-
-例えば、「ROLE_ADMIN」が上位ロール、「ROLE_USER」が下位ロールという階層関係を設けた場合、
-下記のようアクセスポリシーを設定すると、「ROLE_ADMIN」権限を持つユーザーは、
-\ ``"/user"``\ 配下のパス(「ROLE_USER」権限を持つユーザーがアクセスできるパス)にアクセスすることができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <sec:intercept-url pattern="/user/**" access="hasAnyRole('USER')" />
-        <!-- omitted -->
-    </sec:http>
-
-|
-
-階層関係の設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ロールの階層関係は、\ ``org.springframework.security.access.hierarchicalroles.RoleHierarchy``\ インタフェースの実装クラスで解決する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <bean id="roleHierarchy"
-        class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> <!-- (1) -->
-        <property name="hierarchy"> <!-- (2) -->
-            <value>
-                ROLE_ADMIN > ROLE_STAFF
-                ROLE_STAFF > ROLE_USER
-            </value>
-        </property>
-    </bean>
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl`` クラスを指定する。
-         | \ ``RoleHierarchyImpl``\ は、Spring Securityが提供するデフォルトの実装クラスである。
-     * - | (2)
-       - | \ ``hierarchy``\ プロパティに階層関係を定義する。
-         |
-         | 書式: [上位ロール] > [下位ロール]
-         |
-         | 上記例では、
-         | STAFFは、USERに認可されたリソースにもアクセス可能である。
-         | ADMINは、USERとSTAFFに認可されたリソースにもアクセス可能である。
-
-|
-
-Webリソースの認可処理への適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ロールの階層化を、WebリソースとJSPの画面項目に対する認可処理に適用する方法を説明する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-  
-    <!-- (1) -->
-    <bean id="webExpressionHandler"
-        class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
-        <property name="roleHierarchy" ref="roleHierarchy"/>  <!-- (2) -->
-    </bean>
-  
-    <sec:http>
-        <!-- omitted -->
-        <sec:expression-handler ref="webExpressionHandler" />  <!-- (3) -->
-    </sec:http>
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | \ ``org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler``\ のBeanを定義する。
-     * - | (2)
-       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
-     * - | (3)
-       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
-
-|
-
-メソッドの認可処理への適用
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ロールの階層化を、Javaメソッドに対する認可処理に適用する方法を説明する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-  
-    <bean id="methodExpressionHandler"
-        class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> <!-- (1) -->
-        <property name="roleHierarchy" ref="roleHierarchy"/> <!-- (2) -->
-    </bean>
-  
-    <sec:global-method-security pre-post-annotations="enabled">
-        <sec:expression-handler ref="methodExpressionHandler" /> <!-- (3) -->
-    </sec:global-method-security>
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler``\ のBeanを定義する。
-     * - | (2)
-       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
-     * - | (3)
-       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
-
-.. raw:: latex
-
-   \newpage
-
+.. _SpringSecurityAuthorization:
+
+認可
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+本節では、Spring Securityが提供している認可機能について説明する。
+
+認可処理は、アプリケーションの利用者がアクセスできるリソースを制御するための処理である。
+利用者がアクセスできるリソースを制御するためのもっとも標準的な方法は、
+リソース(又はリソースの集合)毎にアクセスポリシーを定義してき、利用者がリソースにアクセスしようとした時にアクセスポリシーを調べて制御する方法である。
+
+アクセスポリシーには、どのリソースにどのユーザーからのアクセスを許可するかを定義する。
+Spring Securityでは、以下の3つのリソースに対してアクセスポリシーを定義することができる。
+
+* Webリソース
+* Javaメソッド
+* ドメインオブジェクト \ [#fSpringSecurityAuthorization1]_\
+* JSPの画面項目
+
+本節では、「Webリソース」「Javaメソッド」「JSPの画面項目」のアクセスに対して認可処理を適用するための実装例(定義例)を紹介しながら、Spring Securityの認可機能について説明する。
+
+.. [#fSpringSecurityAuthorization1] ドメインオブジェクトのアクセスに対する認可処理については、 \ `Spring Security Reference -Domain Object Security (ACLs)- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#domain-acls>`_\ を参照されたい。
+
+|
+
+認可処理のアーキテクチャ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れで認可処理を行う。
+
+.. figure:: ./images_Authorization/AuthorizationArchitecture.png
+    :width: 100%
+
+    **認可処理のアーキテクチャ**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、任意のリソースにアクセスする。
+    * - | (2)
+      - | \ ``FilterSecurityInterceptor``\ クラスは、\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出し、リソースへのアクセス権の有無をチェックする。
+    * - | (3)
+      - | \ ``AffirmativeBased``\ クラス(デフォルトで使用される\ ``AccessDecisionManager``\ の実装クラス)は、\ ``AccessDecisionVoter``\ インタフェースのメソッドを呼び出し、アクセス権の有無を投票させる。
+    * - | (4)
+      - | \ ``FilterSecurityInterceptor``\ は、\ ``AccessDecisionManager``\ によってアクセス権が付与された場合に限り、リソースへアクセスする。
+
+|
+
+ExceptionTranslationFilter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``ExceptionTranslationFilter``\ は、認可処理(\ ``AccessDecisionManager``\ )で発生した例外をハンドリングし、クライアントへ適切なレスポンスを行うためのSecurity Filterである。
+デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
+
+|
+
+FilterSecurityInterceptor
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``FilterSecurityInterceptor``\ は、HTTPリクエストに対して認可処理を適用するためのSecurity Filterで、実際の認可処理は\ ``AccessDecisionManager``\ に委譲する。
+\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出す際には、クライアントがアクセスしようとしたリソースに指定されているアクセスポリシーを連携する。
+
+|
+
+AccessDecisionManager
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AccessDecisionManager``\ は、アクセスしようとしたリソースに対してアクセス権があるかチェックを行うためのインタフェースである。
+
+Spring Securityが提供する実装クラスは3種類存在するが、いずれも\ ``AccessDecisionVoter``\というインタフェースのメソッドを呼び出してアクセス権を付与するか否かを判定させている。
+\ ``AccessDecisionVoter``\ は「付与」「拒否」「棄権」のいずれかを投票し、\ ``AccessDecisionManager``\ の実装クラスが投票結果を集約して最終的なアクセス権を判断する。
+アクセス権がないと判断した場合は、\ ``AccessDeniedException``\ を発生させアクセスを拒否する。
+
+なお、すべての投票結果が「棄権」であった場合、Spring Securityのでデフォルトでは、「アクセス権なし」と判定される。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDecisionManagerの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``AffirmativeBased``\
+      - | \ ``AccessDecisionVoter``\ に投票させ、「付与」が１件投票された時点でアクセス権を与える実装クラス。
+        | **デフォルトで使用される実装クラス。**
+    * - | \ ``ConsensusBased``\
+      - | 全ての\ ``AccessDecisionVoter``\ に投票させ、「付与」の投票数が多い場合にアクセス権を与える実装クラス。
+        | 「付与」「拒否」が１件以上、且つ同数の場合、Spring Securityのデフォルトでは、「アクセス権あり」と判定される。
+    * - | \ ``UnanimousBased``\
+      - | \ ``AccessDecisionVoter``\ に投票させ、「拒否」が１件投票された時点で **アクセス権を与えない** 実装クラス。
+
+.. note:: **AccessDecisionVoterの選択**
+
+    使用する\ ``AccessDecisionVoter``\ が1つの場合はどの実装クラスを使っても動作に違いはない。
+    複数の\ ``AccessDecisionVoter``\ を使用する場合は、要件に合わせて実装クラスを選択されたい。
+
+|
+
+AccessDecisionVoter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AccessDecisionVoter``\ は、アクセスしようとしたリソースに指定されているアクセスポリシーを参照してアクセス権を付与するかを投票するためのインタフェースである。
+
+Spring Securityが提供する主な実装クラスは以下の通り。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDecisionVoterの主な実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``WebExpressionVoter``\
+      - | SpEL経由で認証情報(\ ``Authentication``\ )が保持する権限情報とリクエスト情報(\ ``HttpServletRequest``\ )を参照して投票を行う実装クラス。
+    * - | \ ``RoleVoter``\
+      - | 利用者が持つロールを参照して投票を行う実装クラス。
+    * - | \ ``RoleHierarchyVoter``\
+      - | 利用者が持つ階層化されたロールを参照して投票を行う実装クラス。
+    * - | \ ``AuthenticatedVoter``\
+      - | 認証状態を参照して投票を行う実装クラス。
+
+.. note:: **デフォルトで適用されるAccessDecisionVoter**
+
+    デフォルトで適用される\ ``AccessDecisionVoter``\ インタフェースの実装クラスは、Spring Security 4.0から\ ``WebExpressionVoter``\ に統一されている。
+    \ ``WebExpressionVoter``\ は、\ ``RoleVoter``\ 、\ ``RoleHierarchyVoter``\ 、\ ``AuthenticatedVoter``\ を使用した時と同じことが実現できるため、
+    本ガイドラインでも、デフォルトの\ ``WebExpressionVoter``\ を使って認可処理を行う前提で説明を行う。
+
+|
+
+How to use
+--------------------------------------------------------------------------------
+
+認可機能を使用するために必要となるbean定義例(アクセスポリシーの指定方法)や実装方法について説明する。
+
+|
+
+.. _SpringSecurityAuthorizationPolicy:
+
+アクセスポリシーの記述方法
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+アクセスポリシーの記述方法を説明する。
+
+Spring Securityは、アクセスポリシーを指定する記述方法としてSpring Expression Language(SpEL)をサポートしている。
+SpELを使わない方法もあるが、本ガイドラインではExpressionを使ってアクセスポリシーを指定する方法で説明を行う。
+SpELの使い方については本節でも紹介するが、より詳しい使い方を知りたい場合は \ `Spring Framework Reference Documentation -Spring Expression Language (SpEL)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/htmlsingle/#expressions>`_\ を参照されたい。
+
+|
+
+Built-InのCommon Expressions
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが用意している共通的なExpressionは以下の通り。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **Spring Securityが提供している共通的なExpression**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - Expression
+      - 説明
+    * - | \ ``hasRole(String role)``\
+      - | ログインユーザーが、引数に指定したロールを保持している場合に\ ``true``\ を返却する。
+    * - | \ ``hasAnyRole(String... roles)``\
+      - | ログインユーザー、が引数に指定したロールのいずれかを保持している場合に\ ``true``\ を返却する。
+    * - | \ ``isAnonymous()``\
+      - | ログインしていない匿名ユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``isRememberMe()``\
+      - | Remember Me認証によってログインしたユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``isAuthenticated()``\
+      - | ログイン中の場合に\ ``true``\ を返却する。
+    * - | \ ``isFullyAuthenticated()``\
+      - | Remember Me認証ではなく通常の認証プロセスによってログインしたユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``permitAll``\
+      - | 常に\ ``true``\ を返却する。
+    * - | \ ``denyAll``\
+      - | 常に\ ``false``\ を返却する。
+    * - | \ ``principal``\
+      - | 認証されたユーザーのユーザー情報(\ ``UserDetails``\ インタフェースを実装したクラスのオブジェクト)を返却する。
+    * - | \ ``authentication``\
+      - | 認証されたユーザーの認証情報(\ ``Authentication``\ インタフェースを実装したクラスのオブジェクト)を返却する。
+
+.. note:: **Expressionを使用した認証情報へのアクセス**
+
+    Expressionとして\ ``principal``\ や\ ``authentication``\ を使用すると、ログインユーザーのユーザー情報や認証情報を参照することができるため、ロール以外の属性を使ってアクセスポリシーを設定することが可能になる。
+
+.. note:: **ロール名のプレフィックス** 
+
+    Spring Security 3.2までは、ロール名には\ ``"ROLE_"`` \ プレフィックスを指定する必要があったが、Spring Security 4.0から\ ``"ROLE_"`` \ プレフィックスの指定が不要となっている。 
+
+    例）
+
+    * Spring Secuirty 3.2以前 : \ ``hasRole('ROLE_USER')``\ 
+    * Spring Security 4.0以降 : \ ``hasRole('USER')``\ 
+
+|
+
+Built-InのWeb Expressions
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが用意しているWebアプリケーション向けExpressionは以下の通り。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **Spring Securityが提供するWebアプリケーション向けExpression**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - Expression
+      - 説明
+    * - | \ ``hasIpAddress(String ipAddress)``\
+      - | リクエスト元のIPアドレスが、引数に指定したIPアドレス体系に一致する場合に\ ``true``\ を返却する。
+
+演算子の使用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+演算子を使用した判定も行うことができる。
+以下の例では、ロールと、リクエストされたIPアドレス両方に合致した場合、アクセス可能となる。
+
+* spring-security.xmlの定義例
+
+  .. code-block:: xml
+  
+    <sec:http>
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN') and hasIpAddress('192.168.10.1')"/>
+        <!-- omitted -->
+    </sec:http>
+  
+  **使用可能な演算子一覧**
+  
+  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 20 80
+  
+     * - 演算子
+       - 説明
+     * - | \ ``[式1] and [式2]``\ 
+       - | 式1、式2が、どちらも真の場合に、真を返す。
+     * - | \ ``[式1] or [式2]``\ 
+       - | いずれかの式が、真の場合に、真を返す。
+     * - | \ ``![式]``\ 
+       - | 式が真の場合は偽を、偽の場合は真を返す。
+
+|
+
+Webリソースへの認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、サーブレットフィルタの仕組みを利用してWebリソース(HTTPリクエスト)に対して認可処理を行う。
+
+認可処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Webリソースに対して認可処理を適用する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:intercept-url pattern="/**" access="isAuthenticated()" />  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:intercept-url>``\ タグに、HTTPリクエストに対してアクセスポリシーを定義する。
+        | ここでは、SpELを使用して「Webアプリケーション配下の全てのリクエストに対して認証済みのユーザーのみアクセスを許可する」というアクセスポリシーを定義している。
+
+.. note:: **use-expressionsのデフォルト定義**
+
+    Spring Security 4.0から、\ ``<sec:http>``\  タグの\ ``use-expressions``\ 属性のデフォルト値が\ ``true``\ に変更になっているため、\ ``true``\を使用する場合に明示的な記述は不要となった。
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+bean定義ファイルを使用して、Webリソースに対してアクセスポリシーを定義する方法について説明する。
+
+アクセスポリシーを適用するWebリソースの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+
+まず、アクセスポリシーを適用するリソース(HTTPリクエスト)を指定する。
+アクセスポリシーを適用するリソースの指定は、\ ``<sec:intercept-url>``\ タグの以下の属性を使用する。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+.. list-table:: **アクセスポリシーを適用するリソースを指定するための属性**
+    :header-rows: 1
+    :widths: 20 80
+
+    * - 属性名
+      - 説明
+    * - | \ ``pattern``\
+      - | Ant形式又は正規表現で指定したパスパターンに一致するリソースを適用対象にするための属性。
+    * - | \ ``method``\
+      - | 指定したHTTPメソッド(GET,POSTなど)を使ってアクセスがあった場合に適用対象にするための属性。
+    * - | \ ``requires-channel``\ 
+      - | 「http」、もしくは「https」を指定する。指定したプロトコルでのアクセスを強制するための属性。
+        | 指定しない場合、どちらでもアクセス可能である。
+
+上記以外の属性については、\ `<intercept-url> <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-intercept-url>`_\ を参照されたい。
+
+* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
+
+.. code-block:: xml
+
+    <sec:http >
+        <sec:intercept-url pattern="/admin/accounts/**" access="..."/>
+        <sec:intercept-url pattern="/admin/**" access="..."/>
+        <sec:intercept-url pattern="/**" access="..."/>
+        <!-- omitted -->
+    </sec:http>
+
+
+Spring Securityは定義した順番でリクエストとのマッチング処理を行い、最初にマッチした定義を適用する。
+そのため、bean定義ファイルを使用してアクセスポリシーを指定する場合も定義順番には注意が必要である。
+
+.. tip:: **パスパターンの解釈**
+
+    Spring Securityのデフォルトの動作では、パスパターンはAnt形式で解釈する。
+    パスパターンを正規表現で指定したい場合は、\ ``<sec:http>``\ タグの\ ``request-matcher``\ 属性に
+    \ ``"regex"``\ を指定すること。
+
+      .. code-block:: xml
+
+          <sec:http request-matcher="regex">
+              <sec:intercept-url pattern="/admin/accounts/.*" access=hasRole('ACCOUNT_MANAGER')" />
+              <!-- omitted -->
+          </sec:http>
+
+アクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+つぎに、アクセスポリシーを指定する。
+アクセスポリシーの指定は、\ ``<sec:intercept-url>``\ タグの\ ``access``\ 属性に指定する。
+
+* \ ``<sec:intercept-url>``\ タグ\ ``access``\ 属性の定義例（\ ``spring-security.xml``\ ）
+
+  .. code-block:: xml
+  
+    <sec:http>
+        <sec:intercept-url pattern="/admin/accounts/**" access="hasRole('ACCOUNT_MANAGER')"/>
+        <sec:intercept-url pattern="/admin/configurations/**" access="hasIpAddress('127.0.0.1') and hasRole('CONFIGURATION_MANAGER')" />
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
+        <!-- omitted -->
+    </sec:http>
+  
+  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+  .. list-table:: **アクセスポリシーを指定するための属性**
+     :header-rows: 1
+     :widths: 20 80
+  
+     * - 属性名
+       - 説明
+     * - | \ ``access``\ 
+       - | SpELでのアクセス制御式や、アクセス可能なロールを指定する。
+
+| ログインユーザーに「ROLE_USER」「ROLE_ADMIN」というロールがある場合を例に、設定例を示す。
+
+* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
+
+  .. code-block:: xml
+  
+    <sec:http>
+        <sec:intercept-url pattern="/reserve/**" access="hasAnyRole('USER','ADMIN')" /> <!-- (1) -->
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" /> <!-- (2) -->
+        <sec:intercept-url pattern="/**" access="denyAll" /> <!-- (3) -->
+        <!-- omitted -->
+    </sec:http>
+  
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 「/reserve/\**」にアクセスするためには、「ROLE_USER」もしくは「ROLE_ADMIN」ロールが必要である。
+         | \ ``hasAnyRole``\ については、後述する。
+     * - | (2)
+       - | 「/admin/\**」にアクセスするためには、「ROLE_ADMIN」ロールが必要である。
+         | \ ``hasRole``\ については、後述する。
+     * - | (3)
+       - | \ ``denyAll``\ を全てのパターンに設定し、
+         | 権限設定が記述されていないURLに対してはどのユーザーもアクセス出来ない設定としている。
+         | \ ``denyAll``\ については、後述する。
+
+  .. note:: **URLパターンの記述順序について**
+
+     クライアントからのリクエストに対して、intercept-urlで記述されているパターンに、上から順にマッチさせ、マッチしたパターンに対してアクセス認可を行う。
+     そのため、パターンの記述は、必ず、より限定されたパターンから記述すること。
+
+\ Spring Securiyではデフォルトで、SpELが有効になっている。 
+\ ``access``\ 属性に記述したSpELは真偽値で評価され、式が真の場合に、アクセスが認可される。
+以下に使用例を示す。
+
+* spring-security.xmlの定義例
+
+  .. code-block:: xml
+  
+    <sec:http>
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+  
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | \ ``hasRole('ロール名')``\ を指定することで、ログインユーザーが指定したロールを保持していれば真を返す。
+  
+  .. _spring-el:
+  
+使用可能な主なExpressionは、:ref:`SpringSecurityAuthorizationPolicy` を参照されたい。
+
+|
+
+メソッドへの認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、Spring AOPの仕組みを利用してDIコンテナで管理しているBeanのメソッド呼び出しに対して認可処理を行う。
+
+メソッドに対する認可処理は、ドメイン層(サービス層)のメソッド呼び出しに対して行うことを想定して提供されている。
+メソッドに対する認可処理を使用すると、ドメインオブジェクトのプロパティを参照することができるため、きめの細かいアクセスポリシーの定義を行うことが可能になる。
+
+|
+
+AOPの有効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッドへの認可処理を使用する場合は、メソッド呼び出しに対して認可処理を行うためのコンポーネント(AOP)を有効化する必要がある。
+AOPを有効化すると、アクセスポリシーをメソッドのアノテーションに定義できるようになる。
+
+Spring Securityは、以下のアノテーションをサポートしている。
+
+* \ ``@PreAuthorize``\ 、\ ``@PostAuthorize``\ 、\ ``@PreFilter``\ 、\ ``@PostFilter``\
+* JSR-250 (\ ``javax.annotation.security``\ パッケージ)のアノテーション(\ ``@RolesAllowed``\ など)
+* \ ``@Secured``\
+
+本ガイドラインでは、アクセスポリシーをExpressionで使用することができる\ ``@PreAuthorize``\、\ ``@PostAuthorize``\ を使用する方法を説明する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:global-method-security pre-post-annotations="enabled" /> <!-- (1) (2) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:global-method-security>``\ タグを付与すると、メソッド呼び出しに対する認可処理を行うAOPが有効になる。
+    * - | (2)
+      - | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定する。
+        | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定すると、Expressionを指定してアクセスポリシーを定義できるアノテーションが有効になる。
+
+|
+
+認可処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッドに対して認可処理を適用する際は、アクセスポリシーを指定するアノテーションを使用して、メソッド毎にアクセスポリシーを定義する。
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッド実行前に適用するアクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+メソッドの実行前に適用するアクセスポリシーを指定する場合は、\ ``@PreAuthorize``\ を使用する。
+
+\ ``@PreAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行が許可される。
+下記例では、管理者以外は、他人のアカウント情報にアクセスできないように定義している。
+
+* \ ``@PreAuthorize``\ の定義例
+
+.. code-block:: java
+
+    // (1) (2)
+    @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
+    public Account findOne(String username) {
+        return accountRepository.findOne(username);
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認可処理を適用したいメソッドに、\ ``@PreAuthorize``\ を付与する。
+    * - | (2)
+      - | \ ``value``\ 属性に、メソッドに対してアクセスポリシーを定義する。
+        | ここでは、「管理者の場合は全てのアカウントへのアクセスを許可する」「管理者以外の場合は自身のアカウントへのアクセスのみ許可する」というアクセスポリシーを定義している。
+
+ここでポイントになるのは、Expressionの中からメソッドの引数にアクセスしている部分である。
+具体的には、「\ ``#username``\ 」の部分が引数にアクセスしている部分である。
+Expression内で「# + 引数名」形式のExpressionを指定することで、メソッドの引数にアクセスすることができる。
+
+.. tip:: **引数名を指定するアノテーション**
+
+    Spring Securityは、クラスに出力されているデバッグ情報から引数名を解決する仕組み
+    になっているが、アノテーション(\ ``@org.springframework.security.access.method.P``\ )
+    を使用して明示的に引数名を指定することもできる。
+
+    以下のケースにあてはまる場合は、アノテーションを使用して明示的に変数名を指定する。
+
+    * クラスに変数のデバッグ情報を出力しない
+    * Expressionの中から実際の変数名とは別の名前を使ってアクセスしたい (例えば短縮した名前)
+
+      .. code-block:: java
+
+          @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
+          public Account findOne(@P("username") String username) {
+              return accountRepository.findOne(username);
+          }
+    
+    なお、\ ``#username``\ と、メソッドの引数である \ ``username``\ の名称が一致している場合は \ ``@P``\ を省略することが可能である。
+    ただし、Spring Securityは引数名の解決を、実装クラスの引数名を使用して行っているため ``@PreAuthorize`` アノテーションをインターフェースに定義している場合には、
+    **実装クラスの引数名を、 @PreAuthorize 内で指定した #username と一致させる必要がある** ので、注意されたい。
+
+    JDK 8 から追加されたコンパイルオプション(\ ``-parameters``\ )を使用すると、メソッドパラメータにリフレクション用のメタデータが生成されるため、アノテーションを指定しなくても引数名が解決される。
+
+メソッド実行後に適用するアクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+メソッドの実行後に適用するアクセスポリシーを指定する場合は、\ ``@PostAuthorize``\ を使用する。
+
+\ ``@PostAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行結果が呼び出し元に返却される。
+下記例では、所属する部署が違うユーザーのアカウント情報にアクセスできないように定義している。
+
+* \ ``@PostAuthorize``\ の定義例
+
+.. code-block:: java
+
+    @PreAuthorize("...")
+    @PostAuthorize("(returnObject == null) " +
+            "or (returnObject.departmentCode == principal.account.departmentCode)")
+    public Account findOne(String username) {
+        return accountRepository.findOne(username);
+    }
+
+ここでポイントになるのは、Expressionの中からメソッドの返り値にアクセスしている部分である。
+具体的には、「\ ``returnObject.departmentCode``\ 」の部分が返り値にアクセスしている部分である。
+Expression内で「\ ``returnObject``\ 」を指定すると、メソッドの返り値にアクセスすることができる。
+
+|
+
+JSPの画面項目への認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、JSPタグライブラリを使用してJSPの画面項目に対して認可処理を適用することができる。
+
+ここでは最もシンプルな定義を例に、JSPの画面項目のアクセスに対して認可処理を適用する方法について説明する。
+
+|
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+JSPタグライブラリを使用してJSPの画面項目に対してアクセスポリシーを定義する際は、表示を許可する条件(アクセスポリシー)をJSPに定義する。
+
+* アクセスポリシー定義例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <!-- (1) -->
+    <sec:authorize access="hasRole('ADMIN')"> <!-- (2) -->
+        <h2>Admin Menu</h2>
+        <!-- omitted -->
+    </sec:authorize>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | アクセスポリシーを適用したい部分を\ ``<sec:authorize>``\ タグで囲む。
+    * - | (2)
+      - | \ ``access``\ 属性にアクセスポリシーを定義する。ここでは、「管理者の場合は表示を許可する」というアクセスポリシーを定義している。
+
+|
+
+Webリソースに指定したアクセスポリシーとの連動
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ボタンやリンクなど(サーバーへのリクエストを伴う画面項目)に対してアクセスポリシーを定義する際は、リクエスト先のWebリソースに定義されているアクセスポリシーと連動させる。
+Webリソースに指定したアクセスポリシーと連動させる場合は、\ ``<sec:authorize>``\ タグの\ ``url``\ 属性を使用する。
+
+\ ``url``\ 属性に指定したWebリソースにアクセスできる場合に限り\ ``<sec:authorize>``\ タグの中に実装したJSPの処理が実行される。
+
+* Webリソースに定義されているアクセスポリシーとの連携例
+
+.. code-block:: jsp
+
+    <ul>
+        <!-- (1) -->
+        <sec:authorize url="/admin/accounts"> <!-- (2) -->
+            <li>
+                <a href="<c:url value='/admin/accounts' />">Account Management</a>
+            </li>
+        </sec:authorize>
+    </ul>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ボタンやリンクを出力する部分を\ ``<sec:authorize>``\ タグで囲む。
+    * - | (2)
+      - | \ ``<sec:authorize>``\ タグの\ ``url``\ 属性にWebリソースへアクセスするためのURLを指定する。
+        | ここでは、「\ ``"/admin/accounts"``\ というURLが割り振られているWebリソースにアクセス可能な場合は表示を許可する」というアクセスポリシーを定義しており、Webリソースに定義されているアクセスポリシーを直接意識する必要がない。
+
+.. note:: **HTTPメソッドによるポリシーの指定**
+
+    Webリソースのアクセスポリシーの定義をする際に、HTTPメソッドによって異なるアクセスポリシーを指定している場合は、\ ``<sec:authorize>``\ タグの\ ``method``\ 属性を指定して、連動させる定義を特定すること。
+
+.. warning:: **表示制御に関する留意点**
+
+    ボタンやリンクなどの表示制御を行う場合は、必ずWebリソースに定義されているアクセスポリシーと連動させること。
+
+    ボタンやリンクに対して直接アクセスポリシーの指定を行い、Webリソース自体にアクセスポリシーを定義していないと、
+    URLを直接してアクセスするような不正なアクセスを防ぐことができない。
+
+|
+
+認可処理の判定結果を変数に格納
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``<sec:authorize>``\ タグを使って呼び出した認可処理の判定結果は、変数に格納して使いまわすことができる。
+
+* JSPの実装例
+
+.. code-block:: jsp
+
+    <sec:authorize url="/admin/accounts"
+                   var="hasAccountsAuthority"/> <!-- (1) -->
+
+    <c:if test="${hasAccountsAuthority}"> <!-- (2) -->
+        <!-- omitted -->
+    </c:if>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - |  (1)
+      - | \ ``var``\ 属性に判定結果を格納するための変数名を指定する。
+        | アクセスが許可された場合は、変数に\ ``true``\ が設定される。
+    * - | (2)
+      - | 変数の値を参照して表示処理を実装する。
+
+|
+
+認可エラー時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、リソースへのアクセスを拒否した場合、以下のような流れでエラーをハンドリングしてレスポンスの制御を行う。
+
+.. figure:: ./images_Authorization/AuthorizationAccessDeniedHandling.png
+    :width: 100%
+
+    **認可エラーのハンドリングの仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityは、リソースやメソッドへのアクセスを拒否するために、\ ``AccessDeniedException``\ を発生させる。
+    * - | (2)
+      - | \ ``ExceptionTranslationFilter``\ クラスは、\ ``AccessDeniedException``\ をキャッチし、\ ``AccessDeniedHandler``\ または\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+    * - | (3)
+      - | 認証済みのユーザーからのアクセスの場合は、\ ``AccessDeniedHandler``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+    * - | (4)
+      - | 未認証のユーザーからのアクセスの場合は、\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+
+|
+
+AccessDeniedHandler
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AccessDeniedHandler``\ インタフェースは、認証済みのユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
+Spring Securityは、\ ``AccessDeniedHandler``\ インタフェースの実装クラスとして以下のクラスを提供している。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDeniedHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``AccessDeniedHandlerImpl``\
+      - | HTTPレスポンスコードに403(Forbidden)を設定し、指定されたエラーページに遷移する。
+        | エラーページの指定がない場合は、HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``InvalidSessionAccessDeniedHandler``\
+      - | \ ``InvalidSessionStrategy``\ インタフェースの実装クラスに処理を委譲する。
+        | このクラスは、CSRF対策とセッション管理機能を使用してセッションタイムアウトを検知する設定を有効にした際に、CSRFトークンがセッションに存在しない(つまりセッションタイムアウトが発生している)場合に使用される。
+    * - | \ ``DelegatingAccessDeniedHandler``\
+      - | \ ``AccessDeniedException``\ と\ ``AccessDeniedHandler``\ インタフェースの実装クラスのマッピングを行い、発生した\ ``AccessDeniedException``\に対応する\ ``AccessDeniedHandler``\ インタフェースの実装クラスに処理を委譲する。
+        | \ ``InvalidSessionAccessDeniedHandler``\ はこの仕組みを利用して呼び出されている。
+
+
+Spring Securityのデフォルトの設定では、エラーページの指定がない\ ``AccessDeniedHandlerImpl``\ が使用される。
+
+|
+
+AuthenticationEntryPoint
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AuthenticationEntryPoint``\ インタフェースは、未認証のユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
+Spring Securityは、\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスとして以下のクラスを提供している。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供する主なAuthenticationEntryPointの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``LoginUrlAuthenticationEntryPoint``\
+      - | フォーム認証用のログインフォームを表示する。
+    * - | \ ``BasicAuthenticationEntryPoint``\
+      - | Basic認証用のエラー応答を行う。
+        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてBasic認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``DigestAuthenticationEntryPoint``\
+      - | Digest認証用のエラー応答を行う。
+        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてDigest認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``Http403ForbiddenEntryPoint``\
+      - | HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``DelegatingAuthenticationEntryPoint``\
+      - | \ ``RequestMatcher``\ と\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスのマッピングを行い、HTTPリクエストに対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスに処理を委譲する。
+
+Spring Securityのデフォルトの設定では、認証方式に対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される。
+
+|
+
+.. _SpringSecurityAuthorizationOnError:
+
+
+認可エラー時の遷移先
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの設定だと、認証済みのユーザーからのアクセスを拒否した際は、アプリケーションサーバのエラーページが表示される。
+アプリケーションサーバーのエラーページを表示してしまうと、システムのセキュリティを低下させる要因になるのため、適切なエラー画面を表示することを推奨する。
+エラーページの指定は、以下のようなbean定義を行うことで可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler
+            error-page="/WEB-INF/views/common/error/accessDeniedError.jsp" /> <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:access-denied-handler>``\ タグの\ ``error-page``\ 属性に認可エラー用のエラーページを指定する。
+
+.. tip:: **サーブレットコンテナのエラーページ機能の利用**
+
+    認可エラーのエラーページは、サーブレットコンテナのエラーページ機能を使って指定することもできる。
+
+    サーブレットコンテナのエラーページ機能を使う場合は、\ ``web.xml``\ の\ \ ``<error-page>``\ タグを使用してエラーページを指定する。
+
+     .. code-block:: xml
+
+         <error-page>
+             <error-code>403</error-code>
+             <location>/WEB-INF/views/common/error/accessDeniedError.jsp</location>
+         </error-page>
+
+How to extend
+--------------------------------------------------------------------------------
+
+本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
+
+Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントは紹介しない。
+本節では代表的なカスタマイズポイントに絞って説明を行う。
+
+|
+
+認可エラー時のレスポンス (認証済みユーザー編)
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ここでは、認証済みユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
+
+.. _SpringSecurityAuthorizationAccessDeniedHandler:
+
+AccessDeniedHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを直接適用することができる。
+
+例えば、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、エラーページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
+そのような場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを作成してSpring Securityに適用することで実現することができる。
+
+* AccessDeniedHandlerインタフェースの実装クラスの作成例
+
+.. code-block:: java
+
+    public class JsonDelegatingAccessDeniedHandler implements AccessDeniedHandler {
+
+        private final RequestMatcher jsonRequestMatcher;
+        private final AccessDeniedHandler delegateHandler;
+
+        public JsonDelegatingAccessDeniedHandler(
+                RequestMatcher jsonRequestMatcher, AccessDeniedHandler delegateHandler) {
+            this.jsonRequestMatcher = jsonRequestMatcher;
+            this.delegateHandler = delegateHandler;
+        }
+
+        public void handle(HttpServletRequest request, HttpServletResponse response,
+                           AccessDeniedException accessDeniedException)
+                throws IOException, ServletException {
+            if (jsonRequestMatcher.matches(request)) {
+                // response error information of JSON format
+                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
+                // omitted
+            } else {
+                // response error page of HTML format
+                delegateHandler.handle(
+                        request, response, accessDeniedException);
+            }
+        }
+
+    }
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="accessDeniedHandler"
+          class="com.example.web.security.JsonDelegatingAccessDeniedHandler">
+        <constructor-arg>
+            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                <constructor-arg value="/api/**"/>
+            </bean>
+        </constructor-arg>
+        <constructor-arg>
+            <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                <property name="errorPage"
+                          value="/WEB-INF/views/common/error/accessDeniedError.jsp"/>
+            </bean>
+        </constructor-arg>
+    </bean>
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler ref="accessDeniedHandler" />  <!-- (2) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - \ ``AccessDeniedHandler``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
+    * - \ (2)
+      - \ ``<sec:access-denied-handler>``\ タグの\ ``ref``\ 属性に\ ``AccessDeniedHandler``\ のbeanを指定する。
+
+|
+
+認可エラー時のレスポンス (未認証ユーザー編)
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ここでは、未認証ユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
+
+リクエスト毎にAuthenticationEntryPointを適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証済みユーザーと同様に、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、ログインページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
+そのような場合は、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをSpring Securityに適用することで実現することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="authenticationEntryPoint"
+          class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
+        <constructor-arg>
+            <map>
+                <entry>
+                    <key>
+                        <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                            <constructor-arg value="/api/**"/>
+                        </bean>
+                    </key>
+                    <bean class="com.example.web.security.JsonAuthenticationEntryPoint"/>
+                </entry>
+            </map>
+        </constructor-arg>
+        <property name="defaultEntryPoint">
+            <bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
+                <constructor-arg value="/login"/>
+            </bean>
+        </property>
+    </bean>
+
+    <sec:http entry-point-ref="authenticationEntryPoint"> <!-- (2) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
+        | ここでは、Spring Securityが提供している\ ``DelegatingAuthenticationEntryPoint``\ クラスを利用して、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスを適用している。
+    * - | (2)
+      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に\ ``AuthenticationEntryPoint``\ のbeanを指定する。
+
+.. note:: **デフォルトで適用されるAuthenticationEntryPoint**
+
+    リクエストに対応する\ \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスの指定がない場合は、Spring Securityがデフォルトで定義する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される仕組みになっている。
+    認証方式としてフォーム認証を使用する場合は、\ ``LoginUrlAuthenticationEntryPoint``\ クラスが使用されログインフォームが表示される。
+
+|
+
+ロールの階層化
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+認可処理では、ロールに階層関係を設けることができる。
+
+上位に指定したロールは、下位のロールにアクセスが許可されているリソースにもアクセスすることができる。
+ロールの関係が複雑な場合は、階層関係も設けることも検討されたい。
+
+例えば、「ROLE_ADMIN」が上位ロール、「ROLE_USER」が下位ロールという階層関係を設けた場合、
+下記のようアクセスポリシーを設定すると、「ROLE_ADMIN」権限を持つユーザーは、
+\ ``"/user"``\ 配下のパス(「ROLE_USER」権限を持つユーザーがアクセスできるパス)にアクセスすることができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <sec:intercept-url pattern="/user/**" access="hasAnyRole('USER')" />
+        <!-- omitted -->
+    </sec:http>
+
+|
+
+階層関係の設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ロールの階層関係は、\ ``org.springframework.security.access.hierarchicalroles.RoleHierarchy``\ インタフェースの実装クラスで解決する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <bean id="roleHierarchy"
+        class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> <!-- (1) -->
+        <property name="hierarchy"> <!-- (2) -->
+            <value>
+                ROLE_ADMIN > ROLE_STAFF
+                ROLE_STAFF > ROLE_USER
+            </value>
+        </property>
+    </bean>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | \ ``org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl`` クラスを指定する。
+         | \ ``RoleHierarchyImpl``\ は、Spring Securityが提供するデフォルトの実装クラスである。
+     * - | (2)
+       - | \ ``hierarchy``\ プロパティに階層関係を定義する。
+         |
+         | 書式: [上位ロール] > [下位ロール]
+         |
+         | 上記例では、
+         | STAFFは、USERに認可されたリソースにもアクセス可能である。
+         | ADMINは、USERとSTAFFに認可されたリソースにもアクセス可能である。
+
+|
+
+Webリソースの認可処理への適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ロールの階層化を、WebリソースとJSPの画面項目に対する認可処理に適用する方法を説明する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+    <!-- (1) -->
+    <bean id="webExpressionHandler"
+        class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
+        <property name="roleHierarchy" ref="roleHierarchy"/>  <!-- (2) -->
+    </bean>
+  
+    <sec:http>
+        <!-- omitted -->
+        <sec:expression-handler ref="webExpressionHandler" />  <!-- (3) -->
+    </sec:http>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - | 項番
+       - | 説明
+     * - | (1)
+       - | \ ``org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler``\ のBeanを定義する。
+     * - | (2)
+       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
+     * - | (3)
+       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
+
+|
+
+メソッドの認可処理への適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ロールの階層化を、Javaメソッドに対する認可処理に適用する方法を説明する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+    <bean id="methodExpressionHandler"
+        class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> <!-- (1) -->
+        <property name="roleHierarchy" ref="roleHierarchy"/> <!-- (2) -->
+    </bean>
+  
+    <sec:global-method-security pre-post-annotations="enabled">
+        <sec:expression-handler ref="methodExpressionHandler" /> <!-- (3) -->
+    </sec:global-method-security>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | \ ``org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler``\ のBeanを定義する。
+     * - | (2)
+       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
+     * - | (3)
+       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/CSRF.rst b/source/Security/CSRF.rst
index 441b808c3f..1d7a54e0a4 100755
--- a/source/Security/CSRF.rst
+++ b/source/Security/CSRF.rst
@@ -1,469 +1,469 @@
-.. _SpringSecurityCsrf:
-
-CSRF対策
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-Overview
---------------------------------------------------------------------------------
-
-本節では、Spring Securityが提供しているCross site request forgeries(以下、CSRFと略す）対策の機能について説明する。
-
-CSRFとは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
-ユーザーが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
-
-サーバ側でCSRFを防ぐには、以下の方法が知られている。
-
-* 秘密情報(トークン)の埋め込み
-* パスワードの再入力
-* Refererのチェック
-
-CSRF対策機能は、攻撃者が用意したWebページから送られてくる偽造リクエストを不正なリクエストとして扱うための機能である。
-CSRF対策が行われていないWebアプリケーションを利用すると、以下のような方法で攻撃を受ける可能性がある。
-
-* 利用者は、CSRF対策が行われていないWebアプリケーションにログインする。
-* 利用者は、攻撃者からの巧みな誘導によって、攻撃者が用意したWebページを開いてしまう。
-* 攻撃者が用意したWebページは、フォームの自動送信などのテクニックを使用して、偽造したリクエストをCSRF対策が行われていないWebアプリケーションに対して送信する。
-* CSRF対策が行われていないWebアプリケーションは、攻撃者が偽造したリクエストを正規のリクエストとして処理してしまう。
-
-
-.. tip::
-
-    OWASP\ [#fSpringSecurityCSRF1]_\では、\ `トークンパターンを使用する方法が推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
-    
-      .. [#fSpringSecurityCSRF1] Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
-       https://www.owasp.org/index.php/Main_Page
-
-.. note:: **ログイン時におけるCSRF対策**
-
-    CSRF対策はログイン中のリクエストだけではなく、ログイン処理でも行う必要がある。
-    ログイン処理に対してCSRF対策を怠った場合、攻撃者が用意したアカウントを使って知らぬ間にログインさせられ、ログイン中に行った操作履歴などを盗まれる可能性がある。
-
-.. warning:: **マルチパートリクエスト(ファイルアップロード)時におけるCSRF対策**
-
-    ファイルアップロード時のCSRF対策については、\ :ref:`ファイルアップロード Servlet Filterの設定 <file-upload_setting_servlet_filter>`\ を留意されたい。
-
-
-Spring SecurityのCSRF対策
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、セッション単位にランダムに生成される固定トークン値(CSRFトークン)を払い出し、払い出されたCSRFトークンをリクエストパラメータ(HTMLフォームのhidden項目)として送信する。
-これにより正規のWebページからのリクエストなのか、攻撃者が用意したWebページからのリクエストなのかを判断する仕組みを採用している。
-
-.. figure:: ./images_CSRF/Csrf.png
-    :width: 100%
-
-    **Spring SecurityのCSRF対策の仕組み**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
-    * - | (2)
-      - | Spring Securityは、CSRFトークンを生成しHTTPセッションに格納する。
-        | 生成したCSRFトークンは、HTMLフォームのhiddenタグを使ってクライアントと連携する。
-    * - | (3)
-      - | クライアントは、HTMLフォーム内のボタンを押下してアプリケーションサーバーにリクエストを送信する。
-        | HTMLフォーム内のhidden項目にCSRFトークンが埋め込まれているため、CSRFトークン値はリクエストパラメータとして送信される。
-    * - | (4)
-      - | Spring Securityは、HTTPのPOSTメソッドを使ってアクセスされた際は、リクエストパラメータに指定されたCSRFトークン値とHTTPセッション内に保持しているCSRFトークン値が同じ値であることをチェックする。
-        | トークン値が一致しない場合は、不正なリクエスト(攻撃者からのリクエスト)としてエラーを発生させる。
-    * - | (5)
-      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
-    * - | (6)
-      - | Spring Securityは、GETメソッドを使ってアクセスされた際は、CSRFトークン値のチェックは行わない。
-
-.. note:: **Ajax使用時のCSRFトークン**
-
-    Spring Securityは、リクエストヘッダにCSRFトークン値を設定することができるため、Ajax向けのリクエストなどに対してCSRF対策を行うことが可能である。
-
-.. _csrf_ckeck-target:
-
-トークンチェックの対象リクエスト
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityのデフォルト実装では、以下のHTTPメソッドを使用したリクエストに対して、CSRFトークンチェックを行う。
-
-* POST
-* PUT
-* DELETE
-* PATCH
-
-.. note:: **CSRFトークンチェックを行わない理由**
-
-    GET, HEAD, OPTIONS, TRACE メソッドがチェック対象外となっている理由は、これらのメソッドがアプリケーションの状態を変更するようなリクエストを実行するためのメソッドではないためである。
-
-.. _csrf_spring-security-setting:
-
-How to use
---------------------------------------------------------------------------------
-
-CSRF対策機能の適用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用し、Springのタグライブラリの\ ``<form:form>``\ タグを使うことで、自動的にCSRFトークンを、hiddenに埋め込むことができる。
-
-* spring-mvc.xmlの設定例
-
-.. code-block:: xml
-
-    <bean id="requestDataValueProcessor"
-        class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor"> <!-- (1)  -->
-        <constructor-arg>
-            <util:list>
-                <bean
-                    class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor" /> <!-- (2)  -->
-                <bean
-                    class="org.terasoluna.gfw.web.token.transaction.TransactionTokenRequestDataValueProcessor" />
-            </util:list>
-        </constructor-arg>
-    </bean>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ 共通ライブラリから提供されている、\ ``org.springframework.web.servlet.support.RequestDataValueProcessor``\ を複数定義可能な
-       | \ ``org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor``\ をbean定義する。
-   * - | (2)
-     - | コンストラクタの第1引数に、\ ``org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor``\ のbean定義を設定する。
-
-Spring Security 4.0からは、上記設定により、デフォルトでCSRF対策機能が有効となる。このため、CSRF対策機能を適用したくない場合は、明示的に無効化する必要がある。 
-
-CSRF対策機能を使用しない場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:csrf disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
-        <!-- omitted -->
-    </sec:http>
-
-CSRFトークン値の連携
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、CSRFトークン値をクライアントとサーバー間で連携する方法として、以下の2種類の方法を提供している。
-
-* HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する
-* HTMLのmetaタグとしてCSRFトークンの情報を出力し、Ajax通信時にリクエストヘッダにトークン値を設定して連携する
-
-.. _csrf_formtag-use:
-
-Spring MVCを使用した連携
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
-ここでは、CSRF対策機能と連携するためのコンポーネントの使い方を説明する。
-
-hidden項目の自動出力
-''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
-
-HTMLフォームを作成する際は、以下のようなJSPの実装を行う。
-
-* JSPの実装例
-
-.. code-block:: jsp
-
-    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
-
-    <c:url var="loginUrl" value="/login"/>
-    <form:form action="${loginUrl}"> <!-- (1) -->
-        <!-- omitted -->
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | HTMLフォームを作成する際は、Spring MVCから提供されている\ ``<form:form>``\ 要素を使用する。
-
-Spring MVCから提供されている\ ``<form:form>``\ 要素を使うと、以下のようなHTMLフォームが作成される。
-
-* HTMLの出力例
-
-.. code-block:: html
-
-    <form id="command" action="/login" method="post">
-        <!-- omitted -->
-        <!-- Spring MVCの機能と連携して出力されたCSRFトークン値のhidden項目 -->
-        <div>
-            <input type="hidden"
-                   name="_csrf" value="63845086-6b57-4261-8440-97a3c6fa6b99" />
-        </div>
-    </form>
-
-.. tip:: **出力されるCSRFトークンチェック値**
-
-    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、\ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象の
-    HTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
-
-    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
-
-        .. code-block:: jsp
-
-            <form:form method="GET" modelAttribute="xxxForm" action="...">
-                <%-- ... --%>
-            </form:form>
-
-    これは、\ `OWASP Top 10 <https://code.google.com/p/owasptop10/>`_\ で説明されている、
-
-        The unique token can also be included in the URL itself, or a URL parameter. However, such placement runs a greater risk that the URL will be exposed to an attacker, thus compromising the secret token.
-
-    に対応している事を意味しており、セキュアなWebアプリケーション構築の手助けとなる。
-
-.. _csrf_htmlformtag-use:
-
-HTMLフォーム使用時の連携
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ :ref:`Spring MVCと連携<csrf_formtag-use>` せずに、HTMLフォームを使用してCSRFトークン値を連携することも可能である。
-HTMLフォームを使ってリクエストを送信する場合は、HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する。
-
-* JSPの実装例
-
-.. code-block:: text
-
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-
-    <form action="<c:url value="/login" />" method="post">
-        <!-- omitted -->
-        <sec:csrfInput /> <!-- (1) -->
-        <!-- omitted -->
-    </form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | HTMLの\ ``<form>``\ 要素の中に\ ``<sec:csrfInput>``\ 要素を指定する。
-
-Spring Securityから提供されている\ ``<sec:csrfInput>``\ 要素を指定すると、以下のようなhidden項目が出力される。
-HTMLフォーム内にhidden項目を出力することで、CSRFトークン値がリクエストパラメータとして連携される。
-デフォルトでは、CSRFトークン値を連携するためのリクエストパラメータ名は\ ``_csrf``\ になる。
-
-* HTMLの出力例
-
-.. code-block:: html
-
-    <form action="/login" method="post">
-        <!-- omitted -->
-        <!-- CSRFトークン値のhidden項目 -->
-        <input type="hidden"
-               name="_csrf"
-               value="63845086-6b57-4261-8440-97a3c6fa6b99" />
-        <!-- omitted -->
-    </form>
-
-.. warning:: **GETメソッド使用時の注意点**
-
-    HTTPメソッドとしてGETを使用する場合、\ ``<sec:csrfInput>``\ 要素を指定しないこと。
-    \ ``<sec:csrfInput>``\ 要素を指定してしまうと、URLにCSRFトークン値が含まれてしまうため、CSRFトークン値が盗まれるリスクが高くなる。
-
-.. _csrf_ajax-token-setting:
-
-Ajax使用時の連携
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Ajaxを使ってリクエストを送信する場合は、HTMLのmetaタグとしてCSRFトークンの情報を出力し、metaタグから取得したトークン値をAjax通信時のリクエストヘッダに設定して連携する。
-
-まず、Spring Securityから提供されているJSPタグライブラリを使用して、HTMLのmetaタグにCSRFトークンの情報を出力する。
-
-* JSPの実装例
-
-.. code-block:: jsp
-
-    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
-
-    <head>
-        <!-- omitted -->
-        <sec:csrfMetaTags /> <!-- (1) -->
-        <!-- omitted -->
-    </head>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | HTMLの\ ``<head>``\ 要素内に\ ``<sec:csrfMetaTags>``\ 要素を指定する。
-
-\ ``<sec:csrfMetaTags>``\ 要素を指定すると、以下のようなmetaタグが出力される。
-デフォルトでは、CSRFトークン値を連携するためのリクエストヘッダ名は\ ``X-CSRF-TOKEN``\ となる。
-
-* HTMLの出力例
-
-.. code-block:: html
-
-    <head>
-        <!-- omitted -->
-        <meta name="_csrf_parameter" content="_csrf" />
-        <meta name="_csrf_header" content="X-CSRF-TOKEN" /> <!-- ヘッダ名 -->
-        <meta name="_csrf"
-              content="63845086-6b57-4261-8440-97a3c6fa6b99" /> <!-- トークン値 -->
-        <!-- omitted -->
-    </head>
-
-つぎに、JavaScriptを使ってmetaタグからCSRFトークンの情報を取得し、Ajax通信時のリクエストヘッダ
-にCSRFトークン値を設定する。(ここではjQueryを使った実装例となっている)
-
-* JavaScriptの実装例
-
-.. code-block:: javascript
-
-    $(function () {
-        var headerName = $("meta[name='_csrf_header']").attr("content"); // (1)
-        var tokenValue = $("meta[name='_csrf']").attr("content"); // (2)
-        $(document).ajaxSend(function(e, xhr, options) {
-            xhr.setRequestHeader(headerName, tokenValue); // (3)
-        });
-    });
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | CSRFトークン値を連携するためのリクエストヘッダ名を取得する。
-    * - | (2)
-      - | CSRFトークン値を取得する。
-    * - | (3)
-      - | リクエストヘッダにCSRFトークン値を設定する。
-
-.. _csrf_token-error-response:
-
-トークンチェックエラー時の遷移先の制御
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-トークンチェックエラー時の遷移先の制御を行うためには、CSRFトークンチェックエラーに発生する例外である \ ``AccessDeniedException``\ をハンドリングして、その例外に対応した遷移先を指定する。
-
-CSRFのトークンチェックエラー時に発生する例外は以下の通りである。
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **CSRFトークンチェックで使用される例外クラス**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - クラス名
-      - 説明
-    * - | \ ``InvalidCsrfTokenException``\
-      - | クライアントから送られたトークン値と、サーバー側で保持しているトークン値が一致しない場合に使用する例外クラス（主に不正なリクエスト）。
-    * - | \ ``MissingCsrfTokenException``\
-      - | サーバー側にトークン値が保存されていない場合に使用する例外クラス（主にセッション切れ）。
-
-\ ``DelegatingAccessDeniedHandler``\クラスを使用して上記の例外をハンドリングし、それぞれに \ ``AccessDeniedHandler``\ インタフェースの実装クラスを割り当てることで、例外毎の遷移先を設定することが可能である。
-
-CSRFトークンチェックエラー時に専用のエラー画面（JSP）に遷移させたい場合は、以下のようなBean定義を行う。(以下の定義例は、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ からの抜粋である)
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (1) -->
-        <!-- omitted -->
-    </sec:http>
-
-    <bean id="accessDeniedHandler"
-        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (2) -->
-        <constructor-arg index="0">  <!-- (3) -->
-            <map>
-                <!-- (4) -->
-                <entry
-                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />
-                    </bean>
-                </entry>
-                <!-- (5) -->
-                <entry
-                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />
-                    </bean>
-                </entry>
-            </map>
-        </constructor-arg>
-        <!-- (6) -->
-        <constructor-arg index="1">
-            <bean
-                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
-                <property name="errorPage"
-                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />
-            </bean>
-        </constructor-arg>
-    </bean>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:access-denied-handler>``\ タグのref属性に、Exception毎の制御を行うための\ ``AccessDeniedHandler``\ のBean名を指定する。
-       | エラー時遷移先が全て同じ画面である場合は ``error-page`` 属性に遷移先を指定すればよい。
-       | \ ``<sec:access-denied-handler>``\でハンドリングしない場合は、\ :ref:`SpringSecurityAuthorizationOnError`\ を参照されたい。
-   * - | (2)
-     - | \ ``DelegatingAccessDeniedHandler``\ を使用して、発生した例外（ \ ``AccessDeniedException``\ サブクラス ） と例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）を定義する。
-   * - | (3)
-     - | コンストラクタの第1引数で、個別に遷移先を指定したい例外（ \ ``AccessDeniedException``\ サブクラス ）と、対応する例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）をMap形式で定義する。
-   * - | (4)
-     - | \ ``key``\ に \ ``AccessDeniedException``\ のサブクラスを指定する。
-       | \ ``value`` として、\ ``AccessDeniedHandler``\ の実装クラスである、 \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
-       | \ ``property``\ の \ ``name``\ に \ ``errorPage``\ を指定し、\ ``value``\ に表示するviewを指定する。
-       | マッピングするExceptionに関しては、:ref:`csrf_token-error-response` を参照されたい。
-   * - | (5)
-     - | (4)のExceptionと異なるExceptionを制御したい場合に定義する。
-       | 本例では \ ``InvalidCsrfTokenException``\ 、\ ``MissingCsrfTokenException``\ それぞれに異なる遷移先を設定している。
-   * - | (6)
-     - | コンストラクタの第2引数で、デフォルト例外（(4)(5)で指定していない \ ``AccessDeniedException``\のサブクラス）時の例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）と遷移先を指定する。
-
-
-.. note:: **無効なセッションを使ったリクエストの検知**
-
-    セッション管理機能の「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効にしている場合は、\ ``MissingCsrfTokenException``\ に対して「:ref:`SpringSecuritySessionDetectInvalidSession`」処理と連動する\ ``AccessDeniedHandler``\ インタフェースの実装クラスが適用される。
-
-    そのため、\ ``MissingCsrfTokenException``\ が発生すると、「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効化する際に指定したパス(\ ``invalid-session-url``\ )にリダイレクトする。
-
-.. note::
-
-  **ステータスコード403以外を返却したい場合**
-
-  リクエストに含まれるCSRFトークンが一致しない場合に、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを実装した、独自のAccessDeniedHandlerを作成する必要がある。
+.. _SpringSecurityCsrf:
+
+CSRF対策
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+
+本節では、Spring Securityが提供しているCross site request forgeries(以下、CSRFと略す）対策の機能について説明する。
+
+CSRFとは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
+ユーザーが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
+
+サーバ側でCSRFを防ぐには、以下の方法が知られている。
+
+* 秘密情報(トークン)の埋め込み
+* パスワードの再入力
+* Refererのチェック
+
+CSRF対策機能は、攻撃者が用意したWebページから送られてくる偽造リクエストを不正なリクエストとして扱うための機能である。
+CSRF対策が行われていないWebアプリケーションを利用すると、以下のような方法で攻撃を受ける可能性がある。
+
+* 利用者は、CSRF対策が行われていないWebアプリケーションにログインする。
+* 利用者は、攻撃者からの巧みな誘導によって、攻撃者が用意したWebページを開いてしまう。
+* 攻撃者が用意したWebページは、フォームの自動送信などのテクニックを使用して、偽造したリクエストをCSRF対策が行われていないWebアプリケーションに対して送信する。
+* CSRF対策が行われていないWebアプリケーションは、攻撃者が偽造したリクエストを正規のリクエストとして処理してしまう。
+
+
+.. tip::
+
+    OWASP\ [#fSpringSecurityCSRF1]_\では、\ `トークンパターンを使用する方法が推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
+    
+      .. [#fSpringSecurityCSRF1] Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
+       https://www.owasp.org/index.php/Main_Page
+
+.. note:: **ログイン時におけるCSRF対策**
+
+    CSRF対策はログイン中のリクエストだけではなく、ログイン処理でも行う必要がある。
+    ログイン処理に対してCSRF対策を怠った場合、攻撃者が用意したアカウントを使って知らぬ間にログインさせられ、ログイン中に行った操作履歴などを盗まれる可能性がある。
+
+.. warning:: **マルチパートリクエスト(ファイルアップロード)時におけるCSRF対策**
+
+    ファイルアップロード時のCSRF対策については、\ :ref:`ファイルアップロード Servlet Filterの設定 <file-upload_setting_servlet_filter>`\ を留意されたい。
+
+
+Spring SecurityのCSRF対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、セッション単位にランダムに生成される固定トークン値(CSRFトークン)を払い出し、払い出されたCSRFトークンをリクエストパラメータ(HTMLフォームのhidden項目)として送信する。
+これにより正規のWebページからのリクエストなのか、攻撃者が用意したWebページからのリクエストなのかを判断する仕組みを採用している。
+
+.. figure:: ./images_CSRF/Csrf.png
+    :width: 100%
+
+    **Spring SecurityのCSRF対策の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (2)
+      - | Spring Securityは、CSRFトークンを生成しHTTPセッションに格納する。
+        | 生成したCSRFトークンは、HTMLフォームのhiddenタグを使ってクライアントと連携する。
+    * - | (3)
+      - | クライアントは、HTMLフォーム内のボタンを押下してアプリケーションサーバーにリクエストを送信する。
+        | HTMLフォーム内のhidden項目にCSRFトークンが埋め込まれているため、CSRFトークン値はリクエストパラメータとして送信される。
+    * - | (4)
+      - | Spring Securityは、HTTPのPOSTメソッドを使ってアクセスされた際は、リクエストパラメータに指定されたCSRFトークン値とHTTPセッション内に保持しているCSRFトークン値が同じ値であることをチェックする。
+        | トークン値が一致しない場合は、不正なリクエスト(攻撃者からのリクエスト)としてエラーを発生させる。
+    * - | (5)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (6)
+      - | Spring Securityは、GETメソッドを使ってアクセスされた際は、CSRFトークン値のチェックは行わない。
+
+.. note:: **Ajax使用時のCSRFトークン**
+
+    Spring Securityは、リクエストヘッダにCSRFトークン値を設定することができるため、Ajax向けのリクエストなどに対してCSRF対策を行うことが可能である。
+
+.. _csrf_ckeck-target:
+
+トークンチェックの対象リクエスト
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルト実装では、以下のHTTPメソッドを使用したリクエストに対して、CSRFトークンチェックを行う。
+
+* POST
+* PUT
+* DELETE
+* PATCH
+
+.. note:: **CSRFトークンチェックを行わない理由**
+
+    GET, HEAD, OPTIONS, TRACE メソッドがチェック対象外となっている理由は、これらのメソッドがアプリケーションの状態を変更するようなリクエストを実行するためのメソッドではないためである。
+
+.. _csrf_spring-security-setting:
+
+How to use
+--------------------------------------------------------------------------------
+
+CSRF対策機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用し、Springのタグライブラリの\ ``<form:form>``\ タグを使うことで、自動的にCSRFトークンを、hiddenに埋め込むことができる。
+
+* spring-mvc.xmlの設定例
+
+.. code-block:: xml
+
+    <bean id="requestDataValueProcessor"
+        class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor"> <!-- (1)  -->
+        <constructor-arg>
+            <util:list>
+                <bean
+                    class="org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor" /> <!-- (2)  -->
+                <bean
+                    class="org.terasoluna.gfw.web.token.transaction.TransactionTokenRequestDataValueProcessor" />
+            </util:list>
+        </constructor-arg>
+    </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ 共通ライブラリから提供されている、\ ``org.springframework.web.servlet.support.RequestDataValueProcessor``\ を複数定義可能な
+       | \ ``org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor``\ をbean定義する。
+   * - | (2)
+     - | コンストラクタの第1引数に、\ ``org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor``\ のbean定義を設定する。
+
+Spring Security 4.0からは、上記設定により、デフォルトでCSRF対策機能が有効となる。このため、CSRF対策機能を適用したくない場合は、明示的に無効化する必要がある。 
+
+CSRF対策機能を使用しない場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:csrf disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
+        <!-- omitted -->
+    </sec:http>
+
+CSRFトークン値の連携
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、CSRFトークン値をクライアントとサーバー間で連携する方法として、以下の2種類の方法を提供している。
+
+* HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する
+* HTMLのmetaタグとしてCSRFトークンの情報を出力し、Ajax通信時にリクエストヘッダにトークン値を設定して連携する
+
+.. _csrf_formtag-use:
+
+Spring MVCを使用した連携
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
+ここでは、CSRF対策機能と連携するためのコンポーネントの使い方を説明する。
+
+hidden項目の自動出力
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+HTMLフォームを作成する際は、以下のようなJSPの実装を行う。
+
+* JSPの実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
+
+    <c:url var="loginUrl" value="/login"/>
+    <form:form action="${loginUrl}"> <!-- (1) -->
+        <!-- omitted -->
+    </form:form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLフォームを作成する際は、Spring MVCから提供されている\ ``<form:form>``\ 要素を使用する。
+
+Spring MVCから提供されている\ ``<form:form>``\ 要素を使うと、以下のようなHTMLフォームが作成される。
+
+* HTMLの出力例
+
+.. code-block:: html
+
+    <form id="command" action="/login" method="post">
+        <!-- omitted -->
+        <!-- Spring MVCの機能と連携して出力されたCSRFトークン値のhidden項目 -->
+        <div>
+            <input type="hidden"
+                   name="_csrf" value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        </div>
+    </form>
+
+.. tip:: **出力されるCSRFトークンチェック値**
+
+    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、\ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象の
+    HTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+
+    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
+
+        .. code-block:: jsp
+
+            <form:form method="GET" modelAttribute="xxxForm" action="...">
+                <%-- ... --%>
+            </form:form>
+
+    これは、\ `OWASP Top 10 <https://code.google.com/p/owasptop10/>`_\ で説明されている、
+
+        The unique token can also be included in the URL itself, or a URL parameter. However, such placement runs a greater risk that the URL will be exposed to an attacker, thus compromising the secret token.
+
+    に対応している事を意味しており、セキュアなWebアプリケーション構築の手助けとなる。
+
+.. _csrf_htmlformtag-use:
+
+HTMLフォーム使用時の連携
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ :ref:`Spring MVCと連携<csrf_formtag-use>` せずに、HTMLフォームを使用してCSRFトークン値を連携することも可能である。
+HTMLフォームを使ってリクエストを送信する場合は、HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する。
+
+* JSPの実装例
+
+.. code-block:: text
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <form action="<c:url value="/login" />" method="post">
+        <!-- omitted -->
+        <sec:csrfInput /> <!-- (1) -->
+        <!-- omitted -->
+    </form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<form>``\ 要素の中に\ ``<sec:csrfInput>``\ 要素を指定する。
+
+Spring Securityから提供されている\ ``<sec:csrfInput>``\ 要素を指定すると、以下のようなhidden項目が出力される。
+HTMLフォーム内にhidden項目を出力することで、CSRFトークン値がリクエストパラメータとして連携される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストパラメータ名は\ ``_csrf``\ になる。
+
+* HTMLの出力例
+
+.. code-block:: html
+
+    <form action="/login" method="post">
+        <!-- omitted -->
+        <!-- CSRFトークン値のhidden項目 -->
+        <input type="hidden"
+               name="_csrf"
+               value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        <!-- omitted -->
+    </form>
+
+.. warning:: **GETメソッド使用時の注意点**
+
+    HTTPメソッドとしてGETを使用する場合、\ ``<sec:csrfInput>``\ 要素を指定しないこと。
+    \ ``<sec:csrfInput>``\ 要素を指定してしまうと、URLにCSRFトークン値が含まれてしまうため、CSRFトークン値が盗まれるリスクが高くなる。
+
+.. _csrf_ajax-token-setting:
+
+Ajax使用時の連携
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Ajaxを使ってリクエストを送信する場合は、HTMLのmetaタグとしてCSRFトークンの情報を出力し、metaタグから取得したトークン値をAjax通信時のリクエストヘッダに設定して連携する。
+
+まず、Spring Securityから提供されているJSPタグライブラリを使用して、HTMLのmetaタグにCSRFトークンの情報を出力する。
+
+* JSPの実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <head>
+        <!-- omitted -->
+        <sec:csrfMetaTags /> <!-- (1) -->
+        <!-- omitted -->
+    </head>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<head>``\ 要素内に\ ``<sec:csrfMetaTags>``\ 要素を指定する。
+
+\ ``<sec:csrfMetaTags>``\ 要素を指定すると、以下のようなmetaタグが出力される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストヘッダ名は\ ``X-CSRF-TOKEN``\ となる。
+
+* HTMLの出力例
+
+.. code-block:: html
+
+    <head>
+        <!-- omitted -->
+        <meta name="_csrf_parameter" content="_csrf" />
+        <meta name="_csrf_header" content="X-CSRF-TOKEN" /> <!-- ヘッダ名 -->
+        <meta name="_csrf"
+              content="63845086-6b57-4261-8440-97a3c6fa6b99" /> <!-- トークン値 -->
+        <!-- omitted -->
+    </head>
+
+つぎに、JavaScriptを使ってmetaタグからCSRFトークンの情報を取得し、Ajax通信時のリクエストヘッダ
+にCSRFトークン値を設定する。(ここではjQueryを使った実装例となっている)
+
+* JavaScriptの実装例
+
+.. code-block:: javascript
+
+    $(function () {
+        var headerName = $("meta[name='_csrf_header']").attr("content"); // (1)
+        var tokenValue = $("meta[name='_csrf']").attr("content"); // (2)
+        $(document).ajaxSend(function(e, xhr, options) {
+            xhr.setRequestHeader(headerName, tokenValue); // (3)
+        });
+    });
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | CSRFトークン値を連携するためのリクエストヘッダ名を取得する。
+    * - | (2)
+      - | CSRFトークン値を取得する。
+    * - | (3)
+      - | リクエストヘッダにCSRFトークン値を設定する。
+
+.. _csrf_token-error-response:
+
+トークンチェックエラー時の遷移先の制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+トークンチェックエラー時の遷移先の制御を行うためには、CSRFトークンチェックエラーに発生する例外である \ ``AccessDeniedException``\ をハンドリングして、その例外に対応した遷移先を指定する。
+
+CSRFのトークンチェックエラー時に発生する例外は以下の通りである。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **CSRFトークンチェックで使用される例外クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - クラス名
+      - 説明
+    * - | \ ``InvalidCsrfTokenException``\
+      - | クライアントから送られたトークン値と、サーバー側で保持しているトークン値が一致しない場合に使用する例外クラス（主に不正なリクエスト）。
+    * - | \ ``MissingCsrfTokenException``\
+      - | サーバー側にトークン値が保存されていない場合に使用する例外クラス（主にセッション切れ）。
+
+\ ``DelegatingAccessDeniedHandler``\クラスを使用して上記の例外をハンドリングし、それぞれに \ ``AccessDeniedHandler``\ インタフェースの実装クラスを割り当てることで、例外毎の遷移先を設定することが可能である。
+
+CSRFトークンチェックエラー時に専用のエラー画面（JSP）に遷移させたい場合は、以下のようなBean定義を行う。(以下の定義例は、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ からの抜粋である)
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+    <bean id="accessDeniedHandler"
+        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (2) -->
+        <constructor-arg index="0">  <!-- (3) -->
+            <map>
+                <!-- (4) -->
+                <entry
+                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+                <!-- (5) -->
+                <entry
+                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+            </map>
+        </constructor-arg>
+        <!-- (6) -->
+        <constructor-arg index="1">
+            <bean
+                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                <property name="errorPage"
+                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />
+            </bean>
+        </constructor-arg>
+    </bean>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``<sec:access-denied-handler>``\ タグのref属性に、Exception毎の制御を行うための\ ``AccessDeniedHandler``\ のBean名を指定する。
+       | エラー時遷移先が全て同じ画面である場合は ``error-page`` 属性に遷移先を指定すればよい。
+       | \ ``<sec:access-denied-handler>``\でハンドリングしない場合は、\ :ref:`SpringSecurityAuthorizationOnError`\ を参照されたい。
+   * - | (2)
+     - | \ ``DelegatingAccessDeniedHandler``\ を使用して、発生した例外（ \ ``AccessDeniedException``\ サブクラス ） と例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）を定義する。
+   * - | (3)
+     - | コンストラクタの第1引数で、個別に遷移先を指定したい例外（ \ ``AccessDeniedException``\ サブクラス ）と、対応する例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）をMap形式で定義する。
+   * - | (4)
+     - | \ ``key``\ に \ ``AccessDeniedException``\ のサブクラスを指定する。
+       | \ ``value`` として、\ ``AccessDeniedHandler``\ の実装クラスである、 \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
+       | \ ``property``\ の \ ``name``\ に \ ``errorPage``\ を指定し、\ ``value``\ に表示するviewを指定する。
+       | マッピングするExceptionに関しては、:ref:`csrf_token-error-response` を参照されたい。
+   * - | (5)
+     - | (4)のExceptionと異なるExceptionを制御したい場合に定義する。
+       | 本例では \ ``InvalidCsrfTokenException``\ 、\ ``MissingCsrfTokenException``\ それぞれに異なる遷移先を設定している。
+   * - | (6)
+     - | コンストラクタの第2引数で、デフォルト例外（(4)(5)で指定していない \ ``AccessDeniedException``\のサブクラス）時の例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）と遷移先を指定する。
+
+
+.. note:: **無効なセッションを使ったリクエストの検知**
+
+    セッション管理機能の「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効にしている場合は、\ ``MissingCsrfTokenException``\ に対して「:ref:`SpringSecuritySessionDetectInvalidSession`」処理と連動する\ ``AccessDeniedHandler``\ インタフェースの実装クラスが適用される。
+
+    そのため、\ ``MissingCsrfTokenException``\ が発生すると、「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効化する際に指定したパス(\ ``invalid-session-url``\ )にリダイレクトする。
+
+.. note::
+
+  **ステータスコード403以外を返却したい場合**
+
+  リクエストに含まれるCSRFトークンが一致しない場合に、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを実装した、独自のAccessDeniedHandlerを作成する必要がある。
diff --git a/source/Security/Encryption.rst b/source/Security/Encryption.rst
index 197a9d91d2..eb8a2fb70f 100755
--- a/source/Security/Encryption.rst
+++ b/source/Security/Encryption.rst
@@ -1,1033 +1,1033 @@
-暗号化
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-.. _EncryptionOverview:
-
-Overview
---------------------------------------------------------------------------------
-
-個人情報やパスワードなどの機密情報は、以下のようなケースで暗号化が求められる。
-
-* インターネットなどのネットワークを介して機密情報の送受信を行う
-* データベースやファイルなどの外部リソースに機密情報を保存する
-
-| Spring Securityの主機能は「認証」と「認可」であるが、暗号化に関する機能も提供している。
-| ただし、提供される機能は限定的なものであるため、Spring Securityがサポートしていない暗号化方式については、個別に実装する必要がある。
-
-本ガイドラインでは、以下の処理について説明を行う。
-
-* Spring Securityが提供しているクラスを利用した共通鍵暗号化方式の暗号化と復号
-* Spring Securityが提供しているクラスを利用した疑似乱数の生成
-* JCA (Java Cryptography Architecture) を利用した公開鍵暗号化方式の暗号化と復号
-* JCAを利用したハイブリッド暗号化方式の暗号化と復号
-
-Spring Securityの暗号化機能の詳細については、\ `Spring Security Reference -Spring Security Crypto Module- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#crypto>`_\ を参照されたい。
-
-.. _EncryptionOverviewEncryptionScheme:
-
-暗号化方式
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-暗号化方式について説明する。
-
-共通鍵暗号化方式
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 暗号化と復号を行う際に同じ鍵を使用する方式である。
-| 復号に使用する鍵を暗号化側へ共有しておく方式であるため、鍵を暗号化側へ安全に受け渡す経路が別途必要となる。
-
-公開鍵暗号化方式
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 復号側が用意した公開鍵を使用して暗号化し、公開鍵とペアとなる秘密鍵を使用して復号する方式である。
-| 暗号文を復号する際に使用する秘密鍵は公開されないためセキュリティの強度は高いが、暗号化と復号処理のコストは高い。
-
-ハイブリッド暗号化方式
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 共通鍵暗号化方式の処理コストが低いという利点と、公開鍵暗号化方式の鍵の管理・配布が容易でセキュリティ強度が高いという利点の両方を組み合わせた方式である。
-| この方式はSSL/TLSなどで利用されている。
-
-たとえば、HTTPS通信では、クライアント側で生成した共通鍵をサーバ側の公開鍵で暗号化したうえで送信し、サーバ側は公開鍵とペアとなる秘密鍵を利用して共通鍵を復号する。
-その後の通信は、共有された共通鍵を使用した共通鍵暗号化方式で通信を行う。
-
-この方式では、
-
-* サイズが大きくなる可能性がある機密情報自体を、処理コストの低い共通鍵暗号化方式で暗号化
-* サイズが小さく配布を安全に行う必要のある共通鍵を、セキュリティ強度の高い公開鍵暗号化方式で暗号化
-
-するのがポイントである。
-機密情報を復号する際に使用する共通鍵は秘密鍵によって守られているため、
-公開鍵暗号化方式のセキュリティ強度を保ちつつ、公開鍵暗号化方式より高速な暗号化と復号処理を実現できる。
-
-ハイブリッド暗号化方式における、暗号化から復号までの処理フローを以下の図に示す。
-
-.. figure:: ./images_Encryption/EncryptionHybrid.png
-   :alt: Hybrid Encryption
-   :width: 100%
-
-1. 送信側が平文を暗号化するための共通鍵を生成する。
-2. 送信側が生成した共通鍵で平文を暗号化する。
-3. 送信側が受信側の公開鍵で共通鍵を暗号化する。
-4. 送信側が暗号化した共通鍵とともに暗号文を送信する。
-5. 受信側が暗号化された共通鍵を受信側の秘密鍵で復号する。
-6. 受信側が復号した共通鍵で暗号文を復号する。
-
-|
-
-.. _EncryptionOverviewEncryptionAlgorithm:
-
-暗号化アルゴリズム
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-暗号化アルゴリズムについて説明する。
-
-DES / 3DES
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| DES (Data Encryption Standard) は共通暗号化方式のアルゴリズムとして、アメリカ合衆国の標準規格として規格化されたものである。鍵長が56ビットと短いため現在では推奨されていない。
-| 3DES (トリプルDES) は、鍵を変えながらDESを繰り返す暗号化アルゴリズムである。
-
-.. _EncryptionOverviewEncryptionAlgorithmAes:
-
-AES
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| AES (Advanced Encryption Standard) は共通鍵暗号化方式のアルゴリズムである。DESの後継として制定された暗号化規格であり、暗号化における現在のデファクトスタンダードとして利用されている。
-| また、ブロック長より長いメッセージを暗号化するメカニズムである暗号利用モードとしてECB (Electronic Codebook) 、CBC (Cipher Block Chaining) 、OFB (Output Feedback) など存在する。その中で、最も広く利用されているものはCBCである。
-
-.. note:: **AES with GCM**
-
-  GCM (Galois/Counter Mode) という、並列処理が可能でありCBCより処理効率が優れていると一般的にいわれている暗号利用モードをAESで利用することも可能である。
-
-
-RSA
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| RSAは公開鍵暗号化方式のアルゴリズムである。素因数分解の困難性に基づいているため、計算機の能力向上により危殆化することとなる。いわゆる「暗号化アルゴリズムの2010年問題」として指摘されているように充分な鍵長が必要であり、現時点では2048ビットが標準的に利用されている。
-
-DSA / ECDSA
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| DSA (Digital Signature Algorithm) は、デジタル署名のための標準規格である。離散対数問題の困難性に基づいている。
-| ECDSA (Elliptic Curve Digital Signature Algorithm : 楕円曲線DSA) は、楕円曲線暗号を用いたDSAの変種である。楕円曲線暗号においては、セキュリティレベルを確保するために必要となる鍵長が短くなるというメリットがある。
-
-.. _EncryptionOverviewPseudoRandomNumber:
-
-疑似乱数 (生成器)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 鍵の生成などで乱数が用いられる。
-| このとき、乱数として生成される値が予測可能だと暗号化の安全性が保てなくなるため、結果の予測が困難な乱数 (疑似乱数) を利用する必要がある。
-| 疑似乱数の生成に用いられるのが疑似乱数生成器である。
-
-.. _EncryptionOverviewCipher:
-
-javax.crypto.Cipherクラス
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``Cipher``\ クラスは、暗号化および復号の機能を提供する。AESやRSAなどの暗号化アルゴリズム、ECBやCBCなどの暗号利用モード、PKCS1などのパディング方式の組み合わせを指定する。
-| 
-| 暗号利用モードとは、\ :ref:`EncryptionOverviewEncryptionAlgorithmAes`\ で説明したとおり、ブロック長より長いメッセージを暗号化するメカニズムである。
-| また、パディング方式とは、ブロック長に満たない暗号化対象を暗号化する場合の保管方式である。
-| 
-| Javaアプリケーションでは、\ ``"<暗号化アルゴリズム>/<暗号利用モード>/<パディング方式>"``\ または、\ ``"<暗号化アルゴリズム>"``\ という形で組み合わせを指定する。たとえば、\ ``"AES/CBC/PKCS5Padding"``\ または、\ ``"RSA"``\ となる。
-  詳細は、\ `CipherクラスのJavaDoc <https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html>`_\ を参照されたい。
-
-.. _EncryptionOverviewSpringSecurity:
-
-Spring Securityにおける暗号化機能
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| Spring Securityでは、共通鍵暗号化方式を使用した暗号化および復号の機能を提供している。
-| 暗号化アルゴリズムは256-bit AES using PKCS #5's PBKDF2 (Password-Based Key Derivation Function #2) である。
-| 暗号利用モードはCBC、パディング方式はPKCS5Paddingである。
-
-暗号化・復号用のコンポーネント
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、共通鍵暗号化方式での暗号化および復号の機能として以下のインターフェイスを提供している。
-
-* \ ``org.springframework.security.crypto.encrypt.TextEncryptor``\  (テキスト用)
-* \ ``org.springframework.security.crypto.encrypt.BytesEncryptor``\  (バイト配列用)
-
-また、これらのインターフェイスの実装クラスとして以下のクラスを提供しており、内部では\ ``Cipher``\ クラスを利用している。
-
-* \ ``org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor``\  (テキスト用)
-* \ ``org.springframework.security.crypto.encrypt.AesBytesEncryptor``\  (バイト配列用)
-
-
-乱数生成用のコンポーネント
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、乱数(鍵)生成の機能として以下のインターフェイスを提供している。
-
-* \ ``org.springframework.security.crypto.keygen.StringKeyGenerator``\  (テキスト用)
-* \ ``org.springframework.security.crypto.keygen.BytesKeyGenerator``\  (バイト配列用)
-
-また、これらのインターフェイスの実装クラスとして以下のクラスを提供している。
-
-* \ ``org.springframework.security.crypto.keygen.HexEncodingStringKeyGenerator``\  (テキスト用)
-* \ ``org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator``\  (バイト配列用。\ ``generateKey``\ メソッドで、異なる鍵長を生成して返却)
-* \ ``org.springframework.security.crypto.keygen.SharedKeyGenerator``\  (バイト配列用。\ ``generateKey``\ メソッドで、コンストラクタで設定した同一の鍵長を返却)
-
-
-.. note:: **Spring Security RSA**
-
-   \ `spring-security-rsa <https://github.com/dsyer/spring-security-rsa>`_\ は、暗号化アルゴリズムとしてRSAを使用した公開鍵暗号化方式とハイブリッド暗号化方式用のAPIを提供している。
-   spring-security-rsaは現在、\ Springの公式リポジトリ <https://github.com/spring-projects>_\ として管理されていない。今後、Springの公式リポジトリ配下に移動した際は、本ガイドラインで利用方法を説明する予定である。
-
-   spring-security-rsaでは以下２つのクラスを提供している。
-
-   * \ ``org.springframework.security.crypto.encrypt.RsaRawEncryptor``\ 
-
-     公開鍵暗号化方式を使用した暗号化および復号の機能を提供するクラス。
-
-   * \ ``org.springframework.security.crypto.encrypt.RsaSecretEncryptor``\ 
-
-     ハイブリッド暗号化方式を使用した暗号化および復号の機能を提供するクラス。
-
-|
-
-.. _EncryptionHowToUse:
-
-How to use
---------------------------------------------------------------------------------
-
-Oracleなど、一部のJava製品ではAESの鍵長256ビットを扱うためには、強度が無制限のJCE管轄ポリシーファイルを適用する必要がある。
-
-.. note:: **JCE管轄ポリシーファイル**
-
-   輸入規制の関係上、一部のJava製品ではデフォルトの暗号化アルゴリズム強度が制限されている。より強力なアルゴリズムを利用する場合は、強度が無制限のJCE管轄ポリシーファイルを入手し、JDK/JREにインストールする必要がある。詳細については、\ `Java Cryptography Architecture Oracle Providers Documentation <https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html>`_\を参照されたい。
-
-   JCE管轄ポリシーファイルのダウンロード先
-
-   * \ `Oracle Java 8 用 <http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html>`_\
-   * \ `Oracle Java 7 用 <http://www.oracle.com/technetwork/java/embedded/embedded-se/downloads/jce-7-download-432124.html>`_\
-
-.. _EncryptionHowToUseCommonKey:
-
-共通鍵暗号化方式
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 暗号化アルゴリズムとしてAESを利用した方法について説明する。
-
-文字列の暗号化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- テキスト（文字列）を暗号化する。
-
-  .. code-block:: java
-
-    public static String encryptText(
-        String secret, String salt, String plainText) {
-        TextEncryptor encryptor = Encryptors.text(secret, salt); // (1)
-
-        return encryptor.encrypt(plainText); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#text``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
-         | 生成したインスタンスの初期化ベクトルがランダムであるため、暗号化の際に異なる結果を返す。なお、暗号利用モードはCBCとなる。
-         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
-
-     * - | (2)
-       - | 平文を\ ``encrypt``\ メソッドで暗号化する。
-
-  .. note:: **暗号化の結果について**
-
-    \ ``encrypt``\ メソッドの返り値 (暗号化の結果) は実行毎に異なる値を返すが、
-    鍵とソルトが同一であれば復号処理の結果は同一になる (正しく復号できる) 。
-
-| 
-
-- 同一の暗号化結果を取得する。
-
-  この方法は、暗号化した結果を用いてデータベースの検索を行うようなケースで利用できる。
-  ただし、セキュリティ強度が落ちる点を踏まえ、使用の可否を検討してほしい。
-
-  .. code-block:: java
-
-    public static void encryptTextResult(
-        String secret, String salt, String plainText) {
-        TextEncryptor encryptor = Encryptors.queryableText(secret, salt); // (1)
-        System.out.println(encryptor.encrypt(plainText)); // (2)
-        System.out.println(encryptor.encrypt(plainText)); //
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 暗号化した結果として同じ値が必要な場合は、\ ``Encryptors#queryableText``\ メソッドを利用して\ ``TextEncryptor``\ クラスのインスタンスを生成する。
-     * - | (2)
-       - | \ ``Encryptors#queryableText``\ メソッドで生成したインスタンスは、\ ``encrypt``\ メソッドでの暗号化の結果として同一の値を返す。
-
-| 
-
-- GCMを用いたAESを使用してテキスト（文字列）を暗号化する。
-
-  GCMを用いたAESはSpring Security4.0.2以降で利用可能である。\ :ref:`EncryptionOverviewEncryptionAlgorithmAes`\ で説明したとおり、CBCより処理効率が良い。
-
-  .. code-block:: java
-
-    public static String encryptTextByAesWithGcm(String secret, String salt, String plainText) {
-        TextEncryptor aesTextEncryptor = Encryptors.delux(secret, salt); // (1)
-
-        return aesTextEncryptor.encrypt(plainText); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#delux``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
-         | このときに指定する共通鍵とソルトは、復号時にも同じものを利用する。
-
-     * - | (2)
-       - | 平文を\ ``encrypt``\ メソッドで暗号化する。
-
-  .. note:: **GCMを用いたAESへのJavaの対応状況**
-
-    GCMを用いたAESはJava SE8以降で使用可能である。詳細については、\ `JDK 8セキュリティの拡張機能 <http://docs.oracle.com/javase/jp/8/docs/technotes/guides/security/enhancements-8.html>`_\を参照されたい。
-
-|
-
-文字列の復号
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- テキスト（文字列）の暗号文を復号する。
-
-  .. code-block:: java
-
-    public static String decryptText(String secret, String salt, String cipherText) {
-        TextEncryptor decryptor = Encryptors.text(secret, salt); // (1)
-
-        return decryptor.decrypt(cipherText); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#text``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
-         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
-
-     * - | (2)
-       - | 暗号文を\ ``decrypt``\ メソッドで復号する。
-
-|
-
-- GCMを用いたAESを使用してテキスト（文字列）の暗号文を復号する。
-
-  .. code-block:: java
-
-    public static String decryptTextByAesWithGcm(String secret, String salt, String cipherText) {
-        TextEncryptor aesTextEncryptor = Encryptors.delux(secret, salt); // (1)
-
-        return aesTextEncryptor.decrypt(cipherText); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#delux``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
-         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
-
-     * - | (2)
-       - | 暗号文を\ ``decrypt``\ メソッドで復号する。
-
-|
-
-バイト配列の暗号化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- バイト配列を暗号化する。
-
-  .. code-block:: java
-
-    public static byte[] encryptBytes(String secret, String salt, byte[] plainBytes) {
-        BytesEncryptor encryptor = Encryptors.standard(secret, salt); // (1)
-
-        return encryptor.encrypt(plainBytes); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#standard``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
-
-     * - | (2)
-       - | バイト配列の平文を\ ``encrypt``\ メソッドで暗号化する。
-
-|
-
-- GCMを用いたAESを使用してバイト配列を暗号化する。
-
-  .. code-block:: java
-
-    public static byte[] encryptBytesByAesWithGcm(String secret, String salt, byte[] plainBytes) {
-        BytesEncryptor aesBytesEncryptor = Encryptors.stronger(secret, salt); // (1)
-
-        return aesBytesEncryptor.encrypt(plainBytes); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#stronger``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
-
-     * - | (2)
-       - | バイト配列の平文を\ ``encrypt``\ メソッドで暗号化する。
-
-|
-
-バイト配列の復号
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- バイト配列の暗号文を復号する。
-
-  .. code-block:: java
-
-    public static byte[] decryptBytes(String secret, String salt, byte[] cipherBytes) {
-        BytesEncryptor decryptor = Encryptors.standard(secret, salt); // (1)
-
-        return decryptor.decrypt(cipherBytes); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#standard``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
-
-     * - | (2)
-       - | バイト配列の暗号文を\ ``decrypt``\ メソッドで復号する。
-
-|
-
-- GCMを用いたAESによりバイト配列を復号する。
-
-  .. code-block:: java
-
-    public static byte[] decryptBytesByAesWithGcm(String secret, String salt, byte[] cipherBytes) {
-        BytesEncryptor aesBytesEncryptor = Encryptors.stronger(secret, salt); // (1)
-
-        return aesBytesEncryptor.decrypt(cipherBytes); // (2)
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 共通鍵とソルトを指定して\ ``Encryptors#stronger``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
-
-     * - | (2)
-       - | バイト配列の暗号文を\ ``decrypt``\ メソッドで復号する。
-
-|
-
-.. _EncryptionHowToUsePublicKey:
-
-公開鍵暗号化方式
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-| Spring Securityでは公開鍵暗号化方式に関する機能は提供されていないため、JCAおよびOpenSSLを利用した方法をサンプルコードを用いて説明する。
-
-事前準備（JCAによるキーペアの生成）
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- JCAでキーペア(公開鍵 / 秘密鍵の組み合わせ)を生成し、公開鍵で暗号化、秘密鍵で復号処理を行う。
-
-  .. code-block:: java
-
-    public void generateKeysByJCA() {
-        try {
-            KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA"); // (1)
-            generator.initialize(2048); // (2)
-            KeyPair keyPair = generator.generateKeyPair(); // (3)
-            PublicKey publicKey = keyPair.getPublic();
-            PrivateKey privateKey = keyPair.getPrivate();
-
-            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey);  // (4)
-            String plainText = decryptByPrivateKey(cipherBytes, privateKey); // (5)
-            System.out.println(plainText);
-        } catch (NoSuchAlgorithmException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | RSAアルゴリズムを指定して\ ``KeyPairGenerator``\ クラスのインスタンスを生成する。
-
-     * - | (2)
-       - | 鍵長として2048ビットを指定する。
-
-     * - | (3)
-       - | キーペアを生成する。
-
-     * - | (4)
-       - | 公開鍵を利用して暗号化処理を行う。処理内容は後述する。
-
-     * - | (5)
-       - | 秘密鍵を利用して復号処理を行う。処理内容は後述する。
-
-  .. note:: **暗号化したデータを文字列として扱いたい場合**
-
-    外部システム連携等、暗号化したデータを文字列でやり取りしたい場合は、1つの手段としてBase64エンコードが挙げられる。Java SE8以降の場合は、Java標準の\ ``java.util.Base64``\ を使用する。それ以前の場合は、Spring Securityの\ ``org.springframework.security.crypto.codec.Base64``\ を使用する。
-
-    Base64エンコードおよびデコードする方法をJava標準の\ ``java.util.Base64``\ を使用して説明する。
-    
-   * Base64エンコード
-
-    .. code-block:: java
-
-            // omitted
-            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey);  // 暗号化処理
-            String cipherString = Base64.getEncoder().encodeToString(cipherBytes);  // バイト配列の暗号文を文字列に変換
-            // omitted
-
-   * Base64デコード
-
-    .. code-block:: java
-
-            // omitted
-            byte[] cipherBytes = Base64.getDecoder().decode(cipherString); // 文字列の暗号文をバイト配列に変換
-            String plainText = decryptByPrivateKey(cipherBytes, privateKey); // 復号処理
-            // omitted
-
-|
-
-暗号化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- 公開鍵を利用して文字列を暗号化する。
-
-  .. code-block:: java
-
-    public byte[] encryptByPublicKey(String plainText, PublicKey publicKey) {
-        try {
-            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding"); // (1)
-            cipher.init(Cipher.ENCRYPT_MODE, publicKey);                       // (2)
-            return cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8)); //
-        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeyException |
-                 IllegalBlockSizeException |
-                 BadPaddingException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 暗号化アルゴリズム、暗号利用モード、パディング方式を指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
-
-     * - | (2)
-       - | 暗号化処理を実行する。
-
-|
-
-復号
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- 秘密鍵を利用してバイト配列を復号する。
-
-  .. code-block:: java
-
-    public String decryptByPrivateKey(byte[] cipherBytes, PrivateKey privateKey) {
-        try {
-            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding"); // (1)
-            cipher.init(Cipher.DECRYPT_MODE, privateKey);           // (2)
-            byte[] plainBytes = cipher.doFinal(cipherBytes); //
-            return new String(plainBytes, StandardCharsets.UTF_8);
-        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeyException |
-                 IllegalBlockSizeException |
-                 BadPaddingException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 暗号化アルゴリズム、暗号利用モード、パディング方式を指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
-
-     * - | (2)
-       - | 復号処理を実行する。
-
-|
-
-OpenSSL
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-| Cipherが同一であれば、公開鍵暗号化方式は別の方法で暗号化および復号を行うことが可能である。
-| ここでは、OpenSSLを利用してあらかじめキーペアを作成しておき、その公開鍵を利用してJCAによる暗号化を行う。
-  そして、その秘密鍵を利用してOpenSSLで復号処理を行う方法を説明する。
-
-.. note:: **OpenSSL**
-
-   OpenSSLでキーペアを作成する際はソフトウェアをインストールしておく必要がある。下記サイトよりダウンロードできる。
-
-   OpenSSLのダウンロード先
-
-   * \ `Linux 用 <https://www.openssl.org/source/>`_\
-   * \ `Windows 用 <http://slproweb.com/products/Win32OpenSSL.html>`_\
-
-|
-
-- 事前準備として、OpenSSLでキーペアを作成する。
-
-  .. code-block:: console
-
-     $ openssl genrsa -out private.pem 2048  # (1)
-
-     $ openssl pkcs8 -topk8 -nocrypt -in private.pem -out private.pk8 -outform DER  # (2)
-
-     $ openssl rsa -pubout -in private.pem -out public.der -outform DER  # (3)
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | OpenSSLで2048ビットの秘密鍵 (DER形式) を生成する。
-
-     * - | (2)
-       - | Javaアプリケーションから読み込むために、秘密鍵をPKCS #8形式に変換する。
-
-     * - | (3)
-       - | 秘密鍵から公開鍵 (DER形式) を生成する。
-
-|
-
-- アプリケーションではOpenSSLで作成した公開鍵を読み込み、読み込んだ公開鍵を利用して暗号化処理を行う。
-
-  .. code-block:: java
-
-    public void useOpenSSLDecryption() {
-        try {
-            KeySpec publicKeySpec = new X509EncodedKeySpec(
-                    Files.readAllBytes(Paths.get("public.der"))); // (1)
-            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
-            PublicKey publicKey = keyFactory.generatePublic(publicKeySpec); // (2)
-
-            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey); // (3)
-
-            Files.write(Paths.get("encryptedByJCA.txt"), cipherBytes);
-            System.out.println("Please execute the following command:");
-            System.out
-                    .println("openssl rsautl -decrypt -inkey hoge.pem -in encryptedByJCA.txt");
-        } catch (IOException e) {
-            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
-        } catch (NoSuchAlgorithmException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeySpecException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 公開鍵ファイルからバイナリデータを読み込む。
-
-     * - | (2)
-       - | バイナリデータから\ ``PublicKey``\ クラスのインスタンスを生成する。
-
-     * - | (3)
-       - | 公開鍵を利用して暗号化処理を行う。
-
-|
-
-- JCAで暗号化した内容がOpenSSLで復号できることを確認する。
-
-  .. code-block:: console
-
-     $ openssl rsautl -decrypt -inkey private.pem -in encryptedByJCA.txt  # (1)
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 秘密鍵を利用してOpenSSLで復号する。
-
-|
-
-| 続いて、OpenSSLで作成したキーペアを利用してOpenSSLで暗号化、JCAで復号する方法を説明する。
-
-- OpenSSLのコマンドを使用して暗号化処理を行う。
-
-  .. code-block:: console
-
-     $ echo Hello | openssl rsautl -encrypt -keyform DER -pubin -inkey public.der -out encryptedByOpenSSL.txt  # (1)
-     
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 公開鍵を利用してOpenSSLで暗号化する。
-
-|
-
-- アプリケーションではOpenSSLで作成した秘密鍵を読み込み、読み込んだ秘密鍵を利用して復号処理を行う。
-
-  .. code-block:: java
-
-    public void useOpenSSLEncryption() {
-        try {
-            KeySpec privateKeySpec = new PKCS8EncodedKeySpec(
-                    Files.readAllBytes(Paths.get("private.pk8"))); // (1)
-            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
-            PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec); // (2)
-
-            String plainText = decryptByPrivateKey(
-                   Files.readAllBytes(Paths.get("encryptedByOpenSSL.txt")),
-                   privateKey); // (3)
-            System.out.println(plainText);
-        } catch (IOException e) {
-            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
-        } catch (NoSuchAlgorithmException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeySpecException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | PKCS #8形式の秘密鍵ファイルからバイナリデータを読み込み\ ``PKCS8EncodedKeySpec``\ クラスのインスタンスを生成する。
-
-     * - | (2)
-       - | \ ``KeyFactory``\ クラスから\ ``PrivateKey``\ クラスのインスタンスを生成する。
-
-     * - | (3)
-       - | 秘密鍵を利用して復号処理を行う。
-
-|
-
-.. _EncryptionHowToUseHybrid:
-
-ハイブリッド暗号化方式
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-| 公開鍵暗号化方式と同様、Spring Securityではハイブリッド暗号化方式に関する機能は提供されていないため、サンプルコードを用いて説明する。
-| このサンプルコードは、spring-security-rsaの\ `RsaSecretEncryptorクラス <https://github.com/dsyer/spring-security-rsa/blob/master/src/main/java/org/springframework/security/rsa/crypto/RsaSecretEncryptor.java>`_\ を参考にしている。
-
-暗号化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-  .. code-block:: java
-
-    public byte[] encrypt(byte[] plainBytes, PublicKey publicKey, String salt) {
-        byte[] random = KeyGenerators.secureRandom(32).generateKey(); // (1)
-        BytesEncryptor aes = Encryptors.standard(
-                new String(Hex.encode(random)), salt); // (2)
-
-        try (ByteArrayOutputStream result = new ByteArrayOutputStream()) {
-            final Cipher cipher = Cipher.getInstance("RSA"); // (3)
-            cipher.init(Cipher.ENCRYPT_MODE, publicKey); // (4)
-            byte[] secret = cipher.doFinal(random); // (5)
-
-            byte[] data = new byte[2]; // (6)
-            data[0] = (byte) ((secret.length >> 8) & 0xFF); //
-            data[1] = (byte) (secret.length & 0xFF); //
-            result.write(data); //
-
-            result.write(secret); // (7)
-            result.write(aes.encrypt(plainBytes)); // (8)
-
-            return result.toByteArray(); // (9)
-        } catch (IOException e) {
-            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
-        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 鍵長として32バイトを指定して\ ``KeyGenerators#secureRandom``\ メソッドを呼び出し、\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
-         | \ ``BytesKeyGenerator#generateKey``\ メソッドを呼び出し、共通鍵を生成する。
-         | 詳細については、\ :ref:`EncryptionHowToUsePseudoRandomNumber`\ を参照されたい。
-
-     * - | (2)
-       - | 生成した共通鍵とソルトを指定して\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-
-     * - | (3)
-       - | 暗号化アルゴリズムとしてRSAを指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
-
-     * - | (4)
-       - | 暗号化モード定数と公開鍵を指定して\ ``Cipher``\ クラスのインスタンスを初期化する。
-
-     * - | (5)
-       - | 共通鍵の暗号化処理を実行する。この暗号化処理は公開鍵暗号化方式となる。
-
-     * - | (6)
-       - | 暗号化した共通鍵の長さをバイト配列の暗号文に格納する。格納された共通鍵の長さは復号時に使用される。
-
-     * - | (7)
-       - | 暗号化した共通鍵をバイト配列の暗号文に格納する。
-
-     * - | (8)
-       - | 平文を暗号化してバイト配列の暗号文に格納する。この暗号化処理は共通鍵暗号化方式となる。
-
-     * - | (9)
-       - | バイト配列の暗号文を返却する。
-
-|
-
-復号
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-  .. code-block:: java
-
-    public byte[] decrypt(byte[] cipherBytes, PrivateKey privateKey, String salt) {
-
-        try (ByteArrayInputStream input = new ByteArrayInputStream(cipherBytes);
-                ByteArrayOutputStream output = new ByteArrayOutputStream()) {
-            byte[] b = new byte[2]; // (1)
-            input.read(b); //
-            int length = ((b[0] & 0xFF) << 8) | (b[1] & 0xFF); //
-
-            byte[] random = new byte[length]; // (2)
-            input.read(random); //
-            final Cipher cipher = Cipher.getInstance("RSA"); // (3)
-            cipher.init(Cipher.DECRYPT_MODE, privateKey); // (4)
-            String secret = new String(Hex.encode(cipher.doFinal(random))); // (5)
-            byte[] buffer = new byte[cipherBytes.length - random.length - 2]; // (6)
-            input.read(buffer); //
-            BytesEncryptor aes = Encryptors.standard(secret, salt); // (7)
-            output.write(aes.decrypt(buffer)); // (8)
-
-            return output.toByteArray(); // (9)
-        } catch (IOException e) {
-            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
-        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
-            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
-        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
-            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
-        }
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 暗号化された共通鍵の長さを取得する。
-
-     * - | (2)
-       - | 暗号化された共通鍵を取得する。
-
-     * - | (3)
-       - | 暗号化アルゴリズムとしてRSAを指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
-
-     * - | (4)
-       - | 復号モード定数と秘密鍵を指定して\ ``Cipher``\ クラスのインスタンスを初期化する。
-
-     * - | (5)
-       - | 共通鍵の復号処理を実行する。この復号処理は公開鍵暗号化方式となる。
-
-     * - | (6)
-       - | 復号対象を取得する。
-
-     * - | (7)
-       - | 復号した共通鍵とソルトを指定して\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
-
-     * - | (8)
-       - | 復号処理を実行する。この復号処理は共通鍵暗号化方式となる。
-
-     * - | (9)
-       - | 復号したバイト配列の平文を返却する。
-
-|
-
-.. _EncryptionHowToUsePseudoRandomNumber:
-
-乱数生成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-文字列型の疑似乱数生成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-  .. code-block:: java
-
-    public static void createStringKey() {
-        StringKeyGenerator generator = KeyGenerators.string(); // (1)
-        System.out.println(generator.generateKey()); // (2)
-        System.out.println(generator.generateKey()); //
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 鍵 (疑似乱数) 生成器\ ``StringKeyGenerator``\ クラスのインスタンスを生成する。
-         | この生成器で鍵を生成すると、毎回異なる値となる。
-         |
-         | 鍵長は指定できず、常に8バイトの鍵が生成される。
-
-     * - | (2)
-       - | \ ``generateKey``\ メソッドで鍵 (疑似乱数) を生成する。
-
-|
-
-バイト配列型の疑似乱数生成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-- 異なる鍵を生成する。
-
-  .. code-block:: java
-
-    public static void createDifferentBytesKey() {
-        BytesKeyGenerator generator = KeyGenerators.secureRandom(); // (1)
-        System.out.println(Arrays.toString(generator.generateKey())); // (2)
-        System.out.println(Arrays.toString(generator.generateKey())); //
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``KeyGenerators#secureRandom``\ メソッドを呼び出し、鍵 (疑似乱数) 生成器\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
-         | この生成器で鍵を生成すると、毎回異なる値となる。
-         |
-         | 鍵長を指定しない場合、デフォルトで8バイトの鍵が生成される。
-
-     * - | (2)
-       - | \ ``generateKey``\ メソッドで鍵を生成する。
-
-|
-
-- 同一の鍵を生成する。
-
-  .. code-block:: java
-
-    public static void createSameBytesKey() {
-        BytesKeyGenerator generator = KeyGenerators.shared(32); // (1)
-        System.out.println(Arrays.toString(generator.generateKey())); // (2)
-        System.out.println(Arrays.toString(generator.generateKey())); //
-    }
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | 鍵長として32バイトを指定して\ ``KeyGenerators#shared``\ メソッドを呼び出し、鍵 (疑似乱数) 生成器\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
-         | この生成器で鍵を生成すると、毎回同じ値となる。
-         |
-         | 鍵長の指定は必須である。
-
-     * - | (2)
-       - | \ ``generateKey``\ メソッドで鍵を生成する。
-
-|
-
-.. raw:: latex
-
-   \newpage
-
+暗号化
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+.. _EncryptionOverview:
+
+Overview
+--------------------------------------------------------------------------------
+
+個人情報やパスワードなどの機密情報は、以下のようなケースで暗号化が求められる。
+
+* インターネットなどのネットワークを介して機密情報の送受信を行う
+* データベースやファイルなどの外部リソースに機密情報を保存する
+
+| Spring Securityの主機能は「認証」と「認可」であるが、暗号化に関する機能も提供している。
+| ただし、提供される機能は限定的なものであるため、Spring Securityがサポートしていない暗号化方式については、個別に実装する必要がある。
+
+本ガイドラインでは、以下の処理について説明を行う。
+
+* Spring Securityが提供しているクラスを利用した共通鍵暗号化方式の暗号化と復号
+* Spring Securityが提供しているクラスを利用した疑似乱数の生成
+* JCA (Java Cryptography Architecture) を利用した公開鍵暗号化方式の暗号化と復号
+* JCAを利用したハイブリッド暗号化方式の暗号化と復号
+
+Spring Securityの暗号化機能の詳細については、\ `Spring Security Reference -Spring Security Crypto Module- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#crypto>`_\ を参照されたい。
+
+.. _EncryptionOverviewEncryptionScheme:
+
+暗号化方式
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+暗号化方式について説明する。
+
+共通鍵暗号化方式
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 暗号化と復号を行う際に同じ鍵を使用する方式である。
+| 復号に使用する鍵を暗号化側へ共有しておく方式であるため、鍵を暗号化側へ安全に受け渡す経路が別途必要となる。
+
+公開鍵暗号化方式
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 復号側が用意した公開鍵を使用して暗号化し、公開鍵とペアとなる秘密鍵を使用して復号する方式である。
+| 暗号文を復号する際に使用する秘密鍵は公開されないためセキュリティの強度は高いが、暗号化と復号処理のコストは高い。
+
+ハイブリッド暗号化方式
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 共通鍵暗号化方式の処理コストが低いという利点と、公開鍵暗号化方式の鍵の管理・配布が容易でセキュリティ強度が高いという利点の両方を組み合わせた方式である。
+| この方式はSSL/TLSなどで利用されている。
+
+たとえば、HTTPS通信では、クライアント側で生成した共通鍵をサーバ側の公開鍵で暗号化したうえで送信し、サーバ側は公開鍵とペアとなる秘密鍵を利用して共通鍵を復号する。
+その後の通信は、共有された共通鍵を使用した共通鍵暗号化方式で通信を行う。
+
+この方式では、
+
+* サイズが大きくなる可能性がある機密情報自体を、処理コストの低い共通鍵暗号化方式で暗号化
+* サイズが小さく配布を安全に行う必要のある共通鍵を、セキュリティ強度の高い公開鍵暗号化方式で暗号化
+
+するのがポイントである。
+機密情報を復号する際に使用する共通鍵は秘密鍵によって守られているため、
+公開鍵暗号化方式のセキュリティ強度を保ちつつ、公開鍵暗号化方式より高速な暗号化と復号処理を実現できる。
+
+ハイブリッド暗号化方式における、暗号化から復号までの処理フローを以下の図に示す。
+
+.. figure:: ./images_Encryption/EncryptionHybrid.png
+   :alt: Hybrid Encryption
+   :width: 100%
+
+1. 送信側が平文を暗号化するための共通鍵を生成する。
+2. 送信側が生成した共通鍵で平文を暗号化する。
+3. 送信側が受信側の公開鍵で共通鍵を暗号化する。
+4. 送信側が暗号化した共通鍵とともに暗号文を送信する。
+5. 受信側が暗号化された共通鍵を受信側の秘密鍵で復号する。
+6. 受信側が復号した共通鍵で暗号文を復号する。
+
+|
+
+.. _EncryptionOverviewEncryptionAlgorithm:
+
+暗号化アルゴリズム
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+暗号化アルゴリズムについて説明する。
+
+DES / 3DES
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| DES (Data Encryption Standard) は共通暗号化方式のアルゴリズムとして、アメリカ合衆国の標準規格として規格化されたものである。鍵長が56ビットと短いため現在では推奨されていない。
+| 3DES (トリプルDES) は、鍵を変えながらDESを繰り返す暗号化アルゴリズムである。
+
+.. _EncryptionOverviewEncryptionAlgorithmAes:
+
+AES
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| AES (Advanced Encryption Standard) は共通鍵暗号化方式のアルゴリズムである。DESの後継として制定された暗号化規格であり、暗号化における現在のデファクトスタンダードとして利用されている。
+| また、ブロック長より長いメッセージを暗号化するメカニズムである暗号利用モードとしてECB (Electronic Codebook) 、CBC (Cipher Block Chaining) 、OFB (Output Feedback) など存在する。その中で、最も広く利用されているものはCBCである。
+
+.. note:: **AES with GCM**
+
+  GCM (Galois/Counter Mode) という、並列処理が可能でありCBCより処理効率が優れていると一般的にいわれている暗号利用モードをAESで利用することも可能である。
+
+
+RSA
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| RSAは公開鍵暗号化方式のアルゴリズムである。素因数分解の困難性に基づいているため、計算機の能力向上により危殆化することとなる。いわゆる「暗号化アルゴリズムの2010年問題」として指摘されているように充分な鍵長が必要であり、現時点では2048ビットが標準的に利用されている。
+
+DSA / ECDSA
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| DSA (Digital Signature Algorithm) は、デジタル署名のための標準規格である。離散対数問題の困難性に基づいている。
+| ECDSA (Elliptic Curve Digital Signature Algorithm : 楕円曲線DSA) は、楕円曲線暗号を用いたDSAの変種である。楕円曲線暗号においては、セキュリティレベルを確保するために必要となる鍵長が短くなるというメリットがある。
+
+.. _EncryptionOverviewPseudoRandomNumber:
+
+疑似乱数 (生成器)
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| 鍵の生成などで乱数が用いられる。
+| このとき、乱数として生成される値が予測可能だと暗号化の安全性が保てなくなるため、結果の予測が困難な乱数 (疑似乱数) を利用する必要がある。
+| 疑似乱数の生成に用いられるのが疑似乱数生成器である。
+
+.. _EncryptionOverviewCipher:
+
+javax.crypto.Cipherクラス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| \ ``Cipher``\ クラスは、暗号化および復号の機能を提供する。AESやRSAなどの暗号化アルゴリズム、ECBやCBCなどの暗号利用モード、PKCS1などのパディング方式の組み合わせを指定する。
+| 
+| 暗号利用モードとは、\ :ref:`EncryptionOverviewEncryptionAlgorithmAes`\ で説明したとおり、ブロック長より長いメッセージを暗号化するメカニズムである。
+| また、パディング方式とは、ブロック長に満たない暗号化対象を暗号化する場合の保管方式である。
+| 
+| Javaアプリケーションでは、\ ``"<暗号化アルゴリズム>/<暗号利用モード>/<パディング方式>"``\ または、\ ``"<暗号化アルゴリズム>"``\ という形で組み合わせを指定する。たとえば、\ ``"AES/CBC/PKCS5Padding"``\ または、\ ``"RSA"``\ となる。
+  詳細は、\ `CipherクラスのJavaDoc <https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html>`_\ を参照されたい。
+
+.. _EncryptionOverviewSpringSecurity:
+
+Spring Securityにおける暗号化機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| Spring Securityでは、共通鍵暗号化方式を使用した暗号化および復号の機能を提供している。
+| 暗号化アルゴリズムは256-bit AES using PKCS #5's PBKDF2 (Password-Based Key Derivation Function #2) である。
+| 暗号利用モードはCBC、パディング方式はPKCS5Paddingである。
+
+暗号化・復号用のコンポーネント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、共通鍵暗号化方式での暗号化および復号の機能として以下のインターフェイスを提供している。
+
+* \ ``org.springframework.security.crypto.encrypt.TextEncryptor``\  (テキスト用)
+* \ ``org.springframework.security.crypto.encrypt.BytesEncryptor``\  (バイト配列用)
+
+また、これらのインターフェイスの実装クラスとして以下のクラスを提供しており、内部では\ ``Cipher``\ クラスを利用している。
+
+* \ ``org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor``\  (テキスト用)
+* \ ``org.springframework.security.crypto.encrypt.AesBytesEncryptor``\  (バイト配列用)
+
+
+乱数生成用のコンポーネント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、乱数(鍵)生成の機能として以下のインターフェイスを提供している。
+
+* \ ``org.springframework.security.crypto.keygen.StringKeyGenerator``\  (テキスト用)
+* \ ``org.springframework.security.crypto.keygen.BytesKeyGenerator``\  (バイト配列用)
+
+また、これらのインターフェイスの実装クラスとして以下のクラスを提供している。
+
+* \ ``org.springframework.security.crypto.keygen.HexEncodingStringKeyGenerator``\  (テキスト用)
+* \ ``org.springframework.security.crypto.keygen.SecureRandomBytesKeyGenerator``\  (バイト配列用。\ ``generateKey``\ メソッドで、異なる鍵長を生成して返却)
+* \ ``org.springframework.security.crypto.keygen.SharedKeyGenerator``\  (バイト配列用。\ ``generateKey``\ メソッドで、コンストラクタで設定した同一の鍵長を返却)
+
+
+.. note:: **Spring Security RSA**
+
+   \ `spring-security-rsa <https://github.com/dsyer/spring-security-rsa>`_\ は、暗号化アルゴリズムとしてRSAを使用した公開鍵暗号化方式とハイブリッド暗号化方式用のAPIを提供している。
+   spring-security-rsaは現在、\ Springの公式リポジトリ <https://github.com/spring-projects>_\ として管理されていない。今後、Springの公式リポジトリ配下に移動した際は、本ガイドラインで利用方法を説明する予定である。
+
+   spring-security-rsaでは以下２つのクラスを提供している。
+
+   * \ ``org.springframework.security.crypto.encrypt.RsaRawEncryptor``\ 
+
+     公開鍵暗号化方式を使用した暗号化および復号の機能を提供するクラス。
+
+   * \ ``org.springframework.security.crypto.encrypt.RsaSecretEncryptor``\ 
+
+     ハイブリッド暗号化方式を使用した暗号化および復号の機能を提供するクラス。
+
+|
+
+.. _EncryptionHowToUse:
+
+How to use
+--------------------------------------------------------------------------------
+
+Oracleなど、一部のJava製品ではAESの鍵長256ビットを扱うためには、強度が無制限のJCE管轄ポリシーファイルを適用する必要がある。
+
+.. note:: **JCE管轄ポリシーファイル**
+
+   輸入規制の関係上、一部のJava製品ではデフォルトの暗号化アルゴリズム強度が制限されている。より強力なアルゴリズムを利用する場合は、強度が無制限のJCE管轄ポリシーファイルを入手し、JDK/JREにインストールする必要がある。詳細については、\ `Java Cryptography Architecture Oracle Providers Documentation <https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html>`_\を参照されたい。
+
+   JCE管轄ポリシーファイルのダウンロード先
+
+   * \ `Oracle Java 8 用 <http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html>`_\
+   * \ `Oracle Java 7 用 <http://www.oracle.com/technetwork/java/embedded/embedded-se/downloads/jce-7-download-432124.html>`_\
+
+.. _EncryptionHowToUseCommonKey:
+
+共通鍵暗号化方式
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| 暗号化アルゴリズムとしてAESを利用した方法について説明する。
+
+文字列の暗号化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- テキスト（文字列）を暗号化する。
+
+  .. code-block:: java
+
+    public static String encryptText(
+        String secret, String salt, String plainText) {
+        TextEncryptor encryptor = Encryptors.text(secret, salt); // (1)
+
+        return encryptor.encrypt(plainText); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#text``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
+         | 生成したインスタンスの初期化ベクトルがランダムであるため、暗号化の際に異なる結果を返す。なお、暗号利用モードはCBCとなる。
+         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
+
+     * - | (2)
+       - | 平文を\ ``encrypt``\ メソッドで暗号化する。
+
+  .. note:: **暗号化の結果について**
+
+    \ ``encrypt``\ メソッドの返り値 (暗号化の結果) は実行毎に異なる値を返すが、
+    鍵とソルトが同一であれば復号処理の結果は同一になる (正しく復号できる) 。
+
+| 
+
+- 同一の暗号化結果を取得する。
+
+  この方法は、暗号化した結果を用いてデータベースの検索を行うようなケースで利用できる。
+  ただし、セキュリティ強度が落ちる点を踏まえ、使用の可否を検討してほしい。
+
+  .. code-block:: java
+
+    public static void encryptTextResult(
+        String secret, String salt, String plainText) {
+        TextEncryptor encryptor = Encryptors.queryableText(secret, salt); // (1)
+        System.out.println(encryptor.encrypt(plainText)); // (2)
+        System.out.println(encryptor.encrypt(plainText)); //
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 暗号化した結果として同じ値が必要な場合は、\ ``Encryptors#queryableText``\ メソッドを利用して\ ``TextEncryptor``\ クラスのインスタンスを生成する。
+     * - | (2)
+       - | \ ``Encryptors#queryableText``\ メソッドで生成したインスタンスは、\ ``encrypt``\ メソッドでの暗号化の結果として同一の値を返す。
+
+| 
+
+- GCMを用いたAESを使用してテキスト（文字列）を暗号化する。
+
+  GCMを用いたAESはSpring Security4.0.2以降で利用可能である。\ :ref:`EncryptionOverviewEncryptionAlgorithmAes`\ で説明したとおり、CBCより処理効率が良い。
+
+  .. code-block:: java
+
+    public static String encryptTextByAesWithGcm(String secret, String salt, String plainText) {
+        TextEncryptor aesTextEncryptor = Encryptors.delux(secret, salt); // (1)
+
+        return aesTextEncryptor.encrypt(plainText); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#delux``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
+         | このときに指定する共通鍵とソルトは、復号時にも同じものを利用する。
+
+     * - | (2)
+       - | 平文を\ ``encrypt``\ メソッドで暗号化する。
+
+  .. note:: **GCMを用いたAESへのJavaの対応状況**
+
+    GCMを用いたAESはJava SE8以降で使用可能である。詳細については、\ `JDK 8セキュリティの拡張機能 <http://docs.oracle.com/javase/jp/8/docs/technotes/guides/security/enhancements-8.html>`_\を参照されたい。
+
+|
+
+文字列の復号
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- テキスト（文字列）の暗号文を復号する。
+
+  .. code-block:: java
+
+    public static String decryptText(String secret, String salt, String cipherText) {
+        TextEncryptor decryptor = Encryptors.text(secret, salt); // (1)
+
+        return decryptor.decrypt(cipherText); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#text``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
+         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
+
+     * - | (2)
+       - | 暗号文を\ ``decrypt``\ メソッドで復号する。
+
+|
+
+- GCMを用いたAESを使用してテキスト（文字列）の暗号文を復号する。
+
+  .. code-block:: java
+
+    public static String decryptTextByAesWithGcm(String secret, String salt, String cipherText) {
+        TextEncryptor aesTextEncryptor = Encryptors.delux(secret, salt); // (1)
+
+        return aesTextEncryptor.decrypt(cipherText); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#delux``\ メソッドを呼び出し、\ ``TextEncryptor``\ クラスのインスタンスを生成する。
+         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
+
+     * - | (2)
+       - | 暗号文を\ ``decrypt``\ メソッドで復号する。
+
+|
+
+バイト配列の暗号化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- バイト配列を暗号化する。
+
+  .. code-block:: java
+
+    public static byte[] encryptBytes(String secret, String salt, byte[] plainBytes) {
+        BytesEncryptor encryptor = Encryptors.standard(secret, salt); // (1)
+
+        return encryptor.encrypt(plainBytes); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#standard``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
+
+     * - | (2)
+       - | バイト配列の平文を\ ``encrypt``\ メソッドで暗号化する。
+
+|
+
+- GCMを用いたAESを使用してバイト配列を暗号化する。
+
+  .. code-block:: java
+
+    public static byte[] encryptBytesByAesWithGcm(String secret, String salt, byte[] plainBytes) {
+        BytesEncryptor aesBytesEncryptor = Encryptors.stronger(secret, salt); // (1)
+
+        return aesBytesEncryptor.encrypt(plainBytes); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#stronger``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+         | このときに指定した共通鍵とソルトは、復号時にも同じものを利用する。
+
+     * - | (2)
+       - | バイト配列の平文を\ ``encrypt``\ メソッドで暗号化する。
+
+|
+
+バイト配列の復号
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- バイト配列の暗号文を復号する。
+
+  .. code-block:: java
+
+    public static byte[] decryptBytes(String secret, String salt, byte[] cipherBytes) {
+        BytesEncryptor decryptor = Encryptors.standard(secret, salt); // (1)
+
+        return decryptor.decrypt(cipherBytes); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#standard``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
+
+     * - | (2)
+       - | バイト配列の暗号文を\ ``decrypt``\ メソッドで復号する。
+
+|
+
+- GCMを用いたAESによりバイト配列を復号する。
+
+  .. code-block:: java
+
+    public static byte[] decryptBytesByAesWithGcm(String secret, String salt, byte[] cipherBytes) {
+        BytesEncryptor aesBytesEncryptor = Encryptors.stronger(secret, salt); // (1)
+
+        return aesBytesEncryptor.decrypt(cipherBytes); // (2)
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 共通鍵とソルトを指定して\ ``Encryptors#stronger``\ メソッドを呼び出し、\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+         | 共通鍵とソルトは、暗号化した際に利用したものを指定する。
+
+     * - | (2)
+       - | バイト配列の暗号文を\ ``decrypt``\ メソッドで復号する。
+
+|
+
+.. _EncryptionHowToUsePublicKey:
+
+公開鍵暗号化方式
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| Spring Securityでは公開鍵暗号化方式に関する機能は提供されていないため、JCAおよびOpenSSLを利用した方法をサンプルコードを用いて説明する。
+
+事前準備（JCAによるキーペアの生成）
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- JCAでキーペア(公開鍵 / 秘密鍵の組み合わせ)を生成し、公開鍵で暗号化、秘密鍵で復号処理を行う。
+
+  .. code-block:: java
+
+    public void generateKeysByJCA() {
+        try {
+            KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA"); // (1)
+            generator.initialize(2048); // (2)
+            KeyPair keyPair = generator.generateKeyPair(); // (3)
+            PublicKey publicKey = keyPair.getPublic();
+            PrivateKey privateKey = keyPair.getPrivate();
+
+            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey);  // (4)
+            String plainText = decryptByPrivateKey(cipherBytes, privateKey); // (5)
+            System.out.println(plainText);
+        } catch (NoSuchAlgorithmException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | RSAアルゴリズムを指定して\ ``KeyPairGenerator``\ クラスのインスタンスを生成する。
+
+     * - | (2)
+       - | 鍵長として2048ビットを指定する。
+
+     * - | (3)
+       - | キーペアを生成する。
+
+     * - | (4)
+       - | 公開鍵を利用して暗号化処理を行う。処理内容は後述する。
+
+     * - | (5)
+       - | 秘密鍵を利用して復号処理を行う。処理内容は後述する。
+
+  .. note:: **暗号化したデータを文字列として扱いたい場合**
+
+    外部システム連携等、暗号化したデータを文字列でやり取りしたい場合は、1つの手段としてBase64エンコードが挙げられる。Java SE8以降の場合は、Java標準の\ ``java.util.Base64``\ を使用する。それ以前の場合は、Spring Securityの\ ``org.springframework.security.crypto.codec.Base64``\ を使用する。
+
+    Base64エンコードおよびデコードする方法をJava標準の\ ``java.util.Base64``\ を使用して説明する。
+    
+   * Base64エンコード
+
+    .. code-block:: java
+
+            // omitted
+            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey);  // 暗号化処理
+            String cipherString = Base64.getEncoder().encodeToString(cipherBytes);  // バイト配列の暗号文を文字列に変換
+            // omitted
+
+   * Base64デコード
+
+    .. code-block:: java
+
+            // omitted
+            byte[] cipherBytes = Base64.getDecoder().decode(cipherString); // 文字列の暗号文をバイト配列に変換
+            String plainText = decryptByPrivateKey(cipherBytes, privateKey); // 復号処理
+            // omitted
+
+|
+
+暗号化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- 公開鍵を利用して文字列を暗号化する。
+
+  .. code-block:: java
+
+    public byte[] encryptByPublicKey(String plainText, PublicKey publicKey) {
+        try {
+            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding"); // (1)
+            cipher.init(Cipher.ENCRYPT_MODE, publicKey);                       // (2)
+            return cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8)); //
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeyException |
+                 IllegalBlockSizeException |
+                 BadPaddingException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 暗号化アルゴリズム、暗号利用モード、パディング方式を指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
+
+     * - | (2)
+       - | 暗号化処理を実行する。
+
+|
+
+復号
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- 秘密鍵を利用してバイト配列を復号する。
+
+  .. code-block:: java
+
+    public String decryptByPrivateKey(byte[] cipherBytes, PrivateKey privateKey) {
+        try {
+            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding"); // (1)
+            cipher.init(Cipher.DECRYPT_MODE, privateKey);           // (2)
+            byte[] plainBytes = cipher.doFinal(cipherBytes); //
+            return new String(plainBytes, StandardCharsets.UTF_8);
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeyException |
+                 IllegalBlockSizeException |
+                 BadPaddingException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 暗号化アルゴリズム、暗号利用モード、パディング方式を指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
+
+     * - | (2)
+       - | 復号処理を実行する。
+
+|
+
+OpenSSL
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| Cipherが同一であれば、公開鍵暗号化方式は別の方法で暗号化および復号を行うことが可能である。
+| ここでは、OpenSSLを利用してあらかじめキーペアを作成しておき、その公開鍵を利用してJCAによる暗号化を行う。
+  そして、その秘密鍵を利用してOpenSSLで復号処理を行う方法を説明する。
+
+.. note:: **OpenSSL**
+
+   OpenSSLでキーペアを作成する際はソフトウェアをインストールしておく必要がある。下記サイトよりダウンロードできる。
+
+   OpenSSLのダウンロード先
+
+   * \ `Linux 用 <https://www.openssl.org/source/>`_\
+   * \ `Windows 用 <http://slproweb.com/products/Win32OpenSSL.html>`_\
+
+|
+
+- 事前準備として、OpenSSLでキーペアを作成する。
+
+  .. code-block:: console
+
+     $ openssl genrsa -out private.pem 2048  # (1)
+
+     $ openssl pkcs8 -topk8 -nocrypt -in private.pem -out private.pk8 -outform DER  # (2)
+
+     $ openssl rsa -pubout -in private.pem -out public.der -outform DER  # (3)
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | OpenSSLで2048ビットの秘密鍵 (DER形式) を生成する。
+
+     * - | (2)
+       - | Javaアプリケーションから読み込むために、秘密鍵をPKCS #8形式に変換する。
+
+     * - | (3)
+       - | 秘密鍵から公開鍵 (DER形式) を生成する。
+
+|
+
+- アプリケーションではOpenSSLで作成した公開鍵を読み込み、読み込んだ公開鍵を利用して暗号化処理を行う。
+
+  .. code-block:: java
+
+    public void useOpenSSLDecryption() {
+        try {
+            KeySpec publicKeySpec = new X509EncodedKeySpec(
+                    Files.readAllBytes(Paths.get("public.der"))); // (1)
+            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
+            PublicKey publicKey = keyFactory.generatePublic(publicKeySpec); // (2)
+
+            byte[] cipherBytes = encryptByPublicKey("Hello World!", publicKey); // (3)
+
+            Files.write(Paths.get("encryptedByJCA.txt"), cipherBytes);
+            System.out.println("Please execute the following command:");
+            System.out
+                    .println("openssl rsautl -decrypt -inkey hoge.pem -in encryptedByJCA.txt");
+        } catch (IOException e) {
+            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
+        } catch (NoSuchAlgorithmException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeySpecException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 公開鍵ファイルからバイナリデータを読み込む。
+
+     * - | (2)
+       - | バイナリデータから\ ``PublicKey``\ クラスのインスタンスを生成する。
+
+     * - | (3)
+       - | 公開鍵を利用して暗号化処理を行う。
+
+|
+
+- JCAで暗号化した内容がOpenSSLで復号できることを確認する。
+
+  .. code-block:: console
+
+     $ openssl rsautl -decrypt -inkey private.pem -in encryptedByJCA.txt  # (1)
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 秘密鍵を利用してOpenSSLで復号する。
+
+|
+
+| 続いて、OpenSSLで作成したキーペアを利用してOpenSSLで暗号化、JCAで復号する方法を説明する。
+
+- OpenSSLのコマンドを使用して暗号化処理を行う。
+
+  .. code-block:: console
+
+     $ echo Hello | openssl rsautl -encrypt -keyform DER -pubin -inkey public.der -out encryptedByOpenSSL.txt  # (1)
+     
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 公開鍵を利用してOpenSSLで暗号化する。
+
+|
+
+- アプリケーションではOpenSSLで作成した秘密鍵を読み込み、読み込んだ秘密鍵を利用して復号処理を行う。
+
+  .. code-block:: java
+
+    public void useOpenSSLEncryption() {
+        try {
+            KeySpec privateKeySpec = new PKCS8EncodedKeySpec(
+                    Files.readAllBytes(Paths.get("private.pk8"))); // (1)
+            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
+            PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec); // (2)
+
+            String plainText = decryptByPrivateKey(
+                   Files.readAllBytes(Paths.get("encryptedByOpenSSL.txt")),
+                   privateKey); // (3)
+            System.out.println(plainText);
+        } catch (IOException e) {
+            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
+        } catch (NoSuchAlgorithmException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeySpecException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | PKCS #8形式の秘密鍵ファイルからバイナリデータを読み込み\ ``PKCS8EncodedKeySpec``\ クラスのインスタンスを生成する。
+
+     * - | (2)
+       - | \ ``KeyFactory``\ クラスから\ ``PrivateKey``\ クラスのインスタンスを生成する。
+
+     * - | (3)
+       - | 秘密鍵を利用して復号処理を行う。
+
+|
+
+.. _EncryptionHowToUseHybrid:
+
+ハイブリッド暗号化方式
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| 公開鍵暗号化方式と同様、Spring Securityではハイブリッド暗号化方式に関する機能は提供されていないため、サンプルコードを用いて説明する。
+| このサンプルコードは、spring-security-rsaの\ `RsaSecretEncryptorクラス <https://github.com/dsyer/spring-security-rsa/blob/master/src/main/java/org/springframework/security/rsa/crypto/RsaSecretEncryptor.java>`_\ を参考にしている。
+
+暗号化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+  .. code-block:: java
+
+    public byte[] encrypt(byte[] plainBytes, PublicKey publicKey, String salt) {
+        byte[] random = KeyGenerators.secureRandom(32).generateKey(); // (1)
+        BytesEncryptor aes = Encryptors.standard(
+                new String(Hex.encode(random)), salt); // (2)
+
+        try (ByteArrayOutputStream result = new ByteArrayOutputStream()) {
+            final Cipher cipher = Cipher.getInstance("RSA"); // (3)
+            cipher.init(Cipher.ENCRYPT_MODE, publicKey); // (4)
+            byte[] secret = cipher.doFinal(random); // (5)
+
+            byte[] data = new byte[2]; // (6)
+            data[0] = (byte) ((secret.length >> 8) & 0xFF); //
+            data[1] = (byte) (secret.length & 0xFF); //
+            result.write(data); //
+
+            result.write(secret); // (7)
+            result.write(aes.encrypt(plainBytes)); // (8)
+
+            return result.toByteArray(); // (9)
+        } catch (IOException e) {
+            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 鍵長として32バイトを指定して\ ``KeyGenerators#secureRandom``\ メソッドを呼び出し、\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
+         | \ ``BytesKeyGenerator#generateKey``\ メソッドを呼び出し、共通鍵を生成する。
+         | 詳細については、\ :ref:`EncryptionHowToUsePseudoRandomNumber`\ を参照されたい。
+
+     * - | (2)
+       - | 生成した共通鍵とソルトを指定して\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+
+     * - | (3)
+       - | 暗号化アルゴリズムとしてRSAを指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
+
+     * - | (4)
+       - | 暗号化モード定数と公開鍵を指定して\ ``Cipher``\ クラスのインスタンスを初期化する。
+
+     * - | (5)
+       - | 共通鍵の暗号化処理を実行する。この暗号化処理は公開鍵暗号化方式となる。
+
+     * - | (6)
+       - | 暗号化した共通鍵の長さをバイト配列の暗号文に格納する。格納された共通鍵の長さは復号時に使用される。
+
+     * - | (7)
+       - | 暗号化した共通鍵をバイト配列の暗号文に格納する。
+
+     * - | (8)
+       - | 平文を暗号化してバイト配列の暗号文に格納する。この暗号化処理は共通鍵暗号化方式となる。
+
+     * - | (9)
+       - | バイト配列の暗号文を返却する。
+
+|
+
+復号
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+  .. code-block:: java
+
+    public byte[] decrypt(byte[] cipherBytes, PrivateKey privateKey, String salt) {
+
+        try (ByteArrayInputStream input = new ByteArrayInputStream(cipherBytes);
+                ByteArrayOutputStream output = new ByteArrayOutputStream()) {
+            byte[] b = new byte[2]; // (1)
+            input.read(b); //
+            int length = ((b[0] & 0xFF) << 8) | (b[1] & 0xFF); //
+
+            byte[] random = new byte[length]; // (2)
+            input.read(random); //
+            final Cipher cipher = Cipher.getInstance("RSA"); // (3)
+            cipher.init(Cipher.DECRYPT_MODE, privateKey); // (4)
+            String secret = new String(Hex.encode(cipher.doFinal(random))); // (5)
+            byte[] buffer = new byte[cipherBytes.length - random.length - 2]; // (6)
+            input.read(buffer); //
+            BytesEncryptor aes = Encryptors.standard(secret, salt); // (7)
+            output.write(aes.decrypt(buffer)); // (8)
+
+            return output.toByteArray(); // (9)
+        } catch (IOException e) {
+            throw new SystemException("e.xx.xx.9001", "input/output error.", e);
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
+            throw new SystemException("e.xx.xx.9002", "No Such setting error.", e);
+        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
+            throw new SystemException("e.xx.xx.9003", "Invalid setting error.", e);
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 暗号化された共通鍵の長さを取得する。
+
+     * - | (2)
+       - | 暗号化された共通鍵を取得する。
+
+     * - | (3)
+       - | 暗号化アルゴリズムとしてRSAを指定して、\ ``Cipher``\ クラスのインスタンスを生成する。
+
+     * - | (4)
+       - | 復号モード定数と秘密鍵を指定して\ ``Cipher``\ クラスのインスタンスを初期化する。
+
+     * - | (5)
+       - | 共通鍵の復号処理を実行する。この復号処理は公開鍵暗号化方式となる。
+
+     * - | (6)
+       - | 復号対象を取得する。
+
+     * - | (7)
+       - | 復号した共通鍵とソルトを指定して\ ``BytesEncryptor``\ クラスのインスタンスを生成する。
+
+     * - | (8)
+       - | 復号処理を実行する。この復号処理は共通鍵暗号化方式となる。
+
+     * - | (9)
+       - | 復号したバイト配列の平文を返却する。
+
+|
+
+.. _EncryptionHowToUsePseudoRandomNumber:
+
+乱数生成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+文字列型の疑似乱数生成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+  .. code-block:: java
+
+    public static void createStringKey() {
+        StringKeyGenerator generator = KeyGenerators.string(); // (1)
+        System.out.println(generator.generateKey()); // (2)
+        System.out.println(generator.generateKey()); //
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 鍵 (疑似乱数) 生成器\ ``StringKeyGenerator``\ クラスのインスタンスを生成する。
+         | この生成器で鍵を生成すると、毎回異なる値となる。
+         |
+         | 鍵長は指定できず、常に8バイトの鍵が生成される。
+
+     * - | (2)
+       - | \ ``generateKey``\ メソッドで鍵 (疑似乱数) を生成する。
+
+|
+
+バイト配列型の疑似乱数生成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+- 異なる鍵を生成する。
+
+  .. code-block:: java
+
+    public static void createDifferentBytesKey() {
+        BytesKeyGenerator generator = KeyGenerators.secureRandom(); // (1)
+        System.out.println(Arrays.toString(generator.generateKey())); // (2)
+        System.out.println(Arrays.toString(generator.generateKey())); //
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | \ ``KeyGenerators#secureRandom``\ メソッドを呼び出し、鍵 (疑似乱数) 生成器\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
+         | この生成器で鍵を生成すると、毎回異なる値となる。
+         |
+         | 鍵長を指定しない場合、デフォルトで8バイトの鍵が生成される。
+
+     * - | (2)
+       - | \ ``generateKey``\ メソッドで鍵を生成する。
+
+|
+
+- 同一の鍵を生成する。
+
+  .. code-block:: java
+
+    public static void createSameBytesKey() {
+        BytesKeyGenerator generator = KeyGenerators.shared(32); // (1)
+        System.out.println(Arrays.toString(generator.generateKey())); // (2)
+        System.out.println(Arrays.toString(generator.generateKey())); //
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+  
+     * - 項番
+       - 説明
+     * - | (1)
+       - | 鍵長として32バイトを指定して\ ``KeyGenerators#shared``\ メソッドを呼び出し、鍵 (疑似乱数) 生成器\ ``BytesKeyGenerator``\ クラスのインスタンスを生成する。
+         | この生成器で鍵を生成すると、毎回同じ値となる。
+         |
+         | 鍵長の指定は必須である。
+
+     * - | (2)
+       - | \ ``generateKey``\ メソッドで鍵を生成する。
+
+|
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/LinkageWithBrowser.rst b/source/Security/LinkageWithBrowser.rst
index ab170b956f..88b9255c7a 100755
--- a/source/Security/LinkageWithBrowser.rst
+++ b/source/Security/LinkageWithBrowser.rst
@@ -1,323 +1,323 @@
-.. _SpringSecurityLinkageWithBrowser:
-
-ブラウザのセキュリティ対策機能との連携
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-Overview
---------------------------------------------------------------------------------
-
-本節では、ブラウザが提供しているセキュリティ対策機能との連携方法について説明する。
-
-主要なWebブラウザは、ブラウザが提供する機能が悪用されないようにするために、いくつかのセキュリティ対策機能を提供している。
-ブラウザが提供するセキュリティ対策機能の一部は、サーバ側でHTTPのレスポンスヘッダを出力することで動作を制御することができる。
-
-Spring Securityは、セキュリティ関連のレスポンスヘッダを出力する機能を用意することで、Webアプリケーションのセキュリティを強化する仕組みを提供している。
-
-.. note:: **セキュリティリスク**
-
-    セキュリティ関連のレスポンスヘッダを出力しても、セキュリティへのリスクが100%なくなるわけではない。
-    あくまで、セキュリティリスクを減らすためのサポート機能と考えておくこと。
-
-    なお、セキュリティヘッダのサポート状況はブラウザによってことなる。
-
-.. note:: **HTTPヘッダの上書き**
-
-    後述の設定を行ったとしても、アプリケーションにより、HTTPヘッダが上書きされる可能性は存在する。
-
-デフォルトでサポートしているセキュリティヘッダ
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityがデフォルトでサポートしているレスポンスヘッダは以下の5つである。
-
-* Cache-Control (Pragma, Expires)
-* X-Frame-Options
-* X-Content-Type-Options
-* X-XSS-Protection
-* Strict-Transport-Security
-
-.. tip:: **ブラウザのサポート状況**
-
-    これらのヘッダに対する処理は、一部のブラウザではサポートされていない。ブラウザの公式サイトまたは以下のページを参照されたい。
-
-    * https://www.owasp.org/index.php/HTTP_Strict_Transport_Security (Strict-Transport-Security)
-    * https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet (X-Frame-Options)
-    * https://www.owasp.org/index.php/List_of_useful_HTTP_headers (X-Content-Type-Options, X-XSS-Protection)
-
-
-Cache-Control
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Cache-Controlヘッダは、コンテンツのキャッシュ方法を指示するためのヘッダである。
-保護されたコンテンツがブラウザにキャッシュされないようにすることで、権限のないユーザーが保護されたコンテンツを閲覧できてしまうリスクを減らすことができる。
-
-コンテンツがキャッシュされないようにするためには、以下のようなヘッダを出力する。
-
-* レスポンスヘッダの出力例
-
-.. code-block:: text
-
-    Cache-Control: no-cache, no-store, max-age=0, must-revalidate
-    Pragma: no-cache
-    Expires: 0
-
-.. note:: **Cache-Controlヘッダの上書き**
-
-    Spring MVCのControllerクラスが \ ``@SessionAttributes`` \のフォームクラスを定義している、もしくは、
-    リクエストハンドラで \ ``@SessionAttributes`` \属性のModelを使用してる場合は、 Cache-Controlヘッダが上書きされる。
-
-.. note:: **HTTP1.0互換のブラウザ**
-
-    Spring SecurityはHTTP1.0互換のブラウザもサポートするために、PragmaヘッダとExpiresヘッダも出力する。
-
-
-X-Frame-Options
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-X-Frame-Optionsヘッダは、フレーム(\ ``<frame>``\ または\ ``<iframe>``\ 要素) 内でのコンテンツの表示を許可するか否かを指示するためのヘッダである。
-フレーム内でコンテンツが表示されないようすることで、クリックジャッキングと呼ばれる攻撃手法を使って機密情報を盗みとられるリスクをなくすことができる。
-
-フレーム内での表示を拒否するためには、以下のようなヘッダを出力する。
-
-* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
-
-.. code-block:: text
-
-    X-Frame-Options: DENY
-
-なお、X-Frame-Optionsヘッダには、出力例以外のオプションを指定することができる。
-
-X-Content-Type-Options
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-X-Content-Type-Optionsヘッダは、コンテンツの種類の決定方法を指示するためのヘッダである。
-一部のブラウザでは、Content-Typeヘッダの値を無視してコンテンツの内容をみて決定する。
-コンテンツの種類の決定する際にコンテンツの内容を見ないようにすることで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
-
-コンテンツの種類の決定する際にコンテンツの内容を見ないようにするためには、以下のヘッダを出力する。
-
-* レスポンスヘッダの出力例
-
-.. code-block:: text
-
-    X-Content-Type-Options: nosniff
-
-
-X-XSS-Protection
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-X-XSS-Protectionヘッダは、ブラウザのXSSフィルター機能を使って有害スクリプトを検出する方法を指示するためのヘッダである。
-XSSフィルター機能を有効にして有害なスクリプトを検知するとこで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
-
-XSSフィルター機能を有効にして有害なスクリプトを検知するためには、以下のようなヘッダを出力する。
-
-* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
-
-.. code-block:: text
-
-    X-XSS-Protection: 1; mode=block
-
-なお、X-XSS-Protectionヘッダには、出力例以外のオプションを指定することができる。
-
-Strict-Transport-Security
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Strict-Transport-Securityヘッダーは、HTTPSを使ってアクセスした後にHTTPを使ってアクセスしようとした際に、HTTPSに置き換えてからアクセスすることを指示するためヘッダである。
-HTTPSでアクセスした後にHTTPが使われないようにすることで、中間者攻撃と呼ばれる攻撃手法を使って悪意のあるサイトに誘導されるリスクを減らすことができる。
-
-HTTPSでアクセスした後にHTTPが使われないようにするためには、以下のようなヘッダを出力する。
-
-* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
-
-.. code-block:: text
-
-    Strict-Transport-Security: max-age=31536000 ; includeSubDomains
-
-.. note:: **Strict-Transport-Security**
-
-    Spring Securityのデフォルト実装では、Strict-Transport-Securityヘッダは、アプリケーションサーバに対してHTTPSを使ってアクセスがあった場合のみ出力される。
-    なお、Strict-Transport-Securityヘッダ値は、オプションを指定することで変更することができる。
-
-
-How to use
---------------------------------------------------------------------------------
-
-セキュリティヘッダ出力機能の適用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-前述のセキュリティヘッダ出力機能を適用する方法をする。
-
-セキュリティヘッダ出力機能は、Spring 3.2から追加された機能でSpring Security 4.0からデフォルトで適用されるようになっている。 
-そのため、セキュリティヘッダ出力機能を有効にするための特別な定義は不要である。 
-なお、セキュリティヘッダ出力機能を適用したくない場合は、明示的に無効化する必要がある。 
-
-セキュリティヘッダ出力機能を無効化する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:headers disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
-        <!-- omitted -->
-    </sec:http>
-
-
-セキュリティヘッダの選択
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-出力するセキュリティヘッダを選択したい場合は、以下のようなbean定義を行う。
-ここではSpring Securityが提供しているすべてのセキュリティヘッダを出力する例になっているが、実際には必要なものだけ指定すること。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:headers defaults-disabled="true"> <!-- (1) -->
-        <sec:cache-control/> <!-- (2) -->
-        <sec:frame-options/> <!-- (3) -->
-        <sec:content-type-options/> <!-- (4) -->
-        <sec:xss-protection/> <!-- (5) -->
-        <sec:hsts/> <!-- (6) -->
-    </sec:headers>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | まずデフォルトで適用されるヘッダ出力を行うコンポーネント登録を無効化する。
-    * - | (2)
-      - | Cache-Control(Pragma, Expires)ヘッダを出力するコンポーネントを登録する。
-    * - | (3)
-      - | Frame-Optionsヘッダを出力するコンポーネントを登録する。
-    * - | (4)
-      - | X-Content-Type-Optionsヘッダを出力するコンポーネントを登録する。
-    * - | (5)
-      - | X-XSS-Protectionヘッダを出力するコンポーネントを登録する。
-    * - | (6)
-      - | Strict-Transport-Securityヘッダを出力するコンポーネントを登録する。
-
-
-また、不要なものだけ無効化する方法も存在する。 
-
-* spring-security.xmlの定義例
-    
-.. code-block:: xml 
-
-    <sec:headers>
-        <sec:cache-control disabled="true"/> <!-- disabled属性にtrueを設定して無効化 --> 
-    </sec:headers>
-
-上記の例だと、Cache-Control関連のヘッダだけが出力されなくなる。 
-
-セキュリティヘッダの詳細については\ `公式リファレンス <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#default-security-headers>`_\ を参照されたい。
-
-
-セキュリティヘッダのオプション指定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-以下のヘッダでは、Spring Securityがデフォルトで出力する内容を変更することができる。
-
-* X-Frame-Options
-* X-XSS-Protection
-* Strict-Transport-Security
-
-Spring Securityのbean定義を変更することで、各要素の属性にオプション\ [#fSpringSecurityLinkageWithBrowser2]_\ を指定することができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:frame-options policy="SAMEORIGIN" />
-
-.. [#fSpringSecurityLinkageWithBrowser2] 各要素で指定できるオプションは http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-headers を参照されたい。
-
-カスタムヘッダの出力
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityがデフォルトで用意していないヘッダを出力することもできる。
-
-以下のヘッダを出力するケースの例を説明する。
-
-.. code-block:: text
-
-    X-WebKit-CSP: default-src 'self'
-
-上記のヘッダを出力する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-      <sec:headers>
-          <sec:header name="X-WebKit-CSP" value="default-src 'self'"/>
-      </sec:headers>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``name``\ 属性にヘッダ名を\ ``value``\ 属性にヘッダ値を指定する。
-
-リクエストパターン毎のセキュリティヘッダの出力
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、\ ``RequestMatcher``\ インタフェースの仕組みを利用して、リクエストのパターン毎にセキュリティヘッダの出力を制御することも可能である。
-
-例えば、保護対象のコンテンツが\ ``/secure/``\ というパスの配下に格納されていて、保護対象のコンテンツへアクセスした時だけCache-Controlヘッダを出力する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <bean id="secureCacheControlHeadersWriter"
-          class="org.springframework.security.web.header.writers.DelegatingRequestMatcherHeaderWriter">
-        <constructor-arg>
-            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
-                <constructor-arg value="/secure/**"/>
-            </bean>
-        </constructor-arg>
-        <constructor-arg>
-            <bean class="org.springframework.security.web.header.writers.CacheControlHeadersWriter"/>
-        </constructor-arg>
-    </bean>
-
-    <sec:http>
-        <!-- omitted -->
-        <sec:headers>
-            <sec:header ref="secureCacheControlHeadersWriter"/> <!-- (2) -->
-        </sec:headers>
-        <!-- omitted -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``RequestMatcher``\ と\ ``HeadersWriter``\ インタフェースの実装クラスを指定して\ ``DelegatingRequestMatcherHeaderWriter``\ クラスのbeanを定義する。
-    * - | (2)
-      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``ref``\ 属性に(1)で定義した\ ``HeaderWriter``\ のbeanを指定する。
-
-
-.. raw:: latex
-
-   \newpage
-
+.. _SpringSecurityLinkageWithBrowser:
+
+ブラウザのセキュリティ対策機能との連携
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+
+本節では、ブラウザが提供しているセキュリティ対策機能との連携方法について説明する。
+
+主要なWebブラウザは、ブラウザが提供する機能が悪用されないようにするために、いくつかのセキュリティ対策機能を提供している。
+ブラウザが提供するセキュリティ対策機能の一部は、サーバ側でHTTPのレスポンスヘッダを出力することで動作を制御することができる。
+
+Spring Securityは、セキュリティ関連のレスポンスヘッダを出力する機能を用意することで、Webアプリケーションのセキュリティを強化する仕組みを提供している。
+
+.. note:: **セキュリティリスク**
+
+    セキュリティ関連のレスポンスヘッダを出力しても、セキュリティへのリスクが100%なくなるわけではない。
+    あくまで、セキュリティリスクを減らすためのサポート機能と考えておくこと。
+
+    なお、セキュリティヘッダのサポート状況はブラウザによってことなる。
+
+.. note:: **HTTPヘッダの上書き**
+
+    後述の設定を行ったとしても、アプリケーションにより、HTTPヘッダが上書きされる可能性は存在する。
+
+デフォルトでサポートしているセキュリティヘッダ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityがデフォルトでサポートしているレスポンスヘッダは以下の5つである。
+
+* Cache-Control (Pragma, Expires)
+* X-Frame-Options
+* X-Content-Type-Options
+* X-XSS-Protection
+* Strict-Transport-Security
+
+.. tip:: **ブラウザのサポート状況**
+
+    これらのヘッダに対する処理は、一部のブラウザではサポートされていない。ブラウザの公式サイトまたは以下のページを参照されたい。
+
+    * https://www.owasp.org/index.php/HTTP_Strict_Transport_Security (Strict-Transport-Security)
+    * https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet (X-Frame-Options)
+    * https://www.owasp.org/index.php/List_of_useful_HTTP_headers (X-Content-Type-Options, X-XSS-Protection)
+
+
+Cache-Control
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Cache-Controlヘッダは、コンテンツのキャッシュ方法を指示するためのヘッダである。
+保護されたコンテンツがブラウザにキャッシュされないようにすることで、権限のないユーザーが保護されたコンテンツを閲覧できてしまうリスクを減らすことができる。
+
+コンテンツがキャッシュされないようにするためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例
+
+.. code-block:: text
+
+    Cache-Control: no-cache, no-store, max-age=0, must-revalidate
+    Pragma: no-cache
+    Expires: 0
+
+.. note:: **Cache-Controlヘッダの上書き**
+
+    Spring MVCのControllerクラスが \ ``@SessionAttributes`` \のフォームクラスを定義している、もしくは、
+    リクエストハンドラで \ ``@SessionAttributes`` \属性のModelを使用してる場合は、 Cache-Controlヘッダが上書きされる。
+
+.. note:: **HTTP1.0互換のブラウザ**
+
+    Spring SecurityはHTTP1.0互換のブラウザもサポートするために、PragmaヘッダとExpiresヘッダも出力する。
+
+
+X-Frame-Options
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-Frame-Optionsヘッダは、フレーム(\ ``<frame>``\ または\ ``<iframe>``\ 要素) 内でのコンテンツの表示を許可するか否かを指示するためのヘッダである。
+フレーム内でコンテンツが表示されないようすることで、クリックジャッキングと呼ばれる攻撃手法を使って機密情報を盗みとられるリスクをなくすことができる。
+
+フレーム内での表示を拒否するためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    X-Frame-Options: DENY
+
+なお、X-Frame-Optionsヘッダには、出力例以外のオプションを指定することができる。
+
+X-Content-Type-Options
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-Content-Type-Optionsヘッダは、コンテンツの種類の決定方法を指示するためのヘッダである。
+一部のブラウザでは、Content-Typeヘッダの値を無視してコンテンツの内容をみて決定する。
+コンテンツの種類の決定する際にコンテンツの内容を見ないようにすることで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
+
+コンテンツの種類の決定する際にコンテンツの内容を見ないようにするためには、以下のヘッダを出力する。
+
+* レスポンスヘッダの出力例
+
+.. code-block:: text
+
+    X-Content-Type-Options: nosniff
+
+
+X-XSS-Protection
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-XSS-Protectionヘッダは、ブラウザのXSSフィルター機能を使って有害スクリプトを検出する方法を指示するためのヘッダである。
+XSSフィルター機能を有効にして有害なスクリプトを検知するとこで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
+
+XSSフィルター機能を有効にして有害なスクリプトを検知するためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    X-XSS-Protection: 1; mode=block
+
+なお、X-XSS-Protectionヘッダには、出力例以外のオプションを指定することができる。
+
+Strict-Transport-Security
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Strict-Transport-Securityヘッダーは、HTTPSを使ってアクセスした後にHTTPを使ってアクセスしようとした際に、HTTPSに置き換えてからアクセスすることを指示するためヘッダである。
+HTTPSでアクセスした後にHTTPが使われないようにすることで、中間者攻撃と呼ばれる攻撃手法を使って悪意のあるサイトに誘導されるリスクを減らすことができる。
+
+HTTPSでアクセスした後にHTTPが使われないようにするためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    Strict-Transport-Security: max-age=31536000 ; includeSubDomains
+
+.. note:: **Strict-Transport-Security**
+
+    Spring Securityのデフォルト実装では、Strict-Transport-Securityヘッダは、アプリケーションサーバに対してHTTPSを使ってアクセスがあった場合のみ出力される。
+    なお、Strict-Transport-Securityヘッダ値は、オプションを指定することで変更することができる。
+
+
+How to use
+--------------------------------------------------------------------------------
+
+セキュリティヘッダ出力機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+前述のセキュリティヘッダ出力機能を適用する方法をする。
+
+セキュリティヘッダ出力機能は、Spring 3.2から追加された機能でSpring Security 4.0からデフォルトで適用されるようになっている。 
+そのため、セキュリティヘッダ出力機能を有効にするための特別な定義は不要である。 
+なお、セキュリティヘッダ出力機能を適用したくない場合は、明示的に無効化する必要がある。 
+
+セキュリティヘッダ出力機能を無効化する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:headers disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
+        <!-- omitted -->
+    </sec:http>
+
+
+セキュリティヘッダの選択
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+出力するセキュリティヘッダを選択したい場合は、以下のようなbean定義を行う。
+ここではSpring Securityが提供しているすべてのセキュリティヘッダを出力する例になっているが、実際には必要なものだけ指定すること。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:headers defaults-disabled="true"> <!-- (1) -->
+        <sec:cache-control/> <!-- (2) -->
+        <sec:frame-options/> <!-- (3) -->
+        <sec:content-type-options/> <!-- (4) -->
+        <sec:xss-protection/> <!-- (5) -->
+        <sec:hsts/> <!-- (6) -->
+    </sec:headers>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | まずデフォルトで適用されるヘッダ出力を行うコンポーネント登録を無効化する。
+    * - | (2)
+      - | Cache-Control(Pragma, Expires)ヘッダを出力するコンポーネントを登録する。
+    * - | (3)
+      - | Frame-Optionsヘッダを出力するコンポーネントを登録する。
+    * - | (4)
+      - | X-Content-Type-Optionsヘッダを出力するコンポーネントを登録する。
+    * - | (5)
+      - | X-XSS-Protectionヘッダを出力するコンポーネントを登録する。
+    * - | (6)
+      - | Strict-Transport-Securityヘッダを出力するコンポーネントを登録する。
+
+
+また、不要なものだけ無効化する方法も存在する。 
+
+* spring-security.xmlの定義例
+    
+.. code-block:: xml 
+
+    <sec:headers>
+        <sec:cache-control disabled="true"/> <!-- disabled属性にtrueを設定して無効化 --> 
+    </sec:headers>
+
+上記の例だと、Cache-Control関連のヘッダだけが出力されなくなる。 
+
+セキュリティヘッダの詳細については\ `公式リファレンス <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#default-security-headers>`_\ を参照されたい。
+
+
+セキュリティヘッダのオプション指定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+以下のヘッダでは、Spring Securityがデフォルトで出力する内容を変更することができる。
+
+* X-Frame-Options
+* X-XSS-Protection
+* Strict-Transport-Security
+
+Spring Securityのbean定義を変更することで、各要素の属性にオプション\ [#fSpringSecurityLinkageWithBrowser2]_\ を指定することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:frame-options policy="SAMEORIGIN" />
+
+.. [#fSpringSecurityLinkageWithBrowser2] 各要素で指定できるオプションは http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-headers を参照されたい。
+
+カスタムヘッダの出力
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityがデフォルトで用意していないヘッダを出力することもできる。
+
+以下のヘッダを出力するケースの例を説明する。
+
+.. code-block:: text
+
+    X-WebKit-CSP: default-src 'self'
+
+上記のヘッダを出力する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+      <sec:headers>
+          <sec:header name="X-WebKit-CSP" value="default-src 'self'"/>
+      </sec:headers>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``name``\ 属性にヘッダ名を\ ``value``\ 属性にヘッダ値を指定する。
+
+リクエストパターン毎のセキュリティヘッダの出力
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、\ ``RequestMatcher``\ インタフェースの仕組みを利用して、リクエストのパターン毎にセキュリティヘッダの出力を制御することも可能である。
+
+例えば、保護対象のコンテンツが\ ``/secure/``\ というパスの配下に格納されていて、保護対象のコンテンツへアクセスした時だけCache-Controlヘッダを出力する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="secureCacheControlHeadersWriter"
+          class="org.springframework.security.web.header.writers.DelegatingRequestMatcherHeaderWriter">
+        <constructor-arg>
+            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                <constructor-arg value="/secure/**"/>
+            </bean>
+        </constructor-arg>
+        <constructor-arg>
+            <bean class="org.springframework.security.web.header.writers.CacheControlHeadersWriter"/>
+        </constructor-arg>
+    </bean>
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:headers>
+            <sec:header ref="secureCacheControlHeadersWriter"/> <!-- (2) -->
+        </sec:headers>
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``RequestMatcher``\ と\ ``HeadersWriter``\ インタフェースの実装クラスを指定して\ ``DelegatingRequestMatcherHeaderWriter``\ クラスのbeanを定義する。
+    * - | (2)
+      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``ref``\ 属性に(1)で定義した\ ``HeaderWriter``\ のbeanを指定する。
+
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/SessionManagement.rst b/source/Security/SessionManagement.rst
index 034e327914..a72a0bdadb 100755
--- a/source/Security/SessionManagement.rst
+++ b/source/Security/SessionManagement.rst
@@ -1,566 +1,566 @@
-.. _SpringSecuritySessionManagement:
-
-セッション管理
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-Overview
---------------------------------------------------------------------------------
-
-本節では、「Webアプリケーションでセッションを扱う際に必要となるセキュリティ対策」及び「Spring Securityが提供しているセッション関連の機能」について説明する。
-
-.. _SpringSecuritySessionManagementSecurityMeasure:
-
-セッション利用時のセキュリティ対策
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Webアプリケーションでセッションを扱う場合、一般的には以下の攻撃に対して対策が必要となる。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 30 70
-
-    * - 対策
-      - 説明
-    * - | セッションハイジャック攻撃
-      - | 通信の盗聴、規則性からの類推、クロスサイトスクリプティングなどを駆使してセッションIDを盗みとり、盗みとったセッションIDをつかっているユーザーになりすましてシステムを利用する攻撃。
-    * - | セッション固定攻撃
-      - | 攻撃者が事前に払い出したセッションIDを他人に使わせてシステムにログインさせ、攻撃者がログインしたユーザーになりすましてシステムを利用する攻撃。
-
-セッションハイジャック攻撃への対策
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-セッションハイジャック攻撃への対策は、セッションIDが盗み取られないようにするしかない。
-いったん盗み取られてしまうと、アプリケーションサーバは正規のユーザーからのリクエストなのか、
-攻撃者からのリクエストなのかを判断することができない。
-
-このようなセッションハイジャック攻撃からアプリケーションを守るためには、以下のような対策が必要である。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table:: **セッションハイジャック攻撃への対策**
-    :header-rows: 1
-    :widths: 30 70
-
-    * - 対策
-      - 説明
-    * - | 推測困難なセッションIDの生成する
-      - | 連番など推測できる値をセッションIDに使用せず、推測が困難な(セキュアな)ランダム値を使用する。
-        | 基本的にはアプリケーションサーバが提供するセッションIDの生成機構を利用すればよい。
-    * - | HTTPSを使って通信を暗号化する
-      - | 盗まれると困る情報をやりとりする通信は、HTTPSプロトコルを使って暗号化する。
-        | 通信の盗聴はフリーのソフトなどを使って簡単に行うことができため、盗聴されても解読されないように暗号化しておくことが重要である。
-    * - | セッションIDはCookieを使って連携する
-      - | クライアントとサーバーとの間でセッションIDを連携する際は、Cookieを使って連携するように設定し、URL Rewriting機能を無効化する。
-    * - | Cookieの\ ``HttpOnly``\ 属性を指定する
-      - | Cookieの\ ``HttpOnly``\ 属性を指定すると、JavaScriptからCookieにアクセスすることができなくため、クロスサイトスクリプティングを使ってセッションIDを盗むことができなくなる。
-    * - | Cookieに\ ``Secure``\ 属性を指定する
-      - | Cookieに\ ``Secure``\ 属性を指定すると、HTTPS通信の時だけCookieをサーバーに送信するため、誤ってHTTP通信を使ってしまった時にセッションIDが盗み取られるリスクを減らすことができる。
-
-.. note:: **URL Rewriting**
-
-    URL Rewritingは、Cookieを使用できないクライアントとセッションを維持するための仕組みである。
-    具体的には、URLのリクエストパラメータの中にセッションIDを含めることでクライアントとサーバーの間でセッションIDを連携する。
-
-    * URL Rewritingが行われたURL例
-
-        .. code-block:: guess
-
-            http://localhost:8080/;jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646
-
-    \ ``jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646``\ の部分がURL RewritingされたセッションIDになる。
-    ServletのAPI仕様では、以下のメソッドを呼び出すとURL Rewritingが行われる可能性があり、JSTLやSpringが提供しているJSPタグライブラリの中でもこれらのメソッドを呼び出している。
-
-    * \ ``HttpServletResponse#encodeURL(String)``\
-    * \ ``HttpServletResponse#encodeRedirectURL(String)``\
-
-URL Rewritingが行われるとURL内にセッションIDが露出してしまうため、セッションIDを盗まれるリスクが高くなる。
-そのため、Cookieを使うことができるクライアントのみをサポートする場合は、サーブレットコンテナのURL Rewriting機能を無効化することを推奨する。
-
-|
-
-セッション固定攻撃への対策
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-セッション固定攻撃からアプリケーションを守るためには、以下のような対策が必要になる。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table:: **セッション固定攻撃への対策**
-    :header-rows: 1
-    :widths: 30 70
-
-    * - 対策
-      - 説明
-    * - | URL Rewriting機能を無効化する
-      - | URL Rewriting機能を無効化すると、攻撃者が事前に払い出したセッションIDが使われず、新たにセッションが開始される。
-    * - | ログイン後にセッションIDを変更する
-      - | ログイン後にセッションIDを変更することで、攻撃者が事前に払い出したセッションIDが使用できなくなる。
-
-|
-
-Spring Securityが提供するセッション管理機能
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityでは、セッションについて、主に以下の機能が提供されている。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **セッションに関する提供機能**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - 機能
-      - 説明
-    * - | セキュリティ対策
-      - | セッションハイジャック攻撃等のセッションIDを使用した攻撃への対策機能。
-    * - | ライフサイクル制御
-      - | セッションの生成～破棄までのライフサイクルを制御する機能。
-    * - | タイムアウト制御
-      - | タイムアウトにより、セッションを破棄する機能。
-    * - | 多重ログイン制御
-      - | 同一ユーザーによる多重ログイン時のセッションを制御する機能。
-
-.. _authentication(spring_security)_how_to_use_sessionmanagement:
-
-How to use
---------------------------------------------------------------------------------
-
-セッションハイジャック攻撃への対策
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ここではURL Rewriting機能を無効化し、Cookieを使用してセッションIDを連携する方法を説明する。、
-
-Spring SecurityによるURL Rewriting機能の無効化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring SecurityはURL Rewritingを無効化するための仕組みを提供しており、この機能はデフォルトで適用されている。
-Cookieを使えないクライアントをサポートする必要がある場合は、URL Rewritingを許可するようにBean定義する。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http disable-url-rewriting="false"> <!-- falseを指定してURL Rewritingを有効化 -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Spring Securityのデフォルトでは、\ ``disable-url-rewriting``\ の値は \ ``true``\であるため、URL Rewritingは行われない。
-        | URL Rewritingを有効にする際は、\ ``<sec:http>``\ 要素の \ ``disable-url-rewriting``\ 属性に\ ``false``\ を設定する。
-
-サーブレットコンテナによるURL Rewriting機能の無効化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Servletの標準仕様の仕組みを使ってセッションをセキュアに扱うことが可能である。
-
-* web.xmlの定義例
-
-.. code-block:: xml
-
-    <session-config>
-        <cookie-config>
-            <http-only>true</http-only> <!-- (1)  -->
-        </cookie-config>
-        <tracking-mode>COOKIE</tracking-mode> <!-- (2) -->
-    </session-config>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | Cookieに\ ``HttpOnly``\ 属性を付与する場合は、\ ``<http-only>``\ 要素に\ ``true``\ を指定する。
-        | 使用するアプリケーションサーバによっては、デフォルト値が\ ``true``\ になっている。
-    * - | (3)
-      - | URL Rewriting機能を無効化する場合は、\ ``<tracking-mode>``\ 要素に\ ``COOKIE``\ を指定する。
-
-上記の定義例からは省略しているが、\ ``<cookie-config>``\ に \ ``<secure>true</secure>``\を追加することで、 Cookieに\ ``Secure``\ 属性を付与することができる。
-ただし、cookieのsecure化は、\ ``web.xml``\ で指定するのではなく、クライアントとHTTPS通信を行うミドルウェア(SSLアクセラレータやWebサーバーなど)で付与する方法を検討されたい。
-
-実際のシステム開発の現場において、ローカルの開発環境でHTTPSを使うケースはほとんどない。
-また、本番環境においても、HTTPSを使うのはSSLアクセラレータやWebサーバーとの通信までで、アプリケーションサーバへの通信はHTTPで行うケースも少なくない。
-このような環境下で\ ``Secure``\ 属性の指定を\ ``web.xml``\ で行ってしまうと、実行環境毎に\ ``web.xml``\ や\ ``web-fragment.xml``\ を用意することになり、ファイルの管理が煩雑になるため推奨されない。
-
-
-.. _SpringSecuritySessionManagementSetup:
-
-セッション管理機能の適用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityのセッション管理機能を適用する方法を説明する。
-Spring Securityのセッション管理機能の処理を使用する場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http>
-        <!-- ommited -->
-        <sec:session-management /> <!-- (1) -->
-        <!-- ommited -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:http>``\ 要素の子要素として\ ``<sec:session-management>``\ 要素を指定する。
-        | \ ``<sec:session-management>``\ 要素を指定すると、セッション管理機能が適用される。
-
-|
-
-セッション固定攻撃への対策
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、セッション固定攻撃対策として、ログイン成功時にセッションIDを変更するためのオプションを4つ用意している。
-
-.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-.. list-table:: **セッション固定攻撃への対策のオプション**
-    :header-rows: 1
-    :widths: 30 70
-
-    * - オプション
-      - 説明
-    * - | \ ``changeSessionId``\
-      - | Servlet 3.1で追加された\ ``HttpServletRequest#changeSessionId()``\ を使用してセッションIDを変更する。
-        | (これはServlet 3.1以上のコンテナ上でのデフォルトの動作である)
-    * - | \ ``migrateSession``\
-      - | ログイン前に使用していたセッションを破棄し、新たにセッションを作成する。
-        | このオプションを使用すると、ログイン前にセッションに格納されていたオブジェクトは新しいセッションに引き継がれる。
-        | (Servlet 3.0以下のコンテナ上でのデフォルトの動作の動作である)
-    * - | \ ``newSession``\
-      - | このオプションは\ ``migrateSession``\ と同じ方法でセッションIDを変更するが、ログイン前に格納されていたオブジェクトは新しいセッションに引き継がれない。
-    * - | \ ``none``\
-      - | Spring Securityは、セッションIDを変更しない。
-
-デフォルトの動作を変更したい場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:session-management
-            session-fixation-protection="newSession"/> <!-- (1) -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | ``<sec:session-management>``\ 要素の\ ``session-fixation-protection``\ 属性にセッション固定攻撃の対策方法を指定する。
-
-.. _SpringSecuritySessionManagementLifecycle:
-
-セッションのライフサイクル制御
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、リクエストを跨いで認証情報などのオブジェクトを共有するための手段としてHTTPセッションを使用しており、Spring Securityの処理の中でセッションのライフサイクル(セッションの作成と破棄)を制御している。
-
-.. note:: **セッション情報の格納先**
-
-    Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
-
-セッションの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityの処理の中でどのような方針でセッションを作成して利用するかは、以下のオプションから選択することができる。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **セッションの作成方針**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - オプション
-      - 説明
-    * - | \ ``always``\
-      - | セッションが存在しない場合は、無条件に新たなセッションを生成する。
-        | このオプションを指定すると、Spring Securityの処理でセッションを使わないケースでもセッションが作成される。
-    * - | \ ``ifRequired``\
-      - | セッションが存在しない場合は、セッションにオブジェクトを格納するタイミングで新たなセッションを作成して利用する。(デフォルトの動作)
-    * - | \ ``never``\
-      - | セッションが存在しない場合は、セッションの生成及び利用は行わない。
-        | ただし、既にセッションが存在している場合はセッションを利用する。
-    * - | \ ``stateless``\
-      - | セッションの有無に関係なく、セッションの生成及び利用は行わない。
-
-デフォルトの振る舞いを変更したい場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http create-session="stateless"> <!-- (1) -->
-        <!-- ommited -->
-    </sec:http>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | \ (1)
-      - | \ ``<sec:http>``\ 要素の\ ``create-session``\ 属性に、変更したいセッションの作成方針を指定する。
-
-セッションの破棄
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、以下のタイミングでセッションを破棄する。
-
-* ログアウト処理が実行されたタイミング
-* 認証処理が成功したタイミング (セッション固定攻撃対策として\ ``migrateSession``\ 又は\ ``newSession``\ が適用されるとセッションが破棄される)
-
-.. _SpringSecuritySessionManagementTimeout:
-
-セッションタイムアウトの制御
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-セッションにオブジェクトを格納する場合、適切なセッションタイムアウト値を指定して、一定時間操作がないユーザーとのセッションを自動で破棄するようにするのが一般的である。
-
-セッションタイムアウトの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-セッションタイムアウトは、サーブレットコンテナに対して指定する。
-アプリケーションサーバーによっては、サーバー独自の指定方法を用意しているケースもあるが、ここでは、Servlet標準仕様で定められた指定方法を説明する。
-
-* web.xmlの定義例
-
-.. code-block:: xml
-
-    <session-config>
-        <session-timeout>60</session-timeout> <!-- (1) -->
-        <!-- ommited -->
-    </session-config>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<session-timeout>``\ 要素に適切なタイムアウト値(分単位)を指定する。
-        |  タイムアウト値を指定しない場合は、サーブレットコンテナが用意しているデフォルト値が適用される。
-        | また、0以下の値を指定するとサーブレットコンテナのセッションタイム機能が無効化される。
-
-.. _SpringSecuritySessionDetectInvalidSession:
-
-無効なセッションを使ったリクエストの検知
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Securityは、無効なセッションを使ったリクエストを検知する機能を提供している。
-無効なセッションとして扱われるリクエストの大部分は、セッションタイムアウト後のリクエストである。
-デフォルトではこの機能は無効になっているが、以下のようなbean定義を行うことで有効化することができる。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:session-management
-            invalid-session-url="/error/invalidSession"/>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:session-management>``\ 要素の\ ``invalid-session-url``\ 属性に、無効なセッションを使ったリクエストを検知した際のリダイレクト先のパスを指定する。
-
-除外パスの指定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-無効なセッションを使ったリクエストを検知する機能を有効にすると、Spring Securityのサーブレットフィルタを通過するすべてのリクエストに対してチェックが行われる。
-そのため、セッションが無効な状態でアクセスしても問題がないページにアクセスした場合もチェックが行われる。
-
-この動作を変更したい場合は、チェック対象から除外したいパスに対して個別にbean定義を行うことで実現することが可能である。
-例として、トップページを開くためのパス(\ ``"/"``\ )を除外パスに指定したい場合は、以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <sec:http pattern="/"> <!-- (2) -->
-        <sec:session-management />
-    </sec:http>
-
-    <!-- (3) -->
-    <sec:http>
-        <!-- ommited -->
-        <sec:session-management
-                invalid-session-url="/error/invalidSession"/>
-        <!-- ommited -->
-    </sec:http>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | トップページを開くためのパス(\ ``"/"``\ )に適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を新たに追加する。
-    * - | (2)
-      - | (1)の\ ``<sec:http>``\ 要素を使って生成した\ ``SecurityFilterChain``\ を適用するパスパターンを指定する。
-        | 指定可能なパスパターンはAnt形式のパス表記と正規表現の２つの形式であり、デフォルトではAnt形式のパスとして扱われる。
-        | また、パスパターンではなく\ ``RequestMatcher``\ オブジェクトを直接指定することも可能である。
-    * - | (3)
-      - | 個別定義していないパスに適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を定義する。
-        | この定義は、個別定義用の\ ``<sec:http>``\ 要素より下に定義すること。
-        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
-
-|
-
-.. _SpringSecuritySessionManagementConcurrency:
-
-多重ログインの制御
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、同じユーザー名(ログインID)を使った多重ログインを制御する機能を提供している。
-デフォルトではこの機能は無効になってるが、:ref:`SpringSecurityHowToUseSessionManagementConcurrency` を行うことで有効化することができる。
-
-.. warning:: **多重ログイン制御における制約**
-
-    Spring Securityが提供しているデフォルト実装では、ユーザー毎のセッション情報をアプリケーションサーバーのメモリ内で管理しているため、以下の2つの制約がある。
-
-    ひとつめの制約として、複数のアプリケーションサーバーを同時に起動するシステムでは、デフォルト実装を利用することができないことが挙げられる。
-    複数のアプリケーションサーバーを同時に使用する場合は、ユーザー毎のセッション情報をデータベースやキーバリューストア(キャッシュサーバー)などの共有領域で管理する実装クラスの作成が必要になる。
-
-    ふたつめの制約は、アプリケーションサーバーを停止または再起動時した際に、セッション情報が復元されると、正常動作しない可能性があるという点である。
-    使用するアプリケーションサーバーによっては、停止または再起動時のセッション状態を復元する機能をもっているため、実際のセッション状態とSpring Securityが管理しているセッション情報に不整合が生じることになる。
-    このような不整合が生まれる可能性がある場合は、以下のいずれかの対応が必要になる。
-
-    * アプリケーションサーバ側のセッション状態が復元されないようにする。
-    * Spring Security側のセッション情報を復元する仕組みを実装する。
-    * HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納する。
-
-本節では、Spring Securityのデフォルト実装を使用する方法を紹介する。
-Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
-ただし、ここで紹介する方法は **上記Warningの制約が残っている実装方法であるため** 、適用する際は注意されたい。
-
-.. Todo::
-   インメモリを使用しない実装方法に関しては、今後追加予定である。
-
-.. _SpringSecurityHowToUseSessionManagementConcurrency:
-
-セッションのライフサイクル検知の有効化
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-多重ログインを制御する機能は、:ref:`セッションのライフサイクル(セッションの生成と破棄)を検知する仕組み<SpringSecuritySessionManagementLifecycle>` を利用してユーザー毎のセッション状態を管理している。
-このため、多重ログインの制御機能を使用する際は、Spring Securityから提供されている\ ``HttpSessionEventPublisher``\ クラスをサーブレットコンテナに登録する必要がある。
-
-* web.xmlの定義例
-
-.. code-block:: xml
-
-    <listener>
-        <!-- (1) -->
-        <listener-class>
-            org.springframework.security.web.session.HttpSessionEventPublisher
-        </listener-class>
-    </listener>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | サーブレットリスナとして\ ``HttpSessionEventPublisher``\ を登録する。
-
-多重ログインの禁止(先勝ち)
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、認証エラーを発生させて多重ログインを防ぐ場合は、以下のようなbean定義を行う。
-
-* bean定義ファイルの定義例
-
-.. code-block:: xml
-
-    <sec:session-management>
-        <sec:concurrency-control
-                max-sessions="1"
-                error-if-maximum-exceeded="true"/> <!-- (1) (2) -->
-    </sec:session-management>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - \ (1)
-      - \ ``<sec:concurrency-control>``\ 要素の\ ``max-sessions``\ 属性に、同時にログイン
-        を許可するセッション数を指定する。
-        多重ログインを防ぎたい場合は、通常\ ``1``\ を指定する。
-    * - \ (2)
-      - \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、
-        同時にログインできるセッション数を超えた時の動作を指定する。
-        既にログインしているユーザーを有効なユーザーとして扱う場合は、\ ``true``\
-        を指定する。
-
-多重ログインの禁止(後勝ち)
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、
-既にログインしているユーザーを無効化することで多重ログインを防ぐ場合は、
-以下のようなbean定義を行う。
-
-* spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:session-management>
-        <sec:concurrency-control
-                max-sessions="1"
-                error-if-maximum-exceeded="false"
-                expired-url="/error/expire"/> <!-- (1) (2) -->
-    </sec:session-management>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、同時にログインできるセッション数を超えた時の動作を指定する。
-        | 新たにログインしたユーザーを有効なユーザーとして扱う場合は、\ ``false``\ を指定する。
-    * - | (2)
-      - | \ ``<sec:concurrency-control>``\ 要素の\ ``expired-url``\ 属性に、無効化されたユーザーからのリクエストを検知した際のリダイレクト先のパスを指定する。
-        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
-
-.. raw:: latex
-
-   \newpage
-
+.. _SpringSecuritySessionManagement:
+
+セッション管理
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+
+本節では、「Webアプリケーションでセッションを扱う際に必要となるセキュリティ対策」及び「Spring Securityが提供しているセッション関連の機能」について説明する。
+
+.. _SpringSecuritySessionManagementSecurityMeasure:
+
+セッション利用時のセキュリティ対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Webアプリケーションでセッションを扱う場合、一般的には以下の攻撃に対して対策が必要となる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | セッションハイジャック攻撃
+      - | 通信の盗聴、規則性からの類推、クロスサイトスクリプティングなどを駆使してセッションIDを盗みとり、盗みとったセッションIDをつかっているユーザーになりすましてシステムを利用する攻撃。
+    * - | セッション固定攻撃
+      - | 攻撃者が事前に払い出したセッションIDを他人に使わせてシステムにログインさせ、攻撃者がログインしたユーザーになりすましてシステムを利用する攻撃。
+
+セッションハイジャック攻撃への対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッションハイジャック攻撃への対策は、セッションIDが盗み取られないようにするしかない。
+いったん盗み取られてしまうと、アプリケーションサーバは正規のユーザーからのリクエストなのか、
+攻撃者からのリクエストなのかを判断することができない。
+
+このようなセッションハイジャック攻撃からアプリケーションを守るためには、以下のような対策が必要である。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッションハイジャック攻撃への対策**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | 推測困難なセッションIDの生成する
+      - | 連番など推測できる値をセッションIDに使用せず、推測が困難な(セキュアな)ランダム値を使用する。
+        | 基本的にはアプリケーションサーバが提供するセッションIDの生成機構を利用すればよい。
+    * - | HTTPSを使って通信を暗号化する
+      - | 盗まれると困る情報をやりとりする通信は、HTTPSプロトコルを使って暗号化する。
+        | 通信の盗聴はフリーのソフトなどを使って簡単に行うことができため、盗聴されても解読されないように暗号化しておくことが重要である。
+    * - | セッションIDはCookieを使って連携する
+      - | クライアントとサーバーとの間でセッションIDを連携する際は、Cookieを使って連携するように設定し、URL Rewriting機能を無効化する。
+    * - | Cookieの\ ``HttpOnly``\ 属性を指定する
+      - | Cookieの\ ``HttpOnly``\ 属性を指定すると、JavaScriptからCookieにアクセスすることができなくため、クロスサイトスクリプティングを使ってセッションIDを盗むことができなくなる。
+    * - | Cookieに\ ``Secure``\ 属性を指定する
+      - | Cookieに\ ``Secure``\ 属性を指定すると、HTTPS通信の時だけCookieをサーバーに送信するため、誤ってHTTP通信を使ってしまった時にセッションIDが盗み取られるリスクを減らすことができる。
+
+.. note:: **URL Rewriting**
+
+    URL Rewritingは、Cookieを使用できないクライアントとセッションを維持するための仕組みである。
+    具体的には、URLのリクエストパラメータの中にセッションIDを含めることでクライアントとサーバーの間でセッションIDを連携する。
+
+    * URL Rewritingが行われたURL例
+
+        .. code-block:: guess
+
+            http://localhost:8080/;jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646
+
+    \ ``jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646``\ の部分がURL RewritingされたセッションIDになる。
+    ServletのAPI仕様では、以下のメソッドを呼び出すとURL Rewritingが行われる可能性があり、JSTLやSpringが提供しているJSPタグライブラリの中でもこれらのメソッドを呼び出している。
+
+    * \ ``HttpServletResponse#encodeURL(String)``\
+    * \ ``HttpServletResponse#encodeRedirectURL(String)``\
+
+URL Rewritingが行われるとURL内にセッションIDが露出してしまうため、セッションIDを盗まれるリスクが高くなる。
+そのため、Cookieを使うことができるクライアントのみをサポートする場合は、サーブレットコンテナのURL Rewriting機能を無効化することを推奨する。
+
+|
+
+セッション固定攻撃への対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッション固定攻撃からアプリケーションを守るためには、以下のような対策が必要になる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッション固定攻撃への対策**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | URL Rewriting機能を無効化する
+      - | URL Rewriting機能を無効化すると、攻撃者が事前に払い出したセッションIDが使われず、新たにセッションが開始される。
+    * - | ログイン後にセッションIDを変更する
+      - | ログイン後にセッションIDを変更することで、攻撃者が事前に払い出したセッションIDが使用できなくなる。
+
+|
+
+Spring Securityが提供するセッション管理機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityでは、セッションについて、主に以下の機能が提供されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セッションに関する提供機能**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 機能
+      - 説明
+    * - | セキュリティ対策
+      - | セッションハイジャック攻撃等のセッションIDを使用した攻撃への対策機能。
+    * - | ライフサイクル制御
+      - | セッションの生成～破棄までのライフサイクルを制御する機能。
+    * - | タイムアウト制御
+      - | タイムアウトにより、セッションを破棄する機能。
+    * - | 多重ログイン制御
+      - | 同一ユーザーによる多重ログイン時のセッションを制御する機能。
+
+.. _authentication(spring_security)_how_to_use_sessionmanagement:
+
+How to use
+--------------------------------------------------------------------------------
+
+セッションハイジャック攻撃への対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ここではURL Rewriting機能を無効化し、Cookieを使用してセッションIDを連携する方法を説明する。、
+
+Spring SecurityによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring SecurityはURL Rewritingを無効化するための仕組みを提供しており、この機能はデフォルトで適用されている。
+Cookieを使えないクライアントをサポートする必要がある場合は、URL Rewritingを許可するようにBean定義する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http disable-url-rewriting="false"> <!-- falseを指定してURL Rewritingを有効化 -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityのデフォルトでは、\ ``disable-url-rewriting``\ の値は \ ``true``\であるため、URL Rewritingは行われない。
+        | URL Rewritingを有効にする際は、\ ``<sec:http>``\ 要素の \ ``disable-url-rewriting``\ 属性に\ ``false``\ を設定する。
+
+サーブレットコンテナによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Servletの標準仕様の仕組みを使ってセッションをセキュアに扱うことが可能である。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <session-config>
+        <cookie-config>
+            <http-only>true</http-only> <!-- (1)  -->
+        </cookie-config>
+        <tracking-mode>COOKIE</tracking-mode> <!-- (2) -->
+    </session-config>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Cookieに\ ``HttpOnly``\ 属性を付与する場合は、\ ``<http-only>``\ 要素に\ ``true``\ を指定する。
+        | 使用するアプリケーションサーバによっては、デフォルト値が\ ``true``\ になっている。
+    * - | (3)
+      - | URL Rewriting機能を無効化する場合は、\ ``<tracking-mode>``\ 要素に\ ``COOKIE``\ を指定する。
+
+上記の定義例からは省略しているが、\ ``<cookie-config>``\ に \ ``<secure>true</secure>``\を追加することで、 Cookieに\ ``Secure``\ 属性を付与することができる。
+ただし、cookieのsecure化は、\ ``web.xml``\ で指定するのではなく、クライアントとHTTPS通信を行うミドルウェア(SSLアクセラレータやWebサーバーなど)で付与する方法を検討されたい。
+
+実際のシステム開発の現場において、ローカルの開発環境でHTTPSを使うケースはほとんどない。
+また、本番環境においても、HTTPSを使うのはSSLアクセラレータやWebサーバーとの通信までで、アプリケーションサーバへの通信はHTTPで行うケースも少なくない。
+このような環境下で\ ``Secure``\ 属性の指定を\ ``web.xml``\ で行ってしまうと、実行環境毎に\ ``web.xml``\ や\ ``web-fragment.xml``\ を用意することになり、ファイルの管理が煩雑になるため推奨されない。
+
+
+.. _SpringSecuritySessionManagementSetup:
+
+セッション管理機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityのセッション管理機能を適用する方法を説明する。
+Spring Securityのセッション管理機能の処理を使用する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- ommited -->
+        <sec:session-management /> <!-- (1) -->
+        <!-- ommited -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:http>``\ 要素の子要素として\ ``<sec:session-management>``\ 要素を指定する。
+        | \ ``<sec:session-management>``\ 要素を指定すると、セッション管理機能が適用される。
+
+|
+
+セッション固定攻撃への対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、セッション固定攻撃対策として、ログイン成功時にセッションIDを変更するためのオプションを4つ用意している。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッション固定攻撃への対策のオプション**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - オプション
+      - 説明
+    * - | \ ``changeSessionId``\
+      - | Servlet 3.1で追加された\ ``HttpServletRequest#changeSessionId()``\ を使用してセッションIDを変更する。
+        | (これはServlet 3.1以上のコンテナ上でのデフォルトの動作である)
+    * - | \ ``migrateSession``\
+      - | ログイン前に使用していたセッションを破棄し、新たにセッションを作成する。
+        | このオプションを使用すると、ログイン前にセッションに格納されていたオブジェクトは新しいセッションに引き継がれる。
+        | (Servlet 3.0以下のコンテナ上でのデフォルトの動作の動作である)
+    * - | \ ``newSession``\
+      - | このオプションは\ ``migrateSession``\ と同じ方法でセッションIDを変更するが、ログイン前に格納されていたオブジェクトは新しいセッションに引き継がれない。
+    * - | \ ``none``\
+      - | Spring Securityは、セッションIDを変更しない。
+
+デフォルトの動作を変更したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management
+            session-fixation-protection="newSession"/> <!-- (1) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ``<sec:session-management>``\ 要素の\ ``session-fixation-protection``\ 属性にセッション固定攻撃の対策方法を指定する。
+
+.. _SpringSecuritySessionManagementLifecycle:
+
+セッションのライフサイクル制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、リクエストを跨いで認証情報などのオブジェクトを共有するための手段としてHTTPセッションを使用しており、Spring Securityの処理の中でセッションのライフサイクル(セッションの作成と破棄)を制御している。
+
+.. note:: **セッション情報の格納先**
+
+    Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
+
+セッションの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityの処理の中でどのような方針でセッションを作成して利用するかは、以下のオプションから選択することができる。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セッションの作成方針**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - オプション
+      - 説明
+    * - | \ ``always``\
+      - | セッションが存在しない場合は、無条件に新たなセッションを生成する。
+        | このオプションを指定すると、Spring Securityの処理でセッションを使わないケースでもセッションが作成される。
+    * - | \ ``ifRequired``\
+      - | セッションが存在しない場合は、セッションにオブジェクトを格納するタイミングで新たなセッションを作成して利用する。(デフォルトの動作)
+    * - | \ ``never``\
+      - | セッションが存在しない場合は、セッションの生成及び利用は行わない。
+        | ただし、既にセッションが存在している場合はセッションを利用する。
+    * - | \ ``stateless``\
+      - | セッションの有無に関係なく、セッションの生成及び利用は行わない。
+
+デフォルトの振る舞いを変更したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http create-session="stateless"> <!-- (1) -->
+        <!-- ommited -->
+    </sec:http>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | \ (1)
+      - | \ ``<sec:http>``\ 要素の\ ``create-session``\ 属性に、変更したいセッションの作成方針を指定する。
+
+セッションの破棄
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、以下のタイミングでセッションを破棄する。
+
+* ログアウト処理が実行されたタイミング
+* 認証処理が成功したタイミング (セッション固定攻撃対策として\ ``migrateSession``\ 又は\ ``newSession``\ が適用されるとセッションが破棄される)
+
+.. _SpringSecuritySessionManagementTimeout:
+
+セッションタイムアウトの制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+セッションにオブジェクトを格納する場合、適切なセッションタイムアウト値を指定して、一定時間操作がないユーザーとのセッションを自動で破棄するようにするのが一般的である。
+
+セッションタイムアウトの指定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッションタイムアウトは、サーブレットコンテナに対して指定する。
+アプリケーションサーバーによっては、サーバー独自の指定方法を用意しているケースもあるが、ここでは、Servlet標準仕様で定められた指定方法を説明する。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <session-config>
+        <session-timeout>60</session-timeout> <!-- (1) -->
+        <!-- ommited -->
+    </session-config>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<session-timeout>``\ 要素に適切なタイムアウト値(分単位)を指定する。
+        |  タイムアウト値を指定しない場合は、サーブレットコンテナが用意しているデフォルト値が適用される。
+        | また、0以下の値を指定するとサーブレットコンテナのセッションタイム機能が無効化される。
+
+.. _SpringSecuritySessionDetectInvalidSession:
+
+無効なセッションを使ったリクエストの検知
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、無効なセッションを使ったリクエストを検知する機能を提供している。
+無効なセッションとして扱われるリクエストの大部分は、セッションタイムアウト後のリクエストである。
+デフォルトではこの機能は無効になっているが、以下のようなbean定義を行うことで有効化することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management
+            invalid-session-url="/error/invalidSession"/>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:session-management>``\ 要素の\ ``invalid-session-url``\ 属性に、無効なセッションを使ったリクエストを検知した際のリダイレクト先のパスを指定する。
+
+除外パスの指定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+無効なセッションを使ったリクエストを検知する機能を有効にすると、Spring Securityのサーブレットフィルタを通過するすべてのリクエストに対してチェックが行われる。
+そのため、セッションが無効な状態でアクセスしても問題がないページにアクセスした場合もチェックが行われる。
+
+この動作を変更したい場合は、チェック対象から除外したいパスに対して個別にbean定義を行うことで実現することが可能である。
+例として、トップページを開くためのパス(\ ``"/"``\ )を除外パスに指定したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <sec:http pattern="/"> <!-- (2) -->
+        <sec:session-management />
+    </sec:http>
+
+    <!-- (3) -->
+    <sec:http>
+        <!-- ommited -->
+        <sec:session-management
+                invalid-session-url="/error/invalidSession"/>
+        <!-- ommited -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | トップページを開くためのパス(\ ``"/"``\ )に適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を新たに追加する。
+    * - | (2)
+      - | (1)の\ ``<sec:http>``\ 要素を使って生成した\ ``SecurityFilterChain``\ を適用するパスパターンを指定する。
+        | 指定可能なパスパターンはAnt形式のパス表記と正規表現の２つの形式であり、デフォルトではAnt形式のパスとして扱われる。
+        | また、パスパターンではなく\ ``RequestMatcher``\ オブジェクトを直接指定することも可能である。
+    * - | (3)
+      - | 個別定義していないパスに適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を定義する。
+        | この定義は、個別定義用の\ ``<sec:http>``\ 要素より下に定義すること。
+        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
+
+|
+
+.. _SpringSecuritySessionManagementConcurrency:
+
+多重ログインの制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、同じユーザー名(ログインID)を使った多重ログインを制御する機能を提供している。
+デフォルトではこの機能は無効になってるが、:ref:`SpringSecurityHowToUseSessionManagementConcurrency` を行うことで有効化することができる。
+
+.. warning:: **多重ログイン制御における制約**
+
+    Spring Securityが提供しているデフォルト実装では、ユーザー毎のセッション情報をアプリケーションサーバーのメモリ内で管理しているため、以下の2つの制約がある。
+
+    ひとつめの制約として、複数のアプリケーションサーバーを同時に起動するシステムでは、デフォルト実装を利用することができないことが挙げられる。
+    複数のアプリケーションサーバーを同時に使用する場合は、ユーザー毎のセッション情報をデータベースやキーバリューストア(キャッシュサーバー)などの共有領域で管理する実装クラスの作成が必要になる。
+
+    ふたつめの制約は、アプリケーションサーバーを停止または再起動時した際に、セッション情報が復元されると、正常動作しない可能性があるという点である。
+    使用するアプリケーションサーバーによっては、停止または再起動時のセッション状態を復元する機能をもっているため、実際のセッション状態とSpring Securityが管理しているセッション情報に不整合が生じることになる。
+    このような不整合が生まれる可能性がある場合は、以下のいずれかの対応が必要になる。
+
+    * アプリケーションサーバ側のセッション状態が復元されないようにする。
+    * Spring Security側のセッション情報を復元する仕組みを実装する。
+    * HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納する。
+
+本節では、Spring Securityのデフォルト実装を使用する方法を紹介する。
+Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
+ただし、ここで紹介する方法は **上記Warningの制約が残っている実装方法であるため** 、適用する際は注意されたい。
+
+.. Todo::
+   インメモリを使用しない実装方法に関しては、今後追加予定である。
+
+.. _SpringSecurityHowToUseSessionManagementConcurrency:
+
+セッションのライフサイクル検知の有効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+多重ログインを制御する機能は、:ref:`セッションのライフサイクル(セッションの生成と破棄)を検知する仕組み<SpringSecuritySessionManagementLifecycle>` を利用してユーザー毎のセッション状態を管理している。
+このため、多重ログインの制御機能を使用する際は、Spring Securityから提供されている\ ``HttpSessionEventPublisher``\ クラスをサーブレットコンテナに登録する必要がある。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <listener>
+        <!-- (1) -->
+        <listener-class>
+            org.springframework.security.web.session.HttpSessionEventPublisher
+        </listener-class>
+    </listener>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | サーブレットリスナとして\ ``HttpSessionEventPublisher``\ を登録する。
+
+多重ログインの禁止(先勝ち)
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、認証エラーを発生させて多重ログインを防ぐ場合は、以下のようなbean定義を行う。
+
+* bean定義ファイルの定義例
+
+.. code-block:: xml
+
+    <sec:session-management>
+        <sec:concurrency-control
+                max-sessions="1"
+                error-if-maximum-exceeded="true"/> <!-- (1) (2) -->
+    </sec:session-management>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - \ ``<sec:concurrency-control>``\ 要素の\ ``max-sessions``\ 属性に、同時にログイン
+        を許可するセッション数を指定する。
+        多重ログインを防ぎたい場合は、通常\ ``1``\ を指定する。
+    * - \ (2)
+      - \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、
+        同時にログインできるセッション数を超えた時の動作を指定する。
+        既にログインしているユーザーを有効なユーザーとして扱う場合は、\ ``true``\
+        を指定する。
+
+多重ログインの禁止(後勝ち)
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、
+既にログインしているユーザーを無効化することで多重ログインを防ぐ場合は、
+以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management>
+        <sec:concurrency-control
+                max-sessions="1"
+                error-if-maximum-exceeded="false"
+                expired-url="/error/expire"/> <!-- (1) (2) -->
+    </sec:session-management>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、同時にログインできるセッション数を超えた時の動作を指定する。
+        | 新たにログインしたユーザーを有効なユーザーとして扱う場合は、\ ``false``\ を指定する。
+    * - | (2)
+      - | \ ``<sec:concurrency-control>``\ 要素の\ ``expired-url``\ 属性に、無効化されたユーザーからのリクエストを検知した際のリダイレクト先のパスを指定する。
+        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/SpringSecurity.rst b/source/Security/SpringSecurity.rst
index b56fc01001..5380ac4b02 100755
--- a/source/Security/SpringSecurity.rst
+++ b/source/Security/SpringSecurity.rst
@@ -1,568 +1,568 @@
-.. _SpringSecurityOverview:
-
-Spring Security概要
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-
-Spring Securityは、アプリケーションにセキュリティ対策機能を実装する際に使用するフレームワークである。 
-Spring Securityはスタンドアロンなアプリケーションでも利用できるが、サーブレットコンテナにデプロイするWebアプリケーションに対してセキュリティ対策を行う際に利用するのが一般的である。
-本章では、Spring Securityが提供する機能のうち、一般的なWebアプリケーションでの利用頻度が高いと思われる機能にしぼって説明する。
-
-.. tip:: **ガイドラインで紹介していない機能**
-
-    Spring Securityは、本ガイドラインで紹介していない機能も多く提供している。
-    Spring Securityが提供するすべての機能を知りたい場合は、\ `Spring Security Reference <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
-
-.. note:: **Spring Securityのバージョン**
-
-    本ガイドラインでは、Spring Securityのバージョンは4.0以上を使用することを前提としている。
-    Spring Securityが4.0にバージョンアップするにあたり、様々な変更が適用されており、以降で記述されるサンプルについても、Spring Security 4を使用したサンプルとなっている。
-
-    変更内容については\ `Migrating from Spring Security 3.x to 4.x (XML Configuration) <http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-xml.html>`_\ を参照されたい。
-
-.. _SpringSecurityFunctionalities:
-
-Spring Securityの機能
---------------------------------------------------------------------------------
-
-セキュリティ対策の基本機能
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring Securityは、セキュリティ対策の基本機能として以下の機能を提供している。
-
-\
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **セキュリティ対策の基本機能**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - 機能
-      - 説明
-    * - :ref:`認証機能<SpringSecurityAuthentication>` 
-      - アプリケーションを利用するユーザーの正当性を確認する機能。
-    * - :ref:`認可機能<SpringSecurityAuthorization>`
-      - アプリケーションが提供するリソースや処理に対してアクセスを制御する機能。
-
-|
-
-セキュリティ対策の強化機能
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring Securityでは認証と認可という基本的な機能に加え、Webアプリケーションのセキュリティを強化するための機能をいくつか提供している。
-
-\
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **セキュリティ対策の強化機能**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - 機能
-      - 説明
-    * - :ref:`セッション管理機能<SpringSecuritySessionManagement>` 
-      - セッションハイジャック攻撃やセッション固定攻撃からユーザーを守る機能、
-        セッションのライフサイクル(生成、破棄、タイムアウト)を制御するための機能。
-    * - :ref:`CSRF対策機能<SpringSecurityCSRF>`
-      - クロスサイトリクエストフォージェリ(CSRF)攻撃からユーザーを守るための機能。
-    * - :ref:`セキュリティヘッダ出力機能<SpringSecurityLinkageWithBrowser>`
-      - Webブラウザのセキュリティ対策機能と連携し、ブラウザの機能を悪用した攻撃からユーザーを守るための機能。
-
-|
-
-.. _SpringSecurityArchitecture:
-
-Spring Securityのアーキテクチャ
---------------------------------------------------------------------------------
-各機能の詳細な説明を行う前に、Spring Securityのアーキテクチャ概要とSpring Securityを構成する主要なコンポーネントの役割を説明する。
-
-.. note::
-
-    ここで説明する内容は、Spring Securityが提供するデフォルトの動作をそのまま利用する場合や、
-    Spring Securityのコンフィギュレーションをサポートする仕組みを利用する場合は、開発者が直接意識する必要ない。
-    そのため、まず各機能の使い方を知りたい場合は、本節を読み飛ばしても問題はない。
-    
-    ただし、ここで説明する内容は、Spring Securityのデフォルトの動作をカスタマイズする際に必要になるので、
-    アプリケーションのアーキテクトは一読しておくことを推奨する。
-
-|
-
-Spring Securityのモジュール
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-まずフレームワークスタックとなっているSpring Securityの提供モジュールを紹介する。
-
-フレームワークスタックモジュール群
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-フレームワークスタックモジュールは、以下の通りである。
-本ガイドラインでもこれらのモジュールを使用してセキュリティ対策を行う方法について説明する。
-
-\
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **フレームワークスタックモジュール群**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - モジュール名
-      - 説明
-    * - \ ``spring-security-core``\
-      - 認証と認可機能を実現するために必要となるコアなコンポーネントが格納されている。
-        このモジュールに含まれるコンポーネントは、スタンドアロン環境で実行するアプリケーションでも使用することができる。
-    * - \ ``spring-security-web``\
-      - Webアプリケーションのセキュリティ対策を実現するために必要となるコンポーネントが格納されている。
-        このモジュールに含まれるコンポーネントは、Web層(サーブレットAPIなど)に依存する処理を行う。
-    * - \ ``spring-security-config``\
-      - 各モジュールから提供されているコンポーネントのセットアップをサポートするためのコンポーネント(コンフィギュレーションをサポートするクラスやXMLネームスペースを解析するクラスなど)が格納されている。
-        このモジュールを使用すると、Spring Securityのbean定義を簡単に行うことができる。
-    * - \ ``spring-security-taglibs``\
-      - 認証情報や認可機能にアクセスするためのJSPタグライブラリが格納されている。
-    * - \ ``spring-security-acl``\
-      - EntityなどのドメインオブジェクトをAccess Control List(ACL)を使用して認可制御するために必要となるコンポーネントが格納されている。
-        本モジュールは依存関係の都合上、フレームワークスタックに含まれているモジュールであるため、本ガイドラインにおいて使用方法の説明は行わない。
-
-要件に合わせて使用するモジュール群
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-フレームワークスタックではないが、一般的に利用される認証方法などをサポートするために、
-以下のようなモジュールも提供されている。
-セキュリティ要件に応じて、これらのモジュールの使用も検討されたい。
-
-\
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **要件に合わせて使用するモジュール群**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - モジュール名
-      - 説明
-    * - \ ``spring-security-remoting``\
-      - JNDI経由でDNSにアクセス、Basic認証が必要なWebサイトにアクセス、Spring Securityを使用してセキュリティ対策しているメソッドにRMI経由でアクセスする際に必要となるコンポーネントが格納されている。
-    * - \ ``spring-security-aspects``\
-      - Javaのメソッドに対して認可機能を適用する際にAspectJの機能を使用する際に必要となるコンポーネントが格納されています。
-        このモジュールは、AOPとしてSpring AOPを使う場合は不要である。
-    * - \ ``spring-security-messaging``\ \ [#fSpringSecurityArchitecture5]_\ 
-      - SpringのWeb Socket機能に対してセキュリティ対策を追加するためのコンポーネントが格納されている。 
-    * - \ ``spring-security-data``\ \ [#fSpringSecurityArchitecture5]_\ 
-      - Spring Dataの機能から認証情報にアクセスできるようにするためのコンポーネントが格納されている。 
-    * - \ ``spring-security-ldap``\
-      - Lightweight Directory Access Protocol(LDAP)を使用した認証を実現するために必要となるコンポーネントが格納されている。
-    * - \ ``spring-security-openid``\
-      - OpenID\ [#fSpringSecurityArchitecture1]_\ を使用した認証を実現するために必要となるコンポーネントが格納されている。
-    * - \ ``spring-security-cas``\
-      - Central Authentication Service(CAS)\ [#fSpringSecurityArchitecture2]_\ と連携するために必要となるコンポーネントが格納されている。
-    * - \ ``spring-security-crypto``\
-      - 暗号化、キーの生成、ハッシュアルゴリズムを利用したパスワードエンコーディングを行うためのコンポーネントが格納されている。
-        このモジュールに含まれるクラスは、フレームワークスタックモジュールである\ ``spring-security-core``\にも含まれている。
-
-テスト用のモジュール
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Spring Security 4.0からはテストを支援するためのモジュールが追加されている。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}| 
-.. list-table:: **テスト用のモジュール** 
-    :header-rows: 1 
-    :widths: 25 75 
-  
-    * - モジュール名 
-      - 説明 
-    * - \ ``spring-security-test``\ \ [#fSpringSecurityArchitecture5]_\ 
-      - Spring Securityに依存しているクラスのテストを支援するためのコンポーネントが格納されている。 
-        このモジュールを使用すると、JUnitテスト時に必要となる認証情報を簡単にセットアップすることができる。 
-        また、Spring MVCのテスト用コンポーネント(\ ``MockMvc``\ )と連携して使用するコンポーネントも含まれている。 
-
-要件に合わせて利用する関連モジュール群
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-また、いくつかの関連モジュールも提供されている。
-
-.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
-.. list-table:: **要件に合わせて利用する主な関連モジュール群**
-    :header-rows: 1
-    :widths: 25 75
-
-    * - モジュール名
-      - 説明
-    * - \ ``spring-security-oauth2``\ \ [#fSpringSecurityArchitecture3]_\
-      - OAuth 2.0\ [#fSpringSecurityArchitecture4]_\ の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
-    * - \ ``spring-security-oauth``\ \ [#fSpringSecurityArchitecture3]_\
-      - OAuth 1.0の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
-
-|
-
-.. [#fSpringSecurityArchitecture1] OpenIDは、簡単に言うと「1つのIDで複数のサイトにログインできるようする」ための仕組みである。
-.. [#fSpringSecurityArchitecture2] CASは、OSSとして提供されているシングルサインオン用のサーバーコンポーネントである。詳細は https://www.apereo.org/cas を参照されたい。
-.. [#fSpringSecurityArchitecture3] 詳細は http://projects.spring.io/spring-security-oauth/ を参照されたい。
-.. [#fSpringSecurityArchitecture4] OAuth 2.0は、OAuth 1.0が抱えていた課題(署名と認証フローの複雑さ、モバイルやデスクトップのクライアントアプリの未対応など)を改善したバージョンで、OAuth 1.0との後方互換性はない。
-.. [#fSpringSecurityArchitecture5] Spring Security 4.0から追加されたモジュールである。
-
-|
-
-.. _SpringSecurityProcess:
-
-フレームワーク処理
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-Spring Securityは、サーブレットフィルタの仕組みを使用してWebアプリケーションのセキュリティ対策を行うアーキテクチャを採用しており、以下のような流れで処理を実行している。
-
-.. figure:: ./images_SpringSecurity/Architecture.png
-    :width: 100%
-
-    **Spring Securityのフレームワークアーキテクチャ**
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - \ (1)
-      - クライアントは、Webアプリケーションに対してリクエストを送る。
-    * - \ (2)
-      - Spring Securityの\ ``FilterChainProxy``\ クラス(サーブレットフィルタ)がリクエストを受け取り、
-        \ ``HttpFirewall``\ インタフェースのメソッドを呼び出して\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込む。
-    * - \ (3)
-      - \ ``FilterChainProxy``\ クラスは、Spring Securityが提供しているセキュリティ対策用のSecurity Filter(サーブレットフィルタ)クラスに処理を委譲する。
-    * - \ (4)
-      - Security Filterは複数のクラスで構成されており、サーブレットフィルタの処理が正常に終了すると後続のサーブレットフィルタが呼び出される。
-    * - \ (5)
-      - 最後のSecurity Filterの処理が正常に終了した場合、後続処理(サーブレットフィルタやサーブレットなど)を呼びだし、Webアプリケーション内のリソースへアクセスする。
-    * - \ (6)
-      - \ ``FilterChainProxy``\ クラスは、Webアプリケーションから返却されたリソースをクライアントへレスポンスする。
-
-|
-
-Webアプリケーション向けのフレームワーク処理を構成する主要なコンポーネントは以下の通りである。
-詳細は \ `Spring Security Reference -The Security Filter Chain- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
-
-
-FilterChainProxy
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``FilterChainProxy``\ クラスは、Webアプリケーション向けのフレームワーク処理のエントリーポイントとなるサーブレットフィルタクラスである。
-このクラスはフレームワーク処理の全体の流れを制御するクラスであり、具体的なセキュリティ対策処理はSecurity Filterに委譲している。
-
-HttpFirewall
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``HttpFirewall``\ インタフェースは、\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込むためのインタフェースである。
-デフォルトでは、\ ``DefaultHttpFirewall``\ クラスが使用され、ディレクトリトラバーサル攻撃やHTTPレスポンス分割攻撃に対するチェックなどが実装されている。
-
-SecurityFilterChain
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-\ ``SecurityFilterChain``\ インタフェースは、\ ``FilterChainProxy``\ が受け取ったリクエストに対して、適用するSecurity Filterのリストを管理するためのインタフェースである。
-デフォルトでは\ ``DefaultSecurityFilterChain``\ クラスが使用され、適用するSecurity Filterのリストを、リクエストURLのパターン毎に管理する。
-
-たとえば、以下のようなbean定義を行うと、URLに応じて異なる内容のセキュリティ対策を適用することができる。
-
-* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <sec:http pattern="/api/**">
-        <!-- ... -->
-    </sec:http>
-
-    <sec:http pattern="/ui/**">
-        <!-- ... -->
-    </sec:http>
-
-Security Filter
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-Security Filterクラスは、フレームワーク機能やセキュリティ対策機能を実現する上で必要となる処理を提供するサーブレットフィルタクラスである。
-
-Spring Securityは、複数のSecurity Filterを連鎖させることでWebアプリケーションのセキュリティ対策を行う仕組みになっている。
-ここでは、認証と認可機能を実現するために必要となるコアなクラスを紹介する。
-詳細は \ `Spring Security Reference -Core Security Filters- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#core-web-filters>`_\ を参照されたい。
-
-.. _SpringSecurityTableSecurityFilter:
-
-.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
-.. list-table:: **コアなSecurity Filter**
-    :header-rows: 1
-    :widths: 35 65
-
-    * - クラス名
-      - 説明
-    * - \ ``SecurityContextPersistenceFilter``\
-      - 認証情報をリクエストを跨いで共有するための処理を提供するクラス。
-        デフォルトの実装では、\ ``HttpSession``\ に認証情報を格納することで、リクエストをまたいで認証情報を共有している。
-    * - \ ``UsernamePasswordAuthenticationFilter``\
-      - リクエストパラメータで指定されたユーザー名とパスワードを使用して認証処理を行うクラス。
-        フォーム認証を行う際に使用する。
-    * - \ ``LogoutFilter``\
-      - ログアウト処理を行うクラス。
-    * - \ ``FilterSecurityInterceptor``\
-      - HTTPリクエスト(\ ``HttpServletRequest``\ )に対して認可処理を実行するためのクラス。
-    * - \ ``ExceptionTranslationFilter``\
-      - \ ``FilterSecurityInterceptor``\ で発生した例外をハンドリングし、クライアントへ返却するレスポンスを制御するクラス。
-        デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、
-        認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
-
-|
-
-.. _SpringSecuritySetup:
-
-
-Spring Securityのセットアップ
---------------------------------------------------------------------------------
-
-WebアプリケーションにSpring Securityを適用するためのセットアップ方法について説明する。
-
-ここでは、WebアプリケーションにSpring Securityを適用し、Spring Securityが提供しているデフォルトのログイン画面を表示させる最もシンプルなセットアップ方法を説明する。
-実際のアプリケーション開発で必要となるカスタマイズ方法や拡張方法については、次節以降で順次説明する。
-
-.. note::
-
-    開発プロジェクトを\ `ブランンクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ から作成すると、ここで説明する各設定はセットアップ済みの状態になっている。
-    開発プロジェクトの作成方法については、「:doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`」を参照されたい。
-
-|
-
-.. _SpringSecuritySetupDependency:
-
-依存ライブラリの適用
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-まず、Spring Securityを依存関係として使用している共通ライブラリを適用する。
-Spring Securityと共通ライブラリの関連については、:ref:`frameworkstack_common_library` を参照されたい。
-
-本ガイドラインでは、Mavenを使って開発プロジェクトを作成していることを前提とする。
-
-* xxx-domain/pom.xmlの設定例
-
-.. code-block:: xml
-
-    <dependency>
-        <groupId>org.terasoluna.gfw</groupId>
-        <artifactId>terasoluna-gfw-security-core</artifactId>  <!-- (1) -->
-    </dependency>
-
-* xxx-web/pom.xmlの設定例
-
-.. code-block:: xml
-
-    <dependency>
-        <groupId>org.terasoluna.gfw</groupId>
-        <artifactId>terasoluna-gfw-security-web</artifactId>  <!-- (2) -->
-    </dependency>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - 項番
-      - 説明
-    * - \ (1)
-      - ドメイン層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-coreをdependencyに追加する。
-    * - \ (2)
-      - アプリケーション層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-webをdependencyに追加する。
-
-
-.. note::
-
-    本ガイドラインでは、Spring IO Platformを使用してライブラリのバージョンを管理する前提で記載しているため、\ ``<version>``\ 要素は省略している。
-
-|
-
-bean定義ファイルの作成
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring Securityのコンポーネントをbean定義するため、以下のようなXMLファイルを作成する。（`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\より抜粋）
-
-* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
-
-.. code-block:: xml
-
-    <?xml version="1.0" encoding="UTF-8"?>
-    <beans xmlns="http://www.springframework.org/schema/beans"
-           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-           xmlns:sec="http://www.springframework.org/schema/security"
-           xsi:schemaLocation="
-            http://www.springframework.org/schema/beans
-            http://www.springframework.org/schema/beans/spring-beans.xsd
-            http://www.springframework.org/schema/security
-            http://www.springframework.org/schema/security/spring-security.xsd
-           "> <!-- (1) -->
-
-        <sec:http> <!-- (2) -->
-            <sec:form-login /> <!-- (3) -->
-            <sec:logout /> <!-- (4) -->
-            <sec:access-denied-handler ref="accessDeniedHandler"/> <!-- (5) -->
-            <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/> <!-- (6) -->
-            <sec:session-management /> <!-- (7) -->
-        </sec:http>
-
-        <sec:authentication-manager /> <!-- (8) -->
-
-        <bean id="accessDeniedHandler" class="org.springframework.security.web.access.DelegatingAccessDeniedHandler"> <!-- (9) -->
-            <!-- omitted -->
-        </bean>
-
-        <bean id="userIdMDCPutFilter" class="org.terasoluna.gfw.security.web.logging.UserIdMDCPutFilter">  <!-- (10) -->
-            <!-- omitted -->
-        </bean>
-
-    </beans>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-
-    * - 項番
-      - 説明
-    * - \ (1)
-      - Spring Securityから提供されているXMLネームスペースを有効する。
-        上記例では、\ ``sec``\ という名前を割り当てている。
-        XMLネームスペースを使用すると、Spring Securityのコンポーネントのbean定義を簡単に行うことができる。
-    * - \ (2)
-      - \ ``<sec:http>``\ タグを定義する。
-        \ ``<sec:http>``\ タグを定義すると、Spring Securityを利用するために必要となるコンポーネントのbean定義が自動的に行われる。
-    * - \ (3)
-      - \ ``<sec:form-login>``\ タグを定義し、フォーム認証を使用したログインに関する設定行う。
-        \ 詳細は :ref:`form-login` を参照されたい
-    * - \ (4)
-      - \ ``<sec:logout>``\ タグ を定義し、ログアウトに関する設定を行う。
-        \ 詳細は :ref:`SpringSecurityAuthenticationLogout` を参照されたい。
-    * - \ (5)
-      - \ ``<sec:access-denied-handler>``\ タグを定義し、アクセスエラー時の制御を行うための設定を定義する。
-        \ 詳細は :ref:`SpringSecurityAuthorizationAccessDeniedHandler` 、 :ref:`SpringSecurityAuthorizationOnError` を参照されたい。
-    * - \ (6)
-      - ログ出力するユーザ情報をMDCに格納するための共通ライブラリのフィルタを定義する。
-    * - \ (7)
-      - \ ``<sec:session-management>``\ タグ を定義し、セッション管理に関する設定を行う。
-        \ 詳細は :ref:`SpringSecuritySessionManagement` を参照されたい
-    * - \ (8)
-      - \ ``<sec:authentication-manager>``\ タグを定義して、認証機能用のコンポーネントをbean定義する。
-        このタグを定義しておかないとサーバ起動時にエラーが発生する。
-    * - \ (9)
-      - \ アクセスエラー時のエラーハンドリングを行うコンポーネントをbean定義する。
-    * - \ (10)
-      - \ ログ出力するユーザ情報をMDCにする共通ライブラリのコンポーネントをbean定義する。
-
-
-.. note:: **静的リソースへのアクセス**
-
-    JSPでCSS等の静的リソースを使用している場合は、それらを格納するフォルダにアクセス権を付与する必要がある。
-    詳細は、:ref:`SpringSecurityNotApply` を参照されたい。 
-
-|
-
-作成したbean定義ファイルを使用してSpringのDIコンテナを生成するように定義する。
-
-* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <listener>
-        <listener-class>
-            org.springframework.web.context.ContextLoaderListener
-        </listener-class>
-    </listener>
-    <!-- (2) -->
-    <context-param>
-        <param-name>contextConfigLocation</param-name>
-        <param-value>
-            classpath*:META-INF/spring/applicationContext.xml
-            classpath*:META-INF/spring/spring-security.xml
-        </param-value>
-    </context-param>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - \(1)
-     -  サーブレットコンテナのリスナクラスとして、\ ``ContextLoaderListener``\ クラスを指定する。
-   * - \(2)
-     -  サーブレットコンテナの\ ``contextClass``\ パラメータに、\ ``applicationContext.xml``\ に加えて、Spring Security用のbean定義ファイルを追加する。
-
-|
-
-サーブレットフィルタの設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-最後に、Spring Securityが提供しているサーブレットフィルタクラス(\ ``FilterChainProxy``\) をサーブレットコンテナに登録する。
-
-* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <filter>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <filter-class>
-            org.springframework.web.filter.DelegatingFilterProxy
-        </filter-class>
-    </filter>
-    <!-- (2) -->
-    <filter-mapping>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-   
-   * - 項番
-     - 説明
-   * - \ (1)
-     - Spring Frameworkから提供されている\ ``DelegatingFilterProxy``\ を使用して、
-       SpringのDIコンテナで管理されているbean(\ ``FilterChainProxy``\ )をサーブレットコンテナに登録する。
-       サーブレットフィルタの名前には、SpringのDIコンテナで管理されているbeanのbean名(\ ``springSecurityFilterChain``\ )を指定する。
-   * - \ (2)
-     -  Spring Securityを適用するURLのパターンを指定する。
-        上記例では、すべてのリクエストに対してSpring Securityを適用する。
-
-|
-
-.. _SpringSecurityNotApply:
-
-セキュリティ対策を適用しないため設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-セキュリティ対策が不要なリソースのパス(cssファイルやimageファイルにアクセスするためのパスなど)に対しては、
-\ ``<sec:http>``\ タグを使用して、Spring Securityのセキュリティ機能(Security Filter)が適用されないように制御することができる。
-
-* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
-
-.. code-block:: xml
-  
-    <sec:http pattern="/resources/**" security="none"/>  <!-- (1) (2) -->
-    <sec:http>
-        <!-- omitted -->
-    </sec:http>
-  
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-  
-    * - 項番
-      - 説明
-    * - | (1)
-      - | \ ``pattern``\ 属性にセキュリティ機能を適用しないパスのパターンを指定する。
-    * - | (2)
-      - | \ ``security``\ 属性に\ ``none``\ を指定する。
-        | \ ``none``\ を指定すると、Spring Securityのセキュリティ機能(Security Filter)が適用されない。
-
-.. raw:: latex
-
-   \newpage
-
+.. _SpringSecurityOverview:
+
+Spring Security概要
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+
+Spring Securityは、アプリケーションにセキュリティ対策機能を実装する際に使用するフレームワークである。 
+Spring Securityはスタンドアロンなアプリケーションでも利用できるが、サーブレットコンテナにデプロイするWebアプリケーションに対してセキュリティ対策を行う際に利用するのが一般的である。
+本章では、Spring Securityが提供する機能のうち、一般的なWebアプリケーションでの利用頻度が高いと思われる機能にしぼって説明する。
+
+.. tip:: **ガイドラインで紹介していない機能**
+
+    Spring Securityは、本ガイドラインで紹介していない機能も多く提供している。
+    Spring Securityが提供するすべての機能を知りたい場合は、\ `Spring Security Reference <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
+
+.. note:: **Spring Securityのバージョン**
+
+    本ガイドラインでは、Spring Securityのバージョンは4.0以上を使用することを前提としている。
+    Spring Securityが4.0にバージョンアップするにあたり、様々な変更が適用されており、以降で記述されるサンプルについても、Spring Security 4を使用したサンプルとなっている。
+
+    変更内容については\ `Migrating from Spring Security 3.x to 4.x (XML Configuration) <http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-xml.html>`_\ を参照されたい。
+
+.. _SpringSecurityFunctionalities:
+
+Spring Securityの機能
+--------------------------------------------------------------------------------
+
+セキュリティ対策の基本機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring Securityは、セキュリティ対策の基本機能として以下の機能を提供している。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セキュリティ対策の基本機能**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 機能
+      - 説明
+    * - :ref:`認証機能<SpringSecurityAuthentication>` 
+      - アプリケーションを利用するユーザーの正当性を確認する機能。
+    * - :ref:`認可機能<SpringSecurityAuthorization>`
+      - アプリケーションが提供するリソースや処理に対してアクセスを制御する機能。
+
+|
+
+セキュリティ対策の強化機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring Securityでは認証と認可という基本的な機能に加え、Webアプリケーションのセキュリティを強化するための機能をいくつか提供している。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セキュリティ対策の強化機能**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 機能
+      - 説明
+    * - :ref:`セッション管理機能<SpringSecuritySessionManagement>` 
+      - セッションハイジャック攻撃やセッション固定攻撃からユーザーを守る機能、
+        セッションのライフサイクル(生成、破棄、タイムアウト)を制御するための機能。
+    * - :ref:`CSRF対策機能<SpringSecurityCSRF>`
+      - クロスサイトリクエストフォージェリ(CSRF)攻撃からユーザーを守るための機能。
+    * - :ref:`セキュリティヘッダ出力機能<SpringSecurityLinkageWithBrowser>`
+      - Webブラウザのセキュリティ対策機能と連携し、ブラウザの機能を悪用した攻撃からユーザーを守るための機能。
+
+|
+
+.. _SpringSecurityArchitecture:
+
+Spring Securityのアーキテクチャ
+--------------------------------------------------------------------------------
+各機能の詳細な説明を行う前に、Spring Securityのアーキテクチャ概要とSpring Securityを構成する主要なコンポーネントの役割を説明する。
+
+.. note::
+
+    ここで説明する内容は、Spring Securityが提供するデフォルトの動作をそのまま利用する場合や、
+    Spring Securityのコンフィギュレーションをサポートする仕組みを利用する場合は、開発者が直接意識する必要ない。
+    そのため、まず各機能の使い方を知りたい場合は、本節を読み飛ばしても問題はない。
+    
+    ただし、ここで説明する内容は、Spring Securityのデフォルトの動作をカスタマイズする際に必要になるので、
+    アプリケーションのアーキテクトは一読しておくことを推奨する。
+
+|
+
+Spring Securityのモジュール
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+まずフレームワークスタックとなっているSpring Securityの提供モジュールを紹介する。
+
+フレームワークスタックモジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+フレームワークスタックモジュールは、以下の通りである。
+本ガイドラインでもこれらのモジュールを使用してセキュリティ対策を行う方法について説明する。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **フレームワークスタックモジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-core``\
+      - 認証と認可機能を実現するために必要となるコアなコンポーネントが格納されている。
+        このモジュールに含まれるコンポーネントは、スタンドアロン環境で実行するアプリケーションでも使用することができる。
+    * - \ ``spring-security-web``\
+      - Webアプリケーションのセキュリティ対策を実現するために必要となるコンポーネントが格納されている。
+        このモジュールに含まれるコンポーネントは、Web層(サーブレットAPIなど)に依存する処理を行う。
+    * - \ ``spring-security-config``\
+      - 各モジュールから提供されているコンポーネントのセットアップをサポートするためのコンポーネント(コンフィギュレーションをサポートするクラスやXMLネームスペースを解析するクラスなど)が格納されている。
+        このモジュールを使用すると、Spring Securityのbean定義を簡単に行うことができる。
+    * - \ ``spring-security-taglibs``\
+      - 認証情報や認可機能にアクセスするためのJSPタグライブラリが格納されている。
+    * - \ ``spring-security-acl``\
+      - EntityなどのドメインオブジェクトをAccess Control List(ACL)を使用して認可制御するために必要となるコンポーネントが格納されている。
+        本モジュールは依存関係の都合上、フレームワークスタックに含まれているモジュールであるため、本ガイドラインにおいて使用方法の説明は行わない。
+
+要件に合わせて使用するモジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+フレームワークスタックではないが、一般的に利用される認証方法などをサポートするために、
+以下のようなモジュールも提供されている。
+セキュリティ要件に応じて、これらのモジュールの使用も検討されたい。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **要件に合わせて使用するモジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-remoting``\
+      - JNDI経由でDNSにアクセス、Basic認証が必要なWebサイトにアクセス、Spring Securityを使用してセキュリティ対策しているメソッドにRMI経由でアクセスする際に必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-aspects``\
+      - Javaのメソッドに対して認可機能を適用する際にAspectJの機能を使用する際に必要となるコンポーネントが格納されています。
+        このモジュールは、AOPとしてSpring AOPを使う場合は不要である。
+    * - \ ``spring-security-messaging``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - SpringのWeb Socket機能に対してセキュリティ対策を追加するためのコンポーネントが格納されている。 
+    * - \ ``spring-security-data``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - Spring Dataの機能から認証情報にアクセスできるようにするためのコンポーネントが格納されている。 
+    * - \ ``spring-security-ldap``\
+      - Lightweight Directory Access Protocol(LDAP)を使用した認証を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-openid``\
+      - OpenID\ [#fSpringSecurityArchitecture1]_\ を使用した認証を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-cas``\
+      - Central Authentication Service(CAS)\ [#fSpringSecurityArchitecture2]_\ と連携するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-crypto``\
+      - 暗号化、キーの生成、ハッシュアルゴリズムを利用したパスワードエンコーディングを行うためのコンポーネントが格納されている。
+        このモジュールに含まれるクラスは、フレームワークスタックモジュールである\ ``spring-security-core``\にも含まれている。
+
+テスト用のモジュール
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Security 4.0からはテストを支援するためのモジュールが追加されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}| 
+.. list-table:: **テスト用のモジュール** 
+    :header-rows: 1 
+    :widths: 25 75 
+  
+    * - モジュール名 
+      - 説明 
+    * - \ ``spring-security-test``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - Spring Securityに依存しているクラスのテストを支援するためのコンポーネントが格納されている。 
+        このモジュールを使用すると、JUnitテスト時に必要となる認証情報を簡単にセットアップすることができる。 
+        また、Spring MVCのテスト用コンポーネント(\ ``MockMvc``\ )と連携して使用するコンポーネントも含まれている。 
+
+要件に合わせて利用する関連モジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+また、いくつかの関連モジュールも提供されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **要件に合わせて利用する主な関連モジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-oauth2``\ \ [#fSpringSecurityArchitecture3]_\
+      - OAuth 2.0\ [#fSpringSecurityArchitecture4]_\ の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-oauth``\ \ [#fSpringSecurityArchitecture3]_\
+      - OAuth 1.0の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
+
+|
+
+.. [#fSpringSecurityArchitecture1] OpenIDは、簡単に言うと「1つのIDで複数のサイトにログインできるようする」ための仕組みである。
+.. [#fSpringSecurityArchitecture2] CASは、OSSとして提供されているシングルサインオン用のサーバーコンポーネントである。詳細は https://www.apereo.org/cas を参照されたい。
+.. [#fSpringSecurityArchitecture3] 詳細は http://projects.spring.io/spring-security-oauth/ を参照されたい。
+.. [#fSpringSecurityArchitecture4] OAuth 2.0は、OAuth 1.0が抱えていた課題(署名と認証フローの複雑さ、モバイルやデスクトップのクライアントアプリの未対応など)を改善したバージョンで、OAuth 1.0との後方互換性はない。
+.. [#fSpringSecurityArchitecture5] Spring Security 4.0から追加されたモジュールである。
+
+|
+
+.. _SpringSecurityProcess:
+
+フレームワーク処理
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、サーブレットフィルタの仕組みを使用してWebアプリケーションのセキュリティ対策を行うアーキテクチャを採用しており、以下のような流れで処理を実行している。
+
+.. figure:: ./images_SpringSecurity/Architecture.png
+    :width: 100%
+
+    **Spring Securityのフレームワークアーキテクチャ**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - クライアントは、Webアプリケーションに対してリクエストを送る。
+    * - \ (2)
+      - Spring Securityの\ ``FilterChainProxy``\ クラス(サーブレットフィルタ)がリクエストを受け取り、
+        \ ``HttpFirewall``\ インタフェースのメソッドを呼び出して\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込む。
+    * - \ (3)
+      - \ ``FilterChainProxy``\ クラスは、Spring Securityが提供しているセキュリティ対策用のSecurity Filter(サーブレットフィルタ)クラスに処理を委譲する。
+    * - \ (4)
+      - Security Filterは複数のクラスで構成されており、サーブレットフィルタの処理が正常に終了すると後続のサーブレットフィルタが呼び出される。
+    * - \ (5)
+      - 最後のSecurity Filterの処理が正常に終了した場合、後続処理(サーブレットフィルタやサーブレットなど)を呼びだし、Webアプリケーション内のリソースへアクセスする。
+    * - \ (6)
+      - \ ``FilterChainProxy``\ クラスは、Webアプリケーションから返却されたリソースをクライアントへレスポンスする。
+
+|
+
+Webアプリケーション向けのフレームワーク処理を構成する主要なコンポーネントは以下の通りである。
+詳細は \ `Spring Security Reference -The Security Filter Chain- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
+
+
+FilterChainProxy
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``FilterChainProxy``\ クラスは、Webアプリケーション向けのフレームワーク処理のエントリーポイントとなるサーブレットフィルタクラスである。
+このクラスはフレームワーク処理の全体の流れを制御するクラスであり、具体的なセキュリティ対策処理はSecurity Filterに委譲している。
+
+HttpFirewall
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``HttpFirewall``\ インタフェースは、\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込むためのインタフェースである。
+デフォルトでは、\ ``DefaultHttpFirewall``\ クラスが使用され、ディレクトリトラバーサル攻撃やHTTPレスポンス分割攻撃に対するチェックなどが実装されている。
+
+SecurityFilterChain
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``SecurityFilterChain``\ インタフェースは、\ ``FilterChainProxy``\ が受け取ったリクエストに対して、適用するSecurity Filterのリストを管理するためのインタフェースである。
+デフォルトでは\ ``DefaultSecurityFilterChain``\ クラスが使用され、適用するSecurity Filterのリストを、リクエストURLのパターン毎に管理する。
+
+たとえば、以下のようなbean定義を行うと、URLに応じて異なる内容のセキュリティ対策を適用することができる。
+
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http pattern="/api/**">
+        <!-- ... -->
+    </sec:http>
+
+    <sec:http pattern="/ui/**">
+        <!-- ... -->
+    </sec:http>
+
+Security Filter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Security Filterクラスは、フレームワーク機能やセキュリティ対策機能を実現する上で必要となる処理を提供するサーブレットフィルタクラスである。
+
+Spring Securityは、複数のSecurity Filterを連鎖させることでWebアプリケーションのセキュリティ対策を行う仕組みになっている。
+ここでは、認証と認可機能を実現するために必要となるコアなクラスを紹介する。
+詳細は \ `Spring Security Reference -Core Security Filters- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#core-web-filters>`_\ を参照されたい。
+
+.. _SpringSecurityTableSecurityFilter:
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **コアなSecurity Filter**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - クラス名
+      - 説明
+    * - \ ``SecurityContextPersistenceFilter``\
+      - 認証情報をリクエストを跨いで共有するための処理を提供するクラス。
+        デフォルトの実装では、\ ``HttpSession``\ に認証情報を格納することで、リクエストをまたいで認証情報を共有している。
+    * - \ ``UsernamePasswordAuthenticationFilter``\
+      - リクエストパラメータで指定されたユーザー名とパスワードを使用して認証処理を行うクラス。
+        フォーム認証を行う際に使用する。
+    * - \ ``LogoutFilter``\
+      - ログアウト処理を行うクラス。
+    * - \ ``FilterSecurityInterceptor``\
+      - HTTPリクエスト(\ ``HttpServletRequest``\ )に対して認可処理を実行するためのクラス。
+    * - \ ``ExceptionTranslationFilter``\
+      - \ ``FilterSecurityInterceptor``\ で発生した例外をハンドリングし、クライアントへ返却するレスポンスを制御するクラス。
+        デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、
+        認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
+
+|
+
+.. _SpringSecuritySetup:
+
+
+Spring Securityのセットアップ
+--------------------------------------------------------------------------------
+
+WebアプリケーションにSpring Securityを適用するためのセットアップ方法について説明する。
+
+ここでは、WebアプリケーションにSpring Securityを適用し、Spring Securityが提供しているデフォルトのログイン画面を表示させる最もシンプルなセットアップ方法を説明する。
+実際のアプリケーション開発で必要となるカスタマイズ方法や拡張方法については、次節以降で順次説明する。
+
+.. note::
+
+    開発プロジェクトを\ `ブランンクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ から作成すると、ここで説明する各設定はセットアップ済みの状態になっている。
+    開発プロジェクトの作成方法については、「:doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`」を参照されたい。
+
+|
+
+.. _SpringSecuritySetupDependency:
+
+依存ライブラリの適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+まず、Spring Securityを依存関係として使用している共通ライブラリを適用する。
+Spring Securityと共通ライブラリの関連については、:ref:`frameworkstack_common_library` を参照されたい。
+
+本ガイドラインでは、Mavenを使って開発プロジェクトを作成していることを前提とする。
+
+* xxx-domain/pom.xmlの設定例
+
+.. code-block:: xml
+
+    <dependency>
+        <groupId>org.terasoluna.gfw</groupId>
+        <artifactId>terasoluna-gfw-security-core</artifactId>  <!-- (1) -->
+    </dependency>
+
+* xxx-web/pom.xmlの設定例
+
+.. code-block:: xml
+
+    <dependency>
+        <groupId>org.terasoluna.gfw</groupId>
+        <artifactId>terasoluna-gfw-security-web</artifactId>  <!-- (2) -->
+    </dependency>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - ドメイン層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-coreをdependencyに追加する。
+    * - \ (2)
+      - アプリケーション層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-webをdependencyに追加する。
+
+
+.. note::
+
+    本ガイドラインでは、Spring IO Platformを使用してライブラリのバージョンを管理する前提で記載しているため、\ ``<version>``\ 要素は省略している。
+
+|
+
+bean定義ファイルの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring Securityのコンポーネントをbean定義するため、以下のようなXMLファイルを作成する。（`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\より抜粋）
+
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <beans xmlns="http://www.springframework.org/schema/beans"
+           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xmlns:sec="http://www.springframework.org/schema/security"
+           xsi:schemaLocation="
+            http://www.springframework.org/schema/beans
+            http://www.springframework.org/schema/beans/spring-beans.xsd
+            http://www.springframework.org/schema/security
+            http://www.springframework.org/schema/security/spring-security.xsd
+           "> <!-- (1) -->
+
+        <sec:http> <!-- (2) -->
+            <sec:form-login /> <!-- (3) -->
+            <sec:logout /> <!-- (4) -->
+            <sec:access-denied-handler ref="accessDeniedHandler"/> <!-- (5) -->
+            <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/> <!-- (6) -->
+            <sec:session-management /> <!-- (7) -->
+        </sec:http>
+
+        <sec:authentication-manager /> <!-- (8) -->
+
+        <bean id="accessDeniedHandler" class="org.springframework.security.web.access.DelegatingAccessDeniedHandler"> <!-- (9) -->
+            <!-- omitted -->
+        </bean>
+
+        <bean id="userIdMDCPutFilter" class="org.terasoluna.gfw.security.web.logging.UserIdMDCPutFilter">  <!-- (10) -->
+            <!-- omitted -->
+        </bean>
+
+    </beans>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - Spring Securityから提供されているXMLネームスペースを有効する。
+        上記例では、\ ``sec``\ という名前を割り当てている。
+        XMLネームスペースを使用すると、Spring Securityのコンポーネントのbean定義を簡単に行うことができる。
+    * - \ (2)
+      - \ ``<sec:http>``\ タグを定義する。
+        \ ``<sec:http>``\ タグを定義すると、Spring Securityを利用するために必要となるコンポーネントのbean定義が自動的に行われる。
+    * - \ (3)
+      - \ ``<sec:form-login>``\ タグを定義し、フォーム認証を使用したログインに関する設定行う。
+        \ 詳細は :ref:`form-login` を参照されたい
+    * - \ (4)
+      - \ ``<sec:logout>``\ タグ を定義し、ログアウトに関する設定を行う。
+        \ 詳細は :ref:`SpringSecurityAuthenticationLogout` を参照されたい。
+    * - \ (5)
+      - \ ``<sec:access-denied-handler>``\ タグを定義し、アクセスエラー時の制御を行うための設定を定義する。
+        \ 詳細は :ref:`SpringSecurityAuthorizationAccessDeniedHandler` 、 :ref:`SpringSecurityAuthorizationOnError` を参照されたい。
+    * - \ (6)
+      - ログ出力するユーザ情報をMDCに格納するための共通ライブラリのフィルタを定義する。
+    * - \ (7)
+      - \ ``<sec:session-management>``\ タグ を定義し、セッション管理に関する設定を行う。
+        \ 詳細は :ref:`SpringSecuritySessionManagement` を参照されたい
+    * - \ (8)
+      - \ ``<sec:authentication-manager>``\ タグを定義して、認証機能用のコンポーネントをbean定義する。
+        このタグを定義しておかないとサーバ起動時にエラーが発生する。
+    * - \ (9)
+      - \ アクセスエラー時のエラーハンドリングを行うコンポーネントをbean定義する。
+    * - \ (10)
+      - \ ログ出力するユーザ情報をMDCにする共通ライブラリのコンポーネントをbean定義する。
+
+
+.. note:: **静的リソースへのアクセス**
+
+    JSPでCSS等の静的リソースを使用している場合は、それらを格納するフォルダにアクセス権を付与する必要がある。
+    詳細は、:ref:`SpringSecurityNotApply` を参照されたい。 
+
+|
+
+作成したbean定義ファイルを使用してSpringのDIコンテナを生成するように定義する。
+
+* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <listener>
+        <listener-class>
+            org.springframework.web.context.ContextLoaderListener
+        </listener-class>
+    </listener>
+    <!-- (2) -->
+    <context-param>
+        <param-name>contextConfigLocation</param-name>
+        <param-value>
+            classpath*:META-INF/spring/applicationContext.xml
+            classpath*:META-INF/spring/spring-security.xml
+        </param-value>
+    </context-param>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - \(1)
+     -  サーブレットコンテナのリスナクラスとして、\ ``ContextLoaderListener``\ クラスを指定する。
+   * - \(2)
+     -  サーブレットコンテナの\ ``contextClass``\ パラメータに、\ ``applicationContext.xml``\ に加えて、Spring Security用のbean定義ファイルを追加する。
+
+|
+
+サーブレットフィルタの設定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+最後に、Spring Securityが提供しているサーブレットフィルタクラス(\ ``FilterChainProxy``\) をサーブレットコンテナに登録する。
+
+* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>
+            org.springframework.web.filter.DelegatingFilterProxy
+        </filter-class>
+    </filter>
+    <!-- (2) -->
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+   
+   * - 項番
+     - 説明
+   * - \ (1)
+     - Spring Frameworkから提供されている\ ``DelegatingFilterProxy``\ を使用して、
+       SpringのDIコンテナで管理されているbean(\ ``FilterChainProxy``\ )をサーブレットコンテナに登録する。
+       サーブレットフィルタの名前には、SpringのDIコンテナで管理されているbeanのbean名(\ ``springSecurityFilterChain``\ )を指定する。
+   * - \ (2)
+     -  Spring Securityを適用するURLのパターンを指定する。
+        上記例では、すべてのリクエストに対してSpring Securityを適用する。
+
+|
+
+.. _SpringSecurityNotApply:
+
+セキュリティ対策を適用しないため設定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+セキュリティ対策が不要なリソースのパス(cssファイルやimageファイルにアクセスするためのパスなど)に対しては、
+\ ``<sec:http>``\ タグを使用して、Spring Securityのセキュリティ機能(Security Filter)が適用されないように制御することができる。
+
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+    <sec:http pattern="/resources/**" security="none"/>  <!-- (1) (2) -->
+    <sec:http>
+        <!-- omitted -->
+    </sec:http>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``pattern``\ 属性にセキュリティ機能を適用しないパスのパターンを指定する。
+    * - | (2)
+      - | \ ``security``\ 属性に\ ``none``\ を指定する。
+        | \ ``none``\ を指定すると、Spring Securityのセキュリティ機能(Security Filter)が適用されない。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/XSS.rst b/source/Security/XSS.rst
index fdcd3cc513..6a365cd64f 100755
--- a/source/Security/XSS.rst
+++ b/source/Security/XSS.rst
@@ -1,409 +1,409 @@
-XSS対策
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-.. _SpringSecurityXSS:
-
-Overview
---------------------------------------------------------------------------------
-
-クロスサイトスクリプティング(以下、XSSと略す)について説明する。
-クロスサイトスクリプティングとは、アプリケーションのセキュリティ上の不備を意図的に利用し、サイト間を横断して悪意のあるスクリプトを混入させることである。
-例えば、ウェブアプリケーションが入力したデータ（フォーム入力など）を、適切にエスケープしないまま、HTML上に出力することにより、入力値に存在するタグなどの文字が、そのままHTMLとして解釈される。
-悪意のある値が入力された状態で、スクリプトを起動させることにより、クッキーの改ざんや、クッキーの値を取得することによる、セッションハイジャックなどの攻撃が行えてしまう。
-
-Stored, Reflected XSS Attacks
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-XSS攻撃は、大きく二つのカテゴリに分けられる。
-
-**Stored XSS Attacks**
-
-Stored XSS Attacksとは、悪意のあるコードが、永久的にターゲットサーバ上(データベース等)に格納されていることである。
-ユーザーは、格納されている情報を要求するときに、サーバから悪意のあるスクリプトを取得し、実行してしまう。
-
-**Reflected XSS Attacks**
-
-Reflected attacksとは、リクエストの一部としてサーバに送信された悪意のあるコードが、エラーメッセージ、検索結果、その他いろいろなレスポンスからリフレクションされることである。
-ユーザーが、悪意のあるリンクをクリックするか、特別に細工されたフォームを送信すると、挿入されたコードは、ユーザーのブラウザに、攻撃を反映した結果を返却する。
-その結果、信頼できるサーバからきた値のため、ブラウザは悪意のあるコードを実行してしまう。
-
-Stored XSS Attacks、Reflected XSS Attacksともに、出力値をエスケープすることで防ぐことができる。
-
-How to use
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-ユーザーの入力を、そのまま出力している場合、XSSの脆弱性にさらされている。
-したがって、XSSの脆弱性に対する対抗措置として、HTMLのマークアップ言語で、特定の意味を持つ文字をエスケープする必要がある。
-
-必要に応じて、3種類のエスケープを使い分けること。
-
-エスケープの種類:
-
- * Output Escaping
- * JavaScript Escaping
- * Event handler Escaping
-
-.. _xss_how_to_use_ouput_escaping:
-
-Output Escaping
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-XSSの脆弱性への対応としては、HTML特殊文字をエスケープすることが基本である。
-エスケープが必要なHTML上の特殊文字の例と、エスケープ後の例は、以下の通りである。
-
-.. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 50 50
-
-   * - | エスケープ前
-     - | エスケープ後
-   * - | ``&``
-     - | ``&amp;``
-   * - | ``<``
-     - | ``&lt;``
-   * - | ``>``
-     - | ``&gt;``
-   * - | ``"``
-     - | ``&quot;``
-   * - | ``'``
-     - | ``&#39;``
-
-XSSを防ぐために、文字列として出力するすべての表示項目に、\ ``f:h()``\ を使用すること。
-入力値を、別画面に再出力するアプリケーションを例に、説明する。
-
-出力値をエスケープしない脆弱性のある例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
-
-**出力画面の実装**
-
-.. code-block:: jsp
-
-    <!-- omitted -->
-    <tr>
-        <td>Job</td>
-        <td>${customerForm.job}</td>  <!-- (1) -->
-    </tr>
-    <!-- omitted -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | customerFormのフィールドである、jobをエスケープせず出力している。
-
-入力画面のJobフィールドに、<script>タグを入力する。
-
-.. figure:: ./images_XSS/xss_screen_input_html_tag.png
-   :alt: input_html_tag
-   :width: 80%
-   :align: center
-
-   **Picture - Input HTML Tag**
-
-| <script>タグとして認識され、ダイアログボックスが表示されてしまう。
-
-.. figure:: ./images_XSS/xss_screen_no_escape_result.png
-   :alt: no_escape_result
-   :width: 60%
-   :align: center
-
-   **Picture - No Escape Result**
-
-.. _xss_how_to_use_h_function_example:
-
-出力値をf:h()関数でエスケープする例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-
-**出力画面の実装**
-
-.. code-block:: jsp
-
-    <!-- omitted -->
-    <tr>
-        <td>Job</td>
-        <td>${f:h(customerForm.job)}</td>  <!-- (1) -->
-    </tr>
-    .<!-- omitted -->
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式の\ ``f:h()``\ を使用することにより、エスケープして出力している。
-
-入力画面のJobフィールドに<script>タグを入力する。
-
-.. figure:: ./images_XSS/xss_screen_input_html_tag.png
-   :alt: input_html_tag
-   :width: 80%
-   :align: center
-
-   **Picture - Input HTML Tag**
-
-| 特殊文字がエスケープされることにより、 <script>タグとして認識されず、入力値がそのまま出力される。
-
-.. figure:: ./images_XSS/xss_screen_escape_result.png
-   :alt: escape_result
-   :width: 60%
-   :align: center
-
-   **Picture - Escape Result**
-
-**出力結果**
-
-.. code-block:: jsp
-
-    <!-- omitted -->
-    <tr>
-        <td>Job</td>
-        <td>&lt;script&gt;alert(&quot;XSS Attack&quot;)&lt;/script&gt;</td>
-    </tr>
-    <!-- omitted -->
-
-.. tip:: **java.util.Date継承クラスのフォーマット**
-
-    java.util.Date継承クラスをフォーマットして表示する場合は、JSTLの\ ``<fmt:formatDate>``\ を用いることを推奨する。
-    以下に、設定例を示す。
-
-        .. code-block:: jsp
-
-            <fmt:formatDate value="${form.date}" pattern="yyyyMMdd" />
-
-    valueの値に前述した \ ``f:h()``\ を使用して値を設定すると、Stringになってしまい、\ ``javax.el.ELException``\ がスローされるため、そのまま\ ``${form.date}``\ を使用している。
-    しかし、yyyyMMddにフォーマットするため、XSSの心配はない。
-
-.. tip::
-
-        **java.lang.Number継承クラス、またはjava.lang.Numberにパースできる文字列**
-
-        java.lang.Number継承クラスまたはjava.lang.Numberにパースできる文字列をフォーマットして表示する場合は、\ ``<fmt:formatNumber>``\ を用いることを推奨する。
-        以下に、設定例を示す。
-
-            .. code-block:: jsp
-
-                <fmt:formatNumber value="${f:h(form.price)}" pattern="###,###" />
-
-        上記は、Stringでも問題ないので、\ ``<fmt:formatNumber>``\ タグを使わなくなった場合に ``f:h()`` を付け忘れることを予防するため、\ ``f:h()``\ を明示的に使用している。
-
-.. _xss_how_to_use_javascript_escaping:
-
-JavaScript Escaping
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-XSSの脆弱性への対応としては、JavaScript特殊文字をエスケープすることが基本である。
-ユーザーからの入力をもとに、JavaScriptの文字列リテラルを動的に生成する場合に、エスケープが必要となる。
-
-エスケープが必要なJavaScriptの特殊文字の例と、エスケープ後の例は、以下のとおりである。
-
-.. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 50 50
-
-   * - | エスケープ前
-     - | エスケープ後
-   * - | ``'``
-     - | ``\'``
-   * - | ``"``
-     - | ``\"``
-   * - | ``\``
-     - | ``\\``
-   * - | ``/``
-     - | ``\/``
-   * - | ``<``
-     - | ``\x3c``
-   * - | ``>``
-     - | ``\x3e``
-   * - | ``0x0D(復帰)``
-     - | ``\r``
-   * - | ``0x0A(改行)``
-     - | ``\n``
-
-出力値をエスケープしない脆弱性のある例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-XSS問題が発生する例を、以下に示す。
-
-本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
-
-.. code-block:: html
-
-  <html>
-    <script  type="text/javascript">
-        var aaa = '<script>${warnCode}<\/script>';
-        document.write(aaa);
-    </script>
-  <html>
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 20 80
-
-   * - 属性名
-     - 値
-   * - | warnCode
-     - | ``<script></script><script>alert('XSS Attack!');</script><\/script>``
-
-上記例のように、ユーザーの入力を導出元としてコードを出力するなど、JavaScriptの要素を動的に生成する場合、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
-
-.. figure:: ./images_XSS/javascript_xss_screen_no_escape_result.png
-   :alt: javascript_xss_screen_no_escape_result
-   :width: 30%
-   :align: center
-
-   **Picture - No Escape Result**
-
-**出力結果**
-
-.. code-block:: html
-
-    <script type="text/javascript">
-        var aaa = '<script><\/script><script>alert('XSS Attack!');<\/script><\/script>';
-        document.write(aaa);
-    </script>
-
-.. tip::
-
-    業務要件上必要でない限り、JavaScriptの要素をユーザーからの入力値に依存して動的に生成する仕様は、任意のスクリプトが埋め込まれてしまう可能性があるため、別の方式を検討する、または、極力避けるべきである。
-
-.. _xss_how_to_use_js_function_example:
-
-出力値をf:js()関数でエスケープする例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-XSSを防ぐために、ユーザーの入力値、が設定される値にEL式の関数、\ ``f:js()``\ の使用を推奨する。
-
-使用例を、下記に示す。
-
-.. code-block:: html
-
-    <script type="text/javascript">
-      var message = '<script>${f:js(message)}<\/script>';  // (1)
-      <!-- omitted -->
-    </script>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式の\ ``f:js()``\ を使用することにより、エスケープして変数に設定している。
-
-**出力結果**
-
-.. code-block:: html
-
-    <script  type="text/javascript">
-        var aaa = '<script>\x3c\/script\x3e\x3cscript\x3ealert(\'XSS Attack!\');\x3c\/script\x3e<\/script>';
-        document.write(aaa);
-    </script>
-
-.. _xss_how_to_use_event_handler_escaping:
-
-Event handler Escaping
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-javascript のイベントハンドラの値をエスケープする場合、\ ``f:h()``\ や、\ ``f:js()``\ を使用するのではなく、\ ``f:hjs()``\ を使用すること。\ ``${f:h(f:js())}``\ と同義である。
-
-理由としては、 \ ``<input type="submit" onclick="callback('xxxx');">``\ のようなイベントハンドラの値に\ ``"');alert("XSS Attack");// "``\ を指定された場合、別のスクリプトを挿入できてしまうため、文字参照形式にエスケープ後、HTMLエスケープを行う必要がある。
-
-出力値をエスケープしない脆弱性のある例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-XSS問題が発生する例を、以下に示す。
-
-.. code-block:: jsp
-
-    <input type="text" onmouseover="alert('output is ${warnCode}') . ">
-
-.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 20 80
-
-   * - 属性名
-     - 値
-   * - | warnCode
-     - | ``'); alert('XSS Attack!'); //``
-       | 上記の値が設定されてしまうことで、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
-
-マウスオーバ時、XSSのダイアログボックスが表示されてしまう。
-
-.. figure:: ./images_XSS/eventhandler_xss_screen_no_escape_result.png
-   :alt: eventhandler_xss_screen_no_escape_result
-   :width: 50%
-   :align: center
-
-   **Picture - No Escape Result**
-
-
-**出力結果**
-
-.. code-block:: jsp
-
-    <!-- omitted -->
-    <input type="text" onmouseover="alert('output is'); alert('XSS Attack!'); // .') ">
-    <!-- omitted -->
-
-.. _xss_how_to_use_hjs_function_example:
-
-出力値をf:hjs()関数でエスケープする例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-使用例を、下記に示す。
-
-.. code-block:: jsp
-
-    <input type="text" onmouseover="alert('output is ${f:hjs(warnCode)}') . ">  // (1)
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | EL式の\ ``f:hjs()``\ を使用することにより、エスケープして引数としている。
-
-マウスオーバ時、XSSのダイアログは出力されない。
-
-.. figure:: ./images_XSS/eventhandler_xss_screen_escape_result.png
-   :alt: eventhandler_xss_screen_escape_result
-   :width: 50%
-   :align: center
-
-   **Picture - Escape Result**
-
-**出力結果**
-
-.. code-block:: jsp
-
-    <!-- omitted -->
-    <input type="text" onmouseover="alert('output is \&#39;); alert(\&#39;XSS Attack!\&#39;);\&quot; \/\/ .') ">
-    <!-- omitted -->
-
-.. raw:: latex
-
-   \newpage
-
+XSS対策
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+.. _SpringSecurityXSS:
+
+Overview
+--------------------------------------------------------------------------------
+
+クロスサイトスクリプティング(以下、XSSと略す)について説明する。
+クロスサイトスクリプティングとは、アプリケーションのセキュリティ上の不備を意図的に利用し、サイト間を横断して悪意のあるスクリプトを混入させることである。
+例えば、ウェブアプリケーションが入力したデータ（フォーム入力など）を、適切にエスケープしないまま、HTML上に出力することにより、入力値に存在するタグなどの文字が、そのままHTMLとして解釈される。
+悪意のある値が入力された状態で、スクリプトを起動させることにより、クッキーの改ざんや、クッキーの値を取得することによる、セッションハイジャックなどの攻撃が行えてしまう。
+
+Stored, Reflected XSS Attacks
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+XSS攻撃は、大きく二つのカテゴリに分けられる。
+
+**Stored XSS Attacks**
+
+Stored XSS Attacksとは、悪意のあるコードが、永久的にターゲットサーバ上(データベース等)に格納されていることである。
+ユーザーは、格納されている情報を要求するときに、サーバから悪意のあるスクリプトを取得し、実行してしまう。
+
+**Reflected XSS Attacks**
+
+Reflected attacksとは、リクエストの一部としてサーバに送信された悪意のあるコードが、エラーメッセージ、検索結果、その他いろいろなレスポンスからリフレクションされることである。
+ユーザーが、悪意のあるリンクをクリックするか、特別に細工されたフォームを送信すると、挿入されたコードは、ユーザーのブラウザに、攻撃を反映した結果を返却する。
+その結果、信頼できるサーバからきた値のため、ブラウザは悪意のあるコードを実行してしまう。
+
+Stored XSS Attacks、Reflected XSS Attacksともに、出力値をエスケープすることで防ぐことができる。
+
+How to use
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ユーザーの入力を、そのまま出力している場合、XSSの脆弱性にさらされている。
+したがって、XSSの脆弱性に対する対抗措置として、HTMLのマークアップ言語で、特定の意味を持つ文字をエスケープする必要がある。
+
+必要に応じて、3種類のエスケープを使い分けること。
+
+エスケープの種類:
+
+ * Output Escaping
+ * JavaScript Escaping
+ * Event handler Escaping
+
+.. _xss_how_to_use_ouput_escaping:
+
+Output Escaping
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+XSSの脆弱性への対応としては、HTML特殊文字をエスケープすることが基本である。
+エスケープが必要なHTML上の特殊文字の例と、エスケープ後の例は、以下の通りである。
+
+.. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 50 50
+
+   * - | エスケープ前
+     - | エスケープ後
+   * - | ``&``
+     - | ``&amp;``
+   * - | ``<``
+     - | ``&lt;``
+   * - | ``>``
+     - | ``&gt;``
+   * - | ``"``
+     - | ``&quot;``
+   * - | ``'``
+     - | ``&#39;``
+
+XSSを防ぐために、文字列として出力するすべての表示項目に、\ ``f:h()``\ を使用すること。
+入力値を、別画面に再出力するアプリケーションを例に、説明する。
+
+出力値をエスケープしない脆弱性のある例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
+
+**出力画面の実装**
+
+.. code-block:: jsp
+
+    <!-- omitted -->
+    <tr>
+        <td>Job</td>
+        <td>${customerForm.job}</td>  <!-- (1) -->
+    </tr>
+    <!-- omitted -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | customerFormのフィールドである、jobをエスケープせず出力している。
+
+入力画面のJobフィールドに、<script>タグを入力する。
+
+.. figure:: ./images_XSS/xss_screen_input_html_tag.png
+   :alt: input_html_tag
+   :width: 80%
+   :align: center
+
+   **Picture - Input HTML Tag**
+
+| <script>タグとして認識され、ダイアログボックスが表示されてしまう。
+
+.. figure:: ./images_XSS/xss_screen_no_escape_result.png
+   :alt: no_escape_result
+   :width: 60%
+   :align: center
+
+   **Picture - No Escape Result**
+
+.. _xss_how_to_use_h_function_example:
+
+出力値をf:h()関数でエスケープする例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+
+**出力画面の実装**
+
+.. code-block:: jsp
+
+    <!-- omitted -->
+    <tr>
+        <td>Job</td>
+        <td>${f:h(customerForm.job)}</td>  <!-- (1) -->
+    </tr>
+    .<!-- omitted -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式の\ ``f:h()``\ を使用することにより、エスケープして出力している。
+
+入力画面のJobフィールドに<script>タグを入力する。
+
+.. figure:: ./images_XSS/xss_screen_input_html_tag.png
+   :alt: input_html_tag
+   :width: 80%
+   :align: center
+
+   **Picture - Input HTML Tag**
+
+| 特殊文字がエスケープされることにより、 <script>タグとして認識されず、入力値がそのまま出力される。
+
+.. figure:: ./images_XSS/xss_screen_escape_result.png
+   :alt: escape_result
+   :width: 60%
+   :align: center
+
+   **Picture - Escape Result**
+
+**出力結果**
+
+.. code-block:: jsp
+
+    <!-- omitted -->
+    <tr>
+        <td>Job</td>
+        <td>&lt;script&gt;alert(&quot;XSS Attack&quot;)&lt;/script&gt;</td>
+    </tr>
+    <!-- omitted -->
+
+.. tip:: **java.util.Date継承クラスのフォーマット**
+
+    java.util.Date継承クラスをフォーマットして表示する場合は、JSTLの\ ``<fmt:formatDate>``\ を用いることを推奨する。
+    以下に、設定例を示す。
+
+        .. code-block:: jsp
+
+            <fmt:formatDate value="${form.date}" pattern="yyyyMMdd" />
+
+    valueの値に前述した \ ``f:h()``\ を使用して値を設定すると、Stringになってしまい、\ ``javax.el.ELException``\ がスローされるため、そのまま\ ``${form.date}``\ を使用している。
+    しかし、yyyyMMddにフォーマットするため、XSSの心配はない。
+
+.. tip::
+
+        **java.lang.Number継承クラス、またはjava.lang.Numberにパースできる文字列**
+
+        java.lang.Number継承クラスまたはjava.lang.Numberにパースできる文字列をフォーマットして表示する場合は、\ ``<fmt:formatNumber>``\ を用いることを推奨する。
+        以下に、設定例を示す。
+
+            .. code-block:: jsp
+
+                <fmt:formatNumber value="${f:h(form.price)}" pattern="###,###" />
+
+        上記は、Stringでも問題ないので、\ ``<fmt:formatNumber>``\ タグを使わなくなった場合に ``f:h()`` を付け忘れることを予防するため、\ ``f:h()``\ を明示的に使用している。
+
+.. _xss_how_to_use_javascript_escaping:
+
+JavaScript Escaping
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+XSSの脆弱性への対応としては、JavaScript特殊文字をエスケープすることが基本である。
+ユーザーからの入力をもとに、JavaScriptの文字列リテラルを動的に生成する場合に、エスケープが必要となる。
+
+エスケープが必要なJavaScriptの特殊文字の例と、エスケープ後の例は、以下のとおりである。
+
+.. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 50 50
+
+   * - | エスケープ前
+     - | エスケープ後
+   * - | ``'``
+     - | ``\'``
+   * - | ``"``
+     - | ``\"``
+   * - | ``\``
+     - | ``\\``
+   * - | ``/``
+     - | ``\/``
+   * - | ``<``
+     - | ``\x3c``
+   * - | ``>``
+     - | ``\x3e``
+   * - | ``0x0D(復帰)``
+     - | ``\r``
+   * - | ``0x0A(改行)``
+     - | ``\n``
+
+出力値をエスケープしない脆弱性のある例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+XSS問題が発生する例を、以下に示す。
+
+本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
+
+.. code-block:: html
+
+  <html>
+    <script  type="text/javascript">
+        var aaa = '<script>${warnCode}<\/script>';
+        document.write(aaa);
+    </script>
+  <html>
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 20 80
+
+   * - 属性名
+     - 値
+   * - | warnCode
+     - | ``<script></script><script>alert('XSS Attack!');</script><\/script>``
+
+上記例のように、ユーザーの入力を導出元としてコードを出力するなど、JavaScriptの要素を動的に生成する場合、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
+
+.. figure:: ./images_XSS/javascript_xss_screen_no_escape_result.png
+   :alt: javascript_xss_screen_no_escape_result
+   :width: 30%
+   :align: center
+
+   **Picture - No Escape Result**
+
+**出力結果**
+
+.. code-block:: html
+
+    <script type="text/javascript">
+        var aaa = '<script><\/script><script>alert('XSS Attack!');<\/script><\/script>';
+        document.write(aaa);
+    </script>
+
+.. tip::
+
+    業務要件上必要でない限り、JavaScriptの要素をユーザーからの入力値に依存して動的に生成する仕様は、任意のスクリプトが埋め込まれてしまう可能性があるため、別の方式を検討する、または、極力避けるべきである。
+
+.. _xss_how_to_use_js_function_example:
+
+出力値をf:js()関数でエスケープする例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+XSSを防ぐために、ユーザーの入力値、が設定される値にEL式の関数、\ ``f:js()``\ の使用を推奨する。
+
+使用例を、下記に示す。
+
+.. code-block:: html
+
+    <script type="text/javascript">
+      var message = '<script>${f:js(message)}<\/script>';  // (1)
+      <!-- omitted -->
+    </script>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式の\ ``f:js()``\ を使用することにより、エスケープして変数に設定している。
+
+**出力結果**
+
+.. code-block:: html
+
+    <script  type="text/javascript">
+        var aaa = '<script>\x3c\/script\x3e\x3cscript\x3ealert(\'XSS Attack!\');\x3c\/script\x3e<\/script>';
+        document.write(aaa);
+    </script>
+
+.. _xss_how_to_use_event_handler_escaping:
+
+Event handler Escaping
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+javascript のイベントハンドラの値をエスケープする場合、\ ``f:h()``\ や、\ ``f:js()``\ を使用するのではなく、\ ``f:hjs()``\ を使用すること。\ ``${f:h(f:js())}``\ と同義である。
+
+理由としては、 \ ``<input type="submit" onclick="callback('xxxx');">``\ のようなイベントハンドラの値に\ ``"');alert("XSS Attack");// "``\ を指定された場合、別のスクリプトを挿入できてしまうため、文字参照形式にエスケープ後、HTMLエスケープを行う必要がある。
+
+出力値をエスケープしない脆弱性のある例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+XSS問題が発生する例を、以下に示す。
+
+.. code-block:: jsp
+
+    <input type="text" onmouseover="alert('output is ${warnCode}') . ">
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 20 80
+
+   * - 属性名
+     - 値
+   * - | warnCode
+     - | ``'); alert('XSS Attack!'); //``
+       | 上記の値が設定されてしまうことで、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
+
+マウスオーバ時、XSSのダイアログボックスが表示されてしまう。
+
+.. figure:: ./images_XSS/eventhandler_xss_screen_no_escape_result.png
+   :alt: eventhandler_xss_screen_no_escape_result
+   :width: 50%
+   :align: center
+
+   **Picture - No Escape Result**
+
+
+**出力結果**
+
+.. code-block:: jsp
+
+    <!-- omitted -->
+    <input type="text" onmouseover="alert('output is'); alert('XSS Attack!'); // .') ">
+    <!-- omitted -->
+
+.. _xss_how_to_use_hjs_function_example:
+
+出力値をf:hjs()関数でエスケープする例
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+使用例を、下記に示す。
+
+.. code-block:: jsp
+
+    <input type="text" onmouseover="alert('output is ${f:hjs(warnCode)}') . ">  // (1)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | EL式の\ ``f:hjs()``\ を使用することにより、エスケープして引数としている。
+
+マウスオーバ時、XSSのダイアログは出力されない。
+
+.. figure:: ./images_XSS/eventhandler_xss_screen_escape_result.png
+   :alt: eventhandler_xss_screen_escape_result
+   :width: 50%
+   :align: center
+
+   **Picture - Escape Result**
+
+**出力結果**
+
+.. code-block:: jsp
+
+    <!-- omitted -->
+    <input type="text" onmouseover="alert('output is \&#39;); alert(\&#39;XSS Attack!\&#39;);\&quot; \/\/ .') ">
+    <!-- omitted -->
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/index.rst b/source/Security/index.rst
index 282acc7a39..dd6a05496f 100755
--- a/source/Security/index.rst
+++ b/source/Security/index.rst
@@ -1,20 +1,20 @@
-セキュリティ対策
-================================================================================
-
-.. toctree::
-   :maxdepth: 1
-
-   SpringSecurity
-   Authentication
-   Authorization
-   SessionManagement
-   CSRF
-   LinkageWithBrowser
-   XSS
-   Encryption
-   SecureLoginDemo
-
-.. raw:: latex
-
-   \newpage
-
+セキュリティ対策
+================================================================================
+
+.. toctree::
+   :maxdepth: 1
+
+   SpringSecurity
+   Authentication
+   Authorization
+   SessionManagement
+   CSRF
+   LinkageWithBrowser
+   XSS
+   Encryption
+   SecureLoginDemo
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/index.rst b/source/index.rst
index 2f153f8ae2..40e2974207 100755
--- a/source/index.rst
+++ b/source/index.rst
@@ -1,27 +1,27 @@
-TERASOLUNA Server Framework for Java (5.x) Development Guideline
-================================================================================
-
-.. note::
-
-  内容の誤りやコメントは\ `GithubのIssues <https://github.com/terasolunaorg/guideline/issues/new?body=%23%23%20Description%0D%0A%28%2A%2ARequired%2A%2A%3A%20Please%20write%20issue%20description%29%0D%0A%0D%0A%23%23%20Possible%20Solutions%0D%0A%28Optional%3A%20Please%20write%20solutions%20of%20this%20issue%20you%20think%29%0D%0A%0D%0A%23%23%20Affects%20Version%2Fs%0D%0A%28%2A%2ARequired%2A%2A%3A%20Please%20select%20affected%20versions%29%0D%0A%2A%205.1.0.RELEASE%0D%0A%2A%205.0.2.RELEASE%0D%0A%2A%201.0.4.RELEASE%0D%0A%0D%0A%23%23%20Fix%20Version%2Fs%0D%0A%28To%20be%20written%20later%20by%20project%20member%29%0D%0A%0D%0A%23%23%20Issue%20Links%0D%0A%28Optional%3A%20Please%20link%20to%20related%20issues%29%0D%0A%2A%20%23%7Bissue%20no%7D%0D%0A%2A%20or%20external%20url>`_\ にご登録お願いします。
-
-.. toctree::
-   :maxdepth: 2
-   :numbered:
-   
-   ./Introduction/index
-   ./Overview/index
-   ./ImplementationAtEachLayer/index
-   ./ArchitectureInDetail/WebApplicationDetail/index
-   ./ArchitectureInDetail/WebServiceDetail/index
-   ./ArchitectureInDetail/DataAccessDetail/index
-   ./ArchitectureInDetail/GeneralFuncDetail/index
-   ./ArchitectureInDetail/MessagingDetail/index
-   ./Security/index
-   ./Tutorial/index
-   ./Appendix/index
-
-.. raw:: latex
-
-   \newpage
-
+TERASOLUNA Server Framework for Java (5.x) Development Guideline
+================================================================================
+
+.. note::
+
+  内容の誤りやコメントは\ `GithubのIssues <https://github.com/terasolunaorg/guideline/issues/new?body=%23%23%20Description%0D%0A%28%2A%2ARequired%2A%2A%3A%20Please%20write%20issue%20description%29%0D%0A%0D%0A%23%23%20Possible%20Solutions%0D%0A%28Optional%3A%20Please%20write%20solutions%20of%20this%20issue%20you%20think%29%0D%0A%0D%0A%23%23%20Affects%20Version%2Fs%0D%0A%28%2A%2ARequired%2A%2A%3A%20Please%20select%20affected%20versions%29%0D%0A%2A%205.1.0.RELEASE%0D%0A%2A%205.0.2.RELEASE%0D%0A%2A%201.0.4.RELEASE%0D%0A%0D%0A%23%23%20Fix%20Version%2Fs%0D%0A%28To%20be%20written%20later%20by%20project%20member%29%0D%0A%0D%0A%23%23%20Issue%20Links%0D%0A%28Optional%3A%20Please%20link%20to%20related%20issues%29%0D%0A%2A%20%23%7Bissue%20no%7D%0D%0A%2A%20or%20external%20url>`_\ にご登録お願いします。
+
+.. toctree::
+   :maxdepth: 2
+   :numbered:
+   
+   ./Introduction/index
+   ./Overview/index
+   ./ImplementationAtEachLayer/index
+   ./ArchitectureInDetail/WebApplicationDetail/index
+   ./ArchitectureInDetail/WebServiceDetail/index
+   ./ArchitectureInDetail/DataAccessDetail/index
+   ./ArchitectureInDetail/GeneralFuncDetail/index
+   ./ArchitectureInDetail/MessagingDetail/index
+   ./Security/index
+   ./Tutorial/index
+   ./Appendix/index
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source_en/Security/Authentication.rst b/source_en/Security/Authentication.rst
index efcdb62a43..8ec15d9c1a 100755
--- a/source_en/Security/Authentication.rst
+++ b/source_en/Security/Authentication.rst
@@ -387,7 +387,7 @@ to control the response when the authentication fails.
     * - Implementation class
       - Description
     * - | \ ``SimpleUrlAuthenticationFailureHandler``\
-      - | Implementation class which redirects or forwards to a specified path (\ ``defaultFailureUrl``\ ).
+      - | Implementation class which redirects or forwards to a specified path (\ ``defaultTargetUrl``\ ).
     * - | \ ``ExceptionMappingAuthenticationFailureHandler``\
       - | Implementation class which can map authentication exception and URL for transition.
         | Since the exception class generated by Spring Security for each error cause vary, the transition destination can be changed for each error type if this implementation class is used.
diff --git a/theme/solar/README.rst b/theme/solar/README.rst
index afd75a589a..caeedbd29d 100755
--- a/theme/solar/README.rst
+++ b/theme/solar/README.rst
@@ -1,28 +1,28 @@
-Solar theme for Python Sphinx
-=============================
-Solar is an attempt to create a theme for Sphinx based on the `Solarized <http://ethanschoonover.com/solarized>`_ color scheme.
-
-Preview
--------
-http://vimalkumar.in/sphinx-themes/solar
-
-Download
---------
-Released versions are available from http://github.com/vkvn/sphinx-themes/downloads
-
-Installation
-------------
-#. Extract the archive.
-#. Modify ``conf.py`` of an existing Sphinx project or create new project using ``sphinx-quickstart``.
-#. Change the ``html_theme`` parameter to ``solar``.
-#. Change the ``html_theme_path`` to the location containing the extracted archive.
-
-License
--------
-`GNU General Public License <http://www.gnu.org/licenses/gpl.html>`_.
-
-Credits
--------
-Modified from the default Sphinx theme -- Sphinxdoc
-
-Background pattern from http://subtlepatterns.com.
+Solar theme for Python Sphinx
+=============================
+Solar is an attempt to create a theme for Sphinx based on the `Solarized <http://ethanschoonover.com/solarized>`_ color scheme.
+
+Preview
+-------
+http://vimalkumar.in/sphinx-themes/solar
+
+Download
+--------
+Released versions are available from http://github.com/vkvn/sphinx-themes/downloads
+
+Installation
+------------
+#. Extract the archive.
+#. Modify ``conf.py`` of an existing Sphinx project or create new project using ``sphinx-quickstart``.
+#. Change the ``html_theme`` parameter to ``solar``.
+#. Change the ``html_theme_path`` to the location containing the extracted archive.
+
+License
+-------
+`GNU General Public License <http://www.gnu.org/licenses/gpl.html>`_.
+
+Credits
+-------
+Modified from the default Sphinx theme -- Sphinxdoc
+
+Background pattern from http://subtlepatterns.com.
diff --git a/theme/solar_for_githubpages/README.rst b/theme/solar_for_githubpages/README.rst
index afd75a589a..caeedbd29d 100755
--- a/theme/solar_for_githubpages/README.rst
+++ b/theme/solar_for_githubpages/README.rst
@@ -1,28 +1,28 @@
-Solar theme for Python Sphinx
-=============================
-Solar is an attempt to create a theme for Sphinx based on the `Solarized <http://ethanschoonover.com/solarized>`_ color scheme.
-
-Preview
--------
-http://vimalkumar.in/sphinx-themes/solar
-
-Download
---------
-Released versions are available from http://github.com/vkvn/sphinx-themes/downloads
-
-Installation
-------------
-#. Extract the archive.
-#. Modify ``conf.py`` of an existing Sphinx project or create new project using ``sphinx-quickstart``.
-#. Change the ``html_theme`` parameter to ``solar``.
-#. Change the ``html_theme_path`` to the location containing the extracted archive.
-
-License
--------
-`GNU General Public License <http://www.gnu.org/licenses/gpl.html>`_.
-
-Credits
--------
-Modified from the default Sphinx theme -- Sphinxdoc
-
-Background pattern from http://subtlepatterns.com.
+Solar theme for Python Sphinx
+=============================
+Solar is an attempt to create a theme for Sphinx based on the `Solarized <http://ethanschoonover.com/solarized>`_ color scheme.
+
+Preview
+-------
+http://vimalkumar.in/sphinx-themes/solar
+
+Download
+--------
+Released versions are available from http://github.com/vkvn/sphinx-themes/downloads
+
+Installation
+------------
+#. Extract the archive.
+#. Modify ``conf.py`` of an existing Sphinx project or create new project using ``sphinx-quickstart``.
+#. Change the ``html_theme`` parameter to ``solar``.
+#. Change the ``html_theme_path`` to the location containing the extracted archive.
+
+License
+-------
+`GNU General Public License <http://www.gnu.org/licenses/gpl.html>`_.
+
+Credits
+-------
+Modified from the default Sphinx theme -- Sphinxdoc
+
+Background pattern from http://subtlepatterns.com.
