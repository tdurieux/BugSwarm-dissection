diff --git a/pom.xml b/pom.xml
index 45c04096e3..fba83ef0de 100755
--- a/pom.xml
+++ b/pom.xml
@@ -486,8 +486,8 @@
 						<apiSource>
 							<springmvc>true</springmvc>
 							<locations>
-								<location>de.thm.arsnova.controller</location>
-								<location>de.thm.arsnova.entities</location>
+								<location>de.thm.arsnova.controller.v2</location>
+								<location>de.thm.arsnova.entities.v2</location>
 							</locations>
 							<schemes>
 								<scheme>http</scheme>
diff --git a/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java b/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java
index ce5fe65161..7a38f181bc 100755
--- a/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java
+++ b/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java
@@ -19,6 +19,14 @@
 
 import de.thm.arsnova.entities.Entity;
 import de.thm.arsnova.services.EntityService;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PatchMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
 
 import java.io.IOException;
 import java.util.Map;
@@ -43,25 +51,31 @@ protected AbstractEntityController(final EntityService<E> entityService) {
 		this.entityService = entityService;
 	}
 
-	public E get(final String id) {
+	@GetMapping(GET_MAPPING)
+	public E get(@PathVariable final String id) {
 		return entityService.get(id);
 	}
 
-	public void put(final E entity) {
+	@PutMapping(PUT_MAPPING)
+	public void put(@RequestBody final E entity) {
 		entityService.create(entity);
 	}
 
-	public void post(final E entity) {
+	@PostMapping(POST_MAPPING)
+	public void post(@RequestBody final E entity) {
 		E oldEntity = entityService.get(entity.getId());
 		entityService.update(oldEntity, entity);
 	}
 
-	public void patch(final String id, final Map<String, Object> changes) throws IOException {
+	@PatchMapping(PATCH_MAPPING)
+	public void patch(@PathVariable final String id, @RequestBody final Map<String, Object> changes)
+			throws IOException {
 		E entity = entityService.get(id);
 		entityService.patch(entity, changes);
 	}
 
-	public void delete(final String id) {
+	@DeleteMapping(DELETE_MAPPING)
+	public void delete(@PathVariable final String id) {
 		E entity = entityService.get(id);
 		entityService.delete(entity);
 	}
diff --git a/src/main/java/de/thm/arsnova/controller/CommentController.java b/src/main/java/de/thm/arsnova/controller/CommentController.java
new file mode 100755
index 0000000000..cfcb1579cd
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/CommentController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Comment;
+import de.thm.arsnova.services.CommentService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/comment")
+public class CommentController extends AbstractEntityController<Comment> {
+	private CommentService commentService;
+
+	public CommentController(final CommentService commentService) {
+		super(commentService);
+		this.commentService = commentService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/ContentController.java b/src/main/java/de/thm/arsnova/controller/ContentController.java
new file mode 100755
index 0000000000..7a9658af6b
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/ContentController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Content;
+import de.thm.arsnova.services.ContentService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/content")
+public class ContentController extends AbstractEntityController<Content> {
+	private ContentService contentService;
+
+	public ContentController(final ContentService contentService) {
+		super(contentService);
+		this.contentService = contentService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/MotdController.java b/src/main/java/de/thm/arsnova/controller/MotdController.java
new file mode 100755
index 0000000000..1a3df379ad
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/MotdController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Motd;
+import de.thm.arsnova.services.MotdService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/motd")
+public class MotdController extends AbstractEntityController<Motd> {
+	private MotdService motdService;
+
+	public MotdController(final MotdService motdService) {
+		super(motdService);
+		this.motdService = motdService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/RoomController.java b/src/main/java/de/thm/arsnova/controller/RoomController.java
index d983856394..5f0797fbfb 100755
--- a/src/main/java/de/thm/arsnova/controller/RoomController.java
+++ b/src/main/java/de/thm/arsnova/controller/RoomController.java
@@ -1,8 +1,24 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
 package de.thm.arsnova.controller;
 
 import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.services.RoomService;
-import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -15,10 +31,4 @@ public RoomController(final RoomService roomService) {
 		super(roomService);
 		this.roomService = roomService;
 	}
-
-	@Override
-	@RequestMapping(GET_MAPPING)
-	public Room get(@PathVariable final String id) {
-		return super.get(id);
-	}
 }
diff --git a/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java b/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
index e88595a6f2..336b39ab7a 100755
--- a/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
+++ b/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
@@ -84,7 +84,7 @@ public String toString() {
 					.append("round", round)
 					.append("independentCounts", independentCounts)
 					.append("combinatedCounts", combinatedCounts)
-					.append("combinatedCounts", abstentionCount)
+					.append("abstentionCount", abstentionCount)
 					.toString();
 		}
 	}
diff --git a/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java b/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
index bbed220093..f4774157af 100755
--- a/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
@@ -44,6 +44,7 @@
 	static final String V2_TYPE_SC = "sc";
 	static final String V2_TYPE_MC = "mc";
 	static final String V2_TYPE_VOTE = "vote";
+	static final String V2_TYPE_SCHOOL = "school";
 	static final String V2_TYPE_YESNO = "yesno";
 	static final String V2_TYPE_FREETEXT = "freetext";
 	static final String V2_TYPE_GRID = "grid";
@@ -57,6 +58,7 @@
 		formatMapping.put(V2_TYPE_SC, de.thm.arsnova.entities.Content.Format.CHOICE);
 		formatMapping.put(V2_TYPE_MC, de.thm.arsnova.entities.Content.Format.CHOICE);
 		formatMapping.put(V2_TYPE_VOTE, de.thm.arsnova.entities.Content.Format.SCALE);
+		formatMapping.put(V2_TYPE_SCHOOL, de.thm.arsnova.entities.Content.Format.SCALE);
 		formatMapping.put(V2_TYPE_YESNO, de.thm.arsnova.entities.Content.Format.BINARY);
 		formatMapping.put(V2_TYPE_FREETEXT, de.thm.arsnova.entities.Content.Format.TEXT);
 		formatMapping.put(V2_TYPE_GRID, de.thm.arsnova.entities.Content.Format.GRID);
@@ -184,6 +186,7 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 			case V2_TYPE_SC:
 			case V2_TYPE_MC:
 			case V2_TYPE_VOTE:
+			case V2_TYPE_SCHOOL:
 			case V2_TYPE_YESNO:
 				ChoiceQuestionContent choiceQuestionContent = new ChoiceQuestionContent();
 				to = choiceQuestionContent;
@@ -229,6 +232,7 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 		switch (content.getQuestionType()) {
 			case V2_TYPE_ABCD:
 			case V2_TYPE_VOTE:
+			case V2_TYPE_SCHOOL:
 			case V2_TYPE_YESNO:
 				return migrate(from, content.getPossibleAnswers(), false);
 			case V2_TYPE_MC:
diff --git a/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java b/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
index 5741c8c333..29c85627b6 100755
--- a/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
@@ -190,7 +190,15 @@ public Content migrate(final de.thm.arsnova.entities.Content from) {
 					to.setQuestionType(V2_TYPE_YESNO);
 					break;
 				case SCALE:
-					to.setQuestionType(V2_TYPE_VOTE);
+					final int optionCount = fromChoiceQuestionContent.getOptions().size();
+					/* The number of options for vote/school format is hard-coded by the legacy client */
+					if (optionCount == 5) {
+						to.setQuestionType(V2_TYPE_VOTE);
+					} else if (optionCount == 6) {
+						to.setQuestionType(V2_TYPE_SCHOOL);
+					} else {
+						to.setQuestionType(V2_TYPE_ABCD);
+					}
 					break;
 				case GRID:
 					to.setQuestionType(V2_TYPE_GRID);
@@ -343,12 +351,6 @@ public Motd migrate(final de.thm.arsnova.entities.Motd from) {
 		}
 		final List<Answer> to  = new ArrayList<>();
 		final AnswerStatistics.RoundStatistics stats = from.getRoundStatistics().get(round - 1);
-		if (stats == null) {
-			throw new NullPointerException("RoundStatistics must not be null");
-		}
-		if (stats.getCombinatedCounts() == null) {
-			throw new NullPointerException("getCombinatedCounts() must not be null");
-		}
 
 		if (content.isAbstentionsAllowed()) {
 			final Answer abstention = new Answer();
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
index 6788d3a738..31f20f02f5 100755
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
@@ -26,10 +26,15 @@
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
+import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.Scanner;
+import java.util.stream.Collectors;
 
 @Component
 public class CouchDbInitializer implements ResourceLoaderAware {
@@ -41,6 +46,7 @@
 	private CouchDbConnector connector;
 	private ObjectMapper objectMapper;
 	private StatusService statusService;
+	private boolean migrationStarted = false;
 
 	public CouchDbInitializer(final CouchDbConnector couchDbConnector, final ObjectMapperFactory objectMapperFactory,
 			final StatusService statusService) {
@@ -66,22 +72,30 @@ protected void loadDesignDocFiles() throws IOException, ScriptException {
 	}
 
 	protected void createDesignDocs() {
-		docs.forEach(doc -> {
-			if (logger.isDebugEnabled()) {
-				try {
-					logger.debug("Creating design doc:\n{}", objectMapper.writeValueAsString(doc));
-				} catch (JsonProcessingException e) {
-					logger.warn("Failed to serialize design doc.", e);
-				}
-			}
+		connector.executeBulk(docs.stream().filter(doc -> {
 			try {
-				final String rev = connector.getCurrentRevision((String) doc.get("_id"));
-				doc.put("_rev", rev);
-				connector.update(doc);
+				if (logger.isDebugEnabled()) {
+					logger.debug("Checking design doc {}:\n{}", doc.get("_id"), objectMapper.writeValueAsString(doc));
+				}
+				final Map<String, Object> existingDoc = connector.get(HashMap.class, doc.get("_id").toString());
+				final String existingViews = objectMapper.writeValueAsString(existingDoc.get("views"));
+				final String currentViews = objectMapper.writeValueAsString(doc.get("views"));
+				if (existingViews.equals(currentViews)) {
+					logger.debug("Design doc {} already exists.", doc.get("_id"));
+					return false;
+				} else {
+					logger.debug("Design doc {} will be updated.", doc.get("_id"));
+					doc.put("_rev", existingDoc.get("_rev"));
+					return true;
+				}
 			} catch (final DocumentNotFoundException e) {
-				connector.create(doc);
+				logger.debug("Design doc {} will be created.", doc.get("_id"));
+				return true;
+			} catch (JsonProcessingException e) {
+				logger.warn("Failed to serialize design doc {}.", doc.get("_id"), e);
+				return false;
 			}
-		});
+		}).collect(Collectors.toList()));
 	}
 
 	protected void migrate() {
@@ -104,6 +118,12 @@ private void init() {
 
 	@EventListener
 	private void onApplicationEvent(ContextRefreshedEvent event) throws IOException, ScriptException {
+		/* Event is triggered more than once */
+		if (migrationStarted) {
+			return;
+		}
+		migrationStarted = true;
+
 		statusService.putMaintenanceReason(this.getClass(), "Data migration active");
 		loadDesignDocFiles();
 		createDesignDocs();
diff --git a/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java b/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
index 9b401d5bdf..6044c1cec6 100755
--- a/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
+++ b/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
@@ -488,7 +488,6 @@ public AnswerStatistics getAllStatistics(final String contentId) {
 		}
 		AnswerStatistics stats = getStatistics(content.getId(), 1);
 		AnswerStatistics stats2 = getStatistics(content.getId(), 2);
-		logger.debug("Stats: {} || {}", stats, stats2);
 		stats.getRoundStatistics().add(stats2.getRoundStatistics().get(1));
 
 		return stats;
@@ -602,9 +601,6 @@ public int countTotalAnswersByContentId(final String contentId) {
 				// Room's creator. Locked Questions do not appear in this list.
 				continue;
 			}
-			if (0 == answer.getRound() && content.getFormat() != Content.Format.TEXT) {
-				answer.setRound(1);
-			}
 
 			// discard all answers that aren't in the same piRound as the content
 			if (answer.getRound() == content.getState().getRound()) {
