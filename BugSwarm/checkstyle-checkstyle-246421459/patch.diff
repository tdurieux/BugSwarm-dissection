diff --git a/config/checkstyle_non_main_files_suppressions.xml b/config/checkstyle_non_main_files_suppressions.xml
index c030cb56fb..c26724588e 100755
--- a/config/checkstyle_non_main_files_suppressions.xml
+++ b/config/checkstyle_non_main_files_suppressions.xml
@@ -14,7 +14,7 @@
 
     <!-- Grammar specific input file, should have exact structure to reproduce the case. -->
      <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]InputEmbeddedNullChar\.java"/>
-     <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]javadoc[\\/]InputLeadingAsterisks\.txt"/>
+     <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]javadoc[\\/]InputLeadingAsterisks\.javadoc"/>
 
     <!-- Javadoc files should not have new line by design (on purpose). -->
      <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]javadoc[\\/]htmlTags[\\/].*"/>
diff --git a/config/findbugs-exclude.xml b/config/findbugs-exclude.xml
index 01fd41c690..504f1cc37d 100755
--- a/config/findbugs-exclude.xml
+++ b/config/findbugs-exclude.xml
@@ -65,14 +65,6 @@
         <Bug pattern="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE"/>
       </Or>
     </Match>
-    <Match>
-      <!-- till https://github.com/checkstyle/checkstyle/issues/3666 -->
-      <and>
-        <Class name="com.puppycrawl.tools.checkstyle.api.FileContents" />
-        <Method name="~setFile[nN]ame" />
-      </and>
-      <Bug pattern="NM_CONFUSING" />
-    </Match>
     <Match>
       <!-- false positive, beginTree is a kind of constructor for Checks -->
       <Or>
diff --git a/config/pmd-main.xml b/config/pmd-main.xml
index c936bda4bd..82fd133b76 100755
--- a/config/pmd-main.xml
+++ b/config/pmd-main.xml
@@ -7,6 +7,7 @@
     <description>
         PMD ruleset for Checkstyle main code
     </description>
+    <exclude-pattern>.*/src/it/.*</exclude-pattern>
     <exclude-pattern>.*/src/test/.*</exclude-pattern>
     <rule ref="config/pmd.xml"/>
 </ruleset>
diff --git a/config/pmd-test.xml b/config/pmd-test.xml
index 91650ac835..3d32172575 100755
--- a/config/pmd-test.xml
+++ b/config/pmd-test.xml
@@ -31,8 +31,6 @@
         <exclude name="ExcessivePublicCount"/>
         <!--we have too much UTs for each main class, it is better to keep all tests in one file to ease navigation and search for test-->
         <exclude name="ExcessiveClassLength"/>
-        <!--till #4488-->
-        <exclude name="UselessOverridingMethod"/>
         <!--tentative-->
         <exclude name="JUnitUseExpected"/>
         <!--tentative-->
@@ -57,6 +55,10 @@
         <exclude name="ShortMethodName"/>
         <!--tentative-->
         <exclude name="AvoidCatchingGenericException"/>
+        <!--tentative-->
+        <exclude name="NonThreadSafeSingleton"/>
+        <!--tentative-->
+        <exclude name="UseVarargs"/>
     </rule>
 
     <rule ref="rulesets/java/codesize.xml/NcssMethodCount">
@@ -69,8 +71,6 @@
     <rule ref="rulesets/java/junit.xml">
         <!--tentative-->
         <exclude name="JUnitTestsShouldIncludeAssert"/>
-        <!--tentative-->
-        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
     </rule>
 
     <rule ref="config/pmd.xml/ConfusingTernary">
diff --git a/pom.xml b/pom.xml
index 4240b620e8..a025c910fc 100755
--- a/pom.xml
+++ b/pom.xml
@@ -356,7 +356,7 @@
               <ruleset>config/pmd-test.xml</ruleset>
             </rulesets>
             <excludeRoots>
-              <excludeRoot>src/it</excludeRoot>
+              <excludeRoot>src/it/resources</excludeRoot>
               <excludeRoot>src/test/resources</excludeRoot>
               <excludeRoot>target/generated-sources/antlr</excludeRoot>
               <excludeRoot>target/generated-sources/antlr/com/puppycrawl/tools/checkstyle/grammars/javadoc</excludeRoot>
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
index e91db0666f..cd81962dc1 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java
@@ -40,7 +40,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void outerTypeFilenameTest1() throws Exception {
+    public void testOuterTypeFilename1() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -52,7 +52,7 @@ public void outerTypeFilenameTest1() throws Exception {
     }
 
     @Test
-    public void outerTypeFilenameTest2() throws Exception {
+    public void testOuterTypeFilename2() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -64,7 +64,7 @@ public void outerTypeFilenameTest2() throws Exception {
     }
 
     @Test
-    public void outerTypeFilenameTest3() throws Exception {
+    public void testOuterTypeFilename3() throws Exception {
 
         final String[] expected = {
             "3: " + getCheckMessage(OuterTypeFilenameCheck.class, MSG_KEY),
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
index d5578ce3cc..c7771d8382 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
@@ -46,7 +46,7 @@ protected DefaultConfiguration createCheckerConfig(
     }
 
     @Test
-    public void fileTabTest() throws Exception {
+    public void testFileTab() throws Exception {
 
         final String[] expected = {
             "8:25: " + getCheckMessage(FileTabCharacterCheck.class, "containsTab"),
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
index 357c469201..00347252b3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void illegalTokensTest() throws Exception {
+    public void testIllegalTokens() throws Exception {
         final String message = "Consider using special escape sequence instead of octal value or "
                 + "Unicode escaped value.";
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
index e349c93219..96acfae0a2 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
@@ -39,7 +39,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void unicodeEscapesTest() throws Exception {
+    public void testUnicodeEscapes() throws Exception {
 
         final String[] expected = {
             "5: " + getCheckMessage(AvoidEscapedUnicodeCharactersCheck.class, MSG_KEY),
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
index c111beaa34..ba66401cbe 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void lineLengthTest() throws Exception {
+    public void testLineLength() throws Exception {
 
         final String[] expected = {
             "5: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 112),
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
index 89c7480da7..611c5a6937 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void starImportTest() throws Exception {
+    public void testStarImport() throws Exception {
 
         final String[] expected = {
             "3: Using the '.*' form of import should be avoided - java.io.*.",
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
index c09dbf5962..c46af1d8a2 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
@@ -39,7 +39,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void badLineWrapTest() throws Exception {
+    public void testBadLineWrap() throws Exception {
 
         final String[] expected = {
             "1: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "package"),
@@ -55,7 +55,7 @@ public void badLineWrapTest() throws Exception {
     }
 
     @Test
-    public void goodLineWrapTest() throws Exception {
+    public void testGoodLineWrap() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
index 30e283cffd..299fd87164 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
@@ -48,7 +48,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void customImportTest1() throws Exception {
+    public void testCustomImport1() throws Exception {
 
         final String[] expected = {
             "4: " + getCheckMessage(clazz, MSG_LEX, "java.awt.Button.ABORT",
@@ -71,7 +71,7 @@ public void customImportTest1() throws Exception {
     }
 
     @Test
-    public void customImportTest2() throws Exception {
+    public void testCustomImport2() throws Exception {
 
         final String[] expected = {
             "4: " + getCheckMessage(clazz, MSG_LEX, "java.awt.Button.ABORT",
@@ -96,7 +96,7 @@ public void customImportTest2() throws Exception {
     }
 
     @Test
-    public void customImportTest3() throws Exception {
+    public void testCustomImport3() throws Exception {
 
         final String[] expected = {
             "4: " + getCheckMessage(clazz, MSG_LINE_SEPARATOR, "java.awt.Dialog"),
@@ -123,7 +123,7 @@ public void customImportTest3() throws Exception {
     }
 
     @Test
-    public void validTest() throws Exception {
+    public void testValid() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -135,7 +135,7 @@ public void validTest() throws Exception {
     }
 
     @Test
-    public void validGoogleStyleOrderOfImportsTest() throws Exception {
+    public void testValidGoogleStyleOrderOfImports() throws Exception {
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
         final Configuration checkConfig = getCheckConfig("CustomImportOrder");
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
index 67dde5e875..90d68d9c9b 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
@@ -38,7 +38,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void badTest() throws Exception {
+    public void testBad() throws Exception {
 
         final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;
         final String messageKey = "one.top.level.class";
@@ -60,7 +60,7 @@ public void badTest() throws Exception {
     }
 
     @Test
-    public void goodTest() throws Exception {
+    public void testGood() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -72,7 +72,7 @@ public void goodTest() throws Exception {
     }
 
     @Test
-    public void bad1Test() throws Exception {
+    public void testBad1() throws Exception {
 
         final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;
         final String messageKey = "one.top.level.class";
@@ -89,7 +89,7 @@ public void bad1Test() throws Exception {
     }
 
     @Test
-    public void bad2Test() throws Exception {
+    public void testBad2() throws Exception {
 
         final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;
         final String messageKey = "one.top.level.class";
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
index f2539d4001..09240c6a17 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void overloadMethodsTest() throws Exception {
+    public void testOverloadMethods() throws Exception {
 
         final Class<OverloadMethodsDeclarationOrderCheck> clazz =
             OverloadMethodsDeclarationOrderCheck.class;
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
index 2925e8e703..47e407ddd3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void emptyLineSeparatorTest() throws Exception {
+    public void testEmptyLineSeparator() throws Exception {
 
         final Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;
         final String messageKey = "empty.line.separator";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
index 025e309a9b..658250704d 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void needBracesTest() throws Exception {
+    public void testNeedBraces() throws Exception {
 
         final Class<NeedBracesCheck> clazz = NeedBracesCheck.class;
         final String messageKey = "needBraces";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
index 998f905bf7..d37149f680 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
@@ -39,7 +39,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void leftCurlyBracesTest() throws Exception {
+    public void testLeftCurlyBraces() throws Exception {
 
         final String[] expected = {
             "4:1: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 1),
@@ -59,7 +59,7 @@ public void leftCurlyBracesTest() throws Exception {
     }
 
     @Test
-    public void leftCurlyAnnotationsTest() throws Exception {
+    public void testLeftCurlyAnnotations() throws Exception {
 
         final String[] expected = {
             "10:1: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 1),
@@ -77,7 +77,7 @@ public void leftCurlyAnnotationsTest() throws Exception {
     }
 
     @Test
-    public void leftCurlyMethodsTest() throws Exception {
+    public void testLeftCurlyMethods() throws Exception {
 
         final String[] expected = {
             "4:1: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 1),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
index 377bbef2eb..cbd7819ed8 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
@@ -43,7 +43,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void rightCurlyTestAlone() throws Exception {
+    public void testRightCurlyAlone() throws Exception {
         final String[] expected = {
             "20:17: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_SAME, "}", 17),
             "32:13: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_SAME, "}", 13),
@@ -58,7 +58,7 @@ public void rightCurlyTestAlone() throws Exception {
     }
 
     @Test
-    public void rightCurlyTestSame() throws Exception {
+    public void testRightCurlySame() throws Exception {
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
         final Configuration checkConfig = getCheckConfig("RightCurly", "RightCurlySame");
@@ -101,7 +101,7 @@ public void testRightCurlyAloneOther() throws Exception {
     }
 
     @Test
-    public void rightCurlyAloneTestSame() throws Exception {
+    public void testRightCurlyAloneSame() throws Exception {
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
         final Configuration checkConfig = getCheckConfig("RightCurly", "RightCurlyAlone");
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
index 9a3471efe5..b5409db5ab 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void emptyBlockTest() throws Exception {
+    public void testEmptyBlock() throws Exception {
 
         final String[] expected = {
             "19:21: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "if"),
@@ -83,7 +83,7 @@ public void emptyBlockTest() throws Exception {
     }
 
     @Test
-    public void emptyBlockTestCatch() throws Exception {
+    public void testEmptyBlockCatch() throws Exception {
 
         final String[] expected = {
             "29:17: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "finally"),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
index f9bc7407be..89d4f72e26 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
@@ -38,7 +38,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void emptyBlockTestCatch() throws Exception {
+    public void testEmptyBlockCatch() throws Exception {
 
         final String[] expected = {
             "28: " + getCheckMessage(EmptyCatchBlockCheck.class, "catch.block.empty"),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
index 8ad8b7a27b..e5344a6b04 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void oneStatementTest() throws Exception {
+    public void testOneStatement() throws Exception {
 
         final String msg = getCheckMessage(OneStatementPerLineCheck.class,
             "multiple.statements.line");
@@ -74,7 +74,7 @@ public void oneStatementTest() throws Exception {
     }
 
     @Test
-    public void oneStatementNonCompilableInputTest() throws Exception {
+    public void testOneStatementNonCompilableInput() throws Exception {
 
         final String msg = getCheckMessage(OneStatementPerLineCheck.class,
             "multiple.statements.line");
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
index 0aad05a565..af0b242d35 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void lineLengthTest() throws Exception {
+    public void testLineLength() throws Exception {
 
         final String[] expected = {
             "5: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 112),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
index 1b74f084e1..558e018e5b 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void operatorWrapTest() throws Exception {
+    public void testOperatorWrap() throws Exception {
 
         final Class<MethodParamPadCheck> clazz = MethodParamPadCheck.class;
         final String messageKeyPrevious = "line.previous";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
index 96cc48b193..e0041e1d40 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void operatorWrapTest() throws Exception {
+    public void testOperatorWrap() throws Exception {
 
         final Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;
         final String messageKey = "line.new";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
index 393f773d77..146babf81b 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
@@ -39,7 +39,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void separatorWrapDotTest() throws Exception {
+    public void testSeparatorWrapDot() throws Exception {
 
         final String[] expected = {
             "28:30: " + getCheckMessage(SeparatorWrapCheck.class, "line.new", "."),
@@ -53,7 +53,7 @@ public void separatorWrapDotTest() throws Exception {
     }
 
     @Test
-    public void separatorWrapCommaTest() throws Exception {
+    public void testSeparatorWrapComma() throws Exception {
 
         final String[] expected = {
             "31:17: " + getCheckMessage(SeparatorWrapCheck.class, "line.previous", ","),
@@ -67,7 +67,7 @@ public void separatorWrapCommaTest() throws Exception {
     }
 
     @Test
-    public void separatorWrapMethodRefTest() throws Exception {
+    public void testSeparatorWrapMethodRef() throws Exception {
 
         final String[] expected = {
             "17:49: " + getCheckMessage(SeparatorWrapCheck.class, MSG_LINE_NEW, "::"),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
index 486a4a4792..8097138b48 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void emptyLineSeparatorTest() throws Exception {
+    public void testEmptyLineSeparator() throws Exception {
 
         final Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;
         final String messageKey = "empty.line.separator";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
index eb9b87efe1..c750d9d2b7 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void whitespaceAroundGenericsTest() throws Exception {
+    public void testWhitespaceAroundGenerics() throws Exception {
 
         final String msgPreceded = "ws.preceded";
         final String msgFollowed = "ws.followed";
@@ -68,7 +68,7 @@ public void whitespaceAroundGenericsTest() throws Exception {
     }
 
     @Test
-    public void genericWhitespaceTest() throws Exception {
+    public void testGenericWhitespace() throws Exception {
         final String msgPreceded = "ws.preceded";
         final String msgFollowed = "ws.followed";
         final String msgNotPreceded = "ws.notPreceded";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/MethodParamPadTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/MethodParamPadTest.java
index 578b472a93..35294af604 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/MethodParamPadTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/MethodParamPadTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void operatorWrapTest() throws Exception {
+    public void testOperatorWrap() throws Exception {
 
         final Class<MethodParamPadCheck> clazz = MethodParamPadCheck.class;
         final String messageKeyPreceded = "ws.preceded";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/ParenPadTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/ParenPadTest.java
index 9bdaf66c0b..6c8e1b1191 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/ParenPadTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/ParenPadTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void methodParenTest() throws Exception {
+    public void testMethodParen() throws Exception {
 
         final Class<ParenPadCheck> clazz = ParenPadCheck.class;
         final String messageKeyPreceded = "ws.preceded";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
index 01ad807ab3..4c9944bf21 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void whitespaceAroundBasicTest() throws Exception {
+    public void testWhitespaceAroundBasic() throws Exception {
 
         final Configuration checkConfig = getCheckConfig("WhitespaceAround");
         final String msgPreceded = "ws.notPreceded";
@@ -76,7 +76,7 @@ public void whitespaceAroundBasicTest() throws Exception {
     }
 
     @Test
-    public void whitespaceAroundEmptyTypesCyclesTest() throws Exception {
+    public void testWhitespaceAroundEmptyTypesCycles() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
index ea4d451b9c..9958cd9a04 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void multipleVariableDeclarationsTest() throws Exception {
+    public void testMultipleVariableDeclarations() throws Exception {
 
         final String msgComma = getCheckMessage(MultipleVariableDeclarationsCheck.class,
             "multiple.variable.declarations.comma");
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
index ebd7f26e71..1d9221cdfc 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void arrayTypeStyleTest() throws Exception {
+    public void testArrayTypeStyle() throws Exception {
 
         final String msgExt = "variable.declaration.usage.distance.extend";
         final Class<VariableDeclarationUsageDistanceCheck> clazz =
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
index d4cb9307e4..e71861d05f 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
@@ -39,7 +39,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void arrayTypeStyleTest() throws Exception {
+    public void testArrayTypeStyle() throws Exception {
 
         final String[] expected = {
             "9:23: " + getCheckMessage(ArrayTypeStyleCheck.class, MSG_KEY),
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
index cacbe526d6..3976fca432 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void correctClassTest() throws Exception {
+    public void testCorrectClass() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -49,7 +49,7 @@ public void correctClassTest() throws Exception {
     }
 
     @Test
-    public void correctFieldTest() throws Exception {
+    public void testCorrectField() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -61,7 +61,7 @@ public void correctFieldTest() throws Exception {
     }
 
     @Test
-    public void correctForTest() throws Exception {
+    public void testCorrectFor() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -73,7 +73,7 @@ public void correctForTest() throws Exception {
     }
 
     @Test
-    public void correctIfTest() throws Exception {
+    public void testCorrectIf() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -85,7 +85,7 @@ public void correctIfTest() throws Exception {
     }
 
     @Test
-    public void correctTest() throws Exception {
+    public void testCorrect() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -97,7 +97,7 @@ public void correctTest() throws Exception {
     }
 
     @Test
-    public void correctReturnTest() throws Exception {
+    public void testCorrectReturn() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -109,7 +109,7 @@ public void correctReturnTest() throws Exception {
     }
 
     @Test
-    public void correctWhileTest() throws Exception {
+    public void testCorrectWhile() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
index eb0f8e823e..466199a4c0 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void fallThroughTest() throws Exception {
+    public void testFallThrough() throws Exception {
 
         final String msg = getCheckMessage(FallThroughCheck.class, "fall.through");
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
index 58e9a386df..439d819883 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void missingSwitchDefaultTest() throws Exception {
+    public void testMissingSwitchDefault() throws Exception {
 
         final String msg = getCheckMessage(MissingSwitchDefaultCheck.class,
             "missing.switch.default");
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
index 89659445bf..c3ea594992 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void annotationTest() throws Exception {
+    public void testAnnotation() throws Exception {
 
         final Class<AnnotationLocationCheck> clazz = AnnotationLocationCheck.class;
         getCheckMessage(clazz, "annotation.location.alone");
@@ -67,7 +67,7 @@ public void annotationTest() throws Exception {
     }
 
     @Test
-    public void annotationTestVariables() throws Exception {
+    public void testAnnotationVariables() throws Exception {
 
         final Class<AnnotationLocationCheck> clazz = AnnotationLocationCheck.class;
         getCheckMessage(clazz, "annotation.location.alone");
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
index 8535e22015..9ecea409fb 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void modifierOrderTest() throws Exception {
+    public void testModifierOrder() throws Exception {
 
         final Class<ModifierOrderCheck> clazz = ModifierOrderCheck.class;
         final String msgMod = "mod.order";
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
index e216cf40c7..a317e752f7 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void upperEllTest() throws Exception {
+    public void testUpperEll() throws Exception {
 
         final String[] expected = {
             "6:36: Should use uppercase 'L'.",
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule51identifiernames/CatchParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule51identifiernames/CatchParameterNameTest.java
index a182c2ba1f..b38e4c6005 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule51identifiernames/CatchParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule51identifiernames/CatchParameterNameTest.java
@@ -46,7 +46,7 @@ public static void setConfigurationBuilder() throws CheckstyleException {
     }
 
     @Test
-    public void catchParameterNameTest() throws Exception {
+    public void testCatchParameterName() throws Exception {
         final String msgKey = "name.invalidPattern";
 
         final String[] expected = {
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
index ebd57064cc..91f690b165 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
@@ -48,7 +48,7 @@ public static void setConfigurationBuilder() throws CheckstyleException {
     }
 
     @Test
-    public void goodPackageNameTest() throws Exception {
+    public void testGoodPackageName() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -59,7 +59,7 @@ public void goodPackageNameTest() throws Exception {
     }
 
     @Test
-    public void badPackageNameTest() throws Exception {
+    public void testBadPackageName() throws Exception {
 
         final String packagePath =
                 "com.google.checkstyle.test.chapter5naming.rule521packageNamesCamelCase";
@@ -76,7 +76,7 @@ public void badPackageNameTest() throws Exception {
     }
 
     @Test
-    public void badPackageName2Test() throws Exception {
+    public void testBadPackageName2() throws Exception {
 
         final String packagePath = "com.google.checkstyle.test.chapter5naming.rule521_packagenames";
         final String msg = getCheckMessage(checkConfig.getMessages(), MSG_KEY, packagePath, format);
@@ -92,7 +92,7 @@ public void badPackageName2Test() throws Exception {
     }
 
     @Test
-    public void badPackageName3Test() throws Exception {
+    public void testBadPackageName3() throws Exception {
 
         final String packagePath = "com.google.checkstyle.test.chapter5naming.rule521$packagenames";
         final String msg = getCheckMessage(checkConfig.getMessages(), MSG_KEY, packagePath, format);
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
index 6958ea2a44..ae72f38039 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void typeNameTest() throws Exception {
+    public void testTypeName() throws Exception {
 
         final Configuration checkConfig = getCheckConfig("TypeName");
         final String msgKey = "name.invalidPattern";
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
index 4c917561f3..1a3d3f52ab 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
@@ -36,7 +36,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void methodNameTest() throws Exception {
+    public void testMethodName() throws Exception {
 
         final Configuration checkConfig = getCheckConfig("MethodName");
         final String msgKey = "name.invalidPattern";
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
index 498a0d813c..a85881d132 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
@@ -48,7 +48,7 @@ public static void setConfigurationBuilder() throws CheckstyleException {
     }
 
     @Test
-    public void memberNameTest() throws Exception {
+    public void testMemberName() throws Exception {
 
         final String[] expected = {
             "5:16: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "mPublic", format),
@@ -73,7 +73,7 @@ public void memberNameTest() throws Exception {
     }
 
     @Test
-    public void simpleTest() throws Exception {
+    public void testSimple() throws Exception {
 
         final String[] expected = {
             "12:17: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "bad$Static", format),
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
index eb288b2448..a9eb52ce92 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
@@ -54,7 +54,7 @@ public static void setConfigurationBuilder() throws CheckstyleException {
     }
 
     @Test
-    public void generalParameterNameTest() throws Exception {
+    public void testGeneralParameterName() throws Exception {
 
         final String[] expected = {
             "10:21: " + getCheckMessage(config.getMessages(), MSG_KEY, "bB", format),
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
index dd6c265cb3..1e6ee14bc1 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
@@ -48,7 +48,7 @@ public static void setConfigurationBuilder() throws CheckstyleException {
     }
 
     @Test
-    public void localVariableNameTest() throws Exception {
+    public void testLocalVariableName() throws Exception {
 
         final String[] expected = {
             "27:13: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "aA", format),
@@ -70,7 +70,7 @@ public void localVariableNameTest() throws Exception {
     }
 
     @Test
-    public void oneCharTest() throws Exception {
+    public void testOneChar() throws Exception {
 
         final String[] expected = {
             "21:17: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "I_ndex", format),
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
index 43a130c28c..ad4ecbc148 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
@@ -40,7 +40,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void abbreviationAsWordInNameTest() throws Exception {
+    public void testAbbreviationAsWordInName() throws Exception {
 
         final int maxCapitalCount = 2;
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
index 220ec8a234..9fa2885ec3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void emptyBlockTestCatch() throws Exception {
+    public void testEmptyBlockCatch() throws Exception {
 
         final String[] expected = {
             "29:17: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "finally"),
diff --git a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
index 15738b7c37..381f2c5f7a 100755
--- a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void noFinalizerBasicTest() throws Exception {
+    public void testNoFinalizerBasic() throws Exception {
 
         final String msg = getCheckMessage(NoFinalizerCheck.class, "avoid.finalizer.method");
 
@@ -53,7 +53,7 @@ public void noFinalizerBasicTest() throws Exception {
     }
 
     @Test
-    public void noFinalizerExtendedTest() throws Exception {
+    public void testNoFinalizerExtended() throws Exception {
 
         final String msg = getCheckMessage(NoFinalizerCheck.class, "avoid.finalizer.method");
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
index 488697c26e..623b2555f3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void singleLineJavadocTest() throws Exception {
+    public void testSingleLineJavadoc() throws Exception {
 
         final String msg = getCheckMessage(SingleLineJavadocCheck.class, "singleline.javadoc");
 
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
index 98fbf9f11c..6181e105e3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
@@ -38,7 +38,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void javadocParagraphCorrectTest() throws Exception {
+    public void testJavadocParagraphCorrect() throws Exception {
 
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
@@ -50,7 +50,7 @@ public void javadocParagraphCorrectTest() throws Exception {
     }
 
     @Test
-    public void javadocParagraphIncorrectTest() throws Exception {
+    public void testJavadocParagraphIncorrect() throws Exception {
 
         final String msgBefore = getCheckMessage(JavadocParagraphCheck.class,
                 "javadoc.paragraph.line.before");
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
index fc0295b939..1134b54336 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
@@ -37,7 +37,7 @@ protected String getPath(String fileName) throws IOException {
     }
 
     @Test
-    public void javadocMethodTest() throws Exception {
+    public void testJavadocMethod() throws Exception {
 
         final String msg = getCheckMessage(JavadocMethodCheck.class, "javadoc.missing");
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
index ad1ced36d6..0f0665cd16 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java
@@ -229,13 +229,13 @@ public void setFile(File file) {
 
     /**
      * Sets configuration file.
-     * @param config the configuration file, URL, or resource to use
+     * @param configuration the configuration file, URL, or resource to use
      */
-    public void setConfig(String config) {
-        if (this.config != null) {
+    public void setConfig(String configuration) {
+        if (config != null) {
             throw new BuildException("Attribute 'config' has already been set");
         }
-        this.config = config;
+        config = configuration;
     }
 
     /**
@@ -391,9 +391,9 @@ private RootModule createRootModule() {
         final RootModule rootModule;
         try {
             final Properties props = createOverridingProperties();
-            final Configuration config =
+            final Configuration configuration =
                 ConfigurationLoader.loadConfiguration(
-                    this.config,
+                    config,
                     new PropertiesExpander(props),
                     !executeIgnoredModules);
 
@@ -403,7 +403,7 @@ private RootModule createRootModule() {
             final ModuleFactory factory = new PackageObjectFactory(
                     Checker.class.getPackage().getName() + ".", moduleClassLoader);
 
-            rootModule = (RootModule) factory.createModule(config.getName());
+            rootModule = (RootModule) factory.createModule(configuration.getName());
             rootModule.setModuleClassLoader(moduleClassLoader);
 
             if (rootModule instanceof Checker) {
@@ -413,7 +413,7 @@ private RootModule createRootModule() {
                 ((Checker) rootModule).setClassLoader(loader);
             }
 
-            rootModule.configure(config);
+            rootModule.configure(configuration);
         }
         catch (final CheckstyleException ex) {
             throw new BuildException(String.format(Locale.ROOT, "Unable to create Root Module: "
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
index 099ff5156d..8a97825856 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java
@@ -307,16 +307,6 @@ public String getFileName() {
         return fileName;
     }
 
-    /**
-     * Getter.
-     * @return the name of the file
-     * @deprecated use {@link #getFileName} instead
-     */
-    @Deprecated
-    public String getFilename() {
-        return fileName;
-    }
-
     /**
      * Checks if the specified line is blank.
      * @param lineNo the line number to check
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
index ae8d5995cb..b1e6688b11 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java
@@ -49,6 +49,10 @@
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 
 public class BaseCheckTestSupport {
+    protected static final String LF_REGEX = "\\\\n";
+
+    protected static final String CLRF_REGEX = "\\\\r\\\\n";
+
     protected final ByteArrayOutputStream stream = new ByteArrayOutputStream();
 
     protected static DefaultConfiguration createCheckConfig(Class<?> clazz) {
@@ -165,17 +169,46 @@ protected static void verifyAst(String expectedTextPrintFileName, String actualJ
      * @throws Exception if exception occurs during verification.
      */
     protected static void verifyAst(String expectedTextPrintFileName, String actualJavaFileName,
-            boolean withComments) throws Exception {
-        final String expectedContents = new String(Files.readAllBytes(
-            Paths.get(expectedTextPrintFileName)), StandardCharsets.UTF_8)
-            .replaceAll("\\\\r\\\\n", "\\\\n");
+                                    boolean withComments) throws Exception {
+        final String expectedContents = readFile(expectedTextPrintFileName);
+
         final String actualContents = AstTreeStringPrinter.printFileAst(
-                new File(actualJavaFileName), withComments).replaceAll("\\\\r\\\\n", "\\\\n");
+                new File(actualJavaFileName), withComments).replaceAll(CLRF_REGEX, LF_REGEX);
 
         assertEquals("Generated AST from Java file should match pre-defined AST", expectedContents,
                 actualContents);
     }
 
+    /**
+     * Verifies the javadoc tree generated for the supplied javadoc file against the expected tree
+     * in the supplied text file.
+     * @param expectedTextPrintFilename name of the text file having the expected tree.
+     * @param actualJavadocFilename name of the file containing the javadoc.
+     * @throws Exception if exception occurs during verification.
+     */
+    protected static void verifyJavadocTree(String expectedTextPrintFilename,
+                                            String actualJavadocFilename) throws Exception {
+
+        final String expectedContents = readFile(expectedTextPrintFilename);
+
+        final String actualContents = DetailNodeTreeStringPrinter.printFileAst(
+                new File(actualJavadocFilename)).replaceAll(CLRF_REGEX, LF_REGEX);
+
+        assertEquals("Generated tree from the javadoc file should match the pre-defined tree",
+                expectedContents, actualContents);
+    }
+
+    /** Reads the contents of a file.
+     * @param filename the name of the file whose contents are to be read
+     * @return contents of the file with all {@code \r\n} replaced by {@code \n}
+     * @throws IOException if I/O exception occurs while reading
+     */
+    protected static String readFile(String filename) throws IOException {
+        return new String(Files.readAllBytes(
+                Paths.get(filename)), StandardCharsets.UTF_8)
+                .replaceAll(CLRF_REGEX, LF_REGEX);
+    }
+
     /**
      * Performs verification of the file with the given file name. Uses specified configuration.
      * Expected messages are represented by the array of strings.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BriefUtLogger.java b/src/test/java/com/puppycrawl/tools/checkstyle/BriefUtLogger.java
index fc6246492a..a8a0888410 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BriefUtLogger.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BriefUtLogger.java
@@ -41,9 +41,4 @@ public BriefUtLogger(OutputStream out) {
     public void auditStarted(AuditEvent event) {
         //has to NOT log audit started event
     }
-
-    @Override
-    public void auditFinished(AuditEvent event) {
-        super.auditFinished(event);
-    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
index 61a3a26792..907d9e58bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -275,9 +275,12 @@ public void testFileExtensions() throws Exception {
 
         // comparing to 1 as there is only one legal file in input
         final int numLegalFiles = 1;
-        assertEquals(numLegalFiles, counter);
-        assertEquals(numLegalFiles, auditAdapter.getNumFilesStarted());
-        assertEquals(numLegalFiles, auditAdapter.getNumFilesFinished());
+        assertEquals("There were more legal files than expected",
+                numLegalFiles, counter);
+        assertEquals("Audit was started on larger amount of files than expected",
+                numLegalFiles, auditAdapter.getNumFilesStarted());
+        assertEquals("Audit was finished on larger amount of files than expected",
+                numLegalFiles, auditAdapter.getNumFilesFinished());
     }
 
     @Test
@@ -303,9 +306,12 @@ public void testIgnoredFileExtensions() throws Exception {
 
         // comparing to 0 as there is no legal file in input
         final int numLegalFiles = 0;
-        assertEquals(numLegalFiles, counter);
-        assertEquals(numLegalFiles, auditAdapter.getNumFilesStarted());
-        assertEquals(numLegalFiles, auditAdapter.getNumFilesFinished());
+        assertEquals("There were more legal files than expected",
+                numLegalFiles, counter);
+        assertEquals("Audit was started on larger amount of files than expected",
+                numLegalFiles, auditAdapter.getNumFilesStarted());
+        assertEquals("Audit was finished on larger amount of files than expected",
+                numLegalFiles, auditAdapter.getNumFilesFinished());
     }
 
     @SuppressWarnings("deprecation")
@@ -330,7 +336,8 @@ public void testSetters() {
             fail("Exception is expected");
         }
         catch (UnsupportedEncodingException ex) {
-            assertEquals("unsupported charset: 'UNKNOWN-CHARSET'", ex.getMessage());
+            assertEquals("Error message is not expected",
+                    "unsupported charset: 'UNKNOWN-CHARSET'", ex.getMessage());
         }
     }
 
@@ -343,8 +350,9 @@ public void testNoClassLoaderNoModuleFactory() {
             fail("Exception is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("if no custom moduleFactory is set, "
-                            + "moduleClassLoader must be specified", ex.getMessage());
+            assertEquals("Error message is not expected",
+                    "if no custom moduleFactory is set, moduleClassLoader must be specified",
+                    ex.getMessage());
         }
     }
 
@@ -370,15 +378,19 @@ public void testFinishLocalSetupFullyInitialized() throws Exception {
         checker.finishLocalSetup();
 
         final Context context = (Context) Whitebox.getInternalState(checker, "childContext");
-        assertEquals(System.getProperty("file.encoding", "UTF-8"), context.get("charset"));
-        assertEquals(contextClassLoader, context.get("classLoader"));
-        assertEquals("error", context.get("severity"));
-        assertEquals("testBaseDir", context.get("basedir"));
+        assertEquals("Charset was different than expected",
+                System.getProperty("file.encoding", "UTF-8"), context.get("charset"));
+        assertEquals("Was used unsufficient classloader",
+                contextClassLoader, context.get("classLoader"));
+        assertEquals("Severity is set to unexpected value",
+                "error", context.get("severity"));
+        assertEquals("Basedir is set to unexpected value",
+                "testBaseDir", context.get("basedir"));
 
         final Field sLocale = LocalizedMessage.class.getDeclaredField("sLocale");
         sLocale.setAccessible(true);
         final Locale locale = (Locale) sLocale.get(null);
-        assertEquals(Locale.ITALY, locale);
+        assertEquals("Locale is set to unexpected value", Locale.ITALY, locale);
     }
 
     @Test
@@ -394,7 +406,8 @@ public void testSetupChildExceptions() {
             fail("Exception is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("java.lang.String is not allowed as a child in Checker", ex.getMessage());
+            assertEquals("Error message is not expected",
+                    "java.lang.String is not allowed as a child in Checker", ex.getMessage());
         }
     }
 
@@ -426,7 +439,8 @@ public void testDestroyCheckerWithWrongCacheFileNameLength() throws Exception {
             fail("Exception did not happen");
         }
         catch (IllegalStateException ex) {
-            assertTrue(ex.getCause() instanceof IOException);
+            assertTrue("Cause of exception differs from IOException",
+                    ex.getCause() instanceof IOException);
         }
     }
 
@@ -437,7 +451,8 @@ public void testDestroyCheckerWithWrongCacheFileNameLength() throws Exception {
     @Test
     public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterface()
             throws Exception {
-        assertFalse(ExternalResourceHolder.class.isAssignableFrom(HiddenFieldCheck.class));
+        assertFalse("ExternalResourceHolder has changed his parent",
+                ExternalResourceHolder.class.isAssignableFrom(HiddenFieldCheck.class));
         final DefaultConfiguration checkConfig = createCheckConfig(HiddenFieldCheck.class);
 
         final DefaultConfiguration treeWalkerConfig = createCheckConfig(TreeWalker.class);
@@ -470,7 +485,8 @@ public void testCacheAndCheckWhichDoesNotImplementExternalResourceHolderInterfac
         final Properties cacheAfterSecondRun = new Properties();
         cacheAfterSecondRun.load(Files.newBufferedReader(cacheFile.toPath()));
 
-        assertEquals(cacheAfterFirstRun, cacheAfterSecondRun);
+        assertEquals("Cache from first run differs from second run cache",
+                cacheAfterFirstRun, cacheAfterSecondRun);
     }
 
     @Test
@@ -498,12 +514,15 @@ public void testWithCacheWithNoViolation() throws Exception {
 
         // There should 2 objects in cache: processed file (file.java) and checker configuration.
         final int expectedNumberOfObjectsInCache = 2;
-        assertEquals(expectedNumberOfObjectsInCache, cache.size());
+        assertEquals("Cache has unexpected size",
+                expectedNumberOfObjectsInCache, cache.size());
 
         final String expectedConfigHash = "68EE3C3B4593FD8D86159C670C504542E20C6FA0";
-        assertEquals(expectedConfigHash, cache.getProperty(PropertyCacheFile.CONFIG_HASH_KEY));
+        assertEquals("Cache has unexpected hash",
+                expectedConfigHash, cache.getProperty(PropertyCacheFile.CONFIG_HASH_KEY));
 
-        assertNotNull(cache.getProperty(tmpFile.getPath()));
+        assertNotNull("Cache file has null path",
+                cache.getProperty(tmpFile.getPath()));
     }
 
     @Test
@@ -531,8 +550,10 @@ public void testClearExistingCache() throws Exception {
         final Properties cacheAfterClear = new Properties();
         cacheAfterClear.load(Files.newBufferedReader(cacheFile.toPath()));
 
-        assertEquals(1, cacheAfterClear.size());
-        assertNotNull(cacheAfterClear.getProperty(PropertyCacheFile.CONFIG_HASH_KEY));
+        assertEquals("Cache has unexpected size",
+                1, cacheAfterClear.size());
+        assertNotNull("Cache has null hash",
+                cacheAfterClear.getProperty(PropertyCacheFile.CONFIG_HASH_KEY));
 
         final String pathToEmptyFile = temporaryFolder.newFile("file.java").getPath();
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
@@ -542,13 +563,15 @@ public void testClearExistingCache() throws Exception {
         final Properties cacheAfterSecondRun = new Properties();
         cacheAfterSecondRun.load(Files.newBufferedReader(cacheFile.toPath()));
 
-        assertNotNull(cacheAfterSecondRun.getProperty(pathToEmptyFile));
-        assertEquals(
+        assertNotNull("Cache has null path",
+                cacheAfterSecondRun.getProperty(pathToEmptyFile));
+        assertEquals("Cash have changed it hash",
             cacheAfterClear.getProperty(PropertyCacheFile.CONFIG_HASH_KEY),
             cacheAfterSecondRun.getProperty(PropertyCacheFile.CONFIG_HASH_KEY)
         );
         final int expectedNumberOfObjectsInCacheAfterSecondRun = 2;
-        assertEquals(expectedNumberOfObjectsInCacheAfterSecondRun, cacheAfterSecondRun.size());
+        assertEquals("Cache has changed number of items",
+                expectedNumberOfObjectsInCacheAfterSecondRun, cacheAfterSecondRun.size());
     }
 
     @Test
@@ -581,9 +604,12 @@ public void testCatchErrorInProcessFilesMethod() throws Exception {
         }
         // -@cs[IllegalCatchExtended] Testing for catch Error is part of 100% coverage.
         catch (Error error) {
-            assertThat(error.getCause(), instanceOf(IOError.class));
-            assertThat(error.getCause().getCause(), instanceOf(InternalError.class));
-            assertEquals(errorMessage, error.getCause().getCause().getMessage());
+            assertThat("Error cause differs from IOError",
+                    error.getCause(), instanceOf(IOError.class));
+            assertThat("Error cause is not InternalError",
+                    error.getCause().getCause(), instanceOf(InternalError.class));
+            assertEquals("Error message is not expected",
+                    errorMessage, error.getCause().getCause().getMessage());
         }
     }
 
@@ -594,7 +620,8 @@ public void testCatchErrorInProcessFilesMethod() throws Exception {
     @Test
     public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterface()
             throws Exception {
-        assertFalse(ExternalResourceHolder.class.isAssignableFrom(DummyFilter.class));
+        assertFalse("ExternalResourceHolder has changed its parent",
+                ExternalResourceHolder.class.isAssignableFrom(DummyFilter.class));
         final DefaultConfiguration filterConfig = createCheckConfig(DummyFilter.class);
 
         final DefaultConfiguration checkerConfig = new DefaultConfiguration("checkstyle_checks");
@@ -620,16 +647,20 @@ public void testCacheAndFilterWhichDoesNotImplementExternalResourceHolderInterfa
         cacheAfterSecondRun.load(Files.newBufferedReader(cacheFile.toPath()));
 
         assertEquals(
+                "Cache file has changed its path",
             cacheAfterFirstRun.getProperty(pathToEmptyFile),
             cacheAfterSecondRun.getProperty(pathToEmptyFile)
         );
         assertEquals(
+                "Cache has changed its hash",
             cacheAfterFirstRun.getProperty(PropertyCacheFile.CONFIG_HASH_KEY),
             cacheAfterSecondRun.getProperty(PropertyCacheFile.CONFIG_HASH_KEY)
         );
         final int expectedNumberOfObjectsInCache = 2;
-        assertEquals(expectedNumberOfObjectsInCache, cacheAfterFirstRun.size());
-        assertEquals(expectedNumberOfObjectsInCache, cacheAfterSecondRun.size());
+        assertEquals("Number of items in cache differs from expected",
+                expectedNumberOfObjectsInCache, cacheAfterFirstRun.size());
+        assertEquals("Number of items in cache differs from expected",
+                expectedNumberOfObjectsInCache, cacheAfterSecondRun.size());
     }
 
     /**
@@ -672,7 +703,8 @@ public void testCacheAndCheckWhichAddsNewResourceLocationButKeepsSameCheckerInst
         cacheAfterFirstRun.load(Files.newBufferedReader(cacheFile.toPath()));
 
         final int expectedNumberOfObjectsInCacheAfterFirstRun = 3;
-        assertEquals(expectedNumberOfObjectsInCacheAfterFirstRun, cacheAfterFirstRun.size());
+        assertEquals("Number of items in cache differs from expected",
+                expectedNumberOfObjectsInCacheAfterFirstRun, cacheAfterFirstRun.size());
 
         // Change a list of external resources which are used by the check
         final String secondExternalResourceLocation = "checks" + File.separator
@@ -685,23 +717,28 @@ public void testCacheAndCheckWhichAddsNewResourceLocationButKeepsSameCheckerInst
         final Properties cacheAfterSecondRun = new Properties();
         cacheAfterSecondRun.load(Files.newBufferedReader(cacheFile.toPath()));
 
-        assertEquals(
+        assertEquals("Cache file has changed its path",
             cacheAfterFirstRun.getProperty(pathToEmptyFile),
             cacheAfterSecondRun.getProperty(pathToEmptyFile)
         );
         assertEquals(
+                "Cache has changed its hash",
             cacheAfterFirstRun.getProperty(PropertyCacheFile.CONFIG_HASH_KEY),
             cacheAfterSecondRun.getProperty(PropertyCacheFile.CONFIG_HASH_KEY)
         );
-        assertEquals(
+        assertEquals("Cache has changed its resource key",
             cacheAfterFirstRun.getProperty(firstExternalResourceKey),
             cacheAfterSecondRun.getProperty(firstExternalResourceKey)
         );
-        assertNotNull(cacheAfterFirstRun.getProperty(firstExternalResourceKey));
+        assertNotNull("Cache has null as a resource key",
+                cacheAfterFirstRun.getProperty(firstExternalResourceKey));
         final int expectedNumberOfObjectsInCacheAfterSecondRun = 4;
-        assertEquals(expectedNumberOfObjectsInCacheAfterSecondRun, cacheAfterSecondRun.size());
-        assertNull(cacheAfterFirstRun.getProperty(secondExternalResourceKey));
-        assertNotNull(cacheAfterSecondRun.getProperty(secondExternalResourceKey));
+        assertEquals("Number of items in cache differs from expected",
+                expectedNumberOfObjectsInCacheAfterSecondRun, cacheAfterSecondRun.size());
+        assertNull("Cache has not null as a resource key",
+                cacheAfterFirstRun.getProperty(secondExternalResourceKey));
+        assertNotNull("Cache has null as a resource key",
+                cacheAfterSecondRun.getProperty(secondExternalResourceKey));
     }
 
     @Test
@@ -795,7 +832,8 @@ public void testCheckerProcessCallAllNeededMethodsOfFileSets() throws Exception
         checker.process(Collections.singletonList(new File("dummy.java")));
         final List<String> expected =
             Arrays.asList("beginProcessing", "finishProcessing", "destroy");
-        assertArrayEquals(expected.toArray(), fileSet.getMethodCalls().toArray());
+        assertArrayEquals("Method calls were not expected",
+                expected.toArray(), fileSet.getMethodCalls().toArray());
     }
 
     @Test
@@ -803,7 +841,8 @@ public void testSetFileSetCheckSetsMessageDispatcher() throws Exception {
         final DummyFileSet fileSet = new DummyFileSet();
         final Checker checker = new Checker();
         checker.addFileSetCheck(fileSet);
-        assertEquals(checker, fileSet.getInternalMessageDispatcher());
+        assertEquals("Message dispatcher was not expected",
+                checker, fileSet.getInternalMessageDispatcher());
     }
 
     @Test
@@ -886,10 +925,14 @@ public void testDefaultLoggerClosesItStreams() throws Exception {
 
         verify(checker, tmpFile.getPath(), tmpFile.getPath(), expected);
 
-        assertEquals(1, testInfoOutputStream.getCloseCount());
-        assertEquals(3, testInfoOutputStream.getFlushCount());
-        assertEquals(1, testErrorOutputStream.getCloseCount());
-        assertEquals(1, testErrorOutputStream.getFlushCount());
+        assertEquals("Close count was not expected",
+                1, testInfoOutputStream.getCloseCount());
+        assertEquals("Flush count was not expected",
+                3, testInfoOutputStream.getFlushCount());
+        assertEquals("Close count was not expected",
+                1, testErrorOutputStream.getCloseCount());
+        assertEquals("Flush count was not expected",
+                1, testErrorOutputStream.getFlushCount());
     }
 
     @Test
@@ -905,8 +948,10 @@ public void testXmlLoggerClosesItStreams() throws Exception {
 
         verify(checker, tmpFile.getPath(), tmpFile.getPath(), expected);
 
-        assertEquals(1, testInfoOutputStream.getCloseCount());
-        assertEquals(0, testInfoOutputStream.getFlushCount());
+        assertEquals("Close count was not expected",
+                1, testInfoOutputStream.getCloseCount());
+        assertEquals("Flush count was not expected",
+                0, testInfoOutputStream.getFlushCount());
     }
 
     private static class DummyFilter implements Filter {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 3955efa2d6..bf35517101 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -147,7 +147,8 @@ public void testWithCheckNotHavingTreeWalkerAsParent() throws Exception {
             fail("CheckstyleException is expected");
         }
         catch (CheckstyleException exception) {
-            assertTrue(exception.getMessage().contains("TreeWalker is not allowed as a parent of"));
+            assertTrue("Error message is unexpected",
+                    exception.getMessage().contains("TreeWalker is not allowed as a parent of"));
         }
     }
 
@@ -169,7 +170,8 @@ public void testForInvalidCheckImplementation() throws Exception {
             verify(checkConfig, pathToEmptyFile, expected);
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().contains("isCommentNodesRequired"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().contains("isCommentNodesRequired"));
         }
     }
 
@@ -212,7 +214,8 @@ public void testProcessWithParserThrowable() throws Exception {
             treeWalker.processFiltered(file, lines);
         }
         catch (CheckstyleException exception) {
-            assertTrue(exception.getMessage().contains(
+            assertTrue("Error message is unexpected",
+                    exception.getMessage().contains(
                     "occurred during the analysis of file"));
         }
     }
@@ -233,7 +236,8 @@ public void testProcessWithRecognitionException() throws Exception {
             treeWalker.processFiltered(file, lines);
         }
         catch (CheckstyleException exception) {
-            assertTrue(exception.getMessage().contains(
+            assertTrue("Error message is unexpected",
+                    exception.getMessage().contains(
                     "TokenStreamRecognitionException occurred during the analysis of file"));
         }
     }
@@ -250,7 +254,8 @@ public void testRequiredTokenIsNotInDefaultTokens() throws Exception {
             fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith("cannot initialize module"
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("cannot initialize module"
                 + " com.puppycrawl.tools.checkstyle.TreeWalker - Token \""
                 + TokenTypes.ASSIGN + "\" from required"
                 + " tokens was not found in default tokens list in check"));
@@ -364,9 +369,12 @@ public void testFinishLocalSetupFullyInitialized() throws Exception {
         treeWalker.finishLocalSetup();
 
         final Context context = (Context) Whitebox.getInternalState(treeWalker, "childContext");
-        assertEquals(contextClassLoader, context.get("classLoader"));
-        assertEquals("error", context.get("severity"));
-        assertEquals(String.valueOf(100), context.get("tabWidth"));
+        assertEquals("Classloader object differs from expected",
+                contextClassLoader, context.get("classLoader"));
+        assertEquals("Severity differs from expected",
+                "error", context.get("severity"));
+        assertEquals("Tab width differs from expected",
+                String.valueOf(100), context.get("tabWidth"));
     }
 
     @Test
@@ -376,7 +384,7 @@ public void testCheckInitIsCalledInTreeWalker() throws Exception {
         final File file = temporaryFolder.newFile("file.pdf");
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
         verify(checkConfig, file.getPath(), expected);
-        assertTrue(VerifyInitCheck.isInitWasCalled());
+        assertTrue("Init was not called", VerifyInitCheck.isInitWasCalled());
     }
 
     private static class BadJavaDocCheck extends AbstractCheck {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
index 5d24bd3725..4fa9be54ab 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
@@ -112,10 +112,13 @@ public final void testPathsOneFile() throws IOException {
         antTask.execute();
 
         // then
-        assertTrue(TestRootModuleChecker.isProcessed());
+        assertTrue("Checker is not processed",
+                TestRootModuleChecker.isProcessed());
         final List<File> filesToCheck = TestRootModuleChecker.getFilesToCheck();
-        assertThat(filesToCheck.size(), is(1));
-        assertThat(filesToCheck.get(0).getAbsolutePath(), is(getPath(FLAWLESS_INPUT)));
+        assertThat("There more files to check then expected",
+                filesToCheck.size(), is(1));
+        assertThat("The path of file differs from expected",
+                filesToCheck.get(0).getAbsolutePath(), is(getPath(FLAWLESS_INPUT)));
     }
 
     @Test
@@ -134,10 +137,13 @@ public final void testPathsDirectoryWithNestedFile() throws IOException {
         antTask.execute();
 
         // then
-        assertTrue(TestRootModuleChecker.isProcessed());
+        assertTrue("Checker is not processed",
+                TestRootModuleChecker.isProcessed());
         final List<File> filesToCheck = TestRootModuleChecker.getFilesToCheck();
-        assertThat(filesToCheck.size(), is(1));
-        assertThat(filesToCheck.get(0).getAbsolutePath(), is(getPath(FLAWLESS_INPUT)));
+        assertThat("There more files to check then expected",
+                filesToCheck.size(), is(1));
+        assertThat("The path of file differs from expected",
+                filesToCheck.get(0).getAbsolutePath(), is(getPath(FLAWLESS_INPUT)));
     }
 
     @Test
@@ -148,7 +154,8 @@ public final void testCustomRootModule() throws IOException {
         antTask.setFile(new File(getPath(FLAWLESS_INPUT)));
         antTask.execute();
 
-        assertTrue(TestRootModuleChecker.isProcessed());
+        assertTrue("Checker is not processed",
+                TestRootModuleChecker.isProcessed());
     }
 
     @Test
@@ -170,7 +177,8 @@ public final void testNoConfigFile() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertEquals("Must specify 'config'.", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "Must specify 'config'.", ex.getMessage());
         }
     }
 
@@ -185,7 +193,8 @@ public final void testNonExistingConfig() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to create Root Module: configLocation"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("Unable to create Root Module: config"));
         }
     }
 
@@ -200,7 +209,8 @@ public final void testEmptyConfigFile() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to create Root Module: configLocation"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("Unable to create Root Module: config"));
         }
     }
 
@@ -212,7 +222,8 @@ public final void testNoFile() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertEquals("Must specify at least one of 'file' or nested 'fileset' or 'path'.",
+            assertEquals("Error message is unexpected",
+                    "Must specify at least one of 'file' or nested 'fileset' or 'path'.",
                 ex.getMessage());
         }
     }
@@ -227,7 +238,8 @@ public final void testMaxWarningExceeded() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertEquals("Got 0 errors and 1 warnings.", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "Got 0 errors and 1 warnings.", ex.getMessage());
         }
     }
 
@@ -258,7 +270,8 @@ public final void testFailureProperty() throws IOException {
         catch (BuildException ex) {
             final Map<String, Object> hashtable = project.getProperties();
             final Object propertyValue = hashtable.get(failurePropertyName);
-            assertEquals("Got 2 errors and 0 warnings.", propertyValue);
+            assertEquals("Number of errors is unexpected",
+                    "Got 2 errors and 0 warnings.", propertyValue);
         }
     }
 
@@ -292,17 +305,18 @@ public final void testExecuteIgnoredModules() throws IOException {
         antTask.execute();
 
         final List<String> output = FileUtils.readLines(outputFile);
-        assertEquals("Starting audit...", output.get(0));
-        assertTrue(output.get(1).startsWith("[WARN]"));
-        assertTrue(output.get(1).endsWith("InputCheckstyleAntTaskError.java:4: "
+        final String errorMessage = "Content of file with violations differs from expected";
+        assertEquals(errorMessage, "Starting audit...", output.get(0));
+        assertTrue(errorMessage, output.get(1).startsWith("[WARN]"));
+        assertTrue(errorMessage, output.get(1).endsWith("InputCheckstyleAntTaskError.java:4: "
                 + "@incomplete=Some javadoc [WriteTag]"));
-        assertTrue(output.get(2).startsWith("[ERROR]"));
-        assertTrue(output.get(2).endsWith("InputCheckstyleAntTaskError.java:7: "
+        assertTrue(errorMessage, output.get(2).startsWith("[ERROR]"));
+        assertTrue(errorMessage, output.get(2).endsWith("InputCheckstyleAntTaskError.java:7: "
                 + "Line is longer than 70 characters (found 80). [LineLength]"));
-        assertTrue(output.get(3).startsWith("[ERROR]"));
-        assertTrue(output.get(3).endsWith("InputCheckstyleAntTaskError.java:9: "
+        assertTrue(errorMessage, output.get(3).startsWith("[ERROR]"));
+        assertTrue(errorMessage, output.get(3).endsWith("InputCheckstyleAntTaskError.java:9: "
                 + "Line is longer than 70 characters (found 81). [LineLength]"));
-        assertEquals("Audit done.", output.get(4));
+        assertEquals(errorMessage, "Audit done.", output.get(4));
     }
 
     @Test
@@ -336,7 +350,8 @@ public final void testSimultaneousConfiguration() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertEquals(expected, ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    expected, ex.getMessage());
         }
     }
 
@@ -358,7 +373,8 @@ public final void testSetPropertiesNonExistingFile() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertTrue(ex.getMessage().startsWith("Error loading Properties file"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("Error loading Properties file"));
         }
     }
 
@@ -382,7 +398,8 @@ public final void testXmlOutput() throws IOException {
         for (int i = 0; i < expected.size(); i++) {
             final String line = expected.get(i);
             if (!line.startsWith("<checkstyle version") && !line.startsWith("<file")) {
-                assertEquals(line, actual.get(i));
+                assertEquals("Content of file with violations differs from expected",
+                        line, actual.get(i));
             }
         }
     }
@@ -400,7 +417,8 @@ public final void testCreateListenerException() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to create listeners: formatters"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("Unable to create listeners: formatters"));
         }
     }
 
@@ -412,7 +430,8 @@ public void testSetInvalidType() {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertEquals("foo is not a legal value for this attribute", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "foo is not a legal value for this attribute", ex.getMessage());
         }
     }
 
@@ -421,7 +440,8 @@ public void testSetClassName() {
         final String customName = "customName";
         final CheckstyleAntTask.Listener listener = new CheckstyleAntTask.Listener();
         listener.setClassname(customName);
-        assertEquals(customName, listener.getClassname());
+        assertEquals("Class name is unexpected",
+                customName, listener.getClassname());
     }
 
     @Test
@@ -429,14 +449,16 @@ public void testSetFileValueByFile() throws IOException {
         final String filename = getPath("ant/checkstyleAntTest.properties");
         final CheckstyleAntTask.Property property = new CheckstyleAntTask.Property();
         property.setFile(new File(filename));
-        assertEquals(property.getValue(), new File(filename).getAbsolutePath());
+        assertEquals("File path is unexpected",
+                property.getValue(), new File(filename).getAbsolutePath());
     }
 
     @Test
     public void testDefaultLoggerListener() throws IOException {
         final CheckstyleAntTask.Formatter formatter = new CheckstyleAntTask.Formatter();
         formatter.setUseFile(false);
-        assertTrue(formatter.createListener(null) instanceof DefaultLogger);
+        assertTrue("Listener instance has unexpected type",
+                formatter.createListener(null) instanceof DefaultLogger);
     }
 
     @Test
@@ -444,7 +466,8 @@ public void testDefaultLoggerListenerWithToFile() throws IOException {
         final CheckstyleAntTask.Formatter formatter = new CheckstyleAntTask.Formatter();
         formatter.setUseFile(false);
         formatter.setTofile(new File("target/"));
-        assertTrue(formatter.createListener(null) instanceof DefaultLogger);
+        assertTrue("Listener instance has unexpected type",
+                formatter.createListener(null) instanceof DefaultLogger);
     }
 
     @Test
@@ -454,7 +477,8 @@ public void testXmlLoggerListener() throws IOException {
         final CheckstyleAntTask.Formatter formatter = new CheckstyleAntTask.Formatter();
         formatter.setType(formatterType);
         formatter.setUseFile(false);
-        assertTrue(formatter.createListener(null) instanceof XMLLogger);
+        assertTrue("Listener instance has unexpected type",
+                formatter.createListener(null) instanceof XMLLogger);
     }
 
     @Test
@@ -465,7 +489,8 @@ public void testXmlLoggerListenerWithToFile() throws IOException {
         formatter.setType(formatterType);
         formatter.setUseFile(false);
         formatter.setTofile(new File("target/"));
-        assertTrue(formatter.createListener(null) instanceof XMLLogger);
+        assertTrue("Listener instance has unexpected type",
+                formatter.createListener(null) instanceof XMLLogger);
     }
 
     @Test
@@ -496,7 +521,8 @@ public void testCheckerException() throws IOException {
             fail("Exception is expected");
         }
         catch (BuildException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to process files:"));
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith("Unable to process files:"));
         }
     }
 
@@ -528,12 +554,15 @@ public final void testExecuteLogOutput() throws Exception {
 
         final List<MessageLevelPair> loggedMessages = antTask.getLoggedMessages();
 
-        assertEquals(expectedList.size(), loggedMessages.size());
+        assertEquals("Amount of log messages is unexpected",
+                expectedList.size(), loggedMessages.size());
         for (int i = 0; i < expectedList.size(); i++) {
             final MessageLevelPair expected = expectedList.get(i);
             final MessageLevelPair actual = loggedMessages.get(i);
-            assertTrue(actual.getMsg().startsWith(expected.getMsg()));
-            assertEquals(expected.getLevel(), actual.getLevel());
+            assertTrue("Log messages were expected",
+                    actual.getMsg().startsWith(expected.getMsg()));
+            assertEquals("Log messages were expected",
+                    expected.getLevel(), actual.getLevel());
         }
 
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
index 5f9c5d44f5..c12400c503 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
@@ -50,20 +50,22 @@ private static Method getGetMessageBundleMethod() throws Exception {
 
     @Test
     public void testGetMessageBundleWithPackage() throws Exception {
-        assertEquals("com.mycompany.checks.messages",
+        assertEquals("Message bundle differs from expected",
+                "com.mycompany.checks.messages",
             getGetMessageBundleMethod().invoke(null, "com.mycompany.checks.MyCoolCheck"));
     }
 
     @Test
     public void testGetMessageBundleWithoutPackage() throws Exception {
-        assertEquals("messages",
+        assertEquals("Message bundle differs from expected",
+                "messages",
             getGetMessageBundleMethod().invoke(null, "MyCoolCheck"));
     }
 
     @Test
     public void testCustomId() {
         emptyCheck.setId("MyId");
-        assertEquals("MyId", emptyCheck.getId());
+        assertEquals("Id differs from expected", "MyId", emptyCheck.getId());
     }
 
     @Test
@@ -78,8 +80,10 @@ public void testCustomMessage() throws Exception {
         emptyCheck.log(0, "msgKey");
 
         final SortedSet<LocalizedMessage> messages = collector.getMessages();
-        assertEquals(1, messages.size());
-        assertEquals("This is a custom message.", messages.first()
+        assertEquals("Amount of messages differs from expected",
+                1, messages.size());
+        assertEquals("Message differs from expected",
+                "This is a custom message.", messages.first()
                 .getMessage());
     }
 
@@ -95,9 +99,11 @@ public void testCustomMessageWithParameters() throws Exception {
         emptyCheck.log(0, "msgKey", "TestParam");
 
         final SortedSet<LocalizedMessage> messages = collector.getMessages();
-        assertEquals(1, messages.size());
+        assertEquals("Amount of messages differs from expected",
+                1, messages.size());
 
-        assertEquals("This is a custom message with TestParam.",
+        assertEquals("Message differs from expected",
+                "This is a custom message with TestParam.",
                 messages.first().getMessage());
     }
 
@@ -115,7 +121,8 @@ public void testCustomMessageWithParametersNegative() throws Exception {
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unmatched braces in the pattern.", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "Unmatched braces in the pattern.", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
index b181594a04..165e5ac778 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
@@ -19,7 +19,6 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
@@ -30,14 +29,6 @@
 
 public class FileContentsTest {
 
-    @Test
-    @SuppressWarnings("deprecation")
-    public void testDeprecatedCtor() {
-        // just to make UT coverage 100%
-        final FileContents fileContents = new FileContents("filename.java", "1", "2");
-        assertEquals("filename.java", fileContents.getFilename());
-    }
-
     @Test
     @SuppressWarnings("deprecation")
     public void testDeprecatedAbbreviatedMethod() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
index 7bed04046a..0e92608a7d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
@@ -43,7 +43,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final ArrayTypeStyleCheck checkObj = new ArrayTypeStyleCheck();
         final int[] expected = {TokenTypes.ARRAY_DECLARATOR};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens differs from expected",
+                expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -78,7 +79,9 @@ public void testGetAcceptableTokens() {
         final int[] expected = {TokenTypes.ARRAY_DECLARATOR };
         final ArrayTypeStyleCheck check = new ArrayTypeStyleCheck();
         final int[] actual = check.getAcceptableTokens();
-        assertEquals(1, actual.length);
-        assertArrayEquals(expected, actual);
+        assertEquals("Amount of acceptable tokens differs from expected",
+                1, actual.length);
+        assertArrayEquals("Acceptable tokens differs from expected",
+                expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
index 74a696ba67..0902c9c8c0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
@@ -156,7 +156,8 @@ public void testGetRequiredTokens() {
             TokenTypes.STRING_LITERAL,
             TokenTypes.CHAR_LITERAL,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens differ from expected",
+                expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -333,7 +334,8 @@ public void testGetAcceptableTokens() {
         final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck();
         final int[] actual = check.getAcceptableTokens();
         final int[] expected = {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Acceptable tokens differ from expected",
+                expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
index 57c6b91797..c7604b179d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/FileSetCheckLifecycleTest.java
@@ -57,7 +57,8 @@ protected DefaultConfiguration createCheckerConfig(
     @Test
     public void testGetRequiredTokens() {
         final FileContentsHolder checkObj = new FileContentsHolder();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens array is not empty",
+                CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
index 48aa653c35..986cea6102 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
@@ -157,7 +157,8 @@ public void testSetLineSeparatorFailure()
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
+            assertTrue("Error message is unexpected",
+                    ex.getMessage().startsWith(
                     "cannot initialize module com.puppycrawl.tools.checkstyle."
                             + "checks.NewlineAtEndOfFileCheck - "
                             + "Cannot set property 'lineSeparator' to 'ct' in module"));
@@ -187,9 +188,11 @@ public void testWrongFile() throws Exception {
         lines.add("txt");
         final File impossibleFile = new File("");
         final Set<LocalizedMessage> messages = check.process(impossibleFile, lines);
-        assertEquals(1, messages.size());
+        assertEquals("Ammount of messages is unexpected",
+                1, messages.size());
         final Iterator<LocalizedMessage> iterator = messages.iterator();
-        assertEquals(getCheckMessage(MSG_KEY_UNABLE_OPEN, ""), iterator.next().getMessage());
+        assertEquals("Violation message differs from expected",
+                getCheckMessage(MSG_KEY_UNABLE_OPEN, ""), iterator.next().getMessage());
     }
 
     @Test
@@ -207,12 +210,15 @@ public void testWrongSeparatorLength() throws Exception {
             method.invoke(new NewlineAtEndOfFileCheck(), file);
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof IOException);
+            assertTrue("Error type is unexpected",
+                    ex.getCause() instanceof IOException);
             if (System.getProperty("os.name").toLowerCase(ENGLISH).startsWith("windows")) {
-                assertEquals("Unable to read 2 bytes, got 0", ex.getCause().getMessage());
+                assertEquals("Error message is unexpected",
+                        "Unable to read 2 bytes, got 0", ex.getCause().getMessage());
             }
             else {
-                assertEquals("Unable to read 1 bytes, got 0", ex.getCause().getMessage());
+                assertEquals("Error message is unexpected",
+                        "Unable to read 1 bytes, got 0", ex.getCause().getMessage());
             }
         }
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
index b4e451d8b3..6dd3dae7e5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
@@ -52,7 +52,8 @@ public void testGetRequiredTokens() {
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens array differs from expected",
+                expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -81,7 +82,8 @@ public void testGetAcceptableTokens() {
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Acceptable tokens array differs from expected",
+                expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
index 37e02fd6e4..a1c01c8ab4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
@@ -68,7 +68,8 @@ protected String getNonCompilablePath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final SuppressWarningsHolder checkObj = new SuppressWarningsHolder();
         final int[] expected = {TokenTypes.ANNOTATION};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Required token array differs from expected",
+                expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -91,8 +92,10 @@ public void testCustomAnnotation() throws Exception {
 
     @Test
     public void testGetDefaultAlias() {
-        assertEquals("somename", SuppressWarningsHolder.getDefaultAlias("SomeName"));
-        assertEquals("somename", SuppressWarningsHolder.getDefaultAlias("SomeNameCheck"));
+        assertEquals("Diffault alias differs from expected",
+                "somename", SuppressWarningsHolder.getDefaultAlias("SomeName"));
+        assertEquals("Diffault alias differs from expected",
+                "somename", SuppressWarningsHolder.getDefaultAlias("SomeNameCheck"));
     }
 
     @Test
@@ -105,7 +108,8 @@ public void testSetAliasListEmpty() {
     public void testSetAliasListCorrect() {
         final SuppressWarningsHolder holder = new SuppressWarningsHolder();
         holder.setAliasList("alias=value");
-        assertEquals("value", SuppressWarningsHolder.getAlias("alias"));
+        assertEquals("Alias differs from expected",
+                "value", SuppressWarningsHolder.getAlias("alias"));
     }
 
     @Test
@@ -117,7 +121,8 @@ public void testSetAliasListWrong() {
             fail("Exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("'=' expected in alias list item: SomeAlias", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "'=' expected in alias list item: SomeAlias", ex.getMessage());
         }
 
     }
@@ -148,7 +153,7 @@ public void testIsSuppressed() throws Exception {
             new LocalizedMessage(100, 10, null, null, null, "id", MemberNameCheck.class, "message");
         final AuditEvent event = new AuditEvent(source, "fileName", message);
 
-        assertFalse(SuppressWarningsHolder.isSuppressed(event));
+        assertFalse("Event is not suppressed", SuppressWarningsHolder.isSuppressed(event));
     }
 
     @Test
@@ -177,19 +182,22 @@ public void testIsSuppressedWithAllArgument() throws Exception {
             new LocalizedMessage(100, 10, null, null, null, "id", MemberNameCheck.class, "msg");
         final AuditEvent firstEventForTest =
             new AuditEvent(source, "fileName", firstMessageForTest);
-        assertFalse(SuppressWarningsHolder.isSuppressed(firstEventForTest));
+        assertFalse("Event is suppressed",
+                SuppressWarningsHolder.isSuppressed(firstEventForTest));
 
         final LocalizedMessage secondMessageForTest =
             new LocalizedMessage(100, 150, null, null, null, "id", MemberNameCheck.class, "msg");
         final AuditEvent secondEventForTest =
             new AuditEvent(source, "fileName", secondMessageForTest);
-        assertTrue(SuppressWarningsHolder.isSuppressed(secondEventForTest));
+        assertTrue("Event is not suppressed",
+                SuppressWarningsHolder.isSuppressed(secondEventForTest));
 
         final LocalizedMessage thirdMessageForTest =
             new LocalizedMessage(200, 1, null, null, null, "id", MemberNameCheck.class, "msg");
         final AuditEvent thirdEventForTest =
             new AuditEvent(source, "fileName", thirdMessageForTest);
-        assertTrue(SuppressWarningsHolder.isSuppressed(thirdEventForTest));
+        assertTrue("Event is not suppressed",
+                SuppressWarningsHolder.isSuppressed(thirdEventForTest));
     }
 
     @Test
@@ -237,8 +245,10 @@ public void testGetAllAnnotationValuesWrongArg() throws ReflectiveOperationExcep
             fail("Exception expected");
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof IllegalArgumentException);
-            assertEquals("Unexpected AST: Method Def[0x0]", ex.getCause().getMessage());
+            assertTrue("Error type is unexpected",
+                    ex.getCause() instanceof IllegalArgumentException);
+            assertEquals("Error message is unexpected",
+                    "Unexpected AST: Method Def[0x0]", ex.getCause().getMessage());
         }
     }
 
@@ -260,8 +270,10 @@ public void testGetAnnotationValuesWrongArg() throws ReflectiveOperationExceptio
             fail("Exception expected");
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof IllegalArgumentException);
-            assertEquals("Expression or annotation array"
+            assertTrue("Error type is unexpected",
+                    ex.getCause() instanceof IllegalArgumentException);
+            assertEquals("Error message is unexpected",
+                    "Expression or annotation array"
                     + " initializer AST expected: Method Def[0x0]", ex.getCause().getMessage());
         }
     }
@@ -289,8 +301,10 @@ public void testGetAnnotationTargetWrongArg() throws ReflectiveOperationExceptio
             fail("Exception expected");
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof IllegalArgumentException);
-            assertEquals("Unexpected container AST: Parent ast[0x0]", ex.getCause().getMessage());
+            assertTrue("Error type is unexpected",
+                    ex.getCause() instanceof IllegalArgumentException);
+            assertEquals("Error message is unexpected",
+                    "Unexpected container AST: Parent ast[0x0]", ex.getCause().getMessage());
         }
     }
 
@@ -305,7 +319,8 @@ public void testAstWithoutChildren() {
             fail("Exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Identifier AST expected, but get null.", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "Identifier AST expected, but get null.", ex.getMessage());
         }
 
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
index b2050a89f8..95e62930d5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java
@@ -43,7 +43,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final TodoCommentCheck checkObj = new TodoCommentCheck();
         final int[] expected = {TokenTypes.COMMENT_CONTENT};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens differs from expected",
+                expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -65,7 +66,9 @@ public void testGetAcceptableTokens() {
         final int[] expected = {TokenTypes.COMMENT_CONTENT };
         final TodoCommentCheck check = new TodoCommentCheck();
         final int[] actual = check.getAcceptableTokens();
-        assertEquals(1, actual.length);
-        assertArrayEquals(expected, actual);
+        assertEquals("Amount of acceptable tokens differs from expected",
+                1, actual.length);
+        assertArrayEquals("Acceptable tokens differs from expected",
+                expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
index 9ebcb6cea4..d3b610d2f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
@@ -51,13 +51,15 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final TrailingCommentCheck checkObj = new TrailingCommentCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens array is not empty",
+                CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
     public void testGetAcceptableTokens() {
         final TrailingCommentCheck checkObj = new TrailingCommentCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
+        assertArrayEquals("Acceptable tokens array is not empty",
+                CommonUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
     }
 
     @Test
@@ -94,7 +96,8 @@ public void testCallVisitToken() {
             Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
-            assertEquals("visitToken() shouldn't be called.", ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    "visitToken() shouldn't be called.", ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
index fd2c3392d1..5069b4d6d2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
@@ -411,8 +411,10 @@ public void testWrongUserSpecifiedLanguageCodes() {
         }
         catch (IllegalArgumentException ex) {
             final String exceptionMessage = ex.getMessage();
-            assertThat(exceptionMessage, containsString("11"));
-            assertThat(exceptionMessage, endsWith("[TranslationCheck]"));
+            assertThat("Error message is unexpected",
+                    exceptionMessage, containsString("11"));
+            assertThat("Error message is unexpected",
+                    exceptionMessage, endsWith("[TranslationCheck]"));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
index 0902fb7d8a..ec12d25917 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -110,7 +110,8 @@ public void testIllegalStateException() {
             Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
-            assertEquals(ast.toString(), ex.getMessage());
+            assertEquals("Error message is unexpected",
+                    ast.toString(), ex.getMessage());
         }
 
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index 2053141f50..90f02f49ce 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -68,7 +68,7 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testLineSeparatorOptionValueOf() {
         final LineSeparatorOption option = LineSeparatorOption.valueOf("CR");
-        assertEquals(LineSeparatorOption.CR, option);
+        assertEquals("Invalid valueOf result", LineSeparatorOption.CR, option);
     }
 
     /**
@@ -100,7 +100,7 @@ public void testNotFoundKey() {
         final int stringNumber =
                 UniquePropertiesCheck.getLineNumber(testStrings,
                         "some key");
-        assertEquals(0, stringNumber);
+        assertEquals("Invalid string number", 0, stringNumber);
     }
 
     /**
@@ -140,10 +140,11 @@ public void testWrongKeyTypeInProperties() throws Exception {
         final Object result = method.invoke(uniqueProperties, 1, "value");
         final Map<Object, Object> table = new HashMap<>();
         final Object expected = table.put(1, "value");
-        assertEquals(expected, result);
+        assertEquals("Invalid result of put method", expected, result);
+
         final Object result2 = method.invoke(uniqueProperties, 1, "value");
         final Object expected2 = table.put(1, "value");
-        assertEquals(expected2, result2);
+        assertEquals("Value should be substituted", expected2, result2);
     }
 
     /**
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
index e36cc6171f..2b005450f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java
@@ -43,7 +43,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final UpperEllCheck checkObj = new UpperEllCheck();
         final int[] expected = {TokenTypes.NUM_LONG};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -62,7 +63,7 @@ public void testAcceptableTokens() {
         final int[] expected = {TokenTypes.NUM_LONG };
         final UpperEllCheck check = new UpperEllCheck();
         final int[] actual = check.getAcceptableTokens();
-        assertEquals(1, actual.length);
-        assertArrayEquals(expected, actual);
+        assertEquals("Invalid size of tokens", 1, actual.length);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
index 005f9a78be..b3a0933628 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java
@@ -45,7 +45,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final AnnotationLocationCheck checkObj = new AnnotationLocationCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "AnnotationLocationCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -104,7 +106,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.DOT,
             TokenTypes.ANNOTATION_FIELD_DEF,
             };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
index a5ded3ceca..d0607ed44c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
@@ -55,7 +55,8 @@ protected String getPath(String filename) throws IOException {
     public void testElementStyleValueOf() {
         final AnnotationUseStyleCheck.ElementStyle option =
             AnnotationUseStyleCheck.ElementStyle.valueOf("COMPACT");
-        assertEquals(AnnotationUseStyleCheck.ElementStyle.COMPACT, option);
+        assertEquals("Invalid valueOf result",
+            AnnotationUseStyleCheck.ElementStyle.COMPACT, option);
     }
 
     /* Additional test for jacoco, since valueOf()
@@ -66,7 +67,8 @@ public void testElementStyleValueOf() {
     public void testTrailingArrayCommaValueOf() {
         final AnnotationUseStyleCheck.TrailingArrayComma option =
             AnnotationUseStyleCheck.TrailingArrayComma.valueOf("ALWAYS");
-        assertEquals(AnnotationUseStyleCheck.TrailingArrayComma.ALWAYS, option);
+        assertEquals("Invalid valueOf result",
+            AnnotationUseStyleCheck.TrailingArrayComma.ALWAYS, option);
     }
 
     /* Additional test for jacoco, since valueOf()
@@ -77,7 +79,8 @@ public void testTrailingArrayCommaValueOf() {
     public void testClosingParensValueOf() {
         final AnnotationUseStyleCheck.ClosingParens option =
             AnnotationUseStyleCheck.ClosingParens.valueOf("ALWAYS");
-        assertEquals(AnnotationUseStyleCheck.ClosingParens.ALWAYS, option);
+        assertEquals("Invalid valueOf result",
+            AnnotationUseStyleCheck.ClosingParens.ALWAYS, option);
     }
 
     /**
@@ -269,7 +272,10 @@ public void testGetOption() {
             Assert.fail("ConversionException is expected");
         }
         catch (IllegalArgumentException ex) {
-            assertTrue(ex.getMessage().startsWith("unable to parse"));
+            final String messageStart = "unable to parse";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
index 60ca28b8a7..279deccdfd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
@@ -57,7 +57,8 @@ public void testGetRequiredTokens() {
             TokenTypes.ENUM_CONSTANT_DEF,
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     /**
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
index 499602417a..9ad4cbe86f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java
@@ -243,7 +243,7 @@ public void testGetAcceptableTokens() {
         final int[] expectedTokens = {TokenTypes.METHOD_DEF };
         final MissingOverrideCheck check = new MissingOverrideCheck();
         final int[] actual = check.getAcceptableTokens();
-        assertEquals(1, actual.length);
-        Assert.assertArrayEquals(expectedTokens, actual);
+        assertEquals("Invalid acceptable token size", 1, actual.length);
+        Assert.assertArrayEquals("Default required tokens are invalid", expectedTokens, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
index e3ef07c452..4f92363e99 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java
@@ -43,7 +43,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final AvoidNestedBlocksCheck checkObj = new AvoidNestedBlocksCheck();
         final int[] expected = {TokenTypes.SLIST};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -80,6 +81,6 @@ public void testGetAcceptableTokens() {
         final AvoidNestedBlocksCheck constantNameCheckObj = new AvoidNestedBlocksCheck();
         final int[] actual = constantNameCheckObj.getAcceptableTokens();
         final int[] expected = {TokenTypes.SLIST };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
index 826d344d8c..74664b0949 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
@@ -52,7 +52,7 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testBlockOptionValueOf() {
         final BlockOption option = BlockOption.valueOf("TEXT");
-        assertEquals(BlockOption.TEXT, option);
+        assertEquals("Invalid valueOf result", BlockOption.TEXT, option);
     }
 
     @Test
@@ -154,9 +154,12 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'option' to 'invalid_option' in module";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
index 7d5facfe33..02e3f85843 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java
@@ -47,7 +47,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final EmptyCatchBlockCheck checkObj = new EmptyCatchBlockCheck();
         final int[] expected = {TokenTypes.LITERAL_CATCH};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -85,6 +86,6 @@ public void testGetAcceptableTokens() {
         final EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck();
         final int[] actual = constantNameCheckObj.getAcceptableTokens();
         final int[] expected = {TokenTypes.LITERAL_CATCH };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
index 515c37434f..771cd0bf20 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java
@@ -66,13 +66,14 @@ protected String getNonCompilablePath(String filename) throws IOException {
     @Test
     public void testLeftCurlyOptionValueOf() {
         final LeftCurlyOption option = LeftCurlyOption.valueOf("NL");
-        assertEquals(LeftCurlyOption.NL, option);
+        assertEquals("Invalid valueOf result", LeftCurlyOption.NL, option);
     }
 
     @Test
     public void testGetRequiredTokens() {
         final LeftCurlyCheck checkObj = new LeftCurlyCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals("LeftCurlyCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
 
     }
 
@@ -335,7 +336,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.STATIC_INIT,
             TokenTypes.OBJBLOCK,
             TokenTypes.LAMBDA, };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -374,9 +375,12 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'option' to 'invalid_option' in module";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
index 98b5a2534a..4037b1f0de 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
@@ -61,7 +61,7 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testRightCurlyOptionValueOf() {
         final RightCurlyOption option = RightCurlyOption.valueOf("ALONE");
-        assertEquals(RightCurlyOption.ALONE, option);
+        assertEquals("Invalid valueOf result", RightCurlyOption.ALONE, option);
     }
 
     @Test
@@ -296,9 +296,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'option' to 'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
index 0805879a27..1cef1f36d7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java
@@ -46,7 +46,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final DesignForExtensionCheck checkObj = new DesignForExtensionCheck();
         final int[] expected = {TokenTypes.METHOD_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -65,7 +66,8 @@ public void testIt() throws Exception {
     public void testGetAcceptableTokens() {
         final DesignForExtensionCheck obj = new DesignForExtensionCheck();
         final int[] expected = {TokenTypes.METHOD_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
index 4490518159..88bb1d82c7 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
@@ -55,7 +55,8 @@ protected String getNonCompilablePath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final FinalClassCheck checkObj = new FinalClassCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF, TokenTypes.PACKAGE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -116,6 +117,7 @@ public void testImproperToken() {
     public void testGetAcceptableTokens() {
         final FinalClassCheck obj = new FinalClassCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF, TokenTypes.PACKAGE_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
index 9244d9f514..f0fdab4c7b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheckTest.java
@@ -47,7 +47,8 @@ public void testGetRequiredTokens() {
         final HideUtilityClassConstructorCheck checkObj =
             new HideUtilityClassConstructorCheck();
         final int[] expected = {TokenTypes.CLASS_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -147,6 +148,7 @@ public void testProtectedCtor() throws Exception {
     public void testGetAcceptableTokens() {
         final HideUtilityClassConstructorCheck obj = new HideUtilityClassConstructorCheck();
         final int[] expected = {TokenTypes.CLASS_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
index c3bda61f94..2bb96f8d62 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InnerTypeLastCheckTest.java
@@ -44,7 +44,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final InnerTypeLastCheck checkObj = new InnerTypeLastCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -65,6 +66,7 @@ public void testMembersBeforeInner() throws Exception {
     public void testGetAcceptableTokens() {
         final InnerTypeLastCheck obj = new InnerTypeLastCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
index 1049a19600..042304bcc6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheckTest.java
@@ -69,13 +69,15 @@ public void testAllowMarker()
     public void testGetAcceptableTokens() {
         final InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();
         final int[] expected = {TokenTypes.INTERFACE_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 
     @Test
     public void testGetRequiredTokens() {
         final InterfaceIsTypeCheck obj = new InterfaceIsTypeCheck();
         final int[] expected = {TokenTypes.INTERFACE_DEF};
-        assertArrayEquals(expected, obj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, obj.getRequiredTokens());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
index 30b051d541..5cae666ed8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
@@ -83,14 +83,16 @@ public void testFormat() throws Exception {
     public void testGetAcceptableTokens() {
         final MutableExceptionCheck obj = new MutableExceptionCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 
     @Test
     public void testGetRequiredTokens() {
         final MutableExceptionCheck obj = new MutableExceptionCheck();
         final int[] expected = {TokenTypes.CLASS_DEF, TokenTypes.VARIABLE_DEF};
-        assertArrayEquals(expected, obj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, obj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
index 575af9ac35..dc24472646 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
@@ -52,7 +52,8 @@ protected String getNonCompilablePath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final OneTopLevelClassCheck checkObj = new OneTopLevelClassCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals("Required tokens array is not empty",
+                CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -61,7 +62,8 @@ public void testAcceptableTokens() {
         check.getAcceptableTokens();
         // ZERO tokens as Check do Traverse of Tree himself, he does not need to subscribed to
         // Tokens
-        Assert.assertEquals(0, check.getAcceptableTokens().length);
+        Assert.assertEquals("Acceptable tokens array size larger than 0",
+                0, check.getAcceptableTokens().length);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
index f7efd6cf17..ee1a1ea638 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
@@ -74,14 +74,16 @@ public void testMax() throws Exception {
     public void testGetAcceptableTokens() {
         final ThrowsCountCheck obj = new ThrowsCountCheck();
         final int[] expected = {TokenTypes.LITERAL_THROWS};
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 
     @Test
     public void testGetRequiredTokens() {
         final ThrowsCountCheck obj = new ThrowsCountCheck();
         final int[] expected = {TokenTypes.LITERAL_THROWS};
-        assertArrayEquals(expected, obj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, obj.getRequiredTokens());
     }
 
     @Test
@@ -94,7 +96,7 @@ public void testWrongTokenType() {
             fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
-            assertEquals(ast.toString(), ex.getMessage());
+            assertEquals("Invalid exception message", ast.toString(), ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
index 0088fe913c..84908e86f6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
@@ -61,7 +61,8 @@ public void testGetRequiredTokens() {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.IMPORT,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -327,7 +328,8 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
             TokenTypes.IMPORT,
         };
-        assertArrayEquals(expected, obj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, obj.getAcceptableTokens());
     }
 
     @Test
@@ -390,7 +392,8 @@ public void testWrongTokenType() {
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unexpected token type: class", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "Unexpected token type: class", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index 95e7a04b8e..2dca5da771 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -112,12 +112,15 @@ public void testNonExistingHeaderFile() throws Exception {
             fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage()
-                    .startsWith("cannot initialize module"
-                            + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"
-                            + " - illegal value "));
-            assertTrue(ex.getCause().getCause().getCause().getMessage()
-                    .startsWith("Unable to find: "));
+            final String messageStart = "cannot initialize module"
+                + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"
+                + " - illegal value ";
+            final String causeMessageStart = "Unable to find: ";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
+            assertTrue("Invalid exception message, should start with: " + causeMessageStart,
+                ex.getCause().getCause().getCause().getMessage().startsWith(causeMessageStart));
         }
     }
 
@@ -131,7 +134,7 @@ public void testInvalidCharset() throws Exception {
             fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"
                     + " - Cannot set property 'charset' to 'XSO-8859-1' in module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck",
@@ -148,7 +151,7 @@ public void testEmptyFilename() throws Exception {
             fail("Checker creation should not succeed with invalid headerFile");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"
                     + " - Cannot set property 'headerFile' to '' in module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck",
@@ -165,7 +168,7 @@ public void testNullFilename() throws Exception {
             fail("Checker creation should not succeed with null headerFile");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"
                     + " - Cannot set property 'headerFile' to 'null' in module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck",
@@ -203,7 +206,7 @@ public void testSetHeaderTwice() {
             fail("ConversionException is expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("header has already been set - "
+            assertEquals("Invalid exception message", "header has already been set - "
                     + "set either header or headerFile, not both", ex.getMessage());
         }
     }
@@ -219,8 +222,8 @@ public void testIoExceptionWhenLoadingHeader() throws Exception {
             fail("Exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertTrue(ex.getCause() instanceof IOException);
-            assertEquals("unable to load header", ex.getMessage());
+            assertTrue("Invalid exception cause", ex.getCause() instanceof IOException);
+            assertEquals("Invalid exception message", "unable to load header", ex.getMessage());
         }
     }
 
@@ -239,8 +242,9 @@ public void testIoExceptionWhenLoadingHeaderFile() throws Exception {
             fail("Exception expected");
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof CheckstyleException);
-            assertTrue(ex.getCause().getMessage().startsWith("unable to load header file "));
+            assertTrue("Invalid exception cause", ex.getCause() instanceof CheckstyleException);
+            assertTrue("Invalid exception cause message",
+                ex.getCause().getMessage().startsWith("unable to load header file "));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
index b48b3b296a..4fdc06c549 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
@@ -117,9 +117,8 @@ public void testSetHeader() {
                     IllegalArgumentException.class));
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unable to parse format: ^/**\\n *"
-                    + " Licensed to the Apache Software Foundation (ASF)",
-                    ex.getMessage());
+            assertEquals("Invalid exception message", "Unable to parse format: ^/**\\n *"
+                + " Licensed to the Apache Software Foundation (ASF)", ex.getMessage());
         }
     }
 
@@ -140,7 +139,7 @@ public void testEmptyFilename() throws Exception {
             fail("Checker creation should not succeed with invalid headerFile");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck"
                     + " - Cannot set property 'headerFile' to '' in"
                     + " module com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck",
@@ -192,7 +191,7 @@ public void testFailureForMultilineRegexp() throws Exception {
             fail("Checker creation should not succeed when regexp spans multiple lines");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck"
                     + " - Cannot set property 'header' to '^(.*\\n.*)' in module"
                     + " com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck",
@@ -324,8 +323,8 @@ public void testHeaderWithInvalidRegexp() throws Exception {
             fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("line 1 in header specification is not a regular expression",
-                    ex.getMessage());
+            assertEquals("Invalid exception message",
+                "line 1 in header specification is not a regular expression", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
index cb13266edb..7d78fcec26 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
@@ -104,7 +104,7 @@ public void testGetAcceptableTokens() {
                 new AvoidStarImportCheck();
         final int[] actual = testCheckObject.getAcceptableTokens();
         final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -114,6 +114,6 @@ public void testGetRequiredTokens() {
         final int[] actual = testCheckObject.getRequiredTokens();
         final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default required tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
index 44995a81c7..3cf3621156 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
@@ -43,7 +43,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final AvoidStaticImportCheck checkObj = new AvoidStaticImportCheck();
         final int[] expected = {TokenTypes.STATIC_IMPORT};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -170,6 +171,6 @@ public void testGetAcceptableTokens() {
         final int[] actual = testCheckObject.getAcceptableTokens();
         final int[] expected = {TokenTypes.STATIC_IMPORT};
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
index 0134f0c598..e6570a1af4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
@@ -71,7 +71,8 @@ public void testGetRequiredTokens() {
             TokenTypes.STATIC_IMPORT,
             TokenTypes.PACKAGE_DEF,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -368,7 +369,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.PACKAGE_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -389,7 +390,7 @@ public void testGetFullImportIdent() {
         }
 
         final String expected = "";
-        assertEquals(expected, actual);
+        assertEquals("Invalid getFullImportIdent result", expected, actual);
     }
 
     @Test
@@ -484,10 +485,12 @@ public void testSamePackageDepthNegative() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'customImportOrderRules' to "
-                            + "'SAME_PACKAGE(-1)' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'customImportOrderRules' to "
+                    + "'SAME_PACKAGE(-1)' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
@@ -507,10 +510,12 @@ public void testSamePackageDepthZero() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'customImportOrderRules' to "
-                            + "'SAME_PACKAGE(0)' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'customImportOrderRules' to "
+                    + "'SAME_PACKAGE(0)' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
@@ -529,10 +534,12 @@ public void testUnsupportedRule() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'customImportOrderRules' to "
-                            + "'SAME_PACKAGE(3)###UNSUPPORTED_RULE' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'customImportOrderRules' to "
+                    + "'SAME_PACKAGE(3)###UNSUPPORTED_RULE' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
@@ -550,10 +557,12 @@ public void testSamePackageDepthNotInt() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'customImportOrderRules' to "
-                            + "'SAME_PACKAGE(INT_IS_REQUIRED_HERE)' in module"));
+            final String messageStart =
+                "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
+                    + "Cannot set property 'customImportOrderRules' to "
+                    + "'SAME_PACKAGE(INT_IS_REQUIRED_HERE)' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
index fd99c90115..1ce976042d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java
@@ -42,7 +42,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final IllegalImportCheck checkObj = new IllegalImportCheck();
         final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -78,7 +79,7 @@ public void testGetAcceptableTokens() {
         final int[] actual = testCheckObject.getAcceptableTokens();
         final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
index 0c01c59629..93704c36e6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java
@@ -71,7 +71,8 @@ public void testGetRequiredTokens() {
             TokenTypes.IMPORT,
             TokenTypes.STATIC_IMPORT,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -138,7 +139,10 @@ public void testUnknown() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to find: "));
+            final String messageStart = "Unable to find: ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
@@ -153,7 +157,10 @@ public void testBroken() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to load "));
+            final String messageStart = "Unable to load ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
@@ -276,7 +283,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.STATIC_IMPORT,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -318,7 +325,10 @@ public void testUrlUnableToLoad() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to load "));
+            final String messageStart = "Unable to load ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
@@ -334,7 +344,10 @@ public void testUrlIncorrectUrl() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to find: "));
+            final String messageStart = "Unable to find: ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
@@ -359,7 +372,10 @@ public void testResourceUnableToLoad() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to find: "));
+            final String messageStart = "Unable to find: ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
@@ -384,7 +400,10 @@ public void testUrlInFilePropertyUnableToLoad() throws Exception {
         }
         catch (CheckstyleException ex) {
             final String message = getCheckstyleExceptionMessage(ex);
-            assertTrue(message.startsWith("Unable to load "));
+            final String messageStart = "Unable to load ";
+
+            assertTrue("Invalid message, should start with: " + messageStart,
+                message.startsWith(message));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java
index cea6558a9a..fe32454275 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java
@@ -53,20 +53,23 @@
 @PrepareForTest({ImportControlLoader.class, URI.class})
 public class ImportControlLoaderTest {
     private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/" + filename;
+        return "src/test/resources/com/puppycrawl/tools/"
+                + "checkstyle/checks/imports/importcontrolloader/" + filename;
     }
 
     @Test
     public void testLoad() throws CheckstyleException {
         final ImportControl root =
-                ImportControlLoader.load(new File(getPath("import-control_complete.xml")).toURI());
+                ImportControlLoader.load(
+                new File(getPath("InputImportControlLoaderComplete.xml")).toURI());
         assertNotNull(root);
     }
 
     @Test
     public void testWrongFormatUri() throws Exception {
         try {
-            ImportControlLoader.load(new URI("aaa://" + getPath("import-control_complete.xml")));
+            ImportControlLoader.load(new URI("aaa://"
+                    + getPath("InputImportControlLoaderComplete.xml")));
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
@@ -79,7 +82,7 @@ public void testWrongFormatUri() throws Exception {
     public void testExtraElementInConfig() throws Exception {
         final ImportControl root =
                 ImportControlLoader.load(
-                    new File(getPath("import-control_WithNewElement.xml")).toURI());
+                    new File(getPath("InputImportControlLoaderWithNewElement.xml")).toURI());
         assertNotNull(root);
     }
 
@@ -118,7 +121,7 @@ public void testLoadThrowsException() throws Exception {
                 URI.class);
             privateMethod.setAccessible(true);
             privateMethod.invoke(null, source,
-                    new File(getPath("import-control_complete.xml")).toURI());
+                    new File(getPath("InputImportControlLoaderComplete.xml")).toURI());
             fail("exception expected");
         }
         catch (InvocationTargetException ex) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
index 9cddb02af6..0e8a92f173 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
@@ -66,7 +66,7 @@ protected String getNonCompilablePath(String filename) throws IOException {
     @Test
     public void testImportOrderOptionValueOf() {
         final ImportOrderOption option = ImportOrderOption.valueOf("TOP");
-        assertEquals(ImportOrderOption.TOP, option);
+        assertEquals("Invalid valueOf result", ImportOrderOption.TOP, option);
     }
 
     @Test
@@ -147,9 +147,12 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
@@ -408,9 +411,12 @@ public void testGroupWithSlashes() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'groups' to '/^javax' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property"
+                + " 'groups' to '/^javax' in module";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
index 87390e1fa3..2a037cfa53 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java
@@ -55,7 +55,8 @@ public void testGetRequiredTokens() {
             TokenTypes.STATIC_IMPORT,
             TokenTypes.PACKAGE_DEF,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -100,6 +101,6 @@ public void testGetAcceptableTokens() {
             TokenTypes.PACKAGE_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
index 61cb043388..d87114f020 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
@@ -147,7 +147,7 @@ public void testGetRequiredTokens() {
             TokenTypes.VARIABLE_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default required tokens are invalid", expected, actual);
     }
 
     @Test
@@ -172,7 +172,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 402f6578de..85a07b1253 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -183,7 +183,7 @@ public void testGetRequiredTokens() {
         final int[] expected = handlerFactory.getHandledTypes();
         Arrays.sort(expected);
         Arrays.sort(requiredTokens);
-        assertArrayEquals(expected, requiredTokens);
+        assertArrayEquals("Default required tokens are invalid", expected, requiredTokens);
     }
 
     @Test
@@ -194,7 +194,7 @@ public void testGetAcceptableTokens() {
         final int[] expected = handlerFactory.getHandledTypes();
         Arrays.sort(expected);
         Arrays.sort(acceptableTokens);
-        assertArrayEquals(expected, acceptableTokens);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, acceptableTokens);
     }
 
     @Test
@@ -203,7 +203,7 @@ public void testThrowsIndentProperty() {
 
         indentationCheck.setThrowsIndent(1);
 
-        assertEquals(1, indentationCheck.getThrowsIndent());
+        assertEquals("Invalid throws indent", 1, indentationCheck.getThrowsIndent());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java
index 84d0861929..c37c592423 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java
@@ -61,7 +61,8 @@ public void testIsSubclassWithNulls() throws Exception {
         final Method isSubclass = check.getClass().getSuperclass()
                 .getDeclaredMethod("isSubclass", Class.class, Class.class);
         isSubclass.setAccessible(true);
-        assertFalse((boolean) isSubclass.invoke(check, null, null));
+        assertFalse("Should return false if at least one of the params is null",
+            (boolean) isSubclass.invoke(check, null, null));
     }
 
     @Test
@@ -73,7 +74,7 @@ public void testTokenToString() throws Exception {
         final Object token = tokenConstructor.newInstance("blablabla", 1, 1);
         final Method toString = token.getClass().getDeclaredMethod("toString");
         final String result = (String) toString.invoke(token);
-        assertEquals("Token[blablabla(1x1)]", result);
+        assertEquals("Invalid toString result", "Token[blablabla(1x1)]", result);
     }
 
     @Test
@@ -92,8 +93,10 @@ public void testClassRegularClass() throws Exception {
             regularClassConstructor.newInstance(null, "", new JavadocMethodCheck());
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof IllegalArgumentException);
-            assertEquals("ClassInfo's name should be non-null", ex.getCause().getMessage());
+            assertTrue("Invalid exception class, expected: IllegalArgumentException.class",
+                ex.getCause() instanceof IllegalArgumentException);
+            assertEquals("Invalid exception message",
+                "ClassInfo's name should be non-null", ex.getCause().getMessage());
         }
 
         final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,
@@ -106,8 +109,9 @@ public void testClassRegularClass() throws Exception {
         final Method toString = regularClass.getClass().getDeclaredMethod("toString");
         toString.setAccessible(true);
         final String result = (String) toString.invoke(regularClass);
-        assertEquals("RegularClass[name=Token[blablabla(1x1)], in class=sur, loadable=true,"
-                + " class=null]", result);
+        assertEquals("Invalid toString result",
+            "RegularClass[name=Token[blablabla(1x1)], in class=sur, loadable=true, class=null]",
+            result);
 
         final Method setClazz = regularClass.getClass().getDeclaredMethod("setClazz", Class.class);
         setClazz.setAccessible(true);
@@ -116,7 +120,7 @@ public void testClassRegularClass() throws Exception {
 
         final Method getClazz = regularClass.getClass().getDeclaredMethod("getClazz");
         getClazz.setAccessible(true);
-        assertNull(getClazz.invoke(regularClass));
+        assertNull("Expected null", getClazz.invoke(regularClass));
     }
 
     @Test
@@ -151,7 +155,8 @@ public void testClassAliasToString() throws Exception {
         final Method toString = classAlias.getClass().getDeclaredMethod("toString");
         toString.setAccessible(true);
         final String result = (String) toString.invoke(classAlias);
-        assertEquals("ClassAlias[alias Token[blablabla(1x1)] for Token[blablabla(1x1)]]", result);
+        assertEquals("Invalid toString result",
+            "ClassAlias[alias Token[blablabla(1x1)] for Token[blablabla(1x1)]]", result);
     }
 
     @Test
@@ -167,8 +172,9 @@ public void testWithoutLogErrors() throws Exception {
         }
         catch (CheckstyleException ex) {
             final IllegalStateException cause = (IllegalStateException) ex.getCause();
-            assertEquals(getCheckMessage(MSG_CLASS_INFO, "@throws", "InvalidExceptionName"),
-                    cause.getMessage());
+            assertEquals("Invalid exception message",
+                getCheckMessage(MSG_CLASS_INFO, "@throws", "InvalidExceptionName"),
+                cause.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
index b4253ccb44..572ea31a9f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java
@@ -43,14 +43,16 @@ protected String getPath(String filename) throws IOException {
     public void testGetAcceptableTokens() {
         final AtclauseOrderCheck checkObj = new AtclauseOrderCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN};
-        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, checkObj.getAcceptableTokens());
     }
 
     @Test
     public void testGetRequiredTokens() {
         final AtclauseOrderCheck checkObj = new AtclauseOrderCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
index 86481b643f..5fa5c037ec 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
@@ -71,7 +71,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ANNOTATION_FIELD_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
index 5d8f64872a..aa86c1d16a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
@@ -54,7 +54,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final JavadocParagraphCheck checkObj = new JavadocParagraphCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
index 8dbd33270a..dd8ddd422a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java
@@ -63,7 +63,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.VARIABLE_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
index 3071431c52..d6df039ddc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheckTest.java
@@ -45,7 +45,8 @@ public void testGetRequiredTokens() {
         final JavadocTagContinuationIndentationCheck checkObj =
             new JavadocTagContinuationIndentationCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
index 1ad64642d4..f76e30d712 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java
@@ -50,7 +50,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, javadocTypeCheck.getRequiredTokens());
+        assertArrayEquals(
+            "JavadocTypeCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, javadocTypeCheck.getRequiredTokens());
     }
 
     @Test
@@ -65,7 +67,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ANNOTATION_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
index fb8af17b6b..54cdc4a84e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java
@@ -48,7 +48,7 @@ public void testGetRequiredTokens() {
         final int[] expected = {
             TokenTypes.VARIABLE_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default required tokens are invalid", expected, actual);
     }
 
     @Test
@@ -61,7 +61,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ENUM_CONSTANT_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
index 8e71a4cdd0..3dc063b55a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheckTest.java
@@ -44,7 +44,8 @@ public void testGetAcceptableTokens() {
         final NonEmptyAtclauseDescriptionCheck checkObj =
             new NonEmptyAtclauseDescriptionCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN};
-        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, checkObj.getAcceptableTokens());
     }
 
     @Test
@@ -52,7 +53,8 @@ public void testGetRequiredTokens() {
         final NonEmptyAtclauseDescriptionCheck checkObj =
             new NonEmptyAtclauseDescriptionCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
index bd8e101c05..b04f835549 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheckTest.java
@@ -42,14 +42,16 @@ protected String getPath(String filename) throws IOException {
     public void testAcceptableTokens() {
         final SingleLineJavadocCheck checkObj = new SingleLineJavadocCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN };
-        assertArrayEquals(expected, checkObj.getAcceptableTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, checkObj.getAcceptableTokens());
     }
 
     @Test
     public void testGetRequiredTokens() {
         final SingleLineJavadocCheck checkObj = new SingleLineJavadocCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
index 9406a7ebc3..e6d84e62c3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
@@ -52,7 +52,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final SummaryJavadocCheck checkObj = new SummaryJavadocCheck();
         final int[] expected = {TokenTypes.BLOCK_COMMENT_BEGIN };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java
index ba016c8aa6..0aa30a0efb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheckTest.java
@@ -90,7 +90,8 @@ public void testWrongToken() {
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unknown type: interface[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "Unknown type: interface[0x-1]", ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassDataAbstractionCouplingCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassDataAbstractionCouplingCheckTest.java
index 8cc9d137df..f875832fee 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassDataAbstractionCouplingCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassDataAbstractionCouplingCheckTest.java
@@ -111,12 +111,15 @@ public void testExludedPackageWithEndingDot() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
+            final String messageStart =
                 "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
                     + "Cannot set property 'excludedPackages' to "
                     + "'com.puppycrawl.tools.checkstyle.checks.metrics.inputs.a.' in module "
                     + "com.puppycrawl.tools.checkstyle.checks.metrics."
-                    + "ClassDataAbstractionCouplingCheck"));
+                    + "ClassDataAbstractionCouplingCheck";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
@@ -157,7 +160,8 @@ public void testWrongToken() {
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unknown type: ctor[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "Unknown type: ctor[0x-1]", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java
index a6ac4656f0..e511bae6c2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java
@@ -107,12 +107,15 @@ public void testExcludedPackagesCommonPackagesWithEndingDot() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
+            final String messageStart =
                 "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
                     + "Cannot set property 'excludedPackages' to "
                     + "'com.puppycrawl.tools.checkstyle.checks.metrics.inputs.a.' in module "
                     + "com.puppycrawl.tools.checkstyle.checks.metrics."
-                    + "ClassFanOutComplexityCheck"));
+                    + "ClassFanOutComplexityCheck";
+
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
index 229f9e6e31..3bf491ee62 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java
@@ -52,7 +52,8 @@ protected String getNonCompilablePath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final ModifierOrderCheck checkObj = new ModifierOrderCheck();
         final int[] expected = {TokenTypes.MODIFIERS};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -89,7 +90,7 @@ public void testGetDefaultTokens() {
             TokenTypes.MODIFIERS,
             TokenTypes.OBJBLOCK,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default default tokens are invalid", expected, actual);
         final int[] unexpectedEmptyArray = CommonUtils.EMPTY_INT_ARRAY;
         Assert.assertNotSame(unexpectedEmptyArray, actual);
         Assert.assertNotSame(unexpectedArray, actual);
@@ -105,7 +106,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.MODIFIERS,
             TokenTypes.OBJBLOCK,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
         final int[] unexpectedEmptyArray = CommonUtils.EMPTY_INT_ARRAY;
         Assert.assertNotSame(unexpectedEmptyArray, actual);
         Assert.assertNotSame(unexpectedArray, actual);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheckTest.java
index a5ba7114fb..36619c8b10 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheckTest.java
@@ -47,8 +47,10 @@ public void testTokens() {
         final CatchParameterNameCheck catchParameterNameCheck = new CatchParameterNameCheck();
         final int[] expected = {TokenTypes.PARAMETER_DEF};
 
-        assertArrayEquals(expected, catchParameterNameCheck.getRequiredTokens());
-        assertArrayEquals(expected, catchParameterNameCheck.getAcceptableTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, catchParameterNameCheck.getRequiredTokens());
+        assertArrayEquals("Default acceptable tokens are invalid",
+            expected, catchParameterNameCheck.getAcceptableTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
index 7ca811f4e7..3d13d8c223 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
@@ -46,7 +46,8 @@ public void testGetClassRequiredTokens() {
         final ClassTypeParameterNameCheck checkObj =
             new ClassTypeParameterNameCheck();
         final int[] expected = {TokenTypes.TYPE_PARAMETER};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -89,6 +90,6 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.TYPE_PARAMETER,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
index c3525a8c82..57f71386f4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
@@ -56,7 +56,8 @@ protected String getNonCompilablePath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final ConstantNameCheck checkObj = new ConstantNameCheck();
         final int[] expected = {TokenTypes.VARIABLE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -70,7 +71,7 @@ public void testIllegalRegexp()
             fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                     + " com.puppycrawl.tools.checkstyle.TreeWalker - illegal value"
                     + " '\\' for property 'format' of module"
                     + " com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck",
@@ -170,7 +171,7 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.VARIABLE_DEF,
         };
-        Assert.assertNotNull(actual);
-        assertArrayEquals(expected, actual);
+        Assert.assertNotNull("Default acceptable should not be null", actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
index e07e568d50..703bf2165e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
@@ -46,7 +46,8 @@ public void testGetInterfaceRequiredTokens() {
         final InterfaceTypeParameterNameCheck checkObj =
             new InterfaceTypeParameterNameCheck();
         final int[] expected = {TokenTypes.TYPE_PARAMETER};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
index c9d6c0fdc5..a0213417f8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java
@@ -46,7 +46,9 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final LocalFinalVariableNameCheck checkObj =
             new LocalFinalVariableNameCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "LocalFinalVariableNameCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -97,7 +99,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.PARAMETER_DEF,
             TokenTypes.RESOURCE,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
index cdf214d20d..c2903e05fe 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java
@@ -45,7 +45,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final MemberNameCheck checkObj = new MemberNameCheck();
         final int[] expected = {TokenTypes.VARIABLE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -247,6 +248,6 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.VARIABLE_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
index bed453c11c..4fd98d2726 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java
@@ -47,7 +47,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final MethodNameCheck checkObj = new MethodNameCheck();
         final int[] expected = {TokenTypes.METHOD_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -180,6 +181,6 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.METHOD_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
index 2912cf7953..1834ccf0e2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
@@ -46,7 +46,8 @@ public void testGetMethodRequiredTokens() {
         final MethodTypeParameterNameCheck checkObj =
             new MethodTypeParameterNameCheck();
         final int[] expected = {TokenTypes.TYPE_PARAMETER};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
index 857056c68a..ee8666321a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java
@@ -46,7 +46,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final PackageNameCheck checkObj = new PackageNameCheck();
         final int[] expected = {TokenTypes.PACKAGE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -81,6 +82,6 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.PACKAGE_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
index 35694ef738..56ed40b906 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
@@ -46,7 +46,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final ParameterNameCheck checkObj = new ParameterNameCheck();
         final int[] expected = {TokenTypes.PARAMETER_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -92,7 +93,7 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.PARAMETER_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
index 50bac76754..810a2aafa8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java
@@ -45,7 +45,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final StaticVariableNameCheck checkObj = new StaticVariableNameCheck();
         final int[] expected = {TokenTypes.VARIABLE_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -93,6 +94,6 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.VARIABLE_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
index dcecb0b0f0..6d5dbf6913 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
@@ -43,7 +43,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final RegexpCheck checkObj = new RegexpCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "RegexpCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
index eb63921073..5ad9146f10 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
@@ -235,8 +235,9 @@ public void testException() throws Exception {
             fail("CheckstyleException expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("unable to create canonical path names for " + file.getAbsolutePath(),
-                    ex.getMessage());
+            assertEquals("Invalid exception message",
+                "unable to create canonical path names for " + file.getAbsolutePath(),
+                ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
index 805d5ddfc5..865f87edcc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java
@@ -50,7 +50,8 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final RegexpSinglelineJavaCheck checkObj = new RegexpSinglelineJavaCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
index 429d758d7f..6424502959 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java
@@ -48,7 +48,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final AnonInnerLengthCheck checkObj = new AnonInnerLengthCheck();
         final int[] expected = {TokenTypes.LITERAL_NEW};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -58,7 +59,7 @@ public void testGetAcceptableTokens() {
         final int[] actual = anonInnerLengthCheckObj.getAcceptableTokens();
         final int[] expected = {TokenTypes.LITERAL_NEW};
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheckTest.java
index 490e9f94e4..b85cd3ed88 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheckTest.java
@@ -145,7 +145,7 @@ public void testVisitTokenWithWrongTokenType() {
             fail("exception expected");
         }
         catch (IllegalStateException ex) {
-            assertEquals("ENUM[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message", "ENUM[0x-1]", ex.getMessage());
         }
     }
 
@@ -161,7 +161,7 @@ public void testLeaveTokenWithWrongTokenType() {
             fail("exception expected");
         }
         catch (IllegalStateException ex) {
-            assertEquals("ENUM[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message", "ENUM[0x-1]", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
index e53bd2ff1f..273b42374f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
@@ -87,7 +87,7 @@ public void testArgs() throws Exception {
         }
         catch (CheckstyleException ex) {
             // Expected Exception because of illegal argument for "max"
-            assertEquals("cannot initialize module"
+            assertEquals("Invalid exception message", "cannot initialize module"
                 + " com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck"
                 + " - illegal value 'abc' for property 'max' of module"
                 + " com.puppycrawl.tools.checkstyle.checks.sizes.FileLengthCheck",
@@ -119,7 +119,8 @@ public void testExtensions() {
             fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Extensions array can not be null", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "Extensions array can not be null", ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/InputLineLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/InputLineLengthCheckTest.java
index 7fb9af5402..4276da7083 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/InputLineLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/InputLineLengthCheckTest.java
@@ -51,13 +51,17 @@ protected String getNonCompilablePath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final LineLengthCheck checkObj = new LineLengthCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "LineLengthCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
     public void testGetAcceptableTokens() {
         final LineLengthCheck checkObj = new LineLengthCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
+        assertArrayEquals(
+            "LineLengthCheck#getAcceptableTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getAcceptableTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
index 6cac809b3d..793e19f3a4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java
@@ -49,7 +49,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final MethodCountCheck checkObj = new MethodCountCheck();
         final int[] expected = {TokenTypes.METHOD_DEF};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -65,7 +66,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.METHOD_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
index dcafc3bc5a..c7ea411171 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java
@@ -43,7 +43,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final MethodLengthCheck checkObj = new MethodLengthCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "MethodLengthCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -56,7 +58,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.CTOR_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
index 5bba5b9f88..59d0542323 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
@@ -50,7 +50,8 @@ public void testGetRequiredTokens() {
             TokenTypes.ENUM_DEF,
             TokenTypes.ANNOTATION_DEF,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -64,7 +65,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.ANNOTATION_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
index 6ae9f70dbc..349b1bab98 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java
@@ -44,7 +44,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final ParameterNumberCheck checkObj = new ParameterNumberCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "ParameterNumberCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -57,7 +59,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.CTOR_DEF,
         };
 
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
index a3bd0a44fc..796d256015 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java
@@ -58,7 +58,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final EmptyForInitializerPadCheck checkObj = new EmptyForInitializerPadCheck();
         final int[] expected = {TokenTypes.FOR_INIT};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -86,7 +87,7 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.FOR_INIT,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     /* Additional test for jacoco, since valueOf()
@@ -96,7 +97,7 @@ public void testGetAcceptableTokens() {
     @Test
     public void testPadOptionValueOf() {
         final PadOption option = PadOption.valueOf("NOSPACE");
-        assertEquals(PadOption.NOSPACE, option);
+        assertEquals("Result of valueOf is invalid", PadOption.NOSPACE, option);
     }
 
     /* Additional test for jacoco, since valueOf()
@@ -106,7 +107,7 @@ public void testPadOptionValueOf() {
     @Test
     public void testWrapOptionValueOf() {
         final WrapOption option = WrapOption.valueOf("EOL");
-        assertEquals(WrapOption.EOL, option);
+        assertEquals("Result of valueOf is invalid", WrapOption.EOL, option);
     }
 
     @Test
@@ -120,9 +121,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: ",
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
index 1433c330e7..716f725b42 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java
@@ -56,7 +56,8 @@ protected String getPath(String filename) throws IOException {
     public void testGetRequiredTokens() {
         final EmptyForIteratorPadCheck checkObj = new EmptyForIteratorPadCheck();
         final int[] expected = {TokenTypes.FOR_ITERATOR};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -85,7 +86,7 @@ public void testGetAcceptableTokens() {
         final int[] expected = {
             TokenTypes.FOR_ITERATOR,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -99,9 +100,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: ",
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
index 017cc93473..39ef3ab6f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
@@ -47,7 +47,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final EmptyLineSeparatorCheck checkObj = new EmptyLineSeparatorCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "EmptyLineSeparatorCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -156,7 +158,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.CTOR_DEF,
             TokenTypes.VARIABLE_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
index 9aeeeb4876..bd88f1db9a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
@@ -72,7 +72,8 @@ public void testGetRequiredTokens() {
             TokenTypes.GENERIC_START,
             TokenTypes.GENERIC_END,
         };
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
+        assertArrayEquals("Default required tokens are invalid",
+            expected, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -148,7 +149,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.GENERIC_START,
             TokenTypes.GENERIC_END,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -161,7 +162,8 @@ public void testWrongTokenType() {
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Unknown type interface[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "Unknown type interface[0x-1]", ex.getMessage());
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
index 1f8d3e8951..88e4a21b33 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
@@ -57,7 +57,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final MethodParamPadCheck checkObj = new MethodParamPadCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "MethodParamPadCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -152,7 +154,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.SUPER_CTOR_CALL,
             TokenTypes.ENUM_CONSTANT_DEF,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
@@ -166,9 +168,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
index 4e35c16961..cdee4a5f93 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
@@ -223,7 +223,8 @@ public void testVisitTokenSwitchReflection() {
             fail("no intended exception thrown");
         }
         catch (IllegalStateException ex) {
-            assertEquals("unexpected ast syntax import[0x-1]", ex.getMessage());
+            assertEquals("Invalid exception message",
+                "unexpected ast syntax import[0x-1]", ex.getMessage());
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
index 645b433b4c..1128540f5b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheckTest.java
@@ -121,9 +121,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
index ec37e9d21d..42ee4d70ba 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java
@@ -334,9 +334,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
index 425372da58..8f00833b1b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java
@@ -105,9 +105,11 @@ public void testInvalidOption() throws Exception {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith(
-                    "cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
-                            + "Cannot set property 'option' to 'invalid_option' in module"));
+            final String messageStart = "cannot initialize module "
+                + "com.puppycrawl.tools.checkstyle.TreeWalker - Cannot set property 'option' to "
+                + "'invalid_option' in module";
+            assertTrue("Invalid exception message, should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
         }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
index 0df16e8d03..3ed997f200 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheckTest.java
@@ -52,7 +52,9 @@ protected String getPath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final WhitespaceAfterCheck checkObj = new WhitespaceAfterCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "WhitespaceAfterCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
index ef94aebb0f..7a36429013 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
@@ -60,7 +60,9 @@ protected String getNonCompilablePath(String filename) throws IOException {
     @Test
     public void testGetRequiredTokens() {
         final WhitespaceAroundCheck checkObj = new WhitespaceAroundCheck();
-        assertArrayEquals(CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+        assertArrayEquals(
+            "WhitespaceAroundCheck#getRequiredTockens should return empty array by default",
+            CommonUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
     }
 
     @Test
@@ -325,7 +327,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.GENERIC_START,
             TokenTypes.GENERIC_END,
         };
-        assertArrayEquals(expected, actual);
+        assertArrayEquals("Default acceptable tokens are invalid", expected, actual);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filefilters/ExclusionBeforeExecutionFileFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filefilters/ExclusionBeforeExecutionFileFilterTest.java
index c31c3085c7..8e0ea95c0d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filefilters/ExclusionBeforeExecutionFileFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filefilters/ExclusionBeforeExecutionFileFilterTest.java
@@ -38,7 +38,7 @@ public void testAccept() {
         final BeforeExecutionExclusionFileFilter filter =
                 createExclusionBeforeExecutionFileFilter(fileName);
 
-        assertTrue(filter.accept("ATest.java"));
+        assertTrue("Should accept if file does not exist", filter.accept("ATest.java"));
     }
 
     @Test
@@ -47,7 +47,7 @@ public void testAcceptOnNullFile() {
         final BeforeExecutionExclusionFileFilter filter =
                 createExclusionBeforeExecutionFileFilter(fileName);
 
-        assertTrue(filter.accept("AnyJava.java"));
+        assertTrue("Should accept if file is null", filter.accept("AnyJava.java"));
     }
 
     @Test
@@ -56,7 +56,7 @@ public void testReject() {
         final BeforeExecutionExclusionFileFilter filter =
                 createExclusionBeforeExecutionFileFilter(fileName);
 
-        assertFalse(filter.accept("ATest.java"));
+        assertFalse("Should reject file, but did not", filter.accept("ATest.java"));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index 7caf02176c..c71e130e8f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -253,9 +253,8 @@ public void testInvalidInfluenceFormat() throws Exception {
         }
         catch (CheckstyleException ex) {
             final IllegalArgumentException cause = (IllegalArgumentException) ex.getCause();
-            assertEquals("unable to parse influence"
-                            + " from 'SUPPRESS CHECKSTYLE MemberNameCheck' using a",
-                    cause.getMessage());
+            assertEquals("Invalid exception message", "unable to parse influence"
+                + " from 'SUPPRESS CHECKSTYLE MemberNameCheck' using a", cause.getMessage());
         }
     }
 
@@ -271,8 +270,8 @@ public void testInvalidCheckFormat() throws Exception {
         }
         catch (CheckstyleException ex) {
             final IllegalArgumentException cause = (IllegalArgumentException) ex.getCause();
-            assertEquals("unable to parse expanded comment a[l",
-                    cause.getMessage());
+            assertEquals("Invalid exception message",
+                "unable to parse expanded comment a[l", cause.getMessage());
         }
     }
 
@@ -288,7 +287,8 @@ public void testToStringOfTagClass() {
         final SuppressWithNearbyCommentFilter.Tag tag = new SuppressWithNearbyCommentFilter.Tag(
                 "text", 7, new SuppressWithNearbyCommentFilter()
         );
-        assertEquals("Tag[lines=[7 to 7]; text='text']", tag.toString());
+        assertEquals("Invalid toString result",
+            "Tag[lines=[7 to 7]; text='text']", tag.toString());
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index a878fef14e..72b0f372bc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -252,7 +252,8 @@ public void testToStringOfTagClass() {
                 0, 1, "text", false, new SuppressionCommentFilter()
         );
 
-        assertEquals("Tag[line=0; col=1; on=false; text='text']", tag.toString());
+        assertEquals("Invalid toString result",
+            "Tag[line=0; col=1; on=false; text='text']", tag.toString());
     }
 
     @Test
@@ -267,8 +268,8 @@ public void testInvalidCheckFormat() throws Exception {
         }
         catch (CheckstyleException ex) {
             final IllegalArgumentException cause = (IllegalArgumentException) ex.getCause();
-            assertEquals("unable to parse expanded comment e[l",
-                    cause.getMessage());
+            assertEquals("Invalid exception message",
+                "unable to parse expanded comment e[l", cause.getMessage());
         }
     }
 
@@ -284,8 +285,8 @@ public void testInvalidMessageFormat() throws Exception {
         }
         catch (CheckstyleException ex) {
             final IllegalArgumentException cause = (IllegalArgumentException) ex.getCause();
-            assertEquals("unable to parse expanded comment e[l",
-                    cause.getMessage());
+            assertEquals("Invalid exception message",
+                "unable to parse expanded comment e[l", cause.getMessage());
         }
 
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
index fab9e0c527..53d27c7409 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilterTest.java
@@ -82,7 +82,8 @@ public void testAccept() throws CheckstyleException {
 
         final AuditEvent ev = new AuditEvent(this, "ATest.java", null);
 
-        assertTrue(filter.accept(ev));
+        assertTrue("Audit event should be excepted when there are no suppressions",
+            filter.accept(ev));
     }
 
     @Test
@@ -92,8 +93,7 @@ public void testAcceptOnNullFile() throws CheckstyleException {
         final SuppressionFilter filter = createSuppressionFilter(fileName, optional);
 
         final AuditEvent ev = new AuditEvent(this, "AnyJava.java", null);
-
-        assertTrue(filter.accept(ev));
+        assertTrue("Audit event on null file should be excepted, but was not", filter.accept(ev));
     }
 
     @Test
@@ -106,7 +106,8 @@ public void testNonExistingSuppressionFileWithFalseOptional() {
             fail("Exception is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("Unable to find: " + fileName, ex.getMessage());
+            assertEquals("Invalid error message",
+                "Unable to find: " + fileName, ex.getMessage());
         }
     }
 
@@ -120,8 +121,9 @@ public void testExistingInvalidSuppressionFileWithTrueOptional() {
             fail("Exception is expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("Unable to parse " + fileName + " - invalid files or checks format",
-                    ex.getMessage());
+            assertEquals("Invalid error message",
+                "Unable to parse " + fileName + " - invalid files or checks format",
+                ex.getMessage());
         }
     }
 
@@ -134,7 +136,8 @@ public void testExistingSuppressionFileWithTrueOptional() throws Exception {
 
         final AuditEvent ev = new AuditEvent(this, "AnyFile.java", null);
 
-        assertTrue(filter.accept(ev));
+        assertTrue("Suppression file with true optional was not accepted",
+            filter.accept(ev));
     }
 
     @Test
@@ -158,7 +161,9 @@ public void testExistingConfigWithTrueOptionalThrowsIoErrorWhileClosing()
         final boolean optional = true;
         final SuppressionFilter filter = createSuppressionFilter(fileName, optional);
         final AuditEvent ev = new AuditEvent(this, "AnyFile.java", null);
-        assertTrue(filter.accept(ev));
+        assertTrue(
+            "Event was not excepted when IOException is thrown while reading suppression file",
+            filter.accept(ev));
     }
 
     @Test
@@ -170,7 +175,8 @@ public void testNonExistingSuppressionFileWithTrueOptional() throws Exception {
 
         final AuditEvent ev = new AuditEvent(this, "AnyFile.java", null);
 
-        assertTrue(filter.accept(ev));
+        assertTrue("Should except event when suppression file does not exist",
+            filter.accept(ev));
     }
 
     @Test
@@ -182,7 +188,8 @@ public void testNonExistingSuppressionUrlWithTrueOptional() throws Exception {
 
         final AuditEvent ev = new AuditEvent(this, "AnyFile.java", null);
 
-        assertTrue(filter.accept(ev));
+        assertTrue("Should except event when suppression file url does not exist",
+            filter.accept(ev));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
index a880c016b3..f2f2a1c3b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java
@@ -62,7 +62,8 @@ public void testNoSuppressions()
         final FilterSet fc =
             SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));
         final FilterSet fc2 = new FilterSet();
-        assertEquals(fc2, fc);
+        assertEquals("No suppressions should be loaded, but found: " + fc.getFilters().size(),
+            fc2, fc);
     }
 
     @Test
@@ -85,7 +86,7 @@ public void testLoadFromUrl() throws Exception {
         // when https://github.com/jayway/powermock/issues/428 will be fixed
         if (actualFilterSet != null) {
             final FilterSet expectedFilterSet = new FilterSet();
-            assertEquals(expectedFilterSet, actualFilterSet);
+            assertEquals("Failed to load from url", expectedFilterSet, actualFilterSet);
         }
     }
 
@@ -96,7 +97,7 @@ public void testLoadFromMalformedUrl() {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("Unable to find: http", ex.getMessage());
+            assertEquals("Invalid error message", "Unable to find: http", ex.getMessage());
         }
     }
 
@@ -107,7 +108,8 @@ public void testLoadFromNonExistingUrl() {
             fail("exception expected");
         }
         catch (CheckstyleException ex) {
-            assertEquals("Unable to find: http://^%$^* %&% %^&", ex.getMessage());
+            assertEquals("Invalid error message",
+                "Unable to find: http://^%$^* %&% %^&", ex.getMessage());
         }
     }
 
@@ -133,7 +135,7 @@ public void testMultipleSuppression()
         se3.setLines("1,2-3");
         se3.setColumns("1,2-3");
         fc2.addFilter(se3);
-        assertEquals(fc2, fc);
+        assertEquals("Multiple suppressions were loaded incorrectly", fc2, fc);
     }
 
     @Test
@@ -143,9 +145,13 @@ public void testNoFile() {
             SuppressionsLoader.loadSuppressions(fn);
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to parse " + fn));
-            assertTrue(ex.getMessage().contains("\"files\""));
-            assertTrue(ex.getMessage().contains("\"suppress\""));
+            final String messageStart = "Unable to parse " + fn;
+            assertTrue("Exception message should start with: " + messageStart,
+                ex.getMessage().startsWith("Unable to parse " + fn));
+            assertTrue("Exception message should contain \"files\"",
+                ex.getMessage().contains("\"files\""));
+            assertTrue("Exception message should contain \"suppress\"",
+                ex.getMessage().contains("\"suppress\""));
         }
     }
 
@@ -156,9 +162,13 @@ public void testNoCheck() {
             SuppressionsLoader.loadSuppressions(fn);
         }
         catch (CheckstyleException ex) {
-            assertTrue(ex.getMessage().startsWith("Unable to parse " + fn));
-            assertTrue(ex.getMessage().contains("\"checks\""));
-            assertTrue(ex.getMessage().contains("\"suppress\""));
+            final String messageStart = "Unable to parse " + fn;
+            assertTrue("Exception message should start with: " + messageStart,
+                ex.getMessage().startsWith(messageStart));
+            assertTrue("Exception message should contain \"checks\"",
+                ex.getMessage().contains("\"checks\""));
+            assertTrue("Exception message should contain \"suppress\"",
+                ex.getMessage().contains("\"suppress\""));
         }
     }
 
@@ -255,7 +265,7 @@ public void testNoCheckNoId() {
             SuppressionsLoader.loadSuppressions(fn);
         }
         catch (CheckstyleException ex) {
-            assertEquals(
+            assertEquals("Invalid error message",
                 "Unable to parse " + fn + " - missing checks and id attribute",
                 ex.getMessage());
         }
@@ -274,7 +284,7 @@ public void testInvalidFileFormat() {
             SuppressionsLoader.loadSuppressions(fn);
         }
         catch (CheckstyleException ex) {
-            assertEquals(
+            assertEquals("Invalid error message",
                 "Unable to parse " + fn + " - invalid files or checks format",
                 ex.getMessage());
         }
@@ -286,6 +296,6 @@ public void testLoadFromClasspath()
         final FilterSet fc =
             SuppressionsLoader.loadSuppressions(getPath("suppressions_none.xml"));
         final FilterSet fc2 = new FilterSet();
-        assertEquals(fc2, fc);
+        assertEquals("Suppressions were not loaded", fc2, fc);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
index 9955fdb881..47246e010c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
@@ -19,309 +19,229 @@
 
 package com.puppycrawl.tools.checkstyle.grammars.javadoc;
 
-import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-
-import org.antlr.v4.runtime.ANTLRInputStream;
-import org.antlr.v4.runtime.BaseErrorListener;
-import org.antlr.v4.runtime.CommonTokenStream;
-import org.antlr.v4.runtime.RecognitionException;
-import org.antlr.v4.runtime.Recognizer;
-import org.antlr.v4.runtime.tree.ParseTree;
-import org.junit.Assert;
+
 import org.junit.Test;
 
-public class JavadocParseTreeTest {
-    private final BaseErrorListener errorListener = new FailOnErrorListener();
-    private JavadocParser parser;
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 
-    private ParseTree parseJavadoc(String aBlockComment)
-            throws IOException {
-        final Charset utf8Charset = Charset.forName("UTF-8");
-        final InputStream in = new ByteArrayInputStream(aBlockComment.getBytes(utf8Charset));
+public class JavadocParseTreeTest extends BaseCheckTestSupport {
 
-        final ANTLRInputStream input = new ANTLRInputStream(in);
-        final JavadocLexer lexer = new JavadocLexer(input);
-        lexer.removeErrorListeners();
-        lexer.addErrorListener(errorListener);
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("grammars" + File.separator + "javadoc" + File.separator + filename);
+    }
 
-        final CommonTokenStream tokens = new CommonTokenStream(lexer);
+    private String getHtmlPath(String filename) throws IOException {
+        return getPath("htmlTags" + File.separator + filename);
+    }
 
-        parser = new JavadocParser(tokens);
-        parser.removeErrorListeners();
-        parser.addErrorListener(errorListener);
+    private String getDocPath(String filename) throws IOException {
+        return getPath("javadocTags" + File.separator + filename);
+    }
 
-        return parser.javadoc();
+    @Test
+    public void oneSimpleHtmlTag() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedOneSimpleHtmlTagAst.txt"),
+                getHtmlPath("InputOneSimpleHtmlTag.javadoc"));
     }
 
-    private static String getFileContent(File filename)
-            throws IOException {
-        return new String(Files.readAllBytes(filename.toPath()), StandardCharsets.UTF_8);
+    @Test
+    public void textBeforeJavadocTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedTextBeforeJavadocTagsAst.txt"),
+                getDocPath("InputTextBeforeJavadocTags.javadoc"));
     }
 
-    private static String getPath(String filename) throws IOException {
-        return new File(
-                "src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/"
-                    + filename).getCanonicalPath();
+    @Test
+    public void customJavadocTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedCustomJavadocTagsAst.txt"),
+                getDocPath("InputCustomJavadocTags.javadoc"));
     }
 
-    private static String getHtmlPath(String filename) throws IOException {
-        return getPath("htmlTags" + File.separator + filename);
+    @Test
+    public void javadocTagDescriptionWithInlineTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedJavadocTagDescriptionWithInlineTagsAst.txt"),
+                getDocPath("InputJavadocTagDescriptionWithInlineTags.javadoc"));
     }
 
-    private static String getDocPath(String filename) throws IOException {
-        return getPath("javadocTags" + File.separator + filename);
+    @Test
+    public void leadingAsterisks() throws Exception {
+        verifyJavadocTree(getPath("expectedLeadingAsterisksAst.txt"),
+                getPath("InputLeadingAsterisks.javadoc"));
     }
 
     @Test
-    public void oneSimpleHtmlTag()
-            throws IOException {
-        final String filename = getHtmlPath("InputOneSimpleHtmlTag.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeOneSimpleHtmlTag();
-        compareTrees(expectedTree, generatedTree);
+    public void authorWithMailto() throws Exception {
+        verifyJavadocTree(getDocPath("expectedAuthorWithMailtoAst.txt"),
+                getDocPath("InputAuthorWithMailto.javadoc"));
     }
 
     @Test
-    public void textBeforeJavadocTags()
-            throws IOException {
-        final String filename = getDocPath("InputTextBeforeJavadocTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeTextBeforeJavadocTags();
-        compareTrees(expectedTree, generatedTree);
+    public void htmlTagsInParagraph() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedHtmlTagsInParagraphAst.txt"),
+                getHtmlPath("InputHtmlTagsInParagraph.javadoc"));
     }
 
     @Test
-    public void customJavadocTags()
-            throws IOException {
-        final String filename = getDocPath("InputCustomJavadocTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeCustomJavadocTags();
-        compareTrees(expectedTree, generatedTree);
+    public void linkInlineTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedLinkInlineTagsAst.txt"),
+                getDocPath("InputLinkInlineTags.javadoc"));
     }
 
     @Test
-    public void javadocTagDescriptionWithInlineTags()
-            throws IOException {
-        final String filename = getDocPath("InputJavadocTagDescriptionWithInlineTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeJavadocTagDescriptionWithInlineTags();
-        compareTrees(expectedTree, generatedTree);
+    public void seeReferenceWithFewNestedClasses() throws Exception {
+        verifyJavadocTree(getDocPath("expectedSeeReferenceWithFewNestedClassesAst.txt"),
+                getDocPath("InputSeeReferenceWithFewNestedClasses.javadoc"));
     }
 
     @Test
-    public void leadingAsterisks()
-            throws IOException {
-        final String filename = getPath("InputLeadingAsterisks.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeLeadingAsterisks();
-        compareTrees(expectedTree, generatedTree);
+    public void paramWithGeneric() throws Exception {
+        verifyJavadocTree(getDocPath("expectedParamWithGenericAst.txt"),
+                getDocPath("InputParamWithGeneric.javadoc"));
     }
 
     @Test
-    public void authorWithMailto()
-            throws IOException {
-        final String filename = getDocPath("InputAuthorWithMailto.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeAuthorWithMailto();
-        compareTrees(expectedTree, generatedTree);
+    public void serial() throws Exception {
+        verifyJavadocTree(getDocPath("expectedSerialAst.txt"),
+                getDocPath("InputSerial.javadoc"));
     }
 
     @Test
-    public void htmlTagsInParagraph()
-            throws IOException {
-        final String filename = getHtmlPath("InputHtmlTagsInParagraph.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeHtmlTagsInParagraph();
-        compareTrees(expectedTree, generatedTree);
+    public void since() throws Exception {
+        verifyJavadocTree(getDocPath("expectedSinceAst.txt"),
+                getDocPath("InputSince.javadoc"));
     }
 
     @Test
-    public void linkInlineTags()
-            throws IOException {
-        final String filename = getDocPath("InputLinkInlineTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeLinkInlineTags();
-        compareTrees(expectedTree, generatedTree);
+    public void unclosedAndClosedParagraphs() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedUnclosedAndClosedParagraphsAst.txt"),
+                getHtmlPath("InputUnclosedAndClosedParagraphs.javadoc"));
     }
 
     @Test
-    public void seeReferenceWithFewNestedClasses()
-            throws IOException {
-        final String filename = getDocPath("InputSeeReferenceWithFewNestedClasses.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeSeeReferenceWithFewNestedClasses();
-        compareTrees(expectedTree, generatedTree);
+    public void listWithUnclosedItemInUnclosedParagraph() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedListWithUnclosedItemInUnclosedParagraphAst.txt"),
+                getHtmlPath("InputListWithUnclosedItemInUnclosedParagraph.javadoc"));
     }
 
     @Test
-    public void paramWithGeneric()
-            throws IOException {
-        final String filename = getDocPath("InputParamWithGeneric.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeParamWithGeneric();
-        compareTrees(expectedTree, generatedTree);
+    public void unclosedParagraphFollowedByJavadocTag() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedUnclosedParagraphFollowedByJavadocTagAst.txt"),
+                getHtmlPath("InputUnclosedParagraphFollowedByJavadocTag.javadoc"));
     }
 
     @Test
-    public void serial()
-            throws IOException {
-        final String filename = getDocPath("InputSerial.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeSerial();
-        compareTrees(expectedTree, generatedTree);
+    public void allJavadocInlineTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedAllJavadocInlineTagsAst.txt"),
+                getDocPath("InputAllJavadocInlineTags.javadoc"));
     }
 
     @Test
-    public void since()
-            throws IOException {
-        final String filename = getDocPath("InputSince.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeSince();
-        compareTrees(expectedTree, generatedTree);
+    public void docRootInheritDoc() throws Exception {
+        verifyJavadocTree(getDocPath("expectedDocRootInheritDocAst.txt"),
+                getDocPath("InputDocRootInheritDoc.javadoc"));
     }
 
     @Test
-    public void unclosedAndClosedParagraphs()
-            throws IOException {
-        final String filename = getHtmlPath("InputUnclosedAndClosedParagraphs.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedAndClosedParagraphs();
-        compareTrees(expectedTree, generatedTree);
+    public void fewWhiteSpacesAsSeparator() throws Exception {
+        verifyJavadocTree(getDocPath("expectedFewWhiteSpacesAsSeparatorAst.txt"),
+                getDocPath("InputFewWhiteSpacesAsSeparator.javadoc"));
     }
 
     @Test
-    public void listWithUnclosedItemInUnclosedParagraph()
-            throws IOException {
-        final String filename = getHtmlPath("InputListWithUnclosedItemInUnclosedParagraph.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder
-                .treeListWithUnclosedItemInUnclosedParagraph();
-        compareTrees(expectedTree, generatedTree);
+    public void mixedCaseOfHtmlTags() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedMixedCaseOfHtmlTagsAst.txt"),
+                getHtmlPath("InputMixedCaseOfHtmlTags.javadoc"));
     }
 
     @Test
-    public void unclosedParagraphFollowedByJavadocTag()
-            throws IOException {
-        final String filename = getHtmlPath("InputUnclosedParagraphFollowedByJavadocTag.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedParagraphFollowedByJavadocTag();
-        compareTrees(expectedTree, generatedTree);
+    public void htmlComments() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedCommentsAst.txt"),
+                getHtmlPath("InputComments.javadoc"));
     }
 
     @Test
-    public void allJavadocInlineTags()
-            throws IOException {
-        final String filename = getDocPath("InputAllJavadocInlineTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeAllJavadocInlineTags();
-        compareTrees(expectedTree, generatedTree);
+    public void negativeNumberInAttribute() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedNegativeNumberInAttributeAst.txt"),
+                getHtmlPath("InputNegativeNumberInAttribute.javadoc"));
     }
 
     @Test
-    public void docRootInheritDoc()
-            throws IOException {
-        final String filename = getDocPath("InputDocRootInheritDoc.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeDocRootInheritDoc();
-        compareTrees(expectedTree, generatedTree);
+    public void dollarInLink() throws Exception {
+        verifyJavadocTree(getDocPath("expectedDollarInLinkAst.txt"),
+                getDocPath("InputDollarInLink.javadoc"));
     }
 
     @Test
-    public void fewWhiteSpacesAsSeparator()
-            throws IOException {
-        final String filename = getDocPath("InputFewWhiteSpacesAsSeparator.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeFewWhiteSpacesAsSeparator();
-        compareTrees(expectedTree, generatedTree);
+    public void dotCharacterInCustomTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedCustomTagWithDotAst.txt"),
+                getDocPath("InputCustomTagWithDot.javadoc"));
     }
 
     @Test
-    public void mixedCaseOfHtmlTags()
-            throws IOException {
-        final String filename = getHtmlPath("InputMixedCaseOfHtmlTags.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeMixedCaseOfHtmlTags();
-        compareTrees(expectedTree, generatedTree);
+    public void testLinkToPackage() throws Exception {
+        verifyJavadocTree(getDocPath("expectedLinkToPackageAst.txt"),
+                getDocPath("InputLinkToPackage.javadoc"));
     }
 
     @Test
-    public void htmlComments()
-            throws IOException {
-        final String filename = getHtmlPath("InputComments.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeComments();
-        compareTrees(expectedTree, generatedTree);
+    public void testLeadingAsterisksExtended() throws Exception {
+        verifyJavadocTree(getPath("expectedLeadingAsterisksExtendedAst.txt"),
+                getPath("InputLeadingAsterisksExtended.javadoc"));
     }
 
     @Test
-    public void negativeNumberInAttribute()
-            throws IOException {
-        final String filename = getHtmlPath("InputNegativeNumberInAttribute.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeNegativeNumberInAttribute();
-        compareTrees(expectedTree, generatedTree);
+    public void testInlineCustomJavadocTag() throws Exception {
+        verifyJavadocTree(getDocPath("expectedInlineCustomJavadocTagAst.txt"),
+                getDocPath("InputInlineCustomJavadocTag.javadoc"));
     }
 
     @Test
-    public void dollarInLink()
-            throws IOException {
-        final String filename = getDocPath("InputDollarInLink.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeDollarInLink();
-        compareTrees(expectedTree, generatedTree);
+    public void testAttributeValueWithoutQuotes() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedAttributeValueWithoutQuotesAst.txt"),
+                getHtmlPath("InputAttributeValueWithoutQuotes.javadoc"));
     }
 
     @Test
-    public void dotCharacterInCustomTags()
-            throws IOException {
-        final String filename = getDocPath("InputCustomTagWithDot.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeCustomTagWithDot();
-        compareTrees(expectedTree, generatedTree);
+    public void testClosedOtherTag() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedClosedOtherTagAst.txt"),
+                getHtmlPath("InputClosedOtherTag.javadoc"));
     }
 
     @Test
-    public void testLinkToPackage() throws IOException {
-        final String filename = getDocPath("InputLinkToPackage.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeLinkToPackage();
-        compareTrees(expectedTree, generatedTree);
+    public void testAllStandardJavadocTags() throws Exception {
+        verifyJavadocTree(getDocPath("expectedAllStandardJavadocTagsAst.txt"),
+                getDocPath("InputAllStandardJavadocTags.javadoc"));
     }
 
     @Test
-    public void testLeadingAsterisksExtended() throws IOException {
-        final String filename = getPath("InputLeadingAsterisksExtended.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeLeadingAsterisksExtended();
-        compareTrees(expectedTree, generatedTree);
+    public void testAsteriskInJavadocInlineTag() throws Exception {
+        verifyJavadocTree(getDocPath("expectedAsteriskInJavadocInlineTagAst.txt"),
+                getDocPath("InputAsteriskInJavadocInlineTag.javadoc"));
     }
 
     @Test
-    public void testInlineCustomJavadocTag() throws IOException {
-        final String filename = getDocPath("InputInlineCustomJavadocTag.txt");
-        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));
-        final ParseTree expectedTree = ParseTreeBuilder.treeInlineCustomJavadocTag();
-        compareTrees(expectedTree, generatedTree);
+    public void testAsteriskInLiteral() throws Exception {
+        verifyJavadocTree(getDocPath("expectedAsteriskInLiteralAst.txt"),
+                getDocPath("InputAsteriskInLiteral.javadoc"));
     }
 
-    private void compareTrees(ParseTree first, ParseTree second) {
-        Assert.assertEquals(first.toStringTree(parser), second.toStringTree(parser));
+    @Test
+    public void testInnerBracesInCodeTag() throws Exception {
+        verifyJavadocTree(getDocPath("expectedInnerBracesInCodeTagAst.txt"),
+                getDocPath("InputInnerBracesInCodeTag.javadoc"));
     }
 
-    private static class FailOnErrorListener extends BaseErrorListener {
-        @Override
-        public void syntaxError(
-                Recognizer<?, ?> recognizer, Object offendingSymbol,
-                int line, int charPositionInLine,
-                String msg, RecognitionException ex) {
-            Assert.fail("[" + line + ", " + charPositionInLine + "] " + msg);
-        }
+    @Test
+    public void testNewlineAndAsteriskInParameters() throws Exception {
+        verifyJavadocTree(getDocPath("expectedNewlineAndAsteriskInParametersAst.txt"),
+                getDocPath("InputNewlineAndAsteriskInParameters.javadoc"));
     }
 
+    @Test
+    public void testTwoLinkTagsInRow() throws Exception {
+        verifyJavadocTree(getDocPath("expectedTwoLinkTagsInRowAst.txt"),
+                getDocPath("InputTwoLinkTagsInRow.javadoc"));
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java
deleted file mode 100755
index 96e6627a18..0000000000
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java
+++ /dev/null
@@ -1,6344 +0,0 @@
-////////////////////////////////////////////////////////////////////////////////
-// checkstyle: Checks Java source code for adherence to a set of rules.
-// Copyright (C) 2001-2017 the original author or authors.
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Lesser General Public
-// License as published by the Free Software Foundation; either
-// version 2.1 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Lesser General Public License for more details.
-//
-// You should have received a copy of the GNU Lesser General Public
-// License along with this library; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-////////////////////////////////////////////////////////////////////////////////
-
-package com.puppycrawl.tools.checkstyle.grammars.javadoc;
-
-import javax.annotation.Generated;
-
-import org.antlr.v4.runtime.CommonToken;
-import org.antlr.v4.runtime.tree.ParseTree;
-
-import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.AttributeContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.BrTagContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.DdTagOpenContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.DescriptionContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.DtTagCloseContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.HtmlCommentContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.HtmlElementCloseContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.HtmlElementContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.HtmlElementOpenContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.HtmlTagContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.JavadocContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.JavadocInlineTagContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.JavadocTagContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.LiContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.LiTagCloseContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.LiTagOpenContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.PTagCloseContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.PTagOpenContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.ParagraphContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.ParametersContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.ReferenceContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.SingletonElementContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TextContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagCloseContext;
-import com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser.TrTagOpenContext;
-
-/**
- * The class is used for testing. It builds expected ParseTree of javadoc comments.
- * All methods of this class were generated by ExpectedParseTreeGenerator.
- * It is located in 'contribution' repository:
- * <a href="https://github.com/checkstyle/contribution/blob/master/javadoc-expected-tree-generator/ExpectedParseTreeGenerator.java">Link</a>
- */
-@Generated(value="ExpectedParseTreeGenerator")
-//@formatter:off
-final class ParseTreeBuilder {
-    private static final String LINE_SEPARATOR = System.getProperty("line.separator");
-
-    private ParseTreeBuilder() {
-    }
-
-    public static ParseTree treeLeadingAsterisks()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "  *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "L");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext0.addChild(char6);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext0.addChild(char14);
-        javadocContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "    *");
-        javadocContext0.addChild(leadingAsterisk1);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws2);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "A");
-        textContext1.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext1.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char21);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char24);
-        javadocContext0.addChild(textContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAttributeValueWithoutQuotes()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext0.addChild(ws0);
-        AttributeContext attributeContext0 = new AttributeContext(htmlElementOpenContext0, 0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "href");
-        attributeContext0.addChild(htmlTagName1);
-        CommonToken equals0 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext0.addChild(equals0);
-        CommonToken attrValue0 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "http://www.ietf.org/rfc/rfc3758.txt");
-        attributeContext0.addChild(attrValue0);
-        htmlElementOpenContext0.addChild(attributeContext0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "R");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "F");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "C");
-        textContext0.addChild(char2);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "3");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "7");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "5");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "8");
-        textContext0.addChild(char6);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName2 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementCloseContext0.addChild(htmlTagName2);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext1.addChild(char7);
-        javadocContext0.addChild(textContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeClosedOtherTag()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        javadocContext0.addChild(textContext0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        DdTagOpenContext ddTagOpenContext0 = new DdTagOpenContext(htmlElementContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        ddTagOpenContext0.addChild(open0);
-        CommonToken ddHtmlTagName0 = new CommonToken(JavadocTokenTypes.DD_HTML_TAG_NAME, "dd");
-        ddTagOpenContext0.addChild(ddHtmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        ddTagOpenContext0.addChild(close0);
-        htmlElementContext0.addChild(ddTagOpenContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        HtmlElementContext htmlElementContext1 = new HtmlElementContext(javadocContext0, 0);
-        DtTagCloseContext dtTagCloseContext0 = new DtTagCloseContext(htmlElementContext1, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        dtTagCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        dtTagCloseContext0.addChild(slash0);
-        CommonToken dtHtmlTagName0 = new CommonToken(JavadocTokenTypes.DT_HTML_TAG_NAME, "dt");
-        dtTagCloseContext0.addChild(dtHtmlTagName0);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        dtTagCloseContext0.addChild(close1);
-        htmlElementContext1.addChild(dtTagCloseContext0);
-        javadocContext0.addChild(htmlElementContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeComments()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "U");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char2);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        javadocContext0.addChild(textContext0);
-        HtmlCommentContext htmlCommentContext0 = new HtmlCommentContext(javadocContext0, 0);
-        CommonToken htmlCommentStart0 = new CommonToken(JavadocTokenTypes.HTML_COMMENT_START, "<!--");
-        htmlCommentContext0.addChild(htmlCommentStart0);
-        TextContext textContext1 = new TextContext(htmlCommentContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext1.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext1.addChild(char10);
-        htmlCommentContext0.addChild(textContext1);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlCommentContext0.addChild(newline0);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        htmlCommentContext0.addChild(leadingAsterisk1);
-        TextContext textContext2 = new TextContext(htmlCommentContext0, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws3);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "j");
-        textContext2.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext2.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char14);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws4);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext2.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext2.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char18);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws5);
-        htmlCommentContext0.addChild(textContext2);
-        CommonToken htmlCommentEnd0 = new CommonToken(JavadocTokenTypes.HTML_COMMENT_END, "-->");
-        htmlCommentContext0.addChild(htmlCommentEnd0);
-        javadocContext0.addChild(htmlCommentContext0);
-        TextContext textContext3 = new TextContext(javadocContext0, 0);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws6);
-        javadocContext0.addChild(textContext3);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "b");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext4 = new TextContext(htmlTagContext0, 0);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext4.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext4.addChild(char24);
-        htmlTagContext0.addChild(textContext4);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "b");
-        htmlElementCloseContext0.addChild(htmlTagName1);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeHtmlTagsInParagraph()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        javadocContext0.addChild(textContext0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        ParagraphContext paragraphContext0 = new ParagraphContext(htmlElementContext0, 0);
-        PTagOpenContext pTagOpenContext0 = new PTagOpenContext(paragraphContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext0.addChild(open0);
-        CommonToken pHtmlTagName0 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagOpenContext0.addChild(pHtmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext0.addChild(close0);
-        paragraphContext0.addChild(pTagOpenContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        paragraphContext0.addChild(newline1);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        paragraphContext0.addChild(leadingAsterisk1);
-        TextContext textContext1 = new TextContext(paragraphContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        paragraphContext0.addChild(textContext1);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(paragraphContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open1);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "b");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext2 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "D");
-        textContext2.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext2.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext2.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext2.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext2.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext2.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext2.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char10);
-        htmlTagContext0.addChild(textContext2);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open2 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open2);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "b");
-        htmlElementCloseContext0.addChild(htmlTagName1);
-        CommonToken close2 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close2);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        paragraphContext0.addChild(htmlTagContext0);
-        TextContext textContext3 = new TextContext(paragraphContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws2);
-        paragraphContext0.addChild(textContext3);
-        HtmlTagContext htmlTagContext1 = new HtmlTagContext(paragraphContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext1 = new HtmlElementOpenContext(htmlTagContext1, 0);
-        CommonToken open3 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext1.addChild(open3);
-        CommonToken htmlTagName2 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "i");
-        htmlElementOpenContext1.addChild(htmlTagName2);
-        CommonToken close3 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext1.addChild(close3);
-        htmlTagContext1.addChild(htmlElementOpenContext1);
-        TextContext textContext4 = new TextContext(htmlTagContext1, 0);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext4.addChild(char12);
-        htmlTagContext1.addChild(textContext4);
-        HtmlElementCloseContext htmlElementCloseContext1 = new HtmlElementCloseContext(htmlTagContext1, 0);
-        CommonToken open4 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext1.addChild(open4);
-        CommonToken slash1 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext1.addChild(slash1);
-        CommonToken htmlTagName3 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "i");
-        htmlElementCloseContext1.addChild(htmlTagName3);
-        CommonToken close4 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext1.addChild(close4);
-        htmlTagContext1.addChild(htmlElementCloseContext1);
-        paragraphContext0.addChild(htmlTagContext1);
-        TextContext textContext5 = new TextContext(paragraphContext0, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws3);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext5.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext5.addChild(char14);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws4);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext5.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext5.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext5.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext5.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext5.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext5.addChild(char20);
-        paragraphContext0.addChild(textContext5);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        paragraphContext0.addChild(newline2);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        paragraphContext0.addChild(leadingAsterisk2);
-        TextContext textContext6 = new TextContext(paragraphContext0, 0);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext6.addChild(ws5);
-        paragraphContext0.addChild(textContext6);
-        PTagCloseContext pTagCloseContext0 = new PTagCloseContext(paragraphContext0, 0);
-        CommonToken open5 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagCloseContext0.addChild(open5);
-        CommonToken slash2 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        pTagCloseContext0.addChild(slash2);
-        CommonToken pHtmlTagName1 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagCloseContext0.addChild(pHtmlTagName1);
-        CommonToken close5 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagCloseContext0.addChild(close5);
-        paragraphContext0.addChild(pTagCloseContext0);
-        htmlElementContext0.addChild(paragraphContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline3);
-        CommonToken leadingAsterisk3 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk3);
-        TextContext textContext7 = new TextContext(javadocContext0, 0);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws6);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "A");
-        textContext7.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext7.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext7.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext7.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext7.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext7.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext7.addChild(char27);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws7);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext7.addChild(char28);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext7.addChild(char29);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext7.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext7.addChild(char31);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws8);
-        CommonToken char32 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext7.addChild(char32);
-        CommonToken char33 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext7.addChild(char33);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws9);
-        CommonToken char34 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext7.addChild(char34);
-        CommonToken char35 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext7.addChild(char35);
-        CommonToken char36 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext7.addChild(char36);
-        CommonToken char37 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext7.addChild(char37);
-        javadocContext0.addChild(textContext7);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline4);
-        TextContext textContext8 = new TextContext(javadocContext0, 0);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws10);
-        javadocContext0.addChild(textContext8);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeListWithUnclosedItemInUnclosedParagraph()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        PTagOpenContext pTagOpenContext0 = new PTagOpenContext(htmlElementContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext0.addChild(open0);
-        CommonToken pHtmlTagName0 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagOpenContext0.addChild(pHtmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext0.addChild(close0);
-        htmlElementContext0.addChild(pTagOpenContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        HtmlElementContext htmlElementContext1 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext1, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open1);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "ul");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline1);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, "\t");
-        textContext0.addChild(ws0);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementContext htmlElementContext2 = new HtmlElementContext(htmlTagContext0, 0);
-        LiTagOpenContext liTagOpenContext0 = new LiTagOpenContext(htmlElementContext2, 0);
-        CommonToken open2 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        liTagOpenContext0.addChild(open2);
-        CommonToken liHtmlTagName0 = new CommonToken(JavadocTokenTypes.LI_HTML_TAG_NAME, "li");
-        liTagOpenContext0.addChild(liHtmlTagName0);
-        CommonToken close2 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        liTagOpenContext0.addChild(close2);
-        htmlElementContext2.addChild(liTagOpenContext0);
-        htmlTagContext0.addChild(htmlElementContext2);
-        TextContext textContext1 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char3);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext1.addChild(char4);
-        htmlTagContext0.addChild(textContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline2);
-        TextContext textContext2 = new TextContext(htmlTagContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, "\t");
-        textContext2.addChild(ws2);
-        htmlTagContext0.addChild(textContext2);
-        HtmlElementContext htmlElementContext3 = new HtmlElementContext(htmlTagContext0, 0);
-        LiContext liContext0 = new LiContext(htmlElementContext3, 0);
-        LiTagOpenContext liTagOpenContext1 = new LiTagOpenContext(liContext0, 0);
-        CommonToken open3 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        liTagOpenContext1.addChild(open3);
-        CommonToken liHtmlTagName1 = new CommonToken(JavadocTokenTypes.LI_HTML_TAG_NAME, "li");
-        liTagOpenContext1.addChild(liHtmlTagName1);
-        CommonToken close3 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        liTagOpenContext1.addChild(close3);
-        liContext0.addChild(liTagOpenContext1);
-        TextContext textContext3 = new TextContext(liContext0, 0);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext3.addChild(char8);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws3);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "2");
-        textContext3.addChild(char9);
-        liContext0.addChild(textContext3);
-        LiTagCloseContext liTagCloseContext0 = new LiTagCloseContext(liContext0, 0);
-        CommonToken open4 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        liTagCloseContext0.addChild(open4);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        liTagCloseContext0.addChild(slash0);
-        CommonToken liHtmlTagName2 = new CommonToken(JavadocTokenTypes.LI_HTML_TAG_NAME, "li");
-        liTagCloseContext0.addChild(liHtmlTagName2);
-        CommonToken close4 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        liTagCloseContext0.addChild(close4);
-        liContext0.addChild(liTagCloseContext0);
-        htmlElementContext3.addChild(liContext0);
-        htmlTagContext0.addChild(htmlElementContext3);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline3);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open5 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open5);
-        CommonToken slash1 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash1);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "ul");
-        htmlElementCloseContext0.addChild(htmlTagName1);
-        CommonToken close5 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close5);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext1.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeMixedCaseOfHtmlTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        PTagOpenContext pTagOpenContext0 = new PTagOpenContext(htmlElementContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext0.addChild(open0);
-        CommonToken pHtmlTagName0 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "P");
-        pTagOpenContext0.addChild(pHtmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext0.addChild(close0);
-        htmlElementContext0.addChild(pTagOpenContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        HtmlElementContext htmlElementContext1 = new HtmlElementContext(javadocContext0, 0);
-        SingletonElementContext singletonElementContext0 = new SingletonElementContext(htmlElementContext1, 0);
-        BrTagContext brTagContext0 = new BrTagContext(singletonElementContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        brTagContext0.addChild(open1);
-        CommonToken brHtmlTagName0 = new CommonToken(JavadocTokenTypes.BR_HTML_TAG_NAME, "br");
-        brTagContext0.addChild(brHtmlTagName0);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        brTagContext0.addChild(close1);
-        singletonElementContext0.addChild(brTagContext0);
-        htmlElementContext1.addChild(singletonElementContext0);
-        javadocContext0.addChild(htmlElementContext1);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        HtmlElementContext htmlElementContext2 = new HtmlElementContext(javadocContext0, 0);
-        SingletonElementContext singletonElementContext1 = new SingletonElementContext(htmlElementContext2, 0);
-        BrTagContext brTagContext1 = new BrTagContext(singletonElementContext1, 0);
-        CommonToken open2 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        brTagContext1.addChild(open2);
-        CommonToken brHtmlTagName1 = new CommonToken(JavadocTokenTypes.BR_HTML_TAG_NAME, "br");
-        brTagContext1.addChild(brHtmlTagName1);
-        CommonToken slashClose0 = new CommonToken(JavadocTokenTypes.SLASH_CLOSE, "/>");
-        brTagContext1.addChild(slashClose0);
-        singletonElementContext1.addChild(brTagContext1);
-        htmlElementContext2.addChild(singletonElementContext1);
-        javadocContext0.addChild(htmlElementContext2);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline2);
-        HtmlElementContext htmlElementContext3 = new HtmlElementContext(javadocContext0, 0);
-        SingletonElementContext singletonElementContext2 = new SingletonElementContext(htmlElementContext3, 0);
-        BrTagContext brTagContext2 = new BrTagContext(singletonElementContext2, 0);
-        CommonToken open3 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        brTagContext2.addChild(open3);
-        CommonToken brHtmlTagName2 = new CommonToken(JavadocTokenTypes.BR_HTML_TAG_NAME, "BR");
-        brTagContext2.addChild(brHtmlTagName2);
-        CommonToken close2 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        brTagContext2.addChild(close2);
-        singletonElementContext2.addChild(brTagContext2);
-        htmlElementContext3.addChild(singletonElementContext2);
-        javadocContext0.addChild(htmlElementContext3);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline3);
-        HtmlElementContext htmlElementContext4 = new HtmlElementContext(javadocContext0, 0);
-        SingletonElementContext singletonElementContext3 = new SingletonElementContext(htmlElementContext4, 0);
-        BrTagContext brTagContext3 = new BrTagContext(singletonElementContext3, 0);
-        CommonToken open4 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        brTagContext3.addChild(open4);
-        CommonToken brHtmlTagName3 = new CommonToken(JavadocTokenTypes.BR_HTML_TAG_NAME, "BR");
-        brTagContext3.addChild(brHtmlTagName3);
-        CommonToken slashClose1 = new CommonToken(JavadocTokenTypes.SLASH_CLOSE, "/>");
-        brTagContext3.addChild(slashClose1);
-        singletonElementContext3.addChild(brTagContext3);
-        htmlElementContext4.addChild(singletonElementContext3);
-        javadocContext0.addChild(htmlElementContext4);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline4);
-        HtmlElementContext htmlElementContext5 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext5, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open5 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open5);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "TABLE");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken close3 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close3);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        CommonToken newline5 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline5);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, "\t");
-        textContext0.addChild(ws0);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementContext htmlElementContext6 = new HtmlElementContext(htmlTagContext0, 0);
-        TrContext trContext0 = new TrContext(htmlElementContext6, 0);
-        TrTagOpenContext trTagOpenContext0 = new TrTagOpenContext(trContext0, 0);
-        CommonToken open6 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        trTagOpenContext0.addChild(open6);
-        CommonToken trHtmlTagName0 = new CommonToken(JavadocTokenTypes.TR_HTML_TAG_NAME, "tr");
-        trTagOpenContext0.addChild(trHtmlTagName0);
-        CommonToken close4 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        trTagOpenContext0.addChild(close4);
-        trContext0.addChild(trTagOpenContext0);
-        TrTagCloseContext trTagCloseContext0 = new TrTagCloseContext(trContext0, 0);
-        CommonToken open7 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        trTagCloseContext0.addChild(open7);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        trTagCloseContext0.addChild(slash0);
-        CommonToken trHtmlTagName1 = new CommonToken(JavadocTokenTypes.TR_HTML_TAG_NAME, "TR");
-        trTagCloseContext0.addChild(trHtmlTagName1);
-        CommonToken close5 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        trTagCloseContext0.addChild(close5);
-        trContext0.addChild(trTagCloseContext0);
-        htmlElementContext6.addChild(trContext0);
-        htmlTagContext0.addChild(htmlElementContext6);
-        CommonToken newline6 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline6);
-        TextContext textContext1 = new TextContext(htmlTagContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, "\t");
-        textContext1.addChild(ws1);
-        htmlTagContext0.addChild(textContext1);
-        HtmlElementContext htmlElementContext7 = new HtmlElementContext(htmlTagContext0, 0);
-        TrContext trContext1 = new TrContext(htmlElementContext7, 0);
-        TrTagOpenContext trTagOpenContext1 = new TrTagOpenContext(trContext1, 0);
-        CommonToken open8 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        trTagOpenContext1.addChild(open8);
-        CommonToken trHtmlTagName2 = new CommonToken(JavadocTokenTypes.TR_HTML_TAG_NAME, "TR");
-        trTagOpenContext1.addChild(trHtmlTagName2);
-        CommonToken close6 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        trTagOpenContext1.addChild(close6);
-        trContext1.addChild(trTagOpenContext1);
-        TrTagCloseContext trTagCloseContext1 = new TrTagCloseContext(trContext1, 0);
-        CommonToken open9 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        trTagCloseContext1.addChild(open9);
-        CommonToken slash1 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        trTagCloseContext1.addChild(slash1);
-        CommonToken trHtmlTagName3 = new CommonToken(JavadocTokenTypes.TR_HTML_TAG_NAME, "tr");
-        trTagCloseContext1.addChild(trHtmlTagName3);
-        CommonToken close7 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        trTagCloseContext1.addChild(close7);
-        trContext1.addChild(trTagCloseContext1);
-        htmlElementContext7.addChild(trContext1);
-        htmlTagContext0.addChild(htmlElementContext7);
-        CommonToken newline7 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext0.addChild(newline7);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open10 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open10);
-        CommonToken slash2 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash2);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "table");
-        htmlElementCloseContext0.addChild(htmlTagName1);
-        CommonToken close8 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close8);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext5.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext5);
-        CommonToken newline8 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline8);
-        HtmlElementContext htmlElementContext8 = new HtmlElementContext(javadocContext0, 0);
-        PTagCloseContext pTagCloseContext0 = new PTagCloseContext(htmlElementContext8, 0);
-        CommonToken open11 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagCloseContext0.addChild(open11);
-        CommonToken slash3 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        pTagCloseContext0.addChild(slash3);
-        CommonToken pHtmlTagName1 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagCloseContext0.addChild(pHtmlTagName1);
-        CommonToken close9 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagCloseContext0.addChild(close9);
-        htmlElementContext8.addChild(pTagCloseContext0);
-        javadocContext0.addChild(htmlElementContext8);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeNegativeNumberInAttribute()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "font");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext0.addChild(ws0);
-        AttributeContext attributeContext0 = new AttributeContext(htmlElementOpenContext0, 0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "size");
-        attributeContext0.addChild(htmlTagName1);
-        CommonToken equals0 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext0.addChild(equals0);
-        CommonToken attrValue0 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "-2");
-        attributeContext0.addChild(attrValue0);
-        htmlElementOpenContext0.addChild(attributeContext0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "M");
-        textContext0.addChild(char1);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName2 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "font");
-        htmlElementCloseContext0.addChild(htmlTagName2);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeOneSimpleHtmlTag()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "g");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char5);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "g");
-        htmlElementCloseContext0.addChild(htmlTagName1);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeUnclosedAndClosedParagraphs()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        PTagOpenContext pTagOpenContext0 = new PTagOpenContext(htmlElementContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext0.addChild(open0);
-        CommonToken pHtmlTagName0 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagOpenContext0.addChild(pHtmlTagName0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext0.addChild(close0);
-        htmlElementContext0.addChild(pTagOpenContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char4);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext0.addChild(char13);
-        javadocContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        HtmlElementContext htmlElementContext1 = new HtmlElementContext(javadocContext0, 0);
-        ParagraphContext paragraphContext0 = new ParagraphContext(htmlElementContext1, 0);
-        PTagOpenContext pTagOpenContext1 = new PTagOpenContext(paragraphContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext1.addChild(open1);
-        CommonToken pHtmlTagName1 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagOpenContext1.addChild(pHtmlTagName1);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext1.addChild(close1);
-        paragraphContext0.addChild(pTagOpenContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        paragraphContext0.addChild(newline2);
-        TextContext textContext1 = new TextContext(paragraphContext0, 0);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext1.addChild(char19);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext1.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext1.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext1.addChild(char27);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext1.addChild(char28);
-        paragraphContext0.addChild(textContext1);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        paragraphContext0.addChild(newline3);
-        PTagCloseContext pTagCloseContext0 = new PTagCloseContext(paragraphContext0, 0);
-        CommonToken open2 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagCloseContext0.addChild(open2);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        pTagCloseContext0.addChild(slash0);
-        CommonToken pHtmlTagName2 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagCloseContext0.addChild(pHtmlTagName2);
-        CommonToken close2 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagCloseContext0.addChild(close2);
-        paragraphContext0.addChild(pTagCloseContext0);
-        htmlElementContext1.addChild(paragraphContext0);
-        javadocContext0.addChild(htmlElementContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeUnclosedParagraphFollowedByJavadocTag()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(javadocContext0, 0);
-        PTagOpenContext pTagOpenContext0 = new PTagOpenContext(htmlElementContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        pTagOpenContext0.addChild(open0);
-        CommonToken pHtmlTagName0 = new CommonToken(JavadocTokenTypes.P_HTML_TAG_NAME, "p");
-        pTagOpenContext0.addChild(pHtmlTagName0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        pTagOpenContext0.addChild(ws0);
-        AttributeContext attributeContext0 = new AttributeContext(pTagOpenContext0, 0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "style");
-        attributeContext0.addChild(htmlTagName0);
-        CommonToken equals0 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext0.addChild(equals0);
-        CommonToken attrValue0 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "\"color: red;\"");
-        attributeContext0.addChild(attrValue0);
-        pTagOpenContext0.addChild(attributeContext0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        pTagOpenContext0.addChild(close0);
-        htmlElementContext0.addChild(pTagOpenContext0);
-        javadocContext0.addChild(htmlElementContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, "\t");
-        textContext0.addChild(ws1);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char3);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws2);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char7);
-        javadocContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext0.addChild(authorLiteral0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws3);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext1 = new TextContext(descriptionContext0, 0);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "B");
-        textContext1.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext1.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char15);
-        descriptionContext0.addChild(textContext1);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAllJavadocInlineTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken codeLiteral0 = new CommonToken(JavadocTokenTypes.CODE_LITERAL, "@code");
-        javadocInlineTagContext0.addChild(codeLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        TextContext textContext0 = new TextContext(javadocInlineTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "<");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, ">");
-        textContext0.addChild(char5);
-        javadocInlineTagContext0.addChild(textContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        javadocContext0.addChild(textContext1);
-        JavadocInlineTagContext javadocInlineTagContext1 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext1.addChild(javadocInlineTagStart1);
-        CommonToken literalLiteral0 = new CommonToken(JavadocTokenTypes.LITERAL_LITERAL, "@literal");
-        javadocInlineTagContext1.addChild(literalLiteral0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext1.addChild(ws2);
-        TextContext textContext2 = new TextContext(javadocInlineTagContext1, 0);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "<");
-        textContext2.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext2.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext2.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext2.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, ">");
-        textContext2.addChild(char14);
-        javadocInlineTagContext1.addChild(textContext2);
-        CommonToken javadocInlineTagEnd1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext1.addChild(javadocInlineTagEnd1);
-        javadocContext0.addChild(javadocInlineTagContext1);
-        TextContext textContext3 = new TextContext(javadocContext0, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws3);
-        javadocContext0.addChild(textContext3);
-        JavadocInlineTagContext javadocInlineTagContext2 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart2 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext2.addChild(javadocInlineTagStart2);
-        CommonToken docRootLiteral0 = new CommonToken(JavadocTokenTypes.DOC_ROOT_LITERAL, "@docRoot");
-        javadocInlineTagContext2.addChild(docRootLiteral0);
-        CommonToken javadocInlineTagEnd2 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext2.addChild(javadocInlineTagEnd2);
-        javadocContext0.addChild(javadocInlineTagContext2);
-        TextContext textContext4 = new TextContext(javadocContext0, 0);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws4);
-        javadocContext0.addChild(textContext4);
-        JavadocInlineTagContext javadocInlineTagContext3 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart3 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext3.addChild(javadocInlineTagStart3);
-        CommonToken inheritDocLiteral0 = new CommonToken(JavadocTokenTypes.INHERIT_DOC_LITERAL, "@inheritDoc");
-        javadocInlineTagContext3.addChild(inheritDocLiteral0);
-        CommonToken javadocInlineTagEnd3 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext3.addChild(javadocInlineTagEnd3);
-        javadocContext0.addChild(javadocInlineTagContext3);
-        TextContext textContext5 = new TextContext(javadocContext0, 0);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws5);
-        javadocContext0.addChild(textContext5);
-        JavadocInlineTagContext javadocInlineTagContext4 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart4 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext4.addChild(javadocInlineTagStart4);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext4.addChild(linkLiteral0);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext4.addChild(ws6);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext4, 0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "A");
-        referenceContext0.addChild(class0);
-        javadocInlineTagContext4.addChild(referenceContext0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocInlineTagContext4, 0);
-        TextContext textContext6 = new TextContext(descriptionContext0, 0);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext6.addChild(ws7);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "A");
-        textContext6.addChild(char15);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext6.addChild(ws8);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext6.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext6.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext6.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext6.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext6.addChild(char20);
-        descriptionContext0.addChild(textContext6);
-        javadocInlineTagContext4.addChild(descriptionContext0);
-        CommonToken javadocInlineTagEnd4 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext4.addChild(javadocInlineTagEnd4);
-        javadocContext0.addChild(javadocInlineTagContext4);
-        TextContext textContext7 = new TextContext(javadocContext0, 0);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws9);
-        javadocContext0.addChild(textContext7);
-        JavadocInlineTagContext javadocInlineTagContext5 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart5 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext5.addChild(javadocInlineTagStart5);
-        CommonToken linkplainLiteral0 = new CommonToken(JavadocTokenTypes.LINKPLAIN_LITERAL, "@linkplain");
-        javadocInlineTagContext5.addChild(linkplainLiteral0);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext5.addChild(ws10);
-        ReferenceContext referenceContext1 = new ReferenceContext(javadocInlineTagContext5, 0);
-        CommonToken class1 = new CommonToken(JavadocTokenTypes.CLASS, "A");
-        referenceContext1.addChild(class1);
-        javadocInlineTagContext5.addChild(referenceContext1);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocInlineTagContext5, 0);
-        TextContext textContext8 = new TextContext(descriptionContext1, 0);
-        CommonToken ws11 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws11);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext8.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext8.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext8.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext8.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext8.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext8.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext8.addChild(char27);
-        CommonToken ws12 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws12);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext8.addChild(char28);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext8.addChild(char29);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext8.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext8.addChild(char31);
-        descriptionContext1.addChild(textContext8);
-        javadocInlineTagContext5.addChild(descriptionContext1);
-        CommonToken javadocInlineTagEnd5 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext5.addChild(javadocInlineTagEnd5);
-        javadocContext0.addChild(javadocInlineTagContext5);
-        TextContext textContext9 = new TextContext(javadocContext0, 0);
-        CommonToken ws13 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext9.addChild(ws13);
-        javadocContext0.addChild(textContext9);
-        JavadocInlineTagContext javadocInlineTagContext6 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart6 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext6.addChild(javadocInlineTagStart6);
-        CommonToken valueLiteral0 = new CommonToken(JavadocTokenTypes.VALUE_LITERAL, "@value");
-        javadocInlineTagContext6.addChild(valueLiteral0);
-        CommonToken ws14 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext6.addChild(ws14);
-        ReferenceContext referenceContext2 = new ReferenceContext(javadocInlineTagContext6, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "lang");
-        referenceContext2.addChild(package0);
-        CommonToken dot0 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext2.addChild(dot0);
-        CommonToken class2 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext2.addChild(class2);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext2.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "MAX_VALUE");
-        referenceContext2.addChild(member0);
-        javadocInlineTagContext6.addChild(referenceContext2);
-        CommonToken javadocInlineTagEnd6 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext6.addChild(javadocInlineTagEnd6);
-        javadocContext0.addChild(javadocInlineTagContext6);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAllStandardJavadocTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext0.addChild(authorLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "J");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char3);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "L");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char8);
-        descriptionContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline1);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral1 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext1.addChild(authorLiteral1);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext1.addChild(ws2);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext1, 0);
-        TextContext textContext1 = new TextContext(descriptionContext1, 0);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "M");
-        textContext1.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char11);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char13);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws4);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext1.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext1.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext1.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, ",");
-        textContext1.addChild(char19);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws5);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext1.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext1.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext1.addChild(char22);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws6);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "Z");
-        textContext1.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char26);
-        descriptionContext1.addChild(textContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext1.addChild(newline2);
-        javadocTagContext1.addChild(descriptionContext1);
-        javadocContext0.addChild(javadocTagContext1);
-        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral2 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext2.addChild(authorLiteral2);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext2.addChild(ws7);
-        DescriptionContext descriptionContext2 = new DescriptionContext(javadocTagContext2, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(descriptionContext2, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext0.addChild(ws8);
-        AttributeContext attributeContext0 = new AttributeContext(htmlElementOpenContext0, 0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "href");
-        attributeContext0.addChild(htmlTagName1);
-        CommonToken equals0 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext0.addChild(equals0);
-        CommonToken attrValue0 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "\"mailto:meth@albuquerque.com\"");
-        attributeContext0.addChild(attrValue0);
-        htmlElementOpenContext0.addChild(attributeContext0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext2 = new TextContext(htmlTagContext0, 0);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext2.addChild(char27);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char28);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext2.addChild(char29);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char31);
-        CommonToken char32 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char32);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws9);
-        CommonToken char33 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext2.addChild(char33);
-        CommonToken char34 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext2.addChild(char34);
-        CommonToken char35 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext2.addChild(char35);
-        CommonToken char36 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char36);
-        CommonToken char37 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char37);
-        htmlTagContext0.addChild(textContext2);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName2 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementCloseContext0.addChild(htmlTagName2);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        descriptionContext2.addChild(htmlElementContext0);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext2.addChild(newline3);
-        javadocTagContext2.addChild(descriptionContext2);
-        javadocContext0.addChild(javadocTagContext2);
-        JavadocTagContext javadocTagContext3 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken deprecatedLiteral0 = new CommonToken(JavadocTokenTypes.DEPRECATED_LITERAL, "@deprecated");
-        javadocTagContext3.addChild(deprecatedLiteral0);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext3.addChild(ws10);
-        DescriptionContext descriptionContext3 = new DescriptionContext(javadocTagContext3, 0);
-        TextContext textContext3 = new TextContext(descriptionContext3, 0);
-        CommonToken char38 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext3.addChild(char38);
-        CommonToken char39 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext3.addChild(char39);
-        CommonToken char40 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char40);
-        CommonToken char41 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char41);
-        CommonToken ws11 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws11);
-        CommonToken char42 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext3.addChild(char42);
-        CommonToken char43 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char43);
-        CommonToken char44 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char44);
-        CommonToken char45 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext3.addChild(char45);
-        CommonToken char46 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext3.addChild(char46);
-        CommonToken char47 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char47);
-        CommonToken ws12 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws12);
-        CommonToken char48 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char48);
-        CommonToken char49 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char49);
-        CommonToken ws13 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws13);
-        CommonToken char50 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char50);
-        CommonToken char51 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char51);
-        CommonToken char52 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext3.addChild(char52);
-        CommonToken char53 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext3.addChild(char53);
-        CommonToken char54 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char54);
-        CommonToken char55 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext3.addChild(char55);
-        CommonToken char56 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char56);
-        CommonToken char57 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char57);
-        CommonToken char58 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char58);
-        CommonToken char59 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char59);
-        descriptionContext3.addChild(textContext3);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext3.addChild(newline4);
-        TextContext textContext4 = new TextContext(descriptionContext3, 0);
-        CommonToken char60 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext4.addChild(char60);
-        CommonToken char61 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char61);
-        CommonToken char62 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char62);
-        CommonToken char63 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char63);
-        CommonToken char64 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext4.addChild(char64);
-        CommonToken char65 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext4.addChild(char65);
-        CommonToken char66 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char66);
-        CommonToken ws14 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws14);
-        CommonToken char67 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext4.addChild(char67);
-        CommonToken char68 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char68);
-        CommonToken ws15 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws15);
-        CommonToken char69 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char69);
-        CommonToken char70 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char70);
-        CommonToken char71 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char71);
-        CommonToken char72 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char72);
-        CommonToken char73 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char73);
-        CommonToken char74 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char74);
-        CommonToken char75 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char75);
-        CommonToken ws16 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws16);
-        CommonToken char76 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char76);
-        CommonToken char77 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char77);
-        CommonToken char78 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext4.addChild(char78);
-        CommonToken ws17 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws17);
-        CommonToken char79 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char79);
-        CommonToken char80 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char80);
-        CommonToken char81 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char81);
-        CommonToken char82 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext4.addChild(char82);
-        descriptionContext3.addChild(textContext4);
-        CommonToken newline5 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext3.addChild(newline5);
-        javadocTagContext3.addChild(descriptionContext3);
-        javadocContext0.addChild(javadocTagContext3);
-        JavadocTagContext javadocTagContext4 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken exceptionLiteral0 = new CommonToken(JavadocTokenTypes.EXCEPTION_LITERAL, "@exception");
-        javadocTagContext4.addChild(exceptionLiteral0);
-        CommonToken ws18 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext4.addChild(ws18);
-        CommonToken className0 = new CommonToken(JavadocTokenTypes.CLASS_NAME, "IOException");
-        javadocTagContext4.addChild(className0);
-        CommonToken ws19 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext4.addChild(ws19);
-        DescriptionContext descriptionContext4 = new DescriptionContext(javadocTagContext4, 0);
-        TextContext textContext5 = new TextContext(descriptionContext4, 0);
-        CommonToken char83 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext5.addChild(char83);
-        CommonToken char84 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext5.addChild(char84);
-        CommonToken char85 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext5.addChild(char85);
-        CommonToken char86 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext5.addChild(char86);
-        CommonToken char87 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext5.addChild(char87);
-        CommonToken char88 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext5.addChild(char88);
-        CommonToken ws20 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws20);
-        CommonToken char89 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext5.addChild(char89);
-        CommonToken char90 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext5.addChild(char90);
-        CommonToken char91 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext5.addChild(char91);
-        CommonToken char92 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext5.addChild(char92);
-        CommonToken char93 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext5.addChild(char93);
-        CommonToken char94 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext5.addChild(char94);
-        CommonToken char95 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext5.addChild(char95);
-        CommonToken char96 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext5.addChild(char96);
-        CommonToken char97 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext5.addChild(char97);
-        CommonToken ws21 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws21);
-        CommonToken char98 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext5.addChild(char98);
-        CommonToken char99 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext5.addChild(char99);
-        CommonToken ws22 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws22);
-        CommonToken char100 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext5.addChild(char100);
-        CommonToken char101 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext5.addChild(char101);
-        CommonToken char102 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext5.addChild(char102);
-        CommonToken char103 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext5.addChild(char103);
-        CommonToken char104 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext5.addChild(char104);
-        CommonToken char105 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext5.addChild(char105);
-        CommonToken char106 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext5.addChild(char106);
-        CommonToken char107 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext5.addChild(char107);
-        CommonToken char108 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext5.addChild(char108);
-        CommonToken char109 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext5.addChild(char109);
-        CommonToken ws23 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws23);
-        CommonToken char110 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext5.addChild(char110);
-        CommonToken char111 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext5.addChild(char111);
-        CommonToken char112 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext5.addChild(char112);
-        CommonToken char113 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext5.addChild(char113);
-        CommonToken char114 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext5.addChild(char114);
-        CommonToken char115 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext5.addChild(char115);
-        CommonToken char116 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext5.addChild(char116);
-        CommonToken char117 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext5.addChild(char117);
-        descriptionContext4.addChild(textContext5);
-        CommonToken newline6 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext4.addChild(newline6);
-        javadocTagContext4.addChild(descriptionContext4);
-        javadocContext0.addChild(javadocTagContext4);
-        JavadocTagContext javadocTagContext5 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken paramLiteral0 = new CommonToken(JavadocTokenTypes.PARAM_LITERAL, "@param");
-        javadocTagContext5.addChild(paramLiteral0);
-        CommonToken ws24 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext5.addChild(ws24);
-        CommonToken parameterName0 = new CommonToken(JavadocTokenTypes.PARAMETER_NAME, "arg");
-        javadocTagContext5.addChild(parameterName0);
-        CommonToken ws25 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext5.addChild(ws25);
-        DescriptionContext descriptionContext5 = new DescriptionContext(javadocTagContext5, 0);
-        TextContext textContext6 = new TextContext(descriptionContext5, 0);
-        CommonToken char118 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext6.addChild(char118);
-        CommonToken char119 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext6.addChild(char119);
-        CommonToken char120 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext6.addChild(char120);
-        CommonToken char121 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext6.addChild(char121);
-        CommonToken char122 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext6.addChild(char122);
-        CommonToken char123 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext6.addChild(char123);
-        CommonToken ws26 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext6.addChild(ws26);
-        CommonToken char124 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext6.addChild(char124);
-        CommonToken char125 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext6.addChild(char125);
-        CommonToken char126 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext6.addChild(char126);
-        CommonToken char127 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext6.addChild(char127);
-        CommonToken char128 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext6.addChild(char128);
-        CommonToken char129 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext6.addChild(char129);
-        CommonToken char130 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext6.addChild(char130);
-        CommonToken char131 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext6.addChild(char131);
-        descriptionContext5.addChild(textContext6);
-        CommonToken newline7 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext5.addChild(newline7);
-        javadocTagContext5.addChild(descriptionContext5);
-        javadocContext0.addChild(javadocTagContext5);
-        JavadocTagContext javadocTagContext6 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken paramLiteral1 = new CommonToken(JavadocTokenTypes.PARAM_LITERAL, "@param");
-        javadocTagContext6.addChild(paramLiteral1);
-        CommonToken ws27 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext6.addChild(ws27);
-        CommonToken parameterName1 = new CommonToken(JavadocTokenTypes.PARAMETER_NAME, "<E>");
-        javadocTagContext6.addChild(parameterName1);
-        CommonToken ws28 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext6.addChild(ws28);
-        DescriptionContext descriptionContext6 = new DescriptionContext(javadocTagContext6, 0);
-        TextContext textContext7 = new TextContext(descriptionContext6, 0);
-        CommonToken char132 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext7.addChild(char132);
-        CommonToken char133 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext7.addChild(char133);
-        CommonToken ws29 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws29);
-        CommonToken char134 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext7.addChild(char134);
-        CommonToken char135 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext7.addChild(char135);
-        CommonToken ws30 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext7.addChild(ws30);
-        CommonToken char136 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext7.addChild(char136);
-        CommonToken char137 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext7.addChild(char137);
-        CommonToken char138 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext7.addChild(char138);
-        CommonToken char139 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext7.addChild(char139);
-        CommonToken char140 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext7.addChild(char140);
-        CommonToken char141 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext7.addChild(char141);
-        CommonToken char142 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext7.addChild(char142);
-        descriptionContext6.addChild(textContext7);
-        CommonToken newline8 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext6.addChild(newline8);
-        javadocTagContext6.addChild(descriptionContext6);
-        javadocContext0.addChild(javadocTagContext6);
-        JavadocTagContext javadocTagContext7 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken paramLiteral2 = new CommonToken(JavadocTokenTypes.PARAM_LITERAL, "@param");
-        javadocTagContext7.addChild(paramLiteral2);
-        CommonToken ws31 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext7.addChild(ws31);
-        CommonToken parameterName2 = new CommonToken(JavadocTokenTypes.PARAMETER_NAME, "type");
-        javadocTagContext7.addChild(parameterName2);
-        CommonToken ws32 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext7.addChild(ws32);
-        DescriptionContext descriptionContext7 = new DescriptionContext(javadocTagContext7, 0);
-        TextContext textContext8 = new TextContext(descriptionContext7, 0);
-        CommonToken char143 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext8.addChild(char143);
-        CommonToken ws33 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws33);
-        CommonToken char144 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext8.addChild(char144);
-        CommonToken char145 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext8.addChild(char145);
-        CommonToken char146 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext8.addChild(char146);
-        CommonToken ws34 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws34);
-        CommonToken char147 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext8.addChild(char147);
-        CommonToken char148 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext8.addChild(char148);
-        CommonToken char149 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext8.addChild(char149);
-        CommonToken char150 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext8.addChild(char150);
-        CommonToken char151 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext8.addChild(char151);
-        CommonToken char152 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext8.addChild(char152);
-        CommonToken char153 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext8.addChild(char153);
-        CommonToken char154 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext8.addChild(char154);
-        CommonToken ws35 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext8.addChild(ws35);
-        CommonToken char155 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext8.addChild(char155);
-        CommonToken char156 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext8.addChild(char156);
-        CommonToken char157 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext8.addChild(char157);
-        CommonToken char158 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext8.addChild(char158);
-        CommonToken char159 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext8.addChild(char159);
-        CommonToken char160 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext8.addChild(char160);
-        descriptionContext7.addChild(textContext8);
-        CommonToken newline9 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext7.addChild(newline9);
-        TextContext textContext9 = new TextContext(descriptionContext7, 0);
-        CommonToken char161 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext9.addChild(char161);
-        CommonToken char162 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext9.addChild(char162);
-        CommonToken ws36 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext9.addChild(ws36);
-        CommonToken char163 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext9.addChild(char163);
-        CommonToken char164 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext9.addChild(char164);
-        CommonToken char165 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext9.addChild(char165);
-        CommonToken char166 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext9.addChild(char166);
-        CommonToken char167 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext9.addChild(char167);
-        CommonToken char168 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext9.addChild(char168);
-        CommonToken char169 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext9.addChild(char169);
-        CommonToken ws37 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext9.addChild(ws37);
-        CommonToken char170 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext9.addChild(char170);
-        CommonToken char171 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext9.addChild(char171);
-        CommonToken char172 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext9.addChild(char172);
-        CommonToken char173 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext9.addChild(char173);
-        CommonToken char174 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext9.addChild(char174);
-        CommonToken char175 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext9.addChild(char175);
-        descriptionContext7.addChild(textContext9);
-        CommonToken newline10 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext7.addChild(newline10);
-        TextContext textContext10 = new TextContext(descriptionContext7, 0);
-        CommonToken char176 = new CommonToken(JavadocTokenTypes.CHAR, "O");
-        textContext10.addChild(char176);
-        CommonToken char177 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext10.addChild(char177);
-        CommonToken char178 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext10.addChild(char178);
-        CommonToken ws38 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext10.addChild(ws38);
-        CommonToken char179 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext10.addChild(char179);
-        CommonToken char180 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext10.addChild(char180);
-        CommonToken char181 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext10.addChild(char181);
-        CommonToken char182 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext10.addChild(char182);
-        CommonToken ws39 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext10.addChild(ws39);
-        CommonToken char183 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext10.addChild(char183);
-        CommonToken char184 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext10.addChild(char184);
-        CommonToken char185 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext10.addChild(char185);
-        CommonToken char186 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext10.addChild(char186);
-        CommonToken ws40 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext10.addChild(ws40);
-        CommonToken char187 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext10.addChild(char187);
-        CommonToken char188 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext10.addChild(char188);
-        CommonToken ws41 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext10.addChild(ws41);
-        CommonToken char189 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext10.addChild(char189);
-        CommonToken char190 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext10.addChild(char190);
-        CommonToken char191 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext10.addChild(char191);
-        CommonToken char192 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext10.addChild(char192);
-        CommonToken char193 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext10.addChild(char193);
-        CommonToken char194 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext10.addChild(char194);
-        CommonToken char195 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext10.addChild(char195);
-        CommonToken char196 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext10.addChild(char196);
-        CommonToken char197 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext10.addChild(char197);
-        CommonToken char198 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext10.addChild(char198);
-        CommonToken char199 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext10.addChild(char199);
-        CommonToken char200 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext10.addChild(char200);
-        descriptionContext7.addChild(textContext10);
-        CommonToken newline11 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext7.addChild(newline11);
-        javadocTagContext7.addChild(descriptionContext7);
-        javadocContext0.addChild(javadocTagContext7);
-        JavadocTagContext javadocTagContext8 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken returnLiteral0 = new CommonToken(JavadocTokenTypes.RETURN_LITERAL, "@return");
-        javadocTagContext8.addChild(returnLiteral0);
-        CommonToken ws42 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext8.addChild(ws42);
-        DescriptionContext descriptionContext8 = new DescriptionContext(javadocTagContext8, 0);
-        TextContext textContext11 = new TextContext(descriptionContext8, 0);
-        CommonToken char201 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext11.addChild(char201);
-        CommonToken char202 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext11.addChild(char202);
-        CommonToken char203 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext11.addChild(char203);
-        CommonToken char204 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext11.addChild(char204);
-        CommonToken char205 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext11.addChild(char205);
-        CommonToken char206 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext11.addChild(char206);
-        CommonToken char207 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext11.addChild(char207);
-        CommonToken char208 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext11.addChild(char208);
-        CommonToken char209 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext11.addChild(char209);
-        descriptionContext8.addChild(textContext11);
-        CommonToken newline12 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext8.addChild(newline12);
-        javadocTagContext8.addChild(descriptionContext8);
-        javadocContext0.addChild(javadocTagContext8);
-        JavadocTagContext javadocTagContext9 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken returnLiteral1 = new CommonToken(JavadocTokenTypes.RETURN_LITERAL, "@return");
-        javadocTagContext9.addChild(returnLiteral1);
-        CommonToken ws43 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext9.addChild(ws43);
-        DescriptionContext descriptionContext9 = new DescriptionContext(javadocTagContext9, 0);
-        TextContext textContext12 = new TextContext(descriptionContext9, 0);
-        CommonToken char210 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext12.addChild(char210);
-        CommonToken ws44 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext12.addChild(ws44);
-        CommonToken char211 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext12.addChild(char211);
-        CommonToken char212 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext12.addChild(char212);
-        CommonToken char213 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext12.addChild(char213);
-        CommonToken char214 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext12.addChild(char214);
-        CommonToken char215 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext12.addChild(char215);
-        CommonToken ws45 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext12.addChild(ws45);
-        CommonToken char216 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext12.addChild(char216);
-        CommonToken char217 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext12.addChild(char217);
-        CommonToken ws46 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext12.addChild(ws46);
-        CommonToken char218 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext12.addChild(char218);
-        CommonToken char219 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext12.addChild(char219);
-        CommonToken char220 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext12.addChild(char220);
-        CommonToken char221 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext12.addChild(char221);
-        CommonToken char222 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext12.addChild(char222);
-        CommonToken char223 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext12.addChild(char223);
-        CommonToken char224 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext12.addChild(char224);
-        descriptionContext9.addChild(textContext12);
-        CommonToken newline13 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext9.addChild(newline13);
-        TextContext textContext13 = new TextContext(descriptionContext9, 0);
-        CommonToken char225 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext13.addChild(char225);
-        CommonToken char226 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext13.addChild(char226);
-        CommonToken char227 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext13.addChild(char227);
-        CommonToken char228 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext13.addChild(char228);
-        CommonToken ws47 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext13.addChild(ws47);
-        CommonToken char229 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext13.addChild(char229);
-        CommonToken char230 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext13.addChild(char230);
-        CommonToken ws48 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext13.addChild(ws48);
-        CommonToken char231 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext13.addChild(char231);
-        CommonToken char232 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext13.addChild(char232);
-        CommonToken char233 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext13.addChild(char233);
-        CommonToken char234 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext13.addChild(char234);
-        CommonToken char235 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext13.addChild(char235);
-        CommonToken char236 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext13.addChild(char236);
-        CommonToken ws49 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext13.addChild(ws49);
-        CommonToken char237 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext13.addChild(char237);
-        CommonToken char238 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext13.addChild(char238);
-        CommonToken ws50 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext13.addChild(ws50);
-        CommonToken char239 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext13.addChild(char239);
-        CommonToken char240 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext13.addChild(char240);
-        CommonToken char241 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext13.addChild(char241);
-        CommonToken char242 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext13.addChild(char242);
-        CommonToken char243 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext13.addChild(char243);
-        CommonToken char244 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext13.addChild(char244);
-        CommonToken char245 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext13.addChild(char245);
-        CommonToken char246 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext13.addChild(char246);
-        CommonToken char247 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext13.addChild(char247);
-        descriptionContext9.addChild(textContext13);
-        CommonToken newline14 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext9.addChild(newline14);
-        javadocTagContext9.addChild(descriptionContext9);
-        javadocContext0.addChild(javadocTagContext9);
-        JavadocTagContext javadocTagContext10 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral0 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext10.addChild(seeLiteral0);
-        CommonToken ws51 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext10.addChild(ws51);
-        CommonToken string0 = new CommonToken(JavadocTokenTypes.STRING, "\"A book of that famous man\"");
-        javadocTagContext10.addChild(string0);
-        CommonToken newline15 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext10.addChild(newline15);
-        javadocContext0.addChild(javadocTagContext10);
-        JavadocTagContext javadocTagContext11 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral1 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext11.addChild(seeLiteral1);
-        CommonToken ws52 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext11.addChild(ws52);
-        HtmlElementContext htmlElementContext1 = new HtmlElementContext(javadocTagContext11, 0);
-        HtmlTagContext htmlTagContext1 = new HtmlTagContext(htmlElementContext1, 0);
-        HtmlElementOpenContext htmlElementOpenContext1 = new HtmlElementOpenContext(htmlTagContext1, 0);
-        CommonToken open2 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext1.addChild(open2);
-        CommonToken htmlTagName3 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementOpenContext1.addChild(htmlTagName3);
-        CommonToken ws53 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext1.addChild(ws53);
-        AttributeContext attributeContext1 = new AttributeContext(htmlElementOpenContext1, 0);
-        CommonToken htmlTagName4 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "href");
-        attributeContext1.addChild(htmlTagName4);
-        CommonToken equals1 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext1.addChild(equals1);
-        CommonToken attrValue1 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "\"http://google.com\"");
-        attributeContext1.addChild(attrValue1);
-        htmlElementOpenContext1.addChild(attributeContext1);
-        CommonToken close2 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext1.addChild(close2);
-        htmlTagContext1.addChild(htmlElementOpenContext1);
-        TextContext textContext14 = new TextContext(htmlTagContext1, 0);
-        CommonToken char248 = new CommonToken(JavadocTokenTypes.CHAR, "G");
-        textContext14.addChild(char248);
-        CommonToken char249 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext14.addChild(char249);
-        CommonToken char250 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext14.addChild(char250);
-        CommonToken char251 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext14.addChild(char251);
-        CommonToken char252 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext14.addChild(char252);
-        CommonToken char253 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext14.addChild(char253);
-        htmlTagContext1.addChild(textContext14);
-        HtmlElementCloseContext htmlElementCloseContext1 = new HtmlElementCloseContext(htmlTagContext1, 0);
-        CommonToken open3 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext1.addChild(open3);
-        CommonToken slash1 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext1.addChild(slash1);
-        CommonToken htmlTagName5 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementCloseContext1.addChild(htmlTagName5);
-        CommonToken close3 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext1.addChild(close3);
-        htmlTagContext1.addChild(htmlElementCloseContext1);
-        htmlElementContext1.addChild(htmlTagContext1);
-        javadocTagContext11.addChild(htmlElementContext1);
-        CommonToken newline16 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext11.addChild(newline16);
-        javadocContext0.addChild(javadocTagContext11);
-        JavadocTagContext javadocTagContext12 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral2 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext12.addChild(seeLiteral2);
-        CommonToken ws54 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext12.addChild(ws54);
-        HtmlElementContext htmlElementContext2 = new HtmlElementContext(javadocTagContext12, 0);
-        HtmlTagContext htmlTagContext2 = new HtmlTagContext(htmlElementContext2, 0);
-        HtmlElementOpenContext htmlElementOpenContext2 = new HtmlElementOpenContext(htmlTagContext2, 0);
-        CommonToken open4 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext2.addChild(open4);
-        CommonToken htmlTagName6 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementOpenContext2.addChild(htmlTagName6);
-        CommonToken ws55 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext2.addChild(ws55);
-        AttributeContext attributeContext2 = new AttributeContext(htmlElementOpenContext2, 0);
-        CommonToken htmlTagName7 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "href");
-        attributeContext2.addChild(htmlTagName7);
-        CommonToken equals2 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext2.addChild(equals2);
-        CommonToken attrValue2 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "\"http://google.com\"");
-        attributeContext2.addChild(attrValue2);
-        htmlElementOpenContext2.addChild(attributeContext2);
-        CommonToken close4 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext2.addChild(close4);
-        htmlTagContext2.addChild(htmlElementOpenContext2);
-        CommonToken newline17 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        htmlTagContext2.addChild(newline17);
-        TextContext textContext15 = new TextContext(htmlTagContext2, 0);
-        CommonToken char254 = new CommonToken(JavadocTokenTypes.CHAR, "G");
-        textContext15.addChild(char254);
-        CommonToken char255 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext15.addChild(char255);
-        CommonToken char256 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext15.addChild(char256);
-        CommonToken char257 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext15.addChild(char257);
-        CommonToken char258 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext15.addChild(char258);
-        CommonToken char259 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext15.addChild(char259);
-        htmlTagContext2.addChild(textContext15);
-        HtmlElementCloseContext htmlElementCloseContext2 = new HtmlElementCloseContext(htmlTagContext2, 0);
-        CommonToken open5 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext2.addChild(open5);
-        CommonToken slash2 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext2.addChild(slash2);
-        CommonToken htmlTagName8 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementCloseContext2.addChild(htmlTagName8);
-        CommonToken close5 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext2.addChild(close5);
-        htmlTagContext2.addChild(htmlElementCloseContext2);
-        htmlElementContext2.addChild(htmlTagContext2);
-        javadocTagContext12.addChild(htmlElementContext2);
-        CommonToken newline18 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext12.addChild(newline18);
-        javadocContext0.addChild(javadocTagContext12);
-        JavadocTagContext javadocTagContext13 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral3 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext13.addChild(seeLiteral3);
-        CommonToken ws56 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext13.addChild(ws56);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocTagContext13, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext0.addChild(package0);
-        CommonToken dot0 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext0.addChild(class0);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "valueOf");
-        referenceContext0.addChild(member0);
-        javadocTagContext13.addChild(referenceContext0);
-        CommonToken newline19 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext13.addChild(newline19);
-        javadocContext0.addChild(javadocTagContext13);
-        JavadocTagContext javadocTagContext14 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral4 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext14.addChild(seeLiteral4);
-        CommonToken ws57 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext14.addChild(ws57);
-        ReferenceContext referenceContext1 = new ReferenceContext(javadocTagContext14, 0);
-        CommonToken package1 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext1.addChild(package1);
-        CommonToken dot1 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext1.addChild(dot1);
-        CommonToken class1 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext1.addChild(class1);
-        CommonToken hash1 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext1.addChild(hash1);
-        CommonToken member1 = new CommonToken(JavadocTokenTypes.MEMBER, "Integer");
-        referenceContext1.addChild(member1);
-        javadocTagContext14.addChild(referenceContext1);
-        CommonToken newline20 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext14.addChild(newline20);
-        javadocContext0.addChild(javadocTagContext14);
-        JavadocTagContext javadocTagContext15 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral5 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext15.addChild(seeLiteral5);
-        CommonToken ws58 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext15.addChild(ws58);
-        ReferenceContext referenceContext2 = new ReferenceContext(javadocTagContext15, 0);
-        CommonToken package2 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext2.addChild(package2);
-        CommonToken dot2 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext2.addChild(dot2);
-        CommonToken class2 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext2.addChild(class2);
-        CommonToken hash2 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext2.addChild(hash2);
-        CommonToken member2 = new CommonToken(JavadocTokenTypes.MEMBER, "MAX_VALUE");
-        referenceContext2.addChild(member2);
-        javadocTagContext15.addChild(referenceContext2);
-        CommonToken newline21 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext15.addChild(newline21);
-        javadocContext0.addChild(javadocTagContext15);
-        JavadocTagContext javadocTagContext16 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral6 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext16.addChild(seeLiteral6);
-        CommonToken ws59 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext16.addChild(ws59);
-        ReferenceContext referenceContext3 = new ReferenceContext(javadocTagContext16, 0);
-        CommonToken package3 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext3.addChild(package3);
-        CommonToken dot3 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext3.addChild(dot3);
-        CommonToken class3 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext3.addChild(class3);
-        CommonToken hash3 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext3.addChild(hash3);
-        CommonToken member3 = new CommonToken(JavadocTokenTypes.MEMBER, "valueOf");
-        referenceContext3.addChild(member3);
-        javadocTagContext16.addChild(referenceContext3);
-        CommonToken ws60 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext16.addChild(ws60);
-        DescriptionContext descriptionContext10 = new DescriptionContext(javadocTagContext16, 0);
-        TextContext textContext16 = new TextContext(descriptionContext10, 0);
-        CommonToken char260 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext16.addChild(char260);
-        CommonToken char261 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext16.addChild(char261);
-        CommonToken char262 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext16.addChild(char262);
-        CommonToken char263 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext16.addChild(char263);
-        CommonToken char264 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext16.addChild(char264);
-        CommonToken char265 = new CommonToken(JavadocTokenTypes.CHAR, "O");
-        textContext16.addChild(char265);
-        CommonToken char266 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext16.addChild(char266);
-        CommonToken ws61 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext16.addChild(ws61);
-        CommonToken char267 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext16.addChild(char267);
-        CommonToken char268 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext16.addChild(char268);
-        CommonToken char269 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext16.addChild(char269);
-        CommonToken char270 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext16.addChild(char270);
-        CommonToken char271 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext16.addChild(char271);
-        CommonToken char272 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext16.addChild(char272);
-        descriptionContext10.addChild(textContext16);
-        CommonToken newline22 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext10.addChild(newline22);
-        javadocTagContext16.addChild(descriptionContext10);
-        javadocContext0.addChild(javadocTagContext16);
-        JavadocTagContext javadocTagContext17 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral7 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext17.addChild(seeLiteral7);
-        CommonToken ws62 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext17.addChild(ws62);
-        ReferenceContext referenceContext4 = new ReferenceContext(javadocTagContext17, 0);
-        CommonToken package4 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext4.addChild(package4);
-        CommonToken dot4 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext4.addChild(dot4);
-        CommonToken class4 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext4.addChild(class4);
-        CommonToken hash4 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext4.addChild(hash4);
-        CommonToken member4 = new CommonToken(JavadocTokenTypes.MEMBER, "Integer");
-        referenceContext4.addChild(member4);
-        javadocTagContext17.addChild(referenceContext4);
-        CommonToken ws63 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext17.addChild(ws63);
-        DescriptionContext descriptionContext11 = new DescriptionContext(javadocTagContext17, 0);
-        TextContext textContext17 = new TextContext(descriptionContext11, 0);
-        CommonToken char273 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext17.addChild(char273);
-        CommonToken char274 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext17.addChild(char274);
-        CommonToken char275 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext17.addChild(char275);
-        CommonToken char276 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext17.addChild(char276);
-        CommonToken char277 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext17.addChild(char277);
-        CommonToken char278 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext17.addChild(char278);
-        CommonToken char279 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext17.addChild(char279);
-        descriptionContext11.addChild(textContext17);
-        CommonToken newline23 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext11.addChild(newline23);
-        javadocTagContext17.addChild(descriptionContext11);
-        javadocContext0.addChild(javadocTagContext17);
-        JavadocTagContext javadocTagContext18 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral8 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext18.addChild(seeLiteral8);
-        CommonToken ws64 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext18.addChild(ws64);
-        ReferenceContext referenceContext5 = new ReferenceContext(javadocTagContext18, 0);
-        CommonToken package5 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext5.addChild(package5);
-        CommonToken dot5 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext5.addChild(dot5);
-        CommonToken class5 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext5.addChild(class5);
-        CommonToken hash5 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext5.addChild(hash5);
-        CommonToken member5 = new CommonToken(JavadocTokenTypes.MEMBER, "MAX_VALUE");
-        referenceContext5.addChild(member5);
-        javadocTagContext18.addChild(referenceContext5);
-        CommonToken ws65 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext18.addChild(ws65);
-        DescriptionContext descriptionContext12 = new DescriptionContext(javadocTagContext18, 0);
-        TextContext textContext18 = new TextContext(descriptionContext12, 0);
-        CommonToken char280 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext18.addChild(char280);
-        CommonToken char281 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext18.addChild(char281);
-        CommonToken char282 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext18.addChild(char282);
-        CommonToken char283 = new CommonToken(JavadocTokenTypes.CHAR, "V");
-        textContext18.addChild(char283);
-        CommonToken char284 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext18.addChild(char284);
-        CommonToken char285 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext18.addChild(char285);
-        CommonToken char286 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext18.addChild(char286);
-        CommonToken char287 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext18.addChild(char287);
-        descriptionContext12.addChild(textContext18);
-        CommonToken newline24 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext12.addChild(newline24);
-        javadocTagContext18.addChild(descriptionContext12);
-        javadocContext0.addChild(javadocTagContext18);
-        JavadocTagContext javadocTagContext19 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral9 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext19.addChild(seeLiteral9);
-        CommonToken ws66 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext19.addChild(ws66);
-        ReferenceContext referenceContext6 = new ReferenceContext(javadocTagContext19, 0);
-        CommonToken package6 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext6.addChild(package6);
-        CommonToken dot6 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext6.addChild(dot6);
-        CommonToken class6 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext6.addChild(class6);
-        CommonToken hash6 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext6.addChild(hash6);
-        CommonToken member6 = new CommonToken(JavadocTokenTypes.MEMBER, "intValue");
-        referenceContext6.addChild(member6);
-        javadocTagContext19.addChild(referenceContext6);
-        CommonToken ws67 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext19.addChild(ws67);
-        DescriptionContext descriptionContext13 = new DescriptionContext(javadocTagContext19, 0);
-        TextContext textContext19 = new TextContext(descriptionContext13, 0);
-        CommonToken char288 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext19.addChild(char288);
-        CommonToken char289 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext19.addChild(char289);
-        CommonToken char290 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext19.addChild(char290);
-        CommonToken char291 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext19.addChild(char291);
-        CommonToken char292 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext19.addChild(char292);
-        CommonToken char293 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext19.addChild(char293);
-        descriptionContext13.addChild(textContext19);
-        CommonToken newline25 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext13.addChild(newline25);
-        javadocTagContext19.addChild(descriptionContext13);
-        javadocContext0.addChild(javadocTagContext19);
-        JavadocTagContext javadocTagContext20 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral10 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext20.addChild(seeLiteral10);
-        CommonToken ws68 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext20.addChild(ws68);
-        ReferenceContext referenceContext7 = new ReferenceContext(javadocTagContext20, 0);
-        CommonToken package7 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext7.addChild(package7);
-        CommonToken dot7 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext7.addChild(dot7);
-        CommonToken class7 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext7.addChild(class7);
-        CommonToken hash7 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext7.addChild(hash7);
-        CommonToken member7 = new CommonToken(JavadocTokenTypes.MEMBER, "intValue");
-        referenceContext7.addChild(member7);
-        ParametersContext parametersContext0 = new ParametersContext(referenceContext7, 0);
-        CommonToken leftBrace0 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext0.addChild(leftBrace0);
-        CommonToken rightBrace0 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext0.addChild(rightBrace0);
-        referenceContext7.addChild(parametersContext0);
-        javadocTagContext20.addChild(referenceContext7);
-        CommonToken ws69 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext20.addChild(ws69);
-        DescriptionContext descriptionContext14 = new DescriptionContext(javadocTagContext20, 0);
-        TextContext textContext20 = new TextContext(descriptionContext14, 0);
-        CommonToken char294 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext20.addChild(char294);
-        CommonToken char295 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext20.addChild(char295);
-        CommonToken char296 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext20.addChild(char296);
-        CommonToken char297 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext20.addChild(char297);
-        CommonToken char298 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext20.addChild(char298);
-        CommonToken char299 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext20.addChild(char299);
-        descriptionContext14.addChild(textContext20);
-        CommonToken newline26 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext14.addChild(newline26);
-        javadocTagContext20.addChild(descriptionContext14);
-        javadocContext0.addChild(javadocTagContext20);
-        JavadocTagContext javadocTagContext21 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral11 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext21.addChild(seeLiteral11);
-        CommonToken ws70 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext21.addChild(ws70);
-        ReferenceContext referenceContext8 = new ReferenceContext(javadocTagContext21, 0);
-        CommonToken package8 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext8.addChild(package8);
-        CommonToken dot8 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext8.addChild(dot8);
-        CommonToken class8 = new CommonToken(JavadocTokenTypes.CLASS, "Void");
-        referenceContext8.addChild(class8);
-        CommonToken hash8 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext8.addChild(hash8);
-        CommonToken member8 = new CommonToken(JavadocTokenTypes.MEMBER, "Void");
-        referenceContext8.addChild(member8);
-        javadocTagContext21.addChild(referenceContext8);
-        CommonToken ws71 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext21.addChild(ws71);
-        DescriptionContext descriptionContext15 = new DescriptionContext(javadocTagContext21, 0);
-        TextContext textContext21 = new TextContext(descriptionContext15, 0);
-        CommonToken char300 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext21.addChild(char300);
-        CommonToken char301 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext21.addChild(char301);
-        CommonToken char302 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext21.addChild(char302);
-        CommonToken char303 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext21.addChild(char303);
-        CommonToken char304 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext21.addChild(char304);
-        CommonToken char305 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext21.addChild(char305);
-        CommonToken char306 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext21.addChild(char306);
-        CommonToken char307 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext21.addChild(char307);
-        CommonToken char308 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext21.addChild(char308);
-        CommonToken char309 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext21.addChild(char309);
-        CommonToken char310 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext21.addChild(char310);
-        descriptionContext15.addChild(textContext21);
-        CommonToken newline27 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext15.addChild(newline27);
-        javadocTagContext21.addChild(descriptionContext15);
-        javadocContext0.addChild(javadocTagContext21);
-        JavadocTagContext javadocTagContext22 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral12 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext22.addChild(seeLiteral12);
-        CommonToken ws72 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext22.addChild(ws72);
-        ReferenceContext referenceContext9 = new ReferenceContext(javadocTagContext22, 0);
-        CommonToken package9 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext9.addChild(package9);
-        CommonToken dot9 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext9.addChild(dot9);
-        CommonToken class9 = new CommonToken(JavadocTokenTypes.CLASS, "Void");
-        referenceContext9.addChild(class9);
-        CommonToken hash9 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext9.addChild(hash9);
-        CommonToken member9 = new CommonToken(JavadocTokenTypes.MEMBER, "Void");
-        referenceContext9.addChild(member9);
-        ParametersContext parametersContext1 = new ParametersContext(referenceContext9, 0);
-        CommonToken leftBrace1 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext1.addChild(leftBrace1);
-        CommonToken rightBrace1 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext1.addChild(rightBrace1);
-        referenceContext9.addChild(parametersContext1);
-        javadocTagContext22.addChild(referenceContext9);
-        CommonToken ws73 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext22.addChild(ws73);
-        DescriptionContext descriptionContext16 = new DescriptionContext(javadocTagContext22, 0);
-        TextContext textContext22 = new TextContext(descriptionContext16, 0);
-        CommonToken char311 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext22.addChild(char311);
-        CommonToken char312 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext22.addChild(char312);
-        CommonToken char313 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext22.addChild(char313);
-        CommonToken char314 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext22.addChild(char314);
-        CommonToken char315 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext22.addChild(char315);
-        CommonToken char316 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext22.addChild(char316);
-        CommonToken char317 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext22.addChild(char317);
-        CommonToken char318 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext22.addChild(char318);
-        CommonToken char319 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext22.addChild(char319);
-        CommonToken char320 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext22.addChild(char320);
-        CommonToken char321 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext22.addChild(char321);
-        descriptionContext16.addChild(textContext22);
-        CommonToken newline28 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext16.addChild(newline28);
-        javadocTagContext22.addChild(descriptionContext16);
-        javadocContext0.addChild(javadocTagContext22);
-        JavadocTagContext javadocTagContext23 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral13 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext23.addChild(seeLiteral13);
-        CommonToken ws74 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext23.addChild(ws74);
-        ReferenceContext referenceContext10 = new ReferenceContext(javadocTagContext23, 0);
-        CommonToken package10 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext10.addChild(package10);
-        CommonToken dot10 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext10.addChild(dot10);
-        CommonToken class10 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext10.addChild(class10);
-        CommonToken hash10 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext10.addChild(hash10);
-        CommonToken member10 = new CommonToken(JavadocTokenTypes.MEMBER, "valueOf");
-        referenceContext10.addChild(member10);
-        ParametersContext parametersContext2 = new ParametersContext(referenceContext10, 0);
-        CommonToken leftBrace2 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext2.addChild(leftBrace2);
-        CommonToken argument0 = new CommonToken(JavadocTokenTypes.ARGUMENT, "String");
-        parametersContext2.addChild(argument0);
-        CommonToken rightBrace2 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext2.addChild(rightBrace2);
-        referenceContext10.addChild(parametersContext2);
-        javadocTagContext23.addChild(referenceContext10);
-        CommonToken ws75 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext23.addChild(ws75);
-        DescriptionContext descriptionContext17 = new DescriptionContext(javadocTagContext23, 0);
-        TextContext textContext23 = new TextContext(descriptionContext17, 0);
-        CommonToken char322 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext23.addChild(char322);
-        CommonToken char323 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext23.addChild(char323);
-        CommonToken char324 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext23.addChild(char324);
-        CommonToken char325 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext23.addChild(char325);
-        CommonToken char326 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext23.addChild(char326);
-        CommonToken char327 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext23.addChild(char327);
-        descriptionContext17.addChild(textContext23);
-        CommonToken newline29 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext17.addChild(newline29);
-        javadocTagContext23.addChild(descriptionContext17);
-        javadocContext0.addChild(javadocTagContext23);
-        JavadocTagContext javadocTagContext24 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral14 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext24.addChild(seeLiteral14);
-        CommonToken ws76 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext24.addChild(ws76);
-        ReferenceContext referenceContext11 = new ReferenceContext(javadocTagContext24, 0);
-        CommonToken package11 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext11.addChild(package11);
-        CommonToken dot11 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext11.addChild(dot11);
-        CommonToken class11 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext11.addChild(class11);
-        CommonToken hash11 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext11.addChild(hash11);
-        CommonToken member11 = new CommonToken(JavadocTokenTypes.MEMBER, "toString");
-        referenceContext11.addChild(member11);
-        ParametersContext parametersContext3 = new ParametersContext(referenceContext11, 0);
-        CommonToken leftBrace3 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext3.addChild(leftBrace3);
-        CommonToken argument1 = new CommonToken(JavadocTokenTypes.ARGUMENT, "int");
-        parametersContext3.addChild(argument1);
-        CommonToken comma0 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext3.addChild(comma0);
-        CommonToken argument2 = new CommonToken(JavadocTokenTypes.ARGUMENT, "int");
-        parametersContext3.addChild(argument2);
-        CommonToken rightBrace3 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext3.addChild(rightBrace3);
-        referenceContext11.addChild(parametersContext3);
-        javadocTagContext24.addChild(referenceContext11);
-        CommonToken ws77 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext24.addChild(ws77);
-        DescriptionContext descriptionContext18 = new DescriptionContext(javadocTagContext24, 0);
-        TextContext textContext24 = new TextContext(descriptionContext18, 0);
-        CommonToken char328 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext24.addChild(char328);
-        CommonToken char329 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext24.addChild(char329);
-        CommonToken char330 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext24.addChild(char330);
-        CommonToken char331 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext24.addChild(char331);
-        CommonToken char332 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext24.addChild(char332);
-        CommonToken char333 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext24.addChild(char333);
-        descriptionContext18.addChild(textContext24);
-        CommonToken newline30 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext18.addChild(newline30);
-        javadocTagContext24.addChild(descriptionContext18);
-        javadocContext0.addChild(javadocTagContext24);
-        JavadocTagContext javadocTagContext25 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral15 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext25.addChild(seeLiteral15);
-        CommonToken ws78 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext25.addChild(ws78);
-        ReferenceContext referenceContext12 = new ReferenceContext(javadocTagContext25, 0);
-        CommonToken package12 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext12.addChild(package12);
-        CommonToken dot12 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext12.addChild(dot12);
-        CommonToken class12 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext12.addChild(class12);
-        CommonToken hash12 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext12.addChild(hash12);
-        CommonToken member12 = new CommonToken(JavadocTokenTypes.MEMBER, "toString");
-        referenceContext12.addChild(member12);
-        ParametersContext parametersContext4 = new ParametersContext(referenceContext12, 0);
-        CommonToken leftBrace4 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext4.addChild(leftBrace4);
-        CommonToken argument3 = new CommonToken(JavadocTokenTypes.ARGUMENT, "int");
-        parametersContext4.addChild(argument3);
-        CommonToken comma1 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext4.addChild(comma1);
-        CommonToken ws79 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext4.addChild(ws79);
-        CommonToken argument4 = new CommonToken(JavadocTokenTypes.ARGUMENT, "int");
-        parametersContext4.addChild(argument4);
-        CommonToken rightBrace4 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext4.addChild(rightBrace4);
-        referenceContext12.addChild(parametersContext4);
-        javadocTagContext25.addChild(referenceContext12);
-        CommonToken ws80 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext25.addChild(ws80);
-        DescriptionContext descriptionContext19 = new DescriptionContext(javadocTagContext25, 0);
-        TextContext textContext25 = new TextContext(descriptionContext19, 0);
-        CommonToken char334 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext25.addChild(char334);
-        CommonToken char335 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext25.addChild(char335);
-        CommonToken char336 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext25.addChild(char336);
-        CommonToken char337 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext25.addChild(char337);
-        CommonToken char338 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext25.addChild(char338);
-        CommonToken char339 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext25.addChild(char339);
-        descriptionContext19.addChild(textContext25);
-        CommonToken newline31 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext19.addChild(newline31);
-        javadocTagContext25.addChild(descriptionContext19);
-        javadocContext0.addChild(javadocTagContext25);
-        JavadocTagContext javadocTagContext26 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral16 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext26.addChild(seeLiteral16);
-        CommonToken ws81 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext26.addChild(ws81);
-        ReferenceContext referenceContext13 = new ReferenceContext(javadocTagContext26, 0);
-        CommonToken hash13 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext13.addChild(hash13);
-        CommonToken member13 = new CommonToken(JavadocTokenTypes.MEMBER, "field");
-        referenceContext13.addChild(member13);
-        javadocTagContext26.addChild(referenceContext13);
-        CommonToken newline32 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext26.addChild(newline32);
-        javadocContext0.addChild(javadocTagContext26);
-        JavadocTagContext javadocTagContext27 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral17 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext27.addChild(seeLiteral17);
-        CommonToken ws82 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext27.addChild(ws82);
-        ReferenceContext referenceContext14 = new ReferenceContext(javadocTagContext27, 0);
-        CommonToken hash14 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext14.addChild(hash14);
-        CommonToken member14 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext14.addChild(member14);
-        ParametersContext parametersContext5 = new ParametersContext(referenceContext14, 0);
-        CommonToken leftBrace5 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext5.addChild(leftBrace5);
-        CommonToken argument5 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext5.addChild(argument5);
-        CommonToken comma2 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext5.addChild(comma2);
-        CommonToken ws83 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext5.addChild(ws83);
-        CommonToken argument6 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext5.addChild(argument6);
-        CommonToken rightBrace5 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext5.addChild(rightBrace5);
-        referenceContext14.addChild(parametersContext5);
-        javadocTagContext27.addChild(referenceContext14);
-        CommonToken newline33 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext27.addChild(newline33);
-        javadocContext0.addChild(javadocTagContext27);
-        JavadocTagContext javadocTagContext28 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral18 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext28.addChild(seeLiteral18);
-        CommonToken ws84 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext28.addChild(ws84);
-        ReferenceContext referenceContext15 = new ReferenceContext(javadocTagContext28, 0);
-        CommonToken hash15 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext15.addChild(hash15);
-        CommonToken member15 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext15.addChild(member15);
-        ParametersContext parametersContext6 = new ParametersContext(referenceContext15, 0);
-        CommonToken leftBrace6 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext6.addChild(leftBrace6);
-        CommonToken argument7 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext6.addChild(argument7);
-        CommonToken ws85 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext6.addChild(ws85);
-        CommonToken argument8 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext6.addChild(argument8);
-        CommonToken comma3 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext6.addChild(comma3);
-        CommonToken ws86 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext6.addChild(ws86);
-        CommonToken argument9 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext6.addChild(argument9);
-        CommonToken ws87 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext6.addChild(ws87);
-        CommonToken argument10 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext6.addChild(argument10);
-        CommonToken rightBrace6 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext6.addChild(rightBrace6);
-        referenceContext15.addChild(parametersContext6);
-        javadocTagContext28.addChild(referenceContext15);
-        CommonToken newline34 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext28.addChild(newline34);
-        javadocContext0.addChild(javadocTagContext28);
-        JavadocTagContext javadocTagContext29 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral19 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext29.addChild(seeLiteral19);
-        CommonToken ws88 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext29.addChild(ws88);
-        ReferenceContext referenceContext16 = new ReferenceContext(javadocTagContext29, 0);
-        CommonToken hash16 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext16.addChild(hash16);
-        CommonToken member16 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext16.addChild(member16);
-        ParametersContext parametersContext7 = new ParametersContext(referenceContext16, 0);
-        CommonToken leftBrace7 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext7.addChild(leftBrace7);
-        CommonToken argument11 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext7.addChild(argument11);
-        CommonToken comma4 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext7.addChild(comma4);
-        CommonToken ws89 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext7.addChild(ws89);
-        CommonToken argument12 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext7.addChild(argument12);
-        CommonToken rightBrace7 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext7.addChild(rightBrace7);
-        referenceContext16.addChild(parametersContext7);
-        javadocTagContext29.addChild(referenceContext16);
-        CommonToken newline35 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext29.addChild(newline35);
-        javadocContext0.addChild(javadocTagContext29);
-        JavadocTagContext javadocTagContext30 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral20 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext30.addChild(seeLiteral20);
-        CommonToken ws90 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext30.addChild(ws90);
-        ReferenceContext referenceContext17 = new ReferenceContext(javadocTagContext30, 0);
-        CommonToken hash17 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext17.addChild(hash17);
-        CommonToken member17 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext17.addChild(member17);
-        ParametersContext parametersContext8 = new ParametersContext(referenceContext17, 0);
-        CommonToken leftBrace8 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext8.addChild(leftBrace8);
-        CommonToken argument13 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext8.addChild(argument13);
-        CommonToken ws91 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext8.addChild(ws91);
-        CommonToken argument14 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext8.addChild(argument14);
-        CommonToken comma5 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext8.addChild(comma5);
-        CommonToken ws92 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext8.addChild(ws92);
-        CommonToken argument15 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext8.addChild(argument15);
-        CommonToken ws93 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext8.addChild(ws93);
-        CommonToken argument16 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext8.addChild(argument16);
-        CommonToken rightBrace8 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext8.addChild(rightBrace8);
-        referenceContext17.addChild(parametersContext8);
-        javadocTagContext30.addChild(referenceContext17);
-        CommonToken newline36 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext30.addChild(newline36);
-        javadocContext0.addChild(javadocTagContext30);
-        JavadocTagContext javadocTagContext31 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral21 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext31.addChild(seeLiteral21);
-        CommonToken ws94 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext31.addChild(ws94);
-        ReferenceContext referenceContext18 = new ReferenceContext(javadocTagContext31, 0);
-        CommonToken class13 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext18.addChild(class13);
-        CommonToken hash18 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext18.addChild(hash18);
-        CommonToken member18 = new CommonToken(JavadocTokenTypes.MEMBER, "field");
-        referenceContext18.addChild(member18);
-        javadocTagContext31.addChild(referenceContext18);
-        CommonToken newline37 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext31.addChild(newline37);
-        javadocContext0.addChild(javadocTagContext31);
-        JavadocTagContext javadocTagContext32 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral22 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext32.addChild(seeLiteral22);
-        CommonToken ws95 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext32.addChild(ws95);
-        ReferenceContext referenceContext19 = new ReferenceContext(javadocTagContext32, 0);
-        CommonToken class14 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext19.addChild(class14);
-        CommonToken hash19 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext19.addChild(hash19);
-        CommonToken member19 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext19.addChild(member19);
-        ParametersContext parametersContext9 = new ParametersContext(referenceContext19, 0);
-        CommonToken leftBrace9 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext9.addChild(leftBrace9);
-        CommonToken argument17 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext9.addChild(argument17);
-        CommonToken comma6 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext9.addChild(comma6);
-        CommonToken ws96 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext9.addChild(ws96);
-        CommonToken argument18 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext9.addChild(argument18);
-        CommonToken comma7 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext9.addChild(comma7);
-        CommonToken ws97 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext9.addChild(ws97);
-        CommonToken argument19 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext9.addChild(argument19);
-        CommonToken rightBrace9 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext9.addChild(rightBrace9);
-        referenceContext19.addChild(parametersContext9);
-        javadocTagContext32.addChild(referenceContext19);
-        CommonToken newline38 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext32.addChild(newline38);
-        javadocContext0.addChild(javadocTagContext32);
-        JavadocTagContext javadocTagContext33 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral23 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext33.addChild(seeLiteral23);
-        CommonToken ws98 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext33.addChild(ws98);
-        ReferenceContext referenceContext20 = new ReferenceContext(javadocTagContext33, 0);
-        CommonToken class15 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext20.addChild(class15);
-        CommonToken hash20 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext20.addChild(hash20);
-        CommonToken member20 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext20.addChild(member20);
-        ParametersContext parametersContext10 = new ParametersContext(referenceContext20, 0);
-        CommonToken leftBrace10 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext10.addChild(leftBrace10);
-        CommonToken argument20 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext10.addChild(argument20);
-        CommonToken ws99 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext10.addChild(ws99);
-        CommonToken argument21 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext10.addChild(argument21);
-        CommonToken comma8 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext10.addChild(comma8);
-        CommonToken ws100 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext10.addChild(ws100);
-        CommonToken argument22 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext10.addChild(argument22);
-        CommonToken ws101 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext10.addChild(ws101);
-        CommonToken argument23 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext10.addChild(argument23);
-        CommonToken rightBrace10 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext10.addChild(rightBrace10);
-        referenceContext20.addChild(parametersContext10);
-        javadocTagContext33.addChild(referenceContext20);
-        CommonToken newline39 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext33.addChild(newline39);
-        javadocContext0.addChild(javadocTagContext33);
-        JavadocTagContext javadocTagContext34 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral24 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext34.addChild(seeLiteral24);
-        CommonToken ws102 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext34.addChild(ws102);
-        ReferenceContext referenceContext21 = new ReferenceContext(javadocTagContext34, 0);
-        CommonToken class16 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext21.addChild(class16);
-        CommonToken hash21 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext21.addChild(hash21);
-        CommonToken member21 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext21.addChild(member21);
-        ParametersContext parametersContext11 = new ParametersContext(referenceContext21, 0);
-        CommonToken leftBrace11 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext11.addChild(leftBrace11);
-        CommonToken argument24 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext11.addChild(argument24);
-        CommonToken comma9 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext11.addChild(comma9);
-        CommonToken ws103 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext11.addChild(ws103);
-        CommonToken argument25 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext11.addChild(argument25);
-        CommonToken rightBrace11 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext11.addChild(rightBrace11);
-        referenceContext21.addChild(parametersContext11);
-        javadocTagContext34.addChild(referenceContext21);
-        CommonToken newline40 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext34.addChild(newline40);
-        javadocContext0.addChild(javadocTagContext34);
-        JavadocTagContext javadocTagContext35 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral25 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext35.addChild(seeLiteral25);
-        CommonToken ws104 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext35.addChild(ws104);
-        ReferenceContext referenceContext22 = new ReferenceContext(javadocTagContext35, 0);
-        CommonToken class17 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext22.addChild(class17);
-        CommonToken hash22 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext22.addChild(hash22);
-        CommonToken member22 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext22.addChild(member22);
-        ParametersContext parametersContext12 = new ParametersContext(referenceContext22, 0);
-        CommonToken leftBrace12 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext12.addChild(leftBrace12);
-        CommonToken argument26 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext12.addChild(argument26);
-        CommonToken ws105 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext12.addChild(ws105);
-        CommonToken argument27 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext12.addChild(argument27);
-        CommonToken comma10 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext12.addChild(comma10);
-        CommonToken ws106 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext12.addChild(ws106);
-        CommonToken argument28 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext12.addChild(argument28);
-        CommonToken ws107 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext12.addChild(ws107);
-        CommonToken argument29 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext12.addChild(argument29);
-        CommonToken rightBrace12 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext12.addChild(rightBrace12);
-        referenceContext22.addChild(parametersContext12);
-        javadocTagContext35.addChild(referenceContext22);
-        CommonToken newline41 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext35.addChild(newline41);
-        javadocContext0.addChild(javadocTagContext35);
-        JavadocTagContext javadocTagContext36 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral26 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext36.addChild(seeLiteral26);
-        CommonToken ws108 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext36.addChild(ws108);
-        ReferenceContext referenceContext23 = new ReferenceContext(javadocTagContext36, 0);
-        CommonToken class18 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext23.addChild(class18);
-        CommonToken dot13 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext23.addChild(dot13);
-        CommonToken class19 = new CommonToken(JavadocTokenTypes.CLASS, "NestedClass");
-        referenceContext23.addChild(class19);
-        javadocTagContext36.addChild(referenceContext23);
-        CommonToken newline42 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext36.addChild(newline42);
-        javadocContext0.addChild(javadocTagContext36);
-        JavadocTagContext javadocTagContext37 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral27 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext37.addChild(seeLiteral27);
-        CommonToken ws109 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext37.addChild(ws109);
-        ReferenceContext referenceContext24 = new ReferenceContext(javadocTagContext37, 0);
-        CommonToken class20 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext24.addChild(class20);
-        javadocTagContext37.addChild(referenceContext24);
-        CommonToken newline43 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext37.addChild(newline43);
-        javadocContext0.addChild(javadocTagContext37);
-        JavadocTagContext javadocTagContext38 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral28 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext38.addChild(seeLiteral28);
-        CommonToken ws110 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext38.addChild(ws110);
-        ReferenceContext referenceContext25 = new ReferenceContext(javadocTagContext38, 0);
-        CommonToken package13 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext25.addChild(package13);
-        CommonToken dot14 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext25.addChild(dot14);
-        CommonToken class21 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext25.addChild(class21);
-        CommonToken hash23 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext25.addChild(hash23);
-        CommonToken member23 = new CommonToken(JavadocTokenTypes.MEMBER, "field");
-        referenceContext25.addChild(member23);
-        javadocTagContext38.addChild(referenceContext25);
-        CommonToken newline44 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext38.addChild(newline44);
-        javadocContext0.addChild(javadocTagContext38);
-        JavadocTagContext javadocTagContext39 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral29 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext39.addChild(seeLiteral29);
-        CommonToken ws111 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext39.addChild(ws111);
-        ReferenceContext referenceContext26 = new ReferenceContext(javadocTagContext39, 0);
-        CommonToken package14 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext26.addChild(package14);
-        CommonToken dot15 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext26.addChild(dot15);
-        CommonToken class22 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext26.addChild(class22);
-        CommonToken hash24 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext26.addChild(hash24);
-        CommonToken member24 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext26.addChild(member24);
-        ParametersContext parametersContext13 = new ParametersContext(referenceContext26, 0);
-        CommonToken leftBrace13 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext13.addChild(leftBrace13);
-        CommonToken argument30 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext13.addChild(argument30);
-        CommonToken comma11 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext13.addChild(comma11);
-        CommonToken ws112 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext13.addChild(ws112);
-        CommonToken argument31 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext13.addChild(argument31);
-        CommonToken rightBrace13 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext13.addChild(rightBrace13);
-        referenceContext26.addChild(parametersContext13);
-        javadocTagContext39.addChild(referenceContext26);
-        CommonToken newline45 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext39.addChild(newline45);
-        javadocContext0.addChild(javadocTagContext39);
-        JavadocTagContext javadocTagContext40 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral30 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext40.addChild(seeLiteral30);
-        CommonToken ws113 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext40.addChild(ws113);
-        ReferenceContext referenceContext27 = new ReferenceContext(javadocTagContext40, 0);
-        CommonToken package15 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext27.addChild(package15);
-        CommonToken dot16 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext27.addChild(dot16);
-        CommonToken class23 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext27.addChild(class23);
-        CommonToken hash25 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext27.addChild(hash25);
-        CommonToken member25 = new CommonToken(JavadocTokenTypes.MEMBER, "method");
-        referenceContext27.addChild(member25);
-        ParametersContext parametersContext14 = new ParametersContext(referenceContext27, 0);
-        CommonToken leftBrace14 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext14.addChild(leftBrace14);
-        CommonToken argument32 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext14.addChild(argument32);
-        CommonToken ws114 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext14.addChild(ws114);
-        CommonToken argument33 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext14.addChild(argument33);
-        CommonToken comma12 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext14.addChild(comma12);
-        CommonToken ws115 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext14.addChild(ws115);
-        CommonToken argument34 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext14.addChild(argument34);
-        CommonToken ws116 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext14.addChild(ws116);
-        CommonToken argument35 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext14.addChild(argument35);
-        CommonToken rightBrace14 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext14.addChild(rightBrace14);
-        referenceContext27.addChild(parametersContext14);
-        javadocTagContext40.addChild(referenceContext27);
-        CommonToken newline46 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext40.addChild(newline46);
-        javadocContext0.addChild(javadocTagContext40);
-        JavadocTagContext javadocTagContext41 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral31 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext41.addChild(seeLiteral31);
-        CommonToken ws117 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext41.addChild(ws117);
-        ReferenceContext referenceContext28 = new ReferenceContext(javadocTagContext41, 0);
-        CommonToken package16 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext28.addChild(package16);
-        CommonToken dot17 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext28.addChild(dot17);
-        CommonToken class24 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext28.addChild(class24);
-        CommonToken hash26 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext28.addChild(hash26);
-        CommonToken member26 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext28.addChild(member26);
-        ParametersContext parametersContext15 = new ParametersContext(referenceContext28, 0);
-        CommonToken leftBrace15 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext15.addChild(leftBrace15);
-        CommonToken argument36 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext15.addChild(argument36);
-        CommonToken comma13 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext15.addChild(comma13);
-        CommonToken ws118 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext15.addChild(ws118);
-        CommonToken argument37 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext15.addChild(argument37);
-        CommonToken rightBrace15 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext15.addChild(rightBrace15);
-        referenceContext28.addChild(parametersContext15);
-        javadocTagContext41.addChild(referenceContext28);
-        CommonToken newline47 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext41.addChild(newline47);
-        javadocContext0.addChild(javadocTagContext41);
-        JavadocTagContext javadocTagContext42 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral32 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext42.addChild(seeLiteral32);
-        CommonToken ws119 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext42.addChild(ws119);
-        ReferenceContext referenceContext29 = new ReferenceContext(javadocTagContext42, 0);
-        CommonToken package17 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext29.addChild(package17);
-        CommonToken dot18 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext29.addChild(dot18);
-        CommonToken class25 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext29.addChild(class25);
-        CommonToken hash27 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext29.addChild(hash27);
-        CommonToken member27 = new CommonToken(JavadocTokenTypes.MEMBER, "constructor");
-        referenceContext29.addChild(member27);
-        ParametersContext parametersContext16 = new ParametersContext(referenceContext29, 0);
-        CommonToken leftBrace16 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext16.addChild(leftBrace16);
-        CommonToken argument38 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext16.addChild(argument38);
-        CommonToken ws120 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext16.addChild(ws120);
-        CommonToken argument39 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext16.addChild(argument39);
-        CommonToken comma14 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext16.addChild(comma14);
-        CommonToken ws121 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext16.addChild(ws121);
-        CommonToken argument40 = new CommonToken(JavadocTokenTypes.ARGUMENT, "Type");
-        parametersContext16.addChild(argument40);
-        CommonToken ws122 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext16.addChild(ws122);
-        CommonToken argument41 = new CommonToken(JavadocTokenTypes.ARGUMENT, "argname");
-        parametersContext16.addChild(argument41);
-        CommonToken rightBrace16 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext16.addChild(rightBrace16);
-        referenceContext29.addChild(parametersContext16);
-        javadocTagContext42.addChild(referenceContext29);
-        CommonToken newline48 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext42.addChild(newline48);
-        javadocContext0.addChild(javadocTagContext42);
-        JavadocTagContext javadocTagContext43 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral33 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext43.addChild(seeLiteral33);
-        CommonToken ws123 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext43.addChild(ws123);
-        ReferenceContext referenceContext30 = new ReferenceContext(javadocTagContext43, 0);
-        CommonToken package18 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext30.addChild(package18);
-        CommonToken dot19 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext30.addChild(dot19);
-        CommonToken class26 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext30.addChild(class26);
-        CommonToken dot20 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext30.addChild(dot20);
-        CommonToken class27 = new CommonToken(JavadocTokenTypes.CLASS, "NestedClass");
-        referenceContext30.addChild(class27);
-        javadocTagContext43.addChild(referenceContext30);
-        CommonToken newline49 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext43.addChild(newline49);
-        javadocContext0.addChild(javadocTagContext43);
-        JavadocTagContext javadocTagContext44 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral34 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext44.addChild(seeLiteral34);
-        CommonToken ws124 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext44.addChild(ws124);
-        ReferenceContext referenceContext31 = new ReferenceContext(javadocTagContext44, 0);
-        CommonToken package19 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext31.addChild(package19);
-        CommonToken dot21 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext31.addChild(dot21);
-        CommonToken class28 = new CommonToken(JavadocTokenTypes.CLASS, "Class");
-        referenceContext31.addChild(class28);
-        javadocTagContext44.addChild(referenceContext31);
-        CommonToken newline50 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext44.addChild(newline50);
-        javadocContext0.addChild(javadocTagContext44);
-        JavadocTagContext javadocTagContext45 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral35 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext45.addChild(seeLiteral35);
-        CommonToken ws125 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext45.addChild(ws125);
-        ReferenceContext referenceContext32 = new ReferenceContext(javadocTagContext45, 0);
-        CommonToken package20 = new CommonToken(JavadocTokenTypes.PACKAGE, "com.github.checkstyle");
-        referenceContext32.addChild(package20);
-        javadocTagContext45.addChild(referenceContext32);
-        CommonToken newline51 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext45.addChild(newline51);
-        javadocContext0.addChild(javadocTagContext45);
-        JavadocTagContext javadocTagContext46 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext46.addChild(serialLiteral0);
-        CommonToken ws126 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext46.addChild(ws126);
-        DescriptionContext descriptionContext20 = new DescriptionContext(javadocTagContext46, 0);
-        TextContext textContext26 = new TextContext(descriptionContext20, 0);
-        CommonToken char340 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext26.addChild(char340);
-        CommonToken char341 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext26.addChild(char341);
-        CommonToken char342 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext26.addChild(char342);
-        CommonToken char343 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext26.addChild(char343);
-        CommonToken char344 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext26.addChild(char344);
-        CommonToken ws127 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext26.addChild(ws127);
-        CommonToken char345 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext26.addChild(char345);
-        CommonToken char346 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext26.addChild(char346);
-        CommonToken char347 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext26.addChild(char347);
-        CommonToken char348 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext26.addChild(char348);
-        CommonToken char349 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext26.addChild(char349);
-        CommonToken char350 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext26.addChild(char350);
-        CommonToken char351 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext26.addChild(char351);
-        CommonToken char352 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext26.addChild(char352);
-        CommonToken char353 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext26.addChild(char353);
-        CommonToken char354 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext26.addChild(char354);
-        CommonToken char355 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext26.addChild(char355);
-        descriptionContext20.addChild(textContext26);
-        CommonToken newline52 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext20.addChild(newline52);
-        TextContext textContext27 = new TextContext(descriptionContext20, 0);
-        CommonToken char356 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext27.addChild(char356);
-        CommonToken char357 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext27.addChild(char357);
-        CommonToken ws128 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext27.addChild(ws128);
-        CommonToken char358 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext27.addChild(char358);
-        CommonToken char359 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext27.addChild(char359);
-        CommonToken char360 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext27.addChild(char360);
-        CommonToken ws129 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext27.addChild(ws129);
-        CommonToken char361 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext27.addChild(char361);
-        CommonToken char362 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext27.addChild(char362);
-        CommonToken char363 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext27.addChild(char363);
-        CommonToken char364 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext27.addChild(char364);
-        CommonToken char365 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext27.addChild(char365);
-        descriptionContext20.addChild(textContext27);
-        CommonToken newline53 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext20.addChild(newline53);
-        TextContext textContext28 = new TextContext(descriptionContext20, 0);
-        CommonToken char366 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext28.addChild(char366);
-        CommonToken char367 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext28.addChild(char367);
-        CommonToken char368 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext28.addChild(char368);
-        CommonToken ws130 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext28.addChild(ws130);
-        CommonToken char369 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext28.addChild(char369);
-        CommonToken char370 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext28.addChild(char370);
-        CommonToken char371 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext28.addChild(char371);
-        CommonToken char372 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext28.addChild(char372);
-        CommonToken ws131 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext28.addChild(ws131);
-        CommonToken char373 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext28.addChild(char373);
-        CommonToken char374 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext28.addChild(char374);
-        CommonToken char375 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext28.addChild(char375);
-        CommonToken char376 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext28.addChild(char376);
-        descriptionContext20.addChild(textContext28);
-        CommonToken newline54 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext20.addChild(newline54);
-        javadocTagContext46.addChild(descriptionContext20);
-        javadocContext0.addChild(javadocTagContext46);
-        JavadocTagContext javadocTagContext47 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral1 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext47.addChild(serialLiteral1);
-        CommonToken ws132 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext47.addChild(ws132);
-        CommonToken literalInclude0 = new CommonToken(JavadocTokenTypes.LITERAL_INCLUDE, "include");
-        javadocTagContext47.addChild(literalInclude0);
-        DescriptionContext descriptionContext21 = new DescriptionContext(javadocTagContext47, 0);
-        CommonToken newline55 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext21.addChild(newline55);
-        javadocTagContext47.addChild(descriptionContext21);
-        javadocContext0.addChild(javadocTagContext47);
-        JavadocTagContext javadocTagContext48 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral2 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext48.addChild(serialLiteral2);
-        CommonToken ws133 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext48.addChild(ws133);
-        CommonToken literalExclude0 = new CommonToken(JavadocTokenTypes.LITERAL_EXCLUDE, "exclude");
-        javadocTagContext48.addChild(literalExclude0);
-        DescriptionContext descriptionContext22 = new DescriptionContext(javadocTagContext48, 0);
-        CommonToken newline56 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext22.addChild(newline56);
-        javadocTagContext48.addChild(descriptionContext22);
-        javadocContext0.addChild(javadocTagContext48);
-        JavadocTagContext javadocTagContext49 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialFieldLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_FIELD_LITERAL, "@serialField");
-        javadocTagContext49.addChild(serialFieldLiteral0);
-        CommonToken ws134 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext49.addChild(ws134);
-        CommonToken fieldName0 = new CommonToken(JavadocTokenTypes.FIELD_NAME, "myField");
-        javadocTagContext49.addChild(fieldName0);
-        CommonToken ws135 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext49.addChild(ws135);
-        CommonToken fieldType0 = new CommonToken(JavadocTokenTypes.FIELD_TYPE, "myObjectStreamField");
-        javadocTagContext49.addChild(fieldType0);
-        CommonToken ws136 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext49.addChild(ws136);
-        DescriptionContext descriptionContext23 = new DescriptionContext(javadocTagContext49, 0);
-        TextContext textContext29 = new TextContext(descriptionContext23, 0);
-        CommonToken char377 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext29.addChild(char377);
-        CommonToken char378 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext29.addChild(char378);
-        CommonToken char379 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext29.addChild(char379);
-        CommonToken char380 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext29.addChild(char380);
-        CommonToken char381 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext29.addChild(char381);
-        CommonToken char382 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext29.addChild(char382);
-        CommonToken char383 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext29.addChild(char383);
-        CommonToken char384 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext29.addChild(char384);
-        CommonToken char385 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext29.addChild(char385);
-        CommonToken char386 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext29.addChild(char386);
-        CommonToken char387 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext29.addChild(char387);
-        CommonToken ws137 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext29.addChild(ws137);
-        CommonToken char388 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext29.addChild(char388);
-        CommonToken char389 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext29.addChild(char389);
-        CommonToken ws138 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext29.addChild(ws138);
-        CommonToken char390 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext29.addChild(char390);
-        CommonToken char391 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext29.addChild(char391);
-        CommonToken ws139 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext29.addChild(ws139);
-        CommonToken char392 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext29.addChild(char392);
-        CommonToken char393 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext29.addChild(char393);
-        CommonToken char394 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext29.addChild(char394);
-        CommonToken char395 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext29.addChild(char395);
-        CommonToken char396 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext29.addChild(char396);
-        CommonToken char397 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext29.addChild(char397);
-        CommonToken ws140 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext29.addChild(ws140);
-        CommonToken char398 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext29.addChild(char398);
-        CommonToken char399 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext29.addChild(char399);
-        CommonToken char400 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext29.addChild(char400);
-        CommonToken char401 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext29.addChild(char401);
-        CommonToken char402 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext29.addChild(char402);
-        descriptionContext23.addChild(textContext29);
-        CommonToken newline57 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext23.addChild(newline57);
-        javadocTagContext49.addChild(descriptionContext23);
-        javadocContext0.addChild(javadocTagContext49);
-        JavadocTagContext javadocTagContext50 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialDataLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_DATA_LITERAL, "@serialData");
-        javadocTagContext50.addChild(serialDataLiteral0);
-        CommonToken ws141 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext50.addChild(ws141);
-        DescriptionContext descriptionContext24 = new DescriptionContext(javadocTagContext50, 0);
-        TextContext textContext30 = new TextContext(descriptionContext24, 0);
-        CommonToken char403 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext30.addChild(char403);
-        CommonToken char404 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char404);
-        CommonToken char405 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char405);
-        CommonToken ws142 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws142);
-        CommonToken char406 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char406);
-        CommonToken char407 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char407);
-        CommonToken char408 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char408);
-        CommonToken char409 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char409);
-        CommonToken char410 = new CommonToken(JavadocTokenTypes.CHAR, "-");
-        textContext30.addChild(char410);
-        CommonToken char411 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char411);
-        CommonToken char412 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char412);
-        CommonToken char413 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char413);
-        CommonToken char414 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char414);
-        CommonToken char415 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char415);
-        CommonToken char416 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char416);
-        CommonToken char417 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext30.addChild(char417);
-        CommonToken char418 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char418);
-        CommonToken char419 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char419);
-        CommonToken char420 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char420);
-        CommonToken char421 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char421);
-        CommonToken ws143 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws143);
-        CommonToken char422 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char422);
-        CommonToken char423 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char423);
-        CommonToken char424 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char424);
-        CommonToken char425 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext30.addChild(char425);
-        CommonToken char426 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext30.addChild(char426);
-        CommonToken char427 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char427);
-        CommonToken char428 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char428);
-        CommonToken char429 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char429);
-        CommonToken char430 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char430);
-        CommonToken ws144 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws144);
-        CommonToken char431 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char431);
-        CommonToken char432 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char432);
-        CommonToken char433 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char433);
-        CommonToken ws145 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws145);
-        CommonToken char434 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char434);
-        CommonToken char435 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext30.addChild(char435);
-        CommonToken char436 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext30.addChild(char436);
-        CommonToken char437 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char437);
-        CommonToken char438 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char438);
-        CommonToken ws146 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws146);
-        CommonToken char439 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char439);
-        CommonToken char440 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char440);
-        CommonToken char441 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char441);
-        CommonToken ws147 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws147);
-        CommonToken char442 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char442);
-        CommonToken char443 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char443);
-        CommonToken char444 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char444);
-        CommonToken char445 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char445);
-        CommonToken char446 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char446);
-        CommonToken ws148 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws148);
-        CommonToken char447 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char447);
-        CommonToken char448 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext30.addChild(char448);
-        CommonToken ws149 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws149);
-        CommonToken char449 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char449);
-        CommonToken char450 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char450);
-        CommonToken char451 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char451);
-        CommonToken char452 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char452);
-        CommonToken ws150 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws150);
-        CommonToken char453 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char453);
-        CommonToken char454 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char454);
-        CommonToken ws151 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws151);
-        CommonToken char455 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char455);
-        CommonToken char456 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char456);
-        CommonToken char457 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char457);
-        CommonToken ws152 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws152);
-        CommonToken char458 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char458);
-        CommonToken char459 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char459);
-        CommonToken char460 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char460);
-        CommonToken char461 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char461);
-        CommonToken char462 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char462);
-        CommonToken char463 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char463);
-        CommonToken char464 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char464);
-        CommonToken char465 = new CommonToken(JavadocTokenTypes.CHAR, "z");
-        textContext30.addChild(char465);
-        CommonToken char466 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char466);
-        CommonToken char467 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char467);
-        CommonToken ws153 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws153);
-        CommonToken char468 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext30.addChild(char468);
-        CommonToken char469 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char469);
-        CommonToken char470 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char470);
-        CommonToken char471 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext30.addChild(char471);
-        CommonToken char472 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext30.addChild(char472);
-        CommonToken ws154 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws154);
-        CommonToken char473 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext30.addChild(char473);
-        CommonToken char474 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext30.addChild(char474);
-        CommonToken char475 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char475);
-        CommonToken char476 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char476);
-        CommonToken char477 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char477);
-        CommonToken char478 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext30.addChild(char478);
-        CommonToken char479 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char479);
-        CommonToken char480 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char480);
-        CommonToken char481 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char481);
-        CommonToken char482 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char482);
-        CommonToken char483 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char483);
-        CommonToken char484 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext30.addChild(char484);
-        CommonToken char485 = new CommonToken(JavadocTokenTypes.CHAR, ",");
-        textContext30.addChild(char485);
-        CommonToken ws155 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws155);
-        CommonToken char486 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char486);
-        CommonToken char487 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char487);
-        CommonToken char488 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char488);
-        CommonToken char489 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char489);
-        CommonToken ws156 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws156);
-        CommonToken char490 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char490);
-        CommonToken char491 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char491);
-        CommonToken char492 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char492);
-        CommonToken char493 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char493);
-        CommonToken ws157 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws157);
-        CommonToken char494 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char494);
-        CommonToken char495 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char495);
-        CommonToken char496 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char496);
-        CommonToken char497 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char497);
-        CommonToken char498 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext30.addChild(char498);
-        CommonToken char499 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char499);
-        CommonToken char500 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char500);
-        CommonToken char501 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char501);
-        CommonToken ws158 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws158);
-        CommonToken char502 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char502);
-        CommonToken char503 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char503);
-        CommonToken char504 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char504);
-        CommonToken ws159 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws159);
-        CommonToken char505 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char505);
-        CommonToken char506 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext30.addChild(char506);
-        CommonToken char507 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char507);
-        CommonToken char508 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char508);
-        CommonToken char509 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char509);
-        CommonToken char510 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char510);
-        CommonToken char511 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char511);
-        CommonToken char512 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char512);
-        CommonToken ws160 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws160);
-        CommonToken char513 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char513);
-        CommonToken char514 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char514);
-        CommonToken char515 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char515);
-        CommonToken char516 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char516);
-        CommonToken ws161 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws161);
-        CommonToken char517 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext30.addChild(char517);
-        CommonToken char518 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char518);
-        CommonToken char519 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char519);
-        CommonToken char520 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char520);
-        CommonToken char521 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char521);
-        CommonToken char522 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char522);
-        CommonToken char523 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char523);
-        CommonToken ws162 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws162);
-        CommonToken char524 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext30.addChild(char524);
-        CommonToken char525 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext30.addChild(char525);
-        CommonToken ws163 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws163);
-        CommonToken char526 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char526);
-        CommonToken char527 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char527);
-        CommonToken char528 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char528);
-        CommonToken ws164 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws164);
-        CommonToken char529 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext30.addChild(char529);
-        CommonToken char530 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char530);
-        CommonToken char531 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char531);
-        CommonToken char532 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char532);
-        CommonToken char533 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char533);
-        CommonToken char534 = new CommonToken(JavadocTokenTypes.CHAR, "O");
-        textContext30.addChild(char534);
-        CommonToken char535 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext30.addChild(char535);
-        CommonToken char536 = new CommonToken(JavadocTokenTypes.CHAR, "j");
-        textContext30.addChild(char536);
-        CommonToken char537 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char537);
-        CommonToken char538 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char538);
-        CommonToken char539 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char539);
-        CommonToken ws165 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws165);
-        CommonToken char540 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext30.addChild(char540);
-        CommonToken char541 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char541);
-        CommonToken char542 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char542);
-        CommonToken char543 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char543);
-        CommonToken char544 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char544);
-        CommonToken char545 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char545);
-        CommonToken ws166 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws166);
-        CommonToken char546 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char546);
-        CommonToken char547 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char547);
-        CommonToken char548 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char548);
-        CommonToken ws167 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws167);
-        CommonToken char549 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char549);
-        CommonToken char550 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char550);
-        CommonToken char551 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char551);
-        CommonToken ws168 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws168);
-        CommonToken char552 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char552);
-        CommonToken char553 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char553);
-        CommonToken char554 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char554);
-        CommonToken char555 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char555);
-        CommonToken ws169 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws169);
-        CommonToken char556 = new CommonToken(JavadocTokenTypes.CHAR, "(");
-        textContext30.addChild(char556);
-        CommonToken char557 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char557);
-        CommonToken char558 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char558);
-        CommonToken char559 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char559);
-        CommonToken char560 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char560);
-        CommonToken char561 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext30.addChild(char561);
-        CommonToken char562 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char562);
-        CommonToken char563 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char563);
-        CommonToken char564 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char564);
-        CommonToken char565 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext30.addChild(char565);
-        CommonToken ws170 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws170);
-        CommonToken char566 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext30.addChild(char566);
-        CommonToken char567 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char567);
-        CommonToken char568 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char568);
-        CommonToken char569 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char569);
-        CommonToken ws171 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws171);
-        CommonToken char570 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext30.addChild(char570);
-        CommonToken char571 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char571);
-        CommonToken char572 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char572);
-        CommonToken char573 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char573);
-        CommonToken char574 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char574);
-        CommonToken char575 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char575);
-        CommonToken char576 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext30.addChild(char576);
-        CommonToken char577 = new CommonToken(JavadocTokenTypes.CHAR, ")");
-        textContext30.addChild(char577);
-        CommonToken ws172 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws172);
-        CommonToken char578 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext30.addChild(char578);
-        CommonToken char579 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char579);
-        CommonToken char580 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char580);
-        CommonToken char581 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char581);
-        CommonToken char582 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char582);
-        CommonToken char583 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char583);
-        CommonToken char584 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char584);
-        CommonToken ws173 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws173);
-        CommonToken char585 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext30.addChild(char585);
-        CommonToken char586 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext30.addChild(char586);
-        CommonToken ws174 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws174);
-        CommonToken char587 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char587);
-        CommonToken char588 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char588);
-        CommonToken char589 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char589);
-        CommonToken ws175 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws175);
-        CommonToken char590 = new CommonToken(JavadocTokenTypes.CHAR, "E");
-        textContext30.addChild(char590);
-        CommonToken char591 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext30.addChild(char591);
-        CommonToken char592 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char592);
-        CommonToken char593 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char593);
-        CommonToken char594 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char594);
-        CommonToken char595 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char595);
-        CommonToken char596 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char596);
-        CommonToken char597 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char597);
-        CommonToken char598 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char598);
-        CommonToken char599 = new CommonToken(JavadocTokenTypes.CHAR, "z");
-        textContext30.addChild(char599);
-        CommonToken char600 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char600);
-        CommonToken char601 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext30.addChild(char601);
-        CommonToken char602 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char602);
-        CommonToken char603 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char603);
-        CommonToken char604 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext30.addChild(char604);
-        CommonToken char605 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext30.addChild(char605);
-        CommonToken char606 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char606);
-        CommonToken char607 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext30.addChild(char607);
-        CommonToken char608 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char608);
-        CommonToken char609 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char609);
-        CommonToken char610 = new CommonToken(JavadocTokenTypes.CHAR, "E");
-        textContext30.addChild(char610);
-        CommonToken char611 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext30.addChild(char611);
-        CommonToken char612 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char612);
-        CommonToken char613 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char613);
-        CommonToken char614 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext30.addChild(char614);
-        CommonToken char615 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext30.addChild(char615);
-        CommonToken char616 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext30.addChild(char616);
-        CommonToken char617 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext30.addChild(char617);
-        CommonToken ws176 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext30.addChild(ws176);
-        CommonToken char618 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext30.addChild(char618);
-        CommonToken char619 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext30.addChild(char619);
-        CommonToken char620 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext30.addChild(char620);
-        CommonToken char621 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext30.addChild(char621);
-        CommonToken char622 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext30.addChild(char622);
-        CommonToken char623 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext30.addChild(char623);
-        CommonToken char624 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext30.addChild(char624);
-        descriptionContext24.addChild(textContext30);
-        CommonToken newline58 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext24.addChild(newline58);
-        javadocTagContext50.addChild(descriptionContext24);
-        javadocContext0.addChild(javadocTagContext50);
-        JavadocTagContext javadocTagContext51 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken sinceLiteral0 = new CommonToken(JavadocTokenTypes.SINCE_LITERAL, "@since");
-        javadocTagContext51.addChild(sinceLiteral0);
-        CommonToken ws177 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext51.addChild(ws177);
-        DescriptionContext descriptionContext25 = new DescriptionContext(javadocTagContext51, 0);
-        TextContext textContext31 = new TextContext(descriptionContext25, 0);
-        CommonToken char625 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext31.addChild(char625);
-        CommonToken char626 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext31.addChild(char626);
-        CommonToken char627 = new CommonToken(JavadocTokenTypes.CHAR, "5");
-        textContext31.addChild(char627);
-        descriptionContext25.addChild(textContext31);
-        CommonToken newline59 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext25.addChild(newline59);
-        javadocTagContext51.addChild(descriptionContext25);
-        javadocContext0.addChild(javadocTagContext51);
-        JavadocTagContext javadocTagContext52 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken sinceLiteral1 = new CommonToken(JavadocTokenTypes.SINCE_LITERAL, "@since");
-        javadocTagContext52.addChild(sinceLiteral1);
-        CommonToken ws178 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext52.addChild(ws178);
-        DescriptionContext descriptionContext26 = new DescriptionContext(javadocTagContext52, 0);
-        TextContext textContext32 = new TextContext(descriptionContext26, 0);
-        CommonToken char628 = new CommonToken(JavadocTokenTypes.CHAR, "R");
-        textContext32.addChild(char628);
-        CommonToken char629 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext32.addChild(char629);
-        CommonToken char630 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext32.addChild(char630);
-        CommonToken char631 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext32.addChild(char631);
-        CommonToken char632 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext32.addChild(char632);
-        CommonToken char633 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext32.addChild(char633);
-        CommonToken char634 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext32.addChild(char634);
-        CommonToken ws179 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext32.addChild(ws179);
-        CommonToken char635 = new CommonToken(JavadocTokenTypes.CHAR, "3");
-        textContext32.addChild(char635);
-        CommonToken char636 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext32.addChild(char636);
-        CommonToken char637 = new CommonToken(JavadocTokenTypes.CHAR, "4");
-        textContext32.addChild(char637);
-        CommonToken char638 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext32.addChild(char638);
-        CommonToken char639 = new CommonToken(JavadocTokenTypes.CHAR, "5");
-        textContext32.addChild(char639);
-        descriptionContext26.addChild(textContext32);
-        CommonToken newline60 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext26.addChild(newline60);
-        javadocTagContext52.addChild(descriptionContext26);
-        javadocContext0.addChild(javadocTagContext52);
-        JavadocTagContext javadocTagContext53 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken throwsLiteral0 = new CommonToken(JavadocTokenTypes.THROWS_LITERAL, "@throws");
-        javadocTagContext53.addChild(throwsLiteral0);
-        CommonToken ws180 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext53.addChild(ws180);
-        CommonToken className1 = new CommonToken(JavadocTokenTypes.CLASS_NAME, "IOException");
-        javadocTagContext53.addChild(className1);
-        CommonToken ws181 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext53.addChild(ws181);
-        DescriptionContext descriptionContext27 = new DescriptionContext(javadocTagContext53, 0);
-        TextContext textContext33 = new TextContext(descriptionContext27, 0);
-        CommonToken char640 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext33.addChild(char640);
-        CommonToken char641 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext33.addChild(char641);
-        CommonToken char642 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext33.addChild(char642);
-        CommonToken char643 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext33.addChild(char643);
-        CommonToken char644 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext33.addChild(char644);
-        CommonToken char645 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext33.addChild(char645);
-        CommonToken ws182 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext33.addChild(ws182);
-        CommonToken char646 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext33.addChild(char646);
-        CommonToken char647 = new CommonToken(JavadocTokenTypes.CHAR, "x");
-        textContext33.addChild(char647);
-        CommonToken char648 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext33.addChild(char648);
-        CommonToken char649 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext33.addChild(char649);
-        CommonToken char650 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext33.addChild(char650);
-        CommonToken char651 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext33.addChild(char651);
-        CommonToken char652 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext33.addChild(char652);
-        CommonToken char653 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext33.addChild(char653);
-        CommonToken char654 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext33.addChild(char654);
-        CommonToken ws183 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext33.addChild(ws183);
-        CommonToken char655 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext33.addChild(char655);
-        CommonToken char656 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext33.addChild(char656);
-        CommonToken ws184 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext33.addChild(ws184);
-        CommonToken char657 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext33.addChild(char657);
-        CommonToken char658 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext33.addChild(char658);
-        CommonToken char659 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext33.addChild(char659);
-        CommonToken char660 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext33.addChild(char660);
-        CommonToken char661 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext33.addChild(char661);
-        CommonToken char662 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext33.addChild(char662);
-        CommonToken char663 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext33.addChild(char663);
-        CommonToken char664 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext33.addChild(char664);
-        CommonToken char665 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext33.addChild(char665);
-        CommonToken char666 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext33.addChild(char666);
-        CommonToken ws185 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext33.addChild(ws185);
-        CommonToken char667 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext33.addChild(char667);
-        CommonToken char668 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext33.addChild(char668);
-        CommonToken char669 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext33.addChild(char669);
-        CommonToken char670 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext33.addChild(char670);
-        CommonToken char671 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext33.addChild(char671);
-        CommonToken char672 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext33.addChild(char672);
-        CommonToken char673 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext33.addChild(char673);
-        CommonToken char674 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext33.addChild(char674);
-        descriptionContext27.addChild(textContext33);
-        CommonToken newline61 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext27.addChild(newline61);
-        javadocTagContext53.addChild(descriptionContext27);
-        javadocContext0.addChild(javadocTagContext53);
-        JavadocTagContext javadocTagContext54 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken versionLiteral0 = new CommonToken(JavadocTokenTypes.VERSION_LITERAL, "@version");
-        javadocTagContext54.addChild(versionLiteral0);
-        CommonToken ws186 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext54.addChild(ws186);
-        DescriptionContext descriptionContext28 = new DescriptionContext(javadocTagContext54, 0);
-        TextContext textContext34 = new TextContext(descriptionContext28, 0);
-        CommonToken char675 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext34.addChild(char675);
-        CommonToken char676 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext34.addChild(char676);
-        CommonToken char677 = new CommonToken(JavadocTokenTypes.CHAR, "2");
-        textContext34.addChild(char677);
-        descriptionContext28.addChild(textContext34);
-        CommonToken newline62 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext28.addChild(newline62);
-        javadocTagContext54.addChild(descriptionContext28);
-        javadocContext0.addChild(javadocTagContext54);
-        JavadocTagContext javadocTagContext55 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken versionLiteral1 = new CommonToken(JavadocTokenTypes.VERSION_LITERAL, "@version");
-        javadocTagContext55.addChild(versionLiteral1);
-        CommonToken ws187 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext55.addChild(ws187);
-        DescriptionContext descriptionContext29 = new DescriptionContext(javadocTagContext55, 0);
-        TextContext textContext35 = new TextContext(descriptionContext29, 0);
-        CommonToken char678 = new CommonToken(JavadocTokenTypes.CHAR, "R");
-        textContext35.addChild(char678);
-        CommonToken char679 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext35.addChild(char679);
-        CommonToken char680 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext35.addChild(char680);
-        CommonToken char681 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext35.addChild(char681);
-        CommonToken char682 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext35.addChild(char682);
-        CommonToken char683 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext35.addChild(char683);
-        CommonToken char684 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext35.addChild(char684);
-        CommonToken ws188 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext35.addChild(ws188);
-        CommonToken char685 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext35.addChild(char685);
-        CommonToken char686 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext35.addChild(char686);
-        CommonToken char687 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext35.addChild(char687);
-        CommonToken char688 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext35.addChild(char688);
-        CommonToken char689 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext35.addChild(char689);
-        descriptionContext29.addChild(textContext35);
-        javadocTagContext55.addChild(descriptionContext29);
-        javadocContext0.addChild(javadocTagContext55);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAsteriskInJavadocInlineTag()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocInlineTagContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "  *");
-        javadocInlineTagContext0.addChild(leadingAsterisk0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "GwtIncompatible");
-        referenceContext0.addChild(class0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAsteriskInLiteral()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken literalLiteral0 = new CommonToken(JavadocTokenTypes.LITERAL_LITERAL, "@literal");
-        javadocInlineTagContext0.addChild(literalLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        TextContext textContext0 = new TextContext(javadocInlineTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, LINE_SEPARATOR);
-        textContext0.addChild(char2);
-        javadocInlineTagContext0.addChild(textContext0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "*");
-        javadocInlineTagContext0.addChild(leadingAsterisk0);
-        TextContext textContext1 = new TextContext(javadocInlineTagContext0, 0);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, " ");
-        textContext1.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char5);
-        javadocInlineTagContext0.addChild(textContext1);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeAuthorWithMailto()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext0.addChild(authorLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        HtmlElementContext htmlElementContext0 = new HtmlElementContext(descriptionContext0, 0);
-        HtmlTagContext htmlTagContext0 = new HtmlTagContext(htmlElementContext0, 0);
-        HtmlElementOpenContext htmlElementOpenContext0 = new HtmlElementOpenContext(htmlTagContext0, 0);
-        CommonToken open0 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementOpenContext0.addChild(open0);
-        CommonToken htmlTagName0 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementOpenContext0.addChild(htmlTagName0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        htmlElementOpenContext0.addChild(ws1);
-        AttributeContext attributeContext0 = new AttributeContext(htmlElementOpenContext0, 0);
-        CommonToken htmlTagName1 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "href");
-        attributeContext0.addChild(htmlTagName1);
-        CommonToken equals0 = new CommonToken(JavadocTokenTypes.EQUALS, "=");
-        attributeContext0.addChild(equals0);
-        CommonToken attrValue0 = new CommonToken(JavadocTokenTypes.ATTR_VALUE, "\"mailto:barataliba@gmail.com\"");
-        attributeContext0.addChild(attrValue0);
-        htmlElementOpenContext0.addChild(attributeContext0);
-        CommonToken close0 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementOpenContext0.addChild(close0);
-        htmlTagContext0.addChild(htmlElementOpenContext0);
-        TextContext textContext0 = new TextContext(htmlTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "B");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char7);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws2);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "z");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext0.addChild(char15);
-        htmlTagContext0.addChild(textContext0);
-        HtmlElementCloseContext htmlElementCloseContext0 = new HtmlElementCloseContext(htmlTagContext0, 0);
-        CommonToken open1 = new CommonToken(JavadocTokenTypes.OPEN, "<");
-        htmlElementCloseContext0.addChild(open1);
-        CommonToken slash0 = new CommonToken(JavadocTokenTypes.SLASH, "/");
-        htmlElementCloseContext0.addChild(slash0);
-        CommonToken htmlTagName2 = new CommonToken(JavadocTokenTypes.HTML_TAG_NAME, "a");
-        htmlElementCloseContext0.addChild(htmlTagName2);
-        CommonToken close1 = new CommonToken(JavadocTokenTypes.CLOSE, ">");
-        htmlElementCloseContext0.addChild(close1);
-        htmlTagContext0.addChild(htmlElementCloseContext0);
-        htmlElementContext0.addChild(htmlTagContext0);
-        descriptionContext0.addChild(htmlElementContext0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeCustomJavadocTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName0 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@myTag");
-        javadocTagContext0.addChild(customName0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws1);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char2);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char4);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws3);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char6);
-        descriptionContext0.addChild(textContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk1);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws4);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName1 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@anotherTagWithoutParameter");
-        javadocTagContext1.addChild(customName1);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext1.addChild(newline1);
-        javadocContext0.addChild(javadocTagContext1);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk2);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws5);
-        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext2.addChild(authorLiteral0);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext2.addChild(ws6);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext2, 0);
-        TextContext textContext1 = new TextContext(descriptionContext1, 0);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext1.addChild(char7);
-        descriptionContext1.addChild(textContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext1.addChild(newline2);
-        TextContext textContext2 = new TextContext(descriptionContext1, 0);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws7);
-        descriptionContext1.addChild(textContext2);
-        javadocTagContext2.addChild(descriptionContext1);
-        javadocContext0.addChild(javadocTagContext2);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeDocRootInheritDoc()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        javadocContext0.addChild(textContext0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken docRootLiteral0 = new CommonToken(JavadocTokenTypes.DOC_ROOT_LITERAL, "@docRoot");
-        javadocInlineTagContext0.addChild(docRootLiteral0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk1);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        javadocContext0.addChild(textContext1);
-        JavadocInlineTagContext javadocInlineTagContext1 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext1.addChild(javadocInlineTagStart1);
-        CommonToken docRootLiteral1 = new CommonToken(JavadocTokenTypes.DOC_ROOT_LITERAL, "@docRoot");
-        javadocInlineTagContext1.addChild(docRootLiteral1);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext1.addChild(ws2);
-        CommonToken javadocInlineTagEnd1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext1.addChild(javadocInlineTagEnd1);
-        javadocContext0.addChild(javadocInlineTagContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline2);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk2);
-        TextContext textContext2 = new TextContext(javadocContext0, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws3);
-        javadocContext0.addChild(textContext2);
-        JavadocInlineTagContext javadocInlineTagContext2 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart2 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext2.addChild(javadocInlineTagStart2);
-        CommonToken docRootLiteral2 = new CommonToken(JavadocTokenTypes.DOC_ROOT_LITERAL, "@docRoot");
-        javadocInlineTagContext2.addChild(docRootLiteral2);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocInlineTagContext2.addChild(newline3);
-        CommonToken leadingAsterisk3 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocInlineTagContext2.addChild(leadingAsterisk3);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext2.addChild(ws4);
-        CommonToken javadocInlineTagEnd2 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext2.addChild(javadocInlineTagEnd2);
-        javadocContext0.addChild(javadocInlineTagContext2);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline4);
-        CommonToken leadingAsterisk4 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk4);
-        TextContext textContext3 = new TextContext(javadocContext0, 0);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws5);
-        javadocContext0.addChild(textContext3);
-        JavadocInlineTagContext javadocInlineTagContext3 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart3 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext3.addChild(javadocInlineTagStart3);
-        CommonToken inheritDocLiteral0 = new CommonToken(JavadocTokenTypes.INHERIT_DOC_LITERAL, "@inheritDoc");
-        javadocInlineTagContext3.addChild(inheritDocLiteral0);
-        CommonToken javadocInlineTagEnd3 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext3.addChild(javadocInlineTagEnd3);
-        javadocContext0.addChild(javadocInlineTagContext3);
-        CommonToken newline5 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline5);
-        CommonToken leadingAsterisk5 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk5);
-        TextContext textContext4 = new TextContext(javadocContext0, 0);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws6);
-        javadocContext0.addChild(textContext4);
-        JavadocInlineTagContext javadocInlineTagContext4 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart4 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext4.addChild(javadocInlineTagStart4);
-        CommonToken inheritDocLiteral1 = new CommonToken(JavadocTokenTypes.INHERIT_DOC_LITERAL, "@inheritDoc");
-        javadocInlineTagContext4.addChild(inheritDocLiteral1);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext4.addChild(ws7);
-        CommonToken javadocInlineTagEnd4 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext4.addChild(javadocInlineTagEnd4);
-        javadocContext0.addChild(javadocInlineTagContext4);
-        CommonToken newline6 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline6);
-        CommonToken leadingAsterisk6 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk6);
-        TextContext textContext5 = new TextContext(javadocContext0, 0);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws8);
-        javadocContext0.addChild(textContext5);
-        JavadocInlineTagContext javadocInlineTagContext5 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart5 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext5.addChild(javadocInlineTagStart5);
-        CommonToken inheritDocLiteral2 = new CommonToken(JavadocTokenTypes.INHERIT_DOC_LITERAL, "@inheritDoc");
-        javadocInlineTagContext5.addChild(inheritDocLiteral2);
-        CommonToken newline7 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocInlineTagContext5.addChild(newline7);
-        CommonToken leadingAsterisk7 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocInlineTagContext5.addChild(leadingAsterisk7);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext5.addChild(ws9);
-        CommonToken javadocInlineTagEnd5 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext5.addChild(javadocInlineTagEnd5);
-        javadocContext0.addChild(javadocInlineTagContext5);
-        CommonToken newline8 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline8);
-        TextContext textContext6 = new TextContext(javadocContext0, 0);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext6.addChild(ws10);
-        javadocContext0.addChild(textContext6);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeDollarInLink()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "My$Class");
-        referenceContext0.addChild(class0);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "$$simple_$Method");
-        referenceContext0.addChild(member0);
-        ParametersContext parametersContext0 = new ParametersContext(referenceContext0, 0);
-        CommonToken leftBrace0 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext0.addChild(leftBrace0);
-        CommonToken argument0 = new CommonToken(JavadocTokenTypes.ARGUMENT, "_A78");
-        parametersContext0.addChild(argument0);
-        CommonToken comma0 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext0.addChild(comma0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext0.addChild(ws1);
-        CommonToken argument1 = new CommonToken(JavadocTokenTypes.ARGUMENT, "$8$");
-        parametersContext0.addChild(argument1);
-        CommonToken rightBrace0 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext0.addChild(rightBrace0);
-        referenceContext0.addChild(parametersContext0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeFewWhiteSpacesAsSeparator()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "       *");
-        javadocContext0.addChild(leadingAsterisk0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken paramLiteral0 = new CommonToken(JavadocTokenTypes.PARAM_LITERAL, "@param");
-        javadocTagContext0.addChild(paramLiteral0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, "   ");
-        javadocTagContext0.addChild(ws1);
-        CommonToken parameterName0 = new CommonToken(JavadocTokenTypes.PARAMETER_NAME, "initialCapacity");
-        javadocTagContext0.addChild(parameterName0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, "     ");
-        javadocTagContext0.addChild(ws2);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char2);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws3);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char9);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws4);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char17);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws5);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char19);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws6);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext0.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char22);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws7);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "B");
-        textContext0.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "B");
-        textContext0.addChild(char27);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext0.addChild(char28);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char29);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char31);
-        CommonToken char32 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char32);
-        CommonToken char33 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext0.addChild(char33);
-        descriptionContext0.addChild(textContext0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeInnerBracesInCodeTag()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken codeLiteral0 = new CommonToken(JavadocTokenTypes.CODE_LITERAL, "@code");
-        javadocInlineTagContext0.addChild(codeLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        TextContext textContext0 = new TextContext(javadocInlineTagContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "{{{}}{{}}}");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, " ");
-        textContext0.addChild(char1);
-        javadocInlineTagContext0.addChild(textContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeJavadocTagDescriptionWithInlineTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken deprecatedLiteral0 = new CommonToken(JavadocTokenTypes.DEPRECATED_LITERAL, "@deprecated");
-        javadocTagContext0.addChild(deprecatedLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char2);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        descriptionContext0.addChild(textContext0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(descriptionContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws2);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext0.addChild(package0);
-        CommonToken dot0 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext0.addChild(class0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocInlineTagContext0, 0);
-        TextContext textContext1 = new TextContext(descriptionContext1, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext1.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext1.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char9);
-        descriptionContext1.addChild(textContext1);
-        JavadocInlineTagContext javadocInlineTagContext1 = new JavadocInlineTagContext(descriptionContext1, 0);
-        CommonToken javadocInlineTagStart1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext1.addChild(javadocInlineTagStart1);
-        CommonToken codeLiteral0 = new CommonToken(JavadocTokenTypes.CODE_LITERAL, "@code");
-        javadocInlineTagContext1.addChild(codeLiteral0);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext1.addChild(ws4);
-        TextContext textContext2 = new TextContext(javadocInlineTagContext1, 0);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "<");
-        textContext2.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, ">");
-        textContext2.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext2.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "<");
-        textContext2.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "/");
-        textContext2.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, ">");
-        textContext2.addChild(char19);
-        javadocInlineTagContext1.addChild(textContext2);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext1.addChild(javadocInlineTagEnd0);
-        descriptionContext1.addChild(javadocInlineTagContext1);
-        javadocInlineTagContext0.addChild(descriptionContext1);
-        CommonToken javadocInlineTagEnd1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd1);
-        descriptionContext0.addChild(javadocInlineTagContext0);
-        TextContext textContext3 = new TextContext(descriptionContext0, 0);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws5);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext3.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char26);
-        descriptionContext0.addChild(textContext3);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeLinkInlineTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext0.addChild(package0);
-        CommonToken dot0 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext0.addChild(class0);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "valueOf");
-        referenceContext0.addChild(member0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        JavadocInlineTagContext javadocInlineTagContext1 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext1.addChild(javadocInlineTagStart1);
-        CommonToken linkLiteral1 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext1.addChild(linkLiteral1);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext1.addChild(ws1);
-        ReferenceContext referenceContext1 = new ReferenceContext(javadocInlineTagContext1, 0);
-        CommonToken package1 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext1.addChild(package1);
-        CommonToken dot1 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext1.addChild(dot1);
-        CommonToken class1 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext1.addChild(class1);
-        CommonToken hash1 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext1.addChild(hash1);
-        CommonToken member1 = new CommonToken(JavadocTokenTypes.MEMBER, "valueOf");
-        referenceContext1.addChild(member1);
-        javadocInlineTagContext1.addChild(referenceContext1);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocInlineTagContext1, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws2);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "O");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char6);
-        descriptionContext0.addChild(textContext0);
-        javadocInlineTagContext1.addChild(descriptionContext0);
-        CommonToken javadocInlineTagEnd1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext1.addChild(javadocInlineTagEnd1);
-        javadocContext0.addChild(javadocInlineTagContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeNewlineAndAsteriskInParameters()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "  *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        javadocContext0.addChild(textContext0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws1);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "ImmutableSortedMap");
-        referenceContext0.addChild(class0);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "of");
-        referenceContext0.addChild(member0);
-        ParametersContext parametersContext0 = new ParametersContext(referenceContext0, 0);
-        CommonToken leftBrace0 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext0.addChild(leftBrace0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        parametersContext0.addChild(newline0);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "  *");
-        parametersContext0.addChild(leadingAsterisk1);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        parametersContext0.addChild(newline1);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "  *");
-        parametersContext0.addChild(leadingAsterisk2);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext0.addChild(ws2);
-        CommonToken rightBrace0 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext0.addChild(rightBrace0);
-        referenceContext0.addChild(parametersContext0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeParamWithGeneric()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken paramLiteral0 = new CommonToken(JavadocTokenTypes.PARAM_LITERAL, "@param");
-        javadocTagContext0.addChild(paramLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        CommonToken parameterName0 = new CommonToken(JavadocTokenTypes.PARAMETER_NAME, "<E>");
-        javadocTagContext0.addChild(parameterName0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws1);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char1);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws2);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char9);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws3);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char13);
-        descriptionContext0.addChild(textContext0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeSeeReferenceWithFewNestedClasses()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral0 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext0.addChild(seeLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocTagContext0, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "java.lang");
-        referenceContext0.addChild(package0);
-        CommonToken dot0 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext0.addChild(class0);
-        CommonToken dot1 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot1);
-        CommonToken class1 = new CommonToken(JavadocTokenTypes.CLASS, "Nested");
-        referenceContext0.addChild(class1);
-        CommonToken dot2 = new CommonToken(JavadocTokenTypes.DOT, ".");
-        referenceContext0.addChild(dot2);
-        CommonToken class2 = new CommonToken(JavadocTokenTypes.CLASS, "AnotherNested");
-        referenceContext0.addChild(class2);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "someMethod");
-        referenceContext0.addChild(member0);
-        ParametersContext parametersContext0 = new ParametersContext(referenceContext0, 0);
-        CommonToken leftBrace0 = new CommonToken(JavadocTokenTypes.LEFT_BRACE, "(");
-        parametersContext0.addChild(leftBrace0);
-        CommonToken argument0 = new CommonToken(JavadocTokenTypes.ARGUMENT, "String");
-        parametersContext0.addChild(argument0);
-        CommonToken comma0 = new CommonToken(JavadocTokenTypes.COMMA, ",");
-        parametersContext0.addChild(comma0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        parametersContext0.addChild(ws1);
-        CommonToken argument1 = new CommonToken(JavadocTokenTypes.ARGUMENT, "int");
-        parametersContext0.addChild(argument1);
-        CommonToken rightBrace0 = new CommonToken(JavadocTokenTypes.RIGHT_BRACE, ")");
-        parametersContext0.addChild(rightBrace0);
-        referenceContext0.addChild(parametersContext0);
-        javadocTagContext0.addChild(referenceContext0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws2);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "D");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char10);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws3);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char12);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws4);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext0.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char15);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws5);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext0.addChild(char19);
-        descriptionContext0.addChild(textContext0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeSerial()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext0.addChild(serialLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char4);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext0.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char15);
-        descriptionContext0.addChild(textContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline0);
-        TextContext textContext1 = new TextContext(descriptionContext0, 0);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char17);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws2);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext1.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext1.addChild(char20);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext1.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char25);
-        descriptionContext0.addChild(textContext1);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline1);
-        TextContext textContext2 = new TextContext(descriptionContext0, 0);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char27);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext2.addChild(char28);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws4);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char29);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext2.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char31);
-        CommonToken char32 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char32);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws5);
-        CommonToken char33 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext2.addChild(char33);
-        CommonToken char34 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char34);
-        CommonToken char35 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char35);
-        CommonToken char36 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char36);
-        descriptionContext0.addChild(textContext2);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline2);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral1 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext1.addChild(serialLiteral1);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext1.addChild(ws6);
-        CommonToken literalInclude0 = new CommonToken(JavadocTokenTypes.LITERAL_INCLUDE, "include");
-        javadocTagContext1.addChild(literalInclude0);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext1, 0);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext1.addChild(newline3);
-        javadocTagContext1.addChild(descriptionContext1);
-        javadocContext0.addChild(javadocTagContext1);
-        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialLiteral2 = new CommonToken(JavadocTokenTypes.SERIAL_LITERAL, "@serial");
-        javadocTagContext2.addChild(serialLiteral2);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext2.addChild(ws7);
-        CommonToken literalExclude0 = new CommonToken(JavadocTokenTypes.LITERAL_EXCLUDE, "exclude");
-        javadocTagContext2.addChild(literalExclude0);
-        DescriptionContext descriptionContext2 = new DescriptionContext(javadocTagContext2, 0);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext2.addChild(newline4);
-        javadocTagContext2.addChild(descriptionContext2);
-        javadocContext0.addChild(javadocTagContext2);
-        JavadocTagContext javadocTagContext3 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialFieldLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_FIELD_LITERAL, "@serialField");
-        javadocTagContext3.addChild(serialFieldLiteral0);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext3.addChild(ws8);
-        CommonToken fieldName0 = new CommonToken(JavadocTokenTypes.FIELD_NAME, "myField");
-        javadocTagContext3.addChild(fieldName0);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext3.addChild(ws9);
-        CommonToken fieldType0 = new CommonToken(JavadocTokenTypes.FIELD_TYPE, "myObjectStreamField");
-        javadocTagContext3.addChild(fieldType0);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext3.addChild(ws10);
-        DescriptionContext descriptionContext3 = new DescriptionContext(javadocTagContext3, 0);
-        TextContext textContext3 = new TextContext(descriptionContext3, 0);
-        CommonToken char37 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char37);
-        CommonToken char38 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char38);
-        CommonToken char39 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char39);
-        CommonToken char40 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext3.addChild(char40);
-        CommonToken char41 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext3.addChild(char41);
-        CommonToken char42 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char42);
-        CommonToken char43 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext3.addChild(char43);
-        CommonToken char44 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char44);
-        CommonToken char45 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char45);
-        CommonToken char46 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext3.addChild(char46);
-        CommonToken char47 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext3.addChild(char47);
-        CommonToken ws11 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws11);
-        CommonToken char48 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext3.addChild(char48);
-        CommonToken char49 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext3.addChild(char49);
-        CommonToken ws12 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws12);
-        CommonToken char50 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext3.addChild(char50);
-        CommonToken char51 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext3.addChild(char51);
-        CommonToken ws13 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws13);
-        CommonToken char52 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char52);
-        CommonToken char53 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char53);
-        CommonToken char54 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext3.addChild(char54);
-        CommonToken char55 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char55);
-        CommonToken char56 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char56);
-        CommonToken char57 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext3.addChild(char57);
-        CommonToken ws14 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws14);
-        CommonToken char58 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext3.addChild(char58);
-        CommonToken char59 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char59);
-        CommonToken char60 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char60);
-        CommonToken char61 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext3.addChild(char61);
-        CommonToken char62 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char62);
-        descriptionContext3.addChild(textContext3);
-        CommonToken newline5 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext3.addChild(newline5);
-        javadocTagContext3.addChild(descriptionContext3);
-        javadocContext0.addChild(javadocTagContext3);
-        JavadocTagContext javadocTagContext4 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken serialDataLiteral0 = new CommonToken(JavadocTokenTypes.SERIAL_DATA_LITERAL, "@serialData");
-        javadocTagContext4.addChild(serialDataLiteral0);
-        CommonToken ws15 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext4.addChild(ws15);
-        DescriptionContext descriptionContext4 = new DescriptionContext(javadocTagContext4, 0);
-        TextContext textContext4 = new TextContext(descriptionContext4, 0);
-        CommonToken char63 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext4.addChild(char63);
-        CommonToken char64 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext4.addChild(char64);
-        CommonToken char65 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char65);
-        CommonToken ws16 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws16);
-        CommonToken char66 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char66);
-        CommonToken char67 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char67);
-        CommonToken char68 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char68);
-        CommonToken char69 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char69);
-        CommonToken char70 = new CommonToken(JavadocTokenTypes.CHAR, "-");
-        textContext4.addChild(char70);
-        CommonToken char71 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char71);
-        CommonToken char72 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char72);
-        CommonToken char73 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext4.addChild(char73);
-        CommonToken char74 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char74);
-        CommonToken char75 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char75);
-        CommonToken char76 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char76);
-        CommonToken char77 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext4.addChild(char77);
-        CommonToken char78 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char78);
-        CommonToken char79 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char79);
-        CommonToken char80 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char80);
-        CommonToken char81 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char81);
-        CommonToken ws17 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws17);
-        CommonToken char82 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char82);
-        CommonToken char83 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char83);
-        CommonToken char84 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char84);
-        CommonToken char85 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext4.addChild(char85);
-        CommonToken char86 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext4.addChild(char86);
-        CommonToken char87 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char87);
-        CommonToken char88 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char88);
-        CommonToken char89 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char89);
-        CommonToken char90 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext4.addChild(char90);
-        descriptionContext4.addChild(textContext4);
-        javadocTagContext4.addChild(descriptionContext4);
-        javadocContext0.addChild(javadocTagContext4);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeSince()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "*");
-        javadocContext0.addChild(leadingAsterisk0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken sinceLiteral0 = new CommonToken(JavadocTokenTypes.SINCE_LITERAL, "@since");
-        javadocTagContext0.addChild(sinceLiteral0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws1);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "1");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "5");
-        textContext0.addChild(char2);
-        descriptionContext0.addChild(textContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline0);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk1);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws2);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken sinceLiteral1 = new CommonToken(JavadocTokenTypes.SINCE_LITERAL, "@since");
-        javadocTagContext1.addChild(sinceLiteral1);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext1.addChild(ws3);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext1, 0);
-        TextContext textContext1 = new TextContext(descriptionContext1, 0);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "R");
-        textContext1.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext1.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char9);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws4);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "3");
-        textContext1.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext1.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "4");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext1.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "5");
-        textContext1.addChild(char14);
-        descriptionContext1.addChild(textContext1);
-        javadocTagContext1.addChild(descriptionContext1);
-        javadocContext0.addChild(javadocTagContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeTextBeforeJavadocTags()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext0.addChild(char1);
-        javadocContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk1);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws2);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char2);
-        javadocContext0.addChild(textContext1);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline2);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk2);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws3);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken seeLiteral0 = new CommonToken(JavadocTokenTypes.SEE_LITERAL, "@see");
-        javadocTagContext0.addChild(seeLiteral0);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws4);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocTagContext0, 0);
-        CommonToken class0 = new CommonToken(JavadocTokenTypes.CLASS, "Integer");
-        referenceContext0.addChild(class0);
-        javadocTagContext0.addChild(referenceContext0);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws5);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext2 = new TextContext(descriptionContext0, 0);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext2.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char5);
-        descriptionContext0.addChild(textContext2);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline3);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken leadingAsterisk3 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk3);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws6);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext1.addChild(authorLiteral0);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext1.addChild(ws7);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext1, 0);
-        TextContext textContext3 = new TextContext(descriptionContext1, 0);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext3.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext3.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext3.addChild(char11);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws8);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext3.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext3.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char16);
-        descriptionContext1.addChild(textContext3);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext1.addChild(newline4);
-        javadocTagContext1.addChild(descriptionContext1);
-        javadocContext0.addChild(javadocTagContext1);
-        CommonToken leadingAsterisk4 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, " *");
-        javadocContext0.addChild(leadingAsterisk4);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws9);
-        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken authorLiteral1 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, "@author");
-        javadocTagContext2.addChild(authorLiteral1);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext2.addChild(ws10);
-        DescriptionContext descriptionContext2 = new DescriptionContext(javadocTagContext2, 0);
-        TextContext textContext4 = new TextContext(descriptionContext2, 0);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "J");
-        textContext4.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext4.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char20);
-        CommonToken ws11 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws11);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext4.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char23);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext4.addChild(char24);
-        descriptionContext2.addChild(textContext4);
-        CommonToken newline5 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext2.addChild(newline5);
-        TextContext textContext5 = new TextContext(descriptionContext2, 0);
-        CommonToken ws12 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext5.addChild(ws12);
-        descriptionContext2.addChild(textContext5);
-        javadocTagContext2.addChild(descriptionContext2);
-        javadocContext0.addChild(javadocTagContext2);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeTwoLinkTagsInRow()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken hash0 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext0.addChild(hash0);
-        CommonToken member0 = new CommonToken(JavadocTokenTypes.MEMBER, "WHITESPACE");
-        referenceContext0.addChild(member0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocInlineTagContext0, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "W");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "H");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "I");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "E");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "S");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "P");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "A");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "C");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "E");
-        textContext0.addChild(char9);
-        descriptionContext0.addChild(textContext0);
-        javadocInlineTagContext0.addChild(descriptionContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        JavadocInlineTagContext javadocInlineTagContext1 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext1.addChild(javadocInlineTagStart1);
-        CommonToken linkLiteral1 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext1.addChild(linkLiteral1);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext1.addChild(ws2);
-        ReferenceContext referenceContext1 = new ReferenceContext(javadocInlineTagContext1, 0);
-        CommonToken hash1 = new CommonToken(JavadocTokenTypes.HASH, "#");
-        referenceContext1.addChild(hash1);
-        CommonToken member1 = new CommonToken(JavadocTokenTypes.MEMBER, "trimFrom");
-        referenceContext1.addChild(member1);
-        javadocInlineTagContext1.addChild(referenceContext1);
-        DescriptionContext descriptionContext1 = new DescriptionContext(javadocInlineTagContext1, 0);
-        TextContext textContext1 = new TextContext(descriptionContext1, 0);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "F");
-        textContext1.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char17);
-        descriptionContext1.addChild(textContext1);
-        javadocInlineTagContext1.addChild(descriptionContext1);
-        CommonToken javadocInlineTagEnd1 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext1.addChild(javadocInlineTagEnd1);
-        javadocContext0.addChild(javadocInlineTagContext1);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-    
-    public static ParseTree treeCustomTagWithDot()
-    {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName0 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@ejb:bean");
-        javadocTagContext0.addChild(customName0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext0.addChild(newline0);
-        javadocContext0.addChild(javadocTagContext0);
-        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName1 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@hibernate.property");
-        javadocTagContext1.addChild(customName1);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext1.addChild(ws0);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext1, 0);
-        TextContext textContext0 = new TextContext(descriptionContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext0.addChild(char9);
-        descriptionContext0.addChild(textContext0);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline1);
-        javadocTagContext1.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext1);
-        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName2 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@weblogic.cache-ref");
-        javadocTagContext2.addChild(customName2);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocTagContext2.addChild(newline2);
-        javadocContext0.addChild(javadocTagContext2);
-        JavadocTagContext javadocTagContext3 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken customName3 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@my_tag");
-        javadocTagContext3.addChild(customName3);
-        javadocContext0.addChild(javadocTagContext3);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeLinkToPackage() {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken linkLiteral0 = new CommonToken(JavadocTokenTypes.LINK_LITERAL, "@link");
-        javadocInlineTagContext0.addChild(linkLiteral0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws0);
-        ReferenceContext referenceContext0 = new ReferenceContext(javadocInlineTagContext0, 0);
-        CommonToken package0 = new CommonToken(JavadocTokenTypes.PACKAGE, "_com._1organizationname.appname");
-        referenceContext0.addChild(package0);
-        javadocInlineTagContext0.addChild(referenceContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-                javadocContext0.addChild(newline0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-
-    public static ParseTree treeLeadingAsterisksExtended() {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, "    ");
-        textContext0.addChild(ws0);
-        javadocContext0.addChild(textContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "*");
-        javadocContext0.addChild(leadingAsterisk0);
-        TextContext textContext1 = new TextContext(javadocContext0, 0);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws1);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "C");
-        textContext1.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext1.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char2);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "k");
-        textContext1.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char5);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws2);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext1.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char9);
-        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws3);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char10);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char13);
-        CommonToken char14 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char14);
-        CommonToken char15 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char15);
-        CommonToken char16 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char16);
-        CommonToken char17 = new CommonToken(JavadocTokenTypes.CHAR, "C");
-        textContext1.addChild(char17);
-        CommonToken char18 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char18);
-        CommonToken char19 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char19);
-        CommonToken char20 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char20);
-        CommonToken char21 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char21);
-        CommonToken char22 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char22);
-        CommonToken char23 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char23);
-        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws4);
-        CommonToken char24 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char24);
-        CommonToken char25 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char25);
-        CommonToken char26 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char26);
-        CommonToken char27 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char27);
-        CommonToken char28 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char28);
-        CommonToken char29 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext1.addChild(char29);
-        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws5);
-        CommonToken char30 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext1.addChild(char30);
-        CommonToken char31 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char31);
-        CommonToken char32 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char32);
-        CommonToken char33 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext1.addChild(char33);
-        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws6);
-        CommonToken char34 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext1.addChild(char34);
-        CommonToken char35 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext1.addChild(char35);
-        CommonToken char36 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext1.addChild(char36);
-        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws7);
-        CommonToken char37 = new CommonToken(JavadocTokenTypes.CHAR, "j");
-        textContext1.addChild(char37);
-        CommonToken char38 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char38);
-        CommonToken char39 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext1.addChild(char39);
-        CommonToken char40 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char40);
-        CommonToken char41 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext1.addChild(char41);
-        CommonToken char42 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char42);
-        CommonToken char43 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char43);
-        CommonToken ws8 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws8);
-        CommonToken char44 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext1.addChild(char44);
-        CommonToken char45 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext1.addChild(char45);
-        CommonToken char46 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char46);
-        CommonToken char47 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext1.addChild(char47);
-        CommonToken char48 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char48);
-        CommonToken char49 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char49);
-        CommonToken char50 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char50);
-        CommonToken ws9 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext1.addChild(ws9);
-        CommonToken char51 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char51);
-        CommonToken char52 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext1.addChild(char52);
-        CommonToken char53 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char53);
-        CommonToken char54 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext1.addChild(char54);
-        CommonToken char55 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext1.addChild(char55);
-        CommonToken char56 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char56);
-        CommonToken char57 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext1.addChild(char57);
-        CommonToken char58 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext1.addChild(char58);
-        CommonToken char59 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext1.addChild(char59);
-        CommonToken char60 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext1.addChild(char60);
-        CommonToken char61 = new CommonToken(JavadocTokenTypes.CHAR, ".");
-        textContext1.addChild(char61);
-        javadocContext0.addChild(textContext1);
-        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline1);
-        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "    *");
-        javadocContext0.addChild(leadingAsterisk1);
-        TextContext textContext2 = new TextContext(javadocContext0, 0);
-        CommonToken char62 = new CommonToken(JavadocTokenTypes.CHAR, "&");
-        textContext2.addChild(char62);
-        CommonToken char63 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext2.addChild(char63);
-        CommonToken char64 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char64);
-        CommonToken char65 = new CommonToken(JavadocTokenTypes.CHAR, ";");
-        textContext2.addChild(char65);
-        CommonToken char66 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext2.addChild(char66);
-        CommonToken char67 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char67);
-        CommonToken char68 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext2.addChild(char68);
-        CommonToken char69 = new CommonToken(JavadocTokenTypes.CHAR, "p");
-        textContext2.addChild(char69);
-        CommonToken char70 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char70);
-        CommonToken char71 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char71);
-        CommonToken char72 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char72);
-        CommonToken char73 = new CommonToken(JavadocTokenTypes.CHAR, "y");
-        textContext2.addChild(char73);
-        CommonToken ws10 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws10);
-        CommonToken char74 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char74);
-        CommonToken char75 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char75);
-        CommonToken char76 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext2.addChild(char76);
-        CommonToken char77 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char77);
-        CommonToken char78 = new CommonToken(JavadocTokenTypes.CHAR, "=");
-        textContext2.addChild(char78);
-        CommonToken char79 = new CommonToken(JavadocTokenTypes.CHAR, "\"");
-        textContext2.addChild(char79);
-        CommonToken char80 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext2.addChild(char80);
-        CommonToken char81 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext2.addChild(char81);
-        CommonToken char82 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char82);
-        CommonToken char83 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext2.addChild(char83);
-        CommonToken char84 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char84);
-        CommonToken char85 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char85);
-        CommonToken char86 = new CommonToken(JavadocTokenTypes.CHAR, "P");
-        textContext2.addChild(char86);
-        CommonToken char87 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char87);
-        CommonToken char88 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char88);
-        CommonToken char89 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char89);
-        CommonToken char90 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char90);
-        CommonToken char91 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext2.addChild(char91);
-        CommonToken char92 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext2.addChild(char92);
-        CommonToken char93 = new CommonToken(JavadocTokenTypes.CHAR, "\"");
-        textContext2.addChild(char93);
-        CommonToken ws11 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws11);
-        CommonToken char94 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext2.addChild(char94);
-        CommonToken char95 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext2.addChild(char95);
-        CommonToken char96 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext2.addChild(char96);
-        CommonToken char97 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext2.addChild(char97);
-        CommonToken char98 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext2.addChild(char98);
-        CommonToken char99 = new CommonToken(JavadocTokenTypes.CHAR, "=");
-        textContext2.addChild(char99);
-        CommonToken char100 = new CommonToken(JavadocTokenTypes.CHAR, "\"");
-        textContext2.addChild(char100);
-        CommonToken char101 = new CommonToken(JavadocTokenTypes.CHAR, "^");
-        textContext2.addChild(char101);
-        CommonToken ws12 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws12);
-        CommonToken char102 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext2.addChild(char102);
-        CommonToken char103 = new CommonToken(JavadocTokenTypes.CHAR, "\\");
-        textContext2.addChild(char103);
-        CommonToken char104 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext2.addChild(char104);
-        CommonToken ws13 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws13);
-        CommonToken char105 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext2.addChild(char105);
-        CommonToken char106 = new CommonToken(JavadocTokenTypes.CHAR, "[");
-        textContext2.addChild(char106);
-        CommonToken char107 = new CommonToken(JavadocTokenTypes.CHAR, "^");
-        textContext2.addChild(char107);
-        CommonToken ws14 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext2.addChild(ws14);
-        CommonToken char108 = new CommonToken(JavadocTokenTypes.CHAR, "]");
-        textContext2.addChild(char108);
-        CommonToken char109 = new CommonToken(JavadocTokenTypes.CHAR, "+");
-        textContext2.addChild(char109);
-        CommonToken char110 = new CommonToken(JavadocTokenTypes.CHAR, "$");
-        textContext2.addChild(char110);
-        CommonToken char111 = new CommonToken(JavadocTokenTypes.CHAR, "\"");
-        textContext2.addChild(char111);
-        CommonToken char112 = new CommonToken(JavadocTokenTypes.CHAR, "/");
-        textContext2.addChild(char112);
-        CommonToken char113 = new CommonToken(JavadocTokenTypes.CHAR, "&");
-        textContext2.addChild(char113);
-        CommonToken char114 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext2.addChild(char114);
-        CommonToken char115 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext2.addChild(char115);
-        CommonToken char116 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext2.addChild(char116);
-        javadocContext0.addChild(textContext2);
-        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline2);
-        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "\\t*");
-        javadocContext0.addChild(leadingAsterisk2);
-        TextContext textContext3 = new TextContext(javadocContext0, 0);
-        CommonToken ws15 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws15);
-        CommonToken char117 = new CommonToken(JavadocTokenTypes.CHAR, "T");
-        textContext3.addChild(char117);
-        CommonToken char118 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext3.addChild(char118);
-        CommonToken char119 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char119);
-        CommonToken char120 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char120);
-        CommonToken ws16 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws16);
-        CommonToken char121 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext3.addChild(char121);
-        CommonToken ws17 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws17);
-        CommonToken char122 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char122);
-        CommonToken char123 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext3.addChild(char123);
-        CommonToken ws18 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws18);
-        CommonToken char124 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext3.addChild(char124);
-        CommonToken char125 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext3.addChild(char125);
-        CommonToken char126 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext3.addChild(char126);
-        CommonToken ws19 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws19);
-        CommonToken char127 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char127);
-        CommonToken ws20 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws20);
-        CommonToken char128 = new CommonToken(JavadocTokenTypes.CHAR, "l");
-        textContext3.addChild(char128);
-        CommonToken char129 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext3.addChild(char129);
-        CommonToken char130 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext3.addChild(char130);
-        CommonToken char131 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext3.addChild(char131);
-        CommonToken char132 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext3.addChild(char132);
-        CommonToken char133 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext3.addChild(char133);
-        CommonToken char134 = new CommonToken(JavadocTokenTypes.CHAR, "g");
-        textContext3.addChild(char134);
-        CommonToken ws21 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext3.addChild(ws21);
-        CommonToken char135 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext3.addChild(char135);
-        javadocContext0.addChild(textContext3);
-        CommonToken newline3 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline3);
-        CommonToken leadingAsterisk3 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, "*");
-        javadocContext0.addChild(leadingAsterisk3);
-        CommonToken ws22 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocContext0.addChild(ws22);
-        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);
-        CommonToken returnLiteral0 = new CommonToken(JavadocTokenTypes.RETURN_LITERAL, "@return");
-        javadocTagContext0.addChild(returnLiteral0);
-        CommonToken ws23 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocTagContext0.addChild(ws23);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);
-        TextContext textContext4 = new TextContext(descriptionContext0, 0);
-        CommonToken char136 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char136);
-        CommonToken char137 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char137);
-        CommonToken char138 = new CommonToken(JavadocTokenTypes.CHAR, "u");
-        textContext4.addChild(char138);
-        CommonToken char139 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char139);
-        CommonToken ws24 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws24);
-        CommonToken char140 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char140);
-        CommonToken char141 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext4.addChild(char141);
-        CommonToken ws25 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws25);
-        CommonToken char142 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char142);
-        CommonToken char143 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char143);
-        CommonToken char144 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext4.addChild(char144);
-        CommonToken char145 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext4.addChild(char145);
-        CommonToken char146 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char146);
-        CommonToken char147 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char147);
-        CommonToken char148 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char148);
-        CommonToken char149 = new CommonToken(JavadocTokenTypes.CHAR, "C");
-        textContext4.addChild(char149);
-        CommonToken char150 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char150);
-        CommonToken char151 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char151);
-        CommonToken char152 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char152);
-        CommonToken char153 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char153);
-        CommonToken char154 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char154);
-        CommonToken char155 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char155);
-        CommonToken ws26 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws26);
-        CommonToken char156 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext4.addChild(char156);
-        CommonToken char157 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char157);
-        CommonToken char158 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char158);
-        CommonToken char159 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char159);
-        CommonToken char160 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char160);
-        CommonToken char161 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext4.addChild(char161);
-        CommonToken ws27 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws27);
-        CommonToken char162 = new CommonToken(JavadocTokenTypes.CHAR, "w");
-        textContext4.addChild(char162);
-        CommonToken char163 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char163);
-        CommonToken char164 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char164);
-        CommonToken char165 = new CommonToken(JavadocTokenTypes.CHAR, "h");
-        textContext4.addChild(char165);
-        CommonToken ws28 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws28);
-        CommonToken char166 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext4.addChild(char166);
-        CommonToken char167 = new CommonToken(JavadocTokenTypes.CHAR, "*");
-        textContext4.addChild(char167);
-        CommonToken char168 = new CommonToken(JavadocTokenTypes.CHAR, "'");
-        textContext4.addChild(char168);
-        CommonToken ws29 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws29);
-        CommonToken char169 = new CommonToken(JavadocTokenTypes.CHAR, "j");
-        textContext4.addChild(char169);
-        CommonToken char170 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char170);
-        CommonToken char171 = new CommonToken(JavadocTokenTypes.CHAR, "v");
-        textContext4.addChild(char171);
-        CommonToken char172 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext4.addChild(char172);
-        CommonToken char173 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char173);
-        CommonToken char174 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char174);
-        CommonToken char175 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char175);
-        CommonToken ws30 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws30);
-        CommonToken char176 = new CommonToken(JavadocTokenTypes.CHAR, "c");
-        textContext4.addChild(char176);
-        CommonToken char177 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext4.addChild(char177);
-        CommonToken char178 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext4.addChild(char178);
-        CommonToken char179 = new CommonToken(JavadocTokenTypes.CHAR, "m");
-        textContext4.addChild(char179);
-        CommonToken char180 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char180);
-        CommonToken char181 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char181);
-        CommonToken char182 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char182);
-        CommonToken ws31 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext4.addChild(ws31);
-        CommonToken char183 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char183);
-        CommonToken char184 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext4.addChild(char184);
-        CommonToken char185 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char185);
-        CommonToken char186 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext4.addChild(char186);
-        CommonToken char187 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext4.addChild(char187);
-        CommonToken char188 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char188);
-        CommonToken char189 = new CommonToken(JavadocTokenTypes.CHAR, "f");
-        textContext4.addChild(char189);
-        CommonToken char190 = new CommonToken(JavadocTokenTypes.CHAR, "i");
-        textContext4.addChild(char190);
-        CommonToken char191 = new CommonToken(JavadocTokenTypes.CHAR, "e");
-        textContext4.addChild(char191);
-        CommonToken char192 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext4.addChild(char192);
-        descriptionContext0.addChild(textContext4);
-        CommonToken newline4 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        descriptionContext0.addChild(newline4);
-        javadocTagContext0.addChild(descriptionContext0);
-        javadocContext0.addChild(javadocTagContext0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-    public static ParseTree treeInlineCustomJavadocTag() {
-        JavadocContext javadocContext0 = new JavadocContext(null, 0);
-        TextContext textContext0 = new TextContext(javadocContext0, 0);
-        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, "N");
-        textContext0.addChild(char0);
-        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, "o");
-        textContext0.addChild(char1);
-        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char2);
-        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws0);
-        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, "s");
-        textContext0.addChild(char3);
-        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, "t");
-        textContext0.addChild(char4);
-        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char5);
-        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, "n");
-        textContext0.addChild(char6);
-        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char7);
-        CommonToken char8 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext0.addChild(char8);
-        CommonToken char9 = new CommonToken(JavadocTokenTypes.CHAR, "r");
-        textContext0.addChild(char9);
-        CommonToken char10 = new CommonToken(JavadocTokenTypes.CHAR, "d");
-        textContext0.addChild(char10);
-        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, " ");
-        textContext0.addChild(ws1);
-        javadocContext0.addChild(textContext0);
-        JavadocInlineTagContext javadocInlineTagContext0 = new JavadocInlineTagContext(javadocContext0, 0);
-        CommonToken javadocInlineTagStart0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_START, "{");
-        javadocInlineTagContext0.addChild(javadocInlineTagStart0);
-        CommonToken customName0 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, "@preformat");
-        javadocInlineTagContext0.addChild(customName0);
-        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, " ");
-        javadocInlineTagContext0.addChild(ws2);
-        DescriptionContext descriptionContext0 = new DescriptionContext(javadocInlineTagContext0, 0);
-        TextContext textContext1 = new TextContext(descriptionContext0, 0);
-        CommonToken char11 = new CommonToken(JavadocTokenTypes.CHAR, "a");
-        textContext1.addChild(char11);
-        CommonToken char12 = new CommonToken(JavadocTokenTypes.CHAR, "<");
-        textContext1.addChild(char12);
-        CommonToken char13 = new CommonToken(JavadocTokenTypes.CHAR, "b");
-        textContext1.addChild(char13);
-        descriptionContext0.addChild(textContext1);
-        javadocInlineTagContext0.addChild(descriptionContext0);
-        CommonToken javadocInlineTagEnd0 = new CommonToken(JavadocTokenTypes.JAVADOC_INLINE_TAG_END, "}");
-        javadocInlineTagContext0.addChild(javadocInlineTagEnd0);
-        javadocContext0.addChild(javadocInlineTagContext0);
-        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);
-        javadocContext0.addChild(newline0);
-        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, "<EOF>");
-        javadocContext0.addChild(eof0);
-        return javadocContext0;
-    }
-}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_complete.xml b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/InputImportControlLoaderComplete.xml
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_complete.xml
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/InputImportControlLoaderComplete.xml
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_WithNewElement.xml b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/InputImportControlLoaderWithNewElement.xml
similarity index 79%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_WithNewElement.xml
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/InputImportControlLoaderWithNewElement.xml
index d024a08f86..76b80bfa17 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_WithNewElement.xml
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/InputImportControlLoaderWithNewElement.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0"?>
 <!DOCTYPE import-control PUBLIC
     "-//Puppy Crawl//DTD Import Control 1.UT//EN"
-    "src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_MODIFIED_FOR_UT.dtd">
+        "src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/import-control_MODIFIED_FOR_UT.dtd">
 
 <import-control pkg="com">
   <allow class="some.class"/>
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_MODIFIED_FOR_UT.dtd b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/import-control_MODIFIED_FOR_UT.dtd
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/import-control_MODIFIED_FOR_UT.dtd
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/imports/importcontrolloader/import-control_MODIFIED_FOR_UT.dtd
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisks.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisks.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisks.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisks.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisksExtended.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisksExtended.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisksExtended.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/InputLeadingAsterisksExtended.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksAst.txt
new file mode 100755
index 0000000000..7173dee950
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksAst.txt
@@ -0,0 +1,8 @@
+JAVADOC -> JAVADOC [0:0]
+|--NEWLINE -> \r\n [0:0]
+|--LEADING_ASTERISK ->   * [1:0]
+|--TEXT ->  Leading asterisk [1:3]
+|--NEWLINE -> \r\n [1:20]
+|--LEADING_ASTERISK ->     * [2:0]
+|--TEXT ->  Another one [2:5]
+`--EOF -> <EOF> [2:17]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksExtendedAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksExtendedAst.txt
new file mode 100755
index 0000000000..bb488ac513
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/expectedLeadingAsterisksExtendedAst.txt
@@ -0,0 +1,21 @@
+JAVADOC -> JAVADOC [0:0]
+|--TEXT ->      [0:0]
+|--NEWLINE -> \r\n [0:4]
+|--LEADING_ASTERISK -> * [1:0]
+|--TEXT ->  Checks that commentContent starts with '*' javadoc comment identifier. [1:1]
+|--NEWLINE -> \r\n [1:72]
+|--LEADING_ASTERISK ->     * [2:0]
+|--TEXT -> &lt;property name="ignorePattern" value="^ *\* *[^ ]+$"/&gt* [2:5]
+|--NEWLINE -> \r\n [2:65]
+|--LEADING_ASTERISK -> \t* [3:0]
+|--TEXT ->  This * is not a leading * [3:2]
+|--NEWLINE -> \r\n [3:28]
+|--LEADING_ASTERISK -> * [4:0]
+|--WS ->   [4:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [4:2]
+|   |--RETURN_LITERAL -> @return [4:2]
+|   |--WS ->   [4:9]
+|   `--DESCRIPTION -> DESCRIPTION [4:10]
+|       |--TEXT -> true if commentContent starts with '*' javadoc comment identifier [4:10]
+|       `--NEWLINE -> \r\n [4:75]
+`--EOF -> <EOF> [5:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputAttributeValueWithoutQuotes.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputAttributeValueWithoutQuotes.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputAttributeValueWithoutQuotes.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputAttributeValueWithoutQuotes.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputClosedOtherTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputClosedOtherTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputClosedOtherTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputClosedOtherTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputComments.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputComments.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputComments.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputComments.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputHtmlTagsInParagraph.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputHtmlTagsInParagraph.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputHtmlTagsInParagraph.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputHtmlTagsInParagraph.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputListWithUnclosedItemInUnclosedParagraph.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputListWithUnclosedItemInUnclosedParagraph.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputListWithUnclosedItemInUnclosedParagraph.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputListWithUnclosedItemInUnclosedParagraph.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputMixedCaseOfHtmlTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputMixedCaseOfHtmlTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputMixedCaseOfHtmlTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputMixedCaseOfHtmlTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNegativeNumberInAttribute.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNegativeNumberInAttribute.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNegativeNumberInAttribute.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNegativeNumberInAttribute.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputOneSimpleHtmlTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputOneSimpleHtmlTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputOneSimpleHtmlTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputOneSimpleHtmlTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedAndClosedParagraphs.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedAndClosedParagraphs.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedAndClosedParagraphs.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedAndClosedParagraphs.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedParagraphFollowedByJavadocTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedParagraphFollowedByJavadocTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedParagraphFollowedByJavadocTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputUnclosedParagraphFollowedByJavadocTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedAttributeValueWithoutQuotesAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedAttributeValueWithoutQuotesAst.txt
new file mode 100755
index 0000000000..bc40f18377
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedAttributeValueWithoutQuotesAst.txt
@@ -0,0 +1,21 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--HTML_TAG -> HTML_TAG [0:0]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [0:0]
+|       |   |--OPEN -> < [0:0]
+|       |   |--HTML_TAG_NAME -> a [0:1]
+|       |   |--WS ->   [0:2]
+|       |   |--ATTRIBUTE -> ATTRIBUTE [0:3]
+|       |   |   |--HTML_TAG_NAME -> href [0:3]
+|       |   |   |--EQUALS -> = [0:7]
+|       |   |   `--ATTR_VALUE -> http://www.ietf.org/rfc/rfc3758.txt [0:8]
+|       |   `--CLOSE -> > [0:44]
+|       |--TEXT -> RFC 3758 [0:45]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [0:53]
+|           |--OPEN -> < [0:53]
+|           |--SLASH -> / [0:54]
+|           |--HTML_TAG_NAME -> a [0:55]
+|           `--CLOSE -> > [0:56]
+|--TEXT -> . [0:57]
+|--NEWLINE -> \r\n [0:58]
+`--EOF -> <EOF> [1:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedClosedOtherTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedClosedOtherTagAst.txt
new file mode 100755
index 0000000000..f693fd9e81
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedClosedOtherTagAst.txt
@@ -0,0 +1,15 @@
+JAVADOC -> JAVADOC [0:0]
+|--TEXT ->   [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:1]
+|   `--DD_TAG_OPEN -> DD_TAG_OPEN [0:1]
+|       |--OPEN -> < [0:1]
+|       |--DD_HTML_TAG_NAME -> dd [0:2]
+|       `--CLOSE -> > [0:4]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:5]
+|   `--DT_TAG_CLOSE -> DT_TAG_CLOSE [0:5]
+|       |--OPEN -> < [0:5]
+|       |--SLASH -> / [0:6]
+|       |--DT_HTML_TAG_NAME -> dt [0:7]
+|       `--CLOSE -> > [0:9]
+|--NEWLINE -> \r\n [0:10]
+`--EOF -> <EOF> [1:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedCommentsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedCommentsAst.txt
new file mode 100755
index 0000000000..a9445f0cc5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedCommentsAst.txt
@@ -0,0 +1,24 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK ->  * [0:0]
+|--TEXT ->  Use  [0:2]
+|--HTML_COMMENT -> HTML_COMMENT [0:7]
+|   |--HTML_COMMENT_START -> <!-- [0:7]
+|   |--TEXT ->  standard [0:11]
+|   |--NEWLINE -> \r\n [0:20]
+|   |--LEADING_ASTERISK ->  * [1:0]
+|   |--TEXT ->  java type  [1:2]
+|   `--HTML_COMMENT_END -> --> [1:13]
+|--TEXT ->   [1:16]
+|--HTML_ELEMENT -> HTML_ELEMENT [1:17]
+|   `--HTML_TAG -> HTML_TAG [1:17]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:17]
+|       |   |--OPEN -> < [1:17]
+|       |   |--HTML_TAG_NAME -> b [1:18]
+|       |   `--CLOSE -> > [1:19]
+|       |--TEXT -> String [1:20]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [1:26]
+|           |--OPEN -> < [1:26]
+|           |--SLASH -> / [1:27]
+|           |--HTML_TAG_NAME -> b [1:28]
+|           `--CLOSE -> > [1:29]
+`--EOF -> <EOF> [1:30]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedHtmlTagsInParagraphAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedHtmlTagsInParagraphAst.txt
new file mode 100755
index 0000000000..df65ff2894
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedHtmlTagsInParagraphAst.txt
@@ -0,0 +1,51 @@
+JAVADOC -> JAVADOC [0:0]
+|--NEWLINE -> \r\n [0:0]
+|--LEADING_ASTERISK ->  * [1:0]
+|--TEXT ->   [1:2]
+|--HTML_ELEMENT -> HTML_ELEMENT [1:3]
+|   `--PARAGRAPH -> PARAGRAPH [1:3]
+|       |--P_TAG_OPEN -> P_TAG_OPEN [1:3]
+|       |   |--OPEN -> < [1:3]
+|       |   |--P_HTML_TAG_NAME -> p [1:4]
+|       |   `--CLOSE -> > [1:5]
+|       |--NEWLINE -> \r\n [1:6]
+|       |--LEADING_ASTERISK ->  * [2:0]
+|       |--TEXT ->   [2:2]
+|       |--HTML_TAG -> HTML_TAG [2:3]
+|       |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [2:3]
+|       |   |   |--OPEN -> < [2:3]
+|       |   |   |--HTML_TAG_NAME -> b [2:4]
+|       |   |   `--CLOSE -> > [2:5]
+|       |   |--TEXT -> Description [2:6]
+|       |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [2:17]
+|       |       |--OPEN -> < [2:17]
+|       |       |--SLASH -> / [2:18]
+|       |       |--HTML_TAG_NAME -> b [2:19]
+|       |       `--CLOSE -> > [2:20]
+|       |--TEXT ->   [2:21]
+|       |--HTML_TAG -> HTML_TAG [2:22]
+|       |   |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [2:22]
+|       |   |   |--OPEN -> < [2:22]
+|       |   |   |--HTML_TAG_NAME -> i [2:23]
+|       |   |   `--CLOSE -> > [2:24]
+|       |   |--TEXT -> of [2:25]
+|       |   `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [2:27]
+|       |       |--OPEN -> < [2:27]
+|       |       |--SLASH -> / [2:28]
+|       |       |--HTML_TAG_NAME -> i [2:29]
+|       |       `--CLOSE -> > [2:30]
+|       |--TEXT ->  my class. [2:31]
+|       |--NEWLINE -> \r\n [2:41]
+|       |--LEADING_ASTERISK ->  * [3:0]
+|       |--TEXT ->   [3:2]
+|       `--P_TAG_CLOSE -> P_TAG_CLOSE [3:3]
+|           |--OPEN -> < [3:3]
+|           |--SLASH -> / [3:4]
+|           |--P_HTML_TAG_NAME -> p [3:5]
+|           `--CLOSE -> > [3:6]
+|--NEWLINE -> \r\n [3:7]
+|--LEADING_ASTERISK ->  * [4:0]
+|--TEXT ->  Another line of text [4:2]
+|--NEWLINE -> \r\n [4:23]
+|--TEXT ->   [5:0]
+`--EOF -> <EOF> [5:1]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedListWithUnclosedItemInUnclosedParagraphAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedListWithUnclosedItemInUnclosedParagraphAst.txt
new file mode 100755
index 0000000000..ac9670ad2b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedListWithUnclosedItemInUnclosedParagraphAst.txt
@@ -0,0 +1,42 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--P_TAG_OPEN -> P_TAG_OPEN [0:0]
+|       |--OPEN -> < [0:0]
+|       |--P_HTML_TAG_NAME -> p [0:1]
+|       `--CLOSE -> > [0:2]
+|--NEWLINE -> \r\n [0:3]
+|--HTML_ELEMENT -> HTML_ELEMENT [1:0]
+|   `--HTML_TAG -> HTML_TAG [1:0]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [1:0]
+|       |   |--OPEN -> < [1:0]
+|       |   |--HTML_TAG_NAME -> ul [1:1]
+|       |   `--CLOSE -> > [1:3]
+|       |--NEWLINE -> \r\n [1:4]
+|       |--TEXT -> \t [2:0]
+|       |--HTML_ELEMENT -> HTML_ELEMENT [2:1]
+|       |   `--LI_TAG_OPEN -> LI_TAG_OPEN [2:1]
+|       |       |--OPEN -> < [2:1]
+|       |       |--LI_HTML_TAG_NAME -> li [2:2]
+|       |       `--CLOSE -> > [2:4]
+|       |--TEXT -> item 1 [2:5]
+|       |--NEWLINE -> \r\n [2:11]
+|       |--TEXT -> \t [3:0]
+|       |--HTML_ELEMENT -> HTML_ELEMENT [3:1]
+|       |   `--LI -> LI [3:1]
+|       |       |--LI_TAG_OPEN -> LI_TAG_OPEN [3:1]
+|       |       |   |--OPEN -> < [3:1]
+|       |       |   |--LI_HTML_TAG_NAME -> li [3:2]
+|       |       |   `--CLOSE -> > [3:4]
+|       |       |--TEXT -> item 2 [3:5]
+|       |       `--LI_TAG_CLOSE -> LI_TAG_CLOSE [3:11]
+|       |           |--OPEN -> < [3:11]
+|       |           |--SLASH -> / [3:12]
+|       |           |--LI_HTML_TAG_NAME -> li [3:13]
+|       |           `--CLOSE -> > [3:15]
+|       |--NEWLINE -> \r\n [3:16]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [4:0]
+|           |--OPEN -> < [4:0]
+|           |--SLASH -> / [4:1]
+|           |--HTML_TAG_NAME -> ul [4:2]
+|           `--CLOSE -> > [4:4]
+`--EOF -> <EOF> [4:5]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt
new file mode 100755
index 0000000000..b11294bda3
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt
@@ -0,0 +1,81 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--P_TAG_OPEN -> P_TAG_OPEN [0:0]
+|       |--OPEN -> < [0:0]
+|       |--P_HTML_TAG_NAME -> P [0:1]
+|       `--CLOSE -> > [0:2]
+|--NEWLINE -> \r\n [0:3]
+|--HTML_ELEMENT -> HTML_ELEMENT [1:0]
+|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [1:0]
+|       `--BR_TAG -> BR_TAG [1:0]
+|           |--OPEN -> < [1:0]
+|           |--BR_HTML_TAG_NAME -> br [1:1]
+|           `--CLOSE -> > [1:3]
+|--NEWLINE -> \r\n [1:4]
+|--HTML_ELEMENT -> HTML_ELEMENT [2:0]
+|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [2:0]
+|       `--BR_TAG -> BR_TAG [2:0]
+|           |--OPEN -> < [2:0]
+|           |--BR_HTML_TAG_NAME -> br [2:1]
+|           `--SLASH_CLOSE -> /> [2:3]
+|--NEWLINE -> \r\n [2:5]
+|--HTML_ELEMENT -> HTML_ELEMENT [3:0]
+|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [3:0]
+|       `--BR_TAG -> BR_TAG [3:0]
+|           |--OPEN -> < [3:0]
+|           |--BR_HTML_TAG_NAME -> BR [3:1]
+|           `--CLOSE -> > [3:3]
+|--NEWLINE -> \r\n [3:4]
+|--HTML_ELEMENT -> HTML_ELEMENT [4:0]
+|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [4:0]
+|       `--BR_TAG -> BR_TAG [4:0]
+|           |--OPEN -> < [4:0]
+|           |--BR_HTML_TAG_NAME -> BR [4:1]
+|           `--SLASH_CLOSE -> /> [4:3]
+|--NEWLINE -> \r\n [4:5]
+|--HTML_ELEMENT -> HTML_ELEMENT [5:0]
+|   `--HTML_TAG -> HTML_TAG [5:0]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [5:0]
+|       |   |--OPEN -> < [5:0]
+|       |   |--HTML_TAG_NAME -> TABLE [5:1]
+|       |   `--CLOSE -> > [5:6]
+|       |--NEWLINE -> \r\n [5:7]
+|       |--TEXT -> \t [6:0]
+|       |--HTML_ELEMENT -> HTML_ELEMENT [6:1]
+|       |   `--TR -> TR [6:1]
+|       |       |--TR_TAG_OPEN -> TR_TAG_OPEN [6:1]
+|       |       |   |--OPEN -> < [6:1]
+|       |       |   |--TR_HTML_TAG_NAME -> tr [6:2]
+|       |       |   `--CLOSE -> > [6:4]
+|       |       `--TR_TAG_CLOSE -> TR_TAG_CLOSE [6:5]
+|       |           |--OPEN -> < [6:5]
+|       |           |--SLASH -> / [6:6]
+|       |           |--TR_HTML_TAG_NAME -> TR [6:7]
+|       |           `--CLOSE -> > [6:9]
+|       |--NEWLINE -> \r\n [6:10]
+|       |--TEXT -> \t [7:0]
+|       |--HTML_ELEMENT -> HTML_ELEMENT [7:1]
+|       |   `--TR -> TR [7:1]
+|       |       |--TR_TAG_OPEN -> TR_TAG_OPEN [7:1]
+|       |       |   |--OPEN -> < [7:1]
+|       |       |   |--TR_HTML_TAG_NAME -> TR [7:2]
+|       |       |   `--CLOSE -> > [7:4]
+|       |       `--TR_TAG_CLOSE -> TR_TAG_CLOSE [7:5]
+|       |           |--OPEN -> < [7:5]
+|       |           |--SLASH -> / [7:6]
+|       |           |--TR_HTML_TAG_NAME -> tr [7:7]
+|       |           `--CLOSE -> > [7:9]
+|       |--NEWLINE -> \r\n [7:10]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [8:0]
+|           |--OPEN -> < [8:0]
+|           |--SLASH -> / [8:1]
+|           |--HTML_TAG_NAME -> table [8:2]
+|           `--CLOSE -> > [8:7]
+|--NEWLINE -> \r\n [8:8]
+|--HTML_ELEMENT -> HTML_ELEMENT [9:0]
+|   `--P_TAG_CLOSE -> P_TAG_CLOSE [9:0]
+|       |--OPEN -> < [9:0]
+|       |--SLASH -> / [9:1]
+|       |--P_HTML_TAG_NAME -> p [9:2]
+|       `--CLOSE -> > [9:3]
+`--EOF -> <EOF> [9:4]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNegativeNumberInAttributeAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNegativeNumberInAttributeAst.txt
new file mode 100755
index 0000000000..eb53551a7e
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNegativeNumberInAttributeAst.txt
@@ -0,0 +1,19 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--HTML_TAG -> HTML_TAG [0:0]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [0:0]
+|       |   |--OPEN -> < [0:0]
+|       |   |--HTML_TAG_NAME -> font [0:1]
+|       |   |--WS ->   [0:5]
+|       |   |--ATTRIBUTE -> ATTRIBUTE [0:6]
+|       |   |   |--HTML_TAG_NAME -> size [0:6]
+|       |   |   |--EQUALS -> = [0:10]
+|       |   |   `--ATTR_VALUE -> -2 [0:11]
+|       |   `--CLOSE -> > [0:14]
+|       |--TEXT -> TM [0:15]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [0:17]
+|           |--OPEN -> < [0:17]
+|           |--SLASH -> / [0:18]
+|           |--HTML_TAG_NAME -> font [0:19]
+|           `--CLOSE -> > [0:23]
+`--EOF -> <EOF> [0:24]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedOneSimpleHtmlTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedOneSimpleHtmlTagAst.txt
new file mode 100755
index 0000000000..7aec1566b9
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedOneSimpleHtmlTagAst.txt
@@ -0,0 +1,14 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--HTML_TAG -> HTML_TAG [0:0]
+|       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [0:0]
+|       |   |--OPEN -> < [0:0]
+|       |   |--HTML_TAG_NAME -> g [0:1]
+|       |   `--CLOSE -> > [0:2]
+|       |--TEXT -> blabla [0:3]
+|       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [0:9]
+|           |--OPEN -> < [0:9]
+|           |--SLASH -> / [0:10]
+|           |--HTML_TAG_NAME -> g [0:11]
+|           `--CLOSE -> > [0:12]
+`--EOF -> <EOF> [0:13]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedAndClosedParagraphsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedAndClosedParagraphsAst.txt
new file mode 100755
index 0000000000..b5b2d35d03
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedAndClosedParagraphsAst.txt
@@ -0,0 +1,24 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--P_TAG_OPEN -> P_TAG_OPEN [0:0]
+|       |--OPEN -> < [0:0]
+|       |--P_HTML_TAG_NAME -> p [0:1]
+|       `--CLOSE -> > [0:2]
+|--NEWLINE -> \r\n [0:3]
+|--TEXT -> first paragraph [1:0]
+|--NEWLINE -> \r\n [1:15]
+|--HTML_ELEMENT -> HTML_ELEMENT [2:0]
+|   `--PARAGRAPH -> PARAGRAPH [2:0]
+|       |--P_TAG_OPEN -> P_TAG_OPEN [2:0]
+|       |   |--OPEN -> < [2:0]
+|       |   |--P_HTML_TAG_NAME -> p [2:1]
+|       |   `--CLOSE -> > [2:2]
+|       |--NEWLINE -> \r\n [2:3]
+|       |--TEXT -> second paragraph [3:0]
+|       |--NEWLINE -> \r\n [3:16]
+|       `--P_TAG_CLOSE -> P_TAG_CLOSE [4:0]
+|           |--OPEN -> < [4:0]
+|           |--SLASH -> / [4:1]
+|           |--P_HTML_TAG_NAME -> p [4:2]
+|           `--CLOSE -> > [4:3]
+`--EOF -> <EOF> [4:4]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedParagraphFollowedByJavadocTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedParagraphFollowedByJavadocTagAst.txt
new file mode 100755
index 0000000000..e92bbd731a
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedUnclosedParagraphFollowedByJavadocTagAst.txt
@@ -0,0 +1,20 @@
+JAVADOC -> JAVADOC [0:0]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
+|   `--P_TAG_OPEN -> P_TAG_OPEN [0:0]
+|       |--OPEN -> < [0:0]
+|       |--P_HTML_TAG_NAME -> p [0:1]
+|       |--WS ->   [0:2]
+|       |--ATTRIBUTE -> ATTRIBUTE [0:3]
+|       |   |--HTML_TAG_NAME -> style [0:3]
+|       |   |--EQUALS -> = [0:8]
+|       |   `--ATTR_VALUE -> "color: red;" [0:9]
+|       `--CLOSE -> > [0:23]
+|--NEWLINE -> \r\n [0:24]
+|--TEXT -> \ttext text [1:0]
+|--NEWLINE -> \r\n [1:10]
+|--JAVADOC_TAG -> JAVADOC_TAG [2:0]
+|   |--AUTHOR_LITERAL -> @author [2:0]
+|   |--WS ->   [2:7]
+|   `--DESCRIPTION -> DESCRIPTION [2:8]
+|       `--TEXT -> Baratali [2:8]
+`--EOF -> <EOF> [2:16]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllJavadocInlineTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllJavadocInlineTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllJavadocInlineTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllJavadocInlineTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllStandardJavadocTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllStandardJavadocTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllStandardJavadocTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAllStandardJavadocTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInJavadocInlineTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInJavadocInlineTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInJavadocInlineTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInJavadocInlineTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInLiteral.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInLiteral.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInLiteral.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAsteriskInLiteral.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAuthorWithMailto.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAuthorWithMailto.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAuthorWithMailto.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputAuthorWithMailto.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomJavadocTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomJavadocTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomJavadocTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomJavadocTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomTagWithDot.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomTagWithDot.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomTagWithDot.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputCustomTagWithDot.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDocRootInheritDoc.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDocRootInheritDoc.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDocRootInheritDoc.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDocRootInheritDoc.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDollarInLink.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDollarInLink.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDollarInLink.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputDollarInLink.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputFewWhiteSpacesAsSeparator.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputFewWhiteSpacesAsSeparator.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputFewWhiteSpacesAsSeparator.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputFewWhiteSpacesAsSeparator.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInlineCustomJavadocTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInlineCustomJavadocTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInlineCustomJavadocTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInlineCustomJavadocTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInnerBracesInCodeTag.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInnerBracesInCodeTag.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInnerBracesInCodeTag.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputInnerBracesInCodeTag.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputJavadocTagDescriptionWithInlineTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputJavadocTagDescriptionWithInlineTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputJavadocTagDescriptionWithInlineTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputJavadocTagDescriptionWithInlineTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkInlineTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkInlineTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkInlineTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkInlineTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkToPackage.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkToPackage.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkToPackage.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLinkToPackage.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputNewlineAndAsteriskInParameters.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputNewlineAndAsteriskInParameters.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputNewlineAndAsteriskInParameters.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputNewlineAndAsteriskInParameters.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputParamWithGeneric.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputParamWithGeneric.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputParamWithGeneric.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputParamWithGeneric.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSeeReferenceWithFewNestedClasses.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSeeReferenceWithFewNestedClasses.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSeeReferenceWithFewNestedClasses.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSeeReferenceWithFewNestedClasses.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSerial.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSerial.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSerial.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSerial.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSince.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSince.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSince.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputSince.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTextBeforeJavadocTags.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTextBeforeJavadocTags.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTextBeforeJavadocTags.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTextBeforeJavadocTags.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTwoLinkTagsInRow.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTwoLinkTagsInRow.javadoc
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTwoLinkTagsInRow.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputTwoLinkTagsInRow.javadoc
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllJavadocInlineTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllJavadocInlineTagsAst.txt
new file mode 100755
index 0000000000..ea5c5d09e0
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllJavadocInlineTagsAst.txt
@@ -0,0 +1,57 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--CODE_LITERAL -> @code [0:1]
+|   |--WS ->   [0:6]
+|   |--TEXT -> <code> [0:7]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:14]
+|--TEXT ->   [0:15]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:16]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:16]
+|   |--LITERAL_LITERAL -> @literal [0:17]
+|   |--WS ->   [0:25]
+|   |--TEXT -> <literal> [0:26]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:36]
+|--TEXT ->   [0:37]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:38]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:38]
+|   |--DOC_ROOT_LITERAL -> @docRoot [0:39]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:47]
+|--TEXT ->   [0:48]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:49]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:49]
+|   |--INHERIT_DOC_LITERAL -> @inheritDoc [0:50]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:61]
+|--TEXT ->   [0:62]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:63]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:63]
+|   |--LINK_LITERAL -> @link [0:64]
+|   |--WS ->   [0:69]
+|   |--REFERENCE -> REFERENCE [0:70]
+|   |   `--CLASS -> A [0:70]
+|   |--DESCRIPTION -> DESCRIPTION [0:71]
+|   |   `--TEXT ->  A class [0:71]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:79]
+|--TEXT ->   [0:80]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:81]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:81]
+|   |--LINKPLAIN_LITERAL -> @linkplain [0:82]
+|   |--WS ->   [0:92]
+|   |--REFERENCE -> REFERENCE [0:93]
+|   |   `--CLASS -> A [0:93]
+|   |--DESCRIPTION -> DESCRIPTION [0:94]
+|   |   `--TEXT ->  another link [0:94]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:107]
+|--TEXT ->   [0:108]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:109]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:109]
+|   |--VALUE_LITERAL -> @value [0:110]
+|   |--WS ->   [0:116]
+|   |--REFERENCE -> REFERENCE [0:117]
+|   |   |--PACKAGE -> lang [0:117]
+|   |   |--DOT -> . [0:121]
+|   |   |--CLASS -> Integer [0:122]
+|   |   |--HASH -> # [0:129]
+|   |   `--MEMBER -> MAX_VALUE [0:130]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:139]
+`--EOF -> <EOF> [0:140]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllStandardJavadocTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllStandardJavadocTagsAst.txt
new file mode 100755
index 0000000000..5d04ec9837
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAllStandardJavadocTagsAst.txt
@@ -0,0 +1,669 @@
+JAVADOC -> JAVADOC [0:0]
+|--NEWLINE -> \r\n [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [1:0]
+|   |--AUTHOR_LITERAL -> @author [1:0]
+|   |--WS ->   [1:7]
+|   `--DESCRIPTION -> DESCRIPTION [1:8]
+|       |--TEXT -> John Locke [1:8]
+|       `--NEWLINE -> \r\n [1:18]
+|--JAVADOC_TAG -> JAVADOC_TAG [2:0]
+|   |--AUTHOR_LITERAL -> @author [2:0]
+|   |--WS ->   [2:7]
+|   `--DESCRIPTION -> DESCRIPTION [2:8]
+|       |--TEXT -> Man in black, Sub Zero [2:8]
+|       `--NEWLINE -> \r\n [2:30]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:0]
+|   |--AUTHOR_LITERAL -> @author [3:0]
+|   |--WS ->   [3:7]
+|   `--DESCRIPTION -> DESCRIPTION [3:8]
+|       |--HTML_ELEMENT -> HTML_ELEMENT [3:8]
+|       |   `--HTML_TAG -> HTML_TAG [3:8]
+|       |       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [3:8]
+|       |       |   |--OPEN -> < [3:8]
+|       |       |   |--HTML_TAG_NAME -> a [3:9]
+|       |       |   |--WS ->   [3:10]
+|       |       |   |--ATTRIBUTE -> ATTRIBUTE [3:11]
+|       |       |   |   |--HTML_TAG_NAME -> href [3:11]
+|       |       |   |   |--EQUALS -> = [3:15]
+|       |       |   |   `--ATTR_VALUE -> "mailto:meth@albuquerque.com" [3:16]
+|       |       |   `--CLOSE -> > [3:46]
+|       |       |--TEXT -> Walter White [3:47]
+|       |       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [3:59]
+|       |           |--OPEN -> < [3:59]
+|       |           |--SLASH -> / [3:60]
+|       |           |--HTML_TAG_NAME -> a [3:61]
+|       |           `--CLOSE -> > [3:62]
+|       `--NEWLINE -> \r\n [3:63]
+|--JAVADOC_TAG -> JAVADOC_TAG [4:0]
+|   |--DEPRECATED_LITERAL -> @deprecated [4:0]
+|   |--WS ->   [4:11]
+|   `--DESCRIPTION -> DESCRIPTION [4:12]
+|       |--TEXT -> This method is deprecated [4:12]
+|       |--NEWLINE -> \r\n [4:37]
+|       |--TEXT -> because we created new one. [5:0]
+|       `--NEWLINE -> \r\n [5:27]
+|--JAVADOC_TAG -> JAVADOC_TAG [6:0]
+|   |--EXCEPTION_LITERAL -> @exception [6:0]
+|   |--WS ->   [6:10]
+|   |--CLASS_NAME -> IOException [6:11]
+|   |--WS ->   [6:22]
+|   `--DESCRIPTION -> DESCRIPTION [6:23]
+|       |--TEXT -> throws exception if connection refused. [6:23]
+|       `--NEWLINE -> \r\n [6:62]
+|--JAVADOC_TAG -> JAVADOC_TAG [7:0]
+|   |--PARAM_LITERAL -> @param [7:0]
+|   |--WS ->   [7:6]
+|   |--PARAMETER_NAME -> arg [7:7]
+|   |--WS ->   [7:10]
+|   `--DESCRIPTION -> DESCRIPTION [7:11]
+|       |--TEXT -> String argument [7:11]
+|       `--NEWLINE -> \r\n [7:26]
+|--JAVADOC_TAG -> JAVADOC_TAG [8:0]
+|   |--PARAM_LITERAL -> @param [8:0]
+|   |--WS ->   [8:6]
+|   |--PARAMETER_NAME -> <E> [8:7]
+|   |--WS ->   [8:10]
+|   `--DESCRIPTION -> DESCRIPTION [8:11]
+|       |--TEXT -> it is generic [8:11]
+|       `--NEWLINE -> \r\n [8:24]
+|--JAVADOC_TAG -> JAVADOC_TAG [9:0]
+|   |--PARAM_LITERAL -> @param [9:0]
+|   |--WS ->   [9:6]
+|   |--PARAMETER_NAME -> type [9:7]
+|   |--WS ->   [9:11]
+|   `--DESCRIPTION -> DESCRIPTION [9:12]
+|       |--TEXT -> I can describe 'type' [9:12]
+|       |--NEWLINE -> \r\n [9:33]
+|       |--TEXT -> on several lines. [10:0]
+|       |--NEWLINE -> \r\n [10:17]
+|       |--TEXT -> One more line of description. [11:0]
+|       `--NEWLINE -> \r\n [11:29]
+|--JAVADOC_TAG -> JAVADOC_TAG [12:0]
+|   |--RETURN_LITERAL -> @return [12:0]
+|   |--WS ->   [12:7]
+|   `--DESCRIPTION -> DESCRIPTION [12:8]
+|       |--TEXT -> something [12:8]
+|       `--NEWLINE -> \r\n [12:17]
+|--JAVADOC_TAG -> JAVADOC_TAG [13:0]
+|   |--RETURN_LITERAL -> @return [13:0]
+|   |--WS ->   [13:7]
+|   `--DESCRIPTION -> DESCRIPTION [13:8]
+|       |--TEXT -> a value of element [13:8]
+|       |--NEWLINE -> \r\n [13:26]
+|       |--TEXT -> that is passed as argument. [14:0]
+|       `--NEWLINE -> \r\n [14:27]
+|--JAVADOC_TAG -> JAVADOC_TAG [15:0]
+|   |--SEE_LITERAL -> @see [15:0]
+|   |--WS ->   [15:4]
+|   |--STRING -> "A book of that famous man" [15:5]
+|   `--NEWLINE -> \r\n [15:32]
+|--JAVADOC_TAG -> JAVADOC_TAG [16:0]
+|   |--SEE_LITERAL -> @see [16:0]
+|   |--WS ->   [16:4]
+|   |--HTML_ELEMENT -> HTML_ELEMENT [16:5]
+|   |   `--HTML_TAG -> HTML_TAG [16:5]
+|   |       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [16:5]
+|   |       |   |--OPEN -> < [16:5]
+|   |       |   |--HTML_TAG_NAME -> a [16:6]
+|   |       |   |--WS ->   [16:7]
+|   |       |   |--ATTRIBUTE -> ATTRIBUTE [16:8]
+|   |       |   |   |--HTML_TAG_NAME -> href [16:8]
+|   |       |   |   |--EQUALS -> = [16:12]
+|   |       |   |   `--ATTR_VALUE -> "http://google.com" [16:13]
+|   |       |   `--CLOSE -> > [16:33]
+|   |       |--TEXT -> Google [16:34]
+|   |       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [16:40]
+|   |           |--OPEN -> < [16:40]
+|   |           |--SLASH -> / [16:41]
+|   |           |--HTML_TAG_NAME -> a [16:42]
+|   |           `--CLOSE -> > [16:43]
+|   `--NEWLINE -> \r\n [16:44]
+|--JAVADOC_TAG -> JAVADOC_TAG [17:0]
+|   |--SEE_LITERAL -> @see [17:0]
+|   |--WS ->   [17:4]
+|   |--HTML_ELEMENT -> HTML_ELEMENT [17:5]
+|   |   `--HTML_TAG -> HTML_TAG [17:5]
+|   |       |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [17:5]
+|   |       |   |--OPEN -> < [17:5]
+|   |       |   |--HTML_TAG_NAME -> a [17:6]
+|   |       |   |--WS ->   [17:7]
+|   |       |   |--ATTRIBUTE -> ATTRIBUTE [17:8]
+|   |       |   |   |--HTML_TAG_NAME -> href [17:8]
+|   |       |   |   |--EQUALS -> = [17:12]
+|   |       |   |   `--ATTR_VALUE -> "http://google.com" [17:13]
+|   |       |   `--CLOSE -> > [17:33]
+|   |       |--NEWLINE -> \r\n [17:34]
+|   |       |--TEXT -> Google [18:0]
+|   |       `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [18:6]
+|   |           |--OPEN -> < [18:6]
+|   |           |--SLASH -> / [18:7]
+|   |           |--HTML_TAG_NAME -> a [18:8]
+|   |           `--CLOSE -> > [18:9]
+|   `--NEWLINE -> \r\n [18:10]
+|--JAVADOC_TAG -> JAVADOC_TAG [19:0]
+|   |--SEE_LITERAL -> @see [19:0]
+|   |--WS ->   [19:4]
+|   |--REFERENCE -> REFERENCE [19:5]
+|   |   |--PACKAGE -> java.lang [19:5]
+|   |   |--DOT -> . [19:14]
+|   |   |--CLASS -> Integer [19:15]
+|   |   |--HASH -> # [19:22]
+|   |   `--MEMBER -> valueOf [19:23]
+|   `--NEWLINE -> \r\n [19:30]
+|--JAVADOC_TAG -> JAVADOC_TAG [20:0]
+|   |--SEE_LITERAL -> @see [20:0]
+|   |--WS ->   [20:4]
+|   |--REFERENCE -> REFERENCE [20:5]
+|   |   |--PACKAGE -> java.lang [20:5]
+|   |   |--DOT -> . [20:14]
+|   |   |--CLASS -> Integer [20:15]
+|   |   |--HASH -> # [20:22]
+|   |   `--MEMBER -> Integer [20:23]
+|   `--NEWLINE -> \r\n [20:30]
+|--JAVADOC_TAG -> JAVADOC_TAG [21:0]
+|   |--SEE_LITERAL -> @see [21:0]
+|   |--WS ->   [21:4]
+|   |--REFERENCE -> REFERENCE [21:5]
+|   |   |--PACKAGE -> java.lang [21:5]
+|   |   |--DOT -> . [21:14]
+|   |   |--CLASS -> Integer [21:15]
+|   |   |--HASH -> # [21:22]
+|   |   `--MEMBER -> MAX_VALUE [21:23]
+|   `--NEWLINE -> \r\n [21:32]
+|--JAVADOC_TAG -> JAVADOC_TAG [22:0]
+|   |--SEE_LITERAL -> @see [22:0]
+|   |--WS ->   [22:4]
+|   |--REFERENCE -> REFERENCE [22:5]
+|   |   |--PACKAGE -> java.lang [22:5]
+|   |   |--DOT -> . [22:14]
+|   |   |--CLASS -> Integer [22:15]
+|   |   |--HASH -> # [22:22]
+|   |   `--MEMBER -> valueOf [22:23]
+|   |--WS ->   [22:30]
+|   `--DESCRIPTION -> DESCRIPTION [22:31]
+|       |--TEXT -> valueOf method [22:31]
+|       `--NEWLINE -> \r\n [22:45]
+|--JAVADOC_TAG -> JAVADOC_TAG [23:0]
+|   |--SEE_LITERAL -> @see [23:0]
+|   |--WS ->   [23:4]
+|   |--REFERENCE -> REFERENCE [23:5]
+|   |   |--PACKAGE -> java.lang [23:5]
+|   |   |--DOT -> . [23:14]
+|   |   |--CLASS -> Integer [23:15]
+|   |   |--HASH -> # [23:22]
+|   |   `--MEMBER -> Integer [23:23]
+|   |--WS ->   [23:30]
+|   `--DESCRIPTION -> DESCRIPTION [23:31]
+|       |--TEXT -> Integer [23:31]
+|       `--NEWLINE -> \r\n [23:38]
+|--JAVADOC_TAG -> JAVADOC_TAG [24:0]
+|   |--SEE_LITERAL -> @see [24:0]
+|   |--WS ->   [24:4]
+|   |--REFERENCE -> REFERENCE [24:5]
+|   |   |--PACKAGE -> java.lang [24:5]
+|   |   |--DOT -> . [24:14]
+|   |   |--CLASS -> Integer [24:15]
+|   |   |--HASH -> # [24:22]
+|   |   `--MEMBER -> MAX_VALUE [24:23]
+|   |--WS ->   [24:32]
+|   `--DESCRIPTION -> DESCRIPTION [24:33]
+|       |--TEXT -> maxValue [24:33]
+|       `--NEWLINE -> \r\n [24:41]
+|--JAVADOC_TAG -> JAVADOC_TAG [25:0]
+|   |--SEE_LITERAL -> @see [25:0]
+|   |--WS ->   [25:4]
+|   |--REFERENCE -> REFERENCE [25:5]
+|   |   |--PACKAGE -> java.lang [25:5]
+|   |   |--DOT -> . [25:14]
+|   |   |--CLASS -> Integer [25:15]
+|   |   |--HASH -> # [25:22]
+|   |   `--MEMBER -> intValue [25:23]
+|   |--WS ->   [25:31]
+|   `--DESCRIPTION -> DESCRIPTION [25:32]
+|       |--TEXT -> method [25:32]
+|       `--NEWLINE -> \r\n [25:38]
+|--JAVADOC_TAG -> JAVADOC_TAG [26:0]
+|   |--SEE_LITERAL -> @see [26:0]
+|   |--WS ->   [26:4]
+|   |--REFERENCE -> REFERENCE [26:5]
+|   |   |--PACKAGE -> java.lang [26:5]
+|   |   |--DOT -> . [26:14]
+|   |   |--CLASS -> Integer [26:15]
+|   |   |--HASH -> # [26:22]
+|   |   |--MEMBER -> intValue [26:23]
+|   |   `--PARAMETERS -> PARAMETERS [26:31]
+|   |       |--LEFT_BRACE -> ( [26:31]
+|   |       `--RIGHT_BRACE -> ) [26:32]
+|   |--WS ->   [26:33]
+|   `--DESCRIPTION -> DESCRIPTION [26:34]
+|       |--TEXT -> method [26:34]
+|       `--NEWLINE -> \r\n [26:40]
+|--JAVADOC_TAG -> JAVADOC_TAG [27:0]
+|   |--SEE_LITERAL -> @see [27:0]
+|   |--WS ->   [27:4]
+|   |--REFERENCE -> REFERENCE [27:5]
+|   |   |--PACKAGE -> java.lang [27:5]
+|   |   |--DOT -> . [27:14]
+|   |   |--CLASS -> Void [27:15]
+|   |   |--HASH -> # [27:19]
+|   |   `--MEMBER -> Void [27:20]
+|   |--WS ->   [27:24]
+|   `--DESCRIPTION -> DESCRIPTION [27:25]
+|       |--TEXT -> constructor [27:25]
+|       `--NEWLINE -> \r\n [27:36]
+|--JAVADOC_TAG -> JAVADOC_TAG [28:0]
+|   |--SEE_LITERAL -> @see [28:0]
+|   |--WS ->   [28:4]
+|   |--REFERENCE -> REFERENCE [28:5]
+|   |   |--PACKAGE -> java.lang [28:5]
+|   |   |--DOT -> . [28:14]
+|   |   |--CLASS -> Void [28:15]
+|   |   |--HASH -> # [28:19]
+|   |   |--MEMBER -> Void [28:20]
+|   |   `--PARAMETERS -> PARAMETERS [28:24]
+|   |       |--LEFT_BRACE -> ( [28:24]
+|   |       `--RIGHT_BRACE -> ) [28:25]
+|   |--WS ->   [28:26]
+|   `--DESCRIPTION -> DESCRIPTION [28:27]
+|       |--TEXT -> constructor [28:27]
+|       `--NEWLINE -> \r\n [28:38]
+|--JAVADOC_TAG -> JAVADOC_TAG [29:0]
+|   |--SEE_LITERAL -> @see [29:0]
+|   |--WS ->   [29:4]
+|   |--REFERENCE -> REFERENCE [29:5]
+|   |   |--PACKAGE -> java.lang [29:5]
+|   |   |--DOT -> . [29:14]
+|   |   |--CLASS -> Integer [29:15]
+|   |   |--HASH -> # [29:22]
+|   |   |--MEMBER -> valueOf [29:23]
+|   |   `--PARAMETERS -> PARAMETERS [29:30]
+|   |       |--LEFT_BRACE -> ( [29:30]
+|   |       |--ARGUMENT -> String [29:31]
+|   |       `--RIGHT_BRACE -> ) [29:37]
+|   |--WS ->   [29:38]
+|   `--DESCRIPTION -> DESCRIPTION [29:39]
+|       |--TEXT -> method [29:39]
+|       `--NEWLINE -> \r\n [29:45]
+|--JAVADOC_TAG -> JAVADOC_TAG [30:0]
+|   |--SEE_LITERAL -> @see [30:0]
+|   |--WS ->   [30:4]
+|   |--REFERENCE -> REFERENCE [30:5]
+|   |   |--PACKAGE -> java.lang [30:5]
+|   |   |--DOT -> . [30:14]
+|   |   |--CLASS -> Integer [30:15]
+|   |   |--HASH -> # [30:22]
+|   |   |--MEMBER -> toString [30:23]
+|   |   `--PARAMETERS -> PARAMETERS [30:31]
+|   |       |--LEFT_BRACE -> ( [30:31]
+|   |       |--ARGUMENT -> int [30:32]
+|   |       |--COMMA -> , [30:35]
+|   |       |--ARGUMENT -> int [30:36]
+|   |       `--RIGHT_BRACE -> ) [30:39]
+|   |--WS ->   [30:40]
+|   `--DESCRIPTION -> DESCRIPTION [30:41]
+|       |--TEXT -> method [30:41]
+|       `--NEWLINE -> \r\n [30:47]
+|--JAVADOC_TAG -> JAVADOC_TAG [31:0]
+|   |--SEE_LITERAL -> @see [31:0]
+|   |--WS ->   [31:4]
+|   |--REFERENCE -> REFERENCE [31:5]
+|   |   |--PACKAGE -> java.lang [31:5]
+|   |   |--DOT -> . [31:14]
+|   |   |--CLASS -> Integer [31:15]
+|   |   |--HASH -> # [31:22]
+|   |   |--MEMBER -> toString [31:23]
+|   |   `--PARAMETERS -> PARAMETERS [31:31]
+|   |       |--LEFT_BRACE -> ( [31:31]
+|   |       |--ARGUMENT -> int [31:32]
+|   |       |--COMMA -> , [31:35]
+|   |       |--WS ->   [31:36]
+|   |       |--ARGUMENT -> int [31:37]
+|   |       `--RIGHT_BRACE -> ) [31:40]
+|   |--WS ->   [31:41]
+|   `--DESCRIPTION -> DESCRIPTION [31:42]
+|       |--TEXT -> method [31:42]
+|       `--NEWLINE -> \r\n [31:48]
+|--JAVADOC_TAG -> JAVADOC_TAG [32:0]
+|   |--SEE_LITERAL -> @see [32:0]
+|   |--WS ->   [32:4]
+|   |--REFERENCE -> REFERENCE [32:5]
+|   |   |--HASH -> # [32:5]
+|   |   `--MEMBER -> field [32:6]
+|   `--NEWLINE -> \r\n [32:11]
+|--JAVADOC_TAG -> JAVADOC_TAG [33:0]
+|   |--SEE_LITERAL -> @see [33:0]
+|   |--WS ->   [33:4]
+|   |--REFERENCE -> REFERENCE [33:5]
+|   |   |--HASH -> # [33:5]
+|   |   |--MEMBER -> method [33:6]
+|   |   `--PARAMETERS -> PARAMETERS [33:12]
+|   |       |--LEFT_BRACE -> ( [33:12]
+|   |       |--ARGUMENT -> Type [33:13]
+|   |       |--COMMA -> , [33:17]
+|   |       |--WS ->   [33:18]
+|   |       |--ARGUMENT -> Type [33:19]
+|   |       `--RIGHT_BRACE -> ) [33:23]
+|   `--NEWLINE -> \r\n [33:24]
+|--JAVADOC_TAG -> JAVADOC_TAG [34:0]
+|   |--SEE_LITERAL -> @see [34:0]
+|   |--WS ->   [34:4]
+|   |--REFERENCE -> REFERENCE [34:5]
+|   |   |--HASH -> # [34:5]
+|   |   |--MEMBER -> method [34:6]
+|   |   `--PARAMETERS -> PARAMETERS [34:12]
+|   |       |--LEFT_BRACE -> ( [34:12]
+|   |       |--ARGUMENT -> Type [34:13]
+|   |       |--WS ->   [34:17]
+|   |       |--ARGUMENT -> argname [34:18]
+|   |       |--COMMA -> , [34:25]
+|   |       |--WS ->   [34:26]
+|   |       |--ARGUMENT -> Type [34:27]
+|   |       |--WS ->   [34:31]
+|   |       |--ARGUMENT -> argname [34:32]
+|   |       `--RIGHT_BRACE -> ) [34:39]
+|   `--NEWLINE -> \r\n [34:40]
+|--JAVADOC_TAG -> JAVADOC_TAG [35:0]
+|   |--SEE_LITERAL -> @see [35:0]
+|   |--WS ->   [35:4]
+|   |--REFERENCE -> REFERENCE [35:5]
+|   |   |--HASH -> # [35:5]
+|   |   |--MEMBER -> constructor [35:6]
+|   |   `--PARAMETERS -> PARAMETERS [35:17]
+|   |       |--LEFT_BRACE -> ( [35:17]
+|   |       |--ARGUMENT -> Type [35:18]
+|   |       |--COMMA -> , [35:22]
+|   |       |--WS ->   [35:23]
+|   |       |--ARGUMENT -> Type [35:24]
+|   |       `--RIGHT_BRACE -> ) [35:28]
+|   `--NEWLINE -> \r\n [35:29]
+|--JAVADOC_TAG -> JAVADOC_TAG [36:0]
+|   |--SEE_LITERAL -> @see [36:0]
+|   |--WS ->   [36:4]
+|   |--REFERENCE -> REFERENCE [36:5]
+|   |   |--HASH -> # [36:5]
+|   |   |--MEMBER -> constructor [36:6]
+|   |   `--PARAMETERS -> PARAMETERS [36:17]
+|   |       |--LEFT_BRACE -> ( [36:17]
+|   |       |--ARGUMENT -> Type [36:18]
+|   |       |--WS ->   [36:22]
+|   |       |--ARGUMENT -> argname [36:23]
+|   |       |--COMMA -> , [36:30]
+|   |       |--WS ->   [36:31]
+|   |       |--ARGUMENT -> Type [36:32]
+|   |       |--WS ->   [36:36]
+|   |       |--ARGUMENT -> argname [36:37]
+|   |       `--RIGHT_BRACE -> ) [36:44]
+|   `--NEWLINE -> \r\n [36:45]
+|--JAVADOC_TAG -> JAVADOC_TAG [37:0]
+|   |--SEE_LITERAL -> @see [37:0]
+|   |--WS ->   [37:4]
+|   |--REFERENCE -> REFERENCE [37:5]
+|   |   |--CLASS -> Class [37:5]
+|   |   |--HASH -> # [37:10]
+|   |   `--MEMBER -> field [37:11]
+|   `--NEWLINE -> \r\n [37:16]
+|--JAVADOC_TAG -> JAVADOC_TAG [38:0]
+|   |--SEE_LITERAL -> @see [38:0]
+|   |--WS ->   [38:4]
+|   |--REFERENCE -> REFERENCE [38:5]
+|   |   |--CLASS -> Class [38:5]
+|   |   |--HASH -> # [38:10]
+|   |   |--MEMBER -> method [38:11]
+|   |   `--PARAMETERS -> PARAMETERS [38:17]
+|   |       |--LEFT_BRACE -> ( [38:17]
+|   |       |--ARGUMENT -> Type [38:18]
+|   |       |--COMMA -> , [38:22]
+|   |       |--WS ->   [38:23]
+|   |       |--ARGUMENT -> Type [38:24]
+|   |       |--COMMA -> , [38:28]
+|   |       |--WS ->   [38:29]
+|   |       |--ARGUMENT -> Type [38:30]
+|   |       `--RIGHT_BRACE -> ) [38:34]
+|   `--NEWLINE -> \r\n [38:35]
+|--JAVADOC_TAG -> JAVADOC_TAG [39:0]
+|   |--SEE_LITERAL -> @see [39:0]
+|   |--WS ->   [39:4]
+|   |--REFERENCE -> REFERENCE [39:5]
+|   |   |--CLASS -> Class [39:5]
+|   |   |--HASH -> # [39:10]
+|   |   |--MEMBER -> method [39:11]
+|   |   `--PARAMETERS -> PARAMETERS [39:17]
+|   |       |--LEFT_BRACE -> ( [39:17]
+|   |       |--ARGUMENT -> Type [39:18]
+|   |       |--WS ->   [39:22]
+|   |       |--ARGUMENT -> argname [39:23]
+|   |       |--COMMA -> , [39:30]
+|   |       |--WS ->   [39:31]
+|   |       |--ARGUMENT -> Type [39:32]
+|   |       |--WS ->   [39:36]
+|   |       |--ARGUMENT -> argname [39:37]
+|   |       `--RIGHT_BRACE -> ) [39:44]
+|   `--NEWLINE -> \r\n [39:45]
+|--JAVADOC_TAG -> JAVADOC_TAG [40:0]
+|   |--SEE_LITERAL -> @see [40:0]
+|   |--WS ->   [40:4]
+|   |--REFERENCE -> REFERENCE [40:5]
+|   |   |--CLASS -> Class [40:5]
+|   |   |--HASH -> # [40:10]
+|   |   |--MEMBER -> constructor [40:11]
+|   |   `--PARAMETERS -> PARAMETERS [40:22]
+|   |       |--LEFT_BRACE -> ( [40:22]
+|   |       |--ARGUMENT -> Type [40:23]
+|   |       |--COMMA -> , [40:27]
+|   |       |--WS ->   [40:28]
+|   |       |--ARGUMENT -> Type [40:29]
+|   |       `--RIGHT_BRACE -> ) [40:33]
+|   `--NEWLINE -> \r\n [40:34]
+|--JAVADOC_TAG -> JAVADOC_TAG [41:0]
+|   |--SEE_LITERAL -> @see [41:0]
+|   |--WS ->   [41:4]
+|   |--REFERENCE -> REFERENCE [41:5]
+|   |   |--CLASS -> Class [41:5]
+|   |   |--HASH -> # [41:10]
+|   |   |--MEMBER -> constructor [41:11]
+|   |   `--PARAMETERS -> PARAMETERS [41:22]
+|   |       |--LEFT_BRACE -> ( [41:22]
+|   |       |--ARGUMENT -> Type [41:23]
+|   |       |--WS ->   [41:27]
+|   |       |--ARGUMENT -> argname [41:28]
+|   |       |--COMMA -> , [41:35]
+|   |       |--WS ->   [41:36]
+|   |       |--ARGUMENT -> Type [41:37]
+|   |       |--WS ->   [41:41]
+|   |       |--ARGUMENT -> argname [41:42]
+|   |       `--RIGHT_BRACE -> ) [41:49]
+|   `--NEWLINE -> \r\n [41:50]
+|--JAVADOC_TAG -> JAVADOC_TAG [42:0]
+|   |--SEE_LITERAL -> @see [42:0]
+|   |--WS ->   [42:4]
+|   |--REFERENCE -> REFERENCE [42:5]
+|   |   |--CLASS -> Class [42:5]
+|   |   |--DOT -> . [42:10]
+|   |   `--CLASS -> NestedClass [42:11]
+|   `--NEWLINE -> \r\n [42:22]
+|--JAVADOC_TAG -> JAVADOC_TAG [43:0]
+|   |--SEE_LITERAL -> @see [43:0]
+|   |--WS ->   [43:4]
+|   |--REFERENCE -> REFERENCE [43:5]
+|   |   `--CLASS -> Class [43:5]
+|   `--NEWLINE -> \r\n [43:10]
+|--JAVADOC_TAG -> JAVADOC_TAG [44:0]
+|   |--SEE_LITERAL -> @see [44:0]
+|   |--WS ->   [44:4]
+|   |--REFERENCE -> REFERENCE [44:5]
+|   |   |--PACKAGE -> com.github.checkstyle [44:5]
+|   |   |--DOT -> . [44:26]
+|   |   |--CLASS -> Class [44:27]
+|   |   |--HASH -> # [44:32]
+|   |   `--MEMBER -> field [44:33]
+|   `--NEWLINE -> \r\n [44:38]
+|--JAVADOC_TAG -> JAVADOC_TAG [45:0]
+|   |--SEE_LITERAL -> @see [45:0]
+|   |--WS ->   [45:4]
+|   |--REFERENCE -> REFERENCE [45:5]
+|   |   |--PACKAGE -> com.github.checkstyle [45:5]
+|   |   |--DOT -> . [45:26]
+|   |   |--CLASS -> Class [45:27]
+|   |   |--HASH -> # [45:32]
+|   |   |--MEMBER -> method [45:33]
+|   |   `--PARAMETERS -> PARAMETERS [45:39]
+|   |       |--LEFT_BRACE -> ( [45:39]
+|   |       |--ARGUMENT -> Type [45:40]
+|   |       |--COMMA -> , [45:44]
+|   |       |--WS ->   [45:45]
+|   |       |--ARGUMENT -> Type [45:46]
+|   |       `--RIGHT_BRACE -> ) [45:50]
+|   `--NEWLINE -> \r\n [45:51]
+|--JAVADOC_TAG -> JAVADOC_TAG [46:0]
+|   |--SEE_LITERAL -> @see [46:0]
+|   |--WS ->   [46:4]
+|   |--REFERENCE -> REFERENCE [46:5]
+|   |   |--PACKAGE -> com.github.checkstyle [46:5]
+|   |   |--DOT -> . [46:26]
+|   |   |--CLASS -> Class [46:27]
+|   |   |--HASH -> # [46:32]
+|   |   |--MEMBER -> method [46:33]
+|   |   `--PARAMETERS -> PARAMETERS [46:39]
+|   |       |--LEFT_BRACE -> ( [46:39]
+|   |       |--ARGUMENT -> Type [46:40]
+|   |       |--WS ->   [46:44]
+|   |       |--ARGUMENT -> argname [46:45]
+|   |       |--COMMA -> , [46:52]
+|   |       |--WS ->   [46:53]
+|   |       |--ARGUMENT -> Type [46:54]
+|   |       |--WS ->   [46:58]
+|   |       |--ARGUMENT -> argname [46:59]
+|   |       `--RIGHT_BRACE -> ) [46:66]
+|   `--NEWLINE -> \r\n [46:67]
+|--JAVADOC_TAG -> JAVADOC_TAG [47:0]
+|   |--SEE_LITERAL -> @see [47:0]
+|   |--WS ->   [47:4]
+|   |--REFERENCE -> REFERENCE [47:5]
+|   |   |--PACKAGE -> com.github.checkstyle [47:5]
+|   |   |--DOT -> . [47:26]
+|   |   |--CLASS -> Class [47:27]
+|   |   |--HASH -> # [47:32]
+|   |   |--MEMBER -> constructor [47:33]
+|   |   `--PARAMETERS -> PARAMETERS [47:44]
+|   |       |--LEFT_BRACE -> ( [47:44]
+|   |       |--ARGUMENT -> Type [47:45]
+|   |       |--COMMA -> , [47:49]
+|   |       |--WS ->   [47:50]
+|   |       |--ARGUMENT -> Type [47:51]
+|   |       `--RIGHT_BRACE -> ) [47:55]
+|   `--NEWLINE -> \r\n [47:56]
+|--JAVADOC_TAG -> JAVADOC_TAG [48:0]
+|   |--SEE_LITERAL -> @see [48:0]
+|   |--WS ->   [48:4]
+|   |--REFERENCE -> REFERENCE [48:5]
+|   |   |--PACKAGE -> com.github.checkstyle [48:5]
+|   |   |--DOT -> . [48:26]
+|   |   |--CLASS -> Class [48:27]
+|   |   |--HASH -> # [48:32]
+|   |   |--MEMBER -> constructor [48:33]
+|   |   `--PARAMETERS -> PARAMETERS [48:44]
+|   |       |--LEFT_BRACE -> ( [48:44]
+|   |       |--ARGUMENT -> Type [48:45]
+|   |       |--WS ->   [48:49]
+|   |       |--ARGUMENT -> argname [48:50]
+|   |       |--COMMA -> , [48:57]
+|   |       |--WS ->   [48:58]
+|   |       |--ARGUMENT -> Type [48:59]
+|   |       |--WS ->   [48:63]
+|   |       |--ARGUMENT -> argname [48:64]
+|   |       `--RIGHT_BRACE -> ) [48:71]
+|   `--NEWLINE -> \r\n [48:72]
+|--JAVADOC_TAG -> JAVADOC_TAG [49:0]
+|   |--SEE_LITERAL -> @see [49:0]
+|   |--WS ->   [49:4]
+|   |--REFERENCE -> REFERENCE [49:5]
+|   |   |--PACKAGE -> com.github.checkstyle [49:5]
+|   |   |--DOT -> . [49:26]
+|   |   |--CLASS -> Class [49:27]
+|   |   |--DOT -> . [49:32]
+|   |   `--CLASS -> NestedClass [49:33]
+|   `--NEWLINE -> \r\n [49:44]
+|--JAVADOC_TAG -> JAVADOC_TAG [50:0]
+|   |--SEE_LITERAL -> @see [50:0]
+|   |--WS ->   [50:4]
+|   |--REFERENCE -> REFERENCE [50:5]
+|   |   |--PACKAGE -> com.github.checkstyle [50:5]
+|   |   |--DOT -> . [50:26]
+|   |   `--CLASS -> Class [50:27]
+|   `--NEWLINE -> \r\n [50:32]
+|--JAVADOC_TAG -> JAVADOC_TAG [51:0]
+|   |--SEE_LITERAL -> @see [51:0]
+|   |--WS ->   [51:4]
+|   |--REFERENCE -> REFERENCE [51:5]
+|   |   `--PACKAGE -> com.github.checkstyle [51:5]
+|   `--NEWLINE -> \r\n [51:26]
+|--JAVADOC_TAG -> JAVADOC_TAG [52:0]
+|   |--SERIAL_LITERAL -> @serial [52:0]
+|   |--WS ->   [52:7]
+|   `--DESCRIPTION -> DESCRIPTION [52:8]
+|       |--TEXT -> field description [52:8]
+|       |--NEWLINE -> \r\n [52:25]
+|       |--TEXT -> on few lines [53:0]
+|       |--NEWLINE -> \r\n [53:12]
+|       |--TEXT -> and even here [54:0]
+|       `--NEWLINE -> \r\n [54:13]
+|--JAVADOC_TAG -> JAVADOC_TAG [55:0]
+|   |--SERIAL_LITERAL -> @serial [55:0]
+|   |--WS ->   [55:7]
+|   |--LITERAL_INCLUDE -> include [55:8]
+|   `--DESCRIPTION -> DESCRIPTION [55:15]
+|       `--NEWLINE -> \r\n [55:15]
+|--JAVADOC_TAG -> JAVADOC_TAG [56:0]
+|   |--SERIAL_LITERAL -> @serial [56:0]
+|   |--WS ->   [56:7]
+|   |--LITERAL_EXCLUDE -> exclude [56:8]
+|   `--DESCRIPTION -> DESCRIPTION [56:15]
+|       `--NEWLINE -> \r\n [56:15]
+|--JAVADOC_TAG -> JAVADOC_TAG [57:0]
+|   |--SERIAL_FIELD_LITERAL -> @serialField [57:0]
+|   |--WS ->   [57:12]
+|   |--FIELD_NAME -> myField [57:13]
+|   |--WS ->   [57:20]
+|   |--FIELD_TYPE -> myObjectStreamField [57:21]
+|   |--WS ->   [57:40]
+|   `--DESCRIPTION -> DESCRIPTION [57:41]
+|       |--TEXT -> description of my serial field [57:41]
+|       `--NEWLINE -> \r\n [57:71]
+|--JAVADOC_TAG -> JAVADOC_TAG [58:0]
+|   |--SERIAL_DATA_LITERAL -> @serialData [58:0]
+|   |--WS ->   [58:11]
+|   `--DESCRIPTION -> DESCRIPTION [58:12]
+|       |--TEXT -> The data-description documents the types and order of data in the serialized form. Specifically, this data includes the optional data written by the writeObject method and all data (including base classes) written by the Externalizable.writeExternal method. [58:12]
+|       `--NEWLINE -> \r\n [58:269]
+|--JAVADOC_TAG -> JAVADOC_TAG [59:0]
+|   |--SINCE_LITERAL -> @since [59:0]
+|   |--WS ->   [59:6]
+|   `--DESCRIPTION -> DESCRIPTION [59:7]
+|       |--TEXT -> 1.5 [59:7]
+|       `--NEWLINE -> \r\n [59:10]
+|--JAVADOC_TAG -> JAVADOC_TAG [60:0]
+|   |--SINCE_LITERAL -> @since [60:0]
+|   |--WS ->   [60:6]
+|   `--DESCRIPTION -> DESCRIPTION [60:7]
+|       |--TEXT -> Release 3.4.5 [60:7]
+|       `--NEWLINE -> \r\n [60:20]
+|--JAVADOC_TAG -> JAVADOC_TAG [61:0]
+|   |--THROWS_LITERAL -> @throws [61:0]
+|   |--WS ->   [61:7]
+|   |--CLASS_NAME -> IOException [61:8]
+|   |--WS ->   [61:19]
+|   `--DESCRIPTION -> DESCRIPTION [61:20]
+|       |--TEXT -> throws exception if connection refused. [61:20]
+|       `--NEWLINE -> \r\n [61:59]
+|--JAVADOC_TAG -> JAVADOC_TAG [62:0]
+|   |--VERSION_LITERAL -> @version [62:0]
+|   |--WS ->   [62:8]
+|   `--DESCRIPTION -> DESCRIPTION [62:9]
+|       |--TEXT -> 1.2 [62:9]
+|       `--NEWLINE -> \r\n [62:12]
+|--JAVADOC_TAG -> JAVADOC_TAG [63:0]
+|   |--VERSION_LITERAL -> @version [63:0]
+|   |--WS ->   [63:8]
+|   `--DESCRIPTION -> DESCRIPTION [63:9]
+|       `--TEXT -> Release 1.1.1 [63:9]
+`--EOF -> <EOF> [63:22]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInJavadocInlineTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInJavadocInlineTagAst.txt
new file mode 100755
index 0000000000..26d545f69d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInJavadocInlineTagAst.txt
@@ -0,0 +1,11 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LINK_LITERAL -> @link [0:1]
+|   |--NEWLINE -> \r\n [0:6]
+|   |--LEADING_ASTERISK ->   * [1:0]
+|   |--WS ->   [1:3]
+|   |--REFERENCE -> REFERENCE [1:4]
+|   |   `--CLASS -> GwtIncompatible [1:4]
+|   `--JAVADOC_INLINE_TAG_END -> } [1:19]
+`--EOF -> <EOF> [1:20]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInLiteralAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInLiteralAst.txt
new file mode 100755
index 0000000000..c1a83a7ece
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAsteriskInLiteralAst.txt
@@ -0,0 +1,10 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LITERAL_LITERAL -> @literal [0:1]
+|   |--WS ->   [0:9]
+|   |--TEXT -> as\r\n [0:10]
+|   |--LEADING_ASTERISK -> * [1:0]
+|   |--TEXT ->  as [1:1]
+|   `--JAVADOC_INLINE_TAG_END -> } [1:5]
+`--EOF -> <EOF> [1:6]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAuthorWithMailtoAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAuthorWithMailtoAst.txt
new file mode 100755
index 0000000000..93e3ede8a0
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedAuthorWithMailtoAst.txt
@@ -0,0 +1,23 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--AUTHOR_LITERAL -> @author [0:0]
+|   |--WS ->   [0:7]
+|   `--DESCRIPTION -> DESCRIPTION [0:8]
+|       `--HTML_ELEMENT -> HTML_ELEMENT [0:8]
+|           `--HTML_TAG -> HTML_TAG [0:8]
+|               |--HTML_ELEMENT_OPEN -> HTML_ELEMENT_OPEN [0:8]
+|               |   |--OPEN -> < [0:8]
+|               |   |--HTML_TAG_NAME -> a [0:9]
+|               |   |--WS ->   [0:10]
+|               |   |--ATTRIBUTE -> ATTRIBUTE [0:11]
+|               |   |   |--HTML_TAG_NAME -> href [0:11]
+|               |   |   |--EQUALS -> = [0:15]
+|               |   |   `--ATTR_VALUE -> "mailto:barataliba@gmail.com" [0:16]
+|               |   `--CLOSE -> > [0:46]
+|               |--TEXT -> Baratali Izmailov [0:47]
+|               `--HTML_ELEMENT_CLOSE -> HTML_ELEMENT_CLOSE [0:64]
+|                   |--OPEN -> < [0:64]
+|                   |--SLASH -> / [0:65]
+|                   |--HTML_TAG_NAME -> a [0:66]
+|                   `--CLOSE -> > [0:67]
+`--EOF -> <EOF> [0:68]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomJavadocTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomJavadocTagsAst.txt
new file mode 100755
index 0000000000..356662d388
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomJavadocTagsAst.txt
@@ -0,0 +1,24 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK ->  * [0:0]
+|--WS ->   [0:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:3]
+|   |--CUSTOM_NAME -> @myTag [0:3]
+|   |--WS ->   [0:9]
+|   `--DESCRIPTION -> DESCRIPTION [0:10]
+|       |--TEXT -> yes it is [0:10]
+|       `--NEWLINE -> \r\n [0:19]
+|--LEADING_ASTERISK ->  * [1:0]
+|--WS ->   [1:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [1:3]
+|   |--CUSTOM_NAME -> @anotherTagWithoutParameter [1:3]
+|   `--NEWLINE -> \r\n [1:30]
+|--LEADING_ASTERISK ->  * [2:0]
+|--WS ->   [2:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [2:3]
+|   |--AUTHOR_LITERAL -> @author [2:3]
+|   |--WS ->   [2:10]
+|   `--DESCRIPTION -> DESCRIPTION [2:11]
+|       |--TEXT -> I [2:11]
+|       |--NEWLINE -> \r\n [2:12]
+|       `--TEXT ->   [3:0]
+`--EOF -> <EOF> [3:1]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomTagWithDotAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomTagWithDotAst.txt
new file mode 100755
index 0000000000..1dd8c6b5e6
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedCustomTagWithDotAst.txt
@@ -0,0 +1,16 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--CUSTOM_NAME -> @ejb:bean [0:0]
+|   `--NEWLINE -> \r\n [0:9]
+|--JAVADOC_TAG -> JAVADOC_TAG [1:0]
+|   |--CUSTOM_NAME -> @hibernate.property [1:0]
+|   |--WS ->   [1:19]
+|   `--DESCRIPTION -> DESCRIPTION [1:20]
+|       |--TEXT -> myproperty [1:20]
+|       `--NEWLINE -> \r\n [1:30]
+|--JAVADOC_TAG -> JAVADOC_TAG [2:0]
+|   |--CUSTOM_NAME -> @weblogic.cache-ref [2:0]
+|   `--NEWLINE -> \r\n [2:19]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:0]
+|   `--CUSTOM_NAME -> @my_tag [3:0]
+`--EOF -> <EOF> [3:7]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDocRootInheritDocAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDocRootInheritDocAst.txt
new file mode 100755
index 0000000000..cd4c0b36cd
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDocRootInheritDocAst.txt
@@ -0,0 +1,54 @@
+JAVADOC -> JAVADOC [0:0]
+|--NEWLINE -> \r\n [0:0]
+|--LEADING_ASTERISK ->  * [1:0]
+|--TEXT ->   [1:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [1:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [1:3]
+|   |--DOC_ROOT_LITERAL -> @docRoot [1:4]
+|   `--JAVADOC_INLINE_TAG_END -> } [1:12]
+|--NEWLINE -> \r\n [1:13]
+|--LEADING_ASTERISK ->  * [2:0]
+|--TEXT ->   [2:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [2:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [2:3]
+|   |--DOC_ROOT_LITERAL -> @docRoot [2:4]
+|   |--WS ->   [2:12]
+|   `--JAVADOC_INLINE_TAG_END -> } [2:13]
+|--NEWLINE -> \r\n [2:14]
+|--LEADING_ASTERISK ->  * [3:0]
+|--TEXT ->   [3:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [3:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [3:3]
+|   |--DOC_ROOT_LITERAL -> @docRoot [3:4]
+|   |--NEWLINE -> \r\n [3:12]
+|   |--LEADING_ASTERISK ->  * [4:0]
+|   |--WS ->   [4:2]
+|   `--JAVADOC_INLINE_TAG_END -> } [4:3]
+|--NEWLINE -> \r\n [4:4]
+|--LEADING_ASTERISK ->  * [5:0]
+|--TEXT ->   [5:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [5:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [5:3]
+|   |--INHERIT_DOC_LITERAL -> @inheritDoc [5:4]
+|   `--JAVADOC_INLINE_TAG_END -> } [5:15]
+|--NEWLINE -> \r\n [5:16]
+|--LEADING_ASTERISK ->  * [6:0]
+|--TEXT ->   [6:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [6:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [6:3]
+|   |--INHERIT_DOC_LITERAL -> @inheritDoc [6:4]
+|   |--WS ->   [6:15]
+|   `--JAVADOC_INLINE_TAG_END -> } [6:16]
+|--NEWLINE -> \r\n [6:17]
+|--LEADING_ASTERISK ->  * [7:0]
+|--TEXT ->   [7:2]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [7:3]
+|   |--JAVADOC_INLINE_TAG_START -> { [7:3]
+|   |--INHERIT_DOC_LITERAL -> @inheritDoc [7:4]
+|   |--NEWLINE -> \r\n [7:15]
+|   |--LEADING_ASTERISK ->  * [8:0]
+|   |--WS ->   [8:2]
+|   `--JAVADOC_INLINE_TAG_END -> } [8:3]
+|--NEWLINE -> \r\n [8:4]
+|--TEXT ->   [9:0]
+`--EOF -> <EOF> [9:1]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDollarInLinkAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDollarInLinkAst.txt
new file mode 100755
index 0000000000..4acb093964
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedDollarInLinkAst.txt
@@ -0,0 +1,18 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LINK_LITERAL -> @link [0:1]
+|   |--WS ->   [0:6]
+|   |--REFERENCE -> REFERENCE [0:7]
+|   |   |--CLASS -> My$Class [0:7]
+|   |   |--HASH -> # [0:15]
+|   |   |--MEMBER -> $$simple_$Method [0:16]
+|   |   `--PARAMETERS -> PARAMETERS [0:32]
+|   |       |--LEFT_BRACE -> ( [0:32]
+|   |       |--ARGUMENT -> _A78 [0:33]
+|   |       |--COMMA -> , [0:37]
+|   |       |--WS ->   [0:38]
+|   |       |--ARGUMENT -> $8$ [0:39]
+|   |       `--RIGHT_BRACE -> ) [0:42]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:43]
+`--EOF -> <EOF> [0:44]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedFewWhiteSpacesAsSeparatorAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedFewWhiteSpacesAsSeparatorAst.txt
new file mode 100755
index 0000000000..5e62551628
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedFewWhiteSpacesAsSeparatorAst.txt
@@ -0,0 +1,11 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK ->        * [0:0]
+|--WS ->   [0:8]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:9]
+|   |--PARAM_LITERAL -> @param [0:9]
+|   |--WS ->     [0:15]
+|   |--PARAMETER_NAME -> initialCapacity [0:18]
+|   |--WS ->       [0:33]
+|   `--DESCRIPTION -> DESCRIPTION [0:38]
+|       `--TEXT -> the initial capacity of the ByteBuffer. [0:38]
+`--EOF -> <EOF> [0:77]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInlineCustomJavadocTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInlineCustomJavadocTagAst.txt
new file mode 100755
index 0000000000..b97946932b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInlineCustomJavadocTagAst.txt
@@ -0,0 +1,11 @@
+JAVADOC -> JAVADOC [0:0]
+|--TEXT -> Non standard  [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:13]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:13]
+|   |--CUSTOM_NAME -> @preformat [0:14]
+|   |--WS ->   [0:24]
+|   |--DESCRIPTION -> DESCRIPTION [0:25]
+|   |   `--TEXT -> a<b [0:25]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:28]
+|--NEWLINE -> \r\n [0:29]
+`--EOF -> <EOF> [1:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInnerBracesInCodeTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInnerBracesInCodeTagAst.txt
new file mode 100755
index 0000000000..0bfd67c095
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedInnerBracesInCodeTagAst.txt
@@ -0,0 +1,8 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--CODE_LITERAL -> @code [0:1]
+|   |--WS ->   [0:6]
+|   |--TEXT -> {{{}}{{}}}  [0:7]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:19]
+`--EOF -> <EOF> [0:20]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedJavadocTagDescriptionWithInlineTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedJavadocTagDescriptionWithInlineTagsAst.txt
new file mode 100755
index 0000000000..e02ca111c2
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedJavadocTagDescriptionWithInlineTagsAst.txt
@@ -0,0 +1,25 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--DEPRECATED_LITERAL -> @deprecated [0:0]
+|   |--WS ->   [0:11]
+|   `--DESCRIPTION -> DESCRIPTION [0:12]
+|       |--TEXT -> use  [0:12]
+|       |--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:16]
+|       |   |--JAVADOC_INLINE_TAG_START -> { [0:16]
+|       |   |--LINK_LITERAL -> @link [0:17]
+|       |   |--WS ->   [0:22]
+|       |   |--REFERENCE -> REFERENCE [0:23]
+|       |   |   |--PACKAGE -> java.lang [0:23]
+|       |   |   |--DOT -> . [0:32]
+|       |   |   `--CLASS -> Integer [0:33]
+|       |   |--DESCRIPTION -> DESCRIPTION [0:40]
+|       |   |   |--TEXT ->  Integer [0:40]
+|       |   |   `--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:48]
+|       |   |       |--JAVADOC_INLINE_TAG_START -> { [0:48]
+|       |   |       |--CODE_LITERAL -> @code [0:49]
+|       |   |       |--WS ->   [0:54]
+|       |   |       |--TEXT -> <a>Wat</a> [0:55]
+|       |   |       `--JAVADOC_INLINE_TAG_END -> } [0:66]
+|       |   `--JAVADOC_INLINE_TAG_END -> } [0:67]
+|       `--TEXT ->  instead [0:68]
+`--EOF -> <EOF> [0:76]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkInlineTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkInlineTagsAst.txt
new file mode 100755
index 0000000000..99ff1c522b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkInlineTagsAst.txt
@@ -0,0 +1,27 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LINK_LITERAL -> @link [0:1]
+|   |--WS ->   [0:6]
+|   |--REFERENCE -> REFERENCE [0:7]
+|   |   |--PACKAGE -> java.lang [0:7]
+|   |   |--DOT -> . [0:16]
+|   |   |--CLASS -> Integer [0:17]
+|   |   |--HASH -> # [0:24]
+|   |   `--MEMBER -> valueOf [0:25]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:32]
+|--NEWLINE -> \r\n [0:33]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [1:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [1:0]
+|   |--LINK_LITERAL -> @link [1:1]
+|   |--WS ->   [1:6]
+|   |--REFERENCE -> REFERENCE [1:7]
+|   |   |--PACKAGE -> java.lang [1:7]
+|   |   |--DOT -> . [1:16]
+|   |   |--CLASS -> Integer [1:17]
+|   |   |--HASH -> # [1:24]
+|   |   `--MEMBER -> valueOf [1:25]
+|   |--DESCRIPTION -> DESCRIPTION [1:32]
+|   |   `--TEXT ->  valueOf [1:32]
+|   `--JAVADOC_INLINE_TAG_END -> } [1:40]
+`--EOF -> <EOF> [1:41]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkToPackageAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkToPackageAst.txt
new file mode 100755
index 0000000000..cd2153d90e
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLinkToPackageAst.txt
@@ -0,0 +1,10 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LINK_LITERAL -> @link [0:1]
+|   |--WS ->   [0:6]
+|   |--REFERENCE -> REFERENCE [0:7]
+|   |   `--PACKAGE -> _com._1organizationname.appname [0:7]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:38]
+|--NEWLINE -> \r\n [0:39]
+`--EOF -> <EOF> [1:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedNewlineAndAsteriskInParametersAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedNewlineAndAsteriskInParametersAst.txt
new file mode 100755
index 0000000000..1b62864c90
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedNewlineAndAsteriskInParametersAst.txt
@@ -0,0 +1,21 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK ->   * [0:0]
+|--TEXT ->   [0:3]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:4]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:4]
+|   |--LINK_LITERAL -> @link [0:5]
+|   |--WS ->   [0:10]
+|   |--REFERENCE -> REFERENCE [0:11]
+|   |   |--CLASS -> ImmutableSortedMap [0:11]
+|   |   |--HASH -> # [0:29]
+|   |   |--MEMBER -> of [0:30]
+|   |   `--PARAMETERS -> PARAMETERS [0:32]
+|   |       |--LEFT_BRACE -> ( [0:32]
+|   |       |--NEWLINE -> \r\n [0:33]
+|   |       |--LEADING_ASTERISK ->   * [1:0]
+|   |       |--NEWLINE -> \r\n [1:3]
+|   |       |--LEADING_ASTERISK ->   * [2:0]
+|   |       |--WS ->   [2:3]
+|   |       `--RIGHT_BRACE -> ) [2:4]
+|   `--JAVADOC_INLINE_TAG_END -> } [2:5]
+`--EOF -> <EOF> [2:6]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedParamWithGenericAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedParamWithGenericAst.txt
new file mode 100755
index 0000000000..de7c8fe7ed
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedParamWithGenericAst.txt
@@ -0,0 +1,9 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--PARAM_LITERAL -> @param [0:0]
+|   |--WS ->   [0:6]
+|   |--PARAMETER_NAME -> <E> [0:7]
+|   |--WS ->   [0:10]
+|   `--DESCRIPTION -> DESCRIPTION [0:11]
+|       `--TEXT -> my favorite type [0:11]
+`--EOF -> <EOF> [0:27]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSeeReferenceWithFewNestedClassesAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSeeReferenceWithFewNestedClassesAst.txt
new file mode 100755
index 0000000000..5523b67292
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSeeReferenceWithFewNestedClassesAst.txt
@@ -0,0 +1,25 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--SEE_LITERAL -> @see [0:0]
+|   |--WS ->   [0:4]
+|   |--REFERENCE -> REFERENCE [0:5]
+|   |   |--PACKAGE -> java.lang [0:5]
+|   |   |--DOT -> . [0:14]
+|   |   |--CLASS -> Integer [0:15]
+|   |   |--DOT -> . [0:22]
+|   |   |--CLASS -> Nested [0:23]
+|   |   |--DOT -> . [0:29]
+|   |   |--CLASS -> AnotherNested [0:30]
+|   |   |--HASH -> # [0:43]
+|   |   |--MEMBER -> someMethod [0:44]
+|   |   `--PARAMETERS -> PARAMETERS [0:54]
+|   |       |--LEFT_BRACE -> ( [0:54]
+|   |       |--ARGUMENT -> String [0:55]
+|   |       |--COMMA -> , [0:61]
+|   |       |--WS ->   [0:62]
+|   |       |--ARGUMENT -> int [0:63]
+|   |       `--RIGHT_BRACE -> ) [0:66]
+|   |--WS ->   [0:67]
+|   `--DESCRIPTION -> DESCRIPTION [0:68]
+|       `--TEXT -> Description of the link [0:68]
+`--EOF -> <EOF> [0:91]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSerialAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSerialAst.txt
new file mode 100755
index 0000000000..c7c0bf9111
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSerialAst.txt
@@ -0,0 +1,39 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:0]
+|   |--SERIAL_LITERAL -> @serial [0:0]
+|   |--WS ->   [0:7]
+|   `--DESCRIPTION -> DESCRIPTION [0:8]
+|       |--TEXT -> field description [0:8]
+|       |--NEWLINE -> \r\n [0:25]
+|       |--TEXT -> on few lines [1:0]
+|       |--NEWLINE -> \r\n [1:12]
+|       |--TEXT -> and even here [2:0]
+|       `--NEWLINE -> \r\n [2:13]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:0]
+|   |--SERIAL_LITERAL -> @serial [3:0]
+|   |--WS ->   [3:7]
+|   |--LITERAL_INCLUDE -> include [3:8]
+|   `--DESCRIPTION -> DESCRIPTION [3:15]
+|       `--NEWLINE -> \r\n [3:15]
+|--JAVADOC_TAG -> JAVADOC_TAG [4:0]
+|   |--SERIAL_LITERAL -> @serial [4:0]
+|   |--WS ->   [4:7]
+|   |--LITERAL_EXCLUDE -> exclude [4:8]
+|   `--DESCRIPTION -> DESCRIPTION [4:15]
+|       `--NEWLINE -> \r\n [4:15]
+|--JAVADOC_TAG -> JAVADOC_TAG [5:0]
+|   |--SERIAL_FIELD_LITERAL -> @serialField [5:0]
+|   |--WS ->   [5:12]
+|   |--FIELD_NAME -> myField [5:13]
+|   |--WS ->   [5:20]
+|   |--FIELD_TYPE -> myObjectStreamField [5:21]
+|   |--WS ->   [5:40]
+|   `--DESCRIPTION -> DESCRIPTION [5:41]
+|       |--TEXT -> description of my serial field [5:41]
+|       `--NEWLINE -> \r\n [5:71]
+|--JAVADOC_TAG -> JAVADOC_TAG [6:0]
+|   |--SERIAL_DATA_LITERAL -> @serialData [6:0]
+|   |--WS ->   [6:11]
+|   `--DESCRIPTION -> DESCRIPTION [6:12]
+|       `--TEXT -> The data-description documents [6:12]
+`--EOF -> <EOF> [6:42]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSinceAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSinceAst.txt
new file mode 100755
index 0000000000..4908d231d8
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedSinceAst.txt
@@ -0,0 +1,17 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK -> * [0:0]
+|--WS ->   [0:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:2]
+|   |--SINCE_LITERAL -> @since [0:2]
+|   |--WS ->   [0:8]
+|   `--DESCRIPTION -> DESCRIPTION [0:9]
+|       |--TEXT -> 1.5 [0:9]
+|       `--NEWLINE -> \r\n [0:12]
+|--LEADING_ASTERISK ->  * [1:0]
+|--WS ->   [1:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [1:3]
+|   |--SINCE_LITERAL -> @since [1:3]
+|   |--WS ->   [1:9]
+|   `--DESCRIPTION -> DESCRIPTION [1:10]
+|       `--TEXT -> Release 3.4.5 [1:10]
+`--EOF -> <EOF> [1:23]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTextBeforeJavadocTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTextBeforeJavadocTagsAst.txt
new file mode 100755
index 0000000000..24ef3995bf
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTextBeforeJavadocTagsAst.txt
@@ -0,0 +1,37 @@
+JAVADOC -> JAVADOC [0:0]
+|--NEWLINE -> \r\n [0:0]
+|--LEADING_ASTERISK ->  * [1:0]
+|--TEXT ->  a b [1:2]
+|--NEWLINE -> \r\n [1:6]
+|--LEADING_ASTERISK ->  * [2:0]
+|--TEXT ->  c [2:2]
+|--NEWLINE -> \r\n [2:4]
+|--LEADING_ASTERISK ->  * [3:0]
+|--WS ->   [3:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:3]
+|   |--SEE_LITERAL -> @see [3:3]
+|   |--WS ->   [3:7]
+|   |--REFERENCE -> REFERENCE [3:8]
+|   |   `--CLASS -> Integer [3:8]
+|   |--WS ->   [3:15]
+|   `--DESCRIPTION -> DESCRIPTION [3:16]
+|       |--TEXT -> Int [3:16]
+|       `--NEWLINE -> \r\n [3:19]
+|--LEADING_ASTERISK ->  * [4:0]
+|--WS ->   [4:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [4:3]
+|   |--AUTHOR_LITERAL -> @author [4:3]
+|   |--WS ->   [4:10]
+|   `--DESCRIPTION -> DESCRIPTION [4:11]
+|       |--TEXT -> Walter White [4:11]
+|       `--NEWLINE -> \r\n [4:23]
+|--LEADING_ASTERISK ->  * [5:0]
+|--WS ->   [5:2]
+|--JAVADOC_TAG -> JAVADOC_TAG [5:3]
+|   |--AUTHOR_LITERAL -> @author [5:3]
+|   |--WS ->   [5:10]
+|   `--DESCRIPTION -> DESCRIPTION [5:11]
+|       |--TEXT -> John Snow [5:11]
+|       |--NEWLINE -> \r\n [5:20]
+|       `--TEXT ->   [6:0]
+`--EOF -> <EOF> [6:1]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTwoLinkTagsInRowAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTwoLinkTagsInRowAst.txt
new file mode 100755
index 0000000000..f4f0197a6a
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedTwoLinkTagsInRowAst.txt
@@ -0,0 +1,22 @@
+JAVADOC -> JAVADOC [0:0]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:0]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:0]
+|   |--LINK_LITERAL -> @link [0:1]
+|   |--WS ->   [0:6]
+|   |--REFERENCE -> REFERENCE [0:7]
+|   |   |--HASH -> # [0:7]
+|   |   `--MEMBER -> WHITESPACE [0:8]
+|   |--DESCRIPTION -> DESCRIPTION [0:18]
+|   |   `--TEXT ->  WHITESPACE [0:18]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:29]
+|--JAVADOC_INLINE_TAG -> JAVADOC_INLINE_TAG [0:30]
+|   |--JAVADOC_INLINE_TAG_START -> { [0:30]
+|   |--LINK_LITERAL -> @link [0:31]
+|   |--WS ->   [0:36]
+|   |--REFERENCE -> REFERENCE [0:37]
+|   |   |--HASH -> # [0:37]
+|   |   `--MEMBER -> trimFrom [0:38]
+|   |--DESCRIPTION -> DESCRIPTION [0:46]
+|   |   `--TEXT ->  trimFrom [0:46]
+|   `--JAVADOC_INLINE_TAG_END -> } [0:55]
+`--EOF -> <EOF> [0:56]
diff --git a/src/xdocs/sponsoring.xml b/src/xdocs/sponsoring.xml
index 5ef917112e..8168a65f69 100755
--- a/src/xdocs/sponsoring.xml
+++ b/src/xdocs/sponsoring.xml
@@ -18,12 +18,14 @@
     <section name="Sponsoring">
 
       <p>
-        If want to speed up a fixing and issue and want to encourage somebody in internet to resolve any issue:
+        If you want to speed up fixing of issue and want to encourage somebody in internet to resolve any issue:
       </p>
 
       <p>
+        <!-- "502 Bad Gateway" for more than a day
         <a href="https://freedomsponsors.org/search/?project_name=checkstyle">freedomsponsors - checkstyle</a>
         <br/>
+        -->
         <a href="https://www.bountysource.com/teams/checkstyle/issues">bountysource - checkstyle</a>
         <br/>
         <a href="https://salt.bountysource.com/teams/checkstyle">bountysource (salt) - checkstyle</a>
