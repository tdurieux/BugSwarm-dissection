diff --git a/README.md b/README.md
index f6aa64ed3e..a0494c024d 100755
--- a/README.md
+++ b/README.md
@@ -1,4 +1,5 @@
 [![][travis img]][travis]
+[![][appveyor img]][appveyor]
 [![][coverage img]][coverage]
 [![][mavenbadge img]][mavenbadge]
 [![][versioneye img]][versioneye]
@@ -8,7 +9,7 @@
 Members chat: [![][gitter img]][gitter]
 Contributors chat: [![https://gitter.im/checkstyle/checkstyle](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/checkstyle/checkstyle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
 
-![](https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/site/resources/images/logo.png)
+![](https://raw.githubusercontent.com/checkstyle/resources/master/img/checkstyle-logos/checkstyle-logo-260x99.png)
 
 Checkstyle is a tool for
 checking Java source code for adherence to a Code Standard or set of validation rules (best practices).
@@ -19,7 +20,8 @@ Documentation is available in HTML format, see http://checkstyle.sourceforge.net
 
 Continuous integration and Quality reports
 ======================
-Travis: [![][travis img]][travis]
+Travis (Linux build): [![][travis img]][travis]
+Appveyor (Windows build): [![][appveyor img]][appveyor]
 
 Quality reports: http://checkstyle.sourceforge.net/project-reports.html
 
@@ -60,6 +62,9 @@ directory.
 [travis]:http://travis-ci.org/checkstyle/checkstyle
 [travis img]:https://secure.travis-ci.org/checkstyle/checkstyle.png
 
+[appveyor]:https://ci.appveyor.com/project/romani/checkstyle
+[appveyor img]:https://ci.appveyor.com/api/projects/status/dvsups9tbw64378v?svg=true
+
 [sonar]:http://nemo.sonarqube.org/dashboard/index/com.puppycrawl.tools:checkstyle
 [sonar img]:https://dev.eclipse.org/sonar/images/logo.png?1400775536
 
diff --git a/appveyor.yml b/appveyor.yml
index 397d48c77c..57fea24875 100755
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -1,16 +1,14 @@
+os: Windows Server 2012
 version: '{build}'
 skip_tags: true
 clone_depth: 10
-environment:
-  matrix:
-    #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
-    - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
 branches:
   only:
     - master
   except:
     - gh-pages
-os: Windows Server 2012
+init:
+  - git config --global core.autocrlf true
 install:
   - ps: |
       Add-Type -AssemblyName System.IO.Compression.FileSystem
@@ -22,10 +20,17 @@ install:
         [System.IO.Compression.ZipFile]::ExtractToDirectory("C:\maven-bin.zip", "C:\maven")
       }
   - cmd: SET PATH=C:\maven\apache-maven-3.2.5\bin;%JAVA_HOME%\bin;%PATH%
-  - cmd: SET MAVEN_OPTS=-XX:MaxPermSize=2g -Xmx4g
-  - cmd: SET JAVA_OPTS=-XX:MaxPermSize=2g -Xmx4g
+  - cmd: git config --global core.autocrlf
   - cmd: mvn --version
   - cmd: java -version
+cache:
+  - C:\maven\
+  - C:\Users\appveyor\.m2
+
+environment:
+  matrix:
+    #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
+    - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
 build_script: >
   mvn clean site 
   -Dlinkcheck.skip=true -Dmaven.javadoc.skip=true 
@@ -33,6 +38,3 @@ build_script: >
   -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true
 test_script:
   - mvn clean verify
-cache:
-  - C:\maven\
-  - C:\Users\appveyor\.m2
diff --git a/config/ant-phase-verify.xml b/config/ant-phase-verify.xml
index 867c11556b..b2277f1c55 100755
--- a/config/ant-phase-verify.xml
+++ b/config/ant-phase-verify.xml
@@ -34,6 +34,7 @@
       <classpath path="${mvn.runtime_classpath}"/>
       <property key="checkstyle.cache.file" file="${mvn.project.build.directory}/cachefile"/>
       <property key="checkstyle.header.file" file="config/java.header"/>
+      <property key="checkstyle.regexp.header.file" file="config/java_regexp.header"/>
       <property key="checkstyle.importcontrol.file" file="config/import-control.xml"/>
       <property key="checkstyle.suppressions.file"
                 file="config/suppressions.xml"/>
diff --git a/config/build.xml b/config/build.xml
index 2488312039..9d593dd7c1 100755
--- a/config/build.xml
+++ b/config/build.xml
@@ -36,6 +36,7 @@
       <classpath refid="run.classpath"/>
       <property key="checkstyle.cache.file" file="${target.dir}/cachefile"/>
       <property key="checkstyle.header.file" file="config/java.header"/>
+      <property key="checkstyle.regexp.header.file" file="config/java_regexp.header"/>
       <property key="checkstyle.importcontrol.file" file="config/import-control.xml"/>
       <property key="checkstyle.suppressions.file"
                 file="config/suppressions.xml"/>
diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 9a433aa1e3..e4502c0933 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -53,11 +53,14 @@
   </module>
 
   <module name="RegexpMultiline"/>
-
-  <!-- 
-  <module name="RegexpHeader"/>
+  <module name="RegexpHeader">
+    <property name="headerFile" value="${checkstyle.regexp.header.file}"/>
+    <property name="fileExtensions" value="java"/>
+  </module>
+  <!--
   <module name="UniqueProperties"/>
   -->
+
   <module name="TreeWalker">
     <property name="tabWidth" value="4"/>
 
diff --git a/config/java_regexp.header b/config/java_regexp.header
new file mode 100755
index 0000000000..c481e3ff1b
--- /dev/null
+++ b/config/java_regexp.header
@@ -0,0 +1,18 @@
+^/{80}$
+^/{2} checkstyle: Checks Java source code for adherence to a set of rules.$
+^/{2} Copyright \(C\) \d\d\d\d-\d\d\d\d the original author or authors.$
+^/{2}$
+^/{2} This library is free software; you can redistribute it and/or$
+^/{2} modify it under the terms of the GNU Lesser General Public$
+^/{2} License as published by the Free Software Foundation; either$
+^/{2} version \d.\d of the License, or \(at your option\) any later version.$
+^/{2}$
+^/{2} This library is distributed in the hope that it will be useful,$
+^/{2} but WITHOUT ANY WARRANTY; without even the implied warranty of$
+^/{2} MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU$
+^/{2} Lesser General Public License for more details.$
+^/{2}$
+^/{2} You should have received a copy of the GNU Lesser General Public$
+^/{2} License along with this library; if not, write to the Free Software$
+^/{2} Foundation, Inc., \d\d Temple Place, Suite \d\d\d, Boston, MA  \d\d\d\d\d-\d\d\d\d  USA$
+^/{80}$
diff --git a/pom.xml b/pom.xml
index b66b7e351d..3bbdba7cca 100755
--- a/pom.xml
+++ b/pom.xml
@@ -167,7 +167,7 @@
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
     <projectVersion>${project.version}</projectVersion>
-    <antlr4.version>4.5</antlr4.version>
+    <antlr4.version>4.5.1</antlr4.version>
     <maven.site.plugin.version>3.4</maven.site.plugin.version>
     <maven.findbugs.plugin.version>3.0.1</maven.findbugs.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
@@ -190,13 +190,6 @@
       <groupId>org.antlr</groupId>
       <artifactId>antlr4-runtime</artifactId>
       <version>${antlr4.version}</version>
-      <exclusions>
-        <exclusion>
-	  <!-- 1.0.2 version is excluded, we will use version 1.0.1 from antlr:antlr:2.7.7 -->
-          <groupId>org.abego.treelayout</groupId>
-          <artifactId>org.abego.treelayout.core</artifactId>
-        </exclusion>
-      </exclusions>
     </dependency>
     <dependency>
       <groupId>commons-beanutils</groupId>
@@ -243,11 +236,13 @@
     	<groupId>org.powermock</groupId>
     	<artifactId>powermock-api-mockito</artifactId>
     	<version>1.6.2</version>
+        <scope>test</scope>
     </dependency>
     <dependency>
     	<groupId>org.powermock</groupId>
     	<artifactId>powermock-module-junit4</artifactId>
     	<version>1.6.2</version>
+        <scope>test</scope>
     </dependency>
 
   </dependencies>
@@ -745,6 +740,7 @@
               <dir>config</dir>
               <excludes>
                 <exclude>java.header</exclude>
+                <exclude>java_regexp.header</exclude>
               </excludes>
             </validationSet>
             <validationSet>
@@ -1136,7 +1132,6 @@
             <regex><pattern>.*.checks.coding.AbstractSuperCheck</pattern><branchRate>78</branchRate><lineRate>89</lineRate></regex>
             <regex><pattern>.*.checks.coding.DeclarationOrderCheck</pattern><branchRate>82</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.coding.ExplicitInitializationCheck</pattern><branchRate>91</branchRate><lineRate>97</lineRate></regex>
-            <regex><pattern>.*.checks.coding.FallThroughCheck</pattern><branchRate>90</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.coding.FinalLocalVariableCheck</pattern><branchRate>82</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalInstantiationCheck</pattern><branchRate>81</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalTokenCheck</pattern><branchRate>83</branchRate><lineRate>100</lineRate></regex>
@@ -1152,14 +1147,14 @@
             <regex><pattern>.*.checks.coding.VariableDeclarationUsageDistanceCheck</pattern><branchRate>90</branchRate><lineRate>98</lineRate></regex>
 
 
-            <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>85</branchRate><lineRate>85</lineRate></regex>
-            <regex><pattern>.*.checks.header.HeaderCheck</pattern><branchRate>18</branchRate><lineRate>45</lineRate></regex>
-            <regex><pattern>.*.checks.header.RegexpHeaderCheck</pattern><branchRate>87</branchRate><lineRate>93</lineRate></regex>
+            <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>90</branchRate><lineRate>87</lineRate></regex>
+            <regex><pattern>.*.checks.header.HeaderCheck</pattern><branchRate>31</branchRate><lineRate>50</lineRate></regex>
+            <regex><pattern>.*.checks.header.RegexpHeaderCheck</pattern><branchRate>88</branchRate><lineRate>94</lineRate></regex>
 
 
             <regex><pattern>.*.checks.imports.CustomImportOrderCheck</pattern><branchRate>98</branchRate><lineRate>100</lineRate></regex>
 
-            <regex><pattern>.*.checks.indentation.ArrayInitHandler</pattern><branchRate>83</branchRate><lineRate>97</lineRate></regex>
+            <regex><pattern>.*.checks.indentation.ArrayInitHandler</pattern><branchRate>87</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.indentation.BlockParentHandler</pattern><branchRate>86</branchRate><lineRate>98</lineRate></regex>
             <regex><pattern>.*.checks.indentation.ElseHandler</pattern><branchRate>75</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.indentation.AbstractExpressionHandler</pattern><branchRate>91</branchRate><lineRate>97</lineRate></regex>
@@ -1167,7 +1162,6 @@
             <regex><pattern>.*.checks.indentation.ImportHandler</pattern><branchRate>50</branchRate><lineRate>87</lineRate></regex>
             <regex><pattern>.*.checks.indentation.IndentationCheck</pattern><branchRate>100</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.indentation.LineWrappingHandler</pattern><branchRate>87</branchRate><lineRate>95</lineRate></regex>
-            <regex><pattern>.*.checks.indentation.MethodCallHandler</pattern><branchRate>63</branchRate><lineRate>87</lineRate></regex>
             <regex><pattern>.*.checks.indentation.MethodCallLineWrapHandler</pattern><branchRate>0</branchRate><lineRate>0</lineRate></regex>
             <regex><pattern>.*.checks.indentation.MethodDefHandler</pattern><branchRate>87</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.indentation.NewHandler</pattern><branchRate>83</branchRate><lineRate>77</lineRate></regex>
@@ -1217,7 +1211,7 @@
 
             <regex><pattern>.*.filters.SuppressionCommentFilter</pattern><branchRate>83</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.filters.SuppressionCommentFilter\$Tag</pattern><branchRate>96</branchRate><lineRate>94</lineRate></regex>
-            <regex><pattern>.*.filters.SuppressionsLoader</pattern><branchRate>68</branchRate><lineRate>77</lineRate></regex>
+            <regex><pattern>.*.filters.SuppressionsLoader</pattern><branchRate>63</branchRate><lineRate>77</lineRate></regex>
             <regex><pattern>.*.filters.SuppressWithNearbyCommentFilter</pattern><branchRate>76</branchRate><lineRate>89</lineRate></regex>
             <regex><pattern>.*.filters.SuppressWithNearbyCommentFilter\$Tag</pattern><branchRate>88</branchRate><lineRate>78</lineRate></regex>
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
index 53b8173bab..dfb6e99311 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
@@ -134,7 +134,7 @@ void destroy() {
             }
             finally {
                 if (out != null) {
-                    this.flushAndCloseOutStream(out);
+                    flushAndCloseOutStream(out);
                 }
             }
         }
@@ -144,7 +144,7 @@ void destroy() {
      * Flushes and closes output stream.
      * @param stream the output stream
      */
-    private void flushAndCloseOutStream(OutputStream stream) {
+    private static void flushAndCloseOutStream(OutputStream stream) {
         try {
             Flushables.flush(stream, false);
             Closeables.close(stream, false);
@@ -180,7 +180,7 @@ void checkedOk(String fileName, long timestamp) {
      * @param configuration the GlobalProperties
      * @return the hashcode for <code>configuration</code>
      */
-    private String getConfigHashCode(Serializable configuration) {
+    private static String getConfigHashCode(Serializable configuration) {
         try {
             // im-memory serialization of Configuration
 
@@ -191,7 +191,7 @@ private String getConfigHashCode(Serializable configuration) {
                 oos.writeObject(configuration);
             }
             finally {
-                this.flushAndCloseOutStream(oos);
+                flushAndCloseOutStream(oos);
             }
 
             // Instead of hexEncoding baos.toByteArray() directly we
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
index 093399861b..b87d00231d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
@@ -130,7 +130,7 @@ protected String getMessageBundle() {
      * @return name of a resource bundle that contains the messages
      * used by the module.
      */
-    String getMessageBundle(final String className) {
+    static String getMessageBundle(final String className) {
         final int endIndex = className.lastIndexOf('.');
         final String messages = "messages";
         if (endIndex < 0) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
index e6e0079f3b..48cfd6349f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java
@@ -94,7 +94,7 @@ public void visitToken(DetailAST ast) {
      * @param frameStack Stack containing the FrameTree being built
      * @param ast AST to parse
      */
-    private void collectDeclarations(Deque<LexicalFrame> frameStack,
+    private static void collectDeclarations(Deque<LexicalFrame> frameStack,
         DetailAST ast) {
         final LexicalFrame frame = frameStack.peek();
         switch (ast.getType()) {
@@ -146,7 +146,7 @@ private void collectDeclarations(Deque<LexicalFrame> frameStack,
      * @param ast variable token
      * @param frame current frame
      */
-    private void collectVariableDeclarations(DetailAST ast, LexicalFrame frame) {
+    private static void collectVariableDeclarations(DetailAST ast, LexicalFrame frame) {
         final String name =
                 ast.findFirstToken(TokenTypes.IDENT).getText();
         if (frame instanceof ClassFrame) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 6af8b777f5..ed0f4b0887 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -180,7 +180,7 @@ else if (ast.getType() == TokenTypes.METHOD_DEF) {
      * @return true  if exception is unchecked
      *         false if exception is checked
      */
-    protected boolean isUnchecked(Class<?> exception) {
+    protected static boolean isUnchecked(Class<?> exception) {
         return isSubclass(exception, RuntimeException.class)
             || isSubclass(exception, Error.class);
     }
@@ -195,7 +195,7 @@ protected boolean isUnchecked(Class<?> exception) {
      * @return true  if aChild is subclass of aParent
      *         false otherwise
      */
-    protected boolean isSubclass(Class<?> child, Class<?> parent) {
+    protected static boolean isSubclass(Class<?> child, Class<?> parent) {
         return parent != null && child != null
             &&  parent.isAssignableFrom(child);
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
index ec1124c500..2525dd0bed 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java
@@ -220,7 +220,7 @@ public void visitToken(DetailAST ast) {
      * @param literal String literal.
      * @return true if literal has Unicode chars.
      */
-    private boolean hasUnicodeChar(String literal) {
+    private static boolean hasUnicodeChar(String literal) {
         return sUnicodeRegexp.matcher(literal).find();
     }
 
@@ -230,7 +230,7 @@ private boolean hasUnicodeChar(String literal) {
      * @param pattern RegExp for valid characters.
      * @return true, if String literal contains Unicode control chars.
      */
-    private boolean isOnlyUnicodeValidChars(String literal, Pattern pattern) {
+    private static boolean isOnlyUnicodeValidChars(String literal, Pattern pattern) {
         final int unicodeMatchesCounter =
                 countMatches(sUnicodeRegexp, literal);
         final int unicodeValidMatchesCouter =
@@ -278,7 +278,7 @@ private boolean hasTrailComment(DetailAST ast) {
      * @param target String literal.
      * @return count of regexp matchers.
      */
-    private int countMatches(Pattern pattern, String target) {
+    private static int countMatches(Pattern pattern, String target) {
         int matcherCounter = 0;
         final Matcher matcher = pattern.matcher(target);
         while (matcher.find()) {
@@ -292,7 +292,7 @@ private int countMatches(Pattern pattern, String target) {
      * @param ast current token.
      * @return variable definition.
      */
-    private DetailAST getVariableDef(DetailAST ast) {
+    private static DetailAST getVariableDef(DetailAST ast) {
         DetailAST result = ast.getParent();
         while (result != null
                 && result.getType() != TokenTypes.VARIABLE_DEF) {
@@ -306,7 +306,7 @@ private DetailAST getVariableDef(DetailAST ast) {
      * @param ast current token.
      * @return semi token or null.
      */
-    private DetailAST getSemi(DetailAST ast) {
+    private static DetailAST getSemi(DetailAST ast) {
         DetailAST result = ast.getParent();
         while (result != null
                 && result.getLastChild().getType() != TokenTypes.SEMI) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 7079345c73..ec47163a04 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -290,7 +290,7 @@ public void visitToken(DetailAST ast) {
      * @param ast annotation token
      * @return list values
      */
-    private List<String> getAllAnnotationValues(DetailAST ast) {
+    private static List<String> getAllAnnotationValues(DetailAST ast) {
         // get values of annotation
         List<String> values = null;
         final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
@@ -326,7 +326,7 @@ public void visitToken(DetailAST ast) {
      * @param values list of values in the annotation
      * @return whether annotation is empty or contains some values
      */
-    private boolean isAnnotationEmpty(List<String> values) {
+    private static boolean isAnnotationEmpty(List<String> values) {
         return values == null;
     }
 
@@ -335,7 +335,7 @@ private boolean isAnnotationEmpty(List<String> values) {
      * @param ast the AST node to get the child of
      * @return get target of annotation
      */
-    private DetailAST getAnnotationTarget(DetailAST ast) {
+    private static DetailAST getAnnotationTarget(DetailAST ast) {
         DetailAST targetAST = null;
         DetailAST parentAST = ast.getParent();
         if (parentAST != null) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index 5d6753f6a3..1c43e4bce5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -186,7 +186,7 @@ private boolean checkClassName() {
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
-    private boolean checkName(DetailAST method) {
+    private static boolean checkName(DetailAST method) {
         final DetailAST ident = method.findFirstToken(TokenTypes.IDENT);
         return "main".equals(ident.getText());
     }
@@ -196,7 +196,7 @@ private boolean checkName(DetailAST method) {
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
-    private boolean checkModifiers(DetailAST method) {
+    private static boolean checkModifiers(DetailAST method) {
         final DetailAST modifiers =
             method.findFirstToken(TokenTypes.MODIFIERS);
 
@@ -209,7 +209,7 @@ private boolean checkModifiers(DetailAST method) {
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
-    private boolean checkType(DetailAST method) {
+    private static boolean checkType(DetailAST method) {
         final DetailAST type =
             method.findFirstToken(TokenTypes.TYPE).getFirstChild();
         return type.getType() == TokenTypes.LITERAL_VOID;
@@ -220,7 +220,7 @@ private boolean checkType(DetailAST method) {
      * @param method the METHOD_DEF node
      * @return true if check passed, false otherwise
      */
-    private boolean checkParams(DetailAST method) {
+    private static boolean checkParams(DetailAST method) {
         final DetailAST params = method.findFirstToken(TokenTypes.PARAMETERS);
         if (params.getChildCount() != 1) {
             return false;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
index 713bb601bb..3136162988 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
@@ -95,7 +95,7 @@ protected void processFiltered(File file, List<String> lines) {
      * @return line number of first occurrence. If no key found in properties
      *         file, 0 is returned
      */
-    protected int getLineNumber(List<String> lines, String keyName) {
+    protected static int getLineNumber(List<String> lines, String keyName) {
         final String keyPatternString =
                 "^" + keyName.replace(" ", "\\\\ ") + "[\\s:=].*$";
         final Pattern keyPattern = Pattern.compile(keyPatternString);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
index 551b64dde6..9ba1672ff1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java
@@ -182,7 +182,7 @@
      * @throws ConversionException if cannot convert string.
      */
     public void setElementStyle(final String style) {
-        this.style = this.getOption(ElementStyle.class, style);
+        this.style = getOption(ElementStyle.class, style);
     }
 
     /**
@@ -192,7 +192,7 @@ public void setElementStyle(final String style) {
      * @throws ConversionException if cannot convert string.
      */
     public void setTrailingArrayComma(final String comma) {
-        this.comma = this.getOption(TrailingArrayComma.class, comma);
+        this.comma = getOption(TrailingArrayComma.class, comma);
     }
 
     /**
@@ -202,7 +202,7 @@ public void setTrailingArrayComma(final String comma) {
      * @throws ConversionException if cannot convert string.
      */
     public void setClosingParens(final String parens) {
-        this.parens = this.getOption(ClosingParens.class, parens);
+        this.parens = getOption(ClosingParens.class, parens);
     }
 
     /**
@@ -212,7 +212,7 @@ public void setClosingParens(final String parens) {
      * @param string the string representing the enum
      * @return the enum type
      */
-    private <T extends Enum<T>> T getOption(final Class<T> enuclass,
+    private static <T extends Enum<T>> T getOption(final Class<T> enuclass,
         final String string) {
         try {
             return Enum.valueOf(enuclass, string.trim().toUpperCase(Locale.ENGLISH));
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
index 55e66f91f2..42172677e2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
@@ -148,7 +148,7 @@ public void visitToken(final DetailAST ast) {
             this.getFileContents().getJavadocBefore(ast.getLineNo());
 
 
-        final boolean containastag = this.containsJavadocTag(javadoc);
+        final boolean containastag = containsJavadocTag(javadoc);
         if (containastag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {
             this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,
                 JavadocTagInfo.INHERIT_DOC.getText());
@@ -178,7 +178,7 @@ public void visitToken(final DetailAST ast) {
      * @param javadoc the javadoc of the AST
      * @return true if contains the tag
      */
-    private boolean containsJavadocTag(final TextBlock javadoc) {
+    private static boolean containsJavadocTag(final TextBlock javadoc) {
         if (javadoc == null) {
             return false;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 9f94b3b291..c521edfc75 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -141,14 +141,14 @@ public SuppressWarningsCheck() {
     /** {@inheritDoc} */
     @Override
     public void visitToken(final DetailAST ast) {
-        final DetailAST annotation = this.getSuppressWarnings(ast);
+        final DetailAST annotation = getSuppressWarnings(ast);
 
         if (annotation == null) {
             return;
         }
 
         final DetailAST warningHolder =
-            this.findWarningsHolder(annotation);
+            findWarningsHolder(annotation);
 
         final DetailAST token =
                 warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
@@ -177,7 +177,7 @@ public void visitToken(final DetailAST ast) {
                     //typical case
                     case TokenTypes.STRING_LITERAL:
                         final String warningText =
-                            this.removeQuotes(warning.getFirstChild().getText());
+                            removeQuotes(warning.getFirstChild().getText());
                         this.logMatch(warning.getLineNo(),
                                 warning.getColumnNo(), warningText);
                         break;
@@ -210,7 +210,7 @@ public void visitToken(final DetailAST ast) {
      * @param ast the AST
      * @return the {@link SuppressWarnings SuppressWarnings} annotation
      */
-    private DetailAST getSuppressWarnings(DetailAST ast) {
+    private static DetailAST getSuppressWarnings(DetailAST ast) {
         final DetailAST annotation = AnnotationUtility.getAnnotation(
             ast, SuppressWarningsCheck.SUPPRESS_WARNINGS);
 
@@ -242,7 +242,7 @@ private void logMatch(final int lineNo,
      * @param annotation the annotation
      * @return a Token representing the expr.
      */
-    private DetailAST findWarningsHolder(final DetailAST annotation) {
+    private static DetailAST findWarningsHolder(final DetailAST annotation) {
         final DetailAST annValuePair =
             annotation.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);
         final DetailAST annArrayInit;
@@ -275,7 +275,7 @@ private DetailAST findWarningsHolder(final DetailAST annotation) {
      * @param warning the warning string
      * @return the string without two quotes
      */
-    private String removeQuotes(final String warning) {
+    private static String removeQuotes(final String warning) {
         return warning.substring(1, warning.length() - 1);
     }
 
@@ -290,13 +290,13 @@ private String removeQuotes(final String warning) {
     private void walkConditional(final DetailAST cond) {
         if (cond.getType() != TokenTypes.QUESTION) {
             final String warningText =
-                this.removeQuotes(cond.getText());
+                removeQuotes(cond.getText());
             this.logMatch(cond.getLineNo(), cond.getColumnNo(), warningText);
             return;
         }
 
-        this.walkConditional(this.getCondLeft(cond));
-        this.walkConditional(this.getCondRight(cond));
+        this.walkConditional(getCondLeft(cond));
+        this.walkConditional(getCondRight(cond));
     }
 
     /**
@@ -307,7 +307,7 @@ private void walkConditional(final DetailAST cond) {
      * @return either the value
      * or another conditional
      */
-    private DetailAST getCondLeft(final DetailAST cond) {
+    private static DetailAST getCondLeft(final DetailAST cond) {
         final DetailAST colon = cond.findFirstToken(TokenTypes.COLON);
         return colon.getPreviousSibling();
     }
@@ -320,7 +320,7 @@ private DetailAST getCondLeft(final DetailAST cond) {
      * @return either the value
      * or another conditional
      */
-    private DetailAST getCondRight(final DetailAST cond) {
+    private static DetailAST getCondRight(final DetailAST cond) {
         final DetailAST colon = cond.findFirstToken(TokenTypes.COLON);
         return colon.getNextSibling();
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index ab725b30e9..5c3a8ab5ad 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -237,7 +237,7 @@ public void visitToken(DetailAST ast) {
      * @param ast <code>DetailAST</code>.
      * @return <code>DetailAST</code>.
      */
-    private DetailAST skipAnnotationOnlyLines(DetailAST ast) {
+    private static DetailAST skipAnnotationOnlyLines(DetailAST ast) {
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         if (modifiers == null) {
             return ast;
@@ -268,7 +268,7 @@ private DetailAST skipAnnotationOnlyLines(DetailAST ast) {
      * @param modifiers <code>DetailAST</code>.
      * @return <code>DetailAST</code> or null if there are no annotations.
      */
-    private DetailAST findLastAnnotation(DetailAST modifiers) {
+    private static DetailAST findLastAnnotation(DetailAST modifiers) {
         DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);
         while (annot != null && annot.getNextSibling() != null
                && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index abec47f452..6f1c65a038 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -204,7 +204,7 @@ else if (getAbstractOption() == RightCurlyOption.ALONE
      * @param ast detail ast.
      * @return object that contain all details to make a validation.
      */
-    private Details getDetails(DetailAST ast) {
+    private static Details getDetails(DetailAST ast) {
         // Attempt to locate the tokens to do the check
         boolean shouldCheckLastRcurly = false;
         DetailAST rcurly = null;
@@ -289,7 +289,7 @@ private Details getDetails(DetailAST ast) {
      * @param lcurly left curly.
      * @return true if definition body is empty.
      */
-    private boolean isEmptyBody(DetailAST lcurly) {
+    private static boolean isEmptyBody(DetailAST lcurly) {
         boolean result = false;
         if (lcurly.getParent().getType() == TokenTypes.OBJBLOCK) {
             if (lcurly.getNextSibling().getType() == TokenTypes.RCURLY) {
@@ -307,7 +307,7 @@ else if (lcurly.getFirstChild().getType() == TokenTypes.RCURLY) {
      * @param ast the given node.
      * @return the token which represents next lexical item.
      */
-    private DetailAST getNextToken(DetailAST ast) {
+    private static DetailAST getNextToken(DetailAST ast) {
         DetailAST next = null;
         DetailAST parent = ast;
         while (parent != null && next == null) {
@@ -324,7 +324,7 @@ private DetailAST getNextToken(DetailAST ast) {
      * @return
      *        True, if right curly has line break before.
      */
-    private boolean hasLineBreakBefore(DetailAST rightCurly) {
+    private static boolean hasLineBreakBefore(DetailAST rightCurly) {
         if (rightCurly != null) {
             final DetailAST previousToken = rightCurly.getPreviousSibling();
             if (previousToken != null && rightCurly.getLineNo() == previousToken.getLineNo()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index 04b21a856c..4fa2cfe2ba 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -175,7 +175,7 @@ else if (parent.getType() == TokenTypes.CTOR_DEF
      * @param parent parent AST
      * @return tru if no parameters found
      */
-    private boolean isZeroParameters(DetailAST parent) {
+    private static boolean isZeroParameters(DetailAST parent) {
 
         final DetailAST args = parent.getNextSibling();
         return args == null || args.getType() != TokenTypes.ELIST || args.getChildCount() != 0;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java
index 2f3ec751b6..371fd5163b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java
@@ -167,7 +167,7 @@ private static boolean containsOneArgument(DetailAST methodCall) {
      * @param objCalledOn object AST
      * @return if it is string literal
      */
-    private boolean isStringLiteral(DetailAST objCalledOn) {
+    private static boolean isStringLiteral(DetailAST objCalledOn) {
         return objCalledOn.getType() == TokenTypes.STRING_LITERAL
                 || objCalledOn.getType() == TokenTypes.LITERAL_NEW
                 || objCalledOn.getType() == TokenTypes.DOT;
@@ -187,7 +187,7 @@ private boolean isStringLiteral(DetailAST objCalledOn) {
      * @param expr the argument expression
      * @return - true if any child matches the set of tokens, false if not
      */
-    private boolean containsAllSafeTokens(final DetailAST expr) {
+    private static boolean containsAllSafeTokens(final DetailAST expr) {
         DetailAST arg = expr.getFirstChild();
 
         if (arg.branchContains(TokenTypes.METHOD_CALL)) {
@@ -214,7 +214,7 @@ private boolean containsAllSafeTokens(final DetailAST expr) {
      * @param currentAST current token in the argument expression
      * @return the next relevant token
      */
-    private DetailAST skipVariableAssign(final DetailAST currentAST) {
+    private static DetailAST skipVariableAssign(final DetailAST currentAST) {
         if (currentAST.getType() == TokenTypes.ASSIGN
                 && currentAST.getFirstChild().getType() == TokenTypes.IDENT) {
             return currentAST.getFirstChild().getNextSibling();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
index 88c4d46ab6..855f4402a1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java
@@ -107,7 +107,7 @@ else if (type.getFirstChild().getType() == TokenTypes.LITERAL_INT
      * @param firstChild the AST to check
      * @return true iff firstChild is a parameter of an Object type.
      */
-    private boolean isObjectParam(AST firstChild) {
+    private static boolean isObjectParam(AST firstChild) {
         final AST modifiers = firstChild.getFirstChild();
         final AST type = modifiers.getNextSibling();
         switch (type.getFirstChild().getType()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
index 4c767dc0aa..95d4a0ceff 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java
@@ -107,7 +107,7 @@ public void visitToken(DetailAST ast) {
      * @param exprStart exprssion
      * @return true is literal is initialized by zero symbol
      */
-    private boolean isZeroChar(DetailAST exprStart) {
+    private static boolean isZeroChar(DetailAST exprStart) {
         return isZero(exprStart)
             || exprStart.getType() == TokenTypes.CHAR_LITERAL
             && "'\\0'".equals(exprStart.getText());
@@ -118,7 +118,7 @@ private boolean isZeroChar(DetailAST exprStart) {
      * @param ast Variable def AST
      * @return true is that is a case that need to be skipped.
      */
-    private boolean isSkipCase(DetailAST ast) {
+    private static boolean isSkipCase(DetailAST ast) {
         // do not check local variables and
         // fields declared in interface/annotations
         if (ScopeUtils.isLocalVariableDef(ast)
@@ -141,7 +141,7 @@ private boolean isSkipCase(DetailAST ast) {
      * @param type type to check.
      * @return true if it is an object type.
      */
-    private boolean isObjectType(DetailAST type) {
+    private static boolean isObjectType(DetailAST type) {
         final int objectType = type.getFirstChild().getType();
         return objectType == TokenTypes.IDENT || objectType == TokenTypes.DOT
                 || objectType == TokenTypes.ARRAY_DECLARATOR;
@@ -153,7 +153,7 @@ private boolean isObjectType(DetailAST type) {
      * @return true if it's a numeric type.
      * @see TokenTypes
      */
-    private boolean isNumericType(int type) {
+    private static boolean isNumericType(int type) {
         return type == TokenTypes.LITERAL_BYTE
                 || type == TokenTypes.LITERAL_SHORT
                 || type == TokenTypes.LITERAL_INT
@@ -166,7 +166,7 @@ private boolean isNumericType(int type) {
      * @param expr node to check.
      * @return true if given node contains numeric constant for zero.
      */
-    private boolean isZero(DetailAST expr) {
+    private static boolean isZero(DetailAST expr) {
         final int type = expr.getType();
         switch (type) {
             case TokenTypes.NUM_FLOAT:
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index d15e07dfae..19a6d3fa1d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -132,9 +132,7 @@ public void init() {
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nextGroup = ast.getNextSibling();
-        final boolean isLastGroup =
-                nextGroup == null
-                 || nextGroup.getType() != TokenTypes.CASE_GROUP;
+        final boolean isLastGroup = nextGroup.getType() != TokenTypes.CASE_GROUP;
         if (isLastGroup && !checkLastGroup) {
             // we do not need to check last group
             return;
@@ -191,19 +189,14 @@ private boolean isTerminated(final DetailAST ast, boolean useBreak,
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
-     * @param ast SLIST to check
+     * @param slistAst SLIST to check
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if SLIST is terminated.
      */
-    private boolean checkSlist(final DetailAST ast, boolean useBreak,
+    private boolean checkSlist(final DetailAST slistAst, boolean useBreak,
                                boolean useContinue) {
-        DetailAST lastStmt = ast.getLastChild();
-        if (lastStmt == null) {
-            // if last case in switch is empty then slist is empty
-            // since this is a last case it is not a fall-through
-            return true;
-        }
+        DetailAST lastStmt = slistAst.getLastChild();
 
         if (lastStmt.getType() == TokenTypes.RCURLY) {
             lastStmt = lastStmt.getPreviousSibling();
@@ -286,15 +279,14 @@ private boolean checkTry(final DetailAST ast, boolean useBreak,
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
-     * @param ast loop to check
+     * @param literalSwitchAst loop to check
      * @param useContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
-    private boolean checkSwitch(final DetailAST ast, boolean useContinue) {
-        DetailAST caseGroup = ast.findFirstToken(TokenTypes.CASE_GROUP);
+    private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {
+        DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = caseGroup != null;
-        while (isTerminated && caseGroup != null
-               && caseGroup.getType() != TokenTypes.RCURLY) {
+        while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index 098a6aaad0..ca0fff5848 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -183,7 +183,7 @@ public void visitToken(DetailAST ast) {
      * @param parentType token AST
      * @return true is token type is in arithmetic operator
      */
-    private boolean isAssignOperator(int parentType) {
+    private static boolean isAssignOperator(int parentType) {
         return TokenTypes.POST_DEC == parentType
                 || TokenTypes.DEC == parentType
                 || TokenTypes.POST_INC == parentType
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java
index c3722fcafa..3a24037b75 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java
@@ -84,7 +84,7 @@ public void visitToken(DetailAST detailAST) {
      * @param parentToken - parent node for types (TYPE or BOR)
      * @return list, that contains all exception types in current catch
      */
-    public List<DetailAST> getAllExceptionTypes(DetailAST parentToken) {
+    public static List<DetailAST> getAllExceptionTypes(DetailAST parentToken) {
         DetailAST currentNode = parentToken.getFirstChild();
         final List<DetailAST> exceptionTypes = new LinkedList<>();
         if (currentNode.getType() == TokenTypes.BOR) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
index 61bb4ad189..006ccd9a46 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java
@@ -101,7 +101,7 @@ public void visitToken(DetailAST ast) {
      * @param ast node to be represented as string
      * @return string representation of AST node
      */
-    private String convertToString(DetailAST ast) {
+    private static String convertToString(DetailAST ast) {
         final String tokenText;
         if (ast.getType() == TokenTypes.LABELED_STAT) {
             tokenText = ast.getFirstChild().getText() + ast.getText();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
index d08d885d34..4bd1e1436f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java
@@ -208,7 +208,7 @@ private static boolean isInNoBraceControlStatement(DetailAST ast) {
      * @param ast assignment AST
      * @return whether the context of the assignemt AST indicates the idiom
      */
-    private boolean isInWhileIdiom(DetailAST ast) {
+    private static boolean isInWhileIdiom(DetailAST ast) {
         if (!isComparison(ast.getParent())) {
             return false;
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
index c508180099..80e3ea0710 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java
@@ -202,7 +202,7 @@ public void visitToken(DetailAST ast) {
      * @param constantDefAST constant ast
      * @return true if magic number is present
      */
-    private boolean isMagicNumberExists(DetailAST ast, DetailAST constantDefAST) {
+    private static boolean isMagicNumberExists(DetailAST ast, DetailAST constantDefAST) {
         boolean found = false;
         DetailAST astNode = ast.getParent();
         while (astNode != constantDefAST) {
@@ -222,7 +222,7 @@ private boolean isMagicNumberExists(DetailAST ast, DetailAST constantDefAST) {
      * @return the constant def or null if ast is not
      * contained in a constant definition
      */
-    private DetailAST findContainingConstantDef(DetailAST ast) {
+    private static DetailAST findContainingConstantDef(DetailAST ast) {
         DetailAST varDefAST = ast;
         while (varDefAST != null
                 && varDefAST.getType() != TokenTypes.VARIABLE_DEF
@@ -284,7 +284,7 @@ else if (parent.getType() == TokenTypes.UNARY_PLUS) {
      * @return {@code true} if {@code ast} is in the scope of a valid hash
      * code method
      */
-    private boolean isInHashCodeMethod(DetailAST ast) {
+    private static boolean isInHashCodeMethod(DetailAST ast) {
         // if not in a code block, can't be in hashCode()
         if (!ScopeUtils.inCodeBlock(ast)) {
             return false;
@@ -339,7 +339,7 @@ private boolean inIgnoreList(DetailAST ast) {
      *
      * @return {@code true} if {@code ast} is in the scope of field declaration
      */
-    private boolean isFieldDeclaration(DetailAST ast) {
+    private static boolean isFieldDeclaration(DetailAST ast) {
         DetailAST varDefAST = ast;
         while (varDefAST != null
                 && varDefAST.getType() != TokenTypes.VARIABLE_DEF) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
index fb09cdcc3b..4441390f87 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java
@@ -306,7 +306,7 @@ private void leaveForIter(DetailAST ast) {
      * @param ast For Loop
      * @return Set of Variable Name which are managed by for
      */
-    private Set<String> getVariablesManagedByForLoop(DetailAST ast) {
+    private static Set<String> getVariablesManagedByForLoop(DetailAST ast) {
         final Set<String> initializedVariables = getForInitVariables(ast);
         final Set<String> iteratingVariables = getForIteratorVariables(ast);
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
index 9dfc6c940c..14a09ff918 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java
@@ -193,7 +193,7 @@ private void processField(DetailAST ast, int parentType) {
      * @param parentType token Type
      * @return true if token is related to Definition Tokens
      */
-    private boolean isDeclarationToken(int parentType) {
+    private static boolean isDeclarationToken(int parentType) {
         return parentType == TokenTypes.VARIABLE_DEF
             || parentType == TokenTypes.CTOR_DEF
             || parentType == TokenTypes.METHOD_DEF
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java
index b98563285f..32fcfbf703 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java
@@ -281,7 +281,7 @@ else if (inTokenList(type, ASSIGNMENTS)) {
      * @return <code>true</code> if <code>ast</code> is surrounded by
      *         parentheses.
      */
-    private boolean isSurrounded(DetailAST ast) {
+    private static boolean isSurrounded(DetailAST ast) {
         // if previous sibling is left parenthesis,
         // next sibling can't be other than right parenthesis
         final DetailAST prev = ast.getPreviousSibling();
@@ -295,7 +295,7 @@ private boolean isSurrounded(DetailAST ast) {
      * @return <code>true</code> if the expression is surrounded by
      *         parentheses.
      */
-    private boolean isExprSurrounded(DetailAST ast) {
+    private static boolean isExprSurrounded(DetailAST ast) {
         return ast.getFirstChild().getType() == TokenTypes.LPAREN;
     }
 
@@ -306,7 +306,7 @@ private boolean isExprSurrounded(DetailAST ast) {
      * @return <code>true</code> if <code>type</code> was found in <code>
      *         tokens</code>.
      */
-    private boolean inTokenList(int type, int... tokens) {
+    private static boolean inTokenList(int type, int... tokens) {
         // NOTE: Given the small size of the two arrays searched, I'm not sure
         //       it's worth bothering with doing a binary search or using a
         //       HashMap to do the searches.
@@ -326,7 +326,7 @@ private boolean inTokenList(int type, int... tokens) {
      * @return the chopped string if <code>string</code> is longer than
      *         <code>MAX_QUOTED_LENGTH</code>; otherwise <code>string</code>.
      */
-    private String chopString(String string) {
+    private static String chopString(String string) {
         if (string.length() > MAX_QUOTED_LENGTH) {
             return string.substring(0, MAX_QUOTED_LENGTH) + "...\"";
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index f24313601a..6ca38808d7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -384,7 +384,7 @@ else if (!instanceName.equals(initInstanceName)) {
      *        Variable which distance is calculated for.
      * @return entry which contains expression with variable usage and distance.
      */
-    private Entry<DetailAST, Integer> calculateDistanceInSingleScope(
+    private static Entry<DetailAST, Integer> calculateDistanceInSingleScope(
             DetailAST semicolonAst, DetailAST variableIdentAst) {
         int dist = 0;
         boolean firstUsageFound = false;
@@ -453,7 +453,7 @@ else if (currentAst.getType() != TokenTypes.VARIABLE_DEF) {
      *        Variable which distance is calculated for.
      * @return entry which contains expression with variable usage and distance.
      */
-    private Entry<DetailAST, Integer> calculateDistanceBetweenScopes(
+    private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(
             DetailAST ast, DetailAST variable) {
         int dist = 0;
         DetailAST currentScopeAst = ast;
@@ -543,7 +543,7 @@ else if (variableUsageExpressions.size() > 1) {
      *         (not in its declaration!) than return the first Ast node
      *         of this block, otherwise - null.
      */
-    private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(
+    private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(
             DetailAST block, DetailAST variable) {
         DetailAST firstNodeInsideBlock = null;
 
@@ -591,7 +591,7 @@ else if (currentNodeType != TokenTypes.VARIABLE_DEF
      *         (not in its declaration!) than return the first Ast node
      *         of this block, otherwise - null.
      */
-    private DetailAST getFirstNodeInsideIfBlock(
+    private static DetailAST getFirstNodeInsideIfBlock(
             DetailAST block, DetailAST variable) {
         DetailAST firstNodeInsideBlock = null;
 
@@ -652,7 +652,7 @@ else if (isChild(currentNode, variable)) {
      *         (not in its declaration!) than return the first Ast node
      *         of this block, otherwise - null.
      */
-    private DetailAST getFirstNodeInsideSwitchBlock(
+    private static DetailAST getFirstNodeInsideSwitchBlock(
             DetailAST block, DetailAST variable) {
         DetailAST firstNodeInsideBlock = null;
 
@@ -758,7 +758,7 @@ private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(
      * @return true if operator contains variable in its declaration, otherwise
      *         - false.
      */
-    private boolean isVariableInOperatorExpr(
+    private static boolean isVariableInOperatorExpr(
             DetailAST operator, DetailAST variable) {
         boolean isVarInOperatorDeclr = false;
         final DetailAST openingBracket =
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
index ef63ad2bbb..2d290544d9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java
@@ -120,7 +120,7 @@ public void visitToken(DetailAST ast) {
      * @param ast modifier ast
      * @return tru in modifier is in checked ones
      */
-    private boolean isPrivateOrFinalOrAbstract(DetailAST ast) {
+    private static boolean isPrivateOrFinalOrAbstract(DetailAST ast) {
         // method is ok if it is private or abstract or final
         final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
         return modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)
@@ -134,7 +134,7 @@ private boolean isPrivateOrFinalOrAbstract(DetailAST ast) {
      * @param classDef class ast
      * @return true if Check should make a violation
      */
-    private boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef) {
+    private static boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef) {
         // check if subclassing is prevented by having only private ctors
         final DetailAST objBlock = classDef.findFirstToken(TokenTypes.OBJBLOCK);
 
@@ -165,7 +165,7 @@ private boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef) {
      * @param ast the start node for searching
      * @return the CLASS_DEF node.
      */
-    private DetailAST findContainingClass(DetailAST ast) {
+    private static DetailAST findContainingClass(DetailAST ast) {
         DetailAST searchAST = ast;
         while (searchAST.getType() != TokenTypes.CLASS_DEF
                && searchAST.getType() != TokenTypes.ENUM_DEF) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
index b48bbf08d7..ec9cc51680 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java
@@ -88,7 +88,7 @@ public void visitToken(DetailAST ast) {
      * @param ast class definition for check.
      * @return true if a given class declared as abstract.
      */
-    private boolean isAbstract(DetailAST ast) {
+    private static boolean isAbstract(DetailAST ast) {
         return ast.findFirstToken(TokenTypes.MODIFIERS)
             .branchContains(TokenTypes.ABSTRACT);
     }
@@ -97,7 +97,7 @@ private boolean isAbstract(DetailAST ast) {
      * @param ast class definition for check.
      * @return true if a given class declared as static.
      */
-    private boolean isStatic(DetailAST ast) {
+    private static boolean isStatic(DetailAST ast) {
         return ast.findFirstToken(TokenTypes.MODIFIERS)
             .branchContains(TokenTypes.LITERAL_STATIC);
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
index cfaf0e903b..bd6d854137 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java
@@ -154,7 +154,7 @@ public void finishTree(DetailAST rootAST) {
      * @param typeDef type definition node.
      * @return true if a type has a public access level modifier.
      */
-    private boolean isPublic(DetailAST typeDef) {
+    private static boolean isPublic(DetailAST typeDef) {
         final DetailAST modifiers =
                 typeDef.findFirstToken(TokenTypes.MODIFIERS);
         return modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 8143fbd19b..e091181faa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -84,11 +84,13 @@ public void setCharset(String charset) throws UnsupportedEncodingException {
     /**
      * Set the header file to check against.
      * @param fileName the file that contains the header to check against.
+     * @throws CheckstyleException if fileName is empty.
      */
-    public void setHeaderFile(String fileName) {
-        // Handle empty param
+    public void setHeaderFile(String fileName) throws CheckstyleException {
         if (StringUtils.isBlank(fileName)) {
-            return;
+            throw new CheckstyleException(
+                "property 'headerFile' is missing or invalid in module "
+                    + getConfiguration().getName());
         }
 
         filename = fileName;
@@ -229,9 +231,7 @@ protected final void finishLocalSetup() throws CheckstyleException {
             loadHeaderFile();
         }
         if (readerLines.isEmpty()) {
-            throw new CheckstyleException(
-                    "property 'headerFile' is missing or invalid in module "
-                    + getConfiguration().getName());
+            setHeader(null);
         }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
index 9f12ca9cbc..69674911b0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
@@ -25,6 +25,9 @@
 
 /**
  * Checks the header of the source against a fixed header file.
+ * In default configuration,if header is not specified,
+ * the default value of header is set to null
+ * and the check does not rise any violations.
  *
  * @author Lars Kühne
  */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
index 54a2d6b51b..d48f90d006 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
@@ -35,7 +35,9 @@
 /**
  * Checks the header of the source against a header file that contains a
  * {@link java.util.regex.Pattern regular expression}
- * for each line of the source header.
+ * for each line of the source header. In default configuration,
+ * if header is not specified, the default value of header is set to null
+ * and the check does not rise any violations.
  *
  * @author Lars Kühne
  * @author o_sukhodolsky
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index e609ee9849..d5928922b7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -493,7 +493,7 @@ private boolean matchesImportGroup(boolean isStatic, String importPath, String c
      *        current group.
      * @return true, if the import is placed in the static group.
      */
-    private boolean matchesStaticImportGroup(boolean isStatic, String currentGroup) {
+    private static boolean matchesStaticImportGroup(boolean isStatic, String currentGroup) {
         return isStatic && STATIC_RULE_GROUP.equals(currentGroup);
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
index c63cc83063..3ada0a33d1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java
@@ -227,7 +227,7 @@ private void processJavadoc(DetailAST ast) {
      * @param cmt The javadoc block to parse
      * @return a set of classes referenced in the javadoc block
      */
-    private Set<String> processJavadoc(TextBlock cmt) {
+    private static Set<String> processJavadoc(TextBlock cmt) {
         final Set<String> references = new HashSet<>();
         // process all the @link type tags
         // INLINEs inside BLOCKs get hidden when using ALL
@@ -254,7 +254,7 @@ private void processJavadoc(DetailAST ast) {
      * @param tagType The type of tags we're interested in
      * @return the list of tags
      */
-    private List<JavadocTag> getValidTags(TextBlock cmt,
+    private static List<JavadocTag> getValidTags(TextBlock cmt,
             JavadocUtils.JavadocTagType tagType) {
         return JavadocUtils.getJavadocTags(cmt, tagType).getValidTags();
     }
@@ -264,7 +264,7 @@ private void processJavadoc(DetailAST ast) {
      * @param tag The javadoc tag to parse
      * @return A list of references found in this tag
      */
-    private Set<String> processJavadocTag(JavadocTag tag) {
+    private static Set<String> processJavadocTag(JavadocTag tag) {
         final Set<String> references = new HashSet<>();
         final String identifier = tag.getArg1().trim();
         for (Pattern pattern : new Pattern[]
@@ -281,7 +281,7 @@ private void processJavadoc(DetailAST ast) {
      * @param pattern The Pattern used to extract the texts
      * @return A list of texts which matched the pattern
      */
-    private Set<String> matchPattern(String identifier, Pattern pattern) {
+    private static Set<String> matchPattern(String identifier, Pattern pattern) {
         final Set<String> references = new HashSet<>();
         final Matcher matcher = pattern.matcher(identifier);
         while (matcher.find()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
index 2d97f1ac79..b0ebc9b340 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java
@@ -49,11 +49,9 @@ protected IndentLevel getLevelImpl() {
             // note: assumes new or assignment is line to align with
             return new IndentLevel(getLineStart(parentAST));
         }
-        else if (getParent() instanceof ArrayInitHandler) {
-            return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();
-        }
         else {
-            return getParent().getLevel();
+            // at this point getParent() is instance of ArrayInitHandler
+            return ((ArrayInitHandler) getParent()).getChildrenExpectedLevel();
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index de13c3b71b..0c234f5b40 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -134,7 +134,7 @@ else if (currentType == TokenTypes.LITERAL_IF) {
      *            first node.
      * @return indentation of first node.
      */
-    private int getFirstNodeIndent(DetailAST node) {
+    private static int getFirstNodeIndent(DetailAST node) {
         int indentLevel = node.getColumnNo();
 
         if (node.getType() == TokenTypes.LITERAL_IF
@@ -191,7 +191,7 @@ private int getFirstNodeIndent(DetailAST node) {
      * @param curNode current node.
      * @return next curNode node.
      */
-    private DetailAST getNextCurNode(DetailAST curNode) {
+    private static DetailAST getNextCurNode(DetailAST curNode) {
         DetailAST nodeToVisit = curNode.getFirstChild();
         DetailAST currentNode = curNode;
 
@@ -248,7 +248,7 @@ private void checkAnnotationIndentation(DetailAST atNode,
      * @param atNode first at-clause node.
      * @return last annotation node.
      */
-    private DetailAST getLastAnnotationNode(DetailAST atNode) {
+    private static DetailAST getLastAnnotationNode(DetailAST atNode) {
         DetailAST lastAnnotation = atNode.getParent();
         while (lastAnnotation.getNextSibling() != null
                 && lastAnnotation.getNextSibling().getType() == TokenTypes.ANNOTATION) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
index 90c50b87bb..83e59404bd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java
@@ -89,7 +89,7 @@ private void checkType() {
      * @param variableDef current variable_def.
      * @return true if variable_def node is array declaration.
      */
-    private boolean isArrayDeclaration(DetailAST variableDef) {
+    private static boolean isArrayDeclaration(DetailAST variableDef) {
         return variableDef.findFirstToken(TokenTypes.TYPE)
             .findFirstToken(TokenTypes.ARRAY_DECLARATOR) != null;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index 5e21dd5792..5dfce2d342 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -38,11 +38,7 @@
      */
     public MethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
-        super(indentCheck,
-            ast.getType() == TokenTypes.METHOD_CALL
-                ? "method call" : "ctor call",
-            ast,
-            parent);
+        super(indentCheck, "method call", ast, parent);
     }
 
     @Override
@@ -52,30 +48,17 @@ protected IndentLevel getLevelImpl() {
         if (getParent() instanceof MethodCallHandler) {
             final MethodCallHandler container =
                     (MethodCallHandler) getParent();
-            if (container != null) {
-                if (areOnSameLine(container.getMainAst(), getMainAst())) {
-                    return container.getLevel();
-                }
-
-                // we should increase indentation only if this is the first
-                // chained method call which was moved to the next line
-                if (isChainedMethodCallWrapped()) {
-                    return container.getLevel();
-                }
-                else {
-                    return new IndentLevel(container.getLevel(), getBasicOffset());
-                }
+            if (areOnSameLine(container.getMainAst(), getMainAst())) {
+                return container.getLevel();
             }
-
-            // if we get here, we are the child of the left hand side (name
-            //  side) of a method call with no "containing" call, use
-            //  the first non-method call parent
-
-            AbstractExpressionHandler p = getParent();
-            while (p instanceof MethodCallHandler) {
-                p = p.getParent();
+            // we should increase indentation only if this is the first
+            // chained method call which was moved to the next line
+            if (isChainedMethodCallWrapped()) {
+                return container.getLevel();
+            }
+            else {
+                return new IndentLevel(container.getLevel(), getBasicOffset());
             }
-            return p.suggestedChildLevel(this);
         }
 
         // if our expression isn't first on the line, just use the start
@@ -100,15 +83,12 @@ private boolean isChainedMethodCallWrapped() {
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
-        if (dot.getType() == TokenTypes.DOT
-            && target.getType() == TokenTypes.METHOD_CALL) {
-            final DetailAST dot1 = target.getFirstChild();
-            final DetailAST target1 = dot1.getFirstChild();
+        final DetailAST dot1 = target.getFirstChild();
+        final DetailAST target1 = dot1.getFirstChild();
 
-            if (dot1.getType() == TokenTypes.DOT
-                && target1.getType() == TokenTypes.METHOD_CALL) {
-                result = true;
-            }
+        if (dot1.getType() == TokenTypes.DOT
+            && target1.getType() == TokenTypes.METHOD_CALL) {
+            result = true;
         }
         return result;
     }
@@ -121,19 +101,14 @@ private boolean isChainedMethodCallWrapped() {
      *
      * @return the first AST of the specified method call
      */
-    private DetailAST getFirstAst(DetailAST ast) {
+    private static DetailAST getFirstAst(DetailAST ast) {
         // walk down the first child part of the dots that make up a method
         // call name
 
         DetailAST astNode = ast.getFirstChild();
-        while (astNode != null && astNode.getType() == TokenTypes.DOT) {
+        while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
-
-        if (astNode == null) {
-            astNode = ast;
-        }
-
         return astNode;
     }
 
@@ -157,8 +132,7 @@ public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
     @Override
     public void checkIndentation() {
         final DetailAST exprNode = getMainAst().getParent();
-        if (exprNode.getParent().getType() != TokenTypes.LCURLY
-            && exprNode.getParent().getType() != TokenTypes.SLIST) {
+        if (exprNode.getParent().getType() != TokenTypes.SLIST) {
             return;
         }
         final DetailAST methodName = getMainAst().getFirstChild();
@@ -197,13 +171,6 @@ protected boolean shouldIncreaseIndent() {
      * method calls are chained returns right paren for last call.
      */
     private static DetailAST getMethodCallLastNode(DetailAST firstNode) {
-        DetailAST lastNode;
-        if (firstNode.getNextSibling() == null) {
-            lastNode = firstNode.getLastChild();
-        }
-        else {
-            lastNode = firstNode.getNextSibling();
-        }
-        return lastNode;
+        return firstNode.getLastChild();
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
index 38b6ea3268..bacebe9af7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java
@@ -167,7 +167,7 @@ private void checkOrderInTagSection(DetailNode javadoc) {
      * @param commentBlock child node.
      * @return parent type.
      */
-    private int getParentType(DetailAST commentBlock) {
+    private static int getParentType(DetailAST commentBlock) {
         int type = 0;
         final DetailAST parentNode = commentBlock.getParent();
         if (parentNode != null) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 26d5b68d61..10076ec9e0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -402,7 +402,7 @@ private boolean hasAllowedAnnotations(DetailAST methodDef) {
      * @param methodDef Some javadoc.
      * @return Some javadoc.
      */
-    private int getMethodsNumberOfLine(DetailAST methodDef) {
+    private static int getMethodsNumberOfLine(DetailAST methodDef) {
         int numberOfLines;
         final DetailAST lcurly = methodDef.getLastChild();
         final DetailAST rcurly = lcurly.getLastChild();
@@ -546,7 +546,7 @@ private boolean hasShortCircuitTag(final DetailAST ast,
      * @param ast the token of the method/constructor
      * @return the scope of the method/constructor
      */
-    private Scope calculateScope(final DetailAST ast) {
+    private static Scope calculateScope(final DetailAST ast) {
         final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);
         final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);
         return ScopeUtils.inInterfaceOrAnnotationBlock(ast) ? Scope.PUBLIC
@@ -560,7 +560,7 @@ private Scope calculateScope(final DetailAST ast) {
      * @param comment the Javadoc comment
      * @return the tags found
      */
-    private List<JavadocTag> getMethodTags(TextBlock comment) {
+    private static List<JavadocTag> getMethodTags(TextBlock comment) {
         final String[] lines = comment.getText();
         final List<JavadocTag> tags = Lists.newArrayList();
         int currentLine = comment.getStartLineNo() - 1;
@@ -665,7 +665,7 @@ else if (noargMultilineStart.find()) {
      * @param ast the method node.
      * @return the list of parameter nodes for ast.
      */
-    private List<DetailAST> getParameters(DetailAST ast) {
+    private static List<DetailAST> getParameters(DetailAST ast) {
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
         final List<DetailAST> retVal = Lists.newArrayList();
 
@@ -792,7 +792,7 @@ private void checkParamTags(final List<JavadocTag> tags,
      * @param ast the method node.
      * @return whether the method is a function.
      */
-    private boolean isFunction(DetailAST ast) {
+    private static boolean isFunction(DetailAST ast) {
         boolean retVal = false;
         if (ast.getType() == TokenTypes.METHOD_DEF) {
             final DetailAST typeAST = ast.findFirstToken(TokenTypes.TYPE);
@@ -933,7 +933,7 @@ else if (allowThrowsTagsForSubclasses) {
      * @param ast the AST to check with
      * @return whether the AST represents a setter method
      */
-    private boolean isSetterMethod(final DetailAST ast) {
+    private static boolean isSetterMethod(final DetailAST ast) {
         // Check have a method with exactly 7 children which are all that
         // is allowed in a proper setter method which does not throw any
         // exceptions.
@@ -982,7 +982,7 @@ private boolean isSetterMethod(final DetailAST ast) {
      * @param ast the AST to check with
      * @return whether the AST represents a getter method
      */
-    private boolean isGetterMethod(final DetailAST ast) {
+    private static boolean isGetterMethod(final DetailAST ast) {
         // Check have a method with exactly 7 children which are all that
         // is allowed in a proper getter method which does not throw any
         // exceptions.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
index b745d736e3..346bfbf830 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java
@@ -35,14 +35,14 @@
  * The check can be specified by option tagImmediatelyBeforeFirstWord,
  * which says whether the &lt;p&gt; tag should be placed immediately before
  * the first word.
- * 
+ *
  * <p>
  * Default configuration:
  * </p>
  * <pre>
  * &lt;module name=&quot;JavadocParagraph&quot;/&gt;
  * </pre>
- * 
+ *
  * <p>
  * To allow newlines and spaces immediately after the &lt;p&gt; tag:
  * <pre>
@@ -51,7 +51,7 @@
  *                   value==&quot;false&quot;/&gt;
  * &lt;/module&quot;&gt;
  * </pre>
- * 
+ *
  * <p>
  * In case of tagImmediatelyBeforeFirstWord set to false
  * the following example will not have any violations:
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
index 63883b27e0..26e9f9a298 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java
@@ -265,7 +265,7 @@ private void checkEmptyJavadoc(TextBlock comment) {
      * @param comments the lines of Javadoc.
      * @return a comment text String.
      */
-    private String getCommentText(String... comments) {
+    private static String getCommentText(String... comments) {
         final StringBuffer buffer = new StringBuffer();
         for (final String line : comments) {
             final int textStart = findTextStart(line);
@@ -292,7 +292,7 @@ private String getCommentText(String... comments) {
      * @return the int index relative to 0 for the start of text
      *         or -1 if not found.
      */
-    private int findTextStart(String line) {
+    private static int findTextStart(String line) {
         int textStart = -1;
         for (int i = 0; i < line.length(); i++) {
             if (!Character.isWhitespace(line.charAt(i))) {
@@ -315,7 +315,7 @@ else if (line.charAt(i) != '*') {
      * Trims any trailing whitespace or the end of Javadoc comment string.
      * @param buffer the StringBuffer to trim.
      */
-    private void trimTail(StringBuffer buffer) {
+    private static void trimTail(StringBuffer buffer) {
         for (int i = buffer.length() - 1; i >= 0; i--) {
             if (Character.isWhitespace(buffer.charAt(i))) {
                 buffer.deleteCharAt(i);
@@ -447,7 +447,7 @@ private void checkUnclosedTags(Deque<HtmlTag> htmlStack, String token) {
      * @param tag the HtmlTag to check.
      * @return <code>true</code> if the HtmlTag is a single tag.
      */
-    private boolean isSingleTag(HtmlTag tag) {
+    private static boolean isSingleTag(HtmlTag tag) {
         // If its a singleton tag (<p>, <br>, etc.), ignore it
         // Can't simply not put them on the stack, since singletons
         // like <dt> and <dd> (unhappily) may either be terminated
@@ -461,7 +461,7 @@ private boolean isSingleTag(HtmlTag tag) {
      * @param tag the HtmlTag to check.
      * @return <code>true</code> if the HtmlTag is an allowed html tag.
      */
-    private boolean isAllowedTag(HtmlTag tag) {
+    private static boolean isAllowedTag(HtmlTag tag) {
         return ALLOWED_TAGS.contains(tag.getId().toLowerCase(Locale.ENGLISH));
     }
 
@@ -474,7 +474,7 @@ private boolean isAllowedTag(HtmlTag tag) {
      * @return <code>false</code> if a previous open tag was found
      *         for the token.
      */
-    private boolean isExtraHtml(String token, Deque<HtmlTag> htmlStack) {
+    private static boolean isExtraHtml(String token, Deque<HtmlTag> htmlStack) {
         boolean isExtra = true;
         for (final HtmlTag td : htmlStack) {
             // Loop, looking for tags that are closed.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
index 8e82c9bfb7..d4feaba0ab 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java
@@ -94,7 +94,7 @@ public void visitJavadocToken(DetailNode ast) {
      * @param descriptionNode DESCRIPTION node.
      * @return List with NEWLINE nodes.
      */
-    private List<DetailNode> getAllNewlineNodes(DetailNode descriptionNode) {
+    private static List<DetailNode> getAllNewlineNodes(DetailNode descriptionNode) {
         final List<DetailNode> textNodes = new ArrayList<>();
         DetailNode node = JavadocUtils.getFirstChild(descriptionNode);
         while (JavadocUtils.getNextSibling(node) != null) {
@@ -111,7 +111,7 @@ public void visitJavadocToken(DetailNode ast) {
      * @param description DESCRIPTION node.
      * @return true, if description node is a description of in-line tag.
      */
-    private boolean isInlineDescription(DetailNode description) {
+    private static boolean isInlineDescription(DetailNode description) {
         DetailNode inlineTag = description.getParent();
         while (inlineTag != null) {
             if (inlineTag.getType() == JavadocTokenTypes.JAVADOC_INLINE_TAG) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
index 03a1ff39e8..1d6025bc81 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java
@@ -73,7 +73,7 @@ public void visitJavadocToken(DetailNode ast) {
      * @param tagNode at-clause tag.
      * @return true, if at-clause tag is empty.
      */
-    private boolean isEmptyTag(DetailNode tagNode) {
+    private static boolean isEmptyTag(DetailNode tagNode) {
         final DetailNode tagDescription =
                 JavadocUtils.findFirstToken(tagNode, JavadocTokenTypes.DESCRIPTION);
         return tagDescription == null;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
index 6294715077..044c71522a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java
@@ -124,7 +124,7 @@ public void visitJavadocToken(DetailNode ast) {
      * @param ast Javadoc root node.
      * @return first sentence.
      */
-    private String getFirstSentence(DetailNode ast) {
+    private static String getFirstSentence(DetailNode ast) {
         final StringBuilder result = new StringBuilder();
         for (DetailNode child : ast.getChildren()) {
             if (child.getType() != JavadocTokenTypes.JAVADOC_INLINE_TAG
@@ -144,7 +144,7 @@ private String getFirstSentence(DetailNode ast) {
      * @param textNode node with javadoc text.
      * @return String with chars till first dot.
      */
-    private String getCharsTillDot(DetailNode textNode) {
+    private static String getCharsTillDot(DetailNode textNode) {
         final StringBuilder result = new StringBuilder();
         for (DetailNode child : textNode.getChildren()) {
             result.append(child.getText());
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
index c4b3e6b1d3..ea5e4edbb7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java
@@ -134,7 +134,7 @@ else if (!isTag(text, position)) {
      * @param pos position to check.
      * @return <code>true</code> some HTML tag starts from given position.
      */
-    private boolean isTag(String[] javadocText, Point pos) {
+    private static boolean isTag(String[] javadocText, Point pos) {
         final int column = pos.getColumnNo() + 1;
         final String text = javadocText[pos.getLineNo()];
 
@@ -153,7 +153,7 @@ private boolean isTag(String[] javadocText, Point pos) {
      * @param tagStart start position of the tag
      * @return id for given tag
      */
-    private String getTagId(String[] javadocText, Point tagStart) {
+    private static String getTagId(String[] javadocText, Point tagStart) {
         int column = tagStart.getColumnNo() + 1;
         String text = javadocText[tagStart.getLineNo()];
         if (column >= text.length()) {
@@ -185,7 +185,7 @@ private String getTagId(String[] javadocText, Point tagStart) {
      * @return <code>true</code> if HTML-comments
      *         starts form given position.
      */
-    private boolean isCommentTag(String[] text, Point pos) {
+    private static boolean isCommentTag(String[] text, Point pos) {
         return text[pos.getLineNo()].startsWith("<!--", pos.getColumnNo());
     }
 
@@ -195,7 +195,7 @@ private boolean isCommentTag(String[] text, Point pos) {
      * @param from start position of HTML-comments
      * @return position after HTML-comments
      */
-    private Point skipHtmlComment(String[] text, Point from) {
+    private static Point skipHtmlComment(String[] text, Point from) {
         Point to = from;
         to = findChar(text, '>', to);
         while (to.getLineNo() < text.length
@@ -213,7 +213,7 @@ private Point skipHtmlComment(String[] text, Point from) {
      * @param from position to start search
      * @return position of next occurrence of given character
      */
-    private Point findChar(String[] text, char character, Point from) {
+    private static Point findChar(String[] text, char character, Point from) {
         Point curr = new Point(from.getLineNo(), from.getColumnNo());
         while (curr.getLineNo() < text.length
                && text[curr.getLineNo()].charAt(curr.getColumnNo()) != character) {
@@ -230,7 +230,7 @@ private Point findChar(String[] text, char character, Point from) {
      * @param from location to search from
      * @return location of the next character.
      */
-    private Point getNextCharPos(String[] text, Point from) {
+    private static Point getNextCharPos(String[] text, Point from) {
         int line = from.getLineNo();
         int column = from.getColumnNo() + 1;
         while (line < text.length && column >= text[line].length()) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
index 2627c4310b..65f9063ca6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
@@ -148,7 +148,7 @@ public void visitToken(DetailAST ast) {
      * @param logicalOperator logical operator
      * @return true if logical operator is part of constructor or method call
      */
-    private boolean isPassedInParameter(DetailAST logicalOperator) {
+    private static boolean isPassedInParameter(DetailAST logicalOperator) {
         return logicalOperator.getParent().getType() == TokenTypes.EXPR
             && logicalOperator.getParent().getParent().getType() == TokenTypes.ELIST;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index fef7a1be66..3553fcd578 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -287,7 +287,7 @@ public void setMethodMaximum(int methodMax) {
      *            the AST
      * @return true if the token is countable
      */
-    private boolean isCountable(DetailAST ast) {
+    private static boolean isCountable(DetailAST ast) {
         boolean countable = true;
 
         final int tokenType = ast.getType();
@@ -309,7 +309,7 @@ else if (TokenTypes.VARIABLE_DEF == tokenType) {
      * @param ast the AST
      * @return true if the variable definition is countable, false otherwise
      */
-    private boolean isVariableDefCountable(DetailAST ast) {
+    private static boolean isVariableDefCountable(DetailAST ast) {
         boolean countable = false;
 
         //count variable defs only if they are direct child to a slist or
@@ -337,7 +337,7 @@ private boolean isVariableDefCountable(DetailAST ast) {
      * @param ast the AST
      * @return true if the expression is countable, false otherwise
      */
-    private boolean isExpressionCountable(DetailAST ast) {
+    private static boolean isExpressionCountable(DetailAST ast) {
         boolean countable = true;
 
         //count expressions only if they are direct child to a slist (method
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index b0a2e7e18a..86edf60b86 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -133,7 +133,7 @@ public void visitToken(DetailAST ast) {
      * @return null if the order is correct, otherwise returns the offending
      * *       modifier AST.
      */
-    DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
+    static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers) {
         final Iterator<DetailAST> it = modifiers.iterator();
 
         //Speed past all initial annotations
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index a42bcf2297..a94171cd69 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -127,7 +127,7 @@ else if (!ignoreModifier && isMatchingClassName(className)) {
      * @param ast class definition for check.
      * @return true if a given class declared as abstract.
      */
-    private boolean isAbstract(DetailAST ast) {
+    private static boolean isAbstract(DetailAST ast) {
         final DetailAST abstractAST = ast.findFirstToken(TokenTypes.MODIFIERS)
             .findFirstToken(TokenTypes.ABSTRACT);
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
index 75d033c8f1..4bdda3fe48 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java
@@ -124,7 +124,7 @@ protected final boolean mustCheckName(DetailAST ast) {
      * @param variableDef variable definition.
      * @return true if a variable is the loop's one.
      */
-    private boolean isForLoopVariable(DetailAST variableDef) {
+    private static boolean isForLoopVariable(DetailAST variableDef) {
         final int parentType = variableDef.getParent().getType();
         return parentType == TokenTypes.FOR_INIT
                 || parentType == TokenTypes.FOR_EACH_CLAUSE;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
index a8cb7682f9..915f7285d6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
@@ -329,7 +329,7 @@ private boolean isPrePreviousLineEmpty(DetailAST token) {
      * @param token token.
      * @return true if token have empty line after.
      */
-    private boolean hasEmptyLineAfter(DetailAST token) {
+    private static boolean hasEmptyLineAfter(DetailAST token) {
         DetailAST lastToken = token.getLastChild().getLastChild();
         if (null == lastToken) {
             lastToken = token.getLastChild();
@@ -357,7 +357,7 @@ private boolean hasEmptyLineBefore(DetailAST token) {
      * @param variableDef variable definition.
      * @return true variable definition is a type field.
      */
-    private boolean isTypeField(DetailAST variableDef) {
+    private static boolean isTypeField(DetailAST variableDef) {
         final int parentType = variableDef.getParent().getParent().getType();
         return parentType == TokenTypes.CLASS_DEF;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
index 5f25655c96..dcdb0515d9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java
@@ -217,7 +217,7 @@ else if (!Character.isWhitespace(charAfter)
      * @param ast ast
      * @return true if generic before a method ref
      */
-    private boolean isGenericBeforeMethod(DetailAST ast) {
+    private static boolean isGenericBeforeMethod(DetailAST ast) {
         return ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS
                 && ast.getParent().getParent().getType()
                     == TokenTypes.DOT
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index ce304d8a72..422746f088 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -372,7 +372,7 @@ public void visitToken(DetailAST ast) {
      * @param nextChar next symbol
      * @return true is that is end of anon inner class
      */
-    private boolean isAnnonimousInnerClassEnd(int currentType, char nextChar) {
+    private static boolean isAnnonimousInnerClassEnd(int currentType, char nextChar) {
         return currentType == TokenTypes.RCURLY
             && (nextChar == ')'
                 || nextChar == ';'
@@ -458,7 +458,7 @@ else if (parentType == TokenTypes.FOR_EACH_CLAUSE
      * @param parentType parent token
      * @return true is current token inside array initialization
      */
-    private boolean isArrayInitialization(int currentType, int parentType) {
+    private static boolean isArrayInitialization(int currentType, int parentType) {
         return (currentType == TokenTypes.RCURLY
                 || currentType == TokenTypes.LCURLY)
             && (parentType == TokenTypes.ARRAY_INIT
@@ -520,7 +520,7 @@ private boolean isEmptyLoop(DetailAST ast, int parentType) {
      *         empty block contained under a <code>match</code> token type
      *         node.
      */
-    private boolean isEmptyType(DetailAST ast, int parentType) {
+    private static boolean isEmptyType(DetailAST ast, int parentType) {
         final int type = ast.getType();
         return (type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)
                 && parentType == TokenTypes.OBJBLOCK;
@@ -541,7 +541,7 @@ private boolean isEmptyType(DetailAST ast, int parentType) {
      *         empty block contained under a <code>match</code> token type
      *         node.
      */
-    private boolean isEmptyBlock(DetailAST ast, int parentType, int match) {
+    private static boolean isEmptyBlock(DetailAST ast, int parentType, int match) {
         final int type = ast.getType();
         if (type == TokenTypes.RCURLY) {
             final DetailAST grandParent = ast.getParent().getParent();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 3d0b04a843..90dc38ace8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -244,7 +244,7 @@ public boolean isMatch(AuditEvent event) {
          * @param regexp the parsed expander.
          * @return the expanded string
          */
-        private String expandFrocomment(
+        private static String expandFrocomment(
             String comment,
             String string,
             Pattern regexp) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index 4585c2c3f3..98a8275245 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -236,7 +236,7 @@ public boolean isMatch(AuditEvent event) {
          * @param regexp the parsed expander.
          * @return the expanded string
          */
-        private String expandFromCoont(
+        private static String expandFromCoont(
             String comment,
             String string,
             Pattern regexp) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
index da33c92663..53551cbeb7 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java
@@ -162,7 +162,7 @@ public void hierarchyChanged(HierarchyEvent evt) {
 
 
     /** Determine if the dragged data is a file list. */
-    private boolean isDragOk(final DropTargetDragEvent evt) {
+    private static boolean isDragOk(final DropTargetDragEvent evt) {
         boolean ok = false;
         final DataFlavor[] flavors = evt.getCurrentDataFlavors();
 
@@ -324,4 +324,4 @@ public FileDropTargetListener(Component component, Border dragBorder, Listener l
         }
     }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index 1bb9ae36d3..77236f052b 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -276,7 +276,7 @@ public ParseTreeInfoPanel() {
 
     }
 
-    private void showErrorDialog(final Component parent, final String msg) {
+    private static void showErrorDialog(final Component parent, final String msg) {
         final Runnable showError = new FrameShower(parent, msg);
         SwingUtilities.invokeLater(showError);
     }
diff --git a/src/site/resources/css/site.css b/src/site/resources/css/site.css
index 0d6a956b8d..47f9656a71 100755
--- a/src/site/resources/css/site.css
+++ b/src/site/resources/css/site.css
@@ -27,14 +27,14 @@ h4 {
 #bannerLeft img {
   float:left;
   position: relative;
-  top: 18px;
+  top: 0px;
   left: 40px;
 
 }
 
 #banner {
   border-bottom: 1px solid #fff;
-  background: url("../images/banner.jpg") repeat scroll 0 0 transparent;
+  background: url("../images/header-background.png") repeat scroll 0 0 transparent;
 }
 
 .section {
diff --git a/src/site/resources/images/banner.jpg b/src/site/resources/images/banner.jpg
deleted file mode 100755
index a77f9ece14..0000000000
Binary files a/src/site/resources/images/banner.jpg and /dev/null differ
diff --git a/src/site/resources/images/header-background.png b/src/site/resources/images/header-background.png
new file mode 100755
index 0000000000..e4f61616cc
Binary files /dev/null and b/src/site/resources/images/header-background.png differ
diff --git a/src/site/resources/images/header-checkstyle-logo.png b/src/site/resources/images/header-checkstyle-logo.png
new file mode 100755
index 0000000000..0b2798e028
Binary files /dev/null and b/src/site/resources/images/header-checkstyle-logo.png differ
diff --git a/src/site/resources/images/header-right-ruller.png b/src/site/resources/images/header-right-ruller.png
new file mode 100755
index 0000000000..aedd31c2e1
Binary files /dev/null and b/src/site/resources/images/header-right-ruller.png differ
diff --git a/src/site/site.xml b/src/site/site.xml
index 74048f34d6..0a026e9e9a 100755
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -7,12 +7,12 @@
   <bannerLeft>
     <alt>Checkstyle</alt>
     <href>http://checkstyle.sourceforge.net</href>
-    <src>images/checkstyle_logo_small_64.png</src>
+    <src>images/header-checkstyle-logo.png</src>
   </bannerLeft>
   <bannerRight>
     <alt>Checkstyle</alt>
     <href>http://checkstyle.sourceforge.net</href>
-    <src>images/logo.png</src>
+    <src>images/header-right-ruller.png</src>
   </bannerRight>
   
   <publishDate position="right" />
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
index 0c29f36b7b..e6927821d4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java
@@ -44,13 +44,13 @@
     @Test
     public void testGetMessageBundleWithPackage() {
         assertEquals("com.mycompany.checks.messages",
-            emptyCheck.getMessageBundle("com.mycompany.checks.MyCoolCheck"));
+            AbstractViolationReporter.getMessageBundle("com.mycompany.checks.MyCoolCheck"));
     }
 
     @Test
     public void testGetMessageBundleWithoutPackage() {
         assertEquals("messages",
-            emptyCheck.getMessageBundle("MyCoolCheck"));
+            AbstractViolationReporter.getMessageBundle("MyCoolCheck"));
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
index a99b8d62cd..8dc787a9c6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
@@ -47,6 +47,10 @@ public void testDefault() throws Exception {
             "372:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
+
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
@@ -71,6 +75,9 @@ public void testLastCaseGroup() throws Exception {
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
             "376:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
@@ -114,6 +121,9 @@ public void testOwnPattern() throws Exception {
             "351:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "353:30: " + getCheckMessage(MSG_FALL_THROUGH),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index 9195cc2779..0a3e284ba4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -172,17 +172,18 @@ public void testRegexpHeaderSmallHeader() throws Exception {
     }
 
     @Test
-    public void testNoHeader()
-        throws Exception {
+    public void testNoHeader() throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HeaderCheck.class);
-        // No header file specified
         try {
             createChecker(checkConfig);
-            fail();
+            final String[] expected = {
+            };
+            verify(checkConfig, getPath("InputRegexpHeader1.java"), expected);
         }
         catch (CheckstyleException ex) {
-            // expected exception
+            // Exception is not expected
+            fail();
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
index c8956a3336..3a98b3c61a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
@@ -19,15 +19,20 @@
 
 package com.puppycrawl.tools.checkstyle.checks.header;
 
+import com.puppycrawl.tools.checkstyle.BaseFileSetCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import org.apache.commons.beanutils.ConversionException;
 import org.junit.Assert;
 import org.junit.Test;
 
+import static org.junit.Assert.fail;
+
 /**
  *
  * @author richter
  */
-public class RegexpHeaderCheckTest {
+public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport {
 
     public RegexpHeaderCheckTest() {
     }
@@ -86,4 +91,33 @@ public void testSetHeader() {
         }
     }
 
+    @Test
+    public void testDefaultConfiguration() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RegexpHeaderCheck.class);
+        try {
+            createChecker(checkConfig);
+            final String[] expected = {
+            };
+            verify(checkConfig, getPath("InputRegexpHeader1.java"), expected);
+        }
+        catch (CheckstyleException ex) {
+            // Exception is not expected
+            fail();
+        }
+    }
+
+    @Test
+    public void testEmptyFilename() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", "");
+        try {
+            createChecker(checkConfig);
+            fail("Checker creation should not succeed with invalid headerFile");
+        }
+        catch (CheckstyleException ex) {
+            // expected exception
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
index 7ac6366eb0..b4ba3749e1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
@@ -256,7 +256,7 @@ public void testStaticGroupsOrder() throws Exception {
         checkConfig.addAttribute("option", "top");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "4: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrder.java"), expected);
     }
@@ -279,7 +279,7 @@ public void testStaticGroupsOrderBottom() throws Exception {
         checkConfig.addAttribute("option", "bottom");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrderBottom.java"), expected);
     }
@@ -293,7 +293,7 @@ public void testStaticGroupsOrderAbove() throws Exception {
         checkConfig.addAttribute("sortStaticImportsAlphabetically", "true");
         final String[] expected = {
             "7: " + getCheckMessage(MSG_ORDERING, "java.lang.Math.PI"),
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrderBottom.java"), expected);
     }
@@ -305,7 +305,7 @@ public void testStaticOnDemandGroupsOrder() throws Exception {
         checkConfig.addAttribute("option", "top");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "4: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
             "9: " + getCheckMessage(MSG_ORDERING, "org.junit.Test"),
         };
         verify(checkConfig, getPath("imports" + File.separator
@@ -333,7 +333,7 @@ public void testStaticOnDemandGroupsOrderBottom() throws Exception {
         checkConfig.addAttribute("option", "bottom");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
         };
         verify(checkConfig, getPath("imports" + File.separator
                  + "InputImportOrderStaticOnDemandGroupOrderBottom.java"), expected);
@@ -360,7 +360,7 @@ public void testStaticOnDemandGroupsOrderAbove() throws Exception {
         checkConfig.addAttribute("sortStaticImportsAlphabetically", "true");
         final String[] expected = {
             "7: " + getCheckMessage(MSG_ORDERING, "java.lang.Math.*"),
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
         };
         verify(checkConfig, getPath("imports" + File.separator
                  + "InputImportOrderStaticOnDemandGroupOrderBottom.java"), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 6e81f0c907..0cb32856d3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -1470,6 +1470,27 @@ public void testSynchronizedMethod() throws Exception {
         verifyWarns(checkConfig, getPath("indentation/InputSynchronizedMethod.java"), expected);
     }
 
+    @Test
+    public void testAnonymousClassInMethod() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+        checkConfig.addAttribute("tabWidth", "8");
+        checkConfig.addAttribute("basicOffset", "2");
+        checkConfig.addAttribute("braceAdjustment", "0");
+        checkConfig.addAttribute("caseIndent", "2");
+        checkConfig.addAttribute("lineWrappingIndentation", "4");
+        checkConfig.addAttribute("throwsIndent", "4");
+        checkConfig.addAttribute("arrayInitIndent", "2");
+        final String[] expected = {
+            "19: " + getCheckMessage(MSG_ERROR, "method def modifier", 8, 2),
+            "20: " + getCheckMessage(MSG_CHILD_ERROR, "method def", 16, 4),
+            "21: " + getCheckMessage(MSG_ERROR_MULTI, "method def modifier", 24, "18, 20, 22"),
+            "23: " + getCheckMessage(MSG_CHILD_ERROR_MULTI, "method def", 32, "20, 22, 24"),
+            "24: " + getCheckMessage(MSG_ERROR_MULTI, "method def rcurly",  24, "18, 20, 22"),
+            "26: " + getCheckMessage(MSG_ERROR, "method def rcurly", 8, 2),
+        };
+        verifyWarns(checkConfig, getPath("indentation/InputAnonymousClassInMethod.java"), expected);
+    }
+
     @Test
     public void testAnnotationDefinition() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
index 51d70374bc..011668cb91 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
@@ -416,4 +416,36 @@ void nestedSwitches() {
             default: // violation - no fall through comment
         }
     }
+    
+    void nextedSwitches2() {
+        switch(hashCode()) {
+        case 1:
+            switch(hashCode()){}
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
+    
+    void ifWithoutBreak() {
+        switch(hashCode()) {
+        case 1:
+            if (true) {
+                System.out.println();
+            }
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
+    
+    void noCommentAtTheEnd() {
+        switch(hashCode()) {
+        case 1: System.out.println();
+
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
index 3b9681410c..a433f39004 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
@@ -2,7 +2,7 @@
 
 import java.*;
 import java.util.*;
-import org.abego.treelayout.*;
+import org.antlr.v4.runtime.*;
 import com.*;
 //configuration "illegalClassNames": List
 public class InputIllegalTypeStarImports
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
index bff87fe693..c8096327b4 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
@@ -4,7 +4,7 @@
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.VisibleForTesting;
 
-import org.abego.treelayout.Configuration;
+import org.apache.commons.io.ByteOrderMark;
 
 import static sun.tools.util.ModifierFilter.ALL_ACCESS;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
index e777db50fd..78276506e1 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
@@ -1,6 +1,6 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
-import org.abego.treelayout.*;
+import org.antlr.v4.*;
 
 import org.junit.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
index 699cd41392..2927c9e2bf 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
@@ -1,7 +1,7 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
 import static java.lang.Math.abs;
-import static org.abego.treelayout.Configuration.AlignmentInLevel;
+import static org.antlr.v4.runtime.Recognizer.EOF;
 
 import org.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
index 461e61adb2..c519a78046 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
@@ -5,7 +5,7 @@
 import java.util.Set;
 
 import static java.lang.Math.PI;
-import static org.abego.treelayout.Configuration.AlignmentInLevel;
+import static org.antlr.v4.runtime.Recognizer.EOF;
 
 public class InputImportOrderStaticGroupOrderBottom
 {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
index 5a4a391198..3c81b5ab6c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
@@ -1,7 +1,7 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
 import static java.lang.Math.*;
-import static org.abego.treelayout.Configuration.*;
+import static org.antlr.v4.runtime.CommonToken.*;
 
 import org.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
index 89feb40619..a4a7e91577 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
@@ -5,7 +5,7 @@
 import java.util.Set;
 
 import static java.lang.Math.*;
-import static org.abego.treelayout.Configuration.*;
+import static org.antlr.v4.runtime.CommonToken.*;
 
 public class InputImportOrderStaticOnDemandGroupOrderBottom
 {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
index 646d28224f..60e19ba37f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
@@ -4,7 +4,7 @@
 import java.util.Set; //indent:0 exp:0
 import java.util.concurrent.ConcurrentMap; //indent:0 exp:0
 
-import org.antlr.v4.runtime.misc.Nullable; //indent:0 exp:0
+import org.antlr.v4.runtime.misc.NotNull; //indent:0 exp:0
 
 import com.google.common.base.Equivalence; //indent:0 exp:0
 
@@ -106,13 +106,13 @@
   enum EntryFactory { //indent:2 exp:2
     STRONG { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
     }, //indent:4 exp:4
     STRONG_ACCESS { //indent:4 exp:4
       <K, V> StrongAccessEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongAccessEntry<K, V>(key, hash, next); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -125,7 +125,7 @@
      }, //indent:5 exp:5
     STRONG_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -136,7 +136,7 @@
     }, //indent:4 exp:4
     STRONG_ACCESS_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -148,13 +148,13 @@
 
     WEAK { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
     }, //indent:4 exp:4
     WEAK_ACCESS { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -165,7 +165,7 @@
     }, //indent:4 exp:4
     WEAK_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -176,7 +176,7 @@
     }, //indent:4 exp:4
     WEAK_ACCESS_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java
new file mode 100755
index 0000000000..44514f1ab5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java
@@ -0,0 +1,27 @@
+package com.puppycrawl.tools.checkstyle.indentation; //indent:0 exp:0
+
+import java.io.File; //indent:0 exp:0
+import java.io.FileFilter; //indent:0 exp:0
+
+/**                                                                         //indent:0 exp:0
+ * This test-input is intended to be checked using following configuration: //indent:1 exp:1
+ *                                                                          //indent:1 exp:1
+ * arrayInitIndent = 2                                                      //indent:1 exp:1
+ * basicOffset = 2                                                          //indent:1 exp:1
+ * braceAdjustment = 0                                                      //indent:1 exp:1
+ * caseIndent = 2                                                           //indent:1 exp:1
+ * forceStrictCondition = false                                             //indent:1 exp:1
+ * lineWrappingIndentation = 4                                              //indent:1 exp:1
+ * tabWidth = 8                                                             //indent:1 exp:1
+ * throwsIndent = 4                                                         //indent:1 exp:1
+ */                                                                         //indent:1 exp:1
+public class InputAnonymousClassInMethod { //indent:0 exp:0
+	private void walkDir(File dir, FileFilter fileFilter) { //indent:8 exp:2 warn
+		walkDir( dir, new FileFilter() { //indent:16 exp:4 warn
+			@Override //indent:24 exp:8 warn
+			public boolean accept(File path) { //indent:24 exp:24
+				return ( path.isDirectory() ); //indent:32 exp:12 warn
+			} //indent:24 exp:8 warn
+		} ); //indent:16 exp:16
+	} //indent:8 exp:2 warn
+} //indent:0 exp:0
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
index d9f64e7258..12ba8f8695 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
@@ -52,4 +52,14 @@ void foo() { //indent:8 exp:8
               ); //indent:14 exp:16 warn
         } //indent:8 exp:8
     }; //indent:4 exp:4
+
+    void chaining() { //indent:4 exp:4
+        toString() //indent:8 exp:8
+                .getClass(); //indent:16 exp:16
+        toString().contains(//indent:8 exp:8
+            new String(//indent:12 exp:12
+                    "a" //indent:20 exp:20
+            )//indent:12 exp:12
+        ); //indent:8 exp:8
+    } //indent:4 exp:4
 } //indent:0 exp:0
diff --git a/src/xdocs/config_header.xml b/src/xdocs/config_header.xml
index 61ecf9b835..4fcf03563e 100755
--- a/src/xdocs/config_header.xml
+++ b/src/xdocs/config_header.xml
@@ -104,6 +104,14 @@ line 5: ////////////////////////////////////////////////////////////////////
       </subsection>
 
       <subsection name="Example">
+          <p>
+              In default configuration the check does not rise any violations. Default values of properties are used.
+          </p>
+
+          <source>
+&lt;module name=&quot;Header&quot;/&gt;
+          </source>
+
         <p>
           To configure the check to use header file <code>&quot;java.header&quot;</code> and ignore lines <code>2</code>, <code>3</code>, and <code> 4</code> and only process Java files:
         </p>
@@ -269,6 +277,13 @@ line 6: ^\W*$
       </subsection>
 
       <subsection name="Example">
+          <p>
+              In default configuration the check does not rise any violations. Default values of properties are used.
+          </p>
+          <source>
+&lt;module name=&quot;RegexpHeader&quot;/&gt;
+          </source>
+
         <p>
           To configure the check to use header file <code>&quot;java.header&quot;</code> and <code>10</code> and <code>13</code> muli-lines:
         </p>
