diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
index 95ca4d655a..e9636cd0d9 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
@@ -164,7 +164,7 @@ public void testEngineSelfReport() throws Exception {
     @JavaVersionRule.Enforce(8)
     @AgentAttachmentRule.Enforce(retransformsClasses = true, redefinesClasses = true)
     public void testAnonymousType() throws Exception {
-        ((Runnable) Class.forName("net.bytebuddy.test.precompiled.AnonymousClassLoaderTest").newInstance()).run();
+        ((Runnable) Class.forName("net.bytebuddy.test.precompiled.AnonymousClassLoader").newInstance()).run();
     }
 
     @Test
diff --git a/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.class b/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.class
new file mode 100755
index 0000000000..71839e67e7
Binary files /dev/null and b/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.class differ
diff --git a/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.java b/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.java
new file mode 100755
index 0000000000..910a31c0ab
--- /dev/null
+++ b/byte-buddy-dep/src/test/resources/net/bytebuddy/test/precompiled/AnonymousClassLoader.java
@@ -0,0 +1,44 @@
+package net.bytebuddy.test.precompiled;
+
+import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.agent.ByteBuddyAgent;
+import net.bytebuddy.dynamic.ClassFileLocator;
+import net.bytebuddy.dynamic.loading.ClassReloadingStrategy;
+import net.bytebuddy.implementation.FixedValue;
+
+import java.lang.instrument.Instrumentation;
+import java.util.concurrent.Callable;
+
+import static net.bytebuddy.matcher.ElementMatchers.named;
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+public class AnonymousClassLoader implements Runnable {
+
+    private static final String FOO = "foo", BAR = "bar";
+
+    @Override
+    public void run() {
+        Instrumentation instrumentation = ByteBuddyAgent.install();
+        Callable<String> lambda = () -> FOO;
+        ClassReloadingStrategy classReloadingStrategy = ClassReloadingStrategy.of(instrumentation).preregistered(lambda.getClass());
+        ClassFileLocator classFileLocator = ClassFileLocator.AgentBased.of(instrumentation, lambda.getClass());
+        try {
+
+            try {
+                assertThat(lambda.call(), is(FOO));
+                new ByteBuddy()
+                        .redefine(lambda.getClass(), classFileLocator)
+                        .method(named("call"))
+                        .intercept(FixedValue.value(BAR))
+                        .make()
+                        .load(lambda.getClass().getClassLoader(), classReloadingStrategy);
+                assertThat(lambda.call(), is(BAR));
+            } finally {
+                classReloadingStrategy.reset(classFileLocator, lambda.getClass());
+            }
+        } catch (Exception exception) {
+            throw new AssertionError(exception);
+        }
+    }
+}
