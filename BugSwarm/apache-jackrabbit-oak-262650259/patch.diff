diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoder.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoder.java
index 64b4f30ef9..0ed45f2c4f 100755
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoder.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoder.java
@@ -22,6 +22,7 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -41,6 +42,33 @@
     private static final String TMP_DIR = System.getProperty("java.io.tmpdir");
     private static final Logger log = LoggerFactory.getLogger(ResponseDecoder.class);
 
+    static class DeleteOnCloseFileInputStream extends FileInputStream {
+        private static final Logger log = LoggerFactory.getLogger(ResponseDecoder.class);
+        
+        private File file;
+
+        public DeleteOnCloseFileInputStream(String fileName) throws FileNotFoundException {
+            this(new File(fileName));
+        }
+
+        public DeleteOnCloseFileInputStream(File file) throws FileNotFoundException {
+            super(file);
+            this.file = file;
+        }
+
+        public void close() throws IOException {
+            try {
+                super.close();
+            } finally {
+                if (file != null) {
+                    log.debug("Processing input stream finished! Deleting file {}", file.getAbsolutePath());
+                    file.delete();
+                    file = null;
+                }
+            }
+        }
+    }
+    
     @Override
     protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
         int length = in.readInt();
@@ -130,7 +158,7 @@ private static void decodeGetBlobResponse(int length, ByteBuf in, List<Object> o
         if ((mask & (1 << 1)) != 0) {
             log.debug("Received entire blob {}", blobId);
 
-            FileInputStream fis = new FileInputStream(tempFile);
+            FileInputStream fis = new DeleteOnCloseFileInputStream(tempFile);
             out.add(new GetBlobResponse(null, blobId, fis, fis.getChannel().size()));
         }
     }
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServer.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServer.java
index 94e6ac7330..97670fbd06 100755
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServer.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServer.java
@@ -54,10 +54,9 @@
 class StandbyServer implements AutoCloseable {
 
     private static final Logger log = LoggerFactory.getLogger(StandbyServer.class);
-    private static final int BLOB_CHUNK_SIZE = 1024 * 1024;
 
-    static Builder builder(int port, StoreProvider provider) {
-        return new Builder(port, provider);
+    static Builder builder(int port, StoreProvider provider, int blobChunkSize) {
+        return new Builder(port, provider, blobChunkSize);
     }
 
     private final int port;
@@ -77,6 +76,8 @@ static Builder builder(int port, StoreProvider provider) {
         private final int port;
 
         private final StoreProvider storeProvider;
+        
+        private final int blobChunkSize;
 
         private boolean secure;
 
@@ -86,9 +87,10 @@ static Builder builder(int port, StoreProvider provider) {
 
         private CommunicationObserver observer;
 
-        private Builder(final int port, final StoreProvider storeProvider) {
+        private Builder(final int port, final StoreProvider storeProvider, final int blobChunkSize) {
             this.port = port;
             this.storeProvider = storeProvider;
+            this.blobChunkSize = blobChunkSize;
         }
 
         Builder secure(boolean secure) {
@@ -165,7 +167,7 @@ public void initChannel(SocketChannel ch) throws Exception {
                 p.addLast(new SnappyFramedEncoder());
                 p.addLast(new GetHeadResponseEncoder());
                 p.addLast(new GetSegmentResponseEncoder());
-                p.addLast(new GetBlobResponseEncoder(BLOB_CHUNK_SIZE));
+                p.addLast(new GetBlobResponseEncoder(builder.blobChunkSize));
                 p.addLast(new GetReferencesResponseEncoder());
                 p.addLast(new ResponseObserverHandler(builder.observer));
 
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServerSync.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServerSync.java
index e086bd0994..363684d656 100755
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServerSync.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/server/StandbyServerSync.java
@@ -48,6 +48,8 @@
     private final String[] allowedClientIPRanges;
 
     private final boolean secure;
+    
+    private final int blobChunkSize;
 
     private volatile String state;
 
@@ -55,21 +57,22 @@
 
     private StandbyServer server;
 
-    public StandbyServerSync(final int port, final FileStore fileStore) {
-        this(port, fileStore, null, false);
+    public StandbyServerSync(final int port, final FileStore fileStore, final int blobChunkSize) {
+        this(port, fileStore, blobChunkSize, null, false);
     }
 
-    public StandbyServerSync(final int port, final FileStore fileStore, final boolean secure) {
-        this(port, fileStore, null, secure);
+    public StandbyServerSync(final int port, final FileStore fileStore, final int blobChunkSize, final boolean secure) {
+        this(port, fileStore, blobChunkSize, null, secure);
     }
 
-    public StandbyServerSync(final int port, final FileStore fileStore, final String[] allowedClientIPRanges) {
-        this(port, fileStore, allowedClientIPRanges, false);
+    public StandbyServerSync(final int port, final FileStore fileStore, final int blobChunkSize, final String[] allowedClientIPRanges) {
+        this(port, fileStore, blobChunkSize, allowedClientIPRanges, false);
     }
 
-    public StandbyServerSync(final int port, final FileStore fileStore, final String[] allowedClientIPRanges, final boolean secure) {
+    public StandbyServerSync(final int port, final FileStore fileStore, final int blobChunkSize, final String[] allowedClientIPRanges, final boolean secure) {
         this.port = port;
         this.fileStore = fileStore;
+        this.blobChunkSize = blobChunkSize;
         this.allowedClientIPRanges = allowedClientIPRanges;
         this.secure = secure;
         this.observer = new CommunicationObserver("primary");
@@ -102,7 +105,7 @@ public void start() {
         state = STATUS_STARTING;
 
         try {
-            server = StandbyServer.builder(port, this)
+            server = StandbyServer.builder(port, this, blobChunkSize)
                     .secure(secure)
                     .allowIPRanges(allowedClientIPRanges)
                     .withStateConsumer(this)
diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/store/StandbyStoreService.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/store/StandbyStoreService.java
index c868e3f43f..dd69153e42 100755
--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/store/StandbyStoreService.java
+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/standby/store/StandbyStoreService.java
@@ -86,6 +86,11 @@
 
     @Property(boolValue = SECURE_DEFAULT)
     public static final String SECURE = "secure";
+    
+    public static final int BLOB_CHUNK_SIZE_DEFAULT = 1024 * 1024;
+
+    @Property(intValue = BLOB_CHUNK_SIZE_DEFAULT)
+    public static final String BLOB_CHUNK_SIZE = "blob.chunkSize";
 
     public static final int READ_TIMEOUT_DEFAULT = 60000;
 
@@ -137,8 +142,9 @@ private void bootstrapMaster(ComponentContext context, FileStore fileStore) {
         int port = PropertiesUtil.toInteger(props.get(PORT), PORT_DEFAULT);
         String[] ranges = PropertiesUtil.toStringArray(props.get(ALLOWED_CLIENT_IP_RANGES), ALLOWED_CLIENT_IP_RANGES_DEFAULT);
         boolean secure = PropertiesUtil.toBoolean(props.get(SECURE), SECURE_DEFAULT);
+        int blobChunkSize = PropertiesUtil.toInteger(props.get(BLOB_CHUNK_SIZE), BLOB_CHUNK_SIZE_DEFAULT);
 
-        StandbyServerSync standbyServerSync = new StandbyServerSync(port, fileStore, ranges, secure);
+        StandbyServerSync standbyServerSync = new StandbyServerSync(port, fileStore, blobChunkSize, ranges, secure);
         closer.register(standbyServerSync);
         standbyServerSync.start();
 
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/BrokenNetworkIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/BrokenNetworkIT.java
index 7570a7269a..977acbdac3 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/BrokenNetworkIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/BrokenNetworkIT.java
@@ -154,7 +154,7 @@ private void useProxy(boolean ssl, int skipPosition, int skipBytes, int flipPosi
         storeS.flush();  // this speeds up the test a little bit...
 
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, ssl);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB, ssl);
                 StandbyClientSync clientSync = newStandbyClientSync(storeC, proxyPort.getPort(), ssl);
         ) {
             proxy.skipBytes(skipPosition, skipBytes);
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/DataStoreTestBase.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/DataStoreTestBase.java
index 8e31c8e471..92a5bd68b4 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/DataStoreTestBase.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/DataStoreTestBase.java
@@ -26,9 +26,11 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.ByteArrayInputStream;
+import java.io.InputStream;
 import java.io.IOException;
 import java.util.Random;
 
+import org.apache.commons.io.IOUtils;
 import com.google.common.io.ByteStreams;
 import org.apache.jackrabbit.oak.api.Blob;
 import org.apache.jackrabbit.oak.api.CommitFailedException;
@@ -46,12 +48,12 @@
 import org.apache.jackrabbit.oak.spi.state.NodeStore;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
 public abstract class DataStoreTestBase extends TestBase {
-
-    private static final int MB = 1024 * 1024;
+    static final long GB = 1024 * 1024 * 1024;
 
     private NetworkErrorProxy proxy;
 
@@ -67,6 +69,25 @@
 
     abstract boolean storesShouldBeEqual();
 
+    private InputStream newRandomInputStream(final long size, final int seed) {
+        return new InputStream() {
+
+            private final Random random = new Random(seed);
+
+            private long count = 0;
+
+            @Override
+            public int read() throws IOException {
+                if (count >= size) {
+                    return -1;
+                }
+                count++;
+                return Math.abs(random.nextInt());
+            }
+
+        };
+    }
+    
     protected byte[] addTestContent(NodeStore store, String child, int size)
             throws CommitFailedException, IOException {
         NodeBuilder builder = store.getRoot().builder();
@@ -81,6 +102,18 @@
         store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
         return data;
     }
+    
+    protected void addTestContentOnTheFly(NodeStore store, String child, long size, int seed) throws CommitFailedException, IOException {
+        NodeBuilder builder = store.getRoot().builder();
+        builder.child(child).setProperty("ts", System.currentTimeMillis());
+
+        InputStream randomInputStream = newRandomInputStream(size, seed);
+        Blob blob = store.createBlob(randomInputStream);
+
+        builder.child(child).setProperty("testBlob", blob);
+
+        store.merge(builder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
+    }
 
     @Before
     public void before() {
@@ -101,7 +134,7 @@ public void testSync() throws Exception {
         NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
         byte[] data = addTestContent(store, "server", blobSize);
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 1 * MB);
                 StandbyClientSync cl = newStandbyClientSync(secondary, serverPort.getPort())
         ) {
             serverSync.start();
@@ -124,6 +157,44 @@ public void testSync() throws Exception {
         assertArrayEquals(data, testData);
     }
 
+    /*
+     * See OAK-5902.
+     */
+    @Test
+    @Ignore("OAK-6538")
+    public void testSyncBigBlob() throws Exception {
+        final long blobSize = (long) (2.5 * GB);
+        final int seed = 13;
+        
+        FileStore primary = getPrimary();
+        FileStore secondary = getSecondary();
+
+        NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
+        addTestContentOnTheFly(store, "server", blobSize, seed);
+        
+        try (
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 256 * MB);
+                StandbyClientSync cl = newStandbyClientSync(secondary, serverPort.getPort(), 50_000)
+        ) {
+            serverSync.start();
+            primary.flush();
+            cl.run();
+            assertEquals(primary.getHead(), secondary.getHead());
+        }
+
+        assertTrue(primary.getStats().getApproximateSize() < MB);
+        assertTrue(secondary.getStats().getApproximateSize() < MB);
+
+        PropertyState ps = secondary.getHead().getChildNode("root")
+                .getChildNode("server").getProperty("testBlob");
+        assertNotNull(ps);
+        assertEquals(Type.BINARY.tag(), ps.getType().tag());
+        Blob b = ps.getValue(Type.BINARY);
+        assertEquals(blobSize, b.length());
+        
+        assertTrue(IOUtils.contentEquals(newRandomInputStream(blobSize, seed), b.getNewStream()));
+    }
+    
     /*
      * See OAK-4969.
      */
@@ -136,7 +207,7 @@ public void testSyncUpdatedBinaryProperty() throws Exception {
 
         NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(secondary, serverPort.getPort())
         ) {
             serverSync.start();
@@ -196,7 +267,7 @@ private void useProxy(int skipPosition, int skipBytes, int flipPosition, boolean
         NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
         byte[] data = addTestContent(store, "server", blobSize);
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(secondary, proxyPort.getPort())
         ) {
             proxy.skipBytes(skipPosition, skipBytes);
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverIPRangeIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverIPRangeIT.java
index ceb1ccacdd..a632393b4e 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverIPRangeIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverIPRangeIT.java
@@ -157,7 +157,7 @@ private void createTestWithConfig(String host, String[] ipRanges, boolean expect
 
         NodeStore store = SegmentNodeStoreBuilders.builder(storeS).build();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, ipRanges);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB, ipRanges);
                 StandbyClientSync clientSync = new StandbyClientSync(host, serverPort.getPort(), storeC, false, getClientTimeout(), false)
         ) {
             serverSync.start();
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverMultipleClientsTestIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverMultipleClientsTestIT.java
index 4e6265db78..23407e3bbc 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverMultipleClientsTestIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverMultipleClientsTestIT.java
@@ -63,7 +63,7 @@ public void testMultipleClients() throws Exception {
 
         NodeStore store = SegmentNodeStoreBuilders.builder(storeS).build();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB);
                 StandbyClientSync cl1 = newStandbyClientSync(storeC, serverPort.getPort());
                 StandbyClientSync cl2 = newStandbyClientSync(storeC2, serverPort.getPort())
         ) {
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverSslTestIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverSslTestIT.java
index ec1c6937c7..e6a85ed945 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverSslTestIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/FailoverSslTestIT.java
@@ -58,7 +58,7 @@ public void testFailoverSecure() throws Exception {
         FileStore storeS = serverFileStore.fileStore();
         FileStore storeC = clientFileStore.fileStore();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, true);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB, true);
                 StandbyClientSync clientSync = newStandbyClientSync(storeC, serverPort.getPort(), true);
         ) {
             assertTrue(synchronizeAndCompareHead(serverSync, clientSync));
@@ -70,7 +70,7 @@ public void testFailoverSecureServerPlainClient() throws Exception {
         FileStore storeS = serverFileStore.fileStore();
         FileStore storeC = clientFileStore.fileStore();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, true);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB, true);
                 StandbyClientSync clientSync = newStandbyClientSync(storeC, serverPort.getPort());
         ) {
             assertFalse(synchronizeAndCompareHead(serverSync, clientSync));
@@ -82,7 +82,7 @@ public void testFailoverPlainServerSecureClient() throws Exception {
         FileStore storeS = serverFileStore.fileStore();
         FileStore storeC = clientFileStore.fileStore();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(storeC, serverPort.getPort(), true);
         ) {
             assertFalse(synchronizeAndCompareHead(serverSync, clientSync));
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/MBeanIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/MBeanIT.java
index 544d22599c..1362ed22e9 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/MBeanIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/MBeanIT.java
@@ -61,7 +61,7 @@
     public void testServerEmptyConfig() throws Exception {
         MBeanServer jmxServer = ManagementFactory.getPlatformMBeanServer();
         ObjectName status = new ObjectName(StandbyStatusMBean.JMX_NAME + ",id=*");
-        try (StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), serverFileStore.fileStore())) {
+        try (StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), serverFileStore.fileStore(), 1 * MB)) {
             serverSync.start();
 
             Set<ObjectName> instances = jmxServer.queryNames(status, null);
@@ -153,7 +153,7 @@ public void testClientAndServerEmptyConfig() throws Exception {
         MBeanServer jmxServer = ManagementFactory.getPlatformMBeanServer();
         ObjectName clientStatus, serverStatus;
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), serverFileStore.fileStore());
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), serverFileStore.fileStore(), 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(clientFileStore.fileStore(), serverPort.getPort())
         ) {
             serverSync.start();
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/RecoverTestIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/RecoverTestIT.java
index 832858d4ce..25823affdc 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/RecoverTestIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/RecoverTestIT.java
@@ -62,7 +62,7 @@ public void testLocalChanges() throws Exception {
         addTestContent(store, "client");
 
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), storeS, 1 * MB);
                 StandbyClientSync cl = newStandbyClientSync(storeC, serverPort.getPort())
         ) {
             serverSync.start();
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestIT.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestIT.java
index 79a48091b1..99d5264431 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestIT.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestIT.java
@@ -72,7 +72,7 @@ public void testSync() throws Exception {
 
         NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(secondary, serverPort.getPort())
         ) {
             serverSync.start();
@@ -112,7 +112,7 @@ public void testSyncLoop() throws Exception {
 
         NodeStore store = SegmentNodeStoreBuilders.builder(primary).build();
         try (
-                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary);
+                StandbyServerSync serverSync = new StandbyServerSync(serverPort.getPort(), primary, 1 * MB);
                 StandbyClientSync clientSync = newStandbyClientSync(secondary, serverPort.getPort())
         ) {
             serverSync.start();
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestUtils.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestUtils.java
index eb29b83f1c..417a2c0f86 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestUtils.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/StandbyTestUtils.java
@@ -22,7 +22,10 @@
 import java.nio.ByteBuffer;
 import java.util.UUID;
 
+import com.google.common.base.Charsets;
 import com.google.common.hash.Hashing;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
 import org.apache.jackrabbit.oak.segment.RecordId;
 import org.apache.jackrabbit.oak.segment.Segment;
 import org.apache.jackrabbit.oak.segment.SegmentId;
@@ -54,5 +57,37 @@ public static Segment mockSegment(UUID uuid, byte[] buffer) {
     public static long hash(byte[] data) {
         return Hashing.murmur3_32().newHasher().putBytes(data).hash().padToLong();
     }
+    
+    public static long hash(byte mask, byte[] data) {
+        return Hashing.murmur3_32().newHasher().putByte(mask).putBytes(data).hash().padToLong();
+    }
+    
+    public static byte createMask(int currentChunk, int totalChunks) {
+        byte mask = 0;
+        if (currentChunk == 1) {
+            mask = (byte) (mask | (1 << 0));
+        }
+
+        if (currentChunk == totalChunks) {
+            mask = (byte) (mask | (1 << 1));
+        }
+
+        return mask;
+    }
+    
+    public static ByteBuf createBlobChunkBuffer(byte header,String blobId, byte[] data, byte mask) {
+        byte[] blobIdBytes = blobId.getBytes(Charsets.UTF_8);
+        
+        ByteBuf buf = Unpooled.buffer();
+        buf.writeInt(1 + 1 + 4 + blobIdBytes.length + 8 + data.length);
+        buf.writeByte(header);
+        buf.writeByte(mask);
+        buf.writeInt(blobIdBytes.length);
+        buf.writeBytes(blobIdBytes);
+        buf.writeLong(hash(mask, data));
+        buf.writeBytes(data);
+        
+        return buf;
+    }
 
 }
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/TestBase.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/TestBase.java
index af9138acc1..998b4b72d8 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/TestBase.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/TestBase.java
@@ -28,7 +28,7 @@
 import org.junit.BeforeClass;
 
 public class TestBase {
-
+    static final int MB = 1024 * 1024;
     private static final int timeout = Integer.getInteger("standby.test.timeout", 500);
 
     // Java 6 on Windows doesn't support dual IP stacks, so we will skip our
@@ -49,11 +49,18 @@ static int getClientTimeout() {
     }
 
     public StandbyClientSync newStandbyClientSync(FileStore store, int port) throws Exception {
-        return newStandbyClientSync(store, port, false);
+        return newStandbyClientSync(store, port, false, getClientTimeout());
     }
 
     public StandbyClientSync newStandbyClientSync(FileStore store, int port, boolean secure) throws Exception {
-        return new StandbyClientSync(getServerHost(), port, store, secure, getClientTimeout(), false);
+        return newStandbyClientSync(store, port, secure, getClientTimeout());
+    }
+
+    public StandbyClientSync newStandbyClientSync(FileStore store, int port, int timeout) throws Exception {
+        return newStandbyClientSync(store, port, false, timeout);
     }
 
+    public StandbyClientSync newStandbyClientSync(FileStore store, int port, boolean secure, int timeout) throws Exception {
+        return new StandbyClientSync(getServerHost(), port, store, secure, timeout, false);
+    }
 }
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BenchmarkBase.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BenchmarkBase.java
index 718f6e6264..e589ac357c 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BenchmarkBase.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BenchmarkBase.java
@@ -35,7 +35,7 @@
 public class BenchmarkBase {
     static final int port = Integer.getInteger("standby.server.port", 52800);
     static final String LOCALHOST = "127.0.0.1";
-
+    static final int MB = 1024 * 1024;
     static final int timeout = Integer.getInteger("standby.test.timeout", 500);
 
     File directoryS;
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BulkTransferBenchmark.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BulkTransferBenchmark.java
index 67e09d9d7b..d4c3b069c5 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BulkTransferBenchmark.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/benchmark/BulkTransferBenchmark.java
@@ -91,7 +91,7 @@ private void test(int number, int minExpectedSegments, int maxExpectedSegments,
         store.merge(rootbuilder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
         storeS.flush();
 
-        final StandbyServerSync serverSync = new StandbyServerSync(port, storeS, useSSL);
+        final StandbyServerSync serverSync = new StandbyServerSync(port, storeS, 1 * MB, useSSL);
         serverSync.start();
 
         System.setProperty(StandbyClientSync.CLIENT_ID_PROPERTY_NAME, "Bar");
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/GetBlobResponseEncoderTest.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/GetBlobResponseEncoderTest.java
index 08ae197128..c66e26908b 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/GetBlobResponseEncoderTest.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/GetBlobResponseEncoderTest.java
@@ -17,37 +17,54 @@
 
 package org.apache.jackrabbit.oak.segment.standby.codec;
 
-import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.hash;
+import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.createBlobChunkBuffer;
+import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.createMask;
 import static org.junit.Assert.assertEquals;
 
-import com.google.common.base.Charsets;
+import java.io.ByteArrayInputStream;
+
 import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.junit.Test;
 
 public class GetBlobResponseEncoderTest {
 
     @Test
-    public void encodeResponse() throws Exception {
+    public void shouldEncodeOneChunkResponse() throws Exception {
         byte[] blobData = new byte[] {1, 2, 3};
 
         String blobId = "blobId";
-        byte[] blobIdBytes = blobId.getBytes(Charsets.UTF_8);
+        byte mask = createMask(1, 1);
 
-        EmbeddedChannel channel = new EmbeddedChannel(new GetBlobResponseEncoder());
-        channel.writeOutbound(new GetBlobResponse("clientId", blobId, blobData));
+        EmbeddedChannel channel = new EmbeddedChannel(new GetBlobResponseEncoder(3));
+        channel.writeOutbound(new GetBlobResponse("clientId", blobId,new ByteArrayInputStream(blobData), blobData.length));
         ByteBuf buffer = (ByteBuf) channel.readOutbound();
-
-        ByteBuf expected = Unpooled.buffer();
-        expected.writeInt(1 + 4 + blobIdBytes.length + 8 + blobData.length);
-        expected.writeByte(Messages.HEADER_BLOB);
-        expected.writeInt(blobIdBytes.length);
-        expected.writeBytes(blobIdBytes);
-        expected.writeLong(hash(blobData));
-        expected.writeBytes(blobData);
-
+        ByteBuf expected = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, blobData, mask);
+        
         assertEquals(expected, buffer);
     }
 
+    @Test
+    public void shouldEncodeTwoChunksResponse() throws Exception {
+        byte[] blobData = new byte[] {1, 2, 3, 4};
+        byte[] firstChunkData = new byte[] {1, 2};
+        byte[] secondChunkbData = new byte[] {3, 4};
+
+        String blobId = "blobId";
+
+        EmbeddedChannel channel = new EmbeddedChannel(new GetBlobResponseEncoder(2));
+        channel.writeOutbound(new GetBlobResponse("clientId", blobId,new ByteArrayInputStream(blobData), blobData.length));
+        
+        ByteBuf firstBuffer = (ByteBuf) channel.readOutbound();
+        byte firstMask = createMask(1, 2);
+        ByteBuf firstExpected = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, firstChunkData, firstMask);
+
+        assertEquals(firstExpected, firstBuffer);
+        
+        ByteBuf secondBuffer = (ByteBuf) channel.readOutbound();
+        byte secondMask = createMask(2, 2);
+        ByteBuf secondExpected = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, secondChunkbData, secondMask);
+
+        assertEquals(secondExpected, secondBuffer);
+    }
 }
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoderTest.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoderTest.java
index a972ff91fc..e3ada1a679 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoderTest.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/codec/ResponseDecoderTest.java
@@ -21,19 +21,21 @@
 import static com.google.common.collect.Lists.newArrayList;
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptyList;
+import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.createBlobChunkBuffer;
+import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.createMask;
 import static org.apache.jackrabbit.oak.segment.standby.StandbyTestUtils.hash;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-import java.util.Collections;
 import java.util.UUID;
 
 import com.google.common.base.Charsets;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
+import org.apache.commons.io.IOUtils;
 import org.junit.Test;
 
 public class ResponseDecoderTest {
@@ -50,25 +52,45 @@ public void unrecognizedMessagesShouldBeDropped() throws Exception {
     }
 
     @Test
-    public void shouldDecodeValidGetBlobResponses() throws Exception {
+    public void shouldDecodeValidOneChunkGetBlobResponses() throws Exception {
         byte[] blobData = new byte[] {1, 2, 3};
 
         String blobId = "blobId";
-        byte[] blobIdBytes = blobId.getBytes(Charsets.UTF_8);
-
-        ByteBuf buf = Unpooled.buffer();
-        buf.writeInt(1 + 4 + blobIdBytes.length + 8 + blobData.length);
-        buf.writeByte(Messages.HEADER_BLOB);
-        buf.writeInt(blobIdBytes.length);
-        buf.writeBytes(blobIdBytes);
-        buf.writeLong(hash(blobData));
-        buf.writeBytes(blobData);
+        byte mask = createMask(1, 1);
+        ByteBuf buf = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, blobData, mask);
 
         EmbeddedChannel channel = new EmbeddedChannel(new ResponseDecoder());
         channel.writeInbound(buf);
         GetBlobResponse response = (GetBlobResponse) channel.readInbound();
         assertEquals("blobId", response.getBlobId());
-        assertArrayEquals(blobData, response.getBlobData());
+        assertEquals(blobData.length, response.getLength());
+        byte[] receivedData = IOUtils.toByteArray(response.getInputStream());
+        assertArrayEquals(blobData, receivedData);
+    }
+    
+    @Test
+    public void shouldDecodeValidTwoChunksGetBlobResponses() throws Exception {
+        byte[] blobData = new byte[] {1, 2, 3, 4};
+        byte[] firstChunkData = new byte[] {1, 2};
+        byte[] secondChunkbData = new byte[] {3, 4};
+
+        String blobId = "blobId";
+        
+        byte firstMask = createMask(1, 2);
+        ByteBuf firstBuf = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, firstChunkData, firstMask);
+        
+        byte secondMask = createMask(2, 2);
+        ByteBuf secondBuf = createBlobChunkBuffer(Messages.HEADER_BLOB, blobId, secondChunkbData, secondMask);
+
+        EmbeddedChannel channel = new EmbeddedChannel(new ResponseDecoder());
+        channel.writeInbound(firstBuf);
+        channel.writeInbound(secondBuf);
+        
+        GetBlobResponse response = (GetBlobResponse) channel.readInbound();
+        assertEquals("blobId", response.getBlobId());
+        assertEquals(blobData.length, response.getLength());
+        byte[] receivedData = IOUtils.toByteArray(response.getInputStream());
+        assertArrayEquals(blobData, receivedData);
     }
 
     @Test
@@ -77,13 +99,15 @@ public void shouldDropInvalidGetBlobResponses() throws Exception {
 
         String blobId = "blobId";
         byte[] blobIdBytes = blobId.getBytes(Charsets.UTF_8);
+        byte mask = createMask(1, 1);
 
         ByteBuf buf = Unpooled.buffer();
-        buf.writeInt(1 + 4 + blobIdBytes.length + 8 + blobData.length);
+        buf.writeInt(1 + 1 + 4 + blobIdBytes.length + 8 + blobData.length);
         buf.writeByte(Messages.HEADER_BLOB);
+        buf.writeByte(mask);
         buf.writeInt(blobIdBytes.length);
         buf.writeBytes(blobIdBytes);
-        buf.writeLong(hash(blobData) + 1);
+        buf.writeLong(hash(mask, blobData) + 1);
         buf.writeBytes(blobData);
 
         EmbeddedChannel channel = new EmbeddedChannel(new ResponseDecoder());
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReaderTest.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReaderTest.java
index 8b4bb3f968..232dca31c5 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReaderTest.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/DefaultStandbyBlobReaderTest.java
@@ -18,30 +18,20 @@
 package org.apache.jackrabbit.oak.segment.standby.server;
 
 import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 
+import org.apache.commons.io.IOUtils;
 import org.apache.jackrabbit.oak.spi.blob.BlobStore;
 import org.junit.Test;
 
 public class DefaultStandbyBlobReaderTest {
 
-    private static InputStream newFailingInputStream() {
-        return new InputStream() {
-
-            @Override
-            public int read() throws IOException {
-                throw new IOException("generic error");
-            }
-
-        };
-    }
-
     @Test
     public void shouldAlwaysReturnNullWithoutBlobStore() throws Exception {
         DefaultStandbyBlobReader r = new DefaultStandbyBlobReader(null);
@@ -57,19 +47,21 @@ public void shouldReturnNullIfBlobDoesNotExist() throws Exception {
     }
 
     @Test
-    public void shouldReturnNullIfBlobIsUnreadable() throws Exception {
+    public void shouldReturnNegativeLengthIfBlobIsUnreadable() throws Exception {
         BlobStore s = mock(BlobStore.class);
-        when(s.getInputStream("id")).thenReturn(newFailingInputStream());
+        when(s.getBlobLength("id")).thenReturn(-1L);
         DefaultStandbyBlobReader r = new DefaultStandbyBlobReader(s);
-        assertNull(r.readBlob("id"));
+        assertEquals(-1L, r.getBlobLength("id"));
     }
 
     @Test
     public void shouldReturnBlobContent() throws Exception {
         BlobStore s = mock(BlobStore.class);
         when(s.getInputStream("id")).thenReturn(new ByteArrayInputStream(new byte[]{1, 2, 3}));
+        when(s.getBlobLength("id")).thenReturn(3L);
         DefaultStandbyBlobReader r = new DefaultStandbyBlobReader(s);
-        assertArrayEquals(new byte[]{1, 2, 3}, r.readBlob("id"));
+        assertEquals(3, r.getBlobLength("id"));
+        assertArrayEquals(new byte[]{1, 2, 3}, IOUtils.toByteArray(r.readBlob("id")));
     }
 
 }
diff --git a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/GetBlobRequestHandlerTest.java b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/GetBlobRequestHandlerTest.java
index 087502d129..b1c56f5bb2 100755
--- a/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/GetBlobRequestHandlerTest.java
+++ b/oak-segment-tar/src/test/java/org/apache/jackrabbit/oak/segment/standby/server/GetBlobRequestHandlerTest.java
@@ -23,7 +23,10 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
+import java.io.ByteArrayInputStream;
+
 import io.netty.channel.embedded.EmbeddedChannel;
+import org.apache.commons.io.IOUtils;
 import org.apache.jackrabbit.oak.segment.standby.codec.GetBlobRequest;
 import org.apache.jackrabbit.oak.segment.standby.codec.GetBlobResponse;
 import org.junit.Test;
@@ -35,14 +38,17 @@ public void successfulReadsShouldGenerateResponses() throws Exception {
         byte[] blobData = new byte[] {99, 114, 97, 112};
 
         StandbyBlobReader reader = mock(StandbyBlobReader.class);
-        when(reader.readBlob("blobId")).thenReturn(blobData);
+        when(reader.readBlob("blobId")).thenReturn(new ByteArrayInputStream(blobData));
+        when(reader.getBlobLength("blobId")).thenReturn(4L);
 
         EmbeddedChannel channel = new EmbeddedChannel(new GetBlobRequestHandler(reader));
         channel.writeInbound(new GetBlobRequest("clientId", "blobId"));
         GetBlobResponse response = (GetBlobResponse) channel.readOutbound();
         assertEquals("clientId", response.getClientId());
         assertEquals("blobId", response.getBlobId());
-        assertArrayEquals(blobData, response.getBlobData());
+        assertEquals(blobData.length, response.getLength());
+        byte[] receivedData = IOUtils.toByteArray(response.getInputStream());
+        assertArrayEquals(blobData, receivedData);
     }
 
     @Test
