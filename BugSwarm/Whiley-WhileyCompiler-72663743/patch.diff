diff --git a/modules/wyc/src/wyc/builder/CodeGenerator.java b/modules/wyc/src/wyc/builder/CodeGenerator.java
index ec7316432a..6aff49819e 100755
--- a/modules/wyc/src/wyc/builder/CodeGenerator.java
+++ b/modules/wyc/src/wyc/builder/CodeGenerator.java
@@ -1650,9 +1650,6 @@ public int generate(Expr expression, Environment environment,
 			} else if (expression instanceof Expr.List) {
 				return generate((Expr.List) expression, environment, codes,
 						context);
-			} else if (expression instanceof Expr.SubList) {
-				return generate((Expr.SubList) expression, environment, codes,
-						context);
 			} else if (expression instanceof Expr.BinOp) {
 				return generate((Expr.BinOp) expression, environment, codes,
 						context);
@@ -2022,17 +2019,6 @@ private int generate(Expr.List expr, Environment environment,
 		return target;
 	}
 
-	private int generate(Expr.SubList expr, Environment environment,
-			AttributedCodeBlock codes, Context context) {
-		int srcOperand = generate(expr.src, environment, codes, context);
-		int startOperand = generate(expr.start, environment, codes, context);
-		int endOperand = generate(expr.end, environment, codes, context);
-		int target = environment.allocate(expr.result().raw());
-		codes.add(Codes.SubList((Type.EffectiveList) expr.type.raw(), target,
-				srcOperand, startOperand, endOperand), attributes(expr));
-		return target;
-	}
-
 	private int generate(Expr.Quantifier e, Environment environment,
 			AttributedCodeBlock codes, Context context) {
 		String trueLabel = CodeUtils.freshLabel();
diff --git a/modules/wyc/src/wyc/builder/FlowTypeChecker.java b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
index 0cf19fb46d..d5632e1f8d 100755
--- a/modules/wyc/src/wyc/builder/FlowTypeChecker.java
+++ b/modules/wyc/src/wyc/builder/FlowTypeChecker.java
@@ -1574,8 +1574,6 @@ public Expr propagate(Expr expr, Environment environment, Context context) {
 						context);
 			} else if (expr instanceof Expr.List) {
 				return propagate((Expr.List) expr, environment, context);
-			} else if (expr instanceof Expr.SubList) {
-				return propagate((Expr.SubList) expr, environment, context);
 			} else if (expr instanceof Expr.Dereference) {
 				return propagate((Expr.Dereference) expr, environment, context);
 			} else if (expr instanceof Expr.Record) {
@@ -2026,22 +2024,6 @@ private Expr propagate(Expr.Tuple expr, Environment environment,
 		return expr;
 	}
 
-	private Expr propagate(Expr.SubList expr, Environment environment,
-			Context context) throws IOException, ResolveError {
-
-		expr.src = propagate(expr.src, environment, context);
-		expr.start = propagate(expr.start, environment, context);
-		expr.end = propagate(expr.end, environment, context);
-
-		checkSuptypes(expr.src, context, Nominal.T_LIST_ANY);
-		checkIsSubtype(Type.T_INT, expr.start, context);
-		checkIsSubtype(Type.T_INT, expr.end, context);
-
-		expr.type = expandAsEffectiveList(expr.src.result());
-		
-		return expr;
-	}
-
 	private Expr propagate(Expr.FieldAccess ra, Environment environment,
 			Context context) throws IOException, ResolveError {
 		ra.src = propagate(ra.src, environment, context);
diff --git a/modules/wyc/src/wyc/io/WhileyFileParser.java b/modules/wyc/src/wyc/io/WhileyFileParser.java
index f0d15a5126..685c8bc4db 100755
--- a/modules/wyc/src/wyc/io/WhileyFileParser.java
+++ b/modules/wyc/src/wyc/io/WhileyFileParser.java
@@ -2254,64 +2254,13 @@ private Expr parseAccessExpression(WhileyFile wf,
 		while ((token = tryAndMatchOnLine(LeftSquare)) != null
 				|| (token = tryAndMatch(terminated, Dot, MinusGreater)) != null) {
 			switch (token.kind) {
-			case LeftSquare:
-				// At this point, there are two possibilities: an access
-				// expression (e.g. x[i]), or a sublist (e.g. xs[0..1], xs[..1],
-				// xs[0..]). We have to disambiguate these four different
-				// possibilities.
-
-				// Since ".." is not the valid start of a statement, we can
-				// safely set terminated=true for tryAndMatch().
-				if (tryAndMatch(true, DotDot) != null) {
-					// This indicates a sublist expression of the form
-					// "xs[..e]". Therefore, we inject 0 as the start value for
-					// the sublist expression.
-					Expr st = new Expr.Constant(
-							Constant.V_INTEGER(BigInteger.ZERO), sourceAttr(
-									start, index - 1));
-					// NOTE: expression guaranteed to be terminated by ']'.
-					Expr end = parseAdditiveExpression(wf, environment, true);
-					match(RightSquare);
-					lhs = new Expr.SubList(lhs, st, end, sourceAttr(start,
-							index - 1));
-				} else {
-					// This indicates either a list access or a sublist of the
-					// forms xs[a..b] and xs[a..]
-					//
-					// NOTE: expression guaranteed to be terminated by ']'.
-					Expr rhs = parseAdditiveExpression(wf, environment, true);
-					// Check whether this is a sublist expression
-					if (tryAndMatch(terminated, DotDot) != null) {
-						// Yes, this is a sublist but we still need to
-						// disambiguate the two possible forms xs[x..y] and
-						// xs[x..].
-						//
-						// NOTE: expression guaranteed to be terminated by ']'.
-						if (tryAndMatch(true, RightSquare) != null) {
-							// This is a sublist of the form xs[x..]. In this
-							// case, we inject |xs| as the end expression.
-							Expr end = new Expr.LengthOf(lhs, sourceAttr(start,
-									index - 1));
-							lhs = new Expr.SubList(lhs, rhs, end, sourceAttr(
-									start, index - 1));
-						} else {
-							// This is a sublist of the form xs[x..y].
-							// Therefore, we need to parse the end expression.
-							// NOTE: expression guaranteed to be terminated by
-							// ']'.
-							Expr end = parseAdditiveExpression(wf, environment,
-									true);
-							match(RightSquare);
-							lhs = new Expr.SubList(lhs, rhs, end, sourceAttr(
-									start, index - 1));
-						}
-					} else {
-						// Nope, this is a plain old list access expression
-						match(RightSquare);
-						lhs = new Expr.IndexOf(lhs, rhs, sourceAttr(start,
-								index - 1));
-					}
-				}
+			case LeftSquare:				
+				// NOTE: expression guaranteed to be terminated by ']'.
+				Expr rhs = parseAdditiveExpression(wf, environment, true);
+				// This is a plain old list access expression
+				match(RightSquare);
+				lhs = new Expr.IndexOf(lhs, rhs, sourceAttr(start,
+							index - 1));				
 				break;
 			case MinusGreater:
 				lhs = new Expr.Dereference(lhs, sourceAttr(start, index - 1));
@@ -3477,8 +3426,6 @@ private boolean mustParseAsExpr(Expr e) {
 			return true;
 		} else if(e instanceof Expr.Record) {
 			return true;
-		} else if(e instanceof Expr.SubList) {
-			return true;
 		} else if(e instanceof Expr.Tuple) {
 			return true;
 		} else {
diff --git a/modules/wyc/src/wyc/io/WhileyFilePrinter.java b/modules/wyc/src/wyc/io/WhileyFilePrinter.java
index 20ea7dfe3a..99c613be35 100755
--- a/modules/wyc/src/wyc/io/WhileyFilePrinter.java
+++ b/modules/wyc/src/wyc/io/WhileyFilePrinter.java
@@ -344,8 +344,6 @@ public void print(Expr expression) {
 			print ((Expr.ConstantAccess) expression);
 		} else if (expression instanceof Expr.List) {
 			print ((Expr.List) expression);
-		} else if (expression instanceof Expr.SubList) {
-			print ((Expr.SubList) expression);
 		} else if (expression instanceof Expr.BinOp) {
 			print ((Expr.BinOp) expression);
 		} else if (expression instanceof Expr.LengthOf) {
@@ -417,15 +415,6 @@ public void print(Expr.List e) {
 		out.print("]");
 	}
 
-	public void print(Expr.SubList e) {
-		print(e.src);
-		out.print("[");
-		print(e.start);
-		out.print("..");
-		print(e.end);
-		out.print("]");
-	}
-
 	public void print(Expr.BinOp e) {
 		printWithBrackets(e.lhs, Expr.BinOp.class, Expr.Cast.class);
 		out.print(" ");
diff --git a/modules/wyc/src/wyc/lang/Expr.java b/modules/wyc/src/wyc/lang/Expr.java
index f116e4374f..c76fc5e1b7 100755
--- a/modules/wyc/src/wyc/lang/Expr.java
+++ b/modules/wyc/src/wyc/lang/Expr.java
@@ -388,32 +388,7 @@ public List(Attribute attribute, Expr... arguments) {
 			return type;
 		}
 	}
-
-	public static class SubList extends SyntacticElement.Impl implements Expr {
-		public Expr src;
-		public Expr start;
-		public Expr end;
-		public Nominal.List type;
-
-		public SubList(Expr src, Expr start, Expr end, Attribute... attributes) {
-			super(attributes);
-			this.src = src;
-			this.start = start;
-			this.end = end;
-		}
-
-		public SubList(Expr src, Expr start, Expr end, Collection<Attribute> attributes) {
-			super(attributes);
-			this.src = src;
-			this.start = start;
-			this.end = end;
-		}
-
-		public Nominal result() {
-			return (Nominal) type;
-		}
-	}
-
+	
 	public static class Quantifier extends SyntacticElement.Impl implements Expr {
 		public final QOp cop;
 		public final ArrayList<Triple<String,Expr,Expr>> sources;
diff --git a/modules/wyc/src/wyc/lang/Exprs.java b/modules/wyc/src/wyc/lang/Exprs.java
index 7d6e9ec1d2..e70da0091f 100755
--- a/modules/wyc/src/wyc/lang/Exprs.java
+++ b/modules/wyc/src/wyc/lang/Exprs.java
@@ -40,12 +40,6 @@ private static void uses(Expr expr, Context context, HashSet<Pair<Type,String>>
 					uses(p, context, uses);
 				}
 
-			} else if (expr instanceof Expr.SubList) {
-				Expr.SubList e = (Expr.SubList) expr;
-				uses(e.src, context, uses);
-				uses(e.start, context, uses);
-				uses(e.end, context, uses);
-
 			} else if (expr instanceof Expr.BinOp) {
 				Expr.BinOp e = (Expr.BinOp) expr;
 				uses(e.lhs, context, uses);
@@ -167,11 +161,6 @@ public static boolean isPure(Expr expr, Context context) {
 				}
 				return true;
 
-			} else if (expr instanceof Expr.SubList) {
-				Expr.SubList e = (Expr.SubList) expr;
-				return isPure(e.src, context) && isPure(e.start, context)
-						&& isPure(e.end, context);
-
 			} else if (expr instanceof Expr.BinOp) {
 				Expr.BinOp e = (Expr.BinOp) expr;
 				return isPure(e.lhs, context) && isPure(e.rhs, context);
diff --git a/modules/wyc/src/wyc/testing/AllValidTests.java b/modules/wyc/src/wyc/testing/AllValidTests.java
index 5b9740ba40..02ea2cf343 100755
--- a/modules/wyc/src/wyc/testing/AllValidTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidTests.java
@@ -1304,31 +1304,6 @@ public void ListLength_Valid_3() throws IOException {
 		runTest("ListLength_Valid_3");
 	}
 
-	@Test
-	public void ListSublist_Valid_1() throws IOException {
-		runTest("ListSublist_Valid_1");
-	}
-
-	@Test
-	public void ListSublist_Valid_2() throws IOException {
-		runTest("ListSublist_Valid_2");
-	}
-
-	@Test
-	public void ListSublist_Valid_3() throws IOException {
-		runTest("ListSublist_Valid_3");
-	}
-
-	@Test
-	public void ListSublist_Valid_4() throws IOException {
-		runTest("ListSublist_Valid_4");
-	}
-
-	@Test
-	public void ListSublist_Valid_5() throws IOException {
-		runTest("ListSublist_Valid_5");
-	}
-
 	@Test
 	public void MessageRef_Valid_1() throws IOException {
 		runTest("MessageRef_Valid_1");
@@ -1944,16 +1919,6 @@ public void String_Valid_6() throws IOException {
 		runTest("String_Valid_6");
 	}
 
-	@Test
-	public void String_Valid_7() throws IOException {
-		runTest("String_Valid_7");
-	}
-
-	@Test
-	public void String_Valid_8() throws IOException {
-		runTest("String_Valid_8");
-	}
-
 	@Test
 	public void Subtype_Valid_1() throws IOException {
 		runTest("Subtype_Valid_1");
diff --git a/modules/wyil/src/wyil/io/WyilFileReader.java b/modules/wyil/src/wyil/io/WyilFileReader.java
index 516495ffca..92e74543f7 100755
--- a/modules/wyil/src/wyil/io/WyilFileReader.java
+++ b/modules/wyil/src/wyil/io/WyilFileReader.java
@@ -948,14 +948,7 @@ private Code readNaryAssign(int opcode, boolean wideBase, boolean wideRest)
 				throw new RuntimeException("expected tuple type");
 			}
 			return Codes.NewTuple((Type.Tuple) type, target, operands);
-		}
-		case Code.OPCODE_sublist: {
-			if (!(type instanceof Type.EffectiveList)) {
-				throw new RuntimeException("expected list type");
-			}
-			return Codes.SubList((Type.EffectiveList) type, target,
-					operands[0], operands[1], operands[2]);
-		}
+		}		
 		}
 		throw new RuntimeException("unknown opcode encountered (" + opcode
 				+ ")");
diff --git a/modules/wyil/src/wyil/lang/Code.java b/modules/wyil/src/wyil/lang/Code.java
index 4efab9356b..1e06567ef8 100755
--- a/modules/wyil/src/wyil/lang/Code.java
+++ b/modules/wyil/src/wyil/lang/Code.java
@@ -586,7 +586,7 @@ public boolean equals(Object o) {
 	public static final int OPCODE_newtuple         = 3 + FMT_NARYASSIGN;
 	public static final int OPCODE_indirectinvokefn = 4 + FMT_NARYASSIGN;
 	public static final int OPCODE_indirectinvokemd = 5 + FMT_NARYASSIGN;
-	public static final int OPCODE_sublist          = 6 + FMT_NARYASSIGN;
+//	public static final int OPCODE_sublist          = 6 + FMT_NARYASSIGN;
 	public static final int OPCODE_invokefn         = 8 + FMT_NARYASSIGN; // +NAMEIDX
 	public static final int OPCODE_invokemd         = 9 + FMT_NARYASSIGN; // +NAMEIDX
 	public static final int OPCODE_lambdafn         = 10 + FMT_NARYASSIGN; // +NAMEIDX
diff --git a/modules/wyil/src/wyil/lang/Codes.java b/modules/wyil/src/wyil/lang/Codes.java
index 67524ce1fc..81898ff033 100755
--- a/modules/wyil/src/wyil/lang/Codes.java
+++ b/modules/wyil/src/wyil/lang/Codes.java
@@ -218,17 +218,6 @@ public static Move Move(Type type, int target, int operand) {
 		return new Move(type, target, operand);
 	}
 
-	public static SubList SubList(Type.EffectiveList type, int target,
-			int sourceOperand, int leftOperand, int rightOperand) {
-		int[] operands = new int[] { sourceOperand, leftOperand, rightOperand };
-		return new SubList(type, target, operands);
-	}
-
-	public static SubList SubList(Type.EffectiveList type, int target,
-			int[] operands) {
-		return new SubList(type, target, operands);
-	}
-
 	public static ListOperator ListOperator(Type.EffectiveList type, int target,
 			int leftOperand, int rightOperand, ListOperatorKind dir) {
 		return new ListOperator(type, target, leftOperand, rightOperand,
@@ -1896,41 +1885,7 @@ public String toString() {
 			return "lengthof %" + target() + " = %" + operand(0) + " : " + type();
 		}
 	}
-
-	/**
-	 * Reads the (effective) list value from a source operand register, and the
-	 * integer values from two index operand registers, computes the sublist and
-	 * writes the result back to a target register.
-	 *
-	 * @author David J. Pearce
-	 *
-	 */
-	public static final class SubList extends
-			AbstractNaryAssignable<Type.EffectiveList> {
-
-		private SubList(Type.EffectiveList type, int target, int[] operands) {
-			super(type, target, operands);
-		}
-
-		public int opcode() {
-			return OPCODE_sublist;
-		}
-
-		@Override
-		public final Code.Unit clone(int nTarget, int[] nOperands) {
-			return SubList(type(), nTarget, nOperands);
-		}
-
-		public boolean equals(Object o) {
-			return o instanceof SubList && super.equals(o);
-		}
-
-		public String toString() {
-			return "sublist %" + target() + " = %" + operands()[0] + ", %"
-					+ operands()[1] + ", %" + operands()[2] + " : " + type();
-		}
-	}
-
+	
 	/**
 	 * Reads an effective list or map from the source (left) operand register,
 	 * and a key value from the key (right) operand register and returns the
diff --git a/modules/wyil/src/wyil/transforms/ConstantPropagation.java b/modules/wyil/src/wyil/transforms/ConstantPropagation.java
index 5bdf34b9d1..274507ef04 100755
--- a/modules/wyil/src/wyil/transforms/ConstantPropagation.java
+++ b/modules/wyil/src/wyil/transforms/ConstantPropagation.java
@@ -221,8 +221,6 @@ public Env propagate(CodeBlock.Index index, Code code, Env environment) {
 			infer(index,(Codes.ListOperator)code,environment);
 		} else if(code instanceof Codes.LengthOf) {
 			infer(index,(Codes.LengthOf)code,environment);
-		} else if(code instanceof Codes.SubList) {
-			infer(index,(Codes.SubList)code,environment);
 		} else if(code instanceof Codes.IndexOf) {
 			infer(index,(Codes.IndexOf)code,environment);
 		} else if(code instanceof Codes.Assign) {
@@ -412,36 +410,6 @@ public void infer(CodeBlock.Index index, Codes.LengthOf code, Env environment) {
 		assign(code.target(), result, environment, index);
 	}
 
-	public void infer(CodeBlock.Index index, Codes.SubList code,
-			Env environment) {
-		Constant list = environment.get(code.operands()[0]);
-		Constant start = environment.get(code.operands()[1]);
-		Constant end = environment.get(code.operands()[2]);
-		Constant result = null;
-		if (list instanceof Constant.List && start instanceof Constant.Decimal
-				&& end instanceof Constant.Decimal) {
-			Constant.Decimal en = (Constant.Decimal) end;
-			Constant.Decimal st = (Constant.Decimal) start;
-			if (en.value.scale() <= 0 && st.value.scale() <= 0) {
-				Constant.List li = (Constant.List) list;
-				int eni = en.value.intValue();
-				int sti = st.value.intValue();
-				if (BigRational.valueOf(eni).equals(en.value) && eni >= 0
-						&& eni <= li.values.size()
-						&& BigRational.valueOf(sti).equals(st.value)
-						&& sti >= 0 && sti <= li.values.size()) {
-					ArrayList<Constant> nvals = new ArrayList<Constant>();
-					for (int i = sti; i < eni; ++i) {
-						nvals.add(li.values.get(i));
-					}
-					result = Constant.V_LIST(nvals);
-				}
-			}
-		}
-
-		assign(code.target(),result,environment,index);
-	}
-
 	public void infer(CodeBlock.Index index, Codes.IndexOf code,
 			Env environment) {
 		Constant src = environment.get(code.operand(0));
diff --git a/modules/wyil/src/wyil/util/Interpreter.java b/modules/wyil/src/wyil/util/Interpreter.java
index 846d47e727..ff02091a68 100755
--- a/modules/wyil/src/wyil/util/Interpreter.java
+++ b/modules/wyil/src/wyil/util/Interpreter.java
@@ -216,8 +216,6 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.Nop) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Return) {
 			return execute((Codes.Return) bytecode, frame, context);
-		} else if (bytecode instanceof Codes.SubList) {
-			return execute((Codes.SubList) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Switch) {
 			return execute((Codes.Switch) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.TupleLoad) {
@@ -1281,26 +1279,6 @@ private Object execute(Codes.Return bytecode, Constant[] frame,
 		}
 	}
 
-	private Object execute(Codes.SubList bytecode, Constant[] frame,
-			Context context) {
-		Constant _source = frame[bytecode.operand(0)];
-		Constant _fromIndex = frame[bytecode.operand(1)];
-		Constant _toIndex = frame[bytecode.operand(2)];
-		// Check that we have a function reference
-		checkType(_source, context, Constant.List.class);
-		checkType(_fromIndex, context, Constant.Integer.class);
-		checkType(_toIndex, context, Constant.Integer.class);
-		// Now, perform the append
-		Constant.List source = (Constant.List) _source;
-		Constant.Integer fromIndex = (Constant.Integer) _fromIndex;
-		Constant.Integer toIndex = (Constant.Integer) _toIndex;
-
-		frame[bytecode.target()] = Constant.V_LIST(source.values.subList(
-				fromIndex.value.intValue(), toIndex.value.intValue()));
-
-		return context.pc.next();
-	}
-
 	private Object execute(Codes.Switch bytecode, Constant[] frame,
 			Context context) {
 		//
diff --git a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
index a19956cb5f..5bb2c9d012 100755
--- a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
+++ b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
@@ -634,8 +634,6 @@ private int translate(CodeBlock.Index index, Code code, int freeSlot,
 				translate(index, (Codes.Lambda) code, freeSlot, bytecodes);
 			} else if (code instanceof Codes.LengthOf) {
 				translate(index, (Codes.LengthOf) code, freeSlot, bytecodes);
-			} else if (code instanceof Codes.SubList) {
-				translate(index, (Codes.SubList) code, freeSlot, bytecodes);
 			} else if (code instanceof Codes.IndexOf) {
 				translate(index, (Codes.IndexOf) code, freeSlot, bytecodes);
 			} else if (code instanceof Codes.Assign) {
@@ -1351,20 +1349,6 @@ private void translate(CodeBlock.Index index, Codes.LengthOf c,
 		bytecodes.add(new Bytecode.Store(c.target(), WHILEYINT));
 	}
 
-	private void translate(CodeBlock.Index index, Codes.SubList c,
-			int freeSlot, ArrayList<Bytecode> bytecodes) {
-		bytecodes.add(new Bytecode.Load(c.operands()[0], WHILEYLIST));
-		bytecodes.add(new Bytecode.Load(c.operands()[1], WHILEYINT));
-		bytecodes.add(new Bytecode.Load(c.operands()[2], WHILEYINT));
-
-		JvmType.Function ftype = new JvmType.Function(WHILEYLIST, WHILEYLIST,
-				WHILEYINT, WHILEYINT);
-		bytecodes.add(new Bytecode.Invoke(WHILEYLIST, "sublist", ftype,
-				Bytecode.InvokeMode.STATIC));
-
-		bytecodes.add(new Bytecode.Store(c.target(), WHILEYLIST));
-	}
-
 	private void translate(CodeBlock.Index index, Codes.IndexOf c,
 			int freeSlot, ArrayList<Bytecode> bytecodes) {
 
diff --git a/modules/wyrt/build.xml b/modules/wyrt/build.xml
index ed864047b9..0dcd737d80 100755
--- a/modules/wyrt/build.xml
+++ b/modules/wyrt/build.xml
@@ -3,7 +3,7 @@
 
   <target name="compile-wyrt">
     <taskdef name="wyc" classname="wyc.util.WycAntTask" classpath="../wyc/src/:../wyil/src/:../wycs/src/:../wybs/src/:../wyrl/src/"/>
-    <wyc verbose="false" verificationConditions="true" bootpath="../wycs/stdlib/" whileydir="src" wycsdir="src" includes="whiley/**/*.whiley"/>
+    <wyc verbose="false" verificationConditions="false" bootpath="../wycs/stdlib/" whileydir="src" wycsdir="src" includes="whiley/**/*.whiley"/>
   </target>
 
   <target name="build" depends="compile-wyrt">
diff --git a/modules/wyrt/src/whiley/lang/List.whiley b/modules/wyrt/src/whiley/lang/List.whiley
index e51c008f92..93bc217c3e 100755
--- a/modules/wyrt/src/whiley/lang/List.whiley
+++ b/modules/wyrt/src/whiley/lang/List.whiley
@@ -58,15 +58,6 @@ ensures |result| == size:
         i = i + 1
     return r
 
-public function reverse([bool] list) -> [bool]:
-    return list[|list|..0]
-
-public function reverse([byte] list) -> [byte]:
-    return list[|list|..0]
-
-public function reverse([int] list) -> [int]:
-    return list[|list|..0]
-
 // find first index in list which matches character.  If no match,
 // then return null.
 public function indexOf([int] items, int c) -> int|null:
diff --git a/modules/wyrt/src/whiley/lang/Stack.whiley b/modules/wyrt/src/whiley/lang/Stack.whiley
index 1a34a439da..22623b4950 100755
--- a/modules/wyrt/src/whiley/lang/Stack.whiley
+++ b/modules/wyrt/src/whiley/lang/Stack.whiley
@@ -25,33 +25,33 @@
 
 package whiley.lang
 
+public type Stack is {
+    [int] items,
+    int length
+}
+
 /**
  * Return the top element of the "stack".
  */
-public function top([int] list) -> int
-// Input list cannot be empty
-requires |list| > 0:
+public function top(Stack this) -> int:
     //
-    return list[|list|-1]
+    return this.items[this.length-1]
 
 
 /**
  * Push an element onto the "stack".
  */
-public function push([int] list, int element) -> ([int] r)
-// Length of stack increases by one
-ensures |r| == |list| + 1:
+public function push(Stack this, int element) -> (Stack r):
     //
-    return list ++ [element]
+    this.items[this.length] = element
+    this.length = this.length + 1
+    return this
 
 /**
  * Pop an element off the "stack".
  */
-public function pop([int] list) -> ([int] r)
-// Input list cannot be empty
-requires |list| > 0
-// Length of list decreases by one
-ensures |r| == |list| - 1:
+public function pop(Stack this) -> (Stack r):
+    //
+    this.length = this.length - 1
     //
-    int end = |list| - 1
-    return list[0..end]
+    return this
diff --git a/tests/valid/Complex_Valid_8.whiley b/tests/valid/Complex_Valid_8.whiley
index 7a47a49739..22d00a5a21 100755
--- a/tests/valid/Complex_Valid_8.whiley
+++ b/tests/valid/Complex_Valid_8.whiley
@@ -23,58 +23,58 @@ constant EmptyTrie is { transitions: [] }
 
 // Add a complete string into a Trie starting from the root node.
 function add(Trie trie, string str) -> Trie:
-    return add(trie,0,str)
+    return add(trie,0,str,0)
 
 // Add a string into a Trie from a given state, producing an
 // updated Trie.
-function add(Trie trie, int state, string str) -> Trie
+function add(Trie trie, int state, string str, int index) -> Trie
 requires state >= 0:
     //
-    if |str| == 0:
+    if |str| == index:
         return trie
     else:
         //
         // Check whether transition exists for first
         // character of str already.
-        char c = str[0]
+        char c = str[index]
         int i = 0
         //
         while i < |trie.transitions| where i >= 0:
             Transition t = trie.transitions[i]
             if t.from == state && t.character == c:
                 // Yes, existing transition for character
-                return add(trie,t.to,str[1..])
+                return add(trie,t.to,str,index+1)
             i = i + 1
         //
         // No existing transition, so make a new one.
         int target = |trie.transitions| + 1
         Transition t = { from: state, to: target, character: c }
         trie.transitions = trie.transitions ++ [t]
-        return add(trie,target,str[1..])
+        return add(trie,target,str,index+1)
 
 // Check whether a given string is contained in the trie,
 // starting from the root state.
 function contains(Trie trie, string str) -> bool:
-    return contains(trie,0,str)
+    return contains(trie,0,str,0)
 
 // Check whether a given string is contained in the trie,
 // starting from a given state.
-function contains(Trie trie, int state, string str) -> bool
+function contains(Trie trie, int state, string str, int index) -> bool
 requires state >= 0:
     //
-    if |str| == 0:
+    if |str| == index:
         return true
     else:
         // Check whether transition exists for first
         // character of str.
-        char c = str[0]
+        char c = str[index]
         int i = 0
         //
         while i < |trie.transitions| where i >= 0:
             Transition t = trie.transitions[i]
             if t.from == state && t.character == c:
                 // Yes, existing transition for character
-                return contains(trie,t.to,str[1..])
+                return contains(trie,t.to,str,index+1)
             i = i + 1
         //
         return false
diff --git a/tests/valid/Lambda_Valid_3.whiley b/tests/valid/Lambda_Valid_3.whiley
index f3c0a0568d..6edd464b38 100755
--- a/tests/valid/Lambda_Valid_3.whiley
+++ b/tests/valid/Lambda_Valid_3.whiley
@@ -38,10 +38,15 @@ function min(int a, int b) -> int:
 
 // Read specified number of bytes from buffer
 method read(BufferState state, int amount) -> [byte]:
-    int start = state->pos
-    int end = start + min(amount, |state->bytes| - start)
-    state->pos = end
-    return state->bytes[start..end]
+    [byte] r = []
+    int i = 0
+    //
+    while i < amount && state->pos < |state->bytes|:
+        r = r ++ [state->bytes[state->pos]]
+        state->pos = state->pos + 1
+        i = i + 1
+    //
+    return r
 
 // Construct buffer from list of bytes
 public method BufferInputStream([byte] buffer) -> InputStream:
diff --git a/tests/valid/Lambda_Valid_4.whiley b/tests/valid/Lambda_Valid_4.whiley
index 937442ea5a..b31772e960 100755
--- a/tests/valid/Lambda_Valid_4.whiley
+++ b/tests/valid/Lambda_Valid_4.whiley
@@ -42,10 +42,15 @@ function min(int a, int b) -> int:
 
 // Read specified number of bytes from buffer
 method read(BufferState state, int amount) -> [byte]:
-    int start = state->pos
-    int end = start + min(amount, |state->bytes| - start)
-    state->pos = end
-    return state->bytes[start..end]
+    [byte] r = []
+    int i = 0
+    //
+    while i < amount && state->pos < |state->bytes|:
+        r = r ++ [state->bytes[state->pos]]
+        state->pos = state->pos + 1
+        i = i + 1
+    //
+    return r
 
 // Check whether buffer is empty or not
 method eof(BufferState state) -> bool:
diff --git a/tests/valid/ListSublist_Valid_1.whiley b/tests/valid/ListSublist_Valid_1.whiley
deleted file mode 100755
index ba8cf86ecf..0000000000
--- a/tests/valid/ListSublist_Valid_1.whiley
+++ /dev/null
@@ -1,16 +0,0 @@
-
-
-type posintlist is ([int] xs) where no { i in 0..|xs| | xs[i] < 0 }
-
-function sum(posintlist ls) -> (int result)
-// Result cannot be negative
-ensures result >= 0:
-    if |ls| == 0:
-        return 0
-    else:
-        [int] rest = ls[1..|ls|]
-        return ls[0] + sum(rest)
-
-public export method test() -> void:
-    int c = sum([1, 2, 3, 4, 5, 6, 7])
-    assume c == 28
diff --git a/tests/valid/ListSublist_Valid_2.whiley b/tests/valid/ListSublist_Valid_2.whiley
deleted file mode 100755
index 1b2c6ce9bf..0000000000
--- a/tests/valid/ListSublist_Valid_2.whiley
+++ /dev/null
@@ -1,14 +0,0 @@
-
-
-type posintlist is [int]
-
-function sum(posintlist ls) -> int:
-    if |ls| == 0:
-        return 0
-    else:
-        [int] rest = ls[1..|ls|]
-        return ls[0] + sum(rest)
-
-public export method test():
-    int c = sum([1, 2, 3, 4, 5, 6, 7])
-    assume c == 28
diff --git a/tests/valid/ListSublist_Valid_3.whiley b/tests/valid/ListSublist_Valid_3.whiley
deleted file mode 100755
index f9200e1831..0000000000
--- a/tests/valid/ListSublist_Valid_3.whiley
+++ /dev/null
@@ -1,15 +0,0 @@
-
-
-type nat is (int x) where x >= 0
-
-function tail([int] ls) -> [nat]
-// Input list cannot be empty
-requires |ls| > 0
-// Only first element can be negative
-requires all { i in 1 .. |ls| | ls[i] >= 0 }:
-    //
-    return ls[1..|ls|]
-
-public export method test() -> void:
-    assume tail([1, 2, 3, 4]) == [2,3,4]
-    assume tail([1]) == []
diff --git a/tests/valid/ListSublist_Valid_4.whiley b/tests/valid/ListSublist_Valid_4.whiley
deleted file mode 100755
index b57d20bfd2..0000000000
--- a/tests/valid/ListSublist_Valid_4.whiley
+++ /dev/null
@@ -1,7 +0,0 @@
-
-
-public export method test() -> void:
-    [int] list = [1, 2, 3]
-    [int] sublist = list[0..2]
-    assert list == [1,2,3]
-    assert sublist == [1,2]
diff --git a/tests/valid/ListSublist_Valid_5.whiley b/tests/valid/ListSublist_Valid_5.whiley
deleted file mode 100755
index 94c571328b..0000000000
--- a/tests/valid/ListSublist_Valid_5.whiley
+++ /dev/null
@@ -1,14 +0,0 @@
-
-
-type posintlist is [int]
-
-function sum(posintlist ls) -> int:
-    if |ls| == 0:
-        return 0
-    else:
-        [int] rest = ls[1..|ls|]
-        return ls[0] + sum(rest)
-
-public export method test() -> void:
-    int c = sum([-12987987234, -1, 2, 409234, 2398729879])
-    assume c == -10588848120
diff --git a/tests/valid/Process_Valid_10.whiley b/tests/valid/Process_Valid_10.whiley
index 3594af7878..7be2b79be0 100755
--- a/tests/valid/Process_Valid_10.whiley
+++ b/tests/valid/Process_Valid_10.whiley
@@ -1,40 +1,40 @@
 
 
-type Queue is {[int] items}
+type Queue is {[int] items, int length}
 
 method get(&Queue this) -> int:
-    int item = this->items[0]
-    this->items = this->items[1..|this->items|]
-    return item
+    this->length = this->length - 1
+    return this->items[this->length]
 
 method put(&Queue this, int item) -> void:
-    this->items = this->items ++ [item]
+    this->items[this->length] = item
+    this->length = this->length + 1
 
 method isEmpty(&Queue this) -> bool:
-    return |this->items| == 0
+    return this->length == 0
 
 public export method test() -> void:
-    [int] items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
-    &Queue q = new {items: []}
-    // Put items into the queue
+    [int] items = [1, 2, 3, 4, 5]
+    &Queue q = new {items: [0,0,0,0,0], length: 0}
+    // Put items into the queue    
     put(q, 1)
-    assume q->items == [1]
+    assume q->items == [1,0,0,0,0]    
     put(q, 2)
-    assume q->items == [1,2]
+    assume q->items == [1,2,0,0,0]
     put(q, 3)
-    assume q->items == [1,2,3]
+    assume q->items == [1,2,3,0,0]
     put(q, 4)
-    assume q->items == [1,2,3,4]
+    assume q->items == [1,2,3,4,0]    
     put(q, 5)
-    assume q->items == [1,2,3,4,5]
+    assume q->items == [1,2,3,4,5]    
     // Get items outof the queue
-    assume get(q) == 1
+    assume get(q) == 5
     assume !isEmpty(q)
-    assume get(q) == 2
+    assume get(q) == 4
     assume !isEmpty(q)
     assume get(q) == 3
     assume !isEmpty(q)
-    assume get(q) == 4
+    assume get(q) == 2
     assume !isEmpty(q)
-    assume get(q) == 5
+    assume get(q) == 1
     assume isEmpty(q)
diff --git a/tests/valid/Process_Valid_9.whiley b/tests/valid/Process_Valid_9.whiley
index 623209fbde..2922a03c90 100755
--- a/tests/valid/Process_Valid_9.whiley
+++ b/tests/valid/Process_Valid_9.whiley
@@ -1,43 +1,48 @@
 
 
-type Queue is {[int] items}
+type Queue is {[int] items, int length}
 
 method get(&Queue this) -> int:
-    int item = this->items[0]
-    this->items = this->items[1..|this->items|]
-    return item
+    this->length = this->length - 1
+    return this->items[this->length]
 
 method put(&Queue this, int item) -> void:
-    this->items = this->items ++ [item]
+    this->items[this->length] = item
+    this->length = this->length + 1
 
 method isEmpty(&Queue this) -> bool:
-    return |this->items| == 0
+    return this->length == 0
 
-method Queue() -> &Queue:
-    return new {items: []}
+method Queue(int capacity) -> &Queue:
+    [int] slots = []
+    //
+    while |slots| < capacity:
+        slots = slots ++ [0]
+    //
+    return new {items: slots, length: 0}
 
 public export method test() -> void:
-    [int] items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
-    &Queue q = Queue()
-    // Put items into the queue
+    [int] items = [1, 2, 3, 4, 5]
+    &Queue q = Queue(5)
+    // Put items into the queue    
     put(q, 1)
-    assume q->items == [1]
+    assume q->items == [1,0,0,0,0]    
     put(q, 2)
-    assume q->items == [1,2]
+    assume q->items == [1,2,0,0,0]
     put(q, 3)
-    assume q->items == [1,2,3]
+    assume q->items == [1,2,3,0,0]
     put(q, 4)
-    assume q->items == [1,2,3,4]
+    assume q->items == [1,2,3,4,0]    
     put(q, 5)
-    assume q->items == [1,2,3,4,5]
+    assume q->items == [1,2,3,4,5]    
     // Get items outof the queue
-    assume get(q) == 1
+    assume get(q) == 5
     assume !isEmpty(q)
-    assume get(q) == 2
+    assume get(q) == 4
     assume !isEmpty(q)
     assume get(q) == 3
     assume !isEmpty(q)
-    assume get(q) == 4
+    assume get(q) == 2
     assume !isEmpty(q)
-    assume get(q) == 5
+    assume get(q) == 1
     assume isEmpty(q)
diff --git a/tests/valid/String_Valid_7.whiley b/tests/valid/String_Valid_7.whiley
deleted file mode 100755
index 56c835247c..0000000000
--- a/tests/valid/String_Valid_7.whiley
+++ /dev/null
@@ -1,11 +0,0 @@
-
-
-function f([int] str, int end) -> [int]:
-    return str[0..end]
-
-public export method test() -> void:
-    [int] str = "Hello Cruel World"
-    assume f(str, 0) == ""
-    assume f(str, 1) == "H"
-    assume f(str, 5) == "Hello"
-    assume f(str, 10) == "Hello Crue"
diff --git a/tests/valid/String_Valid_8.whiley b/tests/valid/String_Valid_8.whiley
deleted file mode 100755
index 5b76a2d08e..0000000000
--- a/tests/valid/String_Valid_8.whiley
+++ /dev/null
@@ -1,10 +0,0 @@
-
-
-public export method test() -> void:
-    [int] x = "abcdefghjkl"
-    [int] y = x[0..2]
-    assert y == "ab"
-    y = x[1..3]
-    assert y == "bc" 
-    y = x[2..|x|]
-    assert y == "cdefghjkl"
