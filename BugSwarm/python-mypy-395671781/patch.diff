diff --git a/mypy/semanal.py b/mypy/semanal.py
index 1caba0d017..41b844c1af 100755
--- a/mypy/semanal.py
+++ b/mypy/semanal.py
@@ -1471,7 +1471,7 @@ def process_import_over_existing_name(self,
                                           module_symbol: SymbolTableNode,
                                           import_node: ImportBase) -> bool:
         if (existing_symbol.kind in (LDEF, GDEF, MDEF) and
-                isinstance(existing_symbol.node, (Var, FuncDef, TypeInfo, Decorator))):
+                isinstance(existing_symbol.node, (Var, FuncDef, TypeInfo, Decorator, TypeAlias))):
             # This is a valid import over an existing definition in the file. Construct a dummy
             # assignment that we'll use to type check the import.
             lvalue = NameExpr(imported_id)
diff --git a/test-data/unit/check-classes.test b/test-data/unit/check-classes.test
index f21436435a..0f955a5e48 100755
--- a/test-data/unit/check-classes.test
+++ b/test-data/unit/check-classes.test
@@ -2244,14 +2244,14 @@ class B:
     a_int = SameA[int]
 
 reveal_type(B().a_any) # E: Revealed type is 'def () -> __main__.A[Any, Any]'
-reveal_type(B().a_int()) # E: Revealed type is '__main__.A[builtins.int*, builtins.int*]'
+reveal_type(B().a_int()) # E: Revealed type is '__main__.A[builtins.int, builtins.int]'
 
 class C:
     a_int = SameA[int]
     def __init__(self) -> None:
         self.aa = self.a_int()
 
-reveal_type(C().aa) # E: Revealed type is '__main__.A[builtins.int, builtins.int]'
+reveal_type(C().aa) # E: Revealed type is '__main__.A[builtins.int*, builtins.int*]'
 [out]
 
 
diff --git a/test-data/unit/check-type-aliases.test b/test-data/unit/check-type-aliases.test
index ea907bc455..d1adfa74c4 100755
--- a/test-data/unit/check-type-aliases.test
+++ b/test-data/unit/check-type-aliases.test
@@ -372,3 +372,25 @@ from typing import Any
 A = Any
 A # this should not fail
 [out]
+
+[case testDoubleImportsOfAnAlias]
+from b import *
+from c import *
+[file b.py]
+from a import A
+[file c.py]
+from a import A
+[file a.py]
+A = int
+[out]
+
+[case testDoubleImportsOfAnAlias2]
+from b import A
+from c import A
+[file b.py]
+from a import A
+[file c.py]
+from a import A
+[file a.py]
+A = int
+[out]
diff --git a/test-data/unit/fine-grained.test b/test-data/unit/fine-grained.test
index 57d3281692..9d0205bd94 100755
--- a/test-data/unit/fine-grained.test
+++ b/test-data/unit/fine-grained.test
@@ -7240,7 +7240,7 @@ a.py:4: error: Module 'b' has no attribute 'A'
 a.py:4: error: Name 'A' already defined on line 3
 
 -- the order of errors is different with cache
-[case testImportOnTopOfAlias2-skip-cache]
+[case testImportOnTopOfAlias2]
 from a import A
 x: A
 [file a.py]
@@ -7257,8 +7257,7 @@ def A(x: str) -> str: pass
 [builtins fixtures/list.pyi]
 [out]
 ==
-a.py:4: error: Name 'A' already defined on line 3
-main:2: error: Invalid type "b.A"
+a.py:4: error: Incompatible import of "A" (imported name has type "Callable[[str], str]", local name has type "Type[List[Any]]")
 
 [case testRefreshForWithTypeComment1]
 [file a.py]
