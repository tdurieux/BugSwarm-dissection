diff --git a/pom.xml b/pom.xml
index 45c04096e..fba83ef0d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -486,8 +486,8 @@
 						<apiSource>
 							<springmvc>true</springmvc>
 							<locations>
-								<location>de.thm.arsnova.controller</location>
-								<location>de.thm.arsnova.entities</location>
+								<location>de.thm.arsnova.controller.v2</location>
+								<location>de.thm.arsnova.entities.v2</location>
 							</locations>
 							<schemes>
 								<scheme>http</scheme>
diff --git a/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java b/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java
new file mode 100644
index 000000000..7a38f181b
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/AbstractEntityController.java
@@ -0,0 +1,82 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Entity;
+import de.thm.arsnova.services.EntityService;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PatchMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.PutMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+
+import java.io.IOException;
+import java.util.Map;
+
+/**
+ * Base type for Entity controllers which provides basic CRUD operations and supports Entity patching.
+ *
+ * @param <E> Entity type
+ * @author Daniel Gerhardt
+ */
+public abstract class AbstractEntityController<E extends Entity> {
+	protected static final String DEFAULT_ROOT_MAPPING = "/{id}";
+	protected static final String DEFAULT_ID_MAPPING = "/{id}";
+	protected static final String GET_MAPPING = DEFAULT_ID_MAPPING;
+	protected static final String PUT_MAPPING = DEFAULT_ID_MAPPING;
+	protected static final String POST_MAPPING = DEFAULT_ROOT_MAPPING;
+	protected static final String PATCH_MAPPING = DEFAULT_ID_MAPPING;
+	protected static final String DELETE_MAPPING = DEFAULT_ID_MAPPING;
+	protected final EntityService<E> entityService;
+
+	protected AbstractEntityController(final EntityService<E> entityService) {
+		this.entityService = entityService;
+	}
+
+	@GetMapping(GET_MAPPING)
+	public E get(@PathVariable final String id) {
+		return entityService.get(id);
+	}
+
+	@PutMapping(PUT_MAPPING)
+	public void put(@RequestBody final E entity) {
+		entityService.create(entity);
+	}
+
+	@PostMapping(POST_MAPPING)
+	public void post(@RequestBody final E entity) {
+		E oldEntity = entityService.get(entity.getId());
+		entityService.update(oldEntity, entity);
+	}
+
+	@PatchMapping(PATCH_MAPPING)
+	public void patch(@PathVariable final String id, @RequestBody final Map<String, Object> changes)
+			throws IOException {
+		E entity = entityService.get(id);
+		entityService.patch(entity, changes);
+	}
+
+	@DeleteMapping(DELETE_MAPPING)
+	public void delete(@PathVariable final String id) {
+		E entity = entityService.get(id);
+		entityService.delete(entity);
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/CommentController.java b/src/main/java/de/thm/arsnova/controller/CommentController.java
new file mode 100644
index 000000000..cfcb1579c
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/CommentController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Comment;
+import de.thm.arsnova.services.CommentService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/comment")
+public class CommentController extends AbstractEntityController<Comment> {
+	private CommentService commentService;
+
+	public CommentController(final CommentService commentService) {
+		super(commentService);
+		this.commentService = commentService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/ContentController.java b/src/main/java/de/thm/arsnova/controller/ContentController.java
new file mode 100644
index 000000000..7a9658af6
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/ContentController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Content;
+import de.thm.arsnova.services.ContentService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/content")
+public class ContentController extends AbstractEntityController<Content> {
+	private ContentService contentService;
+
+	public ContentController(final ContentService contentService) {
+		super(contentService);
+		this.contentService = contentService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/MotdController.java b/src/main/java/de/thm/arsnova/controller/MotdController.java
new file mode 100644
index 000000000..1a3df379a
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/MotdController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Motd;
+import de.thm.arsnova.services.MotdService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/motd")
+public class MotdController extends AbstractEntityController<Motd> {
+	private MotdService motdService;
+
+	public MotdController(final MotdService motdService) {
+		super(motdService);
+		this.motdService = motdService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/RoomController.java b/src/main/java/de/thm/arsnova/controller/RoomController.java
new file mode 100644
index 000000000..5f0797fbf
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/RoomController.java
@@ -0,0 +1,34 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.Room;
+import de.thm.arsnova.services.RoomService;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/room")
+public class RoomController extends AbstractEntityController<Room> {
+	private RoomService roomService;
+
+	public RoomController(final RoomService roomService) {
+		super(roomService);
+		this.roomService = roomService;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/controller/v2/ContentController.java b/src/main/java/de/thm/arsnova/controller/v2/ContentController.java
index e3b0340a9..250da92e1 100644
--- a/src/main/java/de/thm/arsnova/controller/v2/ContentController.java
+++ b/src/main/java/de/thm/arsnova/controller/v2/ContentController.java
@@ -55,6 +55,7 @@
 import javax.servlet.http.HttpServletResponse;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -104,6 +105,8 @@ public Content getContent(@PathVariable final String contentId) {
 	@ResponseStatus(HttpStatus.CREATED)
 	public Content postContent(@RequestBody final Content content) {
 		de.thm.arsnova.entities.Content contentV3 = fromV2Migrator.migrate(content);
+		final String roomId = roomService.getIdByShortId(content.getSessionKeyword());
+		contentV3.setRoomId(roomId);
 		if (contentService.save(contentV3) != null) {
 			return toV2Migrator.migrate(contentV3);
 		}
@@ -132,11 +135,7 @@ public Content updateContent(
 			@PathVariable final String contentId,
 			@RequestBody final Content content
 			) {
-		try {
-			return toV2Migrator.migrate(contentService.update(fromV2Migrator.migrate(content)));
-		} catch (final Exception e) {
-			throw new BadRequestException();
-		}
+		return toV2Migrator.migrate(contentService.update(fromV2Migrator.migrate(content)));
 	}
 
 	@ApiOperation(value = "Start new Pi Round on content, identified by provided id, with an optional time",
@@ -203,8 +202,8 @@ public void setVotingAdmission(
 	public void setVotingAdmissionForAllContents(
 			@RequestParam(value = "sessionkey") final String roomShortId,
 			@RequestParam(value = "disable", defaultValue = "false", required = false) final Boolean disableVote,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false", required = false) final boolean lectureContentsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false", required = false) final boolean preparationContentsOnly
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false", required = false) boolean lectureContentsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false", required = false) boolean preparationContentsOnly
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		boolean disable = false;
@@ -214,6 +213,8 @@ public void setVotingAdmissionForAllContents(
 			disable = disableVote;
 		}
 
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = false;
 		if (lectureContentsOnly) {
 			contents = contentService.getLectureContents(roomId);
 			contentService.setVotingAdmissions(roomId, disable, contents);
@@ -221,7 +222,8 @@ public void setVotingAdmissionForAllContents(
 			contents = contentService.getPreparationContents(roomId);
 			contentService.setVotingAdmissions(roomId, disable, contents);
 		} else {
-			contentService.setVotingAdmissionForAllContents(roomId, disable);
+			contents = contentService.getByRoomId(roomId);
+			contentService.setVotingAdmissions(roomId, disable, contents);
 		}
 	}
 
@@ -235,7 +237,7 @@ public void publishContent(
 			) {
 		de.thm.arsnova.entities.Content contentV3 = fromV2Migrator.migrate(content);
 		if (publish != null) {
-			contentV3.getState().setVisible(!publish);
+			contentV3.getState().setVisible(publish);
 		}
 		contentService.update(contentV3);
 	}
@@ -246,13 +248,15 @@ public void publishContent(
 	public void publishAllContents(
 			@RequestParam(value = "sessionkey") final String roomShortId,
 			@RequestParam(required = false) final Boolean publish,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false", required = false) final boolean lectureContentsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false", required = false) final boolean preparationContentsOnly
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false", required = false) boolean lectureContentsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false", required = false) boolean preparationContentsOnly
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		boolean p = publish == null || publish;
 		List<de.thm.arsnova.entities.Content> contents;
 
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = false;
 		if (lectureContentsOnly) {
 			contents = contentService.getLectureContents(roomId);
 			contentService.publishContents(roomId, p, contents);
@@ -300,14 +304,16 @@ public void publishCorrectAnswer(
 	@Pagination
 	public List<Content> getContents(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "flashcardsonly", defaultValue = "false") final boolean flashcardsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly,
-			@RequestParam(value = "requestImageData", defaultValue = "false") final boolean requestImageData,
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "flashcardsonly", defaultValue = "false") boolean flashcardsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly,
+			@RequestParam(value = "requestImageData", defaultValue = "false") boolean requestImageData,
 			final HttpServletResponse response
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		List<de.thm.arsnova.entities.Content> contents;
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = flashcardsOnly = false;
 		if (lectureContentsOnly) {
 			contents = contentService.getLectureContents(roomId);
 		} else if (flashcardsOnly) {
@@ -331,12 +337,14 @@ public void publishCorrectAnswer(
 	@RequestMapping(value = { "/" }, method = RequestMethod.DELETE)
 	public void deleteContents(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "flashcardsonly", defaultValue = "false") final boolean flashcardsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly,
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "flashcardsonly", defaultValue = "false") boolean flashcardsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly,
 			final HttpServletResponse response
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = flashcardsOnly = false;
 		if (lectureContentsOnly) {
 			contentService.deleteLectureContents(roomId);
 		} else if (preparationContentsOnly) {
@@ -355,12 +363,14 @@ public void deleteContents(
 	@RequestMapping(value = "/count", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)
 	public String getContentCount(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "flashcardsonly", defaultValue = "false") final boolean flashcardsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "flashcardsonly", defaultValue = "false") boolean flashcardsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		int count = 0;
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = flashcardsOnly = false;
 		if (lectureContentsOnly) {
 			count = contentService.countLectureContents(roomId);
 		} else if (preparationContentsOnly) {
@@ -390,11 +400,13 @@ public void deleteAnswersAndContent(
 	@RequestMapping(value = "/unanswered", method = RequestMethod.GET)
 	public List<String> getUnAnsweredContentIds(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		List<String> answers;
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = false;
 		if (lectureContentsOnly) {
 			answers = contentService.getUnAnsweredLectureContentIds(roomId);
 		} else if (preparationContentsOnly) {
@@ -466,12 +478,11 @@ public Answer getMyAnswer(
 			@PathVariable final String contentId,
 			@RequestParam(value = "piround", required = false) final Integer piRound,
 			@RequestParam(value = "all", required = false, defaultValue = "false") final Boolean allAnswers,
-			final HttpServletResponse response) throws OperationNotSupportedException {
+			final HttpServletResponse response) {
 		final de.thm.arsnova.entities.Content content = contentService.get(contentId);
 		if (content instanceof ChoiceQuestionContent) {
-			// FIXME migration needed!
-			// contentService.getAllStatistics()
-			throw new OperationNotSupportedException();
+			return toV2Migrator.migrate(contentService.getAllStatistics(contentId),
+					(ChoiceQuestionContent) content, content.getState().getRound());
 		} else {
 			List<de.thm.arsnova.entities.TextAnswer> answers;
 			if (allAnswers) {
@@ -570,11 +581,13 @@ public void deleteAnswers(
 	@RequestMapping(value = "/answers", method = RequestMethod.DELETE)
 	public void deleteAllContentsAnswers(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly,
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly,
 			final HttpServletResponse response
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = false;
 		if (lectureContentsOnly) {
 			contentService.deleteAllLectureAnswers(roomId);
 		} else if (preparationContentsOnly) {
@@ -646,9 +659,15 @@ public String getTotalAnswerCountByContent(@PathVariable final String contentId)
 	@Deprecated
 	@RequestMapping(value = "/myanswers", method = RequestMethod.GET)
 	public List<Answer> getMyAnswers(@RequestParam(value = "sessionkey") final String roomShortId) throws OperationNotSupportedException {
-		throw new OperationNotSupportedException();
-//		return contentService.getMyAnswersByRoomShortId(roomShortId).stream()
-//				.map(toV2Migrator::migrate).collect(Collectors.toList());
+		return contentService.getMyAnswersByRoomId(roomService.getIdByShortId(roomShortId)).stream()
+				.map(a -> {
+					if (a instanceof ChoiceAnswer) {
+						return toV2Migrator.migrate(
+								(ChoiceAnswer) a, (ChoiceQuestionContent) contentService.get(a.getContentId()));
+					} else {
+						return toV2Migrator.migrate((TextAnswer) a);
+					}
+				}).collect(Collectors.toList());
 	}
 
 	@ApiOperation(value = "Get the total amount of answers of a room, identified by the room short ID",
@@ -658,11 +677,13 @@ public String getTotalAnswerCountByContent(@PathVariable final String contentId)
 	@RequestMapping(value = "/answercount", method = RequestMethod.GET, produces = MediaType.TEXT_PLAIN_VALUE)
 	public String getTotalAnswerCount(
 			@RequestParam(value = "sessionkey") final String roomShortId,
-			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") final boolean lectureContentsOnly,
-			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") final boolean preparationContentsOnly
+			@RequestParam(value = "lecturequestionsonly", defaultValue = "false") boolean lectureContentsOnly,
+			@RequestParam(value = "preparationquestionsonly", defaultValue = "false") boolean preparationContentsOnly
 			) {
 		String roomId = roomService.getIdByShortId(roomShortId);
 		int count = 0;
+		/* FIXME: Content variant is ignored for now */
+		lectureContentsOnly = preparationContentsOnly = false;
 		if (lectureContentsOnly) {
 			count = contentService.countLectureContentAnswers(roomId);
 		} else if (preparationContentsOnly) {
diff --git a/src/main/java/de/thm/arsnova/controller/v2/RoomController.java b/src/main/java/de/thm/arsnova/controller/v2/RoomController.java
index b619f5fe8..6496a2345 100644
--- a/src/main/java/de/thm/arsnova/controller/v2/RoomController.java
+++ b/src/main/java/de/thm/arsnova/controller/v2/RoomController.java
@@ -22,6 +22,7 @@
 import de.thm.arsnova.entities.migration.ToV2Migrator;
 import de.thm.arsnova.entities.migration.v2.Room;
 import de.thm.arsnova.entities.migration.v2.RoomFeature;
+import de.thm.arsnova.entities.migration.v2.RoomInfo;
 import de.thm.arsnova.entities.transport.ImportExportContainer;
 import de.thm.arsnova.entities.transport.ScoreStatistics;
 import de.thm.arsnova.exceptions.UnauthorizedException;
@@ -226,7 +227,7 @@ public Room changeRoomCreator(
 	})
 	@RequestMapping(value = "/", method = RequestMethod.GET, params = "statusonly=true")
 	@Pagination
-	public List<Room> getMyRooms(
+	public List<RoomInfo> getMyRooms(
 			@ApiParam(value = "visitedOnly", required = true) @RequestParam(value = "visitedonly", defaultValue = "false") final boolean visitedOnly,
 			@ApiParam(value = "sort by", required = false) @RequestParam(value = "sortby", defaultValue = "name") final String sortby,
 			final HttpServletResponse response
@@ -248,7 +249,8 @@ public Room changeRoomCreator(
 		} else {
 			Collections.sort(rooms, new RoomNameComparator());
 		}
-		return rooms.stream().map(toV2Migrator::migrate).collect(Collectors.toList());
+
+		return rooms.stream().map(toV2Migrator::migrateStats).collect(Collectors.toList());
 	}
 
 	@ApiOperation(value = "Retrieves all public pool Rooms for the current user",
@@ -257,7 +259,7 @@ public Room changeRoomCreator(
 		@ApiResponse(code = 204, message = HTML_STATUS_204)
 	})
 	@RequestMapping(value = "/publicpool", method = RequestMethod.GET, params = "statusonly=true")
-	public List<Room> getMyPublicPoolRooms(
+	public List<RoomInfo> getMyPublicPoolRooms(
 			final HttpServletResponse response
 			) {
 		List<de.thm.arsnova.entities.Room> rooms = roomService.getMyPublicPoolRoomsInfo();
@@ -267,7 +269,7 @@ public Room changeRoomCreator(
 			return null;
 		}
 
-		return rooms.stream().map(toV2Migrator::migrate).collect(Collectors.toList());
+		return rooms.stream().map(toV2Migrator::migrateStats).collect(Collectors.toList());
 	}
 
 	@ApiOperation(value = "Retrieves all public pool Rooms",
diff --git a/src/main/java/de/thm/arsnova/entities/Answer.java b/src/main/java/de/thm/arsnova/entities/Answer.java
index 5df235dd8..1982c45a4 100644
--- a/src/main/java/de/thm/arsnova/entities/Answer.java
+++ b/src/main/java/de/thm/arsnova/entities/Answer.java
@@ -9,8 +9,8 @@
 import java.util.Objects;
 
 @JsonTypeInfo(
-		use = JsonTypeInfo.Id.MINIMAL_CLASS,
-		include = JsonTypeInfo.As.PROPERTY,
+		use = JsonTypeInfo.Id.NAME,
+		include = JsonTypeInfo.As.EXISTING_PROPERTY,
 		property = "type"
 )
 public abstract class Answer extends Entity {
diff --git a/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java b/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
index bbc71a6fc..336b39ab7 100644
--- a/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
+++ b/src/main/java/de/thm/arsnova/entities/AnswerStatistics.java
@@ -2,19 +2,44 @@
 
 import com.fasterxml.jackson.annotation.JsonView;
 import de.thm.arsnova.entities.serialization.View;
+import org.springframework.core.style.ToStringCreator;
 
+import java.util.Collection;
 import java.util.List;
 
 public class AnswerStatistics {
 	public static class RoundStatistics {
 		public static class Combination {
-			private int[] selectedChoiceIndexes;
+			private List<Integer> selectedChoiceIndexes;
 			private int count;
+
+			public Combination(final List<Integer> selectedChoiceIndexes, final int count) {
+				this.selectedChoiceIndexes = selectedChoiceIndexes;
+				this.count = count;
+			}
+
+			@JsonView(View.Public.class)
+			public List<Integer> getSelectedChoiceIndexes() {
+				return selectedChoiceIndexes;
+			}
+
+			@JsonView(View.Public.class)
+			public int getCount() {
+				return count;
+			}
+
+			@Override
+			public String toString() {
+				return new ToStringCreator(this)
+						.append("selectedChoiceIndexes", selectedChoiceIndexes)
+						.append("count", count)
+						.toString();
+			}
 		}
 
 		private int round;
-		private int[] independentCounts;
-		private List<Combination> combinatedCounts;
+		private List<Integer> independentCounts;
+		private Collection<Combination> combinatedCounts;
 		private int abstentionCount;
 
 		@JsonView(View.Public.class)
@@ -27,20 +52,20 @@ public void setRound(int round) {
 		}
 
 		@JsonView(View.Public.class)
-		public int[] getIndependentCounts() {
+		public List<Integer> getIndependentCounts() {
 			return independentCounts;
 		}
 
-		public void setIndependentCounts(final int[] independentCounts) {
+		public void setIndependentCounts(final List<Integer> independentCounts) {
 			this.independentCounts = independentCounts;
 		}
 
 		@JsonView(View.Public.class)
-		public List<Combination> getCombinatedCounts() {
+		public Collection<Combination> getCombinatedCounts() {
 			return combinatedCounts;
 		}
 
-		public void setCombinatedCounts(List<Combination> combinatedCounts) {
+		public void setCombinatedCounts(Collection<Combination> combinatedCounts) {
 			this.combinatedCounts = combinatedCounts;
 		}
 
@@ -52,14 +77,69 @@ public int getAbstentionCount() {
 		public void setAbstentionCount(int abstentionCount) {
 			this.abstentionCount = abstentionCount;
 		}
+
+		@Override
+		public String toString() {
+			return new ToStringCreator(this)
+					.append("round", round)
+					.append("independentCounts", independentCounts)
+					.append("combinatedCounts", combinatedCounts)
+					.append("abstentionCount", abstentionCount)
+					.toString();
+		}
 	}
 
 	public static class RoundTransition {
 		private int roundA;
 		private int roundB;
-		private int[] selectedChoiceIndexesA;
-		private int[] selectedChoiceIndexesB;
+		private List<Integer> selectedChoiceIndexesA;
+		private List<Integer> selectedChoiceIndexesB;
 		private int count;
+
+		public RoundTransition(final int roundA, final List<Integer> selectedChoiceIndexesA,
+				final int roundB, final List<Integer> selectedChoiceIndexesB, final int count) {
+			this.roundA = roundA;
+			this.roundB = roundB;
+			this.selectedChoiceIndexesA = selectedChoiceIndexesA;
+			this.selectedChoiceIndexesB = selectedChoiceIndexesB;
+			this.count = count;
+		}
+
+		@JsonView(View.Public.class)
+		public int getRoundA() {
+			return roundA;
+		}
+
+		@JsonView(View.Public.class)
+		public int getRoundB() {
+			return roundB;
+		}
+
+		@JsonView(View.Public.class)
+		public List<Integer> getSelectedChoiceIndexesA() {
+			return selectedChoiceIndexesA;
+		}
+
+		@JsonView(View.Public.class)
+		public List<Integer> getSelectedChoiceIndexesB() {
+			return selectedChoiceIndexesB;
+		}
+
+		@JsonView(View.Public.class)
+		public int getCount() {
+			return count;
+		}
+
+		@Override
+		public String toString() {
+			return new ToStringCreator(this)
+					.append("roundA", roundA)
+					.append("selectedChoiceIndexesA", selectedChoiceIndexesA)
+					.append("roundB", roundB)
+					.append("selectedChoiceIndexesB", selectedChoiceIndexesB)
+					.append("count", count)
+					.toString();
+		}
 	}
 
 	private String contentId;
@@ -92,4 +172,13 @@ public void setRoundStatistics(List<RoundStatistics> roundStatistics) {
 	public void setRoundTransitions(List<RoundTransition> roundTransitions) {
 		this.roundTransitions = roundTransitions;
 	}
+
+	@Override
+	public String toString() {
+		return new ToStringCreator(this)
+				.append("contentId", contentId)
+				.append("roundStatistics", roundStatistics)
+				.append("roundTransitions", roundTransitions)
+				.toString();
+	}
 }
diff --git a/src/main/java/de/thm/arsnova/entities/Content.java b/src/main/java/de/thm/arsnova/entities/Content.java
index 0b1b145e5..9988359aa 100644
--- a/src/main/java/de/thm/arsnova/entities/Content.java
+++ b/src/main/java/de/thm/arsnova/entities/Content.java
@@ -1,7 +1,6 @@
 package de.thm.arsnova.entities;
 
 import com.fasterxml.jackson.annotation.JsonTypeInfo;
-import com.fasterxml.jackson.annotation.JsonTypeName;
 import com.fasterxml.jackson.annotation.JsonView;
 import de.thm.arsnova.entities.serialization.View;
 
@@ -10,10 +9,9 @@
 import java.util.Objects;
 
 @JsonTypeInfo(
-		use = JsonTypeInfo.Id.MINIMAL_CLASS,
-		include = JsonTypeInfo.As.PROPERTY,
-		property = "format",
-		visible = true
+		use = JsonTypeInfo.Id.NAME,
+		include = JsonTypeInfo.As.EXISTING_PROPERTY,
+		property = "type"
 )
 public class Content extends Entity {
 	public enum Format {
@@ -74,7 +72,7 @@ public void setVisible(final boolean visible) {
 		}
 
 		@JsonView({View.Persistence.class, View.Public.class})
-		public boolean areResponsesEnabled() {
+		public boolean isResponsesEnabled() {
 			return responsesEnabled;
 		}
 
@@ -84,7 +82,7 @@ public void setResponsesEnabled(final boolean responsesEnabled) {
 		}
 
 		@JsonView({View.Persistence.class, View.Public.class})
-		public boolean areResponsesVisible() {
+		public boolean isResponsesVisible() {
 			return responsesVisible;
 		}
 
@@ -99,6 +97,7 @@ public void setResponsesVisible(final boolean responsesVisible) {
 	private String body;
 	private Format format;
 	private String group;
+	private boolean abstentionsAllowed;
 	private State state;
 	private Date timestamp;
 	private Map<String, Map<String, ?>> extensions;
@@ -156,7 +155,7 @@ public void setGroup(final String group) {
 
 	@JsonView({View.Persistence.class, View.Public.class})
 	public State getState() {
-		return state;
+		return state != null ? state : (state = new State());
 	}
 
 	public void resetState() {
@@ -198,6 +197,16 @@ public void setAttachments(final Map<String, String> attachments) {
 		this.attachments = attachments;
 	}
 
+	@JsonView({View.Persistence.class, View.Public.class})
+	public boolean isAbstentionsAllowed() {
+		return abstentionsAllowed;
+	}
+
+	@JsonView({View.Persistence.class, View.Public.class})
+	public void setAbstentionsAllowed(final boolean abstentionsAllowed) {
+		this.abstentionsAllowed = abstentionsAllowed;
+	}
+
 	/**
 	 * {@inheritDoc}
 	 *
diff --git a/src/main/java/de/thm/arsnova/entities/TextAnswer.java b/src/main/java/de/thm/arsnova/entities/TextAnswer.java
index 8e36c127e..14a32c287 100644
--- a/src/main/java/de/thm/arsnova/entities/TextAnswer.java
+++ b/src/main/java/de/thm/arsnova/entities/TextAnswer.java
@@ -43,6 +43,6 @@ public void setRead(boolean read) {
 	@Override
 	@JsonView({View.Persistence.class, View.Public.class})
 	public Date getCreationTimestamp() {
-		return getCreationTimestamp();
+		return creationTimestamp;
 	}
 }
diff --git a/src/main/java/de/thm/arsnova/entities/UserProfile.java b/src/main/java/de/thm/arsnova/entities/UserProfile.java
index bc5e5c51b..0da4117e5 100644
--- a/src/main/java/de/thm/arsnova/entities/UserProfile.java
+++ b/src/main/java/de/thm/arsnova/entities/UserProfile.java
@@ -3,10 +3,8 @@
 import com.fasterxml.jackson.annotation.JsonView;
 import de.thm.arsnova.entities.serialization.View;
 
-import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -84,28 +82,54 @@ public RoomHistoryEntry(String roomId, Date lastVisit) {
 			this.lastVisit = lastVisit;
 		}
 
+		@JsonView(View.Persistence.class)
 		public String getRoomId() {
 			return roomId;
 		}
 
+		@JsonView(View.Persistence.class)
 		public void setRoomId(String roomId) {
 			this.roomId = roomId;
 		}
 
+		@JsonView(View.Persistence.class)
 		public Date getLastVisit() {
 			return lastVisit;
 		}
 
+		@JsonView(View.Persistence.class)
 		public void setLastVisit(Date lastVisit) {
 			this.lastVisit = lastVisit;
 		}
+
+		@Override
+		public boolean equals(final Object o) {
+			if (this == o) {
+				return true;
+			}
+			if (o == null || getClass() != o.getClass()) {
+				return false;
+			}
+			final RoomHistoryEntry that = (RoomHistoryEntry) o;
+
+			return Objects.equals(roomId, that.roomId);
+		}
+
+		@Override
+		public int hashCode() {
+			return Objects.hash(roomId);
+		}
 	}
 
 	private AuthProvider authProvider;
 	private String loginId;
 	private Date lastLoginTimestamp;
 	private Account account;
-	private List<RoomHistoryEntry> roomHistory = new ArrayList<>();
+	/* TODO: Review - is a Map more appropriate?
+	 * pro List: can be ordered by date
+	 * pro Map (roomId -> RoomHistoryEntry): easier to access for updating lastVisit
+	 * -> Map but custom serialization to array? */
+	private Set<RoomHistoryEntry> roomHistory = new HashSet<>();
 	private Set<String> acknowledgedMotds = new HashSet<>();
 	private Map<String, Map<String, ?>> extensions;
 
@@ -159,12 +183,12 @@ public void setAccount(final Account account) {
 	}
 
 	@JsonView({View.Persistence.class, View.Public.class})
-	public List<RoomHistoryEntry> getRoomHistory() {
+	public Set<RoomHistoryEntry> getRoomHistory() {
 		return roomHistory;
 	}
 
 	@JsonView(View.Persistence.class)
-	public void setRoomHistory(final List<RoomHistoryEntry> roomHistory) {
+	public void setRoomHistory(final Set<RoomHistoryEntry> roomHistory) {
 		this.roomHistory = roomHistory;
 	}
 
diff --git a/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java b/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
index 0ba594b31..f4774157a 100644
--- a/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/FromV2Migrator.java
@@ -27,7 +27,9 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -38,9 +40,35 @@
  * @author Daniel Gerhardt
  */
 public class FromV2Migrator {
+	static final String V2_TYPE_ABCD = "abcd";
+	static final String V2_TYPE_SC = "sc";
+	static final String V2_TYPE_MC = "mc";
+	static final String V2_TYPE_VOTE = "vote";
+	static final String V2_TYPE_SCHOOL = "school";
+	static final String V2_TYPE_YESNO = "yesno";
+	static final String V2_TYPE_FREETEXT = "freetext";
+	static final String V2_TYPE_GRID = "grid";
+	private static final Map<String, de.thm.arsnova.entities.Content.Format> formatMapping;
+
+	private boolean ignoreRevision = false;
+
+	static {
+		formatMapping = new HashMap<>();
+		formatMapping.put(V2_TYPE_ABCD, de.thm.arsnova.entities.Content.Format.CHOICE);
+		formatMapping.put(V2_TYPE_SC, de.thm.arsnova.entities.Content.Format.CHOICE);
+		formatMapping.put(V2_TYPE_MC, de.thm.arsnova.entities.Content.Format.CHOICE);
+		formatMapping.put(V2_TYPE_VOTE, de.thm.arsnova.entities.Content.Format.SCALE);
+		formatMapping.put(V2_TYPE_SCHOOL, de.thm.arsnova.entities.Content.Format.SCALE);
+		formatMapping.put(V2_TYPE_YESNO, de.thm.arsnova.entities.Content.Format.BINARY);
+		formatMapping.put(V2_TYPE_FREETEXT, de.thm.arsnova.entities.Content.Format.TEXT);
+		formatMapping.put(V2_TYPE_GRID, de.thm.arsnova.entities.Content.Format.GRID);
+	}
+
 	private void copyCommonProperties(final Entity from, final de.thm.arsnova.entities.Entity to) {
 		to.setId(from.getId());
-		//to.setRevision(from.getRevision());
+		if (!ignoreRevision) {
+			to.setRevision(from.getRevision());
+		}
 	}
 
 	public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final MotdList motdList) {
@@ -75,9 +103,9 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 				profile.setCreationTimestamp(new Date());
 			}
 			profile.setLastLoginTimestamp(new Date(loggedIn.getTimestamp()));
-			List<UserProfile.RoomHistoryEntry> sessionHistory = loggedIn.getVisitedSessions().stream()
+			Set<UserProfile.RoomHistoryEntry> sessionHistory = loggedIn.getVisitedSessions().stream()
 					.map(entry -> new UserProfile.RoomHistoryEntry(entry.getId(), new Date(0)))
-					.collect(Collectors.toList());
+					.collect(Collectors.toSet());
 			profile.setRoomHistory(sessionHistory);
 		}
 		if (motdList != null && motdList.getMotdkeys() != null) {
@@ -136,10 +164,11 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 	public de.thm.arsnova.entities.Room.Settings migrate(final RoomFeature feature) {
 		de.thm.arsnova.entities.Room.Settings settings = new de.thm.arsnova.entities.Room.Settings();
 		if (feature != null) {
-			settings.setCommentsEnabled(feature.isInterposed() || feature.isInterposedFeedback() || feature.isTotal());
+			settings.setCommentsEnabled(feature.isInterposed() || feature.isInterposedFeedback()
+					|| feature.isTwitterWall() || feature.isTotal());
 			settings.setQuestionsEnabled(feature.isLecture() || feature.isJitt() || feature.isClicker() || feature.isTotal());
 			settings.setSlidesEnabled(feature.isSlides() || feature.isTotal());
-			settings.setFlashcardsEnabled(feature.isFlashcard() || feature.isFlashcardFeature() || feature.isTotal());
+			settings.setFlashcardsEnabled(feature.isFlashcardFeature() || feature.isFlashcard() || feature.isTotal());
 			settings.setQuickSurveyEnabled(feature.isLiveClicker());
 			settings.setQuickFeedbackEnabled(feature.isFeedback() || feature.isLiveFeedback() || feature.isTotal());
 			settings.setMultipleRoundsEnabled(feature.isPi() || feature.isClicker() || feature.isTotal());
@@ -153,21 +182,29 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 	public de.thm.arsnova.entities.Content migrate(final Content from) {
 		de.thm.arsnova.entities.Content to;
 		switch (from.getQuestionType()) {
-			case "abcd":
-			case "mc":
+			case V2_TYPE_ABCD:
+			case V2_TYPE_SC:
+			case V2_TYPE_MC:
+			case V2_TYPE_VOTE:
+			case V2_TYPE_SCHOOL:
+			case V2_TYPE_YESNO:
 				ChoiceQuestionContent choiceQuestionContent = new ChoiceQuestionContent();
 				to = choiceQuestionContent;
-				to.setFormat(de.thm.arsnova.entities.Content.Format.CHOICE);
-				choiceQuestionContent.setMultiple("mc".equals(from.getQuestionType()));
+				to.setFormat(formatMapping.get(from.getQuestionType()));
+				choiceQuestionContent.setMultiple(V2_TYPE_MC.equals(from.getQuestionType()));
 				for (int i = 0; i < from.getPossibleAnswers().size(); i++) {
-					de.thm.arsnova.entities.migration.v2.AnswerOption choice = from.getPossibleAnswers().get(i);
-					if (choice.isCorrect()) {
+					de.thm.arsnova.entities.migration.v2.AnswerOption fromOption = from.getPossibleAnswers().get(i);
+					ChoiceQuestionContent.AnswerOption toOption = new ChoiceQuestionContent.AnswerOption();
+					toOption.setLabel(fromOption.getText());
+					toOption.setPoints(fromOption.getValue());
+					choiceQuestionContent.getOptions().add(toOption);
+					if (fromOption.isCorrect()) {
 						choiceQuestionContent.getCorrectOptionIndexes().add(i);
 					}
 				}
 
 				break;
-			case "text":
+			case V2_TYPE_FREETEXT:
 				to = new de.thm.arsnova.entities.Content();
 				to.setFormat(de.thm.arsnova.entities.Content.Format.TEXT);
 				break;
@@ -179,33 +216,67 @@ public UserProfile migrate(final DbUser dbUser, final LoggedIn loggedIn, final M
 		to.setSubject(from.getSubject());
 		to.setBody(from.getText());
 		to.setGroup(from.getQuestionVariant());
+		to.setAbstentionsAllowed(from.isAbstention());
+		to.setAbstentionsAllowed(from.isAbstention());
+		de.thm.arsnova.entities.Content.State state = to.getState();
+		state.setRound(from.getPiRound());
+		state.setVisible(from.isActive());
+		state.setResponsesVisible(from.isShowStatistic());
+		state.setSolutionVisible(from.isShowAnswer());
+		state.setResponsesEnabled(!from.isVotingDisabled());
 
 		return to;
 	}
 
 	public de.thm.arsnova.entities.Answer migrate(final Answer from, final Content content) {
 		switch (content.getQuestionType()) {
-			case "abcd":
-			case "mc":
-				return migrate(from, content.getPossibleAnswers());
-			case "text":
+			case V2_TYPE_ABCD:
+			case V2_TYPE_VOTE:
+			case V2_TYPE_SCHOOL:
+			case V2_TYPE_YESNO:
+				return migrate(from, content.getPossibleAnswers(), false);
+			case V2_TYPE_MC:
+				return migrate(from, content.getPossibleAnswers(), true);
+			case V2_TYPE_FREETEXT:
 				return migrate(from);
 			default:
 				throw new IllegalArgumentException("Unsupported content format.");
 		}
 	}
 
-	public ChoiceAnswer migrate(final Answer from, final List<AnswerOption> options) {
+	public ChoiceAnswer migrate(final Answer from, final List<AnswerOption> options, final boolean multiple) {
 		final ChoiceAnswer to = new ChoiceAnswer();
 		copyCommonProperties(from, to);
 		to.setContentId(from.getQuestionId());
+		to.setRoomId(from.getSessionId());
+		to.setRound(from.getPiRound());
 		List<Integer> selectedChoiceIndexes = new ArrayList<>();
 		to.setSelectedChoiceIndexes(selectedChoiceIndexes);
 
-		for (int i = 0; i < options.size(); i++) {
-			AnswerOption choice = options.get(i);
-			if (choice.getText().equals(from.getAnswerText())) {
-				selectedChoiceIndexes.add(i);
+		if (!from.isAbstention()) {
+			if (multiple) {
+				List<Boolean> flags = Arrays.stream(from.getAnswerText().split(","))
+						.map("1"::equals).collect(Collectors.toList());
+				if (flags.size() != options.size()) {
+					throw new IndexOutOfBoundsException(
+							"Number of answer's choice flags does not match number of content's answer options");
+				}
+				int i = 0;
+				for (boolean flag : flags) {
+					if (flag) {
+						selectedChoiceIndexes.add(i);
+					}
+					i++;
+				}
+			} else {
+				int i = 0;
+				for (AnswerOption option : options) {
+					if (option.getText().equals(from.getAnswerText())) {
+						selectedChoiceIndexes.add(i);
+						break;
+					}
+					i++;
+				}
 			}
 		}
 
@@ -216,6 +287,8 @@ public TextAnswer migrate(final Answer from) {
 		final TextAnswer to = new TextAnswer();
 		copyCommonProperties(from, to);
 		to.setContentId(from.getQuestionId());
+		to.setRoomId(from.getSessionId());
+		to.setRound(from.getPiRound());
 		to.setSubject(from.getAnswerSubject());
 		to.setBody(from.getAnswerText());
 
@@ -287,4 +360,8 @@ public TextAnswer migrate(final Answer from) {
 
 		return UserProfile.AuthProvider.UNKNOWN;
 	}
+
+	public void setIgnoreRevision(final boolean ignoreRevision) {
+		this.ignoreRevision = ignoreRevision;
+	}
 }
diff --git a/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java b/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
index c62c30d8f..29c85627b 100644
--- a/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/ToV2Migrator.java
@@ -17,21 +17,28 @@
  */
 package de.thm.arsnova.entities.migration;
 
+import de.thm.arsnova.entities.AnswerStatistics;
 import de.thm.arsnova.entities.ChoiceQuestionContent;
+import de.thm.arsnova.entities.RoomStatistics;
 import de.thm.arsnova.entities.UserProfile;
 import de.thm.arsnova.entities.migration.v2.*;
 
 import java.util.ArrayList;
+import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import static de.thm.arsnova.entities.migration.FromV2Migrator.*;
+
 /**
  * Converts entities from current model version to legacy version 2.
  *
  * @author Daniel Gerhardt
  */
 public class ToV2Migrator {
+
 	private void copyCommonProperties(final de.thm.arsnova.entities.Entity from, final Entity to) {
 		to.setId(from.getId());
 		to.setRevision(from.getRevision());
@@ -75,6 +82,7 @@ public Room migrate(final de.thm.arsnova.entities.Room from, final Optional<User
 			to.setPpFaculty(from.getAuthor().getOrganizationUnit());
 			to.setPpLogo(from.getAuthor().getOrganizationLogo());
 		}
+		to.setFeatures(migrate(from.getSettings()));
 
 		return to;
 	}
@@ -85,23 +93,30 @@ public Room migrate(final de.thm.arsnova.entities.Room from) {
 
 	public RoomFeature migrate(final de.thm.arsnova.entities.Room.Settings settings) {
 		RoomFeature feature = new RoomFeature();
+
+		/* Features */
 		feature.setInterposed(settings.isCommentsEnabled());
 		feature.setLecture(settings.isQuestionsEnabled());
 		feature.setJitt(settings.isQuestionsEnabled());
 		feature.setSlides(settings.isSlidesEnabled());
-		feature.setFlashcard(settings.isFlashcardsEnabled());
-		feature.setFeedback(settings.isQuickSurveyEnabled());
+		feature.setFlashcardFeature(settings.isFlashcardsEnabled());
+		feature.setFeedback(settings.isQuickFeedbackEnabled());
 		feature.setPi(settings.isMultipleRoundsEnabled() || settings.isTimerEnabled());
 		feature.setLearningProgress(settings.isScoreEnabled());
 
+		/* Use cases */
 		int count = 0;
 		/* Single-feature use cases can be migrated */
 		if (settings.isCommentsEnabled()) {
-			feature.setTwitterWall(true);
+			feature.setInterposedFeedback(true);
 			count++;
 		}
 		if (settings.isFlashcardsEnabled()) {
-			feature.setFlashcardFeature(true);
+			feature.setFlashcard(true);
+			count++;
+		}
+		if (settings.isQuickFeedbackEnabled()) {
+			feature.setLiveFeedback(true);
 			count++;
 		}
 		if (settings.isQuickSurveyEnabled()) {
@@ -128,8 +143,9 @@ public RoomFeature migrate(final de.thm.arsnova.entities.Room.Settings settings)
 
 		if (count != 1) {
 			/* Reset single-feature use-cases since multiple features were detected */
-			feature.setTwitterWall(false);
-			feature.setFlashcardFeature(false);
+			feature.setInterposedFeedback(false);
+			feature.setFlashcard(false);
+			feature.setLiveFeedback(false);
 			feature.setLiveClicker(false);
 
 			if (count == 7) {
@@ -143,6 +159,18 @@ public RoomFeature migrate(final de.thm.arsnova.entities.Room.Settings settings)
 		return feature;
 	}
 
+	public RoomInfo migrateStats(final de.thm.arsnova.entities.Room from) {
+		RoomInfo to = new RoomInfo(migrate(from));
+		RoomStatistics stats = from.getStatistics();
+		to.setNumQuestions(stats.getContentCount());
+		to.setNumUnanswered(stats.getUnansweredContentCount());
+		to.setNumAnswers(stats.getAnswerCount());
+		to.setNumInterposed(stats.getCommentCount());
+		to.setNumUnredInterposed(stats.getUnreadCommentCount());
+
+		return to;
+	}
+
 	public Content migrate(final de.thm.arsnova.entities.Content from) {
 		final Content to = new Content();
 		copyCommonProperties(from, to);
@@ -150,42 +178,61 @@ public Content migrate(final de.thm.arsnova.entities.Content from) {
 		to.setSubject(from.getSubject());
 		to.setText(from.getBody());
 		to.setQuestionVariant(from.getGroup());
+		to.setAbstention(from.isAbstentionsAllowed());
 
 		if (from instanceof ChoiceQuestionContent) {
 			final ChoiceQuestionContent fromChoiceQuestionContent = (ChoiceQuestionContent) from;
 			switch (from.getFormat()) {
 				case CHOICE:
-					to.setQuestionType(fromChoiceQuestionContent.isMultiple() ? "mc" : "abcd");
+					to.setQuestionType(fromChoiceQuestionContent.isMultiple() ? V2_TYPE_MC : V2_TYPE_ABCD);
 					break;
 				case BINARY:
-					to.setQuestionType("yesno");
+					to.setQuestionType(V2_TYPE_YESNO);
 					break;
 				case SCALE:
-					to.setQuestionType("vote");
+					final int optionCount = fromChoiceQuestionContent.getOptions().size();
+					/* The number of options for vote/school format is hard-coded by the legacy client */
+					if (optionCount == 5) {
+						to.setQuestionType(V2_TYPE_VOTE);
+					} else if (optionCount == 6) {
+						to.setQuestionType(V2_TYPE_SCHOOL);
+					} else {
+						to.setQuestionType(V2_TYPE_ABCD);
+					}
 					break;
 				case GRID:
-					to.setQuestionType("grid");
+					to.setQuestionType(V2_TYPE_GRID);
 					break;
+				default:
+					throw new IllegalArgumentException("Unsupported content format.");
 			}
 			final List<AnswerOption> toOptions = new ArrayList<>();
 			to.setPossibleAnswers(toOptions);
 			for (int i = 0; i < fromChoiceQuestionContent.getOptions().size(); i++) {
 				AnswerOption option = new AnswerOption();
-				option.setText(fromChoiceQuestionContent.getOptions().get(1).getLabel());
-				option.setValue(fromChoiceQuestionContent.getOptions().get(1).getPoints());
+				option.setText(fromChoiceQuestionContent.getOptions().get(i).getLabel());
+				option.setValue(fromChoiceQuestionContent.getOptions().get(i).getPoints());
 				option.setCorrect(fromChoiceQuestionContent.getCorrectOptionIndexes().contains(i));
 				toOptions.add(option);
 			}
 		} else {
 			switch (from.getFormat()) {
 				case NUMBER:
-					to.setQuestionType("freetext");
+					to.setQuestionType(V2_TYPE_FREETEXT);
 					break;
 				case TEXT:
-					to.setQuestionType("freetext");
+					to.setQuestionType(V2_TYPE_FREETEXT);
 					break;
+				default:
+					throw new IllegalArgumentException("Unsupported content format.");
 			}
 		}
+		de.thm.arsnova.entities.Content.State state = from.getState();
+		to.setPiRound(state.getRound());
+		to.setActive(state.isVisible());
+		to.setShowStatistic(state.isResponsesVisible());
+		to.setShowAnswer(state.isSolutionVisible());
+		to.setVotingDisabled(!state.isResponsesEnabled());
 
 		return to;
 	}
@@ -195,17 +242,33 @@ public Answer migrate(final de.thm.arsnova.entities.ChoiceAnswer from,
 		final Answer to = new Answer();
 		copyCommonProperties(from, to);
 		to.setQuestionId(from.getContentId());
+		to.setSessionId(from.getRoomId());
+		to.setPiRound(from.getRound());
 		if (creator.isPresent()) {
 			to.setUser(creator.get().getLoginId());
 		}
+		if (from.getSelectedChoiceIndexes().isEmpty()) {
+			to.setAbstention(true);
+		} else {
+			if (content.isMultiple()) {
+				to.setAnswerText(migrateChoice(from.getSelectedChoiceIndexes(), content.getOptions()));
+			} else {
+				int index = from.getSelectedChoiceIndexes().get(0);
+				to.setAnswerText(content.getOptions().get(index).getLabel());
+			}
+		}
+
+		return to;
+	}
 
+	public String migrateChoice(final List<Integer> selectedChoiceIndexes,
+			final List<ChoiceQuestionContent.AnswerOption> options) {
 		List<String> answers = new ArrayList<>();
-		for (int i = 0; i < content.getOptions().size(); i++) {
-			answers.add(from.getSelectedChoiceIndexes().contains(i) ? "1" : "0");
+		for (int i = 0; i < options.size(); i++) {
+			answers.add(selectedChoiceIndexes.contains(i) ? "1" : "0");
 		}
-		to.setAnswerText(answers.stream().collect(Collectors.joining()));
 
-		return to;
+		return answers.stream().collect(Collectors.joining(","));
 	}
 
 	public Answer migrate(final de.thm.arsnova.entities.ChoiceAnswer from,
@@ -218,6 +281,8 @@ public Answer migrate(final de.thm.arsnova.entities.TextAnswer from,
 		final Answer to = new Answer();
 		copyCommonProperties(from, to);
 		to.setQuestionId(from.getContentId());
+		to.setSessionId(from.getRoomId());
+		to.setPiRound(from.getRound());
 		if (creator.isPresent()) {
 			to.setUser(creator.get().getLoginId());
 		}
@@ -278,4 +343,51 @@ public Motd migrate(final de.thm.arsnova.entities.Motd from) {
 
 		return to;
 	}
+
+	public List<Answer> migrate(final AnswerStatistics from,
+			final de.thm.arsnova.entities.ChoiceQuestionContent content, int round) {
+		if (round < 1 || round > content.getState().getRound()) {
+			throw new IllegalArgumentException("Invalid value for round");
+		}
+		final List<Answer> to  = new ArrayList<>();
+		final AnswerStatistics.RoundStatistics stats = from.getRoundStatistics().get(round - 1);
+
+		if (content.isAbstentionsAllowed()) {
+			final Answer abstention = new Answer();
+			abstention.setQuestionId(content.getId());
+			abstention.setPiRound(round);
+			abstention.setAnswerCount(stats.getAbstentionCount());
+			abstention.setAbstentionCount(stats.getAbstentionCount());
+			to.add(abstention);
+		}
+
+		Map<String, Integer> choices;
+		if (content.isMultiple()) {
+			/* Map selected choice indexes -> answer count */
+			choices = stats.getCombinatedCounts().stream().collect(Collectors.toMap(
+					c -> migrateChoice(c.getSelectedChoiceIndexes(), content.getOptions()),
+					c -> c.getCount(),
+					(u, v) -> { throw new IllegalStateException(String.format("Duplicate key %s", u)); },
+					LinkedHashMap::new));
+		} else {
+			choices = new LinkedHashMap<>();
+			int i = 0;
+			for (ChoiceQuestionContent.AnswerOption option : content.getOptions()) {
+				choices.put(option.getLabel(), stats.getIndependentCounts().get(i));
+				i++;
+			}
+		}
+
+		for (Map.Entry<String, Integer> choice : choices.entrySet()) {
+			Answer answer = new Answer();
+			answer.setQuestionId(content.getId());
+			answer.setPiRound(round);
+			answer.setAnswerCount(choice.getValue());
+			answer.setAbstentionCount(stats.getAbstentionCount());
+			answer.setAnswerText(choice.getKey());
+			to.add(answer);
+		}
+
+		return to;
+	}
 }
diff --git a/src/main/java/de/thm/arsnova/entities/migration/v2/Content.java b/src/main/java/de/thm/arsnova/entities/migration/v2/Content.java
index 3a27c9fe2..04c920121 100644
--- a/src/main/java/de/thm/arsnova/entities/migration/v2/Content.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/v2/Content.java
@@ -22,6 +22,7 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
+import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
@@ -179,7 +180,7 @@ public final void setReleasedFor(final String releasedFor) {
 	@ApiModelProperty(required = true, value = "list of possible answers")
 	@JsonView({View.Persistence.class, View.Public.class})
 	public final List<AnswerOption> getPossibleAnswers() {
-		return possibleAnswers;
+		return possibleAnswers != null ? possibleAnswers : new ArrayList<>();
 	}
 
 	@JsonView({View.Persistence.class, View.Public.class})
@@ -221,6 +222,7 @@ public final String getSessionKeyword() {
 		return sessionKeyword;
 	}
 
+	//@JsonView(View.Public.class)
 	public final void setSessionKeyword(final String keyword) {
 		sessionKeyword = keyword;
 	}
diff --git a/src/main/java/de/thm/arsnova/entities/migration/v2/RoomFeature.java b/src/main/java/de/thm/arsnova/entities/migration/v2/RoomFeature.java
index edd843b21..33ee9e6de 100644
--- a/src/main/java/de/thm/arsnova/entities/migration/v2/RoomFeature.java
+++ b/src/main/java/de/thm/arsnova/entities/migration/v2/RoomFeature.java
@@ -30,7 +30,7 @@
 @ApiModel(value = "RoomFeature", description = "Room (Session) Feature entity - Represents feature/use case settings of a Room")
 public class RoomFeature implements Serializable {
 
-	private boolean custom = true;
+	private boolean custom = false;
 	private boolean clicker = false;
 	private boolean peerGrading = false;
 	private boolean twitterWall = false;
@@ -40,13 +40,13 @@
 	private boolean flashcard = false;
 	private boolean total = false;
 
-	private boolean jitt = true;
-	private boolean lecture = true;
-	private boolean feedback = true;
-	private boolean interposed = true;
-	private boolean pi = true;
-	private boolean learningProgress = true;
-	private boolean flashcardFeature = true;
+	private boolean jitt = false;
+	private boolean lecture = false;
+	private boolean feedback = false;
+	private boolean interposed = false;
+	private boolean pi = false;
+	private boolean learningProgress = false;
+	private boolean flashcardFeature = false;
 	private boolean slides = false;
 
 	public RoomFeature(RoomFeature features) {
diff --git a/src/main/java/de/thm/arsnova/entities/serialization/CouchDbDocumentModule.java b/src/main/java/de/thm/arsnova/entities/serialization/CouchDbDocumentModule.java
index bddb5511c..408c330d7 100644
--- a/src/main/java/de/thm/arsnova/entities/serialization/CouchDbDocumentModule.java
+++ b/src/main/java/de/thm/arsnova/entities/serialization/CouchDbDocumentModule.java
@@ -36,12 +36,8 @@ public void setupModule(SetupContext context) {
 		context.setMixInAnnotations(Entity.class, CouchDbDocumentMixIn.class);
 		context.setMixInAnnotations(de.thm.arsnova.entities.migration.v2.Entity.class, CouchDbDocumentV2MixIn.class);
 		context.registerSubtypes(
-				new NamedType(Content.class, Content.Format.TEXT.toString()),
-				new NamedType(Content.class, Content.Format.NUMBER.toString()),
-				new NamedType(ChoiceQuestionContent.class, Content.Format.CHOICE.toString()),
-				new NamedType(ChoiceQuestionContent.class, Content.Format.BINARY.toString()),
-				new NamedType(ChoiceQuestionContent.class, Content.Format.SCALE.toString()),
-				new NamedType(ChoiceQuestionContent.class, Content.Format.GRID.toString()),
+				new NamedType(Content.class, Content.class.getSimpleName()),
+				new NamedType(ChoiceQuestionContent.class, ChoiceQuestionContent.class.getSimpleName()),
 				new NamedType(Answer.class, Answer.class.getSimpleName()),
 				new NamedType(ChoiceAnswer.class, ChoiceAnswer.class.getSimpleName()),
 				new NamedType(TextAnswer.class, TextAnswer.class.getSimpleName()));
diff --git a/src/main/java/de/thm/arsnova/events/UnlockVoteEvent.java b/src/main/java/de/thm/arsnova/events/UnlockVoteEvent.java
index ade47017e..1631fc762 100644
--- a/src/main/java/de/thm/arsnova/events/UnlockVoteEvent.java
+++ b/src/main/java/de/thm/arsnova/events/UnlockVoteEvent.java
@@ -46,7 +46,7 @@ public String getGroup() {
 	}
 
 	public Boolean getVotingDisabled() {
-		return !this.content.getState().areResponsesEnabled();
+		return !this.content.getState().isResponsesEnabled();
 	}
 
 	public Map<String, Object> getVotingAdmission() {
diff --git a/src/main/java/de/thm/arsnova/persistance/AnswerRepository.java b/src/main/java/de/thm/arsnova/persistance/AnswerRepository.java
index 3cb2a25f6..1ada6ccda 100644
--- a/src/main/java/de/thm/arsnova/persistance/AnswerRepository.java
+++ b/src/main/java/de/thm/arsnova/persistance/AnswerRepository.java
@@ -26,7 +26,7 @@
 
 public interface AnswerRepository extends CrudRepository<Answer, String> {
 	<T extends Answer> T findByContentIdUserPiRound(String contentId, Class<T> type, UserAuthentication user, int piRound);
-	AnswerStatistics findByContentIdPiRound(String contentId, int piRound);
+	AnswerStatistics findByContentIdRound(String contentId, int round, final int optionCount);
 	int countByContentIdRound(String contentId, int round);
 	int countByContentId(String contentId);
 	<T extends Answer> List<T> findByContentId(String contentId, Class<T> type, int start, int limit);
diff --git a/src/main/java/de/thm/arsnova/persistance/RoomRepository.java b/src/main/java/de/thm/arsnova/persistance/RoomRepository.java
index dda1944dd..9b29037af 100644
--- a/src/main/java/de/thm/arsnova/persistance/RoomRepository.java
+++ b/src/main/java/de/thm/arsnova/persistance/RoomRepository.java
@@ -20,7 +20,6 @@
 import de.thm.arsnova.connector.model.Course;
 import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.entities.UserAuthentication;
-import de.thm.arsnova.entities.migration.v2.LoggedIn;
 import de.thm.arsnova.entities.transport.ImportExportContainer;
 import org.springframework.data.repository.CrudRepository;
 
@@ -40,5 +39,4 @@
 	List<Room> findRoomsByCourses(List<Course> courses);
 	Room importRoom(UserAuthentication user, ImportExportContainer importRoom);
 	ImportExportContainer exportRoom(String id, Boolean withAnswer, Boolean withFeedbackQuestions);
-	LoggedIn registerAsOnlineUser(UserAuthentication user, Room room);
 }
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbAnswerRepository.java b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbAnswerRepository.java
index cd2902c42..a94d62168 100644
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbAnswerRepository.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbAnswerRepository.java
@@ -1,5 +1,6 @@
 package de.thm.arsnova.persistance.couchdb;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.google.common.collect.Lists;
 import de.thm.arsnova.entities.Answer;
 import de.thm.arsnova.entities.AnswerStatistics;
@@ -19,7 +20,11 @@
 import org.springframework.context.ApplicationEventPublisherAware;
 
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 public class CouchDbAnswerRepository extends CouchDbCrudRepository<Answer> implements AnswerRepository, ApplicationEventPublisherAware {
 	private static final int BULK_PARTITION_SIZE = 500;
@@ -77,31 +82,45 @@ public int deleteByContentId(final String contentId) {
 	}
 
 	@Override
-	public AnswerStatistics findByContentIdPiRound(final String contentId, final int piRound) {
-		final ViewResult result = db.queryView(createQuery("by_contentid_round_body_subject")
+	public AnswerStatistics findByContentIdRound(final String contentId, final int round, final int optionCount) {
+		final ViewResult result = db.queryView(createQuery("by_contentid_round_selectedchoiceindexes")
 						.group(true)
-						.startKey(ComplexKey.of(contentId, piRound))
-						.endKey(ComplexKey.of(contentId, piRound, ComplexKey.emptyObject())));
-		final int abstentionCount = countByContentId(contentId);
-
+						.startKey(ComplexKey.of(contentId, round))
+						.endKey(ComplexKey.of(contentId, round, ComplexKey.emptyObject())));
 		final AnswerStatistics stats = new AnswerStatistics();
 		stats.setContentId(contentId);
 		final AnswerStatistics.RoundStatistics roundStats = new AnswerStatistics.RoundStatistics();
-		roundStats.setRound(piRound);
-		roundStats.setAbstentionCount(abstentionCount);
-		/* FIXME: determine correct array size dynamically */
-		final int[] independentCounts = new int[16];
+		roundStats.setRound(round);
+		roundStats.setAbstentionCount(0);
+		final List<Integer> independentCounts = new ArrayList(Collections.nCopies(optionCount, 0));
+		final Map<List<Integer>, AnswerStatistics.RoundStatistics.Combination> combinations = new HashMap();
 		for (final ViewResult.Row d : result) {
-			if (d.getKeyAsNode().get(3).asBoolean()) {
+			if (d.getKeyAsNode().get(2).size() == 0) {
+				/* Abstentions */
 				roundStats.setAbstentionCount(d.getValueAsInt());
 			} else {
-				int optionIndex = d.getKeyAsNode().get(4).asInt();
-				independentCounts[optionIndex] = d.getValueAsInt();
+				/* Answers:
+				 * Extract selected indexes from key[2] and count from value */
+				final JsonNode jsonIndexes = d.getKeyAsNode().get(2);
+				Integer[] indexes = new Integer[jsonIndexes.size()];
+				/* Count independently */
+				for (int i = 0; i < jsonIndexes.size(); i++) {
+					indexes[i] = jsonIndexes.get(i).asInt();
+					independentCounts.set(indexes[i], independentCounts.get(indexes[i]) + d.getValueAsInt());
+				}
+				/* Count option combinations */
+				AnswerStatistics.RoundStatistics.Combination combination =
+						combinations.getOrDefault(Arrays.asList(indexes),
+								new AnswerStatistics.RoundStatistics.Combination(
+										Arrays.asList(indexes), d.getValueAsInt()));
+				combinations.put(Arrays.asList(indexes), combination);
+				roundStats.setCombinatedCounts(combinations.values());
 			}
 		}
 		roundStats.setIndependentCounts(independentCounts);
-		List<AnswerStatistics.RoundStatistics> roundStatisticsList = new ArrayList<>();
-		roundStatisticsList.add(roundStats);
+		/* TODO: Review - might lead easily to IndexOutOfBoundsExceptions - use a Map instead? */
+		List<AnswerStatistics.RoundStatistics> roundStatisticsList = new ArrayList(Collections.nCopies(round, null));
+		roundStatisticsList.set(round - 1, roundStats);
 		stats.setRoundStatistics(roundStatisticsList);
 
 		return stats;
@@ -135,9 +154,9 @@ public int countByContentIdRound(final String contentId, final int round) {
 		final List<T> answers = db.queryView(createQuery("by_contentid_creationtimestamp")
 						.skip(qSkip)
 						.limit(qLimit)
-						//.includeDocs(true)
-						.startKey(ComplexKey.of(contentId))
-						.endKey(ComplexKey.of(contentId, ComplexKey.emptyObject()))
+						.includeDocs(true)
+						.startKey(ComplexKey.of(contentId, ComplexKey.emptyObject()))
+						.endKey(ComplexKey.of(contentId))
 						.descending(true),
 				type);
 
@@ -146,12 +165,14 @@ public int countByContentIdRound(final String contentId, final int round) {
 
 	@Override
 	public List<Answer> findByUserRoomId(final UserAuthentication user, final String roomId) {
-		return queryView("by_user_sessionid", ComplexKey.of(user.getUsername(), roomId));
+		return queryView("by_creatorid_roomid", ComplexKey.of(user.getId(), roomId));
 	}
 
 	@Override
 	public int countByRoomId(final String roomId) {
-		final ViewResult result = db.queryView(createQuery("by_roomid_variant").key(roomId));
+		final ViewResult result = db.queryView(createQuery("by_roomid")
+				.key(roomId)
+				.reduce(true));
 
 		return result.isEmpty() ? 0 : result.getRows().get(0).getValueAsInt();
 	}
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbContentRepository.java b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbContentRepository.java
index bf49803be..0659b789d 100644
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbContentRepository.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbContentRepository.java
@@ -46,16 +46,17 @@ public CouchDbContentRepository(final CouchDbConnector db, final boolean createI
 
 	@Override
 	public List<Content> findByRoomIdForSpeaker(final String roomId) {
-		return findByRoomIdAndVariantAndActive(new Object[] {roomId}, roomId);
+		return findByRoomIdAndVariantAndActive(roomId);
 	}
 
 	@Override
 	public int countByRoomId(final String roomId) {
 		final ViewResult result = db.queryView(createQuery("by_roomid_group_locked")
 				.startKey(ComplexKey.of(roomId))
-				.endKey(ComplexKey.of(roomId, ComplexKey.emptyObject())));
+				.endKey(ComplexKey.of(roomId, ComplexKey.emptyObject()))
+				.reduce(true));
 
-		return result.getSize();
+		return result.isEmpty() ? 0 : result.getRows().get(0).getValueAsInt();
 	}
 
 	@Override
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
index 6788d3a73..31f20f02f 100644
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbInitializer.java
@@ -26,10 +26,15 @@
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
+import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.Scanner;
+import java.util.stream.Collectors;
 
 @Component
 public class CouchDbInitializer implements ResourceLoaderAware {
@@ -41,6 +46,7 @@
 	private CouchDbConnector connector;
 	private ObjectMapper objectMapper;
 	private StatusService statusService;
+	private boolean migrationStarted = false;
 
 	public CouchDbInitializer(final CouchDbConnector couchDbConnector, final ObjectMapperFactory objectMapperFactory,
 			final StatusService statusService) {
@@ -66,22 +72,30 @@ protected void loadDesignDocFiles() throws IOException, ScriptException {
 	}
 
 	protected void createDesignDocs() {
-		docs.forEach(doc -> {
-			if (logger.isDebugEnabled()) {
-				try {
-					logger.debug("Creating design doc:\n{}", objectMapper.writeValueAsString(doc));
-				} catch (JsonProcessingException e) {
-					logger.warn("Failed to serialize design doc.", e);
-				}
-			}
+		connector.executeBulk(docs.stream().filter(doc -> {
 			try {
-				final String rev = connector.getCurrentRevision((String) doc.get("_id"));
-				doc.put("_rev", rev);
-				connector.update(doc);
+				if (logger.isDebugEnabled()) {
+					logger.debug("Checking design doc {}:\n{}", doc.get("_id"), objectMapper.writeValueAsString(doc));
+				}
+				final Map<String, Object> existingDoc = connector.get(HashMap.class, doc.get("_id").toString());
+				final String existingViews = objectMapper.writeValueAsString(existingDoc.get("views"));
+				final String currentViews = objectMapper.writeValueAsString(doc.get("views"));
+				if (existingViews.equals(currentViews)) {
+					logger.debug("Design doc {} already exists.", doc.get("_id"));
+					return false;
+				} else {
+					logger.debug("Design doc {} will be updated.", doc.get("_id"));
+					doc.put("_rev", existingDoc.get("_rev"));
+					return true;
+				}
 			} catch (final DocumentNotFoundException e) {
-				connector.create(doc);
+				logger.debug("Design doc {} will be created.", doc.get("_id"));
+				return true;
+			} catch (JsonProcessingException e) {
+				logger.warn("Failed to serialize design doc {}.", doc.get("_id"), e);
+				return false;
 			}
-		});
+		}).collect(Collectors.toList()));
 	}
 
 	protected void migrate() {
@@ -104,6 +118,12 @@ private void init() {
 
 	@EventListener
 	private void onApplicationEvent(ContextRefreshedEvent event) throws IOException, ScriptException {
+		/* Event is triggered more than once */
+		if (migrationStarted) {
+			return;
+		}
+		migrationStarted = true;
+
 		statusService.putMaintenanceReason(this.getClass(), "Data migration active");
 		loadDesignDocFiles();
 		createDesignDocs();
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbRoomRepository.java b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbRoomRepository.java
index 3f532b698..56a54b881 100644
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbRoomRepository.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/CouchDbRoomRepository.java
@@ -21,20 +21,17 @@
 import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.entities.RoomStatistics;
 import de.thm.arsnova.entities.UserAuthentication;
-import de.thm.arsnova.entities.migration.v2.LoggedIn;
 import de.thm.arsnova.entities.transport.ImportExportContainer;
 import de.thm.arsnova.persistance.LogEntryRepository;
 import de.thm.arsnova.persistance.MotdRepository;
 import de.thm.arsnova.persistance.RoomRepository;
 import org.ektorp.ComplexKey;
 import org.ektorp.CouchDbConnector;
-import org.ektorp.UpdateConflictException;
 import org.ektorp.ViewQuery;
 import org.ektorp.ViewResult;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cache.annotation.Cacheable;
 
 import java.io.IOException;
 import java.util.AbstractMap;
@@ -56,11 +53,14 @@
 	private MotdRepository motdRepository;
 
 	public CouchDbRoomRepository(final CouchDbConnector db, final boolean createIfNotExists) {
-		super(Room.class, db, "by_shortid", createIfNotExists);
+		super(Room.class, db, "by_id", createIfNotExists);
 	}
 
 	@Override
 	public Room findByShortId(final String shortId) {
+		if (shortId == null) {
+			return null;
+		}
 		final List<Room> roomList = queryView("by_shortid", shortId);
 
 		return !roomList.isEmpty() ? roomList.get(0) : null;
@@ -463,38 +463,4 @@ private Room calculateSessionInfo(final ImportExportContainer importExportSessio
 		}
 		return rooms;
 	}
-
-	/* TODO: Move to service layer. */
-	@Override
-	public LoggedIn registerAsOnlineUser(final UserAuthentication user, final Room room) {
-		LoggedIn loggedIn = new LoggedIn();
-		try {
-			final List<LoggedIn> loggedInList = db.queryView(createQuery("all").designDocId("_design/LoggedIn").key(user.getUsername()), LoggedIn.class);
-
-			if (!loggedInList.isEmpty()) {
-				loggedIn = loggedInList.get(0);
-
-				/* Do not clutter CouchDB. Only update once every 3 hours per room. */
-				if (loggedIn.getSessionId().equals(room.getId()) && loggedIn.getTimestamp() > System.currentTimeMillis() - 3 * 3600000) {
-					return loggedIn;
-				}
-			}
-
-			loggedIn.setUser(user.getUsername());
-			loggedIn.setSessionId(room.getId());
-			/* FIXME: migrate */
-			//loggedIn.addVisitedSession(room);
-			loggedIn.updateTimestamp();
-
-			if (loggedIn.getId() == null) {
-				db.create(loggedIn);
-			} else {
-				db.update(loggedIn);
-			}
-		} catch (final UpdateConflictException e) {
-			logger.error("Could not save LoggedIn document of {}.", user.getUsername(), e);
-		}
-
-		return loggedIn;
-	}
 }
diff --git a/src/main/java/de/thm/arsnova/persistance/couchdb/migrations/V2ToV3Migration.java b/src/main/java/de/thm/arsnova/persistance/couchdb/migrations/V2ToV3Migration.java
index 92ab519b9..60647e2ed 100644
--- a/src/main/java/de/thm/arsnova/persistance/couchdb/migrations/V2ToV3Migration.java
+++ b/src/main/java/de/thm/arsnova/persistance/couchdb/migrations/V2ToV3Migration.java
@@ -82,10 +82,12 @@ public String getId() {
 
 	public void migrate() {
 		createV2Index();
+		migrator.setIgnoreRevision(true);
 		migrateUsers();
 		migrateUnregisteredUsers();
 		migrateRooms();
 		migrateMotds();
+		migrator.setIgnoreRevision(false);
 	}
 
 	private void createV2Index() {
diff --git a/src/main/java/de/thm/arsnova/services/ContentService.java b/src/main/java/de/thm/arsnova/services/ContentService.java
index ac02aeae7..8297e0713 100644
--- a/src/main/java/de/thm/arsnova/services/ContentService.java
+++ b/src/main/java/de/thm/arsnova/services/ContentService.java
@@ -23,6 +23,7 @@
 import de.thm.arsnova.entities.TextAnswer;
 import de.thm.arsnova.entities.UserAuthentication;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.Map;
 
@@ -137,6 +138,4 @@
 	void setVotingAdmission(String contentId, boolean disableVoting);
 
 	void setVotingAdmissions(String roomId, boolean disableVoting, List<Content> contents);
-
-	void setVotingAdmissionForAllContents(String roomId, boolean disableVoting);
 }
diff --git a/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java b/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
index 39494bd55..6044c1cec 100644
--- a/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
+++ b/src/main/java/de/thm/arsnova/services/ContentServiceImpl.java
@@ -19,6 +19,7 @@
 
 import de.thm.arsnova.entities.Answer;
 import de.thm.arsnova.entities.AnswerStatistics;
+import de.thm.arsnova.entities.ChoiceQuestionContent;
 import de.thm.arsnova.entities.Content;
 import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.entities.TextAnswer;
@@ -47,6 +48,7 @@
 import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.stereotype.Service;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
@@ -124,7 +126,7 @@ public void flushAnswerQueue() {
 	public Content get(final String id) {
 		try {
 			final Content content = super.get(id);
-			if (!"freetext".equals(content.getFormat()) && 0 == content.getState().getRound()) {
+			if (content.getFormat() != Content.Format.TEXT && 0 == content.getState().getRound()) {
 			/* needed for legacy questions whose piRound property has not been set */
 				content.getState().setRound(1);
 			}
@@ -140,9 +142,9 @@ public Content get(final String id) {
 
 	@Override
 	@Caching(evict = {@CacheEvict(value = "contentlists", key = "#roomId"),
-			@CacheEvict(value = "lecturecontentlists", key = "#roomId", condition = "#content.getGroup().equals('lecture')"),
-			@CacheEvict(value = "preparationcontentlists", key = "#roomId", condition = "#content.getGroup().equals('preparation')"),
-			@CacheEvict(value = "flashcardcontentlists", key = "#roomId", condition = "#content.getGroup().equals('flashcard')") },
+			@CacheEvict(value = "lecturecontentlists", key = "#roomId", condition = "'lecture'.equals(#content.getGroup())"),
+			@CacheEvict(value = "preparationcontentlists", key = "#roomId", condition = "'preparation'.equals(#content.getGroup())"),
+			@CacheEvict(value = "flashcardcontentlists", key = "#roomId", condition = "'flashcard'.equals(#content.getGroup())") },
 			put = {@CachePut(value = "contents", key = "#content.id")})
 	public Content save(final String roomId, final Content content) {
 		content.setRoomId(roomId);
@@ -161,9 +163,9 @@ public Content save(final String roomId, final Content content) {
 	@PreAuthorize("isAuthenticated()")
 	@Caching(evict = {
 			@CacheEvict(value = "contentlists", allEntries = true),
-			@CacheEvict(value = "lecturecontentlists", allEntries = true, condition = "#content.getGroup().equals('lecture')"),
-			@CacheEvict(value = "preparationcontentlists", allEntries = true, condition = "#content.getGroup().equals('preparation')"),
-			@CacheEvict(value = "flashcardcontentlists", allEntries = true, condition = "#content.getGroup().equals('flashcard')") },
+			@CacheEvict(value = "lecturecontentlists", allEntries = true, condition = "'lecture'.equals(#content.getGroup())"),
+			@CacheEvict(value = "preparationcontentlists", allEntries = true, condition = "'preparation'.equals(#content.getGroup())"),
+			@CacheEvict(value = "flashcardcontentlists", allEntries = true, condition = "'flashcard'.equals(#content.getGroup())") },
 			put = {@CachePut(value = "contents", key = "#content.id")})
 	public Content update(final Content content) {
 		final UserAuthentication user = userService.getCurrentUser();
@@ -177,7 +179,7 @@ public Content update(final Content content) {
 			throw new UnauthorizedException();
 		}
 
-		if ("freetext".equals(content.getFormat())) {
+		if (content.getFormat() == Content.Format.TEXT) {
 			content.getState().setRound(0);
 		} else if (content.getState().getRound() < 1 || content.getState().getRound() > 2) {
 			content.getState().setRound(oldContent.getState().getRound() > 0 ? oldContent.getState().getRound() : 1);
@@ -223,7 +225,7 @@ public Content save(final Content content) {
 		final Room room = roomRepository.findOne(content.getRoomId());
 		content.setTimestamp(new Date());
 
-		if ("freetext".equals(content.getFormat())) {
+		if (content.getFormat() == Content.Format.TEXT) {
 			content.getState().setRound(0);
 		} else if (content.getState().getRound() < 1 || content.getState().getRound() > 2) {
 			content.getState().setRound(1);
@@ -256,9 +258,9 @@ public Content save(final Content content) {
 			@CacheEvict("answerlists"),
 			@CacheEvict(value = "contents", key = "#contentId"),
 			@CacheEvict(value = "contentlists", allEntries = true),
-			@CacheEvict(value = "lecturecontentlists", allEntries = true /*, condition = "#content.getGroup().equals('lecture')"*/),
-			@CacheEvict(value = "preparationcontentlists", allEntries = true /*, condition = "#content.getGroup().equals('preparation')"*/),
-			@CacheEvict(value = "flashcardcontentlists", allEntries = true /*, condition = "#content.getGroup().equals('flashcard')"*/) })
+			@CacheEvict(value = "lecturecontentlists", allEntries = true /*, condition = "'lecture'.equals(#content.getGroup())"*/),
+			@CacheEvict(value = "preparationcontentlists", allEntries = true /*, condition = "'preparation'.equals(#content.getGroup())"*/),
+			@CacheEvict(value = "flashcardcontentlists", allEntries = true /*, condition = "'flashcard'.equals(#content.getGroup())"*/) })
 	public void delete(final String contentId) {
 		final Content content = contentRepository.findOne(contentId);
 		if (content == null) {
@@ -369,30 +371,22 @@ public void setVotingAdmissions(final String roomId, final boolean disableVoting
 		if (!room.getOwnerId().equals(user.getId())) {
 			throw new UnauthorizedException();
 		}
-		for (final Content q : contents) {
-			if (!"flashcard".equals(q.getRoomId())) {
-				q.getState().setResponsesEnabled(!disableVoting);
+		/* FIXME: Filter flashcards - flashcard format not yet implemented */
+		//contents.stream().filter(c -> c.getFormat() != Format.?).collect(Collectors.toList());
+		final Map<String, Object> patches = new HashMap<>();
+		patches.put("responsesEnabled", !disableVoting);
+		try {
+			patch(contents, patches, Content::getState);
+			ArsnovaEvent event;
+			if (disableVoting) {
+				event = new LockVotesEvent(this, room, contents);
+			} else {
+				event = new UnlockVotesEvent(this, room, contents);
 			}
+			this.publisher.publishEvent(event);
+		} catch (IOException e) {
+			logger.error("Patching of contents failed", e);
 		}
-		ArsnovaEvent event;
-		if (disableVoting) {
-			event = new LockVotesEvent(this, room, contents);
-		} else {
-			event = new UnlockVotesEvent(this, room, contents);
-		}
-		this.publisher.publishEvent(event);
-	}
-
-	@Override
-	@PreAuthorize("isAuthenticated()")
-	public void setVotingAdmissionForAllContents(final String roomId, final boolean disableVoting) {
-		final UserAuthentication user = getCurrentUser();
-		final Room room = roomRepository.findOne(roomId);
-		if (!room.getOwnerId().equals(user.getId())) {
-			throw new UnauthorizedException();
-		}
-		final List<Content> contents = contentRepository.findByRoomId(room.getId());
-		setVotingAdmissionForAllContents(room.getId(), disableVoting);
 	}
 
 	private Room getRoomWithAuthCheck(final String roomId) {
@@ -458,13 +452,20 @@ public void getFreetextAnswerAndMarkRead(final String answerId, final UserAuthen
 
 	@Override
 	@PreAuthorize("isAuthenticated()")
-	public AnswerStatistics getStatistics(final String contentId, final int piRound) {
-		final Content content = contentRepository.findOne(contentId);
+	public AnswerStatistics getStatistics(final String contentId, final int round) {
+		final ChoiceQuestionContent content = (ChoiceQuestionContent) contentRepository.findOne(contentId);
 		if (content == null) {
 			throw new NotFoundException();
 		}
+		AnswerStatistics stats = answerRepository.findByContentIdRound(
+				content.getId(), round, content.getOptions().size());
+		/* Fill list with zeros to prevent IndexOutOfBoundsExceptions */
+		List<Integer> independentCounts = stats.getRoundStatistics().get(round - 1).getIndependentCounts();
+		while (independentCounts.size() < content.getOptions().size()) {
+			independentCounts.add(0);
+		}
 
-		return answerRepository.findByContentIdPiRound(content.getId(), piRound);
+		return stats;
 	}
 
 	@Override
@@ -485,9 +486,9 @@ public AnswerStatistics getAllStatistics(final String contentId) {
 		if (content == null) {
 			throw new NotFoundException();
 		}
-		AnswerStatistics stats = answerRepository.findByContentIdPiRound(content.getId(), 1);
-		AnswerStatistics stats2 = answerRepository.findByContentIdPiRound(content.getId(), 2);
-		stats.getRoundStatistics().add(stats2.getRoundStatistics().get(0));
+		AnswerStatistics stats = getStatistics(content.getId(), 1);
+		AnswerStatistics stats2 = getStatistics(content.getId(), 2);
+		stats.getRoundStatistics().add(stats2.getRoundStatistics().get(1));
 
 		return stats;
 	}
@@ -529,7 +530,7 @@ public int countAnswersByContentIdAndRound(final String contentId) {
 			return 0;
 		}
 
-		if ("freetext".equals(content.getFormat())) {
+		if (content.getFormat() == Content.Format.TEXT) {
 			return answerRepository.countByContentId(content.getId());
 		} else {
 			return answerRepository.countByContentIdRound(content.getId(), content.getState().getRound());
@@ -600,9 +601,6 @@ public int countTotalAnswersByContentId(final String contentId) {
 				// Room's creator. Locked Questions do not appear in this list.
 				continue;
 			}
-			if (0 == answer.getRound() && !"freetext".equals(content.getFormat())) {
-				answer.setRound(1);
-			}
 
 			// discard all answers that aren't in the same piRound as the content
 			if (answer.getRound() == content.getState().getRound()) {
@@ -638,7 +636,7 @@ public Answer saveAnswer(final String contentId, final Answer answer) {
 		answer.setQuestionValue(content.calculateValue(answer));
 		*/
 
-		if ("freetext".equals(content.getFormat())) {
+		if (content.getFormat() == Content.Format.TEXT) {
 			answer.setRound(0);
 			/* FIXME: migrate
 			imageUtils.generateThumbnailImage(answer);
@@ -673,7 +671,7 @@ public Answer updateAnswer(final Answer answer) {
 
 		final Content content = get(answer.getContentId());
 		/* FIXME: migrate
-		if ("freetext".equals(content.getFormat())) {
+		if (content.getFormat() == Content.Format.TEXT) {
 			imageUtils.generateThumbnailImage(realAnswer);
 			content.checkTextStrictOptions(realAnswer);
 		}
diff --git a/src/main/java/de/thm/arsnova/services/RoomServiceImpl.java b/src/main/java/de/thm/arsnova/services/RoomServiceImpl.java
index e3c21fa78..f4e437b3c 100644
--- a/src/main/java/de/thm/arsnova/services/RoomServiceImpl.java
+++ b/src/main/java/de/thm/arsnova/services/RoomServiceImpl.java
@@ -170,19 +170,11 @@ public void deleteInactiveRooms() {
 
 	@Override
 	public Room join(final String id, final UUID socketId) {
-		/* Socket.IO solution */
-
 		Room room = null != id ? roomRepository.findOne(id) : null;
-
 		if (null == room) {
 			userService.removeUserFromRoomBySocketId(socketId);
 			return null;
 		}
-		final UserAuthentication user = userService.getUserToSocketId(socketId);
-
-		userService.addUserToRoomBySocketId(socketId, id);
-
-		roomRepository.registerAsOnlineUser(user, room);
 
 		/* FIXME: migrate LMS course support
 		if (connectorClient != null && room.isCourseSession()) {
@@ -193,6 +185,9 @@ public Room join(final String id, final UUID socketId) {
 		}
 		*/
 
+		userService.addUserToRoomBySocketId(socketId, id);
+		userService.addRoomToHistory(userService.getCurrentUserProfile(), room);
+
 		return room;
 	}
 
@@ -206,6 +201,9 @@ public Room getByShortId(final String shortId) {
 	@Override
 	@Cacheable("room.id-by-shortid")
 	public String getIdByShortId(final String shortId) {
+		if (shortId == null) {
+			throw new NullPointerException("shortId cannot be null");
+		}
 		Room room = roomRepository.findByShortId(shortId);
 		if (room == null) {
 			throw new NotFoundException("No Room exists for short ID");
@@ -287,9 +285,8 @@ public Room getInternal(final String id, final UserAuthentication user) {
 	@Override
 	@PreAuthorize("hasPermission(#userId, 'userprofile', 'read')")
 	public List<Room> getUserRoomHistory(final String userId) {
-		UserProfile profile = userService.get(userId);
-		List<String> roomIds = profile.getRoomHistory().stream().map(entry -> entry.getRoomId()).collect(Collectors.toList());
-		roomRepository.findAll(roomIds);
+		final UserProfile profile = userService.get(userId);
+		final List<String> roomIds = profile.getRoomHistory().stream().map(entry -> entry.getRoomId()).collect(Collectors.toList());
 		List<Room> rooms = new ArrayList<>();
 		roomRepository.findAll(roomIds).forEach(rooms::add);
 
@@ -389,6 +386,8 @@ public Room update(final String id, final Room room) {
 		room.setOwnerId(existingRoom.getOwnerId());
 		handleLogo(room);
 		update(existingRoom, room);
+		/* TODO: only publish event when feedback has changed */
+		this.publisher.publishEvent(new FeatureChangeEvent(this, room));
 
 		return room;
 	}
diff --git a/src/main/java/de/thm/arsnova/services/UserService.java b/src/main/java/de/thm/arsnova/services/UserService.java
index 6ed83c389..a2fd132d3 100644
--- a/src/main/java/de/thm/arsnova/services/UserService.java
+++ b/src/main/java/de/thm/arsnova/services/UserService.java
@@ -17,6 +17,7 @@
  */
 package de.thm.arsnova.services;
 
+import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.entities.UserAuthentication;
 import de.thm.arsnova.entities.UserProfile;
 import de.thm.arsnova.security.User;
@@ -78,6 +79,8 @@ User loadUser(UserProfile.AuthProvider authProvider, String loginId,
 
 	UserProfile deleteByUsername(String username);
 
+	void addRoomToHistory(UserProfile userProfile, Room room);
+
 	void initiatePasswordReset(String username);
 
 	boolean resetPassword(UserProfile userProfile, String key, String password);
diff --git a/src/main/java/de/thm/arsnova/services/UserServiceImpl.java b/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
index a31554a27..050b6b22c 100644
--- a/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
+++ b/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
@@ -18,6 +18,7 @@
 package de.thm.arsnova.services;
 
 import com.codahale.metrics.annotation.Gauge;
+import de.thm.arsnova.entities.Room;
 import de.thm.arsnova.entities.UserAuthentication;
 import de.thm.arsnova.entities.UserProfile;
 import de.thm.arsnova.exceptions.BadRequestException;
@@ -38,6 +39,7 @@
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.MimeMessageHelper;
 import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
 import org.springframework.security.core.Authentication;
@@ -60,6 +62,7 @@
 import javax.annotation.PreDestroy;
 import javax.mail.MessagingException;
 import javax.mail.internet.MimeMessage;
+import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.text.MessageFormat;
 import java.util.*;
@@ -504,6 +507,26 @@ public UserProfile deleteByUsername(String username) {
 		return userProfile;
 	}
 
+	@Override
+	@PreAuthorize("hasPermission(#userProfile, 'update')")
+	public void addRoomToHistory(final UserProfile userProfile, final Room room) {
+		if (userProfile.getId().equals(room.getOwnerId())) {
+			return;
+		}
+		Set<UserProfile.RoomHistoryEntry> roomHistory = userProfile.getRoomHistory();
+		UserProfile.RoomHistoryEntry entry = new UserProfile.RoomHistoryEntry(room.getId(), new Date());
+		/* TODO: lastVisit in roomHistory is currently not updated by subsequent method invocations */
+		if (!roomHistory.contains(entry)) {
+			roomHistory.add(entry);
+			Map<String, Object> changes = Collections.singletonMap("roomHistory", roomHistory);
+			try {
+				super.patch(userProfile, changes);
+			} catch (IOException e) {
+				logger.error("Could not patch RoomHistory");
+			}
+		}
+	}
+
 	@Override
 	public void initiatePasswordReset(String username) {
 		UserProfile userProfile = getByUsername(username);
diff --git a/src/main/java/de/thm/arsnova/websocket/ArsnovaSocketioServerImpl.java b/src/main/java/de/thm/arsnova/websocket/ArsnovaSocketioServerImpl.java
index 48a3d875f..9d79368c2 100644
--- a/src/main/java/de/thm/arsnova/websocket/ArsnovaSocketioServerImpl.java
+++ b/src/main/java/de/thm/arsnova/websocket/ArsnovaSocketioServerImpl.java
@@ -31,6 +31,7 @@
 import de.thm.arsnova.entities.UserAuthentication;
 import de.thm.arsnova.entities.Comment;
 import de.thm.arsnova.entities.ScoreOptions;
+import de.thm.arsnova.entities.migration.ToV2Migrator;
 import de.thm.arsnova.events.*;
 import de.thm.arsnova.exceptions.NoContentException;
 import de.thm.arsnova.exceptions.NotFoundException;
@@ -83,6 +84,9 @@
 	@Autowired
 	private CommentService commentService;
 
+	@Autowired
+	private ToV2Migrator toV2Migrator;
+
 	private static final Logger logger = LoggerFactory.getLogger(ArsnovaSocketioServerImpl.class);
 
 	private int portNumber;
@@ -168,16 +172,18 @@ public void onData(final SocketIOClient client, final Room room, final AckReques
 					return;
 				}
 				final String oldRoomId = userService.getRoomIdByUserId(u.getId());
-				if (null != room.getKeyword() && room.getKeyword().equals(oldRoomId)) {
-					return;
-				}
-				final String roomId = roomService.getIdByShortId(room.getKeyword());
+				if (null != room.getKeyword()) {
+					if (room.getKeyword().equals(oldRoomId)) {
+						return;
+					}
+					final String roomId = roomService.getIdByShortId(room.getKeyword());
 
-				if (null != roomId && null != roomService.join(roomId, client.getSessionId())) {
-					/* active user count has to be sent to the client since the broadcast is
-					 * not always sent as long as the polling solution is active simultaneously */
-					reportActiveUserCountForRoom(roomId);
-					reportRoomDataToClient(roomId, u, client);
+					if (null != roomId && null != roomService.join(roomId, client.getSessionId())) {
+						/* active user count has to be sent to the client since the broadcast is
+						 * not always sent as long as the polling solution is active simultaneously */
+						reportActiveUserCountForRoom(roomId);
+						reportRoomDataToClient(roomId, u, client);
+					}
 				}
 				if (null != oldRoomId) {
 					reportActiveUserCountForRoom(oldRoomId);
@@ -371,8 +377,9 @@ public void reportRoomDataToClient(final String roomId, final UserAuthentication
 
 		client.sendEvent("unansweredLecturerQuestions", contentService.getUnAnsweredLectureContentIds(roomId, user));
 		client.sendEvent("unansweredPreparationQuestions", contentService.getUnAnsweredPreparationContentIds(roomId, user));
-		client.sendEvent("countLectureQuestionAnswers", contentService.countLectureQuestionAnswersInternal(roomId));
-		client.sendEvent("countPreparationQuestionAnswers", contentService.countPreparationQuestionAnswersInternal(roomId));
+		/* FIXME: Content variant is ignored for now */
+		client.sendEvent("countLectureQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
+		client.sendEvent("countPreparationQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
 		client.sendEvent("activeUserCountData", roomService.activeUsers(roomId));
 //		client.sendEvent("learningProgressOptions", room.getLearningProgressOptions());
 		final de.thm.arsnova.entities.Feedback fb = feedbackService.getByRoomId(roomId);
@@ -516,8 +523,9 @@ public void visit(NewAnswerEvent event) {
 		final String roomId = event.getRoom().getId();
 		this.reportAnswersToContentAvailable(event.getRoom(), new Content(event.getContent()));
 		broadcastInRoom(roomId, "countQuestionAnswersByQuestionId", contentService.countAnswersAndAbstentionsInternal(event.getContent().getId()));
-		broadcastInRoom(roomId, "countLectureQuestionAnswers", contentService.countLectureQuestionAnswersInternal(roomId));
-		broadcastInRoom(roomId, "countPreparationQuestionAnswers", contentService.countPreparationQuestionAnswersInternal(roomId));
+		/* FIXME: Content variant is ignored for now */
+		broadcastInRoom(roomId, "countLectureQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
+		broadcastInRoom(roomId, "countPreparationQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
 
 		// Update the unanswered count for the content variant that was answered.
 		final de.thm.arsnova.entities.Content content = event.getContent();
@@ -535,8 +543,9 @@ public void visit(DeleteAnswerEvent event) {
 		final String roomId = event.getRoom().getId();
 		this.reportAnswersToContentAvailable(event.getRoom(), new Content(event.getQuestion()));
 		// We do not know which user's answer was deleted, so we can't update his 'unanswered' list of questions...
-		broadcastInRoom(roomId, "countLectureQuestionAnswers", contentService.countLectureQuestionAnswersInternal(roomId));
-		broadcastInRoom(roomId, "countPreparationQuestionAnswers", contentService.countPreparationQuestionAnswersInternal(roomId));
+		/* FIXME: Content variant is ignored for now */
+		broadcastInRoom(roomId, "countLectureQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
+		broadcastInRoom(roomId, "countPreparationQuestionAnswers", contentService.countTotalAnswersByRoomId(roomId));
 	}
 
 	@Async
@@ -603,7 +612,7 @@ public void visit(UnlockVotesEvent event) {
 	public void visit(FeatureChangeEvent event) {
 		final String roomId = event.getRoom().getId();
 		final de.thm.arsnova.entities.Room.Settings settings = event.getRoom().getSettings();
-		broadcastInRoom(roomId, "featureChange", settings);
+		broadcastInRoom(roomId, "featureChange", toV2Migrator.migrate(settings));
 
 		if (settings.isFlashcardsEnabled()) {
 			broadcastInRoom(roomId, "countFlashcards", contentService.countFlashcardsForUserInternal(roomId));
diff --git a/src/main/resources/couchdb/Answer.design.js b/src/main/resources/couchdb/Answer.design.js
index e3702e94d..cb63778f8 100644
--- a/src/main/resources/couchdb/Answer.design.js
+++ b/src/main/resources/couchdb/Answer.design.js
@@ -4,36 +4,44 @@ var designDoc = {
 	"views": {
 		"by_contentid": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit(doc.contentId, {_rev: doc._rev});
 				}
 			}
 		},
 		"by_contentid_round_body_subject": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.contentId, doc.round, doc.abstention, doc.body, doc.subject, doc.successfulFreeTextAnswer], {_rev: doc._rev});
 				}
 			},
 			"reduce": "_count"
 		},
+		"by_contentid_round_selectedchoiceindexes": {
+			"map": function (doc) {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
+					emit([doc.contentId, doc.round, doc.selectedChoiceIndexes], {_rev: doc._rev});
+				}
+			},
+			"reduce": "_count"
+		},
 		"by_contentid_creationtimestamp": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.contentId, doc.creationTimestamp], {_rev: doc._rev});
 				}
 			}
 		},
-		"by_contentid_user_round": {
+		"by_contentid_creatorid_round": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
-					emit([doc.contentId, doc.user, doc.round], {_rev: doc._rev});
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
+					emit([doc.contentId, doc.creatorId, doc.round], {_rev: doc._rev});
 				}
 			}
 		},
 		"by_roomid": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit(doc.roomId, {_rev: doc._rev});
 				}
 			},
@@ -41,7 +49,7 @@ var designDoc = {
 		},
 		"by_roomid_variant": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.roomId, doc.questionVariant], {_rev: doc._rev});
 				}
 			},
@@ -49,21 +57,21 @@ var designDoc = {
 		},
 		"by_creatorid_roomid": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.creatorId, doc.roomId], {_rev: doc._rev});
 				}
 			}
 		},
 		"contentid_by_creatorid_roomid_variant": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.user, doc.roomId, doc.questionVariant], doc.contentId);
 				}
 			}
 		},
 		"contentid_round_by_creatorid_roomid_variant": {
 			"map": function (doc) {
-				if (doc.type === "Answer") {
+				if (["Answer", "ChoiceAnswer", "TextAnswer"].indexOf(doc.type) !== -1) {
 					emit([doc.creatorId, doc.roomId, doc.questionVariant], [doc.contentId, doc.round]);
 				}
 			}
diff --git a/src/main/resources/couchdb/Content.design.js b/src/main/resources/couchdb/Content.design.js
index 4a9d83083..e39c5e660 100644
--- a/src/main/resources/couchdb/Content.design.js
+++ b/src/main/resources/couchdb/Content.design.js
@@ -4,7 +4,7 @@ var designDoc = {
 	"views": {
 		"by_roomid": {
 			"map": function (doc) {
-				if (doc.type === "Content") {
+				if (["Content", "ChoiceQuestionContent"].indexOf(doc.type) !== -1) {
 					emit(doc.roomId, {_rev: doc._rev});
 				}
 			},
@@ -12,7 +12,7 @@ var designDoc = {
 		},
 		"by_roomid_group_locked": {
 			"map": function (doc) {
-				if (doc.type === "Content") {
+				if (["Content", "ChoiceQuestionContent"].indexOf(doc.type) !== -1) {
 					emit([doc.roomId, doc.group, doc.locked, doc.subject, doc.body.substr(0, 16)], {_rev: doc._rev});
 				}
 			},
diff --git a/src/main/resources/couchdb/Room.design.js b/src/main/resources/couchdb/Room.design.js
index 1d8ec99cc..703528c46 100644
--- a/src/main/resources/couchdb/Room.design.js
+++ b/src/main/resources/couchdb/Room.design.js
@@ -2,6 +2,13 @@ var designDoc = {
 	"_id": "_design/Room",
 	"language": "javascript",
 	"views": {
+		"by_id": {
+			"map": function (doc) {
+				if (doc.type === "Room") {
+					emit(doc._id, {_rev: doc._rev});
+				}
+			}
+		},
 		"by_courseid": {
 			"map": function (doc) {
 				if (doc.type === "Room" && doc.courseId  && !doc.poolProperties) {
diff --git a/src/test/java/de/thm/arsnova/entities/migration/FromV2MigratorTest.java b/src/test/java/de/thm/arsnova/entities/migration/FromV2MigratorTest.java
new file mode 100644
index 000000000..e958da87a
--- /dev/null
+++ b/src/test/java/de/thm/arsnova/entities/migration/FromV2MigratorTest.java
@@ -0,0 +1,98 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.entities.migration;
+
+import de.thm.arsnova.config.AppConfig;
+import de.thm.arsnova.config.TestAppConfig;
+import de.thm.arsnova.config.TestPersistanceConfig;
+import de.thm.arsnova.config.TestSecurityConfig;
+import de.thm.arsnova.entities.ChoiceAnswer;
+import de.thm.arsnova.entities.migration.v2.Answer;
+import de.thm.arsnova.entities.migration.v2.AnswerOption;
+import de.thm.arsnova.entities.migration.v2.Content;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.web.WebAppConfiguration;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * @author Daniel Gerhardt
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@WebAppConfiguration
+@ContextConfiguration(classes = {AppConfig.class, TestAppConfig.class, TestPersistanceConfig.class, TestSecurityConfig.class})
+@ActiveProfiles("test")
+public class FromV2MigratorTest {
+	private static final String ANSWER_ID = "answerId";
+	private static final String CONTENT_ID = "contentId";
+	private static final String ROOM_ID = "roomId";
+	private static final String TYPE = "mc";
+	private static final String OPTION1_LABEL = "option1";
+	private static final String OPTION2_LABEL = "option2";
+	private static final String OPTION3_LABEL = "option3";
+	private static final int ROUND = 1;
+
+	@Autowired
+	private FromV2Migrator fromV2Migrator;
+
+	@Test
+	public void testMigrateAnswerMultipleResponse() {
+		Answer answerV2 = new Answer();
+		answerV2.setId(ANSWER_ID);
+		answerV2.setQuestionId(CONTENT_ID);
+		answerV2.setSessionId(ROOM_ID);
+		answerV2.setPiRound(ROUND);
+		answerV2.setAnswerText("0,1,1");
+
+		List<AnswerOption> options = new ArrayList<>();
+		AnswerOption option1 = new AnswerOption();
+		option1.setText(OPTION1_LABEL);
+		options.add(option1);
+		AnswerOption option2 = new AnswerOption();
+		option2.setText(OPTION2_LABEL);
+		options.add(option2);
+		AnswerOption option3 = new AnswerOption();
+		option3.setText(OPTION3_LABEL);
+		options.add(option3);
+
+		Content contentV2 = new Content();
+		contentV2.setQuestionType(TYPE);
+		contentV2.setSessionId(ROOM_ID);
+		contentV2.setPossibleAnswers(options);
+
+		List<Integer> selectedChoices = new ArrayList<>();
+		selectedChoices.add(1);
+		selectedChoices.add(2);
+
+		ChoiceAnswer answerV3 = (ChoiceAnswer) fromV2Migrator.migrate(answerV2, contentV2);
+
+		assertEquals(ANSWER_ID, answerV3.getId());
+		assertEquals(CONTENT_ID, answerV3.getContentId());
+		assertEquals(ROOM_ID, answerV3.getRoomId());
+		assertEquals(ROUND, answerV3.getRound());
+		assertEquals(selectedChoices, answerV3.getSelectedChoiceIndexes());
+	}
+}
diff --git a/src/test/java/de/thm/arsnova/entities/migration/ToV2MigratorTest.java b/src/test/java/de/thm/arsnova/entities/migration/ToV2MigratorTest.java
new file mode 100644
index 000000000..26a344cfe
--- /dev/null
+++ b/src/test/java/de/thm/arsnova/entities/migration/ToV2MigratorTest.java
@@ -0,0 +1,147 @@
+/*
+ * This file is part of ARSnova Backend.
+ * Copyright (C) 2012-2018 The ARSnova Team
+ *
+ * ARSnova Backend is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * ARSnova Backend is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package de.thm.arsnova.entities.migration;
+
+import de.thm.arsnova.config.AppConfig;
+import de.thm.arsnova.config.TestAppConfig;
+import de.thm.arsnova.config.TestPersistanceConfig;
+import de.thm.arsnova.config.TestSecurityConfig;
+import de.thm.arsnova.entities.AnswerStatistics;
+import de.thm.arsnova.entities.ChoiceAnswer;
+import de.thm.arsnova.entities.ChoiceQuestionContent;
+import de.thm.arsnova.entities.Content;
+import de.thm.arsnova.entities.migration.v2.Answer;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.web.WebAppConfiguration;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * @author Daniel Gerhardt
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@WebAppConfiguration
+@ContextConfiguration(classes = {AppConfig.class, TestAppConfig.class, TestPersistanceConfig.class, TestSecurityConfig.class})
+@ActiveProfiles("test")
+public class ToV2MigratorTest {
+	private static final String ANSWER_ID = "answerId";
+	private static final String CONTENT_ID = "contentId";
+	private static final String ROOM_ID = "roomId";
+	private static final String CREATOR_ID = "creatorId";
+	private static final String OPTION1_LABEL = "option1";
+	private static final String OPTION2_LABEL = "option2";
+	private static final String OPTION3_LABEL = "option3";
+	private static final String OPTION4_LABEL = "option4";
+	private static final int ROUND = 1;
+	private static final int ABSTENTION_COUNT = 7;
+	private static final List<Integer> ANSWER_COUNTS =
+			Collections.unmodifiableList(Arrays.asList(new Integer[] {3, 2, 4, 1}));
+
+	@Autowired
+	private ToV2Migrator toV2Migrator;
+
+	@Test
+	public void testMigrateAnswerMultipleResponse() {
+		final List<ChoiceQuestionContent.AnswerOption> options = new ArrayList<>();
+		final ChoiceQuestionContent.AnswerOption option1 = new ChoiceQuestionContent.AnswerOption();
+		option1.setLabel(OPTION1_LABEL);
+		options.add(option1);
+		ChoiceQuestionContent.AnswerOption option2 = new ChoiceQuestionContent.AnswerOption();
+		option2.setLabel(OPTION2_LABEL);
+		options.add(option2);
+		ChoiceQuestionContent.AnswerOption option3 = new ChoiceQuestionContent.AnswerOption();
+		option3.setLabel(OPTION3_LABEL);
+		options.add(option3);
+
+		final ChoiceQuestionContent contentV3 = new ChoiceQuestionContent();
+		contentV3.setFormat(Content.Format.CHOICE);
+		contentV3.setMultiple(true);
+		contentV3.setRoomId(ROOM_ID);
+		contentV3.setOptions(options);
+
+		final List<Integer> selectedChoices = new ArrayList<>();
+		selectedChoices.add(1);
+		selectedChoices.add(2);
+
+		final ChoiceAnswer answerV3 = new ChoiceAnswer();
+		answerV3.setId(ANSWER_ID);
+		answerV3.setCreatorId(CREATOR_ID);
+		answerV3.setRoomId(ROOM_ID);
+		answerV3.setContentId(CONTENT_ID);
+		answerV3.setRound(ROUND);
+		answerV3.setSelectedChoiceIndexes(selectedChoices);
+
+		final Answer answerV2 = toV2Migrator.migrate(answerV3, contentV3);
+
+		assertEquals(ANSWER_ID, answerV2.getId());
+		assertEquals(CONTENT_ID, answerV2.getQuestionId());
+		assertEquals(ROOM_ID, answerV2.getSessionId());
+		assertEquals(ROUND, answerV2.getPiRound());
+		assertEquals("0,1,1", answerV2.getAnswerText());
+	}
+
+	@Test
+	public void testMigrateAnswerStatisticsSingleChoice() {
+		final AnswerStatistics statsV3 = new AnswerStatistics();
+		final AnswerStatistics.RoundStatistics roundStatsV3 = new AnswerStatistics.RoundStatistics();
+		roundStatsV3.setRound(ROUND);
+		roundStatsV3.setIndependentCounts(ANSWER_COUNTS);
+		roundStatsV3.setAbstentionCount(7);
+		statsV3.setRoundStatistics(Collections.singletonList(roundStatsV3));
+
+		final ChoiceQuestionContent.AnswerOption option1 = new ChoiceQuestionContent.AnswerOption();
+		option1.setLabel(OPTION1_LABEL);
+		ChoiceQuestionContent.AnswerOption option2 = new ChoiceQuestionContent.AnswerOption();
+		option2.setLabel(OPTION2_LABEL);
+		ChoiceQuestionContent.AnswerOption option3 = new ChoiceQuestionContent.AnswerOption();
+		option3.setLabel(OPTION3_LABEL);
+		ChoiceQuestionContent.AnswerOption option4 = new ChoiceQuestionContent.AnswerOption();
+		option3.setLabel(OPTION4_LABEL);
+		final List<ChoiceQuestionContent.AnswerOption> options = Arrays.asList(new ChoiceQuestionContent.AnswerOption[] {
+			option1, option2, option3, option4
+		});
+
+		final ChoiceQuestionContent contentV3 = new ChoiceQuestionContent();
+		contentV3.getState().setRound(ROUND);
+		contentV3.setOptions(options);
+		contentV3.setAbstentionsAllowed(true);
+
+		final List<Answer> statsV2 = toV2Migrator.migrate(statsV3, contentV3, ROUND);
+
+		final Answer abstentionStatsV2 = statsV2.get(0);
+		assertEquals(ABSTENTION_COUNT, abstentionStatsV2.getAnswerCount());
+		assertEquals(ABSTENTION_COUNT, abstentionStatsV2.getAbstentionCount());
+
+		for (int i = 0; i < ANSWER_COUNTS.size(); i++) {
+			Answer answerStatsV2 = statsV2.get(i + 1);
+			assertEquals(ANSWER_COUNTS.get(i).intValue(), answerStatsV2.getAnswerCount());
+			assertEquals(ABSTENTION_COUNT, answerStatsV2.getAbstentionCount());
+			assertEquals(options.get(i).getLabel(), answerStatsV2.getAnswerText());
+		}
+	}
+}
