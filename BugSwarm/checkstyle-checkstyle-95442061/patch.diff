diff --git a/.travis.yml b/.travis.yml
index 614b810e72..7622b8452d 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -224,10 +224,30 @@ matrix:
         - DESC="checkstyle"
         - CMD="mvn clean verify -DskipTests -DskipITs -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true"
         - COVERAGE_CMD=""
+
     # MacOS verify
     - os: osx
-      env: DESC="MacOS verify" CMD="export JAVA_HOME=$(/usr/libexec/java_home) && mvn clean integration-test failsafe:verify " COVERAGE_CMD=""
-      
+      env:
+        - DESC="MacOS verify"
+        - CMD="export JAVA_HOME=$(/usr/libexec/java_home) && mvn clean integration-test failsafe:verify "
+        - COVERAGE_CMD=""
+
+    # Releasenotes generation - validaton
+    - jdk: oraclejdk8
+      env:
+        - DESC="Releasenotes generation"
+        - CMD0="if [[ $TRAVIS_PULL_REQUEST =~ ^([0-9]*)$ ]]; then exit 0; fi "
+        - CMD1=" && git clone https://github.com/checkstyle/contribution && cd contribution/releasenotes-xdoc-builder "
+        - CMD2=" && mvn clean compile package "
+        - CMD3=" && cd ../../ "
+        - CMD4=" && LATEST_RELEASE_TAG=$(git describe $(git rev-list --tags --max-count=1)) "
+        - CMD5=" && CS_RELEASE_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec | sed 's/-SNAPSHOT//' ) "
+        - CMD6=" && java -jar contribution/releasenotes-xdoc-builder/target/releasenotes-xdoc-builder-1.0-all.jar "
+        - CMD7="        -localRepoPath . -startRef \$LATEST_RELEASE_TAG -releaseNumber \$CS_RELEASE_VERSION -authToken $GITHUB_AUTH_TOKEN"
+        - CMD8=" && cat releasenotes.xml "
+        - CMD=$CMD0$CMD1$CMD2$CMD3$CMD4$CMD5$CMD6$CMD7$CMD8
+        - COVERAGE_CMD=""
+
 script: eval $CMD
 
 after_success:
diff --git a/config/intellij-idea-inspections.xml b/config/intellij-idea-inspections.xml
index 09349c9d75..4b9ffd7f8e 100755
--- a/config/intellij-idea-inspections.xml
+++ b/config/intellij-idea-inspections.xml
@@ -1126,7 +1126,8 @@
     <inspection_tool class="JSUnfilteredForInLoop" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnnecessarySemicolon" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnresolvedFunction" enabled="true" level="ERROR" enabled_by_default="true" />
-    <inspection_tool class="JSUnresolvedLibraryURL" enabled="true" level="ERROR" enabled_by_default="true" />
+    <!-- it produce false positives on references of globally availbale libraries -->
+    <inspection_tool class="JSUnresolvedLibraryURL" enabled="false" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnresolvedVariable" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnusedAssignment" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnusedGlobalSymbols" enabled="true" level="ERROR" enabled_by_default="true" />
diff --git a/config/pmd.xml b/config/pmd.xml
index da6fc7d81e..cb6018588b 100755
--- a/config/pmd.xml
+++ b/config/pmd.xml
@@ -148,6 +148,13 @@
     <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@Image='XMLLogger']//MethodDeclarator[@Image='isReference'] | //ClassOrInterfaceDeclaration[@Image='DetailAST']//MethodDeclarator[@Image='addPreviousSibling'] | //ClassOrInterfaceDeclaration[@Image='AnnotationLocationCheck']//MethodDeclarator[@Image='checkAnnotations'] | //ClassOrInterfaceDeclaration[@Image='PkgControl']//MethodDeclarator[@Image='checkAccess'] | //ClassOrInterfaceDeclaration[@Image='HandlerFactory']//MethodDeclarator[@Image='getHandler']"/>
     </properties>
   </rule>
+  <rule ref="rulesets/java/design.xml/AccessorClassGeneration">
+    <properties>
+      <!-- We do instantiation by way of private constructors from outside of the constructorâ€™s
+      class in DetectorOptions intentionally as it is a whole idea of Builder pattern. -->
+      <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@Image='DetectorOptions']"/>
+    </properties>
+  </rule>
   <rule ref="rulesets/java/design.xml/PreserveStackTrace">
     <properties>
      <!-- yes we swallow one exception and try to do another attempt, second attempt does not hide cause -->
diff --git a/config/suppressions.xml b/config/suppressions.xml
index fe1321dd2b..3d31d336b9 100755
--- a/config/suppressions.xml
+++ b/config/suppressions.xml
@@ -74,7 +74,7 @@
               files="AbstractClassNameCheckTest.java|AbstractTypeAwareCheckTest.java|AbstractJavadocCheckTest.java|AbstractViolationReporterTest.java"/>
 
     <!-- Tone down the checking for test code -->
-    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="292"/>
+    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="298"/>
     <suppress checks="IllegalCatch" files="[\\/]internal[\\/]\w+Util\.java"/>
     <suppress checks="EmptyBlock" files=".*[\\/]src[\\/]test[\\/]"/>
     <suppress checks="ImportControl" files=".*[\\/]src[\\/](test|it)[\\/]"/>
diff --git a/pom.xml b/pom.xml
index 0358ab169e..155b60ea05 100755
--- a/pom.xml
+++ b/pom.xml
@@ -238,7 +238,7 @@
     <dependency>
       <groupId>com.google.guava</groupId>
       <artifactId>guava</artifactId>
-      <version>18.0</version>
+      <version>19.0</version>
     </dependency>
     <dependency>
       <groupId>org.apache.ant</groupId>
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
index f58dd8587e..6f84cbf5bf 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
@@ -40,12 +40,15 @@ protected String getPath(String fileName) throws IOException {
     public void operatorWrapTest() throws Exception {
 
         final Class<MethodParamPadCheck> clazz = MethodParamPadCheck.class;
-        final String messageKey = "line.previous";
+        final String messageKeyPrevious = "line.previous";
+        final String messageKeyPreceded = "ws.preceded";
 
         final String[] expected = {
-            "83:9: " + getCheckMessage(clazz, messageKey, "("),
-            "128:13: " + getCheckMessage(clazz, messageKey, "("),
-            "130:9: " + getCheckMessage(clazz, messageKey, "("),
+            "83:9: " + getCheckMessage(clazz, messageKeyPrevious, "("),
+            "128:13: " + getCheckMessage(clazz, messageKeyPrevious, "("),
+            "130:9: " + getCheckMessage(clazz, messageKeyPrevious, "("),
+            "353:15: " + getCheckMessage(clazz, messageKeyPreceded, "("),
+            "358:13: " + getCheckMessage(clazz, messageKeyPrevious, "("),
         };
         final Configuration checkConfig = getCheckConfig("MethodParamPad");
         final String filePath = getPath("InputMethodParamPad.java");
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
index b6df4f426c..64e3845320 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
@@ -42,7 +42,7 @@ public void testCorrect() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = getCheckConfig("SummaryJavadocCheck");
+        final Configuration checkConfig = getCheckConfig("SummaryJavadoc");
         final String filePath = getPath("InputCorrectSummaryJavaDocCheck.java");
 
         final Integer[] warnList = getLinesWithWarn(filePath);
@@ -67,7 +67,7 @@ public void testIncorrect() throws Exception {
             "103: " + msgFirstSentence,
         };
 
-        final Configuration checkConfig = getCheckConfig("SummaryJavadocCheck");
+        final Configuration checkConfig = getCheckConfig("SummaryJavadoc");
         final String filePath = getPath("InputIncorrectSummaryJavaDocCheck.java");
 
         final Integer[] warnList = getLinesWithWarn(filePath);
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputMethodParamPad.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputMethodParamPad.java
index 274fef1302..9f904a8992 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputMethodParamPad.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputMethodParamPad.java
@@ -348,4 +348,15 @@ void foo() {
                 <<= 2;
         }
     };
+
+    enum TestEnum {
+        FIRST () // warn
+            {
+            },
+
+        SECOND
+            () // warn
+            {
+            }
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
index 50af412add..3a8e0d1407 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -156,7 +156,8 @@ public static boolean isSuppressed(String sourceName, int line,
             final boolean afterStart =
                 entry.getFirstLine() < line
                     || entry.getFirstLine() == line
-                            && entry.getFirstColumn() <= column;
+                            && (entry.getFirstColumn() <= column
+                            || column == 0);
             final boolean beforeEnd =
                 entry.getLastLine() > line
                     || entry.getLastLine() == line && entry
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
index cb81cfd1b2..a46bfc7354 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java
@@ -354,35 +354,11 @@ private static boolean isSingleLineFor(DetailAST literalFor) {
         }
         else if (literalFor.getParent().getType() == TokenTypes.SLIST
                 && literalFor.getLastChild().getType() != TokenTypes.SLIST) {
-            final DetailAST block = findExpressionBlockInForLoop(literalFor);
-            if (block == null) {
-                result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();
-            }
-            else {
-                result = literalFor.getLineNo() == block.getLineNo();
-            }
+            result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();
         }
         return result;
     }
 
-    /**
-     * Detects and returns expression block in classical and enhanced for loops.
-     *
-     * @param literalFor parent for loop literal
-     * @return expression block
-     */
-    private static DetailAST findExpressionBlockInForLoop(DetailAST literalFor) {
-        final DetailAST forEachClause = literalFor.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);
-        final DetailAST firstToken;
-        if (forEachClause == null) {
-            firstToken = literalFor.findFirstToken(TokenTypes.EXPR);
-        }
-        else {
-            firstToken = forEachClause.findFirstToken(TokenTypes.EXPR);
-        }
-        return firstToken;
-    }
-
     /**
      * Checks if current if statement is single-line statement, e.g.:
      * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 373143110d..778d6eb7b1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -482,7 +482,7 @@ private void doVisitTokenInSameGroup(boolean isStatic,
             final boolean shouldFireError =
                 // current and previous static or current and
                 // previous non-static
-                !(lastImportStatic ^ isStatic)
+                lastImportStatic == isStatic
                 &&
                         // and out of lexicographic order
                         compare(lastImport, name, caseSensitive) > 0
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
index 8ff5397008..55bdd55168 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java
@@ -276,13 +276,13 @@ protected boolean shouldIncreaseIndent() {
     protected final void checkLinesIndent(int startLine, int endLine,
         IndentLevel indentLevel) {
         // check first line
-        checkSingleLine(startLine, indentLevel);
+        checkLineIndent(startLine, indentLevel);
 
         // check following lines
         final IndentLevel offsetLevel =
             new IndentLevel(indentLevel, getBasicOffset());
         for (int i = startLine + 1; i <= endLine; i++) {
-            checkSingleLine(i, offsetLevel);
+            checkLineIndent(i, offsetLevel);
         }
     }
 
@@ -311,7 +311,7 @@ private void checkLinesIndent(LineSet lines,
             getLineStart(indentCheck.getLine(startLine - 1));
 
         if (realStartCol == startCol) {
-            checkSingleLine(startLine, startCol, indentLevel,
+            checkLineIndent(startLine, startCol, indentLevel,
                 firstLineMatches);
         }
 
@@ -335,7 +335,7 @@ private void checkLinesIndent(LineSet lines,
             // checked by a child expression)
 
             if (col != null) {
-                checkSingleLine(i, col, theLevel, false);
+                checkLineIndent(i, col, theLevel, false);
             }
         }
     }
@@ -346,7 +346,7 @@ private void checkLinesIndent(LineSet lines,
      * @param lineNum       the line number to check
      * @param indentLevel   the required indent level
      */
-    private void checkSingleLine(int lineNum, IndentLevel indentLevel) {
+    private void checkLineIndent(int lineNum, IndentLevel indentLevel) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
         if (indentLevel.isGreaterThan(start)) {
@@ -363,7 +363,7 @@ private void checkSingleLine(int lineNum, IndentLevel indentLevel) {
      * @param mustMatch     whether or not the indentation level must match
      */
 
-    private void checkSingleLine(int lineNum, int colNum,
+    private void checkLineIndent(int lineNum, int colNum,
         IndentLevel indentLevel, boolean mustMatch) {
         final String line = indentCheck.getLine(lineNum - 1);
         final int start = getLineStart(line);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
index b5cf4a7534..9e32b9afc9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
+import com.google.common.base.Optional;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
@@ -45,7 +46,7 @@
  * </p>
  * <pre>
  * &lt;module name="ParameterName"&gt;
- *    &lt;property name="format" value="^^[a-z](_?[a-zA-Z0-9]+)*$"/&gt;
+ *    &lt;property name="format" value="^[a-z][_a-zA-Z0-9]+$"/&gt;
  * &lt;/module&gt;
  * </pre>
  * <p>
@@ -117,14 +118,16 @@ protected boolean mustCheckName(DetailAST ast) {
      */
     private static boolean isOverriddenMethod(DetailAST ast) {
         boolean overridden = false;
+
         final DetailAST parent = ast.getParent().getParent();
-        if (parent.getFirstChild().getFirstChild() != null) {
-            final DetailAST annotation = parent.getFirstChild().getFirstChild();
-            if (annotation.getType() == TokenTypes.ANNOTATION) {
-                final DetailAST overrideToken = annotation.findFirstToken(TokenTypes.IDENT);
-                if ("Override".equals(overrideToken.getText())) {
-                    overridden = true;
-                }
+        final Optional<DetailAST> annotation =
+            Optional.fromNullable(parent.getFirstChild().getFirstChild());
+
+        if (annotation.isPresent() && annotation.get().getType() == TokenTypes.ANNOTATION) {
+            final Optional<DetailAST> overrideToken =
+                Optional.fromNullable(annotation.get().findFirstToken(TokenTypes.IDENT));
+            if (overrideToken.isPresent() && "Override".equals(overrideToken.get().getText())) {
+                overridden = true;
             }
         }
         return overridden;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
index 535190b951..2f895f9ce4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -29,31 +29,43 @@
  * Options for a detector.
  * @author Oliver Burn
  */
-final class DetectorOptions {
+public final class DetectorOptions {
 
     /** Flags to compile a regular expression with. See {@link Pattern#flags()}. */
-    private int compileFlags;
+    private final int compileFlags;
     /** Used for reporting violations. */
-    private AbstractViolationReporter reporter;
+    private final AbstractViolationReporter reporter;
     /**
      * Format of the regular expression to check for.
      */
-    private String format;
+    private final String format;
     /** The message to report on detection. If blank, then use the format. */
-    private String message;
+    private final String message;
     /** Minimum number of times regular expression should occur in a file. */
-    private int minimum;
+    private final int minimum;
     /** Maximum number of times regular expression should occur in a file. */
-    private int maximum;
+    private final int maximum;
     /** Whether to ignore case when matching. */
-    private boolean ignoreCase;
+    private final boolean ignoreCase;
     /** Used to determine whether to suppress a detected match. */
-    private MatchSuppressor suppressor;
+    private final MatchSuppressor suppressor;
     /** Pattern created from format. Lazily initialized. */
     private Pattern pattern;
 
-    /** Default constructor. */
-    private DetectorOptions() { }
+    /**
+     * Constructor to create the DetectorOptions object from builder.
+     * @param builder builder.
+     */
+    private DetectorOptions(Builder builder) {
+        compileFlags = builder.compilationFlags;
+        reporter = builder.reporter;
+        format = builder.regexpFormat;
+        message = builder.reportMessage;
+        minimum = builder.min;
+        maximum = builder.max;
+        ignoreCase = builder.ignoreCaseFlag;
+        suppressor = builder.matchSuppressor;
+    }
 
     /**
      * Format of the regular expression.
@@ -120,97 +132,104 @@ public Pattern getPattern() {
         return pattern;
     }
 
-    /**
-     * Creates new Builder instance.
-     * @return Builder instance.
-     */
-    public static Builder newBuilder() {
-        return new DetectorOptions().new Builder();
-    }
-
     /** Class which implements Builder pattern to build DetectorOptions instance. */
-    final class Builder {
+    public static final class Builder {
 
-        /** Default constructor. */
-        private Builder() { }
+        /** Used for reporting violations. */
+        private final AbstractViolationReporter reporter;
+        /** Flags to compile a regular expression with. See {@link Pattern#flags()}. */
+        private int compilationFlags;
+        /**
+         * Format of the regular expression to check for.
+         */
+        private String regexpFormat;
+        /** The message to report on detection. If blank, then use the format. */
+        private String reportMessage;
+        /** Minimum number of times regular expression should occur in a file. */
+        private int min;
+        /** Maximum number of times regular expression should occur in a file. */
+        private int max;
+        /** Whether to ignore case when matching. */
+        private boolean ignoreCaseFlag;
+        /** Used to determine whether to suppress a detected match. */
+        private MatchSuppressor matchSuppressor;
 
         /**
-         * Specifies the format to use when matching lines and returns Builder object.
-         * @param val the format to use when matching lines.
-         * @return Builder object.
+         * Constructor to create the Builder object with the required field.
+         * @param reporter for reporting violations.
          */
-        public Builder format(String val) {
-            format = val;
-            return this;
+        public Builder(AbstractViolationReporter reporter) {
+            this.reporter = reporter;
         }
 
         /**
-         * Specifies message to use when reporting a match and returns Builder object.
-         * @param val message to use when reporting a match.
+         * Specifies the compile flags to compile a regular expression with
+         * and returns Builder object.
+         * @param val the format to use when matching lines.
          * @return Builder object.
          */
-        public Builder message(String val) {
-            message = val;
+        public Builder compileFlags(int val) {
+            compilationFlags = val;
             return this;
         }
 
         /**
-         * Specifies the minimum allowed number of detections and returns Builder object.
-         * @param min the minimum allowed number of detections.
+         * Specifies the format to use when matching lines and returns Builder object.
+         * @param val the format to use when matching lines.
          * @return Builder object.
          */
-        public Builder minimum(int min) {
-            minimum = min;
+        public Builder format(String val) {
+            regexpFormat = val;
             return this;
         }
 
         /**
-         * Specifies the maximum allowed number of detections and returns Builder object.
-         * @param max the maximum allowed number of detections.
+         * Specifies message to use when reporting a match and returns Builder object.
+         * @param val message to use when reporting a match.
          * @return Builder object.
          */
-        public Builder maximum(int max) {
-            maximum = max;
+        public Builder message(String val) {
+            reportMessage = val;
             return this;
         }
 
         /**
-         * Specifies whether to ignore case when matching and returns Builder object.
-         * @param ignore whether to ignore case when matching.
+         * Specifies the minimum allowed number of detections and returns Builder object.
+         * @param val the minimum allowed number of detections.
          * @return Builder object.
          */
-        public Builder ignoreCase(boolean ignore) {
-            ignoreCase = ignore;
+        public Builder minimum(int val) {
+            min = val;
             return this;
         }
 
         /**
-         * Specifies a reporter which is used for reporting violations and returns Builder object.
-         * @param violationReporter violation reporter.
+         * Specifies the maximum allowed number of detections and returns Builder object.
+         * @param val the maximum allowed number of detections.
          * @return Builder object.
          */
-        public Builder reporter(AbstractViolationReporter violationReporter) {
-            reporter = violationReporter;
+        public Builder maximum(int val) {
+            max = val;
             return this;
         }
 
         /**
-         * Specifies flags to compile a regular expression with and returns Builder object.
-         * @param flags compile flags.
+         * Specifies whether to ignore case when matching and returns Builder object.
+         * @param val whether to ignore case when matching.
          * @return Builder object.
          */
-        public Builder compileFlags(int flags) {
-            compileFlags = flags;
+        public Builder ignoreCase(boolean val) {
+            ignoreCaseFlag = val;
             return this;
         }
 
         /**
          * Specifies the suppressor to use and returns Builder object.
-         * @param sup the suppressor to use.
+         * @param val the suppressor to use.
          * @return current instance
          */
-        public Builder suppressor(MatchSuppressor sup) {
-            suppressor = sup;
+        public Builder suppressor(MatchSuppressor val) {
+            matchSuppressor = val;
             return this;
         }
 
@@ -219,9 +238,9 @@ public Builder suppressor(MatchSuppressor sup) {
          * @return DetectorOptions instance.
          */
         public DetectorOptions build() {
-            message = ObjectUtils.defaultIfNull(message, "");
-            suppressor = ObjectUtils.defaultIfNull(suppressor, NeverSuppress.INSTANCE);
-            return DetectorOptions.this;
+            reportMessage = ObjectUtils.defaultIfNull(reportMessage, "");
+            matchSuppressor = ObjectUtils.defaultIfNull(matchSuppressor, NeverSuppress.INSTANCE);
+            return new DetectorOptions(this);
         }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java
index 0b2ea037ee..e8e2c91528 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MatchSuppressor.java
@@ -23,7 +23,7 @@
  * Represents a suppressor for matches.
  * @author oliver
  */
-interface MatchSuppressor {
+public interface MatchSuppressor {
     /**
      * Checks if the specified selection should be suppressed.
      * @param startLineNo the starting line number
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java
index 55531fee24..ce607be917 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java
@@ -50,8 +50,7 @@
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
-        final DetectorOptions options = DetectorOptions.newBuilder()
-            .reporter(this)
+        final DetectorOptions options = new DetectorOptions.Builder(this)
             .compileFlags(Pattern.MULTILINE)
             .format(format)
             .message(message)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
index db936b631a..9300a3c617 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java
@@ -47,9 +47,8 @@
     @Override
     public void beginProcessing(String charset) {
         super.beginProcessing(charset);
-        final DetectorOptions options = DetectorOptions.newBuilder()
+        final DetectorOptions options = new DetectorOptions.Builder(this)
             .compileFlags(0)
-            .reporter(this)
             .format(format)
             .message(message)
             .minimum(minimum)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
index 1bbb269360..4689fd8077 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java
@@ -68,9 +68,8 @@ public void beginTree(DetailAST rootAST) {
             supressor = new CommentSuppressor(getFileContents());
         }
 
-        final DetectorOptions options = DetectorOptions.newBuilder()
+        final DetectorOptions options = new DetectorOptions.Builder(this)
             .compileFlags(0)
-            .reporter(this)
             .suppressor(supressor)
             .format(format)
             .message(message)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
index f18cc22898..fe42cdaf9c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java
@@ -110,6 +110,7 @@
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
+            TokenTypes.ENUM_CONSTANT_DEF,
         };
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
index 972d975418..a332b6421d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java
@@ -98,7 +98,7 @@
  * </pre>
  *
  * <p>In addition, this check can be configured to allow empty methods, types,
- * for, while, do-while loops and constructor bodies.
+ * for, while, do-while loops, lambdas and constructor bodies.
  * For example:
  *
  * <pre>{@code
@@ -111,6 +111,7 @@
  * while (i = 1) {} // empty while loop
  * for (int i = 1; i &gt; 1; i++) {} // empty for loop
  * do {} while (i = 1); // empty do-while loop
+ * Runnable noop = () -> {}; // empty lambda
  * public @interface Beta {} // empty annotation type
  * }</pre>
  *
@@ -130,6 +131,10 @@
  *
  * <pre>   &lt;property name="allowEmptyLoops" value="true" /&gt;</pre>
  *
+ * <p>To configure the check to allow empty lambdas blocks use
+ *
+ * <pre>   &lt;property name="allowEmptyLambdas" value="true" /&gt;</pre>
+ *
  * <p>Also, this check can be configured to ignore the colon in an enhanced for
  * loop. The colon in an enhanced for loop is ignored by default
  *
@@ -163,6 +168,8 @@
     private boolean allowEmptyTypes;
     /** Whether or not empty loops are allowed. */
     private boolean allowEmptyLoops;
+    /** Whether or not empty lambda blocks are allowed. */
+    private boolean allowEmptyLambdas;
     /** Whether or not to ignore a colon in a enhanced for loop. */
     private boolean ignoreEnhancedForColon = true;
 
@@ -327,6 +334,14 @@ public void setAllowEmptyLoops(boolean allow) {
         allowEmptyLoops = allow;
     }
 
+    /**
+     * Sets whether or not empty lambdas bodies are allowed.
+     * @param allow {@code true} to allow empty lambda expressions.
+     */
+    public void setAllowEmptyLambdas(boolean allow) {
+        allowEmptyLambdas = allow;
+    }
+
     @Override
     public void visitToken(DetailAST ast) {
         final int currentType = ast.getType();
@@ -408,7 +423,8 @@ private boolean isNotRelevantSituation(DetailAST ast, int currentType) {
     private boolean isEmptyBlock(DetailAST ast, int parentType) {
         return isEmptyMethodBlock(ast, parentType)
                 || isEmptyCtorBlock(ast, parentType)
-                || isEmptyLoop(ast, parentType);
+                || isEmptyLoop(ast, parentType)
+                || isEmptyLambda(ast, parentType);
     }
 
     /**
@@ -429,8 +445,10 @@ private boolean isEmptyBlock(DetailAST ast, int parentType) {
     private static boolean isEmptyBlock(DetailAST ast, int parentType, int match) {
         final int type = ast.getType();
         if (type == TokenTypes.RCURLY) {
+            final DetailAST parent = ast.getParent();
             final DetailAST grandParent = ast.getParent().getParent();
             return parentType == TokenTypes.SLIST
+                && parent.getFirstChild().getType() == TokenTypes.RCURLY
                 && grandParent.getType() == match;
         }
 
@@ -518,6 +536,18 @@ private boolean isEmptyLoop(DetailAST ast, int parentType) {
                                     parentType, TokenTypes.LITERAL_DO));
     }
 
+    /**
+     * Test if the given {@code DetailAST} is part of an allowed empty
+     * lambda block.
+     * @param ast the {@code DetailAST} to test.
+     * @param parentType the token type of {@code ast}'s parent.
+     * @return {@code true} if {@code ast} makes up part of an
+     *         allowed empty lambda block.
+     */
+    private boolean isEmptyLambda(DetailAST ast, int parentType) {
+        return allowEmptyLambdas && isEmptyBlock(ast, parentType, TokenTypes.LAMBDA);
+    }
+
     /**
      * Test if the given {@code DetailAST} is part of an empty block.
      * An example empty block might look like the following
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
deleted file mode 100755
index e04161ef43..0000000000
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
+++ /dev/null
@@ -1,233 +0,0 @@
-////////////////////////////////////////////////////////////////////////////////
-// checkstyle: Checks Java source code for adherence to a set of rules.
-// Copyright (C) 2001-2015 the original author or authors.
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Lesser General Public
-// License as published by the Free Software Foundation; either
-// version 2.1 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Lesser General Public License for more details.
-//
-// You should have received a copy of the GNU Lesser General Public
-// License along with this library; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-////////////////////////////////////////////////////////////////////////////////
-
-package com.puppycrawl.tools.checkstyle.gui;
-
-import javax.swing.event.EventListenerList;
-import javax.swing.event.TreeModelEvent;
-import javax.swing.event.TreeModelListener;
-
-/**
- * An abstract implementation of the TreeTableModel interface, handling
- * the list of listeners.
- *
- * <a href=
- * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
- * Original&nbsp;Source&nbsp;Location</a>
- *
- * @author Philip Milne
- */
-public abstract class AbstractTreeTableModel implements TreeTableModel {
-
-    /**
-     * The root node of the tree table model.
-     */
-    private final Object root;
-
-    /**
-     * A list of event listeners for the tree model.
-     */
-    private final EventListenerList listenerList = new EventListenerList();
-
-    /**
-     * Initializes the root node for the tree table model.
-     *
-     * @param root Root node.
-     */
-    AbstractTreeTableModel(Object root) {
-        this.root = root;
-    }
-
-    //
-    // Default implementations for methods in the TreeModel interface.
-    //
-
-    @Override
-    public Object getRoot() {
-        return root;
-    }
-
-    @Override
-    public boolean isLeaf(Object node) {
-        return getChildCount(node) == 0;
-    }
-
-    // This is not called in the JTree's default mode: use a naive implementation.
-    @Override
-    public int getIndexOfChild(Object parent, Object child) {
-        for (int i = 0; i < getChildCount(parent); i++) {
-            if (getChild(parent, i).equals(child)) {
-                return i;
-            }
-        }
-        return -1;
-    }
-
-    @Override
-    public void addTreeModelListener(TreeModelListener listener) {
-        listenerList.add(TreeModelListener.class, listener);
-    }
-
-    @Override
-    public void removeTreeModelListener(TreeModelListener listener) {
-        listenerList.remove(TreeModelListener.class, listener);
-    }
-
-    /**
-     * Notifies all listeners that have registered interest for
-     * 'tree nodes changed' event.  The event instance
-     * is lazily created using the parameters passed into
-     * the fire method.
-     * @param source The Object responsible for generating the event.
-     * @param path An array of Object identifying the path to the parent of the modified items.
-     * @param childIndices An array of int that specifies the index values of the removed items.
-     * @param children An array of Object containing the inserted, removed, or changed objects.
-     * @see EventListenerList
-     */
-    protected void fireTreeNodesChanged(Object source, Object[] path,
-            int[] childIndices,
-            Object... children) {
-        // Guaranteed to return a non-null array
-        final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent event = null;
-        // Process the listeners last to first, notifying
-        // those that are interested in this event
-        for (int i = listeners.length - 2; i >= 0; i -= 2) {
-            if (listeners[i] == TreeModelListener.class) {
-                // Lazily create the event:
-                if (event == null) {
-                    event = new TreeModelEvent(source, path,
-                            childIndices, children);
-                }
-                ((TreeModelListener) listeners[i + 1]).treeNodesChanged(event);
-            }
-        }
-    }
-
-    /**
-     * Notify all listeners that have registered interest for
-     * 'tree nodes inserted' event.  The event instance
-     * is lazily created using the parameters passed into
-     * the fire method.
-     * @param source The Object responsible for generating the event.
-     * @param path An array of Object identifying the path to the parent of the modified items.
-     * @param childIndices An array of int that specifies the index values of the removed items.
-     * @param children An array of Object containing the inserted, removed, or changed objects.
-     * @see EventListenerList
-     */
-    protected void fireTreeNodesInserted(Object source, Object[] path,
-            int[] childIndices,
-            Object... children) {
-        // Guaranteed to return a non-null array
-        final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent event = null;
-        // Process the listeners last to first, notifying
-        // those that are interested in this event
-        for (int i = listeners.length - 2; i >= 0; i -= 2) {
-            if (listeners[i] == TreeModelListener.class) {
-                // Lazily create the event:
-                if (event == null) {
-                    event = new TreeModelEvent(source, path,
-                            childIndices, children);
-                }
-                ((TreeModelListener) listeners[i + 1]).treeNodesInserted(event);
-            }
-        }
-    }
-
-    /**
-     * Notify all listeners that have registered interest for
-     * 'tree nodes removed' event.  The event instance
-     * is lazily created using the parameters passed into
-     * the fire method.
-     * @param source The Object responsible for generating the event.
-     * @param path An array of Object identifying the path to the parent of the modified items.
-     * @param childIndices An array of int that specifies the index values of the removed items.
-     * @param children An array of Object containing the inserted, removed, or changed objects.
-     * @see EventListenerList
-     */
-    protected void fireTreeNodesRemoved(Object source, Object[] path,
-            int[] childIndices,
-            Object... children) {
-        // Guaranteed to return a non-null array
-        final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent event = null;
-        // Process the listeners last to first, notifying
-        // those that are interested in this event
-        for (int i = listeners.length - 2; i >= 0; i -= 2) {
-            if (listeners[i] == TreeModelListener.class) {
-                // Lazily create the event:
-                if (event == null) {
-                    event = new TreeModelEvent(source, path,
-                            childIndices, children);
-                }
-                ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(event);
-            }
-        }
-    }
-
-    /**
-     * Notify all listeners that have registered interest for
-     * 'tree structure changed' event.  The event instance
-     * is lazily created using the parameters passed into
-     * the fire method.
-     * @param source The Object responsible for generating the event.
-     * @param path An array of Object identifying the path to the parent of the modified items.
-     * @param childIndices An array of int that specifies the index values of the removed items.
-     * @param children An array of Object containing the inserted, removed, or changed objects.
-     * @see EventListenerList
-     */
-    void fireTreeStructureChanged(Object source, Object[] path,
-            int[] childIndices,
-            Object... children) {
-        // Guaranteed to return a non-null array
-        final Object[] listeners = listenerList.getListenerList();
-        TreeModelEvent event = null;
-        // Process the listeners last to first, notifying
-        // those that are interested in this event
-        for (int i = listeners.length - 2; i >= 0; i -= 2) {
-            if (listeners[i] == TreeModelListener.class) {
-                // Lazily create the event:
-                if (event == null) {
-                    event = new TreeModelEvent(source, path,
-                            childIndices, children);
-                }
-                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(event);
-            }
-        }
-    }
-
-    //
-    // Default implementations for methods in the TreeTableModel interface.
-    //
-
-    @Override
-    public Class<?> getColumnClass(int column) {
-        return Object.class;
-    }
-
-    /** By default, make the column with the Tree in it the only editable one.
-     *  Making this column editable causes the JTable to forward mouse
-     *  and keyboard events in the Tree column to the underlying JTree.
-     */
-    @Override
-    public boolean isCellEditable(int column) {
-        return getColumnClass(column) == TreeTableModel.class;
-    }
-}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 5808fdc0a4..92f288c961 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -65,7 +65,7 @@
      * Creates JTreeTable base on TreeTableModel.
      * @param treeTableModel Tree table model
      */
-    public JTreeTable(TreeTableModel treeTableModel) {
+    public JTreeTable(ParseTreeTableModel treeTableModel) {
 
         // Create the tree. It will be used as a renderer and editor.
         tree = new TreeTableCellRenderer(this, treeTableModel);
@@ -80,8 +80,8 @@ public JTreeTable(TreeTableModel treeTableModel) {
         setSelectionModel(selectionWrapper.getListSelectionModel());
 
         // Install the tree editor renderer and editor.
-        setDefaultRenderer(TreeTableModel.class, tree);
-        setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
+        setDefaultRenderer(ParseTreeTableModel.class, tree);
+        setDefaultEditor(ParseTreeTableModel.class, new TreeTableCellEditor());
 
         // No grid.
         setShowGrid(false);
@@ -147,7 +147,7 @@ public void updateUI() {
     public int getEditingRow() {
         final Class<?> editingClass = getColumnClass(editingColumn);
 
-        if (editingClass == TreeTableModel.class) {
+        if (editingClass == ParseTreeTableModel.class) {
             return -1;
         }
         else {
@@ -230,7 +230,7 @@ public boolean isCellEditable(EventObject event) {
             if (event instanceof MouseEvent) {
                 for (int counter = getColumnCount() - 1; counter >= 0;
                      counter--) {
-                    if (getColumnClass(counter) == TreeTableModel.class) {
+                    if (getColumnClass(counter) == ParseTreeTableModel.class) {
                         final MouseEvent mouseEvent = (MouseEvent) event;
                         final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),
                                 mouseEvent.getWhen(), mouseEvent.getModifiers(),
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
index df6fd9cf47..ce414c64f3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java
@@ -58,7 +58,7 @@
     private static final long serialVersionUID = -4243405131202059043L;
 
     /** Parse tree model. */
-    private final transient ParseTreeModel parseTreeModel;
+    private final transient ParseTreeTableModel parseTreeTableModel;
     /** JTextArea component. */
     private final JTextArea textArea;
     /** Last directory. */
@@ -76,8 +76,8 @@
     public ParseTreeInfoPanel() {
         setLayout(new BorderLayout());
 
-        parseTreeModel = new ParseTreeModel(null);
-        final JTreeTable treeTable = new JTreeTable(parseTreeModel);
+        parseTreeTableModel = new ParseTreeTableModel(null);
+        final JTreeTable treeTable = new JTreeTable(parseTreeTableModel);
         final JScrollPane scrollPane = new JScrollPane(treeTable);
         add(scrollPane, BorderLayout.PAGE_START);
 
@@ -108,7 +108,7 @@ public ParseTreeInfoPanel() {
      * @param parseTree DetailAST tree.
      */
     public void openAst(DetailAST parseTree) {
-        parseTreeModel.setParseTree(parseTree);
+        parseTreeTableModel.setParseTree(parseTree);
         reloadAction.setEnabled(true);
 
         // clear for each new file
@@ -138,7 +138,7 @@ public void openFile(File file, final Component parent) {
                 final FileText text = new FileText(file.getAbsoluteFile(),
                                                    getEncoding());
                 final DetailAST parseTree = parseFile(text);
-                parseTreeModel.setParseTree(parseTree);
+                parseTreeTableModel.setParseTree(parseTree);
                 currentFile = file;
                 lastDirectory = file.getParentFile();
                 reloadAction.setEnabled(true);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
similarity index 54%
rename from src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java
rename to src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
index 53406dba61..523b1a2526 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
@@ -19,6 +19,10 @@
 
 package com.puppycrawl.tools.checkstyle.gui;
 
+import javax.swing.event.EventListenerList;
+import javax.swing.event.TreeModelEvent;
+import javax.swing.event.TreeModelListener;
+import javax.swing.tree.TreeModel;
 import javax.swing.tree.TreePath;
 
 import antlr.ASTFactory;
@@ -33,17 +37,28 @@
  *
  * @author Lars KÃ¼hne
  */
-public class ParseTreeModel extends AbstractTreeTableModel {
+public class ParseTreeTableModel implements TreeModel {
+
     /** Column names. */
     private static final String[] COLUMN_NAMES = {
         "Tree", "Type", "Line", "Column", "Text",
     };
 
+    /**
+     * The root node of the tree table model.
+     */
+    private final Object root;
+
+    /**
+     * A list of event listeners for the tree model.
+     */
+    private final EventListenerList listenerList = new EventListenerList();
+
     /**
      * @param parseTree DetailAST parse tree.
      */
-    public ParseTreeModel(DetailAST parseTree) {
-        super(createArtificialTreeRoot());
+    public ParseTreeTableModel(DetailAST parseTree) {
+        root = createArtificialTreeRoot();
         setParseTree(parseTree);
     }
 
@@ -62,31 +77,38 @@ private static DetailAST createArtificialTreeRoot() {
      * @param parseTree DetailAST parse tree.
      */
     final void setParseTree(DetailAST parseTree) {
-        final DetailAST root = (DetailAST) getRoot();
-        root.setFirstChild(parseTree);
+        ((AST) root).setFirstChild(parseTree);
         final Object[] path = {root};
         // no need to setup remaining info, as the call results in a
         // table structure changed event anyway - we just pass nulls
         fireTreeStructureChanged(this, path, null, (Object[]) null);
     }
 
-    @Override
+    /**
+     * @return the number of available column.
+     */
     public int getColumnCount() {
         return COLUMN_NAMES.length;
     }
 
-    @Override
+    /**
+     * @param column the column number
+     * @return the name for column number {@code column}.
+     */
     public String getColumnName(int column) {
         return COLUMN_NAMES[column];
     }
 
-    @Override
+    /**
+     * @param column the column number
+     * @return the type for column number {@code column}.
+     */
     public Class<?> getColumnClass(int column) {
         Class<?> columnClass;
 
         switch (column) {
             case 0:
-                columnClass = TreeTableModel.class;
+                columnClass = ParseTreeTableModel.class;
                 break;
             case 1:
                 columnClass = String.class;
@@ -106,7 +128,12 @@ public String getColumnName(int column) {
         return columnClass;
     }
 
-    @Override
+    /**
+     * @param node the node
+     * @param column the column number
+     * @return the value to be displayed for node {@code node},
+     *     at column number {@code column}.
+     */
     public Object getValueAt(Object node, int column) {
         final DetailAST ast = (DetailAST) node;
         Object value;
@@ -152,4 +179,77 @@ public int getChildCount(Object parent) {
     public void valueForPathChanged(TreePath path, Object newValue) {
         //No Code, as tree is read-only
     }
+
+    @Override
+    public Object getRoot() {
+        return root;
+    }
+
+    @Override
+    public boolean isLeaf(Object node) {
+        return getChildCount(node) == 0;
+    }
+
+    // This is not called in the JTree's default mode: use a naive implementation.
+    @Override
+    public int getIndexOfChild(Object parent, Object child) {
+        for (int i = 0; i < getChildCount(parent); i++) {
+            if (getChild(parent, i).equals(child)) {
+                return i;
+            }
+        }
+        return -1;
+    }
+
+    @Override
+    public void addTreeModelListener(TreeModelListener listener) {
+        listenerList.add(TreeModelListener.class, listener);
+    }
+
+    @Override
+    public void removeTreeModelListener(TreeModelListener listener) {
+        listenerList.remove(TreeModelListener.class, listener);
+    }
+
+    /**
+     * Notify all listeners that have registered interest for
+     * 'tree structure changed' event.  The event instance
+     * is lazily created using the parameters passed into
+     * the fire method.
+     * @param source The Object responsible for generating the event.
+     * @param path An array of Object identifying the path to the parent of the modified items.
+     * @param childIndices An array of int that specifies the index values of the removed items.
+     * @param children An array of Object containing the inserted, removed, or changed objects.
+     * @see EventListenerList
+     */
+    void fireTreeStructureChanged(Object source, Object[] path,
+                                  int[] childIndices,
+                                  Object... children) {
+        // Guaranteed to return a non-null array
+        final Object[] listeners = listenerList.getListenerList();
+        TreeModelEvent event = null;
+        // Process the listeners last to first, notifying
+        // those that are interested in this event
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == TreeModelListener.class) {
+                // Lazily create the event:
+                if (event == null) {
+                    event = new TreeModelEvent(source, path,
+                        childIndices, children);
+                }
+                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(event);
+            }
+        }
+    }
+
+    /**
+     * Indicates whether the the value for node {@code node},
+     * at column number {@code column} is editable.
+     *
+     * @param column the column number
+     * @return true if editable
+     */
+    public boolean isCellEditable(int column) {
+        return getColumnClass(column) == ParseTreeTableModel.class;
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java
deleted file mode 100755
index 7a9d5da952..0000000000
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java
+++ /dev/null
@@ -1,73 +0,0 @@
-////////////////////////////////////////////////////////////////////////////////
-// checkstyle: Checks Java source code for adherence to a set of rules.
-// Copyright (C) 2001-2015 the original author or authors.
-//
-// This library is free software; you can redistribute it and/or
-// modify it under the terms of the GNU Lesser General Public
-// License as published by the Free Software Foundation; either
-// version 2.1 of the License, or (at your option) any later version.
-//
-// This library is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-// Lesser General Public License for more details.
-//
-// You should have received a copy of the GNU Lesser General Public
-// License along with this library; if not, write to the Free Software
-// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-////////////////////////////////////////////////////////////////////////////////
-
-package com.puppycrawl.tools.checkstyle.gui;
-
-import javax.swing.tree.TreeModel;
-
-/**
- * TreeTableModel is the model used by a JTreeTable. It extends TreeModel
- * to add methods for getting information about the set of columns each
- * node in the TreeTableModel may have. Each column, like a column in
- * a TableModel, has a name and a type associated with it. Each node in
- * the TreeTableModel can return a value for each of the columns and
- * set that value if isCellEditable() returns true.
- *
- * <a href=
- * "http://docs.oracle.com/cd/E16162_01/apirefs.1112/e17493/oracle/ide/controls/TreeTableModel.html">
- * Original&nbsp;Source&nbsp;Location</a>
- *
- * @author Philip Milne
- * @author Scott Violet
- */
-public interface TreeTableModel extends TreeModel {
-    /**
-     * @return the number of available column.
-     */
-    int getColumnCount();
-
-    /**
-     * @param column the column number
-     * @return the name for column number {@code column}.
-     */
-    String getColumnName(int column);
-
-    /**
-     * @param column the column number
-     * @return the type for column number {@code column}.
-     */
-    Class<?> getColumnClass(int column);
-
-    /**
-     * @param node the node
-     * @param column the column number
-     * @return the value to be displayed for node {@code node},
-     *     at column number {@code column}.
-     */
-    Object getValueAt(Object node, int column);
-
-    /**
-     * Indicates whether the the value for node {@code node},
-     * at column number {@code column} is editable.
-     *
-     * @param column the column number
-     * @return true if editable
-     */
-    boolean isCellEditable(int column);
-}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
index dfcd6336b3..8d34dc3061 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
@@ -47,13 +47,13 @@
     /** JTree component. */
     private final JTree tree;
     /** Tree table model. */
-    private final transient TreeTableModel treeTableModel;
+    private final transient ParseTreeTableModel treeTableModel;
 
     /**
      * @param treeTableModel Tree table model.
      * @param tree JTree component.
      */
-    public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree) {
+    public TreeTableModelAdapter(ParseTreeTableModel treeTableModel, JTree tree) {
         this.tree = tree;
         this.treeTableModel = treeTableModel;
 
diff --git a/src/main/resources/google_checks.xml b/src/main/resources/google_checks.xml
index 4ddc8fc4c1..548d03826d 100755
--- a/src/main/resources/google_checks.xml
+++ b/src/main/resources/google_checks.xml
@@ -4,21 +4,15 @@
           "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
 
 <!--
-
-    Checkstyle configuration that checks the Google coding conventions from:
-
-    -  Google Java Style
-       https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html
+    Checkstyle configuration that checks the Google coding conventions from Google Java Style
+    that can be found at https://google.github.io/styleguide/javaguide.html.
 
     Checkstyle is very configurable. Be sure to read the documentation at
     http://checkstyle.sf.net (or in your downloaded distribution).
 
-    Most Checks are configurable, be sure to consult the documentation.
-
     To completely disable a check, just comment it out or delete it from the file.
 
     Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
-
  -->
 
 <module name = "Checker">
@@ -178,7 +172,7 @@
         </module>
         <module name="NonEmptyAtclauseDescription"/>
         <module name="JavadocTagContinuationIndentation"/>
-        <module name="SummaryJavadocCheck">
+        <module name="SummaryJavadoc">
             <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
         </module>
         <module name="JavadocParagraph"/>
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 2a400b49c1..a6ff663e4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -471,7 +471,7 @@ public void testCreateListenerIllegalStateException() throws Exception {
         method.setAccessible(true);
         try {
             method.invoke(null, "myformat", null);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause() instanceof IllegalStateException);
@@ -487,7 +487,7 @@ public void testCreateListenerWithLocationIllegalStateException() throws Excepti
         final String outDir = "myfolder123";
         try {
             method.invoke(null, "myformat", outDir);
-            fail();
+            fail("InvocationTargetException  is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause() instanceof IllegalStateException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
index dcf8652801..506d36002a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -129,7 +129,7 @@ public void testPackagesWithSaxException() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof SAXException);
@@ -154,7 +154,7 @@ public void testPackagesWithIoException() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof IOException);
@@ -171,7 +171,7 @@ public void testPackagesWithIoExceptionGetResources() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof IOException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
index 73f9645164..f4bb66c2bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -107,7 +107,7 @@ public void testExceptionNoSuchAlgorithmException() throws Exception {
         method.setAccessible(true);
         try {
             method.invoke(cache, config);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause().getCause() instanceof NoSuchAlgorithmException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 5664aff996..0b69994b4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -91,7 +91,7 @@ public void testAcceptableTokens()
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
         try {
             verify(checkConfig, getPath("InputMain.java"), expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             final String errorMsg = ex.getMessage();
@@ -118,7 +118,7 @@ public void testWithCheckNotHavingTreeWalkerAsParent() throws Exception {
 
         try {
             verify(checkConfig, temporaryFolder.newFile().getPath(), expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException exception) {
             assertTrue(exception.getMessage().contains("TreeWalker is not allowed as a parent of"));
@@ -318,7 +318,7 @@ public void testRequiredTokenIsNotInDefaultTokens() throws Exception {
 
         try {
             verify(checkConfig, pathToEmptyFile, expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getMessage().startsWith("cannot initialize module"
@@ -340,7 +340,7 @@ public void testRequiredTokenIsEmptyIntArray() throws Exception {
         }
         catch (CheckstyleException ignored) {
             // unexpected
-            fail();
+            fail("CheckstyleException is NOT expected");
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
index 56d19a61c1..ffdb8127e9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
@@ -74,7 +74,7 @@ public void testContextualizeInvocationTargetException() {
         context.add("exceptionalMethod", 123.0f);
         try {
             testBean.contextualize(context);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof InvocationTargetException);
@@ -89,7 +89,7 @@ public void testContextualizeConversionException() {
         context.add("val", "some string");
         try {
             testBean.contextualize(context);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof ConversionException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
index 0d64a90151..e48c621026 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
@@ -35,7 +35,7 @@ public void testUnsupportedCharset() throws IOException {
         final String charsetName = "STRANGE_CHARSET";
         try {
             new FileText(new File("any name"), charsetName);
-            fail();
+            fail("UnsupportedEncodingException is expected");
         }
         catch (UnsupportedEncodingException ex) {
             assertEquals("Unsupported charset: " + charsetName, ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
index 7ab2097c66..ae8662b255 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
@@ -61,7 +61,7 @@ public void testMisc() throws ClassNotFoundException {
 
         try {
             classResolver.resolve("ChoiceFormat", "");
-            fail();
+            fail("ClassNotFoundException is expected");
         }
         catch (ClassNotFoundException ex) {
             // expected
@@ -77,7 +77,7 @@ public void testMisc() throws ClassNotFoundException {
         javaUtilClassResolver.resolve("List", "");
         try {
             javaUtilClassResolver.resolve("two.nil.england", "");
-            fail();
+            fail("ClassNotFoundException is expected");
         }
         catch (ClassNotFoundException ex) {
             // expected
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
index 9ebe768349..8d8677d935 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
@@ -91,7 +91,7 @@ public void testCallVisitToken() throws Exception {
         final TrailingCommentCheck check = new TrailingCommentCheck();
         try {
             check.visitToken(new DetailAST());
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals("visitToken() shouldn't be called.", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
index 8cfabf4b60..4e3ea92c79 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -108,7 +108,7 @@ public void testIllegalStateException() throws Exception {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.CTOR_DEF, "ctor"));
         try {
             check.visitToken(ast);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals(ast.toString(), ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
index 75ffd85d03..c7712d1607 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
@@ -265,13 +265,11 @@ public void testGetOption() throws Exception {
         final AnnotationUseStyleCheck check = new AnnotationUseStyleCheck();
         try {
             check.setElementStyle("SHOULD_PRODUCE_ERROR");
+            Assert.fail("ConversionException is expected");
         }
         catch (ConversionException ex) {
             assertTrue(ex.getMessage().startsWith("unable to parse"));
-            return;
         }
-
-        Assert.fail();
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java
index 91dd8a642c..b7fdaea51f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java
@@ -85,6 +85,7 @@ public void testSingleLineStatements() throws Exception {
             "91: " + getCheckMessage(MSG_KEY_NEED_BRACES, "if"),
             "95: " + getCheckMessage(MSG_KEY_NEED_BRACES, "else"),
             "107: " + getCheckMessage(MSG_KEY_NEED_BRACES, "if"),
+            "114: " + getCheckMessage(MSG_KEY_NEED_BRACES, "for"),
         };
         verify(checkConfig, getPath("InputBracesSingleLineStatements.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
index c98584f1fb..0d7294d7dc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
@@ -178,7 +178,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(lambdaAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
index 87e4192271..08d59ebe39 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
@@ -183,7 +183,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(lambdaAst);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
index c0395bcfb8..180e11ae1d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
@@ -210,7 +210,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
index 80fa0d0763..c75c3d6eb5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
@@ -98,7 +98,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -106,7 +106,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
index ad318661e1..d0928276db 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
@@ -71,7 +71,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -79,7 +79,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
index e6df187462..548c59afcc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
@@ -124,7 +124,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -132,7 +132,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
index dffba0c279..4c8a382665 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
@@ -99,7 +99,7 @@ public void testWrongTokenType() {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.INTERFACE_DEF, "interface"));
         try {
             obj.visitToken(ast);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             //expected
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
index 953a205316..94b61ea1d8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
@@ -90,7 +90,7 @@ public void testWrongTokenType() {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.CLASS_DEF, "class"));
         try {
             obj.visitToken(ast);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals(ast.toString(), ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index d00ad048a4..4b662fcaa1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -77,7 +77,7 @@ public void testNoHeader() throws Exception {
         }
         catch (CheckstyleException ex) {
             // Exception is not expected
-            fail();
+            fail("Exception is not expected");
         }
     }
 
@@ -87,7 +87,7 @@ public void testNonExistingHeaderFile() throws Exception {
         checkConfig.addAttribute("headerFile", getPath("nonExisting.file"));
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getMessage()
@@ -105,7 +105,7 @@ public void testInvalidCharset() throws Exception {
         checkConfig.addAttribute("charset", "XSO-8859-1");
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertEquals("cannot initialize module"
@@ -160,7 +160,7 @@ public void testSetHeaderTwice() {
         check.setHeader("Header");
         try {
             check.setHeader("Header2");
-            fail();
+            fail("ConversionException is expected");
         }
         catch (ConversionException ex) {
             assertEquals("header has already been set - "
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
index b7950ede08..9f7d5b7d37 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
@@ -356,7 +356,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromName(null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the name is null", ex.getMessage());
@@ -364,7 +364,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromName("myname");
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the name [myname] is not a valid Javadoc tag name", ex.getMessage());
@@ -372,7 +372,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromText(null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the text is null", ex.getMessage());
@@ -380,7 +380,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromText("myname");
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the text [myname] is not a valid Javadoc tag text", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
index ea111de473..a1aaa87fb8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
@@ -65,7 +65,7 @@ public void testIllegalRegexp()
         checkConfig.addAttribute("format", "\\");
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertEquals("cannot initialize module"
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
index 1c35fd32e9..28b363d87a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java
@@ -137,4 +137,14 @@ public void testSkipMethodsWithOverrideAnnotationFalse()
             };
         verify(checkConfig, getPath("InputOverrideAnnotation.java"), expected);
     }
+
+    @Test
+    public void testIsOverriddenNoNullPointerException()
+        throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(ParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^[a-z][a-zA-Z0-9]*$");
+        checkConfig.addAttribute("ignoreOverridden", "true");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputOverrideAnnotationNoNPE.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
index 27a1882362..f9cd099912 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
@@ -114,7 +114,7 @@ public void testExtensions() throws Exception {
         assertEquals("extension should be the same", ".java", check.getFileExtensions()[0]);
         try {
             check.setFileExtensions((String[]) null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("Extensions array can not be null", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
index 779b797795..2ad2e49871 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java
@@ -76,6 +76,8 @@ public void testDefault() throws Exception {
             "58:13: " + getCheckMessage(LINE_PREVIOUS, "("),
             "61:36: " + getCheckMessage(WS_PRECEDED, "("),
             "63:13: " + getCheckMessage(LINE_PREVIOUS, "("),
+            "74:15: " + getCheckMessage(WS_PRECEDED, "("),
+            "79:13: " + getCheckMessage(LINE_PREVIOUS, "("),
         };
         verify(checkConfig, getPath("InputMethodParamPad.java"), expected);
     }
@@ -92,6 +94,7 @@ public void testAllowLineBreaks() throws Exception {
             "50:21: " + getCheckMessage(WS_PRECEDED, "("),
             "56:18: " + getCheckMessage(WS_PRECEDED, "("),
             "61:36: " + getCheckMessage(WS_PRECEDED, "("),
+            "74:15: " + getCheckMessage(WS_PRECEDED, "("),
         };
         verify(checkConfig, getPath("InputMethodParamPad.java"), expected);
     }
@@ -121,6 +124,7 @@ public void testSpaceOption() throws Exception {
             "66:25: " + getCheckMessage(WS_NOT_PRECEDED, "("),
             "69:66: " + getCheckMessage(WS_NOT_PRECEDED, "("),
             "70:57: " + getCheckMessage(WS_NOT_PRECEDED, "("),
+            "79:13: " + getCheckMessage(LINE_PREVIOUS, "("),
         };
         verify(checkConfig, getPath("InputMethodParamPad.java"), expected);
     }
@@ -143,6 +147,7 @@ public void testGetAcceptableTokens() {
             TokenTypes.METHOD_CALL,
             TokenTypes.METHOD_DEF,
             TokenTypes.SUPER_CTOR_CALL,
+            TokenTypes.ENUM_CONSTANT_DEF,
         };
         assertArrayEquals(expected, actual);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
index 89d57b7c62..ead3993d2e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
@@ -49,6 +49,12 @@ protected String getPath(String filename) throws IOException {
                 + "whitespace" + File.separator + filename);
     }
 
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "whitespace" + File.separator + filename);
+    }
+
     @Test
     public void testGetRequiredTokens() {
         final WhitespaceAroundCheck checkObj = new WhitespaceAroundCheck();
@@ -330,4 +336,31 @@ public void testAllowEmptyTypesIsSetToTrueAndNonEmptyClasses() throws Exception
         verify(checkConfig, getPath("InputAllowEmptyTypesAndNonEmptyClasses.java"),
             expected);
     }
+
+    @Test
+    public void testNotAllowEmptyLambdaExpressionsByDefault() throws Exception {
+        final String[] expected = {
+            "7:28: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "7:28: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "12:29: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "12:30: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "13:29: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "13:43: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+        };
+        verify(checkConfig, getNonCompilablePath("InputAllowEmptyLambdaExpressions.java"),
+            expected);
+    }
+
+    @Test
+    public void testAllowEmptyLambdaExpressionsWithAllowEmptyLambdaParameter() throws Exception {
+        checkConfig.addAttribute("allowEmptyLambdas", "true");
+        final String[] expected = {
+            "12:29: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "12:30: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "13:29: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "13:43: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+        };
+        verify(checkConfig, getNonCompilablePath("InputAllowEmptyLambdaExpressions.java"),
+                expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
index 1a2ed44f12..049506600e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
@@ -121,7 +121,7 @@ public void testEmptyJavadoc() throws Exception {
 
         try {
             TokenTypesDoclet.start(rootDoc);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             // Token types must have first sentence of Javadoc summary
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
index 91b4bcadd3..04357eff1e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
@@ -35,7 +35,9 @@
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.SuppressWarningsHolder;
+import com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;
+import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck;
@@ -43,6 +45,9 @@
 public class SuppressWarningsFilterTest
     extends BaseCheckTestSupport {
     private static final String[] ALL_MESSAGES = {
+        "16: Missing a Javadoc comment.",
+        "17: Missing a Javadoc comment.",
+        "19: Missing a Javadoc comment.",
         "22:45: Name 'I' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
         "24:17: Name 'J' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
         "25:17: Name 'K' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
@@ -53,6 +58,15 @@
         "39:17: More than 7 parameters (found 8).",
         "45:9: Catching 'Exception' is not allowed.",
         "56:9: Catching 'Exception' is not allowed.",
+        "61: Missing a Javadoc comment.",
+        "71: Uncommented main method found.",
+        "76: Missing a Javadoc comment.",
+        "77: Uncommented main method found.",
+        "83: Missing a Javadoc comment.",
+        "84: Uncommented main method found.",
+        "90: Missing a Javadoc comment.",
+        "91: Uncommented main method found.",
+        "97: Missing a Javadoc comment.",
     };
 
     @Override
@@ -77,6 +91,11 @@ public void testDefault() throws Exception {
             "33:30: Name 'm' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.",
             "39:17: More than 7 parameters (found 8).",
             "56:9: Catching 'Exception' is not allowed.",
+            "71: Uncommented main method found.",
+            "77: Uncommented main method found.",
+            "84: Uncommented main method found.",
+            "91: Uncommented main method found.",
+            "97: Missing a Javadoc comment.",
         };
         verifySuppressed(filterConfig, suppressed);
     }
@@ -109,6 +128,8 @@ public Checker createChecker(Configuration checkConfig)
         checksConfig.addChild(createCheckConfig(ConstantNameCheck.class));
         checksConfig.addChild(createCheckConfig(ParameterNumberCheck.class));
         checksConfig.addChild(createCheckConfig(IllegalCatchCheck.class));
+        checksConfig.addChild(createCheckConfig(UncommentedMainCheck.class));
+        checksConfig.addChild(createCheckConfig(JavadocTypeCheck.class));
         checkerConfig.addChild(checksConfig);
         if (checkConfig != null) {
             checkerConfig.addChild(checkConfig);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java
index 980c601e04..e966821e3f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java
@@ -28,13 +28,11 @@
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
-import org.xml.sax.SAXException;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.reflect.ClassPath;
@@ -46,15 +44,15 @@
     private CheckUtil() {
     }
 
-    public static Set<String> getConfigCheckStyleChecks() throws Exception {
+    public static Set<String> getConfigCheckStyleChecks() {
         return getCheckStyleChecksReferencedInConfig("config/checkstyle_checks.xml");
     }
 
-    public static Set<String> getConfigSunStyleChecks() throws Exception {
+    public static Set<String> getConfigSunStyleChecks() {
         return getCheckStyleChecksReferencedInConfig("src/main/resources/sun_checks.xml");
     }
 
-    public static Set<String> getConfigGoogleStyleChecks() throws Exception {
+    public static Set<String> getConfigGoogleStyleChecks() {
         return getCheckStyleChecksReferencedInConfig("src/main/resources/google_checks.xml");
     }
 
@@ -64,49 +62,49 @@ private CheckUtil() {
      * @param configFilePath
      *            file path of checkstyle_checks.xml.
      * @return names of checkstyle's checks which are referenced in checkstyle_checks.xml.
-     * @throws ParserConfigurationException if a DocumentBuilder cannot be created which satisfies
-     *              the configuration requested.
-     * @throws IOException if any IO errors occur.
-     * @throws SAXException if any parse errors occur.
      */
-    private static Set<String> getCheckStyleChecksReferencedInConfig(
-            String configFilePath) throws Exception {
-        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-
-        // Validations of XML file make parsing too slow, that is why we disable all
-        // validations.
-        factory.setNamespaceAware(false);
-        factory.setValidating(false);
-        factory.setFeature("http://xml.org/sax/features/namespaces", false);
-        factory.setFeature("http://xml.org/sax/features/validation", false);
-        factory.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar",
-                false);
-        factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",
-                false);
-
-        final DocumentBuilder builder = factory.newDocumentBuilder();
-        final Document document = builder.parse(new File(configFilePath));
-
-        // optional, but recommended
-        // FYI:
-        // http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-
-        // does-it-work
-        document.getDocumentElement().normalize();
-
-        final NodeList nodeList = document.getElementsByTagName("module");
-
-        final Set<String> checksReferencedInCheckstyleChecksXml = new HashSet<>();
-        for (int i = 0; i < nodeList.getLength(); i++) {
-            final Node currentNode = nodeList.item(i);
-            if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
-                final Element module = (Element) currentNode;
-                final String checkName = module.getAttribute("name");
-                if (!"Checker".equals(checkName) && !"TreeWalker".equals(checkName)) {
-                    checksReferencedInCheckstyleChecksXml.add(checkName);
+    private static Set<String> getCheckStyleChecksReferencedInConfig(String configFilePath) {
+        try {
+            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+
+            // Validations of XML file make parsing too slow, that is why we
+            // disable all validations.
+            factory.setNamespaceAware(false);
+            factory.setValidating(false);
+            factory.setFeature("http://xml.org/sax/features/namespaces", false);
+            factory.setFeature("http://xml.org/sax/features/validation", false);
+            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar",
+                    false);
+            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",
+                    false);
+
+            final DocumentBuilder builder = factory.newDocumentBuilder();
+            final Document document = builder.parse(new File(configFilePath));
+
+            // optional, but recommended
+            // FYI:
+            // http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-
+            // how-does-it-work
+            document.getDocumentElement().normalize();
+
+            final NodeList nodeList = document.getElementsByTagName("module");
+
+            final Set<String> checksReferencedInCheckstyleChecksXml = new HashSet<>();
+            for (int i = 0; i < nodeList.getLength(); i++) {
+                final Node currentNode = nodeList.item(i);
+                if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
+                    final Element module = (Element) currentNode;
+                    final String checkName = module.getAttribute("name");
+                    if (!"Checker".equals(checkName) && !"TreeWalker".equals(checkName)) {
+                        checksReferencedInCheckstyleChecksXml.add(checkName);
+                    }
                 }
             }
+            return checksReferencedInCheckstyleChecksXml;
+        }
+        catch (Exception exception) {
+            throw new IllegalStateException(exception);
         }
-        return checksReferencedInCheckstyleChecksXml;
     }
 
     /**
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java
index 84ad8f7f0e..37003c8d9f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XDocsPagesTest.java
@@ -47,6 +47,7 @@
 import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.io.Files;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader;
@@ -114,6 +115,11 @@
             "SuppressionCommentFilter.fileContents"
     );
 
+    private static final Set<String> SUN_CHECKS = ImmutableSet.copyOf(CheckUtil
+            .getConfigSunStyleChecks());
+    private static final Set<String> GOOGLE_CHECKS = ImmutableSet.copyOf(CheckUtil
+            .getConfigGoogleStyleChecks());
+
     @Test
     public void testAllChecksPresentOnAvailableChecksPage() throws IOException {
         final String availableChecks = Files.toString(AVAILABLE_CHECKS_FILE, UTF_8);
@@ -496,12 +502,20 @@ else if ("Google Style".equals(linkText)) {
                         + "path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+"
                         + "repo%3Acheckstyle%2Fcheckstyle+"
                         + sectionName;
+
+                Assert.assertTrue(fileName + " section '" + sectionName
+                        + "' should be in google_checks.xml or not reference 'Google Style'",
+                        GOOGLE_CHECKS.contains(sectionName));
             }
             else if ("Sun Style".equals(linkText)) {
                 expectedUrl = "https://github.com/search?q="
                         + "path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+"
                         + "repo%3Acheckstyle%2Fcheckstyle+"
                         + sectionName;
+
+                Assert.assertTrue(fileName + " section '" + sectionName
+                        + "' should be in sun_checks.xml or not reference 'Sun Style'",
+                        SUN_CHECKS.contains(sectionName));
             }
 
             Assert.assertEquals(fileName + " section '" + sectionName
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
index 05c3b2e61b..52dff3b24e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
@@ -46,7 +46,7 @@ public void testIsProperUtilsClass() throws ReflectiveOperationException {
     public void testContainsAnnotationNull() {
         try {
             AnnotationUtility.containsAnnotation(null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -57,7 +57,7 @@ public void testContainsAnnotationNull() {
     public void testContainsAnnotationNull2() {
         try {
             AnnotationUtility.containsAnnotation(null, "");
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -98,7 +98,7 @@ public void testContainsAnnotationTrue() {
     public void testAnnotationHolderNull() {
         try {
             AnnotationUtility.getAnnotationHolder(null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -109,7 +109,7 @@ public void testAnnotationHolderNull() {
     public void testAnnotationNull() {
         try {
             AnnotationUtility.getAnnotation(null, null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -120,7 +120,7 @@ public void testAnnotationNull() {
     public void testAnnotationNull2() {
         try {
             AnnotationUtility.getAnnotation(new DetailAST(), null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the annotation is null", ex.getMessage());
@@ -131,7 +131,7 @@ public void testAnnotationNull2() {
     public void testAnnotationEmpty() {
         try {
             AnnotationUtility.getAnnotation(new DetailAST(), "");
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the annotation is empty or spaces", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
index cc0bfacf73..33c9240274 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
@@ -157,7 +157,7 @@ public void testGetExistingConstructor() throws NoSuchMethodException {
     public void testGetNonExistingConstructor() {
         try {
             CommonUtils.getConstructor(Math.class);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertSame(NoSuchMethodException.class, expected.getCause().getClass());
@@ -180,7 +180,7 @@ public void testInvokeConstructorThatFails() throws NoSuchMethodException {
 
         try {
             CommonUtils.invokeConstructor(constructor);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertSame(InstantiationException.class, expected.getCause().getClass());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
index 7e927f9523..36c7bb8954 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
@@ -51,7 +51,7 @@ public void testGetIntFromInaccessibleField() throws NoSuchFieldException {
 
         try {
             TokenUtils.getIntFromField(field, 0);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertTrue(expected.getMessage().startsWith(
@@ -66,7 +66,7 @@ public void testTokenValueIncorrect() {
         final Integer id = Integer.MAX_VALUE - 1;
         try {
             TokenUtils.getTokenName(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given id " + id, expected.getMessage());
@@ -94,7 +94,7 @@ public void testTokenValueIncorrect2() throws Exception {
             }
 
             TokenUtils.getTokenName(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             // restoring original value, to let other tests pass
@@ -104,7 +104,7 @@ public void testTokenValueIncorrect2() throws Exception {
 
         }
         catch (IllegalAccessException | NoSuchFieldException ex) {
-            fail();
+            fail("Exception is expected");
         }
     }
 
@@ -113,7 +113,7 @@ public void testTokenIdIncorrect() {
         final String id = "NON_EXISTING_VALUE";
         try {
             TokenUtils.getTokenId(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given name " + id, expected.getMessage());
@@ -125,7 +125,7 @@ public void testShortDescriptionIncorrect() {
         final String id = "NON_EXISTING_VALUE";
         try {
             TokenUtils.getShortDescription(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given name " + id, expected.getMessage());
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/whitespace/InputAllowEmptyLambdaExpressions.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/whitespace/InputAllowEmptyLambdaExpressions.java
new file mode 100755
index 0000000000..8539420000
--- /dev/null
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/whitespace/InputAllowEmptyLambdaExpressions.java
@@ -0,0 +1,14 @@
+//Compilable with Java8
+package com.puppycrawl.tools.checkstyle.checks.whitespace;
+
+import java.util.function.*;
+
+public class InputAllowEmptyLambdaExpressions {
+    Runnable noop = () -> {};
+    Runnable noop2 = () -> {
+        int x = 10;
+    };
+    BinaryOperator<Integer> sum = (x, y) -> x + y;
+    Runnable noop3 = () -> {;};
+    Runnable noop4 = () -> {new Integer();};
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
index 84e8e7eb26..5e89a77bec 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
@@ -108,4 +108,10 @@ public boolean isInitial() {
             return true;
         }
     }
+
+    private void forEachLoop() {
+        for (String s: new String[]{""}) break;
+        for (String s: new String[]{""})
+            break;
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
index 8d363a0612..6fc1a87a7e 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
@@ -20,7 +20,7 @@
  *                                                                            //indent:1 exp:1
  *                                                                            //indent:1 exp:1
  */                                                                           //indent:1 exp:1
-public class InputFromGuava2<K extends Comparable<?>, V> implements RangeMap<K, V> { //indent:0 exp:0
+public abstract class InputFromGuava2<K extends Comparable<?>, V> implements RangeMap<K, V> { //indent:0 exp:0
 
   public InputFromGuava2<K, V> subRangeMap1(final Range<K> range) { //indent:2 exp:2
     Range<K> ranges = null; //indent:4 exp:4
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/InputOverrideAnnotationNoNPE.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/InputOverrideAnnotationNoNPE.java
new file mode 100755
index 0000000000..8295a120e8
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/naming/InputOverrideAnnotationNoNPE.java
@@ -0,0 +1,27 @@
+package com.puppycrawl.tools.checkstyle.checks.naming;
+
+class InputOverrideAnnotationNoNPE
+{
+    // method with many parameters
+    void myMethod(int a, int b) {
+
+    }
+
+    // method with many parameters
+    void myMethod2(int a, int b) {
+
+    }
+}
+
+class Test extends InputOverrideAnnotationNoNPE
+{
+    @Override
+    void myMethod(int a, int b) {
+
+    }
+
+    @java.lang.Override
+    void myMethod2(int a, int b) {
+
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputMethodParamPad.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputMethodParamPad.java
index 47e7cb8a93..7bb8f37d36 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputMethodParamPad.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputMethodParamPad.java
@@ -69,4 +69,15 @@ public void newArray()
         java.util.Vector<String> v = new java.util.Vector<String>();
         java.util.Vector<String> v1 = new Vector<String>();
     }
+
+    enum TestEnum {
+        FIRST ()
+            {
+            },
+
+        SECOND
+            ()
+        {
+        }
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
index 4efd42c13e..57a8cb652f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/filters/InputSuppressWarningsFilter.java
@@ -67,4 +67,34 @@ public void needsToCatchException()
     @SuppressWarnings(UNUSED)
     public void annotationUsingStringConstantValue(){
     }
+
+    @SuppressWarnings("checkstyle:uncommentedmain")
+    public static void main(String[] args) {
+
+    }
+
+    static class TestClass1 {
+        @SuppressWarnings("uncommentedmain")
+        public static void main(String[] args) {
+
+        }
+    }
+
+    static class TestClass2 {
+        @SuppressWarnings("UncommentedMain")
+        public static void main(String[] args) {
+
+        }
+    }
+
+    static class TestClass3 {
+        @SuppressWarnings("checkstyle:UncommentedMain")
+        public static void main(String[] args) {
+
+        }
+    }
+
+    @SuppressWarnings("checkstyle:javadoctype")
+    public static abstract class Task {
+    }
 }
diff --git a/src/xdocs/config_naming.xml b/src/xdocs/config_naming.xml
index e986d0635a..9651d4fda4 100755
--- a/src/xdocs/config_naming.xml
+++ b/src/xdocs/config_naming.xml
@@ -282,7 +282,7 @@
           a lower case letter, followed by letters and digits is:
         </p>
         <source>
-&lt;module name="ParameterName"&gt;
+&lt;module name="CatchParameterName"&gt;
     &lt;property name="format" value="^[a-z][a-zA-Z0-9]+$"/&gt;
 &lt;/module&gt;
         </source>
@@ -1034,6 +1034,15 @@ public boolean equals(Object o) {
     &lt;property name="ignoreOverridden" value="true"/&gt;
 &lt;/module&gt;
           </source>
+        <p>
+          An example of how to configure the check for names that begin with
+          a lower case letter, followed by letters and digits is:
+        </p>
+        <source>
+&lt;module name="ParameterName"&gt;
+    &lt;property name="format" value="^[a-z][a-zA-Z0-9]+$"/&gt;
+&lt;/module&gt;
+        </source>
       </subsection>
 
       <subsection name="Example of Usage">
diff --git a/src/xdocs/config_whitespace.xml b/src/xdocs/config_whitespace.xml
index 9304d71465..8131481abd 100755
--- a/src/xdocs/config_whitespace.xml
+++ b/src/xdocs/config_whitespace.xml
@@ -543,7 +543,9 @@ sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference
                 <a
                  href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">METHOD_DEF</a>,
                  <a
-                 href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SUPER_CTOR_CALL">SUPER_CTOR_CALL</a>.
+                 href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SUPER_CTOR_CALL">SUPER_CTOR_CALL</a>,
+                <a
+                 href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF">ENUM_CONSTANT_DEF</a>.
             </td>
 
             <td>
@@ -556,7 +558,9 @@ sort(list, Comparable::&lt;String&gt;compareTo);             // Method reference
                  <a
                   href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">METHOD_DEF</a>,
                   <a
-                  href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SUPER_CTOR_CALL">SUPER_CTOR_CALL</a>.
+                  href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SUPER_CTOR_CALL">SUPER_CTOR_CALL</a>,
+                 <a
+                  href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF">ENUM_CONSTANT_DEF</a>.
             </td>
           </tr>
         </table>
@@ -1541,7 +1545,7 @@ foo(i,
       <subsection name="Description">
         <p>
         Checks that a token is surrounded by whitespace.  Empty constructor,
-        method, class, enum, interface, loop bodies (blocks) of the form
+        method, class, enum, interface, loop bodies (blocks), lambdas of the form
         </p>
 
         <source>public MyClass() {}      // empty constructor
@@ -1553,13 +1557,15 @@ MyClass c = new MyClass() {}; // empty anonymous class
 while (i = 1) {} // empty while loop
 for (int i = 1; i > 1; i++) {} // empty for loop
 do {} while (i = 1); // empty do-while loop
+Runnable noop = () -> {}; // empty lambda
 public @interface Beta {} // empty annotation type
         </source>
 
         <p>
         may optionally be exempted from the policy using the <code>
         allowEmptyMethods</code>, <code>allowEmptyConstructors
-        </code>, <code>allowEmptyTypes</code> and <code>allowEmptyLoops</code> properties.
+        </code>, <code>allowEmptyTypes</code>, <code>allowEmptyLoops</code> and
+        <code>allowEmptyLambdas</code> properties.
         </p>
       </subsection>
 
@@ -1595,6 +1601,12 @@ public @interface Beta {} // empty annotation type
             <td><a href="property_types.html#boolean">boolean</a></td>
             <td><code>false</code></td>
           </tr>
+          <tr>
+            <td>allowEmptyLambdas</td>
+            <td>allow empty lambda bodies</td>
+            <td><a href="property_types.html#boolean">boolean</a></td>
+            <td><code>false</code></td>
+          </tr>
           <tr>
             <td>ignoreEnhancedForColon</td>
             <td>ignore whitespace around colon in for-each loops</td>
