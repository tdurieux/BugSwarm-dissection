diff --git a/sklearn/discriminant_analysis.py b/sklearn/discriminant_analysis.py
index b25ca138cc..b9ba523458 100755
--- a/sklearn/discriminant_analysis.py
+++ b/sklearn/discriminant_analysis.py
@@ -429,6 +429,7 @@ def fit(self, X, y):
         y : array, shape (n_samples,)
             Target values.
         """
+        # FIXME: Future warning to be removed in 0.22
         X, y = check_X_y(X, y, ensure_min_samples=2, estimator=self)
         self.classes_ = unique_labels(y)
 
@@ -461,6 +462,12 @@ def fit(self, X, y):
                     "n_classes - 1) = min(%d, %d - 1) = %d components."
                     % (X.shape[1], len(self.classes_), max_components),
                     ChangedBehaviorWarning)
+                future_msg = ("In version 0.22, invalid values for "
+                              " the n_components argument will raise a "
+                              "ValueError. You should set n_components to None"
+                              " (default), or a value smaller than "
+                              "min(n_features, n_classes - 1).")
+                warnings.warn(future_msg, FutureWarning)
                 self._max_components = max_components
             else:
                 self._max_components = self.n_components
diff --git a/sklearn/tests/test_discriminant_analysis.py b/sklearn/tests/test_discriminant_analysis.py
index 0f3f15a231..43af403de6 100755
--- a/sklearn/tests/test_discriminant_analysis.py
+++ b/sklearn/tests/test_discriminant_analysis.py
@@ -263,6 +263,7 @@ def test_lda_store_covariance():
 @pytest.mark.parametrize('n_features', [3, 5])
 @pytest.mark.parametrize('n_classes', [5, 3])
 def test_lda_dimension_warning(n_classes, n_features):
+    # FIXME: Future warning to be removed in 0.22
     rng = check_random_state(0)
     n_samples = 10
     X = rng.randn(n_samples, n_features)
@@ -280,11 +281,17 @@ def test_lda_dimension_warning(n_classes, n_features):
                          max(n_features, n_classes - 1) + 1]:
         # if n_components > min(n_classes - 1, n_features), raise warning
         lda = LinearDiscriminantAnalysis(n_components=n_components)
-        msg = ("n_components cannot be superior to min(n_features, "
+        msg = ("n_components cannot be larger than min(n_features, "
                "n_classes - 1). Using min(n_features, "
                "n_classes - 1) = min(%d, %d - 1) = %d components." %
                (n_features, n_classes, max_components))
         assert_warns_message(ChangedBehaviorWarning, msg, lda.fit, X, y)
+        future_msg = ("In version 0.22, invalid values for "
+                      " the n_components argument will raise a "
+                      "ValueError. You should set n_components to None"
+                      " (default), or a value smaller than "
+                      "min(n_features, n_classes - 1).")
+        assert_warns_message(FutureWarning, future_msg, lda.fit, X, y)
 
 
 def test_qda():
