diff --git a/f90nml/parser.py b/f90nml/parser.py
index 64dc2d16de..76630237ec 100755
--- a/f90nml/parser.py
+++ b/f90nml/parser.py
@@ -7,7 +7,6 @@
 :license: Apache License, Version 2.0, see LICENSE for details.
 """
 import copy
-import shlex
 from string import whitespace
 
 from f90nml.fpy import pyfloat, pycomplex, pybool, pystr
@@ -118,17 +117,6 @@ def read(self, nml_fname, nml_patch_in=None, patch_fname=None):
     def readstream(self, nml_file, nml_patch):
         """Parse an input stream containing a Fortran namelist."""
 
-        #f90lex = shlex.shlex(nml_file)
-        #f90lex.whitespace = ''
-        #f90lex.wordchars += '.-+'       # Include floating point tokens
-        #if nml_patch:
-        #    f90lex.commenters = ''
-        #else:
-        #    f90lex.commenters = self.comment_tokens
-
-        ##print(list(f90lex))
-        #self.tokens = iter(f90lex)
-
         tokenizer = Tokenizer()
         f90lex = []
         for line in nml_file:
@@ -136,7 +124,6 @@ def readstream(self, nml_file, nml_patch):
             toks.append('\n')
             f90lex.extend(toks)
 
-        print(f90lex)
         self.tokens = iter(f90lex)
 
         nmls = Namelist()
diff --git a/f90nml/tokenizer.py b/f90nml/tokenizer.py
index d8cf493037..fad738c78d 100755
--- a/f90nml/tokenizer.py
+++ b/f90nml/tokenizer.py
@@ -48,7 +48,7 @@ def parse(self, line, macros={}):
                     word += self.char
                     self.update_chars()
 
-            elif self.char.isdigit():
+            elif self.char.isdigit() or self.char == '-':
                 word = self.parse_numeric()
 
             elif self.char in ('!', '#'):
@@ -141,6 +141,10 @@ def parse_numeric(self):
         word = ''
         frac = False
 
+        if self.char == '-':
+            word += self.char
+            self.update_chars()
+
         while self.char.isdigit() or (self.char == '.' and not frac):
             # Only allow one decimal point
             if self.char == '.':
@@ -152,12 +156,13 @@ def parse_numeric(self):
         if self.char in 'eEdD':
             word += self.char
             self.update_chars()
-            if self.char in '+-':
-                word += self.char
-                self.update_chars()
-            while self.char.isdigit():
-                word += self.char
-                self.update_chars()
+
+        if self.char in '+-':
+            word += self.char
+            self.update_chars()
+        while self.char.isdigit():
+            word += self.char
+            self.update_chars()
 
         if self.char == '_':
             word += self.char
