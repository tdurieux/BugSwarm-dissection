diff --git a/src/appier/model.py b/src/appier/model.py
index 4bf66a0b50..c2c294faa1 100755
--- a/src/appier/model.py
+++ b/src/appier/model.py
@@ -489,6 +489,7 @@ def get(cls, *args, **kwargs):
         if fill: cls.fill(model)
         if build: cls.build(model, map = map, rules = rules, meta = meta)
         if eager: model = cls._eager(model, eager, map = map)
+        if map: model = cls._resolve_all(model)
         return model if map else cls.old(model = model, safe = False)
 
     @classmethod
@@ -524,6 +525,7 @@ def find(cls, *args, **kwargs):
         if fill: models = [cls.fill(model) for model in models]
         if build: [cls.build(model, map = map, rules = rules, meta = meta) for model in models]
         if eager: models = cls._eager(models, eager)
+        if map: models = [cls._resolve_all(model) for model in models]
         models = models if map else [cls.old(model = model, safe = False) for model in models]
         return models
 
@@ -1578,6 +1580,29 @@ def _eager_b(cls, eager):
         eager = tuple(set(eager))
         return eager
 
+    @classmethod
+    def _resolve_all(cls, model):
+        definition = cls.definition()
+        for name, value in legacy.eager(model.items()):
+            if not name in definition: continue
+            model[name] = cls._resolve(name, value)
+        return model
+
+    @classmethod
+    def _resolve(cls, name, value, all = False):
+        # verifies if the current value is an iterable one in case
+        # it is runs the evaluate method for each of the values to
+        # try to resolve them into the proper representation
+        is_iterable = hasattr(value, "__iter__")
+        is_iterable = is_iterable and not type(value) in ITERABLES
+        if is_iterable: return [cls._resolve(name, value) for value in value]
+
+        # verifies if the map value recursive approach should be used
+        # for the element and if that's the case calls the proper method
+        # otherwise uses the provided (raw value)
+        if not hasattr(value, "map_v"): return value
+        return value.map_v(resolve = True, all = all)
+
     @property
     def request(self):
         return common.base().get_request()
@@ -1988,7 +2013,7 @@ def _filter(
         if resolve:
             for name, value in legacy.eager(self.model.items()):
                 if not name in definition: continue
-                model[name] = self._resolve(name, value)
+                model[name] = cls._resolve(name, value)
 
         # in case the all flag is set the extra fields (not present
         # in definition) must also be used to populate the resulting
@@ -2027,20 +2052,6 @@ def _evaluate(self, name, value):
         value = value.json_v() if hasattr(value, "json_v") else value
         return value
 
-    def _resolve(self, name, value, all = False):
-        # verifies if the current value is an iterable one in case
-        # it is runs the evaluate method for each of the values to
-        # try to resolve them into the proper representation
-        is_iterable = hasattr(value, "__iter__")
-        is_iterable = is_iterable and not type(value) in ITERABLES
-        if is_iterable: return [self._resolve(name, value) for value in value]
-
-        # verifies if the map value recursive approach should be used
-        # for the element and if that's the case calls the proper method
-        # otherwise uses the provided (raw value)
-        if not hasattr(value, "map_v"): return value
-        return value.map_v(resolve = True, all = all)
-
 class LocalModel(Model):
     """
     Concrete model aimed at cases where data source based
