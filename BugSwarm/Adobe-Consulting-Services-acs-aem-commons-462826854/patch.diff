diff --git a/CHANGELOG.md b/CHANGELOG.md
index b154f16a0b..679a9ec5cd 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -20,6 +20,7 @@ The format is based on [Keep a Changelog](http://keepachangelog.com)
 - #1552 - Ensure Authorizable - trim OSGi config array element whitespace for EnsureServiceUser aces property
 - #1551 - ThrottledTaskRunner avoid overflow errors when comparing priority with large absolute (negative or positive) values
 - #1593 - Sftp Asset Injector throws URISyntaxException if item contains special characters
+- #1598 - Asset Ingestor | If user provides invalid info, nothing is happens. Erorr in report is expected
 - #1597 - If 'Preserve Filename' unchecked, asset name will support only the following characters: letters, digits, hyphens, underscores, another chars will be replaced with hyphens
 
 ### Changed
diff --git a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestor.java b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestor.java
index edf8288093..2d6c3e51a2 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestor.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/AssetIngestor.java
@@ -261,9 +261,7 @@ private void createAsset(Source source, String assetPath, ResourceResolver r, bo
                 }
                 Asset asset = assetManager.createAsset(assetPath, source.getStream(), type, false);
 
-                if (asset == null) {
-                    throw new RepositoryException("Could not create asset, see more in logs.");
-                } else {
+                if (asset != null) {
                     saveMigrationInfo(source, asset);
                 }
 
diff --git a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestor.java b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestor.java
index 52937480c7..d0264b321f 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestor.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestor.java
@@ -99,31 +99,36 @@ public FileAssetIngestor(MimeTypeService mimeTypeService) {
     HierarchicalElement baseFolder;
 
     @Override
-    public void init() throws RepositoryException {
-        if (fileBasePath.toLowerCase().startsWith("sftp://")) {
+    public void buildProcess(ProcessInstance instance, ResourceResolver rr) throws LoginException, RepositoryException {
+        baseFolder = getBaseFolder(fileBasePath);
+        instance.getInfo().setDescription(fileBasePath + "->" + jcrBasePath);
+        instance.defineCriticalAction("Create Folders", rr, this::createFolders);
+        instance.defineCriticalAction("Import Assets", rr, this::importAssets);
+    }
+
+    HierarchicalElement getBaseFolder(final String url) throws RepositoryException {
+        HierarchicalElement baseHierarchicalElement;
+        if (url.toLowerCase().startsWith("sftp://")) {
             try {
-                baseFolder = new SftpHierarchicalElement(fileBasePath);
-                baseFolder.isFolder(); // Forces a login and check status of base folder
+                baseHierarchicalElement = new SftpHierarchicalElement(url);
+                // Forces a login
+                ((SftpHierarchicalElement) baseHierarchicalElement).retrieveDetails();
             } catch (URISyntaxException | UnsupportedEncodingException ex) {
                 Logger.getLogger(FileAssetIngestor.class.getName()).log(Level.SEVERE, null, ex);
                 throw new RepositoryException("Unable to process URL!");
+            } catch (JSchException | SftpException ex) {
+                Logger.getLogger(FileAssetIngestor.class.getName()).log(Level.SEVERE, null, ex);
+                throw new RepositoryException(ex.getMessage());
             }
         } else {
-            File base = new File(fileBasePath);
+            File base = new File(url);
             if (!base.exists()) {
                 throw new RepositoryException("Source folder does not exist!");
             }
-            baseFolder = new FileHierarchicalElement(base);
+            baseHierarchicalElement = new FileHierarchicalElement(base);
         }
-        super.init();
 
-    }
-
-    @Override
-    public void buildProcess(ProcessInstance instance, ResourceResolver rr) throws LoginException, RepositoryException {
-        instance.getInfo().setDescription(fileBasePath + "->" + jcrBasePath);
-        instance.defineCriticalAction("Create Folders", rr, this::createFolders);
-        instance.defineCriticalAction("Import Assets", rr, this::importAssets);
+        return baseHierarchicalElement;
     }
 
     void createFolders(ActionManager manager) throws IOException {
diff --git a/bundle/src/test/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestorTest.java b/bundle/src/test/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestorTest.java
index 6abd3206f7..897d40e4f9 100755
--- a/bundle/src/test/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestorTest.java
+++ b/bundle/src/test/java/com/adobe/acs/commons/mcp/impl/processes/asset/FileAssetIngestorTest.java
@@ -131,7 +131,7 @@ public void teardown() throws Exception {
 
     @Test
     public void testCreateFoldersWithEmptyDirectory() throws Exception {
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         ingestor.createFolders(actionManager);
 
         assertFalse(context.resourceResolver().hasChanges());
@@ -140,7 +140,7 @@ public void testCreateFoldersWithEmptyDirectory() throws Exception {
 
     @Test
     public void testCreateFolders() throws Exception {
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         addFile(tempDirectory, "image.png", "/img/test.png");
         File folder1 = mkdir(tempDirectory, "folder1");
         addFile(folder1, "image.png", "/img/test.png");
@@ -166,7 +166,7 @@ public void testCreateFolders() throws Exception {
 
     @Test
     public void testImportAssetsWithEmptyDirectory() throws Exception {
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         ingestor.importAssets(actionManager);
 
         assertFalse(context.resourceResolver().hasChanges());
@@ -180,7 +180,7 @@ public void testImportAssetsWithEmptyDirectory() throws Exception {
 
     @Test
     public void testImportAssetsWithDirectoryContainingJustFolders() throws Exception {
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         mkdir(tempDirectory, "folder1");
         mkdir(mkdir(tempDirectory, "folder2"), "folder3");
 
@@ -197,7 +197,7 @@ public void testImportAssetsWithDirectoryContainingJustFolders() throws Exceptio
 
     @Test
     public void testImportAssets() throws Exception {
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         final File rootImage = addFile(tempDirectory, "image.png", "/img/test.png");
         final File folder1 = mkdir(tempDirectory, "folder1");
         final File folder1Image = addFile(folder1, "image.png", "/img/test.png");
@@ -224,7 +224,7 @@ public void testImportAssets() throws Exception {
     @Test
     public void testImportAssetsToNewRootFolder() throws Exception {
         ingestor.jcrBasePath = "/content/dam/test";
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         final File rootImage = addFile(tempDirectory, "image.png", "/img/test.png");
 
         ingestor.importAssets(actionManager);
@@ -247,7 +247,7 @@ public void testImportAssetsToNewRootFolder() throws Exception {
     @Test
     public void testImportAssetsToExistingRootFolder() throws Exception {
         ingestor.jcrBasePath = "/content/dam/test";
-        ingestor.init();
+        ingestor.baseFolder = ingestor.getBaseFolder(ingestor.fileBasePath);
         context.create().resource("/content/dam/test", "jcr:primaryType", "sling:Folder", "jcr:title", "testTitle");
         final File rootImage = addFile(tempDirectory, "image.png", "/img/test.png");
 
