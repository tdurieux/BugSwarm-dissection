diff --git a/pychron/dvc/func.py b/pychron/dvc/func.py
index 52b7f948eb..ad5d5e9526 100755
--- a/pychron/dvc/func.py
+++ b/pychron/dvc/func.py
@@ -80,14 +80,16 @@ def get_review_status(record):
 def find_interpreted_age_path(idn, repositories, prefixlen=3):
     prefix = idn[:prefixlen]
     suffix = '{}*.ia.json'.format(idn[prefixlen:])
-    # suffix = '{}*.ia.json'.format(prefix)
-    ret = []
-    for e in repositories:
-        pathname = '{}/{}/{}/ia/{}'.format(paths.repository_dataset_dir, e, prefix, suffix)
-        ps = glob.glob(pathname)
-        if ps:
-            ret.extend(ps)
-
+    # ret = []
+    # for e in repositories:
+    #     pathname = os.path.join(paths.repository_dataset_dir,
+    #                             e, prefix, 'ia', suffix)
+    #     ps = glob.glob(pathname)
+    #     if ps:
+    #         ret.extend(ps)
+
+    ret = [p for repo in repositories
+                for p in glob.glob(os.path.join(paths.repository_dataset_dir, repo, prefix, 'ia', suffix))]
     return ret
 
 
diff --git a/pychron/experiment/automated_run/automated_run.py b/pychron/experiment/automated_run/automated_run.py
index 5077ecde8d..6c7dc27519 100755
--- a/pychron/experiment/automated_run/automated_run.py
+++ b/pychron/experiment/automated_run/automated_run.py
@@ -1259,12 +1259,12 @@ def do_extraction(self):
             sblob = script.get_setpoint_blob()
             snapshots = script.snapshots
             videos = script.videos
-            grain_mask = script.get_grain_masks()
+            grain_polygon = script.get_grain_polygons()
 
-            grain_mask_blob = array(grain_mask).tostring()
+            grain_polygon_blob = array(grain_polygon).tostring()
             pid = script.get_active_pid_parameters()
             self._update_persister_spec(pid=pid or '',
-                                        grain_mask_blob=grain_mask_blob,
+                                        grain_polygon_blob=grain_polygon_blob,
                                         power_achieved=ach,
                                         response_blob=rblob,
                                         output_blob=oblob,
diff --git a/pychron/experiment/automated_run/persistence_spec.py b/pychron/experiment/automated_run/persistence_spec.py
index b83e5e5704..094e30da25 100755
--- a/pychron/experiment/automated_run/persistence_spec.py
+++ b/pychron/experiment/automated_run/persistence_spec.py
@@ -60,7 +60,7 @@ class PersistenceSpec(HasTraits):
     spec_dict = Dict
     defl_dict = Dict
     gains = Dict
-trap = Float
+    trap = Float
     emission = Float
     active_detectors = List
 
@@ -92,7 +92,7 @@ class PersistenceSpec(HasTraits):
     conditionals = List
     tripped_conditional = None
 
-    grain_mask_blob = Str
+    grain_polygon_blob = Str
 
     power_achieved = Float
     lab_temperatures = List
diff --git a/pychron/lasers/laser_managers/fusions_laser_manager.py b/pychron/lasers/laser_managers/fusions_laser_manager.py
index 4d6afb4291..c701188f9b 100755
--- a/pychron/lasers/laser_managers/fusions_laser_manager.py
+++ b/pychron/lasers/laser_managers/fusions_laser_manager.py
@@ -122,17 +122,17 @@ def refresh_canvas(self):
             #   IExtractionDevice interface
             # ===============================================================================
 
-    def stop_measure_grain_mask(self):
-        self.stage_manager.stop_measure_grain_mask()
+    def stop_measure_grain_polygon(self):
+        self.stage_manager.stop_measure_grain_polygon()
 
-    def start_measure_grain_mask(self):
-        self.stage_manager.start_measure_grain_mask()
+    def start_measure_grain_polygon(self):
+        self.stage_manager.start_measure_grain_polygon()
 
-    def get_grain_mask(self):
-        return self.stage_manager.get_grain_mask()
+    def get_grain_polygon(self):
+        return self.stage_manager.get_grain_polygon()
 
-    def get_grain_masks_blob(self):
-        return self.stage_manager.get_grain_masks_blob()
+    def get_grain_polygons_blob(self):
+        return self.stage_manager.get_grain_polygons_blob()
 
     def extract(self, power, units=None):
         if self.enable_laser():
diff --git a/pychron/lasers/laser_managers/pychron_laser_manager.py b/pychron/lasers/laser_managers/pychron_laser_manager.py
index 11c270a581..f2832106d0 100755
--- a/pychron/lasers/laser_managers/pychron_laser_manager.py
+++ b/pychron/lasers/laser_managers/pychron_laser_manager.py
@@ -136,17 +136,17 @@ def wake(self):
     def set_light(self, value):
         self._ask('SetLight {}'.format(value))
 
-    def acquire_grain_mask(self):
-        return self._ask('AcquireGrainMaskBlob')
+    def acquire_grain_polygon(self):
+        return self._ask('AcquireGrainPolygonBlob')
 
-    def start_measure_grain_mask(self):
-        self._ask('StartMeasureGrainMask')
+    def start_measure_grain_polygon(self):
+        self._ask('StartMeasureGrainPolygon')
 
-    def stop_measure_grain_mask(self):
-        self._ask('StopMeasureGrainMask')
+    def stop_measure_grain_polygon(self):
+        self._ask('StopMeasureGrainPolygon')
 
-    def get_grain_masks_blob(self):
-        return self._ask('GetGrainMasksBlob')
+    def get_grain_polygons_blob(self):
+        return self._ask('GetGrainPolygonsBlob')
 
     def get_response_blob(self):
         return self._ask('GetResponseBlob')
diff --git a/pychron/lasers/stage_managers/stage_manager.py b/pychron/lasers/stage_managers/stage_manager.py
index e8720052a1..f8892bef3e 100755
--- a/pychron/lasers/stage_managers/stage_manager.py
+++ b/pychron/lasers/stage_managers/stage_manager.py
@@ -100,10 +100,10 @@ def __init__(self, *args, **kw):
         super(StageManager, self).__init__(*args, **kw)
         self.stage_controller = self._stage_controller_factory()
 
-    def measure_grain_mask(self):
+    def measure_grain_polygon(self):
         pass
 
-    def stop_measure_grain_mask(self):
+    def stop_measure_grain_polygon(self):
         pass
 
     def shutdown(self):
diff --git a/pychron/lasers/stage_managers/video_stage_manager.py b/pychron/lasers/stage_managers/video_stage_manager.py
index c74c6e381b..990b23f34f 100755
--- a/pychron/lasers/stage_managers/video_stage_manager.py
+++ b/pychron/lasers/stage_managers/video_stage_manager.py
@@ -138,32 +138,34 @@ def bind_preferences(self, pref_id):
         bind_preference(self.video, 'ffmpeg_path',
                         '{}.ffmpeg_path'.format(pref_id))
 
-    def get_grain_mask(self):
+    def get_grain_polygon(self):
         ld = self.lumen_detector
         l, m = ld.lum()
         return m.tostring()
 
-    def get_grain_masks_blob(self):
-        return array(self.grain_masks).tostring()
+    def get_grain_polygons_blob(self):
+        return array(self.grain_polygons).tostring()
 
-    def stop_measure_grain_mask(self):
+    def stop_measure_grain_polygon(self):
         if self._measure_grain_evt:
             self._measure_grain_evt.set()
 
-    def start_measure_grain_mask(self):
+    def start_measure_grain_polygon(self):
         self._measure_grain_evt = evt = TEvent()
 
-        def _measure_grain_mask():
+        def _measure_grain_polygon():
             ld = self.lumen_detector
 
             masks = []
             while not evt.is_set():
-                l, m = ld.lum(copy(self.video.get_cached_frame()))
-                masks.append(l)
+                src = copy(self.video.get_cached_frame())
+                targets = [t.coords for t in ld.find_target(src)]
+                masks.append(targets)
+
                 evt.wait(1)
-            self.grain_masks = masks
+            self.grain_polygons = masks
 
-        self._measure_grain_t = Thread(target=_measure_grain_mask)
+        self._measure_grain_t = Thread(target=_measure_grain_polygon)
         self._measure_grain_t.start()
 
     def start_recording(self, new_thread=True, path=None, use_dialog=False, basename='vm_recording', **kw):
diff --git a/pychron/mv/lumen_detector.py b/pychron/mv/lumen_detector.py
index ae3699e326..9881189ab3 100755
--- a/pychron/mv/lumen_detector.py
+++ b/pychron/mv/lumen_detector.py
@@ -127,7 +127,6 @@ class PolygonLocator:
     #     return invert(wsrc)
 
     def find_targets(self, src):
-        src = copy(src)
         for contour in find_contours(src, 0):
             coords = approximate_polygon(contour, tolerance=0)
             x, y = coords.T
@@ -183,11 +182,11 @@ class LumenDetector(object):
     custom_mask_radius = 0
     hole_radius = 0
 
-    def find_target(self, src):
+    def find_targets(self, src):
         p = PolygonLocator()
-        targetxy, src = p.find_target(src)
+        targets, src = p.find_targets(src)
 
-        return targetxy, src
+        return targets, src
 
     def find_best_target(self, src):
         p = PolygonLocator()
diff --git a/pychron/pyscripts/extraction_line_pyscript.py b/pychron/pyscripts/extraction_line_pyscript.py
index d4f9a53b1e..19f815511e 100755
--- a/pychron/pyscripts/extraction_line_pyscript.py
+++ b/pychron/pyscripts/extraction_line_pyscript.py
@@ -65,15 +65,15 @@ def __exit__(self, exc_type, exc_val, exc_tb):
         self._script.set_light(0)
 
 
-class GrainMaskCTX(object):
+class GrainPolygonCTX(object):
     def __init__(self, script):
         self._script = script
 
     def __enter__(self, *args, **kw):
-        self._script.start_grain_mask()
+        self._script.start_grain_polygon()
 
     def __exit__(self, exc_type, exc_val, exc_tb):
-        self._script.stop_grain_mask()
+        self._script.stop_grain_polygon()
 
 
 class ExtractionPyScript(ValvePyScript):
@@ -89,7 +89,7 @@ class ExtractionPyScript(ValvePyScript):
     videos = List
 
     _extraction_positions = List
-    _grain_masks = List
+    _grain_polygons = List
 
     def set_run_identifier(self, v):
         self.setup_context(run_identifier=v)
@@ -111,10 +111,10 @@ def get_extraction_positions(self, clear=True):
 
         return ret
 
-    def get_grain_masks(self):
-        m = self._grain_masks
+    def get_grain_polygons(self):
+        m = self._grain_polygons
         if not m:
-            m = self._extraction_action([('get_grain_masks_blob', (), {})])
+            m = self._extraction_action([('get_grain_polygons_blob', (), {})])
             if m:
                 m = m[0]
         return m
@@ -435,8 +435,8 @@ def snapshot(self, name='', prefix='', view_snapshot=False, pic_format='.jpg'):
             self.snapshots.append(ps[0])
 
     @command_register
-    def grain_mask(self):
-        return GrainMaskCTX(self)
+    def grain_polygon(self):
+        return GrainPolygonCTX(self)
 
     @command_register
     def lighting(self, value=75):
@@ -631,7 +631,7 @@ def set_pid_parameters(self, v):
 
     @verbose_skip
     @command_register
-    def extract(self, power='', units='', measure_grain_mask=False):
+    def extract(self, power='', units='', measure_grain_polygon=False):
         if power == '':
             power = self.extract_value
         if units == '':
@@ -651,7 +651,7 @@ def extract(self, power='', units='', measure_grain_mask=False):
         msg = '{} ON! {}({})'.format(ed, power, units)
         self._set_extraction_state(msg)
         self.console_info('extract sample to {} ({})'.format(power, units))
-        self._extraction_action([('extract', (power,), {'units': units, 'measure_grain_mask': measure_grain_mask})])
+        self._extraction_action([('extract', (power,), {'units': units, 'measure_grain_polygon': measure_grain_polygon})])
 
     @verbose_skip
     @command_register
@@ -660,21 +660,21 @@ def end_extract(self):
 
     @verbose_skip
     @command_register
-    def acquire_grain_mask_blob(self):
-        result = self._extraction_action([('acquire_grain_mask', (), {})])
+    def acquire_grain_polygon_blob(self):
+        result = self._extraction_action([('acquire_grain_polygon', (), {})])
         if result:
             result = result[0]
-            self._grain_masks.append(result)
+            self._grain_polygons.append(result)
 
     @verbose_skip
     @command_register
-    def start_grain_mask(self):
-        self._extraction_action([('start_measure_grain_mask', (), {})])
+    def start_grain_polygon(self):
+        self._extraction_action([('start_measure_grain_polygon', (), {})])
 
     @verbose_skip
     @command_register
-    def stop_grain_mask(self):
-        self._extraction_action([('stop_measure_grain_mask', (), {})])
+    def stop_grain_polygon(self):
+        self._extraction_action([('stop_measure_grain_polygon', (), {})])
 
     @verbose_skip
     @command_register
diff --git a/pychron/tx/protocols/laser.py b/pychron/tx/protocols/laser.py
index 3a292ed0db..41fb30e90c 100755
--- a/pychron/tx/protocols/laser.py
+++ b/pychron/tx/protocols/laser.py
@@ -77,10 +77,10 @@ def __init__(self, application, name, addr, logger):
                     ('GetMotorMoving', '_get_motor_moving'),
                     ('SetSampleHolder', '_set_sample_holder'),
                     ('GetSampleHolder', '_get_sample_holder'),
-                    ('StartMeasureGrainMask', '_start_measure_grain_mask'),
-                    ('StopMeasureGrainMask', '_stop_measure_grain_mask'),
-                    ('GetGrainMasksBlob', '_get_grain_masks_blob'),
-                    ('AcquireGrainMaskBlob', '_get_grain_mask'),
+                    ('StartMeasureGrainPolygon', '_start_measure_grain_polygon'),
+                    ('StopMeasureGrainPolygon', '_stop_measure_grain_polygon'),
+                    ('GetGrainPolygonsBlob', '_get_grain_polygons_blob'),
+                    ('AcquireGrainPolygonBlob', '_get_grain_polygon'),
                     ('SetLaserPower', '_set_laser_power'),
                     ('SetLaserOutput', '_set_laser_output'),
                     ('GetAchievedOutput', '_get_achieved_output'),
@@ -145,17 +145,17 @@ def _snapshot(self, data):
                                             lpath, len(upath), upath, imageblob)
             return s
 
-    def _get_grain_masks_blob(self, data):
-        return self._manager.get_grain_masks_blob()
+    def _get_grain_polygons_blob(self, data):
+        return self._manager.get_grain_polygons_blob()
 
-    def _get_grain_mask(self, data):
-        return self._manager.get_grain_mask()
+    def _get_grain_polygon(self, data):
+        return self._manager.get_grain_polygon()
 
-    def _stop_measure_grain_mask(self, data):
-        self._manager.stop_measure_grain_mask()
+    def _stop_measure_grain_polygon(self, data):
+        self._manager.stop_measure_grain_polygon()
 
-    def _start_measure_grain_mask(self, data):
-        self._manager.start_measure_grain_mask()
+    def _start_measure_grain_polygon(self, data):
+        self._manager.start_measure_grain_polygon()
     # ===============================================================================
     # Laser
     # ===============================================================================
