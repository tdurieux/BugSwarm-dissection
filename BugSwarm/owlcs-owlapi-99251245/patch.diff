diff --git a/api/src/main/java/org/semanticweb/owlapi/profiles/violations/UseOfReservedVocabularyForOntologyIRI.java b/api/src/main/java/org/semanticweb/owlapi/profiles/violations/UseOfReservedVocabularyForOntologyIRI.java
index cf9e9f090b..bd67cb1fc2 100755
--- a/api/src/main/java/org/semanticweb/owlapi/profiles/violations/UseOfReservedVocabularyForOntologyIRI.java
+++ b/api/src/main/java/org/semanticweb/owlapi/profiles/violations/UseOfReservedVocabularyForOntologyIRI.java
@@ -48,13 +48,13 @@ public void accept(OWLProfileViolationVisitor visitor) {
     }
 
     @Override
-    public String toString() {
-        return toString("Use of reserved vocabulary for ontology IRI: %s", getExpression());
+    public <O> Optional<O> accept(OWLProfileViolationVisitorEx<O> visitor) {
+        return visitor.visit(this);
     }
 
     @Override
-    public <O> Optional<O> accept(OWLProfileViolationVisitorEx<O> visitor) {
-        return visitor.visit(this);
+    public String toString() {
+        return toString("Use of reserved vocabulary for ontology IRI: %s", getExpression());
     }
 
     @Override
diff --git a/api/src/main/java/org/semanticweb/owlapi/util/OWLClassExpressionCollector.java b/api/src/main/java/org/semanticweb/owlapi/util/OWLClassExpressionCollector.java
index d4bb2c1353..f43b436392 100755
--- a/api/src/main/java/org/semanticweb/owlapi/util/OWLClassExpressionCollector.java
+++ b/api/src/main/java/org/semanticweb/owlapi/util/OWLClassExpressionCollector.java
@@ -12,12 +12,8 @@
  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
 package org.semanticweb.owlapi.util;
 
-import static org.semanticweb.owlapi.util.CollectionFactory.createSet;
-import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.asSet;
-
-import java.util.Collections;
+import java.util.Collection;
 import java.util.HashSet;
-import java.util.Set;
 
 import org.semanticweb.owlapi.model.*;
 
@@ -31,192 +27,124 @@
  *         Informatics Group
  * @since 3.1.0
  */
-public class OWLClassExpressionCollector implements
-        OWLObjectVisitorEx<Set<OWLClassExpression>> {
-
-    @Override
-    public Set<OWLClassExpression> doDefault(Object o) {
-        return Collections.<OWLClassExpression> emptySet();
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(SWRLClassAtom node) {
-        return node.getPredicate().accept(this);
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLSubClassOfAxiom axiom) {
-        Set<OWLClassExpression> result = new HashSet<>();
-        result.addAll(axiom.getSubClass().accept(this));
-        result.addAll(axiom.getSuperClass().accept(this));
-        return result;
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLOntology ontology) {
-        return asSet(ontology.logicalAxioms().flatMap(
-                ax -> ax.accept(this).stream()));
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLClass ce) {
-        return createSet(ce);
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectIntersectionOf ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        ce.operands().forEach(op -> result.addAll(op.accept(this)));
-        return result;
-    }
+public class OWLClassExpressionCollector extends AbstractCollectorEx<OWLClassExpression> {
 
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectUnionOf ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        ce.operands().forEach(op -> result.addAll(op.accept(this)));
-        return result;
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectComplementOf ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getOperand().accept(this));
-        return result;
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectSomeValuesFrom ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getFiller().accept(this));
-        return result;
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectAllValuesFrom ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getFiller().accept(this));
-        return result;
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLDisjointClassesAxiom axiom) {
-        return asSet(axiom.classExpressions().flatMap(
-                ce -> ce.accept(this).stream()));
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLObjectHasValue ce) {
-        return createSet(ce);
-    }
-
-    @Override
-    public Set<OWLClassExpression> visit(OWLDataPropertyDomainAxiom axiom) {
-        return axiom.getDomain().accept(this);
+    /** The default collection is a set */
+    public OWLClassExpressionCollector() {
+        super(new HashSet<>());
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectMinCardinality ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getFiller().accept(this));
-        return result;
+    public Collection<OWLClassExpression> visit(OWLOntology ontology) {
+        ontology.logicalAxioms().forEach(ax -> ax.accept(this));
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectPropertyDomainAxiom axiom) {
-        return axiom.getDomain().accept(this);
+    public Collection<OWLClassExpression> visit(OWLClass ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectExactCardinality ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getFiller().accept(this));
-        return result;
+    public Collection<OWLClassExpression> visit(OWLObjectIntersectionOf ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectMaxCardinality ce) {
-        Set<OWLClassExpression> result = createSet(ce);
-        result.addAll(ce.getFiller().accept(this));
-        return result;
+    public Collection<OWLClassExpression> visit(OWLObjectUnionOf ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectHasSelf ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectComplementOf ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectOneOf ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectSomeValuesFrom ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataSomeValuesFrom ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectAllValuesFrom ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataAllValuesFrom ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectHasValue ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataHasValue ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectMinCardinality ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataMinCardinality ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectExactCardinality ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLObjectPropertyRangeAxiom axiom) {
-        return axiom.getRange().accept(this);
+    public Collection<OWLClassExpression> visit(OWLObjectMaxCardinality ce) {
+        objects.add(ce);
+        return super.visit(ce);
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataExactCardinality ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectHasSelf ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDataMaxCardinality ce) {
-        return createSet(ce);
+    public Collection<OWLClassExpression> visit(OWLObjectOneOf ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDisjointUnionAxiom axiom) {
-        return asSet(axiom.classExpressions().flatMap(
-                ce -> ce.accept(this).stream()));
+    public Collection<OWLClassExpression> visit(OWLDataSomeValuesFrom ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLDeclarationAxiom axiom) {
-        return axiom.getEntity().accept(this);
+    public Collection<OWLClassExpression> visit(OWLDataAllValuesFrom ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLClassAssertionAxiom axiom) {
-        return axiom.getClassExpression().accept(this);
+    public Collection<OWLClassExpression> visit(OWLDataHasValue ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLEquivalentClassesAxiom axiom) {
-        return asSet(axiom.classExpressions().flatMap(
-                ce -> ce.accept(this).stream()));
+    public Collection<OWLClassExpression> visit(OWLDataMinCardinality ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(OWLHasKeyAxiom axiom) {
-        return axiom.getClassExpression().accept(this);
+    public Collection<OWLClassExpression> visit(OWLDataExactCardinality ce) {
+        objects.add(ce);
+        return objects;
     }
 
     @Override
-    public Set<OWLClassExpression> visit(SWRLRule rule) {
-        Set<OWLClassExpression> result = new HashSet<>();
-        rule.body().forEach(a -> result.addAll(a.accept(this)));
-        rule.head().forEach(a -> result.addAll(a.accept(this)));
-        return result;
+    public Collection<OWLClassExpression> visit(OWLDataMaxCardinality ce) {
+        objects.add(ce);
+        return objects;
     }
 }
diff --git a/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLClassExpressionCollectorTestCase.java b/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLClassExpressionCollectorTestCase.java
index 3532131daa..9361f082d0 100755
--- a/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLClassExpressionCollectorTestCase.java
+++ b/contract/src/test/java/org/semanticweb/owlapi/api/test/OWLClassExpressionCollectorTestCase.java
@@ -146,7 +146,7 @@ public OWLClassExpressionCollectorTestCase(OWLAxiom object, String[] expected) {
     @Test
     public void testAssertion() {
         OWLClassExpressionCollector testsubject = new OWLClassExpressionCollector();
-        Set<OWLClassExpression> components = object.accept(testsubject);
+        Collection<OWLClassExpression> components = object.accept(testsubject);
         Set<String> strings = asUnorderedSet(components.stream().map(Object::toString));
         assertEquals(expected, strings);
     }
diff --git a/oboformat/src/main/java/org/obolibrary/obo2owl/OWLAPIOwl2Obo.java b/oboformat/src/main/java/org/obolibrary/obo2owl/OWLAPIOwl2Obo.java
index d46c427e78..4dc3044c2b 100755
--- a/oboformat/src/main/java/org/obolibrary/obo2owl/OWLAPIOwl2Obo.java
+++ b/oboformat/src/main/java/org/obolibrary/obo2owl/OWLAPIOwl2Obo.java
@@ -246,110 +246,7 @@ protected OBODoc tr() {
         setObodoc(new OBODoc());
         preProcess();
         tr(getOWLOntology());
-        OWLAxiomVisitor visitor = new OWLAxiomVisitor() {
-
-            @Override
-            public void visit(OWLDeclarationAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLSubClassOfAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLDisjointClassesAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLEquivalentClassesAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLClassAssertionAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLEquivalentObjectPropertiesAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLSubAnnotationPropertyOfAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLSubObjectPropertyOfAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLObjectPropertyRangeAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLFunctionalObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLSymmetricObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLAsymmetricObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLObjectPropertyDomainAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLInverseFunctionalObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLInverseObjectPropertiesAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLDisjointObjectPropertiesAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLReflexiveObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLTransitiveObjectPropertyAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void visit(OWLSubPropertyChainOfAxiom ax) {
-                tr(ax);
-            }
-
-            @Override
-            public void doDefault(Object o) {
-                if (!(o instanceof OWLAnnotationAssertionAxiom)) {
-                    error((OWLAxiom) o, false);
-                }
-            }
-        };
+        OWLAxiomVisitor visitor = new Translator();
         getOWLOntology().axioms().forEach(ax -> ax.accept(visitor));
         if (!untranslatableAxioms.isEmpty() && !discardUntranslatable) {
             String axiomString = OwlStringTools.translate(untranslatableAxioms, manager);
@@ -1554,6 +1451,111 @@ private void addAltId(String replacedBy, String altId, boolean isClass, boolean
         }
     }
 
+    class Translator implements OWLAxiomVisitor {
+
+        @Override
+        public void visit(OWLDeclarationAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLSubClassOfAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLDisjointClassesAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLEquivalentClassesAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLClassAssertionAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLEquivalentObjectPropertiesAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLSubAnnotationPropertyOfAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLSubObjectPropertyOfAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLObjectPropertyRangeAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLFunctionalObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLSymmetricObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLAsymmetricObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLObjectPropertyDomainAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLInverseFunctionalObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLInverseObjectPropertiesAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLDisjointObjectPropertiesAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLReflexiveObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLTransitiveObjectPropertyAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void visit(OWLSubPropertyChainOfAxiom ax) {
+            tr(ax);
+        }
+
+        @Override
+        public void doDefault(Object o) {
+            if (!(o instanceof OWLAnnotationAssertionAxiom)) {
+                error((OWLAxiom) o, false);
+            }
+        }
+    }
+
     /**
      * Helper class: allow to return two values for the alt id check.
      */
diff --git a/oboformat/src/main/java/org/obolibrary/oboformat/writer/OBOFormatWriter.java b/oboformat/src/main/java/org/obolibrary/oboformat/writer/OBOFormatWriter.java
index 205e23a0ae..7fb96496c7 100755
--- a/oboformat/src/main/java/org/obolibrary/oboformat/writer/OBOFormatWriter.java
+++ b/oboformat/src/main/java/org/obolibrary/oboformat/writer/OBOFormatWriter.java
@@ -717,18 +717,19 @@ private static void appendQualifiers(StringBuilder sb, Clause clause) {
     }
 
     private static CharSequence escapeOboString(String in, EscapeMode mode) {
-        String replace = in.replace("\n", "\\n").replace("\\", "\\\\");
+        String replace = in.replace("\\", "\\\\");
         if (mode == EscapeMode.MOST || mode == EscapeMode.QUOTES) {
             replace = replace.replace("\"", "\\\"");
         }
+        replace = replace.replace("\n", "\\n");
         if (mode == EscapeMode.MOST || mode == EscapeMode.PARENTHESIS) {
-            replace = replace.replace("{", "\\{").replace("}", "\\}");
+            replace = replace.replace("{", "\\{");
         }
         if (mode == EscapeMode.XREF || mode == EscapeMode.XREFLIST) {
             replace = replace.replace(",", "\\,").replace(":", "\\:");
         }
         if (mode == EscapeMode.XREFLIST) {
-            replace = replace.replace("[", "\\[").replace("]", "\\]");
+            replace = replace.replace("]", "\\]");
         }
         return replace;
     }
diff --git a/parsers/src/main/java/org/semanticweb/owlapi/manchestersyntax/renderer/ManchesterOWLSyntaxFrameRenderer.java b/parsers/src/main/java/org/semanticweb/owlapi/manchestersyntax/renderer/ManchesterOWLSyntaxFrameRenderer.java
index d084ec4a11..c5cf8c770d 100755
--- a/parsers/src/main/java/org/semanticweb/owlapi/manchestersyntax/renderer/ManchesterOWLSyntaxFrameRenderer.java
+++ b/parsers/src/main/java/org/semanticweb/owlapi/manchestersyntax/renderer/ManchesterOWLSyntaxFrameRenderer.java
@@ -743,43 +743,7 @@ protected void writeEntitySectionEnd(String type) {
                 o.negativeDataPropertyAssertionAxioms(individual))
             .flatMap(x -> x).sorted(ooc).collect(toList());
         if (!assertions.isEmpty()) {
-            fireSectionRenderingPrepared(FACTS.toString());
-            writeSection(FACTS);
-            writeSpace();
-            writeOntologiesList(o);
-            incrementTab(1);
-            writeNewLine();
-            fireSectionRenderingStarted(FACTS.toString());
-            for (Iterator<OWLPropertyAssertionAxiom<?, ?>> it = assertions.iterator(); it.hasNext();) {
-                OWLPropertyAssertionAxiom<?, ?> ax = it.next();
-                fireSectionItemPrepared(FACTS.toString());
-                Iterator<OWLAnnotation> annos = ax.annotations().iterator();
-                boolean isNotEmpty = annos.hasNext();
-                if (isNotEmpty) {
-                    writeAnnotations(annos);
-                    pushTab(getIndent() + 1);
-                }
-                if (ax instanceof OWLNegativeDataPropertyAssertionAxiom
-                    || ax instanceof OWLNegativeObjectPropertyAssertionAxiom) {
-                    write(NOT);
-                    writeSpace();
-                }
-                ax.getProperty().accept(this);
-                writeSpace();
-                writeSpace();
-                ax.getObject().accept(this);
-                if (isNotEmpty) {
-                    popTab();
-                }
-                fireSectionItemFinished(FACTS.toString());
-                if (it.hasNext()) {
-                    write(",");
-                    writeNewLine();
-                }
-            }
-            popTab();
-            writeNewLine();
-            writeNewLine();
+            handleAssertions(assertions);
         }
         if (!isFiltered(AxiomType.SAME_INDIVIDUAL)) {
             Collection<OWLIndividual> inds = sortedCollection();
@@ -811,6 +775,46 @@ protected void writeEntitySectionEnd(String type) {
         return axioms;
     }
 
+    protected void handleAssertions(List<OWLPropertyAssertionAxiom<?, ?>> assertions) {
+        fireSectionRenderingPrepared(FACTS.toString());
+        writeSection(FACTS);
+        writeSpace();
+        writeOntologiesList(o);
+        incrementTab(1);
+        writeNewLine();
+        fireSectionRenderingStarted(FACTS.toString());
+        for (Iterator<OWLPropertyAssertionAxiom<?, ?>> it = assertions.iterator(); it.hasNext();) {
+            OWLPropertyAssertionAxiom<?, ?> ax = it.next();
+            fireSectionItemPrepared(FACTS.toString());
+            Iterator<OWLAnnotation> annos = ax.annotations().iterator();
+            boolean isNotEmpty = annos.hasNext();
+            if (isNotEmpty) {
+                writeAnnotations(annos);
+                pushTab(getIndent() + 1);
+            }
+            if (ax instanceof OWLNegativeDataPropertyAssertionAxiom
+                || ax instanceof OWLNegativeObjectPropertyAssertionAxiom) {
+                write(NOT);
+                writeSpace();
+            }
+            ax.getProperty().accept(this);
+            writeSpace();
+            writeSpace();
+            ax.getObject().accept(this);
+            if (isNotEmpty) {
+                popTab();
+            }
+            fireSectionItemFinished(FACTS.toString());
+            if (it.hasNext()) {
+                write(",");
+                writeNewLine();
+            }
+        }
+        popTab();
+        writeNewLine();
+        writeNewLine();
+    }
+
     /**
      * @param datatype
      *        the datatype
