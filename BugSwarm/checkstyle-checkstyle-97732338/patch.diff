diff --git a/appveyor.yml b/appveyor.yml
index 0a29fc964a..f0a0f6dbca 100755
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -23,25 +23,75 @@ install:
   - cmd: git config --global core.autocrlf
   - cmd: mvn --version
   - cmd: java -version
+  - cmd: '%CYG_BIN% -qnNdO -R %CYG_ROOT% -s %CYG_MIRROR% -l %CYG_CACHE% -P hg'
+
 cache:
   - C:\maven\
   - C:\Users\appveyor\.m2
+  - C:\cygwin\var\cache\setup
 
 matrix:
   fast_finish: true
 
 environment:
+  global:
+    CYG_BIN: C:\cygwin\setup-x86.exe
+    CYG_ROOT: C:\cygwin
+    CYG_CACHE: C:\cygwin\var\cache\setup
+    CYG_MIRROR: http://cygwin.mirror.constant.com
+    CMD1: " "
+    CMD2: " "
+    CMD3: " "
+    CMD4: " "
+    CMD5: " "
+    CMD6: " "
+    CMD7: " "
+    CMD8: " "
+    CMD9: " "
+    CMD10: " "
+  # We do matrix as Appveyor could fail to finish simple "mvn verify"
+  #    if he loose maven cache (happens from time to time)
   matrix:
-    #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
-    # checkstyle
+    # checkstyle and sevntu.checkstyle
     - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
-      CMD_ARGS: verify -DskipTests -DskipITs -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -e
+      DESC: "checkstyle and sevntu.checkstyle"
+      CMD1: "mvn -e verify -DskipTests -DskipITs -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true"
     # verify without checkstyle
     - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
-      CMD_ARGS: verify -Dcheckstyle.ant.skip=true -e
+      DESC: "verify without checkstyle"
+      CMD1: "mvn -e verify -Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true"
     # site, without verify
     - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
-      CMD_ARGS: site -Dlinkcheck.skip=true -Dmaven.javadoc.skip=true -DskipTests -DskipITs -Dcobertura.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true -e
+      DESC: "site, without verify"
+      CMD1: "mvn -e site -Dlinkcheck.skip=true -Dmaven.javadoc.skip=true -DskipTests"
+      CMD2: "   -DskipITs -Dcobertura.skip=true -Dpmd.skip=true -Dfindbugs.skip=true "
+      CMD3: "   -Dcheckstyle.ant.skip=true"
+    # checkstyle-tester
+    - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
+      DESC: "checkstyle-tester on guava"
+      CMD1: "mvn clean install -DskipTests -DskipITs -Dcobertura.skip=true "
+      CMD2: "    -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true "
+      CMD3: " && git clone -q --depth=10 --branch=master "
+      CMD4: "      https://github.com/checkstyle/contribution C:\\projects\\checkstyle\\contribution "
+      CMD5: " && cd contribution\\checkstyle-tester "
+      CMD6: " && move /Y projects-for-travis.properties projects-to-test-on.properties "
+      CMD7: " && C:\\cygwin\\bin\\bash.exe -lc "
+      CMD8: "          \"cd $APPVEYOR_BUILD_FOLDER/contribution/checkstyle-tester/ ;"
+      CMD9: "               ./launch.sh -Dcheckstyle.config.location=checks-nonjavadoc-error.xml\""
 
 build_script:
-  - mvn clean %CMD_ARGS%
+  - ps: >
+       (get-content env:CMD1) 
+       + (get-content env:CMD2) 
+       + (get-content env:CMD3) 
+       + (get-content env:CMD4) 
+       + (get-content env:CMD5) 
+       + (get-content env:CMD6) 
+       + (get-content env:CMD7) 
+       + (get-content env:CMD8) 
+       + (get-content env:CMD9) 
+       + (get-content env:CMD10) 
+       | Out-File appveyor.cmd -encoding ASCII
+  - ps: get-content appveyor.cmd
+  # We need to use cmd there as ps1 is failing each time error output appear from any command line
+  - appveyor.cmd
diff --git a/config/checkstyle_sevntu_checks.xml b/config/checkstyle_sevntu_checks.xml
index b356e67986..b594fa9569 100755
--- a/config/checkstyle_sevntu_checks.xml
+++ b/config/checkstyle_sevntu_checks.xml
@@ -5,6 +5,12 @@
         "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
 
 <module name="Checker">
+
+    <!-- Filters -->
+    <module name="SuppressionFilter">
+        <property name="file" value="config/sevntu_suppressions.xml"/>
+    </module>
+
     <module name="TreeWalker">
         <module name="StaticMethodCandidate"/>
         <module name="UselessSingleCatchCheck"/>
@@ -59,6 +65,42 @@
             <property name="allowRethrow" value="true"/>
         </module>
         <module name="AvoidNotShortCircuitOperatorsForBoolean"/>
-        <module name="MultipleStringLiteralsExtended"/>
+        <module name="RedundantReturn"/>
+        <module name="WhitespaceBeforeArrayInitializer"/>
+        <module name="InnerClass"/>
+        <module name="EnumValueNameCheck">
+            <property name="objFormat" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
+        </module>
+        <module name="OverridableMethodInConstructor">
+            <property name="checkCloneMethod" value="true"/>
+            <property name="checkReadObjectMethod" value="true"/>
+            <property name="matchMethodsByArgCount" value="true"/>
+        </module>
+        <!--commented till https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/410-->
+        <!--<module name="AvoidModifiersForTypes"/>-->
+        <module name="ForbidAnnotation">
+            <property name="annotationNames" value="Ignore"/>
+            <property name="annotationTargets" value="METHOD_DEF"/>
+        </module>
+        <module name="RequiredParameterForAnnotation">
+            <property name="annotationName" value="Generated"/>
+            <property name="requiredParameters" value="value"/>
+        </module>
+        <module name="ForbidCertainImports">
+            <property name="packageNameRegexp" value="^.*(api|utils).*$"/>
+            <property name="forbiddenImportsRegexp" value="^.*checks.*$"/>
+        </module>
+        <module name="LineLengthExtended">
+            <property name="max" value="100"/>
+            <property name="ignoreClass" value="true"/>
+            <property name="ignoreConstructor" value="true"/>
+            <property name="ignoreField" value="true"/>
+            <property name="ignoreMethod" value="true"/>
+            <property name="ignorePattern" value="^ *\* *[^ ]+$"/>
+        </module>
+        <module name="AvoidHidingCauseException"/>
+        <module name="MultipleStringLiteralsExtended">
+            <property name="highlightAllDuplicates" value="true"/>
+        </module>    
     </module>
 </module>
diff --git a/config/sevntu_suppressions.xml b/config/sevntu_suppressions.xml
new file mode 100755
index 0000000000..cf68d9d908
--- /dev/null
+++ b/config/sevntu_suppressions.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE suppressions PUBLIC
+        "-//Puppy Crawl//DTD Suppressions 1.1//EN"
+        "http://www.puppycrawl.com/dtds/suppressions_1_1.dtd">
+
+<suppressions>
+
+    <!-- Fixing these cases will decrease code readability -->
+    <suppress checks="MultipleStringLiteralsExtended"
+              files="JavadocStyleCheck\.java|AbstractTypeAwareCheck\.java|XMLLogger\.java"/>
+    <suppress checks="MultipleStringLiteralsExtended"
+              files=".*[\\/]src[\\/](test|it)[\\/]"/>
+
+</suppressions>
\ No newline at end of file
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
index de132ae18a..3aee554a28 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java
@@ -27,7 +27,6 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.io.StringReader;
-import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetDecoder;
 import java.nio.charset.CodingErrorAction;
@@ -125,9 +124,7 @@ public FileText(File file, String charsetName) throws IOException {
         }
         catch (final UnsupportedCharsetException ex) {
             final String message = "Unsupported charset: " + charsetName;
-            final UnsupportedEncodingException ex2 = new UnsupportedEncodingException(message);
-            ex2.initCause(ex);
-            throw ex2;
+            throw new IllegalStateException(message, ex);
         }
 
         fullText = readFile(file, decoder);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
index 378fd0710e..2c46115f25 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java
@@ -463,11 +463,10 @@ private void setClazz(Class<?> clazz) {
 
         @Override
         public String toString() {
-            final String inCLass = ", class=";
             return "RegularClass[name=" + getName()
-                + inCLass + surroundingClass
+                + ", in class=" + surroundingClass
                 + ", loadable=" + loadable
-                + inCLass + classObj + "]";
+                + ", class=" + classObj + "]";
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheck.java
index 89c3660ce4..b8682b9c86 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AvoidInlineConditionalsCheck.java
@@ -46,7 +46,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.QUESTION};
+        return new int[] {TokenTypes.QUESTION};
     }
 
     @Override
@@ -56,7 +56,7 @@
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{TokenTypes.QUESTION};
+        return new int[] {TokenTypes.QUESTION};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 79ac05674e..b1d6e2bae3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -92,7 +92,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.CASE_GROUP};
+        return new int[] {TokenTypes.CASE_GROUP};
     }
 
     @Override
@@ -102,7 +102,7 @@
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{TokenTypes.CASE_GROUP};
+        return new int[] {TokenTypes.CASE_GROUP};
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
index 81d038364c..a9d81c8139 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java
@@ -47,7 +47,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.CLASS_DEF};
+        return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
index 2f41a1bfaa..0aba4eea40 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java
@@ -54,7 +54,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.LITERAL_SWITCH};
+        return new int[] {TokenTypes.LITERAL_SWITCH};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
index 7ee458aa8d..d613fefffc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java
@@ -94,7 +94,7 @@
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{
+        return new int[] {
             TokenTypes.SEMI, TokenTypes.FOR_INIT,
             TokenTypes.FOR_ITERATOR,
         };
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
index 9e65e14c40..f4501750d4 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java
@@ -72,9 +72,7 @@
 
     @Override
     public int[] getRequiredTokens() {
-        return new int[]{
-            TokenTypes.LITERAL_RETURN,
-        };
+        return new int[] {TokenTypes.LITERAL_RETURN};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
index 682600411c..d9b6341e5f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java
@@ -60,7 +60,7 @@
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF};
+        return new int[] {TokenTypes.CLASS_DEF, TokenTypes.CTOR_DEF};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
index 05c9e32c28..e908450d03 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java
@@ -81,7 +81,7 @@
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{
+        return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
@@ -115,7 +115,7 @@
 
     @Override
     public int[] getRequiredTokens() {
-        return new int[]{
+        return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
@@ -149,7 +149,7 @@
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{
+        return new int[] {
             TokenTypes.CLASS_DEF,
             TokenTypes.INTERFACE_DEF,
             TokenTypes.METHOD_DEF,
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
index d8b186f52c..c74b06d559 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java
@@ -96,17 +96,17 @@ public void setFormat(String format) {
 
     @Override
     public int[] getDefaultTokens() {
-        return new int[]{TokenTypes.CLASS_DEF};
+        return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getRequiredTokens() {
-        return new int[]{TokenTypes.CLASS_DEF};
+        return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{TokenTypes.CLASS_DEF};
+        return new int[] {TokenTypes.CLASS_DEF};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheck.java
index 5a572b34a3..3d7f53b46a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/CatchParameterNameCheck.java
@@ -76,7 +76,7 @@ public CatchParameterNameCheck() {
 
     @Override
     public int[] getAcceptableTokens() {
-        return new int[]{TokenTypes.PARAMETER_DEF};
+        return new int[] {TokenTypes.PARAMETER_DEF};
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
index 523b1a2526..47f4ae17d3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTableModel.java
@@ -222,7 +222,7 @@ public void removeTreeModelListener(TreeModelListener listener) {
      * @param children An array of Object containing the inserted, removed, or changed objects.
      * @see EventListenerList
      */
-    void fireTreeStructureChanged(Object source, Object[] path,
+    final void fireTreeStructureChanged(Object source, Object[] path,
                                   int[] childIndices,
                                   Object... children) {
         // Guaranteed to return a non-null array
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
index 920a5775c5..378fd4f4b4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -19,7 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle;
 
-import static org.hamcrest.CoreMatchers.anyOf;
+import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.instanceOf;
 import static org.hamcrest.core.StringEndsWith.endsWith;
 import static org.junit.Assert.assertEquals;
@@ -73,8 +73,7 @@ public void testNonAccessibleFile() throws IOException {
             fail("FileNotFoundException is expected, since access to the file was denied!");
         }
         catch (FileNotFoundException ex) {
-            assertThat(ex.getMessage(), anyOf(endsWith("file.output (Permission denied)"),
-                endsWith("file.output (Access is denied)")));
+            assertThat(ex.getMessage(), containsString("file.output"));
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
index e48c621026..2741f79a18 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
@@ -24,7 +24,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
 
 import org.junit.Test;
 
@@ -37,7 +36,7 @@ public void testUnsupportedCharset() throws IOException {
             new FileText(new File("any name"), charsetName);
             fail("UnsupportedEncodingException is expected");
         }
-        catch (UnsupportedEncodingException ex) {
+        catch (IllegalStateException ex) {
             assertEquals("Unsupported charset: " + charsetName, ex.getMessage());
         }
 
