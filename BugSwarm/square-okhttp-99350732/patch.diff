diff --git a/okcurl/src/main/java/okhttp3/curl/Main.java b/okcurl/src/main/java/okhttp3/curl/Main.java
index 9d48d51532..c650b68fec 100755
--- a/okcurl/src/main/java/okhttp3/curl/Main.java
+++ b/okcurl/src/main/java/okhttp3/curl/Main.java
@@ -38,7 +38,6 @@
 import javax.net.ssl.SSLSocketFactory;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
-import okhttp3.ConnectionPool;
 import okhttp3.Headers;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
@@ -181,8 +180,6 @@ private OkHttpClient createClient() {
       client.setSslSocketFactory(createInsecureSslSocketFactory());
       client.setHostnameVerifier(createInsecureHostnameVerifier());
     }
-    // If we don't set this reference, there's no way to clean shutdown persistent connections.
-    client.setConnectionPool(ConnectionPool.getDefault());
     return client;
   }
 
diff --git a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
index 82ee698cdd..b86ac5aff9 100755
--- a/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/okhttp3/logging/HttpLoggingInterceptorTest.java
@@ -66,7 +66,6 @@ private void setLevel(Level level) {
   @Before public void setUp() {
     client.networkInterceptors().add(networkInterceptor);
     client.interceptors().add(applicationInterceptor);
-    client.setConnectionPool(null);
 
     host = server.getHostName() + ":" + server.getPort();
     url = server.url("/");
diff --git a/okhttp-tests/src/test/java/okhttp3/CacheTest.java b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
index 344cd0c416..1b6073f41d 100755
--- a/okhttp-tests/src/test/java/okhttp3/CacheTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/CacheTest.java
@@ -999,10 +999,6 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .clearHeaders()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    ConnectionPool pool = ConnectionPool.getDefault();
-    pool.evictAll();
-    client.setConnectionPool(pool);
-
     assertEquals("A", get(server.url("/")).body().string());
     assertEquals("A", get(server.url("/")).body().string());
     assertEquals(1, client.getConnectionPool().getIdleConnectionCount());
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
index f04871079c..bb7a41daa1 100755
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionPoolTest.java
@@ -22,6 +22,7 @@
 import java.util.Collections;
 import java.util.concurrent.TimeUnit;
 import javax.net.SocketFactory;
+import okhttp3.internal.Internal;
 import okhttp3.internal.RecordingOkAuthenticator;
 import okhttp3.internal.http.StreamAllocation;
 import okhttp3.internal.io.RealConnection;
@@ -32,11 +33,6 @@
 import static org.junit.Assert.assertTrue;
 
 public final class ConnectionPoolTest {
-  private final Runnable emptyRunnable = new Runnable() {
-    @Override public void run() {
-    }
-  };
-
   private final Address addressA = newAddress("a");
   private final Route routeA1 = newRoute(addressA);
   private final Address addressB = newAddress("b");
@@ -44,9 +40,13 @@
   private final Address addressC = newAddress("c");
   private final Route routeC1 = newRoute(addressC);
 
+  static {
+    Internal.initializeInstanceForTests();
+  }
+
   @Test public void connectionsEvictedWhenIdleLongEnough() throws Exception {
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
-    pool.setCleanupRunnableForTest(emptyRunnable);
+    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started.
 
     RealConnection c1 = newConnection(pool, routeA1, 50L);
 
@@ -78,7 +78,7 @@
 
   @Test public void inUseConnectionsNotEvicted() throws Exception {
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
-    pool.setCleanupRunnableForTest(emptyRunnable);
+    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started.
 
     RealConnection c1 = newConnection(pool, routeA1, 50L);
     StreamAllocation streamAllocation = new StreamAllocation(pool, addressA);
@@ -102,7 +102,7 @@
 
   @Test public void cleanupPrioritizesEarliestEviction() throws Exception {
     ConnectionPool pool = new ConnectionPool(Integer.MAX_VALUE, 100L, TimeUnit.NANOSECONDS);
-    pool.setCleanupRunnableForTest(emptyRunnable);
+    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started.
 
     RealConnection c1 = newConnection(pool, routeA1, 75L);
     RealConnection c2 = newConnection(pool, routeB1, 50L);
@@ -134,7 +134,7 @@
 
   @Test public void oldestConnectionsEvictedIfIdleLimitExceeded() throws Exception {
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
-    pool.setCleanupRunnableForTest(emptyRunnable);
+    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started.
 
     RealConnection c1 = newConnection(pool, routeA1, 50L);
     RealConnection c2 = newConnection(pool, routeB1, 75L);
@@ -158,7 +158,7 @@
 
   @Test public void leakedAllocation() throws Exception {
     ConnectionPool pool = new ConnectionPool(2, 100L, TimeUnit.NANOSECONDS);
-    pool.setCleanupRunnableForTest(emptyRunnable);
+    pool.cleanupRunning = true; // Prevent the cleanup runnable from being started.
 
     RealConnection c1 = newConnection(pool, routeA1, 0L);
     allocateAndLeakAllocation(pool, c1);
diff --git a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
index a2ac36dcd7..627e9678ef 100755
--- a/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/ConnectionReuseTest.java
@@ -101,7 +101,7 @@
   }
 
   @Test public void connectionsAreNotReusedIfPoolIsSizeZero() throws Exception {
-    client.setConnectionPool(new ConnectionPool(0, 5000));
+    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));
     server.enqueue(new MockResponse().setBody("a"));
     server.enqueue(new MockResponse().setBody("b"));
 
@@ -112,7 +112,7 @@
   }
 
   @Test public void connectionsReusedWithRedirectEvenIfPoolIsSizeZero() throws Exception {
-    client.setConnectionPool(new ConnectionPool(0, 5000));
+    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));
     server.enqueue(new MockResponse()
         .setResponseCode(301)
         .addHeader("Location: /b")
@@ -129,7 +129,7 @@
   }
 
   @Test public void connectionsNotReusedWithRedirectIfDiscardingResponseIsSlow() throws Exception {
-    client.setConnectionPool(new ConnectionPool(0, 5000));
+    client.setConnectionPool(new ConnectionPool(0, 5, TimeUnit.SECONDS));
     server.enqueue(new MockResponse()
         .setResponseCode(301)
         .addHeader("Location: /b")
diff --git a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
index 5d153e430a..ea77043c40 100755
--- a/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/URLConnectionTest.java
@@ -1309,10 +1309,6 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
         .clearHeaders()
         .setSocketPolicy(DISCONNECT_AT_END));
 
-    ConnectionPool pool = ConnectionPool.getDefault();
-    pool.evictAll();
-    client.client().setConnectionPool(pool);
-
     HttpURLConnection connection = client.open(server.url("/").url());
     assertContent("{}", connection);
     assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
index 25050ca778..3567bf92a9 100755
--- a/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/framed/HttpOverSpdyTest.java
@@ -32,8 +32,8 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLContext;
 import okhttp3.Cache;
-import okhttp3.ConnectionPool;
 import okhttp3.HttpUrl;
+import okhttp3.JavaNetAuthenticator;
 import okhttp3.OkHttpClient;
 import okhttp3.OkUrlFactory;
 import okhttp3.Protocol;
@@ -41,7 +41,6 @@
 import okhttp3.internal.RecordingAuthenticator;
 import okhttp3.internal.SslContextBuilder;
 import okhttp3.internal.Util;
-import okhttp3.JavaNetAuthenticator;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -396,9 +395,6 @@ protected HttpOverSpdyTest(Protocol protocol) {
 
   /** https://github.com/square/okhttp/issues/1191 */
   @Test public void disconnectWithStreamNotEstablished() throws Exception {
-    ConnectionPool connectionPool = new ConnectionPool(5, 5000);
-    client.client().setConnectionPool(connectionPool);
-
     server.enqueue(new MockResponse().setBody("abc"));
 
     // Disconnect before the stream is created. A connection is still established!
@@ -407,7 +403,7 @@ protected HttpOverSpdyTest(Protocol protocol) {
     connection1.disconnect();
 
     // That connection is pooled, and it works.
-    assertEquals(1, connectionPool.getMultiplexedConnectionCount());
+    assertEquals(1, client.client().getConnectionPool().getMultiplexedConnectionCount());
     HttpURLConnection connection2 = client.open(server.url("/").url());
     assertContent("abc", connection2, 3);
     assertEquals(0, server.takeRequest().getSequenceNumber());
diff --git a/okhttp-urlconnection/src/main/java/okhttp3/internal/SystemPropertiesConnectionPool.java b/okhttp-urlconnection/src/main/java/okhttp3/internal/SystemPropertiesConnectionPool.java
new file mode 100755
index 0000000000..e0c9523fb0
--- /dev/null
+++ b/okhttp-urlconnection/src/main/java/okhttp3/internal/SystemPropertiesConnectionPool.java
@@ -0,0 +1,67 @@
+/*
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package okhttp3.internal;
+
+import java.util.concurrent.TimeUnit;
+import okhttp3.ConnectionPool;
+
+/**
+ * A shared connection pool that uses system properties for tuning parameters:
+ *
+ * <ul>
+ *     <li>{@code http.keepAlive} true if HTTP and SPDY connections should be pooled at all. Default
+ *         is true.
+ *     <li>{@code http.maxConnections} maximum number of idle connections to each to keep in the
+ *         pool. Default is 5.
+ *     <li>{@code http.keepAliveDuration} Time in milliseconds to keep the connection alive in the
+ *         pool before closing it. Default is 5 minutes. This property isn't used by {@code
+ *         HttpURLConnection}.
+ * </ul>
+ *
+ * <p>The default instance <i>doesn't</i> adjust its configuration as system properties are changed.
+ * This assumes that the applications that set these parameters do so before making HTTP
+ * connections, and that this class is initialized lazily.
+ */
+public final class SystemPropertiesConnectionPool {
+  private static final long DEFAULT_KEEP_ALIVE_DURATION_MS = 5 * 60 * 1000; // 5 min
+
+  public static final ConnectionPool INSTANCE;
+  static {
+    String keepAlive = System.getProperty("http.keepAlive");
+    int maxIdleConnections;
+    if (keepAlive != null && !Boolean.parseBoolean(keepAlive)) {
+      maxIdleConnections = 0;
+    } else {
+      String maxIdleConnectionsString = System.getProperty("http.maxConnections");
+      if (maxIdleConnectionsString != null) {
+        maxIdleConnections = Integer.parseInt(maxIdleConnectionsString);
+      } else {
+        maxIdleConnections = 5;
+      }
+    }
+
+    String keepAliveDurationString = System.getProperty("http.keepAliveDuration");
+    long keepAliveDurationMs = keepAliveDurationString != null
+        ? Long.parseLong(keepAliveDurationString)
+        : DEFAULT_KEEP_ALIVE_DURATION_MS;
+
+    INSTANCE = new ConnectionPool(maxIdleConnections, keepAliveDurationMs, TimeUnit.MILLISECONDS);
+  }
+
+  private SystemPropertiesConnectionPool() {
+  }
+}
diff --git a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
index 3943afa4c4..6b6354042d 100755
--- a/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/okhttp3/UrlConnectionCacheTest.java
@@ -847,10 +847,6 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
         .clearHeaders()
         .setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));
 
-    ConnectionPool pool = ConnectionPool.getDefault();
-    pool.evictAll();
-    client.client().setConnectionPool(pool);
-
     assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals("A", readAscii(client.open(server.url("/").url())));
     assertEquals(1, client.client().getConnectionPool().getIdleConnectionCount());
diff --git a/okhttp/src/main/java/okhttp3/ConnectionPool.java b/okhttp/src/main/java/okhttp3/ConnectionPool.java
index e10935c3c7..d920bd759a 100755
--- a/okhttp/src/main/java/okhttp3/ConnectionPool.java
+++ b/okhttp/src/main/java/okhttp3/ConnectionPool.java
@@ -23,7 +23,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Executor;
-import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import okhttp3.internal.Internal;
@@ -38,57 +38,21 @@
  * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP requests that share
  * the same {@link Address} may share a {@link Connection}. This class implements the policy of
  * which connections to keep open for future use.
- *
- * <p>The {@link #getDefault() system-wide default} uses system properties for tuning parameters:
- *
- * <ul>
- *     <li>{@code http.keepAlive} true if HTTP and SPDY connections should be pooled at all. Default
- *         is true.
- *     <li>{@code http.maxConnections} maximum number of idle connections to each to keep in the
- *         pool. Default is 5.
- *     <li>{@code http.keepAliveDuration} Time in milliseconds to keep the connection alive in the
- *         pool before closing it. Default is 5 minutes. This property isn't used by {@code
- *         HttpURLConnection}.
- * </ul>
- *
- * <p>The default instance <i>doesn't</i> adjust its configuration as system properties are changed.
- * This assumes that the applications that set these parameters do so before making HTTP
- * connections, and that this class is initialized lazily.
  */
 public final class ConnectionPool {
-  private static final long DEFAULT_KEEP_ALIVE_DURATION_MS = 5 * 60 * 1000; // 5 min
-
-  private static final ConnectionPool systemDefault;
-
-  static {
-    String keepAlive = System.getProperty("http.keepAlive");
-    String keepAliveDuration = System.getProperty("http.keepAliveDuration");
-    String maxIdleConnections = System.getProperty("http.maxConnections");
-    long keepAliveDurationMs = keepAliveDuration != null
-        ? Long.parseLong(keepAliveDuration)
-        : DEFAULT_KEEP_ALIVE_DURATION_MS;
-    if (keepAlive != null && !Boolean.parseBoolean(keepAlive)) {
-      systemDefault = new ConnectionPool(0, keepAliveDurationMs);
-    } else if (maxIdleConnections != null) {
-      systemDefault = new ConnectionPool(Integer.parseInt(maxIdleConnections), keepAliveDurationMs);
-    } else {
-      systemDefault = new ConnectionPool(5, keepAliveDurationMs);
-    }
-  }
-
   /**
-   * A background thread is used to cleanup expired connections. There will be, at most, a single
-   * thread running per connection pool. We use a thread pool executor because it can shrink to zero
-   * threads, permitting this pool to be garbage collected.
+   * Background threads are used to cleanup expired connections. There will be at most a single
+   * thread running per connection pool. The thread pool executor permits the pool itself to be
+   * garbage collected.
    */
-  private final Executor executor = new ThreadPoolExecutor(
-      0 /* corePoolSize */, 1 /* maximumPoolSize */, 60L /* keepAliveTime */, TimeUnit.SECONDS,
-      new LinkedBlockingQueue<Runnable>(), Util.threadFactory("OkHttp ConnectionPool", true));
+  private static final Executor executor = new ThreadPoolExecutor(0 /* corePoolSize */,
+      Integer.MAX_VALUE /* maximumPoolSize */, 60L /* keepAliveTime */, TimeUnit.SECONDS,
+      new SynchronousQueue<Runnable>(), Util.threadFactory("OkHttp ConnectionPool", true));
 
   /** The maximum number of idle connections for each address. */
   private final int maxIdleConnections;
   private final long keepAliveDurationNs;
-  private Runnable cleanupRunnable = new Runnable() {
+  private final Runnable cleanupRunnable = new Runnable() {
     @Override public void run() {
       while (true) {
         long waitNanos = cleanup(System.nanoTime());
@@ -109,9 +73,15 @@
 
   private final Deque<RealConnection> connections = new ArrayDeque<>();
   final RouteDatabase routeDatabase = new RouteDatabase();
+  boolean cleanupRunning;
 
-  public ConnectionPool(int maxIdleConnections, long keepAliveDurationMs) {
-    this(maxIdleConnections, keepAliveDurationMs, TimeUnit.MILLISECONDS);
+  /**
+   * Create a new connection pool with tuning parameters appropriate for a single-user application.
+   * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently
+   * this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity.
+   */
+  public ConnectionPool() {
+    this(5, 5, TimeUnit.MINUTES);
   }
 
   public ConnectionPool(int maxIdleConnections, long keepAliveDuration, TimeUnit timeUnit) {
@@ -124,10 +94,6 @@ public ConnectionPool(int maxIdleConnections, long keepAliveDuration, TimeUnit t
     }
   }
 
-  public static ConnectionPool getDefault() {
-    return systemDefault;
-  }
-
   /** Returns the number of idle connections in the pool. */
   public synchronized int getIdleConnectionCount() {
     int total = 0;
@@ -179,7 +145,8 @@ RealConnection get(Address address, StreamAllocation streamAllocation) {
 
   void put(RealConnection connection) {
     assert (Thread.holdsLock(this));
-    if (connections.isEmpty()) {
+    if (!cleanupRunning) {
+      cleanupRunning = true;
       executor.execute(cleanupRunnable);
     }
     connections.add(connection);
@@ -266,6 +233,7 @@ long cleanup(long now) {
         return keepAliveDurationNs;
       } else {
         // No connections, idle or in use.
+        cleanupRunning = false;
         return -1;
       }
     }
@@ -307,8 +275,4 @@ private int pruneAndGetAllocationCount(RealConnection connection, long now) {
 
     return references.size();
   }
-
-  void setCleanupRunnableForTest(Runnable cleanupRunnable) {
-    this.cleanupRunnable = cleanupRunnable;
-  }
 }
diff --git a/okhttp/src/main/java/okhttp3/OkHttpClient.java b/okhttp/src/main/java/okhttp3/OkHttpClient.java
index 3d47da64c7..208109e483 100755
--- a/okhttp/src/main/java/okhttp3/OkHttpClient.java
+++ b/okhttp/src/main/java/okhttp3/OkHttpClient.java
@@ -134,7 +134,7 @@ public void apply(ConnectionSpec tlsConfiguration, SSLSocket sslSocket, boolean
   private CertificatePinner certificatePinner;
   private Authenticator proxyAuthenticator;
   private Authenticator authenticator;
-  private ConnectionPool connectionPool;
+  private ConnectionPool connectionPool = new ConnectionPool();
   private Dns dns;
   private boolean followSslRedirects = true;
   private boolean followRedirects = true;
@@ -410,10 +410,10 @@ public Authenticator getProxyAuthenticator() {
   /**
    * Sets the connection pool used to recycle HTTP and HTTPS connections.
    *
-   * <p>If unset, the {@link ConnectionPool#getDefault() system-wide default} connection pool will
-   * be used.
+   * <p>If unset, a new connection pool will be used.
    */
   public OkHttpClient setConnectionPool(ConnectionPool connectionPool) {
+    if (connectionPool == null) throw new NullPointerException("connectionPool == null");
     this.connectionPool = connectionPool;
     return this;
   }
@@ -611,9 +611,6 @@ OkHttpClient copyWithDefaults() {
     if (result.proxyAuthenticator == null) {
       result.proxyAuthenticator = Authenticator.NONE;
     }
-    if (result.connectionPool == null) {
-      result.connectionPool = ConnectionPool.getDefault();
-    }
     if (result.protocols == null) {
       result.protocols = DEFAULT_PROTOCOLS;
     }
