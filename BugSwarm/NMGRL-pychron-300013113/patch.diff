diff --git a/pychron/dvc/dvc_database.py b/pychron/dvc/dvc_database.py
index 7d50478584..4f6f8b2c8f 100755
--- a/pychron/dvc/dvc_database.py
+++ b/pychron/dvc/dvc_database.py
@@ -628,18 +628,19 @@ def add_material(self, name, grainsize=None):
                 a = self._add_item(a)
             return a
 
-    def add_sample(self, name, project, pi, material, grainsize=None, note=''):
+    def add_sample(self, name, project, pi, material, grainsize=None, note='',
+                   igsn='', lat=0, lon=0):
         with self.session_ctx():
             ret = self.get_sample(name, project, pi, material, grainsize)
             if ret is None:
                 self.debug('Adding sample {},{},{},{}'.format(name, project, pi, material))
                 p = self.get_project(project, pi)
-                a = SampleTbl(name=name, note=note)
+                a = SampleTbl(name=name, note=note, lat=lat, lon=lon, igsn=igsn)
                 if p is not None:
                     a.project = p
                     m = self.get_material(material, grainsize)
                     if m is not None:
-                        a.material = m
+                        a.materialID = m.id
                         ret = self._add_item(a)
                     else:
                         self.debug('No material={}, grainsize={}'.format(material, grainsize))
diff --git a/pychron/entry/tasks/sample/sample_entry.py b/pychron/entry/tasks/sample/sample_entry.py
index b3bfa313be..fc68c494b3 100755
--- a/pychron/entry/tasks/sample/sample_entry.py
+++ b/pychron/entry/tasks/sample/sample_entry.py
@@ -135,7 +135,7 @@ class SampleSpec(Spec):
     def todump(self):
         return {'name': str(self.name), 'project': self.project.todump(),
                 'lat': self.lat, 'lon': self.lon,
-                'igsn': self.isgn,
+                'igsn': self.igsn,
                 'material': self.material.todump(),
                 'note': self.note}
 
@@ -299,14 +299,14 @@ def _save(self):
                         p.added = True
                         dvc.commit()
 
-        with dvc.session_ctx(use_parent_session=False):
-            for m in self._materials:
+        for m in self._materials:
+            with dvc.session_ctx(use_parent_session=False):
                 if dvc.add_material(m.name, m.grainsize or None):
                     m.added = True
                     dvc.commit()
 
-        with dvc.session_ctx(use_parent_session=False):
-            for s in self._samples:
+        for s in self._samples:
+            with dvc.session_ctx(use_parent_session=False):
                 if not s.name:
                     self.warning_dialog('A Sample name is required')
                     continue
@@ -396,6 +396,7 @@ def _add_sample_button_fired(self):
                                             lat=self.lat,
                                             lon=self.lon,
                                             igsn=self.igsn,
+                                            note=self.note,
                                             project=project_spec,
                                             material=material_spec))
             self._backup()
diff --git a/pychron/experiment/automated_run/persistence_spec.py b/pychron/experiment/automated_run/persistence_spec.py
index b83e5e5704..eb9dcc3220 100755
--- a/pychron/experiment/automated_run/persistence_spec.py
+++ b/pychron/experiment/automated_run/persistence_spec.py
@@ -60,7 +60,7 @@ class PersistenceSpec(HasTraits):
     spec_dict = Dict
     defl_dict = Dict
     gains = Dict
-trap = Float
+    trap = Float
     emission = Float
     active_detectors = List
 
diff --git a/pychron/hardware/actuators/actuator.py b/pychron/hardware/actuators/actuator.py
index 4a1c2f1485..8e9c1003f0 100755
--- a/pychron/hardware/actuators/actuator.py
+++ b/pychron/hardware/actuators/actuator.py
@@ -35,6 +35,7 @@
                 ArduinoGPActuator='pychron.hardware.arduino.arduino_gp_actuator',
                 QtegraGPActuator='pychron.hardware.actuators.qtegra_gp_actuator',
                 PychronGPActuator='pychron.hardware.actuators.pychron_gp_actuator',
+                NGXGPActuator='pychron.hardware.actuators.ngx_gp_actuator',
                 NMGRLFurnaceActuator='pychron.hardware.actuators.nmgrl_furnace_actuator',
                 DummyGPActuator='pychron.hardware.actuators.dummy_gp_actuator',
                 RPiGPIO='pychron.hardware.rpi_gpio')
diff --git a/pychron/hardware/actuators/ngx_gp_actuator.py b/pychron/hardware/actuators/ngx_gp_actuator.py
new file mode 100755
index 0000000000..b88291c36e
--- /dev/null
+++ b/pychron/hardware/actuators/ngx_gp_actuator.py
@@ -0,0 +1,73 @@
+# ===============================================================================
+# Copyright 2011 Jake Ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+
+# ========== standard library imports ==========
+
+# ========== local library imports =============
+from gp_actuator import GPActuator
+from pychron.globals import globalv
+
+
+class NGXGPActuator(GPActuator):
+    """
+
+    """
+
+    def get_state_checksum(self, keys):
+        return 0
+
+    def get_channel_state(self, obj, verbose=False, **kw):
+        """
+        """
+
+        cmd = 'GetValveStatus {}'.format(obj.address)
+
+        s = self.ask(cmd, verbose=verbose)
+
+        if s is not None:
+            if s.strip() in 'True':
+                return True
+            else:
+                return False
+        else:
+            return False
+
+    def close_channel(self, obj):
+        """
+        """
+
+        cmd = 'CloseValve {}'.format(obj.address)
+
+        r = self.ask(cmd)
+        if r is None and globalv.communication_simulation:
+            return True
+
+        if r is not None and r.strip() == 'OK':
+            return self.get_channel_state(obj) is False
+
+    def open_channel(self, obj):
+        """
+        """
+        cmd = 'OpenValve {}'.format(obj.address)
+
+        r = self.ask(cmd)
+        if r is None and globalv.communication_simulation:
+            return True
+
+        if r is not None and r.strip() == 'OK':
+            return self.get_channel_state(obj) is True
+
+# ============= EOF =====================================
diff --git a/pychron/hardware/agilent/agilent_gp_actuator.py b/pychron/hardware/agilent/agilent_gp_actuator.py
index a9048eb430..54b9d2f345 100755
--- a/pychron/hardware/agilent/agilent_gp_actuator.py
+++ b/pychron/hardware/agilent/agilent_gp_actuator.py
@@ -105,6 +105,7 @@ def _get_error(self):
         if not self.simulation:
             s = self.ask(cmd)
             if s is not None:
+                s = s.strip()
                 if s != '+0,"No error"':
                     error = s
 
diff --git a/pychron/hardware/core/base_core_device.py b/pychron/hardware/core/base_core_device.py
index 8a05829ecd..cfbb4f8a46 100755
--- a/pychron/hardware/core/base_core_device.py
+++ b/pychron/hardware/core/base_core_device.py
@@ -301,7 +301,7 @@ def _parse_response(self, v):
 
     def _communicate_hook(self, cmd, r):
         self.last_command = cmd
-        self.last_response = r if r else ''
+        self.last_response = str(r) if r else ''
 
     def _load_hook(self, config):
         pass
diff --git a/pychron/hardware/core/communicators/gpib_communicator.py b/pychron/hardware/core/communicators/gpib_communicator.py
index d236bc3b09..c5235dc0c1 100755
--- a/pychron/hardware/core/communicators/gpib_communicator.py
+++ b/pychron/hardware/core/communicators/gpib_communicator.py
@@ -14,8 +14,6 @@
 # limitations under the License.
 # ===============================================================================
 
-
-
 # ============= enthought library imports =======================
 # from traits.api import HasTraits, on_trait_change, Str, Int, Float, Button
 # from traitsui.api import View, Item, Group, HGroup, VGroup
@@ -23,15 +21,41 @@
 # ============= standard library imports ========================
 # ============= local library imports  ==========================
 from pychron.hardware.core.communicators.communicator import Communicator
-
-# NI_PATH = '/Library/Frameworks/NI488.framework/NI488'
+from pychron.hardware.core.communicators.visa import resource_manager
 
 
 class GpibCommunicator(Communicator):
-    pass
+    """
+        uses PyVisa as main interface to GPIB. currently (8/27/14) need to use a 32bit python version.
+        The NI488.2 framework does not work with a 64bit distribution
+    """
+
+    primary_address = 0
+    secondary_address = 0
+
+    def open(self, *args, **kw):
+        self.debug('openning gpib communicator')
+        self.handle = resource_manager.get_instrument('GPIB{}::{}::INSTR'.format(self.primary_address,
+                                                                                 self.secondary_address))
+        if self.handle is not None:
+            self.simulation = False
+            return True
+
+    def load(self, config, path, **kw):
+        self.set_attribute(config, 'primary_address', 'Communications', 'primary_address')
+        self.set_attribute(config, 'secondary_address', 'Communications', 'secondary_address', optional=False)
+        return True
+
+    def trigger(self):
+        self.handle.trigger()
+
+    def ask(self, cmd):
+        return self.handle.ask(cmd)
 
+    def tell(self, cmd):
+        self.handle.write(cmd)
 
-#     address = 16
+# address = 16
 #
 #     def load(self, config, path):
 #         return True
diff --git a/pychron/hardware/core/communicators/visa.py b/pychron/hardware/core/communicators/visa.py
new file mode 100755
index 0000000000..9741e096ab
--- /dev/null
+++ b/pychron/hardware/core/communicators/visa.py
@@ -0,0 +1,20 @@
+# ===============================================================================
+# Copyright 2017 ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+import pyvisa
+
+resource_manager = pyvisa.ResourceManager()
+
+# ============= EOF =============================================
diff --git a/pychron/hardware/core/communicators/visa_communicator.py b/pychron/hardware/core/communicators/visa_communicator.py
new file mode 100755
index 0000000000..ea7028cdee
--- /dev/null
+++ b/pychron/hardware/core/communicators/visa_communicator.py
@@ -0,0 +1,68 @@
+# ===============================================================================
+# Copyright 2017 ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+
+# ============= standard library imports ========================
+# ============= local library imports  ==========================
+from pychron.hardware.core.communicators.communicator import Communicator
+from pychron.hardware.core.communicators.visa import resource_manager
+from pyvisa.constants import StatusCode
+
+class VisaCommunicator(Communicator):
+    """
+        uses PyVisa as main interface to USB.
+    """
+    board = 0
+    manufacture_id = 0
+    model_code = 0
+    serial_number = 0
+    usb_interface_number = None
+
+    def _make_address(self):
+        base = 'USB{}::{}::{}::{}'.format(self.board, self.manufacture_id, self.model_code, self.serial_number)
+        if self.usb_interface_number:
+            base = '{}::{}'.format(base, self.usb_interface_number)
+
+        return '{}::INSTR'.format(base)
+
+    def open(self, *args, **kw):
+        self.debug('opening visa usb communicator')
+
+        address = self._make_address()
+        self.handle = resource_manager.get_instrument(address)
+        if self.handle is not None:
+            self.simulation = False
+            return True
+
+    def load(self, config, path, **kw):
+        self.set_attribute(config, 'board', 'Communications', 'board')
+        self.set_attribute(config, 'manufacture_id', 'Communications', 'manufacture_id')
+        self.set_attribute(config, 'model_code', 'Communications', 'model_code')
+        self.set_attribute(config, 'serial_number', 'Communications', 'serial_number')
+        self.set_attribute(config, 'usb_interface_number', 'Communications', 'usb_interface_number', optional=True)
+        return True
+
+    def trigger(self):
+        self.handle.trigger()
+
+    def ask(self, cmd, *args, **kw):
+        resp = self.handle.query(cmd)
+        self.debug('cmd==>{}'.format(resp))
+        return resp
+
+    def tell(self, cmd, *args, **kw):
+        self.handle.write(cmd)
+
+# ============= EOF =============================================
diff --git a/pychron/hardware/core/scpi_device.py b/pychron/hardware/core/scpi_device.py
index 2920d29ce3..99fbd44793 100755
--- a/pychron/hardware/core/scpi_device.py
+++ b/pychron/hardware/core/scpi_device.py
@@ -26,9 +26,12 @@ def initialize(self, *args, **kw):
             initialize instrument
         """
         self.tell('*RST')
+        self.configure_instrument()
         self.tell('*CLS')
 
-        self.configure_instrument()
+    def identify_instrument(self):
+        v = self.ask('*IDN?')
+        self.info('Instrument ID {}'.format(v))
 
     def configure_instrument(self):
         """
@@ -42,22 +45,20 @@ def trigger(self):
 
         """
         self.debug('triggering measurement')
-        self.ask('TRIGGER')
+        self.tell('INIT')
 
     def get_measurement(self):
         """
             return a value read from the device
         """
         if self.simulation:
-            v= 0
+            self.debug('simulation')
+            v = 0
         else:
-            self.trigger()
             v = self.ask('FETCH?')
 
         v = self._parse_response(v)
         self.debug('get_measurment. value = {}'.format(v))
         return v
-# ============= EOF =============================================
-
-
 
+# ============= EOF =============================================
