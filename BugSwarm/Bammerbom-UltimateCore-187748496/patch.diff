diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/AfkModule.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/AfkModule.java
index f25df0c4d7..cd1f4d3265 100755
--- a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/AfkModule.java
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/AfkModule.java
@@ -29,7 +29,7 @@
 import bammerbom.ultimatecore.sponge.modules.afk.commands.AfkCommand;
 import bammerbom.ultimatecore.sponge.modules.afk.listeners.AfkDetectionListener;
 import bammerbom.ultimatecore.sponge.modules.afk.listeners.AfkSwitchListener;
-import bammerbom.ultimatecore.sponge.modules.afk.runnable.AfkTitleTask;
+import bammerbom.ultimatecore.sponge.modules.afk.runnables.AfkTitleTask;
 import org.spongepowered.api.Sponge;
 import org.spongepowered.api.event.game.state.GameInitializationEvent;
 import org.spongepowered.api.event.game.state.GamePostInitializationEvent;
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/listeners/AfkDetectionListener.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/listeners/AfkDetectionListener.java
index e87aba2eaf..6b3d50e6eb 100755
--- a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/listeners/AfkDetectionListener.java
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/listeners/AfkDetectionListener.java
@@ -27,7 +27,7 @@
 import bammerbom.ultimatecore.sponge.api.module.Modules;
 import bammerbom.ultimatecore.sponge.api.user.UltimateUser;
 import bammerbom.ultimatecore.sponge.modules.afk.api.AfkKeys;
-import bammerbom.ultimatecore.sponge.modules.afk.runnable.AfkCheckTask;
+import bammerbom.ultimatecore.sponge.modules.afk.runnables.AfkCheckTask;
 import bammerbom.ultimatecore.sponge.utils.Messages;
 import bammerbom.ultimatecore.sponge.utils.TimeUtil;
 import ninja.leaping.configurate.commented.CommentedConfigurationNode;
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkCheckTask.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkCheckTask.java
new file mode 100755
index 0000000000..f911e99941
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkCheckTask.java
@@ -0,0 +1,83 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.modules.afk.runnables;
+
+import bammerbom.ultimatecore.sponge.UltimateCore;
+import bammerbom.ultimatecore.sponge.api.module.Modules;
+import bammerbom.ultimatecore.sponge.api.user.UltimateUser;
+import bammerbom.ultimatecore.sponge.modules.afk.api.AfkKeys;
+import bammerbom.ultimatecore.sponge.modules.afk.listeners.AfkDetectionListener;
+import bammerbom.ultimatecore.sponge.utils.Messages;
+import ninja.leaping.configurate.commented.CommentedConfigurationNode;
+import org.spongepowered.api.Sponge;
+import org.spongepowered.api.entity.Transform;
+import org.spongepowered.api.entity.living.player.Player;
+import org.spongepowered.api.world.World;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+public class AfkCheckTask implements Runnable {
+    @Override
+    public void run() {
+        CommentedConfigurationNode config = Modules.AFK.get().getConfig().get().get();
+        long afk = config.getNode("time", "afktime").getLong() * 1000;
+        List<UUID> remove = new ArrayList<>();
+        for (UUID uuid : AfkDetectionListener.afktime.keySet()) {
+            Player player = Sponge.getServer().getPlayer(uuid).orElse(null);
+            if (player == null) {
+                remove.add(uuid);
+                continue;
+            }
+            UltimateUser user = UltimateCore.get().getUserService().getUser(player);
+            //Location check
+            if (config.getNode("events", "move", "enabled").getBoolean(false) && config.getNode("events", "move", "mode").getString("").equalsIgnoreCase("task")) {
+                Transform<World> nloc = new Transform<World>(player.getLocation(), player.getRotation(), player.getScale());
+                if (!user.get(AfkKeys.LAST_LOCATION).isPresent()) {
+                    user.offer(AfkKeys.LAST_LOCATION, nloc);
+                    AfkDetectionListener.unafkCheck(player);
+                }
+                Transform<World> oloc = user.get(AfkKeys.LAST_LOCATION).get();
+                if (!oloc.equals(nloc)) {
+                    AfkDetectionListener.afktime.put(player.getUniqueId(), System.currentTimeMillis());
+                    user.offer(AfkKeys.LAST_LOCATION, nloc);
+                    AfkDetectionListener.unafkCheck(player);
+                }
+            }
+            //Afk check
+            long value = AfkDetectionListener.afktime.get(uuid);
+            long diff = System.currentTimeMillis() - value;
+            if (!user.get(AfkKeys.IS_AFK).get() && diff > afk) {
+                user.offer(AfkKeys.IS_AFK, true);
+                user.offer(AfkKeys.AFK_TIME, System.currentTimeMillis());
+                Sponge.getServer().getBroadcastChannel().send(Messages.getFormatted("afk.broadcast.afk", "%player%", user.getUser().getName()));
+                //TODO afk message
+            }
+        }
+        for (UUID uuid : remove) {
+            AfkDetectionListener.afktime.remove(uuid);
+        }
+    }
+}
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkTitleTask.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkTitleTask.java
new file mode 100755
index 0000000000..4317524e70
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/afk/runnables/AfkTitleTask.java
@@ -0,0 +1,71 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.modules.afk.runnables;
+
+import bammerbom.ultimatecore.sponge.UltimateCore;
+import bammerbom.ultimatecore.sponge.api.module.Modules;
+import bammerbom.ultimatecore.sponge.api.user.UltimateUser;
+import bammerbom.ultimatecore.sponge.modules.afk.api.AfkKeys;
+import bammerbom.ultimatecore.sponge.modules.afk.api.AfkPermissions;
+import bammerbom.ultimatecore.sponge.utils.Messages;
+import bammerbom.ultimatecore.sponge.utils.TimeUtil;
+import ninja.leaping.configurate.commented.CommentedConfigurationNode;
+import org.spongepowered.api.Sponge;
+import org.spongepowered.api.entity.living.player.Player;
+import org.spongepowered.api.text.Text;
+import org.spongepowered.api.text.title.Title;
+
+public class AfkTitleTask implements Runnable {
+    @Override
+    public void run() {
+        CommentedConfigurationNode config = Modules.AFK.get().getConfig().get().get();
+        for (Player player : Sponge.getServer().getOnlinePlayers()) {
+            UltimateUser user = UltimateCore.get().getUserService().getUser(player);
+            if (user.get(AfkKeys.IS_AFK).get()) {
+                Text title = Messages.getFormatted("afk.title.title");
+                Text subtitle;
+                long timediff = (config.getNode("time", "kicktime").getInt() * 1000) - (System.currentTimeMillis() - user.get(AfkKeys.AFK_TIME).get());
+                if (config.getNode("time", "kicktime").getInt() != -1 && timediff <= 0 && !player.hasPermission(AfkPermissions.UC_AFK_EXEMPT.get())) {
+                    player.kick(Messages.getFormatted("afk.kick.reason"));
+                }
+                if (player.hasPermission(AfkPermissions.UC_AFK_EXEMPT.get()) || config.getNode("time", "kicktime").getInt() == -1) {
+                    subtitle = Messages.getFormatted("afk.title.subtitle.exempt");
+                } else if (config.getNode("title", "subtitle-show-seconds").getBoolean(true)) {
+                    subtitle = Messages.getFormatted("afk.title.subtitle.kick", "%time%", TimeUtil.format(timediff, 3, null));
+                } else {
+                    subtitle = Messages.getFormatted("afk.title.subtitle.kick", "%time%", TimeUtil.format(timediff, 3, 11));
+                }
+                if (config.getNode("title", "subtitle").getBoolean(false) && (!player.hasPermission(AfkPermissions.UC_AFK_EXEMPT.get()) || config.getNode("title", "subtitle-exempt")
+                        .getBoolean(false))) {
+                    //Show subtitle
+                    player.sendTitle(Title.builder().title(title).subtitle(subtitle).fadeIn(0).fadeOut(20).stay(config.getNode("title", "subtitle-refresh").getInt()).build());
+                } else {
+                    //Don't show subtitle
+                    //TODO refresh?
+                    player.sendTitle(Title.builder().title(title).fadeIn(0).fadeOut(20).stay(config.getNode("title", "subtitle-refresh").getInt()).build());
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/TablistModule.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/TablistModule.java
new file mode 100755
index 0000000000..cdace8e679
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/TablistModule.java
@@ -0,0 +1,71 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.modules.tablist;
+
+import bammerbom.ultimatecore.sponge.UltimateCore;
+import bammerbom.ultimatecore.sponge.api.module.Module;
+import bammerbom.ultimatecore.sponge.config.ModuleConfig;
+import bammerbom.ultimatecore.sponge.modules.tablist.runnables.TablistRunnable;
+import org.spongepowered.api.Sponge;
+import org.spongepowered.api.event.game.state.GameInitializationEvent;
+import org.spongepowered.api.event.game.state.GamePostInitializationEvent;
+import org.spongepowered.api.event.game.state.GameStoppingEvent;
+
+import java.util.Optional;
+
+public class TablistModule implements Module {
+    ModuleConfig config;
+
+    @Override
+    public String getIdentifier() {
+        return "tablist";
+    }
+
+    @Override
+    public Optional<ModuleConfig> getConfig() {
+        return Optional.of(config);
+    }
+
+    @Override
+    public void onRegister() {
+
+    }
+
+    @Override
+    public void onInit(GameInitializationEvent event) {
+        config = new ModuleConfig("tablist");
+        int delay = config.get().getNode("refresh").getInt();
+        Sponge.getScheduler().createTaskBuilder().execute(new TablistRunnable()).name("UltimateCore tablist task").delayTicks(delay).intervalTicks(delay).submit(UltimateCore.get());
+    }
+
+    @Override
+    public void onPostInit(GamePostInitializationEvent event) {
+
+    }
+
+    @Override
+    public void onStop(GameStoppingEvent event) {
+
+    }
+}
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/runnables/TablistRunnable.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/runnables/TablistRunnable.java
new file mode 100755
index 0000000000..9730cb7006
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/tablist/runnables/TablistRunnable.java
@@ -0,0 +1,109 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.modules.tablist.runnables;
+
+import bammerbom.ultimatecore.sponge.api.module.Modules;
+import bammerbom.ultimatecore.sponge.config.ModuleConfig;
+import bammerbom.ultimatecore.sponge.utils.Messages;
+import bammerbom.ultimatecore.sponge.utils.StringUtil;
+import bammerbom.ultimatecore.sponge.utils.VariableUtil;
+import com.google.common.reflect.TypeToken;
+import ninja.leaping.configurate.commented.CommentedConfigurationNode;
+import ninja.leaping.configurate.objectmapping.ObjectMappingException;
+import org.spongepowered.api.Sponge;
+import org.spongepowered.api.entity.living.player.Player;
+import org.spongepowered.api.entity.living.player.tab.TabList;
+import org.spongepowered.api.entity.living.player.tab.TabListEntry;
+import org.spongepowered.api.service.permission.Subject;
+import org.spongepowered.api.text.Text;
+
+import java.util.*;
+
+public class TablistRunnable implements Runnable {
+
+    @Override
+    public void run() {
+        ModuleConfig config = Modules.TABLIST.get().getConfig().get();
+        boolean enablehf = config.get().getNode("headerfooter", "enable").getBoolean();
+        boolean enablenames = config.get().getNode("names", "enable").getBoolean();
+        if (!enablehf && !enablenames) {
+            return;
+        }
+
+        HashMap<Player, Text> names = new HashMap<>();
+        if (enablenames) {
+            for (Player p : Sponge.getServer().getOnlinePlayers()) {
+                names.put(p, getName(p));
+            }
+        }
+
+        String header;
+        String footer;
+        try {
+            header = StringUtil.join("\n", config.get().getNode("headerfooter", "header").getList(TypeToken.of(String.class)));
+            footer = StringUtil.join("\n", config.get().getNode("headerfooter", "footer").getList(TypeToken.of(String.class)));
+        } catch (ObjectMappingException e) {
+            e.printStackTrace();
+            return;
+        }
+
+        for (Player p : Sponge.getServer().getOnlinePlayers()) {
+            TabList list = p.getTabList();
+
+            //Header and footer
+            if (enablehf) {
+                list.setHeaderAndFooter(VariableUtil.replaceVariables(Messages.toText(header), p), VariableUtil.replaceVariables(Messages.toText(footer), p));
+            }
+
+            //Names
+            if (enablenames) {
+                new ArrayList<>(list.getEntries()).forEach(entry -> list.removeEntry(entry.getProfile().getUniqueId()));
+                names.forEach((player, name) -> list.addEntry(TabListEntry.builder().displayName(name).gameMode(player.gameMode().get()).latency(player.getConnection().getLatency()).list
+                        (list).profile(player.getProfile()).build()));
+            }
+        }
+    }
+
+    private Text getName(Player p) {
+        ModuleConfig config = Modules.TABLIST.get().getConfig().get();
+        CommentedConfigurationNode node = config.get();
+        Text name = Messages.toText(node.getNode("names", "default", "format").getString());
+
+        //Check if the user is in any groups, if so replace the header/body/footer with that of the group
+        List<Subject> subjects = p.getSubjectData().getParents(new HashSet<>());
+        List<String> subjectnames = new ArrayList<>();
+        for (Subject su : subjects) {
+            subjectnames.add(su.getIdentifier());
+        }
+        Map<Object, ? extends CommentedConfigurationNode> children = node.getNode("names", "groups").getChildrenMap();
+        for (Object o : children.keySet()) {
+            if (subjectnames.contains(o.toString())) {
+                CommentedConfigurationNode subnode = children.get(o);
+                name = Messages.toText(subnode.getNode("format").getString());
+            }
+        }
+
+        return VariableUtil.replaceVariables(name, p);
+    }
+}
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/modules/teleport/commands/TeleportnativeCommand.java b/src/main/java/bammerbom/ultimatecore/sponge/modules/teleport/commands/TeleportnativeCommand.java
new file mode 100755
index 0000000000..0baa23236c
--- /dev/null
+++ b/src/main/java/bammerbom/ultimatecore/sponge/modules/teleport/commands/TeleportnativeCommand.java
@@ -0,0 +1,69 @@
+/*
+ * This file is part of UltimateCore, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) Bammerbom
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+package bammerbom.ultimatecore.sponge.modules.teleport.commands;
+
+import bammerbom.ultimatecore.sponge.api.command.Command;
+import bammerbom.ultimatecore.sponge.api.module.Module;
+import bammerbom.ultimatecore.sponge.api.permission.Permission;
+import org.spongepowered.api.command.CommandResult;
+import org.spongepowered.api.command.CommandSource;
+
+import java.util.List;
+
+public class TeleportnativeCommand implements Command {
+    @Override
+    public Module getModule() {
+        return null;
+    }
+
+    @Override
+    public String getIdentifier() {
+        return null;
+    }
+
+    @Override
+    public Permission getPermission() {
+        return null;
+    }
+
+    @Override
+    public List<Permission> getPermissions() {
+        return null;
+    }
+
+    @Override
+    public List<String> getAliases() {
+        return null;
+    }
+
+    @Override
+    public CommandResult run(CommandSource sender, String[] args) {
+        return null;
+    }
+
+    @Override
+    public List<String> onTabComplete(CommandSource sender, String[] args, String curs, Integer curn) {
+        return null;
+    }
+}
diff --git a/src/main/java/bammerbom/ultimatecore/sponge/utils/Selector.java b/src/main/java/bammerbom/ultimatecore/sponge/utils/Selector.java
index f9d6ec96ac..b5877e738d 100755
--- a/src/main/java/bammerbom/ultimatecore/sponge/utils/Selector.java
+++ b/src/main/java/bammerbom/ultimatecore/sponge/utils/Selector.java
@@ -27,7 +27,6 @@
 import org.spongepowered.api.command.CommandSource;
 import org.spongepowered.api.entity.Entity;
 import org.spongepowered.api.entity.living.player.Player;
-import org.spongepowered.api.text.selector.Selector;
 import org.spongepowered.api.world.Locatable;
 
 import java.util.ArrayList;
diff --git a/src/main/resources/assets/ultimatecore/config/modules/chat.conf b/src/main/resources/assets/ultimatecore/config/modules/chat.conf
index 2d5dbe6933..57c673dc06 100755
--- a/src/main/resources/assets/ultimatecore/config/modules/chat.conf
+++ b/src/main/resources/assets/ultimatecore/config/modules/chat.conf
@@ -18,7 +18,7 @@ default {
 }
 groups {
   # Group names are case sensitive!
-  # Priorities are from bottom to op, so if someone is in multiple groups the group most to the bottom he is in is used.
+  # Priorities are from bottom to op, so if someone is in multiple groups, the group most to the bottom he is in is used.
   admin {
     # Uses the same variables as above
     header: "&6%prefix%&6%displayname%: "
diff --git a/src/main/resources/assets/ultimatecore/config/modules/tablist.conf b/src/main/resources/assets/ultimatecore/config/modules/tablist.conf
new file mode 100755
index 0000000000..6599405562
--- /dev/null
+++ b/src/main/resources/assets/ultimatecore/config/modules/tablist.conf
@@ -0,0 +1,50 @@
+# All possible values in messages are:
+# %name% - The real name of the player
+# %displayname$ - The displayname of the player
+# %prefix% - Prefic assigned by permissions plugin
+# %suffix% - Suffix assigned by permissions plugin
+# %world% - The world the player is in
+# %worldalias% - The first character of the name of the world the player is in
+# %ip% - The ip adress of the player
+# %version% - The minecraft version of the server
+# %maxplayers% - The maximum amount of players of the server
+# %onlineplayers% - The amount of players on the server
+# %message% - The message the player sent
+headerfooter {
+  enable: true
+  # Each list entry is a new line in the header
+  header: [
+    "&bWelcome to this server, %displayname%!",
+    "&bPlayers online: %onlineplayers%/%maxplayers%",
+  ]
+  footer: [
+    "&3Change this message in the UltimateCore config.yml",
+  ]
+}
+
+# How many ticks should be between each tablist refresh?
+# 20 ticks = 1 second
+refresh: 60
+
+# FORMATTING FOR USERNAMES
+names {
+  enable: true
+  # Default formatting for people who don't fit in any group
+  default {
+    # This is the default format, if no group or personal format is present.
+    format: "&e%displayname%"
+  }
+  groups {
+    # Group names are case sensitive!
+    # Priorities are from bottom to op, so if someone is in multiple groups, the group most to the bottom he is in is used.
+    admin {
+      # Uses the same variables as above
+      format: "&6%displayname%"
+    }
+    owner {
+      # Uses the same variables as above
+      format: "&4%displayname%"
+    }
+    # Add new groups by copying one of the groups above
+  }
+}
\ No newline at end of file
