diff --git a/maint/test/appengine/py27/cgi_runtests.py b/maint/test/appengine/py27/cgi_runtests.py
deleted file mode 100755
index a9fc90e99c..0000000000
--- a/maint/test/appengine/py27/cgi_runtests.py
+++ /dev/null
@@ -1 +0,0 @@
-../common/cgi_runtests.py
\ No newline at end of file
diff --git a/maint/test/appengine/py27/cgi_runtests.py b/maint/test/appengine/py27/cgi_runtests.py
new file mode 120000
index 0000000000..a9fc90e99c
--- /dev/null
+++ b/maint/test/appengine/py27/cgi_runtests.py
@@ -0,0 +1 @@
+../common/cgi_runtests.py
\ No newline at end of file
diff --git a/maint/test/appengine/py27/runtests.py b/maint/test/appengine/py27/runtests.py
deleted file mode 100755
index 2cce26b0fb..0000000000
--- a/maint/test/appengine/py27/runtests.py
+++ /dev/null
@@ -1 +0,0 @@
-../common/runtests.py
\ No newline at end of file
diff --git a/maint/test/appengine/py27/runtests.py b/maint/test/appengine/py27/runtests.py
new file mode 120000
index 0000000000..2cce26b0fb
--- /dev/null
+++ b/maint/test/appengine/py27/runtests.py
@@ -0,0 +1 @@
+../common/runtests.py
\ No newline at end of file
diff --git a/maint/test/appengine/py27/tornado b/maint/test/appengine/py27/tornado
deleted file mode 100755
index d4f6cc317d..0000000000
--- a/maint/test/appengine/py27/tornado
+++ /dev/null
@@ -1 +0,0 @@
-../../../../tornado
\ No newline at end of file
diff --git a/maint/test/appengine/py27/tornado b/maint/test/appengine/py27/tornado
new file mode 120000
index 0000000000..d4f6cc317d
--- /dev/null
+++ b/maint/test/appengine/py27/tornado
@@ -0,0 +1 @@
+../../../../tornado
\ No newline at end of file
diff --git a/tornado/test/web_test.py b/tornado/test/web_test.py
index d79ea52c1b..de26c42ecc 100755
--- a/tornado/test/web_test.py
+++ b/tornado/test/web_test.py
@@ -917,6 +917,10 @@ def test_default(self):
             self.assertEqual(response.code, 503)
             self.assertTrue(b"503: Service Unavailable" in response.body)
 
+            response = self.fetch("/default?status=435")
+            self.assertEqual(response.code, 435)
+            self.assertTrue(b"435: Unknown" in response.body)
+
     def test_write_error(self):
         with ExpectLog(app_log, "Uncaught exception"):
             response = self.fetch("/write_error")
@@ -1489,9 +1493,9 @@ def test_status(self):
         response = self.fetch("/?code=682&reason=Bar")
         self.assertEqual(response.code, 682)
         self.assertEqual(response.reason, "Bar")
-        with ExpectLog(app_log, 'Uncaught exception'):
-            response = self.fetch("/?code=682")
-        self.assertEqual(response.code, 500)
+        response = self.fetch("/?code=682")
+        self.assertEqual(response.code, 682)
+        self.assertEqual(response.reason, "Unknown")
 
 
 @wsgi_safe
diff --git a/tornado/test/websocket_test.py b/tornado/test/websocket_test.py
index beb94a690a..e0b5573de3 100755
--- a/tornado/test/websocket_test.py
+++ b/tornado/test/websocket_test.py
@@ -51,7 +51,10 @@ def on_close(self):
 
 class EchoHandler(TestWebSocketHandler):
     def on_message(self, message):
-        self.write_message(message, isinstance(message, bytes))
+        try:
+            self.write_message(message, isinstance(message, bytes))
+        except StreamClosedError:
+            pass
 
 
 class ErrorInOnMessageHandler(TestWebSocketHandler):
diff --git a/tornado/web.py b/tornado/web.py
index d79889fa37..132f42dd57 100755
--- a/tornado/web.py
+++ b/tornado/web.py
@@ -319,10 +319,7 @@ def set_status(self, status_code, reason=None):
         if reason is not None:
             self._reason = escape.native_str(reason)
         else:
-            try:
-                self._reason = httputil.responses[status_code]
-            except KeyError:
-                raise ValueError("unknown status code %d" % status_code)
+            self._reason = httputil.responses.get(status_code, "Unknown")
 
     def get_status(self):
         """Returns the status code for our response."""
@@ -1561,11 +1558,7 @@ def _handle_request_exception(self, e):
             # send a response.
             return
         if isinstance(e, HTTPError):
-            if e.status_code not in httputil.responses and not e.reason:
-                gen_log.error("Bad HTTP status code: %d", e.status_code)
-                self.send_error(500, exc_info=sys.exc_info())
-            else:
-                self.send_error(e.status_code, exc_info=sys.exc_info())
+            self.send_error(e.status_code, exc_info=sys.exc_info())
         else:
             self.send_error(500, exc_info=sys.exc_info())
 
