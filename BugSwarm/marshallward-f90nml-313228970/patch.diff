diff --git a/f90nml/cli.py b/f90nml/cli.py
index 91ec68182c..107088ca04 100755
--- a/f90nml/cli.py
+++ b/f90nml/cli.py
@@ -31,6 +31,7 @@ def parse():
     parser.add_argument('--group', '-g', action='store')
     parser.add_argument('--set', '-s', action='append')
     parser.add_argument('--patch', '-p', action='store_false')
+    parser.add_argument('--format', '-f', action='store')
 
     parser.add_argument('input')
     parser.add_argument('output', nargs='?')
@@ -44,8 +45,18 @@ def parse():
     input_fname = args.input
     output_fname = args.output
 
-    # Input config
+    # Format validation
+    valid_formats = ('json', 'yaml', 'nml')
+    if args.format and args.format not in valid_formats:
+        print('f90nml: error: format must be one of the following: {0}'
+              ''.format(valid_formats))
+        sys.exit(-1)
+
+    if args.format == 'yaml' and not has_yaml:
+        print('f90nml: error: YAML module could not be found.')
+        sys.exit(-1)
 
+    # Input config
     if input_fname:
         _, input_ext = os.path.splitext(input_fname)
         if input_ext == '.json':
@@ -65,7 +76,6 @@ def parse():
     input_data = f90nml.Namelist(input_data)
 
     # Replace any values
-
     if args.set:
         if not args.group:
             # Use the first available group
@@ -82,31 +92,39 @@ def parse():
         input_data[grp].update(update_data[grp])
 
     # Target output
+    output_file = open(output_fname, 'w') if output_fname else sys.stdout
+
+    # Get output format
+    if not args.format:
+        if output_fname:
+            _, output_ext = os.path.splitext(output_fname)
+            if output_ext == '.json':
+                output_fmt = 'json'
+            elif output_ext in ('.yaml', '.yml'):
+                output_fmt = 'yaml'
+            else:
+                output_fmt = 'nml'
+        else:
+            output_fmt = 'nml'
+    else:
+        output_fmt = args.format
 
-    if output_fname:
-        _, output_ext = os.path.splitext(output_fname)
-
-        # TODO: Better control of output format
-        if output_ext == '.json':
+    # Write to output
+    if output_fmt in ('json', 'yaml'):
+        if output_fmt == 'json':
             input_data = input_data.todict(decomplex=True)
-            with open(output_fname, 'w') as output_file:
-                json.dump(input_data, output_file,
-                          indent=4, separators=(',', ': '))
-                output_file.write('\n')
-
-        elif output_ext == '.yaml':
-            if has_yaml:
-                input_data = input_data.todict(decomplex=True)
-                with open(output_fname, 'w') as output_file:
-                    yaml.dump(input_data, output_file,
-                              default_flow_style=False)
-            else:
-                print('f90nml: error: YAML module could not be found.')
-                sys.exit(-1)
+            json.dump(input_data, output_file,
+                      indent=4, separators=(',', ': '))
+            output_file.write('\n')
 
-        else:
-            # Default to namelist output
-            f90nml.write(input_data, output_fname)
+        elif output_fmt == 'yaml':
+            input_data = input_data.todict(decomplex=True)
+            yaml.dump(input_data, output_file,
+                      default_flow_style=False)
     else:
-        # TODO: Combine with extension output
-        f90nml.write(input_data, sys.stdout)
+        # Default to namelist output
+        f90nml.write(input_data, output_file)
+
+    # Cleanup
+    if output_file != sys.stdout:
+        output_file.close()
diff --git a/test/test_f90nml.py b/test/test_f90nml.py
index db6d104031..eab7b4fb6c 100755
--- a/test/test_f90nml.py
+++ b/test/test_f90nml.py
@@ -802,14 +802,6 @@ def test_cli_read(self):
             target_str = target.read()
             self.assertEqual(source_str, target_str)
 
-    def test_cli_json_read(self):
-        cmd = ['f90nml', 'types.json']
-        json_str = self.get_cli_output(cmd)
-
-        with open('types.nml') as types_nml:
-            target_str = types_nml.read()
-            self.assertEqual(json_str, target_str)
-
 
 if __name__ == '__main__':
     if os.path.isfile('tmp.nml'):
