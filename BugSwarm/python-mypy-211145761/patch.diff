diff --git a/mypy/build.py b/mypy/build.py
index c3a2a7c126..edda95a1c2 100755
--- a/mypy/build.py
+++ b/mypy/build.py
@@ -21,8 +21,10 @@
 from os.path import dirname, basename
 
 from typing import (AbstractSet, Dict, Iterable, Iterator, List,
-                    NamedTuple, Optional, Set, Tuple, Union, TYPE_CHECKING)
-if TYPE_CHECKING:
+                    NamedTuple, Optional, Set, Tuple, Union)
+# Can't use TYPE_CHECKING because it's not in the Python 3.5.1 stdlib
+MYPY = False
+if MYPY:
     from typing import Deque
 
 from mypy.nodes import (MypyFile, Node, ImportBase, Import, ImportFrom, ImportAll)
@@ -1399,7 +1401,8 @@ def parse_file(self) -> None:
         # this before processing imports, since this may mark some
         # import statements as unreachable.
         first = FirstPass(manager.semantic_analyzer)
-        first.visit_file(self.tree, self.xpath, self.id, self.options)
+        with self.wrap_context():
+            first.visit_file(self.tree, self.xpath, self.id, self.options)
 
         # Initialize module symbol table, which was populated by the
         # semantic analyzer.
diff --git a/mypy/checker.py b/mypy/checker.py
index ab4080d0ff..d8d87116a8 100755
--- a/mypy/checker.py
+++ b/mypy/checker.py
@@ -308,7 +308,7 @@ def check_overlapping_overloads(self, defn: OverloadedFuncDef) -> None:
                     assert False, "Impl isn't the right type"
                 # This can happen if we've got an overload with a different
                 # decorator too -- we gave up on the types.
-                if impl_type is None or sig1 is None:
+                if impl_type is None or isinstance(impl_type, AnyType) or sig1 is None:
                     return
 
                 assert isinstance(impl_type, CallableType)
@@ -2140,9 +2140,7 @@ def visit_decorator(self, e: Decorator) -> None:
         e.func.accept(self)
         sig = self.function_type(e.func)  # type: Type
         # Process decorators from the inside out.
-        for i in range(len(e.decorators)):
-            n = len(e.decorators) - 1 - i
-            d = e.decorators[n]
+        for d in reversed(e.decorators):
             if isinstance(d, NameExpr) and d.fullname == 'typing.overload':
                 self.fail('Single overload definition, multiple required', e)
                 continue
diff --git a/mypy/fastparse.py b/mypy/fastparse.py
index 10c4343ab1..a40ff68c7b 100755
--- a/mypy/fastparse.py
+++ b/mypy/fastparse.py
@@ -228,15 +228,10 @@ def fix_function_overloads(self, stmts: List[Statement]) -> List[Statement]:
         current_overload = []  # type: List[OverloadPart]
         current_overload_name = None
         for stmt in stmts:
-            if (isinstance(stmt, Decorator)
+            if (current_overload_name is not None
+                    and isinstance(stmt, (Decorator, FuncDef))
                     and stmt.name() == current_overload_name):
                 current_overload.append(stmt)
-            elif (isinstance(stmt, FuncDef)
-                  and stmt.name() == current_overload_name
-                  and stmt.name() is not None):
-                ret.append(OverloadedFuncDef(current_overload + [stmt]))
-                current_overload = []
-                current_overload_name = None
             else:
                 if len(current_overload) == 1:
                     ret.append(current_overload[0])
diff --git a/mypy/fastparse2.py b/mypy/fastparse2.py
index 19f9652b0f..602f5d57e4 100755
--- a/mypy/fastparse2.py
+++ b/mypy/fastparse2.py
@@ -230,15 +230,10 @@ def fix_function_overloads(self, stmts: List[Statement]) -> List[Statement]:
         current_overload = []  # type: List[OverloadPart]
         current_overload_name = None
         for stmt in stmts:
-            if (isinstance(stmt, Decorator)
+            if (current_overload_name is not None
+                    and isinstance(stmt, (Decorator, FuncDef))
                     and stmt.name() == current_overload_name):
                 current_overload.append(stmt)
-            elif (isinstance(stmt, FuncDef)
-                  and stmt.name() == current_overload_name
-                  and stmt.name() is not None):
-                ret.append(OverloadedFuncDef(current_overload + [stmt]))
-                current_overload = []
-                current_overload_name = None
             else:
                 if len(current_overload) == 1:
                     ret.append(current_overload[0])
diff --git a/mypy/meet.py b/mypy/meet.py
index 7aa479c0ee..03b8d1b58c 100755
--- a/mypy/meet.py
+++ b/mypy/meet.py
@@ -69,6 +69,10 @@ class C(A, B): ...
     TODO: Don't consider callables always overlapping.
     TODO: Don't consider type variables with values always overlapping.
     """
+    # Any overlaps with everything
+    if isinstance(t, AnyType) or isinstance(s, AnyType):
+        return True
+
     # Since we are effectively working with the erased types, we only
     # need to handle occurrences of TypeVarType at the top level.
     if isinstance(t, TypeVarType):
diff --git a/mypy/nodes.py b/mypy/nodes.py
index 83cc6958b1..f6b130359a 100755
--- a/mypy/nodes.py
+++ b/mypy/nodes.py
@@ -386,10 +386,14 @@ def fullname(self) -> str:
 
 
 class OverloadedFuncDef(FuncBase, SymbolNode, Statement):
-    """A logical node representing all the variants of an overloaded function.
+    """A logical node representing all the variants of a multi-declaration function.
+
+    A multi-declaration function is often an @overload, but can also be a
+    @property with a setter and a/or a deleter.
 
     This node has no explicit representation in the source program.
     Overloaded variants must be consecutive in the source file.
+
     """
 
     items = None  # type: List[OverloadPart]
@@ -559,9 +563,6 @@ def name(self) -> str:
     def accept(self, visitor: StatementVisitor[T]) -> T:
         return visitor.visit_func_def(self)
 
-    def get_body(self) -> Optional['Block']:
-        return self.body
-
     def serialize(self) -> JsonDict:
         # We're deliberating omitting arguments and storing only arg_names and
         # arg_kinds for space-saving reasons (arguments is not used in later
@@ -623,9 +624,6 @@ def __init__(self, func: FuncDef, decorators: List[Expression],
     def name(self) -> str:
         return self.func.name()
 
-    def get_body(self) -> Optional['Block']:
-        return self.func.body
-
     def fullname(self) -> str:
         return self.func.fullname()
 
diff --git a/mypy/semanal.py b/mypy/semanal.py
index dbd45077d7..4e5c84ffe4 100755
--- a/mypy/semanal.py
+++ b/mypy/semanal.py
@@ -434,51 +434,57 @@ def visit_overloaded_func_def(self, defn: OverloadedFuncDef) -> None:
         # Decide whether to analyze this as a property or an overload.  If an
         # overload, and we're outside a stub, find the impl and set it.  Remove
         # the impl from the item list, it's special.
-        t = []  # type: List[CallableType]
+        types = []  # type: List[CallableType]
         non_overload_indexes = []
-        for i, item in enumerate(defn.items):
-            # TODO support decorated overloaded functions properly
-            item.is_overload = True
-            item.accept(self)
 
-            if isinstance(item, Decorator):
-                item.func.is_overload = True
-                callable = function_type(item.func, self.builtin_type('builtins.function'))
-                assert isinstance(callable, CallableType)
-                if item.func.is_property and i == 0:
-                    # This defines a property, probably with a setter and/or
-                    # deleter.
-                    t.append(callable)
-                    self.analyze_property_with_multi_part_definition(defn)
-                    break
-                elif not any(refers_to_fullname(dec, 'typing.overload')
-                             for dec in item.decorators):
+        # See if the first item is a property (and not an overload)
+        first_item = defn.items[0]
+        first_item.is_overload = True
+        first_item.accept(self)
+
+        if isinstance(first_item, Decorator) and first_item.func.is_property:
+            first_item.func.is_overload = True
+            self.analyze_property_with_multi_part_definition(defn)
+            typ = function_type(first_item.func, self.builtin_type('builtins.function'))
+            assert isinstance(typ, CallableType)
+            types = [typ]
+        else:
+            for i, item in enumerate(defn.items):
+                if i != 0:
+                    # The first item was already visited
+                    item.is_overload = True
+                    item.accept(self)
+                # TODO support decorated overloaded functions properly
+                if isinstance(item, Decorator):
+                    item.func.is_overload = True
+                    callable = function_type(item.func, self.builtin_type('builtins.function'))
+                    assert isinstance(callable, CallableType)
+                    if not any(refers_to_fullname(dec, 'typing.overload')
+                               for dec in item.decorators):
+                        if i == len(defn.items) - 1 and not self.is_stub_file:
+                            # Last item outside a stub is impl
+                            defn.impl = item
+                        else:
+                            # Oops it wasn't an overload after all. A clear error
+                            # will vary based on where in the list it is, record
+                            # that.
+                            non_overload_indexes.append(i)
+                    else:
+                        types.append(callable)
+                elif isinstance(item, FuncDef):
                     if i == len(defn.items) - 1 and not self.is_stub_file:
-                        # Last item outside a stub is impl
                         defn.impl = item
                     else:
-                        # Oops it wasn't an overload after all. A clear error
-                        # will vary based on where in the list it is, record
-                        # that.
                         non_overload_indexes.append(i)
-                else:
-                    t.append(callable)
-            elif isinstance(item, FuncDef):
-                if i == len(defn.items) - 1 and not self.is_stub_file:
-                    defn.impl = item
-                else:
-                    non_overload_indexes.append(i)
-        else:
-            # No break, so it was an overload.
             if non_overload_indexes:
-                if t:
+                if types:
                     # Some of them were overloads, but not all.
                     for idx in non_overload_indexes:
                         if self.is_stub_file:
-                            self.fail("Implementations of overloaded functions "
-                                      "not allowed in stub files", defn.items[idx])
+                            self.fail("An implementation for an overloaded function "
+                                      "is not allowed in a stub file", defn.items[idx])
                         else:
-                            self.fail("Implementations of overloaded functions "
+                            self.fail("The implementation for an overloaded function "
                                       "must come last", defn.items[idx])
                 else:
                     for idx in non_overload_indexes[1:]:
@@ -496,11 +502,11 @@ def visit_overloaded_func_def(self, defn: OverloadedFuncDef) -> None:
 
             elif not self.is_stub_file and not non_overload_indexes:
                 self.fail(
-                    "Overload outside a stub must have implementation",
+                    "An overloaded function outside a stub file must have an implementation",
                     defn)
 
-        if t:
-            defn.type = Overloaded(t)
+        if types:
+            defn.type = Overloaded(types)
             defn.type.line = defn.line
 
         if self.is_class_scope():
@@ -3306,6 +3312,8 @@ def visit_overloaded_func_def(self, func: OverloadedFuncDef) -> None:
                 sem.errors.push_function(func.name())
                 sem.enter()
                 impl.func.body.accept(self)
+            else:
+                assert False, "Implementation of an overload needs to be FuncDef or Decorator"
             sem.leave()
             sem.errors.pop_function()
             sem.function_stack.pop()
diff --git a/test-data/unit/check-classes.test b/test-data/unit/check-classes.test
index 010967e8a4..a9d4ce6938 100755
--- a/test-data/unit/check-classes.test
+++ b/test-data/unit/check-classes.test
@@ -925,6 +925,8 @@ a = A()
 a.f = a.f
 a.f.x # E: "int" has no attribute "x"
 a.f = '' # E: Incompatible types in assignment (expression has type "str", variable has type "int")
+a.f = 1
+reveal_type(a.f)  # E: Revealed type is 'builtins.int'
 [builtins fixtures/property.pyi]
 
 [case testPropertyWithDeleterButNoSetter]
diff --git a/test-data/unit/check-optional.test b/test-data/unit/check-optional.test
index d7bcf6a160..8fe759ac6c 100755
--- a/test-data/unit/check-optional.test
+++ b/test-data/unit/check-optional.test
@@ -77,6 +77,15 @@ else:
   reveal_type(x)  # E: Revealed type is 'builtins.int'
 [builtins fixtures/bool.pyi]
 
+[case testAnyCanBeNone]
+from typing import Optional, Any
+x = None  # type:  Any
+if x is None:
+  reveal_type(x)  # E: Revealed type is 'builtins.None'
+else:
+  reveal_type(x)  # E: Revealed type is 'Any'
+[builtins fixtures/bool.pyi]
+
 [case testOrCases]
 from typing import Optional
 x = None  # type: Optional[str]
diff --git a/test-data/unit/check-overloading.test b/test-data/unit/check-overloading.test
index 464cb0b661..64791a3728 100755
--- a/test-data/unit/check-overloading.test
+++ b/test-data/unit/check-overloading.test
@@ -17,6 +17,121 @@ class A: pass
 class B: pass
 [builtins fixtures/isinstance.pyi]
 
+[case testOverloadNeedsImplementation]
+from typing import overload, Any
+@overload  # E: An overloaded function outside a stub file must have an implementation
+def f(x: 'A') -> 'B': ...
+@overload
+def f(x: 'B') -> 'A': ...
+
+reveal_type(f(A())) # E: Revealed type is '__main__.B'
+reveal_type(f(B())) # E: Revealed type is '__main__.A'
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+[case testSingleOverloadNoImplementation]
+from typing import overload, Any
+@overload  # E: Single overload definition, multiple required
+def f(x: 'A') -> 'B': ...
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+
+[case testOverloadByAnyOtherName]
+from typing import overload as rose
+from typing import Any
+@rose
+def f(x: 'A') -> 'B': ...
+@rose
+def f(x: 'B') -> 'A': ...
+
+def f(x: Any) -> Any:
+    pass
+
+reveal_type(f(A())) # E: Revealed type is '__main__.B'
+reveal_type(f(B())) # E: Revealed type is '__main__.A'
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+[case testTypeCheckOverloadWithDecoratedImplementation]
+from typing import overload, Any
+
+def deco(fun): ...
+
+@overload
+def f(x: 'A') -> 'B': ...
+@overload
+def f(x: 'B') -> 'A': ...
+
+@deco
+def f(x: Any) -> Any:
+    pass
+
+reveal_type(f(A())) # E: Revealed type is '__main__.B'
+reveal_type(f(B())) # E: Revealed type is '__main__.A'
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+[case testOverloadDecoratedImplementationNotLast]
+from typing import overload, Any
+
+def deco(fun): ...
+
+@overload
+def f(x: 'A') -> 'B': ...
+
+@deco  # E: The implementation for an overloaded function must come last
+def f(x: Any) -> Any:
+    pass
+
+@overload
+def f(x: 'B') -> 'A': ...
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+[case testOverloadImplementationNotLast]
+from typing import overload, Any
+
+@overload
+def f(x: 'A') -> 'B': ...
+
+def f(x: Any) -> Any:  # E: The implementation for an overloaded function must come last
+    pass
+
+@overload
+def f(x: 'B') -> 'A': ...
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+[case testDecoratedRedefinitionIsNotOverload]
+from typing import overload, Any
+
+def deco(fun): ...
+
+@deco
+def f(x: 'A') -> 'B': ...
+@deco  # E: Name 'f' already defined
+def f(x: 'B') -> 'A': ...
+@deco  # E: Name 'f' already defined
+def f(x: Any) -> Any: ...
+
+class A: pass
+class B: pass
+[builtins fixtures/isinstance.pyi]
+
+
 [case testTypeCheckOverloadWithImplementationPy2]
 # flags: --python-version 2.7
 
@@ -898,7 +1013,7 @@ def f(a: int) -> None: pass
 def f(a: int) -> None: pass
 [out]
 tmp/foo.pyi:2: error: Single overload definition, multiple required
-tmp/foo.pyi:4: error: Implementations of overloaded functions not allowed in stub files
+tmp/foo.pyi:4: error: An implementation for an overloaded function is not allowed in a stub file
 
 
 [case testSingleOverload2]
@@ -922,8 +1037,8 @@ def f(a: int) -> None: pass
 @overload
 def f(a: str) -> None: pass
 [out]
-tmp/foo.pyi:5: error: Name 'f' already defined
 tmp/foo.pyi:2: error: Single overload definition, multiple required
+tmp/foo.pyi:5: error: Name 'f' already defined
 tmp/foo.pyi:5: error: Single overload definition, multiple required
 
 [case testNonconsecutiveOverloadsMissingFirstOverload]
@@ -947,8 +1062,8 @@ def f(a: int) -> None: pass
 1
 def f(a: str) -> None: pass
 [out]
-tmp/foo.pyi:5: error: Name 'f' already defined
 tmp/foo.pyi:2: error: Single overload definition, multiple required
+tmp/foo.pyi:5: error: Name 'f' already defined
 
 [case testOverloadTuple]
 from foo import *
diff --git a/test-data/unit/check-unsupported.test b/test-data/unit/check-unsupported.test
index ea3b50f7e7..3406d57d84 100755
--- a/test-data/unit/check-unsupported.test
+++ b/test-data/unit/check-unsupported.test
@@ -13,5 +13,5 @@ def g(): pass
 @d # E
 def g(x): pass
 [out]
-tmp/foo.pyi:7: error: Name 'g' already defined
 tmp/foo.pyi:5: error: Name 'f' already defined
+tmp/foo.pyi:7: error: Name 'g' already defined
diff --git a/test-data/unit/semanal-errors.test b/test-data/unit/semanal-errors.test
index a1fca13cc7..d21c0532ff 100755
--- a/test-data/unit/semanal-errors.test
+++ b/test-data/unit/semanal-errors.test
@@ -652,7 +652,7 @@ def f() -> None:
     x = 1
     def p(): pass # fail
 [out]
-main:3: error: Overload outside a stub must have implementation
+main:3: error: An overloaded function outside a stub file must have an implementation
 main:8: error: Name 'p' already defined
 
 [case testNestedFunctionInMethod]
@@ -1062,7 +1062,7 @@ def f(x: 'int['): pass # E: syntax error in type comment
 [case testInconsistentOverload]
 from typing import overload
 def dec(x): pass
-@dec  # E: Implementations of overloaded functions must come last
+@dec  # E: The implementation for an overloaded function must come last
 def f(): pass
 @overload
 def f(): pass
@@ -1071,7 +1071,7 @@ def f(): pass
 [case testInconsistentOverload2]
 from typing import overload
 def dec(x): pass
-@dec  # E: Implementations of overloaded functions must come last
+@dec  # E: The implementation for an overloaded function must come last
 def f(): pass
 @overload
 def f(): pass
@@ -1154,7 +1154,7 @@ class A:
 [case testOverloadedProperty2]
 from typing import overload
 class A:
-    @overload  # E: Overload outside a stub must have implementation
+    @overload  # E: An overloaded function outside a stub file must have an implementation
     def f(self) -> int: pass
     @property  # E: Decorated property not supported
     @overload
