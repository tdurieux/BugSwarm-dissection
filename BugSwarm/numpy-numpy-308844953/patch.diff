diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index 6144afb3bfc..40753927f61 100644
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -426,12 +426,15 @@ def wrapper(self, *args, **kwargs):
 # gracefully handle recursive calls, when object arrays contain themselves
 @_recursive_guard()
 def _array2string(a, options, separator=' ', prefix=""):
+    # the formatters can't deal with the way that np.matrix refuses to be
+    # made 1-d
+    data = asarray(a)
+
     if a.size > options['threshold']:
         summary_insert = "..."
-        data = _leading_trailing(a)
+        data = _leading_trailing(data)
     else:
         summary_insert = ""
-        data = asarray(a)
 
     # find the right formatting function for the array
     format_function = _get_format_function(data, **options)
@@ -441,7 +444,7 @@ def _array2string(a, options, separator=' ', prefix=""):
     # skip over array(
     next_line_prefix += " "*len(prefix)
 
-    lst = _formatArray(a, format_function, a.ndim, options['linewidth'],
+    lst = _formatArray(a, format_function, options['linewidth'],
                        next_line_prefix, separator, options['edgeitems'],
                        summary_insert, options['legacy'])[:-1]
     return lst
@@ -616,8 +619,8 @@ def _extendLine(s, line, word, max_line_len, next_line_prefix):
     return s, line
 
 
-def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
-                 separator, edge_items, summary_insert, legacy):
+def _formatArray(a, format_function, max_line_len, next_line_prefix,
+                 separator, edge_items, summary_insert, legacy, index=()):
     """formatArray is designed for two modes of operation:
 
     1. Full output
@@ -625,10 +628,15 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
     2. Summarized output
 
     """
-    if rank == 0:
-        return format_function(a[()]) + '\n'
+    axis = len(index)
+    axes_left = a.ndim - axis
+
+    if axes_left == 0:
+        return format_function(a[index]) + '\n'
+
+    a_len = a.shape[axis]
 
-    if summary_insert and 2*edge_items < len(a):
+    if summary_insert and 2*edge_items < a_len:
         leading_items = edge_items
         trailing_items = edge_items
         summary_insert1 = summary_insert + separator
@@ -636,14 +644,14 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
             summary_insert1 = summary_insert + ', '
     else:
         leading_items = 0
-        trailing_items = len(a)
+        trailing_items = a_len
         summary_insert1 = ""
 
-    if rank == 1:
+    if axes_left == 1:
         s = ""
         line = next_line_prefix
         for i in range(leading_items):
-            word = format_function(a[i]) + separator
+            word = format_function(a[index + (i,)]) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
         if summary_insert1:
@@ -651,23 +659,23 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
                                   next_line_prefix)
 
         for i in range(trailing_items, 1, -1):
-            word = format_function(a[-i]) + separator
+            word = format_function(a[index + (-i,)]) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
-        word = format_function(a[-1])
+        word = format_function(a[index + (-1,)])
         s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
         s += line + "]\n"
         s = '[' + s[len(next_line_prefix):]
     else:
         s = '['
-        sep = separator.rstrip()
+        sep = separator.rstrip() + '\n'*(axes_left - 1)
         for i in range(leading_items):
             if i > 0:
                 s += next_line_prefix
-            s += _formatArray(a[i], format_function, rank-1, max_line_len,
+            s += _formatArray(a, format_function, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
-                              summary_insert, legacy)
-            s = s.rstrip() + sep.rstrip() + '\n'*max(rank-1, 1)
+                              summary_insert, legacy, index=index+(i,))
+            s = s.rstrip() + sep
 
         if summary_insert1:
             if legacy == '1.13':
@@ -679,15 +687,15 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
         for i in range(trailing_items, 1, -1):
             if leading_items or i != trailing_items:
                 s += next_line_prefix
-            s += _formatArray(a[-i], format_function, rank-1, max_line_len,
+            s += _formatArray(a, format_function, max_line_len,
                               " " + next_line_prefix, separator, edge_items,
-                              summary_insert, legacy)
-            s = s.rstrip() + sep.rstrip() + '\n'*max(rank-1, 1)
+                              summary_insert, legacy, index=index+(-i,))
+            s = s.rstrip() + sep
         if leading_items or trailing_items > 1:
             s += next_line_prefix
-        s += _formatArray(a[-1], format_function, rank-1, max_line_len,
+        s += _formatArray(a, format_function, max_line_len,
                           " " + next_line_prefix, separator, edge_items,
-                          summary_insert, legacy).rstrip()+']\n'
+                          summary_insert, legacy, index=index+(-1,)).rstrip() + ']\n'
     return s
 
 
diff --git a/numpy/matrixlib/defmatrix.py b/numpy/matrixlib/defmatrix.py
index 08e867dea56..1f5c94921f6 100644
--- a/numpy/matrixlib/defmatrix.py
+++ b/numpy/matrixlib/defmatrix.py
@@ -328,19 +328,6 @@ def __ipow__(self, other):
     def __rpow__(self, other):
         return NotImplemented
 
-    def __repr__(self):
-        s = repr(self.__array__()).replace('array', 'matrix')
-        # now, 'matrix' has 6 letters, and 'array' 5, so the columns don't
-        # line up anymore. We need to add a space.
-        l = s.splitlines()
-        for i in range(1, len(l)):
-            if l[i]:
-                l[i] = ' ' + l[i]
-        return '\n'.join(l)
-
-    def __str__(self):
-        return str(self.__array__())
-
     def _align(self, axis):
         """A convenience function for operations that need to preserve axis
         orientation.
diff --git a/numpy/testing/tests/test_utils.py b/numpy/testing/tests/test_utils.py
index 08d67153adf..77fb974cffe 100644
--- a/numpy/testing/tests/test_utils.py
+++ b/numpy/testing/tests/test_utils.py
@@ -296,11 +296,13 @@ def test_error_message(self):
 
             (shapes (2,), (1, 2) mismatch)
              x: array([1, 2])
-             y: [repr failed for <matrix>: %d format: a number is required, not matrix]""")
+             y: matrix([[1, 2]])""")
             try:
                 self.assertEqual(msg, msg_reference)
             except AssertionError:
                 self.assertEqual(msg2, msg_reference)
+        else:
+            raise AssertionError("Did not raise")
 
 
 class TestArrayAlmostEqual(_GenericTest, unittest.TestCase):
