diff --git a/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.rst b/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.rst
index 2edac61..1448736 100755
--- a/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.rst
+++ b/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.rst
@@ -69,23 +69,27 @@ JDBC datasource provided by Application Server
       - Application Server
       - Reference page
     * - 1.
-      - Apache Tomcat 8
-      - | Refer to \ `Apache Tomcat 8 User Guide(The Tomcat JDBC Connection Pool) <http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html>`_\ .
-        | Refer to \ `Apache Tomcat 8 User Guide(JNDI Datasource HOW-TO) <http://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html>`_\  (Apache Commons DBCP 2).
+      - Apache Tomcat 8.5
+      - | Refer to \ `Apache Tomcat 8.5 User Guide(The Tomcat JDBC Connection Pool) <http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html>`_\ .
+        | Refer to \ `Apache Tomcat 8.5 User Guide(JNDI Datasource HOW-TO) <http://tomcat.apache.org/tomcat-8.5-doc/jndi-datasource-examples-howto.html>`_\  (Apache Commons DBCP 2).
     * - 2.
+      - Apache Tomcat 8.0
+      - | Refer to \ `Apache Tomcat 8.0 User Guide(The Tomcat JDBC Connection Pool) <http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html>`_\ .
+        | Refer to \ `Apache Tomcat 8.0 User Guide(JNDI Datasource HOW-TO) <http://tomcat.apache.org/tomcat-8.0-doc/jndi-datasource-examples-howto.html>`_\ (Apache Commons DBCP 2).
+    * - 3.
       - Apache Tomcat 7
       - | Refer to \ `Apache Tomcat 7 User Guide (The Tomcat JDBC Connection Pool) <http://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html>`_\ .
         | Refer to \ `Apache Tomcat 7 User Guide (JNDI Datasource HOW-TO) <http://tomcat.apache.org/tomcat-7.0-doc/jndi-datasource-examples-howto.html>`_\  (Apache Commons DBCP).
-    * - 3.
+    * - 4.
       - Oracle WebLogic Server 12c
       - Refer to \ `Oracle WebLogic Server Product Documentation <http://docs.oracle.com/middleware/1221/wls/INTRO/jdbc.htm>`_\ .
-    * - 4.
+    * - 5.
       - IBM WebSphere Application Server Version 9.0
       - Refer to \ `WebSphere Application Server Online information center <http://www.ibm.com/support/knowledgecenter/SSEQTP_9.0.0/com.ibm.websphere.wlp.doc/ae/twlp_dep_configuring_ds.html?lang=en>`_\ .
-    * - 5.
+    * - 6.
       - JBoss Enterprise Application Platform 7.0
       - Refer \ `JBoss Enterprise Application Platform 7.0 Product Documentation <https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/7.0/paged/configuration-guide/chapter-13-datasource-management>`_\.
-    * - 6.
+    * - 7.
       - JBoss Enterprise Application Platform 6.4
       - Refer \ `JBoss Enterprise Application Platform 6.4 Product Documentation <https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/6.4/html/Administration_and_Configuration_Guide/chap-Datasource_Management.html>`_\.
 
diff --git a/source_en/ArchitectureInDetail/MessagingDetail/Email.rst b/source_en/ArchitectureInDetail/MessagingDetail/Email.rst
index 417afd8..68b8aa0 100755
--- a/source_en/ArchitectureInDetail/MessagingDetail/Email.rst
+++ b/source_en/ArchitectureInDetail/MessagingDetail/Email.rst
@@ -199,18 +199,21 @@ A configuration example while using a mail session offered by application server
       - Application server
       - Refer page
     * - 1.
-      - Apache Tomcat 8
-      - | Refer \ `Apache Tomcat 8 User Guide(JNDI Resources HOW-TO) <http://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html#JavaMail_Sessions>`_\  (JavaMail Sessions).
+      - Apache Tomcat 8.5
+      - | Refer \ `Apache Tomcat 8.5 User Guide(JNDI Resources HOW-TO) <http://tomcat.apache.org/tomcat-8.5-doc/jndi-resources-howto.html#JavaMail_Sessions>`_\  (JavaMail Sessions).
     * - 2.
+      - Apache Tomcat 8.0
+      - | Refer \ `Apache Tomcat 8.0 User Guide(JNDI Resources HOW-TO) <http://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html#JavaMail_Sessions>`_\ (JavaMail Sessions).
+    * - 3.
       - Oracle WebLogic Server 12c
       - Refer \ `Oracle WebLogic Server 12.2.1.0 Documentation <http://docs.oracle.com/middleware/1221/wls/WLACH/taskhelp/mail/CreateMailSessions.html>`_\ .
-    * - 3.
+    * - 4.
       - IBM WebSphere Application Server Version 9.0
       - Refer \ `WebSphere Application Server Version 9.0.0 documentation <https://www.ibm.com/support/knowledgecenter/en/SSD28V_9.0.0/com.ibm.websphere.wlp.core.doc/ae/twlp_admin_javamail.html>`_\ .
-    * - 4.
+    * - 5.
       - Red Hat JBoss Enterprise Application Platform Version 7.0
       - Refer \ `JBoss Enterprise Application Platform 7.0 Product Documentation <https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/7.0/paged/configuration-guide/chapter-10-mail-subsystem>`_\.
-    * - 5.
+    * - 6.
       - Red Hat JBoss Enterprise Application Platform Version 6.4
       - Refer \ `JBoss Enterprise Application Platform 6.4 Product Documentation <https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/6.4/html/Administration_and_Configuration_Guide/chap-Mail_subsystem.html>`_\.
 
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
index 2f3b5d7..08a7b3e 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
@@ -1247,6 +1247,9 @@ As a result of above settings, when characters other than M, F are stored in ``g
     ``@ExistInCodeList`` input validation supports only the implementation class (\ ``String``\  etc) of \ ``CharSequence``\  interface or \ ``Character``\  type.
     Therefore, even if the fields with \ ``@ExistInCodeList``\ may contain integer values, they should be defined as \ ``String``\ data type. (such as Year/Month/Day)
 
+    Also, because \ ``@ExistInCodeList``\ does not correspond to the values in the collection,it is necessary to device the implementation in order to correspond \ ``@ExistInCodeList``\ annotation to multiple selectable screen items (check boxes, multiple selection drop down, etc.)
+    For details, please refer :ref:`Validation_for_parameter_object_in_collection_corresponding_annotation` . 
+
 |
 
 How to extend
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/SessionManagement.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/SessionManagement.rst
index 80610de..04e0119 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/SessionManagement.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/SessionManagement.rst
@@ -693,6 +693,32 @@ Fetching the object stored in session
     * - | (2)
       - | In the above example, object stored in session scope with attribute name \ ``"entity"``\ , is passed to argument "entity".
 
+ .. note:: **How to prevent binding of request parameters when receiving object stored in session scope**
+
+     When an object stored in the session scope is received as an argument of the handler method, there is a possibility that the request parameter is bound to the argument.
+
+     In order to prevent the request parameter from being bound, it can be realized by getting the object stored in the session scope from the \ ``Model``\ object in the handler method without receiving it from the argument of the handler method,
+     but it is not type-safe because it is necessary to specify the attribute name of the object to be acquired as a character string.
+
+     On the other hand, in Spring Framework 4.3, the \ ``binding``\ attribute is added to the \ ``ModelAttribute``\ annotation, so that it becomes possible to specify whether or not to bind request parameters as arguments.
+     By attaching the \ ``@ ModelAttribute``\ annotation as an argument and specifying \ ``false``\ as the \ ``binding``\ attribute,
+     it is possible to prevent binding of request parameters and objects stored in the scope can be acquired.
+
+     In the example below, an object stored in the session scope with an attribute name \ ``entity``\ is acquired by preventing binding of request parameters.
+
+      .. code-block:: java
+
+         @RequestMapping(value = "save", method = RequestMethod.POST)
+         public String save(@Validated({ Wizard1.class, Wizard2.class,
+                 Wizard3.class }) WizardForm form,
+                 BindingResult result,
+                 @ModelAttribute(binding = false) Entity entity,
+                 RedirectAttributes redirectAttributes) {
+             // ...
+             return "redirect:/wizard/save?complete";
+         }
+
+
 When the object to be passed to the argument of Controller handler method does not exist in \ ``Model``\  object, the operation changes depending on whether \ ``@ModelAttribute``\  annotation is specified or not.
 
 * When ``@ModelAttribute`` annotation is not specified, a new object is created and passed as argument.
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
index 62c6992..b3000bf 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
@@ -135,15 +135,12 @@ An example of adding libraries which are required when running Bean Validation 1
 Single item check
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-For the implementation of single item check,
+For the implementation of single item check following points are necessary,
 
 * Bean Validation annotation should be assigned to the field of form class
 * \ ``@Validated``\  annotation should be assigned in Controller for validation
 * Tag for displaying validation error message should be added to JSP
 
-
-
-
 .. note::
 
   \ ``<mvc:annotation-driven>``\  settings are carried out in spring-mvc.xml, Bean Validation is enabled.
@@ -2227,6 +2224,8 @@ This guideline classifies the definition as follows.
 
 When ValidationMessages.properties is not provided, \ :ref:`Default messages provided by Hibernate Validator<Validation_default_message_in_hibernate_validator>`\  is used.
 
+By working with \ ``MessageSource``\, you can handle Japanese messages directly without Native to Ascii.
+For details,please refer \ :ref:`Validation_without_native2ascii`
 
 .. _Validation_message_in_validationmessages:
 
@@ -2271,7 +2270,6 @@ It is explained below using the following form used at the beginning of \ :ref:`
     javax.validation.constraints.NotNull.message=is required.
     # (1)
     javax.validation.constraints.Size.message=size is not in the range {min} through {max}.
-    # (2)
     javax.validation.constraints.Min.message=cannot be less than {value}.
     javax.validation.constraints.Max.message=cannot be greater than {value}.
     org.hibernate.validator.constraints.Email.message=is an invalid e-mail address.
@@ -2285,8 +2283,6 @@ It is explained below using the following form used at the beginning of \ :ref:`
        - Description
      * - | (1)
        - | It is possible to embed the value of attributes specified in the annotation using \ ``{Attribute name}``\ .
-     * - | (2)
-       - | It is possible to embed the invalid value using \ ``{value}``\ .
 
 When the form is sent with input fields left blank after adding the above settings, changed error messages are displayed as shown below.
 
@@ -2328,6 +2324,8 @@ To display an appropriate field name, it should be defined in \ **application-me
 .. code-block:: properties
 
   form property name=field name to be displayed
+  
+It is good to define field names in the form.
 
 Adding the same to our example.
 
@@ -2372,7 +2370,6 @@ Error messages are changed as follows.
      .. list-table::
         :header-rows: 1
         :widths: 10 90
-        :class: longtable
 
         * - Sr. No.
           - Description
@@ -2577,13 +2574,13 @@ Implementation example is shown below.
     import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
     @Documented
-    @Constraint(validatedBy = {})
+    @Constraint(validatedBy = {})// (1)
     @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
     @Retention(RUNTIME)
-    @ReportAsSingleViolation // (1)
-    @Pattern(regexp = "[a-zA-Z0-9]*") // (2)
+    @ReportAsSingleViolation // (2)
+    @Pattern(regexp = "[a-zA-Z0-9]*") // (3)
     public @interface AlphaNumeric {
-        String message() default "{com.example.common.validation.AlphaNumeric.message}"; // (3)
+        String message() default "{com.example.common.validation.AlphaNumeric.message}"; // (4)
 
         Class<?>[] groups() default {};
 
@@ -2606,10 +2603,12 @@ Implementation example is shown below.
      * - Sr. No.
        - Description
      * - | (1)
-       - | This will consolidate error messages and return only the message of this annotation at the time of error.
+       - | When implementing using existing annotations, \ ``validatedBy``\ needs to be empty
      * - | (2)
-       - | Define rules used by this annotation.
+       - | This will consolidate error messages and return only the message of this annotation at the time of error.
      * - | (3)
+       - | Define rules used by this annotation.
+     * - | (4)
        - | Define default value of error message.
 
 * Implementation example of \ ``@NotNegative``\  annotation which is restricted to positive number
@@ -2752,6 +2751,433 @@ Implementation example is shown below.
     If multiple rules are set in a single annotation, their AND condition forms the composite annotation.
     In Hibernate Validator, \ ``@ConstraintComposition``\  annotation is provided to implement OR condition.
     Refer to \ `Hibernate Validator document <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/ch11.html#section-boolean-constraint-composition>`_\  for details.
+    
+    |
+    
+.. _Validation_for_parameter_object_in_collection_corresponding_annotation:
+
+How to check the values in the collection using Bean Validation's annotation
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+When dealing with multiple selectable screen items (such as checkboxes and multiple selection dropdown), it is common to treat screen items as collections of basic types such as \ ``String``\ in form classes.
+In the standard specification of Bean Validation, each value in the collection can not be checked by using Bean Validation annotation, but by using original features of Java SE 8 and Hibernate Validator, or if original functions of Java SE 8 and Hibernate Validator are not used, a wrapper class for the value of the screen item can be created and it can be treated as a collection so that the value in the collection using Bean Validation can be checked.
+
+
+Here, annotations to check whether the input value provided by the common library is a code value defined in the code list,
+input checking for Strings in the collection using \ ``org.terasoluna.gfw.common.codelist.ExistInCodeList``\ is explained as an example.
+
+Implementation method for matching \ ``@ExistInCodeList``\ annotation with multiple selectable screen items (check boxes, multiple selection drop down, etc.) is shown below.
+
+* :ref:`Validation_exist_in_codelist_javase8`\
+    Method of implementing original annotations that can be added to \ ``List``\ of \ ``String``\ by using the original functions of Java SE 8 and Hibernate Validator.
+    **It is easier and simpler to implement than the latter, so we recommend this method in environments where the original features of Java SE 8 and Hibernate Validator can be used.** In addition, this method will be standardized in the future version of Bean Validation in future.
+    
+
+* :ref:`Validation_exist_in_codelist_formatter`\
+    Method of setting the \ ``@ExistInCodeList``\ annotation for the property wrapped in the Java bean class.
+    For users who do not use Java SE 8 and Hibernate Validator's original features. In environments where the original features of Java SE 8 and Hibernate Validator can be used, :ref:`Validation_exist_in_codelist_javase8`\ is recommended.
+
+
+.. _Validation_exist_in_codelist_javase8:
+
+Implementation with Java SE 8 and Hibernate Validator 5.2+
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Here,by creating original annotation \ ``@ExistInCodeList``\ provided by the common library is wrapped,
+and how to make it correspond to collection is shown.
+
+\ ``java.lang.annotation.ElementType.TYPE_USE``\ has been added in Java SE 8.
+This makes it possible to add annotations to not only declarations of conventional classes and methods, but also general types (types of local variables, etc.),
+Hibernate Validator 5.2+ for Java SE 8 supports constraint annotations attached to parameterized types such as \ ``Collection``\ , \ ``Map``\ , \ ``Optional``\.By reading it, it is possible to check the values in the collection.
+
+By combining Java SE 8 with Hibernate Validator 5.2+, like \ ``List<@NotNullForTypeArgument String>``\,
+Annotations that can be added to the type specification part of the list can be created, and the values in the collection can be checked.
+For details,please refer Hibernate Validator document(\ `Type argument constraints <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#type-arguments-constraints>`_\ ).
+
+\ ``@ExistInCodeList``\ provided by the common library does not correspond to \ ``TYPE_USE``\ because it is Java SE 7 compatible,
+By creating original annotation that can be added to the type specifying part of the list as described above, it is possible to check the value in the collection.
+
+The main steps are as follows.
+
+* Use "TYPE_USE" and implement annotations extending \ ``@ExistInCodeList``\ which can be added to the type usage place.
+
+* Set the annotation to be checked.
+
+Input check for Role (\ ``List``\ of \ ``String``\) that can set multiple items is used as an example to explain.
+
+Multiple item configurable Role
+
+Implementation example of \ ``@ExistInCodeListForTypeArgument``\ which can be added to type usage.
+
+  .. code-block:: java
+
+    package com.example.common.validation;
+
+    import static java.lang.annotation.ElementType.TYPE_USE;
+    import static java.lang.annotation.RetentionPolicy.RUNTIME;
+    import java.lang.annotation.Documented;
+    import java.lang.annotation.Retention;
+    import java.lang.annotation.Target;
+    import javax.validation.Constraint;
+    import javax.validation.OverridesAttribute;
+    import javax.validation.Payload;
+    import javax.validation.ReportAsSingleViolation;
+    import org.terasoluna.gfw.common.codelist.ExistInCodeList;
+
+    @Documented
+    @Constraint(validatedBy = {})
+    @Target(TYPE_USE) // (1)
+    @Retention(RUNTIME)
+    @ReportAsSingleViolation
+    @ExistInCodeList(codeListId = "") // (2)
+    public @interface ExistInCodeListForTypeArgument {
+        String message() default "{com.example.common.validation.ExistInCodeListForTypeArgument.message}"; // (3)
+        
+        @OverridesAttribute(constraint = ExistInCodeList.class, name = "codeListId") // (4)
+        String codeListId();
+
+        
+        Class<?>[] groups() default {};
+
+        Class<? extends Payload>[] payload() default {};
+
+        @Target(TYPE_USE) // (1)
+        @Retention(RUNTIME)
+        @Documented
+        @interface List {
+            ExistInCodeListForTypeArgument[] value();
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Set \ ``TYPE_USE``\, so that this annotation can be added at the type usage place.
+     * - | (2)
+       - | Define the rules (\ ``@ExistInCodeList``\) used by this annotation.
+     * - | (3)
+       - | Define the default value of the error message. Also define any error message in ValidationMessages.properties.
+     * - | (4)
+       - | Override the \ ``codeListId``\  attribute of the \ ``@ExistInCodeList``\ annotation.
+
+
+|
+
+* Form class
+
+  .. code-block:: java
+
+    package com.example.sample.app.validation;
+
+    import java.util.List;
+    
+    import javax.validation.constraints.NotNull;
+    
+    import com.example.common.validation.ExistInCodeListForTypeArgument;
+
+    public class SampleForm {
+        @NotNull
+        @Valid // (1)
+        private List<@ExistInCodeListForTypeArgument(codeListId = "CL_ROLE") String> roles; // (2)
+
+        public List<String> getRoles() {
+            return roles;
+        }
+
+        public void setRoles(List<String> roles) {
+            this.roles = roles;
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Give \ ``javax.validation.Valid``\ annotation to enable input checking of element values in \ ``List``\
+     * - | (2)
+       - | Set the \ ``@ExistInCodeListForTypeArgument``\ annotation for the type specification part of the collection to be checked for input.
+         | Specify the code list as the check source in the \ ``codeListId``\  parameter of the annotation.
+
+
+|
+
+* JSP
+
+  .. code-block:: jsp
+
+    <form:form modelAttribute="sampleForm">
+        <!-- (1) -->
+        <form:checkboxes path="roles" items="${CL_ROLE}"/>
+        <form:errors path="roles*"/>
+        <form:button>Submit</form:button>
+    </form:form>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - |  Implement \ ``<form:checkboxes>``\.
+
+
+|
+
+
+.. _Validation_exist_in_codelist_formatter:
+
+Implementation of wrapper class of String using Java bean
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+The implementation introduced here is for users who do not use Java SE 8 and Hibernate Validator's original functions. In environments where the original features of Java SE 8 and Hibernate Validator can be used, :ref:`Validation_exist_in_codelist_javase8`\ is recommended.
+
+Since you can not use Bean Validation annotation for elements in the collection as described above when Java SE 8 and Hibernate Validator's original functions are not used,
+\ ``String``\ is wrapped with a Java bean and input check is done by appending \ ``@ExistInCodeList``\ to the property of the nested bean.
+
+When using a Spring-supplied tag library for a wrapper class, it is necessary to perform type conversion between a character string and a wrapper class in order to bind to a form. This is a `type conversion mechanism provided by Spring (Formatter) <http://docs.spring.io/spring/docs/4.3.5.RELEASE/spring-framework-reference/htmlsingle/#format>` _
+is used for implementation.
+
+By adding a type conversion from \ ``String``\ to \ ``Role``\, \ ``Role``\ to \ ``String``\ in Formatter,as with \ ``List<String>``\,
+it can be implemented using  \ ``<form:checkboxes>``\ without complicated implementation.
+
+The main steps are as follows.
+
+* Set the \ ``@ExistInCodeList``\ annotation for checking.
+
+* Create a class that implements the \ ``Formatter``\ class which is the interface for conversion.
+
+* Using \ ``ConversionServiceFactoryBean``\ register the created \ ``Formatter``\ in Spring.
+
+
+Also, in order to display items that have been successfully selected with \ ``<form:checkboxes>``\, you need to override the \ ``toString``\ method of the wrapper class in addition to the Formatter implementation .
+
+\ ``<form:checkboxes>``\ displays the elements of the collection specified by the \ ``items``\ attribute as selected items, if the value of the selected item specified by the \ ``path``\ attribute matches with the value of the property, it is displayed as the selected item.
+To determine this consistency, Formatter is used when the property is a single item, and in the case of an array or collection, the result of the \ ``toString``\ method of the specified property is used.
+
+In order to display it as a selected item successfully, you need to override the \ ``toString``\ method in a wrapper class and return the wrapped value string as in the example below.
+
+.. note::
+
+    For details, please refer the actual determination method of selected \ ``org.springframework.web.servlet.tags.form.SelectedValueComparator``\ class's `javadoc <https://github.com/spring-projects/spring-framework/blob/v4.3.5.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java>`__
+
+
+Input check for \ ``Role``\ (Java Bean's \ ``List``\) that can set multiple items is used as an example for explaination.
+
+|
+
+* Form class
+
+  .. code-block:: java
+    
+    package com.example.sample.app.validation;
+
+    import java.util.List;
+
+    import javax.validation.Valid;
+    import javax.validation.constraints.NotNull;
+
+    import com.example.sample.domain.model.Role;
+
+    public class SampleForm {
+        @NotNull
+        @Valid // (1)
+        private List<Role> roles; // (2)
+
+        public List<Role> getRoles() {
+            return roles;
+        }
+
+        public void setRoles(List<Role> roles) {
+            this.roles = roles;
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | \ ``javax.validation.Valid``\ annotation to enable bean validation of nested beans.
+     * - | (2)
+       - | You cannot add \ ``@ExistInCodeList``\ to \ ``List``\ of  \ ``String``\ but 
+           by wrapping \ ``String``\ with a Java bean you can add \ ``@ExistInCodeList``\ to the nested bean's \ ``String``\ property.
+
+|
+
+* JavaBean class
+
+  .. code-block:: java
+
+    package com.example.sample.domain.model
+
+    import org.terasoluna.gfw.common.codelist.ExistInCodeList;
+
+    public class Role {
+        @ExistInCodeList(codeListId = "CL_ROLE") // (1)
+        private String value;
+
+        public String getValue() {
+            return value;
+        }
+
+        public void setValue(String value) {
+            this.value = value;
+        }
+
+        @Override // (2)
+        public String toString() {
+            return getValue();
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Set the \ ``@ExistInCodeList``\ annotation for the property wrapped in the \ ``Role``\ class to perform input check, and specify the code list to check \ ``codeListId``\ .
+     * - | (2)
+       - | Override in order to draw the screen properly when multiple selection is made and return the character string of the wrapped value.
+
+|
+
+Implement the Formatter class that performs type conversion and register it in Spring.
+
+As mentioned above, it is necessary to wrap \ ``String``\ with \ ``Role``\ (Java bean) to perform input checking.
+Implement type conversion by \ ``Formatter``\ to convert from screen input (\ ``String``\) to wrapped \ ``Role``\ and vice versa.
+
+By adding type conversion, mutual conversion between \ ``String``\ and \ ``Role``\ is done automatically.
+On the Controller side, it is treated as \ ``List``\ of \ ``Role``\, on JSP side  \ ``List``\ of \ ``String``\.
+
+* \ ``Formatter``\ class
+
+  Implementation of \ ``Formatter``\ which performs mutual conversion between \ ``String``\ and \ ``Role``\.
+
+  .. code-block:: java
+
+    package com.example.sample.app.validation.formatter;
+
+    import java.text.ParseException;
+    import java.util.Locale;
+
+    import org.springframework.format.Formatter;
+
+    import com.example.usermanagement.domain.model.Role;
+
+    public class RoleFormatter implements Formatter<Role> { //(1)
+
+        @Override
+        public String print(Role source, Locale locale) {
+            return source.getValue();
+        }
+
+        @Override
+        public Role parse(String source, Locale locale) throws ParseException {
+            Role role = new Role();
+            role.setValue(source);
+            return role;
+        }
+
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Implement the interface \ ``org.springframework.format.Formatter<T>``\.
+
+|
+
+* Bean definition for applying original \ ``Formatter``\
+
+  .. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="conversionService"
+        class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
+        <property name="formatters">
+            <list>
+                <!-- (2) -->
+                <bean class="com.example.sample.app.validation.formatter.RoleFormatter" />
+            </list>
+        </property>
+    </bean>
+
+
+  .. code-block:: xml
+
+    <!-- (3) -->
+    <mvc:annotation-driven conversion-service="conversionService">
+        <!-- omitted -->
+    </mvc:annotation-driven>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Add bean definition of \ ``FormattingConversionServiceFactoryBean``\.
+     * - | (2)
+       - | Set the created Formatter class(\ ``RoleFormatter``\).
+     * - | (3)
+       - |  To use the customized type conversion, set the bean defined in (1) to the \ ``conversion-service``\ attribute of \ ``mvc:annotation-driven``\.
+
+|
+
+
+* JSP
+
+  .. code-block:: jsp
+
+    <form:form modelAttribute="sampleForm">
+        <!-- (1) -->
+        <form:checkboxes path="roles" items="${CL_ROLE}"/>
+        <form:errors path="roles*"/>
+        <form:button>Submit</form:button>
+    </form:form>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - |  \ ``<form:checkboxes>``\ can be used same as \ ``List<String>``\.
+
+
+|
 
 .. _Validation_implement_new_constraint:
 
@@ -2760,7 +3186,7 @@ Creation of Bean Validation annotation by implementing new rules
 
 Any rule can be created by implementing \ ``javax.validation.ConstraintValidator``\  interface and creating annotation that uses this Validator.
 
-The method of usage is as follows.
+The following 3 ways can be cited as applications.
 
 * Rules that cannot be implemented by combining the existing rules
 * check rule for correlated items
@@ -3713,6 +4139,15 @@ An example to show how to create an exception handling class is given below.
 
     Refer to ":ref:`application_layer_controller_advice`" for details of \ ``@ControllerAdvice``\  annotation.
 
+.. warning::
+
+    An error message can occur by using the  \ ``ConstraintViolation#getMessage``\ method, but since the message completion by Spring's function is not done, field names in error message at \ ``{0}``\ cannot be embedded.
+    
+    Instead, field names can be obtained with the \ ``ConstraintViolation#getPropertyPath``\ method.
+    
+    For message completion by Spring's function, please see the note of:ref:`Validation_message_in_validationmessages`.
+    
+    For details about \ ``ConstraintViolation``\,please refer \ `Hibernate Validator reference <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#section-constraint-violation-methods>`_\.
 
 Appendix
 --------------------------------------------------------------------------------
@@ -3959,7 +4394,7 @@ Refer to \ `Hibernate Validator specifications <http://docs.jboss.org/hibernate/
 
      For details of check rule change by XML, refer to \ `Hibernate reference <https://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/ch07.html#section-configuration-validation-xml>`_\ 
      and for how to create a new annotation, refer to \ :ref:`Validation_implement_new_constraint`\  respectively..
-
+     
 .. _Validation_default_message_in_hibernate_validator:
 
 Default messages provided by Hibernate Validator
@@ -4241,6 +4676,10 @@ Add a dependent library for the rules that are to be used. An example for how to
         </dependency>
     </dependencies>
 
+.. note::
+
+    In the above setting example,since it is a premise to manage the dependent library version with the parent project terasoluna-gfw-parent, specifying the version in pom.xml is not necessary.
+
 Next, a message definition corresponding to annotation is added to :file:`ValidationMessages.properties`  as explained in \ :ref:`Validation_message_in_validationmessages`\ .
 
 .. code-block:: properties
diff --git a/source_en/ArchitectureInDetail/WebServiceDetail/REST.rst b/source_en/ArchitectureInDetail/WebServiceDetail/REST.rst
index 98c80b9..921ba1f 100755
--- a/source_en/ArchitectureInDetail/WebServiceDetail/REST.rst
+++ b/source_en/ArchitectureInDetail/WebServiceDetail/REST.rst
@@ -773,7 +773,7 @@ Using the appropriate HTTP status code
 
  .. tip:: **HTTP Specifications**
  
-    Refer to `RFC 2616 (Hypertext Transfer Protocol -- HTTP/1.1) - 6.1.1 Status Code and Reason Phrase <http://tools.ietf.org/search/rfc2616#section-6.1.1>`_.
+    Refer to `RFC 7230 (Hypertext Transfer Protocol -- HTTP/1.1) - 3.1.2 Status Line <https://tools.ietf.org/html/rfc7230#section-3.1.2>`_.
 
 |
 
@@ -797,6 +797,15 @@ Using the appropriate HTTP status code
 
 |
 
+ .. note::
+
+    In RFC 7230 which specifies HTTP message syntax, output of description clauses of HTTP status code (\ ``reason-phrase``\) is not mandatory and it is prescribed that the client should be ignored.
+    For example, description clauses are not output in Tomcat 8.5 of implementation which is in conformance with RFC 7230.
+    
+    Refer to `RFC 7230(Hypertext Transfer Protocol -- HTTP/1.1) - 3.1.2 Status Line <https://tools.ietf.org/html/rfc7230#section-3.1.2>`_.
+
+|
+
 .. _RESTOverviewClientServerCommunicateOnStateless:
 
 Stateless communication between client and server
@@ -1175,12 +1184,6 @@ Assigning HTTP methods
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 CRUD operation for resources is published as REST API by assigning the following HTTP methods for the URI assigned to each resource.
 
- .. note:: **HEAD and OPTIONS method**
- 
-    Hereafter, HEAD and OPTIONS methods are described as well. However, providing them for REST API is optional.
-    
-    While creating the REST API conforming to HTTP specifications, it is necessary to provide the HEAD and OPTIONS methods as well. However, it is actually used very rarely and is not required in most of the cases.
-
 |
 
 .. _RESTHowToDesignAssignHttpMethodForCollectionResource:
@@ -1537,12 +1540,7 @@ When the cause of request failure lies at server side, HTTP status codes given b
 
 Authentication and Authorization
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-.. todo:: **TBD**
-
-    The guidelines for authentication and authorization control are explained here.
-    
-    Performing authentication and authorization using OAuth2 protocol will be described in subsequent versions.
+Please refer to \: ref: `OAuth <OAuth>` \ for the mechanism of authentication and authorization using the OAuth 2 mechanism.
 
 |
 
@@ -2186,8 +2184,11 @@ REST API specifications used in this explanation are as shown below.
 
  .. note::
  
-     This section focuses on the details of CRUD operation for a resource. Hence, HEAD and OPTIONS methods are not explained.
-     To create the RESTful Web Service conforming to HTTP specifications, refer to ":ref:`RESTAppendixRestApiOfHTTPCompliance`".
+     From Spring Framework 4.3, REST API for HEAD and OPTIONS methods is now implicitly provided,
+     so developers do not need to explicitly implement these REST APIs.
+     
+     Since the OPTIONS itself is not included in the Allow header that the implicitly prepared REST API for OPTIONS responds to,
+     please note that it differs from the implementation example introduced in the development guidelines up to TERASOLUNA Server Framework for Java 5.2.x.
 
 |
 
@@ -4632,9 +4633,7 @@ Security measures
 Authentication and Authorization
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-.. todo:: **TBD**
-
-    How to implement authentication and authorization using OAuth2 (Spring Security OAuth2), will be explained in subsequent versions.
+Please refer to \: ref: `OAuth <OAuth>` \ for how to achieve authentication and authorization using OAuth 2 (Spring Security OAuth 2).
 
 |
 
@@ -5563,205 +5562,6 @@ Implementation for each resource
 
 |
 
-.. _RESTAppendixDispatchOptionsMethod:
-
-Setting to dispatch OPTIONS method request to the Controller
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| When conforming to HTTP specifications, it is necessary to return the list of HTTP methods that are allowed to be called for each resource. Therefore, it is necessary to add the setting for dispatching OPTIONS method request, to the Controller.
-| By \ ``DispatcherServlet``\  default setting, the request for OPTIONS method is not dispatched in the Controller with the list of methods allowed by \ ``DispatcherServlet``\  being set in the Allow header.
-
-- :file:`web.xml`
-
- .. code-block:: xml
-    :emphasize-lines: 10-14
-
-    <!-- omitted -->
-
-    <servlet>
-        <servlet-name>appServlet</servlet-name>
-        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
-        <init-param>
-            <param-name>contextConfigLocation</param-name>
-            <param-value>classpath*:META-INF/spring/spring-mvc-rest.xml</param-value>
-        </init-param>
-        <!-- (1) -->
-        <init-param>
-            <param-name>dispatchOptionsRequest</param-name>
-            <param-value>true</param-value>
-        </init-param>
-        <load-on-startup>1</load-on-startup>
-    </servlet>
-
-    <!-- omitted -->
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - | Sr. No.
-     - | Description
-   * - | (1)
-     - | Set initialization parameter (dispatchOptionsRequest) value of \ ``DispatcherServlet``\  that receives RESTful Web Service request to \ ``true``\ .
-
-|
-
-.. _RESTAppendixRestApiOfHTTPComplianceImplementationOfOptionsSpecifiedResource:
-
-Implementing OPTIONS method
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| When conforming to HTTP specifications, it is necessary to return the list of HTTP methods that are allowed to be called for each resource.
-| API implementation that responds with list of HTTP methods (REST AP) supported by the resource specified in URI, is shown below.
-
-* | REST API implementation
-  | Implement a process wherein, list of HTTP methods (REST API) supported by the resource specified in URI is sent as response.
-
- .. code-block:: java
-    :emphasize-lines: 11, 14
-
-    @RequestMapping("members")
-    @RestController
-    public class MembersRestController {
-
-        // omitted
-
-        @RequestMapping(value = "{memberId}", method = RequestMethod.OPTIONS)
-        public ResponseEntity<Void> optionsMember(
-            @PathVariable("memberId") String memberId) {
-
-            // (1)
-            memberService.getMember(memberId);
-
-            // (2)
-            return ResponseEntity
-                    .ok()
-                    .allow(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.PUT,
-                            HttpMethod.DELETE, HttpMethod.OPTIONS).build();
-        }
-    
-        // omitted
-
-    }
-
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - | Call domain layer Service method and check to confirm if a resource matching with the ID fetched from path variable exists.
-    * - | (2)
-      - | **Set HTTP method supported by resource specified in URI, in Allow header.**
-
-|
-
-* Request example
-
- .. code-block:: guess
-    :emphasize-lines: 1
-
-    OPTIONS /rest-api-web/api/v1/members/M000000004 HTTP/1.1
-    Accept: text/plain, application/json, application/*+json, */*
-    User-Agent: Java/1.7.0_51
-    Host: localhost:8080
-    Connection: keep-alive
-
-
-|
-
-* Response example
-
- .. code-block:: guess
-    :emphasize-lines: 4
-
-    HTTP/1.1 200 OK
-    Server: Apache-Coyote/1.1
-    X-Track: 6d7bbc818c7f44e7942c54bc0ddc15bb
-    Allow: GET,HEAD,PUT,DELETE,OPTIONS
-    Content-Length: 0
-    Date: Mon, 17 Mar 2014 01:54:27 GMT
-
-|
-
-Implementing HEAD method
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| In order to conform to HTTP specifications, when GET method is implemented, HEAD method also needs to be implemented.
-| API implementation that responds with meta-information of the resource specified in URI, is as follows:
-
-
-* | REST API implementation
-  | A process is implemented wherein meta information of the resource specified in URI is fetched.
-
- .. code-block:: java
-    :emphasize-lines: 9
-
-    @RequestMapping("members")
-    @RestController
-    public class MemberRestController {
-
-        // omitted
-
-        @RequestMapping(value = "{memberId}",
-                        method = { RequestMethod.GET,
-                                   RequestMethod.HEAD }) // (1)
-
-        @ResponseStatus(HttpStatus.OK)
-        public MemberResource getMember(
-                @PathVariable("memberId") String memberId) {
-            // omitted
-        }
-
-        // omitted
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - | Add \ ``RequestMethod.HEAD``\  to the method attribute of REST API \ ``@RequestMapping``\  annotation that processes the GET method.
-        | HEAD method needs to respond only the header information, by performing the same process as GET method. Therefore, \ ``RequestMethod.HEAD``\  is also specified in the method attribute of \ ``@RequestMapping``\  annotation.
-        | It is advisable to perform a process similar to GET process as the Controller process since, the process for emptying response BODY is performed by standard functionality of Servlet API.
-
- |
- 
-* Request example
- 
- .. code-block:: guess
-    :emphasize-lines: 1
- 
-    HEAD /rest-api-web/api/v1/members/M000000001 HTTP/1.1
-    Accept: text/plain, application/json, application/*+json, */*
-    User-Agent: Java/1.7.0_51
-    Host: localhost:8080
-    Connection: keep-alive
-
- |
- 
-* Response example
-
- .. code-block:: guess
-    :emphasize-lines: 1, 4, 5
-
-    HTTP/1.1 200 OK
-    Server: Apache-Coyote/1.1
-    X-Track: 71093a551e624c149867b6bfec486d2c
-    Content-Type: application/json;charset=UTF-8
-    Content-Length: 452
-    Date: Thu, 13 Mar 2014 13:25:23 GMT
- 
-
-|
-
-
-
 .. _RESTAppendixDisabledCSRFProtection:
 
 Disabling CSRF measures
diff --git a/source_en/ImplementationAtEachLayer/ApplicationLayer.rst b/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
index 2a2ae83..998994f 100755
--- a/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
+++ b/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
@@ -1656,7 +1656,7 @@ Writing values in Cookie
     @RequestMapping("writeCookie")
     public String writeCookie(Model model,
             HttpServletResponse response) { // (1)
-        Cookie cookie = new Cookie("foo", "hello world!");
+        Cookie cookie = new Cookie("foo", "Helloworld!");
         response.addCookie(cookie); // (2)
         // do something
         return "sample/writeCookie";
@@ -1673,13 +1673,19 @@ Writing values in Cookie
      - Specify \ ``HttpServletResponse``\  object as argument to write to cookie. 
    * - | (2)
      - | Generate \ ``Cookie``\  object and add to \ ``HttpServletResponse``\  object. 
-       | For example, ``"hello world!"``  value is assigned to Cookie name ``"foo"``. 
+       | For example, ``"Helloworld!"``  value is assigned to Cookie name ``"foo"``. 
 
 .. tip::
 
     No difference compared to use of \ ``HttpServletResponse``\  which fetched as an argument of handler method, however,  \ ``org.springframework.web.util.CookieGenerator``\  class is provided by Spring
     as a class to write values in cookie. It should be used if required. 
 
+.. note::
+    Please note that some of the characters that cannot be used for Cookie name and value exist in In RFC 6265 which prescribes HTTP Cookie process.
+    For example, space character cannot be used in Cookie value in Tomcat 8.5 of implementation which is in conformance with RFC 6265.
+    
+    Refer to `RFC 6265(HTTP State Management Mechanism) 4.1 SetCookie <https://tools.ietf.org/html/rfc6265#section-4.1>`_ Syntax.
+
 |
 
 .. _controller_method_argument-pagination-label:
diff --git a/source_en/ImplementationAtEachLayer/CreateProject.rst b/source_en/ImplementationAtEachLayer/CreateProject.rst
index 87764a5..542ed3b 100755
--- a/source_en/ImplementationAtEachLayer/CreateProject.rst
+++ b/source_en/ImplementationAtEachLayer/CreateProject.rst
@@ -232,7 +232,7 @@ Deployment method (procedure) when Tomcat is used as an application server is gi
 	 
  * In addition, VirtualWebappLoader can also be used in the Tomcat 6.
 
-5. If Tomcat 8 is used, add /etc/foo/bar/\*.jar into class path using Resource function of the Tomcat.
+5. If Tomcat 8.x is used, add /etc/foo/bar/\*.jar into class path using Resource function of the Tomcat.
 
  * The following definition should be added in [CATALINA_HOME]/conf/[contextPath].xml file.
  * For details, refer to https://tomcat.apache.org/migration-8.html#Web_application_resources and `configs folder of terasoluna-tourreservation-env <https://github.com/terasolunaorg/terasoluna-tourreservation/tree/5.3.0.RELEASE/terasoluna-tourreservation-env/configs>`_\ .
diff --git a/source_en/Introduction/ChangeLog.rst b/source_en/Introduction/ChangeLog.rst
index 363e711..dc8b90c 100755
--- a/source_en/Introduction/ChangeLog.rst
+++ b/source_en/Introduction/ChangeLog.rst
@@ -19,13 +19,13 @@ Change Log
       - General
       - Correction of guideline mistakes (typing errors, simple mistakes, etc.)  
   
-      * For details of the correction,please refer \ `5.3.0's Issue list (clerical error) <https://github.com/terasolunaorg/guideline/issues?utf8=%E2%9C%93&q=%20label%3A5.3.0%20is%3Aclosed%20label%3A%22clerical%20error%22%20>`_\.
+        * For details of the correction,please refer \ `5.3.0's Issue list (clerical error) <https://github.com/terasolunaorg/guideline/issues?utf8=%E2%9C%93&q=%20label%3A5.3.0%20is%3Aclosed%20label%3A%22clerical%20error%22%20>`_\.
   
         Description details improved  
   
- 	  * For details of the improvement、please refer \ `5.3.0's Issue list(improvement) <https://github.com/terasolunaorg/guideline/issues?utf8=%E2%9C%93&q=label%3A5.3.0%20label%3Aimprovement%20is%3Aclosed%20>`_\.
+ 	    * For details of the improvement、please refer \ `5.3.0's Issue list(improvement) <https://github.com/terasolunaorg/guideline/issues?utf8=%E2%9C%93&q=label%3A5.3.0%20label%3Aimprovement%20is%3Aclosed%20>`_\.
 
-      - Modification in Maven command's startup option for generating a blank project due to the change of Maven archetype (change to \ `Maven Central <https://search.maven.org/>`_\)(\ `guideline#2444 <https://github.com/terasolunaorg/guideline/issues/2444>`_\ )
+        Modification in Maven command's startup option for generating a blank project due to the change of Maven archetype (change to \ `Maven Central <https://search.maven.org/>`_\)(\ `guideline#2444 <https://github.com/terasolunaorg/guideline/issues/2444>`_\ )
 
         * :doc:`../Overview/FirstApplication`  
         * :doc:`../ImplementationAtEachLayer/CreateWebApplicationProject` 
@@ -80,6 +80,12 @@ Change Log
         Modifications related to Spring Framework 4.3
         
         * Precautions while using \ ``@DateTimeFormat`` \  for JSR-310 Date and Time API class deleted (\ `guideline#2505 <https://github.com/terasolunaorg/guideline/issues/2505>`_\ )
+    
+    * -
+      - :doc:`../ArchitectureInDetail/WebApplicationDetail/SessionManagement`
+      - Description details added
+      
+        * Added about how to prevent binding of request parameters when receiving object stored in session scope (\ `guideline#1293 <https://github.com/terasolunaorg/guideline/issues/1293>`_\ )
         
     * -
       - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
@@ -110,7 +116,7 @@ Change Log
 
         * Added explanation on how to avoid garbled characters when using JBoss EAP 7.0(\ `guideline#2403 <https://github.com/terasolunaorg/guideline/issues/2403>`_\ )
         
-        * -
+    * -
       - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
       - Description details updated,added
 
@@ -130,19 +136,33 @@ Change Log
       - Description details added
 
         * Added warning for a bug in which "nowait" clause is not added when using PostgreSQL(\ `guideline#2372 <https://github.com/terasolunaorg/guideline/issues/2372>`_\ )
-        
+          
     * -
+      - :doc:`../ArchitectureInDetail/WebServiceDetail/REST`
+      - Modification related to Spring Framework 4.3
+      
+        * Added explanation that HEAD and OPTIONS methods are implicitly prepared (\ `guideline#1704 <https://github.com/terasolunaorg/guideline/issues/1704>`_\ )
+      
+    * -
       - :doc:`../Security/LinkageWithBrowser`
       - Modifications associated with Spring Security 4.1.4 support
       
         * Added description on Content Security Policy (CSP)"(\ `guideline#2400 <https://github.com/terasolunaorg/guideline/issues/2400>`_\ )
         * Description added for HTTP Public Key Pinning (HPKP) (\ `guideline#2401 <https://github.com/terasolunaorg/guideline/issues/2401>`_\ )
+        
+	  * -  
+	    - :doc:`../Security/OAuth`  
+ 	    - New addition  
+ 	    
+ 		    * Added OAuth(\ `guideline#2145 <https://github.com/terasolunaorg/guideline/issues/2145>`_\ )  
 
     * -
       - :doc:`../Security/Authorization`
       - Description details added
 
         * Warning related to access control for specific URL added (\ `guideline#2399 <https://github.com/terasolunaorg/guideline/issues/2399>`_\ )
+        
+        * Precautions for changing specifications of path matching of \ ``AntPathRequestMatcher``\  added (\ `guideline#2428 <https://github.com/terasolunaorg/guideline/issues/2428>`_\ )
 
     * -
       - :doc:`../Tutorial/TutorialTodo`
@@ -215,6 +235,11 @@ Change Log
 
     * -
       - :doc:`../ArchitectureInDetail/WebApplicationDetail/Validation`
+      
+      - Addition of description contents  
+        
+ 		* Add input check method to values in collection(\ `guideline#407 <https://github.com/terasolunaorg/guideline/issues/407>`_\ )
+ 		
       - Description details modified
 
         * A method to directly handle a message property file without conversion from  Native to Ascii is added (\ `guideline#994 <https://github.com/terasolunaorg/guideline/issues/994>`_\ )
diff --git a/source_en/Overview/FrameworkStack.rst b/source_en/Overview/FrameworkStack.rst
index 6954bb6..1272a5a 100755
--- a/source_en/Overview/FrameworkStack.rst
+++ b/source_en/Overview/FrameworkStack.rst
@@ -269,6 +269,12 @@ List of OSS being used in version 5.3.0.RELEASE.
       - 4.1.4.RELEASE
       - \*
       -
+    * - Spring  
+      - org.springframework.security.oauth  
+      - spring-security-oauth2  
+      - 2.0.12.RELEASE  
+      - \*  
+      -
     * - MyBatis3
       - org.mybatis
       - mybatis
diff --git a/source_en/Security/Authorization.rst b/source_en/Security/Authorization.rst
index 66a731d..c672a5a 100755
--- a/source_en/Security/Authorization.rst
+++ b/source_en/Security/Authorization.rst
@@ -212,6 +212,8 @@ Common Expressions provided by Spring Security are as given below.
 
 |
 
+.. _built-incommon-expressions: 
+
 Built-In Web Expressions
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
@@ -354,6 +356,51 @@ Therefore, definition order must be taken into consideration even while specifyi
               <!-- omitted -->
           </sec:http>
 
+.. warning::
+    Specifications of path matching for \ `AntPathRequestMatcher` \  used by Spring Security by default are now case sensitive for Spring Security 4.1 and subsequent versions.
+
+    For example, as shown below, when an access policy is to be defined for endpoint of Spring MVC which allocates \ ``/Todo/List``\  path,
+    the values specified in \ ``pattern``\  attribute of \ ``<sec:intercept-url>``\  tag must be aligned for uppercase and lowercase letters like \ ``/Todo/List``\  and \ ``/Todo/*``\.
+    If the values not aligned by uppercase and lowercase letters like \ ``/todo/list``\  and \ ``/todo/**``\  are specified accidentally, it should be noted that intended authorization control cannot be performed.
+
+    * Implementation example of Spring MVC endpoint
+
+     .. code-block:: java
+
+         @RequestMapping(value="/Todo/List")
+         public String viewTodoList(){
+            //...
+         }
+
+    * Definition example of access policy
+
+     .. code-block:: xml 
+
+         <sec:http>
+             <sec:intercept-url pattern="/Todo/List" access="isAuthenticated()" />
+             <!-- omitted -->
+         </sec:http>
+
+.. warning::
+    In Spring MVC and Spring Security, the mechanism of matching with the request is strictly different, and there is a vulnerability that breaks through the authorization function of Spring Security and can access the handler method using this difference.
+    For details of this vulnerability, refer to "\ `CVE-2016-5007 Spring Security / MVC Path Matching Inconsistency <https://pivotal.io/security/cve-2016-5007>`_\".
+
+    In Spring Framework 4.3.1 and later, Spring Security 4.1.1 and later, this problem is solved by using \ `MvcRequestMatcher` \ ,
+    but  in the Spring Framework 4.2.x used by TERASOLUNA Server Framework for Java (5.x), \ `org.springframework.util.AntPathMatcher` \  has to be used which set Spring MVC \ `trimTokens` \ property \ `false` \ .
+
+      .. code-block:: xml
+
+          <mvc:annotation-driven>
+              <mvc:path-matching path-matcher="pathMatcher" />
+          </mvc:annotation-driven>
+
+          <bean id="pathMatcher" class="org.springframework.util.AntPathMatcher">
+              <property name="trimTokens" value="false" />
+          </bean>
+    
+    Although the above measures are set in blank projects that are provided by TERASOLUNA Server Framework for Java,
+    it is necessary to be aware of it because it will be exposed to vulnerability if you remove the setting.
+
     Further, if an access policy for a specific URL is to be specified (wild cards like \ ``*``\ , \ ``**``\  etc are not included in \ ``pattern``\  attribute),
     an access policy with a pattern with an extension and a pattern with \ ``/``\  appended at the end of request path must be added.
 
diff --git a/source_en/Security/index.rst b/source_en/Security/index.rst
index cde9b4d..ed1743e 100755
--- a/source_en/Security/index.rst
+++ b/source_en/Security/index.rst
@@ -13,6 +13,7 @@ Security countermeasures
    XSS
    Encryption
    SecureLoginDemo
+   OAuth
 
 .. raw:: latex
 
