diff --git a/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java b/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
index cc3f8a8434..6498fe8320 100755
--- a/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
+++ b/okhttp-testing-support/src/main/java/com/squareup/okhttp/internal/io/InMemoryFileSystem.java
@@ -36,8 +36,8 @@
 /** A simple file system where all files are held in memory. Not safe for concurrent use. */
 public final class InMemoryFileSystem implements FileSystem, TestRule {
   private final Map<File, Buffer> files = new LinkedHashMap<>();
-  private final Map<Source, Throwable> openSources = new IdentityHashMap<>();
-  private final Map<Sink, Throwable> openSinks = new IdentityHashMap<>();
+  private final Map<Source, File> openSources = new IdentityHashMap<>();
+  private final Map<Sink, File> openSinks = new IdentityHashMap<>();
 
   @Override public Statement apply(final Statement base, Description description) {
     return new Statement() {
@@ -49,20 +49,19 @@
   }
 
   public void ensureResourcesClosed() {
-    List<Throwable> openResources = new ArrayList<>();
-    for (Throwable file : openSources.values()) {
-      openResources.add(file);
+    List<String> openResources = new ArrayList<>();
+    for (File file : openSources.values()) {
+      openResources.add("Source for " + file);
     }
-    for (Throwable file : openSinks.values()) {
-      openResources.add(file);
+    for (File file : openSinks.values()) {
+      openResources.add("Sink for " + file);
     }
     if (!openResources.isEmpty()) {
-      for (Throwable resource : openResources) {
-        System.err.println("-----");
-        resource.printStackTrace();
+      StringBuilder builder = new StringBuilder("Resources acquired but not closed:");
+      for (String resource : openResources) {
+        builder.append("\n * ").append(resource);
       }
-      System.err.println("-----");
-      throw new IllegalStateException("Resources were not closed.");
+      throw new IllegalStateException(builder.toString());
     }
   }
 
@@ -71,7 +70,7 @@ public void ensureResourcesClosed() {
     if (result == null) throw new FileNotFoundException();
 
     final Source source = result.clone();
-    openSources.put(source, new RuntimeException());
+    openSources.put(source, file);
 
     return new ForwardingSource(source) {
       @Override public void close() throws IOException {
@@ -100,7 +99,7 @@ private Sink sink(File file, boolean appending) {
     files.put(file, result);
 
     final Sink sink = result;
-    openSinks.put(sink, new RuntimeException());
+    openSinks.put(sink, file);
 
     return new ForwardingSink(sink) {
       @Override public void close() throws IOException {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
index 9d651473bc..f2447ecc64 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
@@ -20,7 +20,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import okio.Buffer;
 
 /**
  * Records received HTTP responses so they can be later retrieved by tests.
@@ -36,11 +35,8 @@
   }
 
   @Override public synchronized void onResponse(Response response) throws IOException {
-    Buffer buffer = new Buffer();
-    ResponseBody body = response.body();
-    body.source().readAll(buffer);
-
-    responses.add(new RecordedResponse(response.request(), response, null, buffer.readUtf8(), null));
+    String body = response.body().string();
+    responses.add(new RecordedResponse(response.request(), response, null, body, null));
     notifyAll();
   }
 
