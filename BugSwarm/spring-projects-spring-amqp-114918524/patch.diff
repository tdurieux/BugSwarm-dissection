diff --git a/build.gradle b/build.gradle
index 0a867d1c72..8e7140c48c 100755
--- a/build.gradle
+++ b/build.gradle
@@ -178,7 +178,6 @@ subprojects { subproject ->
 
 	checkstyle {
 		configFile = new File(rootDir, "src/checkstyle/checkstyle.xml")
-		// ignoreFailures = true
 	}
 
 	artifacts {
diff --git a/spring-amqp/src/main/java/org/springframework/amqp/core/MessageProperties.java b/spring-amqp/src/main/java/org/springframework/amqp/core/MessageProperties.java
index 47551a53cf..6c3a87cdf4 100755
--- a/spring-amqp/src/main/java/org/springframework/amqp/core/MessageProperties.java
+++ b/spring-amqp/src/main/java/org/springframework/amqp/core/MessageProperties.java
@@ -113,6 +113,8 @@
 
 	private volatile Integer receivedDelay;
 
+	private volatile MessageDeliveryMode receivedDeliveryMode;
+
 	public void setHeader(String key, Object value) {
 		this.headers.put(key, value);
 	}
@@ -250,6 +252,14 @@ public MessageDeliveryMode getDeliveryMode() {
 		return this.deliveryMode;
 	}
 
+	public MessageDeliveryMode getReceivedDeliveryMode() {
+		return this.receivedDeliveryMode;
+	}
+
+	public void setReceivedDeliveryMode(MessageDeliveryMode receivedDeliveryMode) {
+		this.receivedDeliveryMode = receivedDeliveryMode;
+	}
+
 	// why not a Date or long?
 	public void setExpiration(String expiration) {
 		this.expiration = expiration;
diff --git a/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpHeaders.java b/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpHeaders.java
index d03a27872f..654327f771 100755
--- a/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpHeaders.java
+++ b/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpHeaders.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,6 +24,7 @@
  * Message} Headers.
  *
  * @author Mark Fisher
+ * @author Gary Russell
  * @since 1.4
  */
 public abstract class AmqpHeaders {
@@ -64,6 +65,8 @@
 
 	public static final String RECEIVED_DELAY = PREFIX + "receivedDelay";
 
+	public final static String RECEIVED_DELIVERY_MODE = PREFIX + "receivedDeliveryMode";
+
 	public static final String RECEIVED_EXCHANGE = PREFIX + "receivedExchange";
 
 	public static final String RECEIVED_ROUTING_KEY = PREFIX + "receivedRoutingKey";
diff --git a/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpMessageHeaderAccessor.java b/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpMessageHeaderAccessor.java
index 54e77c8461..257e09eef3 100755
--- a/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpMessageHeaderAccessor.java
+++ b/spring-amqp/src/main/java/org/springframework/amqp/support/AmqpMessageHeaderAccessor.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 the original author or authors.
+ * Copyright 2014-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -102,6 +102,10 @@ public MessageDeliveryMode getDeliveryMode() {
 		return (MessageDeliveryMode) getHeader(AmqpHeaders.DELIVERY_MODE);
 	}
 
+	public MessageDeliveryMode getReceivedDeliveryMode() {
+		return (MessageDeliveryMode) getHeader(AmqpHeaders.RECEIVED_DELIVERY_MODE);
+	}
+
 	public Long getDeliveryTag() {
 		return (Long) getHeader(AmqpHeaders.DELIVERY_TAG);
 	}
diff --git a/spring-amqp/src/main/java/org/springframework/amqp/support/SimpleAmqpHeaderMapper.java b/spring-amqp/src/main/java/org/springframework/amqp/support/SimpleAmqpHeaderMapper.java
index 111e8afa09..88770014dd 100755
--- a/spring-amqp/src/main/java/org/springframework/amqp/support/SimpleAmqpHeaderMapper.java
+++ b/spring-amqp/src/main/java/org/springframework/amqp/support/SimpleAmqpHeaderMapper.java
@@ -185,9 +185,9 @@ public MessageHeaders toHeaders(MessageProperties amqpMessageProperties) {
 			if (correlationId != null && correlationId.length > 0) {
 				headers.put(AmqpHeaders.CORRELATION_ID, correlationId);
 			}
-			MessageDeliveryMode deliveryMode = amqpMessageProperties.getDeliveryMode();
-			if (deliveryMode != null) {
-				headers.put(AmqpHeaders.DELIVERY_MODE, deliveryMode);
+			MessageDeliveryMode receivedDeliveryMode = amqpMessageProperties.getReceivedDeliveryMode();
+			if (receivedDeliveryMode != null) {
+				headers.put(AmqpHeaders.RECEIVED_DELIVERY_MODE, receivedDeliveryMode);
 			}
 			long deliveryTag = amqpMessageProperties.getDeliveryTag();
 			if (deliveryTag > 0) {
diff --git a/spring-amqp/src/test/java/org/springframework/amqp/support/AmqpMessageHeaderAccessorTests.java b/spring-amqp/src/test/java/org/springframework/amqp/support/AmqpMessageHeaderAccessorTests.java
index 23801ece77..39f44c7b96 100755
--- a/spring-amqp/src/test/java/org/springframework/amqp/support/AmqpMessageHeaderAccessorTests.java
+++ b/spring-amqp/src/test/java/org/springframework/amqp/support/AmqpMessageHeaderAccessorTests.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,6 +16,9 @@
 
 package org.springframework.amqp.support;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
 import java.util.Date;
 import java.util.Map;
 
@@ -29,10 +32,9 @@
 import org.springframework.messaging.support.MessageBuilder;
 import org.springframework.util.MimeType;
 
-import static org.junit.Assert.*;
-
 /**
  * @author Stephane Nicoll
+ * @author Gary Russell
  */
 public class AmqpMessageHeaderAccessorTests {
 
@@ -51,7 +53,7 @@ public void validateAmqpHeaders() throws Exception {
 		properties.setContentLength(200L);
 		properties.setContentType("text/plain");
 		properties.setCorrelationId(correlationId);
-		properties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);
+		properties.setReceivedDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);
 		properties.setDeliveryTag(555L);
 		properties.setExpiration("expiration-1234");
 		properties.setMessageCount(42);
@@ -77,7 +79,7 @@ public void validateAmqpHeaders() throws Exception {
 		assertEquals(Long.valueOf(200), headerAccessor.getContentLength());
 		assertEquals(MimeType.valueOf("text/plain"), headerAccessor.getContentType());
 		assertEquals(correlationId, headerAccessor.getCorrelationId());
-		assertEquals(MessageDeliveryMode.NON_PERSISTENT, headerAccessor.getDeliveryMode());
+		assertEquals(MessageDeliveryMode.NON_PERSISTENT, headerAccessor.getReceivedDeliveryMode());
 		assertEquals(Long.valueOf(555), headerAccessor.getDeliveryTag());
 		assertEquals("expiration-1234", headerAccessor.getExpiration());
 		assertEquals(Integer.valueOf(42), headerAccessor.getMessageCount());
diff --git a/spring-amqp/src/test/java/org/springframework/amqp/support/MessagePostProcessorUtilsTests.java b/spring-amqp/src/test/java/org/springframework/amqp/support/MessagePostProcessorUtilsTests.java
index b0e278e060..2954aa03fd 100755
--- a/spring-amqp/src/test/java/org/springframework/amqp/support/MessagePostProcessorUtilsTests.java
+++ b/spring-amqp/src/test/java/org/springframework/amqp/support/MessagePostProcessorUtilsTests.java
@@ -56,11 +56,14 @@ public void testOrderIng() {
 		assertEquals(2, ((POMPP) mpp).getOrder());
 		mpp = iterator.next();
 		assertThat(mpp, Matchers.instanceOf(POMPP.class));
-		assertEquals(6, ((POMPP) mpp).getOrder());mpp = iterator.next();
+		assertEquals(6, ((POMPP) mpp).getOrder());
+		mpp = iterator.next();
 		assertThat(mpp, Matchers.instanceOf(OMPP.class));
-		assertEquals(1, ((OMPP) mpp).getOrder());mpp = iterator.next();
+		assertEquals(1, ((OMPP) mpp).getOrder());
+		mpp = iterator.next();
 		assertThat(mpp, Matchers.instanceOf(OMPP.class));
-		assertEquals(3, ((OMPP) mpp).getOrder());mpp = iterator.next();
+		assertEquals(3, ((OMPP) mpp).getOrder());
+		mpp = iterator.next();
 		assertThat(mpp, Matchers.instanceOf(MPP.class));
 	}
 
diff --git a/spring-amqp/src/test/java/org/springframework/amqp/support/SimpleAmqpHeaderMapperTests.java b/spring-amqp/src/test/java/org/springframework/amqp/support/SimpleAmqpHeaderMapperTests.java
index 23ac619819..a7c5488ad2 100755
--- a/spring-amqp/src/test/java/org/springframework/amqp/support/SimpleAmqpHeaderMapperTests.java
+++ b/spring-amqp/src/test/java/org/springframework/amqp/support/SimpleAmqpHeaderMapperTests.java
@@ -122,7 +122,7 @@ public void toHeaders() {
 		amqpProperties.setContentType("test.contentType");
 		byte[] testCorrelationId = new byte[] {1, 2, 3};
 		amqpProperties.setCorrelationId(testCorrelationId);
-		amqpProperties.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);
+		amqpProperties.setReceivedDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);
 		amqpProperties.setDeliveryTag(1234L);
 		amqpProperties.setExpiration("test.expiration");
 		amqpProperties.setMessageCount(42);
@@ -148,7 +148,7 @@ public void toHeaders() {
 		assertEquals(99L, headerMap.get(AmqpHeaders.CONTENT_LENGTH));
 		assertEquals("test.contentType", headerMap.get(AmqpHeaders.CONTENT_TYPE));
 		assertEquals(testCorrelationId, headerMap.get(AmqpHeaders.CORRELATION_ID));
-		assertEquals(MessageDeliveryMode.NON_PERSISTENT, headerMap.get(AmqpHeaders.DELIVERY_MODE));
+		assertEquals(MessageDeliveryMode.NON_PERSISTENT, headerMap.get(AmqpHeaders.RECEIVED_DELIVERY_MODE));
 		assertEquals(1234L, headerMap.get(AmqpHeaders.DELIVERY_TAG));
 		assertEquals("test.expiration", headerMap.get(AmqpHeaders.EXPIRATION));
 		assertEquals(42, headerMap.get(AmqpHeaders.MESSAGE_COUNT));
diff --git a/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java b/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
index b7a657d348..16795c4376 100755
--- a/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
+++ b/spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java
@@ -126,10 +126,11 @@ public MessageProperties toMessageProperties(final BasicProperties source, final
 		target.setAppId(source.getAppId());
 		target.setClusterId(source.getClusterId());
 		target.setType(source.getType());
-		Integer deliverMode = source.getDeliveryMode();
-		if (deliverMode != null) {
-			target.setDeliveryMode(MessageDeliveryMode.fromInt(deliverMode));
+		Integer deliveryMode = source.getDeliveryMode();
+		if (deliveryMode != null) {
+			target.setReceivedDeliveryMode(MessageDeliveryMode.fromInt(deliveryMode));
 		}
+		target.setDeliveryMode(null);
 		target.setExpiration(source.getExpiration());
 		target.setPriority(source.getPriority());
 		target.setContentType(source.getContentType());
diff --git a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
index cfd10140c7..7f86464c42 100755
--- a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
+++ b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java
@@ -26,6 +26,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
@@ -292,7 +293,7 @@ public void testExclusive() throws Exception {
 		assertTrue(latch2.await(10, TimeUnit.SECONDS));
 		container2.stop();
 		ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
-		verify(logger).info(captor.capture());
+		verify(logger, atLeastOnce()).info(captor.capture());
 		assertThat(captor.getAllValues(), contains(containsString("exclusive")));
 		ArgumentCaptor<ListenerContainerConsumerFailedEvent> eventCaptor = ArgumentCaptor
 				.forClass(ListenerContainerConsumerFailedEvent.class);
diff --git a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverterTests.java b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverterTests.java
index 44c04550e9..d622c68cd1 100755
--- a/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverterTests.java
+++ b/spring-rabbit/src/test/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverterTests.java
@@ -32,6 +32,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import org.springframework.amqp.core.MessageDeliveryMode;
 import org.springframework.amqp.core.MessageProperties;
 
 import com.rabbitmq.client.AMQP.BasicProperties;
@@ -222,4 +223,16 @@ public void testCorrelationIdAsString() {
 		assertEquals("bar", new String(messageProperties.getCorrelationId()));
 	}
 
+	@Test
+	public void testInboundDeliveryMode() {
+		DefaultMessagePropertiesConverter converter = new DefaultMessagePropertiesConverter();
+		MessageProperties props = new MessageProperties();
+		props.setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);
+		BasicProperties bProps = converter.fromMessageProperties(props, "UTF-8");
+		assertEquals(MessageDeliveryMode.toInt(MessageDeliveryMode.NON_PERSISTENT), bProps.getDeliveryMode().intValue());
+		props = converter.toMessageProperties(bProps, null, "UTF-8");
+		assertEquals(MessageDeliveryMode.NON_PERSISTENT, props.getReceivedDeliveryMode());
+		assertNull(props.getDeliveryMode());
+	}
+
 }
diff --git a/src/reference/asciidoc/amqp.adoc b/src/reference/asciidoc/amqp.adoc
index 94b716e3bc..50f43756d9 100755
--- a/src/reference/asciidoc/amqp.adoc
+++ b/src/reference/asciidoc/amqp.adoc
@@ -1527,6 +1527,8 @@ The `com.rabbitmq.client.Channel` on which the message was received
 The `org.springframework.messaging.Message` representing the incoming AMQP message.
 Note that this message holds both the custom and the standard headers (as defined by `AmqpHeaders`).
 
+NOTE: Starting with _version 1.6_, the inbound `deliveryMode` header is now available in the header with name
+`AmqpHeaders.RECEIVED_DELIVERY_MODE` instead of `AmqpHeaders.DELIVERY_MODE`.
 
 `@Header`-annotated method arguments to extract a specific header value, including standard AMQP headers.
 
@@ -2122,6 +2124,11 @@ For outbound messages:
 - `BYTES` - just the `correlationId` property is mapped
 - `BOTH` - Both properties will be considered, with the String property taking precedence
 
+Also starting with _version 1.6_, the inbound `deliveryMode` header is no longer mapped to
+`MessageProperties.deliveryMode`, it is mapped to `MessageProperties.receivedDeliveryMode` instead.
+This is to avoid unexpected propagation of this property if the same `MessageProperties` object is used for an
+outbound message.
+
 [[post-processing]]
 ==== Modifying Messages - Compression and More
 
diff --git a/src/reference/asciidoc/whats-new.adoc b/src/reference/asciidoc/whats-new.adoc
index e76b4fe11d..ee05a9c00f 100755
--- a/src/reference/asciidoc/whats-new.adoc
+++ b/src/reference/asciidoc/whats-new.adoc
@@ -87,6 +87,18 @@ A large incoming `LongString` is now correctly "converted" on output too.
 
 See <<message-properties-converters>> for more information.
 
+====== Inbound Delivery Mode
+
+The `deliveryMode` header is no longer mapped to the `MessageProperties.deliveryMode`; this is to avoid unintended
+propagation if the the same `MessageProperties` object is used to send an outbound message.
+Instead, the inbound `deliveryMode` header is mapped to `MessageProperties.receivedDeliveryMode`.
+
+See <<message-properties-converters>> for more information.
+
+When using annotated endpoints, the header is provided in the header named `AmqpHeaders.RECEIVED_DELIVERY_MODE`.
+
+See <<async-annotation-driven-enable-signature>> for more information.
+
 ===== RabbitAdmin Changes
 
 ====== Declaration Failures
