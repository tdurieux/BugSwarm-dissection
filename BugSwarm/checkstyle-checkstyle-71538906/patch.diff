diff --git a/README.md b/README.md
index 95e6bef56c..a0494c024d 100755
--- a/README.md
+++ b/README.md
@@ -1,4 +1,5 @@
 [![][travis img]][travis]
+[![][appveyor img]][appveyor]
 [![][coverage img]][coverage]
 [![][mavenbadge img]][mavenbadge]
 [![][versioneye img]][versioneye]
@@ -19,7 +20,8 @@ Documentation is available in HTML format, see http://checkstyle.sourceforge.net
 
 Continuous integration and Quality reports
 ======================
-Travis: [![][travis img]][travis]
+Travis (Linux build): [![][travis img]][travis]
+Appveyor (Windows build): [![][appveyor img]][appveyor]
 
 Quality reports: http://checkstyle.sourceforge.net/project-reports.html
 
@@ -60,6 +62,9 @@ directory.
 [travis]:http://travis-ci.org/checkstyle/checkstyle
 [travis img]:https://secure.travis-ci.org/checkstyle/checkstyle.png
 
+[appveyor]:https://ci.appveyor.com/project/romani/checkstyle
+[appveyor img]:https://ci.appveyor.com/api/projects/status/dvsups9tbw64378v?svg=true
+
 [sonar]:http://nemo.sonarqube.org/dashboard/index/com.puppycrawl.tools:checkstyle
 [sonar img]:https://dev.eclipse.org/sonar/images/logo.png?1400775536
 
diff --git a/appveyor.yml b/appveyor.yml
index 397d48c77c..57fea24875 100755
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -1,16 +1,14 @@
+os: Windows Server 2012
 version: '{build}'
 skip_tags: true
 clone_depth: 10
-environment:
-  matrix:
-    #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
-    - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
 branches:
   only:
     - master
   except:
     - gh-pages
-os: Windows Server 2012
+init:
+  - git config --global core.autocrlf true
 install:
   - ps: |
       Add-Type -AssemblyName System.IO.Compression.FileSystem
@@ -22,10 +20,17 @@ install:
         [System.IO.Compression.ZipFile]::ExtractToDirectory("C:\maven-bin.zip", "C:\maven")
       }
   - cmd: SET PATH=C:\maven\apache-maven-3.2.5\bin;%JAVA_HOME%\bin;%PATH%
-  - cmd: SET MAVEN_OPTS=-XX:MaxPermSize=2g -Xmx4g
-  - cmd: SET JAVA_OPTS=-XX:MaxPermSize=2g -Xmx4g
+  - cmd: git config --global core.autocrlf
   - cmd: mvn --version
   - cmd: java -version
+cache:
+  - C:\maven\
+  - C:\Users\appveyor\.m2
+
+environment:
+  matrix:
+    #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
+    - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
 build_script: >
   mvn clean site 
   -Dlinkcheck.skip=true -Dmaven.javadoc.skip=true 
@@ -33,6 +38,3 @@ build_script: >
   -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true
 test_script:
   - mvn clean verify
-cache:
-  - C:\maven\
-  - C:\Users\appveyor\.m2
diff --git a/config/ant-phase-verify.xml b/config/ant-phase-verify.xml
index 867c11556b..b2277f1c55 100755
--- a/config/ant-phase-verify.xml
+++ b/config/ant-phase-verify.xml
@@ -34,6 +34,7 @@
       <classpath path="${mvn.runtime_classpath}"/>
       <property key="checkstyle.cache.file" file="${mvn.project.build.directory}/cachefile"/>
       <property key="checkstyle.header.file" file="config/java.header"/>
+      <property key="checkstyle.regexp.header.file" file="config/java_regexp.header"/>
       <property key="checkstyle.importcontrol.file" file="config/import-control.xml"/>
       <property key="checkstyle.suppressions.file"
                 file="config/suppressions.xml"/>
diff --git a/config/build.xml b/config/build.xml
index 2488312039..9d593dd7c1 100755
--- a/config/build.xml
+++ b/config/build.xml
@@ -36,6 +36,7 @@
       <classpath refid="run.classpath"/>
       <property key="checkstyle.cache.file" file="${target.dir}/cachefile"/>
       <property key="checkstyle.header.file" file="config/java.header"/>
+      <property key="checkstyle.regexp.header.file" file="config/java_regexp.header"/>
       <property key="checkstyle.importcontrol.file" file="config/import-control.xml"/>
       <property key="checkstyle.suppressions.file"
                 file="config/suppressions.xml"/>
diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 9a433aa1e3..e4502c0933 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -53,11 +53,14 @@
   </module>
 
   <module name="RegexpMultiline"/>
-
-  <!-- 
-  <module name="RegexpHeader"/>
+  <module name="RegexpHeader">
+    <property name="headerFile" value="${checkstyle.regexp.header.file}"/>
+    <property name="fileExtensions" value="java"/>
+  </module>
+  <!--
   <module name="UniqueProperties"/>
   -->
+
   <module name="TreeWalker">
     <property name="tabWidth" value="4"/>
 
diff --git a/config/java_regexp.header b/config/java_regexp.header
new file mode 100755
index 0000000000..c481e3ff1b
--- /dev/null
+++ b/config/java_regexp.header
@@ -0,0 +1,18 @@
+^/{80}$
+^/{2} checkstyle: Checks Java source code for adherence to a set of rules.$
+^/{2} Copyright \(C\) \d\d\d\d-\d\d\d\d the original author or authors.$
+^/{2}$
+^/{2} This library is free software; you can redistribute it and/or$
+^/{2} modify it under the terms of the GNU Lesser General Public$
+^/{2} License as published by the Free Software Foundation; either$
+^/{2} version \d.\d of the License, or \(at your option\) any later version.$
+^/{2}$
+^/{2} This library is distributed in the hope that it will be useful,$
+^/{2} but WITHOUT ANY WARRANTY; without even the implied warranty of$
+^/{2} MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU$
+^/{2} Lesser General Public License for more details.$
+^/{2}$
+^/{2} You should have received a copy of the GNU Lesser General Public$
+^/{2} License along with this library; if not, write to the Free Software$
+^/{2} Foundation, Inc., \d\d Temple Place, Suite \d\d\d, Boston, MA  \d\d\d\d\d-\d\d\d\d  USA$
+^/{80}$
diff --git a/pom.xml b/pom.xml
index dc9a904496..3bbdba7cca 100755
--- a/pom.xml
+++ b/pom.xml
@@ -167,7 +167,7 @@
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
     <projectVersion>${project.version}</projectVersion>
-    <antlr4.version>4.5</antlr4.version>
+    <antlr4.version>4.5.1</antlr4.version>
     <maven.site.plugin.version>3.4</maven.site.plugin.version>
     <maven.findbugs.plugin.version>3.0.1</maven.findbugs.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
@@ -190,13 +190,6 @@
       <groupId>org.antlr</groupId>
       <artifactId>antlr4-runtime</artifactId>
       <version>${antlr4.version}</version>
-      <exclusions>
-        <exclusion>
-	  <!-- 1.0.2 version is excluded, we will use version 1.0.1 from antlr:antlr:2.7.7 -->
-          <groupId>org.abego.treelayout</groupId>
-          <artifactId>org.abego.treelayout.core</artifactId>
-        </exclusion>
-      </exclusions>
     </dependency>
     <dependency>
       <groupId>commons-beanutils</groupId>
@@ -747,6 +740,7 @@
               <dir>config</dir>
               <excludes>
                 <exclude>java.header</exclude>
+                <exclude>java_regexp.header</exclude>
               </excludes>
             </validationSet>
             <validationSet>
@@ -1138,7 +1132,6 @@
             <regex><pattern>.*.checks.coding.AbstractSuperCheck</pattern><branchRate>78</branchRate><lineRate>89</lineRate></regex>
             <regex><pattern>.*.checks.coding.DeclarationOrderCheck</pattern><branchRate>82</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.coding.ExplicitInitializationCheck</pattern><branchRate>91</branchRate><lineRate>97</lineRate></regex>
-            <regex><pattern>.*.checks.coding.FallThroughCheck</pattern><branchRate>92</branchRate><lineRate>98</lineRate></regex>
             <regex><pattern>.*.checks.coding.FinalLocalVariableCheck</pattern><branchRate>82</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalInstantiationCheck</pattern><branchRate>81</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalTokenCheck</pattern><branchRate>83</branchRate><lineRate>100</lineRate></regex>
@@ -1154,9 +1147,9 @@
             <regex><pattern>.*.checks.coding.VariableDeclarationUsageDistanceCheck</pattern><branchRate>90</branchRate><lineRate>98</lineRate></regex>
 
 
-            <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>85</branchRate><lineRate>85</lineRate></regex>
-            <regex><pattern>.*.checks.header.HeaderCheck</pattern><branchRate>18</branchRate><lineRate>45</lineRate></regex>
-            <regex><pattern>.*.checks.header.RegexpHeaderCheck</pattern><branchRate>87</branchRate><lineRate>93</lineRate></regex>
+            <regex><pattern>.*.checks.header.AbstractHeaderCheck</pattern><branchRate>90</branchRate><lineRate>87</lineRate></regex>
+            <regex><pattern>.*.checks.header.HeaderCheck</pattern><branchRate>31</branchRate><lineRate>50</lineRate></regex>
+            <regex><pattern>.*.checks.header.RegexpHeaderCheck</pattern><branchRate>88</branchRate><lineRate>94</lineRate></regex>
 
 
             <regex><pattern>.*.checks.imports.CustomImportOrderCheck</pattern><branchRate>98</branchRate><lineRate>100</lineRate></regex>
@@ -1169,7 +1162,6 @@
             <regex><pattern>.*.checks.indentation.ImportHandler</pattern><branchRate>50</branchRate><lineRate>87</lineRate></regex>
             <regex><pattern>.*.checks.indentation.IndentationCheck</pattern><branchRate>100</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.indentation.LineWrappingHandler</pattern><branchRate>87</branchRate><lineRate>95</lineRate></regex>
-            <regex><pattern>.*.checks.indentation.MethodCallHandler</pattern><branchRate>63</branchRate><lineRate>87</lineRate></regex>
             <regex><pattern>.*.checks.indentation.MethodCallLineWrapHandler</pattern><branchRate>0</branchRate><lineRate>0</lineRate></regex>
             <regex><pattern>.*.checks.indentation.MethodDefHandler</pattern><branchRate>87</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.indentation.NewHandler</pattern><branchRate>83</branchRate><lineRate>77</lineRate></regex>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index fb5f37f305..4de39e6827 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -132,9 +132,7 @@ public void init() {
     @Override
     public void visitToken(DetailAST ast) {
         final DetailAST nextGroup = ast.getNextSibling();
-        final boolean isLastGroup =
-                nextGroup == null
-                 || nextGroup.getType() != TokenTypes.CASE_GROUP;
+        final boolean isLastGroup = nextGroup.getType() != TokenTypes.CASE_GROUP;
         if (isLastGroup && !checkLastGroup) {
             // we do not need to check last group
             return;
@@ -191,19 +189,14 @@ private boolean isTerminated(final DetailAST ast, boolean useBreak,
     /**
      * Checks if a given SLIST terminated by return, throw or,
      * if allowed break, continue.
-     * @param ast SLIST to check
+     * @param slistAst SLIST to check
      * @param useBreak should we consider break as terminator.
      * @param useContinue should we consider continue as terminator.
      * @return true if SLIST is terminated.
      */
-    private boolean checkSlist(final DetailAST ast, boolean useBreak,
+    private boolean checkSlist(final DetailAST slistAst, boolean useBreak,
                                boolean useContinue) {
-        DetailAST lastStmt = ast.getLastChild();
-        if (lastStmt == null) {
-            // if last case in switch is empty then slist is empty
-            // since this is a last case it is not a fall-through
-            return true;
-        }
+        DetailAST lastStmt = slistAst.getLastChild();
 
         if (lastStmt.getType() == TokenTypes.RCURLY) {
             lastStmt = lastStmt.getPreviousSibling();
@@ -301,15 +294,14 @@ private boolean checkTry(final DetailAST ast, boolean useBreak,
     /**
      * Checks if a given switch terminated by return, throw or,
      * if allowed break, continue.
-     * @param ast loop to check
+     * @param literalSwitchAst loop to check
      * @param useContinue should we consider continue as terminator.
      * @return true if switch is terminated.
      */
-    private boolean checkSwitch(final DetailAST ast, boolean useContinue) {
-        DetailAST caseGroup = ast.findFirstToken(TokenTypes.CASE_GROUP);
+    private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {
+        DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);
         boolean isTerminated = caseGroup != null;
-        while (isTerminated && caseGroup != null
-               && caseGroup.getType() != TokenTypes.RCURLY) {
+        while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {
             final DetailAST caseBody =
                 caseGroup.findFirstToken(TokenTypes.SLIST);
             isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index ca0fff5848..aece6d6728 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -152,12 +152,13 @@ public void visitToken(DetailAST ast) {
                 break;
 
             case TokenTypes.PARAMETER_DEF:
-                if (ScopeUtils.inInterfaceBlock(ast)
-                    || inAbstractOrNativeMethod(ast)
-                    || inLambda(ast)) {
+            case TokenTypes.VARIABLE_DEF:
+                if (ast.getType() == TokenTypes.PARAMETER_DEF
+                        && (ScopeUtils.inInterfaceBlock(ast)
+                            || inAbstractOrNativeMethod(ast)
+                            || inLambda(ast))) {
                     break;
                 }
-            case TokenTypes.VARIABLE_DEF:
                 if (ast.getParent().getType() != TokenTypes.OBJBLOCK
                         && shouldCheckEnhancedForLoopVariable(ast)
                         && isVariableInForInit(ast)
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
index 8143fbd19b..e091181faa 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -84,11 +84,13 @@ public void setCharset(String charset) throws UnsupportedEncodingException {
     /**
      * Set the header file to check against.
      * @param fileName the file that contains the header to check against.
+     * @throws CheckstyleException if fileName is empty.
      */
-    public void setHeaderFile(String fileName) {
-        // Handle empty param
+    public void setHeaderFile(String fileName) throws CheckstyleException {
         if (StringUtils.isBlank(fileName)) {
-            return;
+            throw new CheckstyleException(
+                "property 'headerFile' is missing or invalid in module "
+                    + getConfiguration().getName());
         }
 
         filename = fileName;
@@ -229,9 +231,7 @@ protected final void finishLocalSetup() throws CheckstyleException {
             loadHeaderFile();
         }
         if (readerLines.isEmpty()) {
-            throw new CheckstyleException(
-                    "property 'headerFile' is missing or invalid in module "
-                    + getConfiguration().getName());
+            setHeader(null);
         }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
index 9f12ca9cbc..69674911b0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java
@@ -25,6 +25,9 @@
 
 /**
  * Checks the header of the source against a fixed header file.
+ * In default configuration,if header is not specified,
+ * the default value of header is set to null
+ * and the check does not rise any violations.
  *
  * @author Lars Kühne
  */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
index 54a2d6b51b..d48f90d006 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
@@ -35,7 +35,9 @@
 /**
  * Checks the header of the source against a header file that contains a
  * {@link java.util.regex.Pattern regular expression}
- * for each line of the source header.
+ * for each line of the source header. In default configuration,
+ * if header is not specified, the default value of header is set to null
+ * and the check does not rise any violations.
  *
  * @author Lars Kühne
  * @author o_sukhodolsky
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
index a368e2a2d7..5dfce2d342 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java
@@ -38,11 +38,7 @@
      */
     public MethodCallHandler(IndentationCheck indentCheck,
         DetailAST ast, AbstractExpressionHandler parent) {
-        super(indentCheck,
-            ast.getType() == TokenTypes.METHOD_CALL
-                ? "method call" : "ctor call",
-            ast,
-            parent);
+        super(indentCheck, "method call", ast, parent);
     }
 
     @Override
@@ -52,30 +48,17 @@ protected IndentLevel getLevelImpl() {
         if (getParent() instanceof MethodCallHandler) {
             final MethodCallHandler container =
                     (MethodCallHandler) getParent();
-            if (container != null) {
-                if (areOnSameLine(container.getMainAst(), getMainAst())) {
-                    return container.getLevel();
-                }
-
-                // we should increase indentation only if this is the first
-                // chained method call which was moved to the next line
-                if (isChainedMethodCallWrapped()) {
-                    return container.getLevel();
-                }
-                else {
-                    return new IndentLevel(container.getLevel(), getBasicOffset());
-                }
+            if (areOnSameLine(container.getMainAst(), getMainAst())) {
+                return container.getLevel();
             }
-
-            // if we get here, we are the child of the left hand side (name
-            //  side) of a method call with no "containing" call, use
-            //  the first non-method call parent
-
-            AbstractExpressionHandler p = getParent();
-            while (p instanceof MethodCallHandler) {
-                p = p.getParent();
+            // we should increase indentation only if this is the first
+            // chained method call which was moved to the next line
+            if (isChainedMethodCallWrapped()) {
+                return container.getLevel();
+            }
+            else {
+                return new IndentLevel(container.getLevel(), getBasicOffset());
             }
-            return p.suggestedChildLevel(this);
         }
 
         // if our expression isn't first on the line, just use the start
@@ -100,15 +83,12 @@ private boolean isChainedMethodCallWrapped() {
         final DetailAST dot = main.getFirstChild();
         final DetailAST target = dot.getFirstChild();
 
-        if (dot.getType() == TokenTypes.DOT
-            && target.getType() == TokenTypes.METHOD_CALL) {
-            final DetailAST dot1 = target.getFirstChild();
-            final DetailAST target1 = dot1.getFirstChild();
+        final DetailAST dot1 = target.getFirstChild();
+        final DetailAST target1 = dot1.getFirstChild();
 
-            if (dot1.getType() == TokenTypes.DOT
-                && target1.getType() == TokenTypes.METHOD_CALL) {
-                result = true;
-            }
+        if (dot1.getType() == TokenTypes.DOT
+            && target1.getType() == TokenTypes.METHOD_CALL) {
+            result = true;
         }
         return result;
     }
@@ -126,14 +106,9 @@ private static DetailAST getFirstAst(DetailAST ast) {
         // call name
 
         DetailAST astNode = ast.getFirstChild();
-        while (astNode != null && astNode.getType() == TokenTypes.DOT) {
+        while (astNode.getType() == TokenTypes.DOT) {
             astNode = astNode.getFirstChild();
         }
-
-        if (astNode == null) {
-            astNode = ast;
-        }
-
         return astNode;
     }
 
@@ -157,8 +132,7 @@ public IndentLevel suggestedChildLevel(AbstractExpressionHandler child) {
     @Override
     public void checkIndentation() {
         final DetailAST exprNode = getMainAst().getParent();
-        if (exprNode.getParent().getType() != TokenTypes.LCURLY
-            && exprNode.getParent().getType() != TokenTypes.SLIST) {
+        if (exprNode.getParent().getType() != TokenTypes.SLIST) {
             return;
         }
         final DetailAST methodName = getMainAst().getFirstChild();
@@ -197,13 +171,6 @@ protected boolean shouldIncreaseIndent() {
      * method calls are chained returns right paren for last call.
      */
     private static DetailAST getMethodCallLastNode(DetailAST firstNode) {
-        DetailAST lastNode;
-        if (firstNode.getNextSibling() == null) {
-            lastNode = firstNode.getLastChild();
-        }
-        else {
-            lastNode = firstNode.getNextSibling();
-        }
-        return lastNode;
+        return firstNode.getLastChild();
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
index 452466a000..757f297285 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
@@ -47,6 +47,10 @@ public void testDefault() throws Exception {
             "372:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
+
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
@@ -71,6 +75,9 @@ public void testLastCaseGroup() throws Exception {
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
             "376:11: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
@@ -114,6 +121,9 @@ public void testOwnPattern() throws Exception {
             "351:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "353:30: " + getCheckMessage(MSG_FALL_THROUGH),
             "416:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "424:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "436:9: " + getCheckMessage(MSG_FALL_THROUGH),
+            "446:9: " + getCheckMessage(MSG_FALL_THROUGH),
         };
         verify(checkConfig,
                getPath("coding" + File.separator + "InputFallThrough.java"),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index 9195cc2779..0a3e284ba4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -172,17 +172,18 @@ public void testRegexpHeaderSmallHeader() throws Exception {
     }
 
     @Test
-    public void testNoHeader()
-        throws Exception {
+    public void testNoHeader() throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(HeaderCheck.class);
-        // No header file specified
         try {
             createChecker(checkConfig);
-            fail();
+            final String[] expected = {
+            };
+            verify(checkConfig, getPath("InputRegexpHeader1.java"), expected);
         }
         catch (CheckstyleException ex) {
-            // expected exception
+            // Exception is not expected
+            fail();
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
index c8956a3336..3a98b3c61a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
@@ -19,15 +19,20 @@
 
 package com.puppycrawl.tools.checkstyle.checks.header;
 
+import com.puppycrawl.tools.checkstyle.BaseFileSetCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import org.apache.commons.beanutils.ConversionException;
 import org.junit.Assert;
 import org.junit.Test;
 
+import static org.junit.Assert.fail;
+
 /**
  *
  * @author richter
  */
-public class RegexpHeaderCheckTest {
+public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport {
 
     public RegexpHeaderCheckTest() {
     }
@@ -86,4 +91,33 @@ public void testSetHeader() {
         }
     }
 
+    @Test
+    public void testDefaultConfiguration() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RegexpHeaderCheck.class);
+        try {
+            createChecker(checkConfig);
+            final String[] expected = {
+            };
+            verify(checkConfig, getPath("InputRegexpHeader1.java"), expected);
+        }
+        catch (CheckstyleException ex) {
+            // Exception is not expected
+            fail();
+        }
+    }
+
+    @Test
+    public void testEmptyFilename() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", "");
+        try {
+            createChecker(checkConfig);
+            fail("Checker creation should not succeed with invalid headerFile");
+        }
+        catch (CheckstyleException ex) {
+            // expected exception
+        }
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
index 7ac6366eb0..b4ba3749e1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
@@ -256,7 +256,7 @@ public void testStaticGroupsOrder() throws Exception {
         checkConfig.addAttribute("option", "top");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "4: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrder.java"), expected);
     }
@@ -279,7 +279,7 @@ public void testStaticGroupsOrderBottom() throws Exception {
         checkConfig.addAttribute("option", "bottom");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrderBottom.java"), expected);
     }
@@ -293,7 +293,7 @@ public void testStaticGroupsOrderAbove() throws Exception {
         checkConfig.addAttribute("sortStaticImportsAlphabetically", "true");
         final String[] expected = {
             "7: " + getCheckMessage(MSG_ORDERING, "java.lang.Math.PI"),
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.AlignmentInLevel"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.Recognizer.EOF"),
         };
         verify(checkConfig, getPath("imports" + File.separator + "InputImportOrderStaticGroupOrderBottom.java"), expected);
     }
@@ -305,7 +305,7 @@ public void testStaticOnDemandGroupsOrder() throws Exception {
         checkConfig.addAttribute("option", "top");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "4: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
             "9: " + getCheckMessage(MSG_ORDERING, "org.junit.Test"),
         };
         verify(checkConfig, getPath("imports" + File.separator
@@ -333,7 +333,7 @@ public void testStaticOnDemandGroupsOrderBottom() throws Exception {
         checkConfig.addAttribute("option", "bottom");
         checkConfig.addAttribute("groups", "org, java");
         final String[] expected = {
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
         };
         verify(checkConfig, getPath("imports" + File.separator
                  + "InputImportOrderStaticOnDemandGroupOrderBottom.java"), expected);
@@ -360,7 +360,7 @@ public void testStaticOnDemandGroupsOrderAbove() throws Exception {
         checkConfig.addAttribute("sortStaticImportsAlphabetically", "true");
         final String[] expected = {
             "7: " + getCheckMessage(MSG_ORDERING, "java.lang.Math.*"),
-            "8: " + getCheckMessage(MSG_ORDERING, "org.abego.treelayout.Configuration.*"),
+            "8: " + getCheckMessage(MSG_ORDERING, "org.antlr.v4.runtime.CommonToken.*"),
         };
         verify(checkConfig, getPath("imports" + File.separator
                  + "InputImportOrderStaticOnDemandGroupOrderBottom.java"), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index 6e81f0c907..0cb32856d3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -1470,6 +1470,27 @@ public void testSynchronizedMethod() throws Exception {
         verifyWarns(checkConfig, getPath("indentation/InputSynchronizedMethod.java"), expected);
     }
 
+    @Test
+    public void testAnonymousClassInMethod() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+        checkConfig.addAttribute("tabWidth", "8");
+        checkConfig.addAttribute("basicOffset", "2");
+        checkConfig.addAttribute("braceAdjustment", "0");
+        checkConfig.addAttribute("caseIndent", "2");
+        checkConfig.addAttribute("lineWrappingIndentation", "4");
+        checkConfig.addAttribute("throwsIndent", "4");
+        checkConfig.addAttribute("arrayInitIndent", "2");
+        final String[] expected = {
+            "19: " + getCheckMessage(MSG_ERROR, "method def modifier", 8, 2),
+            "20: " + getCheckMessage(MSG_CHILD_ERROR, "method def", 16, 4),
+            "21: " + getCheckMessage(MSG_ERROR_MULTI, "method def modifier", 24, "18, 20, 22"),
+            "23: " + getCheckMessage(MSG_CHILD_ERROR_MULTI, "method def", 32, "20, 22, 24"),
+            "24: " + getCheckMessage(MSG_ERROR_MULTI, "method def rcurly",  24, "18, 20, 22"),
+            "26: " + getCheckMessage(MSG_ERROR, "method def rcurly", 8, 2),
+        };
+        verifyWarns(checkConfig, getPath("indentation/InputAnonymousClassInMethod.java"), expected);
+    }
+
     @Test
     public void testAnnotationDefinition() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
index 51d70374bc..011668cb91 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java
@@ -416,4 +416,36 @@ void nestedSwitches() {
             default: // violation - no fall through comment
         }
     }
+    
+    void nextedSwitches2() {
+        switch(hashCode()) {
+        case 1:
+            switch(hashCode()){}
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
+    
+    void ifWithoutBreak() {
+        switch(hashCode()) {
+        case 1:
+            if (true) {
+                System.out.println();
+            }
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
+    
+    void noCommentAtTheEnd() {
+        switch(hashCode()) {
+        case 1: System.out.println();
+
+        case 2:
+            System.out.println();
+            break;
+        }
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
index 3b9681410c..a433f39004 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputIllegalTypeStarImports.java
@@ -2,7 +2,7 @@
 
 import java.*;
 import java.util.*;
-import org.abego.treelayout.*;
+import org.antlr.v4.runtime.*;
 import com.*;
 //configuration "illegalClassNames": List
 public class InputIllegalTypeStarImports
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
index bff87fe693..c8096327b4 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyAndSpecial.java
@@ -4,7 +4,7 @@
 import com.google.common.annotations.Beta;
 import com.google.common.annotations.VisibleForTesting;
 
-import org.abego.treelayout.Configuration;
+import org.apache.commons.io.ByteOrderMark;
 
 import static sun.tools.util.ModifierFilter.ALL_ACCESS;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
index e777db50fd..78276506e1 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputCustomImportOrderThirdPartyPackage.java
@@ -1,6 +1,6 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
-import org.abego.treelayout.*;
+import org.antlr.v4.*;
 
 import org.junit.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
index 699cd41392..2927c9e2bf 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrder.java
@@ -1,7 +1,7 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
 import static java.lang.Math.abs;
-import static org.abego.treelayout.Configuration.AlignmentInLevel;
+import static org.antlr.v4.runtime.Recognizer.EOF;
 
 import org.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
index 461e61adb2..c519a78046 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticGroupOrderBottom.java
@@ -5,7 +5,7 @@
 import java.util.Set;
 
 import static java.lang.Math.PI;
-import static org.abego.treelayout.Configuration.AlignmentInLevel;
+import static org.antlr.v4.runtime.Recognizer.EOF;
 
 public class InputImportOrderStaticGroupOrderBottom
 {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
index 5a4a391198..3c81b5ab6c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrder.java
@@ -1,7 +1,7 @@
 package com.puppycrawl.tools.checkstyle.imports;
 
 import static java.lang.Math.*;
-import static org.abego.treelayout.Configuration.*;
+import static org.antlr.v4.runtime.CommonToken.*;
 
 import org.*;
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
index 89feb40619..a4a7e91577 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/imports/InputImportOrderStaticOnDemandGroupOrderBottom.java
@@ -5,7 +5,7 @@
 import java.util.Set;
 
 import static java.lang.Math.*;
-import static org.abego.treelayout.Configuration.*;
+import static org.antlr.v4.runtime.CommonToken.*;
 
 public class InputImportOrderStaticOnDemandGroupOrderBottom
 {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
index 646d28224f..60e19ba37f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java
@@ -4,7 +4,7 @@
 import java.util.Set; //indent:0 exp:0
 import java.util.concurrent.ConcurrentMap; //indent:0 exp:0
 
-import org.antlr.v4.runtime.misc.Nullable; //indent:0 exp:0
+import org.antlr.v4.runtime.misc.NotNull; //indent:0 exp:0
 
 import com.google.common.base.Equivalence; //indent:0 exp:0
 
@@ -106,13 +106,13 @@
   enum EntryFactory { //indent:2 exp:2
     STRONG { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
     }, //indent:4 exp:4
     STRONG_ACCESS { //indent:4 exp:4
       <K, V> StrongAccessEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongAccessEntry<K, V>(key, hash, next); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -125,7 +125,7 @@
      }, //indent:5 exp:5
     STRONG_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -136,7 +136,7 @@
     }, //indent:4 exp:4
     STRONG_ACCESS_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -148,13 +148,13 @@
 
     WEAK { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
     }, //indent:4 exp:4
     WEAK_ACCESS { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -165,7 +165,7 @@
     }, //indent:4 exp:4
     WEAK_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
@@ -176,7 +176,7 @@
     }, //indent:4 exp:4
     WEAK_ACCESS_WRITE { //indent:4 exp:4
       <K, V> StrongEntry<K, V> newEntry( //indent:6 exp:6
-          Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next) { //indent:10 exp:>=10
+          Segment<K, V> segment, K key, int hash, @NotNull ReferenceEntry<K, V> next) { //indent:10 exp:>=10
         return new StrongEntry<K, V>(); //indent:8 exp:8
       } //indent:6 exp:6
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java
new file mode 100755
index 0000000000..44514f1ab5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputAnonymousClassInMethod.java
@@ -0,0 +1,27 @@
+package com.puppycrawl.tools.checkstyle.indentation; //indent:0 exp:0
+
+import java.io.File; //indent:0 exp:0
+import java.io.FileFilter; //indent:0 exp:0
+
+/**                                                                         //indent:0 exp:0
+ * This test-input is intended to be checked using following configuration: //indent:1 exp:1
+ *                                                                          //indent:1 exp:1
+ * arrayInitIndent = 2                                                      //indent:1 exp:1
+ * basicOffset = 2                                                          //indent:1 exp:1
+ * braceAdjustment = 0                                                      //indent:1 exp:1
+ * caseIndent = 2                                                           //indent:1 exp:1
+ * forceStrictCondition = false                                             //indent:1 exp:1
+ * lineWrappingIndentation = 4                                              //indent:1 exp:1
+ * tabWidth = 8                                                             //indent:1 exp:1
+ * throwsIndent = 4                                                         //indent:1 exp:1
+ */                                                                         //indent:1 exp:1
+public class InputAnonymousClassInMethod { //indent:0 exp:0
+	private void walkDir(File dir, FileFilter fileFilter) { //indent:8 exp:2 warn
+		walkDir( dir, new FileFilter() { //indent:16 exp:4 warn
+			@Override //indent:24 exp:8 warn
+			public boolean accept(File path) { //indent:24 exp:24
+				return ( path.isDirectory() ); //indent:32 exp:12 warn
+			} //indent:24 exp:8 warn
+		} ); //indent:16 exp:16
+	} //indent:8 exp:2 warn
+} //indent:0 exp:0
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
index d9f64e7258..12ba8f8695 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputMethodCallLineWrap.java
@@ -52,4 +52,14 @@ void foo() { //indent:8 exp:8
               ); //indent:14 exp:16 warn
         } //indent:8 exp:8
     }; //indent:4 exp:4
+
+    void chaining() { //indent:4 exp:4
+        toString() //indent:8 exp:8
+                .getClass(); //indent:16 exp:16
+        toString().contains(//indent:8 exp:8
+            new String(//indent:12 exp:12
+                    "a" //indent:20 exp:20
+            )//indent:12 exp:12
+        ); //indent:8 exp:8
+    } //indent:4 exp:4
 } //indent:0 exp:0
diff --git a/src/xdocs/config_header.xml b/src/xdocs/config_header.xml
index 61ecf9b835..4fcf03563e 100755
--- a/src/xdocs/config_header.xml
+++ b/src/xdocs/config_header.xml
@@ -104,6 +104,14 @@ line 5: ////////////////////////////////////////////////////////////////////
       </subsection>
 
       <subsection name="Example">
+          <p>
+              In default configuration the check does not rise any violations. Default values of properties are used.
+          </p>
+
+          <source>
+&lt;module name=&quot;Header&quot;/&gt;
+          </source>
+
         <p>
           To configure the check to use header file <code>&quot;java.header&quot;</code> and ignore lines <code>2</code>, <code>3</code>, and <code> 4</code> and only process Java files:
         </p>
@@ -269,6 +277,13 @@ line 6: ^\W*$
       </subsection>
 
       <subsection name="Example">
+          <p>
+              In default configuration the check does not rise any violations. Default values of properties are used.
+          </p>
+          <source>
+&lt;module name=&quot;RegexpHeader&quot;/&gt;
+          </source>
+
         <p>
           To configure the check to use header file <code>&quot;java.header&quot;</code> and <code>10</code> and <code>13</code> muli-lines:
         </p>
