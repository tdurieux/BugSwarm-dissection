diff --git a/sklearn/utils/tests/test_validation.py b/sklearn/utils/tests/test_validation.py
index d3a976a036..fd5fb0a0d2 100755
--- a/sklearn/utils/tests/test_validation.py
+++ b/sklearn/utils/tests/test_validation.py
@@ -693,16 +693,10 @@ def test_check_memory():
                         "instead.".format(dummy), check_memory, dummy)
 
 
-def test_check_array_memmap():
+@pytest.mark.parametrize('copy', [True, False])
+def test_check_array_memmap(copy):
     X = np.ones((4, 4))
-    # Let memmap pass
     with TempMemmap(X, mmap_mode='r') as X_memmap:
-        X_checked = check_array(X_memmap, copy=False)
-        assert isinstance(X_checked, np.memmap)
-        assert np.may_share_memory(X_memmap, X_checked)
-        assert not X_checked.flags['WRITEABLE']
-
-        X_checked = check_array(X_memmap, copy=True)
-        assert not isinstance(X_checked, np.memmap)
-        assert not np.may_share_memory(X_memmap, X_checked)
-        assert X_checked.flags['WRITEABLE']
+        X_checked = check_array(X_memmap, copy=copy)
+        assert np.may_share_memory(X_memmap, X_checked) == (not copy)
+        assert X_checked.flags['WRITEABLE'] == copy
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index 08ef02d16f..f4ad3b0223 100755
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -491,7 +491,7 @@ def check_array(array, accept_sparse=False, dtype="numeric", order=None,
         with warnings.catch_warnings():
             try:
                 warnings.simplefilter('error', ComplexWarning)
-                array = np.array(array, dtype=dtype, order=order, copy=copy)
+                array = np.asarray(array, dtype=dtype, order=order)
             except ComplexWarning:
                 raise ValueError("Complex data not supported\n"
                                  "{}\n".format(array))
@@ -517,8 +517,6 @@ def check_array(array, accept_sparse=False, dtype="numeric", order=None,
                     "Reshape your data either using array.reshape(-1, 1) if "
                     "your data has a single feature or array.reshape(1, -1) "
                     "if it contains a single sample.".format(array))
-            # To ensure that array flags are maintained
-            array = np.asanyarray(array, dtype=dtype, order=order)
 
         # in the future np.flexible dtypes will be handled like object dtypes
         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):
