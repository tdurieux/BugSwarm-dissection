travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: i-0dda262-precise-production-2-worker-org-docker.travisci.net:f5f5535b-4832-4ae4-927c-aa7c38acdbc5
version: v2.5.0 https://github.com/travis-ci/worker/tree/da3a43228dffc0fcca5a46569ca786b22991979f
instance: f0011d0:travis:java
startup: 524.403089ms
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: java
Build group: stable
Build dist: precise
Build id: 261690533
Job id: 261690534
travis-build version: 9af302805
[34m[1mBuild image provisioning date and time[0m
Thu Feb  5 15:09:33 UTC 2015
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 12.04.5 LTS
Release:	12.04
Codename:	precise
[34m[1mLinux Version[0m
3.13.0-29-generic
[34m[1mCookbooks Version[0m
a68419e https://github.com/travis-ci/travis-cookbooks/tree/a68419e
[34m[1mGCC version[0m
gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mLLVM version[0m
clang version 3.4 (tags/RELEASE_34/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
[34m[1mPre-installed Ruby versions[0m
ruby-1.9.3-p551
[34m[1mPre-installed Node.js versions[0m
v0.10.36
[34m[1mPre-installed Go versions[0m
1.4.1
[34m[1mRedis version[0m
redis-server 2.8.19
[34m[1mriak version[0m
2.0.2
[34m[1mMongoDB version[0m
MongoDB 2.4.12
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mNeo4j version[0m
1.9.4
[34m[1mRabbitMQ Version[0m
3.4.3
[34m[1mElasticSearch version[0m
1.4.0
[34m[1mInstalled Sphinx versions[0m
2.0.10
2.1.9
2.2.6
[34m[1mDefault Sphinx version[0m
2.2.6
[34m[1mInstalled Firefox version[0m
firefox 31.0esr
[34m[1mPhantomJS version[0m
1.9.8
[34m[1mant -version[0m
Apache Ant(TM) version 1.8.2 compiled on December 3 2011
[34m[1mmvn -version[0m
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T17:29:23+00:00)
Maven home: /usr/local/maven
Java version: 1.7.0_76, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "3.13.0-29-generic", arch: "amd64", family: "unix"
travis_fold:end:system_info[0K
travis_fold:start:fix.CVE-2015-7547[0K$ export DEBIAN_FRONTEND=noninteractive
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libc-bin libc-dev-bin libc6-dev
Suggested packages:
  glibc-doc
The following packages will be upgraded:
  libc-bin libc-dev-bin libc6 libc6-dev
4 upgraded, 0 newly installed, 0 to remove and 278 not upgraded.
Need to get 8,856 kB of archives.
After this operation, 13.3 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6-dev amd64 2.15-0ubuntu10.18 [2,948 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-dev-bin amd64 2.15-0ubuntu10.18 [84.5 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-bin amd64 2.15-0ubuntu10.18 [1,178 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6 amd64 2.15-0ubuntu10.18 [4,646 kB]
Preconfiguring packages ...
Fetched 8,856 kB in 0s (35.1 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72019 files and directories currently installed.)
Preparing to replace libc6-dev 2.15-0ubuntu10.10 (using .../libc6-dev_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6-dev ...
Preparing to replace libc-dev-bin 2.15-0ubuntu10.10 (using .../libc-dev-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-dev-bin ...
Preparing to replace libc-bin 2.15-0ubuntu10.10 (using .../libc-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-bin ...
Processing triggers for man-db ...
Setting up libc-bin (2.15-0ubuntu10.18) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libc6 2.15-0ubuntu10.10 (using .../libc6_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6 ...
Setting up libc6 (2.15-0ubuntu10.18) ...
Setting up libc-dev-bin (2.15-0ubuntu10.18) ...
Setting up libc6-dev (2.15-0ubuntu10.18) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
travis_fold:end:fix.CVE-2015-7547[0Ktravis_fold:start:update_libssl1.0.0[0K$ sudo apt-get install ca-certificates libssl1.0.0
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libssl-dev
The following packages will be upgraded:
  ca-certificates libssl-dev libssl1.0.0
3 upgraded, 0 newly installed, 0 to remove and 275 not upgraded.
Need to get 2,842 kB of archives.
After this operation, 41.0 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl-dev amd64 1.0.1-4ubuntu5.39 [1,580 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl1.0.0 amd64 1.0.1-4ubuntu5.39 [1,054 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main ca-certificates all 20160104ubuntu0.12.04.1 [208 kB]
Preconfiguring packages ...
Fetched 2,842 kB in 0s (18.9 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libssl-dev 1.0.1-4ubuntu5.21 (using .../libssl-dev_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl-dev ...
Preparing to replace libssl1.0.0 1.0.1-4ubuntu5.21 (using .../libssl1.0.0_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl1.0.0 ...
Setting up libssl1.0.0 (1.0.1-4ubuntu5.39) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace ca-certificates 20130906ubuntu0.12.04.1 (using .../ca-certificates_20160104ubuntu0.12.04.1_all.deb) ...
Unpacking replacement ca-certificates ...
Processing triggers for man-db ...
Setting up libssl-dev (1.0.1-4ubuntu5.39) ...
Setting up ca-certificates (20160104ubuntu0.12.04.1) ...
Updating certificates in /etc/ssl/certs... 35 added, 26 removed; done.
Running hooks in /etc/ca-certificates/update.d....
Adding debian:ACCVRAIZ1.pem
Adding debian:Atos_TrustedRoot_2011.pem
Adding debian:CA_WoSign_ECC_Root.pem
Adding debian:Certification_Authority_of_WoSign_G2.pem
Adding debian:Certinomis_-_Root_CA.pem
Adding debian:CFCA_EV_ROOT.pem
Adding debian:COMODO_RSA_Certification_Authority.pem
Adding debian:DigiCert_Assured_ID_Root_G2.pem
Adding debian:DigiCert_Assured_ID_Root_G3.pem
Adding debian:DigiCert_Global_Root_G2.pem
Adding debian:DigiCert_Global_Root_G3.pem
Adding debian:DigiCert_Trusted_Root_G4.pem
Adding debian:Entrust_Root_Certification_Authority_-_EC1.pem
Adding debian:Entrust_Root_Certification_Authority_-_G2.pem
Adding debian:E-Tugra_Certification_Authority.pem
Adding debian:GlobalSign_ECC_Root_CA_-_R4.pem
Adding debian:GlobalSign_ECC_Root_CA_-_R5.pem
Adding debian:IdenTrust_Commercial_Root_CA_1.pem
Adding debian:IdenTrust_Public_Sector_Root_CA_1.pem
Adding debian:OISTE_WISeKey_Global_Root_GB_CA.pem
Adding debian:QuoVadis_Root_CA_1_G3.pem
Adding debian:QuoVadis_Root_CA_2_G3.pem
Adding debian:QuoVadis_Root_CA_3_G3.pem
Adding debian:Staat_der_Nederlanden_EV_Root_CA.pem
Adding debian:Staat_der_Nederlanden_Root_CA_-_G3.pem
Adding debian:S-TRUST_Universal_Root_CA.pem
Adding debian:TeliaSonera_Root_CA_v1.pem
Adding debian:T-TeleSec_GlobalRoot_Class_2.pem
Adding debian:TÃœRKTRUST_Elektronik_Sertifika_Hizmet_SaÄŸlayÄ±cÄ±sÄ±_H5.pem
Adding debian:TÃœRKTRUST_Elektronik_Sertifika_Hizmet_SaÄŸlayÄ±cÄ±sÄ±_H6.pem
Adding debian:TWCA_Global_Root_CA.pem
Adding debian:USERTrust_ECC_Certification_Authority.pem
Adding debian:USERTrust_RSA_Certification_Authority.pem
Adding debian:WoSign_China.pem
Adding debian:WoSign.pem
Removing debian:A-Trust-nQual-03.pem
Removing debian:America_Online_Root_Certification_Authority_1.pem
Removing debian:America_Online_Root_Certification_Authority_2.pem
Removing debian:Buypass_Class_3_CA_1.pem
Removing debian:ComSign_Secured_CA.pem
Removing debian:Digital_Signature_Trust_Co._Global_CA_1.pem
Removing debian:Digital_Signature_Trust_Co._Global_CA_3.pem
Removing debian:E-Guven_Kok_Elektronik_Sertifika_Hizmet_Saglayicisi.pem
Removing debian:Entrust.net_Secure_Server_CA.pem
Removing debian:Firmaprofesional_Root_CA.pem
Removing debian:GTE_CyberTrust_Global_Root.pem
Removing debian:RSA_Root_Certificate_1.pem
Removing debian:TC_TrustCenter_Class_2_CA_II.pem
Removing debian:TC_TrustCenter_Universal_CA_I.pem
Removing debian:TDC_Internet_Root_CA.pem
Removing debian:TDC_OCES_Root_CA.pem
Removing debian:TURKTRUST_Certificate_Services_Provider_Root_1.pem
Removing debian:TURKTRUST_Certificate_Services_Provider_Root_2.pem
Removing debian:Thawte_Premium_Server_CA.pem
Removing debian:Thawte_Server_CA.pem
Removing debian:UTN_DATACorp_SGC_Root_CA.pem
Removing debian:ValiCert_Class_1_VA.pem
Removing debian:ValiCert_Class_2_VA.pem
Removing debian:Verisign_Class_4_Public_Primary_Certification_Authority_-_G3.pem
Removing debian:Wells_Fargo_Root_CA.pem
Removing debian:spi-cacert-2008.pem
done.
done.
travis_fold:end:update_libssl1.0.0[0K$ jdk_switcher use oraclejdk8
Switching to Oracle JDK8 (java-8-oracle), JAVA_HOME will be set to /usr/lib/jvm/java-8-oracle
travis_fold:start:git.checkout[0Ktravis_time:start:0e3d59c9[0K$ git clone --depth=50 --branch=master https://github.com/cbeust/testng.git cbeust/testng
Cloning into 'cbeust/testng'...

travis_time:end:0e3d59c9:start=1502079884380574013,finish=1502079886139040337,duration=1758466324[0K$ cd cbeust/testng
$ git checkout -qf 0b45315dc8ee0f02b311b5c2af4922b1f8d83f38
travis_fold:end:git.checkout[0K
[33;1mSetting environment variables from repository settings[0m
$ export SONATYPE_USER=[secure]
$ export SONATYPE_PASSWORD=[secure]
$ export SONAR_TOKEN=[secure]
$ export SONAR_GITHUB_OAUTH=[secure]

[33;1mSetting environment variables from .travis.yml[0m
$ export GRADLE_OPTS=-Xmx512m

$ export TERM=dumb
travis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=$HOME/.casher
travis_time:start:032c8f24[0K$ Installing caching utilities

travis_time:end:032c8f24:start=1502079891519757072,finish=1502079891550103028,duration=30345956[0Ktravis_time:start:022baa3a[0K
travis_time:end:022baa3a:start=1502079891556603429,finish=1502079891560663522,duration=4060093[0Ktravis_time:start:22f94a8e[0K[32;1mattempting to download cache archive[0m
[32;1mfetching master/cache-linux-precise-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--jdk-oraclejdk8.tgz[0m
[32;1mfound cache[0m

travis_time:end:22f94a8e:start=1502079891565426971,finish=1502079896509235051,duration=4943808080[0Ktravis_time:start:006d9980[0K
travis_time:end:006d9980:start=1502079896513951024,finish=1502079896517769981,duration=3818957[0Ktravis_time:start:143b6af0[0K[32;1madding /home/travis/.gradle/caches to cache[0m
[32;1mcreating directory /home/travis/.gradle/caches[0m
[32;1madding /home/travis/.gradle/wrapper to cache[0m
[32;1mcreating directory /home/travis/.gradle/wrapper[0m

travis_time:end:143b6af0:start=1502079896522216176,finish=1502079900786065289,duration=4263849113[0Ktravis_fold:end:cache.1[0K$ java -Xmx32m -version
java version "1.8.0_31"
Java(TM) SE Runtime Environment (build 1.8.0_31-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.31-b07, mixed mode)
$ javac -J-Xmx32m -version
javac 1.8.0_31
travis_fold:start:install[0Ktravis_time:start:36fb8e6c[0K$ ./gradlew assemble
Starting a Gradle Daemon (subsequent builds will be faster)
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileGroovy NO-SOURCE
:processResources
:classes
:jar
:javadoc
:javadocJar
:sourcesJar
:signArchives SKIPPED
:assemble

BUILD SUCCESSFUL

Total time: 29.639 secs

travis_time:end:36fb8e6c:start=1502079917135330361,finish=1502079947185745412,duration=30050415051[0Ktravis_fold:end:install[0Ktravis_fold:start:before_script[0Ktravis_time:start:0ad9e427[0K$ if [[ "x$JDK" == *'x9'* ]]; then remove_dir_from_path $JAVA_HOME/bin; export JAVA_HOME=/usr/lib/jvm/java-9-oracle; export PATH=$JAVA_HOME/bin:$PATH; java -Xmx32m -version; fi

travis_time:end:0ad9e427:start=1502079947191255728,finish=1502079947195688584,duration=4432856[0Ktravis_fold:end:before_script[0Ktravis_time:start:168c46e6[0K$ ./gradlew check --stacktrace
:compileJava UP-TO-DATE
:compileGroovy NO-SOURCE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:compileTestJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileTestGroovy
:processTestResources
:testClasses
:test

Gradle Test Executor 2 STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter

TestNG Running Junit Tests > Junit via TestNG XML STANDARD_ERROR
    org.testng.TestNGException: 
    Failure in JUnit mode for class test.junit.SetNameTest
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:114)
    	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:70)
    	at org.testng.TestRunner$1.run(TestRunner.java:699)
    	at org.testng.TestRunner.runJUnitWorkers(TestRunner.java:999)
    	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:730)
    	at org.testng.TestRunner.run(TestRunner.java:631)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.AssertionError
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter.onTestStart(TestNGTestResultProcessorAdapter.java:116)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:89)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:83)
    	at com.sun.proxy.$Proxy5.onTestStart(Unknown Source)
    	at org.testng.junit.JUnit4TestRunner$RL.testStarted(JUnit4TestRunner.java:207)
    	at org.junit.runner.notification.SynchronizedRunListener.testStarted(SynchronizedRunListener.java:49)
    	at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:121)
    	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
    	at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:118)
    	at org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(JUnit38ClassRunner.java:37)
    	at junit.framework.TestResult.startTest(TestResult.java:168)
    	at junit.framework.TestResult.run(TestResult.java:119)
    	at junit.framework.TestCase.run(TestCase.java:129)
    	at junit.framework.TestSuite.runTest(TestSuite.java:252)
    	at junit.framework.TestSuite.run(TestSuite.java:247)
    	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:82)
    	... 43 more
Executed test ==> test.guice.GuiceParentModuleTest.testService() with result: SUCCESS
Executed test ==> NoPackageTest.test() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test3TestNG1() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testNonExistentParameter[0](null)() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testSingleString[0](Cedric)() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.noNPEInCountingResults STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.noNPEInCountingResults() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.beforeMethodWithParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.enumParameters() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParameterTest.invalidEnumParameters STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: No enum constant test.parameters.EnumParameterSample.MyEnum.INVALID_VALUE
    	at java.lang.Enum.valueOf(Enum.java:238)
    	at org.testng.internal.Parameters.convertType(Parameters.java:417)
    	at org.testng.internal.Parameters.createParams(Parameters.java:252)
    	at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:286)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:547)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:672)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.parameters.ParameterTest.invalidEnumParameters(ParameterTest.java:86)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.parameters.ParameterTest.invalidEnumParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.stringSingle() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod1() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod2() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod3() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptions() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptionsDeprecatedSyntax() with result: SUCCESS
Executed test ==> test.access.PrivateAccessConfigurationMethods.allAccessModifiersConfiguration() with result: SUCCESS
Executed test ==> test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.CountTest.skippedMethodsShouldBeCounted() with result: SUCCESS
Executed test ==> test.StaticTest$InnerStaticClass.test() with result: SUCCESS
Executed test ==> test.MethodTest.excludeMethodsOnly() with result: SUCCESS
Executed test ==> test.MethodTest.excludePackage() with result: SUCCESS
Executed test ==> test.MethodTest.includeMethodsOnly() with result: SUCCESS
Executed test ==> test.EclipseTest.xmlFileShouldBeRunAtItsPlaceAndNotCopied[0](org.testng.TestRunner@38a9bf9c)() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS
Executed test ==> test.ReporterApiTest.testApi() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldBeCorrect() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldFail() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessors() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessorsTiming() with result: SUCCESS
Executed test ==> test.GraphTest.sort() with result: SUCCESS
Executed test ==> test.reports.UniqueReporterInjectionTest.testPruningOfDuplicateReporter() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test2() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test3() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test4() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test8() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.testOrderingOfEdgesWithSameWeight() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporterWithMultipleClasses() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitXMLReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testTestCaseOrderingInJUnitReportReporterWhenPrioritiesDefined() with result: SUCCESS
Executed test ==> test.ReflectionHelperTest.testMethodCount() with result: SUCCESS
Executed test ==> test.abstractmethods.AbstractTest.abstractShouldRun() with result: SUCCESS
Executed test ==> test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest.testPrivateMethod() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeAndExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeAndExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeShouldWork() with result: SUCCESS
Executed test ==> test.multiple.TestMultiple.multiple() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential1() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential2() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependencyAndFailures() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependsOnMethods() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testOne() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testThree() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testTwo() with result: SUCCESS
Executed test ==> test.NestedStaticTest.nestedClassShouldBeIncluded() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfterMethod() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunBefore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationListenerTest.listenerShouldBeCalled() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestClassFails() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestSuiteFails() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[0]([Ljava.lang.String;@437906ab, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[1]([Ljava.lang.String;@31e92136, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[2]([Ljava.lang.String;@3445f836, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[3]([Ljava.lang.String;@6a7d4086, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[4]([Ljava.lang.String;@4d0cd35c, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[5]([Ljava.lang.String;@5d2da420, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[0]([Ljava.lang.String;@2c6c6b2e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[1]([Ljava.lang.String;@33e36f9b, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[2]([Ljava.lang.String;@3db5b817, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[3]([Ljava.lang.String;@66e06b9b, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[4]([Ljava.lang.String;@360429ce, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[5]([Ljava.lang.String;@591756b1, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Xml() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[0]([Ljava.lang.String;@225c7f24, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[1]([Ljava.lang.String;@d5b945, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[2]([Ljava.lang.String;@28203941, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[3]([Ljava.lang.String;@b375965, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[4]([Ljava.lang.String;@71c92340, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[5]([Ljava.lang.String;@2ff8951c, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[0]([Ljava.lang.String;@1453cdda, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[1]([Ljava.lang.String;@6c3d1fa1, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[2]([Ljava.lang.String;@3818ee53, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[3]([Ljava.lang.String;@55145b57, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[4]([Ljava.lang.String;@4a7f4d46, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[5]([Ljava.lang.String;@31a1bb45, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[0]([Ljava.lang.String;@34ff90ab, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[1]([Ljava.lang.String;@34934fd1, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[2]([Ljava.lang.String;@605393a9, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[3]([Ljava.lang.String;@635b18d5, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[4]([Ljava.lang.String;@3eb95ea3, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[5]([Ljava.lang.String;@1d439fe0, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Xml() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithClassTest() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithMethodTest() with result: SUCCESS
Executed test ==> test.StaticTest.test() with result: SUCCESS
Executed test ==> test.superclass.Test3.shouldExcludeBaseMethods() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWork() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWorkWithConfigurationListener() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderWithNoClassLoader() with result: SUCCESS
Executed test ==> test.failures.FailuresTest.shouldIncludeFailedMethodsFromBaseClass() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineExcludedGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.shouldRunBothMethods() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationOthers() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyExpectedExceptions() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyFactory() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyParameters() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestClassLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestMethodLevel() with result: SUCCESS
Executed test ==> test.jason.MainTest.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyConfigurationGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnMethodsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestGroupsInheritance() with result: SUCCESS
Executed test ==> test.bug90.Bug90Test.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryNotParallel() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelMethods() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelTests() with result: SUCCESS
Executed test ==> test.bug92.Bug92Test.BeforeTestShouldRunOnce() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential3() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded3() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldNotBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.testReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[2](true, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[3](false, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[4](true, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[5](false, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[6](true, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[7](false, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[8](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[9](false, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[2](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[3](false, instances, 2)() with result: SUCCESS

TestNG > Regression2 > test.groupbug.GroupBugTest.shouldOrderByClass STANDARD_OUT
    RUN class test.groupbug.ITCaseOne.beforeClass()
    RUN class test.groupbug.ITCaseOne.one1()
    RUN class test.groupbug.ITCaseOne.one2()
    RUN class test.groupbug.ITCaseOne.afterClass()
    RUN class test.groupbug.ITCaseTwo.beforeClass()
    RUN class test.groupbug.ITCaseTwo.two1()
    RUN class test.groupbug.ITCaseTwo.two2()
    RUN class test.groupbug.ITCaseTwo.afterClass()
    ===== Invoked methods
      ITCaseOne.beforeClassOne()[pri:0, instance:test.groupbug.ITCaseOne@2a19cef8] 706334456
        ITCaseOne.one1()[pri:0, instance:test.groupbug.ITCaseOne@2a19cef8] 706334456
        ITCaseOne.one2()[pri:0, instance:test.groupbug.ITCaseOne@2a19cef8] 706334456
      ITCaseOne.afterClassOne()[pri:0, instance:test.groupbug.ITCaseOne@2a19cef8] 706334456
      ITCaseTwo.beforeClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@450a5dd4] 1158307284
        ITCaseTwo.two1()[pri:0, instance:test.groupbug.ITCaseTwo@450a5dd4] 1158307284
        ITCaseTwo.two2()[pri:0, instance:test.groupbug.ITCaseTwo@450a5dd4] 1158307284
      ITCaseTwo.afterClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@450a5dd4] 1158307284
    =====

    ===============================================
    Command line suite
    Total tests run: 4, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.groupbug.GroupBugTest.shouldOrderByClass() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldNotUseThreadsIfNotUsingParallel() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseDefaultDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseSpecifiedDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.parameters.ShadowTest.parametersShouldNotBeShadowed() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test2Threads() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test3Threads() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[0](testOverrideSuite, PASS_TEST)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[1](classOverrideSuite, PASS_CLASS)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[2](includeOverrideClass, PASS_INCLUDE)() with result: SUCCESS
Executed test ==> test.thread.TrueParallelTest.shouldRunInParallel() with result: SUCCESS
Executed test ==> test.reports.FailedReporterTest.failedFile() with result: SUCCESS
Executed test ==> test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest.testMethod() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusion() with result: SUCCESS
Executed test ==> test.github1405.TestExclusionOfMainMethod.testMainMethodExclusionForJunit() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount1() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount2() with result: SUCCESS
Executed test ==> test.reports.ReportTest.directoryShouldBeSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.github1090() with result: SUCCESS
Executed test ==> test.reports.ReportTest.oneDirectoryPerSuite() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableEvenWithTimeOut() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableWithListener() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[0](class test.reports.GitHub1148Sample, [Ljava.lang.String;@58c25be0, [Ljava.lang.String;@6a2dd313)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[1](class test.reports.GitHub148Sample, [Ljava.lang.String;@4f02645a, [Ljava.lang.String;@7b3976b5)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.shouldHonorSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.verifyIndex() with result: SUCCESS

TestNG > Regression2 > test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass2() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerHasOnlyOneNonNullArgument() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerMethod() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationWithoutTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyConfigurationTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyDataProviderTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyFactoryTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyInvocationCountTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyListenerAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyMyParamTransformerOnlyOneNonNull() with result: SUCCESS

TestNG > Regression2 > test.xml.XmlVerifyTest.handleInvalidSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.xml.XmlVerifyTest.handleInvalidSuites() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.preserverOrderAttribute() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.simple() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue629_InvokedMethodDoesNotRecognizeConfigurationMethod() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue87_method_orderning_with_disable_test_class() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.testMethodsWithExpectedExceptionsShouldShowUpAsPass() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withFailure() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withSuccess() with result: SUCCESS
Executed test ==> test.testng249.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.testng195.AfterMethodTest.testContextShouldBeInitialized() with result: SUCCESS
Executed test ==> test.regression.BeforeTestFailingTest.beforeTestFailingShouldCauseSkips() with result: SUCCESS
Executed test ==> test.testng285.TestNG285Test.verifyBug() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedAndSkippedMethodsShouldBeIncluded() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedMethodWithDataProviderShouldHaveInvocationNumbers() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigs() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsAmidstInheritance() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtSuiteLevel() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtTestLevel() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f1[0](org.testng.TestRunner@38a9bf9c)() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f2[0](org.testng.TestRunner@38a9bf9c)() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyBaseClassTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithAnnotation() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithoutAnnotation() with result: SUCCESS
Executed test ==> test.abstractconfmethod.C.test1() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.factoryPreserve() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.orderShouldBePreservedWithDependencies() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[0]([Ljava.lang.Class;@578e899e)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[1]([Ljava.lang.Class;@d132053)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[2]([Ljava.lang.Class;@481a321d)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[3]([Ljava.lang.Class;@64f7e139)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[4]([Ljava.lang.Class;@152d15d5)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[5]([Ljava.lang.Class;@647450f9)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[0]([Ljava.lang.String;@8e9a48f)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[1]([Ljava.lang.String;@4a08f4f5)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[2]([Ljava.lang.String;@463700ce)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[3]([Ljava.lang.String;@4c2a50be)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[4]([Ljava.lang.String;@4351b003)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[5]([Ljava.lang.String;@49ecf325)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveOrderValueShouldBeTheDefaultOne() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationInMixedMode() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationSkipWhenNoFailuresExist() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationWhenFailuresExist() with result: SUCCESS
Executed test ==> test_result.GitHub1197Test.testGitHub1197() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterParametersTest.failedSuiteShouldHaveParameters() with result: SUCCESS
Executed test ==> test.listeners.github1319.TestResultInstanceCheckTest.testInstances() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[0](class test.reports.ReporterLogSuccessSample, Listener: onTestSuccess)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[1](class test.reports.ReporterLogSkippedSample, Listener: onTestSkipped)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[2](class test.reports.ReporterLogFailureSample, Listener: onTestFailure)() with result: SUCCESS
Executed test ==> test.testng1396.ParallelByInstancesInterceptorTest.should_honor_interceptor_order_when_running_parallel_instances() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS

TestNG > Regression2 > test.github1417.TestParamsInjectionInBeforeClass.testMethod STANDARD_OUT
    ...
    ... TestNG 6.11.1-SNAPSHOT by CÃ©dric Beust (cedric@beust.com)
    ...

    PASSED: testMethod
    PASSED: testMethod

    ===============================================
        1417_test
        Tests run: 2, Failures: 0, Skips: 0
    ===============================================

    PASSED: testMethod

    ===============================================
        1417_test_regular
        Tests run: 1, Failures: 0, Skips: 0
    ===============================================


    ===============================================
    1417_suite
    Total tests run: 3, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.github1417.TestParamsInjectionInBeforeClass.testMethod() with result: SUCCESS
Executed test ==> test.testng1231.TestExecutionListenerInvocationOrder.testListenerOrder() with result: SUCCESS
Executed test ==> test.order.OrderTest.interleavingMethodsInDifferentClasses() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag() with result: SUCCESS

TestNG > Regression2 > test.github1461.MemoryLeakTestNg.testMemoryLeak STANDARD_OUT
    constructor
    test method 1
    test method 2

    ===============================================
    Command line suite
    Total tests run: 2, Failures: 0, Skips: 0
    ===============================================

    waiting for clean up...
    TestNG finalized
    finalize
    [0] test object(s) still exist.
    waiting for clean up...
Executed test ==> test.github1461.MemoryLeakTestNg.testMemoryLeak() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsUsingGroupsWithFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasExplicitSkipInConfiguration() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasMultipleFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenConfigHasAlwaysRun() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInABaseClass() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInSuiteConfigs() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasException() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasExceptionInInheritance() with result: SUCCESS
Executed test ==> test.factory.github328.GitHub328Test.testFactoryExecutionWhenNoIncludedTests() with result: SUCCESS
Executed test ==> test.testng106.TestNG106.testFailingBeforeSuiteShouldSkipAllTests() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterModificationFromListener() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterSetFromListener() with result: SUCCESS
Executed test ==> test.test111.Test1.testAbstract() with result: SUCCESS
Executed test ==> test.test111.Test1.test() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClasses() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClassesAndDifferentPackage() with result: SUCCESS
Executed test ==> test.listeners.github551.Test551.testExecutionTimeOfFailedConfig() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.verify() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.threadPoolAndTimeOutShouldFail() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.verify() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f1() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f2() with result: SUCCESS
Executed test ==> test.listeners.ResultEndMillisTest.endMillisShouldBeNonNull() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.aggregateListeners() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldBeOnlyRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkFromAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkWithManyTestMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.failureBeforeAfterMethod() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.invokedMethodListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.listenerRegistration STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
Executed test ==> test.listeners.ListenerTest.listenerRegistration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.listenerShouldBeCalledBeforeConfiguration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodInterceptorShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodListenersShouldNotBeCalledForSkippedMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.setStatusShouldWorkInListener() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.shouldAttachOnlyOneInstanceOfTheSameListenerClassPerTest() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenerInListernersAnnotationShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyIdenticalTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldWork() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.testFailATestFromOnTestStart STANDARD_OUT
    In onTestStart
Executed test ==> test.listeners.ListenerTest.testFailATestFromOnTestStart() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.testListenerCallInvocation() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndInvokedMethodListenerTest.bothListenersShouldRun() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndConfigurationListenerTest.bothListenersShouldRun() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithXml() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithoutListener() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldFail() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSkip() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSucceed() with result: SUCCESS

TestNG > Listeners > test.multiplelisteners.TestMaker.run STANDARD_ERROR
    [TestNG] Reporter test.multiplelisteners.SimpleReporter@1b61f7bc failed
    java.lang.RuntimeException: java.lang.NoSuchFieldException: m_configuration
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:31)
    	at org.testng.TestNG.generateReports(TestNG.java:1209)
    	at org.testng.TestNG.run(TestNG.java:1134)
    	at test.multiplelisteners.TestMaker.run(TestMaker.java:26)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.NoSuchFieldException: m_configuration
    	at java.lang.Class.getDeclaredField(Class.java:2062)
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:24)
    	... 52 more
Executed test ==> test.multiplelisteners.TestMaker.run() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnce() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnceInMultiTestContext() with result: SUCCESS
Executed test ==> test.listeners.github1296.GitHub1296Test.test_number_of_call_of_configuration_listener() with result: SUCCESS

TestNG > Reflection STANDARD_OUT
    exactMatchDP:
    s0, [[Ljava.lang.Object;@68d63635
    s0, [[Ljava.lang.Object;@4382441c
    s0, [[Ljava.lang.Object;@12f7cc52
    s0, [[Ljava.lang.Object;@38098a2b
    s0, [[Ljava.lang.Object;@61b77481
    s1, [[Ljava.lang.Object;@30c46e0f
    s1, [[Ljava.lang.Object;@1cfda119
    s1, [[Ljava.lang.Object;@68d1387f
    s1, [[Ljava.lang.Object;@32984a98
    s1, [[Ljava.lang.Object;@213ffed2
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[0]([[Ljava.lang.Object;@68d63635, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[1]([[Ljava.lang.Object;@4382441c, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[2]([[Ljava.lang.Object;@12f7cc52, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[3]([[Ljava.lang.Object;@38098a2b, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[4]([[Ljava.lang.Object;@61b77481, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0())() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[5]([[Ljava.lang.Object;@30c46e0f, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[6]([[Ljava.lang.Object;@1cfda119, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[7]([[Ljava.lang.Object;@68d1387f, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[8]([[Ljava.lang.Object;@32984a98, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[9]([[Ljava.lang.Object;@213ffed2, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
    matchArrayEndingDP:
    s0, [[Ljava.lang.Object;@4417e4ea
    s0, [[Ljava.lang.Object;@266ecf4d
    s0, [[Ljava.lang.Object;@7c3bc7f4
    s0, [[Ljava.lang.Object;@3867d94c
    s0, [[Ljava.lang.Object;@43ac5a1e
    s1, [[Ljava.lang.Object;@1368f181
    s1, [[Ljava.lang.Object;@31ce907f
    s1, [[Ljava.lang.Object;@376592b3
    s1, [[Ljava.lang.Object;@16b852eb
    s1, [[Ljava.lang.Object;@42084d44
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[0]([[Ljava.lang.Object;@4417e4ea, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[1]([[Ljava.lang.Object;@266ecf4d, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,float[],org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[2]([[Ljava.lang.Object;@7c3bc7f4, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[],org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[3]([[Ljava.lang.Object;@3867d94c, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[4]([[Ljava.lang.Object;@43ac5a1e, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[5]([[Ljava.lang.Object;@1368f181, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[6]([[Ljava.lang.Object;@31ce907f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[7]([[Ljava.lang.Object;@376592b3, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,float[],org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[8]([[Ljava.lang.Object;@16b852eb, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[9]([[Ljava.lang.Object;@42084d44, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@2f554317) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@2f554317)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@47cd3120) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@47cd3120)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@73b29926) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@73b29926)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@1f2b5deb) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@1f2b5deb)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@5fe2e092, [Ljava.lang.Object;@676de282) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@5fe2e092, [Ljava.lang.Object;@676de282)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@6b73c8eb, [Ljava.lang.Object;@676de282) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, null, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@6b73c8eb, [Ljava.lang.Object;@676de282)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@2b2ccc7c, [Ljava.lang.Object;@676de282) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@2b2ccc7c, [Ljava.lang.Object;@676de282)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@1d3ed7db, [Ljava.lang.Object;@676de282) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@1d3ed7db, [Ljava.lang.Object;@676de282)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[0](class org.testng.TestRunner)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[1](interface org.testng.ITestContext)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[2](class test.reflect.TestContextJustForTesting)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[0](class java.lang.Object)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[1](class java.lang.Class)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[2](interface java.sql.Connection)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@16754ac5, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@16754ac5, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@20f24897, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@20f24897, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@4c2eb588, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@4c2eb588, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@148d2d6a, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@148d2d6a, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@52a9977f, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@52a9977f, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@42a8f998, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@42a8f998, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@20210f15, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri0(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@1fc7367"
    ITestContext is "org.testng.TestRunner@7284640a"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@54aa056d"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@20210f15, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@7cdbf14a, org.testng.TestRunner@7284640a, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri1(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@73dc2905"
    ITestContext is "org.testng.TestRunner@7284640a"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@7759cb7e"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@7cdbf14a, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@54ab357e, org.testng.TestRunner@7284640a, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: goodTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@54ab357e, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@262ee76f, org.testng.TestRunner@7284640a, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: badTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@262ee76f, org.testng.TestRunner@7284640a, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@da6b37a, org.testng.TestRunner@7284640a, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: mixedArgs([Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=[Ljava.lang.String;, declaredAnnotations=[]}, Parameter{index=3, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer) 3,(java.lang.Boolean) true,(java.lang.String) three,(java.lang.String) four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@da6b37a, org.testng.TestRunner@7284640a, null)() with result: SUCCESS
Executed test ==> test.inject.InjectTestContextTest.injectionAndParameters[0](Cedric, org.testng.TestRunner@30e03cb5)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[0](a)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[1](b)() with result: SUCCESS
Executed test ==> test.inject.InjectTestResultTest.verifyTestResultInjection() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[0](1, org.testng.TestRunner@30e03cb5, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[1](2, org.testng.TestRunner@30e03cb5, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[0](org.testng.TestRunner@30e03cb5, 1, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[1](org.testng.TestRunner@30e03cb5, 2, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[0](1, a, org.testng.TestRunner@30e03cb5)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[1](2, b, org.testng.TestRunner@30e03cb5)() with result: SUCCESS

TestNG > Injection STANDARD_ERROR
    :::WARNING:::
    Missing one or more parameters that are being injected by the data provider. Please add the below arguments to the method.
    Method: withInjection([Parameter{index=0, type=java.lang.reflect.Method, declaredAnnotations=[]}])
    Arguments: [(java.lang.reflect.Method) public void test.inject.CC.f()]
Executed test ==> test.inject.NoInjectionTest.withInjection[0](public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withoutInjection[0](public void test.inject.CC.f())() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[0](class test.inject.NativeInjectionTestSamples$BadBeforeSuiteSample, beforeSuite, Can inject only one of <ITestContext, XmlTest> into a @BeforeSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[1](class test.inject.NativeInjectionTestSamples$BadBeforeTestSample, beforeTest, Can inject only one of <ITestContext, XmlTest> into a @BeforeTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[2](class test.inject.NativeInjectionTestSamples$BadBeforeClassSample, beforeClass, Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[3](class test.inject.NativeInjectionTestSamples$BadBeforeMethodSample, beforeMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[4](class test.inject.NativeInjectionTestSamples$BadAfterMethodSample, afterMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[5](class test.inject.NativeInjectionTestSamples$BadAfterClassSample, afterClass, Can inject only one of <ITestContext, XmlTest> into a @AfterClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[6](class test.inject.NativeInjectionTestSamples$BadAfterTestSample, afterTest, Can inject only one of <ITestContext, XmlTest> into a @AfterTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[7](class test.inject.NativeInjectionTestSamples$BadAfterSuiteSample, afterSuite, Can inject only one of <ITestContext, XmlTest> into a @AfterSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[8](class test.inject.NativeInjectionTestSamples$BadBeforeGroupsSample, beforeGroups, Can inject only one of <ITestContext, XmlTest> into a @BeforeGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[9](class test.inject.NativeInjectionTestSamples$BadAfterGroupsSample, afterGroups, Can inject only one of <ITestContext, XmlTest> into a @AfterGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.Github1298Test.testPlugin() with result: SUCCESS
Executed test ==> test.configuration.BeforeMethodTest.mainTest() with result: SUCCESS
Executed test ==> test.sample.Basic1.basic1() with result: SUCCESS
Executed test ==> test.Misc.makeSureSetUpWithParameterWithNoParametersFails() with result: SUCCESS
Executed test ==> test.sample.Basic2.basic2() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_first0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_premiere1() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentGroupsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethods() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithNonExistentMethod() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithSkip() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentWithDataProvider() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.instanceDependencies() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[0]([Ljava.lang.Class;@650f2092, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[1]([Ljava.lang.Class;@1ce9c697, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[2]([Ljava.lang.Class;@5c802da6, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[3]([Ljava.lang.Class;@4ec9855e, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.multipleSkips() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[0](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@23b01dc5, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[1](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@5c5c9f6c, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[2](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@2acd63b3, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[3](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@3cd6e0e7, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[4](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@7ba05296, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[5](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@7e3fe503, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[6](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@560b7b32, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[7](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@77e762d0, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleSkip() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentTest.test2() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.canBeRunAnytime() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneB() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one[0](Cedric)() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentConfigurationMethods.verifyDependents() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyDependsOnGroups() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyGroupsAcrossClasses() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups1AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups2AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnMethodsAlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.MultiGroupTest.verifyDependsOnMultiGroups() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion2() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion3() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion4() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitMethodInclusion() with result: SUCCESS
Executed test ==> test.dependent.ClassWide1Test.m1() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.send() with result: SUCCESS
Executed test ==> test.dependent.DepBugVerifyTest.verify() with result: SUCCESS
Executed test ==> test.dependent.DependsOnProtectedMethodTest.verifyBeforeInvocations() with result: SUCCESS
Executed test ==> test.dependsongroup.DependsOnGroupsTest.methodsShouldBeGroupedByClasses() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.dontGroupByInstances() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.groupByInstances() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[0]([Ljava.lang.String;@73bf5987)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[1]([Ljava.lang.String;@4ce3e11f)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[2]([Ljava.lang.String;@4efeba11)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[3]([Ljava.lang.String;@75670d78)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[4]([Ljava.lang.String;@6784c169)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[5]([Ljava.lang.String;@6eba484d)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[0]([Ljava.lang.String;@1b466fd7)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[1]([Ljava.lang.String;@6621ae84)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[2]([Ljava.lang.String;@75a8a5d8)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[3]([Ljava.lang.String;@694ab070)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[4]([Ljava.lang.String;@2be52c1b)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[5]([Ljava.lang.String;@5be707b8)() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingGroup() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second1() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.secondA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.secondA() with result: SUCCESS
Executed test ==> test.dependent.ClassWide2Test.m2() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.get() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.third0() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.thirdA() with result: SUCCESS
Executed test ==> test.SampleInheritance.baseMethod() with result: SUCCESS
Executed test ==> test.SampleInheritance.configurationsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.setVerify() with result: SUCCESS
Executed test ==> test.inheritance.testng739.TestNG739.test_classes_should_be_skipped_when_a_before_class_fails() with result: SUCCESS
Executed test ==> test.inheritance.testng234.PolymorphicFailureTest.superclassFailureShouldCauseFailure() with result: SUCCESS

TestNG > Inheritance > test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails STANDARD_OUT
    ===== Invoked methods
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class1@78a620fd] 2024153341
      Class1.beforeClass1()[pri:0, instance:test.inheritance.testng471.Class1@78a620fd] 2024153341
      Class1.beforeMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@78a620fd] 2024153341
        Class1.test1_1()[pri:0, instance:test.inheritance.testng471.Class1@78a620fd] 2024153341
      Class1.afterMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@78a620fd] 2024153341
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.beforeClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
        Class2.test2_1()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
        Class2.test2_2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      Class2.afterClass2()[pri:0, instance:test.inheritance.testng471.Class2@1eebb0e3] 518762723
      SuperClass2.beforeSuperClass2()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.beforeClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
        Class3.test3_1()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
        Class3.test3_2()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
      Class3.afterClass3()[pri:0, instance:test.inheritance.testng471.Class3@1eff1511] 520033553
    =====

    ===============================================
    Command line suite
    Total tests run: 7, Failures: 1, Skips: 1
    Configuration Failures: 1, Skips: 2
    ===============================================

Executed test ==> test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails() with result: SUCCESS
Executed test ==> test.SampleInheritance.testBooleans() with result: SUCCESS
Executed test ==> test.SampleInheritance.inheritedMethodsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.verify() with result: SUCCESS

TestNG > Inheritance STANDARD_OUT
    ===== Invoked methods
      BaseSampleInheritance.baseConfiguration()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
      SampleInheritance.configuration0()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
      BaseSampleInheritance.configuration1()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
      SampleInheritance.configuration2()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
        BaseSampleInheritance.baseMethod()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
        SampleInheritance.configurationsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
        ClassScopeTest.setVerify()[pri:0, instance:test.inheritance.ClassScopeTest@753e46f1] 1967015665
        TestNG739.test_classes_should_be_skipped_when_a_before_class_fails()[pri:0, instance:test.inheritance.testng739.TestNG739@3d5b668b] 1029400203
        PolymorphicFailureTest.superclassFailureShouldCauseFailure()[pri:0, instance:test.inheritance.testng234.PolymorphicFailureTest@61e16b60] 1642163040
        TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails()[pri:0, instance:test.inheritance.testng471.TestNG471@66efa063] 1726980195
        BaseSampleInheritance.testBooleans()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
        SampleInheritance.inheritedMethodsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@46521659] 1179784793
        ClassScopeTest.verify()[pri:0, instance:test.inheritance.ClassScopeTest@753e46f1] 1967015665
    =====
Executed test ==> test.sample.Scope.outerDeprecated[0](out)() with result: SUCCESS

TestNG > Test outer scope STANDARD_OUT
    ===== Invoked methods
        Scope.outerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@70866248]out  1887855176
    =====
Executed test ==> test.sample.Scope.innerDeprecated[0](in)() with result: SUCCESS

TestNG > Test inner scope STANDARD_OUT
    ===== Invoked methods
        Scope.innerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@3e853e34]in  1048919604
    =====
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS

TestNG > AfterClassCalledAtEnd STANDARD_OUT
    ===== Invoked methods
      AfterClassCalledAtEnd.before1Class()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
        AfterClassCalledAtEnd.test1()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
        AfterClassCalledAtEnd.test2()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
        AfterClassCalledAtEnd.test3()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
      AfterClassCalledAtEnd.afterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
      BaseAfterClassCalledAtEnd.baseAfterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@3bd62014] 1003888660
    =====
Executed test ==> test.triangle.Child1.child1() with result: SUCCESS
Executed test ==> test.triangle.Child1.child1a() with result: SUCCESS
Executed test ==> test.triangle.Child2.child2() with result: SUCCESS

TestNG > Triangle STANDARD_OUT
    ===== Invoked methods
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child1@3652720f] 911372815
        Child1.child1()[pri:0, instance:test.triangle.Child1@3652720f] 911372815
        Child1.child1a()[pri:0, instance:test.triangle.Child1@3652720f] 911372815
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child1@3652720f] 911372815
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child2@46a9e1c6] 1185538502
        Child2.child2()[pri:0, instance:test.triangle.Child2@46a9e1c6] 1185538502
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child2@46a9e1c6] 1185538502
    =====
Executed test ==> test.triangle.CheckCount.testCheckCount[0](2)() with result: SUCCESS
Executed test ==> test.triangle.CheckCount.testCheckCountDeprecated[0](2)() with result: SUCCESS

TestNG > CheckTrianglePost STANDARD_OUT
    ===== Invoked methods
        CheckCount.testCheckCount(java.lang.String)[pri:0, instance:test.triangle.CheckCount@b7c09be]2  192678334
        CheckCount.testCheckCountDeprecated(java.lang.String)[pri:0, instance:test.triangle.CheckCount@b7c09be]2  192678334
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 1 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@6dcecb49] 1842269001
        First.first2()[pri:0, instance:test.classgroup.First@6dcecb49] 1842269001
        Second.verify()[pri:0, instance:test.classgroup.Second@73965fd0] 1939234768
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 2 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@11f2ed13] 301133075
        First.first2()[pri:0, instance:test.classgroup.First@11f2ed13] 301133075
        Second.verify()[pri:0, instance:test.classgroup.Second@afdf8e7] 184416487
    =====
Executed test ==> test.factory.TestClassAnnotationTest.testOne() with result: SUCCESS
Executed test ==> test.factory.FactoryWithDataProviderTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryOrderMainTest.factoriesShouldBeInvokedInTheOrderOfCreation() with result: SUCCESS
Executed test ==> test.factory.FactoryFailureTest.factoryThrowingShouldNotRunTests() with result: SUCCESS
Executed test ==> test.factory.FactoryInSuperClassTest.factoryInSuperClassShouldWork() with result: SUCCESS
Executed test ==> test.factory.classconf.XClassOrderWithFactoryTest.testBeforeAfterClassInvocationsWithFactory() with result: SUCCESS
Executed test ==> test.factory.FactoryInterleavingTest.methodsShouldBeInterleaved() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithLocalDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNotStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.DisabledFactoryTest.disabledFactoryShouldNotRun() with result: SUCCESS
Executed test ==> test.factory.FactoryAndTestMethodTest$NullArgsTest.test() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.doubleFactoryMethodShouldWork() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithBadFactoryMethodReturnType() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithNonStaticFactoryMethod() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testNonPublicFactoryMethodShouldWork() with result: SUCCESS

TestNG > Factory > test.factory.EmptyFactoryDataProviderTest.test STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 0, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.factory.EmptyFactoryDataProviderTest.test() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnEmptyConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnIntConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnStringConstructor() with result: SUCCESS
Executed test ==> test.factory.nested.GitHub1307Test.testGitHub1307() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 42]() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 43]() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.FactoryInSeparateClassTest.checkSum() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryWithInstanceInfoTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.testWithOnlyOneThread() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInNonParallel() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[0](tests)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[1](methods)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[2](classes)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[3](instances)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[4](none)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[5](true)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[6](false)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.verifyInvocationTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.noTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutInParallelTestsFromXml() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnSuiteTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnTestTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.twoDifferentTests() with result: SUCCESS

TestNG > TimeOut > test.timeout.TimeOutIntegrationTest.testGitHub1314 STANDARD_OUT
    Test1
    Test2
Executed test ==> test.timeout.TimeOutIntegrationTest.testGitHub1314() with result: SUCCESS
Executed test ==> test.timeout.TimeOutIntegrationTest.testTimeOutWhenParallelIsTest() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.invocationCount() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatFails() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatSucceeds() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyAttributeShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldNotStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueTrue() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.factoryReceivesContext() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnSuite() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnTestNG() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CombinedTestAndObjectFactoryTest.combinedTestAndObjectFactory() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnSuiteShouldWork() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnTestNGShouldWork() with result: SUCCESS
Executed test ==> test.ParameterConstructorTest.verify() with result: SUCCESS
Executed test ==> test.Exclude.included1() with result: SUCCESS
Executed test ==> test.Exclude.included2() with result: SUCCESS
Executed test ==> test.Exclude.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value1)() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value2)() with result: SUCCESS
Executed test ==> test.IndividualMethodsTest.testMethod() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest$LocalTestClass.helloWorld() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest.testDescriptionInclusion() with result: SUCCESS
Executed test ==> test.inheritance.DChild_2.test() with result: SUCCESS
Executed test ==> test.inheritance.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.greaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellTest.onlyGroup1() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellNegativeTest.testNegativeScenario() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineGreaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineMultipleSelectors() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNoTest1Selector() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineTestWithXmlFile() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.programmaticXmlSuite() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite() with result: SUCCESS
Executed test ==> test.interleavedorder.InterleavedInvocationTest.invocationOrder() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyExternal[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyStatic[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[0](10, verifyTen)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[1](5, verifyFive)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verifySix() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.duplicateDataProviders STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Found two providers called &apos;duplicate&apos; on class test.dataprovider.DuplicateDataProviderSample
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:520)
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:436)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:601)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.duplicateDataProviders(FailingDataProviderTest.java:20)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.duplicateDataProviders() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProvider STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: expected exception from @DP
    	at test.dataprovider.FailingDataProviderSample.throwsExpectedException(FailingDataProviderSample.java:11)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:612)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProvider(FailingDataProviderTest.java:13)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProvider() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:612)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:612)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:612)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:612)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
    	at org.testng.TestRunner.privateRun(TestRunner.java:776)
    	at org.testng.TestRunner.run(TestRunner.java:634)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
    	at org.testng.TestNG.runSuites(TestNG.java:1161)
    	at org.testng.TestNG.run(TestNG.java:1129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProvider() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProviderWithInvocationNumber() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test2() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.allMethodsShouldBeInvoked() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.booleanTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classInjectionTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.configurationAndDataProvidersTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorOrMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.createDataTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.dataProviderAsTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.emptyDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.failedDataProviderShouldCauseSkip() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.iTestNGMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.inheritedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.instanceDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.methodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.mixedVarArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.oneDimDataProviderShouldWork() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.parallelDataProviderSample() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.should_prefer_dataProvider_explicit_name() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderSampleWithoutGuiceTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testExceptions() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testInstanceFactoryTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testNG411Test() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.unnamedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.varArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore1.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore2.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestAfter.testAfter() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationInheritGroupsSampleTest.test1() with result: SUCCESS
Executed test ==> test.nested.GarfTest.testGarf() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue599() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue862() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.g1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.run() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.verify() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsThatStartWithTest() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsWithSetup() with result: SUCCESS
Executed test ==> test.JUnitTest1.setNameShouldBeInvoked() with result: SUCCESS
Executed test ==> test.JUnitTest1.setUpFailingShouldCauseMethodsToBeSkipped() with result: SUCCESS
Executed test ==> test.JUnitTest1.testAbstract() with result: SUCCESS
Executed test ==> test.JUnitTest1.testNewInstance() with result: SUCCESS
Executed test ==> test.JUnitTest1.testSuite() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing2() with result: SUCCESS
Executed test ==> test.CommandLineTest.suiteNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testMethodParameter() with result: SUCCESS
Executed test ==> test.CommandLineTest.testNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testUseDefaultListenersArgument() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[0]([Ljava.lang.Class;@79a404de, [Ljava.lang.String;@25e2e925, [Ljava.lang.String;@7869a60c, [Ljava.lang.String;@405805f1)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[1]([Ljava.lang.Class;@13030d0e, [Ljava.lang.String;@167a0774, [Ljava.lang.String;@4c4e1da5, [Ljava.lang.String;@2774cd2d)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[2]([Ljava.lang.Class;@17b7a2dc, [Ljava.lang.String;@6030d410, [Ljava.lang.String;@4cf002c6, [Ljava.lang.String;@71a97267)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[3]([Ljava.lang.Class;@7727979b, [Ljava.lang.String;@1d7fa571, [Ljava.lang.String;@14392bbb, [Ljava.lang.String;@3d1069b7)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[4]([Ljava.lang.Class;@233c89cc, [Ljava.lang.String;@1bcda94c, [Ljava.lang.String;@352fdbb, [Ljava.lang.String;@1f1f3404)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[5]([Ljava.lang.Class;@7a0ff756, [Ljava.lang.String;@266c02f6, [Ljava.lang.String;@77e2dc61, [Ljava.lang.String;@4164a689)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[6]([Ljava.lang.Class;@1fe14db3, [Ljava.lang.String;@2a82a916, [Ljava.lang.String;@2181d590, [Ljava.lang.String;@3b467931)() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.easyGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.reporterWithSpockSampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.specialNameGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.spockSampleShouldWork() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testDOSPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testUnixPathResolution() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testA() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testAB() with result: SUCCESS
Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInConfigurationMethods() with result: SUCCESS

TestNG > SkipExceptions > test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 3, Failures: 1, Skips: 1
    ===============================================

Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods() with result: SUCCESS
Executed test ==> test.skipex.SkipAndExpectedTest.shouldSkip() with result: SUCCESS

TestNG > RetryAnalyzer > test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts STANDARD_OUT
    Test Called : Test8
    Test Called : Test0
    Test Called : Test1
    Test Called : Test6
    Test Called : Test2
    Test Called : Test9
    Test Called : Test7
    Test Called : Test4
    Test Called : Test3
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
Executed test ==> test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithNonzeroOnFailure() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroAfterSuccessfulRetry() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroOnSuccess() with result: SUCCESS
Executed test ==> test.retryAnalyzer.dataprovider.RetryAnalyzerWithDataProviderTest.testRetryCounts() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldNotRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.noMethodsShouldRun() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.nullMethodInterceptorWorksInTestngXml() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.shouldNotLockUpWithInterceptorThatRemovesMethods() with result: SUCCESS
Executed test ==> test.methodinterceptors.Issue392Test.AfterClass_method_should_be_fired_when_IMethodInterceptor_removes_test_methods() with result: SUCCESS
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptors() with result: SUCCESS

TestNG > MethodInterceptor > test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsMapShouldFail() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricScalar() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareBooleanArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareCharacterArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareDoubleArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareFloatArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareIntArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLargeArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareLongArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.compareShortArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.mapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullCollectionAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertNoOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.setAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_1() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_2() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_3() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.doubleNaNAssertion() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsDetectsTypeMismatchesViaExplicitTypeHint() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsIncludesAnInformativeDefaultMessage() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsRequiresAnExceptionToBeThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsReturnsTheSameObjectThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsWrapsAndPropagatesUnexpectedExceptions() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.intArray_Issue4() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderFailure() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderSuccess() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.setsSuccess() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArrayAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInIterablesAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListAndMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideIterableAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeepWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertNotEquals() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoin() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.escapeUnicode() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.joinTwoStringsWithJoinStrings() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethods() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethodsWhenOverrdingIsInvolved() with result: SUCCESS
Executed test ==> test.issue1430.TestFileToClass.testFileToClass() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$RedundantGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$UniqueGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithRedundantGroups() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithUniqueGroups() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[0]([Ljava.lang.Class;@5ac3dc99, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[1]([Ljava.lang.Class;@6d9aa9d9, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[2]([Ljava.lang.Class;@3f3da8d0, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[3]([Ljava.lang.Class;@6621983a, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[4]([Ljava.lang.Class;@664b9e37, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[5]([Ljava.lang.Class;@64a8a09b, 4, 0, 4)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[6]([Ljava.lang.Class;@690ec6aa, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[7]([Ljava.lang.Class;@389d0ee3, 1, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[8]([Ljava.lang.Class;@2b23ce91, 2, 3, 3)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[9]([Ljava.lang.Class;@6351d649, 0, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[10]([Ljava.lang.Class;@750b74b0, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[11]([Ljava.lang.Class;@29e469dd, 8, 0, 8)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[12]([Ljava.lang.Class;@1efd3fee, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithTest.nestedA() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithInheritedTest.nestedWithInheritedTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceWithNoModules() with result: SUCCESS
Executed test ==> test.guice.GuiceInheritanceTest.singletonShouldWork() with result: SUCCESS
Executed test ==> test.guice.GuiceModuleFactoryTest.singletonShouldWork() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingExtendedListenerInstance() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingSimpleListenerInstance() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[0](a1)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[1](a2)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[2](a3)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[3](a4)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[0](goodWithDoctype.xml, true)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[2](badWithDoctype.xml, false)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[4](issue174.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroups() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroupsWithRun() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkNoError STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkNoError() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkTestNamesForProgrammaticSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkProgrammaticSuitesFails() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifyBeforeGroupUseAppropriateInstance() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifySingleInvocation() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyBothAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyIteratorDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyParametersAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassThreadTest.beforeClassMethodsShouldRunInParallel() with result: SUCCESS
Executed test ==> test.configuration.MethodCallOrderTest.realTest() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassWithDisabledTest.afterClassShouldRunEvenWithDisabledMethods() with result: SUCCESS
Executed test ==> test.configuration.BeforeTestOrderingTest.verifyBeforeTestOrdering() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.test() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2() with result: SUCCESS
Executed test ==> test.configuration.SuiteFactoryOnceTest.suiteMethodsShouldOnlyRunOnce() with result: SUCCESS
Executed test ==> test.configuration.SuiteTest.test1() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[0]({two=orld, one=ello}, H{{one}} W{{two}}, Hello World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[1]({}, E{{#foo}}xxx{{/foo}}lephant, Elephant)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[2]({}, Hello
{{#foo}}@
{{/foo}}World, Hello
World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[3]({day=Monday, person=test.mustache.MustacheTest$Person@38c99580}, Hello {{#person}}{{name}}{{/person}}, {{day}}, Hello John, Monday)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[4]({name=Carl, person=test.mustache.MustacheTest$Person@2e7971d8}, Hello {{#person}}{{name}}{{/person}}, {{name}}, Hello John, Carl)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[5]({people=[test.mustache.MustacheTest$Person@e5b52bf, test.mustache.MustacheTest$Person@6b49151d]}, People:@{{#people}}-{{/people}}!, People:@--!)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[6]({ages=[test.mustache.MustacheTest$Age@6f01991e, test.mustache.MustacheTest$Age@3b1be0eb], people=[test.mustache.MustacheTest$Person@e5b52bf, test.mustache.MustacheTest$Person@6b49151d]}, :@{{#people}}{{name}}{{#ages}}{{age}}{{/ages}}@{{/people}}!_, :@Carl4243@Christopher4243@!_)() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedClasses() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedMethods() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedWithExcludedGroups() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test1() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2_fails() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testAssertAllCount() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testOnSucceedAndFailureCalled() with result: SUCCESS
Executed test ==> test.enable.EnableTest.disabled_methods_should_not_be_run() with result: SUCCESS
Executed test ==> test.enable.EnableTest.issue420() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.complexITestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testOnClassFromReporter() with result: SUCCESS
Executed test ==> test.name.github1046.TestCustomNamesForTests.testCustomTestNames() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatAllEventsForATestMethodInClassInstanceExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTwoInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: FAILURE

TestNG > Parallelization > test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads FAILED
    java.lang.AssertionError at ParallelByMethodsTestCase6Scenario1.java:607
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThreeInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfWarningsAreServed() with result: SUCCESS
Executed test ==> test.dataprovider.issue128.DataProviderParametersMismatchTest.testIfExceptionIsRaised() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.methodsOrderTest() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.randomOrderTestMethod() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testInstancesOrder() with result: SUCCESS
Executed test ==> test.github799.EnsureInstancesAreOrderedViaFactories.testMethod() with result: SUCCESS

Gradle Test Executor 2 STANDARD_OUT
    Failures in <suite> :TestNG, <test> :Parallelization
    test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads()
    StackTrace:
     java.lang.AssertionError: Expected 20 test method execution event logs to be in a block of methods executing in parallel. Found an event log of a different type in the block being processed: [EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 464220577, Method name: testMethodA, Time of event: 1502080200620, Thread ID: 6117}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 797808160, Method name: testMethodA, Time of event: 1502080200621, Thread ID: 6118}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1130146499, Method name: testMethodA, Time of event: 1502080200621, Thread ID: 6119}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1308619683, Method name: testMethodA, Time of event: 1502080200621, Thread ID: 6120}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 153168800, Method name: testMethodA, Time of event: 1502080200623, Thread ID: 6121}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 464220577, Method name: testMethodB, Time of event: 1502080200628, Thread ID: 6122}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 797808160, Method name: testMethodB, Time of event: 1502080200629, Thread ID: 6123}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1130146499, Method name: testMethodB, Time of event: 1502080200635, Thread ID: 6124}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 464220577, Method name: testMethodA, Time of event: 1502080200721, Thread ID: 6117}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 797808160, Method name: testMethodA, Time of event: 1502080200721, Thread ID: 6118}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1130146499, Method name: testMethodA, Time of event: 1502080200721, Thread ID: 6119}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1308619683, Method name: testMethodA, Time of event: 1502080200721, Thread ID: 6120}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 153168800, Method name: testMethodA, Time of event: 1502080200723, Thread ID: 6121}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 464220577, Method name: testMethodB, Time of event: 1502080200728, Thread ID: 6122}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 797808160, Method name: testMethodB, Time of event: 1502080200729, Thread ID: 6123}, EventLog{Event: LISTENER_TEST_METHOD_PASS, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1130146499, Method name: testMethodB, Time of event: 1502080200736, Thread ID: 6124}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 1308619683, Method name: testMethodD, Time of event: 1502080200783, Thread ID: 6135}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 464220577, Method name: testMethodD, Time of event: 1502080200783, Thread ID: 6132}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 153168800, Method name: testMethodC, Time of event: 1502080200783, Thread ID: 6131}, EventLog{Event: TEST_METHOD_EXECUTION, Suite: TestSuiteB, Test: TestSuiteB-ThreeTestClassTest, Class: test.thread.parallelization.sample.TestClassBFourMethodsWithNoDepsSample, Class instance hash code: 797808160, Method name: testMethodC, Time of event: 1502080200783, Thread ID: 6128}] expected [true] but found [false]
    	at test.thread.parallelization.BaseParallelizationTest.verifyEventTypeForEventsLogs(BaseParallelizationTest.java:106)
    	at test.thread.parallelization.BaseParallelizationTest.verifySimultaneousTestMethodExecutionEvents(BaseParallelizationTest.java:716)
    	at test.thread.parallelization.BaseParallelizationTest.verifySimultaneousTestMethods(BaseParallelizationTest.java:400)
    	at test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads(ParallelByMethodsTestCase6Scenario1.java:607)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    ... Removed 48 stack frames 


1529 tests completed, 1 failed
:test FAILED

FAILURE: Build failed with an exception.

* What went wrong:
Execution failed for task ':test'.
> There were failing tests. See the report at: file:///home/travis/build/cbeust/testng/build/reports/tests/test/index.html

* Try:
Run with --info or --debug option to get more log output.

* Exception is:
org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':test'.
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:84)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:55)
	at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:62)
	at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)
	at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88)
	at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:46)
	at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:51)
	at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)
	at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
	at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:236)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.execute(DefaultTaskGraphExecuter.java:228)
	at org.gradle.internal.Transformers$4.transform(Transformers.java:169)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:61)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:228)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:215)
	at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:77)
	at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:58)
	at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:32)
	at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:113)
	at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)
	at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23)
	at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43)
	at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)
	at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30)
	at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:256)
	at org.gradle.initialization.DefaultGradleLauncher$RunTasksAction.execute(DefaultGradleLauncher.java:253)
	at org.gradle.internal.Transformers$4.transform(Transformers.java:169)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)
	at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:56)
	at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:175)
	at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:119)
	at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:102)
	at org.gradle.launcher.exec.GradleBuildController.run(GradleBuildController.java:71)
	at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)
	at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)
	at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)
	at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:75)
	at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:49)
	at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:49)
	at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:31)
	at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:47)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)
	at org.gradle.util.Swapper.swap(Swapper.java:38)
	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)
	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)
	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)
	at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)
	at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
Caused by: org.gradle.api.GradleException: There were failing tests. See the report at: file:///home/travis/build/cbeust/testng/build/reports/tests/test/index.html
	at org.gradle.api.tasks.testing.Test.handleTestFailures(Test.java:1252)
	at org.gradle.api.tasks.testing.Test.executeTests(Test.java:664)
	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.doExecute(DefaultTaskClassInfoStore.java:141)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134)
	at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:123)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:632)
	at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:615)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:95)
	at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:76)
	... 70 more


BUILD FAILED

Total time: 4 mins 57.928 secs

travis_time:end:168c46e6:start=1502079947207884578,finish=1502080246024931266,duration=298817046688[0K
[31;1mThe command "./gradlew check --stacktrace" exited with 1.[0m
travis_fold:start:before_cache.1[0Ktravis_time:start:0df1ee06[0K$ rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock

travis_time:end:0df1ee06:start=1502080246047394186,finish=1502080246073418413,duration=26024227[0Ktravis_fold:end:before_cache.1[0Ktravis_fold:start:before_cache.2[0Ktravis_time:start:03c47b9e[0K$ rm -fr $HOME/.gradle/caches/*/plugin-resolution/

travis_time:end:03c47b9e:start=1502080246097979418,finish=1502080246119946966,duration=21967548[0Ktravis_fold:end:before_cache.2[0Ktravis_fold:start:cache.2[0Kstore build cache
travis_time:start:17e00f00[0K
travis_time:end:17e00f00:start=1502080246139119155,finish=1502080246146265785,duration=7146630[0Ktravis_time:start:1de53b28[0K[32;1mchange detected (content changed, file is created, or file is deleted):
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.bin
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.lock

[0m
[32;1mchanges detected, packing new archive[0m
.
.
.
[32;1muploading archive[0m

travis_time:end:1de53b28:start=1502080246159962474,finish=1502080276459846419,duration=30299883945[0Ktravis_fold:end:cache.2[0K
Done. Your build exited with 1.
