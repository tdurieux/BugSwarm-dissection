diff --git a/CHANGES.txt b/CHANGES.txt
index b7edbbb35b..d992621d1b 100755
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -2,6 +2,7 @@ Current
 Fixed: GITHUB-1493: Wrong exception msg when timeout on test (Krishnan Mahadevan)
 Fixed: GITHUB-328: Attempt to fix unnecessary execution of @Factory-ctors (@beverage & Julien Herr)
 Fixed: GITHUB-1384: Huge performance issue between 6.5.2 and 6.11 (Denis Bazhenov)
+New: Remove Serializable (Julien Herr)
 
 6.12
 Fixed: GITHUB-1484: Remove irrelevant "targets" for TestNG annotations (Krishnan Mahadevan)
diff --git a/src/main/java/org/testng/IAttributes.java b/src/main/java/org/testng/IAttributes.java
index caffb3f85b..6ebf30cd8b 100755
--- a/src/main/java/org/testng/IAttributes.java
+++ b/src/main/java/org/testng/IAttributes.java
@@ -1,32 +1,31 @@
 package org.testng;
 
-import java.io.Serializable;
 import java.util.Set;
 
 /**
  * A trait that is used by all interfaces that lets the user add or remove their
  * own attributes.
  */
-public interface IAttributes extends Serializable {
+public interface IAttributes {
   /**
    * @param name The name of the attribute to return
    */
-  public Object getAttribute(String name);
+  Object getAttribute(String name);
 
   /**
    * Set a custom attribute.
    */
-  public void setAttribute(String name, Object value);
+  void setAttribute(String name, Object value);
 
   /**
    * @return all the attributes names.
    */
-  public Set<String> getAttributeNames();
+  Set<String> getAttributeNames();
 
   /**
    * Remove the attribute
    *
    * @return the attribute value if found, null otherwise
    */
-  public Object removeAttribute(String name);
+  Object removeAttribute(String name);
 }
diff --git a/src/main/java/org/testng/IClass.java b/src/main/java/org/testng/IClass.java
index 40146ee0c6..1d213e8a39 100755
--- a/src/main/java/org/testng/IClass.java
+++ b/src/main/java/org/testng/IClass.java
@@ -3,14 +3,10 @@
 import org.testng.xml.XmlClass;
 import org.testng.xml.XmlTest;
 
-import java.io.Serializable;
-
 /**
  * <code>IClass</code> represents a test class and a collection of its instances.
- *
- * @author <a href = "mailto:cedric&#64;beust.com">Cedric Beust</a>
  */
-public interface IClass extends Serializable {
+public interface IClass {
 
   /**
    * @return this test class name.  This is the name of the
diff --git a/src/main/java/org/testng/IExtraOutput.java b/src/main/java/org/testng/IExtraOutput.java
index 60ff73c419..2f8b1e526b 100755
--- a/src/main/java/org/testng/IExtraOutput.java
+++ b/src/main/java/org/testng/IExtraOutput.java
@@ -1,19 +1,17 @@
 package org.testng;
 
-import java.io.Serializable;
 import java.util.List;
 
-
 /**
  * @deprecated Not used
  */
 @Deprecated
-public interface IExtraOutput extends Serializable {
+public interface IExtraOutput {
 
   /**
    * @return a List<String> representing the parameters passed
    * to this test method, or an empty List if no parameters were used.
    */
-  public List<String> getParameterOutput();
+  List<String> getParameterOutput();
 
 }
diff --git a/src/main/java/org/testng/IMethodSelector.java b/src/main/java/org/testng/IMethodSelector.java
index dd260dfe7e..8a07f0b63d 100755
--- a/src/main/java/org/testng/IMethodSelector.java
+++ b/src/main/java/org/testng/IMethodSelector.java
@@ -1,16 +1,12 @@
 package org.testng;
 
-import java.io.Serializable;
 import java.util.List;
 
 /**
  * This interface is used to augment or replace TestNG's algorithm to
  * decide whether a test method should be included in a test run.
- *
- * Created on Sep 26, 2005
- * @author cbeust
  */
-public interface IMethodSelector extends Serializable {
+public interface IMethodSelector {
 
   /**
    * @param context The selector context.  The implementation of this method
@@ -24,7 +20,7 @@
    * @return true if this method should be included in the test run, false
    * otherwise
    */
-  public boolean includeMethod(IMethodSelectorContext context,
+  boolean includeMethod(IMethodSelectorContext context,
       ITestNGMethod method, boolean isTestMethod);
 
   /**
@@ -32,6 +28,6 @@ public boolean includeMethod(IMethodSelectorContext context,
    * can perform additional work, such as adding the transitive closure of
    * all the groups being included and depended upon.
    */
-  public void setTestMethods(List<ITestNGMethod> testMethods);
+  void setTestMethods(List<ITestNGMethod> testMethods);
 
 }
diff --git a/src/main/java/org/testng/IResultMap.java b/src/main/java/org/testng/IResultMap.java
index 103c27e38c..590dd73b87 100755
--- a/src/main/java/org/testng/IResultMap.java
+++ b/src/main/java/org/testng/IResultMap.java
@@ -1,23 +1,22 @@
 package org.testng;
 
-import java.io.Serializable;
 import java.util.Collection;
 import java.util.Set;
 
-public interface IResultMap extends Serializable {
+public interface IResultMap {
 
-  public void addResult(ITestResult result, ITestNGMethod method);
+  void addResult(ITestResult result, ITestNGMethod method);
 
-  public Set<ITestResult> getResults(ITestNGMethod method);
+  Set<ITestResult> getResults(ITestNGMethod method);
 
-  public Set<ITestResult> getAllResults();
+  Set<ITestResult> getAllResults();
 
-  public void removeResult(ITestNGMethod m);
+  void removeResult(ITestNGMethod m);
 
-  public void removeResult(ITestResult r);
+  void removeResult(ITestResult r);
 
-  public Collection<ITestNGMethod> getAllMethods();
+  Collection<ITestNGMethod> getAllMethods();
 
-  public int size();
+  int size();
 
 }
diff --git a/src/main/java/org/testng/ISuiteResult.java b/src/main/java/org/testng/ISuiteResult.java
index 6ddcc1ed34..e2ff506ee7 100755
--- a/src/main/java/org/testng/ISuiteResult.java
+++ b/src/main/java/org/testng/ISuiteResult.java
@@ -1,24 +1,18 @@
 package org.testng;
 
-import java.io.Serializable;
-
-
 /**
  * This class represents the result of a suite run.
- *
- * @author Cedric Beust, Aug 6, 2004
- *
  */
-public interface ISuiteResult extends Serializable {
+public interface ISuiteResult {
 
   /**
    * @return The name of the property file for these tests.
    */
-  public String getPropertyFileName();
+  String getPropertyFileName();
 
   /**
    * @return The testing context for these tests.
    */
-  public ITestContext getTestContext();
+  ITestContext getTestContext();
 
 }
diff --git a/src/main/java/org/testng/ITestClass.java b/src/main/java/org/testng/ITestClass.java
index 9a0de55364..79dbc53f2b 100755
--- a/src/main/java/org/testng/ITestClass.java
+++ b/src/main/java/org/testng/ITestClass.java
@@ -1,7 +1,5 @@
 package org.testng;
 
-import java.io.Serializable;
-
 /**
  * This class represents a test class:
  * <ul>
@@ -15,10 +13,8 @@
  * they might differ from what the ITestMethodFinder returned
  * since ITestClass will take into account the groups being
  * included and excluded.
- *
- * @author <a href = "mailto:cedric&#64;beust.com">Cedric Beust</a>
  */
-public interface ITestClass extends IClass, Serializable {
+public interface ITestClass extends IClass {
 
   /**
    * Returns all the applicable test methods.
diff --git a/src/main/java/org/testng/ITestNGMethod.java b/src/main/java/org/testng/ITestNGMethod.java
index a7ac4768cb..ec2a25c705 100755
--- a/src/main/java/org/testng/ITestNGMethod.java
+++ b/src/main/java/org/testng/ITestNGMethod.java
@@ -4,7 +4,6 @@
 import org.testng.internal.ConstructorOrMethod;
 import org.testng.xml.XmlTest;
 
-import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Map;
@@ -14,10 +13,8 @@
  * Describes a TestNG annotated method and the instance on which it will be invoked.
  *
  * This interface is not meant to be implemented by users.
- *
- * @author Cedric Beust, May 3, 2004
  */
-public interface ITestNGMethod extends Serializable, Cloneable {
+public interface ITestNGMethod extends Cloneable {
 
   /**
    * @return The real class on which this method was declared
@@ -83,13 +80,13 @@
    * If a group was not found.
    */
   String getMissingGroup();
-  public void setMissingGroup(String group);
+  void setMissingGroup(String group);
 
   /**
    * Before and After groups
    */
-  public String[] getBeforeGroups();
-  public String[] getAfterGroups();
+  String[] getBeforeGroups();
+  String[] getAfterGroups();
 
   /**
    * @return The methods  this method depends on, possibly added to the methods
@@ -207,31 +204,31 @@
 
   boolean getEnabled();
 
-  public String getDescription();
+  String getDescription();
   void setDescription(String description);
 
-  public void incrementCurrentInvocationCount();
-  public int getCurrentInvocationCount();
-  public void setParameterInvocationCount(int n);
-  public int getParameterInvocationCount();
+  void incrementCurrentInvocationCount();
+  int getCurrentInvocationCount();
+  void setParameterInvocationCount(int n);
+  int getParameterInvocationCount();
   void setMoreInvocationChecker(Callable<Boolean> moreInvocationChecker);
   boolean hasMoreInvocation();
 
-  public ITestNGMethod clone();
+  ITestNGMethod clone();
 
-  public IRetryAnalyzer getRetryAnalyzer();
-  public void setRetryAnalyzer(IRetryAnalyzer retryAnalyzer);
+  IRetryAnalyzer getRetryAnalyzer();
+  void setRetryAnalyzer(IRetryAnalyzer retryAnalyzer);
 
-  public boolean skipFailedInvocations();
-  public void setSkipFailedInvocations(boolean skip);
+  boolean skipFailedInvocations();
+  void setSkipFailedInvocations(boolean skip);
 
   /**
    * The time under which all invocationCount methods need to complete by.
    */
-  public long getInvocationTimeOut();
+  long getInvocationTimeOut();
 
-  public boolean ignoreMissingDependencies();
-  public void setIgnoreMissingDependencies(boolean ignore);
+  boolean ignoreMissingDependencies();
+  void setIgnoreMissingDependencies(boolean ignore);
 
   /**
    * Which invocation numbers of this method should be used (only applicable
@@ -239,26 +236,26 @@
    * returned from the data provider.  These values are read from the XML file in
    * the <include invocationNumbers="..."> tag.
    */
-  public List<Integer> getInvocationNumbers();
-  public void setInvocationNumbers(List<Integer> numbers);
+  List<Integer> getInvocationNumbers();
+  void setInvocationNumbers(List<Integer> numbers);
 
   /**
    * The list of invocation numbers that failed, which is only applicable for
    * methods that have a data provider.
    */
-  public void addFailedInvocationNumber(int number);
-  public List<Integer> getFailedInvocationNumbers();
+  void addFailedInvocationNumber(int number);
+  List<Integer> getFailedInvocationNumbers();
 
   /**
    * The scheduling priority. Lower priorities get scheduled first.
    */
-  public int getPriority();
-  public void setPriority(int priority);
+  int getPriority();
+  void setPriority(int priority);
 
   /**
    * @return the XmlTest this method belongs to.
    */
-  public XmlTest getXmlTest();
+  XmlTest getXmlTest();
 
   ConstructorOrMethod getConstructorOrMethod();
 
@@ -272,5 +269,5 @@
    * getRealClass().getName() + "." +  getMethodName()
    * @return qualified name for this method
    */
-  public String getQualifiedName();
+  String getQualifiedName();
 }
diff --git a/src/main/java/org/testng/ITestObjectFactory.java b/src/main/java/org/testng/ITestObjectFactory.java
index fedb5bfe8c..cd8df84b40 100755
--- a/src/main/java/org/testng/ITestObjectFactory.java
+++ b/src/main/java/org/testng/ITestObjectFactory.java
@@ -1,12 +1,8 @@
 package org.testng;
 
-import java.io.Serializable;
-
 /**
  * Parent interface of all the object factories.
- *
- * @author Cedric Beust <cedric@beust.com>
  */
-public interface ITestObjectFactory extends Serializable {
+public interface ITestObjectFactory {
 
 }
diff --git a/src/main/java/org/testng/SkipException.java b/src/main/java/org/testng/SkipException.java
index 35ec5be246..00179009ce 100755
--- a/src/main/java/org/testng/SkipException.java
+++ b/src/main/java/org/testng/SkipException.java
@@ -6,11 +6,12 @@
  * return of {@link #isSkip()}.
  * Users may provide extensions to this mechanism by extending this class.
  *
- * @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>Alex Popescu</a>
  * @since 5.6
  */
 public class SkipException extends RuntimeException {
+
   private static final long serialVersionUID = 4052142657885527260L;
+
   private StackTraceElement[] m_stackTrace;
   private volatile boolean m_stackReduced;
 
diff --git a/src/main/java/org/testng/SuiteResult.java b/src/main/java/org/testng/SuiteResult.java
index 4a53c751d0..bc80a9685f 100755
--- a/src/main/java/org/testng/SuiteResult.java
+++ b/src/main/java/org/testng/SuiteResult.java
@@ -7,16 +7,12 @@
  * This class logs the result of an entire Test Suite (defined by a
  * property file).
  *
- * @author Cedric Beust, May 10, 2004
- *
  */
 class SuiteResult implements ISuiteResult, Comparable {
-	/* generated */
-	private static final long serialVersionUID = 6778513869858860756L;
   //FIXME: Is m_propertyFileName needed?
 	private String m_propertyFileName =  null;
-  private XmlSuite m_suite = null;
-  private ITestContext m_testContext = null;
+  private final XmlSuite m_suite;
+  private final ITestContext m_testContext;
 
   protected SuiteResult(XmlSuite suite, ITestContext tr) {
     m_suite = suite;
diff --git a/src/main/java/org/testng/SuiteRunState.java b/src/main/java/org/testng/SuiteRunState.java
index 74af24a89f..702ff76210 100755
--- a/src/main/java/org/testng/SuiteRunState.java
+++ b/src/main/java/org/testng/SuiteRunState.java
@@ -1,19 +1,11 @@
 package org.testng;
 
-import java.io.Serializable;
-
-
 /**
  * A state object that records the status of the suite run. Mainly used to
  * figure out if there are any @BeforeSuite failures.
- *
- * @author <a href='mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>
  */
-public class SuiteRunState implements Serializable {
-  /**
-   *
-   */
-  private static final long serialVersionUID = -2716934905049123874L;
+public class SuiteRunState {
+
   private boolean m_hasFailures;
 
   public synchronized void failed() {
diff --git a/src/main/java/org/testng/SuiteRunner.java b/src/main/java/org/testng/SuiteRunner.java
index accbc208c8..773dc4522f 100755
--- a/src/main/java/org/testng/SuiteRunner.java
+++ b/src/main/java/org/testng/SuiteRunner.java
@@ -18,7 +18,6 @@
 import org.testng.xml.XmlTest;
 
 import java.io.File;
-import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -34,45 +33,40 @@
 /**
  * <CODE>SuiteRunner</CODE> is responsible for running all the tests included in one
  * suite. The test start is triggered by {@link #run()} method.
- *
- * @author Cedric Beust, Apr 26, 2004
  */
-public class SuiteRunner implements ISuite, Serializable, IInvokedMethodListener {
-
-  /* generated */
-  private static final long serialVersionUID = 5284208932089503131L;
+public class SuiteRunner implements ISuite, IInvokedMethodListener {
 
   private static final String DEFAULT_OUTPUT_DIR = "test-output";
 
   private Map<String, ISuiteResult> suiteResults = Collections.synchronizedMap(Maps.<String, ISuiteResult>newLinkedHashMap());
-  private transient List<TestRunner> testRunners = Lists.newArrayList();
-  private transient Map<Class<? extends ISuiteListener>, ISuiteListener> listeners = Maps.newHashMap();
-  private transient TestListenerAdapter textReporter = new TestListenerAdapter();
+  private List<TestRunner> testRunners = Lists.newArrayList();
+  private Map<Class<? extends ISuiteListener>, ISuiteListener> listeners = Maps.newHashMap();
+  private TestListenerAdapter textReporter = new TestListenerAdapter();
 
   private String outputDir;
   private XmlSuite xmlSuite;
-  private transient Injector parentInjector;
+  private Injector parentInjector;
 
-  private transient List<ITestListener> testListeners = Lists.newArrayList();
-  private final transient  Map<Class<? extends IClassListener>, IClassListener> classListeners = Maps.newHashMap();
-  private transient ITestRunnerFactory tmpRunnerFactory;
+  private List<ITestListener> testListeners = Lists.newArrayList();
+  private final  Map<Class<? extends IClassListener>, IClassListener> classListeners = Maps.newHashMap();
+  private ITestRunnerFactory tmpRunnerFactory;
 
-  private transient boolean useDefaultListeners = true;
+  private boolean useDefaultListeners = true;
 
   // The remote host where this suite was run, or null if run locally
   private String remoteHost;
 
   // The configuration
-  private transient  IConfiguration configuration;
+  private  IConfiguration configuration;
 
-  private transient ITestObjectFactory objectFactory;
-  private transient Boolean skipFailedInvocationCounts = Boolean.FALSE;
-  private transient List<IReporter> reporters = Lists.newArrayList();
+  private ITestObjectFactory objectFactory;
+  private Boolean skipFailedInvocationCounts = Boolean.FALSE;
+  private List<IReporter> reporters = Lists.newArrayList();
 
-  private transient Map<Class<? extends IInvokedMethodListener>, IInvokedMethodListener> invokedMethodListeners;
+  private Map<Class<? extends IInvokedMethodListener>, IInvokedMethodListener> invokedMethodListeners;
 
   /** The list of all the methods invoked during this run */
-  private transient List<IInvokedMethod> invokedMethods = Collections.synchronizedList(Lists.<IInvokedMethod>newArrayList());
+  private List<IInvokedMethod> invokedMethods = Collections.synchronizedList(Lists.<IInvokedMethod>newArrayList());
 
   private List<ITestNGMethod> allTestMethods = Lists.newArrayList();
   private SuiteRunState suiteState = new SuiteRunState();
diff --git a/src/main/java/org/testng/TestClass.java b/src/main/java/org/testng/TestClass.java
index 76e1a056be..bdf7f6d0d3 100755
--- a/src/main/java/org/testng/TestClass.java
+++ b/src/main/java/org/testng/TestClass.java
@@ -15,16 +15,12 @@
  * - The test methods
  * - The configuration methods (test and method)
  * - The class file
- *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
- * @author <a href='mailto:the_mindstorm@evolva.ro'>Alexandru Popescu</a>
  */
 class TestClass extends NoOpTestClass implements ITestClass {
-	/* generated */
-	private static final long serialVersionUID = -8077917128278361294L;
-  private transient  IAnnotationFinder annotationFinder = null;
+
+  private  IAnnotationFinder annotationFinder = null;
   // The Strategy used to locate test methods (TestNG, JUnit, etc...)
-  private transient ITestMethodFinder testMethodFinder = null;
+  private ITestMethodFinder testMethodFinder = null;
 
   private IClass iClass = null;
   private String testName;
diff --git a/src/main/java/org/testng/TestException.java b/src/main/java/org/testng/TestException.java
index a6b4e59592..be5ab104b6 100755
--- a/src/main/java/org/testng/TestException.java
+++ b/src/main/java/org/testng/TestException.java
@@ -3,12 +3,10 @@
 /**
  * Exception thrown when an exception happens while running a test
  * method.
- *
- * @author Cedric Beust, Apr 26, 2004
- *
  */
 public class TestException extends TestNGException {
-	private static final long serialVersionUID = -7946644025188038804L;
+
+  private static final long serialVersionUID = -7946644025188038804L;
 
   public TestException(String s) {
     super(s);
@@ -18,7 +16,7 @@ public TestException(Throwable t) {
 		super(t);
 	}
 
-    public TestException(String message, Throwable t) {
-        super(message, t);
-    }
+  public TestException(String message, Throwable t) {
+    super(message, t);
+  }
 }
diff --git a/src/main/java/org/testng/TestNGException.java b/src/main/java/org/testng/TestNGException.java
index a5b3d86269..0980cf4a43 100755
--- a/src/main/java/org/testng/TestNGException.java
+++ b/src/main/java/org/testng/TestNGException.java
@@ -1,14 +1,10 @@
 package org.testng;
 
-
 /**
  * The base class for all exceptions thrown by TestNG.
- *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
  */
 public class TestNGException extends RuntimeException {
 
-  /* generated */
   private static final long serialVersionUID = -422675971506425913L;
 
   public TestNGException(Throwable t) {
diff --git a/src/main/java/org/testng/TestRunner.java b/src/main/java/org/testng/TestRunner.java
index dfa101d2a5..82ad4d35b4 100755
--- a/src/main/java/org/testng/TestRunner.java
+++ b/src/main/java/org/testng/TestRunner.java
@@ -61,34 +61,30 @@
  * This class takes care of running one Test.
  */
 public class TestRunner
-    implements ITestContext, ITestResultNotifier, IThreadWorkerFactory<ITestNGMethod>
-{
+    implements ITestContext, ITestResultNotifier, IThreadWorkerFactory<ITestNGMethod> {
 
   public static final String DEFAULT_PROP_OUTPUT_DIR = "test-output";
 
-  /* generated */
-  private static final long serialVersionUID = 4247820024988306670L;
-
   private final Comparator<ITestNGMethod> comparator;
   private ISuite m_suite;
   private XmlTest m_xmlTest;
   private String m_testName;
 
-  transient private List<XmlClass> m_testClassesFromXml= null;
-  transient private List<XmlPackage> m_packageNamesFromXml= null;
+  private List<XmlClass> m_testClassesFromXml= null;
+  private List<XmlPackage> m_packageNamesFromXml= null;
 
-  transient private IInvoker m_invoker= null;
-  transient private IAnnotationFinder m_annotationFinder= null;
+  private IInvoker m_invoker= null;
+  private IAnnotationFinder m_annotationFinder= null;
 
   /** ITestListeners support. */
-  transient private List<ITestListener> m_testListeners = Lists.newArrayList();
-  transient private Set<IConfigurationListener> m_configurationListeners = Sets.newHashSet();
+  private List<ITestListener> m_testListeners = Lists.newArrayList();
+  private Set<IConfigurationListener> m_configurationListeners = Sets.newHashSet();
 
-  transient private IConfigurationListener m_confListener= new ConfigurationListener();
-  transient private boolean m_skipFailedInvocationCounts;
+  private IConfigurationListener m_confListener= new ConfigurationListener();
+  private boolean m_skipFailedInvocationCounts;
 
-  transient private Collection<IInvokedMethodListener> m_invokedMethodListeners = Lists.newArrayList();
-  transient private final Map<Class<? extends IClassListener>, IClassListener> m_classListeners = Maps.newHashMap();
+  private Collection<IInvokedMethodListener> m_invokedMethodListeners = Lists.newArrayList();
+  private final Map<Class<? extends IClassListener>, IClassListener> m_classListeners = Maps.newHashMap();
 
   /**
    * All the test methods we found, associated with their respective classes.
@@ -103,7 +99,7 @@
   private Date m_endDate = null;
 
   /** A map to keep track of Class <-> IClass. */
-  transient private Map<Class<?>, ITestClass> m_classMap = Maps.newLinkedHashMap();
+  private Map<Class<?>, ITestClass> m_classMap = Maps.newLinkedHashMap();
 
   /** Where the reports will be created. */
   private String m_outputDirectory= DEFAULT_PROP_OUTPUT_DIR;
@@ -143,11 +139,11 @@
   private String m_host;
 
   // Defined dynamically depending on <test preserve-order="true/false">
-  private transient List<IMethodInterceptor> m_methodInterceptors;
+  private List<IMethodInterceptor> m_methodInterceptors;
 
-  private transient ClassMethodMap m_classMethodMap;
-  private transient TestNGClassFinder m_testClassFinder;
-  private transient IConfiguration m_configuration;
+  private ClassMethodMap m_classMethodMap;
+  private TestNGClassFinder m_testClassFinder;
+  private IConfiguration m_configuration;
   private IMethodInterceptor builtinInterceptor;
 
   private enum PriorityWeight {
diff --git a/src/main/java/org/testng/TimeBombSkipException.java b/src/main/java/org/testng/TimeBombSkipException.java
index 1777233e69..534b14299b 100755
--- a/src/main/java/org/testng/TimeBombSkipException.java
+++ b/src/main/java/org/testng/TimeBombSkipException.java
@@ -16,11 +16,12 @@
  * You can customize this by using the specialized constructors. Suppported date
  * formats are according to the {@code SimpleDateFormat}.
  *
- * @author <a href='mailto:the[dot]mindstorm[at]gmail[dot]com'>Alex Popescu</a>
  * @since 5.6
  */
 public class TimeBombSkipException extends SkipException {
+
   private static final long serialVersionUID = -8599821478834048537L;
+
   private static final SimpleDateFormat SDF= new SimpleDateFormat("yyyy/MM/dd");
   private Calendar m_expireDate;
   private DateFormat m_inFormat= SDF;
diff --git a/src/main/java/org/testng/internal/Attributes.java b/src/main/java/org/testng/internal/Attributes.java
index 55fd834aec..a004dd59eb 100755
--- a/src/main/java/org/testng/internal/Attributes.java
+++ b/src/main/java/org/testng/internal/Attributes.java
@@ -8,15 +8,10 @@
 
 /**
  * Simple implementation of IAttributes.
- *
- * @author cbeust@google.com (Cedric Beust), March 16th, 2010
  */
 public class Attributes implements IAttributes {
-  /**
-   *
-   */
-  private static final long serialVersionUID = 6701159979281335152L;
-  private Map<String, Object> m_attributes = Maps.newHashMap();
+
+  private final Map<String, Object> m_attributes = Maps.newHashMap();
 
   @Override
   public Object getAttribute(String name) {
diff --git a/src/main/java/org/testng/internal/BaseTestMethod.java b/src/main/java/org/testng/internal/BaseTestMethod.java
index f8e5998fbd..5d148fb07e 100755
--- a/src/main/java/org/testng/internal/BaseTestMethod.java
+++ b/src/main/java/org/testng/internal/BaseTestMethod.java
@@ -29,7 +29,7 @@
  * Superclass to represent both &#64;Test and &#64;Configuration methods.
  */
 public abstract class BaseTestMethod implements ITestNGMethod {
-  private static final long serialVersionUID = -2666032602580652173L;
+
   private static final Pattern SPACE_SEPARATOR_PATTERN = Pattern.compile(" +");
 
   /**
@@ -38,12 +38,12 @@
    */
   protected ITestClass m_testClass;
 
-  protected final transient Class<?> m_methodClass;
-  protected final transient ConstructorOrMethod m_method;
-  private transient String m_signature;
+  protected final Class<?> m_methodClass;
+  protected final ConstructorOrMethod m_method;
+  private String m_signature;
   protected String m_id = "";
   protected long m_date = -1;
-  protected final transient IAnnotationFinder m_annotationFinder;
+  protected final IAnnotationFinder m_annotationFinder;
   protected String[] m_groups = {};
   protected String[] m_groupsDependedUpon = {};
   protected String[] m_methodsDependedUpon = {};
diff --git a/src/main/java/org/testng/internal/ClassImpl.java b/src/main/java/org/testng/internal/ClassImpl.java
index 1c8d35fd49..2b220cc6e4 100755
--- a/src/main/java/org/testng/internal/ClassImpl.java
+++ b/src/main/java/org/testng/internal/ClassImpl.java
@@ -7,46 +7,40 @@
 import com.google.inject.Stage;
 
 import org.testng.IClass;
-import org.testng.IModuleFactory;
 import org.testng.ISuite;
 import org.testng.ITest;
 import org.testng.ITestContext;
 import org.testng.ITestObjectFactory;
 import org.testng.TestNGException;
-import org.testng.annotations.Guice;
 import org.testng.annotations.ITestAnnotation;
 import org.testng.collections.Lists;
 import org.testng.collections.Objects;
-import org.testng.internal.annotations.AnnotationHelper;
 import org.testng.internal.annotations.IAnnotationFinder;
 import org.testng.xml.XmlClass;
 import org.testng.xml.XmlTest;
 
-import java.lang.annotation.Annotation;
 import java.lang.reflect.Constructor;
 import java.util.List;
 import java.util.Map;
 
 /**
  * Implementation of an IClass.
- *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
  */
 public class ClassImpl implements IClass {
-  private static final long serialVersionUID = 1118178273317520344L;
-  transient private Class m_class = null;
-  transient private Object m_defaultInstance = null;
-  private XmlTest m_xmlTest = null;
-  transient private IAnnotationFinder m_annotationFinder = null;
-  transient private List<Object> m_instances = Lists.newArrayList();
-  transient private Map<Class<?>, IClass> m_classes = null;
+
+  private final Class<?> m_class;
+  private Object m_defaultInstance = null;
+  private final XmlTest m_xmlTest;
+  private final IAnnotationFinder m_annotationFinder;
+  private List<Object> m_instances = Lists.newArrayList();
+  private final Map<Class<?>, IClass> m_classes;
   private int m_instanceCount;
   private long[] m_instanceHashCodes;
-  private transient Object m_instance;
-  private ITestObjectFactory m_objectFactory;
+  private final Object m_instance;
+  private final ITestObjectFactory m_objectFactory;
   private String m_testName = null;
-  private XmlClass m_xmlClass;
-  private ITestContext m_testContext;
+  private final XmlClass m_xmlClass;
+  private final ITestContext m_testContext;
   private final boolean m_hasParentModule;
 
   public ClassImpl(ITestContext context, Class<?> cls, XmlClass xmlClass, Object instance,
@@ -72,10 +66,6 @@ public ClassImpl(ITestContext context, Class<?> cls, XmlClass xmlClass, Object i
     m_hasParentModule = isStringNotEmpty(m_testContext.getSuite().getParentModule());
   }
 
-  private static void ppp(String s) {
-    System.out.println("[ClassImpl] " + s);
-  }
-
   @Override
   public String getTestName() {
     return m_testName;
diff --git a/src/main/java/org/testng/internal/ClonedMethod.java b/src/main/java/org/testng/internal/ClonedMethod.java
index 959fdc4f6b..8d30653649 100755
--- a/src/main/java/org/testng/internal/ClonedMethod.java
+++ b/src/main/java/org/testng/internal/ClonedMethod.java
@@ -14,10 +14,9 @@
 import java.util.concurrent.Callable;
 
 public class ClonedMethod implements ITestNGMethod {
-  private static final long serialVersionUID = 1L;
 
-  private ITestNGMethod m_method;
-  transient private Method m_javaMethod;
+  private final ITestNGMethod m_method;
+  private final Method m_javaMethod;
   private String m_id;
   private int m_currentInvocationCount;
   private long m_date;
diff --git a/src/main/java/org/testng/internal/ConfigurationGroupMethods.java b/src/main/java/org/testng/internal/ConfigurationGroupMethods.java
index e92bc3488e..3def72d654 100755
--- a/src/main/java/org/testng/internal/ConfigurationGroupMethods.java
+++ b/src/main/java/org/testng/internal/ConfigurationGroupMethods.java
@@ -5,7 +5,6 @@
 import org.testng.collections.Lists;
 import org.testng.collections.Maps;
 
-import java.io.Serializable;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -15,13 +14,9 @@
  * since they are passed around the various invokers and potentially
  * modified in different threads.
  *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
- * @author <a href='mailto:the_mindstorm@evolva.ro'>Alexandru Popescu</a>
  * @since 5.3 (Mar 2, 2006)
  */
-public class ConfigurationGroupMethods implements Serializable {
-  /** Use serialVersionUID for interoperability. */
-  private final static long serialVersionUID= 1660798519864898480L;
+public class ConfigurationGroupMethods {
 
   /** The list of beforeGroups methods keyed by the name of the group */
   private final Map<String, List<ITestNGMethod>> m_beforeGroupsMethods;
diff --git a/src/main/java/org/testng/internal/ConfigurationMethod.java b/src/main/java/org/testng/internal/ConfigurationMethod.java
index af35c24b69..ba3562eb48 100755
--- a/src/main/java/org/testng/internal/ConfigurationMethod.java
+++ b/src/main/java/org/testng/internal/ConfigurationMethod.java
@@ -26,10 +26,7 @@
 import org.testng.internal.annotations.IBeforeTest;
 
 public class ConfigurationMethod extends BaseTestMethod {
-  /**
-   *
-   */
-  private static final long serialVersionUID = -6537771498553619645L;
+
   private final boolean m_isBeforeSuiteConfiguration;
   private final boolean m_isAfterSuiteConfiguration;
 
diff --git a/src/main/java/org/testng/internal/FactoryMethod.java b/src/main/java/org/testng/internal/FactoryMethod.java
index ae653be3d1..b26eeb206c 100755
--- a/src/main/java/org/testng/internal/FactoryMethod.java
+++ b/src/main/java/org/testng/internal/FactoryMethod.java
@@ -26,8 +26,6 @@
  */
 public class FactoryMethod extends BaseTestMethod {
 
-  private static final long serialVersionUID = -7329918821346197099L;
-
   private final IFactoryAnnotation factoryAnnotation;
   private final Object m_instance;
   private final XmlTest m_xmlTest;
diff --git a/src/main/java/org/testng/internal/InvokeMethodRunnable.java b/src/main/java/org/testng/internal/InvokeMethodRunnable.java
index e35fba43fa..227d79f45d 100755
--- a/src/main/java/org/testng/internal/InvokeMethodRunnable.java
+++ b/src/main/java/org/testng/internal/InvokeMethodRunnable.java
@@ -71,9 +71,7 @@ private void runOne() {
   }
 
   public static class TestNGRuntimeException extends RuntimeException {
-    /**
-     *
-     */
+
     private static final long serialVersionUID = -8619899270785596231L;
 
     public TestNGRuntimeException(Throwable rootCause) {
diff --git a/src/main/java/org/testng/internal/InvokedMethod.java b/src/main/java/org/testng/internal/InvokedMethod.java
index bb14c5c5e6..872b676bd8 100755
--- a/src/main/java/org/testng/internal/InvokedMethod.java
+++ b/src/main/java/org/testng/internal/InvokedMethod.java
@@ -1,17 +1,15 @@
 package org.testng.internal;
 
-import java.io.Serializable;
-
 import org.testng.IInvokedMethod;
 import org.testng.ITestNGMethod;
 import org.testng.ITestResult;
 
-public class InvokedMethod implements Serializable, IInvokedMethod {
-  private static final long serialVersionUID = 2126127194102819222L;
-  transient private Object m_instance;
-  private ITestNGMethod m_testMethod;
-  private long m_date = System.currentTimeMillis();
-  private ITestResult m_testResult;
+public class InvokedMethod implements IInvokedMethod {
+
+  private final Object m_instance;
+  private final ITestNGMethod m_testMethod;
+  private final long m_date;
+  private final ITestResult m_testResult;
 
   public InvokedMethod(Object instance,
                        ITestNGMethod method,
diff --git a/src/main/java/org/testng/internal/NoOpTestClass.java b/src/main/java/org/testng/internal/NoOpTestClass.java
index 12f8595db3..4ca4cef295 100755
--- a/src/main/java/org/testng/internal/NoOpTestClass.java
+++ b/src/main/java/org/testng/internal/NoOpTestClass.java
@@ -1,15 +1,13 @@
 package org.testng.internal;
 
-
 import org.testng.ITestClass;
 import org.testng.ITestNGMethod;
 import org.testng.xml.XmlClass;
 import org.testng.xml.XmlTest;
 
 public class NoOpTestClass implements ITestClass {
-  private static final long serialVersionUID = -4544061405329040593L;
 
-  protected Class m_testClass= null;
+  protected Class<?> m_testClass = null;
 
   // Test methods
   protected ITestNGMethod[] m_beforeClassMethods = new ITestNGMethod[0];
@@ -24,14 +22,17 @@
   protected ITestNGMethod[] m_beforeGroupsMethods = new ITestNGMethod[0];
   protected ITestNGMethod[] m_afterGroupsMethods = new ITestNGMethod[0];
 
-  private transient Object[] m_instances;
-  private long[] m_instanceHashes;
-
-  private XmlTest m_xmlTest;
+  private final Object[] m_instances;
+  private final long[] m_instanceHashes;
 
-  private XmlClass m_xmlClass;
+  private final XmlTest m_xmlTest;
+  private final XmlClass m_xmlClass;
 
   protected NoOpTestClass() {
+    m_instances = null;
+    m_instanceHashes = null;
+    m_xmlTest = null;
+    m_xmlClass = null;
   }
 
   public NoOpTestClass(ITestClass testClass) {
diff --git a/src/main/java/org/testng/internal/ObjectFactoryImpl.java b/src/main/java/org/testng/internal/ObjectFactoryImpl.java
index 51e06b8cbf..97e99191f3 100755
--- a/src/main/java/org/testng/internal/ObjectFactoryImpl.java
+++ b/src/main/java/org/testng/internal/ObjectFactoryImpl.java
@@ -14,8 +14,6 @@
  */
 public class ObjectFactoryImpl implements IObjectFactory {
 
-  private static final long serialVersionUID = -4547389328475540017L;
-
   @Override
   public Object newInstance(Constructor constructor, Object... params) {
     try {
diff --git a/src/main/java/org/testng/internal/Parameters.java b/src/main/java/org/testng/internal/Parameters.java
index 5cbedd6cc9..0856c2e2ea 100755
--- a/src/main/java/org/testng/internal/Parameters.java
+++ b/src/main/java/org/testng/internal/Parameters.java
@@ -293,22 +293,15 @@ private static boolean canInject(String annotation) {
     return !("@" + Test.class.getSimpleName()).equalsIgnoreCase(annotation);
   }
 
+  private static final List<Class<?>> INJECTED_TYPES = Arrays.asList(
+      ITestContext.class, ITestResult.class, XmlTest.class, Method.class, Object[].class
+  );
   private static void checkParameterTypes(String methodName,
       Class<?>[] parameterTypes, String methodAnnotation, String[] parameterNames)
   {
     int totalLength = parameterTypes.length;
-    Set<Class> injectedTypes = new HashSet<Class>() {
-      private static final long serialVersionUID = -5324894581793435812L;
-
-    {
-      add(ITestContext.class);
-      add(ITestResult.class);
-      add(XmlTest.class);
-      add(Method.class);
-      add(Object[].class);
-    }};
     for (Class parameterType : parameterTypes) {
-      if (injectedTypes.contains(parameterType)) {
+      if (INJECTED_TYPES.contains(parameterType)) {
         totalLength--;
       }
     }
diff --git a/src/main/java/org/testng/internal/ResultMap.java b/src/main/java/org/testng/internal/ResultMap.java
index ae37ee4c2a..be931efaad 100755
--- a/src/main/java/org/testng/internal/ResultMap.java
+++ b/src/main/java/org/testng/internal/ResultMap.java
@@ -13,11 +13,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 public class ResultMap implements IResultMap {
-  /**
-   *
-   */
-  private static final long serialVersionUID = 80134376515999093L;
-  private Map<ITestResult, ITestNGMethod> m_map = new ConcurrentHashMap<>();
+
+  private final Map<ITestResult, ITestNGMethod> m_map = new ConcurrentHashMap<>();
 
   @Override
   public void addResult(ITestResult result, ITestNGMethod method) {
diff --git a/src/main/java/org/testng/internal/RunInfo.java b/src/main/java/org/testng/internal/RunInfo.java
index 4f65d2171b..2836b10343 100755
--- a/src/main/java/org/testng/internal/RunInfo.java
+++ b/src/main/java/org/testng/internal/RunInfo.java
@@ -5,7 +5,6 @@
 import org.testng.ITestNGMethod;
 import org.testng.collections.Lists;
 
-import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
 
@@ -14,12 +13,10 @@
  * what methods should be run.  It gets invoked by the TestRunner
  * and then goes through its list of method selectors to decide what methods
  * need to be run.
- *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
  */
-public class RunInfo implements Serializable {
-  private static final long serialVersionUID = -9085221672822562888L;
-  transient private List<MethodSelectorDescriptor>
+public class RunInfo {
+
+  private final List<MethodSelectorDescriptor>
     m_methodSelectors = Lists.newArrayList();
 
   public void addMethodSelector(IMethodSelector selector, int priority) {
diff --git a/src/main/java/org/testng/internal/TestNGMethod.java b/src/main/java/org/testng/internal/TestNGMethod.java
index 1cba95414f..e2ec42e986 100755
--- a/src/main/java/org/testng/internal/TestNGMethod.java
+++ b/src/main/java/org/testng/internal/TestNGMethod.java
@@ -9,24 +9,16 @@
 import org.testng.xml.XmlInclude;
 import org.testng.xml.XmlTest;
 
-import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
-
 /**
  * This class represents a test method.
- *
- * @author Cedric Beust, May 3, 2004
- * @author <a href = "mailto:the_mindstorm&#64;evolva.ro">Alexandru Popescu</a>
  */
-public class TestNGMethod extends BaseTestMethod implements Serializable {
-  /**
-   *
-   */
-  private static final long serialVersionUID = -1742868891986775307L;
+public class TestNGMethod extends BaseTestMethod {
+
   private int m_threadPoolSize = 0;
   private int m_invocationCount = 1;
   private int m_successPercentage = 100;
diff --git a/src/main/java/org/testng/internal/TestResult.java b/src/main/java/org/testng/internal/TestResult.java
index 79884c38e0..dc7e91d6e0 100755
--- a/src/main/java/org/testng/internal/TestResult.java
+++ b/src/main/java/org/testng/internal/TestResult.java
@@ -16,15 +16,11 @@
 import java.util.List;
 import java.util.Set;
 
-
 /**
  * This class represents the result of a test.
- *
- * @author Cedric Beust, May 2, 2004
  */
 public class TestResult implements ITestResult, IAlterTestName {
 
-  private static final long serialVersionUID = 6273017418233324556L;
   private IClass m_testClass = null;
   private ITestNGMethod m_method = null;
   private int m_status = CREATED;
@@ -33,8 +29,8 @@
   private long m_endMillis = 0;
   private String m_name = null;
   private String m_host;
-  transient private Object[] m_parameters = {};
-  transient private Object m_instance;
+  private Object[] m_parameters = {};
+  private Object m_instance;
   private String m_instanceName;
   private ITestContext m_context;
   private int parameterIndex;
diff --git a/src/main/java/org/testng/internal/XmlMethodSelector.java b/src/main/java/org/testng/internal/XmlMethodSelector.java
index e334be5f0b..53b34289ff 100755
--- a/src/main/java/org/testng/internal/XmlMethodSelector.java
+++ b/src/main/java/org/testng/internal/XmlMethodSelector.java
@@ -11,7 +11,6 @@
 import org.testng.IMethodSelector;
 import org.testng.IMethodSelectorContext;
 import org.testng.ITestNGMethod;
-import org.testng.TestNGException;
 import org.testng.collections.ListMultiMap;
 import org.testng.collections.Lists;
 import org.testng.collections.Maps;
@@ -25,10 +24,8 @@
  * given in testng.xml.
  *
  * Created on Sep 30, 2005
- * @author cbeust
  */
 public class XmlMethodSelector implements IMethodSelector {
-  private static final long serialVersionUID = -9030548178025605629L;
 
   // Groups included and excluded for this run
   private Map<String, String> m_includedGroups = Maps.newHashMap();
@@ -37,8 +34,8 @@
   // The BeanShell expression for this test, if any
   private String m_expression = null;
   // List of methods included implicitly
-  private ListMultiMap<String, XmlInclude> m_includedMethods = Maps.newListMultiMap();
-  private IBsh m_bsh = Dynamic.hasBsh() ? new Bsh() : new BshMock();
+  private final ListMultiMap<String, XmlInclude> m_includedMethods = Maps.newListMultiMap();
+  private final IBsh m_bsh = Dynamic.hasBsh() ? new Bsh() : new BshMock();
 
   @Override
   public boolean includeMethod(IMethodSelectorContext context,
diff --git a/src/main/java/org/testng/internal/junit/ArrayComparisonFailure.java b/src/main/java/org/testng/internal/junit/ArrayComparisonFailure.java
index ac3e052f98..513fae7097 100755
--- a/src/main/java/org/testng/internal/junit/ArrayComparisonFailure.java
+++ b/src/main/java/org/testng/internal/junit/ArrayComparisonFailure.java
@@ -8,8 +8,6 @@
  */
 public class ArrayComparisonFailure extends AssertionError {
 
-    private static final long serialVersionUID= 1L;
-    
     private final List<Integer> fIndices= new ArrayList<>();
     private final String fMessage;
     private final AssertionError fCause;
diff --git a/src/main/java/org/testng/internal/thread/ThreadExecutionException.java b/src/main/java/org/testng/internal/thread/ThreadExecutionException.java
index f1ff1899e2..61bc6ad57c 100755
--- a/src/main/java/org/testng/internal/thread/ThreadExecutionException.java
+++ b/src/main/java/org/testng/internal/thread/ThreadExecutionException.java
@@ -2,11 +2,10 @@
 
 /**
  * Wrapper exception for ExecutionExceptions.
- *
- * @author <a href="mailto:the_mindstorm@evolva.ro>the_mindstorm</a>
  */
 public class ThreadExecutionException extends Exception {
-	static final long serialVersionUID = -7766644143333236263L;
+
+	 private static final long serialVersionUID = -7766644143333236263L;
 
    public ThreadExecutionException(Throwable t) {
 		super(t);
diff --git a/src/main/java/org/testng/internal/thread/ThreadTimeoutException.java b/src/main/java/org/testng/internal/thread/ThreadTimeoutException.java
index 437100bc56..29fe1cefb8 100755
--- a/src/main/java/org/testng/internal/thread/ThreadTimeoutException.java
+++ b/src/main/java/org/testng/internal/thread/ThreadTimeoutException.java
@@ -2,11 +2,10 @@
 
 /**
  * Exception used to signal a thread timeout.
- *
- * @author <a href='mailto:the_mindstorm@evolva.ro'>Alexandru Popescu</a>
  */
 public class ThreadTimeoutException extends Exception {
-  static final long serialVersionUID = 7009400729783393548L;
+
+   private static final long serialVersionUID = 7009400729783393548L;
 
    public ThreadTimeoutException(String msg) {
       super(msg);
diff --git a/src/main/java/org/testng/junit/JUnitTestClass.java b/src/main/java/org/testng/junit/JUnitTestClass.java
index f3a54c1995..12227e7c92 100755
--- a/src/main/java/org/testng/junit/JUnitTestClass.java
+++ b/src/main/java/org/testng/junit/JUnitTestClass.java
@@ -7,24 +7,19 @@
 import org.testng.xml.XmlClass;
 import org.testng.xml.XmlTest;
 
-/**
- *
- * @author lukas
- */
 //NO JUnit specific code here to avoid runtime errors
 public abstract class JUnitTestClass implements ITestClass {
 
-    private static final long serialVersionUID = 405598615794850925L;
     private List<ITestNGMethod> m_testMethods = Lists.newArrayList();
     private List<ITestNGMethod> m_beforeClass = Lists.newArrayList();
     private List<ITestNGMethod> m_afterClass = Lists.newArrayList();
     private List<ITestNGMethod> m_beforeTest = Lists.newArrayList();
     private List<ITestNGMethod> m_afterTest = Lists.newArrayList();
-    private Class m_realClass;
-    private Object[] m_instances;
-    private long[] m_instanceHashes;
+    private final Class<?> m_realClass;
+    private final Object[] m_instances;
+    private final long[] m_instanceHashes;
 
-    public JUnitTestClass(Class test) {
+    public JUnitTestClass(Class<?> test) {
         m_realClass = test;
         m_instances = new Object[]{test};
         m_instanceHashes = new long[]{test.hashCode()};
diff --git a/src/main/java/org/testng/reporters/TestHTMLReporter.java b/src/main/java/org/testng/reporters/TestHTMLReporter.java
index d9b70e929d..474c08bfdd 100755
--- a/src/main/java/org/testng/reporters/TestHTMLReporter.java
+++ b/src/main/java/org/testng/reporters/TestHTMLReporter.java
@@ -329,8 +329,7 @@ private static void ppp(String s) {
     System.out.println("[TestHTMLReporter] " + s);
   }
 
-  private static class NameComparator implements Comparator<ITestResult>, Serializable {
-    private static final long serialVersionUID = 381775815838366907L;
+  private static class NameComparator implements Comparator<ITestResult> {
 
     @Override
     public int compare(ITestResult o1, ITestResult o2) {
@@ -341,8 +340,7 @@ public int compare(ITestResult o1, ITestResult o2) {
 
   }
 
-  private static class ConfigurationComparator implements Comparator<ITestResult>, Serializable {
-    private static final long serialVersionUID = 5558550850685483455L;
+  private static class ConfigurationComparator implements Comparator<ITestResult> {
 
     @Override
     public int compare(ITestResult o1, ITestResult o2) {
diff --git a/src/main/java/org/testng/xml/XmlClass.java b/src/main/java/org/testng/xml/XmlClass.java
index 73efdf33e8..5ea0fcd6bb 100755
--- a/src/main/java/org/testng/xml/XmlClass.java
+++ b/src/main/java/org/testng/xml/XmlClass.java
@@ -7,19 +7,15 @@
 import org.testng.internal.ClassHelper;
 import org.testng.reporters.XMLStringBuffer;
 
-import java.io.Serializable;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
 /**
  * This class describes the tag <class> in testng.xml.
- *
- * @author <a href="mailto:cedric@beust.com">Cedric Beust</a>
  */
-public class XmlClass implements Serializable, Cloneable {
+public class XmlClass implements Cloneable {
 
-  private static final long serialVersionUID = 8885360896966149897L;
   private List<XmlInclude> m_includedMethods = Lists.newArrayList();
   private List<String> m_excludedMethods = Lists.newArrayList();
   private String m_name = null;
diff --git a/src/main/java/org/testng/xml/XmlInclude.java b/src/main/java/org/testng/xml/XmlInclude.java
index a4a3670b18..800f23db91 100755
--- a/src/main/java/org/testng/xml/XmlInclude.java
+++ b/src/main/java/org/testng/xml/XmlInclude.java
@@ -4,13 +4,11 @@
 import org.testng.collections.Maps;
 import org.testng.reporters.XMLStringBuffer;
 
-import java.io.Serializable;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
-public class XmlInclude implements Serializable {
-  private static final long serialVersionUID = 1L;
+public class XmlInclude {
 
   private final String m_name;
   private final List<Integer> m_invocationNumbers;
diff --git a/src/main/java/org/testng/xml/XmlPackage.java b/src/main/java/org/testng/xml/XmlPackage.java
index 7abe1ada43..29e7c88e28 100755
--- a/src/main/java/org/testng/xml/XmlPackage.java
+++ b/src/main/java/org/testng/xml/XmlPackage.java
@@ -1,7 +1,6 @@
 package org.testng.xml;
 
 import java.io.IOException;
-import java.io.Serializable;
 import java.util.List;
 import java.util.Properties;
 
@@ -12,15 +11,9 @@
 
 /**
  * This class describes the tag <package>  in testng.xml.
- *
- * @author Cedric
- * @author <a href='mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>
  */
-public class XmlPackage implements Serializable {
-  /**
-   *
-   */
-  private static final long serialVersionUID = 1996341670354923204L;
+public class XmlPackage {
+
   private String m_name;
   private List<String> m_include = Lists.newArrayList();
   private List<String> m_exclude = Lists.newArrayList();
diff --git a/src/main/java/org/testng/xml/XmlSuite.java b/src/main/java/org/testng/xml/XmlSuite.java
index 81e2e34b49..b4e3f281af 100755
--- a/src/main/java/org/testng/xml/XmlSuite.java
+++ b/src/main/java/org/testng/xml/XmlSuite.java
@@ -1,6 +1,5 @@
 package org.testng.xml;
 
-import java.io.Serializable;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -23,11 +22,8 @@
 
 /**
  * This class describes the tag &lt;suite&gt; in testng.xml.
- *
- * @author <a href = "mailto:cedric&#64;beust.com">Cedric Beust</a>
- * @author <a href = 'mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>
  */
-public class XmlSuite implements Serializable, Cloneable {
+public class XmlSuite implements Cloneable {
   /** Parallel modes */
   public enum ParallelMode {
     TESTS("tests", false), METHODS("methods"), CLASSES("classes"), INSTANCES("instances"), NONE("none", false),
@@ -187,8 +183,6 @@ public String toString() {
 
   private List<String> m_listeners = Lists.newArrayList();
 
-  private static final long serialVersionUID = 4999962288272750226L;
-
   public static final Boolean DEFAULT_PRESERVE_ORDER = Boolean.TRUE;
   private Boolean m_preserveOrder = DEFAULT_PRESERVE_ORDER;
 
diff --git a/src/main/java/org/testng/xml/XmlTest.java b/src/main/java/org/testng/xml/XmlTest.java
index 9fa2e71e7e..1e1d6e41ee 100755
--- a/src/main/java/org/testng/xml/XmlTest.java
+++ b/src/main/java/org/testng/xml/XmlTest.java
@@ -1,6 +1,5 @@
 package org.testng.xml;
 
-import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -21,8 +20,7 @@
 /**
  * This class describes the tag &lt;test&gt; in testng.xml.
  */
-public class XmlTest implements Serializable, Cloneable {
-  private static final long serialVersionUID = 6533504325942417606L;
+public class XmlTest implements Cloneable {
 
   public static final int DEFAULT_TIMEOUT_MS = Integer.MAX_VALUE;
 
diff --git a/src/test/java/org/testng/internal/MethodInstanceTest.java b/src/test/java/org/testng/internal/MethodInstanceTest.java
index b049c6a2c4..0f5b1c3fbc 100755
--- a/src/test/java/org/testng/internal/MethodInstanceTest.java
+++ b/src/test/java/org/testng/internal/MethodInstanceTest.java
@@ -86,7 +86,7 @@ private MethodInstance buildMethodInstance(String xmlTestName, String xmlClassNa
   }
 
   public static class XmlClassStub extends XmlClass {
-    private static final long serialVersionUID = 1L;
+
     private int index;
     private String name;
 
@@ -112,7 +112,7 @@ public int getIndex() {
   }
 
   public static class XmlTestStub extends XmlTest {
-    private static final long serialVersionUID = 1L;
+
     private String name;
 
     public XmlTestStub(String name) {
@@ -126,7 +126,6 @@ public String getName() {
   }
 
   public static class TestClassStub implements ITestClass {
-    private static final long serialVersionUID = 1L;
 
     private XmlTest xmlTest;
     private XmlClass xmlClass;
@@ -156,9 +155,8 @@ public String getTestName() {
       return null;
     }
 
-    @SuppressWarnings("rawtypes")
     @Override
-    public Class getRealClass() {
+    public Class<?> getRealClass() {
       return null;
     }
 
@@ -240,7 +238,7 @@ public int getInstanceCount() {
   }
 
   public static class TestNGMethodStub implements ITestNGMethod {
-    private static final long serialVersionUID = 1L;
+
     private TestClassStub testClassStub;
     private String methodName;
 
@@ -255,9 +253,8 @@ public ITestNGMethod clone() {
       return (TestNGMethodStub) this;
     }
 
-    @SuppressWarnings("rawtypes")
     @Override
-    public Class getRealClass() {
+    public Class<?> getRealClass() {
       return null;
     }
 
diff --git a/src/test/java/test/junit/SetNameTest.java b/src/test/java/test/junit/SetNameTest.java
index e81690619e..dcca79a619 100755
--- a/src/test/java/test/junit/SetNameTest.java
+++ b/src/test/java/test/junit/SetNameTest.java
@@ -2,11 +2,9 @@
 
 import org.testng.Assert;
 
-import java.io.Serializable;
-
 import junit.framework.TestCase;
 
-public class SetNameTest extends TestCase implements Serializable {
+public class SetNameTest extends TestCase {
   public static int m_ctorCount = 0;
 
   public SetNameTest() {
diff --git a/src/test/java/test/methodselectors/AllTestsMethodSelector.java b/src/test/java/test/methodselectors/AllTestsMethodSelector.java
index fbb1e53b43..bd33657cce 100755
--- a/src/test/java/test/methodselectors/AllTestsMethodSelector.java
+++ b/src/test/java/test/methodselectors/AllTestsMethodSelector.java
@@ -8,11 +8,6 @@
 
 public class AllTestsMethodSelector implements IMethodSelector {
 
-  /**
-   *
-   */
-  private static final long serialVersionUID = 8059117082807260868L;
-
   @Override
   public boolean includeMethod(IMethodSelectorContext context,
       ITestNGMethod method, boolean isTestMethod)
diff --git a/src/test/java/test/methodselectors/NoTest1MethodSelector.java b/src/test/java/test/methodselectors/NoTest1MethodSelector.java
index 14095fd845..0a19d12c42 100755
--- a/src/test/java/test/methodselectors/NoTest1MethodSelector.java
+++ b/src/test/java/test/methodselectors/NoTest1MethodSelector.java
@@ -8,11 +8,6 @@
 
 public class NoTest1MethodSelector implements IMethodSelector {
 
-  /**
-   *
-   */
-  private static final long serialVersionUID = 6706869410370733524L;
-
   @Override
   public boolean includeMethod(IMethodSelectorContext context,
       ITestNGMethod method, boolean isTestMethod)
diff --git a/src/test/java/test/methodselectors/NoTestSelector.java b/src/test/java/test/methodselectors/NoTestSelector.java
index 20ee6532dd..eb4b3b7b79 100755
--- a/src/test/java/test/methodselectors/NoTestSelector.java
+++ b/src/test/java/test/methodselectors/NoTestSelector.java
@@ -8,11 +8,6 @@
 
 public class NoTestSelector implements IMethodSelector {
 
-  /**
-   *
-   */
-  private static final long serialVersionUID = -7751190578710846487L;
-
   @Override
   public boolean includeMethod(IMethodSelectorContext context,
       ITestNGMethod method, boolean isTestMethod)
diff --git a/src/test/java/test/methodselectors/Test2MethodSelector.java b/src/test/java/test/methodselectors/Test2MethodSelector.java
index 3533238171..f076338ae5 100755
--- a/src/test/java/test/methodselectors/Test2MethodSelector.java
+++ b/src/test/java/test/methodselectors/Test2MethodSelector.java
@@ -8,11 +8,6 @@
 
 public class Test2MethodSelector implements IMethodSelector {
 
-  /**
-   *
-   */
-  private static final long serialVersionUID = 4166247968392649912L;
-
   @Override
   public boolean includeMethod(IMethodSelectorContext context,
       ITestNGMethod method, boolean isTestMethod)
diff --git a/src/test/java/test/objectfactory/LoggingObjectFactory.java b/src/test/java/test/objectfactory/LoggingObjectFactory.java
index 6ce07584ae..5ba2cf4001 100755
--- a/src/test/java/test/objectfactory/LoggingObjectFactory.java
+++ b/src/test/java/test/objectfactory/LoggingObjectFactory.java
@@ -6,7 +6,6 @@
 
 public class LoggingObjectFactory extends ObjectFactoryImpl {
 
-  private static final long serialVersionUID = -395096650866727480L;
   public static int invoked;
 
   @Override
