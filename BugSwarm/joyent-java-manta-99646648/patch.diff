diff --git a/checkstyle.xml b/checkstyle.xml
index 9428dce8..8d7e8b5b 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -133,7 +133,10 @@
         <module name="AvoidNestedBlocks"/>
         <module name="EmptyBlock"/>
         <module name="LeftCurly"/>
-        <module name="NeedBraces"/>
+        <module name="NeedBraces">
+            <property name="allowEmptyLoopBody" value="true" />
+        </module>
+
         <module name="RightCurly"/>
 
         <!-- Checks for common coding problems               -->
diff --git a/java-manta-benchmark/pom.xml b/java-manta-benchmark/pom.xml
index a4e8dfa5..a5138d89 100644
--- a/java-manta-benchmark/pom.xml
+++ b/java-manta-benchmark/pom.xml
@@ -63,7 +63,7 @@
                 <configuration>
                     <archive>
                         <manifest>
-                            <mainClass>com.joyent.manta.Benchmark</mainClass>
+                            <mainClass>com.joyent.manta.benchmark.Benchmark</mainClass>
                         </manifest>
                     </archive>
                     <descriptorRefs>
@@ -86,7 +86,7 @@
                 <version>${maven-exec-plugin.version}</version>
                 <configuration>
                     <executable>java</executable>
-                    <mainClass>com.joyent.manta.Benchmark</mainClass>
+                    <mainClass>com.joyent.manta.benchmark.Benchmark</mainClass>
                 </configuration>
             </plugin>
         </plugins>
diff --git a/java-manta-benchmark/src/main/java/com/joyent/manta/Benchmark.java b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/Benchmark.java
similarity index 65%
rename from java-manta-benchmark/src/main/java/com/joyent/manta/Benchmark.java
rename to java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/Benchmark.java
index 064d5488..aa60e055 100644
--- a/java-manta-benchmark/src/main/java/com/joyent/manta/Benchmark.java
+++ b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/Benchmark.java
@@ -1,4 +1,4 @@
-package com.joyent.manta;
+package com.joyent.manta.benchmark;
 
 import com.joyent.manta.client.MantaClient;
 import com.joyent.manta.client.MantaObjectInputStream;
@@ -23,13 +23,58 @@
  *
  * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
  */
-public class Benchmark {
-    private static Logger LOG = LoggerFactory.getLogger(Benchmark.class);
+public final class Benchmark {
+    /**
+     * Logger instance.
+     */
+    private static final Logger LOG = LoggerFactory.getLogger(Benchmark.class);
+
+    /**
+     * Default object size.
+     */
+    private static final int DEFAULT_OBJ_SIZE_KB = 128;
+
+    /**
+     * Default number of iterations.
+     */
+    private static final int DEFAULT_ITERATIONS = 10;
+
+    /**
+     * Number of bytes to skip at one time when looping over streams.
+     */
+    private static final int SKIP_VALUE = 1024;
+
+    /**
+     * Configuration context that informs the Manta client about its settings.
+     */
     private static ConfigContext config;
+
+    /**
+     * Manta client library.
+     */
     private static MantaClient client;
+
+    /**
+     * Unique test run id.
+     */
     private static UUID testRunId = UUID.randomUUID();
+
+    /**
+     * Test directory.
+     */
     private static String testDirectory;
 
+    /**
+     * Use the main method and not the constructor.
+     */
+    private Benchmark() {
+    }
+
+    /**
+     * Entrance to benchmark utility.
+     * @param argv first param is the size of object in kb, second param is the number of iterations
+     * @throws Exception when something goes wrong
+     */
     public static void main(final String[] argv) throws Exception {
         config = new ChainedConfigContext(
                 new DefaultsConfigContext(),
@@ -44,14 +89,14 @@ public static void main(final String[] argv) throws Exception {
             if (argv.length > 0) {
                 sizeInKb = Long.parseLong(argv[0]);
             } else {
-                sizeInKb = 128;
+                sizeInKb = DEFAULT_OBJ_SIZE_KB;
             }
 
             final int iterations;
             if (argv.length > 1) {
                 iterations = Integer.parseInt(argv[1]);
             } else {
-                iterations = 10;
+                iterations = DEFAULT_ITERATIONS;
             }
 
             System.out.printf("Testing latencies on a %d kb object for %d iterations\n",
@@ -87,18 +132,33 @@ public static void main(final String[] argv) throws Exception {
         }
     }
 
+    /**
+     * Creates test directory.
+     *
+     * @throws IOException thrown when we can't access Manta over the network
+     */
     private static void setupTestDirectory() throws IOException {
         client.putDirectory(testDirectory);
     }
 
+    /**
+     * Cleans up the test directory.
+     */
     private static void cleanUp() {
         try {
-//            client.deleteRecursive(testDirectory);
+            client.deleteRecursive(testDirectory);
         } catch (Exception e) {
             LOG.error("Error cleaning up benchmark", e);
         }
     }
 
+    /**
+     * Adds a file (object) for testing.
+     *
+     * @param size size of object to add
+     * @return path to the object added
+     * @throws IOException thrown when we can't access Manta over the network
+     */
     private static String addTestFile(final long size) throws IOException {
         try (InputStream is = new RandomInputStream(size)) {
             String path = String.format("%s/%s.random", testDirectory,
@@ -108,17 +168,25 @@ private static String addTestFile(final long size) throws IOException {
         }
     }
 
+    /**
+     * Measures the total time to get an object from Manta.
+     *
+     * @param path path of the object to measure
+     * @return two durations - full time in the JVM, server time processing
+     * @throws IOException thrown when we can't access Manta over the network
+     */
+    @SuppressWarnings("emptyblock")
     private static Duration[] measureGet(final String path) throws IOException {
         final Instant start = Instant.now();
         final String serverLatencyString;
-                try (MantaObjectInputStream is = client.getAsInputStream(path)) {
-            while (is.skip(1024) != 0);
+        try (MantaObjectInputStream is = client.getAsInputStream(path)) {
+            while (is.skip(SKIP_VALUE) != 0) { }
             serverLatencyString = ((ArrayList<?>)is.getHeader("x-response-time")).get(0).toString();
         }
         final Instant stop = Instant.now();
 
         Duration serverLatency = Duration.ofMillis(Long.parseLong(serverLatencyString));
         Duration fullLatency = Duration.between(start, stop);
-        return new Duration[] { fullLatency, serverLatency };
+        return new Duration[] {fullLatency, serverLatency};
     }
 }
diff --git a/java-manta-benchmark/src/main/java/com/joyent/manta/RandomInputStream.java b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/RandomInputStream.java
similarity index 56%
rename from java-manta-benchmark/src/main/java/com/joyent/manta/RandomInputStream.java
rename to java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/RandomInputStream.java
index 74f254a2..8183701b 100644
--- a/java-manta-benchmark/src/main/java/com/joyent/manta/RandomInputStream.java
+++ b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/RandomInputStream.java
@@ -1,4 +1,4 @@
-package com.joyent.manta;
+package com.joyent.manta.benchmark;
 
 import org.apache.commons.lang3.RandomUtils;
 
@@ -6,14 +6,30 @@
 import java.io.InputStream;
 
 /**
- * @author Elijah Zupancic
- * @since 1.0.0
+ * {@link InputStream} implementation that generates random data.
+ *
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
  */
 public class RandomInputStream extends InputStream {
+    /**
+     * End of file magic number.
+     */
     private static final int EOF = -1;
+
+    /**
+     * Maximum number of bytes to generate.
+     */
     private final long maximumBytes;
+
+    /**
+     * Current generated byte count.
+     */
     private volatile long count;
 
+    /**
+     * Creates a new instance.
+     * @param maximumBytes maximum number of random bytes in stream
+     */
     public RandomInputStream(final long maximumBytes) {
         this.maximumBytes = maximumBytes;
     }
diff --git a/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/package-info.java b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/package-info.java
new file mode 100644
index 00000000..5fccf9db
--- /dev/null
+++ b/java-manta-benchmark/src/main/java/com/joyent/manta/benchmark/package-info.java
@@ -0,0 +1,5 @@
+/**
+ * Package containing classes used for benchmarking the Manta client.
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ */
+package com.joyent.manta.benchmark;
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/HttpRequestFactoryProvider.java b/java-manta-client/src/main/java/com/joyent/manta/client/HttpRequestFactoryProvider.java
index d5cc0595..faaa2d4f 100644
--- a/java-manta-client/src/main/java/com/joyent/manta/client/HttpRequestFactoryProvider.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/HttpRequestFactoryProvider.java
@@ -129,8 +129,6 @@ private HttpClient buildHttpClient() {
         final PlainSocketFactory plainSocketFactory = PlainSocketFactory.getSocketFactory();
         final ProxySelector proxySelector = ProxySelector.getDefault();
 
-
-
         // See http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html
         final SchemeRegistry registry = new SchemeRegistry();
         registry.register(new Scheme("http", HTTP_PORT, plainSocketFactory));
@@ -170,7 +168,7 @@ private HttpClient buildHttpClient() {
     /**
      * Builds a configured instance of {@link HttpRequestFactory}.
      *
-     * @param httpSigner HTTP Signer used to sign Google HTTP requests
+     * @param httpSigner HTTP Signer used to sign Google HTTP requests or null to disable
      * @return configured instance of {@link HttpRequestFactory}
      * @throws IOException thrown when the instance can't be setup properly
      */
@@ -213,7 +211,10 @@ private HttpRequestFactory buildRequestFactory(final HttpSigner httpSigner)
             request.setLoggingEnabled(LOG.isDebugEnabled());
 
             // Sign request
-            httpSigner.signRequest(request);
+            if (httpSigner != null) {
+                httpSigner.signRequest(request);
+            }
+
             // Load request ID into MDC so that it can be logged
             final Object requestId = request.getHeaders().get(X_REQUEST_ID_HEADER);
             if (requestId != null) {
