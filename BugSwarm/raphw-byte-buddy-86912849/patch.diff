diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultTest.java
index a89deb1377..da5d5fdb6b 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultTest.java
@@ -10,12 +10,12 @@
 import net.bytebuddy.test.utility.MockitoRule;
 import net.bytebuddy.test.utility.ObjectPropertyAssertion;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestRule;
 import org.mockito.Mock;
 
+import java.lang.instrument.ClassDefinition;
 import java.lang.instrument.ClassFileTransformer;
 import java.lang.instrument.Instrumentation;
 import java.security.AccessControlContext;
@@ -32,11 +32,9 @@
 
 public class AgentBuilderDefaultTest {
 
-    private static final String FOO = "foo";
-
     private static final byte[] QUX = new byte[]{1, 2, 3}, BAZ = new byte[]{4, 5, 6};
 
-    private static final Class<?> REDEFINED = Object.class;
+    private static final Class<?> REDEFINED = Foo.class;
 
     @Rule
     public TestRule mockitoRule = new MockitoRule(this);
@@ -44,9 +42,6 @@
     @Mock
     private Instrumentation instrumentation;
 
-    @Mock
-    private ClassLoader classLoader;
-
     @Mock
     private ByteBuddy byteBuddy;
 
@@ -56,9 +51,6 @@
     @Mock
     private DynamicType.Unloaded<?> unloaded;
 
-    @Mock
-    private TypeDescription typeDescription;
-
     @Mock
     private LoadedTypeInitializer loadedTypeInitializer;
 
@@ -68,9 +60,6 @@
     @Mock
     private AgentBuilder.Transformer transformer;
 
-    @Mock
-    private ProtectionDomain protectionDomain;
-
     @Mock
     private AgentBuilder.BinaryLocator binaryLocator;
 
@@ -93,26 +82,28 @@
     @SuppressWarnings("unchecked")
     public void setUp() throws Exception {
         when(builder.make()).thenReturn((DynamicType.Unloaded) unloaded);
-        when(unloaded.getTypeDescription()).thenReturn(typeDescription);
+        when(unloaded.getTypeDescription()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
         when(typeStrategy.builder(any(TypeDescription.class),
                 eq(byteBuddy),
                 any(ClassFileLocator.class),
                 any(MethodRebaseResolver.MethodNameTransformer.class))).thenReturn((DynamicType.Builder) builder);
         Map<TypeDescription, LoadedTypeInitializer> loadedTypeInitializers = new HashMap<TypeDescription, LoadedTypeInitializer>();
-        loadedTypeInitializers.put(typeDescription, loadedTypeInitializer);
+        loadedTypeInitializers.put(new TypeDescription.ForLoadedType(REDEFINED), loadedTypeInitializer);
         when(unloaded.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
-        when(transformer.transform(builder, typeDescription)).thenReturn((DynamicType.Builder) builder);
-        when(binaryLocator.initialize(classLoader, FOO, QUX)).thenReturn(initialized);
+        when(unloaded.getBytes()).thenReturn(BAZ);
+        when(transformer.transform(builder, new TypeDescription.ForLoadedType(REDEFINED))).thenReturn((DynamicType.Builder) builder);
+        when(binaryLocator.initialize(REDEFINED.getClassLoader(), REDEFINED.getName(), QUX)).thenReturn(initialized);
         when(initialized.getTypePool()).thenReturn(typePool);
-        when(typePool.describe(FOO)).thenReturn(resolution);
+        when(typePool.describe(REDEFINED.getName())).thenReturn(resolution);
         when(instrumentation.getAllLoadedClasses()).thenReturn(new Class<?>[]{REDEFINED});
     }
 
     @Test
     public void testSuccessful() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(true);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
                 .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
                 .withBinaryLocator(binaryLocator)
@@ -121,9 +112,9 @@ public void testSuccessful() throws Exception {
                 .withoutNativeMethodPrefix()
                 .type(rawMatcher).transform(transformer)
                 .installOn(instrumentation);
-        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), is(BAZ));
-        verify(listener).onTransformation(typeDescription, unloaded);
-        verify(listener).onComplete(FOO);
+        assertThat(classFileTransformer.transform(REDEFINED.getClassLoader(), REDEFINED.getName(), REDEFINED, REDEFINED.getProtectionDomain(), QUX), is(BAZ));
+        verify(listener).onTransformation(new TypeDescription.ForLoadedType(REDEFINED), unloaded);
+        verify(listener).onComplete(REDEFINED.getName());
         verifyNoMoreInteractions(listener);
         verify(instrumentation).addTransformer(classFileTransformer, false);
         verifyNoMoreInteractions(instrumentation);
@@ -132,8 +123,8 @@ public void testSuccessful() throws Exception {
     @Test
     public void testSkipRetransformationWithNonRedefinable() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(true);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain())).thenReturn(true);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(false);
         when(instrumentation.isRetransformClassesSupported()).thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
@@ -157,8 +148,9 @@ public void testSkipRetransformationWithNonRedefinable() throws Exception {
     @Test
     public void testSkipRetransformationWithNonMatched() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(false);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(false);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
         when(instrumentation.isRetransformClassesSupported()).thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
@@ -176,13 +168,13 @@ public void testSkipRetransformationWithNonMatched() throws Exception {
         verify(instrumentation).getAllLoadedClasses();
         verify(instrumentation).isRetransformClassesSupported();
         verifyNoMoreInteractions(instrumentation);
-        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
+        verify(rawMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
         verifyNoMoreInteractions(rawMatcher);
     }
 
     @Test
     public void testSuccessfulWithRetransformationMatched() throws Exception {
-        when(rawMatcher.matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain())).thenReturn(true);
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain())).thenReturn(true);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
         when(instrumentation.isRetransformClassesSupported()).thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
@@ -201,15 +193,29 @@ public void testSuccessfulWithRetransformationMatched() throws Exception {
         verify(instrumentation).retransformClasses(REDEFINED);
         verify(instrumentation).isRetransformClassesSupported();
         verifyNoMoreInteractions(instrumentation);
-        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
+        verify(rawMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
         verifyNoMoreInteractions(rawMatcher);
     }
 
+    @Test(expected = IllegalStateException.class)
+    public void testRetransformationNotSupported() throws Exception {
+        new AgentBuilder.Default(byteBuddy)
+                .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
+                .withRedefinitionStrategy(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)
+                .withBinaryLocator(binaryLocator)
+                .withTypeStrategy(typeStrategy)
+                .withListener(listener)
+                .withoutNativeMethodPrefix()
+                .type(rawMatcher).transform(transformer)
+                .installOn(instrumentation);
+    }
+
     @Test
     public void testSkipRedefinitionWithNonRedefinable() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(true);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(true);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(false);
         when(instrumentation.isRedefineClassesSupported()).thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
@@ -233,8 +239,9 @@ public void testSkipRedefinitionWithNonRedefinable() throws Exception {
     @Test
     public void testSkipRedefinitionWithNonMatched() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(false);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(false);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
         when(instrumentation.isRedefineClassesSupported()).thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
@@ -252,14 +259,14 @@ public void testSkipRedefinitionWithNonMatched() throws Exception {
         verify(instrumentation).getAllLoadedClasses();
         verify(instrumentation).isRedefineClassesSupported();
         verifyNoMoreInteractions(instrumentation);
-        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
+        verify(rawMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
         verifyNoMoreInteractions(rawMatcher);
     }
 
     @Test
-    @Ignore("Throws null pointer because resolution of entry is not mocked")
     public void testSuccessfulWithRedefinitionMatched() throws Exception {
-        when(rawMatcher.matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain())).thenReturn(true);
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(true);
         when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
         when(instrumentation.isRedefineClassesSupported()).thenReturn(true);
         when(binaryLocator.initialize(REDEFINED.getClassLoader())).thenReturn(initialized);
@@ -272,23 +279,39 @@ public void testSuccessfulWithRedefinitionMatched() throws Exception {
                 .withoutNativeMethodPrefix()
                 .type(rawMatcher).transform(transformer)
                 .installOn(instrumentation);
-        verifyZeroInteractions(listener);
+        verify(listener).onTransformation(new TypeDescription.ForLoadedType(REDEFINED), unloaded);
+        verify(listener).onComplete(REDEFINED.getName());
+        verifyNoMoreInteractions(listener);
         verify(instrumentation).addTransformer(classFileTransformer, false);
         verify(instrumentation).getAllLoadedClasses();
         verify(instrumentation).isModifiableClass(REDEFINED);
-        verify(instrumentation).retransformClasses(REDEFINED);
+        verify(instrumentation).redefineClasses(any(ClassDefinition[].class));
         verify(instrumentation).isRedefineClassesSupported();
         verifyNoMoreInteractions(instrumentation);
-        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
+        verify(rawMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
         verifyNoMoreInteractions(rawMatcher);
     }
 
+    @Test(expected = IllegalStateException.class)
+    public void testRedefinitionNotSupported() throws Exception {
+        new AgentBuilder.Default(byteBuddy)
+                .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
+                .withRedefinitionStrategy(AgentBuilder.RedefinitionStrategy.REDEFINITION)
+                .withBinaryLocator(binaryLocator)
+                .withTypeStrategy(typeStrategy)
+                .withListener(listener)
+                .withoutNativeMethodPrefix()
+                .type(rawMatcher).transform(transformer)
+                .installOn(instrumentation);
+    }
+
     @Test
     public void testWithError() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
         RuntimeException exception = mock(RuntimeException.class);
         when(resolution.resolve()).thenThrow(exception);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(true);
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(true);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
                 .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
                 .withBinaryLocator(binaryLocator)
@@ -297,9 +320,10 @@ public void testWithError() throws Exception {
                 .withoutNativeMethodPrefix()
                 .type(rawMatcher).transform(transformer)
                 .installOn(instrumentation);
-        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
-        verify(listener).onError(FOO, exception);
-        verify(listener).onComplete(FOO);
+        assertThat(classFileTransformer.transform(REDEFINED.getClassLoader(), REDEFINED.getName(), REDEFINED, REDEFINED.getProtectionDomain(), QUX),
+                nullValue(byte[].class));
+        verify(listener).onError(REDEFINED.getName(), exception);
+        verify(listener).onComplete(REDEFINED.getName());
         verifyNoMoreInteractions(listener);
         verify(instrumentation).addTransformer(classFileTransformer, false);
         verifyNoMoreInteractions(instrumentation);
@@ -308,8 +332,9 @@ public void testWithError() throws Exception {
     @Test
     public void testIgnored() throws Exception {
         when(unloaded.getBytes()).thenReturn(BAZ);
-        when(resolution.resolve()).thenReturn(typeDescription);
-        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(false);
+        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
+        when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain()))
+                .thenReturn(false);
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
                 .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
                 .withBinaryLocator(binaryLocator)
@@ -318,9 +343,10 @@ public void testIgnored() throws Exception {
                 .withoutNativeMethodPrefix()
                 .type(rawMatcher).transform(transformer)
                 .installOn(instrumentation);
-        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
-        verify(listener).onIgnored(typeDescription);
-        verify(listener).onComplete(FOO);
+        assertThat(classFileTransformer.transform(REDEFINED.getClassLoader(), REDEFINED.getName(), REDEFINED, REDEFINED.getProtectionDomain(), QUX),
+                nullValue(byte[].class));
+        verify(listener).onIgnored(new TypeDescription.ForLoadedType(REDEFINED));
+        verify(listener).onComplete(REDEFINED.getName());
         verifyNoMoreInteractions(listener);
         verify(instrumentation).addTransformer(classFileTransformer, false);
         verifyNoMoreInteractions(instrumentation);
@@ -361,4 +387,8 @@ public AccessControlContext create() {
             }
         }).apply();
     }
+
+    public static class Foo {
+
+    }
 }
diff --git a/checkstyle.xml b/checkstyle.xml
index 3366260055..b039d58dca 100755
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -22,7 +22,7 @@
     <module name="TreeWalker">
 
         <!-- Manual only. Checkstyle bug disallows @return in annotation methods: https://groups.google.com/forum/#!topic/checkstyle/VEVFDsZKLzg -->
-        <module name="JavadocMethod"/>
+        <!--<module name="JavadocMethod"/>-->
         <module name="JavadocType"/>
         <module name="JavadocVariable"/>
         <module name="JavadocStyle"/>
