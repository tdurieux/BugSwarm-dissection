diff --git a/src/main/java/org/kairosdb/core/datastore/Datastore.java b/src/main/java/org/kairosdb/core/datastore/Datastore.java
index b8bcdba53c..2f82256b35 100755
--- a/src/main/java/org/kairosdb/core/datastore/Datastore.java
+++ b/src/main/java/org/kairosdb/core/datastore/Datastore.java
@@ -25,16 +25,4 @@
 	void deleteDataPoints(DatastoreMetricQuery deleteQuery) throws DatastoreException;
 
 	TagSet queryMetricTags(DatastoreMetricQuery query) throws DatastoreException;
-
-	void setValue(String service, String serviceKey, String key, String value) throws DatastoreException;
-
-	String getValue(String service, String serviceKey, String key) throws DatastoreException;
-
-	Iterable<String> listServiceKeys(String service) throws DatastoreException;
-
-	Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException;
-
-	Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException;
-
-    void deleteKey(String service, String serviceKey, String key) throws DatastoreException;
 }
diff --git a/src/main/java/org/kairosdb/core/datastore/ServiceKeyStore.java b/src/main/java/org/kairosdb/core/datastore/ServiceKeyStore.java
new file mode 100755
index 0000000000..0c22e56d35
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/datastore/ServiceKeyStore.java
@@ -0,0 +1,21 @@
+package org.kairosdb.core.datastore;
+
+import org.kairosdb.core.exception.DatastoreException;
+
+/**
+ Created by bhawkins on 4/29/17.
+ */
+public interface ServiceKeyStore
+{
+	void setValue(String service, String serviceKey, String key, String value) throws DatastoreException;
+
+	String getValue(String service, String serviceKey, String key) throws DatastoreException;
+
+	Iterable<String> listServiceKeys(String service) throws DatastoreException;
+
+	Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException;
+
+	Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException;
+
+	void deleteKey(String service, String serviceKey, String key) throws DatastoreException;
+}
diff --git a/src/main/java/org/kairosdb/core/http/rest/MetadataResource.java b/src/main/java/org/kairosdb/core/http/rest/MetadataResource.java
index 289bc1f18e..33d3b42238 100755
--- a/src/main/java/org/kairosdb/core/http/rest/MetadataResource.java
+++ b/src/main/java/org/kairosdb/core/http/rest/MetadataResource.java
@@ -2,7 +2,7 @@
 
 import com.google.inject.Inject;
 import org.h2.util.StringUtils;
-import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.ServiceKeyStore;
 import org.kairosdb.core.formatter.JsonFormatter;
 import org.kairosdb.core.http.rest.MetricsResource.ValuesStreamingOutput;
 import org.kairosdb.core.http.rest.json.ErrorResponse;
@@ -27,154 +27,164 @@
 @Path("/api/v1/metadata")
 public class MetadataResource
 {
-    private static final Logger logger = LoggerFactory.getLogger(MetadataResource.class);
+	private static final Logger logger = LoggerFactory.getLogger(MetadataResource.class);
 
-    private final Datastore datastore;
-    private final JsonFormatter jsonFormatter = new JsonFormatter();
+	private final ServiceKeyStore m_keyStore;
+	private final JsonFormatter jsonFormatter = new JsonFormatter();
 
-    @SuppressWarnings("ConstantConditions")
-    @Inject
-    public MetadataResource(Datastore datastore)
-    {
-        this.datastore = checkNotNull(datastore, "datastore cannot be null");
-    }
+	@SuppressWarnings("ConstantConditions")
+	@Inject
+	public MetadataResource(ServiceKeyStore keyStore)
+	{
+		this.m_keyStore = checkNotNull(keyStore, "m_keyStore cannot be null");
+	}
 
-    @GET
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/{service}")
-    public Response listServiceKeys(@PathParam("service") String service)
-    {
-        try {
-            checkLocalService(service);
-            Iterable<String> keys = datastore.listServiceKeys(service);
-            ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
-                    new ValuesStreamingOutput(jsonFormatter, keys));
-            setHeaders(responseBuilder);
-            return responseBuilder.build();
-        }
-        catch(NotAuthorizedException e)
-        {
-            logger.error("Attempt to access a local service.");
-            return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
-        }
-        catch (Exception e) {
-            logger.error("Failed to get keys.", e);
-            return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
-        }
-    }
+	@GET
+	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+	@Path("/{service}")
+	public Response listServiceKeys(@PathParam("service") String service)
+	{
+		try
+		{
+			checkLocalService(service);
+			Iterable<String> keys = m_keyStore.listServiceKeys(service);
+			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
+					new ValuesStreamingOutput(jsonFormatter, keys));
+			setHeaders(responseBuilder);
+			return responseBuilder.build();
+		}
+		catch (NotAuthorizedException e)
+		{
+			logger.error("Attempt to access a local service.");
+			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
+		}
+		catch (Exception e)
+		{
+			logger.error("Failed to get keys.", e);
+			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
+		}
+	}
 
-    @GET
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/{service}/{serviceKey}")
-    public Response listKeys(@PathParam("service") String service,
-            @PathParam("serviceKey") String serviceKey, @QueryParam("startsWidth") String startsWidth)
-    {
-        try {
-            checkLocalService(service);
-            Iterable<String> keys;
-            keys = StringUtils.isNullOrEmpty(startsWidth) ?
-                    datastore.listKeys(service, serviceKey) :
-                    datastore.listKeys(service, serviceKey, startsWidth);
+	@GET
+	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+	@Path("/{service}/{serviceKey}")
+	public Response listKeys(@PathParam("service") String service,
+			@PathParam("serviceKey") String serviceKey, @QueryParam("startsWith") String startsWidth)
+	{
+		try
+		{
+			checkLocalService(service);
+			Iterable<String> keys;
+			keys = StringUtils.isNullOrEmpty(startsWidth) ?
+					m_keyStore.listKeys(service, serviceKey) :
+					m_keyStore.listKeys(service, serviceKey, startsWidth);
 
-            ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
-                    new ValuesStreamingOutput(jsonFormatter, keys));
-            setHeaders(responseBuilder);
-            return responseBuilder.build();
-        }
-        catch(NotAuthorizedException e)
-        {
-            logger.error("Attempt to access a local service.");
-            return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
-        }
-        catch (Exception e) {
-            logger.error("Failed to get keys.", e);
-            return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
-        }
-    }
+			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
+					new ValuesStreamingOutput(jsonFormatter, keys));
+			setHeaders(responseBuilder);
+			return responseBuilder.build();
+		}
+		catch (NotAuthorizedException e)
+		{
+			logger.error("Attempt to access a local service.");
+			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
+		}
+		catch (Exception e)
+		{
+			logger.error("Failed to get keys.", e);
+			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
+		}
+	}
 
-    @GET
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/{service}/{serviceKey}/{key}")
-    public Response getValue(@PathParam("service") String service, @PathParam("serviceKey")
-            String serviceKey, @PathParam("key") String key)
-    {
-        try {
-            checkLocalService(service);
-            String value = datastore.getValue(service, serviceKey, key);
-            ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(value);
-            setHeaders(responseBuilder);
-            return responseBuilder.build();
-        }
-        catch(NotAuthorizedException e)
-        {
-            logger.error("Attempt to access a local service.");
-            return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
-        }
-        catch (Exception e) {
-            logger.error("Failed to retrieve value.", e);
-            return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
-        }
-    }
+	@GET
+	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+	@Path("/{service}/{serviceKey}/{key}")
+	public Response getValue(@PathParam("service") String service, @PathParam("serviceKey")
+			String serviceKey, @PathParam("key") String key)
+	{
+		try
+		{
+			checkLocalService(service);
+			String value = m_keyStore.getValue(service, serviceKey, key);
+			ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(value);
+			setHeaders(responseBuilder);
+			return responseBuilder.build();
+		}
+		catch (NotAuthorizedException e)
+		{
+			logger.error("Attempt to access a local service.");
+			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
+		}
+		catch (Exception e)
+		{
+			logger.error("Failed to retrieve value.", e);
+			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
+		}
+	}
 
-    @POST
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/{service}/{serviceKey}/{key}")
-    public Response setValue(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
-            @PathParam("key") String key, String value)
-    {
-        try {
-            checkLocalService(service);
-            datastore.setValue(service, serviceKey, key, value);
-            return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
-        }
-        catch(NotAuthorizedException e)
-        {
-            logger.error("Attempt to access a local service.");
-            return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
-        }
-        catch (Exception e) {
-            logger.error("Failed to add value.", e);
-            return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
-        }
-    }
+	@POST
+	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+	@Path("/{service}/{serviceKey}/{key}")
+	public Response setValue(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
+			@PathParam("key") String key, String value)
+	{
+		try
+		{
+			checkLocalService(service);
+			m_keyStore.setValue(service, serviceKey, key, value);
+			return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
+		}
+		catch (NotAuthorizedException e)
+		{
+			logger.error("Attempt to access a local service.");
+			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
+		}
+		catch (Exception e)
+		{
+			logger.error("Failed to add value.", e);
+			return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
+		}
+	}
 
-    @DELETE
-    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
-    @Path("/{service}/{serviceKey}/{key}")
-    public Response deleteKey(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
-            @PathParam("key") String key)
-    {
-        try {
-            checkLocalService(service);
-            datastore.deleteKey(service, serviceKey, key);
-            return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
-        }
-        catch(NotAuthorizedException e)
-        {
-            logger.error("Attempt to access a local service.");
-            return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
-        }
-        catch (Exception e) {
-            logger.error("Failed to delete key.", e);
-            return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
-        }
-    }
+	@DELETE
+	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
+	@Path("/{service}/{serviceKey}/{key}")
+	public Response deleteKey(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
+			@PathParam("key") String key)
+	{
+		try
+		{
+			checkLocalService(service);
+			m_keyStore.deleteKey(service, serviceKey, key);
+			return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
+		}
+		catch (NotAuthorizedException e)
+		{
+			logger.error("Attempt to access a local service.");
+			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
+		}
+		catch (Exception e)
+		{
+			logger.error("Failed to delete key.", e);
+			return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
+		}
+	}
 
-    private void checkLocalService(String service)
-            throws NotAuthorizedException
-    {
-        if (service.startsWith("_"))
-        {
-            throw new NotAuthorizedException("Attempt to access an unauthorized service");
-        }
-    }
+	private void checkLocalService(String service)
+			throws NotAuthorizedException
+	{
+		if (service.startsWith("_"))
+		{
+			throw new NotAuthorizedException("Attempt to access an unauthorized service");
+		}
+	}
 
-    private class NotAuthorizedException extends Exception
-    {
+	private class NotAuthorizedException extends Exception
+	{
 
-        NotAuthorizedException(String message)
-        {
-            super(message);
-        }
-    }
+		NotAuthorizedException(String message)
+		{
+			super(message);
+		}
+	}
 }
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java b/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
index 695c9df9b7..13fa4a1b4a 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
@@ -43,19 +43,19 @@
 	private final boolean m_fullBatch;
 	private final ConsistencyLevel m_consistencyLevel;
 	private final Session m_session;
-	private final CassandraDatastore.PreparedStatements m_preparedStatements;
+	private final Schema m_schema;
 	private final BatchStats m_batchStats;
 	private final LoadBalancingPolicy m_loadBalancingPolicy;
 
 	public BatchHandler(List<DataPointEvent> events, EventCompletionCallBack callBack,
 			int defaultTtl, ConsistencyLevel consistencyLevel, DataCache<DataPointsRowKey>
 			rowKeyCache, DataCache<String> metricNameCache, EventBus eventBus,
-			Session session, CassandraDatastore.PreparedStatements preparedStatements,
+			Session session, Schema schema,
 			boolean fullBatch, BatchStats batchStats, LoadBalancingPolicy loadBalancingPolicy)
 	{
 		m_consistencyLevel = consistencyLevel;
 		m_session = session;
-		m_preparedStatements = preparedStatements;
+		m_schema = schema;
 		m_batchStats = batchStats;
 		m_loadBalancingPolicy = loadBalancingPolicy;
 
@@ -156,7 +156,7 @@ public Boolean call() throws Exception
 
 				while (events.hasNext())
 				{
-					CQLBatch batch = new CQLBatch(m_consistencyLevel, m_session, m_preparedStatements,
+					CQLBatch batch = new CQLBatch(m_consistencyLevel, m_session, m_schema,
 							m_batchStats, m_loadBalancingPolicy);
 
 					loadBatch(limit, batch, events);
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java b/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java
index 5c5859366f..7bd1cf2a12 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/CQLBatch.java
@@ -2,10 +2,7 @@
 
 import com.datastax.driver.core.*;
 import com.datastax.driver.core.policies.LoadBalancingPolicy;
-import com.google.common.eventbus.EventBus;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.queue.EventCompletionCallBack;
-import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.KDataOutput;
 
 import java.io.IOException;
@@ -24,7 +21,7 @@
 	private static final Charset UTF_8 = Charset.forName("UTF-8");
 
 	private final Session m_session;
-	private final CassandraDatastore.PreparedStatements m_preparedStatements;
+	private final Schema m_schema;
 	private final BatchStats m_batchStats;
 	private final ConsistencyLevel m_consistencyLevel;
 	private final long m_now;
@@ -38,12 +35,12 @@
 
 	public CQLBatch(
 			ConsistencyLevel consistencyLevel, Session session,
-			CassandraDatastore.PreparedStatements preparedStatements, BatchStats batchStats,
+			Schema schema, BatchStats batchStats,
 			LoadBalancingPolicy loadBalancingPolicy)
 	{
 		m_consistencyLevel = consistencyLevel;
 		m_session = session;
-		m_preparedStatements = preparedStatements;
+		m_schema = schema;
 		m_batchStats = batchStats;
 		m_now = System.currentTimeMillis();
 		m_loadBalancingPolicy = loadBalancingPolicy;
@@ -54,7 +51,7 @@ public void addRowKey(String metricName, DataPointsRowKey rowKey, int rowKeyTtl)
 		ByteBuffer bb = ByteBuffer.allocate(8);
 		bb.putLong(0, rowKey.getTimestamp());
 
-		BoundStatement bs = m_preparedStatements.psRowKeyTimeInsert.bind()
+		BoundStatement bs = m_schema.psRowKeyTimeInsert.bind()
 				.setString(0, metricName)
 				.setTimestamp(1, new Date(rowKey.getTimestamp()))
 				//.setBytesUnsafe(1, bb) //Setting timestamp in a more optimal way
@@ -65,7 +62,7 @@ public void addRowKey(String metricName, DataPointsRowKey rowKey, int rowKeyTtl)
 
 		rowKeyBatch.add(bs);
 
-		bs = m_preparedStatements.psRowKeyInsert.bind()
+		bs = m_schema.psRowKeyInsert.bind()
 				.setString(0, metricName)
 				.setTimestamp(1, new Date(rowKey.getTimestamp()))
 				//.setBytesUnsafe(1, bb)  //Setting timestamp in a more optimal way
@@ -81,7 +78,7 @@ public void addRowKey(String metricName, DataPointsRowKey rowKey, int rowKeyTtl)
 
 	public void addMetricName(String metricName)
 	{
-		BoundStatement bs = new BoundStatement(m_preparedStatements.psStringIndexInsert);
+		BoundStatement bs = new BoundStatement(m_schema.psStringIndexInsert);
 		bs.setBytesUnsafe(0, ByteBuffer.wrap(ROW_KEY_METRIC_NAMES.getBytes(UTF_8)));
 		bs.setBytesUnsafe(1, ByteBuffer.wrap(metricName.getBytes(UTF_8)));
 		bs.setConsistencyLevel(m_consistencyLevel);
@@ -93,7 +90,7 @@ public void addDataPoint(DataPointsRowKey rowKey, int columnTime, DataPoint data
 		KDataOutput kDataOutput = new KDataOutput();
 		dataPoint.writeValueToBuffer(kDataOutput);
 
-		BoundStatement boundStatement = new BoundStatement(m_preparedStatements.psDataPointsInsert);
+		BoundStatement boundStatement = new BoundStatement(m_schema.psDataPointsInsert);
 		boundStatement.setBytesUnsafe(0, DATA_POINTS_ROW_KEY_SERIALIZER.toByteBuffer(rowKey));
 		ByteBuffer b = ByteBuffer.allocate(4);
 		b.putInt(columnTime);
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
index cd0841fcd4..e0e136631b 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
@@ -16,7 +16,6 @@
 package org.kairosdb.datastore.cassandra;
 
 import com.datastax.driver.core.BoundStatement;
-import com.datastax.driver.core.PreparedStatement;
 import com.datastax.driver.core.ResultSet;
 import com.datastax.driver.core.ResultSetFuture;
 import com.datastax.driver.core.Row;
@@ -37,14 +36,7 @@
 import org.kairosdb.core.datapoints.LegacyDataPointFactory;
 import org.kairosdb.core.datapoints.LegacyDoubleDataPoint;
 import org.kairosdb.core.datapoints.LegacyLongDataPoint;
-import org.kairosdb.core.datastore.DataPointRow;
-import org.kairosdb.core.datastore.Datastore;
-import org.kairosdb.core.datastore.DatastoreMetricQuery;
-import org.kairosdb.core.datastore.Order;
-import org.kairosdb.core.datastore.QueryCallback;
-import org.kairosdb.core.datastore.QueryPlugin;
-import org.kairosdb.core.datastore.TagSet;
-import org.kairosdb.core.datastore.TagSetImpl;
+import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.queue.EventCompletionCallBack;
 import org.kairosdb.core.queue.ProcessorHandler;
@@ -78,119 +70,11 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-public class CassandraDatastore implements Datastore, ProcessorHandler, KairosMetricReporter
+public class CassandraDatastore implements Datastore, ProcessorHandler, KairosMetricReporter,
+		ServiceKeyStore
 {
 	public static final Logger logger = LoggerFactory.getLogger(CassandraDatastore.class);
 
-
-	public static final String CREATE_KEYSPACE = "" +
-			"CREATE KEYSPACE IF NOT EXISTS %s" +
-			"  WITH REPLICATION = {'class': 'SimpleStrategy'," +
-			"  'replication_factor' : 1}";
-
-	public static final String DATA_POINTS_TABLE = "" +
-			"CREATE TABLE IF NOT EXISTS data_points (\n" +
-			"  key blob,\n" +
-			"  column1 blob,\n" +
-			"  value blob,\n" +
-			"  PRIMARY KEY ((key), column1)\n" +
-			") WITH COMPACT STORAGE";
-
-	public static final String ROW_KEY_INDEX_TABLE = "" +
-			"CREATE TABLE IF NOT EXISTS row_key_index (\n" +
-			"  key blob,\n" +
-			"  column1 blob,\n" +
-			"  value blob,\n" +
-			"  PRIMARY KEY ((key), column1)\n" +
-			") WITH COMPACT STORAGE";
-
-	public static final String ROW_KEY_TIME_INDEX = "" +
-			"CREATE TABLE IF NOT EXISTS row_key_time_index (\n" +
-			"  metric text,\n" +
-			"  row_time timestamp,\n" +
-			"  value text,\n" +
-			"  PRIMARY KEY ((metric), row_time)\n" +
-			")";
-
-	public static final String ROW_KEYS = "" +
-			"CREATE TABLE IF NOT EXISTS row_keys (\n" +
-			"  metric text,\n" +
-			"  row_time timestamp,\n" +
-			"  data_type text,\n" +
-			"  tags frozen<map<text, text>>,\n" +
-			"  value text,\n" +
-			"  PRIMARY KEY ((metric, row_time), data_type, tags)\n" +
-			")";
-
-	public static final String STRING_INDEX_TABLE = "" +
-			"CREATE TABLE IF NOT EXISTS string_index (\n" +
-			"  key blob,\n" +
-			"  column1 blob,\n" +
-			"  value blob,\n" +
-			"  PRIMARY KEY ((key), column1)\n" +
-			") WITH COMPACT STORAGE";
-
-	public static final String SERVICE_INDEX = "" +
-			"CREATE TABLE IF NOT EXISTS service_index (" +
-			" service text," +
-			" service_key text," +
-			" key text," +
-			" value text," +
-			" PRIMARY KEY ((service, service_key), key)" +
-			")";
-
-	//All inserts and deletes add millisecond timestamp consistency with old code and TWCS instead of nanos
-	public static final String DATA_POINTS_INSERT = "INSERT INTO data_points " +
-			"(key, column1, value) VALUES (?, ?, ?) USING TTL ? AND TIMESTAMP ?";
-
-	public static final String ROW_KEY_TIME_INSERT = "INSERT INTO row_key_time_index " +
-			"(metric, row_time) VALUES (?, ?) USING TTL ? AND TIMESTAMP ?";
-
-	public static final String ROW_KEY_INSERT = "INSERT INTO row_keys " +
-			"(metric, row_time, data_type, tags) VALUES (?, ?, ?, ?) USING TTL ?"; // AND TIMESTAMP ?";
-
-	public static final String STRING_INDEX_INSERT = "INSERT INTO string_index " +
-			"(key, column1, value) VALUES (?, ?, 0x00)";
-
-	public static final String DATA_POINTS_QUERY = "SELECT column1, value FROM data_points WHERE key = ? AND " +
-			"column1 >= ? AND column1 < ? ORDER BY column1";
-
-	public static final String DATA_POINTS_QUERY_ASC = DATA_POINTS_QUERY+" ASC";
-	public static final String DATA_POINTS_QUERY_DESC = DATA_POINTS_QUERY+" DESC";
-
-	public static final String DATA_POINTS_QUERY_ASC_LIMIT = DATA_POINTS_QUERY_ASC+" LIMIT ?";
-	public static final String DATA_POINTS_QUERY_DESC_LIMIT = DATA_POINTS_QUERY_DESC+" LIMIT ?";
-
-	public static final String DATA_POINTS_DELETE = "DELETE FROM data_points " +
-			"WHERE key = ? AND column1 = ?";
-
-	public static final String DATA_POINTS_DELETE_ROW = "DELETE FROM data_points " +
-			"WHERE key = ?";
-
-	public static final String STRING_INDEX_QUERY = "SELECT column1 FROM string_index " +
-			"WHERE key = ?";
-
-	//This is the old row key index query
-	public static final String ROW_KEY_INDEX_QUERY = "SELECT column1 FROM row_key_index " +
-			"WHERE key = ? AND column1 >= ? AND column1 < ?";
-
-	public static final String ROW_KEY_INDEX_DELETE = "DELETE FROM row_key_index " +
-			"WHERE KEY = ? AND column1 = ?";
-
-	public static final String ROW_KEY_INDEX_DELETE_ROW = "DELETE FROM row_key_index " +
-			"WHERE KEY = ?";
-
-	//New Row key queries
-	public static final String ROW_KEY_TIME_QUERY = "SELECT row_time " +
-			"FROM row_key_time_index WHERE metric = ? AND " +
-			"row_time >= ? AND row_time <= ?";
-
-	public static final String ROW_KEY_QUERY = "SELECT row_time, data_type, tags " +
-			"FROM row_keys WHERE metric = ? AND row_time = ?";
-
-	public static final String ROW_KEY_TAG_QUERY_WITH_TYPE = "SELECT row_time, data_type, tags " +
-			"FROM row_keys WHERE metric = ? AND row_time = ? AND data_type IN %s"; //Use ValueSequence when setting this
-
 	public static final int LONG_FLAG = 0x0;
 	public static final int FLOAT_FLAG = 0x1;
 
@@ -217,55 +101,11 @@
 	//private final AstyanaxClient m_astyanaxClient;
 
 
-	private final PreparedStatements m_preparedStatements;
+	private final Schema m_schema;
 	private Session m_session;
 	private LoadBalancingPolicy m_loadBalancingPolicy;
 
 
-	public class PreparedStatements
-	{
-		public final PreparedStatement psDataPointsInsert;
-		//public final PreparedStatement m_psInsertRowKey;
-		public final PreparedStatement psStringIndexInsert;
-		public final PreparedStatement psDataPointsQueryAsc;
-		public final PreparedStatement psStringIndexQuery;
-		public final PreparedStatement psRowKeyIndexQuery;
-		public final PreparedStatement psRowKeyQuery;
-		public final PreparedStatement psRowKeyTimeQuery;
-		public final PreparedStatement psDataPointsDeleteRow;
-		public final PreparedStatement psDataPointsDelete;
-		public final PreparedStatement psRowKeyIndexDelete;
-		public final PreparedStatement psRowKeyIndexDeleteRow;
-		public final PreparedStatement psDataPointsQueryDesc;
-		public final PreparedStatement psRowKeyTimeInsert;
-		public final PreparedStatement psRowKeyInsert;
-		public final PreparedStatement psDataPointsQueryAscLimit;
-		public final PreparedStatement psDataPointsQueryDescLimit;
-
-		public PreparedStatements()
-		{
-			psDataPointsInsert  = m_session.prepare(DATA_POINTS_INSERT);
-			//m_psInsertRowKey      = m_session.prepare(ROW_KEY_INDEX_INSERT);
-			psRowKeyTimeInsert = m_session.prepare(ROW_KEY_TIME_INSERT);
-			psRowKeyInsert = m_session.prepare(ROW_KEY_INSERT);
-			psStringIndexInsert = m_session.prepare(STRING_INDEX_INSERT);
-			psDataPointsQueryAsc = m_session.prepare(DATA_POINTS_QUERY_ASC);
-			psDataPointsQueryDesc = m_session.prepare(DATA_POINTS_QUERY_DESC);
-			psDataPointsQueryAscLimit = m_session.prepare(DATA_POINTS_QUERY_ASC_LIMIT);
-			psDataPointsQueryDescLimit = m_session.prepare(DATA_POINTS_QUERY_DESC_LIMIT);
-			psStringIndexQuery = m_session.prepare(STRING_INDEX_QUERY);
-			psRowKeyIndexQuery  = m_session.prepare(ROW_KEY_INDEX_QUERY);
-			psRowKeyQuery       = m_session.prepare(ROW_KEY_QUERY);
-			psRowKeyTimeQuery   = m_session.prepare(ROW_KEY_TIME_QUERY);
-			psDataPointsDelete = m_session.prepare(DATA_POINTS_DELETE);
-			psDataPointsDeleteRow = m_session.prepare(DATA_POINTS_DELETE_ROW);
-			psRowKeyIndexDelete = m_session.prepare(ROW_KEY_INDEX_DELETE);
-			psRowKeyIndexDeleteRow = m_session.prepare(ROW_KEY_INDEX_DELETE_ROW);
-		}
-	}
-
-
-
 	private final BatchStats m_batchStats = new BatchStats();
 
 	private DataCache<DataPointsRowKey> m_rowKeyCache = new DataCache<DataPointsRowKey>(1024);
@@ -297,12 +137,10 @@ public CassandraDatastore(@Named("HOSTNAME") final String hostname,
 		m_congestionExecutor = congestionExecutor;
 		m_eventBus = eventBus;
 
-		setupSchema();
+		m_schema = new Schema(m_cassandraClient);
+		m_session = m_schema.getSession();
 
-		m_session = m_cassandraClient.getKeyspaceSession();
 		m_loadBalancingPolicy = m_cassandraClient.getLoadBalancingPolicy();
-		//Prepare queries
-		m_preparedStatements = new PreparedStatements();
 
 		m_cassandraConfiguration = cassandraConfiguration;
 
@@ -318,24 +156,6 @@ private static ByteBuffer serializeString(String str)
 		return ByteBuffer.wrap(str.getBytes(UTF_8));
 	}
 
-	private void setupSchema()
-	{
-		try (Session session = m_cassandraClient.getSession())
-		{
-			session.execute(String.format(CREATE_KEYSPACE, m_cassandraClient.getKeyspace()));
-		}
-
-		try (Session session = m_cassandraClient.getKeyspaceSession())
-		{
-			session.execute(DATA_POINTS_TABLE);
-			session.execute(ROW_KEY_INDEX_TABLE);
-			session.execute(STRING_INDEX_TABLE);
-			session.execute(ROW_KEYS);
-			session.execute(ROW_KEY_TIME_INDEX);
-			session.execute(SERVICE_INDEX);
-		}
-	}
-
 
 	public void cleanRowKeyCache()
 	{
@@ -378,7 +198,7 @@ public void handleEvents(List<DataPointEvent> events, EventCompletionCallBack ev
 				m_cassandraConfiguration.getDatapointTtl(),
 				m_cassandraConfiguration.getDataWriteLevel(),
 				m_rowKeyCache, m_metricNameCache, m_eventBus, m_session,
-				m_preparedStatements, fullBatch, m_batchStats, m_loadBalancingPolicy);
+				m_schema, fullBatch, m_batchStats, m_loadBalancingPolicy);
 
 		m_congestionExecutor.submit(batchHandler);
 	}
@@ -386,7 +206,7 @@ public void handleEvents(List<DataPointEvent> events, EventCompletionCallBack ev
 
 	private Iterable<String> queryStringIndex(final String key)
 	{
-		BoundStatement boundStatement = new BoundStatement(m_preparedStatements.psStringIndexQuery);
+		BoundStatement boundStatement = new BoundStatement(m_schema.psStringIndexQuery);
 		boundStatement.setBytesUnsafe(0, serializeString(key));
 		boundStatement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
 
@@ -444,39 +264,103 @@ public TagSet queryMetricTags(DatastoreMetricQuery query) throws DatastoreExcept
 	@Override
 	public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
 	{
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexInsert);
+		statement.setString(0, service);
+		statement.setString(1, serviceKey);
+		statement.setString(2, key);
+		statement.setString(3, value);
 
+		m_session.execute(statement);
 	}
 
 	@Override
 	public String getValue(String service, String serviceKey, String key) throws DatastoreException
 	{
-		return null;
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexGet);
+		statement.setString(0, service);
+		statement.setString(1, serviceKey);
+		statement.setString(2, key);
+
+		ResultSet resultSet = m_session.execute(statement);
+		Row row = resultSet.one();
+
+		String value = null;
+		if (row != null)
+			value = row.getString(0);
+
+		return value;
 	}
 
-    @Override
-    public Iterable<String> listServiceKeys(String service)
-            throws DatastoreException
-    {
-        return null;
-    }
+	@Override
+	public Iterable<String> listServiceKeys(String service)
+			throws DatastoreException
+	{
+		List<String> ret = new ArrayList<>();
+
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListServiceKeys);
+		statement.setString(0, service);
+
+		ResultSet resultSet = m_session.execute(statement);
+		while (!resultSet.isExhausted())
+		{
+			ret.add(resultSet.one().getString(0));
+		}
+
+		return ret;
+	}
 
     @Override
 	public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
 	{
-		return null;
+		List<String> ret = new ArrayList<>();
+
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListKeys);
+		statement.setString(0, service);
+		statement.setString(1, serviceKey);
+
+		ResultSet resultSet = m_session.execute(statement);
+		while (!resultSet.isExhausted())
+		{
+			ret.add(resultSet.one().getString(0));
+		}
+
+		return ret;
 	}
 
 	@Override
 	public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
 	{
-		return null;
+		String begin = keyStartsWith;
+		String end = keyStartsWith + Character.MAX_VALUE;
+
+		List<String> ret = new ArrayList<>();
+
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListKeysPrefix);
+		statement.setString(0, service);
+		statement.setString(1, serviceKey);
+		statement.setString(2, begin);
+		statement.setString(3, end);
+
+		ResultSet resultSet = m_session.execute(statement);
+		while (!resultSet.isExhausted())
+		{
+			ret.add(resultSet.one().getString(0));
+		}
+
+		return ret;
 	}
 
-    @Override
-    public void deleteKey(String service, String serviceKey, String key)
-            throws DatastoreException
-    {
-    }
+	@Override
+	public void deleteKey(String service, String serviceKey, String key)
+			throws DatastoreException
+	{
+		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexDeleteKey);
+		statement.setString(0, service);
+		statement.setString(1, serviceKey);
+		statement.setString(2, key);
+
+		m_session.execute(statement);
+	}
 
     @Override
 	public void queryDatabase(DatastoreMetricQuery query, QueryCallback queryCallback) throws DatastoreException
@@ -624,16 +508,16 @@ private void cqlQueryWithRowKeys(DatastoreMetricQuery query,
 			if (useLimit)
 			{
 				if (query.getOrder() == Order.ASC)
-					boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryAscLimit);
+					boundStatement = new BoundStatement(m_schema.psDataPointsQueryAscLimit);
 				else
-					boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryDescLimit);
+					boundStatement = new BoundStatement(m_schema.psDataPointsQueryDescLimit);
 			}
 			else
 			{
 				if (query.getOrder() == Order.ASC)
-					boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryAsc);
+					boundStatement = new BoundStatement(m_schema.psDataPointsQueryAsc);
 				else
-					boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryDesc);
+					boundStatement = new BoundStatement(m_schema.psDataPointsQueryDesc);
 			}
 
 			boundStatement.setBytesUnsafe(0, DATA_POINTS_ROW_KEY_SERIALIZER.toByteBuffer(rowKey));
@@ -700,12 +584,12 @@ public void deleteDataPoints(DatastoreMetricQuery deleteQuery) throws DatastoreE
 			if (deleteQuery.getStartTime() <= rowKeyTimestamp && (deleteQuery.getEndTime() >= rowKeyTimestamp + ROW_WIDTH - 1))
 			{
 				//todo fix me
-				BoundStatement statement = new BoundStatement(m_preparedStatements.psDataPointsDeleteRow);
+				BoundStatement statement = new BoundStatement(m_schema.psDataPointsDeleteRow);
 				statement.setBytesUnsafe(0, DATA_POINTS_ROW_KEY_SERIALIZER.toByteBuffer(rowKey));
 				statement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
 				m_session.executeAsync(statement);
 
-				statement = new BoundStatement(m_preparedStatements.psRowKeyIndexDelete);
+				statement = new BoundStatement(m_schema.psRowKeyIndexDelete);
 				statement.setBytesUnsafe(0, serializeString(rowKey.getMetricName()));
 				statement.setBytesUnsafe(1, DATA_POINTS_ROW_KEY_SERIALIZER.toByteBuffer(rowKey));
 				statement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
@@ -724,7 +608,7 @@ public void deleteDataPoints(DatastoreMetricQuery deleteQuery) throws DatastoreE
 		// If index is gone, delete metric name from Strings column family
 		if (deleteAll)
 		{
-			BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyIndexDeleteRow);
+			BoundStatement statement = new BoundStatement(m_schema.psRowKeyIndexDeleteRow);
 			statement.setBytesUnsafe(0, serializeString(deleteQuery.getName()));
 			statement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
 			m_session.executeAsync(statement);
@@ -856,7 +740,7 @@ public CQLFilteredRowKeyIterator(String metricName, long startTime, long endTime
 			//Legacy key index - index is all in one row
 			if ((startTime < 0) && (endTime >= 0))
 			{
-				BoundStatement negStatement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
+				BoundStatement negStatement = new BoundStatement(m_schema.psRowKeyIndexQuery);
 				negStatement.setBytesUnsafe(0, serializeString(metricName));
 				setStartEndKeys(negStatement, metricName, startTime, -1L);
 				negStatement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
@@ -865,7 +749,7 @@ public CQLFilteredRowKeyIterator(String metricName, long startTime, long endTime
 				futures.add(future);
 
 
-				BoundStatement posStatement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
+				BoundStatement posStatement = new BoundStatement(m_schema.psRowKeyIndexQuery);
 				posStatement.setBytesUnsafe(0, serializeString(metricName));
 				setStartEndKeys(posStatement, metricName, 0L, endTime);
 				posStatement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
@@ -875,7 +759,7 @@ public CQLFilteredRowKeyIterator(String metricName, long startTime, long endTime
 			}
 			else
 			{
-				BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
+				BoundStatement statement = new BoundStatement(m_schema.psRowKeyIndexQuery);
 				statement.setBytesUnsafe(0, serializeString(metricName));
 				setStartEndKeys(statement, metricName, startTime, endTime);
 				statement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
@@ -888,7 +772,7 @@ public CQLFilteredRowKeyIterator(String metricName, long startTime, long endTime
 			List<Long> queryKeyList = createQueryKeyList(metricName, startTime, endTime);
 			for (Long keyTime : queryKeyList)
 			{
-				BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyQuery);
+				BoundStatement statement = new BoundStatement(m_schema.psRowKeyQuery);
 				statement.setString(0, metricName);
 				statement.setTimestamp(1, new Date(keyTime));
 				statement.setConsistencyLevel(m_cassandraConfiguration.getDataReadLevel());
@@ -954,7 +838,7 @@ private DataPointsRowKey nextKeyFromIterator(ResultSet iterator)
 		{
 			List<Long> ret = new ArrayList<>();
 
-			BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyTimeQuery);
+			BoundStatement statement = new BoundStatement(m_schema.psRowKeyTimeQuery);
 			statement.setString(0, metricName);
 			statement.setTimestamp(1, new Date(calculateRowTime(startTime)));
 			statement.setTimestamp(2, new Date(endTime));
@@ -1051,7 +935,7 @@ public void addDataPoint(DataPoint datapoint) throws IOException
 				columnName = getColumnName(rowTime, time);
 
 			//Todo: may want to send these off in batches
-			BoundStatement statement = new BoundStatement(m_preparedStatements.psDataPointsDelete);
+			BoundStatement statement = new BoundStatement(m_schema.psDataPointsDelete);
 			statement.setBytesUnsafe(0, DATA_POINTS_ROW_KEY_SERIALIZER.toByteBuffer(m_currentRow));
 			ByteBuffer b = ByteBuffer.allocate(4);
 			b.putInt(columnName);
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/CassandraModule.java b/src/main/java/org/kairosdb/datastore/cassandra/CassandraModule.java
index 54b6afda30..52ef74cf64 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/CassandraModule.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/CassandraModule.java
@@ -17,10 +17,12 @@
 package org.kairosdb.datastore.cassandra;
 
 import com.google.inject.AbstractModule;
+import com.google.inject.Scope;
 import com.google.inject.Scopes;
 import com.google.inject.TypeLiteral;
 import com.google.inject.name.Names;
 import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.ServiceKeyStore;
 
 import java.util.HashMap;
 import java.util.List;
@@ -63,6 +65,7 @@ else if (strKey.startsWith(HECTOR_PREFIX))
 	protected void configure()
 	{
 		bind(Datastore.class).to(CassandraDatastore.class).in(Scopes.SINGLETON);
+		bind(ServiceKeyStore.class).to(CassandraDatastore.class).in(Scopes.SINGLETON);
 		bind(CassandraDatastore.class).in(Scopes.SINGLETON);
 		bind(CleanRowKeyCache.class).in(Scopes.SINGLETON);
 		bind(CassandraConfiguration.class).in(Scopes.SINGLETON);
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/Schema.java b/src/main/java/org/kairosdb/datastore/cassandra/Schema.java
new file mode 100755
index 0000000000..3c6b4de0b6
--- /dev/null
+++ b/src/main/java/org/kairosdb/datastore/cassandra/Schema.java
@@ -0,0 +1,221 @@
+package org.kairosdb.datastore.cassandra;
+
+import com.datastax.driver.core.PreparedStatement;
+import com.datastax.driver.core.Session;
+
+/**
+ Created by bhawkins on 4/29/17.
+ */
+public class Schema
+{
+	public static final String CREATE_KEYSPACE = "" +
+			"CREATE KEYSPACE IF NOT EXISTS %s" +
+			"  WITH REPLICATION = {'class': 'SimpleStrategy'," +
+			"  'replication_factor' : 1}";
+
+	public static final String DATA_POINTS_TABLE = "" +
+			"CREATE TABLE IF NOT EXISTS data_points (\n" +
+			"  key blob,\n" +
+			"  column1 blob,\n" +
+			"  value blob,\n" +
+			"  PRIMARY KEY ((key), column1)\n" +
+			") WITH COMPACT STORAGE";
+
+	public static final String ROW_KEY_INDEX_TABLE = "" +
+			"CREATE TABLE IF NOT EXISTS row_key_index (\n" +
+			"  key blob,\n" +
+			"  column1 blob,\n" +
+			"  value blob,\n" +
+			"  PRIMARY KEY ((key), column1)\n" +
+			") WITH COMPACT STORAGE";
+
+	public static final String ROW_KEY_TIME_INDEX = "" +
+			"CREATE TABLE IF NOT EXISTS row_key_time_index (\n" +
+			"  metric text,\n" +
+			"  row_time timestamp,\n" +
+			"  value text,\n" +
+			"  PRIMARY KEY ((metric), row_time)\n" +
+			")";
+
+	public static final String ROW_KEYS = "" +
+			"CREATE TABLE IF NOT EXISTS row_keys (\n" +
+			"  metric text,\n" +
+			"  row_time timestamp,\n" +
+			"  data_type text,\n" +
+			"  tags frozen<map<text, text>>,\n" +
+			"  value text,\n" +
+			"  PRIMARY KEY ((metric, row_time), data_type, tags)\n" +
+			")";
+
+	public static final String STRING_INDEX_TABLE = "" +
+			"CREATE TABLE IF NOT EXISTS string_index (\n" +
+			"  key blob,\n" +
+			"  column1 blob,\n" +
+			"  value blob,\n" +
+			"  PRIMARY KEY ((key), column1)\n" +
+			") WITH COMPACT STORAGE";
+
+	public static final String SERVICE_INDEX = "" +
+			"CREATE TABLE IF NOT EXISTS service_index (" +
+			" service text," +
+			" service_key text," +
+			" key text," +
+			" value text," +
+			" PRIMARY KEY ((service), service_key, key)" +
+			")";
+
+
+
+	//All inserts and deletes add millisecond timestamp consistency with old code and TWCS instead of nanos
+	public static final String DATA_POINTS_INSERT = "INSERT INTO data_points " +
+			"(key, column1, value) VALUES (?, ?, ?) USING TTL ? AND TIMESTAMP ?";
+
+	public static final String ROW_KEY_TIME_INSERT = "INSERT INTO row_key_time_index " +
+			"(metric, row_time) VALUES (?, ?) USING TTL ? AND TIMESTAMP ?";
+
+	public static final String ROW_KEY_INSERT = "INSERT INTO row_keys " +
+			"(metric, row_time, data_type, tags) VALUES (?, ?, ?, ?) USING TTL ?"; // AND TIMESTAMP ?";
+
+	public static final String STRING_INDEX_INSERT = "INSERT INTO string_index " +
+			"(key, column1, value) VALUES (?, ?, 0x00)";
+
+	public static final String DATA_POINTS_QUERY = "SELECT column1, value FROM data_points WHERE key = ? AND " +
+			"column1 >= ? AND column1 < ? ORDER BY column1";
+
+	public static final String DATA_POINTS_QUERY_ASC = DATA_POINTS_QUERY+" ASC";
+	public static final String DATA_POINTS_QUERY_DESC = DATA_POINTS_QUERY+" DESC";
+
+	public static final String DATA_POINTS_QUERY_ASC_LIMIT = DATA_POINTS_QUERY_ASC+" LIMIT ?";
+	public static final String DATA_POINTS_QUERY_DESC_LIMIT = DATA_POINTS_QUERY_DESC+" LIMIT ?";
+
+	public static final String DATA_POINTS_DELETE = "DELETE FROM data_points " +
+			"WHERE key = ? AND column1 = ?";
+
+	public static final String DATA_POINTS_DELETE_ROW = "DELETE FROM data_points " +
+			"WHERE key = ?";
+
+	public static final String STRING_INDEX_QUERY = "SELECT column1 FROM string_index " +
+			"WHERE key = ?";
+
+	//This is the old row key index query
+	public static final String ROW_KEY_INDEX_QUERY = "SELECT column1 FROM row_key_index " +
+			"WHERE key = ? AND column1 >= ? AND column1 < ?";
+
+	public static final String ROW_KEY_INDEX_DELETE = "DELETE FROM row_key_index " +
+			"WHERE KEY = ? AND column1 = ?";
+
+	public static final String ROW_KEY_INDEX_DELETE_ROW = "DELETE FROM row_key_index " +
+			"WHERE KEY = ?";
+
+	//New Row key queries
+	public static final String ROW_KEY_TIME_QUERY = "SELECT row_time " +
+			"FROM row_key_time_index WHERE metric = ? AND " +
+			"row_time >= ? AND row_time <= ?";
+
+	public static final String ROW_KEY_QUERY = "SELECT row_time, data_type, tags " +
+			"FROM row_keys WHERE metric = ? AND row_time = ?";
+
+	public static final String ROW_KEY_TAG_QUERY_WITH_TYPE = "SELECT row_time, data_type, tags " +
+			"FROM row_keys WHERE metric = ? AND row_time = ? AND data_type IN %s"; //Use ValueSequence when setting this
+
+	//Service index queries
+	public static final String SERVICE_INDEX_INSERT = "INSERT INTO service_index " +
+			"(service, service_key, key, value) VALUES (?, ?, ?, ?)";
+
+	public static final String SERVICE_INDEX_GET = "SELECT value, WRITETIME(value) " +
+			"FROM service_index WHERE service = ? AND service_key = ? AND key = ?";
+
+	public static final String SERVICE_INDEX_LIST_KEYS = "SELECT key " +
+			"FROM service_index WHERE service = ? AND service_key = ? ORDER BY service_key, key ASC";
+
+	public static final String SERVICE_INDEX_LIST_KEYS_PREFIX = "SELECT key " +
+			"FROM service_index WHERE service = ? AND service_key = ? AND " +
+			"key >= ? AND key < ?";
+
+	public static final String SERVICE_INDEX_LIST_SERVICE_KEYS = "SELECT service_key " +
+			"FROM service_index WHERE service = ?";
+
+	public static final String SERVICE_INDEX_DELETE_KEY = "DELETE FROM service_index " +
+			"WHERE service = ? AND service_key = ? AND key = ?";
+
+	public final PreparedStatement psDataPointsInsert;
+	//public final PreparedStatement m_psInsertRowKey;
+	public final PreparedStatement psStringIndexInsert;
+	public final PreparedStatement psDataPointsQueryAsc;
+	public final PreparedStatement psStringIndexQuery;
+	public final PreparedStatement psRowKeyIndexQuery;
+	public final PreparedStatement psRowKeyQuery;
+	public final PreparedStatement psRowKeyTimeQuery;
+	public final PreparedStatement psDataPointsDeleteRow;
+	public final PreparedStatement psDataPointsDelete;
+	public final PreparedStatement psRowKeyIndexDelete;
+	public final PreparedStatement psRowKeyIndexDeleteRow;
+	public final PreparedStatement psDataPointsQueryDesc;
+	public final PreparedStatement psRowKeyTimeInsert;
+	public final PreparedStatement psRowKeyInsert;
+	public final PreparedStatement psDataPointsQueryAscLimit;
+	public final PreparedStatement psDataPointsQueryDescLimit;
+	public final PreparedStatement psServiceIndexInsert;
+	public final PreparedStatement psServiceIndexGet;
+	public final PreparedStatement psServiceIndexListKeys;
+	public final PreparedStatement psServiceIndexListKeysPrefix;
+	public final PreparedStatement psServiceIndexListServiceKeys;
+	public final PreparedStatement psServiceIndexDeleteKey;
+
+	private final Session m_session;
+
+	public Schema(CassandraClient cassandraClient)
+	{
+		setupSchema(cassandraClient);
+
+		m_session = cassandraClient.getKeyspaceSession();
+
+		psDataPointsInsert = m_session.prepare(DATA_POINTS_INSERT);
+		//m_psInsertRowKey      = m_session.prepare(ROW_KEY_INDEX_INSERT);
+		psRowKeyTimeInsert = m_session.prepare(ROW_KEY_TIME_INSERT);
+		psRowKeyInsert = m_session.prepare(ROW_KEY_INSERT);
+		psStringIndexInsert = m_session.prepare(STRING_INDEX_INSERT);
+		psDataPointsQueryAsc = m_session.prepare(DATA_POINTS_QUERY_ASC);
+		psDataPointsQueryDesc = m_session.prepare(DATA_POINTS_QUERY_DESC);
+		psDataPointsQueryAscLimit = m_session.prepare(DATA_POINTS_QUERY_ASC_LIMIT);
+		psDataPointsQueryDescLimit = m_session.prepare(DATA_POINTS_QUERY_DESC_LIMIT);
+		psStringIndexQuery = m_session.prepare(STRING_INDEX_QUERY);
+		psRowKeyIndexQuery = m_session.prepare(ROW_KEY_INDEX_QUERY);
+		psRowKeyQuery = m_session.prepare(ROW_KEY_QUERY);
+		psRowKeyTimeQuery = m_session.prepare(ROW_KEY_TIME_QUERY);
+		psDataPointsDelete = m_session.prepare(DATA_POINTS_DELETE);
+		psDataPointsDeleteRow = m_session.prepare(DATA_POINTS_DELETE_ROW);
+		psRowKeyIndexDelete = m_session.prepare(ROW_KEY_INDEX_DELETE);
+		psRowKeyIndexDeleteRow = m_session.prepare(ROW_KEY_INDEX_DELETE_ROW);
+
+		psServiceIndexInsert = m_session.prepare(SERVICE_INDEX_INSERT);
+		psServiceIndexGet = m_session.prepare(SERVICE_INDEX_GET);
+		psServiceIndexListKeys = m_session.prepare(SERVICE_INDEX_LIST_KEYS);
+		psServiceIndexListKeysPrefix = m_session.prepare(SERVICE_INDEX_LIST_KEYS_PREFIX);
+		psServiceIndexListServiceKeys = m_session.prepare(SERVICE_INDEX_LIST_SERVICE_KEYS);
+		psServiceIndexDeleteKey = m_session.prepare(SERVICE_INDEX_DELETE_KEY);
+	}
+
+	public Session getSession()
+	{
+		return m_session;
+	}
+
+	private void setupSchema(CassandraClient cassandraClient)
+	{
+		try (Session session = cassandraClient.getSession())
+		{
+			session.execute(String.format(CREATE_KEYSPACE, cassandraClient.getKeyspace()));
+		}
+
+		try (Session session = cassandraClient.getKeyspaceSession())
+		{
+			session.execute(DATA_POINTS_TABLE);
+			session.execute(ROW_KEY_INDEX_TABLE);
+			session.execute(STRING_INDEX_TABLE);
+			session.execute(ROW_KEYS);
+			session.execute(ROW_KEY_TIME_INDEX);
+			session.execute(SERVICE_INDEX);
+		}
+	}
+}
diff --git a/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java b/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
index ee36d41c01..c969e26084 100755
--- a/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
+++ b/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
@@ -25,11 +25,7 @@
 import org.agileclick.genorm.runtime.GenOrmQueryResultSet;
 import org.h2.jdbcx.JdbcDataSource;
 import org.kairosdb.core.KairosDataPointFactory;
-import org.kairosdb.core.datastore.Datastore;
-import org.kairosdb.core.datastore.DatastoreMetricQuery;
-import org.kairosdb.core.datastore.QueryCallback;
-import org.kairosdb.core.datastore.TagSet;
-import org.kairosdb.core.datastore.TagSetImpl;
+import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.datastore.cassandra.DataPointsRowKey;
 import org.kairosdb.datastore.h2.orm.DSEnvelope;
@@ -71,7 +67,7 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
-public class H2Datastore implements Datastore
+public class H2Datastore implements Datastore, ServiceKeyStore
 {
 	public static final Logger logger = LoggerFactory.getLogger(H2Datastore.class);
 	public static final String DATABASE_PATH_PROPERTY = "kairosdb.datastore.h2.database_path";
diff --git a/src/main/java/org/kairosdb/datastore/h2/H2Module.java b/src/main/java/org/kairosdb/datastore/h2/H2Module.java
index 12384b8f04..7448273898 100755
--- a/src/main/java/org/kairosdb/datastore/h2/H2Module.java
+++ b/src/main/java/org/kairosdb/datastore/h2/H2Module.java
@@ -20,6 +20,7 @@
 import com.google.inject.Scopes;
 import org.kairosdb.core.datastore.Datastore;
 import org.kairosdb.core.datastore.KairosDatastore;
+import org.kairosdb.core.datastore.ServiceKeyStore;
 
 public class H2Module extends AbstractModule
 {
@@ -27,5 +28,6 @@
 	protected void configure()
 	{
 		bind(Datastore.class).to(H2Datastore.class).in(Scopes.SINGLETON);
+		bind(ServiceKeyStore.class).to(H2Datastore.class).in(Scopes.SINGLETON);
 	}
 }
diff --git a/src/main/java/org/kairosdb/datastore/remote/NullServiceKeyStore.java b/src/main/java/org/kairosdb/datastore/remote/NullServiceKeyStore.java
new file mode 100755
index 0000000000..7868de799b
--- /dev/null
+++ b/src/main/java/org/kairosdb/datastore/remote/NullServiceKeyStore.java
@@ -0,0 +1,50 @@
+package org.kairosdb.datastore.remote;
+
+import org.kairosdb.core.datastore.ServiceKeyStore;
+import org.kairosdb.core.exception.DatastoreException;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ Created by bhawkins on 4/29/17.
+ */
+public class NullServiceKeyStore implements ServiceKeyStore
+{
+	@Override
+	public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+
+	@Override
+	public String getValue(String service, String serviceKey, String key) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+
+	@Override
+	public Iterable<String> listServiceKeys(String service) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+
+	@Override
+	public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+
+	@Override
+	public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+
+	@Override
+	public void deleteKey(String service, String serviceKey, String key) throws DatastoreException
+	{
+		throw new DatastoreException("Method not implemented.");
+	}
+}
diff --git a/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java b/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
index a628304b41..84d00deb61 100755
--- a/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
+++ b/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
@@ -187,7 +187,7 @@ private void flushMap()
 						writer.key("datapoints").array();
 						for (DataPoint dataPoint : flushMap.get(dataPointKey))
 						{
-							m_dataPointCounter ++;
+							m_dataPointCounter++;
 							writer.array();
 							writer.value(dataPoint.getTimestamp());
 							dataPoint.writeValueToJson(writer);
@@ -221,16 +221,16 @@ private void getKairosVersion() throws DatastoreException
 	{
 		try
 		{
-			HttpGet get = new HttpGet(m_remoteUrl+"/api/v1/version");
+			HttpGet get = new HttpGet(m_remoteUrl + "/api/v1/version");
 
-			try(CloseableHttpResponse response = m_client.execute(get))
+			try (CloseableHttpResponse response = m_client.execute(get))
 			{
 				ByteArrayOutputStream bout = new ByteArrayOutputStream();
 				response.getEntity().writeTo(bout);
-	
+
 				JSONObject respJson = new JSONObject(bout.toString("UTF-8"));
-	
-				logger.info("Connecting to remote Kairos version: "+ respJson.getString("version"));
+
+				logger.info("Connecting to remote Kairos version: " + respJson.getString("version"));
 			}
 		}
 		catch (IOException e)
@@ -245,7 +245,7 @@ private void getKairosVersion() throws DatastoreException
 
 	private void openDataFile() throws IOException
 	{
-		m_dataFileName = m_dataDirectory+"/"+System.currentTimeMillis();
+		m_dataFileName = m_dataDirectory + "/" + System.currentTimeMillis();
 
 		m_dataWriter = new BufferedWriter(new FileWriter(m_dataFileName));
 		m_dataWriter.write("[\n");
@@ -298,20 +298,21 @@ public void putDataPoint(DataPointEvent event) throws DatastoreException
 
 	/**
 	 Sends a single zip file
+
 	 @param zipFile Name of the zip file in the data directory.
 	 @throws IOException
 	 */
 	private void sendZipfile(String zipFile) throws IOException
 	{
 		logger.debug("Sending {}", zipFile);
-		HttpPost post = new HttpPost(m_remoteUrl+"/api/v1/datapoints");
+		HttpPost post = new HttpPost(m_remoteUrl + "/api/v1/datapoints");
 
 		File zipFileObj = new File(m_dataDirectory, zipFile);
 		FileInputStream zipStream = new FileInputStream(zipFileObj);
 		post.setHeader("Content-Type", "application/gzip");
-		
+
 		post.setEntity(new InputStreamEntity(zipStream, zipFileObj.length()));
-		try(CloseableHttpResponse response = m_client.execute(post))
+		try (CloseableHttpResponse response = m_client.execute(post))
 		{
 
 			zipStream.close();
@@ -324,7 +325,7 @@ private void sendZipfile(String zipFile) throws IOException
 				ByteArrayOutputStream body = new ByteArrayOutputStream();
 				response.getEntity().writeTo(body);
 				logger.error("Unable to send file " + zipFile + ": " + response.getStatusLine() +
-						" - "+ body.toString("UTF-8"));
+						" - " + body.toString("UTF-8"));
 			}
 		}
 	}
@@ -337,14 +338,14 @@ private void sendAllZipfiles() throws IOException
 		File dataDirectory = new File(m_dataDirectory);
 
 		String[] zipFiles = dataDirectory.list(new FilenameFilter()
-				{
-					@Override
-					public boolean accept(File dir, String name)
-					{
-						return (name.endsWith(".gz"));
-					}
-				});
-		if(zipFiles == null)
+		{
+			@Override
+			public boolean accept(File dir, String name)
+			{
+				return (name.endsWith(".gz"));
+			}
+		});
+		if (zipFiles == null)
 			return;
 
 		for (String zipFile : zipFiles)
@@ -355,7 +356,7 @@ public boolean accept(File dir, String name)
 			}
 			catch (IOException e)
 			{
-				logger.error("Unable to send data file "+zipFile);
+				logger.error("Unable to send data file " + zipFile);
 				throw (e);
 			}
 		}
@@ -364,12 +365,13 @@ public boolean accept(File dir, String name)
 
 	/**
 	 Compresses the given file and removes the uncompressed file
+
 	 @param file
 	 @return Size of the zip file
 	 */
 	private long zipFile(String file) throws IOException
 	{
-		String zipFile = file+".gz";
+		String zipFile = file + ".gz";
 
 		FileInputStream is = new FileInputStream(file);
 		GZIPOutputStream gout = new GZIPOutputStream(new FileOutputStream(zipFile));
@@ -465,41 +467,4 @@ public TagSet queryMetricTags(DatastoreMetricQuery query) throws DatastoreExcept
 	{
 		throw new DatastoreException("Method not implemented.");
 	}
-
-	@Override
-	public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
-	{
-		throw new DatastoreException("Method not implemented.");
-	}
-
-	@Override
-	public String getValue(String service, String serviceKey, String key) throws DatastoreException
-	{
-		throw new DatastoreException("Method not implemented.");
-	}
-
-    @Override
-    public Iterable<String> listServiceKeys(String service)
-            throws DatastoreException
-    {
-        throw new DatastoreException("Method not implemented.");
-    }
-
-    @Override
-	public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
-	{
-		throw new DatastoreException("Method not implemented.");
-	}
-
-	@Override
-	public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
-	{
-		throw new DatastoreException("Method not implemented.");
-	}
-
-    @Override
-    public void deleteKey(String service, String serviceKey, String key)
-            throws DatastoreException
-    {
-    }
 }
diff --git a/src/main/java/org/kairosdb/datastore/remote/RemoteModule.java b/src/main/java/org/kairosdb/datastore/remote/RemoteModule.java
index 01747198ab..acc8ee5c67 100755
--- a/src/main/java/org/kairosdb/datastore/remote/RemoteModule.java
+++ b/src/main/java/org/kairosdb/datastore/remote/RemoteModule.java
@@ -3,6 +3,10 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.Scopes;
 import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.ServiceKeyStore;
+
+import javax.validation.constraints.Null;
+import javax.xml.ws.Service;
 
 /**
  Created with IntelliJ IDEA.
@@ -19,5 +23,6 @@ protected void configure()
 		bind(Datastore.class).to(RemoteDatastore.class).in(Scopes.SINGLETON);
 		bind(RemoteDatastore.class).in(Scopes.SINGLETON);
 		bind(RemoteSendJob.class).in(Scopes.SINGLETON);
+		bind(ServiceKeyStore.class).to(NullServiceKeyStore.class);
 	}
 }
diff --git a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
index e9e17a0fdd..e0cb4943cd 100755
--- a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
+++ b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
@@ -320,7 +320,7 @@ public TestKairosDatastore(Datastore datastore, QueryQueuingManager queuingManag
 		}
 	}
 
-	private static class TestDatastore implements Datastore
+	private static class TestDatastore implements Datastore, ServiceKeyStore
 	{
 		private DatastoreException m_toThrow = null;
 
@@ -414,14 +414,14 @@ public String getValue(String service, String serviceKey, String key) throws Dat
 			return null;
 		}
 
-        @Override
-        public Iterable<String> listServiceKeys(String service)
-                throws DatastoreException
-        {
-            return null;
-        }
+		@Override
+		public Iterable<String> listServiceKeys(String service)
+				throws DatastoreException
+		{
+			return null;
+		}
 
-        @Override
+		@Override
 		public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
 		{
 			return null;
@@ -433,10 +433,10 @@ public String getValue(String service, String serviceKey, String key) throws Dat
 			return null;
 		}
 
-        @Override
-        public void deleteKey(String service, String serviceKey, String key)
-                throws DatastoreException
-        {
-        }
-    }
+		@Override
+		public void deleteKey(String service, String serviceKey, String key)
+				throws DatastoreException
+		{
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/core/http/rest/MetadataResourceTest.java b/src/test/java/org/kairosdb/core/http/rest/MetadataResourceTest.java
index 808488ef3a..591fa0d1bb 100755
--- a/src/test/java/org/kairosdb/core/http/rest/MetadataResourceTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/MetadataResourceTest.java
@@ -12,207 +12,207 @@
 
 public class MetadataResourceTest extends ResourceBase
 {
-    private static final String SERVICE = "service";
-    private static final String UNAUTHORIZED_SERVICE = "_service";
-    private static final String SERVICE_KEY1 = "service_key1";
-    private static final String SERVICE_KEY2 = "service_key2";
-    private static final String METADATA_URL = "http://localhost:9001/api/v1/metadata/";
-
-    private static final int OK = 200;
-    private static final int NO_CONTENT = 204;
-    private static final int UNAUTHORIZED_ERROR = 401;
-    private static final int INTERNAL_SERVER_ERROR = 500;
-
-    @Before
-    public void setup()
-            throws DatastoreException
-    {
-        datastore.setValue(SERVICE, SERVICE_KEY1, "foo", "bar");
-        datastore.setValue(SERVICE, SERVICE_KEY1, "foobar", "fi");
-        datastore.setValue(SERVICE, SERVICE_KEY1, "tee", "too");
-        datastore.setValue(SERVICE, SERVICE_KEY2, "foo", "bar");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void test_constructor_nullDatastore_invalid()
-    {
-        new MetadataResource(null);
-    }
-
-    @Test
-    public void listKeysStartsWith()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "?startsWidth=foo");
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo("{\"results\":[\"foo\",\"foobar\"]}"));
-
-        response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "?startsWidth=fi");
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo("{\"results\":[]}"));
-    }
-
-    @Test
-    public void listKeys()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1);
-
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo("{\"results\":[\"tee\",\"foo\",\"foobar\"]}"));
-    }
-
-    @Test
-    public void listKeys_notAuthorized()
-            throws IOException
-    {
-        JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1);
-
-        assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @Test
-    public void listKeys_withException()
-            throws Exception
-    {
-        datastore.throwException(new DatastoreException("expected"));
-
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1);
-
-        assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
-        assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
-        datastore.throwException(null);
-    }
-
-    @Test
-    public void listServiceKeys()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + SERVICE);
-
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo("{\"results\":[\"" + SERVICE_KEY1 + "\",\"" + SERVICE_KEY2 + "\"]}"));
-    }
-
-     @Test
-    public void listServiceKeys_notAuthorized()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE);
-
-        assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @Test
-    public void getValue()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
-
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo("fi"));
-    }
-
-     @Test
-    public void getValue_notAuthorized()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/foobar");
-
-        assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @Test
-    public void getValue_withException()
-            throws Exception
-    {
-        datastore.throwException(new DatastoreException("expected"));
-
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
-
-        assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
-        assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
-        datastore.throwException(null);
-    }
-
-    @Test
-    public void getValue_empty()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/bogus");
-
-        assertThat(response.getStatusCode(), equalTo(OK));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @Test
-    public void setValue_withException()
-            throws Exception
-    {
-        datastore.throwException(new DatastoreException("expected"));
-
-        JsonResponse response = client.post("value", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
-
-        assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
-        assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
-        datastore.throwException(null);
-    }
-
-    @Test
-    public void setValue_notAuthorized()
-            throws Exception
-    {
-        JsonResponse response = client.post("value", METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/foobar");
-
-        assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @SuppressWarnings("UnusedAssignment")
-    @Test
-    public void deleteKey()
-            throws Exception
-    {
-        JsonResponse response = client.post("newValue", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-        response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-        assertThat(response.getJson(), equalTo("newValue"));
-
-        response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-        assertThat(response.getStatusCode(), equalTo(NO_CONTENT));
-
-        response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-      @Test
-    public void deleteKey_notAuthorized()
-            throws Exception
-    {
-        JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-
-        assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
-        assertThat(response.getJson(), equalTo(""));
-    }
-
-    @SuppressWarnings("UnusedAssignment")
-    @Test
-    public void deleteKey_withException()
-            throws Exception
-    {
-        JsonResponse response = client.post("newValue", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-        datastore.throwException(new DatastoreException("expected"));
-
-        response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-
-        assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
-        assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
-
-        // clean up
-        datastore.throwException(null);
-        response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
-
-    }
+	private static final String SERVICE = "service";
+	private static final String UNAUTHORIZED_SERVICE = "_service";
+	private static final String SERVICE_KEY1 = "service_key1";
+	private static final String SERVICE_KEY2 = "service_key2";
+	private static final String METADATA_URL = "http://localhost:9001/api/v1/metadata/";
+
+	private static final int OK = 200;
+	private static final int NO_CONTENT = 204;
+	private static final int UNAUTHORIZED_ERROR = 401;
+	private static final int INTERNAL_SERVER_ERROR = 500;
+
+	@Before
+	public void setup()
+			throws DatastoreException
+	{
+		datastore.setValue(SERVICE, SERVICE_KEY1, "foo", "bar");
+		datastore.setValue(SERVICE, SERVICE_KEY1, "foobar", "fi");
+		datastore.setValue(SERVICE, SERVICE_KEY1, "tee", "too");
+		datastore.setValue(SERVICE, SERVICE_KEY2, "foo", "bar");
+	}
+
+	@Test(expected = NullPointerException.class)
+	public void test_constructor_nullDatastore_invalid()
+	{
+		new MetadataResource(null);
+	}
+
+	@Test
+	public void listKeysStartsWith()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "?startsWith=foo");
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo("{\"results\":[\"foo\",\"foobar\"]}"));
+
+		response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "?startsWith=fi");
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo("{\"results\":[]}"));
+	}
+
+	@Test
+	public void listKeys()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1);
+
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo("{\"results\":[\"foo\",\"foobar\",\"tee\"]}"));
+	}
+
+	@Test
+	public void listKeys_notAuthorized()
+			throws IOException
+	{
+		JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1);
+
+		assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@Test
+	public void listKeys_withException()
+			throws Exception
+	{
+		datastore.throwException(new DatastoreException("expected"));
+
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1);
+
+		assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
+		assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
+		datastore.throwException(null);
+	}
+
+	@Test
+	public void listServiceKeys()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + SERVICE);
+
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo("{\"results\":[\"" + SERVICE_KEY1 + "\",\"" + SERVICE_KEY2 + "\"]}"));
+	}
+
+	@Test
+	public void listServiceKeys_notAuthorized()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE);
+
+		assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@Test
+	public void getValue()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
+
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo("fi"));
+	}
+
+	@Test
+	public void getValue_notAuthorized()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/foobar");
+
+		assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@Test
+	public void getValue_withException()
+			throws Exception
+	{
+		datastore.throwException(new DatastoreException("expected"));
+
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
+
+		assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
+		assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
+		datastore.throwException(null);
+	}
+
+	@Test
+	public void getValue_empty()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/bogus");
+
+		assertThat(response.getStatusCode(), equalTo(OK));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@Test
+	public void setValue_withException()
+			throws Exception
+	{
+		datastore.throwException(new DatastoreException("expected"));
+
+		JsonResponse response = client.post("value", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/foobar");
+
+		assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
+		assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
+		datastore.throwException(null);
+	}
+
+	@Test
+	public void setValue_notAuthorized()
+			throws Exception
+	{
+		JsonResponse response = client.post("value", METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/foobar");
+
+		assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@SuppressWarnings("UnusedAssignment")
+	@Test
+	public void deleteKey()
+			throws Exception
+	{
+		JsonResponse response = client.post("newValue", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+		response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+		assertThat(response.getJson(), equalTo("newValue"));
+
+		response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+		assertThat(response.getStatusCode(), equalTo(NO_CONTENT));
+
+		response = client.get(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@Test
+	public void deleteKey_notAuthorized()
+			throws Exception
+	{
+		JsonResponse response = client.get(METADATA_URL + UNAUTHORIZED_SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+
+		assertThat(response.getStatusCode(), equalTo(UNAUTHORIZED_ERROR));
+		assertThat(response.getJson(), equalTo(""));
+	}
+
+	@SuppressWarnings("UnusedAssignment")
+	@Test
+	public void deleteKey_withException()
+			throws Exception
+	{
+		JsonResponse response = client.post("newValue", METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+		datastore.throwException(new DatastoreException("expected"));
+
+		response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+
+		assertThat(response.getStatusCode(), equalTo(INTERNAL_SERVER_ERROR));
+		assertThat(response.getJson(), equalTo("{\"errors\":[\"expected\"]}"));
+
+		// clean up
+		datastore.throwException(null);
+		response = client.delete(METADATA_URL + SERVICE + "/" + SERVICE_KEY1 + "/newKey");
+
+	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java b/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
index fa7465eaa3..90f5680f12 100755
--- a/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
+++ b/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
@@ -26,13 +26,7 @@
 import org.kairosdb.core.datapoints.LongDataPointFactory;
 import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
 import org.kairosdb.core.datapoints.StringDataPointFactory;
-import org.kairosdb.core.datastore.Datastore;
-import org.kairosdb.core.datastore.DatastoreMetricQuery;
-import org.kairosdb.core.datastore.KairosDatastore;
-import org.kairosdb.core.datastore.QueryCallback;
-import org.kairosdb.core.datastore.QueryPluginFactory;
-import org.kairosdb.core.datastore.QueryQueuingManager;
-import org.kairosdb.core.datastore.TagSet;
+import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.groupby.GroupByFactory;
 import org.kairosdb.core.groupby.TestGroupByFactory;
@@ -99,6 +93,7 @@ public void afterInjection(I i)
                 bind(Integer.class).annotatedWith(Names.named(WebServer.JETTY_PORT_PROPERTY)).toInstance(9001);
                 bind(String.class).annotatedWith(Names.named(WebServer.JETTY_WEB_ROOT_PROPERTY)).toInstance("bogus");
                 bind(Datastore.class).toInstance(datastore);
+                bind(ServiceKeyStore.class).toInstance(datastore);
                 bind(KairosDatastore.class).in(Singleton.class);
                 bind(AggregatorFactory.class).to(TestAggregatorFactory.class);
                 bind(GroupByFactory.class).to(TestGroupByFactory.class);
@@ -154,10 +149,10 @@ public static void tearDown() throws Exception
         }
     }
 
-    public static class TestDatastore implements Datastore
+    public static class TestDatastore implements Datastore, ServiceKeyStore
     {
         private DatastoreException m_toThrow = null;
-        private Map<String, String> metadata = new HashMap<>();
+        private Map<String, String> metadata = new TreeMap<>();
 
         TestDatastore() throws DatastoreException
         {
diff --git a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
index e687a38ab5..a56e23dd47 100755
--- a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
@@ -27,10 +27,7 @@
 import org.kairosdb.core.KairosDataPointFactory;
 import org.kairosdb.core.TestDataPointFactory;
 import org.kairosdb.core.datapoints.StringDataPoint;
-import org.kairosdb.core.datastore.Datastore;
-import org.kairosdb.core.datastore.DatastoreMetricQuery;
-import org.kairosdb.core.datastore.QueryCallback;
-import org.kairosdb.core.datastore.TagSet;
+import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.events.DataPointEvent;
 
@@ -722,7 +719,7 @@ public void test_parserSpeed() throws DatastoreException, IOException
 	}
 
 
-	private static class FakeDataStore implements Datastore
+	private static class FakeDataStore implements Datastore, ServiceKeyStore
 	{
 		List<DataPointSet> dataPointSetList = new ArrayList<>();
 		private DataPointSet lastDataPointSet;
@@ -807,14 +804,14 @@ public String getValue(String service, String serviceKey, String key) throws Dat
 			return null;
 		}
 
-        @Override
-        public Iterable<String> listServiceKeys(String service)
-                throws DatastoreException
-        {
-            return null;
-        }
+		@Override
+		public Iterable<String> listServiceKeys(String service)
+				throws DatastoreException
+		{
+			return null;
+		}
 
-        @Override
+		@Override
 		public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
 		{
 			return null;
@@ -826,10 +823,10 @@ public String getValue(String service, String serviceKey, String key) throws Dat
 			return null;
 		}
 
-        @Override
-        public void deleteKey(String service, String serviceKey, String key)
-                throws DatastoreException
-        {
-        }
-    }
+		@Override
+		public void deleteKey(String service, String serviceKey, String key)
+				throws DatastoreException
+		{
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/core/queue/QueueProcessorTest.java b/src/test/java/org/kairosdb/core/queue/QueueProcessorTest.java
index 1446b4d87c..112a2a5c71 100755
--- a/src/test/java/org/kairosdb/core/queue/QueueProcessorTest.java
+++ b/src/test/java/org/kairosdb/core/queue/QueueProcessorTest.java
@@ -90,7 +90,7 @@ public void test_eventIsPulledFromMemoryQueue()
 		ProcessorHandler processorHandler = mock(ProcessorHandler.class);
 
 		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
-				bigArray, new TestExecutor(), 2, 10, 500);
+				bigArray, new TestExecutor(), 2, 10, 500, 1);
 
 		queueProcessor.setProcessorHandler(processorHandler);
 
@@ -118,7 +118,7 @@ public void test_eventIsPulledFromMemoryQueueThenBigArray()
 		ProcessorHandler processorHandler = mock(ProcessorHandler.class);
 
 		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
-				bigArray, new TestExecutor(), 3, 1, 500);
+				bigArray, new TestExecutor(), 3, 1, 500, 1);
 
 		queueProcessor.setProcessorHandler(processorHandler);
 
@@ -160,7 +160,7 @@ public void handleEvents(List<DataPointEvent> events, EventCompletionCallBack ev
 		};
 
 		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
-				bigArray, new TestExecutor(), 3, 2, -1);
+				bigArray, new TestExecutor(), 3, 2, -1, 1);
 
 		queueProcessor.setProcessorHandler(processorHandler);
 
diff --git a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
index 31abee1167..79065d8a37 100755
--- a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
+++ b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
@@ -395,42 +395,5 @@ public TagSet queryMetricTags(DatastoreMetricQuery query) throws DatastoreExcept
 		{
 			return null;
 		}
-
-		@Override
-		public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
-		{
-
-		}
-
-		@Override
-		public String getValue(String service, String serviceKey, String key) throws DatastoreException
-		{
-			return null;
-		}
-
-        @Override
-        public Iterable<String> listServiceKeys(String service)
-                throws DatastoreException
-        {
-            return null;
-        }
-
-        @Override
-		public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
-		{
-			return null;
-		}
-
-		@Override
-		public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
-		{
-			return null;
-		}
-
-        @Override
-        public void deleteKey(String service, String serviceKey, String key)
-                throws DatastoreException
-        {
-        }
-    }
+	}
 }
\ No newline at end of file
diff --git a/src/test/java/org/kairosdb/rollup/RollUpJobTest.java b/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
index 16fcd46bc8..8e45e4fbbd 100755
--- a/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
+++ b/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
@@ -376,44 +376,5 @@ public TagSet queryMetricTags(DatastoreMetricQuery query) throws
 		{
 			throw new UnsupportedOperationException();
 		}
-
-		@Override
-		public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
-		{
-
-		}
-
-		@Override
-		public String getValue(String service, String serviceKey, String key) throws DatastoreException
-		{
-			return null;
-		}
-
-        @Override
-        public Iterable<String> listServiceKeys(String service)
-                throws DatastoreException
-        {
-            return null;
-        }
-
-        @Override
-		public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
-		{
-			return null;
-		}
-
-		@Override
-		public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
-		{
-			return null;
-		}
-
-        @Override
-        public void deleteKey(String service, String serviceKey, String key)
-                throws DatastoreException
-        {
-        }
-    }
-
-
+	}
 }
\ No newline at end of file
