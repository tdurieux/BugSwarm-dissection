diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
index dda6614965..fa4f0869db 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
@@ -9,6 +9,7 @@
 import net.bytebuddy.implementation.MethodDelegation;
 import net.bytebuddy.implementation.bind.annotation.SuperCall;
 import net.bytebuddy.matcher.ElementMatchers;
+import net.bytebuddy.test.packaging.SimpleType;
 import net.bytebuddy.test.utility.AgentAttachmentRule;
 import net.bytebuddy.test.utility.ClassFileExtraction;
 import org.junit.Before;
@@ -43,19 +44,12 @@
 
     @Before
     public void setUp() throws Exception {
-        // Need to add all enclosing classes. Otherwise, eagerly validated types (Java 7- for redefinition)
-        // fail to validate type equality for outer/inner classes.
         classLoader = new ByteArrayClassLoader.ChildFirst(getClass().getClassLoader(),
                 ClassFileExtraction.of(Foo.class,
                         Bar.class,
                         Qux.class,
                         Baz.class,
-                        getClass(),
-                        ShouldRebase.class,
-                        FooTransformer.class,
-                        BarTransformer.class,
-                        BarTransformer.Interceptor.class,
-                        QuxTransformer.class),
+                        SimpleType.class),
                 DEFAULT_PROTECTION_DOMAIN,
                 AccessController.getContext(),
                 ByteArrayClassLoader.PersistenceHandler.MANIFEST,
@@ -129,8 +123,10 @@ public void testAgentWithoutSelfInitializationWithNativeMethodPrefix() throws Ex
     @Test
     @AgentAttachmentRule.Enforce
     public void testRedefinition() throws Exception {
+        // A redefinition reflects on loaded types which are eagerly validated types (Java 7- for redefinition).
+        // This causes type equality for outer/inner classes to fail which is whz an external class is used.
         assertThat(ByteBuddyAgent.install(), instanceOf(Instrumentation.class));
-        assertThat(classLoader.loadClass(Foo.class.getName()).getName(), is(Foo.class.getName())); // ensure that class is loaded
+        assertThat(classLoader.loadClass(SimpleType.class.getName()).getName(), is(SimpleType.class.getName())); // ensure that class is loaded
         ClassFileTransformer classFileTransformer = new AgentBuilder.Default()
                 .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
                 .withTypeStrategy(AgentBuilder.TypeStrategy.REDEFINE)
@@ -138,7 +134,7 @@ public void testRedefinition() throws Exception {
                 .type(isAnnotatedWith(ShouldRebase.class), ElementMatchers.is(classLoader)).transform(new FooTransformer())
                 .installOnByteBuddyAgent();
         try {
-            Class<?> type = classLoader.loadClass(Foo.class.getName());
+            Class<?> type = classLoader.loadClass(SimpleType.class.getName());
             assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/test/packaging/SimpleType.java b/byte-buddy-dep/src/test/java/net/bytebuddy/test/packaging/SimpleType.java
new file mode 100755
index 0000000000..097b8818b0
--- /dev/null
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/test/packaging/SimpleType.java
@@ -0,0 +1,14 @@
+package net.bytebuddy.test.packaging;
+
+import net.bytebuddy.agent.builder.AgentBuilderDefaultApplicationTest;
+
+@AgentBuilderDefaultApplicationTest.ShouldRebase
+public class SimpleType {
+
+    private static final String FOO = "foo";
+
+    public String foo() {
+        return FOO;
+    }
+
+}
