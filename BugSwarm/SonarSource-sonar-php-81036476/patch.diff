diff --git a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
index 5a70e67b4d..db8089aafc 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
@@ -94,7 +94,6 @@ public StatementTree STATEMENT() {
     return b.<StatementTree>nonterminal(PHPLexicalGrammar.STATEMENT)
         .is(b.firstOf(
             BLOCK(),
-//            ALTERNATIVE_IF_STATEMENT(),
             THROW_STATEMENT(),
             IF_STATEMENT(),
 //            WHILE_STATEMENT(),
@@ -122,6 +121,11 @@ public StatementTree STATEMENT() {
 
   public IfStatementTree IF_STATEMENT() {
     return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.IF_STATEMENT)
+        .is(b.firstOf(STANDARD_IF_STATEMENT(), ALTERNATIVE_IF_STATEMENT()));
+  }
+
+  public IfStatementTree STANDARD_IF_STATEMENT() {
+    return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.STANDARD_IF_STATEMENT)
         .is(f.ifStatement(
             b.token(PHPKeyword.IF),
             //fixme (Lena) : should be PARENTHESIS_EXPRESSION
@@ -132,6 +136,22 @@ public IfStatementTree IF_STATEMENT() {
         ));
   }
 
+  public IfStatementTree ALTERNATIVE_IF_STATEMENT() {
+    return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_IF_STATEMENT)
+        .is(f.alternativeIfStatement(
+            b.token(PHPKeyword.IF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT()),
+            b.zeroOrMore(ALTERNATIVE_ELSEIF_CLAUSE()),
+            b.optional(ALTERNATIVE_ELSE_CLAUSE()),
+            b.token(PHPKeyword.ENDIF),
+            EOS()
+        ));
+  }
+
   public ElseClauseTree ELSE_CLAUSE() {
     return b.<ElseClauseTree>nonterminal(PHPLexicalGrammar.ELSE_CLAUSE)
         .is(f.elseClause(b.token(PHPKeyword.ELSE), STATEMENT()));
@@ -147,6 +167,28 @@ public ElseifClauseTree ELSEIF_CLAUSE() {
         ));
   }
 
+  public ElseClauseTree ALTERNATIVE_ELSE_CLAUSE() {
+    return b.<ElseClauseTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_ELSE_CLAUSE)
+        .is(f.alternativeElseClause(
+            b.token(PHPKeyword.ELSE),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT())
+        ));
+  }
+
+  public ElseifClauseTree ALTERNATIVE_ELSEIF_CLAUSE() {
+    return b.<ElseifClauseTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_ELSEIF_CLAUSE)
+        .is(f.alternativeElseifClause(
+            b.token(PHPKeyword.ELSEIF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT())
+        ));
+  }
+
   public ForStatementTree FOR_STATEMENT() {
     return b.<ForStatementTree>nonterminal(PHPLexicalGrammar.FOR_STATEMENT)
         .is(b.firstOf(
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
index 0f213a2249..8ef7e84c3e 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
@@ -105,7 +105,7 @@
   ELSEIF_CLAUSE,
   ELSE_CLAUSE,
   ALTERNATIVE_IF_STATEMENT,
-  ALTERNATIVE_ELSEIF_LIST,
+  STANDARD_IF_STATEMENT,
   ALTERNATIVE_ELSEIF_CLAUSE,
   ALTERNATIVE_ELSE_CLAUSE,
   WHILE_STATEMENT,
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
index ffbb1de0f4..d6ddbf4a58 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
@@ -288,14 +288,6 @@ public ForStatementTree forStatementAlternative(
     return new SeparatedList(elements.build(), separators.build());
   }
 
-  /**
-   * [ END ] Statement
-   */
-
-  public ExpressionTree expression(InternalSyntaxToken token) {
-    return new VariableIdentifierTreeImpl(new IdentifierTreeImpl(token));
-  }
-
   public ElseClauseTree elseClause(InternalSyntaxToken elseToken, StatementTree statement) {
     return new ElseClauseTreeImpl(elseToken, statement);
   }
@@ -311,6 +303,51 @@ public ElseifClauseTree elseifClause(InternalSyntaxToken elseifToken, Expression
     return new ElseifClauseTreeImpl(elseifToken, condition, statement);
   }
 
+  public IfStatementTree alternativeIfStatement(
+      InternalSyntaxToken ifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      Optional<List<StatementTree>> statements, Optional<List<ElseifClauseTree>> elseifClauses, Optional<ElseClauseTree> elseClause,
+      InternalSyntaxToken endIfToken, InternalSyntaxToken eosToken
+  ) {
+    return new IfStatementTreeImpl(
+        ifToken,
+        condition,
+        colonToken,
+        optionalList(statements),
+        optionalList(elseifClauses),
+        elseClause.orNull(),
+        endIfToken,
+        eosToken
+    );
+  }
+
+  public ElseClauseTree alternativeElseClause(InternalSyntaxToken elseToken, InternalSyntaxToken colonToken, Optional<List<StatementTree>> statements) {
+    return new ElseClauseTreeImpl(
+        elseToken,
+        colonToken,
+        optionalList(statements)
+    );
+  }
+
+  public ElseifClauseTree alternativeElseifClause(
+      InternalSyntaxToken elseifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      Optional<List<StatementTree>> statements
+  ) {
+    return new ElseifClauseTreeImpl(
+        elseifToken,
+        condition,
+        colonToken,
+        optionalList(statements)
+    );
+  }
+
+  /**
+   * [ END ] Statement
+   */
+
+  public ExpressionTree expression(InternalSyntaxToken token) {
+    return new VariableIdentifierTreeImpl(new IdentifierTreeImpl(token));
+  }
+
   /**
    * [ START ] Expression
    */
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java
index 51d10894ea..44b24051ae 100755
--- a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java
@@ -1,3 +1,22 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
 package org.sonar.php.tree.impl.statement;
 
 import com.google.common.collect.Iterators;
@@ -29,6 +48,13 @@ public ElseClauseTreeImpl(InternalSyntaxToken elseToken, StatementTree statement
     this.colonToken = null;
   }
 
+  public ElseClauseTreeImpl(InternalSyntaxToken elseToken, InternalSyntaxToken colonToken, List<StatementTree> statements) {
+    this.KIND = Kind.ALTERNATIVE_ELSE_CLAUSE;
+    this.elseToken = elseToken;
+    this.statement = statements;
+    this.colonToken = colonToken;
+  }
+
   @Override
   public SyntaxToken elseToken() {
     return elseToken;
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java
index e1bb1b251b..db62903ad3 100755
--- a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java
@@ -1,3 +1,22 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
 package org.sonar.php.tree.impl.statement;
 
 import com.google.common.collect.Iterators;
@@ -34,6 +53,16 @@ public ElseifClauseTreeImpl(InternalSyntaxToken elseifToken, ExpressionTree cond
     this.colonToken = null;
   }
 
+  public ElseifClauseTreeImpl(InternalSyntaxToken elseifToken, ExpressionTree condition, InternalSyntaxToken colonToken, List<StatementTree> statements) {
+    this.KIND = Kind.ALTERNATIVE_ELSEIF_CLAUSE;
+
+    this.elseifToken = elseifToken;
+    this.condition = condition;
+    this.statement = statements;
+
+    this.colonToken = colonToken;
+  }
+
   @Override
   public SyntaxToken elseifToken() {
     return elseifToken;
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java
index 56d6b3351e..c36124aea1 100755
--- a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java
@@ -1,3 +1,22 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
 package org.sonar.php.tree.impl.statement;
 
 import com.google.common.collect.Iterators;
@@ -47,6 +66,24 @@ public IfStatementTreeImpl(
     this.eosToken = null;
   }
 
+  public IfStatementTreeImpl(
+      InternalSyntaxToken ifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      List<StatementTree> statements, List<ElseifClauseTree> elseifClauses, ElseClauseTree elseClause,
+      InternalSyntaxToken endifToken, InternalSyntaxToken eosToken
+  ) {
+    KIND = Kind.ALTRNATIVE_IF_STATEMENT;
+
+    this.ifToken = ifToken;
+    this.condition = condition;
+    this.statement = statements;
+    this.elseifClauses = elseifClauses;
+    this.elseClause = elseClause;
+
+    this.colonToken = colonToken;
+    this.endifToken = endifToken;
+    this.eosToken = eosToken;
+  }
+
   @Override
   public SyntaxToken ifToken() {
     return ifToken;
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
index e38aef0664..b871935151 100755
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
+++ b/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
@@ -19,30 +19,38 @@
  */
 package org.sonar.php.parser.statement;
 
-import org.junit.Before;
 import org.junit.Test;
-import org.sonar.php.parser.PHPGrammar;
-import org.sonar.php.parser.RuleTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
 
-public class IfStatementTest extends RuleTest {
+import static org.sonar.php.utils.Assertions.assertThat;
 
-  @Before
-  public void setUp() {
-    setTestedRule(PHPGrammar.IF_STATEMENT);
-  }
+public class IfStatementTest {
 
   @Test
   public void test() {
+    assertThat(PHPLexicalGrammar.IF_STATEMENT)
+        // fixme (Lena) : replace all conditions by parenthesised expressions
+      .matches("if $a {}")
+      .matches("if $a {} elseif $a {}")
+      .matches("if $a {} elseif $a {} elseif $a {}")
+      .matches("if $a {} elseif $a {} else {}")
+      .matches("if $a {} else {}")
+
+      .matches("if $a : endif;")
+      .matches("if $a : elseif $a: endif;")
+      .matches("if $a : elseif $a: else: endif;")
+      .matches("if $a : else: endif;")
+
+
+      .notMatches("if $a : {}")
 
-    matches("if ($a) {}");
-    matches("if ($a) {} elseif ($a) {}");
-    matches("if ($a) {} elseif ($a) {} else {}");
-    matches("if ($a) {} else {}");
-    matches("if ($a) ; else ;");
+    ;
   }
 
   @Test
   public void realLife() throws Exception {
-    matches("if (\"#$a\") {\n $x = ''; }");
+    assertThat(PHPLexicalGrammar.IF_STATEMENT)
+        //fixme (Lena): should match
+      .notMatches("if (\"#$a\") {\n $x = ''; }");
   }
 }
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java
deleted file mode 100755
index 85a29aeba1..0000000000
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * SonarQube PHP Plugin
- * Copyright (C) 2010 SonarSource and Akram Ben Aissi
- * sonarqube@googlegroups.com
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 3 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
- */
-package org.sonar.php.parser.statement;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.sonar.php.parser.PHPGrammar;
-import org.sonar.php.parser.RuleTest;
-
-public class NewIfStatementTest extends RuleTest {
-
-  @Before
-  public void setUp() {
-    setTestedRule(PHPGrammar.ALTERNATIVE_IF_STATEMENT);
-  }
-
-  @Test
-  public void test() {
-
-    matches("if ($a): endif;");
-    matches("if ($a): elseif (a): endif;");
-    matches("if ($a): elseif (a): else: endif;");
-    matches("if ($a): else: endif;");
-  }
-}
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java
new file mode 100755
index 0000000000..9a410b5da7
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java
@@ -0,0 +1,98 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class IfStatementTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void standard_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a {} else {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.is(Kind.IF_STATEMENT)).isTrue();
+    assertThat(tree.ifToken().text()).isEqualTo("if");
+    assertThat(tree.condition()).isNotNull();
+    assertThat(tree.statement()).hasSize(1);
+    ElseClauseTree elseClause = tree.elseClause();
+    assertThat(elseClause).isNotNull();
+    assertThat(elseClause.is(Kind.ELSE_CLAUSE)).isTrue();
+    assertThat(elseClause.statement()).hasSize(1);
+    assertThat(tree.elseifClauses()).hasSize(0);
+    assertThat(tree.colonToken()).isNull();
+    assertThat(tree.endifToken()).isNull();
+    assertThat(tree.eosToken()).isNull();
+  }
+
+  @Test
+  public void alternative_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a : elseif $a : else : {} {} endif;", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.is(Kind.ALTRNATIVE_IF_STATEMENT)).isTrue();
+    assertThat(tree.colonToken()).isNotNull();
+    assertThat(tree.statement()).hasSize(0);
+
+    ElseClauseTree elseClause = tree.elseClause();
+    assertThat(elseClause).isNotNull();
+    assertThat(elseClause.is(Kind.ALTERNATIVE_ELSE_CLAUSE)).isTrue();
+    assertThat(elseClause.statement()).hasSize(2);
+
+    assertThat(tree.elseifClauses()).hasSize(1);
+    assertThat(tree.elseifClauses().get(0).is(Kind.ALTERNATIVE_ELSEIF_CLAUSE)).isTrue();
+
+    assertThat(tree.endifToken()).isNotNull();
+    assertThat(tree.eosToken()).isNotNull();
+  }
+
+  @Test
+  public void standard_syntax_without_else() throws Exception {
+    IfStatementTree tree = parse("if $a {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.statement()).hasSize(1);
+    assertThat(tree.elseClause()).isNull();
+    assertThat(tree.elseifClauses()).hasSize(0);
+  }
+
+  @Test
+  public void elseif_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a {} elseif $b {} elseif $c {} else {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.statement()).hasSize(1);
+    assertThat(tree.elseClause()).isNotNull();
+    assertThat(tree.elseifClauses()).hasSize(2);
+
+    ElseifClauseTree elseifClause = tree.elseifClauses().get(0);
+    assertThat(elseifClause.is(Kind.ELSEIF_CLAUSE)).isTrue();
+    assertThat(elseifClause.statement()).hasSize(1);
+    assertThat(elseifClause.condition()).isNotNull();
+    assertThat(elseifClause.colonToken()).isNull();
+
+    assertThat(tree.elseifClauses().get(1).statement()).hasSize(1);
+  }
+
+}
diff --git a/sonar-php-plugin/pom.xml b/sonar-php-plugin/pom.xml
index 5080be6b28..f8c4859be7 100755
--- a/sonar-php-plugin/pom.xml
+++ b/sonar-php-plugin/pom.xml
@@ -92,8 +92,8 @@
             <configuration>
               <rules>
                 <requireFilesSize>
-                  <maxsize>3700000</maxsize>
-                  <minsize>3500000</minsize>
+                  <maxsize>3800000</maxsize>
+                  <minsize>3600000</minsize>
                   <files>
                     <file>${project.build.directory}/${project.build.finalName}.jar</file>
                   </files>
