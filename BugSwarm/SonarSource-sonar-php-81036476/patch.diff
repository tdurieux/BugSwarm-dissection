diff --git a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
index 73eb72e31..db8089aaf 100644
--- a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
@@ -32,11 +32,14 @@
 import org.sonar.plugins.php.api.tree.statement.BreakStatementTree;
 import org.sonar.plugins.php.api.tree.statement.CatchBlockTree;
 import org.sonar.plugins.php.api.tree.statement.ContinueStatementTree;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
 import org.sonar.plugins.php.api.tree.statement.EmptyStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ExpressionStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForEachStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForStatementTree;
 import org.sonar.plugins.php.api.tree.statement.GotoStatementTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
 import org.sonar.plugins.php.api.tree.statement.ReturnStatementTree;
 import org.sonar.plugins.php.api.tree.statement.StatementTree;
@@ -91,9 +94,8 @@ public StatementTree STATEMENT() {
     return b.<StatementTree>nonterminal(PHPLexicalGrammar.STATEMENT)
         .is(b.firstOf(
             BLOCK(),
-//            ALTERNATIVE_IF_STATEMENT(),
             THROW_STATEMENT(),
-//            IF_STATEMENT(),
+            IF_STATEMENT(),
 //            WHILE_STATEMENT(),
 //            DO_WHILE_STATEMENT(),
             FOREACH_STATEMENT(),
@@ -117,6 +119,76 @@ public StatementTree STATEMENT() {
         ));
   }
 
+  public IfStatementTree IF_STATEMENT() {
+    return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.IF_STATEMENT)
+        .is(b.firstOf(STANDARD_IF_STATEMENT(), ALTERNATIVE_IF_STATEMENT()));
+  }
+
+  public IfStatementTree STANDARD_IF_STATEMENT() {
+    return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.STANDARD_IF_STATEMENT)
+        .is(f.ifStatement(
+            b.token(PHPKeyword.IF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            STATEMENT(),
+            b.zeroOrMore(ELSEIF_CLAUSE()),
+            b.optional(ELSE_CLAUSE())
+        ));
+  }
+
+  public IfStatementTree ALTERNATIVE_IF_STATEMENT() {
+    return b.<IfStatementTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_IF_STATEMENT)
+        .is(f.alternativeIfStatement(
+            b.token(PHPKeyword.IF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT()),
+            b.zeroOrMore(ALTERNATIVE_ELSEIF_CLAUSE()),
+            b.optional(ALTERNATIVE_ELSE_CLAUSE()),
+            b.token(PHPKeyword.ENDIF),
+            EOS()
+        ));
+  }
+
+  public ElseClauseTree ELSE_CLAUSE() {
+    return b.<ElseClauseTree>nonterminal(PHPLexicalGrammar.ELSE_CLAUSE)
+        .is(f.elseClause(b.token(PHPKeyword.ELSE), STATEMENT()));
+  }
+
+  public ElseifClauseTree ELSEIF_CLAUSE() {
+    return b.<ElseifClauseTree>nonterminal(PHPLexicalGrammar.ELSEIF_CLAUSE)
+        .is(f.elseifClause(
+            b.token(PHPKeyword.ELSEIF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            STATEMENT()
+        ));
+  }
+
+  public ElseClauseTree ALTERNATIVE_ELSE_CLAUSE() {
+    return b.<ElseClauseTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_ELSE_CLAUSE)
+        .is(f.alternativeElseClause(
+            b.token(PHPKeyword.ELSE),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT())
+        ));
+  }
+
+  public ElseifClauseTree ALTERNATIVE_ELSEIF_CLAUSE() {
+    return b.<ElseifClauseTree>nonterminal(PHPLexicalGrammar.ALTERNATIVE_ELSEIF_CLAUSE)
+        .is(f.alternativeElseifClause(
+            b.token(PHPKeyword.ELSEIF),
+            //fixme (Lena) : should be PARENTHESIS_EXPRESSION
+            EXPRESSION(),
+            b.token(PHPPunctuator.COLON),
+            //fixme (Lena) : should be INNER_STATEMENT_LIST
+            b.zeroOrMore(STATEMENT())
+        ));
+  }
+
   public ForStatementTree FOR_STATEMENT() {
     return b.<ForStatementTree>nonterminal(PHPLexicalGrammar.FOR_STATEMENT)
         .is(b.firstOf(
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
index 0f213a224..8ef7e84c3 100644
--- a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
@@ -105,7 +105,7 @@
   ELSEIF_CLAUSE,
   ELSE_CLAUSE,
   ALTERNATIVE_IF_STATEMENT,
-  ALTERNATIVE_ELSEIF_LIST,
+  STANDARD_IF_STATEMENT,
   ALTERNATIVE_ELSEIF_CLAUSE,
   ALTERNATIVE_ELSE_CLAUSE,
   WHILE_STATEMENT,
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
index f9cee1a1d..d6ddbf4a5 100644
--- a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
@@ -30,6 +30,8 @@
 import org.sonar.php.tree.impl.statement.BreakStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.CatchBlockTreeImpl;
 import org.sonar.php.tree.impl.statement.ContinueStatementTreeImpl;
+import org.sonar.php.tree.impl.statement.ElseClauseTreeImpl;
+import org.sonar.php.tree.impl.statement.ElseifClauseTreeImpl;
 import org.sonar.php.tree.impl.statement.EmptyStatementImpl;
 import org.sonar.php.tree.impl.statement.ExpressionStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.ForEachStatementTreeImpl;
@@ -37,6 +39,7 @@
 import org.sonar.php.tree.impl.statement.ForStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.ForStatementTreeImpl.ForStatementHeader;
 import org.sonar.php.tree.impl.statement.GotoStatementTreeImpl;
+import org.sonar.php.tree.impl.statement.IfStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.LabelTreeImpl;
 import org.sonar.php.tree.impl.statement.ReturnStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.ThrowStatementTreeImpl;
@@ -49,11 +52,14 @@
 import org.sonar.plugins.php.api.tree.statement.BreakStatementTree;
 import org.sonar.plugins.php.api.tree.statement.CatchBlockTree;
 import org.sonar.plugins.php.api.tree.statement.ContinueStatementTree;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
 import org.sonar.plugins.php.api.tree.statement.EmptyStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ExpressionStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForEachStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForStatementTree;
 import org.sonar.plugins.php.api.tree.statement.GotoStatementTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
 import org.sonar.plugins.php.api.tree.statement.ReturnStatementTree;
 import org.sonar.plugins.php.api.tree.statement.StatementTree;
@@ -282,6 +288,58 @@ public ForStatementTree forStatementAlternative(
     return new SeparatedList(elements.build(), separators.build());
   }
 
+  public ElseClauseTree elseClause(InternalSyntaxToken elseToken, StatementTree statement) {
+    return new ElseClauseTreeImpl(elseToken, statement);
+  }
+
+  public IfStatementTree ifStatement(
+      InternalSyntaxToken ifToken, ExpressionTree expression, StatementTree statement,
+      Optional<List<ElseifClauseTree>> elseIfClauses, Optional<ElseClauseTree> elseClause
+  ) {
+    return new IfStatementTreeImpl(ifToken, expression, statement, optionalList(elseIfClauses), elseClause.orNull());
+  }
+
+  public ElseifClauseTree elseifClause(InternalSyntaxToken elseifToken, ExpressionTree condition, StatementTree statement) {
+    return new ElseifClauseTreeImpl(elseifToken, condition, statement);
+  }
+
+  public IfStatementTree alternativeIfStatement(
+      InternalSyntaxToken ifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      Optional<List<StatementTree>> statements, Optional<List<ElseifClauseTree>> elseifClauses, Optional<ElseClauseTree> elseClause,
+      InternalSyntaxToken endIfToken, InternalSyntaxToken eosToken
+  ) {
+    return new IfStatementTreeImpl(
+        ifToken,
+        condition,
+        colonToken,
+        optionalList(statements),
+        optionalList(elseifClauses),
+        elseClause.orNull(),
+        endIfToken,
+        eosToken
+    );
+  }
+
+  public ElseClauseTree alternativeElseClause(InternalSyntaxToken elseToken, InternalSyntaxToken colonToken, Optional<List<StatementTree>> statements) {
+    return new ElseClauseTreeImpl(
+        elseToken,
+        colonToken,
+        optionalList(statements)
+    );
+  }
+
+  public ElseifClauseTree alternativeElseifClause(
+      InternalSyntaxToken elseifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      Optional<List<StatementTree>> statements
+  ) {
+    return new ElseifClauseTreeImpl(
+        elseifToken,
+        condition,
+        colonToken,
+        optionalList(statements)
+    );
+  }
+
   /**
    * [ END ] Statement
    */
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java
new file mode 100644
index 000000000..44b24051a
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseClauseTreeImpl.java
@@ -0,0 +1,91 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class ElseClauseTreeImpl extends PHPTree implements ElseClauseTree {
+
+  private final Kind KIND;
+
+  private final InternalSyntaxToken elseToken;
+  private final InternalSyntaxToken colonToken;
+  private final List<StatementTree> statement;
+
+  public ElseClauseTreeImpl(InternalSyntaxToken elseToken, StatementTree statement) {
+    this.KIND = Kind.ELSE_CLAUSE;
+    this.elseToken = elseToken;
+    this.statement = Collections.singletonList(statement);
+    this.colonToken = null;
+  }
+
+  public ElseClauseTreeImpl(InternalSyntaxToken elseToken, InternalSyntaxToken colonToken, List<StatementTree> statements) {
+    this.KIND = Kind.ALTERNATIVE_ELSE_CLAUSE;
+    this.elseToken = elseToken;
+    this.statement = statements;
+    this.colonToken = colonToken;
+  }
+
+  @Override
+  public SyntaxToken elseToken() {
+    return elseToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken colonToken() {
+    return colonToken;
+  }
+
+  @Override
+  public List<StatementTree> statement() {
+    return statement;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(elseToken, colonToken),
+        statement.iterator()
+    );
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitElseClause(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java
new file mode 100644
index 000000000..db62903ad
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/ElseifClauseTreeImpl.java
@@ -0,0 +1,104 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class ElseifClauseTreeImpl extends PHPTree implements ElseifClauseTree {
+
+  private final Kind KIND;
+
+  private final InternalSyntaxToken elseifToken;
+  private final ExpressionTree condition;
+  private final InternalSyntaxToken colonToken;
+  private final List<StatementTree> statement;
+
+  public ElseifClauseTreeImpl(InternalSyntaxToken elseifToken, ExpressionTree condition, StatementTree statement) {
+    this.KIND = Kind.ELSEIF_CLAUSE;
+
+    this.elseifToken = elseifToken;
+    this.condition = condition;
+    this.statement = Collections.singletonList(statement);
+
+    this.colonToken = null;
+  }
+
+  public ElseifClauseTreeImpl(InternalSyntaxToken elseifToken, ExpressionTree condition, InternalSyntaxToken colonToken, List<StatementTree> statements) {
+    this.KIND = Kind.ALTERNATIVE_ELSEIF_CLAUSE;
+
+    this.elseifToken = elseifToken;
+    this.condition = condition;
+    this.statement = statements;
+
+    this.colonToken = colonToken;
+  }
+
+  @Override
+  public SyntaxToken elseifToken() {
+    return elseifToken;
+  }
+
+  @Override
+  public ExpressionTree condition() {
+    return condition;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken colonToken() {
+    return colonToken;
+  }
+
+  @Override
+  public List<StatementTree> statement() {
+    return statement;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(elseifToken, condition, colonToken),
+        statement.iterator()
+    );
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitElseifClause(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java
new file mode 100644
index 000000000..c36124aea
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/IfStatementTreeImpl.java
@@ -0,0 +1,150 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+
+public class IfStatementTreeImpl extends PHPTree implements IfStatementTree {
+
+  private final Kind KIND;
+
+  private final InternalSyntaxToken ifToken;
+  private final ExpressionTree condition;
+  private final InternalSyntaxToken colonToken;
+  private final List<StatementTree> statement;
+  private final List<ElseifClauseTree> elseifClauses;
+  private final ElseClauseTree elseClause;
+  private final InternalSyntaxToken endifToken;
+  private final InternalSyntaxToken eosToken;
+
+  public IfStatementTreeImpl(
+      InternalSyntaxToken ifToken, ExpressionTree condition, StatementTree statement,
+      List<ElseifClauseTree> elseifClauses, ElseClauseTree elseClause
+  ) {
+    KIND = Kind.IF_STATEMENT;
+
+    this.ifToken = ifToken;
+    this.condition = condition;
+    this.statement = Collections.singletonList(statement);
+    this.elseifClauses = elseifClauses;
+    this.elseClause = elseClause;
+
+    this.colonToken = null;
+    this.endifToken = null;
+    this.eosToken = null;
+  }
+
+  public IfStatementTreeImpl(
+      InternalSyntaxToken ifToken, ExpressionTree condition, InternalSyntaxToken colonToken,
+      List<StatementTree> statements, List<ElseifClauseTree> elseifClauses, ElseClauseTree elseClause,
+      InternalSyntaxToken endifToken, InternalSyntaxToken eosToken
+  ) {
+    KIND = Kind.ALTRNATIVE_IF_STATEMENT;
+
+    this.ifToken = ifToken;
+    this.condition = condition;
+    this.statement = statements;
+    this.elseifClauses = elseifClauses;
+    this.elseClause = elseClause;
+
+    this.colonToken = colonToken;
+    this.endifToken = endifToken;
+    this.eosToken = eosToken;
+  }
+
+  @Override
+  public SyntaxToken ifToken() {
+    return ifToken;
+  }
+
+  @Override
+  public ExpressionTree condition() {
+    return condition;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken colonToken() {
+    return colonToken;
+  }
+
+  @Override
+  public List<StatementTree> statement() {
+    return statement;
+  }
+
+  @Override
+  public List<ElseifClauseTree> elseifClauses() {
+    return elseifClauses;
+  }
+
+  @Nullable
+  @Override
+  public ElseClauseTree elseClause() {
+    return elseClause;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken endifToken() {
+    return endifToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken eosToken() {
+    return eosToken;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(ifToken, condition, colonToken),
+        statement.iterator(),
+        elseifClauses.iterator(),
+        Iterators.forArray(elseClause, endifToken, eosToken)
+    );
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitIfStatement(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseClauseTree.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseClauseTree.java
index 5d5abb0ba..a3d0d66ac 100644
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseClauseTree.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseClauseTree.java
@@ -28,12 +28,12 @@
 @Beta
 public interface ElseClauseTree extends StatementTree {
 
-  SyntaxToken elseKeyword();
+  SyntaxToken elseToken();
 
   @Nullable
   SyntaxToken colonToken();
 
-  List<StatementTree> statements();
+  List<StatementTree> statement();
 
 }
 
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseifClauseTree.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseifClauseTree.java
index 5919d98e3..a26afe429 100644
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseifClauseTree.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/ElseifClauseTree.java
@@ -20,7 +20,7 @@
 package org.sonar.plugins.php.api.tree.statement;
 
 import com.google.common.annotations.Beta;
-import org.sonar.plugins.php.api.tree.expression.ParenthesisedExpressionTree;
+import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
 import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
 
 import javax.annotation.Nullable;
@@ -31,12 +31,13 @@
 
   SyntaxToken elseifToken();
 
-  ParenthesisedExpressionTree condition();
+  // fixme (Lena) : should be ParenthesisedExpressionTree
+  ExpressionTree condition();
 
   @Nullable
   SyntaxToken colonToken();
 
-  List<StatementTree> statements();
+  List<StatementTree> statement();
 
 }
 
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java
index f0501c570..536699c1b 100644
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/IfStatementTree.java
@@ -20,8 +20,7 @@
 package org.sonar.plugins.php.api.tree.statement;
 
 import com.google.common.annotations.Beta;
-import org.sonar.plugins.php.api.tree.Tree;
-import org.sonar.plugins.php.api.tree.expression.ParenthesisedExpressionTree;
+import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
 import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
 
 import javax.annotation.Nullable;
@@ -35,21 +34,21 @@
 
   SyntaxToken ifToken();
 
-  ParenthesisedExpressionTree condition();
+  // fixme (Lena) : should be ParenthesisedExpressionTree
+  ExpressionTree condition();
 
   @Nullable
   SyntaxToken colonToken();
 
-  List<Tree> statements();
+  List<StatementTree> statement();
 
-  @Nullable
   List<ElseifClauseTree> elseifClauses();
 
   @Nullable
   ElseClauseTree elseClause();
 
   @Nullable
-  SyntaxToken endIfToken();
+  SyntaxToken endifToken();
 
   @Nullable
   SyntaxToken eosToken();
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
index c368734a5..2699829b3 100644
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
@@ -27,11 +27,14 @@
 import org.sonar.plugins.php.api.tree.statement.BreakStatementTree;
 import org.sonar.plugins.php.api.tree.statement.CatchBlockTree;
 import org.sonar.plugins.php.api.tree.statement.ContinueStatementTree;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
 import org.sonar.plugins.php.api.tree.statement.EmptyStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ExpressionStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForEachStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ForStatementTree;
 import org.sonar.plugins.php.api.tree.statement.GotoStatementTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
 import org.sonar.plugins.php.api.tree.statement.ReturnStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ThrowStatementTree;
@@ -55,6 +58,12 @@
    * [ START ] Statement
    */
 
+  void visitElseifClause(ElseifClauseTree tree);
+
+  void visitIfStatement(IfStatementTree tree);
+
+  void visitElseClause(ElseClauseTree tree);
+
   void visitBlock(BlockTree tree);
 
   void visitForStatement(ForStatementTree tree);
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
index e38aef066..b87193515 100644
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
+++ b/php-frontend/src/test/java/org/sonar/php/parser/statement/IfStatementTest.java
@@ -19,30 +19,38 @@
  */
 package org.sonar.php.parser.statement;
 
-import org.junit.Before;
 import org.junit.Test;
-import org.sonar.php.parser.PHPGrammar;
-import org.sonar.php.parser.RuleTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
 
-public class IfStatementTest extends RuleTest {
+import static org.sonar.php.utils.Assertions.assertThat;
 
-  @Before
-  public void setUp() {
-    setTestedRule(PHPGrammar.IF_STATEMENT);
-  }
+public class IfStatementTest {
 
   @Test
   public void test() {
+    assertThat(PHPLexicalGrammar.IF_STATEMENT)
+        // fixme (Lena) : replace all conditions by parenthesised expressions
+      .matches("if $a {}")
+      .matches("if $a {} elseif $a {}")
+      .matches("if $a {} elseif $a {} elseif $a {}")
+      .matches("if $a {} elseif $a {} else {}")
+      .matches("if $a {} else {}")
+
+      .matches("if $a : endif;")
+      .matches("if $a : elseif $a: endif;")
+      .matches("if $a : elseif $a: else: endif;")
+      .matches("if $a : else: endif;")
+
+
+      .notMatches("if $a : {}")
 
-    matches("if ($a) {}");
-    matches("if ($a) {} elseif ($a) {}");
-    matches("if ($a) {} elseif ($a) {} else {}");
-    matches("if ($a) {} else {}");
-    matches("if ($a) ; else ;");
+    ;
   }
 
   @Test
   public void realLife() throws Exception {
-    matches("if (\"#$a\") {\n $x = ''; }");
+    assertThat(PHPLexicalGrammar.IF_STATEMENT)
+        //fixme (Lena): should match
+      .notMatches("if (\"#$a\") {\n $x = ''; }");
   }
 }
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java
deleted file mode 100644
index 85a29aeba..000000000
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/NewIfStatementTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * SonarQube PHP Plugin
- * Copyright (C) 2010 SonarSource and Akram Ben Aissi
- * sonarqube@googlegroups.com
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 3 of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
- */
-package org.sonar.php.parser.statement;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.sonar.php.parser.PHPGrammar;
-import org.sonar.php.parser.RuleTest;
-
-public class NewIfStatementTest extends RuleTest {
-
-  @Before
-  public void setUp() {
-    setTestedRule(PHPGrammar.ALTERNATIVE_IF_STATEMENT);
-  }
-
-  @Test
-  public void test() {
-
-    matches("if ($a): endif;");
-    matches("if ($a): elseif (a): endif;");
-    matches("if ($a): elseif (a): else: endif;");
-    matches("if ($a): else: endif;");
-  }
-}
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java
new file mode 100644
index 000000000..9a410b5da
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/IfStatementTreeTest.java
@@ -0,0 +1,98 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
+import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class IfStatementTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void standard_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a {} else {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.is(Kind.IF_STATEMENT)).isTrue();
+    assertThat(tree.ifToken().text()).isEqualTo("if");
+    assertThat(tree.condition()).isNotNull();
+    assertThat(tree.statement()).hasSize(1);
+    ElseClauseTree elseClause = tree.elseClause();
+    assertThat(elseClause).isNotNull();
+    assertThat(elseClause.is(Kind.ELSE_CLAUSE)).isTrue();
+    assertThat(elseClause.statement()).hasSize(1);
+    assertThat(tree.elseifClauses()).hasSize(0);
+    assertThat(tree.colonToken()).isNull();
+    assertThat(tree.endifToken()).isNull();
+    assertThat(tree.eosToken()).isNull();
+  }
+
+  @Test
+  public void alternative_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a : elseif $a : else : {} {} endif;", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.is(Kind.ALTRNATIVE_IF_STATEMENT)).isTrue();
+    assertThat(tree.colonToken()).isNotNull();
+    assertThat(tree.statement()).hasSize(0);
+
+    ElseClauseTree elseClause = tree.elseClause();
+    assertThat(elseClause).isNotNull();
+    assertThat(elseClause.is(Kind.ALTERNATIVE_ELSE_CLAUSE)).isTrue();
+    assertThat(elseClause.statement()).hasSize(2);
+
+    assertThat(tree.elseifClauses()).hasSize(1);
+    assertThat(tree.elseifClauses().get(0).is(Kind.ALTERNATIVE_ELSEIF_CLAUSE)).isTrue();
+
+    assertThat(tree.endifToken()).isNotNull();
+    assertThat(tree.eosToken()).isNotNull();
+  }
+
+  @Test
+  public void standard_syntax_without_else() throws Exception {
+    IfStatementTree tree = parse("if $a {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.statement()).hasSize(1);
+    assertThat(tree.elseClause()).isNull();
+    assertThat(tree.elseifClauses()).hasSize(0);
+  }
+
+  @Test
+  public void elseif_syntax() throws Exception {
+    IfStatementTree tree = parse("if $a {} elseif $b {} elseif $c {} else {}", PHPLexicalGrammar.IF_STATEMENT);
+
+    assertThat(tree.statement()).hasSize(1);
+    assertThat(tree.elseClause()).isNotNull();
+    assertThat(tree.elseifClauses()).hasSize(2);
+
+    ElseifClauseTree elseifClause = tree.elseifClauses().get(0);
+    assertThat(elseifClause.is(Kind.ELSEIF_CLAUSE)).isTrue();
+    assertThat(elseifClause.statement()).hasSize(1);
+    assertThat(elseifClause.condition()).isNotNull();
+    assertThat(elseifClause.colonToken()).isNull();
+
+    assertThat(tree.elseifClauses().get(1).statement()).hasSize(1);
+  }
+
+}
diff --git a/sonar-php-plugin/pom.xml b/sonar-php-plugin/pom.xml
index 5080be6b2..f8c4859be 100644
--- a/sonar-php-plugin/pom.xml
+++ b/sonar-php-plugin/pom.xml
@@ -92,8 +92,8 @@
             <configuration>
               <rules>
                 <requireFilesSize>
-                  <maxsize>3700000</maxsize>
-                  <minsize>3500000</minsize>
+                  <maxsize>3800000</maxsize>
+                  <minsize>3600000</minsize>
                   <files>
                     <file>${project.build.directory}/${project.build.finalName}.jar</file>
                   </files>
