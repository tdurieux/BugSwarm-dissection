diff --git a/build.gradle b/build.gradle
index 4bab5b5cf3..ab16b2cac3 100755
--- a/build.gradle
+++ b/build.gradle
@@ -38,21 +38,6 @@ task wrapper(type: Wrapper) {
 sourceCompatibility = 1.8
 targetCompatibility = 1.8
 
-/* Gradle's build script */
-buildscript {
-  repositories {
-    mavenCentral()
-    maven {
-      url "https://plugins.gradle.org/m2/"
-    }
-  }
-
-  dependencies {
-    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.0'
-    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2"
-  }
-}
-
 /* Tell gradle where the source code is located. */
 sourceSets {
   /* Code for main */
@@ -78,16 +63,12 @@ tasks.eclipseClasspath.dependsOn cleanEclipseClasspath
 task format(type: GoogleJavaFormat) {
   source 'src'
   source 'test'
-  source 'systemtest'
-  source 'speedtest'
   include '**/*.java'
 }
 
 task verifyFormatting(type: VerifyGoogleJavaFormat) {
   source 'src'
   source 'test'
-  source 'systemtest'
-  source 'speedtest'
   include '**/*.java'
 }
 /* Test if all *.java have been formatted. Run ./gradlew format to format all */
@@ -101,6 +82,7 @@ test.dependsOn verifyFormatting
 /* Where we will fetch external JAR files from. */
 repositories {
   /* We need to override the official Apache repo for our custom Hadoop jars */
+  /* TODO: remove when we upgrade to Hadoop 2.8 (fixes HADOOP-12807) */
   maven { url "https://raw.github.com/uwescience/hadoop/mvn-repo" }
   mavenCentral() /* The standard Java Maven repository. */
   maven { url "http://clojars.org/repo" } /* Clojars, for MonetDB */
@@ -112,7 +94,7 @@ repositories {
   /* Our private maven repo for our REEF fork */
   maven { url "https://raw.github.com/uwescience/reef/mvn-repo" }
 
-  /* Needed to find local REEF builds installed in the local Maven repo. */ 
+  /* For local REEF builds installed in the local Maven repo. */
   /* mavenLocal() */
 }
 
@@ -129,6 +111,7 @@ ext.swaggerMinorVersion = "1.3.11"
 ext.jmxetricsVersion = "1.0.8"
 ext.reefVersion = "0.15.0"
 /* for local or development REEF builds */
+/* ext.reefVersion = "0.16.0-SNAPSHOT" */
 ext.hadoopVersion = "2.7.2"
 
 dependencies {
@@ -193,7 +176,7 @@ dependencies {
   compile "org.codehaus.janino:janino:2.7.7"
 
   compile "org.postgresql:postgresql:9.4-1202-jdbc41"
-  
+
   compile("org.apache.reef:reef-project:${reefVersion}") { changing = true }
   compile("org.apache.reef:reef-common:${reefVersion}") { changing = true }
   compile("org.apache.reef:reef-runtime-local:${reefVersion}") { changing = true }
@@ -287,14 +270,14 @@ jar {
   }
 }
 
-/* Apache license files will cause weird issues on case-insensitive filesystems like Mac HFS */
+/* Build the uberjar containing all our dependencies */
 shadowJar {
+  /* Without this option: "org.apache.tools.zip.Zip64RequiredException: archive contains more than 65535 entries." */
+  zip64 true
+  /* Apache license files will cause weird issues on case-insensitive filesystems like Mac HFS */
   exclude "LICENSE", "META-INF/*.RSA", "META-INF/*.SF","META-INF/*.DSA", "META-INF/license"
   transform(ApacheLicenseResourceTransformer)
-}
-
-/* Some of our deps conflict with old versions in Hadoop distro */
-shadowJar {
+  /* Some of our deps conflict with old versions in Hadoop distro */
   relocate 'com.google.common', 'myriadeps.com.google.common'
   relocate 'javax.ws.rs', 'myriadeps.javax.ws.rs'
 }
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index c97a8bdb90..13372aef5e 100755
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 83327289ef..f96fa26986 100755
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,4 +1,4 @@
-#Thu Mar 05 11:59:27 PST 2015
+#Wed Jun 08 14:06:49 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
diff --git a/gradlew b/gradlew
index 91a7e269e1..9d82f78915 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/src/edu/washington/escience/myria/api/MasterApplication.java b/src/edu/washington/escience/myria/api/MasterApplication.java
index d05f3c3a6f..282dca442f 100755
--- a/src/edu/washington/escience/myria/api/MasterApplication.java
+++ b/src/edu/washington/escience/myria/api/MasterApplication.java
@@ -62,7 +62,6 @@ public MasterApplication(final Server server, final String adminPassword) {
           protected void configure() {
             /* Singletons binding. */
             bind(server).to(Server.class);
-            bind(daemon).to(MasterDaemon.class);
           }
         });
 
diff --git a/src/edu/washington/escience/myria/io/UriSink.java b/src/edu/washington/escience/myria/io/UriSink.java
index b160597bb2..f1d028278e 100755
--- a/src/edu/washington/escience/myria/io/UriSink.java
+++ b/src/edu/washington/escience/myria/io/UriSink.java
@@ -18,7 +18,7 @@
   /** Required for Java serialization. */
   private static final long serialVersionUID = 1L;
 
-  @JsonProperty private final URI uri;
+  @JsonProperty private URI uri;
 
   public UriSink(@JsonProperty(value = "uri", required = true) final String uri)
       throws CatalogException, URISyntaxException {
diff --git a/src/edu/washington/escience/myria/parallel/Server.java b/src/edu/washington/escience/myria/parallel/Server.java
index 8bf9272afb..2bb8c9628d 100755
--- a/src/edu/washington/escience/myria/parallel/Server.java
+++ b/src/edu/washington/escience/myria/parallel/Server.java
@@ -654,12 +654,6 @@ public void start() throws Exception {
             new RenamingThreadFactory("Master global timer"));
     scheduledTaskExecutor.scheduleAtFixedRate(
         new DebugHelper(), DebugHelper.INTERVAL, DebugHelper.INTERVAL, TimeUnit.MILLISECONDS);
-    scheduledTaskExecutor.scheduleAtFixedRate(
-        new WorkerLivenessChecker(),
-        MyriaConstants.WORKER_LIVENESS_CHECKER_INTERVAL,
-        MyriaConstants.WORKER_LIVENESS_CHECKER_INTERVAL,
-        TimeUnit.MILLISECONDS);
-
     messageProcessingExecutor =
         Executors.newCachedThreadPool(new RenamingThreadFactory("Master message processor"));
     serverQueryExecutor =
@@ -1018,7 +1012,7 @@ public DatasetStatus deleteDataset(final RelationKey relationKey)
    * @throws InterruptedException interrupted
    */
   public long persistDataset(final RelationKey relationKey)
-      throws DbException, InterruptedException {
+      throws DbException, InterruptedException, URISyntaxException {
     long queryID;
 
     /* Mark the relation as is_persistent */
diff --git a/src/edu/washington/escience/myria/parallel/Worker.java b/src/edu/washington/escience/myria/parallel/Worker.java
index 5574de6680..48e985aefe 100755
--- a/src/edu/washington/escience/myria/parallel/Worker.java
+++ b/src/edu/washington/escience/myria/parallel/Worker.java
@@ -554,7 +554,6 @@ public Worker(
     execEnvVars = new ConcurrentHashMap<String, Object>();
 
     final Map<Integer, SocketInfo> computingUnits =
-        MyriaConfiguration.loadWithDefaultValues(
         getComputingUnits(masterHost, masterPort, workerConfs);
 
     workerAddRemoveLock = Striped.lock(workerConfs.size());
diff --git a/src/edu/washington/escience/myria/util/IPCUtils.java b/src/edu/washington/escience/myria/util/IPCUtils.java
index a53eb59c21..5c5d45bf3d 100755
--- a/src/edu/washington/escience/myria/util/IPCUtils.java
+++ b/src/edu/washington/escience/myria/util/IPCUtils.java
@@ -144,7 +144,8 @@ public static TransportMessage removeWorkerTM(
     }
     return TransportMessage.newBuilder()
         .setType(TransportMessage.Type.CONTROL)
-        .setControlMessage(cmBuilder.build()))        .build();
+        .setControlMessage(cmBuilder.build())
+        .build();
   }
 
   /**
@@ -196,7 +197,8 @@ public static TransportMessage addWorkerAckTM(final int workerId) {
             .setWorkerId(workerId);
     return TransportMessage.newBuilder()
         .setType(TransportMessage.Type.CONTROL)
-        .setControlMessage(cmBuilder.build()))        .build();
+        .setControlMessage(cmBuilder.build())
+        .build();
   }
 
   /**
