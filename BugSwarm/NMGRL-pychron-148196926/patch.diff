diff --git a/pychron/external_pipette/tasks/external_pipette_plugin.py b/pychron/external_pipette/tasks/external_pipette_plugin.py
index 16248cf45e..5654b574f6 100755
--- a/pychron/external_pipette/tasks/external_pipette_plugin.py
+++ b/pychron/external_pipette/tasks/external_pipette_plugin.py
@@ -18,8 +18,6 @@
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import List
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.external_pipette.protocol import IPipetteManager
 from pychron.external_pipette.tasks.external_pipette_task import ExternalPipetteTask
@@ -64,7 +62,7 @@ def _tasks_default(self):
                             accelerator='Ctrl+Shift+0')]
 
     def _task_factory(self):
-        t = ExternalPipetteTask(manager=self._manager)
+        t = ExternalPipetteTask(manager=self._manager, application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/extraction_line/status_monitor.py b/pychron/extraction_line/status_monitor.py
index 403b4d7164..d75276e825 100755
--- a/pychron/extraction_line/status_monitor.py
+++ b/pychron/extraction_line/status_monitor.py
@@ -40,6 +40,7 @@ class StatusMonitor(Loggable):
     #     self._clients = []
 
     def start(self, oid, vm):
+        self.debug('start {}'.format(oid))
         if not self._clients:
             p = self.update_period
             s, c, l, o = self.state_freq, self.checksum_freq, self.lock_freq, self.owner_freq
@@ -66,6 +67,7 @@ def isAlive(self):
             return not self._stop_evt.isSet()
 
     def stop(self, oid):
+        self.debug('stop {}'.format(oid))
         try:
             self._clients.remove(oid)
         except ValueError:
diff --git a/pychron/extraction_line/tasks/extraction_line_plugin.py b/pychron/extraction_line/tasks/extraction_line_plugin.py
index c0326967f6..771a9abf39 100755
--- a/pychron/extraction_line/tasks/extraction_line_plugin.py
+++ b/pychron/extraction_line/tasks/extraction_line_plugin.py
@@ -15,29 +15,28 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
+import os
+
 from envisage.extension_point import ExtensionPoint
 from envisage.ui.tasks.task_extension import TaskExtension
 from envisage.ui.tasks.task_factory import TaskFactory
 from pyface.tasks.action.schema import SMenu
 from pyface.tasks.action.schema_addition import SchemaAddition
 from traits.api import List, Dict
-# ============= standard library imports ========================
-import os
-# ============= local library imports  ==========================
+
 from pychron.core.helpers.filetools import list_directory2
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.envisage.tasks.list_actions import ProcedureAction
 from pychron.extraction_line.extraction_line_manager import ExtractionLineManager
 from pychron.extraction_line.ipyscript_runner import IPyScriptRunner
 from pychron.extraction_line.pyscript_runner import PyScriptRunner
-from pychron.extraction_line.tasks.extraction_line_task import ExtractionLineTask
 from pychron.extraction_line.tasks.extraction_line_actions import RefreshCanvasAction
 from pychron.extraction_line.tasks.extraction_line_preferences import ExtractionLinePreferencesPane, \
     ConsolePreferencesPane
+from pychron.extraction_line.tasks.extraction_line_task import ExtractionLineTask
 from pychron.paths import paths
 
 
-
 def procedure_action(name, application):
     a = ProcedureAction(id='procedures.action.{}'.format(name),
                         name=name.capitalize(),
@@ -141,7 +140,7 @@ def _tasks_default(self):
 
     def _task_factory(self):
         elm = self.application.get_service(ExtractionLineManager)
-        t = ExtractionLineTask(manager=elm)
+        t = ExtractionLineTask(manager=elm, application=self.application)
         return t
 
     def _preferences_panes_default(self):
diff --git a/pychron/furnace/tasks/furnace_plugin.py b/pychron/furnace/tasks/furnace_plugin.py
index 7d3b9093ef..a383fc91d9 100755
--- a/pychron/furnace/tasks/furnace_plugin.py
+++ b/pychron/furnace/tasks/furnace_plugin.py
@@ -17,8 +17,7 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import List
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.furnace.ifurnace_manager import IFurnaceManager
 from pychron.furnace.tasks.preferences import NMGRLFurnacePreferencesPane
@@ -44,7 +43,8 @@ def _manager_factory(self):
         return m
 
     def _task_factory(self):
-        return FurnaceTask(manager=self._get_manager())
+        return FurnaceTask(manager=self._get_manager(),
+                           application=self.application)
 
     def _get_manager(self):
         return self.application.get_service(IFurnaceManager, 'name=="{}"'.format(self.name))
diff --git a/pychron/lasers/tasks/plugins/chromium_co2.py b/pychron/lasers/tasks/plugins/chromium_co2.py
index d62d3d1d38..0ff615fc2e 100755
--- a/pychron/lasers/tasks/plugins/chromium_co2.py
+++ b/pychron/lasers/tasks/plugins/chromium_co2.py
@@ -17,8 +17,6 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.lasers.tasks.plugins.laser_plugin import BaseLaserPlugin
 
 
@@ -37,7 +35,7 @@ def test_communication(self):
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import ChromiumCO2Task
 
-        t = ChromiumCO2Task(manager=self._get_manager())
+        t = ChromiumCO2Task(manager=self._get_manager(), application=self.application)
         return t
 
     def _tasks_default(self):
diff --git a/pychron/lasers/tasks/plugins/co2.py b/pychron/lasers/tasks/plugins/co2.py
index 228c3cef6b..7ebc2a560c 100755
--- a/pychron/lasers/tasks/plugins/co2.py
+++ b/pychron/lasers/tasks/plugins/co2.py
@@ -15,12 +15,7 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from envisage.ui.tasks.task_extension import TaskExtension
-from pyface.action.group import Group
-from pyface.tasks.action.schema_addition import SchemaAddition
 
-from pychron.lasers.tasks.laser_actions import PowerMapAction, \
-    PowerCalibrationAction, ExecutePatternAction, ExecuteAndLasePatternAction
 from pychron.lasers.tasks.laser_preferences import FusionsCO2PreferencesPane
 from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
 
@@ -39,7 +34,7 @@ class FusionsCO2Plugin(FusionsPlugin):
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsCO2Task
 
-        t = FusionsCO2Task(manager=self._get_manager())
+        t = FusionsCO2Task(manager=self._get_manager(), application=self.application)
         return t
 
     def _preferences_panes_default(self):
diff --git a/pychron/lasers/tasks/plugins/diode.py b/pychron/lasers/tasks/plugins/diode.py
index 01e1502024..0e7c49ebdb 100755
--- a/pychron/lasers/tasks/plugins/diode.py
+++ b/pychron/lasers/tasks/plugins/diode.py
@@ -64,7 +64,7 @@ def _preferences_panes_default(self):
 
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsDiodeTask
-        t = FusionsDiodeTask(manager=self._get_manager())
+        t = FusionsDiodeTask(manager=self._get_manager(), application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/lasers/tasks/plugins/uv.py b/pychron/lasers/tasks/plugins/uv.py
index 0f42bf0d5b..e5cb093ac0 100755
--- a/pychron/lasers/tasks/plugins/uv.py
+++ b/pychron/lasers/tasks/plugins/uv.py
@@ -16,10 +16,9 @@
 
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_extension import TaskExtension
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
-from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
+
 from pychron.lasers.tasks.laser_preferences import FusionsUVPreferencesPane
+from pychron.lasers.tasks.plugins.laser_plugin import FusionsPlugin
 
 
 class FusionsUVPlugin(FusionsPlugin):
@@ -41,7 +40,7 @@ def _preferences_panes_default(self):
 
     def _task_factory(self):
         from pychron.lasers.tasks.laser_task import FusionsUVTask
-        t = FusionsUVTask(manager=self._get_manager())
+        t = FusionsUVTask(manager=self._get_manager(), application=self.application)
         return t
 
 # ============= EOF =============================================
diff --git a/pychron/logger/tasks/logger_plugin.py b/pychron/logger/tasks/logger_plugin.py
index 2370bd8267..98eb6b4852 100755
--- a/pychron/logger/tasks/logger_plugin.py
+++ b/pychron/logger/tasks/logger_plugin.py
@@ -18,8 +18,7 @@
 from envisage.ui.tasks.task_extension import TaskExtension
 from envisage.ui.tasks.task_factory import TaskFactory
 from pyface.tasks.action.schema_addition import SchemaAddition
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.logger.tasks.actions import LogViewerAction, CurrentLogViewerAction
 from pychron.logger.tasks.logger_task import LoggerTask
@@ -35,7 +34,7 @@ def _tasks_default(self):
                             name='Logger')]
 
     def _task_factory(self):
-        return LoggerTask()
+        return LoggerTask(application=self.application)
 
     def _task_extensions_default(self):
         return [TaskExtension(actions=[SchemaAddition(factory=LogViewerAction,
diff --git a/pychron/pipeline/tables/xlsx_table_writer.py b/pychron/pipeline/tables/xlsx_table_writer.py
index be72fe5073..28332ca564 100755
--- a/pychron/pipeline/tables/xlsx_table_writer.py
+++ b/pychron/pipeline/tables/xlsx_table_writer.py
@@ -369,6 +369,13 @@ def _get_summary_columns(self):
                 ]
         return cols
 
+        view = self._options.auto_view
+        if not view:
+            view = confirm(None, 'Table saved to {}\n\nView Table?'.format(path)) == YES
+
+        if view:
+            view_file(path, application='Microsoft Office 2011/Microsoft Excel')
+
     def _make_unknowns(self, unks):
         self._make_sheet(unks, 'Unknowns')
 
diff --git a/pychron/pyscripts/tasks/pyscript_plugin.py b/pychron/pyscripts/tasks/pyscript_plugin.py
index b16ab5859e..bf684a94a2 100755
--- a/pychron/pyscripts/tasks/pyscript_plugin.py
+++ b/pychron/pyscripts/tasks/pyscript_plugin.py
@@ -22,8 +22,6 @@
 from pyface.tasks.action.schema_addition import SchemaAddition
 from pyface.tasks.action.task_action import TaskAction
 
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.pyscripts.tasks.pyscript_actions import OpenPyScriptAction, \
     NewPyScriptAction, OpenHopsEditorAction, NewHopsEditorAction
@@ -89,12 +87,12 @@ def _tasks_default(self):
     def _visual_task_factory(self):
         from pychron.pyscripts.tasks.visual_el_programmer.visual_el_programmer_task import VisualElProgrammerTask
 
-        return VisualElProgrammerTask()
+        return VisualElProgrammerTask(application=self.application)
 
     def _task_factory(self):
         from pychron.pyscripts.tasks.pyscript_task import PyScriptTask
 
-        return PyScriptTask()
+        return PyScriptTask(application=self.application)
 
     def _preferences_panes_default(self):
         return [PyScriptPreferencesPane]
diff --git a/pychron/spectrometer/tasks/base_spectrometer_plugin.py b/pychron/spectrometer/tasks/base_spectrometer_plugin.py
index b79b910959..2237e736f0 100755
--- a/pychron/spectrometer/tasks/base_spectrometer_plugin.py
+++ b/pychron/spectrometer/tasks/base_spectrometer_plugin.py
@@ -17,8 +17,7 @@
 # ============= enthought library imports =======================
 from envisage.ui.tasks.task_factory import TaskFactory
 from traits.api import Any
-# ============= standard library imports ========================
-# ============= local library imports  ==========================
+
 from pychron.envisage.tasks.base_task_plugin import BaseTaskPlugin
 from pychron.spectrometer.base_spectrometer_manager import BaseSpectrometerManager
 from pychron.spectrometer.ion_optics.ion_optics_manager import IonOpticsManager
@@ -53,7 +52,8 @@ def _mass_cal_task_factory(self):
 
     def _task_factory(self):
         t = SpectrometerTask(manager=self.spectrometer_manager,
-                             scan_manager=self.scan_manager)
+                             scan_manager=self.scan_manager,
+                             application=self.application)
         return t
 
     def _factory_spectrometer(self):
diff --git a/pychron/test_suite.py b/pychron/test_suite.py
index ffa0614179..604979f32a 100755
--- a/pychron/test_suite.py
+++ b/pychron/test_suite.py
@@ -27,9 +27,9 @@ def suite():
 
     from pychron.stage.tests.stage_map import StageMapTestCase, \
         TransformTestCase
-    from pychron.entry.tests.sample_loader import SampleLoaderTestCase
+    # from pychron.entry.tests.sample_loader import SampleLoaderTestCase
     from pychron.core.helpers.tests.floatfmt import FloatfmtTestCase
-    from pychron.processing.tests.analysis_modifier import AnalysisModifierTestCase
+    # from pychron.processing.tests.analysis_modifier import AnalysisModifierTestCase
     from pychron.experiment.tests.backup import BackupTestCase
     from pychron.core.xml.tests.xml_parser import XMLParserTestCase
     from pychron.entry.tests.analysis_loader import XLSAnalysisLoaderTestCase
@@ -60,8 +60,8 @@ def suite():
              ExperimentIdentifierTestCase,
              StageMapTestCase,
              TransformTestCase,
-             SampleLoaderTestCase,
-             AnalysisModifierTestCase,
+             # SampleLoaderTestCase,
+             # AnalysisModifierTestCase,
              BackupTestCase,
              # MassSpecIrradExportTestCase,
              XMLParserTestCase,
