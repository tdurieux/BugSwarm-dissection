diff --git a/its/ruling/src/test/resources/commons-beanutils/squid-S3366.json b/its/ruling/src/test/resources/commons-beanutils/squid-S3366.json
new file mode 100755
index 0000000000..d1e2f961a9
--- /dev/null
+++ b/its/ruling/src/test/resources/commons-beanutils/squid-S3366.json
@@ -0,0 +1,5 @@
+{
+'commons-beanutils:commons-beanutils:src/main/java/org/apache/commons/beanutils/LazyDynaMap.java':[
+106,
+],
+}
diff --git a/its/ruling/src/test/resources/guava/squid-S3366.json b/its/ruling/src/test/resources/guava/squid-S3366.json
new file mode 100755
index 0000000000..70bef52602
--- /dev/null
+++ b/its/ruling/src/test/resources/guava/squid-S3366.json
@@ -0,0 +1,12 @@
+{
+'com.google.guava:guava:src/com/google/common/collect/FluentIterable.java':[
+80,
+],
+'com.google.guava:guava:src/com/google/common/collect/LinkedHashMultimap.java':[
+323,
+324,
+],
+'com.google.guava:guava:src/com/google/common/util/concurrent/AbstractFuture.java':[
+155,
+],
+}
diff --git a/its/ruling/src/test/resources/jdk6/squid-S3366.json b/its/ruling/src/test/resources/jdk6/squid-S3366.json
new file mode 100755
index 0000000000..a76ca9ae0e
--- /dev/null
+++ b/its/ruling/src/test/resources/jdk6/squid-S3366.json
@@ -0,0 +1,78 @@
+{
+'jdk6:java/awt/Checkbox.java':[
+185,
+701,
+],
+'jdk6:java/awt/Dialog.java':[
+659,
+710,
+],
+'jdk6:java/awt/List.java':[
+1276,
+1277,
+],
+'jdk6:java/awt/SequencedEvent.java':[
+56,
+],
+'jdk6:java/awt/TextComponent.java':[
+883,
+],
+'jdk6:java/awt/TrayIcon.java':[
+135,
+],
+'jdk6:java/awt/dnd/DropTarget.java':[
+93,
+],
+'jdk6:java/awt/font/TextAttribute.java':[
+252,
+],
+'jdk6:java/beans/beancontext/BeanContextChildSupport.java':[
+54,
+],
+'jdk6:java/io/ObjectStreamClass.java':[
+408,
+],
+'jdk6:java/io/Reader.java':[
+50,
+],
+'jdk6:java/io/Writer.java':[
+59,
+],
+'jdk6:java/net/ServerSocket.java':[
+60,
+],
+'jdk6:java/net/Socket.java':[
+122,
+127,
+150,
+],
+'jdk6:java/net/URL.java':[
+596,
+],
+'jdk6:java/security/Identity.java':[
+103,
+],
+'jdk6:java/text/AttributedCharacterIterator.java':[
+84,
+],
+'jdk6:java/text/DateFormat.java':[
+780,
+783,
+],
+'jdk6:java/text/NumberFormat.java':[
+1032,
+],
+'jdk6:java/util/Collections.java':[
+1549,
+1954,
+],
+'jdk6:java/util/concurrent/ConcurrentSkipListMap.java':[
+394,
+],
+'jdk6:java/util/logging/Level.java':[
+189,
+],
+'jdk6:java/util/prefs/AbstractPreferences.java':[
+187,
+],
+}
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.html b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.html
new file mode 100755
index 0000000000..42906bb31c
--- /dev/null
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.html
@@ -0,0 +1,33 @@
+<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
+expose partially-constructed objects to other threads, and should be used with caution.</p>
+<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
+thread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
+there's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before
+<code>this</code> is exposed.</p>
+<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
+of another object in a constructor</p>
+<h2>Noncompliant Code Example</h2>
+<pre>
+public class Monument {
+
+  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;
+  // ...
+
+  public Monument(String location, ...) {
+    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object
+
+    this.location = location;
+    // ...
+  }
+}
+</pre>
+<h2>Exceptions</h2>
+<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
+by S3010.</p>
+<h2>See</h2>
+<ul>
+  <li> <a href="https://www.securecoding.cert.org/confluence/x/aAD1AQ">CERT, TSM01-J.</a> - Do not let the this reference escape during object
+  construction </li>
+  <li> <a href="https://www.securecoding.cert.org/confluence/x/7ABQAg">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
+</ul>
+
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.json b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.json
new file mode 100755
index 0000000000..e7683acb1a
--- /dev/null
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S3366_java.json
@@ -0,0 +1,20 @@
+{
+  "title": "\"this\" should not be exposed from constructors",
+  "type": "CODE_SMELL",
+  "status": "ready",
+  "remediation": {
+    "func": "Constant\/Issue",
+    "constantCost": "30min"
+  },
+  "tags": [
+    "multi-threading",
+    "cert",
+    "suspicious"
+  ],
+  "standards": [
+    "CERT"
+  ],
+  "defaultSeverity": "Major",
+  "ruleSpecification": "RSPEC-3366",
+  "sqKey": "S3366"
+}
