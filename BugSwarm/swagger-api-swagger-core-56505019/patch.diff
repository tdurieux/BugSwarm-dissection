diff --git a/modules/swagger-core/src/test/scala/converter/BoxedTypesTest.scala b/modules/swagger-core/src/test/scala/converter/BoxedTypesTest.scala
deleted file mode 100755
index e3e158ca93..0000000000
--- a/modules/swagger-core/src/test/scala/converter/BoxedTypesTest.scala
+++ /dev/null
@@ -1,32 +0,0 @@
-package converter
-
-import com.wordnik.swagger.core.SwaggerSpec
-import com.wordnik.swagger.core.util.ModelUtil
-import models._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.converter._
-import org.json4s._
-import org.json4s.jackson.Serialization.write
-import org.json4s.jackson._
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class BoxedTypesTest extends FlatSpec with Matchers {
-  implicit val formats = SwaggerSerializers.formats
-
-  "ModelConverters" should "format a BoxedType" in {
-    val model = ModelConverters.read(classOf[BoxedTypesIssue31]).getOrElse(fail("no model found"))
-    model.properties.size should be(5)
-    write(model) should be( """{"id":"BoxedTypesIssue31","description":"Options of boxed types produces an Object ref instead of correct type","properties":{"stringSeq":{"type":"array","items":{"type":"string"}},"stringOpt":{"type":"string"},"intSeq":{"type":"array","description":"Integers in a Sequence Box","items":{"$ref":"Object"}},"intOpt":{"$ref":"Object","description":"Integer in an Option Box"},"justInt":{"type":"integer","format":"int32"}}}""")
-  }
-
-  it should "format a BoxedTypeWithDataType provided in the annotation for the boxed object types" in {
-    val model = ModelConverters.read(classOf[BoxedTypesIssue31WithDataType]).getOrElse(fail("no model found"))
-    model.properties.size should be(5)
-    write(model) should be( """{"id":"BoxedTypesIssue31WithDataType","description":"Options of boxed types produces an Object ref instead of correct type, but can be overcome with dataType","properties":{"stringSeq":{"type":"array","items":{"type":"string"}},"stringOpt":{"type":"string"},"intSeq":{"type":"array","description":"Integers in a Sequence Box","items":{"type":"integer","format":"int32"}},"intOpt":{"type":"integer","format":"int32","description":"Integer in an Option Box"},"justInt":{"type":"integer","format":"int32"}}}""")
-  }
-}
diff --git a/modules/swagger-core/src/test/scala/converter/ModelUtilTest.scala b/modules/swagger-core/src/test/scala/converter/ModelUtilTest.scala
deleted file mode 100755
index 318b4fb950..0000000000
--- a/modules/swagger-core/src/test/scala/converter/ModelUtilTest.scala
+++ /dev/null
@@ -1,41 +0,0 @@
-package converter
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class ModelUtilTest extends FlatSpec with Matchers {
-  import com.wordnik.swagger.core.util.ModelUtil._
-
-  "ModelUtil cleanDataType" should "convert a fully-qualified primitive type to a SwaggerTypes primitive" in {
-    val primitiveName = "java.lang.Integer"
-    val cleanName = cleanDataType(primitiveName)
-    cleanName should equal ("int")
-  }
-
-  it should "convert a primitive type simple name to a SwaggerTypes primitive" in {
-    val primitiveName = "Integer"
-    val cleanName = cleanDataType(primitiveName)
-    cleanName should equal ("int")
-  }
-
-  it should "convert the inner class of a container to a SwaggerTypes primitive" in {
-    val origName = "List[java.lang.Integer]"
-    val cleanName = cleanDataType(origName)
-    cleanName should equal ("List[int]")
-  }
-
-  it should "return a fully-qualified class name unchanged" in {
-    val fqcn = "com.wordnik.swagger.core.ModelUtil"
-    val cleanName = cleanDataType(fqcn)
-    cleanName should equal (fqcn)
-  }
-
-  it should "return a container with a fully-qualified inner class name unchanged" in {
-    val fqcn = "List[com.wordnik.swagger.core.ModelUtil]"
-    val cleanName = cleanDataType(fqcn)
-    cleanName should equal (fqcn)
-  }
-}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/converter/ModelWithOptionalFieldsTest.scala b/modules/swagger-core/src/test/scala/converter/ModelWithOptionalFieldsTest.scala
deleted file mode 100755
index fe6c8b065a..0000000000
--- a/modules/swagger-core/src/test/scala/converter/ModelWithOptionalFieldsTest.scala
+++ /dev/null
@@ -1,13 +0,0 @@
-package converter
-
-import models._
-
-import com.wordnik.swagger.converter._
-
-import com.wordnik.swagger.core.util._
-import org.scalatest.{Matchers, FlatSpec}
-
-class ModelWithOptionalFieldsTest extends FlatSpec with Matchers {
-  val models = ModelConverters.readAll(classOf[ModelWithOptionalFields])
-  JsonSerializer.asJson(models) should be ("""[{"id":"ModelWithOptionalFields","properties":{"string":{"type":"string"},"integer":{"type":"integer","format":"int32"}}}]""")
-}
diff --git a/modules/swagger-core/src/test/scala/converter/RequiredFieldModelTest.scala b/modules/swagger-core/src/test/scala/converter/RequiredFieldModelTest.scala
deleted file mode 100755
index be1b4b4f2a..0000000000
--- a/modules/swagger-core/src/test/scala/converter/RequiredFieldModelTest.scala
+++ /dev/null
@@ -1,28 +0,0 @@
-package converter
-
-import models._
-
-import com.wordnik.swagger.converter._
-import com.wordnik.swagger.core.util._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.annotations._
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class RequiredFieldModelTest extends FlatSpec with Matchers {
-  it should "apply read only flag when ApiProperty annotation first" in {
-    val model = ModelConverters.read(classOf[ApiFirstRequiredFieldModel]).getOrElse(fail("no model found"))
-    val prop = model.properties.getOrElse("a", fail("didn't find property a"))
-    prop.required should be (true)
-  }
-
-  it should "apply read only flag when XmlElement annotation first" in {
-    val model = ModelConverters.read(classOf[XmlFirstRequiredFieldModel]).getOrElse(fail("no model found"))
-    val prop = model.properties.getOrElse("a", fail("didn't find property a"))
-    prop.required should be (true)
-  }
-}
diff --git a/modules/swagger-core/src/test/scala/converter/ScalaEnumTest.scala b/modules/swagger-core/src/test/scala/converter/ScalaEnumTest.scala
deleted file mode 100755
index f459e4d0b2..0000000000
--- a/modules/swagger-core/src/test/scala/converter/ScalaEnumTest.scala
+++ /dev/null
@@ -1,47 +0,0 @@
-package converter
-
-import models._
-
-import com.wordnik.swagger.core.SwaggerSpec
-import com.wordnik.swagger.core.util.ModelUtil
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.converter._
-
-import org.json4s._
-import org.json4s.jackson.Serialization.write
-import org.json4s.jackson._
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class ScalaEnumTest extends FlatSpec with Matchers {
-  implicit val formats = SwaggerSerializers.formats
-
-  "ModelConverters" should "format a class with a Scala Enum type specifying allowable enum values" in {
-    val model = ModelConverters.read(classOf[SModelWithEnum]).getOrElse(fail("no model found"))
-    model.properties.size should be(2)
-    val modelStr = write(model)
-    // Desired behavior is to have the
-    // "type": "string"
-    // "enum": ["TALL", "GRANDE", "VENTI"]
-    modelStr should equal ("""{"id":"SModelWithEnum","description":"Scala model containing an Enumeration Value that is annotated with the dataType of the Enumeration class","properties":{"label":{"type":"string","description":"Textual label"},"orderSize":{"type":"string","description":"Order Size","enum":["GRANDE","TALL","VENTI"]}}}""")
-  }
-
-  it should "represent the Scala Enum Value type as a string without specifying allowable values if dataType is not specified" in {
-    val model = ModelConverters.read(classOf[SModelWithEnumNoDataType]).getOrElse(fail("no model found"))
-    model.properties.size should be(2)
-    val modelStr = write(model)
-    modelStr should equal ("""{"id":"SModelWithEnumNoDataType","description":"Scala model containing an Enumeration Value that is not annotated with the dataType of the Enumeration class","properties":{"label":{"type":"string","description":"Textual label"},"orderSize":{"type":"string","description":"Order Size"}}}""")
-  }
-
-  it should "handle a Scala Enum Value type as a string without specifying allowable values if the dataType is badly specified" in {
-    val model = ModelConverters.read(classOf[SModelWithEnumBadDataType]).getOrElse(fail("no model found"))
-    model.properties.size should be(2)
-    val modelStr = write(model)
-    // If the dataType cannot be resolved to an Enumeration class, just gracefully behave as if the dataType is not specified
-    modelStr should equal ("""{"id":"SModelWithEnumBadDataType","description":"Scala model containing an Enumeration Value that is incorrectly annotated with a bad dataType of the Enumeration class","properties":{"label":{"type":"string","description":"Textual label"},"orderSize":{"type":"string","description":"Order Size"}}}""")
-  }
-}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/models/ApiFirstRequiredFieldModel.java b/modules/swagger-core/src/test/scala/models/ApiFirstRequiredFieldModel.java
deleted file mode 100755
index 28e8d64b3e..0000000000
--- a/modules/swagger-core/src/test/scala/models/ApiFirstRequiredFieldModel.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package models;
-
-import com.wordnik.swagger.annotations.*;
-
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-@ApiModel( value = "aaa")
-public class ApiFirstRequiredFieldModel {
-  @ApiModelProperty( value = "bla", required = true )
-  @XmlElement(name="a")
-  public String getA() {
-    return "aaa";
-  }
-
-  public String getC() {
-    return "kkk";
-  };
-}
diff --git a/modules/swagger-core/src/test/scala/models/BoxedTypes.scala b/modules/swagger-core/src/test/scala/models/BoxedTypes.scala
deleted file mode 100755
index 4f983d046b..0000000000
--- a/modules/swagger-core/src/test/scala/models/BoxedTypes.scala
+++ /dev/null
@@ -1,21 +0,0 @@
-package models
-
-import com.wordnik.swagger.annotations.{ ApiModel, ApiModelProperty }
-
-import scala.annotation.meta.field
-
-// Issue #31: https://github.com/gettyimages/spray-swagger/issues/31
-// It would be nice if the Seq[Int] and Option[Int] could create the proper spec, but due
-// to erasure the parameterized types are only identified as Object
-@ApiModel(description = "Options of boxed types produces an Object ref instead of correct type")
-case class BoxedTypesIssue31(stringSeq: Seq[String], stringOpt: Option[String],
-                             @(ApiModelProperty @field)(value = "Integers in a Sequence Box") intSeq: Seq[Int],
-                             @(ApiModelProperty @field)(value = "Integer in an Option Box") intOpt: Option[Int],
-                             justInt: Int)
-
-// Get around the erasure by providing the dataType explicitly using the dataType common names.
-@ApiModel(description = "Options of boxed types produces an Object ref instead of correct type, but can be overcome with dataType")
-case class BoxedTypesIssue31WithDataType(stringSeq: Seq[String], stringOpt: Option[String],
-                                         @(ApiModelProperty @field)(value = "Integers in a Sequence Box", dataType = "List[int]") intSeq: Seq[Int],
-                                         @(ApiModelProperty @field)(value = "Integer in an Option Box", dataType = "int") intOpt: Option[Int],
-                                         justInt: Int)
diff --git a/modules/swagger-core/src/test/scala/models/ModelWithOptionalFields.java b/modules/swagger-core/src/test/scala/models/ModelWithOptionalFields.java
deleted file mode 100755
index 5b531bf783..0000000000
--- a/modules/swagger-core/src/test/scala/models/ModelWithOptionalFields.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package models;
-
-import com.google.common.base.Optional;
-
-public class ModelWithOptionalFields {
-  public Optional<String> string;
-  public Optional<Integer> integer;
-}
diff --git a/modules/swagger-core/src/test/scala/models/NumericModel.java b/modules/swagger-core/src/test/scala/models/NumericModel.java
deleted file mode 100755
index 39c8364425..0000000000
--- a/modules/swagger-core/src/test/scala/models/NumericModel.java
+++ /dev/null
@@ -1,3 +0,0 @@
-package models;
-
-public class NumericModel extends BaseModel<Integer> {}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/models/SModelWithEnum.scala b/modules/swagger-core/src/test/scala/models/SModelWithEnum.scala
deleted file mode 100755
index 8f6eac3020..0000000000
--- a/modules/swagger-core/src/test/scala/models/SModelWithEnum.scala
+++ /dev/null
@@ -1,30 +0,0 @@
-package models
-
-import models.OrderSize.OrderSize
-
-import com.wordnik.swagger.annotations.{ ApiModel, ApiModelProperty }
-
-import scala.annotation.meta.field
-
-@ApiModel(description = "Scala model containing an Enumeration Value that is annotated with the dataType of the Enumeration class")
-case class SModelWithEnum(
-  @(ApiModelProperty @field)(value = "Textual label") label: Option[String] = None,
-  @(ApiModelProperty @field)(value = "Order Size", dataType = "models.OrderSize$") orderSize: OrderSize = OrderSize.TALL)
-
-@ApiModel(description = "Scala model containing an Enumeration Value that is not annotated with the dataType of the Enumeration class")
-case class SModelWithEnumNoDataType(
-  @(ApiModelProperty @field)(value = "Textual label") label: Option[String] = None,
-  @(ApiModelProperty @field)(value = "Order Size") orderSize: OrderSize = OrderSize.TALL)
-
-@ApiModel(description = "Scala model containing an Enumeration Value that is incorrectly annotated with a bad dataType of the Enumeration class")
-case class SModelWithEnumBadDataType(
-  @(ApiModelProperty @field)(value = "Textual label") label: Option[String] = None,
-  @(ApiModelProperty @field)(value = "Order Size", dataType = "a.bad.dataType") orderSize: OrderSize = OrderSize.TALL)
-
-
-case object OrderSize extends Enumeration(0) {
-  type OrderSize = Value
-  val TALL = Value("TALL")
-  val GRANDE = Value("GRANDE")
-  val VENTI = Value("VENTI")
-}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/models/XmlElementFieldModel.java b/modules/swagger-core/src/test/scala/models/XmlElementFieldModel.java
deleted file mode 100755
index 25f929c71f..0000000000
--- a/modules/swagger-core/src/test/scala/models/XmlElementFieldModel.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package models;
-
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement(name = "Pet")
-public class XmlElementFieldModel {
-  @XmlElement(name = "pet_name")
-  public String name;
-
-  @XmlAttribute(name = "pet_age")
-  public Integer age;
-}
\ No newline at end of file
diff --git a/modules/swagger-core/src/test/scala/models/XmlFirstRequiredFieldModel.java b/modules/swagger-core/src/test/scala/models/XmlFirstRequiredFieldModel.java
deleted file mode 100755
index 7a51bb45de..0000000000
--- a/modules/swagger-core/src/test/scala/models/XmlFirstRequiredFieldModel.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package models;
-
-import com.wordnik.swagger.annotations.*;
-
-import javax.xml.bind.annotation.*;
-
-@XmlRootElement
-@XmlAccessorType(XmlAccessType.FIELD)
-@ApiModel( value = "aaa")
-public class XmlFirstRequiredFieldModel {
-  @XmlElement(name="a")
-  @ApiModelProperty( value = "bla", required = true )
-  public String getA() {
-    return "aaa";
-  }
-
-  public String getC() {
-    return "kkk";
-  };
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/DuplicateHeadersResourceTest.scala b/modules/swagger-jaxrs/src/test/scala/DuplicateHeadersResourceTest.scala
deleted file mode 100755
index 89c9949d7b..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/DuplicateHeadersResourceTest.scala
+++ /dev/null
@@ -1,32 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jaxrs.reader._
-import com.wordnik.swagger.core.util._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.config._
-import com.wordnik.swagger.core.filter._
-
-import java.lang.reflect.Method
-
-import java.util.Date
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-import scala.collection.mutable.ListBuffer
-
-@RunWith(classOf[JUnitRunner])
-class DuplicateHeadersResourceTest extends FlatSpec with Matchers {
-  it should "read an api and extract an error model" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[DuplicateHeadersResource], config).getOrElse(fail("should not be None"))
-    val api = apiResource.apis.head
-    val op = api.operations.head
-    op.parameters.size should be (1)
-    val param = op.parameters.head
-    param.description.get should be ("This one!")
-  }
-}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/scala/LeadingSlashResourceTest.scala b/modules/swagger-jaxrs/src/test/scala/LeadingSlashResourceTest.scala
deleted file mode 100755
index 79d3c1c3f5..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/LeadingSlashResourceTest.scala
+++ /dev/null
@@ -1,31 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jaxrs.reader._
-import com.wordnik.swagger.core.util._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.config._
-import com.wordnik.swagger.core.filter._
-
-import java.lang.reflect.Method
-
-import java.util.Date
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-import scala.collection.mutable.ListBuffer
-
-@RunWith(classOf[JUnitRunner])
-class LeadingSlashResourceTest extends FlatSpec with Matchers {
-  it should "read an api and extract an error model" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[LeadingSlashTestResource], config).getOrElse(fail("should not be None"))
-
-    apiResource.apis.size should be (1)
-    val api = apiResource.apis.head
-    api.path should be ("/basic/{id}")
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/MergedResourceTest.scala b/modules/swagger-jaxrs/src/test/scala/MergedResourceTest.scala
deleted file mode 100755
index 8aacb565c4..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/MergedResourceTest.scala
+++ /dev/null
@@ -1,36 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jaxrs.reader._
-import com.wordnik.swagger.core.util._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.config._
-import com.wordnik.swagger.core.filter._
-import com.wordnik.swagger.core.util.ReaderUtil
-
-import java.lang.reflect.Method
-
-import java.util.Date
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-import scala.collection.mutable.ListBuffer
-
-@RunWith(classOf[JUnitRunner])
-class MergedResourceTest extends FlatSpec with Matchers {
-  it should "read an api and extract an error model" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val r1 = reader.read("/api-docs", classOf[MergedResource1], config).getOrElse(fail("should not be None"))
-    val r2 = reader.read("/api-docs", classOf[MergedResource2], config).getOrElse(fail("should not be None"))
-
-    val merged = new TestReader().groupByResourcePath(List(r1, r2))
-    merged.size should be (1)
-    val listing = merged.head
-    (listing.models.get.keys.toSet & Set("NotFoundModel", "Sample1", "Sample2")).size should be (3)
-  }
-}
-
-class TestReader extends ReaderUtil
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/scala/ResourceWithEnumParamTest.scala b/modules/swagger-jaxrs/src/test/scala/ResourceWithEnumParamTest.scala
deleted file mode 100755
index 4a6ef4b56f..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/ResourceWithEnumParamTest.scala
+++ /dev/null
@@ -1,40 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jaxrs.reader._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.config._
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class ResourceWithEnumParamTest extends FlatSpec with Matchers {
-  it should "read an api with an enum param and return class and reflect those in the swagger model" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[ResourceWithEnumParam], config).getOrElse(fail("should not be None"))
-
-    apiResource.apis.size should be (1)
-    apiResource.models should be (None)
-
-    val api = apiResource.apis.filter(_.path == "/enum_param/{access}/").head
-    val ops = api.operations
-
-    ops.size should be (1)
-
-    val op = ops.head
-
-    op.responseClass should be ("string")
-    op.method should be ("GET")
-
-    op.parameters.size should be (1)
-    val param = op.parameters.head
-
-    param.dataType should be ("string")
-
-    param.allowableValues should be (AllowableListValues(List("PRIVATE", "PUBLIC", "SYSTEM", "INVITE_ONLY")))
-    param.defaultValue should be (Some("PUBLIC"))
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/ResourceWithInvalidImplicitsTest.scala b/modules/swagger-jaxrs/src/test/scala/ResourceWithInvalidImplicitsTest.scala
deleted file mode 100755
index c9e2c007a4..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/ResourceWithInvalidImplicitsTest.scala
+++ /dev/null
@@ -1,34 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jaxrs.reader._
-import com.wordnik.swagger.core.util._
-import com.wordnik.swagger.model._
-import com.wordnik.swagger.config._
-import com.wordnik.swagger.core.filter._
-
-import java.lang.reflect.Method
-
-import java.util.Date
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-import scala.collection.mutable.ListBuffer
-
-@RunWith(classOf[JUnitRunner])
-class ResourceWithInvalidImplicitsTest extends FlatSpec with Matchers {
-  it should "skip params with invalid implicit info" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[ResourceWithInvalidImplicits], config).getOrElse(fail("should not be None"))
-
-    val api = apiResource.apis.head
-    val op = api.operations.head
-    op.parameters.size should be (1)
-    val param = op.parameters.head
-
-    param.description.get should be ("An implicit param that is OK")
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/ResourceWithOptionalsTest.scala b/modules/swagger-jaxrs/src/test/scala/ResourceWithOptionalsTest.scala
deleted file mode 100755
index 522fea9681..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/ResourceWithOptionalsTest.scala
+++ /dev/null
@@ -1,24 +0,0 @@
-import com.wordnik.swagger.config.SwaggerConfig
-import com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader
-import org.junit.runner.RunWith
-import org.scalatest.{Matchers, FlatSpec}
-import org.scalatest.junit.JUnitRunner
-import testresources.ResourceWithOptionals
-
-@RunWith(classOf[JUnitRunner])
-class ResourceWithOptionalsTest extends FlatSpec with Matchers {
-  it should "read an api and extract an error model" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[ResourceWithOptionals], config).getOrElse(fail("should not be None"))
-
-    apiResource.apis.size should be (1)
-
-    val api = apiResource.apis.filter(_.path == "/optional/test").head
-    val ops = api.operations
-    ops.size should be (1)
-
-    ops.head.parameters.filter(_.paramType == "query").head.dataType should be ("string")
-
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/ResourceWithReturnTypesTest.scala b/modules/swagger-jaxrs/src/test/scala/ResourceWithReturnTypesTest.scala
deleted file mode 100755
index b4971bbcd5..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/ResourceWithReturnTypesTest.scala
+++ /dev/null
@@ -1,24 +0,0 @@
-import testresources.ResourceWithReturnTypes
-
-import com.wordnik.swagger.config.SwaggerConfig
-import com.wordnik.swagger.jaxrs.reader.DefaultJaxrsApiReader
-import com.wordnik.swagger.core.util.JsonSerializer
-
-import org.junit.runner.RunWith
-import org.scalatest.{Matchers, FlatSpec}
-import org.scalatest.junit.JUnitRunner
-
-@RunWith(classOf[JUnitRunner])
-class ResourceWithReturnTypesTest extends FlatSpec with Matchers {
-  it should "read an api and extract the return type" in {
-    val reader = new DefaultJaxrsApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[ResourceWithReturnTypes], config).getOrElse(fail("should not be None"))
-
-    val operations = apiResource.apis.head.operations
-
-    operations.size should be (1)
-    val op = operations.head
-    op.responseClass should be ("Howdy")
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testmodels/TestEnumPojo.java b/modules/swagger-jaxrs/src/test/scala/testmodels/TestEnumPojo.java
deleted file mode 100755
index 19847a28ea..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testmodels/TestEnumPojo.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package testmodels;
-
-public enum TestEnumPojo {
-  PRIVATE,
-  PUBLIC,
-  SYSTEM,
-  INVITE_ONLY;
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/DuplicateHeadersResource.java b/modules/swagger-jaxrs/src/test/scala/testresources/DuplicateHeadersResource.java
deleted file mode 100755
index ee8d4473bb..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/DuplicateHeadersResource.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package testresources;
-
-import testmodels.*;
-import com.wordnik.swagger.core.*;
-import com.wordnik.swagger.annotations.*;
-
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
-
-import javax.xml.bind.annotation.*;
-
-@Path("/basic")
-@Api(value = "/basic", description = "Basic resource")
-public class DuplicateHeadersResource {
-  @ApiParam(value = "NOT this one!")
-  @HeaderParam("auth_token")
-  String header;
-
-  @GET
-  @Path("/{id}")
-  @ApiOperation(value = "Find by ID")
-  public JavaSample getTest(
-    @ApiParam(value = "This one!")@HeaderParam("auth_token") String duplicate) {
-    JavaSample out = new JavaSample();
-    out.setName("foo");
-    out.setValue("bar");
-    return out;
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/LeadingSlashTestResource.scala b/modules/swagger-jaxrs/src/test/scala/testresources/LeadingSlashTestResource.scala
deleted file mode 100755
index 032c492fe4..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/LeadingSlashTestResource.scala
+++ /dev/null
@@ -1,33 +0,0 @@
-package testresources
-
-import testmodels._
-import com.wordnik.swagger.core._
-import com.wordnik.swagger.annotations._
-
-import javax.ws.rs._
-import javax.ws.rs.core.Response
-
-import javax.xml.bind.annotation._
-
-import scala.beans.BeanProperty
-
-@Path("/basic")
-@Api(value = "/basic", description = "Basic resource")
-class LeadingSlashTestResource {
-  @GET
-  @Path("{id}")
-  @ApiOperation(value = "Get object by ID",
-    notes = "No details provided",
-    response = classOf[Sample],
-    position = 0)
-  @ApiResponses(Array(
-    new ApiResponse(code = 400, message = "Invalid ID", response = classOf[NotFoundModel]),
-    new ApiResponse(code = 404, message = "object not found")))
-  def getTest(
-    @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")@DefaultValue("1") @QueryParam("id") id: String) = {
-    val out = new Sample
-    out.name = "foo"
-    out.value = "bar"
-    Response.ok.entity(out).build
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource1.scala b/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource1.scala
deleted file mode 100755
index d2837cea96..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource1.scala
+++ /dev/null
@@ -1,36 +0,0 @@
-package testresources
-
-import testmodels._
-import com.wordnik.swagger.core._
-import com.wordnik.swagger.annotations._
-
-import javax.ws.rs._
-import javax.ws.rs.core.Response
-
-import javax.xml.bind.annotation._
-
-import scala.beans.BeanProperty
-
-@Path("/merged")
-@Api(value = "/merged", description = "MergedResource")
-class MergedResource1 {
-  @GET
-  @Path("/model1")
-  @ApiOperation(value = "Get object by ID",
-    notes = "No details provided",
-    response = classOf[Sample1],
-    position = 0)
-  @ApiResponses(Array(
-    new ApiResponse(code = 400, message = "Invalid ID", response = classOf[NotFoundModel]),
-    new ApiResponse(code = 404, message = "object not found")))
-  def getTest(
-    @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")@DefaultValue("1") @QueryParam("id") id: String) = {
-    val out = new Sample1
-    out.name = "foo"
-    Response.ok.entity(out).build
-  }
-}
-
-class Sample1 {
-  @BeanProperty var name: String = _
-}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource2.scala b/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource2.scala
deleted file mode 100755
index db95069bd0..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/MergedResource2.scala
+++ /dev/null
@@ -1,36 +0,0 @@
-package testresources
-
-import testmodels._
-import com.wordnik.swagger.core._
-import com.wordnik.swagger.annotations._
-
-import javax.ws.rs._
-import javax.ws.rs.core.Response
-
-import javax.xml.bind.annotation._
-
-import scala.beans.BeanProperty
-
-@Path("/merged")
-@Api(value = "/merged", description = "MergedResource")
-class MergedResource2 {
-  @GET
-  @Path("/model2")
-  @ApiOperation(value = "Get object by ID",
-    notes = "No details provided",
-    response = classOf[Sample2],
-    position = 0)
-  @ApiResponses(Array(
-    new ApiResponse(code = 400, message = "Invalid ID", response = classOf[NotFoundModel]),
-    new ApiResponse(code = 404, message = "object not found")))
-  def getTest(
-    @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")@DefaultValue("1") @QueryParam("id") id: String) = {
-    val out = new Sample2
-    out.id = "100"
-    Response.ok.entity(out).build
-  }
-}
-
-class Sample2 {
-  @BeanProperty var id: String = _
-}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithEnumParam.scala b/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithEnumParam.scala
deleted file mode 100755
index 9ba1b9a759..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithEnumParam.scala
+++ /dev/null
@@ -1,23 +0,0 @@
-package testresources
-
-import testmodels._
-import com.wordnik.swagger.annotations._
-
-import javax.ws.rs._
-
-@Path("/enum_param")
-@Api(value = "/enum_param", description = "Resource with Java Enum parameter")
-class ResourceWithEnumParam {
-  @GET
-  @Path("/{access}/")
-  @ApiOperation(value = "Get the enum query parameter reflected back",
-    response = classOf[TestEnumPojo],
-    notes = "No details provided",
-    position = 1)
-  @ApiResponses(Array(
-    new ApiResponse(code = 404, message = "object not found")))
-  def getAccess(
-    @ApiParam(value = "the access enum value") @QueryParam("access") @DefaultValue("PUBLIC") access: TestEnumPojo) = {
-    access
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithInvalidImplicits.java b/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithInvalidImplicits.java
deleted file mode 100755
index 35f3e7eea2..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithInvalidImplicits.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package testresources;
-
-import testmodels.*;
-import com.wordnik.swagger.core.*;
-import com.wordnik.swagger.annotations.*;
-
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
-
-import javax.xml.bind.annotation.*;
-
-@Path("/basic")
-@Api(value = "/basic", description = "Basic resource")
-public class ResourceWithInvalidImplicits {
-  @GET
-  @Path("/{id}")
-  @ApiOperation(value = "Find by ID")
-  @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
-      @ApiResponse(code = 404, message = "Pet not found") })
-  @ApiImplicitParams({
-    @ApiImplicitParam(
-      name = "id",
-      value = "An implicit param missing a datatype",
-      required = true,
-      paramType = "query"),
-    @ApiImplicitParam(
-      name = "name",
-      value = "An implicit param missing a param type",
-      required = true,
-      dataType = "string"),
-    @ApiImplicitParam(
-      name = "age",
-      value = "An implicit param that is OK",
-      required = true,
-      paramType = "query",
-      dataType = "integer")})
-  public JavaSample getTest() {
-    JavaSample out = new JavaSample();
-    out.setName("foo");
-    out.setValue("bar");
-    return out;
-  }
-}
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithOptionals.scala b/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithOptionals.scala
deleted file mode 100755
index bca0435e92..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithOptionals.scala
+++ /dev/null
@@ -1,21 +0,0 @@
-package testresources
-
-import javax.ws.rs.core.Response
-import javax.ws.rs.{QueryParam, GET, Path}
-
-import com.wordnik.swagger.annotations._
-
-@Path("/optional")
-@Api(value = "/optional", description = "Resource with optional query params")
-class ResourceWithOptionals {
-  @GET
-  @Path("/test")
-  @ApiOperation(value = "Test out optional query param",
-    notes = "No details provided",
-    position = 1)
-  @ApiResponses(Array(
-    new ApiResponse(code = 404, message = "object not found")))
-  def getMaybeString(@ApiParam(value = "optional string input", required = false) @QueryParam("maybeString") maybeString: Option[String]) = {
-    Response.ok.entity(maybeString).build
-  }
-}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithReturnTypes.java b/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithReturnTypes.java
deleted file mode 100755
index 316e37e6d8..0000000000
--- a/modules/swagger-jaxrs/src/test/scala/testresources/ResourceWithReturnTypes.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package testresources;
-
-import testmodels.*;
-import com.wordnik.swagger.core.*;
-import com.wordnik.swagger.annotations.*;
-
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
-
-import javax.xml.bind.annotation.*;
-
-@Path("/basic")
-@Api(value = "/basic", description = "Basic resource")
-public class ResourceWithReturnTypes {
-  @GET
-  @Path("/{id}")
-  @ApiOperation(value = "Find by ID")
-  @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
-      @ApiResponse(code = 404, message = "Pet not found") })
-  public JavaSample getTest(
-    @ApiParam(value = "sample param data", required = true, allowableValues = "range[0,10]")@DefaultValue("1") @QueryParam("id") String id) {
-    JavaSample out = new JavaSample();
-    out.setName("foo");
-    out.setValue("bar");
-    return out;
-  }
-}
diff --git a/modules/swagger-jersey2-jaxrs/src/test/scala/ResourceWithDefaultValueParamTest.scala b/modules/swagger-jersey2-jaxrs/src/test/scala/ResourceWithDefaultValueParamTest.scala
deleted file mode 100755
index c619bbc449..0000000000
--- a/modules/swagger-jersey2-jaxrs/src/test/scala/ResourceWithDefaultValueParamTest.scala
+++ /dev/null
@@ -1,39 +0,0 @@
-import testresources._
-
-import com.wordnik.swagger.jersey._
-import com.wordnik.swagger.config._
-
-import org.junit.runner.RunWith
-import org.scalatest.junit.JUnitRunner
-import org.scalatest.FlatSpec
-import org.scalatest.Matchers
-
-@RunWith(classOf[JUnitRunner])
-class ResourceWithDefaultValueParamTest extends FlatSpec with Matchers {
-  it should "read an api with a parameter with a default value and reflect that in the swagger model" in {
-    val reader = new JerseyApiReader
-    val config = new SwaggerConfig()
-    val apiResource = reader.read("/api-docs", classOf[ResourceWithDefaultValueParam], config).getOrElse(fail("should not be None"))
-
-    apiResource.apis.size should be (1)
-    apiResource.models should be (None)
-
-    val api = apiResource.apis.filter(_.path == "/default_param/{id}/").head
-    val ops = api.operations
-
-    ops.size should be (1)
-
-    val op = ops.head
-
-    op.responseClass should be ("int")
-    op.method should be ("GET")
-
-    op.parameters.size should be (1)
-
-    val param = op.parameters.head
-
-    param.dataType should be ("int")
-    param.defaultValue should be (Some("10"))
-  }
-}
-
diff --git a/modules/swagger-jersey2-jaxrs/src/test/scala/testresources/ResourceWithDefaultValueParam.scala b/modules/swagger-jersey2-jaxrs/src/test/scala/testresources/ResourceWithDefaultValueParam.scala
deleted file mode 100755
index a9531a8303..0000000000
--- a/modules/swagger-jersey2-jaxrs/src/test/scala/testresources/ResourceWithDefaultValueParam.scala
+++ /dev/null
@@ -1,23 +0,0 @@
-package testresources
-
-import testmodels._
-import com.wordnik.swagger.annotations._
-
-import javax.ws.rs._
-
-@Path("/default_param")
-@Api(value = "/default_param", description = "Resource with integer parameter with default value")
-class ResourceWithDefaultValueParam {
-  @GET
-  @Path("/{id}/")
-  @ApiOperation(value = "Get the integer query parameter reflected back",
-    response = classOf[Integer],
-    notes = "No details provided",
-    position = 1)
-  @ApiResponses(Array(
-    new ApiResponse(code = 404, message = "object not found")))
-  def getAccess(
-    @ApiParam(value = "the id value") @QueryParam("id") @DefaultValue("10") id: Integer) = {
-    id
-  }
-}
