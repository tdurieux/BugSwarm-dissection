diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
index 8f7a7e63..56a86e64 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/ExecutorDao.java
@@ -19,6 +19,7 @@
 
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
 import org.joda.time.DateTime;
 import org.slf4j.Logger;
@@ -42,6 +43,7 @@
  * Use setter injection because constructor injection may not work when nFlow is used in some legacy systems.
  */
 @Component
+@Singleton
 @SuppressFBWarnings(value = "SIC_INNER_SHOULD_BE_STATIC_ANON", justification = "common jdbctemplate practice")
 public class ExecutorDao {
   private static final Logger logger = getLogger(ExecutorDao.class);
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
index a14a8009..dba18e12 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/dao/WorkflowInstanceDao.java
@@ -35,6 +35,7 @@
 
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
 import org.slf4j.Logger;
 import org.springframework.core.env.Environment;
@@ -73,6 +74,7 @@
  * Use setter injection because constructor injection may not work when nFlow is used in some legacy systems.
  */
 @Component
+@Singleton
 @SuppressFBWarnings(value = "SIC_INNER_SHOULD_BE_STATIC_ANON", justification = "common jdbctemplate practice")
 public class WorkflowInstanceDao {
 
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/DatabaseConfiguration.java b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/DatabaseConfiguration.java
index d00896ab..6fb304bf 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/DatabaseConfiguration.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/DatabaseConfiguration.java
@@ -34,6 +34,17 @@ protected DatabaseConfiguration(String dbType) {
   @Bean
   @NFlow
   public DataSource nflowDatasource(Environment env, BeanFactory appCtx) {
+    Object metricRegistry = null;
+    try {
+      Class<?> metricClass = Class.forName("com.codahale.metrics.MetricRegistry");
+      metricRegistry = appCtx.getBean(metricClass);
+    } catch (@SuppressWarnings("unused") ClassNotFoundException | NoSuchBeanDefinitionException e) {
+      // ignored - metrics is an optional dependency
+    }
+    return nflowDatasource(env, metricRegistry);
+  }
+
+  public DataSource nflowDatasource(Environment env, Object metricRegistry) {
     String url = property(env, "url");
     logger.info("Database connection to {} using {}", dbType, url);
     HikariConfig config = new HikariConfig();
@@ -45,20 +56,10 @@ public DataSource nflowDatasource(Environment env, BeanFactory appCtx) {
     config.setMaximumPoolSize(property(env, "max_pool_size", Integer.class));
     config.setIdleTimeout(property(env, "idle_timeout_seconds", Long.class) * 1000);
     config.setAutoCommit(true);
-    setMetricRegistryIfBeanFoundOnClassPath(config, appCtx);
-    return new HikariDataSource(config);
-  }
-
-  private void setMetricRegistryIfBeanFoundOnClassPath(HikariConfig config, BeanFactory appCtx) {
-    try {
-      Class<?> metricClass = Class.forName("com.codahale.metrics.MetricRegistry");
-      Object metricRegistry = appCtx.getBean(metricClass);
-      if (metricRegistry != null) {
-        config.setMetricRegistry(metricRegistry);
-      }
-    } catch (@SuppressWarnings("unused") ClassNotFoundException | NoSuchBeanDefinitionException e) {
-      // ignored - metrics is an optional dependency
+    if (metricRegistry != null) {
+      config.setMetricRegistry(metricRegistry);
     }
+    return new HikariDataSource(config);
   }
 
   @Bean
@@ -103,4 +104,6 @@ protected String property(Environment env, String key) {
   public DatabaseInitializer nflowDatabaseInitializer(@NFlow DataSource dataSource, Environment env) {
     return new DatabaseInitializer(dbType, dataSource, env);
   }
+
+  public abstract SQLVariants sqlVariants();
 }
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/H2DatabaseConfiguration.java b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/H2DatabaseConfiguration.java
index 59636cc4..0720305f 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/H2DatabaseConfiguration.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/H2DatabaseConfiguration.java
@@ -40,6 +40,7 @@ Server h2ConsoleServer(Environment env) throws SQLException {
   }
 
   @Bean
+  @Override
   public SQLVariants sqlVariants() {
     return new H2SQLVariants();
   }
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/MysqlDatabaseConfiguration.java b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/MysqlDatabaseConfiguration.java
index 5c2fcbc6..b5e8b910 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/MysqlDatabaseConfiguration.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/MysqlDatabaseConfiguration.java
@@ -62,6 +62,7 @@ public DatabaseInitializer nflowDatabaseInitializer(@NFlow DataSource nflowDataS
   }
 
   @Bean
+  @Override
   public SQLVariants sqlVariants() {
     return new MySQLVariants();
   }
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/OracleDatabaseConfiguration.java b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/OracleDatabaseConfiguration.java
index e0f2d2c3..10c99e27 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/OracleDatabaseConfiguration.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/OracleDatabaseConfiguration.java
@@ -51,6 +51,7 @@ public DatabaseInitializer nflowDatabaseInitializer(@NFlow DataSource nflowDataS
   }
 
   @Bean
+  @Override
   @DependsOn(NFLOW_DATABASE_INITIALIZER)
   public SQLVariants sqlVariants() {
     return new OracleSqlVariants(useBatchUpdate);
diff --git a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/PgDatabaseConfiguration.java b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/PgDatabaseConfiguration.java
index 8866db2a..11dc617a 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/PgDatabaseConfiguration.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/internal/storage/db/PgDatabaseConfiguration.java
@@ -17,8 +17,8 @@ public PgDatabaseConfiguration() {
     super("postgresql");
   }
 
-
   @Bean
+  @Override
   public SQLVariants sqlVariants() {
     return new PostgreSQLVariants();
   }
diff --git a/nflow-engine/src/main/java/io/nflow/engine/service/WorkflowDefinitionService.java b/nflow-engine/src/main/java/io/nflow/engine/service/WorkflowDefinitionService.java
index 6de7108e..753f405d 100644
--- a/nflow-engine/src/main/java/io/nflow/engine/service/WorkflowDefinitionService.java
+++ b/nflow-engine/src/main/java/io/nflow/engine/service/WorkflowDefinitionService.java
@@ -12,8 +12,10 @@
 import java.util.List;
 import java.util.Map;
 
+import javax.annotation.Nullable;
 import javax.annotation.PostConstruct;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 
 import org.slf4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -31,6 +33,7 @@
  * Service for managing workflow definitions.
  */
 @Component
+@Singleton
 public class WorkflowDefinitionService {
 
   private static final Logger logger = getLogger(WorkflowDefinitionService.class);
@@ -41,7 +44,7 @@
   private final boolean persistWorkflowDefinitions;
 
   @Inject
-  public WorkflowDefinitionService(@NFlow AbstractResource nflowNonSpringWorkflowsListing,
+  public WorkflowDefinitionService(@NFlow @Nullable AbstractResource nflowNonSpringWorkflowsListing,
       WorkflowDefinitionDao workflowDefinitionDao, Environment env) {
     this.nonSpringWorkflowsListing = nflowNonSpringWorkflowsListing;
     this.workflowDefinitionDao = workflowDefinitionDao;
diff --git a/nflow-guice/.settings/org.eclipse.core.resources.prefs b/nflow-guice/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 00000000..29abf999
--- /dev/null
+++ b/nflow-guice/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,6 @@
+eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
+encoding//src/main/resources=UTF-8
+encoding//src/test/java=UTF-8
+encoding//src/test/resources=UTF-8
+encoding/<project>=UTF-8
diff --git a/nflow-guice/.settings/org.eclipse.core.runtime.prefs b/nflow-guice/.settings/org.eclipse.core.runtime.prefs
new file mode 100644
index 00000000..5a0ad22d
--- /dev/null
+++ b/nflow-guice/.settings/org.eclipse.core.runtime.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+line.separator=\n
diff --git a/nflow-guice/.settings/org.eclipse.jdt.core.prefs b/nflow-guice/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 00000000..fbb01bf4
--- /dev/null
+++ b/nflow-guice/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,385 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.8
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=warning
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=warning
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=warning
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=warning
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=warning
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=warning
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=warning
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=warning
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=warning
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=warning
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=warning
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=warning
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=disabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=disabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=enabled
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=warning
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.8
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_lambda_body=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=false
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert
+org.eclipse.jdt.core.formatter.comment.line_length=130
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false
+org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=true
+org.eclipse.jdt.core.formatter.join_wrapped_lines=true
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=130
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=space
+org.eclipse.jdt.core.formatter.tabulation.size=2
+org.eclipse.jdt.core.formatter.use_on_off_tags=false
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/nflow-guice/.settings/org.eclipse.jdt.ui.prefs b/nflow-guice/.settings/org.eclipse.jdt.ui.prefs
new file mode 100644
index 00000000..583c1a3b
--- /dev/null
+++ b/nflow-guice/.settings/org.eclipse.jdt.ui.prefs
@@ -0,0 +1,119 @@
+cleanup.add_default_serial_version_id=true
+cleanup.add_generated_serial_version_id=false
+cleanup.add_missing_annotations=true
+cleanup.add_missing_deprecated_annotations=true
+cleanup.add_missing_methods=false
+cleanup.add_missing_nls_tags=false
+cleanup.add_missing_override_annotations=true
+cleanup.add_missing_override_annotations_interface_methods=true
+cleanup.add_serial_version_id=false
+cleanup.always_use_blocks=true
+cleanup.always_use_parentheses_in_expressions=false
+cleanup.always_use_this_for_non_static_field_access=false
+cleanup.always_use_this_for_non_static_method_access=false
+cleanup.convert_to_enhanced_for_loop=false
+cleanup.correct_indentation=false
+cleanup.format_source_code=false
+cleanup.format_source_code_changes_only=false
+cleanup.make_local_variable_final=true
+cleanup.make_parameters_final=false
+cleanup.make_private_fields_final=true
+cleanup.make_type_abstract_if_missing_method=false
+cleanup.make_variable_declarations_final=false
+cleanup.never_use_blocks=false
+cleanup.never_use_parentheses_in_expressions=true
+cleanup.organize_imports=false
+cleanup.qualify_static_field_accesses_with_declaring_class=false
+cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
+cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
+cleanup.qualify_static_member_accesses_with_declaring_class=true
+cleanup.qualify_static_method_accesses_with_declaring_class=false
+cleanup.remove_private_constructors=true
+cleanup.remove_trailing_whitespaces=false
+cleanup.remove_trailing_whitespaces_all=true
+cleanup.remove_trailing_whitespaces_ignore_empty=false
+cleanup.remove_unnecessary_casts=true
+cleanup.remove_unnecessary_nls_tags=true
+cleanup.remove_unused_imports=true
+cleanup.remove_unused_local_variables=false
+cleanup.remove_unused_private_fields=true
+cleanup.remove_unused_private_members=false
+cleanup.remove_unused_private_methods=true
+cleanup.remove_unused_private_types=true
+cleanup.sort_members=false
+cleanup.sort_members_all=false
+cleanup.use_blocks=false
+cleanup.use_blocks_only_for_return_and_throw=false
+cleanup.use_parentheses_in_expressions=false
+cleanup.use_this_for_non_static_field_access=false
+cleanup.use_this_for_non_static_field_access_only_if_necessary=true
+cleanup.use_this_for_non_static_method_access=false
+cleanup.use_this_for_non_static_method_access_only_if_necessary=true
+cleanup_profile=org.eclipse.jdt.ui.default.eclipse_clean_up_profile
+cleanup_settings_version=2
+eclipse.preferences.version=1
+editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
+formatter_profile=_nflow-engine
+formatter_settings_version=12
+org.eclipse.jdt.ui.ignorelowercasenames=true
+org.eclipse.jdt.ui.importorder=java;javax;org;com;
+org.eclipse.jdt.ui.ondemandthreshold=99
+org.eclipse.jdt.ui.staticondemandthreshold=99
+sp_cleanup.add_default_serial_version_id=true
+sp_cleanup.add_generated_serial_version_id=false
+sp_cleanup.add_missing_annotations=true
+sp_cleanup.add_missing_deprecated_annotations=true
+sp_cleanup.add_missing_methods=false
+sp_cleanup.add_missing_nls_tags=false
+sp_cleanup.add_missing_override_annotations=true
+sp_cleanup.add_missing_override_annotations_interface_methods=true
+sp_cleanup.add_serial_version_id=false
+sp_cleanup.always_use_blocks=true
+sp_cleanup.always_use_parentheses_in_expressions=false
+sp_cleanup.always_use_this_for_non_static_field_access=false
+sp_cleanup.always_use_this_for_non_static_method_access=false
+sp_cleanup.convert_functional_interfaces=false
+sp_cleanup.convert_to_enhanced_for_loop=false
+sp_cleanup.correct_indentation=false
+sp_cleanup.format_source_code=true
+sp_cleanup.format_source_code_changes_only=true
+sp_cleanup.insert_inferred_type_arguments=false
+sp_cleanup.make_local_variable_final=false
+sp_cleanup.make_parameters_final=false
+sp_cleanup.make_private_fields_final=true
+sp_cleanup.make_type_abstract_if_missing_method=false
+sp_cleanup.make_variable_declarations_final=true
+sp_cleanup.never_use_blocks=false
+sp_cleanup.never_use_parentheses_in_expressions=true
+sp_cleanup.on_save_use_additional_actions=true
+sp_cleanup.organize_imports=true
+sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
+sp_cleanup.remove_private_constructors=true
+sp_cleanup.remove_redundant_type_arguments=false
+sp_cleanup.remove_trailing_whitespaces=true
+sp_cleanup.remove_trailing_whitespaces_all=true
+sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
+sp_cleanup.remove_unnecessary_casts=true
+sp_cleanup.remove_unnecessary_nls_tags=false
+sp_cleanup.remove_unused_imports=false
+sp_cleanup.remove_unused_local_variables=false
+sp_cleanup.remove_unused_private_fields=true
+sp_cleanup.remove_unused_private_members=false
+sp_cleanup.remove_unused_private_methods=true
+sp_cleanup.remove_unused_private_types=true
+sp_cleanup.sort_members=false
+sp_cleanup.sort_members_all=false
+sp_cleanup.use_anonymous_class_creation=false
+sp_cleanup.use_blocks=false
+sp_cleanup.use_blocks_only_for_return_and_throw=false
+sp_cleanup.use_lambda=false
+sp_cleanup.use_parentheses_in_expressions=false
+sp_cleanup.use_this_for_non_static_field_access=false
+sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
+sp_cleanup.use_this_for_non_static_method_access=false
+sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
+sp_cleanup.use_type_arguments=false
diff --git a/nflow-guice/.settings/org.eclipse.m2e.core.prefs b/nflow-guice/.settings/org.eclipse.m2e.core.prefs
new file mode 100644
index 00000000..f897a7f1
--- /dev/null
+++ b/nflow-guice/.settings/org.eclipse.m2e.core.prefs
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git a/nflow-guice/pom.xml b/nflow-guice/pom.xml
new file mode 100644
index 00000000..94b913bc
--- /dev/null
+++ b/nflow-guice/pom.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <artifactId>nflow-guice</artifactId>
+  <packaging>jar</packaging>
+  <name>nflow-guice</name>
+  <description>nFlow guice support</description>
+  <url>http://nflow.io</url>
+  <organization>
+    <name>Nitor Creations</name>
+    <url>http://www.nitorcreations.com</url>
+  </organization>
+  <parent>
+    <artifactId>nflow-root</artifactId>
+    <groupId>io.nflow</groupId>
+    <version>4.0.1-SNAPSHOT</version>
+  </parent>
+  <dependencies>
+    <dependency>
+      <groupId>io.nflow</groupId>
+      <artifactId>nflow-engine</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.google.inject</groupId>
+      <artifactId>guice</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.h2database</groupId>
+      <artifactId>h2</artifactId>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.google.code.findbugs</groupId>
+      <artifactId>annotations</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>ch.qos.logback</groupId>
+      <artifactId>logback-classic</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>jcl-over-slf4j</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.slf4j</groupId>
+      <artifactId>log4j-over-slf4j</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.hamcrest</groupId>
+      <artifactId>hamcrest-library</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java b/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java
new file mode 100644
index 00000000..1aee5e36
--- /dev/null
+++ b/nflow-guice/src/main/java/io/nflow/config/guice/EngineModule.java
@@ -0,0 +1,133 @@
+package io.nflow.config.guice;
+
+import static org.apache.commons.lang3.StringUtils.isBlank;
+
+import java.sql.SQLException;
+import java.util.Properties;
+import java.util.concurrent.ThreadFactory;
+
+import javax.inject.Inject;
+import javax.sql.DataSource;
+
+import org.h2.tools.Server;
+import org.springframework.core.env.Environment;
+import org.springframework.core.env.MutablePropertySources;
+import org.springframework.core.env.PropertiesPropertySource;
+import org.springframework.core.env.StandardEnvironment;
+import org.springframework.core.io.AbstractResource;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
+import org.springframework.jdbc.datasource.DataSourceTransactionManager;
+import org.springframework.transaction.PlatformTransactionManager;
+import org.springframework.transaction.support.TransactionSynchronizationManager;
+import org.springframework.transaction.support.TransactionTemplate;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.AbstractModule;
+import com.google.inject.util.Providers;
+
+import io.nflow.engine.internal.config.EngineConfiguration;
+import io.nflow.engine.internal.config.NFlow;
+import io.nflow.engine.internal.dao.ExecutorDao;
+import io.nflow.engine.internal.dao.WorkflowInstanceDao;
+import io.nflow.engine.internal.executor.WorkflowInstanceExecutor;
+import io.nflow.engine.internal.storage.db.DatabaseConfiguration;
+import io.nflow.engine.internal.storage.db.DatabaseInitializer;
+import io.nflow.engine.internal.storage.db.H2DatabaseConfiguration;
+import io.nflow.engine.internal.storage.db.MysqlDatabaseConfiguration;
+import io.nflow.engine.internal.storage.db.OracleDatabaseConfiguration;
+import io.nflow.engine.internal.storage.db.PgDatabaseConfiguration;
+import io.nflow.engine.internal.storage.db.SQLVariants;
+import io.nflow.engine.service.WorkflowDefinitionService;
+
+public class EngineModule extends AbstractModule {
+
+  private final Object metricRegistry;
+  private final Environment env;
+
+  public EngineModule(final Properties properties, final Object metricRegistry) {
+    this.env = new StandardEnvironment() {
+      @Override
+      protected void customizePropertySources(MutablePropertySources propertySources) {
+        if (properties != null) {
+          propertySources.addLast(new PropertiesPropertySource("nflowEngineProperties", properties));
+        }
+      }
+    };
+    this.metricRegistry = metricRegistry;
+  }
+
+  @Override
+  protected void configure() {
+    bind(Environment.class).toInstance(env);
+    EngineConfiguration engineConfiguration = new EngineConfiguration();
+    bind(AbstractResource.class).annotatedWith(NFlow.class)
+        .toProvider(Providers.of(engineConfiguration.nflowNonSpringWorkflowsListing(env)));
+
+    ThreadFactory factory = engineConfiguration.nflowThreadFactory();
+    bind(ThreadFactory.class).annotatedWith(NFlow.class).toInstance(factory);
+    bind(WorkflowInstanceExecutor.class).toInstance(engineConfiguration.nflowExecutor(factory, env));
+    bind(ObjectMapper.class).annotatedWith(NFlow.class).toInstance(engineConfiguration.nflowObjectMapper());
+    bindDatabase();
+    requestInjection(this);
+  }
+
+  private void bindDatabase() {
+    TransactionSynchronizationManager.initSynchronization();
+    TransactionSynchronizationManager.setActualTransactionActive(true);
+
+    DatabaseConfiguration db;
+
+    String dbtype = env.getProperty("nflow.db.type", String.class);
+
+    switch (dbtype) {
+    case "h2":
+      String tcpPort = env.getProperty("nflow.db.h2.tcp.port");
+      if (!isBlank(tcpPort)) {
+        try {
+          Server.createTcpServer("-tcp", "-tcpAllowOthers", "-tcpPort", tcpPort).start();
+        } catch (SQLException e) {
+          throw new RuntimeException(e);
+        }
+      }
+      String consolePort = env.getProperty("nflow.db.h2.console.port");
+      if (!isBlank(consolePort)) {
+        try {
+          Server.createTcpServer("-webPort", consolePort).start();
+        } catch (SQLException e) {
+          throw new RuntimeException(e);
+        }
+      }
+      db = new H2DatabaseConfiguration();
+      break;
+    case "mysql":
+      db = new MysqlDatabaseConfiguration();
+      break;
+    case "oracle":
+      db = new OracleDatabaseConfiguration();
+      break;
+    case "postgres":
+      db = new PgDatabaseConfiguration();
+      break;
+    default:
+      throw new RuntimeException("Unknown DB");
+    }
+    DataSource dataSource = db.nflowDatasource(env, metricRegistry);
+    bind(DataSource.class).annotatedWith(NFlow.class).toInstance(dataSource);
+    bind(DatabaseInitializer.class).annotatedWith(NFlow.class).toInstance(db.nflowDatabaseInitializer(dataSource, env));
+    bind(JdbcTemplate.class).annotatedWith(NFlow.class).toInstance(db.nflowJdbcTemplate(dataSource));
+    bind(NamedParameterJdbcTemplate.class).annotatedWith(NFlow.class).toInstance(db.nflowNamedParameterJdbcTemplate(dataSource));
+    bind(TransactionTemplate.class).annotatedWith(NFlow.class)
+        .toInstance(db.nflowTransactionTemplate(new DataSourceTransactionManager(dataSource)));
+    bind(SQLVariants.class).toInstance(db.sqlVariants());
+    bind(PlatformTransactionManager.class).toInstance(new DataSourceTransactionManager(dataSource));
+  }
+
+  @Inject
+  void initPostConstruct(WorkflowInstanceDao workflowInstanceDao, ExecutorDao executorDao,
+      WorkflowDefinitionService workflowDefinitionService) throws Exception {
+    workflowInstanceDao.findColumnMaxLengths();
+    executorDao.findHostMaxLength();
+    workflowDefinitionService.postProcessWorkflowDefinitions();
+  }
+}
diff --git a/nflow-guice/src/test/java/io/nflow/config/guice/DemoWorkflow.java b/nflow-guice/src/test/java/io/nflow/config/guice/DemoWorkflow.java
new file mode 100644
index 00000000..d71ac91c
--- /dev/null
+++ b/nflow-guice/src/test/java/io/nflow/config/guice/DemoWorkflow.java
@@ -0,0 +1,56 @@
+package io.nflow.config.guice;
+
+import static io.nflow.engine.workflow.definition.NextAction.moveToState;
+import static io.nflow.engine.workflow.definition.NextAction.stopInState;
+import static io.nflow.engine.workflow.definition.WorkflowStateType.end;
+import static io.nflow.engine.workflow.definition.WorkflowStateType.manual;
+import static io.nflow.engine.workflow.definition.WorkflowStateType.normal;
+import static io.nflow.engine.workflow.definition.WorkflowStateType.start;
+
+import org.springframework.stereotype.Component;
+
+import io.nflow.engine.workflow.definition.NextAction;
+import io.nflow.engine.workflow.definition.StateExecution;
+import io.nflow.engine.workflow.definition.WorkflowDefinition;
+import io.nflow.engine.workflow.definition.WorkflowState;
+import io.nflow.engine.workflow.definition.WorkflowStateType;
+
+@Component
+public class DemoWorkflow extends WorkflowDefinition<DemoWorkflow.State> {
+
+  public static final String DEMO_WORKFLOW_TYPE = "demo";
+
+  public static enum State implements WorkflowState {
+    begin(start), process(normal), done(end), error(manual);
+
+    private WorkflowStateType type;
+
+    private State(WorkflowStateType type) {
+      this.type = type;
+    }
+
+    @Override
+    public WorkflowStateType getType() {
+      return type;
+    }
+
+    @Override
+    public String getDescription() {
+      return name();
+    }
+  }
+
+  public DemoWorkflow() {
+    super(DEMO_WORKFLOW_TYPE, State.begin, State.error);
+    permit(State.begin, State.process);
+    permit(State.process, State.done);
+  }
+
+  public NextAction begin(StateExecution execution) {
+    return moveToState(State.process, "Go to process state");
+  }
+
+  public NextAction process(StateExecution execution) {
+    return stopInState(State.done, "Go to done state");
+  }
+}
diff --git a/nflow-guice/src/test/java/io/nflow/config/guice/EngineModuleTest.java b/nflow-guice/src/test/java/io/nflow/config/guice/EngineModuleTest.java
new file mode 100644
index 00000000..3455333e
--- /dev/null
+++ b/nflow-guice/src/test/java/io/nflow/config/guice/EngineModuleTest.java
@@ -0,0 +1,101 @@
+package io.nflow.config.guice;
+
+import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.nullValue;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+import java.io.IOException;
+import java.util.Properties;
+import java.util.concurrent.ThreadFactory;
+
+import org.joda.time.DateTime;
+import org.junit.Test;
+import org.springframework.core.io.AbstractResource;
+import org.springframework.core.io.ClassPathResource;
+import org.springframework.scheduling.concurrent.CustomizableThreadFactory;
+
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+
+import io.nflow.config.guice.DemoWorkflow.State;
+import io.nflow.engine.internal.config.NFlow;
+import io.nflow.engine.internal.config.WorkflowLifecycle;
+import io.nflow.engine.internal.executor.WorkflowInstanceExecutor;
+import io.nflow.engine.service.WorkflowDefinitionService;
+import io.nflow.engine.service.WorkflowInstanceService;
+import io.nflow.engine.workflow.instance.WorkflowInstance;
+
+public class EngineModuleTest {
+
+  @Test
+  public void testH2WithGuiceConfiguration() {
+    Properties props = getEngineConfigurationProperties();
+    Injector injector = Guice.createInjector(new EngineModule(props, null));
+
+    WorkflowInstanceExecutor executor = injector.getInstance(WorkflowInstanceExecutor.class);
+    assertThat(executor.getQueueRemainingCapacity(), is(200));
+
+    AbstractResource nonSpringWorkflowsListing = injector.getInstance(Key.get(AbstractResource.class, NFlow.class));
+    assertThat(nonSpringWorkflowsListing, nullValue());
+
+    ThreadFactory factory = injector.getInstance(Key.get(ThreadFactory.class, NFlow.class));
+    assertThat(factory, instanceOf(CustomizableThreadFactory.class));
+    assertThat(((CustomizableThreadFactory) factory).getThreadNamePrefix(), is("nflow-executor-"));
+    assertThat(((CustomizableThreadFactory) factory).getThreadGroup().getName(), is("nflow"));
+
+    ObjectMapper mapper = injector.getInstance(Key.get(ObjectMapper.class, NFlow.class));
+    assertThat(mapper.canSerialize(DateTime.class), is(true));
+    assertThat(mapper.getSerializationConfig().getDefaultPropertyInclusion().getValueInclusion(),
+        is(JsonInclude.Include.NON_EMPTY));
+
+    WorkflowLifecycle lifecycle = injector.getInstance(WorkflowLifecycle.class);
+    if (lifecycle.isAutoStartup()) {
+      lifecycle.start();
+    }
+
+    assertThat(lifecycle.getPhase(), is(Integer.MAX_VALUE));
+    assertThat(lifecycle.isAutoStartup(), is(true));
+
+    WorkflowDefinitionService workflowDefinitionService = injector.getInstance(WorkflowDefinitionService.class);
+    workflowDefinitionService.addWorkflowDefinition(new DemoWorkflow());
+
+    WorkflowInstanceService workflowInstanceService = injector.getInstance(WorkflowInstanceService.class);
+
+    WorkflowInstance instance = new WorkflowInstance.Builder().setType("demo").setState("begin").setNextActivation(DateTime.now())
+        .build();
+    int id = workflowInstanceService.insertWorkflowInstance(instance);
+
+    while (!instance.state.equals(State.done.name())) {
+      try {
+        Thread.sleep(5000);
+      } catch (InterruptedException e) {
+        e.printStackTrace();
+      }
+      instance = workflowInstanceService.getWorkflowInstance(id);
+    }
+    Runnable callback = mock(Runnable.class);
+    lifecycle.stop(callback);
+    verify(callback).run();
+  }
+
+  private Properties getEngineConfigurationProperties() {
+    ClassPathResource engineProperties = new ClassPathResource("nflow-engine.properties");
+    Properties p = new Properties();
+    try {
+      p.load(engineProperties.getInputStream());
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+    p.setProperty("nflow.db.type", "h2");
+    p.setProperty("nflow.executor.thread.count", "100");
+    p.setProperty("nflow.dispatcher.await.termination.seconds", "60");
+    p.setProperty("nflow.dispatcher.executor.thread.keepalive.seconds", "0");
+    return p;
+  }
+}
diff --git a/nflow-guice/src/test/resources/junit.properties b/nflow-guice/src/test/resources/junit.properties
new file mode 100644
index 00000000..6714cfb0
--- /dev/null
+++ b/nflow-guice/src/test/resources/junit.properties
@@ -0,0 +1,17 @@
+nflow.executor.group=junit
+nflow.executor.timeout.seconds=900
+nflow.executor.keepalive.seconds=60
+
+nflow.workflow.instance.query.max.results=10000
+nflow.workflow.instance.query.max.results.default=100
+nflow.workflow.instance.query.max.actions=1000
+nflow.workflow.instance.query.max.actions.default=100
+
+nflow.db.h2.driver=org.h2.jdbcx.JdbcDataSource
+nflow.db.h2.url=jdbc:h2:mem:test;TRACE_LEVEL_FILE=4
+nflow.db.h2.user=sa
+nflow.db.h2.password=
+
+nflow.db.max_pool_size=20
+nflow.db.idle_timeout_seconds=600
+nflow.db.create_on_startup=true
diff --git a/nflow-guice/src/test/resources/logback-test.xml b/nflow-guice/src/test/resources/logback-test.xml
new file mode 100644
index 00000000..e2e609af
--- /dev/null
+++ b/nflow-guice/src/test/resources/logback-test.xml
@@ -0,0 +1,53 @@
+<configuration scan="true" scanPeriod="10 seconds">
+
+  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+    <filter class="ch.qos.logback.classic.filter.LevelFilter">
+      <level>WARN</level>
+      <onMatch>DENY</onMatch>
+      <onMismatch>NEUTRAL</onMismatch>
+    </filter>
+    <filter class="ch.qos.logback.classic.filter.LevelFilter">
+      <level>ERROR</level>
+      <onMatch>DENY</onMatch>
+      <onMismatch>NEUTRAL</onMismatch>
+    </filter>
+    <encoder>
+      <pattern>%d{dd.MM.yyyy HH:mm:ss,SSS} %-5p [%t] %-30.30c - [user:%X{username}] %msg%n</pattern>
+    </encoder>
+  </appender>
+
+  <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
+    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
+      <level>WARN</level>
+    </filter>
+    <encoder>
+      <pattern>%d{dd.MM.yyyy HH:mm:ss,SSS} %-5p [%t] %-30.30c - [user:%X{username}] %msg%n</pattern>
+    </encoder>
+    <target>System.err</target>
+  </appender>
+
+	<appender name="STDOUT-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
+		<appender-ref ref="STDOUT" />
+		<includeCallerData>true</includeCallerData>
+		<queueSize>2000</queueSize>
+		<!-- do not lose warn, info or trace events if queue gets full -->
+		<discardingThreshold>0</discardingThreshold>
+	</appender>
+
+	<appender name="STDERR-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
+		<appender-ref ref="STDERR" />
+		<includeCallerData>true</includeCallerData>
+		<queueSize>2000</queueSize>
+	</appender>
+
+	<logger name="io.nflow" level="info"/>
+	<!-- to enable logging of executed sql statements (which does not include parameter values), uncomment this: -->
+	<!-- 
+	  <logger name="org.springframework.jdbc.core.JdbcTemplate" level="debug"/>
+  	-->
+  	
+  <root level="warn">
+    <appender-ref ref="STDOUT-ASYNC" />
+    <appender-ref ref="STDERR-ASYNC" />
+  </root>
+</configuration>
diff --git a/pom.xml b/pom.xml
index a0ee410e..5f6f9855 100644
--- a/pom.xml
+++ b/pom.xml
@@ -77,6 +77,11 @@
       <email>edvard.fonsell@nitor.fi</email>
       <organization>Nitor Creations</organization>
     </developer>
+    <developer>
+      <name>Chen Jing</name>
+      <email>chen.jing@nitor.fi</email>
+      <organization>Nitor Creations</organization>
+    </developer>
   </developers>
   <modules>
     <module>nflow-rest-api</module>
@@ -85,6 +90,7 @@
     <module>nflow-tests</module>
     <module>nflow-metrics</module>
     <module>nflow-perf-test</module>
+    <module>nflow-guice</module>
   </modules>
   <properties>
     <jdk.version>1.8</jdk.version>
@@ -97,6 +103,7 @@
     <findbugs-annotations.version>3.0.1u2</findbugs-annotations.version>
     <findbugs-contrib.version>6.6.1</findbugs-contrib.version>
     <findbugs.version>3.0.1</findbugs.version>
+    <guice.version>4.1.0</guice.version>
     <h2.version>1.4.192</h2.version>
     <hamcrest.version>1.3</hamcrest.version>
     <hibernate.validator.version>5.2.4.Final</hibernate.validator.version>
@@ -469,6 +476,12 @@
         <artifactId>matchers</artifactId>
         <version>${nitor-matchers.version}</version>
       </dependency>
+      <!-- guice -->
+      <dependency>
+        <groupId>com.google.inject</groupId>
+        <artifactId>guice</artifactId>
+        <version>${guice.version}</version>
+      </dependency>
       <!-- spring -->
       <dependency>
         <groupId>org.springframework</groupId>
