diff --git a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
index 1d7a784d38..234cc5d20f 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
@@ -202,6 +202,7 @@ private CheckList() {
       .add(UtilityClassWithPublicConstructorCheck.class)
       .add(StringLiteralInsideEqualsCheck.class)
       .add(ReturnOfBooleanExpressionsCheck.class)
+      .add(ReuseRandomCheck.class)
       .add(AccessibilityChangeCheck.class)
       .add(BooleanLiteralCheck.class)
       .add(ExpressionComplexityCheck.class)
diff --git a/java-checks/src/main/java/org/sonar/java/checks/ReuseRandomCheck.java b/java-checks/src/main/java/org/sonar/java/checks/ReuseRandomCheck.java
new file mode 100755
index 0000000000..e47ca6ff5b
--- /dev/null
+++ b/java-checks/src/main/java/org/sonar/java/checks/ReuseRandomCheck.java
@@ -0,0 +1,74 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+package org.sonar.java.checks;
+
+import java.util.Collections;
+import java.util.List;
+import org.sonar.check.Rule;
+import org.sonar.java.checks.methods.AbstractMethodDetection;
+import org.sonar.java.matcher.MethodMatcher;
+import org.sonar.plugins.java.api.semantic.Symbol;
+import org.sonar.plugins.java.api.tree.AssignmentExpressionTree;
+import org.sonar.plugins.java.api.tree.ExpressionTree;
+import org.sonar.plugins.java.api.tree.IdentifierTree;
+import org.sonar.plugins.java.api.tree.NewClassTree;
+import org.sonar.plugins.java.api.tree.Tree;
+import org.sonar.plugins.java.api.tree.Tree.Kind;
+import org.sonar.plugins.java.api.tree.VariableTree;
+
+@Rule(key = "S2119")
+public class ReuseRandomCheck extends AbstractMethodDetection {
+
+  @Override
+  protected List<MethodMatcher> getMethodInvocationMatchers() {
+    return Collections.singletonList(MethodMatcher.create().typeDefinition("java.util.Random").name("<init>").withoutParameter());
+  }
+
+  @Override
+  protected void onConstructorFound(NewClassTree newClassTree) {
+    if (assignedToLocalVariablesNotInConstructorOrStaticMain(newClassTree)) {
+      reportIssue(newClassTree.identifier(), "Save and re-use this \"Random\".");
+    }
+  }
+
+  private static boolean assignedToLocalVariablesNotInConstructorOrStaticMain(Tree tree) {
+    Tree parent = tree.parent();
+    if (parent.is(Kind.ASSIGNMENT)) {
+      return isLocalVariableNotInConstructorOrStaticMain(((AssignmentExpressionTree) parent).variable()) &&
+        assignedToLocalVariablesNotInConstructorOrStaticMain(parent);
+    } else if (parent.is(Kind.VARIABLE)) {
+      return isLocalVariableNotInConstructorOrStaticMain(((VariableTree) parent).simpleName());
+    } else if (parent.is(Kind.PARENTHESIZED_EXPRESSION)) {
+      return assignedToLocalVariablesNotInConstructorOrStaticMain(parent);
+    } else {
+      return parent.is(Kind.EXPRESSION_STATEMENT);
+    }
+  }
+
+  private static boolean isLocalVariableNotInConstructorOrStaticMain(ExpressionTree expression) {
+    if (expression.is(Kind.IDENTIFIER)) {
+      Symbol symbol = ((IdentifierTree) expression).symbol().owner();
+      return symbol.isMethodSymbol() &&
+        !("<init>".equals(symbol.name()) || ("main".equals(symbol.name()) && symbol.isStatic()));
+    }
+    return false;
+  }
+
+}
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.html b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.html
new file mode 100755
index 0000000000..287d9cf9a8
--- /dev/null
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.html
@@ -0,0 +1,26 @@
+<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and produces only mediocre randomness. For better
+efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>
+<p>For even better, less-guessable random values, create, store and reuse a <code>SecureRandom</code> instead.</p>
+<p>This rule finds cases where a new <code>Random</code> or <code>SecureRandom</code> is created each time a method is invoked.</p>
+<h2>Noncompliant Code Example</h2>
+<pre>
+public void doSomethingCommon() {
+  Random rand = new Random();  // Noncompliant; new instance created with each invocation
+  int rValue = rand.nextInt();
+  //...
+</pre>
+<h2>Compliant Solution</h2>
+<pre>
+private Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random
+
+public void doSomethingCommon() {
+  int rValue = this.rand.nextInt();
+  //...
+</pre>
+<h2>Exceptions</h2>
+<p>A class which uses a <code>Random</code> in its constructor and nowhere else will be ignored by this rule.</p>
+<h2>See</h2>
+<ul>
+  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
+</ul>
+
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.json b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.json
new file mode 100755
index 0000000000..fa539d2176
--- /dev/null
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S2119_java.json
@@ -0,0 +1,16 @@
+{
+  "title": "\"Random\" objects should be reused",
+  "type": "VULNERABILITY",
+  "status": "ready",
+  "remediation": {
+    "func": "Constant\/Issue",
+    "constantCost": "5min"
+  },
+  "tags": [
+    
+  ],
+  "defaultSeverity": "Critical",
+  "ruleSpecification": "RSPEC-2119",
+  "sqKey": "S2119",
+  "scope": "All"
+}
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/Sonar_way_profile.json b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/Sonar_way_profile.json
index 8cd0c7a869..3a44221ee7 100755
--- a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/Sonar_way_profile.json
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/Sonar_way_profile.json
@@ -146,6 +146,7 @@
     "S2115",
     "S2116",
     "S2118",
+    "S2119",
     "S2122",
     "S2123",
     "S2127",
diff --git a/java-checks/src/test/files/checks/ReuseRandomCheck.java b/java-checks/src/test/files/checks/ReuseRandomCheck.java
new file mode 100755
index 0000000000..92a92e7652
--- /dev/null
+++ b/java-checks/src/test/files/checks/ReuseRandomCheck.java
@@ -0,0 +1,45 @@
+import java.util.Random;
+
+public class A {
+
+  static Random staticField = new Random(); // Compliant for static field
+  Random field = new Random(); // Compliant for field
+
+  A() {
+    Random localVar = new Random(); // Compliant in constructor
+  }
+
+  void func(long seed, Random param) {
+    Random localVar1 = new Random(); // Noncompliant [[sc=28;ec=34]] {{Save and re-use this "Random".}}
+    Random localVar2 = new Random(seed); // Compliant for Random(long seed)
+    Object localVar3 = new Object();
+
+    staticField = new Random();
+    field = new Random();
+    this.field = new Random();
+
+    field = localVar1 = new Random();
+    field = (localVar1 = new Random());
+    localVar1 = localVar2 = new Random(); // Noncompliant
+    localVar1 = (localVar2 = new Random()); // Noncompliant
+    Random localVar4 = field = new Random();
+    Random localVar5 = localVar4 = new Random(); // Noncompliant
+    new Random(); // Noncompliant
+
+    param = new Random(); // Noncompliant
+
+    func(12, new Random());
+    func(12, localVar1 = new Random());
+  }
+
+  public static void main(String[] args) {
+    Random localVar = new Random(); // Compliant in "main()"
+  }
+
+  public class B {
+    /*not static*/ void main() {
+      Random localVar = new Random(); // Noncompliant
+    }
+  }
+
+}
diff --git a/java-checks/src/test/java/org/sonar/java/checks/ReuseRandomCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/ReuseRandomCheckTest.java
new file mode 100755
index 0000000000..59db94e439
--- /dev/null
+++ b/java-checks/src/test/java/org/sonar/java/checks/ReuseRandomCheckTest.java
@@ -0,0 +1,31 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+package org.sonar.java.checks;
+
+import org.junit.Test;
+import org.sonar.java.checks.verifier.JavaCheckVerifier;
+
+public class ReuseRandomCheckTest {
+  @Test
+  public void test() {
+    JavaCheckVerifier.verify("src/test/files/checks/ReuseRandomCheck.java", new ReuseRandomCheck());
+    JavaCheckVerifier.verifyNoIssueWithoutSemantic("src/test/files/checks/ReuseRandomCheck.java", new ReuseRandomCheck());
+  }
+}
diff --git a/sonar-java-plugin/pom.xml b/sonar-java-plugin/pom.xml
index ca42f64bcf..82cfec8064 100755
--- a/sonar-java-plugin/pom.xml
+++ b/sonar-java-plugin/pom.xml
@@ -112,7 +112,7 @@
             <configuration>
               <rules>
                 <requireFilesSize>
-                  <maxsize>9000000</maxsize>
+                  <maxsize>9030000</maxsize>
                   <minsize>8800000</minsize>
                   <files>
                     <file>${project.build.directory}/${project.build.finalName}.jar</file>
