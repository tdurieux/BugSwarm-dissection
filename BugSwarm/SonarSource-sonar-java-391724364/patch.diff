diff --git a/java-checks/pom.xml b/java-checks/pom.xml
index 4b5ff7637d..f26c7d5d0f 100755
--- a/java-checks/pom.xml
+++ b/java-checks/pom.xml
@@ -212,6 +212,11 @@
                   <version>2.1</version>
                   <type>jar</type>
                 </artifactItem>
+                <artifactItem>
+                  <groupId>javax.inject</groupId>
+                  <artifactId>javax.inject</artifactId>
+                  <version>1</version>
+                </artifactItem>
                 <artifactItem>
                   <groupId>com.google.guava</groupId>
                   <artifactId>guava</artifactId>
diff --git a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
index 98ad56bba0..88b418ee32 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
@@ -19,23 +19,99 @@
  */
 package org.sonar.java.checks.spring;
 
-import com.google.common.collect.ImmutableList;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.Set;
 import org.sonar.check.Rule;
 import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
+import org.sonar.plugins.java.api.semantic.Symbol;
+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;
 import org.sonar.plugins.java.api.tree.ClassTree;
+import org.sonar.plugins.java.api.tree.IdentifierTree;
+import org.sonar.plugins.java.api.tree.MethodTree;
 import org.sonar.plugins.java.api.tree.Tree;
+import org.sonar.plugins.java.api.tree.VariableTree;
 
 @Rule(key = "S3305")
 public class SpringConfigurationWithAutowiredFieldsCheck extends IssuableSubscriptionVisitor {
 
+  private static final String MESSAGE_FORMAT = "Inject this field value directly into \"%s\", the only method that uses it.";
+
+  private static final String CONFIGURATION_ANNOTATION = "org.springframework.context.annotation.Configuration";
+  private static final String BEAN_ANNOTATION = "org.springframework.context.annotation.Bean";
+  private static final List<String> AUTOWIRED_ANNOTATIONS = Arrays.asList(
+    "org.springframework.beans.factory.annotation.Autowired",
+    "javax.inject.Inject");
+
   @Override
   public List<Tree.Kind> nodesToVisit() {
-    return ImmutableList.of(Tree.Kind.CLASS);
+    return Collections.singletonList(Tree.Kind.CLASS);
   }
 
   @Override
   public void visitNode(Tree tree) {
     ClassTree classTree = (ClassTree) tree;
+    if (hasSemantic() && classTree.symbol().metadata().isAnnotatedWith(CONFIGURATION_ANNOTATION)) {
+      AutowiredFieldVisitor autowiredFieldVisitor = new AutowiredFieldVisitor();
+      classTree.accept(autowiredFieldVisitor);
+      BeanMethodVisitor beanMethodVisitor = new BeanMethodVisitor(autowiredFieldVisitor.autowiredFields.keySet());
+      classTree.accept(beanMethodVisitor);
+      beanMethodVisitor.beanMethodsThatUseAutowiredField.entrySet().stream()
+        .filter(pair -> pair.getValue().size() == 1)
+        .forEach(pair -> reportIssue(
+          autowiredFieldVisitor.autowiredFields.get(pair.getKey()).simpleName(),
+          String.format(MESSAGE_FORMAT, pair.getValue().get(0))));
+    }
   }
+
+  private static class AutowiredFieldVisitor extends BaseTreeVisitor {
+    private final Map<Symbol, VariableTree> autowiredFields = new HashMap<>();
+
+    @Override
+    public void visitVariable(VariableTree tree) {
+      Symbol symbol = tree.symbol();
+      if (symbol.owner().isTypeSymbol() && AUTOWIRED_ANNOTATIONS.stream().anyMatch(a -> symbol.metadata().isAnnotatedWith(a))) {
+        autowiredFields.put(symbol, tree);
+      }
+    }
+  }
+
+  private static class BeanMethodVisitor extends BaseTreeVisitor {
+    private final Map<Symbol, List<String>> beanMethodsThatUseAutowiredField = new HashMap<>();
+
+    BeanMethodVisitor(Set<Symbol> autowiredFields) {
+      autowiredFields.forEach(f -> beanMethodsThatUseAutowiredField.put(f, new ArrayList<>()));
+    }
+
+    @Override
+    public void visitMethod(MethodTree methodTree) {
+      if (methodTree.symbol().metadata().isAnnotatedWith(BEAN_ANNOTATION)) {
+        IdentifiersVisitor identifiersVisitor = new IdentifiersVisitor(beanMethodsThatUseAutowiredField.keySet());
+        methodTree.accept(identifiersVisitor);
+        // for each autowired field that is referenced in this method, add the current method name to the list
+        identifiersVisitor.isFieldReferenced.entrySet().stream()
+          .filter(Map.Entry::getValue)
+          .map(Map.Entry::getKey)
+          .forEach(field -> beanMethodsThatUseAutowiredField.get(field).add(methodTree.simpleName().name()));
+      }
+    }
+
+    private static class IdentifiersVisitor extends BaseTreeVisitor {
+      private final Map<Symbol, Boolean> isFieldReferenced = new HashMap<>();
+
+      IdentifiersVisitor(Set<Symbol> autowiredFields) {
+        autowiredFields.forEach(f -> isFieldReferenced.put(f, false));
+      }
+
+      @Override
+      public void visitIdentifier(IdentifierTree identifierTree) {
+        isFieldReferenced.computeIfPresent(identifierTree.symbol(), (fieldSym, isPresent) -> isPresent = true);
+      }
+    }
+  }
+
 }
diff --git a/java-checks/src/test/files/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java b/java-checks/src/test/files/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
index 2c6edebf84..42608f9417 100755
--- a/java-checks/src/test/files/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
+++ b/java-checks/src/test/files/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java
@@ -1,25 +1,66 @@
 package src.test.files.checks.spring;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Bean;
+import javax.inject.Inject;
 
-class Bar {
-
-}
+class Bar { }
 
 class Foo {
   private final Bar bar;
+  public Foo(Bar bar) { this.bar = bar; }
+}
 
-  public Foo(Bar bar) {
-    this.bar = bar;
+@Configuration
+class A {
+
+  @Autowired private Bar singleUsage; // Noncompliant [[sc=26;ec=37]] {{Inject this field value directly into "method", the only method that uses it.}}
+  @Inject private Bar jsr330; // Noncompliant [[sc=23;ec=29]] {{Inject this field value directly into "jsr330", the only method that uses it.}}
+  @Autowired private Bar multipleUsage;
+  @Autowired private Bar notUsedInBeanMethod;
+  @Autowired private Bar notUsed;
+  private Bar notAutowired;
+
+  @Bean
+  public Foo method() {
+    return new Foo(this.singleUsage);
+  }
+
+  @Bean
+  public Foo jsr330() {
+    return new Foo(this.jsr330);
+  }
+
+  @Bean
+  public Foo method2() {
+    return new Foo(this.multipleUsage);
+  }
+
+  @Bean
+  public Foo method3() {
+    return new Foo(this.multipleUsage);
+  }
+
+  public Foo method4() {
+    return new Foo(this.notUsedInBeanMethod);
+  }
+
+  @Bean
+  public Foo method5() {
+    return new Foo(this.notAutowired);
   }
 }
 
 @Configuration
-class A {
+class FalseNegative {
 
-  @Autowired private Bar bar; // Noncompliant
+  private Bar bar; // FN
+
+  @Autowired
+  public void setBar(Bar bar) {
+    this.bar = bar;
+  }
 
   @Bean
   public Foo method() {
@@ -28,7 +69,7 @@ public Foo method() {
 }
 
 @Configuration
-class B {
+class Ok {
 
   @Bean
   public Foo method(Bar bar) {
diff --git a/sonar-java-plugin/pom.xml b/sonar-java-plugin/pom.xml
index e25af136cf..fb87cdc633 100755
--- a/sonar-java-plugin/pom.xml
+++ b/sonar-java-plugin/pom.xml
@@ -107,7 +107,7 @@
             <configuration>
               <rules>
                 <requireFilesSize>
-                  <maxsize>8200000</maxsize>
+                  <maxsize>8300000</maxsize>
                   <minsize>4500000</minsize>
                   <files>
                     <file>${project.build.directory}/${project.build.finalName}.jar</file>
