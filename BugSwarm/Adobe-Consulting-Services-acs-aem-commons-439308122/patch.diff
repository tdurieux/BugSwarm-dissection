diff --git a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java
index 1028614ab9..8bbc7ad543 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiConsumer.java
@@ -20,7 +20,6 @@
 package com.adobe.acs.commons.functions;
 
 import aQute.bnd.annotation.ConsumerType;
-import java.util.Map;
 import java.util.function.BiConsumer;
 
 /**
@@ -40,8 +39,8 @@
 @SuppressWarnings("squid:S00112")
 public interface CheckedBiConsumer<T, U> {
 
-    public static <T,U> CheckedBiConsumer<T,U> from(BiConsumer<T,U> handler) {
-        return (t, u) -> handler.accept(t, u);
+    static <T,U> CheckedBiConsumer<T,U> from(BiConsumer<T,U> handler) {
+        return handler == null ? null : (t, u) -> handler.accept(t, u);
     }
 
     /**
diff --git a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java
index a485a10f1d..46f78ec236 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedBiFunction.java
@@ -36,6 +36,9 @@
 @FunctionalInterface
 @SuppressWarnings("squid:S00112")
 public interface CheckedBiFunction<T, U, R> {
+    static <T,U,R> CheckedBiFunction<T, U, R> from(java.util.function.BiFunction<T,U,R> function) {
+        return function == null ? null : (t, u) -> function.apply(t, u);
+    }
 
     /**
      * Applies this function to the given arguments.
diff --git a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedConsumer.java b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedConsumer.java
index c4f6e36cc7..56bb525455 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedConsumer.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedConsumer.java
@@ -33,6 +33,9 @@
 @FunctionalInterface
 @SuppressWarnings("squid:S00112")
 public interface CheckedConsumer<T> {
+    static <T> CheckedConsumer<T> from(java.util.function.Consumer<T> consumer) {
+        return consumer == null ? null : t -> consumer.accept(t);
+    }
 
     void accept(T t) throws Exception;
 
diff --git a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java
index 864a4795e4..3f8dc051ef 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/functions/CheckedFunction.java
@@ -35,7 +35,7 @@
 public interface CheckedFunction<T, R> {
 
     public static <T,R> CheckedFunction<T,R> from(Function<T,R> function) {
-        return t -> function.apply(t);
+        return function == null ? null : t -> function.apply(t);
     }
     
     /**
diff --git a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java
index c8dfb96c45..f1e601e861 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/processes/BrokenLinksReport.java
@@ -132,8 +132,8 @@ public void storeReport(ProcessInstance instance, ResourceResolver rr) throws Re
     public void buildReport(ActionManager manager) {
         TreeFilteringResourceVisitor visitor = new TreeFilteringResourceVisitor();
         visitor.setBreadthFirstMode();
-        visitor.setTraversalFilter(null);
-        visitor.setResourceVisitor((resource, depth) -> {
+        visitor.setTraversalFilterChecked(null);
+        visitor.setResourceVisitorChecked((resource, depth) -> {
             manager.deferredWithResolver(rr -> {
                 Map<String, List<String>> brokenRefs = collectBrokenReferences(resource, regex, excludeList, deepCheckList);
                 for(Map.Entry<String, List<String>> ref : brokenRefs.entrySet()){
