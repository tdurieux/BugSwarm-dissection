diff --git a/modules/wyc/src/wyc/builder/CodeGenerator.java b/modules/wyc/src/wyc/builder/CodeGenerator.java
index 41762fc7a0..b4a679e6e6 100755
--- a/modules/wyc/src/wyc/builder/CodeGenerator.java
+++ b/modules/wyc/src/wyc/builder/CodeGenerator.java
@@ -1889,11 +1889,11 @@ private int generate(Expr.UnOp expr, Environment environment, CodeForest.Block b
 		int[] targets = new int[] { environment.allocate(expr.result().raw()) };
 		switch (expr.op) {
 		case NEG:
-			block.add(Codes.BinaryOperator(expr.result().raw(), targets, operands, Codes.OperatorKind.NEG),
+			block.add(Codes.Operator(expr.result().raw(), targets, operands, Codes.OperatorKind.NEG),
 					attributes(expr));
 			break;
 		case INVERT:
-			block.add(Codes.BinaryOperator(expr.result().raw(), targets, operands, Codes.OperatorKind.INVERT),
+			block.add(Codes.Operator(expr.result().raw(), targets, operands, Codes.OperatorKind.INVERT),
 					attributes(expr));
 			break;
 		case NOT:
@@ -1924,10 +1924,11 @@ private int generate(Expr.LengthOf expr, Environment environment, CodeForest.Blo
 
 	private int generate(Expr.Dereference expr, Environment environment, CodeForest.Block block, CodeForest forest,
 			Context context) {
-		int operand = generate(expr.src, environment, block, forest, context);
-		int target = environment.allocate(expr.result().raw());
-		block.add(Codes.Dereference(expr.srcType.raw(), target, operand), attributes(expr));
-		return target;
+		int[] operands = new int[] { generate(expr.src, environment, block, forest, context) };
+		int[] targets = new int[] { environment.allocate(expr.result().raw()) };
+		block.add(Codes.Operator(expr.srcType.raw(), targets, operands, Codes.OperatorKind.DEREFERENCE),
+				attributes(expr));
+		return targets[0];
 	}
 
 	private int generate(Expr.IndexOf expr, Environment environment, CodeForest.Block block, CodeForest forest,
@@ -1974,7 +1975,7 @@ private int generate(Expr.BinOp v, Environment environment, CodeForest.Block blo
 					generate(v.rhs, environment, block, forest, context) 
 			};
 
-			block.add(Codes.BinaryOperator(result, targets, operands, OP2BOP(v.op, v, context)),
+			block.add(Codes.Operator(result, targets, operands, OP2BOP(v.op, v, context)),
 					attributes(v));
 
 			return targets[0];
diff --git a/modules/wyil/src/wyil/builders/VcExprGenerator.java b/modules/wyil/src/wyil/builders/VcExprGenerator.java
index 6c33a5ccc3..c1ada38d13 100755
--- a/modules/wyil/src/wyil/builders/VcExprGenerator.java
+++ b/modules/wyil/src/wyil/builders/VcExprGenerator.java
@@ -54,9 +54,7 @@ public void transform(Code code, CodeForest forest, VcBranch branch) {
 				transformUnary(Expr.Unary.Op.LENGTHOF, (Codes.LengthOf) code,
 						branch, forest);
 			} else if (code instanceof Codes.Operator) {
-				Codes.Operator bc = (Codes.Operator) code;
-				transformBinary(binaryOperatorMap[bc.kind.ordinal()], bc,
-						branch, forest);
+				transform((Codes.Operator) code, forest, branch);				
 			} else if (code instanceof Codes.ArrayGenerator) {
 				transform((Codes.ArrayGenerator) code, forest, branch);
 			} else if (code instanceof Codes.NewArray) {
@@ -75,8 +73,6 @@ public void transform(Code code, CodeForest forest, VcBranch branch) {
 				transform((Codes.IndirectInvoke) code, forest, branch);
 			} else if (code instanceof Codes.Invoke) {
 				transform((Codes.Invoke) code, forest, branch);
-			} else if (code instanceof Codes.Invert) {
-				transform((Codes.Invert) code, forest, branch);
 			} else if (code instanceof Codes.Label) {
 				// skip
 			} else if (code instanceof Codes.IndexOf) {
@@ -87,10 +83,6 @@ public void transform(Code code, CodeForest forest, VcBranch branch) {
 				transform((Codes.Assign) code, forest, branch);
 			} else if (code instanceof Codes.Update) {
 				transform((Codes.Update) code, forest, branch);
-			} else if (code instanceof Codes.UnaryOperator) {
-				transform((Codes.UnaryOperator) code, forest, branch);
-			} else if (code instanceof Codes.Dereference) {
-				transform((Codes.Dereference) code, forest, branch);
 			} else if (code instanceof Codes.Nop) {
 				// skip
 			} else if (code instanceof Codes.NewObject) {
@@ -120,11 +112,15 @@ protected void transform(Codes.Assign code, CodeForest forest,
 	/**
 	 * Maps binary bytecodes into expression opcodes.
 	 */
-	private static Expr.Binary.Op[] binaryOperatorMap = { Expr.Binary.Op.ADD,
+	private static Expr.Binary.Op[] binaryOperatorMap = {
+			null, // neg
+			null, // invert
+			null, // deref
+			Expr.Binary.Op.ADD,
 			Expr.Binary.Op.SUB, 
 			Expr.Binary.Op.MUL, 
 			Expr.Binary.Op.DIV,
-			Expr.Binary.Op.REM, 
+			Expr.Binary.Op.REM,
 			null, 
 			null, // bitwise or
 			null, // bitwise xor
@@ -133,6 +129,37 @@ protected void transform(Codes.Assign code, CodeForest forest,
 			null // right shift
 	};
 
+	protected void transform(Codes.Operator code, CodeForest forest, VcBranch branch) {
+		switch(code.kind) {
+		case NEG:{
+			Codes.Operator bc = (Codes.Operator) code;
+			transformUnary(Expr.Unary.Op.NEG, bc, branch, forest);
+			break;
+		}
+		case INVERT: 
+		case DEREFERENCE: {
+			branch.havoc(code.target(0));
+			break;
+		}
+		case ADD:
+		case SUB:
+		case MUL:
+		case DIV:
+		case REM:{
+			transformBinary(binaryOperatorMap[code.kind.ordinal()], code, branch, forest);
+			break;
+		}
+		case BITWISEAND:
+		case BITWISEOR:
+		case BITWISEXOR: 
+		case LEFTSHIFT:
+		case RIGHTSHIFT: {
+			branch.havoc(code.target(0));
+			break;
+		}
+		}
+	}
+	
 	protected void transform(Codes.Convert code, CodeForest forest, VcBranch branch) {
 		Collection<Attribute> attributes = VcUtils.toWycsAttributes(forest.get(branch.pc()).attributes());
 		Expr result = branch.read(code.operand(0));
@@ -150,10 +177,6 @@ protected void transform(Codes.Debug code, CodeForest forest,
 		// do nout
 	}
 
-	protected void transform(Codes.Dereference code, CodeForest forest, VcBranch branch) {
-		branch.havoc(code.target(0));
-	}
-
 	protected void transform(Codes.FieldLoad code, CodeForest forest, VcBranch branch) {
 		ArrayList<String> fields = new ArrayList<String>(code.type(0).fields().keySet());
 		Collections.sort(fields);
@@ -222,10 +245,6 @@ protected void transform(Codes.Invoke code, CodeForest forest,
 		}
 	}
 
-	protected void transform(Codes.Invert code, CodeForest forest, VcBranch branch) {
-		branch.havoc(code.target(0));
-	}
-
 	protected void transform(Codes.IndexOf code, CodeForest forest, VcBranch branch) {
 		Expr src = branch.read(code.operand(0));
 		Expr idx = branch.read(code.operand(1));
@@ -266,16 +285,6 @@ protected void transform(Codes.Nop code, CodeForest forest,
 		// do nout
 	}
 
-	protected void transform(Codes.UnaryOperator code, CodeForest forest, VcBranch branch) {
-		switch (code.kind) {
-		case NEG:
-			transformUnary(Expr.Unary.Op.NEG, code, branch, forest);
-			break;
-		default:
-			branch.havoc(code.target(0));
-		}
-	}
-
 	protected void transform(Codes.Update code, CodeForest forest, VcBranch branch) {
 		Expr result = branch.read(code.result());
 		Expr oldSource = branch.read(code.target(0));
diff --git a/modules/wyil/src/wyil/checks/ModuleCheck.java b/modules/wyil/src/wyil/checks/ModuleCheck.java
index 973ef42bc7..e8ca8d0ca9 100755
--- a/modules/wyil/src/wyil/checks/ModuleCheck.java
+++ b/modules/wyil/src/wyil/checks/ModuleCheck.java
@@ -140,10 +140,12 @@ protected void checkFunctionPure(int blockID, CodeForest forest) {
 				syntaxError(errorMessage(METHODCALL_NOT_PERMITTED_IN_FUNCTION), filename, e.attribute(SourceLocation.class));
 			} else if(code instanceof Codes.NewObject) {
 				syntaxError(errorMessage(ALLOCATION_NOT_PERMITTED_IN_FUNCTION), filename, e.attribute(SourceLocation.class));
-			} else if(code instanceof Codes.Dereference){
-				syntaxError(errorMessage(REFERENCE_ACCESS_NOT_PERMITTED_IN_FUNCTION), filename, e.attribute(SourceLocation.class));
-			} else if(code instanceof Code.AbstractCompoundBytecode) {
-				Code.AbstractCompoundBytecode a = (Code.AbstractCompoundBytecode) code; 
+			} else if (code instanceof Codes.Operator
+					&& ((Codes.Operator) code).kind == Codes.OperatorKind.DEREFERENCE) {
+				syntaxError(errorMessage(REFERENCE_ACCESS_NOT_PERMITTED_IN_FUNCTION), filename,
+						e.attribute(SourceLocation.class));
+			} else if (code instanceof Code.AbstractCompoundBytecode) {
+				Code.AbstractCompoundBytecode a = (Code.AbstractCompoundBytecode) code;
 				checkFunctionPure(a.block(), forest);
 			}
 		}
diff --git a/modules/wyil/src/wyil/io/WyilFileReader.java b/modules/wyil/src/wyil/io/WyilFileReader.java
index 7ed7e9d723..b267a0b8d9 100755
--- a/modules/wyil/src/wyil/io/WyilFileReader.java
+++ b/modules/wyil/src/wyil/io/WyilFileReader.java
@@ -935,12 +935,12 @@ public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Ob
 		};
 		schemas[Code.OPCODE_dereference] = new Schema(Targets.ONE, Operands.ONE, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.Dereference((Type.Reference) types[0], targets[0], operands[0]);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.DEREFERENCE);
 			}
 		};
 		schemas[Code.OPCODE_invert] = new Schema(Targets.ONE, Operands.ONE, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.INVERT);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.INVERT);
 			}
 		};
 		schemas[Code.OPCODE_lengthof] = new Schema(Targets.ONE, Operands.ONE, Types.ONE){
@@ -950,7 +950,7 @@ public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Ob
 		};
 		schemas[Code.OPCODE_neg] = new Schema(Targets.ONE, Operands.ONE, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.NEG);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.NEG);
 			}
 		};
 		schemas[Code.OPCODE_fieldload] = new Schema(Targets.ONE, Operands.ONE, Types.ONE, Extras.STRING){
@@ -1008,52 +1008,52 @@ public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Ob
 		// =========================================================================
 		schemas[Code.OPCODE_add] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.ADD);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.ADD);
 			}
 		};
 		schemas[Code.OPCODE_sub] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.SUB);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.SUB);
 			}
 		};
 		schemas[Code.OPCODE_mul] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.MUL);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.MUL);
 			}
 		};
 		schemas[Code.OPCODE_div] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.DIV);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.DIV);
 			}
 		};
 		schemas[Code.OPCODE_rem] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.REM);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.REM);
 			}
 		};
 		schemas[Code.OPCODE_bitwiseor] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.BITWISEOR);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.BITWISEOR);
 			}
 		};
 		schemas[Code.OPCODE_bitwisexor] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.BITWISEXOR);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.BITWISEXOR);
 			}
 		};
 		schemas[Code.OPCODE_bitwiseand] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.BITWISEAND);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.BITWISEAND);
 			}
 		};
 		schemas[Code.OPCODE_lshr] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.LEFTSHIFT);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.LEFTSHIFT);
 			}
 		};
 		schemas[Code.OPCODE_rshr] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
 			public Code construct(int opcode,int[] targets, int[] operands, Type[] types, Object[] extras) {
-				return Codes.BinaryOperator(types[0], targets, operands, Codes.OperatorKind.RIGHTSHIFT);
+				return Codes.Operator(types[0], targets, operands, Codes.OperatorKind.RIGHTSHIFT);
 			}
 		};
 		schemas[Code.OPCODE_indexof] = new Schema(Targets.ONE, Operands.TWO, Types.ONE){
diff --git a/modules/wyil/src/wyil/lang/Code.java b/modules/wyil/src/wyil/lang/Code.java
index 437db6fc3d..050ce4c1fa 100755
--- a/modules/wyil/src/wyil/lang/Code.java
+++ b/modules/wyil/src/wyil/lang/Code.java
@@ -346,7 +346,6 @@ public boolean equals(Object o) {
 	public static final int UNARY_ASSIGNABLE = UNARY_OPERATOR+5;
 	
 	public static final int OPCODE_assign      = UNARY_ASSIGNABLE+0;
-	public static final int OPCODE_dereference = UNARY_ASSIGNABLE+1;
 
 	public static final int OPCODE_lengthof    = UNARY_ASSIGNABLE+3;
 	public static final int OPCODE_move        = UNARY_ASSIGNABLE+4;
@@ -376,23 +375,24 @@ public boolean equals(Object o) {
 	
 	public static final int OPCODE_neg         = BINARY_ASSIGNABLE+0;
 	public static final int OPCODE_invert      = BINARY_ASSIGNABLE+1;	
-	public static final int OPCODE_add         = BINARY_ASSIGNABLE+2;
-	public static final int OPCODE_sub         = BINARY_ASSIGNABLE+3;
-	public static final int OPCODE_mul         = BINARY_ASSIGNABLE+4;
-	public static final int OPCODE_div         = BINARY_ASSIGNABLE+5;
-	public static final int OPCODE_rem         = BINARY_ASSIGNABLE+6;
-	public static final int OPCODE_bitwiseor   = BINARY_ASSIGNABLE+7;
-	public static final int OPCODE_bitwisexor  = BINARY_ASSIGNABLE+8;
-	public static final int OPCODE_bitwiseand  = BINARY_ASSIGNABLE+9;
-	public static final int OPCODE_lshr        = BINARY_ASSIGNABLE+10;
-	public static final int OPCODE_rshr        = BINARY_ASSIGNABLE+11;
-	public static final int OPCODE_indexof     = BINARY_ASSIGNABLE+12;
-	public static final int OPCODE_arrygen     = BINARY_ASSIGNABLE+13;
+	public static final int OPCODE_dereference = BINARY_ASSIGNABLE+2;
+	public static final int OPCODE_add         = BINARY_ASSIGNABLE+3;
+	public static final int OPCODE_sub         = BINARY_ASSIGNABLE+4;
+	public static final int OPCODE_mul         = BINARY_ASSIGNABLE+5;
+	public static final int OPCODE_div         = BINARY_ASSIGNABLE+6;
+	public static final int OPCODE_rem         = BINARY_ASSIGNABLE+7;
+	public static final int OPCODE_bitwiseor   = BINARY_ASSIGNABLE+8;
+	public static final int OPCODE_bitwisexor  = BINARY_ASSIGNABLE+9;
+	public static final int OPCODE_bitwiseand  = BINARY_ASSIGNABLE+10;
+	public static final int OPCODE_lshr        = BINARY_ASSIGNABLE+11;
+	public static final int OPCODE_rshr        = BINARY_ASSIGNABLE+12;
+	public static final int OPCODE_indexof     = BINARY_ASSIGNABLE+13;
+	public static final int OPCODE_arrygen     = BINARY_ASSIGNABLE+14;
 
 	// =========================================================================
 	// Nary Assignables
 	// =========================================================================
-	public static final int NARY_ASSIGNABLE = BINARY_ASSIGNABLE+14;
+	public static final int NARY_ASSIGNABLE = BINARY_ASSIGNABLE+15;
 	
 	public static final int OPCODE_newarray         = NARY_ASSIGNABLE+0;
 	public static final int OPCODE_newrecord        = NARY_ASSIGNABLE+1;
diff --git a/modules/wyil/src/wyil/lang/Codes.java b/modules/wyil/src/wyil/lang/Codes.java
index eab15bee1b..2bdd93ce7b 100755
--- a/modules/wyil/src/wyil/lang/Codes.java
+++ b/modules/wyil/src/wyil/lang/Codes.java
@@ -45,7 +45,7 @@ public static Assume Assume(int block) {
 		return new Assume(block);
 	}
 
-	public static Operator BinaryOperator(Type type, int[] targets, int[] operands, OperatorKind op) {
+	public static Operator Operator(Type type, int[] targets, int[] operands, OperatorKind op) {
 		return new Operator(type, targets, operands, op);
 	}
 
@@ -308,11 +308,6 @@ public static NewObject NewObject(Type.Reference type, int target,
 		return new NewObject(type, target, operand);
 	}
 
-	public static Dereference Dereference(Type.Reference type, int target,
-			int operand) {
-		return new Dereference(type, target, operand);
-	}
-
 	public static Quantify Quantify(int startOperand, int endOperand, int indexOperand, int[] modifiedOperands,
 			int block) {
 		return new Quantify(startOperand, endOperand, indexOperand, modifiedOperands, block);
@@ -354,53 +349,58 @@ public String toString() {
 				return "invert";
 			}
 		},
+		DEREFERENCE(2) {
+			public String toString() {
+				return "deref";
+			}
+		},
 		// Binary
-		ADD(2) {
+		ADD(3) {
 			public String toString() {
 				return "add";
 			}
 		},
-		SUB(3) {
+		SUB(4) {
 			public String toString() {
 				return "sub";
 			}
 		},
-		MUL(4) {
+		MUL(5) {
 			public String toString() {
 				return "mul";
 			}
 		},
-		DIV(5) {
+		DIV(6) {
 			public String toString() {
 				return "div";
 			}
 		},
-		REM(6) {
+		REM(7) {
 			public String toString() {
 				return "rem";
 			}
 		},
-		BITWISEOR(7) {
+		BITWISEOR(8) {
 			public String toString() {
 				return "or";
 			}
 		},
-		BITWISEXOR(8) {
+		BITWISEXOR(9) {
 			public String toString() {
 				return "xor";
 			}
 		},
-		BITWISEAND(9) {
+		BITWISEAND(10) {
 			public String toString() {
 				return "and";
 			}
 		},
-		LEFTSHIFT(10) {
+		LEFTSHIFT(11) {
 			public String toString() {
 				return "shl";
 			}
 		},
-		RIGHTSHIFT(11) {
+		RIGHTSHIFT(12) {
 			public String toString() {
 				return "shr";
 			}
@@ -474,7 +474,7 @@ public int opcode() {
 
 		@Override
 		public Code clone(int[] nTargets, int[] nOperands) {
-			return BinaryOperator(type(0), nTargets, nOperands, kind);
+			return Operator(type(0), nTargets, nOperands, kind);
 		}
 
 		public int hashCode() {
@@ -490,8 +490,7 @@ public boolean equals(Object o) {
 		}
 
 		public String toString() {
-			return kind + " %" + target(0) + " = %" + operand(0) + ", %"
-					+ operand(1) + " : " + type(0);
+			return kind + " %" + target(0) + " = " + arrayToString(operands()) + " : " + type(0);
 		}
 	}
 
@@ -2478,40 +2477,6 @@ public String toString() {
 		}
 	}
 
-	/**
-	 * Reads a reference value from the operand register, dereferences it (i.e.
-	 * extracts the value it refers to) and writes this to the target register.
-	 *
-	 * @author David J. Pearce
-	 *
-	 */
-	public static final class Dereference extends AbstractBytecode<Type.Reference> {
-
-		private Dereference(Type.Reference type, int target, int operand) {
-			super(type, target, operand);
-		}
-
-		@Override
-		public int opcode() {
-			return OPCODE_dereference;
-		}
-
-		protected Code clone(int[] nTargets, int[] nOperands) {
-			return Dereference(type(0), nTargets[0], nOperands[0]);
-		}
-
-		public boolean equals(Object o) {
-			if (o instanceof Dereference) {
-				return super.equals(o);
-			}
-			return false;
-		}
-
-		public String toString() {
-			return "deref %" + target(0) + " = %" + operand(0) + " : " + type(0);
-		}
-	}
-
 	// =============================================================
 	// Helpers
 	// =============================================================
diff --git a/modules/wyil/src/wyil/util/Interpreter.java b/modules/wyil/src/wyil/util/Interpreter.java
index a1f71c9a70..d33ba50023 100755
--- a/modules/wyil/src/wyil/util/Interpreter.java
+++ b/modules/wyil/src/wyil/util/Interpreter.java
@@ -169,8 +169,6 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.Convert) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Debug) {
 			return execute((Codes.Debug) bytecode, frame, context);
-		} else if (bytecode instanceof Codes.Dereference) {
-			return execute((Codes.Dereference) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Fail) {
 			return execute((Codes.Fail) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.FieldLoad) {
@@ -287,6 +285,7 @@ private Object execute(Codes.Operator bytecode, Constant[] frame,
 		switch(bytecode.kind) {
 		case NEG:			
 		case INVERT:			
+		case DEREFERENCE:
 			result = executeUnary(bytecode.kind,frame[bytecode.operand(0)],context); 
 			break;
 		case ADD:
@@ -328,7 +327,12 @@ private Constant executeUnary(Codes.OperatorKind kind,
 		}
 		case INVERT: {
 			Constant.Byte b = checkType(operand, context, Constant.Byte.class);			
-			return Constant.V_BYTE((byte) ~b.value);			
+			return Constant.V_BYTE((byte) ~b.value);
+		}
+		case DEREFERENCE: {
+			checkType(operand, context, ConstantObject.class);
+			ConstantObject ref = (ConstantObject) operand;
+			return ref.read();
 		}
 		}
 		return (Constant) deadCode(context);
@@ -584,15 +588,6 @@ private Object execute(Codes.Debug bytecode, Constant[] frame,
 		return context.pc.next();
 	}
 
-	private Object execute(Codes.Dereference bytecode, Constant[] frame,
-			Context context) {
-		Constant operand = frame[bytecode.operand(0)];
-		checkType(operand, context, ConstantObject.class);
-		ConstantObject ref = (ConstantObject) operand;
-		frame[bytecode.target(0)] = ref.read();
-		return context.pc.next();
-	}
-
 	/**
 	 * Execute a fail bytecode instruction at a given point in the function or
 	 * method body. This will generate a runtime fault.
diff --git a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
index 5a28952058..d5bd2df285 100755
--- a/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
+++ b/modules/wyjc/src/wyjc/Wyil2JavaBuilder.java
@@ -609,8 +609,6 @@ private int translate(CodeForest.Index pc, Code code, int freeSlot, CodeForest f
 				translate(pc, (Codes.IndirectInvoke) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.Invoke) {
 				translate(pc, (Codes.Invoke) code, freeSlot, forest, bytecodes);
-			} else if (code instanceof Codes.Invert) {
-				translate(pc, (Codes.Invert) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.Label) {
 				translate(pc, (Codes.Label) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.ArrayGenerator) {
@@ -633,10 +631,6 @@ private int translate(CodeForest.Index pc, Code code, int freeSlot, CodeForest f
 				translate(pc, (Codes.NewArray) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.NewRecord) {
 				translate(pc, (Codes.NewRecord) code, freeSlot, forest, bytecodes);
-			} else if (code instanceof Codes.UnaryOperator) {
-				translate(pc, (Codes.UnaryOperator) code, freeSlot, forest, bytecodes);
-			} else if (code instanceof Codes.Dereference) {
-				translate(pc, (Codes.Dereference) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.Return) {
 				translate(pc, (Codes.Return) code, freeSlot, forest, bytecodes);
 			} else if (code instanceof Codes.Nop) {
@@ -1306,10 +1300,19 @@ private void translate(CodeForest.Index index, Codes.Operator c, int freeSlot, C
 			ArrayList<Bytecode> bytecodes) {
 
 		JvmType type = convertUnderlyingType(c.type(0));
-		JvmType.Function ftype = new JvmType.Function(type, type);
+		JvmType.Function ftype = null;
 
 		// first, load operands
 		switch (c.kind) {
+		case NEG:
+		case INVERT:
+			ftype = new JvmType.Function(type);
+			bytecodes.add(new Bytecode.Load(c.operand(0), type));
+			break;
+		case DEREFERENCE:
+			ftype = new JvmType.Function(JAVA_LANG_OBJECT);
+			bytecodes.add(new Bytecode.Load(c.operand(0), type));
+			break;			
 		case ADD:
 		case SUB:
 		case MUL:
@@ -1318,11 +1321,13 @@ private void translate(CodeForest.Index index, Codes.Operator c, int freeSlot, C
 		case BITWISEAND:
 		case BITWISEOR:
 		case BITWISEXOR:
+			ftype = new JvmType.Function(type, type);
 			bytecodes.add(new Bytecode.Load(c.operand(0), type));
 			bytecodes.add(new Bytecode.Load(c.operand(1), type));
 			break;
 		case LEFTSHIFT:
 		case RIGHTSHIFT:
+			ftype = new JvmType.Function(type, WHILEYINT);
 			bytecodes.add(new Bytecode.Load(c.operand(0), type));
 			bytecodes.add(new Bytecode.Load(c.operand(1), WHILEYINT));
 			break;
@@ -1330,6 +1335,18 @@ private void translate(CodeForest.Index index, Codes.Operator c, int freeSlot, C
 
 		// second, apply operation
 		switch (c.kind) {
+		case NEG:
+			bytecodes.add(new Bytecode.Invoke((JvmType.Clazz) type, "negate", ftype, Bytecode.InvokeMode.VIRTUAL));
+			break;
+		case INVERT:
+			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "compliment", ftype, Bytecode.InvokeMode.VIRTUAL));
+			break;
+		case DEREFERENCE:
+			bytecodes.add(new Bytecode.Invoke(WHILEYOBJECT, "state", ftype, Bytecode.InvokeMode.VIRTUAL));
+			// finally, we need to cast the object we got back appropriately.
+			Type.Reference pt = (Type.Reference) c.type(0);
+			addReadConversion(pt.element(), bytecodes);
+			break;
 		case ADD:
 			bytecodes.add(new Bytecode.Invoke((JvmType.Clazz) type, "add",
 					ftype, Bytecode.InvokeMode.VIRTUAL));
@@ -1351,27 +1368,22 @@ private void translate(CodeForest.Index index, Codes.Operator c, int freeSlot, C
 					"remainder", ftype, Bytecode.InvokeMode.VIRTUAL));
 			break;
 		case BITWISEAND:
-			ftype = new JvmType.Function(type, type);
 			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "and", ftype,
 					Bytecode.InvokeMode.VIRTUAL));
 			break;
 		case BITWISEOR:
-			ftype = new JvmType.Function(type, type);
 			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "or", ftype,
 					Bytecode.InvokeMode.VIRTUAL));
 			break;
 		case BITWISEXOR:
-			ftype = new JvmType.Function(type, type);
 			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "xor", ftype,
 					Bytecode.InvokeMode.VIRTUAL));
 			break;
 		case LEFTSHIFT:
-			ftype = new JvmType.Function(type, WHILEYINT);
 			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "leftShift", ftype,
 					Bytecode.InvokeMode.VIRTUAL));
 			break;
 		case RIGHTSHIFT:
-			ftype = new JvmType.Function(type, WHILEYINT);
 			bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "rightShift", ftype,
 					Bytecode.InvokeMode.VIRTUAL));
 			break;
@@ -1383,31 +1395,6 @@ private void translate(CodeForest.Index index, Codes.Operator c, int freeSlot, C
 		bytecodes.add(new Bytecode.Store(c.target(0), type));
 	}
 
-	private void translate(CodeForest.Index index, Codes.Invert c, int freeSlot, CodeForest forest, ArrayList<Bytecode> bytecodes) {
-		JvmType type = convertUnderlyingType(c.type(0));
-		bytecodes.add(new Bytecode.Load(c.operand(0), type));
-		JvmType.Function ftype = new JvmType.Function(type);
-		bytecodes.add(new Bytecode.Invoke(WHILEYBYTE, "compliment", ftype, Bytecode.InvokeMode.VIRTUAL));
-		bytecodes.add(new Bytecode.Store(c.target(0), type));
-	}
-
-	private void translate(CodeForest.Index index, Codes.UnaryOperator c, int freeSlot, CodeForest forest,
-			ArrayList<Bytecode> bytecodes) {
-		JvmType srcType = convertUnderlyingType(c.type(0));
-		JvmType targetType = null;
-		String name = null;
-		switch (c.kind) {
-		case NEG:
-			targetType = srcType;
-			name = "negate";
-			break;
-		}
-		JvmType.Function ftype = new JvmType.Function(targetType);
-		bytecodes.add(new Bytecode.Load(c.operand(0), srcType));
-		bytecodes.add(new Bytecode.Invoke((JvmType.Clazz) srcType, name, ftype, Bytecode.InvokeMode.VIRTUAL));
-		bytecodes.add(new Bytecode.Store(c.target(0), targetType));
-	}
-
 	private void translate(CodeForest.Index index, Codes.NewObject c, int freeSlot, CodeForest forest, ArrayList<Bytecode> bytecodes) {
 		JvmType type = convertUnderlyingType(c.type(0));
 		bytecodes.add(new Bytecode.New(WHILEYOBJECT));
@@ -1419,18 +1406,6 @@ private void translate(CodeForest.Index index, Codes.NewObject c, int freeSlot,
 		bytecodes.add(new Bytecode.Store(c.target(0), type));
 	}
 
-	private void translate(CodeForest.Index index, Codes.Dereference c, int freeSlot, CodeForest forest,
-			ArrayList<Bytecode> bytecodes) {
-		JvmType type = convertUnderlyingType(c.type(0));
-		JvmType.Function ftype = new JvmType.Function(JAVA_LANG_OBJECT);
-		bytecodes.add(new Bytecode.Load(c.operand(0), type));
-		bytecodes.add(new Bytecode.Invoke(WHILEYOBJECT, "state", ftype, Bytecode.InvokeMode.VIRTUAL));
-		// finally, we need to cast the object we got back appropriately.
-		Type.Reference pt = (Type.Reference) c.type(0);
-		addReadConversion(pt.element(), bytecodes);
-		bytecodes.add(new Bytecode.Store(c.target(0), convertUnderlyingType(c.type(0).element())));
-	}
-
 	protected void translate(CodeForest.Index index, Codes.NewArray c, int freeSlot, CodeForest forest, ArrayList<Bytecode> bytecodes) {
 		bytecodes.add(new Bytecode.New(WHILEYARRAY));
 		bytecodes.add(new Bytecode.Dup(WHILEYARRAY));
