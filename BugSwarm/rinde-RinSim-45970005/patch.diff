diff --git a/experiment-base/.settings/org.eclipse.core.resources.prefs b/experiment-base/.settings/org.eclipse.core.resources.prefs
index 99f26c0203..e9441bb123 100755
--- a/experiment-base/.settings/org.eclipse.core.resources.prefs
+++ b/experiment-base/.settings/org.eclipse.core.resources.prefs
@@ -1,2 +1,3 @@
 eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
 encoding/<project>=UTF-8
diff --git a/experiment-base/.settings/org.eclipse.jdt.core.prefs b/experiment-base/.settings/org.eclipse.jdt.core.prefs
index 94a2466cdb..ffa6440945 100755
--- a/experiment-base/.settings/org.eclipse.jdt.core.prefs
+++ b/experiment-base/.settings/org.eclipse.jdt.core.prefs
@@ -5,9 +5,17 @@ org.eclipse.jdt.core.compiler.annotation.nonnull=javax.annotation.Nonnull
 org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=javax.annotation.ParametersAreNonnullByDefault
 org.eclipse.jdt.core.compiler.annotation.nullable=javax.annotation.Nullable
 org.eclipse.jdt.core.compiler.annotation.nullanalysis=enabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
 org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.doc.comment.support=enabled
 org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
 org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
 org.eclipse.jdt.core.compiler.problem.deadCode=warning
@@ -16,6 +24,7 @@ org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=enabled
 org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=enabled
 org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
 org.eclipse.jdt.core.compiler.problem.emptyStatement=warning
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
 org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
 org.eclipse.jdt.core.compiler.problem.fallthroughCase=warning
 org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
@@ -28,12 +37,25 @@ org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
 org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
 org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
 org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=warning
+org.eclipse.jdt.core.compiler.problem.invalidJavadoc=warning
+org.eclipse.jdt.core.compiler.problem.invalidJavadocTags=enabled
+org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsDeprecatedRef=enabled
+org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsNotVisibleRef=enabled
+org.eclipse.jdt.core.compiler.problem.invalidJavadocTagsVisibility=protected
 org.eclipse.jdt.core.compiler.problem.localVariableHiding=warning
 org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
 org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
 org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
 org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=warning
+org.eclipse.jdt.core.compiler.problem.missingJavadocComments=warning
+org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocCommentsVisibility=protected
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagDescription=return_tag
+org.eclipse.jdt.core.compiler.problem.missingJavadocTags=warning
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters=disabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility=protected
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
 org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
 org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/AbstractExperimentBuilder.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/AbstractExperimentBuilder.java
index 37c456968c..5ceedecba3 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/AbstractExperimentBuilder.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/AbstractExperimentBuilder.java
@@ -131,10 +131,10 @@ public T showGui() {
   // return showGui();
   // }
 
-  /**
-   * Add a configuration to the experiment. For each simulation
-   * {@link StochasticSupplier#get(long)} is called and the resulting
-   * {@link MASConfiguration} is used for a <i>single</i> simulation.
+  /*
+   * Add a configuration to the experiment. For each simulation {@link
+   * StochasticSupplier#get(long)} is called and the resulting {@link
+   * MASConfiguration} is used for a <i>single</i> simulation.
    * @param config The configuration to add.
    * @return This, as per the builder pattern.
    */
@@ -144,10 +144,10 @@ public T addConfiguration(Configuration config) {
     return self();
   }
 
-  /**
-   * Adds all configurations to the experiment. For each simulation
-   * {@link StochasticSupplier#get(long)} is called and the resulting
-   * {@link MASConfiguration} is used for a <i>single</i> simulation.
+  /*
+   * Adds all configurations to the experiment. For each simulation {@link
+   * StochasticSupplier#get(long)} is called and the resulting {@link
+   * MASConfiguration} is used for a <i>single</i> simulation.
    * @param configs The configurations to add.
    * @return This, as per the builder pattern.
    */
@@ -228,12 +228,12 @@ public T withRandomSeed(long seed) {
     return self();
   }
 
-  /**
+  /*
    * Specify a {@link PostProcessor} which is used to gather additional results
    * from a simulation. The data gathered by the post-processor ends up in
    * {@link SimulationResult#simulationData}.
    * @param postProcessor The post-processor to use, by default there is no
-   *          post-processor.
+   * post-processor.
    * @return This, as per the builder pattern.
    */
   public T usePostProcessor(PostProcessor<?, ?> postProcessor) {
@@ -254,25 +254,17 @@ public T numBatches(int num) {
     return self();
   }
 
-  /**
+  /*
    * When this method is called the experiment will be performed in a
    * distributed fashion using the <a href="http://www.jppf.org/">JPPF</a>
    * framework. By default JPPF will attempt to connect to a driver on
    * <code>localhost</code>. For changing the JPPF settings, please consult the
-   * <a href="http://www.jppf.org/doc/">JPPF documentation</a>.
-   * <p>
+   * <a href="http://www.jppf.org/doc/">JPPF documentation</a>. <p>
    * <b>Requirements:</b> {@link ..}, {@link ..} and {@link PostProcessor} (if
-   * used) must implement {@link java.io.Serializable}.
-   * <p>
-   * <b>Incompatible settings</b><br>
-   * The following settings will be ignored when computing is done in a
-   * distributed fashion:
-   * <ul>
-   * <li>{@link #withThreads(int)}</li>
-   * <li>{@link #showGui()}</li>
-   * <li>{@link #showGui(UICreator)}</li>
-   * </ul>
-   *
+   * used) must implement {@link java.io.Serializable}. <p> <b>Incompatible
+   * settings</b><br> The following settings will be ignored when computing is
+   * done in a distributed fashion: <ul> <li>{@link #withThreads(int)}</li>
+   * <li>{@link #showGui()}</li> <li>{@link #showGui(UICreator)}</li> </ul>
    * @return This, as per the builder pattern.
    */
   public T computeDistributed() {
@@ -404,8 +396,8 @@ int getNumScenarios() {
         for (int i = 0; i < repetitions; i++) {
           final long seed = seeds.get(i);
           runnerBuilder
-          .add(new SimArgs(scenario, configuration,
-              seed, objectiveFunction, showGui, postProc));
+              .add(new SimArgs(scenario, configuration,
+                  seed, objectiveFunction, showGui, postProc));
         }
       }
     }
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Computer.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Computer.java
index 945b987b32..5e50891f31 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Computer.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Computer.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import java.util.Set;
@@ -10,6 +25,7 @@
    * @param inputs The inputs which define which simulations to compute.
    * @return An instance of {@link ExperimentResults} containing the results.
    */
-  ExperimentResults compute(AbstractExperimentBuilder<?> builder, Set<SimArgs> inputs);
+  ExperimentResults compute(AbstractExperimentBuilder<?> builder,
+      Set<SimArgs> inputs);
 
 }
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Configuration.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Configuration.java
index 9818579f8e..babb1e9a5d 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Configuration.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Configuration.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 public interface Configuration {
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/DryRunComputer.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/DryRunComputer.java
index f5f4cbd3c8..f834d5ff97 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/DryRunComputer.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/DryRunComputer.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import java.io.PrintStream;
@@ -27,7 +42,7 @@ public ExperimentResults compute(AbstractExperimentBuilder<?> builder,
       Set<SimArgs> inputs) {
 
     printStream
-        .println("===================== RinSim Experiment start dry run =====================");
+    .println("===================== RinSim Experiment start dry run =====================");
 
     if (originalComputer == Computers.LOCAL) {
       printStream.println("Using local computation.");
@@ -43,10 +58,10 @@ public ExperimentResults compute(AbstractExperimentBuilder<?> builder,
     printStream.println("Factorial experiment setup:");
     printStream.println();
     printStream
-        .println("     # configurations = " + builder.configurationsSet.size());
+    .println("     # configurations = " + builder.configurationsSet.size());
     printStream
-        .println("          # scenarios = "
-            + builder.getNumScenarios());
+    .println("          # scenarios = "
+        + builder.getNumScenarios());
     printStream.println("        # repetitions = " + builder.repetitions);
     printStream.println("------------------------------------ x");
     printStream.println("  total # simulations = " + inputs.size());
@@ -54,13 +69,13 @@ public ExperimentResults compute(AbstractExperimentBuilder<?> builder,
 
     if (verbose) {
       printStream
-          .println("scenario-class,scenario-problem-class,scenario-instance-id,config,seed,obj-func,gui,post-processor,ui-creator");
+      .println("scenario-class,scenario-problem-class,scenario-instance-id,config,seed,obj-func,gui,post-processor,ui-creator");
       for (final SimArgs args : inputs) {
         printStream.println(args);
       }
     }
     printStream
-        .println("===================== RinSim Experiment finished dry run =====================");
+    .println("===================== RinSim Experiment finished dry run =====================");
     return new ExperimentResults(builder,
         ImmutableSet.<SimulationResult> of());
   }
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentResults.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentResults.java
index 2c35e8f3c1..785e571901 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentResults.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentResults.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import static com.google.common.collect.Lists.newArrayList;
@@ -14,7 +29,7 @@
 /**
  * Value object containing all the results of a single experiment as performed
  * by ...
- * @author Rinde van Lon 
+ * @author Rinde van Lon
  */
 public final class ExperimentResults {
   /**
@@ -55,7 +70,8 @@
    */
   public final ImmutableSet<SimulationResult> results;
 
-  ExperimentResults(AbstractExperimentBuilder exp, ImmutableSet<SimulationResult> res) {
+  ExperimentResults(AbstractExperimentBuilder exp,
+      ImmutableSet<SimulationResult> res) {
     objectiveFunction = exp.objectiveFunction;
     configurations = ImmutableSet.copyOf(exp.configurationsSet);
     scenarios = exp.scenariosBuilder.build();
@@ -111,4 +127,4 @@ public String toString() {
         .add("results", results)
         .toString();
   }
-}
\ No newline at end of file
+}
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunner.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunner.java
index 33ae37d092..e868662ea5 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunner.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunner.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import java.util.concurrent.Callable;
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunnerFactory.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunnerFactory.java
index 6042623c94..af6e79328a 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunnerFactory.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ExperimentRunnerFactory.java
@@ -1,8 +1,23 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import com.google.common.base.Function;
 
 public interface ExperimentRunnerFactory extends
-    Function<SimArgs, ExperimentRunner> {
+Function<SimArgs, ExperimentRunner> {
 
 }
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/LocalComputer.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/LocalComputer.java
index 6ba5bbe278..0f95b0abe9 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/LocalComputer.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/LocalComputer.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 import java.util.List;
@@ -37,7 +52,7 @@ public ExperimentResults compute(AbstractExperimentBuilder<?> builder,
       // safe cast according to javadoc
       @SuppressWarnings({ "unchecked", "rawtypes" })
       final List<ListenableFuture<SimulationResult>> futures = (List) executor
-      .invokeAll(runners);
+          .invokeAll(runners);
       results = Futures.allAsList(futures).get();
     } catch (final InterruptedException e) {
       throw new IllegalStateException(e);
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/PostProcessor.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/PostProcessor.java
index 8d449e5806..a4f62a3027 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/PostProcessor.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/PostProcessor.java
@@ -15,16 +15,15 @@
  */
 package com.github.rinde.rinsim.experiment.base;
 
-
-/**
+/*
  * A post-processor should collect results from a {@link Simulator}.
  * @param <T> The results object type.
- * 
- * @author Rinde van Lon 
+ *
+ * @author Rinde van Lon
  */
 public interface PostProcessor<T, I> {
 
-  /**
+  /*
    * Collects results from the provided {@link Simulator}.
    * @param sim The simulator.
    * @return An object containing simulation results.
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ResultListener.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ResultListener.java
index 84428a746e..e5d8d130f4 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ResultListener.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/ResultListener.java
@@ -1,8 +1,23 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
-/**
+/*
  * Implementors get notified of the progress of an {@link Experiment}.
- * @author Rinde van Lon 
+ * @author Rinde van Lon
  */
 public interface ResultListener<T> {
   /**
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Scenario.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Scenario.java
index 9462b98663..4ecc94f205 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Scenario.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/Scenario.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 public interface Scenario {
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimArgs.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimArgs.java
index d8d410a48e..7260c24763 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimArgs.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimArgs.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
 /*
@@ -32,7 +47,7 @@
 
   SimArgs(Scenario s, Configuration m, long seed,
       Object obj, boolean gui, @Nullable PostProcessor<?, ?> pp
-  /* , @Nullable UICreator uic */) {
+      /* , @Nullable UICreator uic */) {
     scenario = s;
     masConfig = m;
     randomSeed = seed;
diff --git a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimulationResult.java b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimulationResult.java
index cdafb10f70..0d4483e1b5 100755
--- a/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimulationResult.java
+++ b/experiment-base/src/main/java/com/github/rinde/rinsim/experiment/base/SimulationResult.java
@@ -1,5 +1,20 @@
+/*
+ * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *         http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package com.github.rinde.rinsim.experiment.base;
 
-public interface SimulationResult extends Comparable<SimulationResult>{
+public interface SimulationResult extends Comparable<SimulationResult> {
 
 }
