diff --git a/artemis-test/pom.xml b/artemis-test/pom.xml
index 60dfcf9e99..8115a73705 100755
--- a/artemis-test/pom.xml
+++ b/artemis-test/pom.xml
@@ -56,7 +56,7 @@
 						</goals>
 						<configuration>
 							<ideFriendlyPacking>${artemis.ideFriendlyPacking}</ideFriendlyPacking>
-							<enableArtemisPlugin>${artemis.enabled}</enableArtemisPlugin>
+							<enableArtemisPlugin>${artemis.enableArtemisPlugin}</enableArtemisPlugin>
 						</configuration>
 					</execution>
 				</executions>
diff --git a/artemis-test/src/test/java/com/artemis/system/OptimizedSystemTest.java b/artemis-test/src/test/java/com/artemis/system/OptimizedSystemTest.java
index 0b84c89bb6..3318a059ed 100755
--- a/artemis-test/src/test/java/com/artemis/system/OptimizedSystemTest.java
+++ b/artemis-test/src/test/java/com/artemis/system/OptimizedSystemTest.java
@@ -44,6 +44,8 @@ public void fully_optimized_entity_system_with_additional_references() {
 		World world = new World();
 		world.setSystem(new OptimizedSystemAdditional());
 		world.initialize();
+
+		world.process();
 	}
 
 	private static Method processMethod(Class<?> klazz) {
diff --git a/artemis-weaver/pom.xml b/artemis-weaver/pom.xml
index fb3de1bf6b..bb77dc627a 100755
--- a/artemis-weaver/pom.xml
+++ b/artemis-weaver/pom.xml
@@ -12,7 +12,7 @@
 	<name>artemis-odb-component-weaver</name>
 	
 	<properties>
-		<asm.version>4.2</asm.version>
+		<asm.version>5.0.4</asm.version>
 		<mainClass>net.onedaybeard.agrotera.ProcessArtemis</mainClass>
 	</properties>
 
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/ConstructorInvocationVisitor.java b/artemis-weaver/src/main/java/com/artemis/weaver/ConstructorInvocationVisitor.java
index 521ee030c0..212b23251e 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/ConstructorInvocationVisitor.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/ConstructorInvocationVisitor.java
@@ -17,12 +17,12 @@ public ConstructorInvocationVisitor(MethodVisitor mv, ClassMetadata meta) {
 	}
 
 	@Override
-	public void visitMethodInsn(int opcode, String owner, String name, String desc) {
+	public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {
 		if (!hasCalledSuper && INVOKESPECIAL == opcode && "<init>".equals(name)) {
-			mv.visitMethodInsn(opcode, owner(meta, owner), name, desc);
+			mv.visitMethodInsn(opcode, owner(meta, owner), name, desc, itf);
 			hasCalledSuper = true;
 		} else {
-			mv.visitMethodInsn(opcode, owner, name, desc);
+			mv.visitMethodInsn(opcode, owner, name, desc, itf);
 		}
 	}
 
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/EsOptimizationTransmuter.java b/artemis-weaver/src/main/java/com/artemis/weaver/EsOptimizationTransmuter.java
index d8d6aabc31..0a9d8d2cd7 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/EsOptimizationTransmuter.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/EsOptimizationTransmuter.java
@@ -11,7 +11,7 @@
 import com.artemis.ClassUtil;
 import com.artemis.meta.ClassMetadata;
 import com.artemis.weaver.optimizer.OptimizingEntitySystemWeaver;
-import com.artemis.weaver.optimizer.ProcessSystemInjector;
+import com.artemis.weaver.optimizer.EsBytecodeInjector;
 
 public class EsOptimizationTransmuter extends CallableTransmuter<Void> implements Opcodes {
 	private ClassMetadata meta;
@@ -29,7 +29,7 @@ protected Void process(String file) throws FileNotFoundException, IOException {
 		cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
 		ClassVisitor cv = cw;
 		
-		cr = new ProcessSystemInjector(cr, meta).transform();
+		cr = new EsBytecodeInjector(cr, meta).transform();
 		cv = new OptimizingEntitySystemWeaver(cv, meta);
 		
 		try {
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsBytecodeInjector.java b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsBytecodeInjector.java
new file mode 100755
index 0000000000..6d92c8f8fc
--- /dev/null
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsBytecodeInjector.java
@@ -0,0 +1,248 @@
+package com.artemis.weaver.optimizer;
+
+import com.artemis.ClassUtil;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Label;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+
+import com.artemis.meta.ClassMetadata;
+import com.artemis.meta.ClassMetadata.OptimizationType;
+
+public final class EsBytecodeInjector implements Opcodes {
+
+	private final ClassReader cr;
+	private final ClassMetadata meta;
+	private final ClassWriter cw;
+
+	public EsBytecodeInjector(ClassReader cr, ClassMetadata meta) {
+		this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
+		this.cr = cr;
+		this.meta = meta;
+	}
+
+	public ClassReader transform() {
+		return new ClassReader(injectMethods());
+	}
+
+	private byte[] injectMethods() {
+		cw.visitField(ACC_PRIVATE, "flyweight", "Lcom/artemis/Entity;", null, null).visitEnd();
+
+		injectSetWorld();
+		injectProcessEntities();
+		cr.accept(cw, 0);
+		return cw.toByteArray();
+	}
+
+	private void injectSetWorld() {
+		String owner = meta.type.getInternalName();
+
+		MethodVisitor mv = cw.visitMethod(ACC_PROTECTED | ACC_FINAL,
+				"setWorld", "(Lcom/artemis/World;)V", null, null);
+		mv.visitCode();
+
+		Label l0 = new Label();
+		mv.visitLabel(l0);
+		mv.visitLineNumber(33, l0);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitVarInsn(ALOAD, 1);
+		mv.visitMethodInsn(INVOKESPECIAL, "com/artemis/EntitySystem", "setWorld", "(Lcom/artemis/World;)V", false);
+
+		Label l1 = new Label();
+		mv.visitLabel(l1);
+		mv.visitLineNumber(34, l1);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitMethodInsn(INVOKEVIRTUAL, owner, "createFlyweightEntity", "()Lcom/artemis/Entity;", false);
+		mv.visitFieldInsn(PUTFIELD, owner, "flyweight", "Lcom/artemis/Entity;");
+
+		Label l2 = new Label();
+		mv.visitLabel(l2);
+		mv.visitLineNumber(35, l2);
+		mv.visitInsn(RETURN);
+
+		Label l3 = new Label();
+		mv.visitLabel(l3);
+		mv.visitLocalVariable("this", meta.type.toString(), null, l0, l3, 0);
+		mv.visitLocalVariable("world", "Lcom/artemis/World;", null, l0, l3, 1);
+		mv.visitEnd();
+	}
+
+	private void injectProcessEntities() {
+		String owner = meta.type.getInternalName();
+
+		MethodVisitor mv = cw.visitMethod(ACC_PROTECTED | ACC_FINAL,
+				"processSystem", "()V", null, null);
+		mv.visitCode();
+
+		Label l0 = new Label();
+		mv.visitLabel(l0);
+		mv.visitLabel(l0);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitFieldInsn(GETFIELD, owner, "subscription", "Lcom/artemis/EntitySubscription;");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/EntitySubscription",
+				"getEntities", "()Lcom/artemis/utils/IntBag;", false);
+		mv.visitVarInsn(ASTORE, 1);
+
+		Label l1 = new Label();
+		mv.visitLabel(l1);
+		mv.visitLineNumber(48, l1);
+		mv.visitVarInsn(ALOAD, 1);
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "getData", "()[I", false);
+		mv.visitVarInsn(ASTORE, 2);
+
+		Label l2 = new Label();
+		mv.visitLabel(l2);
+		mv.visitLineNumber(49, l2);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitFieldInsn(GETFIELD, owner, "flyweight", "Lcom/artemis/Entity;");
+		mv.visitVarInsn(ASTORE, 3);
+
+		Label l3 = new Label();
+		mv.visitLabel(l3);
+		mv.visitLineNumber(50, l3);
+		mv.visitInsn(ICONST_0);
+		mv.visitVarInsn(ISTORE, 4);
+
+		Label l4 = new Label();
+		mv.visitLabel(l4);
+		mv.visitVarInsn(ALOAD, 1);
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "size", "()I", false);
+		mv.visitVarInsn(ISTORE, 5);
+
+		Label l5 = new Label();
+		mv.visitLabel(l5);
+		mv.visitFrame(F_FULL, 6, new Object[]{
+				owner, "com/artemis/utils/IntBag", "[I", "com/artemis/Entity",
+				INTEGER, INTEGER}, 0, new Object[]{});
+		mv.visitVarInsn(ILOAD, 5);
+		mv.visitVarInsn(ILOAD, 4);
+
+		Label l6 = new Label();
+		mv.visitJumpInsn(IF_ICMPLE, l6);
+
+		Label l7 = new Label();
+		mv.visitLabel(l7);
+		mv.visitLineNumber(51, l7);
+		mv.visitVarInsn(ALOAD, 3);
+		mv.visitVarInsn(ALOAD, 2);
+		mv.visitVarInsn(ILOAD, 4);
+		mv.visitInsn(IALOAD);
+		mv.visitFieldInsn(PUTFIELD, "com/artemis/Entity", "id", "I");
+
+		Label l8 = new Label();
+		mv.visitLabel(l8);
+		mv.visitLineNumber(52, l8);
+		mv.visitVarInsn(ALOAD, 0);
+		mv.visitVarInsn(ALOAD, 3);
+		mv.visitMethodInsn(invocation(meta.sysetemOptimizable),
+				owner, "process", "(Lcom/artemis/Entity;)V", false);
+
+		Label l9 = new Label();
+		mv.visitLabel(l9);
+		mv.visitLineNumber(50, l9);
+		mv.visitIincInsn(4, 1);
+		mv.visitJumpInsn(GOTO, l5);
+		mv.visitLabel(l6);
+		mv.visitLineNumber(54, l6);
+		mv.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
+		mv.visitInsn(RETURN);
+
+		Label l10 = new Label();
+		mv.visitLabel(l10);
+		mv.visitLocalVariable("i", "I", null, l4, l6, 4);
+		mv.visitLocalVariable("s", "I", null, l5, l6, 5);
+		mv.visitLocalVariable("this", meta.type.toString(), null, l0, l10, 0);
+		mv.visitLocalVariable("actives", "Lcom/artemis/utils/IntBag;", null, l1, l10, 1);
+		mv.visitLocalVariable("array", "[I", null, l2, l10, 2);
+		mv.visitLocalVariable("e", "Lcom/artemis/Entity;", null, l3, l10, 3);
+		mv.visitEnd();
+
+//		mv.visitLabel(l0);
+//		mv.visitVarInsn(ALOAD, 0);
+//		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
+//		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "getData", "()[I", false);
+//		mv.visitVarInsn(ASTORE, 1);
+//		Label l1 = new Label();
+//		mv.visitLabel(l1);
+//
+//		mv.visitVarInsn(ALOAD, 0);
+//		mv.visitFieldInsn(GETFIELD, owner, "flyweight", "Lcom/artemis/Entity;");
+//		mv.visitVarInsn(ASTORE, 2);
+//		Label l2 = new Label();
+//		mv.visitLabel(l2);
+//
+//		mv.visitInsn(ICONST_0);
+//		mv.visitVarInsn(ISTORE, 3);
+//		Label l3 = new Label();
+//		mv.visitLabel(l3);
+//
+//		mv.visitVarInsn(ALOAD, 0);
+//		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
+//		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "size", "()I", false);
+//		mv.visitVarInsn(ISTORE, 4);
+//		Label l4 = new Label();
+//		mv.visitLabel(l4);
+//
+//		Label l5 = new Label();
+//		mv.visitJumpInsn(GOTO, l5);
+//
+//		Label l6 = new Label();
+//		mv.visitLabel(l6);
+//
+//		mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {
+//				owner,
+//				"[I", "com/artemis/Entity",
+//				Opcodes.INTEGER, Opcodes.INTEGER},
+//				0, new Object[] {});
+//		mv.visitVarInsn(ALOAD, 2);
+//		mv.visitVarInsn(ALOAD, 1);
+//		mv.visitVarInsn(ILOAD, 3);
+//		mv.visitInsn(IALOAD);
+//		mv.visitFieldInsn(PUTFIELD, "com/artemis/Entity", "id", "I");
+//		Label l7 = new Label();
+//		mv.visitLabel(l7);
+//
+//		mv.visitVarInsn(ALOAD, 0);
+//		mv.visitVarInsn(ALOAD, 2);
+//		mv.visitMethodInsn(invocation(meta.sysetemOptimizable),
+//				owner, "process", "(Lcom/artemis/Entity;)V", false);
+//		Label l8 = new Label();
+//		mv.visitLabel(l8);
+//
+//		mv.visitIincInsn(3, 1);
+//		mv.visitLabel(l5);
+//		mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
+//		mv.visitVarInsn(ILOAD, 4);
+//		mv.visitVarInsn(ILOAD, 3);
+//		mv.visitJumpInsn(IF_ICMPGT, l6);
+//		Label l9 = new Label();
+//		mv.visitLabel(l9);
+//
+//		mv.visitInsn(RETURN);
+//		Label l10 = new Label();
+//		mv.visitLabel(l10);
+//
+//		mv.visitLocalVariable("this", meta.type.toString(), null, l0, l10, 0);
+//		mv.visitLocalVariable("array", "[I", null, l1, l10, 1);
+//		mv.visitLocalVariable("e", "Lcom/artemis/Entity;", null, l2, l10, 2);
+//		mv.visitLocalVariable("i", "I", null, l3, l9, 3);
+//		mv.visitLocalVariable("s", "I", null, l4, l9, 4);
+//		mv.visitEnd();
+	}
+
+	private static int invocation(OptimizationType systemOptimization) {
+		switch (systemOptimization) {
+		case FULL:
+			return INVOKESPECIAL; 
+		case SAFE:
+			return INVOKEVIRTUAL;
+		case NOT_OPTIMIZABLE:
+			assert false;
+		default:
+			throw new RuntimeException("Missing case: " + systemOptimization);
+		
+		}
+	}
+}
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsMethodVisitor.java b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsMethodVisitor.java
index 1122f2c03c..ed54116596 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsMethodVisitor.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/EsMethodVisitor.java
@@ -15,11 +15,11 @@ public EsMethodVisitor(MethodVisitor mv, ClassMetadata meta) {
 	}
 
 	@Override
-	public void visitMethodInsn(int opcode, String owner, String name, String desc) {
+	public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf) {
 		if (opcode == INVOKESPECIAL && owner.equals("com/artemis/systems/EntityProcessingSystem")) {
 			owner = "com/artemis/EntitySystem";
 		}
 		
-		mv.visitMethodInsn(opcode, owner, name, desc);
+		mv.visitMethodInsn(opcode, owner, name, desc, itf);
 	}
 }
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/OptimizingEntitySystemWeaver.java b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/OptimizingEntitySystemWeaver.java
index f1b4148ea8..7ec7796faf 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/OptimizingEntitySystemWeaver.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/OptimizingEntitySystemWeaver.java
@@ -28,12 +28,11 @@ public void visit(int version, int access, String name, String signature, String
 	public MethodVisitor visitMethod(int access, String name, String desc,
 			String signature, String[] exceptions) {
 		
-		MethodVisitor method = null;
 		if ("process".equals(name) && "(Lcom/artemis/Entity;)V".equals(desc)) {
 			access = meta.sysetemOptimizable == OptimizationType.FULL ? ACC_PRIVATE : access;
 		}
 		
-		method = cv.visitMethod(access, name, desc, signature, exceptions);
+		MethodVisitor method = cv.visitMethod(access, name, desc, signature, exceptions);
 		method = new EsMethodVisitor(method, meta);
 		
 		return method;
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/ProcessSystemInjector.java b/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/ProcessSystemInjector.java
deleted file mode 100755
index 17352dbfdc..0000000000
--- a/artemis-weaver/src/main/java/com/artemis/weaver/optimizer/ProcessSystemInjector.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.artemis.weaver.optimizer;
-
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.Label;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
-
-import com.artemis.meta.ClassMetadata;
-import com.artemis.meta.ClassMetadata.OptimizationType;
-
-public final class ProcessSystemInjector implements Opcodes {
-
-	private final ClassReader cr;
-	private final ClassMetadata meta;
-	private final ClassWriter cw;
-
-	public ProcessSystemInjector(ClassReader cr, ClassMetadata meta) {
-		this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
-		this.cr = cr;
-		this.meta = meta;
-	}
-
-	public ClassReader transform() {
-		return new ClassReader(injectMethods());
-	}
-
-	private byte[] injectMethods() {
-		injectProcessEntities();
-		cr.accept(cw, 0);
-		return cw.toByteArray();
-	}
-
-	private void injectProcessEntities() {
-		String owner = meta.type.getInternalName();
-
-		MethodVisitor mv = cw.visitMethod(ACC_PROTECTED | ACC_FINAL,
-				"processSystem", "()V", null, null);
-		mv.visitCode();
-		Label l0 = new Label();
-		mv.visitLabel(l0);
-
-		mv.visitLabel(l0);
-		mv.visitVarInsn(ALOAD, 0);
-		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
-		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "getData", "()[I");
-		mv.visitVarInsn(ASTORE, 1);
-		Label l1 = new Label();
-		mv.visitLabel(l1);
-
-		mv.visitVarInsn(ALOAD, 0);
-		mv.visitFieldInsn(GETFIELD, owner, "flyweight", "Lcom/artemis/Entity;");
-		mv.visitVarInsn(ASTORE, 2);
-		Label l2 = new Label();
-		mv.visitLabel(l2);
-
-		mv.visitInsn(ICONST_0);
-		mv.visitVarInsn(ISTORE, 3);
-		Label l3 = new Label();
-		mv.visitLabel(l3);
-
-		mv.visitVarInsn(ALOAD, 0);
-		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
-		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "size", "()I");
-		mv.visitVarInsn(ISTORE, 4);
-		Label l4 = new Label();
-		mv.visitLabel(l4);
-
-		Label l5 = new Label();
-		mv.visitJumpInsn(GOTO, l5);
-
-		Label l6 = new Label();
-		mv.visitLabel(l6);
-
-		mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {
-				owner,
-				"[I", "com/artemis/Entity",
-				Opcodes.INTEGER, Opcodes.INTEGER},
-				0, new Object[] {});
-		mv.visitVarInsn(ALOAD, 2);
-		mv.visitVarInsn(ALOAD, 1);
-		mv.visitVarInsn(ILOAD, 3);
-		mv.visitInsn(IALOAD);
-		mv.visitFieldInsn(PUTFIELD, "com/artemis/Entity", "id", "I");
-		Label l7 = new Label();
-		mv.visitLabel(l7);
-
-		mv.visitVarInsn(ALOAD, 0);
-		mv.visitVarInsn(ALOAD, 2);
-		mv.visitMethodInsn(invocation(meta.sysetemOptimizable),
-				owner, "process", "(Lcom/artemis/Entity;)V");
-		Label l8 = new Label();
-		mv.visitLabel(l8);
-
-		mv.visitIincInsn(3, 1);
-		mv.visitLabel(l5);
-		mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
-		mv.visitVarInsn(ILOAD, 4);
-		mv.visitVarInsn(ILOAD, 3);
-		mv.visitJumpInsn(IF_ICMPGT, l6);
-		Label l9 = new Label();
-		mv.visitLabel(l9);
-
-		mv.visitInsn(RETURN);
-		Label l10 = new Label();
-		mv.visitLabel(l10);
-
-		mv.visitLocalVariable("this", meta.type.toString(), null, l0, l10, 0);
-		mv.visitLocalVariable("array", "[I", null, l1, l10, 1);
-		mv.visitLocalVariable("e", "Lcom/artemis/Entity;", null, l2, l10, 2);
-		mv.visitLocalVariable("i", "I", null, l3, l9, 3);
-		mv.visitLocalVariable("s", "I", null, l4, l9, 4);
-		mv.visitEnd();
-	}
-
-	private static int invocation(OptimizationType systemOptimization) {
-		switch (systemOptimization) {
-		case FULL:
-			return INVOKESPECIAL; 
-		case SAFE:
-			return INVOKEVIRTUAL;
-		case NOT_OPTIMIZABLE:
-			assert false;
-		default:
-			throw new RuntimeException("Missing case: " + systemOptimization);
-		
-		}
-	}
-}
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/packed/ByteBufferHelper.java b/artemis-weaver/src/main/java/com/artemis/weaver/packed/ByteBufferHelper.java
index 3279f1c1b4..6d0ee20cde 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/packed/ByteBufferHelper.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/packed/ByteBufferHelper.java
@@ -15,14 +15,14 @@
 
 	AbstractInsnNode invokeGetter(String name) {
 		FieldDescriptor fd = find(name);
-		return new MethodInsnNode(FieldToStructMethodTransformer.INVOKEVIRTUAL, "java/nio/ByteBuffer", getter(name), "(I)" + castedDesc(fd));
+		return new MethodInsnNode(FieldToStructMethodTransformer.INVOKEVIRTUAL, "java/nio/ByteBuffer", getter(name), "(I)" + castedDesc(fd), false);
 	}
 	
 	AbstractInsnNode invokePutter(String name) {
 		FieldDescriptor fd = find(name);
 		
 		String desc = "(I" + castedDesc(fd) + ")Ljava/nio/ByteBuffer;";
-		return new MethodInsnNode(FieldToStructMethodTransformer.INVOKEVIRTUAL, "java/nio/ByteBuffer", putter(name), desc);
+		return new MethodInsnNode(FieldToStructMethodTransformer.INVOKEVIRTUAL, "java/nio/ByteBuffer", putter(name), desc, false);
 	}
 
 	private static String castedDesc(FieldDescriptor fd) {
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/packed/ExternalFieldMethodTransformer.java b/artemis-weaver/src/main/java/com/artemis/weaver/packed/ExternalFieldMethodTransformer.java
index 0251e06f49..8b26f2d4e9 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/packed/ExternalFieldMethodTransformer.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/packed/ExternalFieldMethodTransformer.java
@@ -49,7 +49,7 @@ public boolean transform(MethodNode mn) {
 				changed = true;
 				i = InstructionMutator.on(instructions, fn)
 					.insertAtOffset(0,
-						new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn)))
+						new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))
 					.delete(0)
 					.transform();
 			} else if (GETFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {
@@ -57,7 +57,7 @@ public boolean transform(MethodNode mn) {
 				
 				i = on(instructions, fn)
 					.insertAtOffset(0,
-						new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, "()" + fn.desc))
+						new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, "()" + fn.desc, false))
 					.delete(0)
 					.transform();
 			}
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/packed/PackedStubs.java b/artemis-weaver/src/main/java/com/artemis/weaver/packed/PackedStubs.java
index 29f9137d9d..f8433ee1c1 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/packed/PackedStubs.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/packed/PackedStubs.java
@@ -88,7 +88,7 @@ private void injectDispose(String owner) {
 		mv.visitLabel(l0);
 		mv.visitFieldInsn(GETSTATIC, owner, "$store", "Ljava/util/Map;");
 		mv.visitVarInsn(ALOAD, 1);
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "remove", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
 		mv.visitInsn(POP);
 		Label l1 = new Label();
 		mv.visitLabel(l1);
@@ -106,7 +106,7 @@ private void injectGrow(String owner) {
 		Label l0 = new Label();
 		mv.visitLabel(l0);
 		mv.visitVarInsn(ILOAD, 1);
-		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;");
+		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;", false);
 		mv.visitVarInsn(ASTORE, 2);
 		Label l1 = new Label();
 		mv.visitLabel(l1);
@@ -116,7 +116,7 @@ private void injectGrow(String owner) {
 		mv.visitLabel(l2);
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, owner, "$data", "Ljava/nio/ByteBuffer;");
-		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I", false);
 		mv.visitVarInsn(ISTORE, 4);
 		Label l3 = new Label();
 		mv.visitLabel(l3);
@@ -130,8 +130,8 @@ private void injectGrow(String owner) {
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, owner, "$data", "Ljava/nio/ByteBuffer;");
 		mv.visitVarInsn(ILOAD, 3);
-		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "get", "(I)B");
-		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "put", "(IB)Ljava/nio/ByteBuffer;");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "get", "(I)B", false);
+		mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "put", "(IB)Ljava/nio/ByteBuffer;", false);
 		mv.visitInsn(POP);
 		Label l6 = new Label();
 		mv.visitLabel(l6);
@@ -146,9 +146,9 @@ private void injectGrow(String owner) {
 		mv.visitFieldInsn(GETSTATIC, owner, "$store", "Ljava/util/Map;");
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, owner, "$world", "Lcom/artemis/World;");
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
 		mv.visitTypeInsn(CHECKCAST, "com/artemis/utils/Bag");
-		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "iterator", "()Ljava/util/Iterator;");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "iterator", "()Ljava/util/Iterator;", false);
 		mv.visitVarInsn(ASTORE, 4);
 		Label l8 = new Label();
 		mv.visitJumpInsn(GOTO, l8);
@@ -156,7 +156,7 @@ private void injectGrow(String owner) {
 		mv.visitLabel(l9);
 		mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {owner, Opcodes.INTEGER, "java/nio/ByteBuffer", Opcodes.TOP, "java/util/Iterator"}, 0, new Object[] {});
 		mv.visitVarInsn(ALOAD, 4);
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
 		mv.visitTypeInsn(CHECKCAST, owner);
 		mv.visitVarInsn(ASTORE, 3);
 		Label l10 = new Label();
@@ -167,7 +167,7 @@ private void injectGrow(String owner) {
 		mv.visitLabel(l8);
 		mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
 		mv.visitVarInsn(ALOAD, 4);
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
 		mv.visitJumpInsn(IFNE, l9);
 		Label l11 = new Label();
 		mv.visitLabel(l11);
@@ -193,7 +193,7 @@ private void injectStaticInitializer() {
 		mv.visitLabel(l0);
 		mv.visitTypeInsn(NEW, "java/util/IdentityHashMap");
 		mv.visitInsn(DUP);
-		mv.visitMethodInsn(INVOKESPECIAL, "java/util/IdentityHashMap", "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, "java/util/IdentityHashMap", "<init>", "()V", false);
 		mv.visitFieldInsn(PUTSTATIC, owner, "$store", "Ljava/util/Map;");
 		mv.visitInsn(RETURN);
 		mv.visitEnd();
@@ -206,7 +206,7 @@ private void injectConstructor() {
 		Label l0 = new Label();
 		mv.visitLabel(l0);
 		mv.visitVarInsn(ALOAD, 0);
-		mv.visitMethodInsn(INVOKESPECIAL, "com/artemis/PackedComponent", "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, "com/artemis/PackedComponent", "<init>", "()V", false);
 		Label l1 = new Label();
 		mv.visitLabel(l1);
 		mv.visitVarInsn(ALOAD, 0);
@@ -221,7 +221,7 @@ private void injectConstructor() {
 		mv.visitLabel(l3);
 		mv.visitFieldInsn(GETSTATIC, typeName, "$store", "Ljava/util/Map;");
 		mv.visitVarInsn(ALOAD, 1);
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", true);
 		mv.visitTypeInsn(CHECKCAST, "com/artemis/utils/Bag");
 		mv.visitVarInsn(ASTORE, 2);
 		Label l4 = new Label();
@@ -234,7 +234,7 @@ private void injectConstructor() {
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitVarInsn(ALOAD, 2);
 		mv.visitInsn(ICONST_0);
-		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "get", "(I)Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "get", "(I)Ljava/lang/Object;", false);
 		mv.visitTypeInsn(CHECKCAST, typeName);
 		mv.visitFieldInsn(GETFIELD, typeName, "$data", "Ljava/nio/ByteBuffer;");
 		mv.visitFieldInsn(PUTFIELD, typeName, "$data", "Ljava/nio/ByteBuffer;");
@@ -246,26 +246,26 @@ private void injectConstructor() {
 		mv.visitFrame(Opcodes.F_FULL, 3, new Object[] {typeName, "com/artemis/World", "com/artemis/utils/Bag"}, 0, new Object[] {});
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitIntInsn(SIPUSH, ClassMetadataUtil.sizeOf(meta) * 128);
-		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;");
+		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;", false);
 		mv.visitFieldInsn(PUTFIELD, typeName, "$data", "Ljava/nio/ByteBuffer;");
 		Label l9 = new Label();
 		mv.visitLabel(l9);
 		mv.visitTypeInsn(NEW, "com/artemis/utils/Bag");
 		mv.visitInsn(DUP);
-		mv.visitMethodInsn(INVOKESPECIAL, "com/artemis/utils/Bag", "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, "com/artemis/utils/Bag", "<init>", "()V", false);
 		mv.visitVarInsn(ASTORE, 2);
 		Label l10 = new Label();
 		mv.visitLabel(l10);
 		mv.visitFieldInsn(GETSTATIC, typeName, "$store", "Ljava/util/Map;");
 		mv.visitVarInsn(ALOAD, 1);
 		mv.visitVarInsn(ALOAD, 2);
-		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
+		mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", true);
 		mv.visitInsn(POP);
 		mv.visitLabel(l8);
 		mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
 		mv.visitVarInsn(ALOAD, 2);
 		mv.visitVarInsn(ALOAD, 0);
-		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "add", "(Ljava/lang/Object;)V");
+		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/Bag", "add", "(Ljava/lang/Object;)V", false);
 		Label l11 = new Label();
 		mv.visitLabel(l11);
 		mv.visitInsn(RETURN);
@@ -296,7 +296,7 @@ private void injectEnsureCapacity() {
 			mv.visitLabel(l1);
 			mv.visitVarInsn(ALOAD, 0);
 			mv.visitFieldInsn(GETFIELD, owner, "$data", "Ljava/nio/ByteBuffer;");
-			mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I");
+			mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I", false);
 			mv.visitVarInsn(ILOAD, 2);
 			Label l2 = new Label();
 			mv.visitJumpInsn(IF_ICMPGE, l2);
@@ -306,11 +306,11 @@ private void injectEnsureCapacity() {
 			mv.visitInsn(ICONST_2);
 			mv.visitVarInsn(ALOAD, 0);
 			mv.visitFieldInsn(GETFIELD, owner, "$data", "Ljava/nio/ByteBuffer;");
-			mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I");
+			mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "capacity", "()I", false);
 			mv.visitVarInsn(ILOAD, 2);
-			mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "max", "(II)I");
+			mv.visitMethodInsn(INVOKESTATIC, "java/lang/Math", "max", "(II)I", false);
 			mv.visitInsn(IMUL);
-			mv.visitMethodInsn(INVOKESPECIAL, owner, "$grow", "(I)V");
+			mv.visitMethodInsn(INVOKESPECIAL, owner, "$grow", "(I)V", false);
 			mv.visitLabel(l2);
 			mv.visitFrame(Opcodes.F_APPEND,1, new Object[] {Opcodes.INTEGER}, 0, null);
 			mv.visitInsn(RETURN);
@@ -340,7 +340,7 @@ private void injectForEntity() {
 			mv.visitVarInsn(ALOAD, 0);
 			mv.visitFieldInsn(GETSTATIC, owner, "$_SIZE_OF", "I");
 			mv.visitVarInsn(ALOAD, 1);
-			mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/Entity", "getId", "()I");
+			mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/Entity", "getId", "()I", false);
 			mv.visitInsn(IMUL);
 			mv.visitFieldInsn(PUTFIELD, owner, "$stride", "I");
 			Label l1 = new Label();
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/packed/StaticInitializerVisitor.java b/artemis-weaver/src/main/java/com/artemis/weaver/packed/StaticInitializerVisitor.java
index 15f5645110..39e850938e 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/packed/StaticInitializerVisitor.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/packed/StaticInitializerVisitor.java
@@ -27,7 +27,7 @@ public void visitCode() {
 		Label l0 = new Label();
 		mv.visitLabel(l0);
 		mv.visitIntInsn(SIPUSH, ClassMetadataUtil.sizeOf(meta) * 128);
-		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;");
+		mv.visitMethodInsn(INVOKESTATIC, "java/nio/ByteBuffer", "allocateDirect", "(I)Ljava/nio/ByteBuffer;", false);
 		mv.visitInsn(RETURN);
 	}
 }
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileBeginWeaver.java b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileBeginWeaver.java
index 716b04cac3..1867f2a10f 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileBeginWeaver.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileBeginWeaver.java
@@ -22,6 +22,6 @@ protected void onMethodEnter() {
 
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, systemName, "$profiler", profileDescriptor);
-		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "start", "()V");
+		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "start", "()V", false);
 	}
 }
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileEndWeaver.java b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileEndWeaver.java
index 11455e57bb..a97aba2192 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileEndWeaver.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileEndWeaver.java
@@ -22,6 +22,6 @@ protected void onMethodExit(int opcode) {
 		
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, systemName, "$profiler", profileDescriptor);
-		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "stop", "()V");
+		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "stop", "()V", false);
 	}
 }
diff --git a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileInitializeWeaver.java b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileInitializeWeaver.java
index 1e270f5f05..6d7cb3ccb3 100755
--- a/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileInitializeWeaver.java
+++ b/artemis-weaver/src/main/java/com/artemis/weaver/profile/ProfileInitializeWeaver.java
@@ -23,7 +23,7 @@ protected void onMethodExit(int opcode) {
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitTypeInsn(NEW, profiler);
 		mv.visitInsn(DUP);
-		mv.visitMethodInsn(INVOKESPECIAL, profiler, "<init>", "()V");
+		mv.visitMethodInsn(INVOKESPECIAL, profiler, "<init>", "()V", false);
 		mv.visitFieldInsn(PUTFIELD, systemName, "$profiler", profileDescriptor);
 		
 		mv.visitVarInsn(ALOAD, 0);
@@ -31,6 +31,6 @@ protected void onMethodExit(int opcode) {
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitVarInsn(ALOAD, 0);
 		mv.visitFieldInsn(GETFIELD, systemName, "world", "Lcom/artemis/World;");
-		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "initialize", "(Lcom/artemis/BaseSystem;Lcom/artemis/World;)V");
+		mv.visitMethodInsn(INVOKEVIRTUAL, profiler, "initialize", "(Lcom/artemis/BaseSystem;Lcom/artemis/World;)V", false);
 	}
 }
