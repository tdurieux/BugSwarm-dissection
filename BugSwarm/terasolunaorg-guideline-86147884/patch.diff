diff --git a/source_en/ArchitectureInDetail/Validation.rst b/source_en/ArchitectureInDetail/Validation.rst
index e7ebe76d99..39f84d11f0 100755
--- a/source_en/ArchitectureInDetail/Validation.rst
+++ b/source_en/ArchitectureInDetail/Validation.rst
@@ -1189,9 +1189,7 @@ Error message is displayed as follows if this form is sent with all the input fi
 
 .. figure:: ./images_Validation/validations-nested-collection3.png
   :width: 60%
-  
-  
-.. _ValidationGroupValidation:
+
 
 Grouped validation
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -3120,432 +3118,6 @@ An example of implementing, "whether the entered user name is already registered
 
 |
 
-Method Validation 
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-A method to check validity of actual argument and return value of method using Bean Validation, is described.
-In this chapter, the method is called as Method Validation for the explanation.
-While carrying out defensive programming, I/O of method should be checked in the class other than Controller.
-If Bean Validation library is used at that time, constraint annotation of Bean Validation used in Controller can be used again.
-
-.. _MethodValidationOnSpringFrameworkHowToUseSettings:
-
-Application settings
-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-When Method Validation offered by Spring Framework is used,
-a bean must be defined for \ ``org.springframework.validation.beanvalidation.MethodValidationPostProcessor``\  class offered by Spring Framework.
-
-Bean definition file which defines \ ``MethodValidationPostProcessor``\  differs depending on where you use the Method Validation.
-
-Here, a setup example is given wherein Method Validation is used in the multi-project environment recommended in this guideline.
-
-Settings for both the projects given below must be changed
-
-* Project (\ ``projectName-web``\ ) for application layer
-* Project (\ ``projectName-domain``\ ) for domain layer
-
-* :file:`projectName-domain/src/main/resources/META-INF/spring/projectName-domain.xml`
-
- .. code-block:: xml
-
-    <!-- (1) -->
-    <bean id="validator"
-          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
-
-    <!-- (2) -->
-    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
-        <property name="validator" ref="validator" />
-    </bean>
-
-* :file:`projectName-web/src/main/resources/META-INF/spring/spring-mvc.xml`
-
- .. code-block:: xml
-
-    <!-- (3) -->
-    <mvc:annotation-driven validator="validator">
-        <!-- ... -->
-    </mvc:annotation-driven>
-
-    <!-- (4) -->
-    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
-        <property name="validator" ref="validator" />
-    </bean>
-
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - Define a bean for \ ``LocalValidatorFactoryBean``\ .
-    * - | (2)
-      - Define a bean for \ ``MethodValidationPostProcessor``\  and ensure that
-        Method Validation is executed for a domain layer class method.
-
-        Specify a bean defined in (1), in \ ``validator``\  property.
-    * - | (3)
-      - Specify a bean defined in (1), in the \ ``validator``\  attribute of \ ``<mvc:annotation-driven>``\  element.
-
-        When these settings are not used, a \ ``Validator``\  instance is generated which is different from the instance created in (1).
-    * - | (4)
-      - Define a bean for \ ``MethodValidationPostProcessor``\  and ensure that
-        Method Validation is executed for an application layer class method.
-
-        Specify Bean defined in (1), in \ ``validator``\  property.
-
-.. tip::
-
-    \ ``LocalValidatorFactoryBean``\  is a class to generate a wrapper \ ``Validator``\  object
-    in order to link \ ``Validator``\  class offered by Bean Validation(Hibernate Validator) and Spring Framework.
-
-    By using the wrapper \ ``Validator``\  generated by this class,
-    message management function (\ ``MessageSource``\ ) offered by Spring Framework and DI container can be linked.
-
-.. tip::
-
-    In Spring Framework, Method Validation for calling the method of Bean which is managed by DI container is executed
-    by using AOP system.
-
-    \ ``MethodValidationPostProcessor``\  is a class to apply AOP in order to execute Method Validation.
-
-.. note::
-
-    In the example above, an identical \ ``Validator``\  object (instance) is set for \ ``validator``\  property of each Bean, but
-    this is not a mandatory requirement.
-    However, it is recommended to set an identical object (instance) unless there is a specific reason to do otherwise.
-
-|
-
-.. _MethodValidationOnSpringFrameworkHowToUseApplyTarget:
-
-How to define for the method for Method Validation
-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-When Method Validation is to be applied in the method,
-the annotation which indicates inclusion of target method and the constraint annotation of Bean Validation should be specified in class level
-and, method and dummy argument respectively.
-
-AOP which executes Method Validation cannot be applied just by performing ":ref:`MethodValidationOnSpringFrameworkHowToUseSettings`".
-It is necessary to assign \ ``@ org.springframework.validation.annotation.Validated``\  annotation to interface or class in order to apply AOP which executes Method Validation.
-
-
-Here, a method to specify an annotation for interface is introduced.
-
-.. code-block:: java
-
-    package com.example.domain.service;
-
-    import org.springframework.validation.annotation.Validated;
-
-    @Validated // (1)
-    public interface HelloService {
-        // ...
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - Specify \ ``Validated``\  annotation in the interface acting as a target for Method Validation.
-
-        In the above example, AOP which executes Method Validation is applied to implementation method of \ ``HelloService``\  interface.
-        
-
-.. tip::
-
-    By specifying a group interface in \ ``value``\  attribute of \ ``@Validated``\  annotation,
-    a validation belonging to a specified group can alone be executed as well.
-
-    Further, the validation groups can be changed for each method by assigning \ ``Validated``\  annotation in method level.
-    
-
-    Refer ":ref:`ValidationGroupValidation`" for validation group.
-
-|
-
-Next, a method is described wherein constraint annotation of Bean Validation is specified in the method and dummy argument.
-Basically,
-
-specify constraint annotation of Bean Validation for
-
-* Method arguments
-* JavaBean field specified in method argument
-
-and constraint annotation of Bean Validation for
-
-* Return value of method
-* JavaBean field returned as return value of method.
-
-A basic specification method is described below.
-A method to specify annotation in the interface is introduced in the description hereafter.
-
-First, a method that specifies constraint annotation is described for the method using basic types (primitive type or primitive wrapper type etc) as a signature of the method
-
-
-.. code-block:: java
-
-    package com.example.domain.service;
-
-    import org.springframework.validation.annotation.Validated;
-
-    import javax.validation.constraints.NotNull;
-
-    @Validated
-    public interface HelloService {
-
-        // (2)
-        @NotNull
-        String hello(@NotNull /* (1) */ String message);
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - Specify a constraint annotation of Bean Validation as an argument annotation of method.
-
-        \ ``@NotNull``\  is a constraint that signifies that \ ``message``\  argument does not allow Null value.
-        When Null value is specified in the argument, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-    * - | (2)
-      - Specify constraint annotation of Bean Validation as a method annotation.
-
-        In the above example, it is shown that the return value is not a Null value,
-        when a Null value is returned as a return value, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-
-|
-
-Next, a method that specifies constraint annotation of Bean Validation is described  for the method using JavaBean as a signature of method.
-
-
-Here, a method which specifies annotation for interface is introduced.
-
-.. note::
-
-    The main point is to specify \ ``@javax.validation.Valid``\  annotation.
-    The specification method is described below in detail using sample code.
-
-**Service Interface**
-
-.. code-block:: java
-
-    package com.example.domain.service;
-
-    import org.springframework.validation.annotation.Validated;
-
-    import javax.validation.constraints.NotNull;
-
-    @Validated
-    public interface HelloService {
-
-        @NotNull // (3)
-        @Valid   // (4)
-        HelloOutput hello(@NotNull /* (1) */ @Valid /* (2) */ HelloInput input);
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - Specify constraint annotation of Bean Validation as an argument annotation of method.
-
-        It indicates that \ ``input``\  argument (JavaBean) does not allow Null value.
-        When a Null value is specified in the argument, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-    * - | (2)
-      - Specify \ ``@javax.validation.Valid``\  annotation as an argument annotation of method.
-
-        By assigning \ ``@Valid``\  annotation, constraint annotation of Bean Validation specified in JavaBean field of argument becomes valid.
-        When the constraint specified in JavaBean is not fulfilled, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-    * - | (3)
-      - Specify constraint annotation of Bean Validation as a method annotation.
-
-        It indicates that JavaBean of return value is not Null value.
-        When a Null value is returned as a return value, an exception is thrown.
-    * - | (4)
-      - Specify \ ``@Valid``\  annotation as a method annotation.
-
-        By assigning \ ``@Valid``\  annotation, constraint annotation of Bean Validation specified in JavaBean field of return value becomes valid.
-        When constraint specified in JavaBean is not fulfilled, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-
-|
-
-| Implementation sample of JavaBean is described below.
-| Basically, only constraint annotation of Bean Validation is specified, however care must be taken while performing further nesting of JavaBean in JavaBean.
-
-**JavaBean for Input**
-
-.. code-block:: java
-
-    package com.example.domain.service;
-
-    import javax.validation.constraints.NotNull;
-    import javax.validation.constraints.Past;
-    import java.util.Date;
-
-    public class HelloInput {
-
-        @NotNull
-        @Past
-        private Date visitDate;
-
-        @NotNull
-        private String visitMessage;
-
-        private String userId;
-
-        // ...
-
-    }
-
-**JavaBean for Output**
-
-.. code-block:: java
-
-    package com.example.domain.service;
-
-    import com.example.domain.model.User;
-
-    import java.util.Date;
-
-    import javax.validation.Valid;
-    import javax.validation.constraints.NotNull;
-    import javax.validation.constraints.Past;
-
-    public class HelloOutput {
-
-        @NotNull
-        @Past
-        private Date acceptDate;
-
-        @NotNull
-        private String acceptMessage;
-
-        @Valid // (5)
-        private User user;
-
-        // ...
-
-    }
-
-**JavaBean nested in JavaBean for Output**
-
-.. code-block:: java
-
-    package com.example.domain.model;
-
-    import javax.validation.constraints.NotNull;
-    import javax.validation.constraints.Past;
-    import java.util.Date;
-
-    public class User {
-
-        @NotNull
-        private String userId;
-
-        @NotNull
-        private String userName;
-
-        @Past
-        private Date dateOfBirth;
-
-        // ...
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (5)
-      - When constraint annotation of Bean Validation specified in nested JavaBean is to be enabled,
-        specify \ ``@Valid``\  annotation as a field annotation.
-
-        By assigning \ ``@Valid``\  annotation, constraint annotation of Bean Validation specified in nested JavaBean field becomes valid.
-        When constraint specified in nested JavaBean is not fulfilled, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-
-|
-
-.. _MethodValidationOnSpringFrameworkHowToUseExceptionHandling:
-
-Exception handling at the time of violation of constraint
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-When a constraint violation occurs, \ ``javax.validation.ConstraintViolationException``\  is thrown.
-
-When \ ``ConstraintViolationException``\  is thrown, the method generated from stack trace can be identified,  however,
-basic violation details cannot be identified.
-
-An exception handling class should be created which outputs log by handling \ ``ConstraintViolationException``\  exception in order to identify violation details.
-
-An example to show how to create an exception handling class is given below.
-
-.. code-block:: java
-
-    package com.example.app;
-
-    import javax.validation.ConstraintViolationException;
-
-    import org.slf4j.Logger;
-    import org.slf4j.LoggerFactory;
-    import org.springframework.web.bind.annotation.ControllerAdvice;
-    import org.springframework.web.bind.annotation.ExceptionHandler;
-
-    @ControllerAdvice
-    public class ConstraintViolationExceptionHandler {
-
-        private static final Logger log = LoggerFactory.getLogger(ConstraintViolationExceptionHandler.class);
-
-        // (1)
-        @ExceptionHandler
-        public String handleConstraintViolationException(ConstraintViolationException e){
-            // (2)
-            if (log.isErrorEnabled()) {
-                log.error("ConstraintViolations[\n{}\n]", e.getConstraintViolations());
-            }
-            return "common/error/systemError";
-        }
-
-    }
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-    :header-rows: 1
-    :widths: 10 90
-
-    * - Sr. No.
-      - Description
-    * - | (1)
-      - Create a \ ``@ExceptionHandler``\  method to handle \ ``ConstraintViolationException``\ .
-
-        Receive \ ``ConstraintViolationException``\  as an argument for the method.
-    * - | (2)
-      - Output violation details  (\ ``Set``\  of \ ``ConstraintViolation``\ ) in a log which are retained by \ ``ConstraintViolationException``\ received by method argument.
-
-.. note::
-
-    Refer to ":ref:`application_layer_controller_advice`" for details of \ ``@ControllerAdvice``\  annotation.
-
-
 Appendix
 --------------------------------------------------------------------------------
 
@@ -3603,7 +3175,7 @@ Refer to Chapter 7 \ `Bean Validation specification <http://download.oracle.com/
    * - \ ``@DecimalMin``\
      - BigDecimal, BigInteger, String, byte, short, int, long and wrapper
        (In case of Hibernate Validator implementation, it is also possible to use it with arbitrary CharSequence, Number inherited class.)
-     - |Validate whether the Decimal value is greater than or equal to the minimum value.
+     - | Validate whether the decimal value is greater than or equal to minimum value.
        | By specifying \ ``inclusive = false``\ , it is possible to change to an operation so as to validate whether the value is greater than the minimum value.
      - Refer @DecimalMax
    * - \ ``@DecimalMax``\
