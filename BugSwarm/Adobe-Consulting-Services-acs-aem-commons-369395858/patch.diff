diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8688dea848..68299e97a4 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -8,6 +8,8 @@ The format is based on [Keep a Changelog](http://keepachangelog.com/)
 ## [Unreleased]
 
 [Unreleased]: https://github.com/Adobe-Consulting-Services/acs-aem-commons/compare/acs-aem-commons-3.15.0...HEAD
+### Fixed
+- #1335 - MCP Error handling and user experience are overhauled and the overall experience is improved
 
 ## [3.15.0] - 2018-04-13
 
diff --git a/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ActionManagerImpl.java b/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ActionManagerImpl.java
index 14f0a54864..81429fa858 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ActionManagerImpl.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/fam/impl/ActionManagerImpl.java
@@ -157,13 +157,24 @@ private void deferredWithResolver(
                 if (!closesResolver) {
                     logCompletetion();
                 }
+            } catch (Error e) {
+                // These are very fatal errors but we should log them if we can
+                LOG.error("Fatal uncaught error in action " + getName(), e);
+                if (!closesResolver) {
+                    logError(new RuntimeException(e));
+                }
+                throw e;
+            } catch (Exception t) {
+                // Less fatal errors, but still need to explicitly catch them
+                LOG.error("Error in action " + getName(), t);
+                if (!closesResolver) {
+                    logError(t);
+                }
             } catch (Throwable t) {
+                // There are some slippery runtime errors (unchecked) which slip through the cracks
                 LOG.error("Fatal uncaught error in action " + getName(), t);
                 if (!closesResolver) {
-                    logError(t instanceof Exception ? (Exception) t : new RuntimeException(t));
-                }
-                if (t instanceof Error) {
-                    throw (Error) t;
+                    logError(new RuntimeException(t));
                 }
             }
         }, this);
diff --git a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/ProcessInstanceImpl.java b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/ProcessInstanceImpl.java
index 0675c6c935..7783dc2158 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/ProcessInstanceImpl.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/mcp/impl/ProcessInstanceImpl.java
@@ -248,8 +248,8 @@ private void recordErrors(int step, List<Failure> failures, ResourceResolver rr)
                 rr.commit();
             }
             rr.refresh();
-            ActionManager manager = getActionManagerFactory().createTaskManager("Record errors", rr, 1);
-            ActionBatch batch = new ActionBatch(manager, 50);
+            ActionManager errorManager = getActionManagerFactory().createTaskManager("Record errors", rr, 1);
+            ActionBatch batch = new ActionBatch(errorManager, 50);
             for (int i = 0; i < failures.size(); i++) {
                 String errPath = errFolder + "/err" + i;
                 Failure failure = failures.get(i);
@@ -260,7 +260,7 @@ private void recordErrors(int step, List<Failure> failures, ResourceResolver rr)
                 });
             }
             batch.commitBatch();
-        } catch (RepositoryException | PersistenceException | LoginException ex) {
+        } catch (RepositoryException | PersistenceException | LoginException | NullPointerException ex) {
             LOG.error("Unable to record errors", ex);
         }
     }
