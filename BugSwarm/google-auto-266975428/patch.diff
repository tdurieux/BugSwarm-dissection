diff --git a/value/CHANGES.md b/value/CHANGES.md
index be365c337b..464632b488 100755
--- a/value/CHANGES.md
+++ b/value/CHANGES.md
@@ -1,5 +1,40 @@
 # AutoValue Changes
 
+## 1.4 → 1.5
+
+### Functional changes
+
+* A workaround for older Eclipse versions has been removed. If you need to use
+  an Eclipse version older than 4.5, you will need to stay on AutoValue 1.4.
+
+* The [retention](https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Retention.html)
+  of the `@AutoValue` annotation has changed from `SOURCE` to `CLASS`. This
+  means that it is possible for code-analysis tools to tell whether a class is
+  an `@AutoValue`. AutoValue itself uses this to enforce the check that one
+  `@AutoValue` class cannot extend another, even if the classes are compiled
+  separately.
+
+* It is now an error if `@Memoized` is applied to a method not inside an
+  `@AutoValue` class.
+
+* Type annotations are now handled more consistently. If `@Nullable` is a type
+  annotation, a property of type `@Nullable Integer` will have that type used
+  everywhere in the generated code. Associated bugs with nested type
+  annotations, like `Outer.@Inner`, have been fixed.
+
+### Bugs fixed since 1.4.1
+
+* `@Memoized` methods can now throw checked exceptions. Previously this failed
+  because the exceptions were not copied into the `throws` clause of the
+  generated override, so the call to `super.foo()` did not compile.
+
+* The generated `hashCode()` method uses `h = (int) (h ^ longProperty)` rather
+  than `h ^= longProperty` to avoid warnings about loss of precision.
+
+* Annotations are not copied from an abstract method to its implementation if
+  they are not visible from the latter. This can happen if the `@AutoValue`
+  inherits the abstract method from a class or interface in a different package.
+
 ## 1.3 → 1.4
 
 *This is the last AutoValue version that compiles and runs on Java 6.* Future
diff --git a/value/pom.xml b/value/pom.xml
index 7aa90313b0..fa2a0e3733 100755
--- a/value/pom.xml
+++ b/value/pom.xml
@@ -33,7 +33,7 @@
   </description>
 
   <properties>
-    <guava.version>21.0</guava.version>
+    <guava.version>23.0</guava.version>
   </properties>
   <scm>
     <url>http://github.com/google/auto</url>
@@ -61,7 +61,7 @@
     <dependency>
       <groupId>com.squareup</groupId>
       <artifactId>javapoet</artifactId>
-      <version>1.8.0</version>
+      <version>1.9.0</version>
     </dependency>
     <!-- test dependencies -->
     <dependency>
@@ -91,7 +91,7 @@
     <dependency>
       <groupId>com.google.testing.compile</groupId>
       <artifactId>compile-testing</artifactId>
-      <version>0.10</version>
+      <version>0.11</version>
       <scope>test</scope>
     </dependency>
   </dependencies>
diff --git a/value/src/test/java/com/google/auto/value/processor/CompilationTest.java b/value/src/test/java/com/google/auto/value/processor/CompilationTest.java
index b3821affda..6f4ffd5774 100755
--- a/value/src/test/java/com/google/auto/value/processor/CompilationTest.java
+++ b/value/src/test/java/com/google/auto/value/processor/CompilationTest.java
@@ -2706,84 +2706,11 @@ public void builderClassExtendsParameterizedBaseClass() {
         "  }",
         "}");
 
-    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines(
-        "foo.bar.AutoValue_ExtendedClass",
-        "package foo.bar;",
-        "import javax.annotation.Generated;",
-        "@Generated(\"com.google.auto.value.processor.AutoValueProcessor\")",
-        "final class AutoValue_ExtendedClass extends ExtendedClass {",
-        "    private final Integer value;",
-        "    ",
-        "    private AutoValue_ExtendedClass(Integer value) {",
-        "        this.value = value;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public Integer value() {",
-        "        return value;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public String toString() {",
-        "        return \"ExtendedClass{value=\" + value + \"}\";",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public boolean equals(Object o) {",
-        "        if (o == this) {",
-        "            return true;",
-        "        }",
-        "        if (o instanceof ExtendedClass) {",
-        "            ExtendedClass that = (ExtendedClass)o;",
-        "            return (this.value.equals(that.value()));",
-        "        }",
-        "        return false;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public int hashCode() {",
-        "        int h = 1;",
-        "        h *= 1000003;",
-        "        h ^= this.value.hashCode();",
-        "        return h;",
-        "    }",
-        "    ",
-        "    static final class Builder extends ExtendedClass.Builder {",
-        "        private Integer value;",
-        "        ",
-        "        Builder() {",
-        "        }",
-        "        ",
-        "        @Override()",
-        "        public ExtendedClass.Builder value(Integer value) {",
-        "            if (value == null) {",
-        "                throw new NullPointerException(\"Null value\");",
-        "            }",
-        "            this.value = value;",
-        "            return this;",
-        "        }",
-        "        ",
-        "        @Override()",
-        "        public ExtendedClass build() {",
-        "            String missing = \"\";",
-        "            if (this.value == null) {",
-        "                missing += \" value\";",
-        "            }",
-        "            if (!missing.isEmpty()) {",
-        "                throw new IllegalStateException(\"Missing required properties:\" + missing);",
-        "            }",
-        "            return new AutoValue_ExtendedClass(this.value);",
-        "        }",
-        "    }",
-        "}");
     Compilation compilation =
         javac()
             .withProcessors(new AutoValueProcessor())
             .compile(baseClassObject, extendedClassObject);
     assertThat(compilation).succeededWithoutWarnings();
-    assertThat(compilation)
-        .generatedSourceFile("foo.bar.AutoValue_ExtendedClass")
-        .hasSourceEquivalentTo(expectedOutput);
   }
 
   @Test
@@ -2815,91 +2742,10 @@ public void builderClassExtendsParameterizedBaseClassWithBuilder() {
         "  }",
         "}");
 
-    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines(
-        "foo.bar.AutoValue_ExtendedClass",
-        "package foo.bar;",
-        "import javax.annotation.Generated;",
-        "@Generated(\"com.google.auto.value.processor.AutoValueProcessor\")",
-        "final class AutoValue_ExtendedClass extends ExtendedClass {",
-        "    private final java.lang.Integer value;",
-        "    ",
-        "    private AutoValue_ExtendedClass(java.lang.Integer value) {",
-        "        this.value = value;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public java.lang.Integer value() {",
-        "        return value;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public String toString() {",
-        "        return \"ExtendedClass{value=\" + value + \"}\";",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public boolean equals(Object o) {",
-        "        if (o == this) {",
-        "            return true;",
-        "        }",
-        "        if (o instanceof ExtendedClass) {",
-        "            ExtendedClass that = (ExtendedClass)o;",
-        "            return (this.value.equals(that.value()));",
-        "        }",
-        "        return false;",
-        "    }",
-        "    ",
-        "    @Override()",
-        "    public int hashCode() {",
-        "        int h = 1;",
-        "        h *= 1000003;",
-        "        h ^= this.value.hashCode();",
-        "        return h;",
-        "    }",
-        "    ",
-        "    static final class Builder extends ExtendedClass.Builder {",
-        "        private java.lang.Integer value;",
-        "        ",
-        "        Builder() {",
-        "        }",
-        "        ",
-        "        ",
-        "        @Override()",
-        "        public ExtendedClass.Builder value(java.lang.Integer value) {",
-        "            if (value == null) {",
-        "                throw new NullPointerException(\"Null value\");",
-        "            }",
-        "            this.value = value;",
-        "            return this;",
-        "        }",
-        "        @Override()",
-        "        public java.lang.Integer value() {",
-        "          if (value == null) {\n",
-        "            throw new IllegalStateException(\"Property \\\"value\\\" has not been set\");",
-        "          }",
-        "          return value;",
-        "        }",
-        "        ",
-        "        @Override()",
-        "        public ExtendedClass build() {",
-        "            String missing = \"\";",
-        "            if (this.value == null) {",
-        "                missing += \" value\";",
-        "            }",
-        "            if (!missing.isEmpty()) {",
-        "                throw new IllegalStateException(\"Missing required properties:\" + missing);",
-        "            }",
-        "            return new AutoValue_ExtendedClass(this.value);",
-        "        }",
-        "    }",
-        "}");
     Compilation compilation =
         javac()
             .withProcessors(new AutoValueProcessor())
             .compile(baseClassObject, extendedClassObject);
     assertThat(compilation).succeededWithoutWarnings();
-    assertThat(compilation)
-        .generatedSourceFile("foo.bar.AutoValue_ExtendedClass")
-        .hasSourceEquivalentTo(expectedOutput);
   }
 }
