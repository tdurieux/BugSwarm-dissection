diff --git a/bin/ansible-doc b/bin/ansible-doc
deleted file mode 100755
index cabb1f519a..0000000000
--- a/bin/ansible-doc
+++ /dev/null
@@ -1 +0,0 @@
-ansible
\ No newline at end of file
diff --git a/bin/ansible-doc b/bin/ansible-doc
new file mode 120000
index 0000000000..cabb1f519a
--- /dev/null
+++ b/bin/ansible-doc
@@ -0,0 +1 @@
+ansible
\ No newline at end of file
diff --git a/bin/ansible-galaxy b/bin/ansible-galaxy
deleted file mode 100755
index cabb1f519a..0000000000
--- a/bin/ansible-galaxy
+++ /dev/null
@@ -1 +0,0 @@
-ansible
\ No newline at end of file
diff --git a/bin/ansible-galaxy b/bin/ansible-galaxy
new file mode 120000
index 0000000000..cabb1f519a
--- /dev/null
+++ b/bin/ansible-galaxy
@@ -0,0 +1 @@
+ansible
\ No newline at end of file
diff --git a/bin/ansible-playbook b/bin/ansible-playbook
deleted file mode 100755
index cabb1f519a..0000000000
--- a/bin/ansible-playbook
+++ /dev/null
@@ -1 +0,0 @@
-ansible
\ No newline at end of file
diff --git a/bin/ansible-playbook b/bin/ansible-playbook
new file mode 120000
index 0000000000..cabb1f519a
--- /dev/null
+++ b/bin/ansible-playbook
@@ -0,0 +1 @@
+ansible
\ No newline at end of file
diff --git a/bin/ansible-pull b/bin/ansible-pull
deleted file mode 100755
index cabb1f519a..0000000000
--- a/bin/ansible-pull
+++ /dev/null
@@ -1 +0,0 @@
-ansible
\ No newline at end of file
diff --git a/bin/ansible-pull b/bin/ansible-pull
new file mode 120000
index 0000000000..cabb1f519a
--- /dev/null
+++ b/bin/ansible-pull
@@ -0,0 +1 @@
+ansible
\ No newline at end of file
diff --git a/bin/ansible-vault b/bin/ansible-vault
deleted file mode 100755
index cabb1f519a..0000000000
--- a/bin/ansible-vault
+++ /dev/null
@@ -1 +0,0 @@
-ansible
\ No newline at end of file
diff --git a/bin/ansible-vault b/bin/ansible-vault
new file mode 120000
index 0000000000..cabb1f519a
--- /dev/null
+++ b/bin/ansible-vault
@@ -0,0 +1 @@
+ansible
\ No newline at end of file
diff --git a/lib/ansible/module_utils/basic.py b/lib/ansible/module_utils/basic.py
index 16132c70ac..8df490bf0a 100755
--- a/lib/ansible/module_utils/basic.py
+++ b/lib/ansible/module_utils/basic.py
@@ -1261,21 +1261,17 @@ def get_bin_path(self, arg, required=False, opt_dirs=[]):
         if found return full path; otherwise return None
         '''
         sbin_paths = ['/sbin', '/usr/sbin', '/usr/local/sbin']
-
-        # collect all paths, may include duplicates and nonexistent, order matters
-        paths = opt_dirs + os.environ.get('PATH', '').split(os.pathsep) + sbin_paths
-
-        # clean up: allow only valid, non-duplicate and existing dirs
-        clean_paths = []
-        seen = set()
-        for p in paths:
-            if p is not None and p not in seen and os.path.exists(p):
-                seen.add(p)
-                clean_paths.append(p)
-
-        # search the actual binary, arg
+        paths = []
+        for d in opt_dirs:
+            if d is not None and os.path.exists(d):
+                paths.append(d)
+        paths += os.environ.get('PATH', '').split(os.pathsep)
         bin_path = None
-        for d in clean_paths:
+        # mangle PATH to include /sbin dirs
+        for p in sbin_paths:
+            if p not in paths and os.path.exists(p):
+                paths.append(p)
+        for d in paths:
             path = os.path.join(d, arg)
             if os.path.exists(path) and self.is_executable(path):
                 bin_path = path
diff --git a/lib/ansible/plugins/strategies/__init__.py b/lib/ansible/plugins/strategies/__init__.py
index 8658640ab5..f45e2e7d65 100755
--- a/lib/ansible/plugins/strategies/__init__.py
+++ b/lib/ansible/plugins/strategies/__init__.py
@@ -238,11 +238,12 @@ def _process_pending_results(self, iterator):
 
                 elif result[0] == 'register_host_var':
                     # essentially the same as 'set_host_var' below, however we
-                    # never follow the delegate_to value for registered vars
+                    # never follow the delegate_to value for registered vars and
+                    # the variable goes in the fact_cache
                     host      = result[1]
                     var_name  = result[2]
                     var_value = result[3]
-                    self._variable_manager.set_host_variable(host, var_name, var_value)
+                    self._variable_manager.set_host_facts(host, {var_name: var_value})
 
                 elif result[0] in ('set_host_var', 'set_host_facts'):
                     host = result[1]
diff --git a/lib/ansible/vars/__init__.py b/lib/ansible/vars/__init__.py
index 6fa3c90ccd..0fe4b3fdb3 100755
--- a/lib/ansible/vars/__init__.py
+++ b/lib/ansible/vars/__init__.py
@@ -48,14 +48,14 @@ class VariableManager:
 
     def __init__(self):
 
-        self._fact_cache       = FactCache()
-        self._vars_cache       = defaultdict(dict)
-        self._extra_vars       = defaultdict(dict)
-        self._host_vars_files  = defaultdict(dict)
+        self._fact_cache = FactCache()
+        self._nonpersistent_fact_cache = defaultdict(dict)
+        self._vars_cache = defaultdict(dict)
+        self._extra_vars = defaultdict(dict)
+        self._host_vars_files = defaultdict(dict)
         self._group_vars_files = defaultdict(dict)
-        self._inventory        = None
-
-        self._omit_token       = '__omit_place_holder__%s' % sha1(os.urandom(64)).hexdigest()
+        self._inventory = None
+        self._omit_token = '__omit_place_holder__%s' % sha1(os.urandom(64)).hexdigest()
 
     def _get_cache_entry(self, play=None, host=None, task=None):
         play_id = "NONE"
@@ -179,13 +179,14 @@ def get_vars(self, loader, play=None, host=None, task=None, include_hostvars=Tru
                     for item in data:
                         all_vars = combine_vars(all_vars, item)
 
-            # finally, the facts cache for this host, if it exists
+            # finally, the facts caches for this host, if it exists
             try:
                 host_facts = self._fact_cache.get(host.name, dict())
                 for k in host_facts.keys():
                     if host_facts[k] is not None and not isinstance(host_facts[k], UnsafeProxy):
                         host_facts[k] = UnsafeProxy(host_facts[k])
                 all_vars = combine_vars(all_vars, host_facts)
+                all_vars = combine_vars(all_vars, self._nonpersistent_fact_cache.get(host.name, dict()))
             except KeyError:
                 pass
 
@@ -370,12 +371,12 @@ def set_host_facts(self, host, facts):
         assert isinstance(facts, dict)
 
         if host.name not in self._fact_cache:
-            self._fact_cache[host.name] = facts
+            self._nonpersistent_fact_cache[host.name] = facts
         else:
             try:
-                self._fact_cache[host.name].update(facts)
+                self._nonpersistent_fact_cache[host.name].update(facts)
             except KeyError:
-                self._fact_cache[host.name] = facts
+                self._nonpersistent_fact_cache[host.name] = facts
 
     def set_host_variable(self, host, varname, value):
         '''
