diff --git a/appveyor.yml b/appveyor.yml
index 57fea24875..c24af6e4dd 100755
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -32,7 +32,7 @@ environment:
     #- JAVA_HOME: C:\Program Files\Java\jdk1.7.0
     - JAVA_HOME: C:\Program Files\Java\jdk1.8.0
 build_script: >
-  mvn clean site 
+  rem mvn clean site 
   -Dlinkcheck.skip=true -Dmaven.javadoc.skip=true 
   -DskipTests -DskipITs -Dcobertura.skip=true 
   -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true
diff --git a/pom.xml b/pom.xml
index a6bc7fcb99..b70a1e2adc 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1132,7 +1132,7 @@
             <regex><pattern>.*.checks.coding.AbstractSuperCheck</pattern><branchRate>78</branchRate><lineRate>89</lineRate></regex>
             <regex><pattern>.*.checks.coding.DeclarationOrderCheck</pattern><branchRate>82</branchRate><lineRate>93</lineRate></regex>
             <regex><pattern>.*.checks.coding.ExplicitInitializationCheck</pattern><branchRate>91</branchRate><lineRate>97</lineRate></regex>
-            <regex><pattern>.*.checks.coding.FinalLocalVariableCheck</pattern><branchRate>82</branchRate><lineRate>100</lineRate></regex>
+            <regex><pattern>.*.checks.coding.FinalLocalVariableCheck</pattern><branchRate>83</branchRate><lineRate>100</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalInstantiationCheck</pattern><branchRate>81</branchRate><lineRate>97</lineRate></regex>
             <regex><pattern>.*.checks.coding.IllegalTypeCheck</pattern><branchRate>93</branchRate><lineRate>94</lineRate></regex>
             <regex><pattern>.*.checks.coding.InnerAssignmentCheck</pattern><branchRate>88</branchRate><lineRate>100</lineRate></regex>
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughTest.java
index 8102673571..66ddd9dd95 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughTest.java
@@ -29,11 +29,13 @@ public void fallThroughTest() throws IOException, Exception {
         final String[] expected = {
             "14:13: " + msg,
             "38:13: " + msg, 
+            "47:13: " + msg,
             "53:13: " + msg,
             "70:13: " + msg,
             "87:13: " + msg,
             "105:13: " + msg,
             "123:13: " + msg,
+            "179:11: " + msg,
             "369:11: " + msg,
             "372:11: " + msg,
             "374:41: " + msg,
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughInput.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughInput.java
index 2a2dddb33b..790d031a1c 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughInput.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrow/FallThroughInput.java
@@ -44,7 +44,7 @@ void method(int i, int j, boolean cond) {
                 if (true) {
                     return;
                 }
-            case 14:
+            case 14:  //warn
                 if (true) {
                     return;
                 } else {
@@ -176,7 +176,7 @@ void methodFallThru(int i, int j, boolean cond) {
               if (true) {
                   return;
               }
-          case 14:
+          case 14:  //warn
               if (true) {
                   return;
               } else {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index f8776c25db..2a90b038fd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -180,7 +180,7 @@ private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {
         final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;
 
         if (getAbstractOption() == RightCurlyOption.SAME
-                && !hasLineBreakBefore(rcurly) && !singleLineBlock(lcurly,rcurly)) {
+                && !hasLineBreakBefore(rcurly) && !singleLineBlock(lcurly, rcurly)) {
             log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);
         }
 
@@ -207,11 +207,8 @@ else if (getAbstractOption() == RightCurlyOption.ALONE
      * @return true if block in single line, false otherwise
      */
     private boolean singleLineBlock(DetailAST lcurly, DetailAST rcurly) {
-        if ((lcurly != null && rcurly != null) &&
-            (lcurly.getLineNo() == rcurly.getLineNo())) {
-            return true;
-        }
-        return false;
+        return lcurly != null && rcurly != null
+                && lcurly.getLineNo() == rcurly.getLineNo();
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
index 4fa2cfe2ba..2a581059f2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java
@@ -229,7 +229,9 @@ private boolean isOverridingMethod(DetailAST ast) {
         }
         final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);
         final String name = nameAST.getText();
-        if (!getMethodName().equals(name)) {
+        final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);
+        if (!getMethodName().equals(name)
+                || modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {
             return false;
         }
         final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
index 19a6d3fa1d..77bb648cf6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -223,7 +223,10 @@ private boolean checkIf(final DetailAST ast, boolean useBreak,
 
         if (isTerminated && elseStmt != null) {
             isTerminated = isTerminated(elseStmt.getFirstChild(),
-                                        useBreak, useContinue);
+                useBreak, useContinue);
+        }
+        else if (elseStmt == null) {
+            isTerminated = false;
         }
         return isTerminated;
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index ca0fff5848..1070bee512 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -152,15 +152,17 @@ public void visitToken(DetailAST ast) {
                 break;
 
             case TokenTypes.PARAMETER_DEF:
-                if (ScopeUtils.inInterfaceBlock(ast)
-                    || inAbstractOrNativeMethod(ast)
-                    || inLambda(ast)) {
-                    break;
+                if (!inLambda(ast)
+                        && !ast.branchContains(TokenTypes.FINAL)
+                        && !inAbstractOrNativeMethod(ast)
+                        && !ScopeUtils.inInterfaceBlock(ast)) {
+                    insertVariable(ast);
                 }
+                break;
             case TokenTypes.VARIABLE_DEF:
                 if (ast.getParent().getType() != TokenTypes.OBJBLOCK
-                        && shouldCheckEnhancedForLoopVariable(ast)
                         && isVariableInForInit(ast)
+                        && shouldCheckEnhancedForLoopVariable(ast)
                         && !ast.branchContains(TokenTypes.FINAL)) {
                     insertVariable(ast);
                 }
@@ -234,17 +236,18 @@ private static boolean isVariableInForInit(DetailAST variableDef) {
      * @return true if ast is a descendant of an abstract or native method.
      */
     private static boolean inAbstractOrNativeMethod(DetailAST ast) {
+        boolean abstractOrNative = false;
         DetailAST parent = ast.getParent();
-        while (parent != null) {
+        while (parent != null && !abstractOrNative) {
             if (parent.getType() == TokenTypes.METHOD_DEF) {
                 final DetailAST modifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
-                return modifiers.branchContains(TokenTypes.ABSTRACT)
+                abstractOrNative = modifiers.branchContains(TokenTypes.ABSTRACT)
                         || modifiers.branchContains(TokenTypes.LITERAL_NATIVE);
             }
             parent = parent.getParent();
         }
-        return false;
+        return abstractOrNative;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheck.java
index 1c74215f38..023c3694e8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheck.java
@@ -23,6 +23,7 @@
 /**
  * <p>
  * Checks that an overriding clone() method invokes super.clone().
+ * Does not check native methods, as they have no possible java defined implementation.
  * </p>
  * <p>
  * Reference:<a
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperFinalizeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperFinalizeCheck.java
index 893f2657be..2301bde3af 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperFinalizeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperFinalizeCheck.java
@@ -23,6 +23,7 @@
 /**
  * <p>
  * Checks that an overriding finalize() method invokes super.finalize().
+ * Does not check native methods, as they have no possible java defined implementation.
  * </p>
  * <p>
  * Reference:<a
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
index 8dc787a9c6..af0907798d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java
@@ -38,11 +38,13 @@ public void testDefault() throws Exception {
         final String[] expected = {
             "14:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "38:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "47:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "53:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "70:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "87:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "105:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "123:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "179:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "369:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "372:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
@@ -64,12 +66,14 @@ public void testLastCaseGroup() throws Exception {
         final String[] expected = {
             "14:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "38:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "47:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "53:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "70:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "87:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "105:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "123:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "123:13: " + getCheckMessage(MSG_FALL_THROUGH_LAST),
+            "179:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "369:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "372:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "374:40: " + getCheckMessage(MSG_FALL_THROUGH),
@@ -94,6 +98,7 @@ public void testOwnPattern() throws Exception {
         final String[] expected = {
             "14:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "38:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "47:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "53:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "70:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "87:13: " + getCheckMessage(MSG_FALL_THROUGH),
@@ -101,6 +106,7 @@ public void testOwnPattern() throws Exception {
             "123:13: " + getCheckMessage(MSG_FALL_THROUGH),
             "145:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "170:11: " + getCheckMessage(MSG_FALL_THROUGH),
+            "179:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "186:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "204:11: " + getCheckMessage(MSG_FALL_THROUGH),
             "222:11: " + getCheckMessage(MSG_FALL_THROUGH),
@@ -138,4 +144,23 @@ public void testTokensNotNull() {
         Assert.assertNotNull(check.getDefaultTokens());
         Assert.assertNotNull(check.getRequiredTokens());
     }
+
+    @Test
+    public void testFallThroughNoElse() throws Exception {
+        DefaultConfiguration checkConfig = createCheckConfig(FallThroughCheck.class);
+        final String[] expected = {
+            "20:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "35:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "39:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "46:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "60:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "67:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "80:21: " + getCheckMessage(MSG_FALL_THROUGH),
+            "86:13: " + getCheckMessage(MSG_FALL_THROUGH),
+            "88:13: " + getCheckMessage(MSG_FALL_THROUGH),
+        };
+        verify(checkConfig,
+            getPath("coding" + File.separator + "InputFallThrough2.java"),
+            expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
index e8812baf96..cfcf3112c1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/NoCloneCheckTest.java
@@ -43,6 +43,7 @@ public void testHasClone()
             "39: " + getCheckMessage(MSG_KEY),
             "52: " + getCheckMessage(MSG_KEY),
             "60: " + getCheckMessage(MSG_KEY),
+            "98: " + getCheckMessage(MSG_KEY),
         };
         verify(checkConfig, getPath("coding" + File.separator + "InputClone.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
index b7a24a730a..0da47116e0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java
@@ -106,6 +106,7 @@ public void testFileWithFewTopLevelClasses() throws Exception {
             "58: " + getCheckMessage(MSG_KEY, "CloneWithTypeArgumentsAndNoSuper"),
             "67: " + getCheckMessage(MSG_KEY, "MyClassWithGenericSuperMethod"),
             "84: " + getCheckMessage(MSG_KEY, "AnotherClass"),
+            "97: " + getCheckMessage(MSG_KEY, "NativeTest"),
         };
         verify(checkConfig, getPath("coding" + File.separator + "InputClone.java"), expected);
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputClone.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputClone.java
index 707669fb72..ca858c5a6d 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputClone.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputClone.java
@@ -93,3 +93,7 @@ public static Object clone(Object o) {
 	return null;
     }
 }
+
+class NativeTest {
+    public native Object clone();
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough2.java
new file mode 100755
index 0000000000..30930aa69b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFallThrough2.java
@@ -0,0 +1,95 @@
+package com.puppycrawl.tools.checkstyle.coding;
+
+public class InputFallThrough2 {
+    enum Test {
+        A, B, C
+    }
+
+    public static void test() {
+        Test test = Test.A;
+        int variable = 0;
+
+        switch (test) {
+            case A:
+                break;
+            case B:
+                if (variable == 1) {
+                    // some work
+                    break;
+                }
+            case C:
+                break;
+        }
+
+        int var2 = 1;
+        switch (variable) {
+            case 0:
+            case 1:
+            case 2:
+                System.out.println(var2);
+                break;
+            case 3:
+                if (true) {
+                    return;
+                }
+            case 4:
+                if (var2 == 2) {
+                    break;
+                }
+            case 5:
+                if (var2 == 1) {
+
+                }
+                else if (true) {
+                    return;
+                }
+            case 6:
+                if (var2 > 1) {
+                    break;
+                }
+                else {
+                    break;
+                }
+            case 7:
+                if (var2 ==1) {
+                    break;
+                }
+                else if (true) {
+                    return;
+                }
+            case 8:
+                if(var2 == 5) {
+                    System.out.println("0xB16B00B5");
+                }
+                else {
+                    break;
+                }
+            case 9:
+                if(var2 == 5) {
+                    System.out.println("0xCAFED00D");
+                }
+                else {
+                    System.out.printf("0x4B1D");
+                }
+                break;
+            case 10:
+                int var3 = 0xDEADBEEF;
+                switch (var3) {
+                    case 0xCAFEBABE:
+                        System.out.printf("0x1CEB00DA");
+                    default:
+                        System.out.printf("");
+                }
+                if(true) {
+                    break;
+                }
+            case 11:
+                if(false) {break;}
+            case 12:
+                if(true);
+                break;
+            default:
+                break;
+        }
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFinalize.java b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFinalize.java
index a7ed92be4a..cd734dd78b 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFinalize.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputFinalize.java
@@ -51,3 +51,7 @@ void someMethod(java.util.List<? super java.util.Map> l)
 
     }
 }
+
+class TestNative {
+    public native void finalize();
+}
diff --git a/src/xdocs/config_coding.xml b/src/xdocs/config_coding.xml
index 454589a5a0..23d6bdd943 100755
--- a/src/xdocs/config_coding.xml
+++ b/src/xdocs/config_coding.xml
@@ -1564,8 +1564,9 @@ if (&quot;something&quot;.equals(x))
     <section name="SuperClone">
       <subsection name="Description">
         <p>
-          Checks that an overriding <code>clone()</code> method
-          invokes <code>super.clone()</code>.
+          Checks that an overriding <code>clone()</code> method invokes
+          <code>super.clone()</code>. Does not check native methods, as
+          they have no possible java defined implementation.
         </p>
 
         <p>
@@ -1599,8 +1600,9 @@ if (&quot;something&quot;.equals(x))
     <section name="SuperFinalize">
       <subsection name="Description">
         <p>
-          Checks that an overriding <code>finalize()</code>
-          method invokes <code>super.finalize()</code>.
+          Checks that an overriding <code>finalize()</code> method invokes
+          <code>super.finalize()</code>. Does not check native methods, as
+          they have no possible java defined implementation.
         </p>
 
         <p>
