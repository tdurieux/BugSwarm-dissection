diff --git a/src/main/java/cn/nukkit/Server.java b/src/main/java/cn/nukkit/Server.java
index c8493bcc40..d2651fc099 100755
--- a/src/main/java/cn/nukkit/Server.java
+++ b/src/main/java/cn/nukkit/Server.java
@@ -34,6 +34,7 @@
 import cn.nukkit.level.generator.Generator;
 import cn.nukkit.level.generator.Normal;
 import cn.nukkit.level.generator.biome.Biome;
+import cn.nukkit.level.physics.PhysicsTask;
 import cn.nukkit.math.NukkitMath;
 import cn.nukkit.metadata.EntityMetadataStore;
 import cn.nukkit.metadata.LevelMetadataStore;
@@ -182,6 +183,10 @@
 
     private Level defaultLevel = null;
 
+    private PhysicsTask physicsTask;
+
+    public boolean physicsDone = true;
+
     public Server(MainLogger logger, final String filePath, String dataPath, String pluginPath) {
         instance = this;
         this.logger = logger;
@@ -438,6 +443,8 @@ public Server(MainLogger logger, final String filePath, String dataPath, String
             this.setDefaultLevel(this.getLevelByName(defaultName));
         }
 
+        this.physicsTask = new PhysicsTask();
+
         this.properties.save(true);
 
         if (this.getDefaultLevel() == null) {
@@ -993,6 +1000,11 @@ private boolean tick() {
         }
         Timings.connectionTimer.stopTiming();
 
+        if(this.physicsDone) {
+            this.physicsDone = false;
+            this.scheduler.scheduleAsyncTask(physicsTask);
+        }
+
         Timings.schedulerTimer.startTiming();
         this.scheduler.mainThreadHeartbeat(this.tickCounter);
         Timings.schedulerTimer.stopTiming();
diff --git a/src/main/java/cn/nukkit/block/Block.java b/src/main/java/cn/nukkit/block/Block.java
index 9521289b21..338fc74b93 100755
--- a/src/main/java/cn/nukkit/block/Block.java
+++ b/src/main/java/cn/nukkit/block/Block.java
@@ -3,26 +3,34 @@
 import cn.nukkit.Player;
 import cn.nukkit.Server;
 import cn.nukkit.block.redstone.IndirectRedstoneSource;
+import cn.nukkit.block.redstone.RedstonePowerMode;
+import cn.nukkit.block.redstone.RedstoneSource;
 import cn.nukkit.entity.Entity;
 import cn.nukkit.item.Item;
 import cn.nukkit.item.ItemTool;
 import cn.nukkit.level.MovingObjectPosition;
 import cn.nukkit.level.Position;
+import cn.nukkit.level.range.EffectRange;
 import cn.nukkit.math.AxisAlignedBB;
 import cn.nukkit.math.Vector3;
 import cn.nukkit.metadata.MetadataValue;
 import cn.nukkit.metadata.Metadatable;
 import cn.nukkit.plugin.Plugin;
 import cn.nukkit.utils.BlockColor;
+import cn.nukkit.utils.RedstoneUtil;
 
 import java.lang.reflect.Constructor;
 import java.util.List;
 
 /**
- * author: MagicDroidX
+ * author: MagicDroidX & PeratX
  * Nukkit Project
  */
 public abstract class Block extends Position implements Metadatable, Cloneable, IndirectRedstoneSource{
+    public static short REDSTONE_POWER_MAX = 15;
+    public static short REDSTONE_POWER_MIN = 0;
+
+
     public static final int AIR = 0;
     public static final int STONE = 1;
     public static final int GRASS = 2;
@@ -285,8 +293,6 @@
     public static boolean[] transparent = null;
     public AxisAlignedBB boundingBox = null;
     protected int meta = 0;
-    protected int powerLevel = 0;
-    protected boolean powerSource = false;
 
     protected Block(Integer meta) {
         this.meta = (meta != null ? meta : 0);
@@ -590,6 +596,25 @@ public boolean onBreak(Item item) {
         return this.getLevel().setBlock(this, new BlockAir(), true, true);
     }
 
+    /**
+     * True if this block requires physic updates when a neighbor block changes, false if not.
+     *
+     * @return if this block requires physics updates
+     */
+    public boolean hasPhysics() {
+        return false;
+    }
+
+    /**
+     * Returns the maximum range of effect for physics updates to this material. This is triggered when the material is set to this material, or when the data is changed. <br> When triggered, all blocks
+     * in this range are queued for updating.
+     *
+     * @return the maximum range of updates
+     */
+    public EffectRange getPhysicsRange() {
+        return EffectRange.THIS_AND_NEIGHBORS;
+    }
+
     public int onUpdate(int type) {
         return 0;
     }
@@ -902,60 +927,62 @@ public Block clone() {
         return (Block) super.clone();
     }
 
-    public int getPowerLevel() {
-        return powerLevel;
+    public String getLocationHash() {
+        String str = "";
+        str = String.valueOf((int) this.x);
+        str += ":";
+        str += String.valueOf((int) this.y);
+        str += ":";
+        str += String.valueOf((int) this.z);
+        return str;
     }
 
-    public void setPowerLevel(int powerLevel) {
-        this.powerLevel = powerLevel;
+    public int getDropExp() {
+        return 0;
     }
 
-    public int getPowerLevel(int side) {
-        return this.getSide(side).getPowerLevel();
+    @Override
+    public boolean isRedstoneConductor() {
+        return false;
     }
 
-    public boolean isNeighborPowered() {
-        return this.getNeighborPowerLevel() > 0;
+    public short getIndirectRedstonePower(Block block, int direction, RedstonePowerMode powerMode) {
+        return this.getRedstonePower(block);
     }
 
-    public int getNeighborPowerLevel() {
-        int energy = 0;
-        int tempLevel;
-        tempLevel = this.getSide(SIDE_DOWN).getPowerLevel();
-        energy = tempLevel > energy ? tempLevel : energy;
-        tempLevel = this.getSide(SIDE_UP).getPowerLevel();
-        energy = tempLevel > energy ? tempLevel : energy;
-        for (int side : new int[]{Vector3.SIDE_NORTH, Vector3.SIDE_SOUTH, Vector3.SIDE_WEST, Vector3.SIDE_EAST}) {
-            tempLevel = this.getSide(side).getPowerLevel();
-            energy = tempLevel > energy ? tempLevel : energy;
-        }
-        return energy;
+    public final boolean hasIndirectRedstonePower(Block block, int direction, RedstonePowerMode powerMode) {
+        return this.getIndirectRedstonePower(block, direction, powerMode) > 0;
     }
 
-    public boolean isPowered() {
-        return this.powerLevel > 0;
+    @Override
+    public final short getRedstonePower(Block block) {
+        return this.getRedstonePower(block, RedstonePowerMode.ALL);
     }
 
-    public boolean isPowerSource() {
-        return this.powerSource;
-    }
+    @Override
+    public short getRedstonePower(Block block, RedstonePowerMode powerMode) {
+        if (!this.isRedstoneConductor()) {
+            return REDSTONE_POWER_MIN;
+        }
 
-    public void setPowerSource(boolean isSource) {
-        this.powerSource = isSource;
+        short power = 0;
+        Block neigh;
+        for (int face : RedstoneUtil.NESWDU) {
+            neigh = block.getSide(face);
+            if (neigh instanceof RedstoneSource) {
+                power = (short) Math.max(power, ((RedstoneSource) neigh).getDirectRedstonePower(neigh, Vector3.getOppositeSide(face), powerMode));
+            }
+        }
+        return power;
     }
 
-    public String getLocationHash() {
-        String str = "";
-        str = String.valueOf((int) this.x);
-        str += ":";
-        str += String.valueOf((int) this.y);
-        str += ":";
-        str += String.valueOf((int) this.z);
-        return str;
+    @Override
+    public final boolean hasRedstonePower(Block block) {
+        return this.hasRedstonePower(block, RedstonePowerMode.ALL);
     }
 
-    public int getDropExp() {
-        return 0;
+    @Override
+    public final boolean hasRedstonePower(Block block, RedstonePowerMode powerMode) {
+        return this.getRedstonePower(block, powerMode) > 0;
     }
-
 }
diff --git a/src/main/java/cn/nukkit/block/BlockLever.java b/src/main/java/cn/nukkit/block/BlockLever.java
index f29d0083ed..ba0f073826 100755
--- a/src/main/java/cn/nukkit/block/BlockLever.java
+++ b/src/main/java/cn/nukkit/block/BlockLever.java
@@ -4,7 +4,6 @@
 import cn.nukkit.item.Item;
 import cn.nukkit.level.Level;
 import cn.nukkit.level.sound.LeverSound;
-import cn.nukkit.redstone.Redstone;
 
 /**
  * @author Nukkit Project Team
@@ -17,7 +16,6 @@ public BlockLever() {
 
     public BlockLever(int meta) {
         super(meta);
-        this.setPowerLevel(Redstone.POWER_STRONGEST);
     }
 
     @Override
@@ -62,13 +60,6 @@ public boolean onActivate(Item item, Player player) {
 
         this.getLevel().setBlock(this, this, true, true);
         this.getLevel().addSound(new LeverSound(this, this.isPowerOn()));
-        if (this.isPowerOn()) {
-            this.setPowerSource(true);
-            Redstone.active(this);
-        } else {
-            this.setPowerSource(false);
-            Redstone.deactive(this, this.getPowerLevel());
-        }
         return true;
     }
 
@@ -127,7 +118,6 @@ public boolean place(Item item, Block block, Block target, int face, double fx,
     @Override
     public boolean onBreak(Item item) {
         this.getLevel().setBlock(this, new BlockAir(), true, true);
-        Redstone.deactive(this, this.getPowerLevel());
         return true;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockLitRedstoneLamp.java b/src/main/java/cn/nukkit/block/BlockLitRedstoneLamp.java
index 54d86e973e..e439454f83 100755
--- a/src/main/java/cn/nukkit/block/BlockLitRedstoneLamp.java
+++ b/src/main/java/cn/nukkit/block/BlockLitRedstoneLamp.java
@@ -1,7 +1,6 @@
 package cn.nukkit.block;
 
 import cn.nukkit.item.Item;
-import cn.nukkit.level.Level;
 
 /**
  * Created by Pub4Game on 30.03.2016.
@@ -33,9 +32,6 @@ public int getLightLevel() {
 
     @Override
     public int onUpdate(int type) {
-        if ((type == Level.BLOCK_UPDATE_NORMAL || type == Level.BLOCK_UPDATE_SCHEDULED) && this.getNeighborPowerLevel() <= 0) {
-            this.getLevel().setBlock(this, new BlockRedstoneLamp());
-        }
         return 0;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockRedstone.java b/src/main/java/cn/nukkit/block/BlockRedstone.java
index e072a374fd..ec89dd71b6 100755
--- a/src/main/java/cn/nukkit/block/BlockRedstone.java
+++ b/src/main/java/cn/nukkit/block/BlockRedstone.java
@@ -3,12 +3,10 @@
 import cn.nukkit.Player;
 import cn.nukkit.item.Item;
 import cn.nukkit.item.ItemTool;
-import cn.nukkit.redstone.Redstone;
 import cn.nukkit.utils.BlockColor;
 
-/*
- * Created on 2015/12/11 by Pub4Game.
- * Package cn.nukkit.block in project Nukkit .
+/**
+ * @author Pub4Game
  */
 public class BlockRedstone extends BlockSolid {
 
@@ -18,8 +16,6 @@ public BlockRedstone() {
 
     public BlockRedstone(int meta) {
         super(0);
-        this.setPowerSource(true);
-        this.setPowerLevel(Redstone.POWER_STRONGEST);
     }
 
     @Override
@@ -50,18 +46,14 @@ public String getName() {
     @Override
     public boolean place(Item item, Block block, Block target, int face, double fx, double fy, double fz, Player player) {
         this.getLevel().setBlock(block, this, true, false);
-        Redstone.active(this);
         this.getLevel().updateAllLight(this);
-        this.getLevel().updateAroundRedstone(this);
         this.getLevel().updateAround(block);
         return true;
     }
 
     @Override
     public boolean onBreak(Item item) {
-        int level = this.getPowerLevel();
         this.getLevel().setBlock(this, new BlockAir(), true, true);
-        Redstone.deactive(this, level);
         return true;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockRedstoneLamp.java b/src/main/java/cn/nukkit/block/BlockRedstoneLamp.java
index e862e1408a..73d80ef5da 100755
--- a/src/main/java/cn/nukkit/block/BlockRedstoneLamp.java
+++ b/src/main/java/cn/nukkit/block/BlockRedstoneLamp.java
@@ -2,8 +2,6 @@
 
 import cn.nukkit.item.Item;
 import cn.nukkit.item.ItemTool;
-import cn.nukkit.level.Level;
-import cn.nukkit.redstone.Redstone;
 
 /**
  * @author Nukkit Project Team
@@ -45,11 +43,6 @@ public int getToolType() {
 
     @Override
     public int onUpdate(int type) {
-        if ((type == Level.BLOCK_UPDATE_NORMAL || type == Level.BLOCK_UPDATE_SCHEDULED) && this.getNeighborPowerLevel() > 0) {
-            int level = this.getPowerLevel();
-            Redstone.deactive(this, level);
-            this.getLevel().setBlock(this, new BlockLitRedstoneLamp());
-        }
         return 0;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockRedstoneTorch.java b/src/main/java/cn/nukkit/block/BlockRedstoneTorch.java
index a203ab9313..bd5396af37 100755
--- a/src/main/java/cn/nukkit/block/BlockRedstoneTorch.java
+++ b/src/main/java/cn/nukkit/block/BlockRedstoneTorch.java
@@ -2,7 +2,6 @@
 
 import cn.nukkit.Player;
 import cn.nukkit.item.Item;
-import cn.nukkit.redstone.Redstone;
 
 /**
  * author: Angelic47
@@ -16,8 +15,6 @@ public BlockRedstoneTorch() {
 
     public BlockRedstoneTorch(int meta) {
         super(meta);
-        this.setPowerSource(true);
-        this.setPowerLevel(Redstone.POWER_STRONGEST);
     }
 
     @Override
@@ -50,13 +47,11 @@ public boolean place(Item item, Block block, Block target, int face, double fx,
             };
             this.meta = faces[face];
             this.getLevel().setBlock(block, this, true, true);
-            Redstone.active(this);
 
             return true;
         } else if (!below.isTransparent() || below instanceof BlockFence || below.getId() == COBBLE_WALL) {
             this.meta = 0;
             this.getLevel().setBlock(block, this, true, true);
-            Redstone.active(this);
 
             return true;
         }
@@ -66,9 +61,7 @@ public boolean place(Item item, Block block, Block target, int face, double fx,
 
     @Override
     public boolean onBreak(Item item) {
-        int level = this.getPowerLevel();
         this.getLevel().setBlock(this, new BlockAir(), true, true);
-        Redstone.deactive(this, level);
         return true;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockRedstoneWire.java b/src/main/java/cn/nukkit/block/BlockRedstoneWire.java
index daf1a33cc1..b672c2e50f 100755
--- a/src/main/java/cn/nukkit/block/BlockRedstoneWire.java
+++ b/src/main/java/cn/nukkit/block/BlockRedstoneWire.java
@@ -4,7 +4,6 @@
 import cn.nukkit.item.Item;
 import cn.nukkit.level.Level;
 import cn.nukkit.math.Vector3;
-import cn.nukkit.redstone.Redstone;
 import cn.nukkit.utils.BlockColor;
 
 /**
@@ -19,7 +18,6 @@ public BlockRedstoneWire() {
 
     public BlockRedstoneWire(int meta) {
         super(meta);
-        this.powerLevel = meta;
     }
 
     @Override
@@ -32,49 +30,6 @@ public int getId() {
         return REDSTONE_WIRE;
     }
 
-    @Override
-    public void setPowerLevel(int redstonePower) {
-        if (redstonePower > 15) redstonePower = 15;
-        else if (redstonePower < 0) redstonePower = 0;
-        this.powerLevel = redstonePower;
-        this.meta = redstonePower;
-    }
-
-    @Override
-    public int getNeighborPowerLevel() {
-        int power = 0;
-        int tempLevel;
-        tempLevel = this.getSide(SIDE_DOWN).getPowerLevel();
-        power = tempLevel > power ? tempLevel : power;
-        tempLevel = this.getSide(SIDE_UP).getPowerLevel();
-        power = tempLevel > power ? tempLevel : power;
-        Block block;
-        for (int side : new int[]{Vector3.SIDE_NORTH, Vector3.SIDE_SOUTH, Vector3.SIDE_WEST, Vector3.SIDE_EAST}) {
-            block = this.getSide(side);
-            tempLevel = block.getPowerLevel();
-            power = tempLevel > power ? tempLevel : power;
-            if (!(block instanceof BlockSolid)) {
-                Block blockDown;
-                blockDown = block.getSide(SIDE_DOWN);
-                if (blockDown instanceof BlockRedstoneWire) {
-                    tempLevel = blockDown.getPowerLevel();
-                    power = tempLevel > power ? tempLevel : power;
-                }
-            }
-        }
-        Block topBlock = this.getSide(SIDE_UP);
-        if (!(topBlock instanceof BlockSolid)) {
-            for (int side : new int[]{Vector3.SIDE_NORTH, Vector3.SIDE_SOUTH, Vector3.SIDE_WEST, Vector3.SIDE_EAST}) {
-                block = topBlock.getSide(side);
-                if (block instanceof BlockRedstoneWire) {
-                    tempLevel = block.getPowerLevel();
-                    power = tempLevel > power ? tempLevel : power;
-                }
-            }
-        }
-        return power;
-    }
-
     @Override
     public int onUpdate(int type) {
         if (type == Level.BLOCK_UPDATE_NORMAL) {
@@ -91,18 +46,14 @@ public boolean place(Item item, Block block, Block target, int face, double fx,
         if (this.getSide(Vector3.SIDE_DOWN).isTransparent()) {
             return false;
         } else {
-            this.setPowerLevel(this.getNeighborPowerLevel() - 1);
             block.getLevel().setBlock(block, this, true, true);
-            Redstone.active(this);
             return true;
         }
     }
 
     @Override
     public boolean onBreak(Item item) {
-        int level = this.getPowerLevel();
         this.getLevel().setBlock(this, new BlockAir(), true, false);
-        Redstone.deactive(this, level);
         return true;
     }
 
diff --git a/src/main/java/cn/nukkit/block/BlockSolid.java b/src/main/java/cn/nukkit/block/BlockSolid.java
index a7becc9401..6457ddfbfc 100755
--- a/src/main/java/cn/nukkit/block/BlockSolid.java
+++ b/src/main/java/cn/nukkit/block/BlockSolid.java
@@ -21,4 +21,9 @@ public boolean isSolid() {
     public BlockColor getColor() {
         return BlockColor.STONE_BLOCK_COLOR;
     }
+
+    @Override
+    public boolean isRedstoneConductor() {
+        return true;
+    }
 }
diff --git a/src/main/java/cn/nukkit/block/BlockTNT.java b/src/main/java/cn/nukkit/block/BlockTNT.java
index c16dc1bbc0..58574549cf 100755
--- a/src/main/java/cn/nukkit/block/BlockTNT.java
+++ b/src/main/java/cn/nukkit/block/BlockTNT.java
@@ -88,9 +88,6 @@ public void prime() {
 
     @Override
     public int onUpdate(int type) {
-        if (type == Level.BLOCK_UPDATE_NORMAL && this.getNeighborPowerLevel() > 0) {
-            this.prime();
-        }
         return 0;
     }
 
diff --git a/src/main/java/cn/nukkit/entity/item/EntityMinecartTNT.java b/src/main/java/cn/nukkit/entity/item/EntityMinecartTNT.java
index 762577029d..6254b30f65 100755
--- a/src/main/java/cn/nukkit/entity/item/EntityMinecartTNT.java
+++ b/src/main/java/cn/nukkit/entity/item/EntityMinecartTNT.java
@@ -20,7 +20,7 @@ public EntityMinecartTNT(FullChunk chunk, CompoundTag nbt) {
 
     public boolean onUpdate(int currentTick) {
         Block downSide = this.getLocation().floor().getLevelBlock();
-        if (downSide.getId() == Block.ACTIVATOR_RAIL && downSide.isPowered()) {
+        if (downSide.getId() == Block.ACTIVATOR_RAIL) {
             explode();
             kill();
         }
diff --git a/src/main/java/cn/nukkit/level/Level.java b/src/main/java/cn/nukkit/level/Level.java
index 12dc094b7e..19425d2dc0 100755
--- a/src/main/java/cn/nukkit/level/Level.java
+++ b/src/main/java/cn/nukkit/level/Level.java
@@ -31,6 +31,8 @@
 import cn.nukkit.level.generator.task.*;
 import cn.nukkit.level.particle.DestroyBlockParticle;
 import cn.nukkit.level.particle.Particle;
+import cn.nukkit.level.physics.PhysicsQueue;
+import cn.nukkit.level.physics.UpdateQueue;
 import cn.nukkit.level.sound.Sound;
 import cn.nukkit.math.*;
 import cn.nukkit.metadata.BlockMetadataStore;
@@ -217,6 +219,8 @@
 
     private final int dimension = DIMENSION_OVERWORLD;
 
+    private final PhysicsQueue physicsQueue = new PhysicsQueue(this);
+
     public Level(Server server, String name, String path, Class<? extends LevelProvider> provider) {
         this.blockStates = Block.fullList;
         this.levelId = levelIdCounter++;
@@ -1491,7 +1495,7 @@ public boolean setBlock(Vector3 pos, Block block, boolean direct, boolean update
                     }
                     ev.getBlock().onUpdate(BLOCK_UPDATE_NORMAL);
                 }
-                this.updateAround(position);
+                this.physicsQueue.queueForUpdateAsync(block.getFloorX(), block.getFloorY(), block.getFloorZ(), block.getPhysicsRange());
             }
 
             return true;
@@ -2911,4 +2915,26 @@ public boolean canBlockSeeSky(Vector3 pos) {
         return this.getHighestBlockAt(pos.getFloorX(), pos.getFloorZ()) < pos.getY();
     }
 
+    public boolean runPhysics(){
+        boolean updated = false;
+        updated |= physicsQueue.commitAsyncQueue();
+
+        UpdateQueue queue = physicsQueue.getUpdateQueue();
+
+        while (queue.hasNext()) {
+            int x = queue.getX();
+            int y = queue.getY();
+            int z = queue.getZ();
+            callOnUpdatePhysicsForRange(x, y, z);
+        }
+        return updated;
+    }
+
+    private boolean callOnUpdatePhysicsForRange(int x, int y, int z) {
+        Block block = this.getBlock(temporalVector.setComponents(x, y, z));
+        if (block.hasPhysics()) {
+            block.onUpdate(BLOCK_UPDATE_NORMAL);
+        }
+        return true;
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/cn/nukkit/level/physics/PhysicsQueue.java b/src/main/java/cn/nukkit/level/physics/PhysicsQueue.java
new file mode 100755
index 0000000000..76fa8f1162
--- /dev/null
+++ b/src/main/java/cn/nukkit/level/physics/PhysicsQueue.java
@@ -0,0 +1,54 @@
+package cn.nukkit.level.physics;
+
+import cn.nukkit.level.Level;
+import cn.nukkit.level.range.EffectIterator;
+import cn.nukkit.level.range.EffectRange;
+import cn.nukkit.math.BlockVector3;
+
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+/**
+ * Nukkit Project
+ */
+public class PhysicsQueue {
+    private Level level;
+    private ConcurrentLinkedQueue<PhysicsUpdate> asyncQueue = new ConcurrentLinkedQueue<>();
+    private UpdateQueue updateQueue = new UpdateQueue();
+
+    public PhysicsQueue(Level level) {
+        this.level = level;
+    }
+
+    public boolean commitAsyncQueue() {
+        boolean updated = false;
+        PhysicsUpdate update;
+        EffectIterator ei = new EffectIterator();
+        while ((update = asyncQueue.poll()) != null) {
+            updated = true;
+            update.getRange().initEffectIterator(ei);
+            int x = update.getX();
+            int y = update.getY();
+            int z = update.getZ();
+            while (ei.hasNext()) {
+                BlockVector3 v = ei.next();
+                int ox = x + v.getX();
+                int oy = y + v.getY();
+                int oz = z + v.getZ();
+                queueForUpdate(ox, oy, oz);
+            }
+        }
+        return updated;
+    }
+
+    public void queueForUpdateAsync(int x, int y, int z, EffectRange range) {
+        asyncQueue.add(new PhysicsUpdate(x, y, z, range));
+    }
+
+    public void queueForUpdate(int x, int y, int z) {
+        updateQueue.add(x, y, z);
+    }
+
+    public UpdateQueue getUpdateQueue() {
+        return updateQueue;
+    }
+}
diff --git a/src/main/java/cn/nukkit/level/physics/PhysicsTask.java b/src/main/java/cn/nukkit/level/physics/PhysicsTask.java
new file mode 100755
index 0000000000..d750dbb77d
--- /dev/null
+++ b/src/main/java/cn/nukkit/level/physics/PhysicsTask.java
@@ -0,0 +1,24 @@
+package cn.nukkit.level.physics;
+
+import cn.nukkit.Server;
+import cn.nukkit.level.Level;
+import cn.nukkit.scheduler.AsyncTask;
+
+import java.util.ArrayList;
+
+/**
+ * @author PeratX
+ */
+public class PhysicsTask extends AsyncTask{
+    @Override
+    public void onRun() {
+        for (Level level : new ArrayList<>(Server.getInstance().getLevels().values())){
+            level.runPhysics();
+        }
+    }
+
+    @Override
+    public void onCompletion(Server server) {
+        server.physicsDone = true;
+    }
+}
diff --git a/src/main/java/cn/nukkit/level/physics/PhysicsUpdate.java b/src/main/java/cn/nukkit/level/physics/PhysicsUpdate.java
new file mode 100755
index 0000000000..4cbf910b77
--- /dev/null
+++ b/src/main/java/cn/nukkit/level/physics/PhysicsUpdate.java
@@ -0,0 +1,36 @@
+package cn.nukkit.level.physics;
+
+import cn.nukkit.level.range.EffectRange;
+
+/**
+ * Nukkit Project
+ */
+public class PhysicsUpdate {
+    private byte x;
+    private byte y;
+    private byte z;
+    private EffectRange range;
+
+    public PhysicsUpdate(int x, int y, int z, EffectRange range) {
+        this.x = (byte) x;
+        this.y = (byte) y;
+        this.z = (byte) z;
+        this.range = range;
+    }
+
+    public int getX() {
+        return x & 0xFF;
+    }
+
+    public int getY() {
+        return y & 0xFF;
+    }
+
+    public int getZ() {
+        return z & 0xFF;
+    }
+
+    public EffectRange getRange() {
+        return range;
+    }
+}
diff --git a/src/main/java/cn/nukkit/level/physics/UpdateQueue.java b/src/main/java/cn/nukkit/level/physics/UpdateQueue.java
new file mode 100755
index 0000000000..3326d764b4
--- /dev/null
+++ b/src/main/java/cn/nukkit/level/physics/UpdateQueue.java
@@ -0,0 +1,106 @@
+package cn.nukkit.level.physics;
+
+import cn.nukkit.utils.map.TByteShortByteKeyedObjectHashMap;
+import gnu.trove.iterator.TIntIterator;
+import gnu.trove.list.TIntList;
+import gnu.trove.list.array.TByteArrayList;
+import gnu.trove.list.array.TIntArrayList;
+
+public class UpdateQueue {
+	private TByteShortByteKeyedObjectHashMap<TIntList> map = new TByteShortByteKeyedObjectHashMap<>();
+	private TByteArrayList xArray = new TByteArrayList();
+	private TByteArrayList yArray = new TByteArrayList();
+	private TByteArrayList zArray = new TByteArrayList();
+	private int y;
+	private int z;
+	private int maxSize = 0;
+	private int maxMapSize = 0;
+
+	public void add(int x, int y, int z) {
+		TIntList list = map.get(x, y & 0xFF, z);
+		if (list != null) {
+			TIntIterator i = list.iterator();
+			while (i.hasNext()) {
+				int index = i.next();
+				if (
+						(xArray.get(index) & 0xFF) == (x & 0xFF) &&
+								(yArray.get(index) & 0xFF) == (y & 0xFF) &&
+								(zArray.get(index) & 0xFF) == (z & 0xFF)
+						) {
+					return;
+				}
+			}
+		} else {
+			list = new TIntArrayList();
+			map.put(x, y & 0xFF, z, list);
+			if (map.size() > maxMapSize) {
+				maxMapSize = map.size();
+			}
+		}
+		int size = xArray.size();
+		if (size > maxSize) {
+			maxSize = size;
+		}
+		list.add(size);
+		xArray.add((byte) x);
+		yArray.add((byte) y);
+		zArray.add((byte) z);
+	}
+
+	public boolean hasNext() {
+		return !xArray.isEmpty();
+	}
+
+	/**
+	 * Gets the next x coordinate.  This method updates the internal array indexes and should only be called if hasNext returns true
+	 *
+	 * @return the next x coordinate
+	 */
+	public int getX() {
+		int x;
+		int index = xArray.size() - 1;
+		x = xArray.removeAt(index) & 0xFF;
+		y = yArray.removeAt(index) & 0xFF;
+		z = zArray.removeAt(index) & 0xFF;
+
+		if (maxSize > 10 && index < (maxSize >> 1)) {
+			xArray.trimToSize();
+			yArray.trimToSize();
+			zArray.trimToSize();
+			maxSize = xArray.size();
+		}
+
+		TIntList list = map.get(x, y & 0xFF, z);
+		if (list == null || !list.remove(index)) {
+			throw new IllegalStateException("Index was not in list, or list was null");
+		}
+		if (list.isEmpty()) {
+			if (map.remove(x, y & 0xFF, z) == null) {
+				throw new IllegalStateException("Removed update location was not in HashSet");
+			}
+			if (maxMapSize > 5 && map.size() < (maxMapSize >> 1)) {
+				map.compact();
+				maxMapSize = map.size();
+			}
+		}
+		return x;
+	}
+
+	/**
+	 * Gets the y coordinate
+	 *
+	 * @return the y coordinate
+	 */
+	public int getY() {
+		return y;
+	}
+
+	/**
+	 * Gets the z coordinate
+	 *
+	 * @return the z coordinate
+	 */
+	public int getZ() {
+		return z;
+	}
+}
diff --git a/src/main/java/cn/nukkit/utils/map/TByteShortByteKeyedObjectHashMap.java b/src/main/java/cn/nukkit/utils/map/TByteShortByteKeyedObjectHashMap.java
new file mode 100755
index 0000000000..b3f1b8c636
--- /dev/null
+++ b/src/main/java/cn/nukkit/utils/map/TByteShortByteKeyedObjectHashMap.java
@@ -0,0 +1,121 @@
+package cn.nukkit.utils.map;
+
+
+import gnu.trove.iterator.TIntObjectIterator;
+import gnu.trove.map.hash.TIntObjectHashMap;
+import gnu.trove.set.TIntSet;
+
+import java.util.Collection;
+
+/**
+ * A simplistic map that supports a 3 bytes for keys, using a trove int int hashmap in the backend.
+ */
+public class TByteShortByteKeyedObjectHashMap<K> {
+    protected final TIntObjectHashMap<K> map;
+
+    public TByteShortByteKeyedObjectHashMap() {
+        map = new TIntObjectHashMap<>(5);
+    }
+
+    public TByteShortByteKeyedObjectHashMap(int capacity) {
+        map = new TIntObjectHashMap<>(capacity);
+    }
+
+    public K put(int key1, int key2, int key3, K value) {
+        int key = key(key1, key2, key3);
+        return map.put(key, value);
+    }
+
+    public K get(int key1, int key2, int key3) {
+        int key = key(key1, key2, key3);
+        return map.get(key);
+    }
+
+    public boolean containsKey(int key1, int key2, int key3) {
+        int key = key(key1, key2, key3);
+        return map.containsKey(key);
+    }
+
+    public void clear() {
+        map.clear();
+    }
+
+    public void compact() {
+        map.compact();
+    }
+
+    public boolean containsValue(int val) {
+        return map.containsValue(val);
+    }
+
+    public boolean isEmpty() {
+        return map.isEmpty();
+    }
+
+    public TIntObjectIterator<K> iterator() {
+        return map.iterator();
+    }
+
+    public TIntSet keySet() {
+        return map.keySet();
+    }
+
+    public int[] keys() {
+        return map.keys();
+    }
+
+    public K remove(int key1, int key2, int key3) {
+        int key = key(key1, key2, key3);
+        return map.remove(key);
+    }
+
+    public int size() {
+        return map.size();
+    }
+
+    public Collection<K> valueCollection() {
+        return map.valueCollection();
+    }
+
+    /**
+     * Creates a long key from 2 bytes and a short
+     *
+     * @param key1 a <code>byte</code> value
+     * @param key2 a <code>short</code> value
+     * @param key3 a <code>byte</code> value
+     * @return a long which is the concatenation of key1, key2 and key3
+     */
+    public static int key(int key1, int key2, int key3) {
+        return (key1 & 0xFF) << 24 | (key3 & 0xFF) << 16 | key2 & 0xFFFF;
+    }
+
+    /**
+     * Gets the first 8-bit integer value from a long key
+     *
+     * @param key to get from
+     * @return the first 8-bit integer value in the key
+     */
+    public static byte key1(int key) {
+        return (byte) (key >> 24);
+    }
+
+    /**
+     * Gets the second 16-bit integer value from a long key
+     *
+     * @param key to get from
+     * @return the second 16-bit integer value in the key
+     */
+    public static short key2(int key) {
+        return (short) key;
+    }
+
+    /**
+     * Gets the third 8-bit integer value from a long key
+     *
+     * @param key to get from
+     * @return the third 8-bit integer value in the key
+     */
+    public static byte key3(int key) {
+        return (byte) (key >> 16);
+    }
+}
