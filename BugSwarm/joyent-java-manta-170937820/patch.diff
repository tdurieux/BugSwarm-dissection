diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
index cf73d8cff5..33ac4c143d 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartManager.java
@@ -39,6 +39,7 @@
  * Class providing an API to multipart uploads to Manta.
  *
  * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ * @since 2.5.0
  */
 public class MantaMultipartManager {
     /**
@@ -239,7 +240,7 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final MantaMultipartUpload upload,
+    public MantaMultipartUploadPart uploadPart(final MantaMultipartUpload upload,
                                                 final int partNumber,
                                                 final String contents)
             throws IOException {
@@ -259,14 +260,14 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final UUID id, final int partNumber,
+    public MantaMultipartUploadPart uploadPart(final UUID id, final int partNumber,
                                                 final String contents)
             throws IOException {
 
         final String path = multipartPath(id, partNumber);
 
         final MantaObjectResponse response = mantaClient.put(path, contents);
-        return new MantaMultipartUpload.Part(response);
+        return new MantaMultipartUploadPart(response);
     }
 
     /**
@@ -278,7 +279,7 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final MantaMultipartUpload upload,
+    public MantaMultipartUploadPart uploadPart(final MantaMultipartUpload upload,
                                                 final int partNumber,
                                                 final byte[] bytes)
             throws IOException {
@@ -298,13 +299,13 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final UUID id, final int partNumber,
+    public MantaMultipartUploadPart uploadPart(final UUID id, final int partNumber,
                                                 final byte[] bytes)
             throws IOException {
         final String path = multipartPath(id, partNumber);
 
         final MantaObjectResponse response = mantaClient.put(path, bytes);
-        return new MantaMultipartUpload.Part(response);
+        return new MantaMultipartUploadPart(response);
     }
 
     /**
@@ -316,7 +317,7 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final MantaMultipartUpload upload,
+    public MantaMultipartUploadPart uploadPart(final MantaMultipartUpload upload,
                                                 final int partNumber,
                                                 final File file)
             throws IOException {
@@ -336,13 +337,13 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final UUID id, final int partNumber,
+    public MantaMultipartUploadPart uploadPart(final UUID id, final int partNumber,
                                                 final File file)
             throws IOException {
         final String path = multipartPath(id, partNumber);
 
         final MantaObjectResponse response = mantaClient.put(path, file);
-        return new MantaMultipartUpload.Part(response);
+        return new MantaMultipartUploadPart(response);
     }
 
     /**
@@ -354,7 +355,7 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final MantaMultipartUpload upload,
+    public MantaMultipartUploadPart uploadPart(final MantaMultipartUpload upload,
                                                 final int partNumber,
                                                 final InputStream inputStream)
             throws IOException {
@@ -374,13 +375,13 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part uploadPart(final UUID id, final int partNumber,
+    public MantaMultipartUploadPart uploadPart(final UUID id, final int partNumber,
                                                 final InputStream inputStream)
             throws IOException {
         final String path = multipartPath(id, partNumber);
         final MantaObjectResponse response = mantaClient.put(path, inputStream);
 
-        return new MantaMultipartUpload.Part(response);
+        return new MantaMultipartUploadPart(response);
     }
 
     /**
@@ -391,7 +392,7 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part getPart(final MantaMultipartUpload upload,
+    public MantaMultipartUploadPart getPart(final MantaMultipartUpload upload,
                                              final int partNumber)
             throws IOException {
         if (upload == null) {
@@ -409,12 +410,12 @@ public MantaMultipartUpload initiateUpload(final String path,
      * @return multipart single part object
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public MantaMultipartUpload.Part getPart(final UUID id, final int partNumber)
+    public MantaMultipartUploadPart getPart(final UUID id, final int partNumber)
             throws IOException {
         final String path = multipartPath(id, partNumber);
         final MantaObjectResponse response = mantaClient.head(path);
 
-        return new MantaMultipartUpload.Part(response);
+        return new MantaMultipartUploadPart(response);
     }
 
     /**
@@ -507,7 +508,7 @@ public MantaMultipartStatus getStatus(final UUID id) throws IOException {
      * @return stream of parts identified by integer part number
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public Stream<MantaMultipartUpload.Part> listParts(final MantaMultipartUpload upload)
+    public Stream<MantaMultipartUploadPart> listParts(final MantaMultipartUpload upload)
             throws IOException {
         if (upload == null) {
             throw new IllegalArgumentException("Upload must be present");
@@ -523,13 +524,13 @@ public MantaMultipartStatus getStatus(final UUID id) throws IOException {
      * @return stream of parts identified by integer part number
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public Stream<MantaMultipartUpload.Part> listParts(final UUID id) throws IOException {
+    public Stream<MantaMultipartUploadPart> listParts(final UUID id) throws IOException {
         final String dir = multipartUploadDir(id);
 
         return mantaClient.listObjects(dir)
                 .filter(value -> !Paths.get(value.getPath())
                         .getFileName().toString().equals(METADATA_FILE))
-                .map(MantaMultipartUpload.Part::new);
+                .map(MantaMultipartUploadPart::new);
     }
 
     /**
@@ -556,7 +557,7 @@ public void validateThereAreNoMissingParts(final MantaMultipartUpload upload)
     public void validateThereAreNoMissingParts(final UUID id) throws IOException {
         listParts(id)
             .sorted()
-            .map(MantaMultipartUpload.Part::getPartNumber)
+            .map(MantaMultipartUploadPart::getPartNumber)
             .reduce(1, (memo, value) -> {
                 if (!memo.equals(value)) {
                     MantaClientException e = new MantaClientException(
@@ -628,7 +629,7 @@ public void complete(final UUID id) throws IOException {
         final String path = metadata.getPath();
 
         final StringBuilder jobExecText = new StringBuilder("mget -q ");
-        try (Stream<MantaMultipartUpload.Part> parts = listParts(id).sorted()) {
+        try (Stream<MantaMultipartUploadPart> parts = listParts(id).sorted()) {
             parts.forEach(part ->
                     jobExecText.append(part.getObjectPath())
                             .append(" ")
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUpload.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUpload.java
index 4885c1c77f..50d357fb14 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUpload.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUpload.java
@@ -1,8 +1,5 @@
 package com.joyent.manta.client.multipart;
 
-import com.joyent.manta.client.MantaClient;
-import com.joyent.manta.client.MantaObject;
-import com.joyent.manta.client.MantaUtils;
 import org.apache.commons.lang3.builder.ToStringBuilder;
 
 import java.io.Serializable;
@@ -81,108 +78,4 @@ public UUID getId() {
     public String getPath() {
         return path;
     }
-
-    /**
-     * A single part of a multipart upload.
-     */
-    public static class Part implements Comparable<Part>, Serializable {
-        private static final long serialVersionUID = -738331736064518314L;
-
-        /**
-         * Non-zero positive integer representing the relative position of the
-         * part in relation to the other parts for the multipart upload.
-         */
-        private final int partNumber;
-
-        /**
-         * Remote path on Manta for the part's file.
-         */
-        private final String objectPath;
-
-        /**
-         * Etag value of the part.
-         */
-        private final String etag;
-
-        /**
-         * Content length of the part.
-         */
-        private final Long length;
-
-        /**
-         * Creates a new instance based on explicitly defined parameters.
-         *
-         * @param partNumber Non-zero positive integer representing the relative position of the part
-         * @param objectPath Remote path on Manta for the part's file
-         * @param etag Etag value of the part
-         * @param length size in bytes of the part
-         */
-        public Part(final int partNumber, final String objectPath,
-                    final String etag, final Long length) {
-            this.partNumber = partNumber;
-            this.objectPath = objectPath;
-            this.etag = etag;
-            this.length = length;
-        }
-
-        /**
-         * Creates a new instance based on a response from {@link MantaClient}.
-         *
-         * @param object response object from returned from {@link MantaClient}
-         */
-        Part(final MantaObject object) {
-            final String filename = MantaUtils.lastItemInPath(object.getPath());
-            this.objectPath = object.getPath();
-            this.partNumber = Integer.parseInt(filename);
-            this.etag = object.getEtag();
-            length = object.getContentLength();
-        }
-
-        public int getPartNumber() {
-            return partNumber;
-        }
-
-        public String getEtag() {
-            return etag;
-        }
-
-        protected String getObjectPath() {
-            return objectPath;
-        }
-
-        @Override
-        public int compareTo(final Part that) {
-            return Integer.compare(this.getPartNumber(), that.getPartNumber());
-        }
-
-        @Override
-        public boolean equals(final Object that) {
-            if (this == that) {
-                return true;
-            }
-
-            if (that == null || getClass() != that.getClass()) {
-                return false;
-            }
-
-            final Part part = (Part) that;
-            return partNumber == part.partNumber
-                    && Objects.equals(objectPath, part.objectPath)
-                    && Objects.equals(etag, part.etag);
-        }
-
-        @Override
-        public int hashCode() {
-            return Objects.hash(partNumber, objectPath, etag);
-        }
-
-        @Override
-        public String toString() {
-            return new ToStringBuilder(this)
-                    .append("partNumber", partNumber)
-                    .append("objectPath", objectPath)
-                    .append("etag", etag)
-                    .toString();
-        }
-    }
 }
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java
new file mode 100755
index 0000000000..1b0252faf4
--- /dev/null
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/MantaMultipartUploadPart.java
@@ -0,0 +1,118 @@
+package com.joyent.manta.client.multipart;
+
+import com.joyent.manta.client.MantaClient;
+import com.joyent.manta.client.MantaObject;
+import com.joyent.manta.client.MantaUtils;
+import org.apache.commons.lang3.builder.ToStringBuilder;
+
+import java.io.Serializable;
+import java.util.Objects;
+
+
+/**
+ * A single part of a multipart upload.
+ *
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ * @since 2.5.0
+ */
+public class MantaMultipartUploadPart
+        implements Comparable<MantaMultipartUploadPart>, Serializable {
+    private static final long serialVersionUID = -738331736064518314L;
+
+    /**
+     * Non-zero positive integer representing the relative position of the
+     * part in relation to the other parts for the multipart upload.
+     */
+    private final int partNumber;
+
+    /**
+     * Remote path on Manta for the part's file.
+     */
+    private final String objectPath;
+
+    /**
+     * Etag value of the part.
+     */
+    private final String etag;
+
+    /**
+     * Content length of the part.
+     */
+    private final Long length;
+
+    /**
+     * Creates a new instance based on explicitly defined parameters.
+     *
+     * @param partNumber Non-zero positive integer representing the relative position of the part
+     * @param objectPath Remote path on Manta for the part's file
+     * @param etag Etag value of the part
+     * @param length size in bytes of the part
+     */
+    public MantaMultipartUploadPart(final int partNumber, final String objectPath,
+                final String etag, final Long length) {
+        this.partNumber = partNumber;
+        this.objectPath = objectPath;
+        this.etag = etag;
+        this.length = length;
+    }
+
+    /**
+     * Creates a new instance based on a response from {@link MantaClient}.
+     *
+     * @param object response object from returned from {@link MantaClient}
+     */
+    public MantaMultipartUploadPart(final MantaObject object) {
+        final String filename = MantaUtils.lastItemInPath(object.getPath());
+        this.objectPath = object.getPath();
+        this.partNumber = Integer.parseInt(filename);
+        this.etag = object.getEtag();
+        length = object.getContentLength();
+    }
+
+    public int getPartNumber() {
+        return partNumber;
+    }
+
+    public String getEtag() {
+        return etag;
+    }
+
+    protected String getObjectPath() {
+        return objectPath;
+    }
+
+    @Override
+    public int compareTo(final MantaMultipartUploadPart that) {
+        return Integer.compare(this.getPartNumber(), that.getPartNumber());
+    }
+
+    @Override
+    public boolean equals(final Object that) {
+        if (this == that) {
+            return true;
+        }
+
+        if (that == null || getClass() != that.getClass()) {
+            return false;
+        }
+
+        final MantaMultipartUploadPart part = (MantaMultipartUploadPart) that;
+        return partNumber == part.partNumber
+                && Objects.equals(objectPath, part.objectPath)
+                && Objects.equals(etag, part.etag);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(partNumber, objectPath, etag);
+    }
+
+    @Override
+    public String toString() {
+        return new ToStringBuilder(this)
+                .append("partNumber", partNumber)
+                .append("objectPath", objectPath)
+                .append("etag", etag)
+                .toString();
+    }
+}
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/multipart/package-info.java b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/package-info.java
new file mode 100755
index 0000000000..b8cbcdb1c8
--- /dev/null
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/multipart/package-info.java
@@ -0,0 +1,8 @@
+/**
+ * Package containing all of the classes used as part of the Manta Multipart
+ * upload API.
+ *
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ * @since 2.5.0
+ */
+package com.joyent.manta.client.multipart;
diff --git a/java-manta-client/src/test/java/com/joyent/manta/client/multipart/MantaMultipartUploadManagerTest.java b/java-manta-client/src/test/java/com/joyent/manta/client/multipart/MantaMultipartUploadManagerTest.java
index 850273c60f..97ac88ed3c 100755
--- a/java-manta-client/src/test/java/com/joyent/manta/client/multipart/MantaMultipartUploadManagerTest.java
+++ b/java-manta-client/src/test/java/com/joyent/manta/client/multipart/MantaMultipartUploadManagerTest.java
@@ -1,8 +1,6 @@
 package com.joyent.manta.client.multipart;
 
 import com.joyent.manta.client.MantaClient;
-import com.joyent.manta.client.multipart.MantaMultipartManager;
-import com.joyent.manta.client.multipart.MantaMultipartUpload;
 import com.joyent.manta.config.ChainedConfigContext;
 import com.joyent.manta.config.ConfigContext;
 import com.joyent.manta.config.StandardConfigContext;
@@ -52,11 +50,11 @@ public void canBuildMultiPartUploadPath() {
     public void noErrorWhenAllPartsArePresentOrdered() throws IOException {
         final UUID id = new UUID(0L, 24L);
 
-        List<MantaMultipartUpload.Part> partsList = new LinkedList<>();
+        List<MantaMultipartUploadPart> partsList = new LinkedList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            MantaMultipartUpload.Part part = new MantaMultipartUpload.Part(i, null, null, null);
+            MantaMultipartUploadPart part = new MantaMultipartUploadPart(i, null, null, null);
             partsList.add(part);
         }
 
@@ -69,11 +67,11 @@ public void noErrorWhenAllPartsArePresentOrdered() throws IOException {
     public void noErrorWhenAllPartsArePresentUnordered() throws IOException {
         final UUID id = new UUID(0L, 36L);
 
-        List<MantaMultipartUpload.Part> partsList = new LinkedList<>();
+        List<MantaMultipartUploadPart> partsList = new LinkedList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            MantaMultipartUpload.Part part = new MantaMultipartUpload.Part(i, null, null, null);
+            MantaMultipartUploadPart part = new MantaMultipartUploadPart(i, null, null, null);
             partsList.add(part);
         }
 
@@ -88,11 +86,11 @@ public void noErrorWhenAllPartsArePresentUnordered() throws IOException {
     public void errorWhenMissingPart() throws IOException {
         final UUID id = new UUID(0L, 48L);
 
-        ArrayList<MantaMultipartUpload.Part> partsList = new ArrayList<>();
+        ArrayList<MantaMultipartUploadPart> partsList = new ArrayList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            MantaMultipartUpload.Part part = new MantaMultipartUpload.Part(i, null, null, null);
+            MantaMultipartUploadPart part = new MantaMultipartUploadPart(i, null, null, null);
             partsList.add(part);
         }
 
