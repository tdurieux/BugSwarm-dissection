diff --git a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployEarlyTerminationException.java b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployEarlyTerminationException.java
index 427a36661f..3703658a7b 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployEarlyTerminationException.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployEarlyTerminationException.java
@@ -25,8 +25,8 @@
  */
 public class OnDeployEarlyTerminationException extends RuntimeException {
     public OnDeployEarlyTerminationException(Throwable cause) {
-        super("On-deploy scripts terminated due to a fatal error. Scripts stopped running at the first failing " +
-                "script to ensure proper script order. One or more on-deploy scripts have not been run, " +
-                "and will not be run again until next deployment or service activation.", cause);
+        super("On-deploy scripts terminated due to a fatal error. Scripts stopped running at the first failing "
+                + "script to ensure proper script order. One or more on-deploy scripts have not been run, "
+                + "and will not be run again until next deployment or service activation.", cause);
     }
 }
diff --git a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java
index ceb44402a8..ca72536463 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployExecutorImpl.java
@@ -21,6 +21,7 @@
 
 import com.adobe.acs.commons.ondeploy.OnDeployExecutor;
 import com.adobe.acs.commons.ondeploy.OnDeployScript;
+import com.day.cq.commons.jcr.JcrConstants;
 import com.day.cq.commons.jcr.JcrUtil;
 import com.day.cq.search.QueryBuilder;
 import org.apache.commons.lang3.StringUtils;
@@ -81,6 +82,16 @@
     )
     private static final String PROP_SCRIPTS = "scripts";
 
+    private static final String SCRIPT_DATE_END = "endDate";
+    private static final String SCRIPT_DATE_START = "startDate";
+    private static final String SCRIPT_STATUS = "status";
+    private static final String SCRIPT_STATUS_JCR_FOLDER = "/var/acs-commons/on-deploy-scripts-status";
+    private static final String SCRIPT_STATUS_FAIL = "fail";
+    private static final String SCRIPT_STATUS_RUNNING = "running";
+    private static final String SCRIPT_STATUS_SUCCESS = "success";
+
+    private static final String SERVICE_NAME = "on-deploy-scripts";
+
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
     @Reference
@@ -108,14 +119,7 @@ protected final void activate(final Map<String, String> properties) {
         ResourceResolver resourceResolver = null;
         Session session = null;
         try {
-            try {
-                Map<String, Object> userParams = new HashMap<>();
-                userParams.put(ResourceResolverFactory.SUBSERVICE, "onDeployScripts");
-                resourceResolver = resourceResolverFactory.getServiceResourceResolver(userParams);
-            } catch (LoginException le2) {
-                logger.error("On-deploy scripts cannot be run because the system cannot log in with the appropriate service user");
-                throw new OnDeployEarlyTerminationException(le2);
-            }
+            resourceResolver = logIn();
             session = resourceResolver.adaptTo(Session.class);
             runScripts(resourceResolver, session, scripts);
         } finally {
@@ -172,7 +176,7 @@ private void configure(final Map<String, String> properties) {
 
     protected Node getOrCreateStatusTrackingNode(Session session, String statusNodePath) {
         try {
-            return JcrUtil.createPath(statusNodePath, "nt:unstructured", "nt:unstructured", session, false);
+            return JcrUtil.createPath(statusNodePath, JcrConstants.NT_UNSTRUCTURED, JcrConstants.NT_UNSTRUCTURED, session, false);
         } catch (RepositoryException re) {
             logger.error("On-deploy script cannot be run because the system could not find or create the script status node: {}", statusNodePath);
             throw new OnDeployEarlyTerminationException(re);
@@ -182,30 +186,41 @@ protected Node getOrCreateStatusTrackingNode(Session session, String statusNodeP
     protected String getScriptStatus(ResourceResolver resourceResolver, Node statusNode, String statusNodePath) {
         try {
             Resource resource = resourceResolver.getResource(statusNode.getPath());
-            return resource.getValueMap().get("status", (String) null);
+            return resource.getValueMap().get(SCRIPT_STATUS, (String) null);
         } catch (RepositoryException re) {
             logger.error("On-deploy script cannot be run because the system read the script status node: {}", statusNodePath);
             throw new OnDeployEarlyTerminationException(re);
         }
     }
 
+    protected ResourceResolver logIn() {
+        try {
+            Map<String, Object> userParams = new HashMap<>();
+            userParams.put(ResourceResolverFactory.SUBSERVICE, SERVICE_NAME);
+            return resourceResolverFactory.getServiceResourceResolver(userParams);
+        } catch (LoginException le2) {
+            logger.error("On-deploy scripts cannot be run because the system cannot log in with the appropriate service user");
+            throw new OnDeployEarlyTerminationException(le2);
+        }
+    }
+
     protected void runScript(ResourceResolver resourceResolver, Session session, OnDeployScript script) {
-        String statusNodePath = "/var/acs-commons/on-deploy-scripts-status/" + script.getClass().getName();
+        String statusNodePath = SCRIPT_STATUS_JCR_FOLDER + "/" + script.getClass().getName();
         Node statusNode = getOrCreateStatusTrackingNode(session, statusNodePath);
         String status = getScriptStatus(resourceResolver, statusNode, statusNodePath);
-        if (status == null || status.equals("fail")) {
+        if (status == null || status.equals(SCRIPT_STATUS_FAIL)) {
             trackScriptStart(session, statusNode, statusNodePath);
             try {
                 script.execute(resourceResolver, queryBuilder);
                 logger.info("On-deploy script completed successfully: {}", statusNodePath);
-                trackScriptEnd(session, statusNode, statusNodePath, "success");
+                trackScriptEnd(session, statusNode, statusNodePath, SCRIPT_STATUS_SUCCESS);
             } catch (Exception e) {
                 String errMsg = "On-deploy script failed: " + script.getClass().getName();
                 logger.error(errMsg, e);
-                trackScriptEnd(session, statusNode, statusNodePath, "fail");
+                trackScriptEnd(session, statusNode, statusNodePath, SCRIPT_STATUS_FAIL);
                 throw new OnDeployEarlyTerminationException(new RuntimeException(errMsg));
             }
-        } else if (!status.equals("success")) {
+        } else if (!status.equals(SCRIPT_STATUS_SUCCESS)) {
             String errMsg = "On-deploy script is already running or in an otherwise unknown state: " + script.getClass().getName() + " - status: " + status;
             logger.error(errMsg);
             throw new OnDeployEarlyTerminationException(new RuntimeException(errMsg));
@@ -222,8 +237,8 @@ protected void runScripts(ResourceResolver resourceResolver, Session session, Li
 
     protected void trackScriptEnd(Session session, Node statusNode, String statusNodePath, String status) {
         try {
-            statusNode.setProperty("status", status);
-            statusNode.setProperty("endDate", Calendar.getInstance());
+            statusNode.setProperty(SCRIPT_STATUS, status);
+            statusNode.setProperty(SCRIPT_DATE_END, Calendar.getInstance());
             session.save();
         } catch (RepositoryException e) {
             logger.error("On-deploy script status node could not be updated: {} - status: {}", statusNodePath, status);
@@ -234,9 +249,9 @@ protected void trackScriptEnd(Session session, Node statusNode, String statusNod
     protected void trackScriptStart(Session session, Node statusNode, String statusNodePath) {
         logger.info("Starting on-deploy script: {}", statusNodePath);
         try {
-            statusNode.setProperty("status", "running");
-            statusNode.setProperty("startDate", Calendar.getInstance());
-            statusNode.setProperty("endDate", (Calendar) null);
+            statusNode.setProperty(SCRIPT_STATUS, SCRIPT_STATUS_RUNNING);
+            statusNode.setProperty(SCRIPT_DATE_START, Calendar.getInstance());
+            statusNode.setProperty(SCRIPT_DATE_END, (Calendar) null);
             session.save();
         } catch (RepositoryException e) {
             logger.error("On-deploy script cannot be run because the system could not write to the script status node: {}", statusNodePath);
diff --git a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBase.java b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBase.java
index e7c111f91f..f19fa72be1 100755
--- a/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBase.java
+++ b/bundle/src/main/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBase.java
@@ -20,6 +20,7 @@
 package com.adobe.acs.commons.ondeploy.impl;
 
 import com.adobe.acs.commons.ondeploy.OnDeployScript;
+import com.day.cq.commons.jcr.JcrConstants;
 import com.day.cq.commons.jcr.JcrUtil;
 import com.day.cq.search.PredicateGroup;
 import com.day.cq.search.Query;
@@ -46,6 +47,8 @@
  * Base on-deploy script implementation.
  */
 public abstract class OnDeployScriptBase implements OnDeployScript {
+    private static final String SLING_RESOURCE_TYPE = "sling:resourceType";
+
     protected Logger logger = LoggerFactory.getLogger(this.getClass());
 
     protected PageManager pageManager;
@@ -87,7 +90,7 @@ public final void execute(ResourceResolver resourceResolver, QueryBuilder queryB
      * @return The fetched or created node.
      */
     protected Node getOrCreateNode(String absolutePath) throws RepositoryException {
-        return getOrCreateNode(absolutePath, "nt:unstructured", "nt:unstructured");
+        return getOrCreateNode(absolutePath, JcrConstants.NT_UNSTRUCTURED, JcrConstants.NT_UNSTRUCTURED);
     }
 
     /**
@@ -102,7 +105,7 @@ protected Node getOrCreateNode(String absolutePath) throws RepositoryException {
      * @return The fetched or created node.
      */
     protected Node getOrCreateNode(String absolutePath, String nodeType) throws RepositoryException {
-        return getOrCreateNode(absolutePath, "nt:unstructured", nodeType);
+        return getOrCreateNode(absolutePath, JcrConstants.NT_UNSTRUCTURED, nodeType);
     }
 
     /**
@@ -183,7 +186,7 @@ protected void searchAndUpdateResourceType(String oldResourceType, String newRes
         Map<String, String> map = new HashMap<>();
         map.put("p.limit", "-1");
         map.put("path", "/content");
-        map.put("1_property", "sling:resourceType");
+        map.put("1_property", SLING_RESOURCE_TYPE);
         map.put("1_property.value", oldResourceType);
 
         logger.info("Finding all nodes under /content with resource type: {}", oldResourceType);
@@ -208,10 +211,10 @@ protected void searchAndUpdateResourceType(String oldResourceType, String newRes
      * @param resourceType The new sling:resourceType to be used.
      */
     protected void updateResourceType(Node node, String resourceType) throws RepositoryException {
-        String currentResourceType = node.getProperty("sling:resourceType").getString();
+        String currentResourceType = node.getProperty(SLING_RESOURCE_TYPE).getString();
         if (!resourceType.equals(currentResourceType)) {
             logger.info("Updating node at {} to resource type: {}", node.getPath(), resourceType);
-            node.setProperty("sling:resourceType", resourceType);
+            node.setProperty(SLING_RESOURCE_TYPE, resourceType);
         } else {
             logger.info("Node at {} is already resource type: {}", node.getPath(), resourceType);
         }
diff --git a/bundle/src/test/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBaseTest.java b/bundle/src/test/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBaseTest.java
index 43156a8e30..2e3c51dff3 100755
--- a/bundle/src/test/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBaseTest.java
+++ b/bundle/src/test/java/com/adobe/acs/commons/ondeploy/impl/OnDeployScriptBaseTest.java
@@ -222,7 +222,7 @@ public void testUpdateResourceTypeWhenAlreadyUpdated() throws RepositoryExceptio
 
         onDeployScript.updateResourceType(resourceToUpdate.adaptTo(Node.class), "test/component/comp2");
 
-        assertLogText("Node at /content/resource-type-update2 is already resource type 'test/component/comp2'");
+        assertLogText("Node at /content/resource-type-update2 is already resource type: test/component/comp2");
     }
 
     private class OnDeployScriptBaseExt extends OnDeployScriptBase {
diff --git a/content/src/main/content/jcr_root/apps/acs-commons/config/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended-acs-commons.xml b/content/src/main/content/jcr_root/apps/acs-commons/config/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended-acs-commons.xml
index 388b3ce371..4cf1baf21a 100755
--- a/content/src/main/content/jcr_root/apps/acs-commons/config/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended-acs-commons.xml
+++ b/content/src/main/content/jcr_root/apps/acs-commons/config/org.apache.sling.serviceusermapping.impl.ServiceUserMapperImpl.amended-acs-commons.xml
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:jcr="http://www.jcp.org/jcr/1.0"
     jcr:primaryType="sling:OsgiConfig"
-    user.mapping="[com.adobe.acs.acs-aem-commons-bundle:ensure-oak-index=acs-commons-ensure-oak-index-service,com.adobe.acs.acs-aem-commons-bundle:email-service=acs-commons-email-service,com.adobe.acs.acs-aem-commons-bundle:review-task-asset-mover=acs-commons-review-task-asset-mover-service,com.adobe.acs.acs-aem-commons-bundle:error-page-handler=acs-commons-error-page-handler-service,com.adobe.acs.acs-aem-commons-bundle:form-helper=acs-commons-form-helper-service,com.adobe.acs.acs-aem-commons-bundle:dispatcher-flush=acs-commons-dispatcher-flush-service,com.adobe.acs.acs-aem-commons-bundle:package-replication-status-event-listener=acs-commons-package-replication-status-event-service,com.adobe.acs.acs-aem-commons-bundle:component-error-handler=acs-commons-component-error-handler-service,com.adobe.acs.acs-aem-commons-bundle:system-notifications=acs-commons-system-notifications-service,com.adobe.acs.acs-aem-commons-bundle-twitter:twitter-updater=acs-commons-twitter-updater-service,com.adobe.acs.acs-aem-commons-bundle:workflow-remover=acs-commons-workflow-remover-service,com.adobe.acs.acs-aem-commons-bundle:bulk-workflow=acs-commons-bulk-workflow-service,com.adobe.acs.acs-aem-commons-bundle:wcm-inbox-cleanup=acs-commons-wcm-inbox-cleanup-service,com.adobe.acs.acs-aem-commons-bundle:bulk-workflow-runner=workflow-process-service,,com.adobe.acs.acs-aem-commons-bundle:ensure-service-user=acs-commons-ensure-service-user-service,com.adobe.acs.acs-aem-commons-bundle:shared-component-props=acs-commons-shared-component-props-service,com.adobe.acs.acs-aem-commons-bundle:manage-controlled-processes=acs-commons-manage-controlled-processes-service,com.adobe.acs.acs-aem-commons-bundle:automatic-package-replicator=acs-commons-automatic-package-replicator-service,com.adobe.acs.acs-aem-commons-bundle:onDeployScripts=acs-commons-on-deploy-scripts-service]"/>
\ No newline at end of file
+    user.mapping="[com.adobe.acs.acs-aem-commons-bundle:ensure-oak-index=acs-commons-ensure-oak-index-service,com.adobe.acs.acs-aem-commons-bundle:email-service=acs-commons-email-service,com.adobe.acs.acs-aem-commons-bundle:review-task-asset-mover=acs-commons-review-task-asset-mover-service,com.adobe.acs.acs-aem-commons-bundle:error-page-handler=acs-commons-error-page-handler-service,com.adobe.acs.acs-aem-commons-bundle:form-helper=acs-commons-form-helper-service,com.adobe.acs.acs-aem-commons-bundle:dispatcher-flush=acs-commons-dispatcher-flush-service,com.adobe.acs.acs-aem-commons-bundle:package-replication-status-event-listener=acs-commons-package-replication-status-event-service,com.adobe.acs.acs-aem-commons-bundle:component-error-handler=acs-commons-component-error-handler-service,com.adobe.acs.acs-aem-commons-bundle:system-notifications=acs-commons-system-notifications-service,com.adobe.acs.acs-aem-commons-bundle-twitter:twitter-updater=acs-commons-twitter-updater-service,com.adobe.acs.acs-aem-commons-bundle:workflow-remover=acs-commons-workflow-remover-service,com.adobe.acs.acs-aem-commons-bundle:bulk-workflow=acs-commons-bulk-workflow-service,com.adobe.acs.acs-aem-commons-bundle:wcm-inbox-cleanup=acs-commons-wcm-inbox-cleanup-service,com.adobe.acs.acs-aem-commons-bundle:bulk-workflow-runner=workflow-process-service,,com.adobe.acs.acs-aem-commons-bundle:ensure-service-user=acs-commons-ensure-service-user-service,com.adobe.acs.acs-aem-commons-bundle:shared-component-props=acs-commons-shared-component-props-service,com.adobe.acs.acs-aem-commons-bundle:manage-controlled-processes=acs-commons-manage-controlled-processes-service,com.adobe.acs.acs-aem-commons-bundle:automatic-package-replicator=acs-commons-automatic-package-replicator-service,com.adobe.acs.acs-aem-commons-bundle:on-deploy-scripts=acs-commons-on-deploy-scripts-service]"/>
\ No newline at end of file
