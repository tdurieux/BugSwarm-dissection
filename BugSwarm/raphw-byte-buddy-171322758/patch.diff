diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FixedValue.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FixedValue.java
index 38154c92c0..1c635c7117 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FixedValue.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FixedValue.java
@@ -13,7 +13,6 @@
 import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;
 import net.bytebuddy.utility.JavaConstant;
 import net.bytebuddy.utility.JavaType;
-import net.bytebuddy.utility.RandomString;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 
@@ -600,7 +599,7 @@ public String toString() {
          * @param typing     Indicates if dynamic type castings should be attempted for incompatible assignments.
          */
         protected ForStaticField(Object fixedValue, Assigner assigner, Assigner.Typing typing) {
-            this(String.format("%s$%s", PREFIX, RandomString.make()), fixedValue, assigner, typing);
+            this(String.format("%s$%d", PREFIX, Math.abs(fixedValue.hashCode() % Integer.MAX_VALUE)), fixedValue, assigner, typing);
         }
 
         /**
diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Forwarding.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Forwarding.java
index 6489c37333..f5e725205a 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Forwarding.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Forwarding.java
@@ -13,7 +13,6 @@
 import net.bytebuddy.implementation.bytecode.member.MethodInvocation;
 import net.bytebuddy.implementation.bytecode.member.MethodReturn;
 import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;
-import net.bytebuddy.utility.RandomString;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 
@@ -89,7 +88,7 @@ protected Forwarding(PreparationHandler preparationHandler, TerminationHandler t
      * @return A corresponding implementation.
      */
     public static Implementation.Composable to(Object delegate, Type type) {
-        return to(delegate, String.format("%s$%s", FIELD_PREFIX, RandomString.make()), type);
+        return to(delegate, String.format("%s$%d", FIELD_PREFIX, Math.abs(delegate.hashCode() % Integer.MAX_VALUE)), type);
     }
 
     /**
diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Implementation.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Implementation.java
index 3638847fb0..79b4dee7c6 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Implementation.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/Implementation.java
@@ -1033,7 +1033,7 @@ public int getModifiers() {
 
                 @Override
                 public String getName() {
-                    return String.format("%s$%s$%s", FIELD_CACHE_PREFIX, suffix, RandomString.make());
+                    return String.format("%s$%s$%d", FIELD_CACHE_PREFIX, suffix, Math.abs(valueHashCode % Integer.MAX_VALUE));
                 }
             }
 
diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/InvocationHandlerAdapter.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/InvocationHandlerAdapter.java
index ec9298c9d5..0c6cb13e8f 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/InvocationHandlerAdapter.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/InvocationHandlerAdapter.java
@@ -15,7 +15,6 @@
 import net.bytebuddy.implementation.bytecode.member.MethodInvocation;
 import net.bytebuddy.implementation.bytecode.member.MethodReturn;
 import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;
-import net.bytebuddy.utility.RandomString;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 
@@ -86,7 +85,7 @@ protected InvocationHandlerAdapter(String fieldName, boolean cacheMethods, Assig
      * @return An implementation that delegates all method interceptions to the given invocation handler.
      */
     public static InvocationHandlerAdapter of(InvocationHandler invocationHandler) {
-        return of(invocationHandler, String.format("%s$%s", ForInstance.PREFIX, RandomString.make()));
+        return of(invocationHandler, String.format("%s$%d", ForInstance.PREFIX, Math.abs(invocationHandler.hashCode() % Integer.MAX_VALUE)));
     }
 
     /**
diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
index 029160743f..cfb353150e 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/MethodDelegation.java
@@ -20,7 +20,6 @@
 import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;
 import net.bytebuddy.matcher.ElementMatcher;
 import net.bytebuddy.utility.CompoundList;
-import net.bytebuddy.utility.RandomString;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 
@@ -369,7 +368,7 @@ public static MethodDelegation to(Object delegate, Type type) {
     public static MethodDelegation to(Object delegate, Type type, MethodGraph.Compiler methodGraphCompiler) {
         return to(delegate,
                 type,
-                String.format("%s$%s", ImplementationDelegate.FIELD_NAME_PREFIX, RandomString.make()),
+                String.format("%s$%d", ImplementationDelegate.FIELD_NAME_PREFIX, Math.abs(delegate.hashCode() % Integer.MAX_VALUE)),
                 methodGraphCompiler);
     }
 
