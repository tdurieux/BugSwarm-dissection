diff --git a/src/org/traccar/protocol/Gl200BinaryProtocolDecoder.java b/src/org/traccar/protocol/Gl200BinaryProtocolDecoder.java
new file mode 100755
index 0000000000..cb04175289
--- /dev/null
+++ b/src/org/traccar/protocol/Gl200BinaryProtocolDecoder.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright 2017 Anton Tananaev (anton@traccar.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.traccar.protocol;
+
+import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+import org.traccar.DeviceSession;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
+import org.traccar.model.CellTower;
+import org.traccar.model.Network;
+import org.traccar.model.Position;
+
+import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
+
+public class Gl200BinaryProtocolDecoder extends BaseProtocolDecoder {
+
+    public Gl200BinaryProtocolDecoder(Gl200Protocol protocol) {
+        super(protocol);
+    }
+
+    @Override
+    protected Object decode(
+            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+
+        ChannelBuffer buf = (ChannelBuffer) msg;
+
+        String header = buf.readBytes(4).toString(StandardCharsets.US_ASCII);
+
+        if (header.equals("+EVT")) {
+
+            Position position = new Position();
+            position.setProtocol(getProtocolName());
+
+            buf.readUnsignedByte(); // message type
+
+            buf.readUnsignedInt(); // mask
+
+            buf.readUnsignedShort(); // length
+            buf.readUnsignedByte(); // device type
+            buf.readUnsignedShort(); // protocol version
+
+            position.set(Position.KEY_VERSION_FW, String.valueOf(buf.readUnsignedShort()));
+
+            DeviceSession deviceSession = getDeviceSession(
+                    channel, remoteAddress, String.format("%015d", buf.readLong()));
+            if (deviceSession == null) {
+                return null;
+            }
+            position.setDeviceId(deviceSession.getDeviceId());
+
+            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
+            position.set(Position.KEY_POWER, buf.readUnsignedShort());
+
+            buf.readUnsignedByte(); // motion status
+
+            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
+            position.set(Position.KEY_INDEX, buf.readUnsignedByte());
+
+            int hdop = buf.readUnsignedByte();
+            position.setValid(hdop > 0);
+            position.set(Position.KEY_HDOP, hdop);
+
+            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedMedium()));
+            position.setCourse(buf.readUnsignedShort());
+            position.setAltitude(buf.readShort());
+            position.setLongitude(buf.readInt() * 0.000001);
+            position.setLatitude(buf.readInt() * 0.000001);
+
+            DateBuilder dateBuilder = new DateBuilder()
+                    .setDate(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedByte())
+                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+            position.setTime(dateBuilder.getDate());
+
+            position.setNetwork(new Network(CellTower.from(
+                    buf.readUnsignedShort(), buf.readUnsignedShort(),
+                    buf.readUnsignedShort(), buf.readUnsignedShort())));
+
+            buf.readUnsignedByte(); // reserved
+
+            return position;
+
+        }
+
+        return null;
+    }
+
+}
diff --git a/src/org/traccar/protocol/Gl200Protocol.java b/src/org/traccar/protocol/Gl200Protocol.java
index dbcbf61c07..799d7fe36d 100755
--- a/src/org/traccar/protocol/Gl200Protocol.java
+++ b/src/org/traccar/protocol/Gl200Protocol.java
@@ -18,7 +18,6 @@
 import org.jboss.netty.bootstrap.ConnectionlessBootstrap;
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;
@@ -46,7 +45,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Gl200FrameDecoder());
                 pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectEncoder", new Gl200ProtocolEncoder());
-                pipeline.addLast("objectDecoder", new Gl200TextProtocolDecoder(Gl200Protocol.this));
+                pipeline.addLast("objectDecoder", new Gl200ProtocolDecoder(Gl200Protocol.this));
             }
         });
         serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
@@ -54,7 +53,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectEncoder", new Gl200ProtocolEncoder());
-                pipeline.addLast("objectDecoder", new Gl200TextProtocolDecoder(Gl200Protocol.this));
+                pipeline.addLast("objectDecoder", new Gl200ProtocolDecoder(Gl200Protocol.this));
             }
         });
     }
diff --git a/src/org/traccar/protocol/Gl200ProtocolDecoder.java b/src/org/traccar/protocol/Gl200ProtocolDecoder.java
new file mode 100755
index 0000000000..0de7bb9267
--- /dev/null
+++ b/src/org/traccar/protocol/Gl200ProtocolDecoder.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright 2017 Anton Tananaev (anton@traccar.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.traccar.protocol;
+
+import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.channel.Channel;
+import org.traccar.BaseProtocolDecoder;
+
+import java.net.SocketAddress;
+
+public class Gl200ProtocolDecoder extends BaseProtocolDecoder {
+
+    private final Gl200TextProtocolDecoder textProtocolDecoder;
+    private final Gl200BinaryProtocolDecoder binaryProtocolDecoder;
+
+    public Gl200ProtocolDecoder(Gl200Protocol protocol) {
+        super(protocol);
+        textProtocolDecoder = new Gl200TextProtocolDecoder(protocol);
+        binaryProtocolDecoder = new Gl200BinaryProtocolDecoder(protocol);
+    }
+
+    @Override
+    protected Object decode(
+            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+
+        ChannelBuffer buf = (ChannelBuffer) msg;
+
+        if (Gl200FrameDecoder.isBinary(buf)) {
+            return binaryProtocolDecoder.decode(channel, remoteAddress, msg);
+        } else {
+            return textProtocolDecoder.decode(channel, remoteAddress, msg);
+        }
+    }
+
+}
diff --git a/test/org/traccar/protocol/Gl200BinaryProtocolDecoderTest.java b/test/org/traccar/protocol/Gl200BinaryProtocolDecoderTest.java
new file mode 100755
index 0000000000..42ccd4690a
--- /dev/null
+++ b/test/org/traccar/protocol/Gl200BinaryProtocolDecoderTest.java
@@ -0,0 +1,21 @@
+package org.traccar.protocol;
+
+import org.junit.Test;
+import org.traccar.ProtocolTest;
+
+public class Gl200BinaryProtocolDecoderTest extends ProtocolTest {
+
+    @Test
+    public void testDecode() throws Exception {
+
+        Gl200BinaryProtocolDecoder decoder = new Gl200BinaryProtocolDecoder(new Gl200Protocol());
+
+        verifyPosition(decoder, binary(
+                "2b4556540c00fc1fbf005c4501010108563254030003430564312a41090100000000003f007dff75a11a025c6a7807e1070a14041202680003189c1ac500000000000000000000000000000000000007e1070b041134054e5c6e0d0a"));
+
+        verifyNull(decoder, binary(
+                "2b41434b017f244501010108676231303000000000ffff07e1070b03112d054dfe030d0a"));
+
+    }
+
+}
