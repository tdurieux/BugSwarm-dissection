diff --git a/src/main/java/org/kairosdb/core/CoreModule.java b/src/main/java/org/kairosdb/core/CoreModule.java
index 359cd95925..5c8c30dc5a 100755
--- a/src/main/java/org/kairosdb/core/CoreModule.java
+++ b/src/main/java/org/kairosdb/core/CoreModule.java
@@ -33,6 +33,8 @@
 import org.kairosdb.core.datastore.QueryPluginFactory;
 import org.kairosdb.core.datastore.QueryQueuingManager;
 import org.kairosdb.core.groupby.*;
+import org.kairosdb.core.http.rest.GuiceQueryPreProcessor;
+import org.kairosdb.core.http.rest.QueryPreProcessorContainer;
 import org.kairosdb.core.http.rest.json.QueryParser;
 import org.kairosdb.core.jobs.CacheFileCleaner;
 import org.kairosdb.core.queue.DataPointEventSerializer;
@@ -188,6 +190,8 @@ public void afterInjection(I i)
 
 		String hostIp = m_props.getProperty("kairosdb.host_ip");
 		bindConstant().annotatedWith(Names.named("HOST_IP")).to(hostIp != null ? hostIp: InetAddresses.toAddrString(Util.findPublicIp()));
+
+		bind(QueryPreProcessorContainer.class).to(GuiceQueryPreProcessor.class).in(Singleton.class);
 	}
 
 	@Provides
diff --git a/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java b/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
index 0ea205c61e..7ce9e0c67c 100755
--- a/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
+++ b/src/main/java/org/kairosdb/core/aggregator/AggregatorFactory.java
@@ -16,6 +16,8 @@
 
 package org.kairosdb.core.aggregator;
 
+import org.kairosdb.plugin.Aggregator;
+
 public interface AggregatorFactory
 {
 	public Aggregator createAggregator(String name);
diff --git a/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
index 400714d5e6..1690b22947 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DiffAggregator.java
@@ -5,6 +5,7 @@
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
+import org.kairosdb.plugin.Aggregator;
 
 /**
  Created by bhawkins on 12/16/14.
diff --git a/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
index 6eb7ae9471..3bbf9cf5ee 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DivideAggregator.java
@@ -24,6 +24,7 @@
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.groupby.GroupByResult;
 import org.kairosdb.core.http.rest.validation.NonZero;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.List;
 import java.util.Set;
diff --git a/src/main/java/org/kairosdb/core/aggregator/DropAggregator.java b/src/main/java/org/kairosdb/core/aggregator/DropAggregator.java
index a72633985f..6811e0d9c7 100755
--- a/src/main/java/org/kairosdb/core/aggregator/DropAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/DropAggregator.java
@@ -1,6 +1,7 @@
 package org.kairosdb.core.aggregator;
 
 import org.kairosdb.core.datastore.DataPointGroup;
+import org.kairosdb.plugin.Aggregator;
 
 /**
  Created by bhawkins on 5/18/17.
diff --git a/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java b/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
index 56cbe60494..ad4f14f2de 100755
--- a/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/FilterAggregator.java
@@ -16,15 +16,10 @@
 
 package org.kairosdb.core.aggregator;
 
-import com.google.inject.Inject;
-import org.joda.time.DateTimeZone;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
-import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
-import org.kairosdb.core.datastore.Sampling;
-import org.kairosdb.core.datastore.TimeUnit;
-import org.kairosdb.util.Util;
+import org.kairosdb.plugin.Aggregator;
 
 
 @AggregatorName(name = "filter", description = "Filters datapoints according to filter operation with a null data point.")
diff --git a/src/main/java/org/kairosdb/core/aggregator/GroupByAware.java b/src/main/java/org/kairosdb/core/aggregator/GroupByAware.java
index ba1b7ec7d5..dfb95396ea 100755
--- a/src/main/java/org/kairosdb/core/aggregator/GroupByAware.java
+++ b/src/main/java/org/kairosdb/core/aggregator/GroupByAware.java
@@ -1,6 +1,6 @@
 package org.kairosdb.core.aggregator;
 
-import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.plugin.GroupBy;
 
 import java.util.List;
 
diff --git a/src/main/java/org/kairosdb/core/aggregator/GuiceAggregatorFactory.java b/src/main/java/org/kairosdb/core/aggregator/GuiceAggregatorFactory.java
index 3606fdd341..5fedc578c0 100755
--- a/src/main/java/org/kairosdb/core/aggregator/GuiceAggregatorFactory.java
+++ b/src/main/java/org/kairosdb/core/aggregator/GuiceAggregatorFactory.java
@@ -21,6 +21,7 @@
 import com.google.inject.Injector;
 import com.google.inject.Key;
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.*;
 
diff --git a/src/main/java/org/kairosdb/core/aggregator/LimitAggregator.java b/src/main/java/org/kairosdb/core/aggregator/LimitAggregator.java
index 0798f22695..a122fc0121 100755
--- a/src/main/java/org/kairosdb/core/aggregator/LimitAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/LimitAggregator.java
@@ -3,6 +3,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.groupby.GroupByResult;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.List;
 import java.util.Set;
diff --git a/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java b/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
index c5d636273d..5516f87466 100755
--- a/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/RangeAggregator.java
@@ -23,6 +23,7 @@
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.Sampling;
 import org.kairosdb.core.datastore.TimeUnit;
+import org.kairosdb.plugin.Aggregator;
 
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
diff --git a/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java b/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
index 3be3740c88..d71a84bc25 100755
--- a/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/RateAggregator.java
@@ -24,6 +24,7 @@
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.Sampling;
 import org.kairosdb.core.datastore.TimeUnit;
+import org.kairosdb.plugin.Aggregator;
 import org.kairosdb.util.Util;
 
 @AggregatorName(name = "rate", description = "Computes the rate of change for the data points.")
diff --git a/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
index f453a1e657..f633043cdd 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SamplerAggregator.java
@@ -24,6 +24,7 @@
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.datastore.Sampling;
 import org.kairosdb.core.datastore.TimeUnit;
+import org.kairosdb.plugin.Aggregator;
 import org.kairosdb.util.Util;
 
 @AggregatorName(name = "sampler", description = "Computes the sampling rate of change for the data points.")
diff --git a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
index 4c14f8e0be..6b0ef0a445 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
@@ -6,7 +6,8 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
 import org.kairosdb.core.datastore.DataPointGroup;
-import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.plugin.Aggregator;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.core.groupby.GroupByResult;
 import org.kairosdb.core.groupby.TagGroupBy;
 import org.kairosdb.events.DataPointEvent;
diff --git a/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java b/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
index 1035356712..3f5ac3c6b7 100755
--- a/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/ScaleAggregator.java
@@ -23,6 +23,7 @@
 import org.kairosdb.core.datapoints.DoubleDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.groupby.GroupByResult;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.List;
 import java.util.Set;
diff --git a/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
index 109a098c8c..8b83ba4511 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SmaAggregator.java
@@ -19,7 +19,6 @@
 
 import static com.google.common.base.Preconditions.checkState;
 
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -31,6 +30,7 @@
 import org.kairosdb.core.groupby.GroupByResult;
 
 import com.google.inject.Inject;
+import org.kairosdb.plugin.Aggregator;
 
 @AggregatorName(name = "sma", description = "Simple moving average.")
 public class SmaAggregator implements Aggregator
diff --git a/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java b/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
index 3aa39a61d4..85db46392f 100755
--- a/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/TrimAggregator.java
@@ -3,6 +3,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
 import org.kairosdb.core.datastore.DataPointGroup;
+import org.kairosdb.plugin.Aggregator;
 
 /**
  Trims off the first, last or both (first and last) data points.  When aggregating
diff --git a/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java b/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
index 159c1d0bfe..460e480173 100755
--- a/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
+++ b/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
@@ -17,17 +17,17 @@
 
 
 import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.ListMultimap;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.KairosDataPointFactory;
-import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.plugin.Aggregator;
 import org.kairosdb.core.aggregator.LimitAggregator;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.groupby.*;
 import org.kairosdb.core.reporting.ThreadReporter;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.util.MemoryMonitor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/src/main/java/org/kairosdb/core/datastore/QueryMetric.java b/src/main/java/org/kairosdb/core/datastore/QueryMetric.java
index 7393ea6123..deb8883e0b 100755
--- a/src/main/java/org/kairosdb/core/datastore/QueryMetric.java
+++ b/src/main/java/org/kairosdb/core/datastore/QueryMetric.java
@@ -17,8 +17,8 @@
 
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.SetMultimap;
-import org.kairosdb.core.aggregator.Aggregator;
-import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.plugin.Aggregator;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.util.Preconditions;
 
 import java.util.ArrayList;
diff --git a/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java b/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
index e9b1dfef44..844c6f57d5 100755
--- a/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/BinGroupBy.java
@@ -20,6 +20,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.GroupByName;
 import org.kairosdb.core.formatter.FormatterException;
+import org.kairosdb.plugin.GroupBy;
 
 import java.io.StringWriter;
 import java.util.Map;
diff --git a/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java b/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
index 610a2b1740..8141e9fd45 100755
--- a/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
+++ b/src/main/java/org/kairosdb/core/groupby/GroupByFactory.java
@@ -16,6 +16,8 @@
 
 package org.kairosdb.core.groupby;
 
+import org.kairosdb.plugin.GroupBy;
+
 public interface GroupByFactory
 {
 	GroupBy createGroupBy(String name);
diff --git a/src/main/java/org/kairosdb/core/groupby/Grouper.java b/src/main/java/org/kairosdb/core/groupby/Grouper.java
index f7c03cfe2e..6451f9e156 100755
--- a/src/main/java/org/kairosdb/core/groupby/Grouper.java
+++ b/src/main/java/org/kairosdb/core/groupby/Grouper.java
@@ -18,6 +18,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.KairosDataPointFactory;
 import org.kairosdb.core.datastore.DataPointGroup;
+import org.kairosdb.plugin.GroupBy;
 
 import java.io.IOException;
 import java.util.ArrayList;
diff --git a/src/main/java/org/kairosdb/core/groupby/GuiceGroupByFactory.java b/src/main/java/org/kairosdb/core/groupby/GuiceGroupByFactory.java
index 78395d5952..19dbabc997 100755
--- a/src/main/java/org/kairosdb/core/groupby/GuiceGroupByFactory.java
+++ b/src/main/java/org/kairosdb/core/groupby/GuiceGroupByFactory.java
@@ -20,6 +20,7 @@
 import com.google.inject.Injector;
 import com.google.inject.Key;
 import org.kairosdb.core.aggregator.annotation.GroupByName;
+import org.kairosdb.plugin.GroupBy;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java b/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
index 2dde1f5d32..a2c2bb6bed 100755
--- a/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/TagGroupBy.java
@@ -18,6 +18,7 @@
 import org.apache.bval.constraints.NotEmpty;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.GroupByName;
+import org.kairosdb.plugin.GroupBy;
 
 import javax.validation.constraints.NotNull;
 import java.util.ArrayList;
diff --git a/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java b/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
index f897792df6..87e5ff90ff 100755
--- a/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/TimeGroupBy.java
@@ -23,6 +23,7 @@
 import org.kairosdb.core.datastore.Duration;
 import org.kairosdb.core.datastore.TimeUnit;
 import org.kairosdb.core.formatter.FormatterException;
+import org.kairosdb.plugin.GroupBy;
 
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotNull;
diff --git a/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java b/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
index a736eedf65..1ce5f3ca18 100755
--- a/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
+++ b/src/main/java/org/kairosdb/core/groupby/ValueGroupBy.java
@@ -20,6 +20,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.GroupByName;
 import org.kairosdb.core.formatter.FormatterException;
+import org.kairosdb.plugin.GroupBy;
 
 import javax.validation.constraints.Min;
 import java.io.StringWriter;
diff --git a/src/main/java/org/kairosdb/core/http/rest/GuiceQueryPreProcessor.java b/src/main/java/org/kairosdb/core/http/rest/GuiceQueryPreProcessor.java
new file mode 100755
index 0000000000..98cbde281d
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/http/rest/GuiceQueryPreProcessor.java
@@ -0,0 +1,51 @@
+package org.kairosdb.core.http.rest;
+
+
+import com.google.inject.Binding;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+import org.kairosdb.core.http.rest.json.Query;
+import org.kairosdb.plugin.QueryPreProcessor;
+
+import javax.inject.Inject;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ Created by bhawkins on 6/12/17.
+ */
+public class GuiceQueryPreProcessor implements QueryPreProcessorContainer
+{
+	private List<QueryPreProcessor> m_preProcessors;
+
+
+	@Inject
+	public GuiceQueryPreProcessor(Injector injector)
+	{
+		m_preProcessors = new ArrayList<>();
+
+		Map<Key<?>, Binding<?>> bindings = injector.getAllBindings();
+
+		for (Key<?> key : bindings.keySet())
+		{
+			Class<?> bindingClass = key.getTypeLiteral().getRawType();
+			if (QueryPreProcessor.class.isAssignableFrom(bindingClass))
+			{
+				m_preProcessors.add((QueryPreProcessor)injector.getInstance(bindingClass));
+			}
+		}
+	}
+
+	public Query preProcess(Query query)
+	{
+		Query ret = query;
+
+		for (QueryPreProcessor preProcessor : m_preProcessors)
+		{
+			ret = preProcessor.preProcessQuery(ret);
+		}
+
+		return ret;
+	}
+}
diff --git a/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java b/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
index e114245632..646a39d4ee 100755
--- a/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
+++ b/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
@@ -26,7 +26,6 @@
 import com.google.inject.name.Named;
 import org.kairosdb.core.DataPointSet;
 import org.kairosdb.core.KairosDataPointFactory;
-import org.kairosdb.core.PluginException;
 import org.kairosdb.core.datapoints.*;
 import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.formatter.DataFormatter;
@@ -97,6 +96,16 @@
 	@Inject
 	private StringDataPointFactory m_stringDataPointFactory = new StringDataPointFactory();
 
+	@Inject
+	private QueryPreProcessorContainer m_queryPreProcessor = new QueryPreProcessorContainer()
+	{
+		@Override
+		public Query preProcess(Query query)
+		{
+			return query;
+		}
+	};
+
 	@Inject(optional=true)
 	@Named("kairosdb.queries.aggregate_stats")
 	private boolean m_aggregatedQueryMetrics = false;
@@ -431,8 +440,7 @@ public Response runQuery(String json, String remoteAddr) throws Exception
 
 			Query mainQuery = queryParser.parseQueryMetric(json);
 
-
-			//Add pre processor query plugin point
+			mainQuery = m_queryPreProcessor.preProcess(mainQuery);
 
 			List<QueryMetric> queries = mainQuery.getQueryMetrics();
 
diff --git a/src/main/java/org/kairosdb/core/http/rest/QueryPreProcessorContainer.java b/src/main/java/org/kairosdb/core/http/rest/QueryPreProcessorContainer.java
new file mode 100755
index 0000000000..75dad2dd2a
--- /dev/null
+++ b/src/main/java/org/kairosdb/core/http/rest/QueryPreProcessorContainer.java
@@ -0,0 +1,11 @@
+package org.kairosdb.core.http.rest;
+
+import org.kairosdb.core.http.rest.json.Query;
+
+/**
+ Created by bhawkins on 6/12/17.
+ */
+public interface QueryPreProcessorContainer
+{
+	Query preProcess(Query query);
+}
diff --git a/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java b/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
index 20d172c3da..8867faa4f2 100755
--- a/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
+++ b/src/main/java/org/kairosdb/core/http/rest/json/QueryParser.java
@@ -31,7 +31,8 @@
 import org.joda.time.DateTimeZone;
 import org.kairosdb.core.aggregator.*;
 import org.kairosdb.core.datastore.*;
-import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.plugin.Aggregator;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.core.groupby.GroupByFactory;
 import org.kairosdb.core.http.rest.BeanValidationException;
 import org.kairosdb.core.http.rest.QueryException;
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java b/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
index 13fa4a1b4a..04cac63b0a 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/BatchHandler.java
@@ -194,29 +194,32 @@ public Boolean call() throws Exception
 				else
 				{
 					logger.error("Failed to send data points", e);
-					for (DataPointEvent event : m_events)
+					if (failedLogger.isTraceEnabled())
 					{
-						StringWriter sw = new StringWriter();
-						JSONWriter jsonWriter = new JSONWriter(sw);
-						jsonWriter.object();
-						jsonWriter.key("name").value(event.getMetricName());
-						jsonWriter.key("timestamp").value(event.getDataPoint().getTimestamp());
-						jsonWriter.key("value");
-						event.getDataPoint().writeValueToJson(jsonWriter);
-
-						jsonWriter.key("tags").object();
-						ImmutableSortedMap<String, String> tags = event.getTags();
-						for (Map.Entry<String, String> entry : tags.entrySet())
+						for (DataPointEvent event : m_events)
 						{
-							jsonWriter.key(entry.getKey()).value(entry.getValue());
+							StringWriter sw = new StringWriter();
+							JSONWriter jsonWriter = new JSONWriter(sw);
+							jsonWriter.object();
+							jsonWriter.key("name").value(event.getMetricName());
+							jsonWriter.key("timestamp").value(event.getDataPoint().getTimestamp());
+							jsonWriter.key("value");
+							event.getDataPoint().writeValueToJson(jsonWriter);
+
+							jsonWriter.key("tags").object();
+							ImmutableSortedMap<String, String> tags = event.getTags();
+							for (Map.Entry<String, String> entry : tags.entrySet())
+							{
+								jsonWriter.key(entry.getKey()).value(entry.getValue());
+							}
+							jsonWriter.endObject();
+
+							jsonWriter.key("ttl").value(event.getTtl());
+
+							jsonWriter.endObject();
+
+							failedLogger.trace(sw.toString());
 						}
-						jsonWriter.endObject();
-
-						jsonWriter.key("ttl").value(event.getTtl());
-
-						jsonWriter.endObject();
-
-						failedLogger.trace(sw.toString());
 					}
 				}
 			}
diff --git a/src/main/java/org/kairosdb/plugin/Aggregator.java b/src/main/java/org/kairosdb/plugin/Aggregator.java
new file mode 100755
index 0000000000..4781aeba3b
--- /dev/null
+++ b/src/main/java/org/kairosdb/plugin/Aggregator.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2016 KairosDB Authors
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+package org.kairosdb.plugin;
+
+import org.kairosdb.core.datastore.DataPointGroup;
+
+import java.util.List;
+
+public interface Aggregator
+{
+	DataPointGroup aggregate(DataPointGroup dataPointGroup);
+	boolean canAggregate(String groupType);
+	String getAggregatedGroupType(String groupType);
+}
\ No newline at end of file
diff --git a/src/main/java/org/kairosdb/plugin/GroupBy.java b/src/main/java/org/kairosdb/plugin/GroupBy.java
new file mode 100755
index 0000000000..8c7a08a071
--- /dev/null
+++ b/src/main/java/org/kairosdb/plugin/GroupBy.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2016 KairosDB Authors
+ *
+ *    Licensed under the Apache License, Version 2.0 (the "License");
+ *    you may not use this file except in compliance with the License.
+ *    You may obtain a copy of the License at
+ *
+ *        http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *    Unless required by applicable law or agreed to in writing, software
+ *    distributed under the License is distributed on an "AS IS" BASIS,
+ *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *    See the License for the specific language governing permissions and
+ *    limitations under the License.
+ */
+package org.kairosdb.plugin;
+
+import org.kairosdb.core.DataPoint;
+import org.kairosdb.core.groupby.GroupByResult;
+
+import java.util.Map;
+
+public interface GroupBy
+{
+	int getGroupId(DataPoint dataPoint, Map<String, String> tags);
+
+	GroupByResult getGroupByResult(int id);
+
+	/**
+	 * Called when the object is instantiated with the query start date.
+	 *
+	 * @param startDate query start date
+	 */
+	void setStartDate(long startDate);
+}
\ No newline at end of file
diff --git a/src/main/java/org/kairosdb/plugin/QueryPostProcessor.java b/src/main/java/org/kairosdb/plugin/QueryPostProcessor.java
new file mode 100755
index 0000000000..e2234adb96
--- /dev/null
+++ b/src/main/java/org/kairosdb/plugin/QueryPostProcessor.java
@@ -0,0 +1,11 @@
+package org.kairosdb.plugin;
+
+import java.io.File;
+
+/**
+ Created by bhawkins on 5/18/17.
+ */
+public interface QueryPostProcessor
+{
+	File postProcessResults(File queryResults);
+}
diff --git a/src/main/java/org/kairosdb/plugin/QueryPreProcessor.java b/src/main/java/org/kairosdb/plugin/QueryPreProcessor.java
new file mode 100755
index 0000000000..827fb79eb5
--- /dev/null
+++ b/src/main/java/org/kairosdb/plugin/QueryPreProcessor.java
@@ -0,0 +1,11 @@
+package org.kairosdb.plugin;
+
+import org.kairosdb.core.http.rest.json.Query;
+
+/**
+ Created by bhawkins on 6/2/17.
+ */
+public interface QueryPreProcessor
+{
+	Query preProcessQuery(Query query);
+}
diff --git a/src/main/java/org/kairosdb/plugin/package-info.java b/src/main/java/org/kairosdb/plugin/package-info.java
new file mode 100755
index 0000000000..bc19fa3d8a
--- /dev/null
+++ b/src/main/java/org/kairosdb/plugin/package-info.java
@@ -0,0 +1,6 @@
+/**
+ This package contains interfaces that can be used as plugin entry points to
+ KairosDB.  In most cases you simply implement the appropriate interface and then
+ bind your class in a module.
+ */
+package org.kairosdb.plugin;
\ No newline at end of file
diff --git a/src/main/java/org/kairosdb/rollup/RollUpJob.java b/src/main/java/org/kairosdb/rollup/RollUpJob.java
index ab1e5231b5..7e8c69a844 100755
--- a/src/main/java/org/kairosdb/rollup/RollUpJob.java
+++ b/src/main/java/org/kairosdb/rollup/RollUpJob.java
@@ -2,7 +2,7 @@
 
 import com.google.common.eventbus.EventBus;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.plugin.Aggregator;
 import org.kairosdb.core.aggregator.RangeAggregator;
 import org.kairosdb.core.datapoints.LongDataPointFactory;
 import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
diff --git a/src/main/java/org/kairosdb/rollup/RollupTaskTarget.java b/src/main/java/org/kairosdb/rollup/RollupTaskTarget.java
index d5ff3a40e9..bbdc1f6031 100755
--- a/src/main/java/org/kairosdb/rollup/RollupTaskTarget.java
+++ b/src/main/java/org/kairosdb/rollup/RollupTaskTarget.java
@@ -1,6 +1,6 @@
 package org.kairosdb.rollup;
 
-import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java b/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
index 18615555b0..dfe3aee940 100755
--- a/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
+++ b/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
@@ -8,7 +8,7 @@
 import org.kairosdb.core.datapoints.LongDataPoint;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.exception.DatastoreException;
-import org.kairosdb.core.groupby.GroupBy;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.core.groupby.TagGroupBy;
 import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.testing.ListDataPointGroup;
diff --git a/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java b/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
index 2f79a61f84..ba6b8de9eb 100755
--- a/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
+++ b/src/test/java/org/kairosdb/core/aggregator/TestAggregatorFactory.java
@@ -19,6 +19,7 @@
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
 import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
 import org.kairosdb.core.exception.KairosDBException;
+import org.kairosdb.plugin.Aggregator;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/src/test/java/org/kairosdb/core/groupby/GrouperTest.java b/src/test/java/org/kairosdb/core/groupby/GrouperTest.java
index 539bc70516..cc1363a266 100755
--- a/src/test/java/org/kairosdb/core/groupby/GrouperTest.java
+++ b/src/test/java/org/kairosdb/core/groupby/GrouperTest.java
@@ -11,6 +11,7 @@
 import org.kairosdb.core.datapoints.LongDataPoint;
 import org.kairosdb.core.datastore.DataPointGroup;
 import org.kairosdb.core.formatter.FormatterException;
+import org.kairosdb.plugin.GroupBy;
 import org.kairosdb.testing.ListDataPointGroup;
 
 import java.io.IOException;
diff --git a/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java b/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
index 265da30dc0..c19a8b9215 100755
--- a/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
+++ b/src/test/java/org/kairosdb/core/groupby/SimpleTimeGroupBy.java
@@ -21,6 +21,7 @@
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.GroupByName;
 import org.kairosdb.core.formatter.FormatterException;
+import org.kairosdb.plugin.GroupBy;
 
 import java.io.StringWriter;
 import java.util.Map;
diff --git a/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java b/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
index 82ba451584..99cf847f3b 100755
--- a/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
+++ b/src/test/java/org/kairosdb/core/groupby/TestGroupByFactory.java
@@ -16,6 +16,7 @@
 package org.kairosdb.core.groupby;
 
 import org.kairosdb.core.aggregator.annotation.GroupByName;
+import org.kairosdb.plugin.GroupBy;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java b/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
index 90f5680f12..a85fd697c7 100755
--- a/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
+++ b/src/test/java/org/kairosdb/core/http/rest/ResourceBase.java
@@ -132,6 +132,8 @@ public void afterInjection(I i)
                 bind(LegacyDataPointFactory.class).in(Singleton.class);
                 bind(StringDataPointFactory.class).in(Singleton.class);
 
+                bind(QueryPreProcessorContainer.class).to(GuiceQueryPreProcessor.class).in(javax.inject.Singleton.class);
+
             }
         });
         server = injector.getInstance(WebServer.class);
diff --git a/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java b/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
index d220f93eb1..55621aaf64 100755
--- a/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/json/QueryParserTest.java
@@ -53,7 +53,7 @@ public void test_absolute_dates() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("query-metric-absolute-dates-with-groupby.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 
@@ -70,7 +70,7 @@ public void test_withNoAggregators() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("invalid-query-metric-no-aggregators.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 
@@ -103,7 +103,7 @@ public void test_noTags() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("query-metric-no-tags.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 		QueryMetric queryMetric = results.get(0);
@@ -115,7 +115,7 @@ public void test_oneTag() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("query-metric-one-tag.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 		QueryMetric queryMetric = results.get(0);
@@ -129,7 +129,7 @@ public void test_twoTags() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("query-metric-two-tags.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 		QueryMetric queryMetric = results.get(0);
@@ -145,7 +145,7 @@ public void test_excludeTags() throws Exception
 	{
 		String json = Resources.toString(Resources.getResource("query-metric-exclude-tags.json"), Charsets.UTF_8);
 
-		List<QueryMetric> results = parser.parseQueryMetric(json);
+		List<QueryMetric> results = parser.parseQueryMetric(json).getQueryMetrics();
 
 		assertThat(results.size(), equalTo(1));
 		QueryMetric queryMetric = results.get(0);
diff --git a/src/test/java/org/kairosdb/datastore/DatastoreMetricQueryImpl.java b/src/test/java/org/kairosdb/datastore/DatastoreMetricQueryImpl.java
index 8d79b432fa..4998f2d84a 100755
--- a/src/test/java/org/kairosdb/datastore/DatastoreMetricQueryImpl.java
+++ b/src/test/java/org/kairosdb/datastore/DatastoreMetricQueryImpl.java
@@ -86,4 +86,10 @@ public Order getOrder()
 		return Collections.emptyList();
 	}
 
+	@Override
+	public void addPlugin(QueryPlugin plugin)
+	{
+
+	}
+
 }
diff --git a/src/test/java/org/kairosdb/rollup/RollUpJobTest.java b/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
index 8e45e4fbbd..1fcbbc5515 100755
--- a/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
+++ b/src/test/java/org/kairosdb/rollup/RollUpJobTest.java
@@ -8,7 +8,7 @@
 import org.junit.rules.ExpectedException;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.TestDataPointFactory;
-import org.kairosdb.core.aggregator.Aggregator;
+import org.kairosdb.plugin.Aggregator;
 import org.kairosdb.core.aggregator.DiffAggregator;
 import org.kairosdb.core.aggregator.DivideAggregator;
 import org.kairosdb.core.aggregator.MaxAggregator;
