diff --git a/ugs-core/src/com/willwinder/universalgcodesender/GrblController.java b/ugs-core/src/com/willwinder/universalgcodesender/GrblController.java
index 2d492d923c..3a9bda5f8d 100755
--- a/ugs-core/src/com/willwinder/universalgcodesender/GrblController.java
+++ b/ugs-core/src/com/willwinder/universalgcodesender/GrblController.java
@@ -138,6 +138,7 @@ protected void rawResponseHandler(String response) {
         }
         
         else if (GrblUtils.isGrblVersionString(response)) {
+            this.controllerStatus = null;
             this.stopPollingPosition();
             positionPollTimer = createPositionPollTimer();
             this.beginPollingPosition();
@@ -555,39 +556,6 @@ private void stopPollingPosition() {
         }
     }
 
-    private void sendStateMessageIfChanged(ControlState before, ControlState after) {
-        /*
-        ControlState state = ControlState.COMM_IDLE;
-        switch (afterState.toLowerCase()) {
-            case "jog":
-            case "run":
-                state = ControlState.COMM_SENDING;
-                break;
-            case "hold":
-            case "door":
-                state = ControlState.COMM_SENDING_PAUSED;
-                break;
-            case "check":
-            case "alarm":
-            case "idle":
-                if (isStreaming()){
-                    state = ControlState.COMM_SENDING_PAUSED;
-                } else {
-                    // GRBL 1.1: cancel the send when from jog -> idle.
-                    if (beforeState != null &&
-                            beforeState.toLowerCase().equals("jog")) {
-                        this.comm.cancelSend();
-                    }
-                    state = ControlState.COMM_IDLE;
-                }
-                break;
-        }
-        */
-
-        if (before != after) {
-            this.dispatchStateChange(after);
-        }
-    }
     
     // No longer a listener event
     private void handleStatusString(final String string) {
@@ -602,7 +570,9 @@ private void handleStatusString(final String string) {
                 controllerStatus, string, capabilities, getReportingUnits());
 
         // Make UGS more responsive to the state being reported by GRBL.
-        sendStateMessageIfChanged(before, getControlState());
+        if (before != getControlState()) {
+            this.dispatchStateChange(getControlState());
+        }
 
         // GRBL 1.1 jog complete transition
         if (beforeState.equals("Jog") && controllerStatus.getState().equals("Idle")) {
diff --git a/ugs-core/test/com/willwinder/universalgcodesender/AbstractControllerTest.java b/ugs-core/test/com/willwinder/universalgcodesender/AbstractControllerTest.java
index f6e9336592..f0f25edeef 100755
--- a/ugs-core/test/com/willwinder/universalgcodesender/AbstractControllerTest.java
+++ b/ugs-core/test/com/willwinder/universalgcodesender/AbstractControllerTest.java
@@ -129,7 +129,7 @@ public void setUp() throws Exception {
     ///////////////
     // UTILITIES //
     ///////////////
-    public void openInstanceExpectUtility(String port, int portRate) throws Exception {
+    public void openInstanceExpectUtility(String port, int portRate, boolean handleStateChange) throws Exception {
         instance.openCommAfterEvent();
         EasyMock.expect(EasyMock.expectLastCall()).anyTimes();
         mockListener.messageForConsole(anyObject(), EasyMock.anyString());
@@ -137,6 +137,7 @@ public void openInstanceExpectUtility(String port, int portRate) throws Exceptio
         EasyMock.expect(mockCommunicator.openCommPort(port, portRate)).andReturn(true).once();
         EasyMock.expect(instance.isCommOpen()).andReturn(false).once();
         EasyMock.expect(instance.isCommOpen()).andReturn(true).anyTimes();
+        EasyMock.expect(instance.handlesAllStateChangeEvents()).andReturn(handleStateChange).anyTimes();
     }
     private void streamInstanceExpectUtility() throws Exception {
         EasyMock.expect(mockCommunicator.areActiveCommands()).andReturn(false).anyTimes();
@@ -145,8 +146,8 @@ private void streamInstanceExpectUtility() throws Exception {
         mockCommunicator.streamCommands();
         EasyMock.expect(EasyMock.expectLastCall()).once();
     }
-    private void startStreamExpectation(String port, int rate, String command) throws Exception {
-        openInstanceExpectUtility(port, rate);
+    private void startStreamExpectation(String port, int rate, String command, boolean handleStateChange) throws Exception {
+        openInstanceExpectUtility(port, rate, handleStateChange);
         streamInstanceExpectUtility();
         
         // Making sure the commands get queued.
@@ -303,7 +304,7 @@ public void testGetSendDuration() throws Exception {
         String port = "/some/port";
         int rate = 1234;
 
-        startStreamExpectation(port, rate, command);
+        startStreamExpectation(port, rate, command, false);
 
         EasyMock.replay(instance, mockCommunicator);
 
@@ -388,7 +389,7 @@ public void testSendCommandImmediately() throws Exception {
         String port = "/some/port";
         int rate = 1234;
 
-        openInstanceExpectUtility(port, rate);
+        openInstanceExpectUtility(port, rate, false);
         mockCommunicator.queueStringForComm(str + "\n");
         expect(expectLastCall()).times(1);
         mockCommunicator.streamCommands();
@@ -425,7 +426,7 @@ public void testIsReadyToStreamFile() throws Exception {
         String port = "/some/port";
         int rate = 1234;
 
-        startStreamExpectation(port, rate, command);
+        startStreamExpectation(port, rate, command, false);
         replay(instance, mockCommunicator);
 
         instance.openCommPort(port, rate);
@@ -465,7 +466,7 @@ public void testQueueRawStreamForComm() throws Exception {
             out.append(i);
         }
 
-        openInstanceExpectUtility(port, rate);
+        openInstanceExpectUtility(port, rate, false);
         streamInstanceExpectUtility();
         
         // TODO Fix this
@@ -504,7 +505,7 @@ public void testQueueStreamForComm() throws Exception {
             }
 
             try (GcodeStreamReader gsr = new GcodeStreamReader(f)) {
-                openInstanceExpectUtility(port, rate);
+                openInstanceExpectUtility(port, rate, false);
                 streamInstanceExpectUtility();
 
                 // TODO Fix this
@@ -538,7 +539,7 @@ public void testQueueCommand() throws Exception {
         String port = "/some/port";
         int rate = 1234;
 
-        openInstanceExpectUtility(port, rate);
+        openInstanceExpectUtility(port, rate, false);
         streamInstanceExpectUtility();
         
         // Making sure the commands get queued.
@@ -567,7 +568,7 @@ public void testQueueCommands() throws Exception {
         String port = "/some/port";
         int rate = 1234;
 
-        openInstanceExpectUtility(port, rate);
+        openInstanceExpectUtility(port, rate, false);
         streamInstanceExpectUtility();
         
         // Making sure the commands get queued.
@@ -643,7 +644,7 @@ public void testCommandSent() throws Exception {
         String command = "command";
 
         // Setup instance with commands buffered on the communicator.
-        startStreamExpectation(port, baud, command);
+        startStreamExpectation(port, baud, command, false);
         EasyMock.replay(instance, mockCommunicator);
         startStream(port, baud, command);
         EasyMock.reset(instance, mockCommunicator, mockListener);
@@ -680,6 +681,7 @@ public void testCommandComplete() throws Exception {
         // Setup test with commands sent by communicator waiting on response.
         testCommandSent();
         reset(instance, mockCommunicator, mockListener);
+        EasyMock.expect(instance.handlesAllStateChangeEvents()).andReturn(true).anyTimes();
 
         // Make sure the events are triggered.
         Capture<GcodeCommand> gc1 = newCapture();
@@ -812,6 +814,7 @@ public void testSoftReset() throws Exception {
     public void testJogMachine() throws Exception {
         System.out.println("jogMachine");
 
+        EasyMock.expect(niceInstance.handlesAllStateChangeEvents()).andReturn(true).anyTimes();
         EasyMock.expect(niceInstance.isCommOpen()).andReturn(true).anyTimes();
         mockCommunicator.streamCommands();
         EasyMock.expect(expectLastCall()).anyTimes();
diff --git a/ugs-core/test/com/willwinder/universalgcodesender/GrblControllerTest.java b/ugs-core/test/com/willwinder/universalgcodesender/GrblControllerTest.java
index e6c39f0a26..6c6ab86d28 100755
--- a/ugs-core/test/com/willwinder/universalgcodesender/GrblControllerTest.java
+++ b/ugs-core/test/com/willwinder/universalgcodesender/GrblControllerTest.java
@@ -23,11 +23,13 @@ This file is part of Universal Gcode Sender (UGS).
 import com.willwinder.universalgcodesender.listeners.ControllerListener;
 import com.willwinder.universalgcodesender.mockobjects.MockGrblCommunicator;
 import com.willwinder.universalgcodesender.model.Position;
+import com.willwinder.universalgcodesender.model.UGSEvent.ControlState;
 import com.willwinder.universalgcodesender.model.UnitUtils;
 import com.willwinder.universalgcodesender.types.GcodeCommand;
 import com.willwinder.universalgcodesender.utils.GUIHelpers;
 import java.io.IOException;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Ignore; 
@@ -63,11 +65,11 @@ public void tearDown() throws Exception {
         f.set(null, false);
     }
 
-    private static void setState(GrblController gc, String state) {
+    private static void setState(GrblController gc, ControlState state) {
         try {
-            Field f = GrblController.class.getDeclaredField("grblState");
-            f.setAccessible(true);
-            f.set(gc, "Idle");
+            Method m = AbstractController.class.getDeclaredMethod("setCurrentState", ControlState.class);
+            m.setAccessible(true);
+            m.invoke(gc, state);
         } catch (Exception e) {
             Assert.fail();
         }
@@ -745,7 +747,7 @@ public void testCancelSend() throws Exception {
         assertEquals(0, mgc.numSoftResetCalls);
         instance.resumeStreaming();
 
-        setState(instance, "Idle");
+        setState(instance, ControlState.COMM_IDLE);
 
         // Test 1.1 Cancel when nothing is running (Grbl 0.7).
         instance.rawResponseHandler("Grbl 0.7");
@@ -867,7 +869,7 @@ public void testCancelSend() throws Exception {
     public void testPauseAndCancelSend() throws Exception {
         System.out.println("Pause + cancelSend");
         GrblController instance = new GrblController(mgc);
-        setState(instance, "Run");
+        setState(instance, ControlState.COMM_SENDING);
         instance.openCommPort("blah", 1234);
 
         // Test 1.1 cancel throws an exception (Grbl 0.7).
