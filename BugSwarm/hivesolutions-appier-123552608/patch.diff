diff --git a/src/appier/base.py b/src/appier/base.py
index e42e7f174f..037f1e90a3 100755
--- a/src/appier/base.py
+++ b/src/appier/base.py
@@ -453,7 +453,8 @@ def norm_route(method, expression, function, async = False, json = False, contex
         return [method, re.compile(expression, re.UNICODE), function, context, opts]
 
     def unload(self):
-        for model_c in self.models_r: model_c.teardown()
+        self._unload_models()
+        self._unload_logging()
 
     def start(self, refresh = True):
         if self.status == RUNNING: return
@@ -2393,6 +2394,12 @@ def _load_logging(self, level = None, format = log.LOGGING_FORMAT):
         self.logger.parent = None
         self.logger.setLevel(self.level)
 
+    def _unload_logging(self):
+        if not self.logger: return
+        for handler in self.handlers:
+            if not handler: continue
+            self.logger.removeHandler(handler)
+
     def _load_settings(self):
         settings.DEBUG = config.conf("DEBUG", settings.DEBUG, cast = bool)
         settings.USERNAME = config.conf("USERNAME", settings.USERNAME)
@@ -2646,6 +2653,9 @@ def _load_models(self):
         # in the registry, starting their infra-structure
         for model_c in models_c: model_c.setup()
 
+    def _unload_models(self):
+        for model_c in self.models_r: model_c.teardown()
+
     def _load_parts(self):
         # creates the list that will hold the final set of parts
         # properly instantiated an initialized
diff --git a/src/appier/data.py b/src/appier/data.py
index d264f88779..0fd153a001 100755
--- a/src/appier/data.py
+++ b/src/appier/data.py
@@ -291,7 +291,7 @@ def find_and_modify(self, *args, **kwargs):
         object = self._to_update(modification, object = object)
         if found: self.update(filter, {"$set" : object})
         else: self.insert(object)
-        return object
+        return dict(object)
 
     def insert(self, *args, **kwargs):
         self.log("insert", *args, **kwargs)
@@ -335,7 +335,7 @@ def _to_condition(self, filter):
             condition &= _condition
         return condition
 
-    def _to_results(self, results, kwargs):
+    def _to_results(self, results, kwargs, build = True):
         sort = kwargs.get("sort", [])
         skip = kwargs.get("skip", 0)
         limit = kwargs.get("limit", None)
@@ -350,6 +350,7 @@ def sorter(value):
 
         if sort: results.sort(key = sorter, reverse = reverse)
         if skip or limit: results = results[slice(skip, skip + limit, 1)]
+        if build: results = [dict(result) for result in results]
         return results
 
     def _to_update(self, modification, object = None):
diff --git a/src/appier/test/base.py b/src/appier/test/base.py
index 8b700a6d98..164fd45ffe 100755
--- a/src/appier/test/base.py
+++ b/src/appier/test/base.py
@@ -46,6 +46,9 @@ class BaseTest(unittest.TestCase):
     def setUp(self):
         self.app = appier.App()
 
+    def tearDown(self):
+        self.app.unload()
+
     def test_locale(self):
         self.app.locales = ("en_us", "pt_pt", "es_es")
         self.app._register_bundle(dict(hello = "Hello"), "en_us")
