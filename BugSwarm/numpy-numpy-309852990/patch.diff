diff --git a/numpy/core/arrayprint.py b/numpy/core/arrayprint.py
index 5743a00e08..81c22f903a 100755
--- a/numpy/core/arrayprint.py
+++ b/numpy/core/arrayprint.py
@@ -636,13 +636,14 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
     if rank == 0:
         return format_function(a[()]) + '\n'
 
-    if summary_insert and 2*edge_items < len(a):
+    show_summary = summary_insert and 2*edge_items < len(a)
+
+    if show_summary:
         leading_items = edge_items
         trailing_items = edge_items
     else:
         leading_items = 0
         trailing_items = len(a)
-        summary_insert = ""
 
     if rank == 1:
         s = ""
@@ -651,7 +652,7 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
             word = format_function(a[i]) + separator
             s, line = _extendLine(s, line, word, max_line_len, next_line_prefix)
 
-        if summary_insert:
+        if show_summary:
             if legacy == '1.13':
                 word = summary_insert + ", "
             else:
@@ -678,7 +679,7 @@ def _formatArray(a, format_function, rank, max_line_len, next_line_prefix,
                               summary_insert, legacy)
             s = s.rstrip() + sep + line_sep
 
-        if summary_insert:
+        if show_summary:
             if legacy == '1.13':
                 # trailing space, fixed number of newlines, and ignores sep
                 s += next_line_prefix + summary_insert + ", \n"
diff --git a/numpy/core/tests/test_arrayprint.py b/numpy/core/tests/test_arrayprint.py
index 4d67d6eacb..f55222dd30 100755
--- a/numpy/core/tests/test_arrayprint.py
+++ b/numpy/core/tests/test_arrayprint.py
@@ -230,6 +230,24 @@ def test_unstructured_void_repr(self):
         assert_equal(eval(repr(a), vars(np)), a)
         assert_equal(eval(repr(a[0]), vars(np)), a[0])
 
+    def test_summarize_1d(self):
+        A = np.arange(1001)
+        strA = '[   0    1    2 ...  998  999 1000]'
+        assert_equal(str(A), strA)
+
+        reprA = 'array([   0,    1,    2, ...,  998,  999, 1000])'
+        assert_equal(repr(A), reprA)
+
+    def test_summarize_2d(self):
+        A = np.arange(1002).reshape(2, 501)
+        strA = '[[   0    1    2 ...  498  499  500]\n' \
+               ' [ 501  502  503 ...  999 1000 1001]]'
+        assert_equal(str(A), strA)
+
+        reprA = 'array([[   0,    1,    2, ...,  498,  499,  500],\n' \
+                '       [ 501,  502,  503, ...,  999, 1000, 1001]])'
+        assert_equal(repr(A), reprA)
+
 
 class TestPrintOptions(object):
     """Test getting and setting global print options."""
diff --git a/numpy/core/tests/test_multiarray.py b/numpy/core/tests/test_multiarray.py
index a625a1bce1..306f21f164 100755
--- a/numpy/core/tests/test_multiarray.py
+++ b/numpy/core/tests/test_multiarray.py
@@ -5677,26 +5677,6 @@ def test_3d_tensor(self):
             assert_equal(np.inner(b, a).transpose(2,3,0,1), desired)
 
 
-class TestSummarization(object):
-    def test_1d(self):
-        A = np.arange(1001)
-        strA = '[   0    1    2 ...  998  999 1000]'
-        assert_(str(A) == strA)
-
-        reprA = 'array([   0,    1,    2, ...,  998,  999, 1000])'
-        assert_(repr(A) == reprA)
-
-    def test_2d(self):
-        A = np.arange(1002).reshape(2, 501)
-        strA = '[[   0    1    2 ...  498  499  500]\n' \
-               ' [ 501  502  503 ...  999 1000 1001]]'
-        assert_(str(A) == strA)
-
-        reprA = 'array([[   0,    1,    2, ...,  498,  499,  500],\n' \
-                '       [ 501,  502,  503, ...,  999, 1000, 1001]])'
-        assert_(repr(A) == reprA)
-
-
 class TestAlen(object):
     def test_basic(self):
         m = np.array([1, 2, 3])
