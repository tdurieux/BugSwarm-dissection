diff --git a/yamcs-api/src/main/java/org/yamcs/YConfiguration.java b/yamcs-api/src/main/java/org/yamcs/YConfiguration.java
index f8df2b4d29..95878f4c93 100755
--- a/yamcs-api/src/main/java/org/yamcs/YConfiguration.java
+++ b/yamcs-api/src/main/java/org/yamcs/YConfiguration.java
@@ -477,8 +477,9 @@ public int getInt(String key, String key1) throws ConfigurationException {
     }
     
     public int getInt(String key, String key1, int defaultValue) throws ConfigurationException {
+        if(!root.containsKey(key)) return defaultValue;
+
         Map<String, Object> m = getMap(key);
-        if(m==null) return defaultValue;
         
         return getInt(m, key1, defaultValue);
     }
diff --git a/yamcs-core/src/main/java/org/yamcs/parameterarchive/ParameterArchiveMaintenanceRestHandler.java b/yamcs-core/src/main/java/org/yamcs/parameterarchive/ParameterArchiveMaintenanceRestHandler.java
index c926f656f8..30866c177d 100755
--- a/yamcs-core/src/main/java/org/yamcs/parameterarchive/ParameterArchiveMaintenanceRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/parameterarchive/ParameterArchiveMaintenanceRestHandler.java
@@ -19,8 +19,6 @@
 import org.yamcs.web.rest.RestRequest;
 import org.yamcs.web.rest.Route;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Provides some maintenance operations on the parameter archive
  * @author nm
@@ -32,7 +30,7 @@
      * 
      */
     @Route(path = "/api/archive/:instance/parameterArchive/rebuild")
-    public ChannelFuture reprocess(RestRequest req) throws HttpException {
+    public void reprocess(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         checkPrivileges(req);
             
@@ -53,11 +51,11 @@ public ChannelFuture reprocess(RestRequest req) throws HttpException {
             throw new BadRequestException(e.getMessage());
         }
         
-        return sendOK(req);
+        sendOK(req);
     }
     
     @Route(path = "/api/archive/:instance/parameterArchive/deletePartitions")
-    public ChannelFuture deletePartition(RestRequest req) throws HttpException {
+    public void deletePartition(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         checkPrivileges(req);
             
@@ -83,7 +81,7 @@ public ChannelFuture deletePartition(RestRequest req) throws HttpException {
             }
             StringMessage sm = StringMessage.newBuilder().setMessage(sb.toString()).build();
             
-            return sendOK(req, sm, org.yamcs.protobuf.SchemaYamcs.StringMessage.WRITE);
+            sendOK(req, sm, org.yamcs.protobuf.SchemaYamcs.StringMessage.WRITE);
             
         } catch (RocksDBException e){
             throw new InternalServerErrorException(e.getMessage());
@@ -93,7 +91,7 @@ public ChannelFuture deletePartition(RestRequest req) throws HttpException {
     }
     
     @Route(path = "/api/archive/:instance/parameterArchive/info/parameter/:name*")
-    public ChannelFuture archiveInfo(RestRequest req) throws HttpException {
+    public void archiveInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         checkPrivileges(req);
         
@@ -102,7 +100,7 @@ public ChannelFuture archiveInfo(RestRequest req) throws HttpException {
         ParameterIdDb pdb = parchive.getParameterIdDb();
         ParameterId[] pids = pdb.get(fqn);
         StringMessage sm = StringMessage.newBuilder().setMessage(Arrays.toString(pids)).build();
-        return sendOK(req, sm, org.yamcs.protobuf.SchemaYamcs.StringMessage.WRITE);
+        sendOK(req, sm, org.yamcs.protobuf.SchemaYamcs.StringMessage.WRITE);
     }
    
     
diff --git a/yamcs-core/src/main/java/org/yamcs/tctm/ReplayService.java b/yamcs-core/src/main/java/org/yamcs/tctm/ReplayService.java
index 42aff4ce54..86923f27e2 100755
--- a/yamcs-core/src/main/java/org/yamcs/tctm/ReplayService.java
+++ b/yamcs-core/src/main/java/org/yamcs/tctm/ReplayService.java
@@ -98,9 +98,6 @@ public ReplayService(String instance, ReplayRequest spec) throws ProcessorExcept
     }
 
 
-
-
-
     @Override
     public void init(YProcessor proc) throws ConfigurationException {
         this.yprocessor = proc;
@@ -207,7 +204,6 @@ public void update(int subscriptionId, List<ParameterValueWithId> params) {//ign
         Subscription subscription = tmproc.getSubscription();
         Collection<SequenceContainer> containers = subscription.getContainers();
 
-        
         if((containers==null)|| (containers.isEmpty())) {
             log.debug("No container required for the parameter subscription");
         } else {
@@ -235,9 +231,15 @@ public void update(int subscriptionId, List<ParameterValueWithId> params) {//ign
             PpReplayRequest.Builder pprr = originalReplayRequest.getPpRequest().toBuilder();
             pprr.addAllGroupNameFilter(pprecordings);
             rawDataRequest.setPpRequest(pprr.build());
-            
         }
         
+        if(!rawDataRequest.hasPacketRequest() && !rawDataRequest.hasParameterRequest()) {
+            if(originalReplayRequest.hasParameterRequest()) {
+                throw new YamcsException("Cannot find a replay source for any parmeters from request: "+originalReplayRequest.getParameterRequest().toString());
+            } else {
+                throw new YamcsException("Refusing to create an empty replay request");
+            }
+        }
     }
 
     private void createReplay() throws ProcessorException {
diff --git a/yamcs-core/src/main/java/org/yamcs/time/SimulationTimeService.java b/yamcs-core/src/main/java/org/yamcs/time/SimulationTimeService.java
index 6c0516ff0e..236442b67e 100755
--- a/yamcs-core/src/main/java/org/yamcs/time/SimulationTimeService.java
+++ b/yamcs-core/src/main/java/org/yamcs/time/SimulationTimeService.java
@@ -68,7 +68,7 @@ public void setSimSpeed(double simSpeed) {
     public static class SimTimeRestHandler extends RestHandler {
         
         @Route(path = "/api/time/:instance", method = { "PUT", "POST"})
-        public ChannelFuture setSimTime(RestRequest req) throws HttpException {
+        public void setSimTime(RestRequest req) throws HttpException {
             String instance = verifyInstance(req, req.getRouteParam("instance"));
             TimeService ts = YamcsServer.getInstance(instance).getTimeService();
             if(!(ts instanceof SimulationTimeService)) {
@@ -93,7 +93,7 @@ public ChannelFuture setSimTime(RestRequest req) throws HttpException {
                 sts.setSimElapsedTime(request.getSimElapsedTime());
             }
             
-            return sendOK(req);
+            sendOK(req);
         }
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/ServiceUnavailableException.java b/yamcs-core/src/main/java/org/yamcs/web/ServiceUnavailableException.java
new file mode 100755
index 0000000000..a62ba31770
--- /dev/null
+++ b/yamcs-core/src/main/java/org/yamcs/web/ServiceUnavailableException.java
@@ -0,0 +1,27 @@
+package org.yamcs.web;
+
+import io.netty.handler.codec.http.HttpResponseStatus;
+
+/**
+ * Something really wrong and unexpected occurred on the server. A bug.
+ */
+public class ServiceUnavailableException extends HttpException {
+    private static final long serialVersionUID = 1L;
+
+    public ServiceUnavailableException(Throwable t) {
+        super(t);
+    }
+
+    public ServiceUnavailableException(String message) {
+        super(message);
+    }
+
+    public ServiceUnavailableException(String message, Throwable t) {
+        super(message, t);
+    }
+
+    @Override
+    public HttpResponseStatus getStatus() {
+        return HttpResponseStatus.SERVICE_UNAVAILABLE;
+    }
+}
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/ClientRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/ClientRestHandler.java
index 76d7a68203..c7d68fc08b 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/ClientRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/ClientRestHandler.java
@@ -16,8 +16,6 @@
 import org.yamcs.web.BadRequestException;
 import org.yamcs.web.HttpException;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Gives information on clients (aka sessions)
  */
@@ -34,17 +32,17 @@ public ClientRestHandler() {
     }
     
     @Route(path="/api/clients", method="GET")
-    public ChannelFuture listClients(RestRequest req) throws HttpException {
+    public void listClients(RestRequest req) throws HttpException {
         Set<ClientInfo> clients = ManagementService.getInstance().getClientInfo();
         ListClientsResponse.Builder responseb = ListClientsResponse.newBuilder();
         for (ClientInfo client : clients) {
             responseb.addClient(ClientInfo.newBuilder(client).setState(ClientState.CONNECTED));
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
     }
     
     @Route(path="/api/clients/:id", method={ "PATCH", "PUT", "POST" })
-    public ChannelFuture patchClient(RestRequest req) throws HttpException {
+    public void patchClient(RestRequest req) throws HttpException {
         ClientInfo ci = verifyClient(req, req.getIntegerRouteParam("id"));
         
         EditClientRequest request = req.bodyAsMessage(SchemaRest.EditClientRequest.MERGE).build();
@@ -76,13 +74,14 @@ public ChannelFuture patchClient(RestRequest req) throws HttpException {
                 yprocReq.addClientId(ci.getId());
                 try {
                     mservice.connectToProcessor(yprocReq.build(), req.getAuthToken());
-                    return sendOK(req);
+                    sendOK(req);
+                    return;
                 } catch (YamcsException e) {
                     throw new BadRequestException(e.getMessage());
                 }
             }
         }
         
-        return sendOK(req);
+        sendOK(req);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/DisplayRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/DisplayRestHandler.java
index 36072928f5..29bcda6a22 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/DisplayRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/DisplayRestHandler.java
@@ -32,7 +32,7 @@
     private final static Logger log=LoggerFactory.getLogger(DisplayRestHandler.class);
 
     @Route(path="/api/displays/:instance", method="GET")
-    public ChannelFuture listDisplays(RestRequest req) throws HttpException {
+    public void listDisplays(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         ByteBuf cb=req.getChannelHandlerContext().alloc().buffer(1024);
         ByteBufOutputStream cbos=new ByteBufOutputStream(cb);
@@ -52,7 +52,7 @@ public ChannelFuture listDisplays(RestRequest req) throws HttpException {
                 writeFilesFromDir(json, new Path(), displayDir);
             }
             json.close();
-            return sendOK(req, MediaType.JSON, cb);
+            sendOK(req, MediaType.JSON, cb);
         } catch (IOException e) {
             throw new InternalServerErrorException(e);
         }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/InstanceRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/InstanceRestHandler.java
index aad5ad5ca6..e29978cdf2 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/InstanceRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/InstanceRestHandler.java
@@ -14,15 +14,13 @@
 import org.yamcs.protobuf.YamcsManagement.YamcsInstances;
 import org.yamcs.web.HttpException;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Handles incoming requests related to yamcs instances.
  */
 public class InstanceRestHandler extends RestHandler {
 
     @Route(path="/api/instances", method="GET")
-    public ChannelFuture listInstances(RestRequest req) throws HttpException {
+    public void listInstances(RestRequest req) throws HttpException {
         YamcsInstances instances = YamcsServer.getYamcsInstances();
         
         ListInstancesResponse.Builder instancesb = ListInstancesResponse.newBuilder();
@@ -31,19 +29,19 @@ public ChannelFuture listInstances(RestRequest req) throws HttpException {
             instancesb.addInstance(enriched);
         }
         
-        return sendOK(req, instancesb.build(), SchemaRest.ListInstancesResponse.WRITE);
+        sendOK(req, instancesb.build(), SchemaRest.ListInstancesResponse.WRITE);
     }
     
     @Route(path="/api/instances/:instance", method="GET")
-    public ChannelFuture getInstance(RestRequest req) throws HttpException {
+    public void getInstance(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YamcsInstance yamcsInstance = YamcsServer.getYamcsInstance(instance);
         YamcsInstance enriched = YamcsToGpbAssembler.enrichYamcsInstance(req, yamcsInstance);
-        return sendOK(req, enriched, SchemaYamcsManagement.YamcsInstance.WRITE);
+        sendOK(req, enriched, SchemaYamcsManagement.YamcsInstance.WRITE);
     }
     
     @Route(path="/api/instances/:instance/clients", method="GET")
-    public ChannelFuture listClientsForInstance(RestRequest req) throws HttpException {
+    public void listClientsForInstance(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         Set<ClientInfo> clients = ManagementService.getInstance().getClientInfo();
         ListClientsResponse.Builder responseb = ListClientsResponse.newBuilder();
@@ -52,6 +50,6 @@ public ChannelFuture listClientsForInstance(RestRequest req) throws HttpExceptio
                 responseb.addClient(ClientInfo.newBuilder(client).setState(ClientState.CONNECTED));
             }
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/LinkRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/LinkRestHandler.java
index 5fe5aa437f..63ae3f1cf0 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/LinkRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/LinkRestHandler.java
@@ -13,15 +13,13 @@
 import org.yamcs.web.HttpException;
 import org.yamcs.web.InternalServerErrorException;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Gives information on data links
  */
 public class LinkRestHandler extends RestHandler {
     
     @Route(path="/api/links/:instance?", method="GET")
-    public ChannelFuture listLinks(RestRequest req) throws HttpException {        
+    public void listLinks(RestRequest req) throws HttpException {        
         String instance = req.getRouteParam("instance");
         if (instance != null) {
             verifyInstance(req, instance);
@@ -35,19 +33,19 @@ public ChannelFuture listLinks(RestRequest req) throws HttpException {
                 responseb.addLink(link);
             }
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListLinkInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListLinkInfoResponse.WRITE);
     }
     
     @Route(path="/api/links/:instance/:name", method="GET")
     @Route(path="/api/links/:instance/link/:name", method="GET")
-    public ChannelFuture getLink(RestRequest req) throws HttpException {
+    public void getLink(RestRequest req) throws HttpException {
         LinkInfo linkInfo = verifyLink(req, req.getRouteParam("instance"), req.getRouteParam("name"));
-        return sendOK(req, linkInfo, SchemaYamcsManagement.LinkInfo.WRITE);
+        sendOK(req, linkInfo, SchemaYamcsManagement.LinkInfo.WRITE);
     }
     
     @Route(path="/api/links/:instance/:name", method={"PATCH", "PUT", "POST"})
     @Route(path="/api/links/:instance/link/:name", method={"PATCH", "PUT", "POST"})
-    public ChannelFuture editLink(RestRequest req) throws HttpException {
+    public void editLink(RestRequest req) throws HttpException {
         LinkInfo linkInfo = verifyLink(req, req.getRouteParam("instance"), req.getRouteParam("name"));
         
         EditLinkRequest request = req.bodyAsMessage(SchemaRest.EditLinkRequest.MERGE).build();
@@ -61,14 +59,16 @@ public ChannelFuture editLink(RestRequest req) throws HttpException {
             case "enabled":
                 try {
                     mservice.enableLink(linkInfo.getInstance(), linkInfo.getName());
-                    return sendOK(req);
+                    sendOK(req);
+                    return;
                 } catch (YamcsException e) {
                     throw new InternalServerErrorException(e);
                 }
             case "disabled":
                 try {
                     mservice.disableLink(linkInfo.getInstance(), linkInfo.getName());
-                    return sendOK(req);                    
+                    sendOK(req);                    
+                    return;
                 } catch (YamcsException e) {
                     throw new InternalServerErrorException(e);
                 }
@@ -76,7 +76,7 @@ public ChannelFuture editLink(RestRequest req) throws HttpException {
                 throw new BadRequestException("Unsupported link state '" + state + "'");
             }
         } else {
-            return sendOK(req);
+            sendOK(req);
         }
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedProtobufEncoder.java b/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedProtobufEncoder.java
index e8b49d5356..832cef41c9 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedProtobufEncoder.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedProtobufEncoder.java
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 
 import org.yamcs.api.MediaType;
 import org.yamcs.parameter.ParameterValueWithId;
@@ -12,6 +13,7 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 
 import io.netty.buffer.ByteBufOutputStream;
+import io.netty.channel.ChannelFuture;
 import io.protostuff.JsonIOUtil;
 
 /**
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedTransferEncoder.java b/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedTransferEncoder.java
index 2e244efa77..4d8f2b6082 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedTransferEncoder.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/ParameterReplayToChunkedTransferEncoder.java
@@ -37,7 +37,7 @@
     private ChunkedTransferStats stats;
 
     public ParameterReplayToChunkedTransferEncoder(RestRequest req, MediaType contentType, List<NamedObjectId> idList) throws HttpException {
-        super();
+        super(req.getCompletableFuture());
         this.req = req;
         this.contentType = contentType;
         this.idList = idList;
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/RestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/RestHandler.java
index aa1a771127..7177ee1d2c 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/RestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/RestHandler.java
@@ -57,14 +57,13 @@
     private static final Logger log = LoggerFactory.getLogger(RestHandler.class);
     private static final byte[] NEWLINE_BYTES = "\r\n".getBytes();
 
-    protected static ChannelFuture sendOK(RestRequest restRequest) {
-        ChannelHandlerContext ctx = restRequest.getChannelHandlerContext();
+    protected static void sendOK(RestRequest restRequest) {
         HttpResponse httpResponse = new DefaultFullHttpResponse(HTTP_1_1, OK);
         setContentLength(httpResponse, 0);
-        return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
+       completeRequest(restRequest, httpResponse);
     }
 
-    protected static <T extends MessageLite> ChannelFuture sendOK(RestRequest restRequest, T responseMsg, Schema<T> responseSchema) throws HttpException {
+    protected static <T extends MessageLite> void sendOK(RestRequest restRequest, T responseMsg, Schema<T> responseSchema) throws HttpException {
         ByteBuf body = restRequest.getChannelHandlerContext().alloc().buffer();
         ByteBufOutputStream channelOut = new ByteBufOutputStream(body);
         try {
@@ -86,22 +85,29 @@ protected static ChannelFuture sendOK(RestRequest restRequest) {
         HttpResponse httpResponse = new DefaultFullHttpResponse(HTTP_1_1, OK, body);
         setContentTypeHeader(httpResponse, restRequest.deriveTargetContentType().toString());
         setContentLength(httpResponse, body.readableBytes());
-        return HttpRequestHandler.sendOK(restRequest.getChannelHandlerContext(), restRequest.getHttpRequest(), httpResponse);
+        
+        completeRequest(restRequest, httpResponse);
     }
 
-    protected static ChannelFuture sendOK(RestRequest restRequest, MediaType contentType, ByteBuf body) {
-        ChannelHandlerContext ctx = restRequest.getChannelHandlerContext();
+    protected static void sendOK(RestRequest restRequest, MediaType contentType, ByteBuf body) {
         if (body == null) {
             HttpResponse httpResponse = new DefaultFullHttpResponse(HTTP_1_1, OK);
             setContentLength(httpResponse, 0);
-            return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
+            completeRequest(restRequest, httpResponse);
         } else {
             HttpResponse httpResponse = new DefaultFullHttpResponse(HTTP_1_1, OK, body);
             setContentTypeHeader(httpResponse, contentType.toString());
             setContentLength(httpResponse, body.readableBytes());
-            return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
+            completeRequest(restRequest, httpResponse);
         }
     }
+    
+    private static void completeRequest(RestRequest restRequest, HttpResponse httpResponse) {
+        ChannelFuture cf = HttpRequestHandler.sendOK(restRequest.getChannelHandlerContext(), restRequest.getHttpRequest(), httpResponse);
+        cf.addListener(l -> {
+            restRequest.getCompletableFuture().complete(null);
+        });
+    }
 
     protected static void sendRestError(RestRequest req, HttpResponseStatus status, Throwable t) {
         MediaType contentType = req.deriveTargetContentType();
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/RestParameterReplayListener.java b/yamcs-core/src/main/java/org/yamcs/web/rest/RestParameterReplayListener.java
index 755057ed0c..01de20245c 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/RestParameterReplayListener.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/RestParameterReplayListener.java
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 
 import org.yamcs.parameter.ParameterValue;
 import org.yamcs.parameter.ParameterValueWithId;
@@ -14,17 +15,27 @@
  * used in multiple places
  */
 public abstract class RestParameterReplayListener extends RestReplayListener {
-    
     private boolean noRepeat;
-    
     private Value lastValue;
+    final CompletableFuture<Void> cf;
     
-    public RestParameterReplayListener() {
+    /**
+     * 
+     * @param cf is the completable future of the rest request - used to end exceptionally in case of error
+     */
+    public RestParameterReplayListener(CompletableFuture<Void> cf) {
         super();
+        this.cf = cf;
     }
-    
-    public RestParameterReplayListener(long pos, int limit) {
+    /**
+     * 
+     * @param pos
+     * @param limit
+     * @param cf is the completable future of the rest request - used to end exceptionally in case of error
+     */
+    public RestParameterReplayListener(long pos, int limit, CompletableFuture<Void> cf) {
         super(pos, limit);
+        this.cf = cf;
     }
     
     public void setNoRepeat(boolean noRepeat) {
@@ -63,4 +74,8 @@ public ParameterValueWithId filter(ParameterValueWithId pvwid) {
             return pvwid;
         }
     }  
+
+    public void replayFailed(Throwable t){
+        cf.completeExceptionally(t);
+    }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/RestReplayListener.java b/yamcs-core/src/main/java/org/yamcs/web/rest/RestReplayListener.java
index 1781ac5267..b7073a7a35 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/RestReplayListener.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/RestReplayListener.java
@@ -46,7 +46,7 @@ public boolean isReplayAbortRequested() {
     
     @Override
     public void failed(State from, Throwable failure) {
-        replayFinished();
+        replayFailed(failure);
     }
     
     @Override
@@ -111,4 +111,5 @@ public ParameterValueWithId filter(ParameterValueWithId pvwid) {
     protected void onParameterData(ParameterValueWithId pvwid){};
     
     public void replayFinished(){};
+    public void replayFailed(Throwable t){};
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/RestRequest.java b/yamcs-core/src/main/java/org/yamcs/web/rest/RestRequest.java
index 8c92be0aa2..0f441c5d1a 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/RestRequest.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/RestRequest.java
@@ -7,6 +7,8 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.yamcs.TimeInterval;
 import org.yamcs.api.MediaType;
@@ -49,12 +51,16 @@
     private AuthenticationToken token;
     private RouteMatch routeMatch;
     private static JsonFactory jsonFactory = new JsonFactory();
+    CompletableFuture<Void> cf = new CompletableFuture<>();
+    static AtomicInteger counter = new AtomicInteger(); 
+    final int requestId;
     
     public RestRequest(ChannelHandlerContext channelHandlerContext, FullHttpRequest httpRequest, QueryStringDecoder qsDecoder, AuthenticationToken token) {
         this.channelHandlerContext = channelHandlerContext;
         this.httpRequest = httpRequest;
         this.token = token;
         this.qsDecoder = qsDecoder;
+        this.requestId = counter.incrementAndGet();
     }
     
     void setRouteMatch(RouteMatch routeMatch) {
@@ -76,6 +82,14 @@ public String getRouteParam(String name) {
         return routeMatch.regexMatch.group(name);
     }
     
+    /**
+     * 
+     * @return unique across running yamcs server rest request id used to aid in tracking the request executin in the log file
+     * 
+     */
+    public int getRequestId() {
+        return requestId;
+    }
     public long getLongRouteParam(String name) throws BadRequestException {
         String routeParam = routeMatch.regexMatch.group(name);
         try {
@@ -397,6 +411,17 @@ public String getBaseURL() {
         return (host != null) ? scheme + host : "";
     }
     
+    /**
+     * 
+     * When the request is finished, the CompleteableFuture has to be used to signal the end.
+     * 
+     * 
+     * @return future to be used to signal the end of processing the request
+     * 
+     */
+    public CompletableFuture<Void> getCompletableFuture() {
+        return cf;
+    }
     
     /**
      * Returns true if the request specifies descending by use of the query string paramter 'order=desc'
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/Router.java b/yamcs-core/src/main/java/org/yamcs/web/rest/Router.java
index 49d5bf0030..9435a9be7a 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/Router.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/Router.java
@@ -14,12 +14,12 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
-import java.util.concurrent.CompletableFuture;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.yamcs.YamcsException;
 import org.yamcs.YamcsVersion;
 import org.yamcs.parameterarchive.ParameterArchiveMaintenanceRestHandler;
 import org.yamcs.protobuf.Rest.GetApiOverviewResponse;
@@ -51,8 +51,6 @@
 import org.yamcs.web.rest.processor.ProcessorParameterRestHandler;
 import org.yamcs.web.rest.processor.ProcessorRestHandler;
 
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpMethod;
@@ -168,19 +166,20 @@ public void handleHttpRequest(ChannelHandlerContext ctx, FullHttpRequest req, Au
         try {
             // Decode first the path/qs difference, then url-decode the path
             String uri = new URI(qsDecoder.path()).getPath();
-
+            log.debug("R{}: Handling REST Request {} {}", restReq.getRequestId(), req.getMethod(), uri);
+            
             RouteMatch match = matchURI(req.getMethod(), uri);
             restReq.setRouteMatch(match);
             if (match != null) {
                 dispatch(restReq, match);
             } else {
-                log.info("No route matching URI: '{}'", req.getUri());
+                log.info("R{}: No route matching URI: '{}'", restReq.getRequestId(), req.getUri());
                 HttpRequestHandler.sendPlainTextError(ctx, req, HttpResponseStatus.NOT_FOUND);
             }
         } catch (URISyntaxException e) {
             RestHandler.sendRestError(restReq, HttpResponseStatus.INTERNAL_SERVER_ERROR, e);
         } catch (MethodNotAllowedException e) {
-            log.info("Method {} not allowed for URI: '{}'", req.getMethod(), req.getUri());
+            log.info("R{}: Method {} not allowed for URI: '{}'", restReq.getRequestId(), req.getMethod(), req.getUri());
             RestHandler.sendRestError(restReq, e.getStatus(), e);
         }
     }
@@ -227,61 +226,38 @@ protected RouteMatch matchURI(HttpMethod method, String uri) throws MethodNotAll
     protected void dispatch(RestRequest req, RouteMatch match) {
         try {
             RouteHandler target = match.routeConfig.routeHandler;
-
-            // FIXME handleRequest must never return null! Futures are used to follow up on handling
-            Object o = match.routeConfig.handle.invoke(target, req);
-            if (o == null) {
-                log.error("handler {} does not return a CompletableFuture", match.routeConfig.handle);
-                return; 
-            }
-            if(o instanceof ChannelFuture) {
-                handleCompletion((ChannelFuture) o);
-            } else if(o instanceof CompletableFuture<?>) {
-                CompletableFuture<ChannelFuture> cf =  (CompletableFuture<ChannelFuture>)o;
-                cf.whenComplete((channelFuture, e) -> {
-                    if(e!=null) {
-                        handleException(req, e);
-                    } else {
-                        handleCompletion((ChannelFuture) o);
-                    }
-                });
-            }
+            match.routeConfig.handle.invoke(target, req);
+            req.getCompletableFuture().whenComplete((channelFuture, e) -> {
+                if(e!=null) {
+                    handleException(req, e);
+                } else {
+                    log.debug("R{}: REST request execution finished successfully", req.getRequestId());
+                }
+            });
         } catch(Throwable t) {
             handleException(req, t);
         }
     }
 
-    private void handleCompletion(ChannelFuture responseFuture) {
-        /**
-         * Follow-up on the successful write, to provide some hints when a future was not actually
-         * successfully delivered.
-         */
-        responseFuture.addListener(new ChannelFutureListener() {
-            @Override
-            public void operationComplete(ChannelFuture future) throws Exception {
-                if (!future.isSuccess()) {
-                    log.error("Error writing out response to client", future.cause());
-                    future.channel().close();
-                }
-            }
-        });
-    }
     private void handleException(RestRequest req, Throwable t) {
         if(t instanceof InternalServerErrorException) {
             InternalServerErrorException e = (InternalServerErrorException)t;
-            log.error("Reporting internal server error to client", e);
+            log.error("R{}: Reporting internal server error to client", req.getRequestId(), e);
             RestHandler.sendRestError(req, e.getStatus(), e);
         } else if (t instanceof HttpException) {
             HttpException e = (HttpException)t;
-            log.warn("Sending nominal exception back to client: {}", e.getMessage());
-            RestHandler.sendRestError(req, e.getStatus(), e);
+            log.warn("R{}: Sending nominal exception back to client: {}", req.getRequestId(), e.getMessage());
+            RestHandler.sendRestError(req, e.getStatus(), e);        
+        } else if (t instanceof YamcsException) {
+            log.warn("R{}: Reporting internal server error to client: {}", req.getRequestId(), t.getMessage());
+            RestHandler.sendRestError(req, HttpResponseStatus.INTERNAL_SERVER_ERROR, t);
         } else {
-            log.error("Unexpected error " + t, t);
+            log.error("R{}: Unexpected error " + t, req.getRequestId(), t);
             RestHandler.sendRestError(req, HttpResponseStatus.INTERNAL_SERVER_ERROR, t);
         }
-        
+
     }
-    
+
     /*
      * Pattern matching loosely inspired from angular and express.js
      */
@@ -365,7 +341,7 @@ public int compareTo(RouteConfig o) {
     private final class OverviewRouteHandler extends RestHandler {
 
         @Route(path="/api", method="GET")
-        public ChannelFuture getApiOverview(RestRequest req) throws HttpException {
+        public void getApiOverview(RestRequest req) throws HttpException {
             GetApiOverviewResponse.Builder responseb = GetApiOverviewResponse.newBuilder();
             responseb.setYamcsVersion(YamcsVersion.version);
 
@@ -377,7 +353,7 @@ public ChannelFuture getApiOverview(RestRequest req) throws HttpException {
 
             urls.forEach(url -> responseb.addUrl(url));
 
-            return sendOK(req, responseb.build(), SchemaRest.GetApiOverviewResponse.WRITE);
+            sendOK(req, responseb.build(), SchemaRest.GetApiOverviewResponse.WRITE);
         }
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/UserRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/UserRestHandler.java
index eeb4b89406..d308dc4568 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/UserRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/UserRestHandler.java
@@ -11,8 +11,6 @@
 import org.yamcs.security.User;
 import org.yamcs.web.HttpException;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Handles incoming requests related to the user
  */
@@ -20,7 +18,7 @@
     
 
     @Route(path = "/api/user", method = "GET")
-    public ChannelFuture getUser(RestRequest req) throws HttpException {
+    public void getUser(RestRequest req) throws HttpException {
         User user = Privilege.getInstance().getUser(req.getAuthToken());
         
         UserInfo.Builder userInfob;
@@ -43,7 +41,7 @@ public ChannelFuture getUser(RestRequest req) throws HttpException {
         }
 
         UserInfo info = userInfob.build();
-        return sendOK(req, info, SchemaYamcsManagement.UserInfo.WRITE);
+        sendOK(req, info, SchemaYamcsManagement.UserInfo.WRITE);
     }
 
     private UserInfo.Builder buildFullyPrivilegedUser() {
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveAlarmRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveAlarmRestHandler.java
index 4c8adb52bd..9de4666559 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveAlarmRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveAlarmRestHandler.java
@@ -18,14 +18,12 @@
 import org.yamcs.yarch.Stream;
 import org.yamcs.yarch.Tuple;
 
-import io.netty.channel.ChannelFuture;
-
 public class ArchiveAlarmRestHandler extends RestHandler {
 
     @Route(path="/api/archive/:instance/alarms", method="GET")
     @Route(path="/api/archive/:instance/alarms/:parameter*", method="GET")
     //@Route(path="/api/archive/:instance/alarms/:parameter*/:triggerTime?", method="GET") // same comment as below
-    public ChannelFuture listAlarms(RestRequest req) throws HttpException {
+    public void listAlarms(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
                 
         long pos = req.getQueryParameterAsLong("pos", 0);
@@ -56,7 +54,7 @@ public void processTuple(Stream stream, Tuple tuple) {
             }
         });
         
-        return sendOK(req, responseb.build(), SchemaRest.ListAlarmsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListAlarmsResponse.WRITE);
     }
     
     /*
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveCommandRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveCommandRestHandler.java
index b7b96e3d7c..2f3fdd5e1b 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveCommandRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveCommandRestHandler.java
@@ -19,12 +19,10 @@
 import org.yamcs.yarch.Stream;
 import org.yamcs.yarch.Tuple;
 
-import io.netty.channel.ChannelFuture;
-
 public class ArchiveCommandRestHandler extends RestHandler {
     
     @Route(path = "/api/archive/:instance/commands/:name*")
-    public ChannelFuture listCommands(RestRequest req) throws HttpException {
+    public void listCommands(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         long pos = req.getQueryParameterAsLong("pos", 0);
@@ -51,6 +49,6 @@ public void processTuple(Stream stream, Tuple tuple) {
                 responseb.addEntry(che);
             }
         });
-        return sendOK(req, responseb.build(), SchemaRest.ListCommandsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListCommandsResponse.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveDownloadRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveDownloadRestHandler.java
index 37794d6ee1..ecc1c677fa 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveDownloadRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveDownloadRestHandler.java
@@ -129,7 +129,6 @@ public void downloadParameter(RestRequest req) throws HttpException {
         
         ReplayRequest rr = ArchiveHelper.toParameterReplayRequest(req, p, false);
         boolean noRepeat = req.getQueryParameterAsBoolean("norepeat", false);
-        
         if (req.asksFor(MediaType.CSV)) {
             List<NamedObjectId> idList = Arrays.asList(requestedId);
             RestParameterReplayListener l = new ParameterReplayToChunkedCSVEncoder(req, idList);
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveEventRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveEventRestHandler.java
index b4d5b02893..8b8b8c60ab 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveEventRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveEventRestHandler.java
@@ -33,7 +33,6 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
-import io.netty.channel.ChannelFuture;
 
 public class ArchiveEventRestHandler extends RestHandler {
     
@@ -42,7 +41,7 @@
     Map<String, EventProducer> eventProducerMap = new HashMap<>();
 
     @Route(path = "/api/archive/:instance/events", method = "GET")
-    public ChannelFuture listEvents(RestRequest req) throws HttpException {
+    public void listEvents(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         long pos = req.getQueryParameterAsLong("pos", 0);
@@ -89,7 +88,7 @@ public void processTuple(Stream stream, Tuple tuple) {
                 }
             });
             w.close();
-            return sendOK(req, MediaType.CSV, buf);
+            sendOK(req, MediaType.CSV, buf);
         } else {
             ListEventsResponse.Builder responseb = ListEventsResponse.newBuilder();
             RestStreams.streamAndWait(instance, sql, new RestStreamSubscriber(pos, limit) {
@@ -103,13 +102,13 @@ public void processTuple(Stream stream, Tuple tuple) {
                 }
             });
             
-            return sendOK(req, responseb.build(), SchemaRest.ListEventsResponse.WRITE);
+            sendOK(req, responseb.build(), SchemaRest.ListEventsResponse.WRITE);
         }
     }
 
 
     @Route(path = "/api/archive/:instance/events", method = "POST")
-    public ChannelFuture issueCommand(RestRequest req) throws HttpException {
+    public void issueCommand(RestRequest req) throws HttpException {
 
         // get event from request
         String instance = verifyInstance(req, req.getRouteParam("instance"));
@@ -130,6 +129,6 @@ public ChannelFuture issueCommand(RestRequest req) throws HttpException {
         // send event
         log.debug("Adding event from REST API: " + event.toString());
         eventProducer.sendEvent(event);
-        return sendOK(req);
+        sendOK(req);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchivePacketRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchivePacketRestHandler.java
index 53749eaea6..e15da96059 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchivePacketRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchivePacketRestHandler.java
@@ -31,14 +31,13 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
-import io.netty.channel.ChannelFuture;
 
 public class ArchivePacketRestHandler extends RestHandler {
     
     private static final Logger log = LoggerFactory.getLogger(ArchivePacketRestHandler.class);
     
     @Route(path = "/api/archive/:instance/packets/:gentime?", method = "GET")
-    public ChannelFuture listPackets(RestRequest req) throws HttpException {
+    public void listPackets(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         long pos = req.getQueryParameterAsLong("pos", 0);
@@ -81,7 +80,7 @@ public void processTuple(Stream stream, Tuple tuple) {
                     }
                 });
                 bufOut.close();
-                return sendOK(req, MediaType.OCTET_STREAM, buf);
+                sendOK(req, MediaType.OCTET_STREAM, buf);
             } catch (IOException e) {
                 throw new InternalServerErrorException(e);
             }
@@ -95,12 +94,12 @@ public void processTuple(Stream stream, Tuple tuple) {
                     responseb.addPacket(pdata);
                 }
             });
-            return sendOK(req, responseb.build(), SchemaRest.ListPacketsResponse.WRITE);
+            sendOK(req, responseb.build(), SchemaRest.ListPacketsResponse.WRITE);
         }
     }
     
     @Route(path = "/api/archive/:instance/packets/:gentime/:seqnum", method = "GET")
-    public ChannelFuture getPacket(RestRequest req) throws HttpException {
+    public void getPacket(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         long gentime = req.getDateRouteParam("gentime");
         int seqNum = req.getIntegerRouteParam("seqnum");
@@ -123,7 +122,7 @@ public void processTuple(Stream stream, Tuple tuple) {
         } else if (packets.size() > 1) {
             throw new InternalServerErrorException("Too many results");
         } else {
-            return sendOK(req, packets.get(0), SchemaYamcs.TmPacketData.WRITE);
+            sendOK(req, packets.get(0), SchemaYamcs.TmPacketData.WRITE);
         }
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameter2RestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameter2RestHandler.java
index 2c722ff3b9..7075c825c1 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameter2RestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameter2RestHandler.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
 import org.rocksdb.RocksDBException;
@@ -66,7 +67,7 @@
      * If no query parameters are defined, the series covers *all* data.
      */
     @Route(path = "/api/archive/:instance/parameters2/:name*/samples")
-    public ChannelFuture getParameterSamples(RestRequest req) throws HttpException {
+    public void getParameterSamples(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
 
@@ -127,7 +128,7 @@ public ChannelFuture getParameterSamples(RestRequest req) throws HttpException {
             series.addSample(ArchiveHelper.toGPBSample(s));
         }
 
-        return sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
+        sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
     }
 
     private void sampleDataFromCache(ParameterCache pcache, Parameter p, long start, long stop, RestDownsampler sampler) {
@@ -216,7 +217,7 @@ private static ParameterArchive getParameterArchive(String instance) throws BadR
         return d;
     }
     @Route(path = "/api/archive/:instance/parameters2/:name*")
-    public ChannelFuture listParameterHistory(RestRequest req) throws HttpException {
+    public void listParameterHistory(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
 
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -270,14 +271,14 @@ public ChannelFuture listParameterHistory(RestRequest req) throws HttpException
         if(realtimeProcessor!=null) {
             pcache = realtimeProcessor.getParameterCache();
         }
-
+        CompletableFuture<Void> cf = req.getCompletableFuture();
         if (req.asksFor(MediaType.CSV)) {
             ByteBuf buf = req.getChannelHandlerContext().alloc().buffer();
             try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new ByteBufOutputStream(buf)))) {
                 List<NamedObjectId> idList = Arrays.asList(requestedId);
                 ParameterFormatter csvFormatter = new ParameterFormatter(bw, idList);
                 limit++; // Allow one extra line for the CSV header
-                RestParameterReplayListener replayListener = new RestParameterReplayListener(0, limit) {
+                RestParameterReplayListener replayListener = new RestParameterReplayListener(0, limit, cf) {
                     @Override
                     public void onParameterData(ParameterValueWithId pvwid) {
                         try {
@@ -291,16 +292,17 @@ public void onParameterData(ParameterValueWithId pvwid) {
                 };
 
                 replayListener.setNoRepeat(noRepeat);
+                //FIXME - make async
                 retrieveParameterData(parchive, pcache, p, requestedId, mpvr, replayListener);
 
             } catch (IOException|DecodingException|RocksDBException e) {
                 throw new InternalServerErrorException(e);
             }
-            return sendOK(req, MediaType.CSV, buf);
+            sendOK(req, MediaType.CSV, buf);
         } else {
             ParameterData.Builder resultb = ParameterData.newBuilder();
             try {
-                RestParameterReplayListener replayListener = new RestParameterReplayListener(0, limit) {
+                RestParameterReplayListener replayListener = new RestParameterReplayListener(0, limit, cf) {
                     @Override
                     public void onParameterData(ParameterValueWithId  pvwid) {
                         resultb.addParameter(pvwid.toGbpParameterValue());
@@ -313,11 +315,12 @@ public void update(ParameterValueWithId pvwid) {
                 };
 
                 replayListener.setNoRepeat(noRepeat);
+              //FIXME - make async
                 retrieveParameterData(parchive, pcache, p, requestedId, mpvr, replayListener);
             } catch (DecodingException|RocksDBException e) {
                 throw new InternalServerErrorException(e);
             }
-            return sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
+            sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
         }
     }
 
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameterRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameterRestHandler.java
index faa70e40af..6d1e355718 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameterRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveParameterRestHandler.java
@@ -54,11 +54,10 @@
      * If no query parameters are defined, the series covers *all* data.
      * @param req
      *        rest request
-     * @return 
      * @throws HttpException 
      */
     @Route(path = "/api/archive/:instance/parameters/:name*/samples")
-    public CompletableFuture<ChannelFuture> getParameterSamples(RestRequest req) throws HttpException {
+    public void getParameterSamples(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -81,7 +80,7 @@
         
         RestDownsampler sampler = new RestDownsampler(rr.getStop());
         
-        CompletableFuture<ChannelFuture> completableFuture = new CompletableFuture<ChannelFuture>();
+        CompletableFuture<Void> completableFuture = req.getCompletableFuture();
         
         RestReplays.replay(instance, req.getAuthToken(), rr.build(), new RestReplayListener() {
             @Override
@@ -98,19 +97,22 @@ public void replayFinished() {
                     series.addSample(ArchiveHelper.toGPBSample(s));
                 }
                 try {
-                    ChannelFuture cf = sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
-                    completableFuture.complete(cf);                    
+                    sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
                 } catch (HttpException e) { //error encoding data 
                     completableFuture.completeExceptionally(e);
                 }
             }
+            
+            @Override
+            public void replayFailed(Throwable t) {
+                completableFuture.completeExceptionally(t);
+            }
         });
-        return completableFuture;
     }
     
     
     @Route(path = "/api/archive/:instance/parameters/:name*")
-    public CompletableFuture<ChannelFuture> listParameterHistory(RestRequest req) throws HttpException {
+    public void listParameterHistory(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -124,7 +126,7 @@ public void replayFinished() {
         
         
         ReplayRequest rr = ArchiveHelper.toParameterReplayRequest(req, p.getItem(), true);
-        CompletableFuture<ChannelFuture> completableFuture = new CompletableFuture<ChannelFuture>();
+        CompletableFuture<Void> completableFuture = req.getCompletableFuture();
         
         if (req.asksFor(MediaType.CSV)) {
             ByteBuf buf = req.getChannelHandlerContext().alloc().buffer();
@@ -132,7 +134,7 @@ public void replayFinished() {
                 List<NamedObjectId> idList = Arrays.asList(p.getRequestedId());
                 ParameterFormatter csvFormatter = new ParameterFormatter(bw, idList);
                 limit++; // Allow one extra line for the CSV header
-                RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit) {
+                RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit, completableFuture) {
                     @Override
                     public void onParameterData(List<ParameterValueWithId> params) {
                         try {
@@ -147,7 +149,7 @@ public void onParameterData(List<ParameterValueWithId> params) {
                         }
                     }
                     public void replayFinished() {
-                        completableFuture.complete(sendOK(req, MediaType.CSV, buf));
+                        sendOK(req, MediaType.CSV, buf);
                     }
                 };
                 replayListener.setNoRepeat(noRepeat);                
@@ -159,17 +161,17 @@ public void replayFinished() {
            
         } else {
             ParameterData.Builder resultb = ParameterData.newBuilder();
-            RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit) {
+            RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit, completableFuture) {
                 @Override
                 public void onParameterData(List<ParameterValueWithId> params) {
                     for(ParameterValueWithId pvalid: params) {
                         resultb.addParameter(pvalid.toGbpParameterValue());
                     }
                 }
+                @Override
                 public void replayFinished() {
                     try {
-                        ChannelFuture cf =  sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
-                        completableFuture.complete(cf);
+                        sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
                     } catch (HttpException e) { //error encoding data
                         completableFuture.completeExceptionally(e);
                     }
@@ -178,6 +180,5 @@ public void replayFinished() {
             replayListener.setNoRepeat(noRepeat);
             RestReplays.replay(instance, req.getAuthToken(), rr, replayListener);
         }
-        return completableFuture;
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveStreamRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveStreamRestHandler.java
index 329a8d43f7..95e6394394 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveStreamRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveStreamRestHandler.java
@@ -12,12 +12,10 @@
 import org.yamcs.yarch.Stream;
 import org.yamcs.yarch.YarchDatabase;
 
-import io.netty.channel.ChannelFuture;
-
 public class ArchiveStreamRestHandler extends RestHandler {
 
     @Route(path = "/api/archive/:instance/streams", method = "GET")
-    public ChannelFuture listStreams(RestRequest req) throws HttpException {
+    public void listStreams(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YarchDatabase ydb = YarchDatabase.getInstance(instance);
         
@@ -25,16 +23,16 @@ public ChannelFuture listStreams(RestRequest req) throws HttpException {
         for (AbstractStream stream : ydb.getStreams()) {
             responseb.addStream(ArchiveHelper.toStreamInfo(stream));
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListStreamsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListStreamsResponse.WRITE);
     }
     
     @Route(path = "/api/archive/:instance/streams/:name", method = "GET")
-    public ChannelFuture getStream(RestRequest req) throws HttpException {
+    public void getStream(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YarchDatabase ydb = YarchDatabase.getInstance(instance);
         Stream stream = verifyStream(req, ydb, req.getRouteParam("name"));
         
         StreamInfo response = ArchiveHelper.toStreamInfo(stream);
-        return sendOK(req, response, SchemaArchive.StreamInfo.WRITE);
+        sendOK(req, response, SchemaArchive.StreamInfo.WRITE);
     }    
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTableRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTableRestHandler.java
index df955085b0..87620005b7 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTableRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTableRestHandler.java
@@ -22,12 +22,10 @@
 import org.yamcs.yarch.Tuple;
 import org.yamcs.yarch.YarchDatabase;
 
-import io.netty.channel.ChannelFuture;
-
 public class ArchiveTableRestHandler extends RestHandler {
     
     @Route(path = "/api/archive/:instance/tables", method = "GET")
-    public ChannelFuture listTables(RestRequest req) throws HttpException {
+    public void listTables(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YarchDatabase ydb = YarchDatabase.getInstance(instance);
         
@@ -35,21 +33,21 @@ public ChannelFuture listTables(RestRequest req) throws HttpException {
         for (TableDefinition def : ydb.getTableDefinitions()) {
             responseb.addTable(ArchiveHelper.toTableInfo(def));
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListTablesResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListTablesResponse.WRITE);
     }
     
     @Route(path = "/api/archive/:instance/tables/:name", method = "GET")
-    public ChannelFuture getTable(RestRequest req) throws HttpException {
+    public void getTable(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YarchDatabase ydb = YarchDatabase.getInstance(instance);
         TableDefinition table = verifyTable(req, ydb, req.getRouteParam("name"));
         
         TableInfo response = ArchiveHelper.toTableInfo(table);
-        return sendOK(req, response, SchemaArchive.TableInfo.WRITE);
+        sendOK(req, response, SchemaArchive.TableInfo.WRITE);
     }
     
     @Route(path = "/api/archive/:instance/tables/:name/data", method = "GET")
-    public ChannelFuture getTableData(RestRequest req) throws HttpException {
+    public void getTableData(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         YarchDatabase ydb = YarchDatabase.getInstance(instance);
         TableDefinition table = verifyTable(req, ydb, req.getRouteParam("name"));
@@ -88,6 +86,6 @@ public void processTuple(Stream stream, Tuple tuple) {
             }
         });
         
-        return sendOK(req, responseb.build(), SchemaArchive.TableData.WRITE);
+        sendOK(req, responseb.build(), SchemaArchive.TableData.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTagRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTagRestHandler.java
index 493681e028..f7fe5ffc02 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTagRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/archive/ArchiveTagRestHandler.java
@@ -23,12 +23,11 @@
 import org.yamcs.yarch.YarchDatabase;
 import org.yamcs.yarch.YarchException;
 
-import io.netty.channel.ChannelFuture;
 
 public class ArchiveTagRestHandler extends RestHandler {
     
     @Route(path = "/api/archive/:instance/tags", method = "GET")
-    public ChannelFuture listTags(RestRequest req) throws HttpException {
+    public void listTags(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         TagDb tagDb = getTagDb(instance);
         
@@ -50,11 +49,11 @@ public void onTag(ArchiveTag tag) {
         } catch (IOException e) {
             throw new InternalServerErrorException("Could not load tags", e);
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListTagsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListTagsResponse.WRITE);
     }
     
     @Route(path = "/api/archive/:instance/tags/:tagTime/:tagId", method = "GET")
-    public ChannelFuture getTag(RestRequest req) throws HttpException {
+    public void getTag(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         TagDb tagDb = getTagDb(instance);
         
@@ -62,7 +61,7 @@ public ChannelFuture getTag(RestRequest req) throws HttpException {
         int tagId = req.getIntegerRouteParam("tagId");
 
         ArchiveTag tag = verifyTag(req, tagDb, tagTime, tagId); 
-        return sendOK(req, tag, SchemaYamcs.ArchiveTag.WRITE);
+        sendOK(req, tag, SchemaYamcs.ArchiveTag.WRITE);
     }
     
     /**
@@ -70,7 +69,7 @@ public ChannelFuture getTag(RestRequest req) throws HttpException {
      * knows the assigned id.
      */
     @Route(path = "/api/archive/:instance/tags", method = "POST")
-    public ChannelFuture createTag(RestRequest req) throws HttpException {
+    public void createTag(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         TagDb tagDb = getTagDb(instance);
         
@@ -94,14 +93,14 @@ public ChannelFuture createTag(RestRequest req) throws HttpException {
         }
 
         // Echo back the tag, with its assigned ID
-        return sendOK(req, newTag, SchemaYamcs.ArchiveTag.WRITE);
+        sendOK(req, newTag, SchemaYamcs.ArchiveTag.WRITE);
     }
     
     /**
      * Updates an existing tag. Returns the updated tag
      */
     @Route(path = "/api/archive/:instance/tags/:tagTime/:tagId", method = { "PATCH", "PUT", "POST" })
-    public ChannelFuture updateTag(RestRequest req) throws HttpException {
+    public void updateTag(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         TagDb tagDb = getTagDb(instance);
         ArchiveTag tag = verifyTag(req, tagDb, req.getDateRouteParam("tagTime"), req.getIntegerRouteParam("tagId"));
@@ -134,14 +133,14 @@ public ChannelFuture updateTag(RestRequest req) throws HttpException {
             throw new InternalServerErrorException(e);
         }
         
-        return sendOK(req, updatedTag, SchemaYamcs.ArchiveTag.WRITE);
+        sendOK(req, updatedTag, SchemaYamcs.ArchiveTag.WRITE);
     }
     
     /**
      * Deletes the identified tag. Returns the deleted tag
      */
     @Route(path = "/api/archive/:instance/tags/:tagTime/:tagId", method = "DELETE")
-    public ChannelFuture deleteTag(RestRequest req, TagDb tagDb, long tagTime, int tagId) throws HttpException {
+    public void deleteTag(RestRequest req, TagDb tagDb, long tagTime, int tagId) throws HttpException {
         ArchiveTag deletedTag;
         try {
             deletedTag = tagDb.deleteTag(tagTime, tagId);
@@ -151,7 +150,7 @@ public ChannelFuture deleteTag(RestRequest req, TagDb tagDb, long tagTime, int t
             throw new InternalServerErrorException(e);
         }
         
-        return sendOK(req, deletedTag, SchemaYamcs.ArchiveTag.WRITE);
+        sendOK(req, deletedTag, SchemaYamcs.ArchiveTag.WRITE);
     }
     
     private static TagDb getTagDb(String yamcsInstance) throws HttpException {
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBAlgorithmRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBAlgorithmRestHandler.java
index 76d971e7a9..963c4b4445 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBAlgorithmRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBAlgorithmRestHandler.java
@@ -13,7 +13,6 @@
 import org.yamcs.xtce.XtceDb;
 import org.yamcs.xtceproc.XtceDbFactory;
 
-import io.netty.channel.ChannelFuture;
 
 /**
  * Handles incoming requests related to algorithm info from the MDB
@@ -22,15 +21,15 @@
     
     @Route(path = "/api/mdb/:instance/algorithms", method = "GET")
     @Route(path = "/api/mdb/:instance/algorithms/:name*", method = "GET")
-    public ChannelFuture getAlgorithm(RestRequest req) throws HttpException {
+    public void getAlgorithm(RestRequest req) throws HttpException {
         if (req.hasRouteParam("name")) {
-            return getAlgorithmInfo(req);
+            getAlgorithmInfo(req);
         } else {
-            return listAlgorithms(req);
+            listAlgorithms(req);
         }
     }
     
-    private ChannelFuture getAlgorithmInfo(RestRequest req) throws HttpException {
+    private void getAlgorithmInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
 
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -38,10 +37,10 @@ private ChannelFuture getAlgorithmInfo(RestRequest req) throws HttpException {
         
         String instanceURL = req.getApiURL() + "/mdb/" + instance;
         AlgorithmInfo cinfo = XtceToGpbAssembler.toAlgorithmInfo(algo, instanceURL, DetailLevel.FULL, req.getOptions());
-        return sendOK(req, cinfo, SchemaMdb.AlgorithmInfo.WRITE);
+        sendOK(req, cinfo, SchemaMdb.AlgorithmInfo.WRITE);
     }
     
-    private ChannelFuture listAlgorithms(RestRequest req) throws HttpException {
+    private void listAlgorithms(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -74,6 +73,6 @@ private ChannelFuture listAlgorithms(RestRequest req) throws HttpException {
             }
         }
         
-        return sendOK(req, responseb.build(), SchemaRest.ListAlgorithmInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListAlgorithmInfoResponse.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBCommandRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBCommandRestHandler.java
index a26c31f572..4e0502fd8b 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBCommandRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBCommandRestHandler.java
@@ -24,15 +24,15 @@
     
     @Route(path = "/api/mdb/:instance/commands", method = "GET")
     @Route(path = "/api/mdb/:instance/commands/:name*", method = "GET")
-    public ChannelFuture getCommand(RestRequest req) throws HttpException {
+    public void getCommand(RestRequest req) throws HttpException {
         if (req.hasRouteParam("name")) {
-            return getCommandInfo(req);
+            getCommandInfo(req);
         } else {
-            return listCommands(req);
+            listCommands(req);
         }
     }
     
-    private ChannelFuture getCommandInfo(RestRequest req) throws HttpException {
+    private void getCommandInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
 
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -40,10 +40,10 @@ private ChannelFuture getCommandInfo(RestRequest req) throws HttpException {
         
         String instanceURL = req.getApiURL() + "/mdb/" + instance;
         CommandInfo cinfo = XtceToGpbAssembler.toCommandInfo(cmd, instanceURL, DetailLevel.FULL, req.getOptions());
-        return sendOK(req, cinfo, SchemaMdb.CommandInfo.WRITE);
+        sendOK(req, cinfo, SchemaMdb.CommandInfo.WRITE);
     }
     
-    private ChannelFuture listCommands(RestRequest req) throws HttpException {
+    private void listCommands(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -79,6 +79,6 @@ private ChannelFuture listCommands(RestRequest req) throws HttpException {
             }
         }
         
-        return sendOK(req, responseb.build(), SchemaRest.ListCommandInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListCommandInfoResponse.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBContainerRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBContainerRestHandler.java
index 3c55b04849..c66681c5db 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBContainerRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBContainerRestHandler.java
@@ -13,8 +13,6 @@
 import org.yamcs.xtce.XtceDb;
 import org.yamcs.xtceproc.XtceDbFactory;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Handles incoming requests related to container info from the MDB
  */
@@ -22,15 +20,15 @@
     
     @Route(path = "/api/mdb/:instance/containers", method = "GET")
     @Route(path = "/api/mdb/:instance/containers/:name*", method = "GET")
-    public ChannelFuture getContainer(RestRequest req) throws HttpException {
+    public void getContainer(RestRequest req) throws HttpException {
         if (req.hasRouteParam("name")) {
-            return getContainerInfo(req);
+            getContainerInfo(req);
         } else {
-            return listContainers(req);
+            listContainers(req);
         }
     }
     
-    private ChannelFuture getContainerInfo(RestRequest req) throws HttpException {
+    private void getContainerInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
 
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -38,10 +36,10 @@ private ChannelFuture getContainerInfo(RestRequest req) throws HttpException {
         
         String instanceURL = req.getApiURL() + "/mdb/" + instance;
         ContainerInfo cinfo = XtceToGpbAssembler.toContainerInfo(c, instanceURL, DetailLevel.FULL, req.getOptions());
-        return sendOK(req, cinfo, SchemaMdb.ContainerInfo.WRITE);
+        sendOK(req, cinfo, SchemaMdb.ContainerInfo.WRITE);
     }
     
-    private ChannelFuture listContainers(RestRequest req) throws HttpException {
+    private void listContainers(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -74,6 +72,6 @@ private ChannelFuture listContainers(RestRequest req) throws HttpException {
             }
         }
         
-        return sendOK(req, responseb.build(), SchemaRest.ListContainerInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListContainerInfoResponse.WRITE);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBParameterRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBParameterRestHandler.java
index fccb5e8ae8..aa3c9ed321 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBParameterRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBParameterRestHandler.java
@@ -25,8 +25,6 @@
 import org.yamcs.xtce.XtceDb;
 import org.yamcs.xtceproc.XtceDbFactory;
 
-import io.netty.channel.ChannelFuture;
-
 /**
  * Handles incoming requests related to parameter info from the MDB
  */
@@ -34,7 +32,7 @@
     final static Logger log = LoggerFactory.getLogger(MDBParameterRestHandler.class);
     
     @Route(path = "/api/mdb/:instance/parameters/bulk", method = { "GET", "POST" }, priority = true)
-    public ChannelFuture getBulkParameterInfo(RestRequest req) throws HttpException {
+    public void getBulkParameterInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -57,20 +55,20 @@ public ChannelFuture getBulkParameterInfo(RestRequest req) throws HttpException
             responseb.addResponse(response);
         }
         
-        return sendOK(req, responseb.build(), SchemaRest.BulkGetParameterInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.BulkGetParameterInfoResponse.WRITE);
     }
     
     @Route(path = "/api/mdb/:instance/parameters", method = "GET")
     @Route(path = "/api/mdb/:instance/parameters/:name*", method = "GET")
-    public ChannelFuture getParameter(RestRequest req) throws HttpException {
+    public void getParameter(RestRequest req) throws HttpException {
         if (req.hasRouteParam("name")) {
-            return getParameterInfo(req);
+            getParameterInfo(req);
         } else {
-            return listParameters(req);
+            listParameters(req);
         }
     }
     
-    private ChannelFuture getParameterInfo(RestRequest req) throws HttpException {
+    private void getParameterInfo(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         XtceDb mdb = XtceDbFactory.getInstance(instance);
@@ -78,10 +76,10 @@ private ChannelFuture getParameterInfo(RestRequest req) throws HttpException {
         
         String instanceURL = req.getApiURL() + "/mdb/" + instance;
         ParameterInfo pinfo = XtceToGpbAssembler.toParameterInfo(p, instanceURL, DetailLevel.FULL, req.getOptions());
-        return sendOK(req, pinfo, SchemaMdb.ParameterInfo.WRITE);
+        sendOK(req, pinfo, SchemaMdb.ParameterInfo.WRITE);
     }
     
-    private ChannelFuture listParameters(RestRequest req) throws HttpException {
+    private void listParameters(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -146,7 +144,7 @@ private ChannelFuture listParameters(RestRequest req) throws HttpException {
             }
         }
         
-        return sendOK(req, responseb.build(), SchemaRest.ListParameterInfoResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListParameterInfoResponse.WRITE);
     }
     
     private boolean parameterTypeMatches(Parameter p, Set<String> types) {
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBRestHandler.java
index 34a691a6ff..2e232a756a 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/mdb/MDBRestHandler.java
@@ -19,7 +19,6 @@
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
-import io.netty.channel.ChannelFuture;
 
 /**
  * Handles incoming requests related to parameters
@@ -29,7 +28,7 @@
     final static Logger log = LoggerFactory.getLogger(MDBRestHandler.class);
     
     @Route(path = "/api/mdb/:instance", method = "GET")
-    public ChannelFuture getMissionDatabase(RestRequest req) throws HttpException {
+    public void getMissionDatabase(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -40,10 +39,10 @@ public ChannelFuture getMissionDatabase(RestRequest req) throws HttpException {
             } catch (IOException e) {
                 throw new InternalServerErrorException("Could not serialize MDB", e);
             }
-            return sendOK(req, MediaType.JAVA_SERIALIZED_OBJECT, buf);
+            sendOK(req, MediaType.JAVA_SERIALIZED_OBJECT, buf);
         } else {
             MissionDatabase converted = YamcsToGpbAssembler.toMissionDatabase(req, instance, mdb);
-            return sendOK(req, converted, SchemaYamcsManagement.MissionDatabase.WRITE);
+            sendOK(req, converted, SchemaYamcsManagement.MissionDatabase.WRITE);
         }
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandQueueRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandQueueRestHandler.java
index 1a9a213476..a5441906ea 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandQueueRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandQueueRestHandler.java
@@ -25,34 +25,31 @@
 import org.yamcs.web.rest.RestRequest.Option;
 import org.yamcs.web.rest.Route;
 
-import io.netty.channel.ChannelFuture;
-
-
 public class ProcessorCommandQueueRestHandler extends RestHandler {
     
     @Route(path = "/api/processors/:instance/:processor/cqueues", method = "GET")
-    public ChannelFuture listQueues(RestRequest req) throws HttpException {
+    public void listQueues(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         
         ListCommandQueuesResponse.Builder response = ListCommandQueuesResponse.newBuilder();
         ManagementService managementService = ManagementService.getInstance();
         CommandQueueManager mgr = managementService.getCommandQueueManager(processor);
         mgr.getQueues().forEach(q -> response.addQueue(toCommandQueueInfo(req, q, true)));
-        return sendOK(req, response.build(), SchemaRest.ListCommandQueuesResponse.WRITE);
+        sendOK(req, response.build(), SchemaRest.ListCommandQueuesResponse.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor/cqueues/:name", method = "GET")
-    public ChannelFuture getQueue(RestRequest req) throws HttpException {
+    public void getQueue(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         CommandQueueManager mgr = verifyCommandQueueManager(processor);
         CommandQueue queue = verifyCommandQueue(req, mgr, req.getRouteParam("name"));
         
         CommandQueueInfo info = toCommandQueueInfo(req, queue, true);
-        return sendOK(req, info, SchemaCommanding.CommandQueueInfo.WRITE);
+        sendOK(req, info, SchemaCommanding.CommandQueueInfo.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor/cqueues/:name", method = { "PATCH", "PUT", "POST" })
-    public ChannelFuture editQueue(RestRequest req) throws HttpException {
+    public void editQueue(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         CommandQueueManager mgr = verifyCommandQueueManager(processor);
         CommandQueue queue = verifyCommandQueue(req, mgr, req.getRouteParam("name"));
@@ -79,11 +76,11 @@ public ChannelFuture editQueue(RestRequest req) throws HttpException {
             }
         }
         CommandQueueInfo qinfo = toCommandQueueInfo(req, updatedQueue, true);
-        return sendOK(req, qinfo, SchemaCommanding.CommandQueueInfo.WRITE);
+        sendOK(req, qinfo, SchemaCommanding.CommandQueueInfo.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor/cqueues/:name/entries", method = "GET")
-    public ChannelFuture listQueueEntries(RestRequest req) throws HttpException {
+    public void listQueueEntries(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         CommandQueueManager mgr = verifyCommandQueueManager(processor);
         CommandQueue queue = verifyCommandQueue(req, mgr, req.getRouteParam("name"));
@@ -93,11 +90,11 @@ public ChannelFuture listQueueEntries(RestRequest req) throws HttpException {
             CommandQueueEntry qEntry = ManagementGpbHelper.toCommandQueueEntry(queue, pc);
             responseb.addEntry(qEntry);
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListCommandQueueEntries.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListCommandQueueEntries.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor/cqueues/:cqueue/entries/:uuid", method = { "PATCH", "PUT", "POST" })
-    public ChannelFuture editQueueEntry(RestRequest req) throws HttpException {
+    public void editQueueEntry(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         CommandQueueManager mgr = verifyCommandQueueManager(processor);
         // CommandQueue queue = verifyCommandQueue(req, mgr, req.getRouteParam("cqueue"));
@@ -124,7 +121,7 @@ public ChannelFuture editQueueEntry(RestRequest req) throws HttpException {
             }
         }
         
-        return sendOK(req);
+        sendOK(req);
     }
 
     private CommandQueueInfo toCommandQueueInfo(RestRequest req, CommandQueue queue, boolean detail) {
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandRestHandler.java
index 0adff4a177..5fd732dd72 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorCommandRestHandler.java
@@ -30,7 +30,6 @@
 
 import com.google.protobuf.ByteString;
 
-import io.netty.channel.ChannelFuture;
 import org.yaml.snakeyaml.util.UriEncoder;
 
 /**
@@ -39,7 +38,7 @@
 public class ProcessorCommandRestHandler extends RestHandler {
     
     @Route(path = "/api/processors/:instance/:processor/commands/:name*", method = "POST")
-    public ChannelFuture issueCommand(RestRequest req) throws HttpException {
+    public void issueCommand(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         if (!processor.hasCommanding()) {
             throw new BadRequestException("Commanding not activated for this processor");
@@ -148,11 +147,11 @@ public ChannelFuture issueCommand(RestRequest req) throws HttpException {
         response.setSource(preparedCommand.getSource());
         response.setBinary(ByteString.copyFrom(preparedCommand.getBinary()));
         response.setHex(StringConverter.arrayToHexString(preparedCommand.getBinary()));
-        return sendOK(req, response.build(), SchemaRest.IssueCommandResponse.WRITE);
+        sendOK(req, response.build(), SchemaRest.IssueCommandResponse.WRITE);
     }
 
     @Route(path = "/api/processors/:instance/:processor/commandhistory/:name*", method = "POST")
-    public ChannelFuture updateCommandHistory(RestRequest req) throws HttpException {
+    public void updateCommandHistory(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         if (!processor.hasCommanding()) {
             throw new BadRequestException("Commanding not activated for this processor");
@@ -167,13 +166,10 @@ public ChannelFuture updateCommandHistory(RestRequest req) throws HttpException
                     processor.getCommandingManager().addToCommandHistory(cmdId, historyEntry.getKey(), historyEntry.getValue(), req.getAuthToken());
                 }
             }
-        }
-        catch (NoPermissionException e) {
+        } catch (NoPermissionException e) {
             throw new ForbiddenException(e);
-        } catch (YamcsException e) { // could be anything, consider as internal server error
-            throw new InternalServerErrorException(e);
-        }
+        } 
 
-        return sendOK(req);
+        sendOK(req);
     }
 }
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorParameterRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorParameterRestHandler.java
index 044df6162b..79c370d0a6 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorParameterRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorParameterRestHandler.java
@@ -50,7 +50,7 @@
     private final static Logger log = LoggerFactory.getLogger(ProcessorParameterRestHandler.class);
     
     @Route(path = "/api/processors/:instance/:processor/parameters/:name*/alarms/:seqnum", method = { "PATCH", "PUT", "POST" })
-    public ChannelFuture patchParameterAlarm(RestRequest req) throws HttpException {
+    public void patchParameterAlarm(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         AlarmServer alarmServer = verifyAlarmServer(processor);
         
@@ -73,7 +73,7 @@ public ChannelFuture patchParameterAlarm(RestRequest req) throws HttpException {
             try {
                 // TODO permissions on AlarmServer
                 alarmServer.acknowledge(p, seqNum, req.getUsername(), processor.getCurrentTime(), comment);
-                return sendOK(req);
+                sendOK(req);
             } catch (CouldNotAcknowledgeAlarmException e) {
                 log.debug("Did not acknowledge alarm " + seqNum + ". " + e.getMessage());
                 throw new BadRequestException(e.getMessage());
@@ -84,7 +84,7 @@ public ChannelFuture patchParameterAlarm(RestRequest req) throws HttpException {
     }
     
     @Route(path = "/api/processors/:instance/:processor/parameters/:name*", method = { "PUT", "POST" })
-    public ChannelFuture setSingleParameterValue(RestRequest req) throws HttpException {
+    public void setSingleParameterValue(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         SoftwareParameterManager mgr = verifySoftwareParameterManager(processor);
         
@@ -97,11 +97,11 @@ public ChannelFuture setSingleParameterValue(RestRequest req) throws HttpExcepti
         } catch (IllegalArgumentException e) {
             throw new BadRequestException(e.getMessage());
         }
-        return sendOK(req);
+        sendOK(req);
     }
     
     @Route(path = "/api/processors/:instance/:processor/parameters/mset", method = { "POST", "PUT" }, priority=true)
-    public ChannelFuture setParameterValues(RestRequest req) throws HttpException {
+    public void setParameterValues(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         SoftwareParameterManager mgr = verifySoftwareParameterManager(processor);
         
@@ -135,11 +135,11 @@ public ChannelFuture setParameterValues(RestRequest req) throws HttpException {
             throw new BadRequestException(e.getMessage());
         }
 
-        return sendOK(req);
+        sendOK(req);
     }
     
     @Route(path = "/api/processors/:instance/:processor/parameters/:name*", method = "GET")
-    public ChannelFuture getParameterValue(RestRequest req) throws HttpException {
+    public void getParameterValue(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         
         XtceDb mdb = XtceDbFactory.getInstance(processor.getInstance());
@@ -165,11 +165,11 @@ public ChannelFuture getParameterValue(RestRequest req) throws HttpException {
             pval = pvals.get(0);
         }
             
-        return sendOK(req, pval, SchemaPvalue.ParameterValue.WRITE);
+        sendOK(req, pval, SchemaPvalue.ParameterValue.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor/parameters/mget", method = {"GET", "POST"}, priority=true)
-    public ChannelFuture getParameterValues(RestRequest req) throws HttpException {
+    public void getParameterValues(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         
         BulkGetParameterValueRequest request = req.bodyAsMessage(SchemaRest.BulkGetParameterValueRequest.MERGE).build();
@@ -193,7 +193,7 @@ public ChannelFuture getParameterValues(RestRequest req) throws HttpException {
 
         BulkGetParameterValueResponse.Builder responseb = BulkGetParameterValueResponse.newBuilder();
         responseb.addAllValue(pvals);
-        return sendOK(req, responseb.build(), SchemaRest.BulkGetParameterValueResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.BulkGetParameterValueResponse.WRITE);
     }
     
     private List<ParameterValue> doGetParameterValues(YProcessor processor, AuthenticationToken authToken, List<NamedObjectId> ids, boolean fromCache, long timeout) throws HttpException {
diff --git a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorRestHandler.java b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorRestHandler.java
index 3136ba229b..f7c98823fc 100755
--- a/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorRestHandler.java
+++ b/yamcs-core/src/main/java/org/yamcs/web/rest/processor/ProcessorRestHandler.java
@@ -47,7 +47,7 @@
 public class ProcessorRestHandler extends RestHandler {
 
     @Route(path = "/api/processors/:instance/:processor/clients", method = "GET")
-    public ChannelFuture listClientsForProcessor(RestRequest req) throws HttpException {
+    public void listClientsForProcessor(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         
         Set<ClientInfo> clients = ManagementService.getInstance().getClientInfo();
@@ -58,39 +58,39 @@ public ChannelFuture listClientsForProcessor(RestRequest req) throws HttpExcepti
                 responseb.addClient(ClientInfo.newBuilder(client).setState(ClientState.CONNECTED));
             }
         }
-        return sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
+        sendOK(req, responseb.build(), SchemaRest.ListClientsResponse.WRITE);
     }
 
     @Route(path = "/api/processors", method = "GET")
-    public ChannelFuture listProcessors(RestRequest req) throws HttpException {
+    public void listProcessors(RestRequest req) throws HttpException {
         ListProcessorsResponse.Builder response = ListProcessorsResponse.newBuilder();
         for (YProcessor processor : YProcessor.getProcessors()) {
             response.addProcessor(toProcessorInfo(processor, req, true));
         }
-        return sendOK(req, response.build(), SchemaRest.ListProcessorsResponse.WRITE);
+        sendOK(req, response.build(), SchemaRest.ListProcessorsResponse.WRITE);
     }
 
     @Route(path = "/api/processors/:instance", method = "GET")
-    public ChannelFuture listProcessorsForInstance(RestRequest req) throws HttpException {
+    public void listProcessorsForInstance(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         
         ListProcessorsResponse.Builder response = ListProcessorsResponse.newBuilder();
         for (YProcessor processor : YProcessor.getProcessors(instance)) {
             response.addProcessor(toProcessorInfo(processor, req, true));
         }
-        return sendOK(req, response.build(), SchemaRest.ListProcessorsResponse.WRITE);
+        sendOK(req, response.build(), SchemaRest.ListProcessorsResponse.WRITE);
     }
     
     @Route(path = "/api/processors/:instance/:processor", method = "GET")
-    public ChannelFuture getProcessor(RestRequest req) throws HttpException {
+    public void getProcessor(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         
         ProcessorInfo pinfo = toProcessorInfo(processor, req, true);
-        return sendOK(req, pinfo, SchemaYamcsManagement.ProcessorInfo.WRITE);
+        sendOK(req, pinfo, SchemaYamcsManagement.ProcessorInfo.WRITE);
     }
 
     @Route(path = "/api/processors/:instance/:processor", method = { "PATCH", "PUT", "POST" })
-    public ChannelFuture editProcessor(RestRequest req) throws HttpException {
+    public void editProcessor(RestRequest req) throws HttpException {
         YProcessor processor = verifyProcessor(req, req.getRouteParam("instance"), req.getRouteParam("processor"));
         if (!processor.isReplay()) {
             throw new BadRequestException("Cannot update a non-replay processor");
@@ -149,11 +149,11 @@ public ChannelFuture editProcessor(RestRequest req) throws HttpException {
             processor.changeSpeed(replaySpeed);
         }
 
-        return sendOK(req);
+        sendOK(req);
     }
 
     @Route(path = "/api/processors/:instance", method = "POST")
-    public ChannelFuture createProcessorForInstance(RestRequest req) throws HttpException {
+    public void createProcessorForInstance(RestRequest req) throws HttpException {
         String instance = verifyInstance(req, req.getRouteParam("instance"));
         XtceDb mdb = XtceDbFactory.getInstance(instance);
         
@@ -308,7 +308,7 @@ public ChannelFuture createProcessorForInstance(RestRequest req) throws HttpExce
         ManagementService mservice = ManagementService.getInstance();
         try {
             mservice.createProcessor(reqb.build(), req.getAuthToken());
-            return sendOK(req);
+            sendOK(req);
         } catch (YamcsException e) {
             throw new BadRequestException(e.getMessage());
         }
diff --git a/yamcs-core/src/main/java/org/yamcs/xtceproc/Subscription.java b/yamcs-core/src/main/java/org/yamcs/xtceproc/Subscription.java
index aa01d4332e..eecff9034b 100755
--- a/yamcs-core/src/main/java/org/yamcs/xtceproc/Subscription.java
+++ b/yamcs-core/src/main/java/org/yamcs/xtceproc/Subscription.java
@@ -156,7 +156,7 @@ private void addContainer2InheritingContainer(SequenceContainer container, Seque
    
     /**
      * Get the set of all containers subscribed
-     * @return
+     * @return set of containers subscribed
      */
     public Collection<SequenceContainer> getContainers() {
         Set<SequenceContainer> r = new HashSet<SequenceContainer>();
@@ -164,6 +164,7 @@ private void addContainer2InheritingContainer(SequenceContainer container, Seque
         for(HashSet<SequenceContainer> hs:container2InheritingContainerMap.values()) {
             r.addAll(hs);
         }
+        r.addAll(container2EntryMap.keySet());
         return r;
     }
 
diff --git a/yamcs-core/src/test/java/org/yamcs/AbstractIntegrationTest.java b/yamcs-core/src/test/java/org/yamcs/AbstractIntegrationTest.java
index 0af4e9dd37..baede5f5a3 100755
--- a/yamcs-core/src/test/java/org/yamcs/AbstractIntegrationTest.java
+++ b/yamcs-core/src/test/java/org/yamcs/AbstractIntegrationTest.java
@@ -74,7 +74,7 @@
 
     @BeforeClass
     public static void beforeClass() throws Exception {
-        // enableDebugging();
+     //  enableDebugging();
         setupYamcs();
     }
 
diff --git a/yamcs-core/src/test/java/org/yamcs/IntegrationTestArchive.java b/yamcs-core/src/test/java/org/yamcs/IntegrationTestArchive.java
index bc41b32736..187bd8d0b5 100755
--- a/yamcs-core/src/test/java/org/yamcs/IntegrationTestArchive.java
+++ b/yamcs-core/src/test/java/org/yamcs/IntegrationTestArchive.java
@@ -10,9 +10,7 @@
 
 import org.junit.Test;
 import org.yamcs.api.YamcsApiException;
-import org.yamcs.api.YamcsConnectionProperties;
 import org.yamcs.api.rest.BulkRestDataReceiver;
-import org.yamcs.api.rest.RestClient;
 import org.yamcs.api.ws.WebSocketRequest;
 import org.yamcs.protobuf.Pvalue.ParameterData;
 import org.yamcs.protobuf.Pvalue.ParameterValue;
@@ -125,4 +123,18 @@ public void receiveData(byte[] data) throws YamcsApiException {
         assertEquals(4, arlist.size());
     }
 
+    @Test
+    public void testParameterHistory() throws Exception {        
+        generateData("2015-02-02T10:00:00", 3600);
+        String respDl = restClient.doRequest("/archive/IntegrationTest/parameters/REFMDB/ccsds-apid?start=2015-02-02T10:10:00&norepeat=true&limit=3", HttpMethod.GET, "").get();
+        
+        ParameterData pdata = fromJson(respDl, org.yamcs.protobuf.SchemaPvalue.ParameterData.MERGE).build();
+        assertEquals(1, pdata.getParameterCount());
+        ParameterValue pv = pdata.getParameter(0);
+        assertEquals(995, pv.getEngValue().getUint32Value());
+       
+        respDl = restClient.doRequest("/archive/IntegrationTest/parameters/REFMDB/ccsds-apid?start=2015-02-02T10:10:00&norepeat=false&limit=3", HttpMethod.GET, "").get();        
+        pdata = fromJson(respDl, org.yamcs.protobuf.SchemaPvalue.ParameterData.MERGE).build();
+        assertEquals(3, pdata.getParameterCount());
+    }
 }
diff --git a/yamcs-core/src/test/resources/IntegrationTest/yamcs.IntegrationTest.yaml b/yamcs-core/src/test/resources/IntegrationTest/yamcs.IntegrationTest.yaml
index 3206502db3..8a4f1c9c9d 100755
--- a/yamcs-core/src/test/resources/IntegrationTest/yamcs.IntegrationTest.yaml
+++ b/yamcs-core/src/test/resources/IntegrationTest/yamcs.IntegrationTest.yaml
@@ -8,7 +8,7 @@ services:
     - org.yamcs.archive.ReplayServer
     - org.yamcs.archive.IndexServer
     - org.yamcs.parameterarchive.ParameterArchive
-    - class: org.yamcs.YProcessorCreatorService
+    - class: org.yamcs.ProcessorCreatorService
       args: 
          name: "realtime"
          type: "realtime"
