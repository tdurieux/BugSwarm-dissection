diff --git a/src/main/java/com/squareup/javawriter/builders/AnnotationSpec.java b/src/main/java/com/squareup/javawriter/builders/AnnotationSpec.java
index 223e944447..da83660470 100755
--- a/src/main/java/com/squareup/javawriter/builders/AnnotationSpec.java
+++ b/src/main/java/com/squareup/javawriter/builders/AnnotationSpec.java
@@ -15,8 +15,8 @@
  */
 package com.squareup.javawriter.builders;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSortedMap;
-import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.Maps;
 import com.squareup.javawriter.ClassName;
 import java.lang.annotation.Annotation;
@@ -29,10 +29,6 @@
 
 /** A generated annotation on a declaration. */
 public final class AnnotationSpec {
-  public static final AnnotationSpec OVERRIDE = new Builder()
-      .type(ClassName.fromClass(Override.class))
-      .build();
-
   public final ClassName type;
   public final ImmutableSortedMap<String, Snippet> members;
 
@@ -41,30 +37,39 @@ private AnnotationSpec(Builder builder) {
     this.members = ImmutableSortedMap.copyOf(builder.members);
   }
 
-  void emit(CodeWriter codeWriter) {
+  void emit(CodeWriter codeWriter, boolean inline) {
+    String separator = inline ? "" : "\n";
+    String suffix = inline ? " " : "\n";
     if (members.isEmpty()) {
       // @Singleton
-      codeWriter.emit("@$T\n", type);
-    } else if (members.keySet().equals(ImmutableSortedSet.of("value"))) {
+      codeWriter.emit("@$T$L", type, suffix);
+    } else if (members.keySet().equals(ImmutableSet.of("value"))) {
       // @Named("foo")
       codeWriter.emit("@$T(");
       codeWriter.emit(getOnlyElement(members.values()));
-      codeWriter.emit(")\n");
+      codeWriter.emit(")$L", suffix);
     } else {
-      // @Column(
-      //   name = "updated_at",
-      //   nullable = false
-      // )
-      codeWriter.emit("@$T(\n", type);
+      // Inline:
+      //   @Column(name = "updated_at", nullable = false)
+      //
+      // Not inline:
+      //   @Column(
+      //       name = "updated_at",
+      //       nullable = false
+      //   )
+      codeWriter.emit("@$T($L", type, separator);
+      codeWriter.indent();
       codeWriter.indent();
       for (Iterator<Map.Entry<String, Snippet>> i = members.entrySet().iterator(); i.hasNext();) {
         Map.Entry<String, Snippet> entry = i.next();
         codeWriter.emit("$L = ", entry.getKey());
         codeWriter.emit(entry.getValue());
-        codeWriter.emit(i.hasNext() ? ",\n" : "\n");
+        if (i.hasNext()) codeWriter.emit(",");
+        codeWriter.emit("$L", separator);
       }
       codeWriter.unindent();
-      codeWriter.emit(")\n");
+      codeWriter.unindent();
+      codeWriter.emit(")$L", suffix);
     }
   }
 
diff --git a/src/main/java/com/squareup/javawriter/builders/CodeWriter.java b/src/main/java/com/squareup/javawriter/builders/CodeWriter.java
index f7b7a56428..1f905fc2f3 100755
--- a/src/main/java/com/squareup/javawriter/builders/CodeWriter.java
+++ b/src/main/java/com/squareup/javawriter/builders/CodeWriter.java
@@ -27,6 +27,7 @@
 import com.squareup.javawriter.TypeNames;
 import com.squareup.javawriter.WildcardName;
 import java.util.ArrayList;
+import java.util.EnumSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -41,9 +42,6 @@
  * honors imports, indentation, and deferred variable names.
  */
 final class CodeWriter {
-  private static final ImmutableList<AnnotationSpec> OVERRIDE_ONLY
-      = ImmutableList.of(AnnotationSpec.OVERRIDE);
-
   private final String indent = "  ";
   private final StringBuilder out;
   private final ImmutableMap<ClassName, String> importedTypes;
@@ -77,21 +75,18 @@ public CodeWriter popVisibleType(TypeName typeName) {
     return this;
   }
 
-  public void emitAnnotations(ImmutableList<AnnotationSpec> annotations) {
-    if (annotations.equals(OVERRIDE_ONLY)) {
-      emit("@$T ", Override.class);
-    } else {
-      for (AnnotationSpec annotationSpec : annotations) {
-        annotationSpec.emit(this);
-      }
+  public void emitAnnotations(ImmutableList<AnnotationSpec> annotations, boolean inline) {
+    for (AnnotationSpec annotationSpec : annotations) {
+      annotationSpec.emit(this, inline);
     }
   }
 
   public void emitModifiers(ImmutableSet<Modifier> modifiers) {
-    // TODO(jwilson): sort in standard order.
-    for (Modifier modifier : modifiers) {
-      emitAndIndent(Ascii.toLowerCase(modifier.name()));
-      emitAndIndent(" ");
+    if (!modifiers.isEmpty()) {
+      for (Modifier modifier : EnumSet.copyOf(modifiers)) {
+        emitAndIndent(Ascii.toLowerCase(modifier.name()));
+        emitAndIndent(" ");
+      }
     }
   }
 
@@ -161,7 +156,9 @@ private void emitType(Object arg) {
       WildcardName wildcardName = (WildcardName) typeName;
       TypeName extendsBound = wildcardName.extendsBound();
       TypeName superBound = wildcardName.superBound();
-      if (extendsBound != null) {
+      if (ClassName.fromClass(Object.class).equals(extendsBound)) {
+        emit("?");
+      } else if (extendsBound != null) {
         emit("? extends $T", extendsBound);
       } else if (superBound != null) {
         emit("? super $T", superBound);
diff --git a/src/main/java/com/squareup/javawriter/builders/FieldSpec.java b/src/main/java/com/squareup/javawriter/builders/FieldSpec.java
index 5736e02e9d..49bae9c527 100755
--- a/src/main/java/com/squareup/javawriter/builders/FieldSpec.java
+++ b/src/main/java/com/squareup/javawriter/builders/FieldSpec.java
@@ -20,7 +20,7 @@
 import com.squareup.javawriter.TypeName;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import javax.lang.model.element.Modifier;
 
@@ -39,11 +39,11 @@ private FieldSpec(Builder builder) {
     this.modifiers = ImmutableSet.copyOf(builder.modifiers);
     this.type = checkNotNull(builder.type);
     this.name = checkNotNull(builder.name);
-    this.initializer = checkNotNull(builder.initializer);
+    this.initializer = builder.initializer;
   }
 
   void emit(CodeWriter codeWriter) {
-    codeWriter.emitAnnotations(annotations);
+    codeWriter.emitAnnotations(annotations, false);
     codeWriter.emitModifiers(modifiers);
     codeWriter.emit("$T $L", type, name);
     if (initializer != null) {
@@ -71,7 +71,7 @@ public Builder addAnnotation(Class<? extends Annotation> annotation) {
     }
 
     public Builder addModifiers(Modifier... modifiers) {
-      this.modifiers.addAll(Arrays.asList(modifiers));
+      Collections.addAll(this.modifiers, modifiers);
       return this;
     }
 
diff --git a/src/main/java/com/squareup/javawriter/builders/MethodSpec.java b/src/main/java/com/squareup/javawriter/builders/MethodSpec.java
index b46d3717f0..7cc8eb63b3 100755
--- a/src/main/java/com/squareup/javawriter/builders/MethodSpec.java
+++ b/src/main/java/com/squareup/javawriter/builders/MethodSpec.java
@@ -22,7 +22,7 @@
 import com.squareup.javawriter.VoidName;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import javax.lang.model.element.Modifier;
 
@@ -47,7 +47,7 @@ private MethodSpec(Builder builder) {
   }
 
   void emit(CodeWriter codeWriter) {
-    codeWriter.emitAnnotations(annotations);
+    codeWriter.emitAnnotations(annotations, false);
     codeWriter.emitModifiers(modifiers);
     codeWriter.emit("$T $L(", returnType, name);
 
@@ -87,7 +87,7 @@ public Builder addAnnotation(Class<? extends Annotation> annotation) {
     }
 
     public Builder addModifiers(Modifier... modifiers) {
-      this.modifiers.addAll(Arrays.asList(modifiers));
+      Collections.addAll(this.modifiers, modifiers);
       return this;
     }
 
diff --git a/src/main/java/com/squareup/javawriter/builders/ParameterSpec.java b/src/main/java/com/squareup/javawriter/builders/ParameterSpec.java
index db343774a5..6a2167e40f 100755
--- a/src/main/java/com/squareup/javawriter/builders/ParameterSpec.java
+++ b/src/main/java/com/squareup/javawriter/builders/ParameterSpec.java
@@ -21,7 +21,7 @@
 import com.squareup.javawriter.TypeNames;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import javax.lang.model.element.Modifier;
 
@@ -42,7 +42,7 @@ private ParameterSpec(Builder builder) {
   }
 
   void emit(CodeWriter codeWriter) {
-    codeWriter.emitAnnotations(annotations);
+    codeWriter.emitAnnotations(annotations, true);
     codeWriter.emitModifiers(modifiers);
     codeWriter.emit("$T $L", type, name);
   }
@@ -64,7 +64,7 @@ public Builder addAnnotation(Class<? extends Annotation> annotation) {
     }
 
     public Builder addModifiers(Modifier... modifiers) {
-      this.modifiers.addAll(Arrays.asList(modifiers));
+      Collections.addAll(this.modifiers, modifiers);
       return this;
     }
 
diff --git a/src/main/java/com/squareup/javawriter/builders/TypeSpec.java b/src/main/java/com/squareup/javawriter/builders/TypeSpec.java
index 214cdf62b7..f9d324c0a1 100755
--- a/src/main/java/com/squareup/javawriter/builders/TypeSpec.java
+++ b/src/main/java/com/squareup/javawriter/builders/TypeSpec.java
@@ -21,7 +21,7 @@
 import com.squareup.javawriter.TypeName;
 import java.lang.annotation.Annotation;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import javax.lang.model.element.Modifier;
 
@@ -58,7 +58,7 @@ void emit(CodeWriter codeWriter) {
       codeWriter.emit(anonymousTypeArguments);
       codeWriter.emit(") {\n");
     } else {
-      codeWriter.emitAnnotations(annotations);
+      codeWriter.emitAnnotations(annotations, false);
       codeWriter.emitModifiers(modifiers);
       codeWriter.emit("class $L {\n", name.simpleName());
     }
@@ -78,7 +78,7 @@ void emit(CodeWriter codeWriter) {
     }
 
     codeWriter.unindent();
-    codeWriter.emit(anonymousTypeArguments != null ? "}" : "};");
+    codeWriter.emit(anonymousTypeArguments != null ? "}" : "}\n");
   }
 
   public static enum Type {
@@ -106,7 +106,7 @@ public Builder addAnnotation(Class<? extends Annotation> annotation) {
     }
 
     public Builder addModifiers(Modifier... modifiers) {
-      this.modifiers.addAll(Arrays.asList(modifiers));
+      Collections.addAll(this.modifiers, modifiers);
       return this;
     }
 
diff --git a/src/test/java/com/squareup/javawriter/builders/TypeSpecTest.java b/src/test/java/com/squareup/javawriter/builders/TypeSpecTest.java
index c3e07491f4..64340a2b16 100755
--- a/src/test/java/com/squareup/javawriter/builders/TypeSpecTest.java
+++ b/src/test/java/com/squareup/javawriter/builders/TypeSpecTest.java
@@ -19,6 +19,9 @@
 import com.squareup.javawriter.ClassName;
 import com.squareup.javawriter.ParameterizedTypeName;
 import com.squareup.javawriter.WildcardName;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.List;
 import javax.lang.model.element.Modifier;
 import org.junit.Test;
 
@@ -43,12 +46,48 @@
         + "import java.lang.String;\n"
         + "\n"
         + "class Taco {\n"
-        + "  @Override public final String toString() {\n"
+        + "  @Override\n"
+        + "  public final String toString() {\n"
         + "    return \"taco\";\n"
         + "  }\n"
         + "}\n");
   }
 
+  @Test public void interestingTypes() throws Exception {
+    TypeSpec taco = new TypeSpec.Builder()
+        .name(ClassName.create("com.squareup.tacos", "Taco"))
+        .addField(new FieldSpec.Builder()
+            .type(ParameterizedTypeName.create(ClassName.fromClass(List.class),
+                WildcardName.createWithUpperBound(ClassName.fromClass(Object.class))))
+            .name("extendsObject")
+            .build())
+        .addField(new FieldSpec.Builder()
+            .type(ParameterizedTypeName.create(ClassName.fromClass(List.class),
+                WildcardName.createWithUpperBound(ClassName.fromClass(Serializable.class))))
+            .name("extendsSerializable")
+            .build())
+        .addField(new FieldSpec.Builder()
+            .type(ParameterizedTypeName.create(ClassName.fromClass(List.class),
+                WildcardName.createWithLowerBound(ClassName.fromClass(String.class))))
+            .name("superString")
+            .build())
+        .build();
+    assertThat(toString(taco)).isEqualTo(""
+        + "package com.squareup.tacos;\n"
+        + "\n"
+        + "import java.io.Serializable;\n"
+        + "import java.lang.String;\n"
+        + "import java.util.List;\n"
+        + "\n"
+        + "class Taco {\n"
+        + "  List<?> extendsObject;\n"
+        + "\n"
+        + "  List<? extends Serializable> extendsSerializable;\n"
+        + "\n"
+        + "  List<? super String> superString;\n"
+        + "}\n");
+  }
+
   @Test public void anonymousInnerClass() throws Exception {
     ClassName foo = ClassName.create("com.squareup.tacos", "Foo");
     ClassName bar = ClassName.create("com.squareup.tacos", "Bar");
@@ -115,9 +154,11 @@
         + "\n"
         + "class Taco {\n"
         + "  static final Thang<Foo, Bar> NAME = new Thang<Foo, Bar>() {\n"
-        + "    @Override public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"
+        + "    @Override\n"
+        + "    public Thung<? super Bar> call(final Thung<? super Foo> thung) {\n"
         + "      return new SimpleThung<Bar>(thung) {\n"
-        + "        @Override public void doSomething(Bar bar) {\n"
+        + "        @Override\n"
+        + "        public void doSomething(Bar bar) {\n"
         + "          /* code snippets */\n"
         + "        }\n"
         + "      };\n"
