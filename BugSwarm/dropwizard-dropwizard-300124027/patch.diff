diff --git a/README.md b/README.md
index e1b4ac4e09..c92d8f8f58 100644
--- a/README.md
+++ b/README.md
@@ -3,8 +3,8 @@ Dropwizard
 [![Build Status](https://travis-ci.org/dropwizard/dropwizard.svg?branch=master)](https://travis-ci.org/dropwizard/dropwizard)
 [![Coverage Status](https://coveralls.io/repos/github/dropwizard/dropwizard/badge.svg?branch=master)](https://coveralls.io/github/dropwizard/dropwizard?branch=master)
 [![Maven Central](https://maven-badges.herokuapp.com/maven-central/io.dropwizard/dropwizard-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/io.dropwizard/dropwizard-core/)
-[![Javadoc](https://javadoc-emblem.rhcloud.com/doc/io.dropwizard/dropwizard-core/badge.svg)](http://www.javadoc.io/doc/io.dropwizard/dropwizard-core)
-[![Code Climate](https://codeclimate.com/github/dropwizard/dropwizard/badges/gpa.svg)](https://codeclimate.com/github/dropwizard/dropwizard)
+[![Javadoc](http://javadoc-badge.appspot.com/io.dropwizard/dropwizard-core.svg)](http://www.javadoc.io/doc/io.dropwizard/dropwizard-core)
+[![Maintainability](https://api.codeclimate.com/v1/badges/11a16ea08c8b5499e2b9/maintainability)](https://codeclimate.com/github/dropwizard/dropwizard/maintainability)
 
 *Dropwizard is a sneaky way of making fast Java web applications.*
 
diff --git a/docs/source/manual/configuration.rst b/docs/source/manual/configuration.rst
index a04b373d81..59f6f810c8 100644
--- a/docs/source/manual/configuration.rst
+++ b/docs/source/manual/configuration.rst
@@ -659,6 +659,7 @@ File
           timeZone: UTC
           logFormat: "%-5p [%d{ISO8601,UTC}] %c: %m%n%rEx"
           bufferSize: 8KB
+          immediateFlush: true
           filterFactories:
             - type: URI
 
@@ -697,6 +698,8 @@ neverBlock                   false                                      Prevent
                                                                         Set to true to disable blocking.
 bufferSize                   8KB                                        The buffer size of the underlying FileAppender (setting added in logback 1.1.10). Increasing this
                                                                         from the default of 8KB to 256KB is reported to significantly reduce thread contention.
+immediateFlush               true         If set to true, log events will be immediately flushed to disk. Immediate flushing is safer, but
+                                          it degrades logging throughput.
 ============================ =========================================  ==================================================================================================
 
 
diff --git a/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java b/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
index 3ad3b07b7b..18ffcf8003 100644
--- a/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
+++ b/dropwizard-client/src/main/java/io/dropwizard/client/HttpClientBuilder.java
@@ -13,7 +13,6 @@
 import io.dropwizard.lifecycle.Managed;
 import io.dropwizard.setup.Environment;
 import io.dropwizard.util.Duration;
-import javax.net.ssl.HostnameVerifier;
 import org.apache.http.ConnectionReuseStrategy;
 import org.apache.http.Header;
 import org.apache.http.HttpHost;
@@ -26,6 +25,7 @@
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.RedirectStrategy;
+import org.apache.http.client.ServiceUnavailableRetryStrategy;
 import org.apache.http.client.config.CookieSpecs;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.config.Registry;
@@ -46,6 +46,7 @@
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpProcessor;
 
+import javax.net.ssl.HostnameVerifier;
 import java.util.List;
 
 /**
@@ -78,6 +79,7 @@
     private boolean disableContentCompression;
     private List<? extends Header> defaultHeaders;
     private HttpProcessor httpProcessor;
+    private ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy;
 
     public HttpClientBuilder(MetricRegistry metricRegistry) {
         this.metricRegistry = metricRegistry;
@@ -221,6 +223,17 @@ public HttpClientBuilder using(HttpProcessor httpProcessor) {
         return this;
     }
 
+    /**
+     * Use the given {@link ServiceUnavailableRetryStrategy} instance
+     *
+     * @param serviceUnavailableRetryStrategy a {@link ServiceUnavailableRetryStrategy} instance
+     * @return {@code} this
+     */
+    public HttpClientBuilder using(ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy) {
+        this.serviceUnavailableRetryStrategy = serviceUnavailableRetryStrategy;
+        return this;
+    }
+
     /**
      * Disable support of decompression of responses
      *
@@ -389,6 +402,10 @@ public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
             builder.setHttpProcessor(httpProcessor);
         }
 
+        if (serviceUnavailableRetryStrategy != null) {
+            builder.setServiceUnavailableRetryStrategy(serviceUnavailableRetryStrategy);
+        }
+
         return new ConfiguredCloseableHttpClient(builder.build(), requestConfig);
     }
 
diff --git a/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java b/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
index 7723463886..666af257da 100644
--- a/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
+++ b/dropwizard-client/src/main/java/io/dropwizard/client/JerseyClientBuilder.java
@@ -14,6 +14,7 @@
 import io.dropwizard.util.Duration;
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.HttpRequestRetryHandler;
+import org.apache.http.client.ServiceUnavailableRetryStrategy;
 import org.apache.http.config.Registry;
 import org.apache.http.conn.DnsResolver;
 import org.apache.http.conn.routing.HttpRoutePlanner;
@@ -313,6 +314,17 @@ public JerseyClientBuilder using(CredentialsProvider credentialsProvider) {
         return this;
     }
 
+    /**
+     * Use the given {@link ServiceUnavailableRetryStrategy} instance.
+     *
+     * @param serviceUnavailableRetryStrategy a {@link ServiceUnavailableRetryStrategy} instance
+     * @return {@code this}
+     */
+    public JerseyClientBuilder using(ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy) {
+        apacheHttpClientBuilder.using(serviceUnavailableRetryStrategy);
+        return this;
+    }
+
     /**
      * Builds the {@link RxClient} instance.
      *
diff --git a/dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java b/dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
index d4b0272768..97e06a5af2 100644
--- a/dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
+++ b/dropwizard-client/src/test/java/io/dropwizard/client/HttpClientBuilderTest.java
@@ -35,6 +35,7 @@
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.RedirectStrategy;
+import org.apache.http.client.ServiceUnavailableRetryStrategy;
 import org.apache.http.client.config.CookieSpecs;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.HttpGet;
@@ -678,6 +679,19 @@ public void usesHttpProcessor() throws Exception {
             .isSameAs(httpProcessor);
     }
 
+    @Test
+    public void usesServiceUnavailableRetryStrategy() throws Exception {
+        ServiceUnavailableRetryStrategy serviceUnavailableRetryStrategy = mock(ServiceUnavailableRetryStrategy.class);
+        final ConfiguredCloseableHttpClient client =
+            builder.using(serviceUnavailableRetryStrategy)
+                .createClient(apacheBuilder, connectionManager, "test");
+        assertThat(client).isNotNull();
+        assertThat(FieldUtils.getField(httpClientBuilderClass,
+            "serviceUnavailStrategy", true)
+            .get(apacheBuilder))
+            .isSameAs(serviceUnavailableRetryStrategy);
+    }
+
     @Test
     public void allowsCustomBuilderConfiguration() throws Exception {
         CustomBuilder builder = new CustomBuilder(new MetricRegistry());
diff --git a/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java b/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
index 29d282844f..0fa1ca0b22 100644
--- a/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
+++ b/dropwizard-client/src/test/java/io/dropwizard/client/JerseyClientBuilderTest.java
@@ -13,6 +13,7 @@
 import io.dropwizard.lifecycle.setup.LifecycleEnvironment;
 import io.dropwizard.setup.Environment;
 import org.apache.http.client.CredentialsProvider;
+import org.apache.http.client.ServiceUnavailableRetryStrategy;
 import org.apache.http.config.Registry;
 import org.apache.http.config.RegistryBuilder;
 import org.apache.http.conn.DnsResolver;
@@ -272,6 +273,13 @@ public void usesACustomHostnameVerifier() {
         verify(apacheHttpClientBuilder).using(customHostnameVerifier);
     }
 
+    @Test
+    public void usesACustomServiceUnavailableRetryStrategy() {
+        final ServiceUnavailableRetryStrategy customServiceUnavailableRetryStrategy = mock(ServiceUnavailableRetryStrategy.class);
+        builder.using(customServiceUnavailableRetryStrategy);
+        verify(apacheHttpClientBuilder).using(customServiceUnavailableRetryStrategy);
+    }
+
     @Test
     public void usesACustomConnectionFactoryRegistry() throws Exception {
         final SSLContext ctx = SSLContext.getInstance(SSLConnectionSocketFactory.TLS);
diff --git a/dropwizard-example/pom.xml b/dropwizard-example/pom.xml
index ef37f6177a..1e482b1586 100644
--- a/dropwizard-example/pom.xml
+++ b/dropwizard-example/pom.xml
@@ -280,5 +280,30 @@
                 </plugins>
             </build>
         </profile>
+        <profile>
+            <id>jdk9</id>
+            <activation>
+                <jdk>9</jdk>
+            </activation>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.apache.maven.plugins</groupId>
+                        <artifactId>maven-compiler-plugin</artifactId>
+                        <configuration>
+                            <source>9</source>
+                            <target>9</target>
+                        </configuration>
+                    </plugin>
+                    <plugin>
+                        <groupId>org.apache.maven.plugins</groupId>
+                        <artifactId>maven-surefire-plugin</artifactId>
+                        <configuration>
+                            <argLine>--add-modules java.xml.bind</argLine>
+                        </configuration>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
     </profiles>
 </project>
diff --git a/dropwizard-example/src/main/resources/com/example/helloworld/views/mustache/person.mustache b/dropwizard-example/src/main/resources/com/example/helloworld/views/mustache/person.mustache
index 1084fe8431..ec2b94ab4d 100644
--- a/dropwizard-example/src/main/resources/com/example/helloworld/views/mustache/person.mustache
+++ b/dropwizard-example/src/main/resources/com/example/helloworld/views/mustache/person.mustache
@@ -4,6 +4,6 @@
     </head>
     <body>
         <h1>Hello, {{person.fullName}}!</h1>
-        You are an aweseome {{person.jobTitle}}!
+        You are an awesome {{person.jobTitle}}!
     </body>
-</html>
\ No newline at end of file
+</html>
diff --git a/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java b/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java
index cad5ed6400..6f93e914c2 100644
--- a/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java
+++ b/dropwizard-hibernate/src/main/java/io/dropwizard/hibernate/ScanningHibernateBundle.java
@@ -40,15 +40,15 @@ protected ScanningHibernateBundle(String[] pckgs, SessionFactoryFactory sessionF
     public static ImmutableList<Class<?>> findEntityClassesFromDirectory(String[] pckgs) {
         @SuppressWarnings("unchecked")
         final AnnotationAcceptingListener asl = new AnnotationAcceptingListener(Entity.class);
-        final PackageNamesScanner scanner = new PackageNamesScanner(pckgs, true);
-
-        while (scanner.hasNext()) {
-            final String next = scanner.next();
-            if (asl.accept(next)) {
-                try (final InputStream in = scanner.open()) {
-                    asl.process(next, in);
-                } catch (IOException e) {
-                    throw new RuntimeException("AnnotationAcceptingListener failed to process scanned resource: " + next);
+        try (final PackageNamesScanner scanner = new PackageNamesScanner(pckgs, true)) {
+            while (scanner.hasNext()) {
+                final String next = scanner.next();
+                if (asl.accept(next)) {
+                    try (final InputStream in = scanner.open()) {
+                        asl.process(next, in);
+                    } catch (IOException e) {
+                        throw new RuntimeException("AnnotationAcceptingListener failed to process scanned resource: " + next);
+                    }
                 }
             }
         }
diff --git a/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java b/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
index 70d3daac6c..c916638ff9 100644
--- a/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
+++ b/dropwizard-logging/src/main/java/io/dropwizard/logging/FileAppenderFactory.java
@@ -107,6 +107,16 @@
  *             the default of 8KB to 256KB is reported to significantly reduce thread contention.
  *         </td>
  *     </tr>
+ *      <tr>
+ *         <td>{@code immediateFlush}</td>
+ *         <td>{@code true}</td>
+ *         <td>
+ *             If set to true, log events will be immediately flushed to disk. Immediate flushing is safer, but
+ *             it degrades logging throughput.
+ *             See <a href="https://logback.qos.ch/manual/appenders.html#immediateFlush">the Logback documentation</a>
+ *             for details.
+ *         </td>
+ *     </tr>
  * </table>
  *
  * @see AbstractAppenderFactory
@@ -128,6 +138,8 @@
     @MinSize(1)
     private Size bufferSize = Size.bytes(FileAppender.DEFAULT_BUFFER_SIZE);
 
+    private boolean immediateFlush = true;
+
     @JsonProperty
     public String getCurrentLogFilename() {
         return currentLogFilename;
@@ -188,6 +200,15 @@ public void setBufferSize(Size bufferSize) {
         this.bufferSize = bufferSize;
     }
 
+    public boolean isImmediateFlush() {
+        return immediateFlush;
+    }
+
+    @JsonProperty
+    public void setImmediateFlush(boolean immediateFlush) {
+        this.immediateFlush = immediateFlush;
+    }
+
     @JsonIgnore
     @ValidationMethod(message = "must have archivedLogFilenamePattern if archive is true")
     public boolean isValidArchiveConfiguration() {
@@ -227,6 +248,7 @@ public boolean isValidFileConfiguration() {
         layoutEncoder.setLayout(buildLayout(context, layoutFactory));
         appender.setEncoder(layoutEncoder);
 
+        appender.setImmediateFlush(immediateFlush);
         appender.setPrudent(false);
         appender.addFilter(levelFilterFactory.build(threshold));
         getFilterFactories().forEach(f -> appender.addFilter(f.build()));
diff --git a/dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java b/dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
index 34d58c8a24..f2029f755c 100644
--- a/dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
+++ b/dropwizard-logging/src/test/java/io/dropwizard/logging/FileAppenderFactoryTest.java
@@ -6,6 +6,7 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.FileAppender;
+import ch.qos.logback.core.OutputStreamAppender;
 import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;
 import ch.qos.logback.core.rolling.RollingFileAppender;
 import ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy;
@@ -269,4 +270,23 @@ public void overrideBufferSize() throws NoSuchFieldException, IllegalAccessExcep
         FileSize bufferSizeFromAppender = (FileSize) bufferSizeField.get(fileAppender);
         assertThat(bufferSizeFromAppender.getSize()).isEqualTo(fileAppenderFactory.getBufferSize().toBytes());
     }
+
+    @Test
+    public void isImmediateFlushed() throws Exception {
+        FileAppenderFactory<ILoggingEvent> fileAppenderFactory = new FileAppenderFactory<>();
+        fileAppenderFactory.setArchive(false);
+
+        Field isImmediateFlushField = OutputStreamAppender.class.getDeclaredField("immediateFlush");
+        isImmediateFlushField.setAccessible(true);
+
+        fileAppenderFactory.setImmediateFlush(false);
+        AsyncAppender asyncAppender = (AsyncAppender) fileAppenderFactory.build(new LoggerContext(), "test", new DropwizardLayoutFactory(), new NullLevelFilterFactory<>(), new AsyncLoggingEventAppenderFactory());
+        Appender<ILoggingEvent> fileAppender = asyncAppender.getAppender("file-appender");
+        assertThat((Boolean) isImmediateFlushField.get(fileAppender)).isEqualTo(fileAppenderFactory.isImmediateFlush());
+
+        fileAppenderFactory.setImmediateFlush(true);
+        asyncAppender = (AsyncAppender) fileAppenderFactory.build(new LoggerContext(), "test", new DropwizardLayoutFactory(), new NullLevelFilterFactory<>(), new AsyncLoggingEventAppenderFactory());
+        fileAppender = asyncAppender.getAppender("file-appender");
+        assertThat((Boolean) isImmediateFlushField.get(fileAppender)).isEqualTo(fileAppenderFactory.isImmediateFlush());
+    }
 }
