diff --git a/BaragonCore/src/main/java/com/hubspot/baragon/models/UpstreamInfo.java b/BaragonCore/src/main/java/com/hubspot/baragon/models/UpstreamInfo.java
index 012aaef5..04b17e4e 100644
--- a/BaragonCore/src/main/java/com/hubspot/baragon/models/UpstreamInfo.java
+++ b/BaragonCore/src/main/java/com/hubspot/baragon/models/UpstreamInfo.java
@@ -12,6 +12,7 @@
   private final String upstream;
   private final Optional<String> requestId;
   private final Optional<String> rackId;
+  private final Optional<String> originalPath;
 
   @JsonCreator
   public static UpstreamInfo fromString(String value) {
@@ -22,21 +23,27 @@ public static UpstreamInfo fromString(String value) {
       String upstream = new String(BaseEncoding.base64Url().decode(split[0]), Charsets.UTF_8);
       Optional<String> requestId = split.length > 1 && !split[1].equals("") ? Optional.of(split[1]) : Optional.<String>absent();
       Optional<String> rackId = split.length > 2 && !split[2].equals("") ? Optional.of(split[2]) : Optional.<String>absent();
-      return new UpstreamInfo(upstream, requestId, rackId);
+      return new UpstreamInfo(upstream, requestId, rackId, Optional.of(value));
     }
   }
 
   public static UpstreamInfo fromUnEncodedString(String upstream) {
-    return new UpstreamInfo(upstream, Optional.<String>absent(), Optional.<String>absent());
+    return new UpstreamInfo(upstream, Optional.<String>absent(), Optional.<String>absent(), Optional.of(upstream));
+  }
+
+  public UpstreamInfo (String upstream, Optional<String> requestId, Optional<String> rackId) {
+    this(upstream, requestId, rackId, Optional.<String>absent());
   }
 
   @JsonCreator
   public UpstreamInfo(@JsonProperty("upstream") String upstream,
                       @JsonProperty("requestId") Optional<String> requestId,
-                      @JsonProperty("rackId") Optional<String> rackId) {
+                      @JsonProperty("rackId") Optional<String> rackId,
+                      @JsonProperty("originalPath") Optional<String> originalPath) {
     this.upstream = upstream;
     this.requestId = requestId;
     this.rackId = rackId;
+    this.originalPath = originalPath;
   }
 
   public String getUpstream() {
@@ -51,6 +58,10 @@ public String getUpstream() {
     return rackId;
   }
 
+  public Optional<String> getOriginalPath() {
+    return originalPath;
+  }
+
   @Override
   public String toString() {
     return upstream;
@@ -84,6 +95,9 @@ public boolean equals(Object o) {
     if (!upstream.equals(that.upstream)) {
       return false;
     }
+    if (!originalPath.equals(that.originalPath)) {
+      return false;
+    }
 
     return true;
   }
@@ -93,6 +107,7 @@ public int hashCode() {
     int result = upstream.hashCode();
     result = 31 * result + requestId.hashCode();
     result = 31 * result + rackId.hashCode();
+    result = 31 *result + originalPath.hashCode();
     return result;
   }
 }
diff --git a/BaragonData/src/main/java/com/hubspot/baragon/data/BaragonStateDatastore.java b/BaragonData/src/main/java/com/hubspot/baragon/data/BaragonStateDatastore.java
index 8108f298..4300ca7b 100644
--- a/BaragonData/src/main/java/com/hubspot/baragon/data/BaragonStateDatastore.java
+++ b/BaragonData/src/main/java/com/hubspot/baragon/data/BaragonStateDatastore.java
@@ -102,9 +102,9 @@ public void updateService(BaragonRequest request) throws Exception {
     String servicePath = String.format(SERVICE_FORMAT, serviceId);
     CuratorTransactionFinal transaction;
     if (nodeExists(servicePath)) {
-      transaction = curatorFramework.inTransaction().setData().forPath(String.format(SERVICE_FORMAT, serviceId), serialize(request.getLoadBalancerService())).and();
+      transaction = curatorFramework.inTransaction().setData().forPath(servicePath, serialize(request.getLoadBalancerService())).and();
     } else {
-      transaction = curatorFramework.inTransaction().create().forPath(String.format(SERVICE_FORMAT, serviceId), serialize(request.getLoadBalancerService())).and();
+      transaction = curatorFramework.inTransaction().create().forPath(servicePath, serialize(request.getLoadBalancerService())).and();
     }
 
     if (!request.getReplaceUpstreams().isEmpty()) {
@@ -119,7 +119,10 @@ public void updateService(BaragonRequest request) throws Exception {
         if (!nodeExists(addPath)) {
           Optional<String> matchingUpstreamPath = matchingUpstreamPath(currentUpstreams, upstreamInfo);
           if (matchingUpstreamPath.isPresent()) {
-            transaction.delete().forPath(String.format(UPSTREAM_FORMAT, serviceId, matchingUpstreamPath.get()));
+            String matchingPath = String.format(UPSTREAM_FORMAT, serviceId, matchingUpstreamPath.get());
+            if (nodeExists(matchingPath)) {
+              transaction.delete().forPath(matchingPath);
+            }
           }
           transaction.create().forPath(addPath).and();
         }
@@ -135,7 +138,7 @@ public void updateService(BaragonRequest request) throws Exception {
         String addPath = String.format(UPSTREAM_FORMAT, serviceId, upstreamInfo.toPath());
         if (!nodeExists(addPath)) {
           Optional<String> matchingUpstreamPath = matchingUpstreamPath(currentUpstreams, upstreamInfo);
-          if (matchingUpstreamPath.isPresent()) {
+          if (matchingUpstreamPath.isPresent() && nodeExists(matchingUpstreamPath.get())) {
             transaction.delete().forPath(String.format(UPSTREAM_FORMAT, serviceId, matchingUpstreamPath.get()));
           }
           transaction.create().forPath(addPath).and();
@@ -157,7 +160,7 @@ public void updateService(BaragonRequest request) throws Exception {
   private String getRemovePath(Collection<UpstreamInfo> currentUpstreams, UpstreamInfo toRemove) {
     for (UpstreamInfo upstreamInfo : currentUpstreams) {
       if (upstreamInfo.getUpstream().equals(toRemove.getUpstream())) {
-        return upstreamInfo.toPath();
+        return upstreamInfo.getOriginalPath().or(upstreamInfo.toPath());
       }
     }
     return toRemove.toPath();
