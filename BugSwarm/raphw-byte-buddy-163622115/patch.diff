diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderTypeStrategyTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderTypeStrategyTest.java
index e97c4fe11f..c0cf46ce0b 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderTypeStrategyTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderTypeStrategyTest.java
@@ -5,7 +5,7 @@
 import net.bytebuddy.dynamic.ClassFileLocator;
 import net.bytebuddy.dynamic.DynamicType;
 import net.bytebuddy.dynamic.scaffold.inline.MethodNameTransformer;
-import net.bytebuddy.matcher.ElementMatchers;
+import net.bytebuddy.matcher.LatentMatcher;
 import net.bytebuddy.test.utility.MockitoRule;
 import net.bytebuddy.test.utility.ObjectPropertyAssertion;
 import org.junit.Rule;
@@ -13,7 +13,6 @@
 import org.junit.rules.TestRule;
 import org.mockito.Mock;
 
-import static net.bytebuddy.matcher.ElementMatchers.isDeclaredBy;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Mockito.*;
@@ -64,12 +63,12 @@ public void testRedefine() throws Exception {
     @SuppressWarnings("unchecked")
     public void testRedefineDeclaredOnly() throws Exception {
         when(byteBuddy.redefine(typeDescription, classFileLocator)).thenReturn((DynamicType.Builder) dynamicTypeBuilder);
-        when(dynamicTypeBuilder.ignoreAlso(ElementMatchers.not(isDeclaredBy(typeDescription)))).thenReturn((DynamicType.Builder) dynamicTypeBuilder);
+        when(dynamicTypeBuilder.ignoreAlso(LatentMatcher.ForSelfDeclaredMethod.NOT_DECLARED)).thenReturn((DynamicType.Builder) dynamicTypeBuilder);
         assertThat(AgentBuilder.TypeStrategy.Default.REDEFINE_DECLARED_ONLY.builder(typeDescription, byteBuddy, classFileLocator, methodNameTransformer),
                 is((DynamicType.Builder) dynamicTypeBuilder));
         verify(byteBuddy).redefine(typeDescription, classFileLocator);
         verifyNoMoreInteractions(byteBuddy);
-        verify(dynamicTypeBuilder).ignoreAlso(ElementMatchers.not(isDeclaredBy(typeDescription)));
+        verify(dynamicTypeBuilder).ignoreAlso(LatentMatcher.ForSelfDeclaredMethod.NOT_DECLARED);
         verifyNoMoreInteractions(dynamicTypeBuilder);
     }
 
