diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstant.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstant.java
index 0124bdf691..10123e9455 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstant.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstant.java
@@ -11,6 +11,9 @@
 
 import java.io.*;
 
+/**
+ * A constant that represents a value in its serialized form.
+ */
 public class SerializedConstant implements StackManipulation {
 
     /**
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstantTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstantTest.java
new file mode 100755
index 0000000000..71b8ca57bb
--- /dev/null
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/constant/SerializedConstantTest.java
@@ -0,0 +1,38 @@
+package net.bytebuddy.implementation.bytecode.constant;
+
+import net.bytebuddy.implementation.Implementation;
+import net.bytebuddy.implementation.bytecode.StackManipulation;
+import net.bytebuddy.test.utility.ObjectPropertyAssertion;
+import org.junit.Test;
+import org.objectweb.asm.MethodVisitor;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Matchers.contains;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+
+public class SerializedConstantTest {
+
+    private static final String FOO = "foo";
+
+    @Test
+    public void testNullValue() throws Exception {
+        assertThat(SerializedConstant.of(null), is((StackManipulation) NullConstant.INSTANCE));
+    }
+
+    @Test
+    public void testSerialization() throws Exception {
+        MethodVisitor methodVisitor = mock(MethodVisitor.class);
+        Implementation.Context implementationContext = mock(Implementation.Context.class);
+        SerializedConstant.of(FOO).apply(methodVisitor, implementationContext);
+        verify(methodVisitor).visitLdcInsn(contains(FOO));
+        verifyZeroInteractions(implementationContext);
+    }
+
+    @Test
+    public void testObjectProperties() throws Exception {
+        ObjectPropertyAssertion.of(SerializedConstant.class).apply();
+    }
+}
