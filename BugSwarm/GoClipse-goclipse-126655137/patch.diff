diff --git a/plugin_ide.core.tests/src-lang/melnorme/lang/ide/core/operations/build/BuildManager_Test.java b/plugin_ide.core.tests/src-lang/melnorme/lang/ide/core/operations/build/BuildManager_Test.java
index cade707b88..09bcac3d32 100755
--- a/plugin_ide.core.tests/src-lang/melnorme/lang/ide/core/operations/build/BuildManager_Test.java
+++ b/plugin_ide.core.tests/src-lang/melnorme/lang/ide/core/operations/build/BuildManager_Test.java
@@ -356,7 +356,7 @@ protected void testBuildOperation_Vars(ProjectBuildInfo buildInfo, BuildTarget b
 		
 		ToolManager toolMgr = buildInfo.buildMgr.getToolManager();
 		BuildTargetOperation buildOperation = newBuildTarget.getBuildOperation(toolMgr, opMonitor);
-		return buildOperation.getConfiguredProcessBuilder().command();
+		return buildOperation.getConfiguredProcessBuilder2().command();
 	}
 	
 	/* -----------------  ----------------- */
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTargetOperation.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTargetOperation.java
index 68160f13a4..03b47321e3 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTargetOperation.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTargetOperation.java
@@ -20,8 +20,6 @@
 import melnorme.lang.ide.core.operations.ILangOperationsListener_Default.IOperationMonitor;
 import melnorme.lang.ide.core.operations.ToolManager;
 import melnorme.lang.ide.core.utils.ProgressSubTaskHelper;
-import melnorme.lang.tooling.data.StatusException;
-import melnorme.utilbox.collections.Indexable;
 import melnorme.utilbox.concurrency.OperationCancellation;
 import melnorme.utilbox.core.CommonException;
 import melnorme.utilbox.process.ExternalProcessHelper.ExternalProcessResult;
@@ -74,18 +72,19 @@ protected String getBuildOperationName() {
 		return "Building " + getBuildTargetName();
 	}
 	
-	public Indexable<String> getEffectiveProccessCommandLine() throws CommonException {
-		VariablesResolver variablesManager = toolManager.getVariablesManager(option(getProject()));
-		return buildCommand.validateCommandArguments(variablesManager);
+	public Iterable<String> getEffectiveProccessCommandLine() throws CommonException {
+		return getConfiguredProcessBuilder2().command();
 	}
 	
-	public ProcessBuilder getConfiguredProcessBuilder() throws StatusException {
+	public ProcessBuilder getConfiguredProcessBuilder2() throws CommonException {
 		VariablesResolver variablesManager = toolManager.getVariablesManager(option(getProject()));
-		return buildCommand.getProcessBuilder(variablesManager);
+		ProcessBuilder pb = buildCommand.getProcessBuilder(variablesManager);
+		pb.directory(getProjectLocation().toFile());
+		return pb;
 	}
 	
 	public ProcessBuilder getToolProcessBuilder() throws CommonException, OperationCancellation {
-		return getToolManager().modifyToolProcessBuilder(getConfiguredProcessBuilder());
+		return getToolManager().modifyToolProcessBuilder(getConfiguredProcessBuilder2());
 	}
 	
 	public void runBuildToolAndProcessOutput(ProcessBuilder pb, IProgressMonitor pm)
diff --git a/plugin_ide.core/src/com/googlecode/goclipse/core/operations/GoBuildManager.java b/plugin_ide.core/src/com/googlecode/goclipse/core/operations/GoBuildManager.java
index eccee77e3a..41fe5926ab 100755
--- a/plugin_ide.core/src/com/googlecode/goclipse/core/operations/GoBuildManager.java
+++ b/plugin_ide.core/src/com/googlecode/goclipse/core/operations/GoBuildManager.java
@@ -240,6 +240,9 @@ public GoBuildTargetOperation(BuildOperationParameters buildOpParams) throws Com
 		@Override
 		public ProcessBuilder getToolProcessBuilder() throws CommonException, OperationCancellation {
 			ProcessBuilder pb = super.getToolProcessBuilder();
+			if(workingDirectory != null) {
+				pb.directory(workingDirectory.toFile());
+			}
 			goEnv.setupProcessEnv(pb, true);
 			return pb;
 		}
@@ -320,7 +323,7 @@ public BuildTargetOperation getBuildOperation(BuildOperationParameters buildOpPa
 				
 				@Override
 				public void execute(IProgressMonitor pm) throws CommonException, OperationCancellation {
-					Indexable<String> commandLineOriginal = getEffectiveProccessCommandLine();
+					Indexable<String> commandLineOriginal = new ArrayList2<>(getEffectiveProccessCommandLine());
 					
 					ProcessBuilder pb = getToolProcessBuilder();
 					
diff --git a/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/build/EnvironmentSettingsEditor.java b/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/build/EnvironmentSettingsEditor.java
index 65330831ba..d1ed7996da 100755
--- a/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/build/EnvironmentSettingsEditor.java
+++ b/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/build/EnvironmentSettingsEditor.java
@@ -1,5 +1,7 @@
 package melnorme.lang.ide.ui.build;
 
+import static melnorme.utilbox.core.Assert.AssertNamespace.assertNotNull;
+
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -42,6 +44,7 @@
 import _org.eclipse.debug.internal.ui.SWTFactory;
 import melnorme.lang.ide.ui.LangImages;
 import melnorme.lang.tooling.ops.EnvironmentSettings;
+import melnorme.util.swt.SWTUtil;
 import melnorme.util.swt.components.AbstractWidget;
 import melnorme.util.swt.components.fields.FieldCompositeWidget;
 import melnorme.util.swt.jface.AbstractContentProvider;
@@ -119,6 +122,9 @@ protected void _verifyContract_IDisableableComponent() {
 	 */
 	public EnvironmentSettingsEditor() {
 		super(false);
+		
+		field().set(new EnvironmentSettings());
+		field().addListener((newValue) -> assertNotNull(newValue));
 	}
 	
 	{
@@ -171,8 +177,10 @@ public void widgetSelected(SelectionEvent e) {
 		replaceEnvironment= SWTFactory.createRadioButton(comp, LaunchConfigurationsMessages.EnvironmentTab_17);
 		
 		field().addListener(true, (newValue) -> {
-			appendEnvironment.setSelection(newValue.appendEnv);
-	        replaceEnvironment.setSelection(!newValue.appendEnv);
+			if(SWTUtil.isOkToUse(appendEnvironment)) {
+				appendEnvironment.setSelection(newValue.appendEnv);
+		        replaceEnvironment.setSelection(!newValue.appendEnv);
+			}
 		});
 	}
 	
@@ -259,8 +267,10 @@ public void controlResized(ControlEvent e) {
 		});
 		
 		field().addListener(true, (newValue) -> {
-			environmentTable.setInput(field().get());
-			environmentTable.refresh();
+			if(SWTUtil.isOkToUse(environmentTable.getTable())) {
+				environmentTable.setInput(field().get());
+				environmentTable.refresh();
+			}
 		});
 	}
 	
diff --git a/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/fields/FieldDialog.java b/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/fields/FieldDialog.java
index fdcfed1ed9..cb1b7a6aab 100755
--- a/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/fields/FieldDialog.java
+++ b/plugin_ide.ui/src-lang/melnorme/lang/ide/ui/fields/FieldDialog.java
@@ -39,9 +39,9 @@ protected Control createDialogArea(Composite parent) {
 	}
 	
 	public VALUE openDialog(VALUE initialValue) throws OperationCancellation {
-		int result = open();
-		
 		fieldEditor.field().set(initialValue);
+		
+		int result = open();
 		if(result == Dialog.OK) {
 			return fieldEditor.field().get();
 		}
