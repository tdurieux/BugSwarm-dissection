diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
index af3437f4d9..b13ea2a2bb 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/Codelist.rst
@@ -1246,8 +1246,8 @@ As a result of above settings, when characters other than M, F are stored in ``g
 
     ``@ExistInCodeList`` input validation supports only the implementation class (\ ``String``\  etc) of \ ``CharSequence``\  interface or \ ``Character``\  type.
     Therefore, even if the fields with \ ``@ExistInCodeList``\ may contain integer values, they should be defined as \ ``String``\ data type. (such as Year/Month/Day)
-    
-    Also, because \ ``@ExistInCodeList``\ does not correspond to the values in the collection,it is necessary to device the implementation in order to correspond \ ``@ExistInCodeList``\ annotation to multiple selectable screen items (check boxes, multiple selection drop down, etc.)  
+
+    Also, because \ ``@ExistInCodeList``\ does not correspond to the values in the collection,it is necessary to device the implementation in order to correspond \ ``@ExistInCodeList``\ annotation to multiple selectable screen items (check boxes, multiple selection drop down, etc.)
     For details, please refer :ref:`Validation_for_parameter_object_in_collection_corresponding_annotation`. 
 
 |
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
index 62c6992b38..b3000bf773 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
@@ -135,15 +135,12 @@ An example of adding libraries which are required when running Bean Validation 1
 Single item check
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-For the implementation of single item check,
+For the implementation of single item check following points are necessary,
 
 * Bean Validation annotation should be assigned to the field of form class
 * \ ``@Validated``\  annotation should be assigned in Controller for validation
 * Tag for displaying validation error message should be added to JSP
 
-
-
-
 .. note::
 
   \ ``<mvc:annotation-driven>``\  settings are carried out in spring-mvc.xml, Bean Validation is enabled.
@@ -2227,6 +2224,8 @@ This guideline classifies the definition as follows.
 
 When ValidationMessages.properties is not provided, \ :ref:`Default messages provided by Hibernate Validator<Validation_default_message_in_hibernate_validator>`\  is used.
 
+By working with \ ``MessageSource``\, you can handle Japanese messages directly without Native to Ascii.
+For details,please refer \ :ref:`Validation_without_native2ascii`
 
 .. _Validation_message_in_validationmessages:
 
@@ -2271,7 +2270,6 @@ It is explained below using the following form used at the beginning of \ :ref:`
     javax.validation.constraints.NotNull.message=is required.
     # (1)
     javax.validation.constraints.Size.message=size is not in the range {min} through {max}.
-    # (2)
     javax.validation.constraints.Min.message=cannot be less than {value}.
     javax.validation.constraints.Max.message=cannot be greater than {value}.
     org.hibernate.validator.constraints.Email.message=is an invalid e-mail address.
@@ -2285,8 +2283,6 @@ It is explained below using the following form used at the beginning of \ :ref:`
        - Description
      * - | (1)
        - | It is possible to embed the value of attributes specified in the annotation using \ ``{Attribute name}``\ .
-     * - | (2)
-       - | It is possible to embed the invalid value using \ ``{value}``\ .
 
 When the form is sent with input fields left blank after adding the above settings, changed error messages are displayed as shown below.
 
@@ -2328,6 +2324,8 @@ To display an appropriate field name, it should be defined in \ **application-me
 .. code-block:: properties
 
   form property name=field name to be displayed
+  
+It is good to define field names in the form.
 
 Adding the same to our example.
 
@@ -2372,7 +2370,6 @@ Error messages are changed as follows.
      .. list-table::
         :header-rows: 1
         :widths: 10 90
-        :class: longtable
 
         * - Sr. No.
           - Description
@@ -2577,13 +2574,13 @@ Implementation example is shown below.
     import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
     @Documented
-    @Constraint(validatedBy = {})
+    @Constraint(validatedBy = {})// (1)
     @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })
     @Retention(RUNTIME)
-    @ReportAsSingleViolation // (1)
-    @Pattern(regexp = "[a-zA-Z0-9]*") // (2)
+    @ReportAsSingleViolation // (2)
+    @Pattern(regexp = "[a-zA-Z0-9]*") // (3)
     public @interface AlphaNumeric {
-        String message() default "{com.example.common.validation.AlphaNumeric.message}"; // (3)
+        String message() default "{com.example.common.validation.AlphaNumeric.message}"; // (4)
 
         Class<?>[] groups() default {};
 
@@ -2606,10 +2603,12 @@ Implementation example is shown below.
      * - Sr. No.
        - Description
      * - | (1)
-       - | This will consolidate error messages and return only the message of this annotation at the time of error.
+       - | When implementing using existing annotations, \ ``validatedBy``\ needs to be empty
      * - | (2)
-       - | Define rules used by this annotation.
+       - | This will consolidate error messages and return only the message of this annotation at the time of error.
      * - | (3)
+       - | Define rules used by this annotation.
+     * - | (4)
        - | Define default value of error message.
 
 * Implementation example of \ ``@NotNegative``\  annotation which is restricted to positive number
@@ -2752,6 +2751,433 @@ Implementation example is shown below.
     If multiple rules are set in a single annotation, their AND condition forms the composite annotation.
     In Hibernate Validator, \ ``@ConstraintComposition``\  annotation is provided to implement OR condition.
     Refer to \ `Hibernate Validator document <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/ch11.html#section-boolean-constraint-composition>`_\  for details.
+    
+    |
+    
+.. _Validation_for_parameter_object_in_collection_corresponding_annotation:
+
+How to check the values in the collection using Bean Validation's annotation
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+When dealing with multiple selectable screen items (such as checkboxes and multiple selection dropdown), it is common to treat screen items as collections of basic types such as \ ``String``\ in form classes.
+In the standard specification of Bean Validation, each value in the collection can not be checked by using Bean Validation annotation, but by using original features of Java SE 8 and Hibernate Validator, or if original functions of Java SE 8 and Hibernate Validator are not used, a wrapper class for the value of the screen item can be created and it can be treated as a collection so that the value in the collection using Bean Validation can be checked.
+
+
+Here, annotations to check whether the input value provided by the common library is a code value defined in the code list,
+input checking for Strings in the collection using \ ``org.terasoluna.gfw.common.codelist.ExistInCodeList``\ is explained as an example.
+
+Implementation method for matching \ ``@ExistInCodeList``\ annotation with multiple selectable screen items (check boxes, multiple selection drop down, etc.) is shown below.
+
+* :ref:`Validation_exist_in_codelist_javase8`\
+    Method of implementing original annotations that can be added to \ ``List``\ of \ ``String``\ by using the original functions of Java SE 8 and Hibernate Validator.
+    **It is easier and simpler to implement than the latter, so we recommend this method in environments where the original features of Java SE 8 and Hibernate Validator can be used.** In addition, this method will be standardized in the future version of Bean Validation in future.
+    
+
+* :ref:`Validation_exist_in_codelist_formatter`\
+    Method of setting the \ ``@ExistInCodeList``\ annotation for the property wrapped in the Java bean class.
+    For users who do not use Java SE 8 and Hibernate Validator's original features. In environments where the original features of Java SE 8 and Hibernate Validator can be used, :ref:`Validation_exist_in_codelist_javase8`\ is recommended.
+
+
+.. _Validation_exist_in_codelist_javase8:
+
+Implementation with Java SE 8 and Hibernate Validator 5.2+
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Here,by creating original annotation \ ``@ExistInCodeList``\ provided by the common library is wrapped,
+and how to make it correspond to collection is shown.
+
+\ ``java.lang.annotation.ElementType.TYPE_USE``\ has been added in Java SE 8.
+This makes it possible to add annotations to not only declarations of conventional classes and methods, but also general types (types of local variables, etc.),
+Hibernate Validator 5.2+ for Java SE 8 supports constraint annotations attached to parameterized types such as \ ``Collection``\ , \ ``Map``\ , \ ``Optional``\.By reading it, it is possible to check the values in the collection.
+
+By combining Java SE 8 with Hibernate Validator 5.2+, like \ ``List<@NotNullForTypeArgument String>``\,
+Annotations that can be added to the type specification part of the list can be created, and the values in the collection can be checked.
+For details,please refer Hibernate Validator document(\ `Type argument constraints <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#type-arguments-constraints>`_\ ).
+
+\ ``@ExistInCodeList``\ provided by the common library does not correspond to \ ``TYPE_USE``\ because it is Java SE 7 compatible,
+By creating original annotation that can be added to the type specifying part of the list as described above, it is possible to check the value in the collection.
+
+The main steps are as follows.
+
+* Use "TYPE_USE" and implement annotations extending \ ``@ExistInCodeList``\ which can be added to the type usage place.
+
+* Set the annotation to be checked.
+
+Input check for Role (\ ``List``\ of \ ``String``\) that can set multiple items is used as an example to explain.
+
+Multiple item configurable Role
+
+Implementation example of \ ``@ExistInCodeListForTypeArgument``\ which can be added to type usage.
+
+  .. code-block:: java
+
+    package com.example.common.validation;
+
+    import static java.lang.annotation.ElementType.TYPE_USE;
+    import static java.lang.annotation.RetentionPolicy.RUNTIME;
+    import java.lang.annotation.Documented;
+    import java.lang.annotation.Retention;
+    import java.lang.annotation.Target;
+    import javax.validation.Constraint;
+    import javax.validation.OverridesAttribute;
+    import javax.validation.Payload;
+    import javax.validation.ReportAsSingleViolation;
+    import org.terasoluna.gfw.common.codelist.ExistInCodeList;
+
+    @Documented
+    @Constraint(validatedBy = {})
+    @Target(TYPE_USE) // (1)
+    @Retention(RUNTIME)
+    @ReportAsSingleViolation
+    @ExistInCodeList(codeListId = "") // (2)
+    public @interface ExistInCodeListForTypeArgument {
+        String message() default "{com.example.common.validation.ExistInCodeListForTypeArgument.message}"; // (3)
+        
+        @OverridesAttribute(constraint = ExistInCodeList.class, name = "codeListId") // (4)
+        String codeListId();
+
+        
+        Class<?>[] groups() default {};
+
+        Class<? extends Payload>[] payload() default {};
+
+        @Target(TYPE_USE) // (1)
+        @Retention(RUNTIME)
+        @Documented
+        @interface List {
+            ExistInCodeListForTypeArgument[] value();
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Set \ ``TYPE_USE``\, so that this annotation can be added at the type usage place.
+     * - | (2)
+       - | Define the rules (\ ``@ExistInCodeList``\) used by this annotation.
+     * - | (3)
+       - | Define the default value of the error message. Also define any error message in ValidationMessages.properties.
+     * - | (4)
+       - | Override the \ ``codeListId``\  attribute of the \ ``@ExistInCodeList``\ annotation.
+
+
+|
+
+* Form class
+
+  .. code-block:: java
+
+    package com.example.sample.app.validation;
+
+    import java.util.List;
+    
+    import javax.validation.constraints.NotNull;
+    
+    import com.example.common.validation.ExistInCodeListForTypeArgument;
+
+    public class SampleForm {
+        @NotNull
+        @Valid // (1)
+        private List<@ExistInCodeListForTypeArgument(codeListId = "CL_ROLE") String> roles; // (2)
+
+        public List<String> getRoles() {
+            return roles;
+        }
+
+        public void setRoles(List<String> roles) {
+            this.roles = roles;
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Give \ ``javax.validation.Valid``\ annotation to enable input checking of element values in \ ``List``\
+     * - | (2)
+       - | Set the \ ``@ExistInCodeListForTypeArgument``\ annotation for the type specification part of the collection to be checked for input.
+         | Specify the code list as the check source in the \ ``codeListId``\  parameter of the annotation.
+
+
+|
+
+* JSP
+
+  .. code-block:: jsp
+
+    <form:form modelAttribute="sampleForm">
+        <!-- (1) -->
+        <form:checkboxes path="roles" items="${CL_ROLE}"/>
+        <form:errors path="roles*"/>
+        <form:button>Submit</form:button>
+    </form:form>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - |  Implement \ ``<form:checkboxes>``\.
+
+
+|
+
+
+.. _Validation_exist_in_codelist_formatter:
+
+Implementation of wrapper class of String using Java bean
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+The implementation introduced here is for users who do not use Java SE 8 and Hibernate Validator's original functions. In environments where the original features of Java SE 8 and Hibernate Validator can be used, :ref:`Validation_exist_in_codelist_javase8`\ is recommended.
+
+Since you can not use Bean Validation annotation for elements in the collection as described above when Java SE 8 and Hibernate Validator's original functions are not used,
+\ ``String``\ is wrapped with a Java bean and input check is done by appending \ ``@ExistInCodeList``\ to the property of the nested bean.
+
+When using a Spring-supplied tag library for a wrapper class, it is necessary to perform type conversion between a character string and a wrapper class in order to bind to a form. This is a `type conversion mechanism provided by Spring (Formatter) <http://docs.spring.io/spring/docs/4.3.5.RELEASE/spring-framework-reference/htmlsingle/#format>` _
+is used for implementation.
+
+By adding a type conversion from \ ``String``\ to \ ``Role``\, \ ``Role``\ to \ ``String``\ in Formatter,as with \ ``List<String>``\,
+it can be implemented using  \ ``<form:checkboxes>``\ without complicated implementation.
+
+The main steps are as follows.
+
+* Set the \ ``@ExistInCodeList``\ annotation for checking.
+
+* Create a class that implements the \ ``Formatter``\ class which is the interface for conversion.
+
+* Using \ ``ConversionServiceFactoryBean``\ register the created \ ``Formatter``\ in Spring.
+
+
+Also, in order to display items that have been successfully selected with \ ``<form:checkboxes>``\, you need to override the \ ``toString``\ method of the wrapper class in addition to the Formatter implementation .
+
+\ ``<form:checkboxes>``\ displays the elements of the collection specified by the \ ``items``\ attribute as selected items, if the value of the selected item specified by the \ ``path``\ attribute matches with the value of the property, it is displayed as the selected item.
+To determine this consistency, Formatter is used when the property is a single item, and in the case of an array or collection, the result of the \ ``toString``\ method of the specified property is used.
+
+In order to display it as a selected item successfully, you need to override the \ ``toString``\ method in a wrapper class and return the wrapped value string as in the example below.
+
+.. note::
+
+    For details, please refer the actual determination method of selected \ ``org.springframework.web.servlet.tags.form.SelectedValueComparator``\ class's `javadoc <https://github.com/spring-projects/spring-framework/blob/v4.3.5.RELEASE/spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java>`__
+
+
+Input check for \ ``Role``\ (Java Bean's \ ``List``\) that can set multiple items is used as an example for explaination.
+
+|
+
+* Form class
+
+  .. code-block:: java
+    
+    package com.example.sample.app.validation;
+
+    import java.util.List;
+
+    import javax.validation.Valid;
+    import javax.validation.constraints.NotNull;
+
+    import com.example.sample.domain.model.Role;
+
+    public class SampleForm {
+        @NotNull
+        @Valid // (1)
+        private List<Role> roles; // (2)
+
+        public List<Role> getRoles() {
+            return roles;
+        }
+
+        public void setRoles(List<Role> roles) {
+            this.roles = roles;
+        }
+    }
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | \ ``javax.validation.Valid``\ annotation to enable bean validation of nested beans.
+     * - | (2)
+       - | You cannot add \ ``@ExistInCodeList``\ to \ ``List``\ of  \ ``String``\ but 
+           by wrapping \ ``String``\ with a Java bean you can add \ ``@ExistInCodeList``\ to the nested bean's \ ``String``\ property.
+
+|
+
+* JavaBean class
+
+  .. code-block:: java
+
+    package com.example.sample.domain.model
+
+    import org.terasoluna.gfw.common.codelist.ExistInCodeList;
+
+    public class Role {
+        @ExistInCodeList(codeListId = "CL_ROLE") // (1)
+        private String value;
+
+        public String getValue() {
+            return value;
+        }
+
+        public void setValue(String value) {
+            this.value = value;
+        }
+
+        @Override // (2)
+        public String toString() {
+            return getValue();
+        }
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Set the \ ``@ExistInCodeList``\ annotation for the property wrapped in the \ ``Role``\ class to perform input check, and specify the code list to check \ ``codeListId``\ .
+     * - | (2)
+       - | Override in order to draw the screen properly when multiple selection is made and return the character string of the wrapped value.
+
+|
+
+Implement the Formatter class that performs type conversion and register it in Spring.
+
+As mentioned above, it is necessary to wrap \ ``String``\ with \ ``Role``\ (Java bean) to perform input checking.
+Implement type conversion by \ ``Formatter``\ to convert from screen input (\ ``String``\) to wrapped \ ``Role``\ and vice versa.
+
+By adding type conversion, mutual conversion between \ ``String``\ and \ ``Role``\ is done automatically.
+On the Controller side, it is treated as \ ``List``\ of \ ``Role``\, on JSP side  \ ``List``\ of \ ``String``\.
+
+* \ ``Formatter``\ class
+
+  Implementation of \ ``Formatter``\ which performs mutual conversion between \ ``String``\ and \ ``Role``\.
+
+  .. code-block:: java
+
+    package com.example.sample.app.validation.formatter;
+
+    import java.text.ParseException;
+    import java.util.Locale;
+
+    import org.springframework.format.Formatter;
+
+    import com.example.usermanagement.domain.model.Role;
+
+    public class RoleFormatter implements Formatter<Role> { //(1)
+
+        @Override
+        public String print(Role source, Locale locale) {
+            return source.getValue();
+        }
+
+        @Override
+        public Role parse(String source, Locale locale) throws ParseException {
+            Role role = new Role();
+            role.setValue(source);
+            return role;
+        }
+
+    }
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Implement the interface \ ``org.springframework.format.Formatter<T>``\.
+
+|
+
+* Bean definition for applying original \ ``Formatter``\
+
+  .. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="conversionService"
+        class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
+        <property name="formatters">
+            <list>
+                <!-- (2) -->
+                <bean class="com.example.sample.app.validation.formatter.RoleFormatter" />
+            </list>
+        </property>
+    </bean>
+
+
+  .. code-block:: xml
+
+    <!-- (3) -->
+    <mvc:annotation-driven conversion-service="conversionService">
+        <!-- omitted -->
+    </mvc:annotation-driven>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - | Add bean definition of \ ``FormattingConversionServiceFactoryBean``\.
+     * - | (2)
+       - | Set the created Formatter class(\ ``RoleFormatter``\).
+     * - | (3)
+       - |  To use the customized type conversion, set the bean defined in (1) to the \ ``conversion-service``\ attribute of \ ``mvc:annotation-driven``\.
+
+|
+
+
+* JSP
+
+  .. code-block:: jsp
+
+    <form:form modelAttribute="sampleForm">
+        <!-- (1) -->
+        <form:checkboxes path="roles" items="${CL_ROLE}"/>
+        <form:errors path="roles*"/>
+        <form:button>Submit</form:button>
+    </form:form>
+
+
+  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  .. list-table::
+     :header-rows: 1
+     :widths: 10 90
+
+     * - Sr.No.
+       - Description
+     * - | (1)
+       - |  \ ``<form:checkboxes>``\ can be used same as \ ``List<String>``\.
+
+
+|
 
 .. _Validation_implement_new_constraint:
 
@@ -2760,7 +3186,7 @@ Creation of Bean Validation annotation by implementing new rules
 
 Any rule can be created by implementing \ ``javax.validation.ConstraintValidator``\  interface and creating annotation that uses this Validator.
 
-The method of usage is as follows.
+The following 3 ways can be cited as applications.
 
 * Rules that cannot be implemented by combining the existing rules
 * check rule for correlated items
@@ -3713,6 +4139,15 @@ An example to show how to create an exception handling class is given below.
 
     Refer to ":ref:`application_layer_controller_advice`" for details of \ ``@ControllerAdvice``\  annotation.
 
+.. warning::
+
+    An error message can occur by using the  \ ``ConstraintViolation#getMessage``\ method, but since the message completion by Spring's function is not done, field names in error message at \ ``{0}``\ cannot be embedded.
+    
+    Instead, field names can be obtained with the \ ``ConstraintViolation#getPropertyPath``\ method.
+    
+    For message completion by Spring's function, please see the note of:ref:`Validation_message_in_validationmessages`.
+    
+    For details about \ ``ConstraintViolation``\,please refer \ `Hibernate Validator reference <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html_single/#section-constraint-violation-methods>`_\.
 
 Appendix
 --------------------------------------------------------------------------------
@@ -3959,7 +4394,7 @@ Refer to \ `Hibernate Validator specifications <http://docs.jboss.org/hibernate/
 
      For details of check rule change by XML, refer to \ `Hibernate reference <https://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/ch07.html#section-configuration-validation-xml>`_\ 
      and for how to create a new annotation, refer to \ :ref:`Validation_implement_new_constraint`\  respectively..
-
+     
 .. _Validation_default_message_in_hibernate_validator:
 
 Default messages provided by Hibernate Validator
@@ -4241,6 +4676,10 @@ Add a dependent library for the rules that are to be used. An example for how to
         </dependency>
     </dependencies>
 
+.. note::
+
+    In the above setting example,since it is a premise to manage the dependent library version with the parent project terasoluna-gfw-parent, specifying the version in pom.xml is not necessary.
+
 Next, a message definition corresponding to annotation is added to :file:`ValidationMessages.properties`  as explained in \ :ref:`Validation_message_in_validationmessages`\ .
 
 .. code-block:: properties
