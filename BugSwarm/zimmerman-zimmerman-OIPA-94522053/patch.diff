diff --git a/OIPA/api/activity/activity_aggregation.py b/OIPA/api/activity/activity_aggregation.py
index 4b99da276a..66130d0e79 100755
--- a/OIPA/api/activity/activity_aggregation.py
+++ b/OIPA/api/activity/activity_aggregation.py
@@ -72,7 +72,6 @@ class ActivityAggregationSerializer(BaseSerializer):
             "extra_filter": Q(transaction__transaction_type=1),
             "annotate_name": 'incoming_fund',
             "annotate": (Coalesce(Sum('transaction__value'), 0) * Coalesce('activitysector__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select sector_id as sector, sum(incoming_fund) as incoming_fund from ({}) as "temptab" group by "sector_id" order by "sector_id"'
         },
         "recipient_country_percentage_weighted_incoming_fund": {
@@ -80,7 +79,6 @@ class ActivityAggregationSerializer(BaseSerializer):
             "extra_filter": Q(transaction__transaction_type=1),
             "annotate_name": 'incoming_fund',
             "annotate": (Coalesce(Sum('transaction__value'), 0) * Coalesce('activityrecipientcountry__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select country_id as recipient_country, sum(incoming_fund) as incoming_fund from ({}) as "temptab" group by "country_id" order by "country_id"'
         },
         "sector_percentage_weighted_disbursement": {
@@ -88,7 +86,6 @@ class ActivityAggregationSerializer(BaseSerializer):
             "extra_filter": Q(transaction__transaction_type=3),
             "annotate_name": 'disbursement',
             "annotate": (Coalesce(Sum('transaction__value'), 0) * Coalesce('activitysector__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select sector_id as sector, sum(disbursement) as disbursement from ({}) as "temptab" group by "sector_id" order by "sector_id"'
         },
         "recipient_country_percentage_weighted_disbursement": {
@@ -96,21 +93,18 @@ class ActivityAggregationSerializer(BaseSerializer):
             "extra_filter": Q(transaction__transaction_type=3),
             "annotate_name": 'disbursement',
             "annotate": (Coalesce(Sum('transaction__value'), 0) * Coalesce('activityrecipientcountry__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select country_id as recipient_country, sum(disbursement) as disbursement from ({}) as "temptab" group by "country_id" order by "country_id"'
         },
         "sector_percentage_weighted_budget": {
-            "field": "weighted_budget",
+            "field": "budget",
             "annotate_name": 'total_budget_per_percentage',
             "annotate": (Coalesce(Sum('budget__value'), 0) * Coalesce('activitysector__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select sector_id as sector, sum(total_budget_per_percentage) as budget from ({}) as "temptab" group by "sector_id" order by "sector_id"'
         },
         "location_disbursement": {
             "field": "weighted_country_value",
             "annotate_name": 'value_by_country',
             "annotate": (Coalesce(Sum('location__value'), 0) * Coalesce('activitysector__percentage', 100) / 100),
-            "no_null_check": True,
             "has_subquery": 'select loc_country_id, sum(value_by_country) as total_value, region_id, country_name from ({}) as per_activity group by per_activity.loc_country_id'
         }
     }
@@ -240,27 +234,29 @@ class ActivityAggregationSerializer(BaseSerializer):
         },
     }
 
-    _allowed_orderings = []
-    for grouping in _allowed_groupings.values():
-        if type(grouping['fields']) is str:
-            _allowed_orderings.append(grouping['fields'])
-        else: 
-            for field in grouping['fields']: # assume it is a tuple
-                if type(field) is str:
-                    _allowed_orderings.append(field)
-                else:
-                    _allowed_orderings.append(field[1]) # renamed
+    def get_order_filters(self, orderList):
 
-    def get_order_filters(self, orderList, aggregationList):
+        allowed_orderings = []
+        for grouping in self._allowed_groupings.values():
+            if type(grouping['fields']) is str:
+                allowed_orderings.append(grouping['fields'])
+            else:
+                for field in grouping['fields']: # assume it is a tuple
+                    if type(field) is str:
+                        allowed_orderings.append(field)
+                    else:
+                        allowed_orderings.append(field[1]) # renamed
+        for aggregation in self._aggregations.values():
+            if type(aggregation['field']) is str:
+                allowed_orderings.append(aggregation['field'])
 
-        allowed_orderings = self._allowed_orderings + aggregationList
         allowed_orderings = allowed_orderings + ['-' + o for o in allowed_orderings]
 
         ordered_orderings = [order for order in orderList if order in allowed_orderings]
 
         return ordered_orderings
 
-    def apply_limit_offset_filters(self, queryset, page_size, page):
+    def apply_limit_offset_filters(self, results, page_size, page):
 
         if page_size:
 
@@ -272,11 +268,11 @@ def apply_limit_offset_filters(self, queryset, page_size, page):
 
             offset = (page * page_size) - page_size
             offset_plus_limit = offset + page_size
-            return queryset[offset:offset_plus_limit]
+            return results[offset:offset_plus_limit]
 
-        return queryset
+        return results
 
-    def apply_annotations(self, queryset, groupList, aggregationList, orderings):
+    def apply_annotations(self, queryset, groupList, aggregationList):
 
         before_annotations = dict() # before values()
         after_annotations = dict() # after values()
@@ -313,12 +309,8 @@ def apply_annotations(self, queryset, groupList, aggregationList, orderings):
         # apply extras
         queryset = queryset.annotate(**before_annotations).extra(**groupExtras)
 
-        # if 1 query, order in postgres
-        if len(orderings) and (len(same_query_aggregations) + len(separate_aggregations)) == 1:
-            queryset = queryset.order_by(*orderings)
-
         # Apply group_by calls and annotations
-        result = queryset.values(*groupFields).annotate(**after_annotations).filter(**nullFilters)
+        result = queryset.filter(**nullFilters).values(*groupFields).annotate(**after_annotations)
 
         # aggregations that require extra filters, and hence must be executed separately
         for aggregation in separate_aggregations:
@@ -330,10 +322,10 @@ def apply_annotations(self, queryset, groupList, aggregationList, orderings):
 
             # one query
             if len(same_query_aggregations) is 0:
-                result = queryset.filter(extra_filter).values(*groupFields).annotate(**annotation).filter(**nullFilters)
+                result = queryset.filter(extra_filter).filter(**nullFilters).values(*groupFields).annotate(**annotation)
                 continue
 
-            next_result = queryset.filter(extra_filter).values(*groupFields).annotate(**annotation).filter(**nullFilters)
+            next_result = queryset.filter(extra_filter).filter(**nullFilters).values(*groupFields).annotate(**annotation)
 
             main_group_field = groupFields[0]
            
@@ -352,24 +344,6 @@ def apply_annotations(self, queryset, groupList, aggregationList, orderings):
             # to do; current functionality assumes the initial result contains all items
             # not sure if that's a valid assumption.
 
-        # python order functionality
-        if len(orderings):
-            # if 1 query, ordering is already done above using queryset.order
-            if not queryset.ordered:
-                # can only order by 1 key atm
-                order = orderings[0]
-                result_list = list(result)
-                descending = False
-                if order[0] == '-':
-                    descending = True
-                    order = order[1:]
-
-                result = sorted(result_list, key=itemgetter(order))
-
-                if descending:
-                    result = result.reverse()
-
-
         return result
 
     def apply_extra_calculations(self, results, aggregations):
@@ -394,17 +368,33 @@ def dictfetchall(cursor):
 
             results = dictfetchall(cursor)
 
-        return list(results)
+        return results
 
     def serialize_foreign_keys(self, results, request, groupList):
 
         serializers = {}
+        groupfieldList = []
 
         for grouping in groupList:
             serializer = self._allowed_groupings[grouping]["serializer"]
             serializer_fields = self._allowed_groupings[grouping]["serializer_fields"]
             foreignQueryset = self._allowed_groupings[grouping]["queryset"]
 
+            fields = self._allowed_groupings[grouping]["fields"]
+
+            thisGroupingFieldList = []
+
+            if type(fields) is str:
+                thisGroupingFieldList.append(fields)
+            else:
+                for field in fields:
+                    if type(field) is str:
+                        thisGroupingFieldList.append(field)
+                    else:
+                        thisGroupingFieldList.append(field[1])
+
+            groupfieldList.extend(thisGroupingFieldList)
+
             if serializer:
                 data = serializer(foreignQueryset,
                     context={
@@ -414,13 +404,15 @@ def serialize_foreign_keys(self, results, request, groupList):
                     fields=serializer_fields,
                 ).data
 
-                serializers[grouping] = {i.get('code'): i for i in data}
+                serializers[grouping] = {str(i.get('code')): i for i in data}
             else:
-                serializers[grouping] = {i.get(grouping): i.get(grouping) for i in results}
+
+                for field in thisGroupingFieldList:
+                    serializers[field] = {str(i.get(field)): i.get(field) for i in results}
 
         for i, result in enumerate(list(results)):
             for k, v in result.iteritems():
-                if k in groupList:
+                if k in groupfieldList:
                     if v:
                         result[k] = serializers.get(k, {}).get(str(v))
                     else:
@@ -428,6 +420,24 @@ def serialize_foreign_keys(self, results, request, groupList):
 
         return results
 
+    def apply_ordering(self, result, orderings):
+        # python order functionality
+        if len(orderings):
+            # can only order by 1 key atm
+            order = orderings[0]
+            result_list = list(result)
+            descending = False
+            if order[0] == '-':
+                descending = True
+                order = order[1:]
+
+            result = sorted(result_list, key=itemgetter(order))
+
+            if descending:
+                result = list(reversed(result))
+
+        return result
+
     def to_representation(self, queryset):
         request = self.context.get('request') 
         params = request.query_params
@@ -445,14 +455,15 @@ def to_representation(self, queryset):
             return {'error_message': "Invalid value for mandatory field 'aggregations'"}
 
         # queryset = self.apply_group_filters(queryset, request, group_by)
-        orderings = self.get_order_filters(order_by, aggregations)
-        queryset = self.apply_annotations(queryset, group_by, aggregations, orderings)
-        result = self.apply_limit_offset_filters(queryset, page_size, page)
-        result = self.apply_extra_calculations(result, aggregations)
+        orderings = self.get_order_filters(order_by)
+        queryset = self.apply_annotations(queryset, group_by, aggregations)
+        result = self.apply_extra_calculations(queryset, aggregations)
+        result = self.apply_ordering(result, orderings)
+        result = self.apply_limit_offset_filters(result, page_size, page)
         result = self.serialize_foreign_keys(result, request, group_by)
 
         if page_size:
-            count = queryset.count()
+            count = len(queryset)
         else:
             count = len(result)
 
diff --git a/OIPA/api/activity/aggregation.py b/OIPA/api/activity/aggregation.py
index de4030f7e5..05b28f4a0f 100755
--- a/OIPA/api/activity/aggregation.py
+++ b/OIPA/api/activity/aggregation.py
@@ -1,7 +1,6 @@
 from rest_framework import serializers
 from api.generics.serializers import DynamicFieldsSerializer
 from api.generics import utils
-from api.generics.filters import BasicFilterBackend
 from api.activity.filters import ActivityFilter
 from api.generics.serializers import NoCountPaginationSerializer
 from rest_framework.response import Response
diff --git a/OIPA/api/activity/filters.py b/OIPA/api/activity/filters.py
index 6200ee3032..4c2471ce20 100755
--- a/OIPA/api/activity/filters.py
+++ b/OIPA/api/activity/filters.py
@@ -7,69 +7,10 @@
 from django_filters import Filter, FilterSet, NumberFilter, DateFilter, BooleanFilter
 from rest_framework.filters import OrderingFilter
 
-from api.generics.filters import CommaSeparatedCharFilter
+from api.generics.filters import CommaSeparatedCharFilter, CommaSeparatedCharMultipleFilter, TogetherFilterSet
 from iati.models import Activity, Budget, RelatedActivity
 
 
-class CommaSeparatedDateRangeFilter(Filter):
-
-    def filter(self, qs, value):
-
-        if value in ([], (), {}, None, ''):
-            return qs
-
-        value = value.split(',')
-
-        return super(CommaSeparatedCharFilter, self).filter(qs, value)
-
-
-class TogetherFilter(Filter):
-    """
-    Used with TogetherFilterSet, always gets called regardless of GET args
-    """
-    
-    def __init__(self, filters=None, values=None, **kwargs):
-        self.filter_classes = filters
-        self.values = values
-
-        super(TogetherFilter, self).__init__(**kwargs)
-
-    def filter(self, qs, values):
-        if self.filter_classes:
-            filters = { "%s__%s" % (c[0].name, c[0].lookup_type) : c[1] for c in zip(self.filter_classes, values)}
-            qs = qs.filter(**filters).distinct()
-
-            return qs
-
-
-class TogetherFilterSet(FilterSet):
-    def __init__(self, data=None, queryset=None, prefix=None, strict=None):
-        """
-        Adds a together_exclusive meta option that selects fields that have to 
-        be called in the same django filter() call when both present
-        """
-
-        meta = getattr(self, 'Meta', None)
-
-        # fields that must be filtered in the same filter call
-        self.together_exclusive = getattr(meta, 'together_exclusive', None)
-
-        data = data.copy()
-
-        for filterlist in self.together_exclusive:
-            if set(filterlist).issubset(data.keys()):
-
-                filter_values = [data.pop(filteritem)[0] for filteritem in filterlist]
-                filter_classes = [self.declared_filters.get(filteritem, None) for filteritem in filterlist]
-
-                uid = uuid.uuid4()
-
-                self.base_filters[uid] = TogetherFilter(filters=filter_classes)
-                data.appendlist(uid, filter_values)
-
-        super(FilterSet, self).__init__(data, queryset, prefix, strict)
-
-
 class ActivityFilter(TogetherFilterSet):
 
     activity_id = CommaSeparatedCharFilter(
@@ -155,7 +96,11 @@ class ActivityFilter(TogetherFilterSet):
 
     participating_organisation = CommaSeparatedCharFilter(
         lookup_type='in',
-        name='participating_organisations__ref')
+        name='participating_organisations__normalized_ref')
+
+    participating_organisation_name = CommaSeparatedCharFilter(
+        lookup_type='in',
+        name='participating_organisations__primary_name')
 
     participating_organisation_role = CommaSeparatedCharFilter(
         lookup_type='in',
@@ -163,7 +108,11 @@ class ActivityFilter(TogetherFilterSet):
 
     reporting_organisation = CommaSeparatedCharFilter(
         lookup_type='in',
-        name='reporting_organisations__ref')
+        name='reporting_organisations__normalized_ref')
+
+    reporting_organisation_startswith = CommaSeparatedCharMultipleFilter(
+        lookup_type='startswith',
+        name='reporting_organisations__normalized_ref')
 
     xml_source_ref = CommaSeparatedCharFilter(
         lookup_type='in',
@@ -312,24 +261,23 @@ class ActivityFilter(TogetherFilterSet):
         lookup_type='gte',
         name='activity_plus_child_aggregation__commitment_value')
 
-
     class Meta:
         model = Activity
         together_exclusive = [('budget_period_start', 'budget_period_end')]
 
 
-class BudgetFilter(FilterSet):
-
-    budget_period_start = DateFilter(
-        lookup_type='gte',
-        name='period_start')
-
-    budget_period_end = DateFilter(
-        lookup_type='lte',
-        name='period_end')
-
-    class Meta:
-        model = Budget
+# class BudgetFilter(FilterSet):
+#
+#     budget_period_start = DateFilter(
+#         lookup_type='gte',
+#         name='period_start')
+#
+#     budget_period_end = DateFilter(
+#         lookup_type='lte',
+#         name='period_end')
+#
+#     class Meta:
+#         model = Budget
 
 
 class RelatedActivityFilter(FilterSet):
diff --git a/OIPA/api/activity/serializers.py b/OIPA/api/activity/serializers.py
index e73e0b9994..f35466d89b 100755
--- a/OIPA/api/activity/serializers.py
+++ b/OIPA/api/activity/serializers.py
@@ -8,7 +8,7 @@
 from api.sector.serializers import SectorSerializer
 from api.region.serializers import RegionSerializer
 from api.country.serializers import CountrySerializer
-from api.activity.filters import BudgetFilter
+# from api.activity.filters import BudgetFilter
 from api.activity.filters import RelatedActivityFilter
 
 # TODO: serialize vocabulary in codelist serializer
@@ -102,7 +102,7 @@ class Meta:
 
     class Meta:
         model = iati.models.Budget
-        filter_class = BudgetFilter
+        # filter_class = BudgetFilter
         fields = (
             'type',
             'period_start',
diff --git a/OIPA/api/activity/tests/test_activity_aggregation.py b/OIPA/api/activity/tests/test_activity_aggregation.py
new file mode 100755
index 0000000000..285122c548
--- /dev/null
+++ b/OIPA/api/activity/tests/test_activity_aggregation.py
@@ -0,0 +1,136 @@
+from django.test import TestCase
+from iati.factory import iati_factory
+from iati.transaction import factories as transaction_factory
+from rest_framework.test import APIClient
+from decimal import Decimal
+
+class ActivityAggregationTestCase(TestCase):
+    def setUp(self):
+        # set up 2 activities with the shown specs,
+        # then create individual tests to check most used aggregation / group by combinations
+        # 2 activities
+        # both in sector 11000, second also in 11001 for 50 perc
+
+
+        first_activity = iati_factory.ActivityFactory.create()
+        second_activity = iati_factory.ActivityFactory.create(
+            id='IATI-0002',
+            iati_identifier='IATI-0002',
+            iati_standard_version=first_activity.iati_standard_version)
+        first_sector = iati_factory.SectorFactory.build(code=11000, name='Sector 1')
+        first_activity_sector = iati_factory.ActivitySectorFactory.create(
+            activity=first_activity,
+            sector=first_sector,
+            percentage=100
+        )
+        second_activity_sector = iati_factory.ActivitySectorFactory.create(
+            activity=second_activity,
+            sector=first_sector,
+            percentage=50,
+            vocabulary=first_activity_sector.vocabulary
+        )
+
+        second_sector = iati_factory.SectorFactory.build(code=11001, name='Sector 2')
+        second_activity_second_sector = iati_factory.ActivitySectorFactory.create(
+            activity=second_activity,
+            sector=second_sector,
+            percentage=50,
+            vocabulary=first_activity_sector.vocabulary
+        )
+
+        country = iati_factory.CountryFactory.build() # code = AD, name = andorra
+        first_activity_country = iati_factory.ActivityRecipientCountryFactory.create(
+            activity=first_activity,
+            country=country,
+            percentage=100
+        )
+        second_activity_country = iati_factory.ActivityRecipientCountryFactory.create(
+            activity=second_activity,
+            country=country,
+            percentage=50
+        )
+
+        second_country = iati_factory.CountryFactory.build(code="KE", name="Kenya")
+        third_activity_country = iati_factory.ActivityRecipientCountryFactory.create(
+            activity=second_activity,
+            country=second_country,
+            percentage=50
+        )
+
+        first_budget = iati_factory.BudgetFactory.create(activity=first_activity, value=20000)
+        second_budget = iati_factory.BudgetFactory.create(activity=first_activity, value=50000)
+        third_budget = iati_factory.BudgetFactory.create(activity=second_activity, value=80000)
+
+        # transaction type = 1 (incoming funds), works the same for disbursements etc. so no need to change
+        first_transaction = transaction_factory.TransactionFactory.create(activity=first_activity, value=50000)
+        second_transaction = transaction_factory.TransactionFactory.create(activity=second_activity, value=10000, transaction_type=first_transaction.transaction_type)
+        third_transaction = transaction_factory.TransactionFactory.create(activity=second_activity, value=25000, transaction_type=first_transaction.transaction_type)
+
+        self.api_client = APIClient()
+
+
+    def test_sector_incoming_fund_group_by(self):
+        """
+            group by sector, this is the non percentage aware sector aggregation
+        """
+        response = self.api_client.get('/api/activities/aggregations/?format=json&group_by=sector&aggregations=incoming_fund&order_by=sector')
+
+        results = list(response.data['results'])
+        self.assertTrue(len(results) == 2)
+        self.assertEqual(results[0]['incoming_fund'], Decimal(85000))
+        self.assertEqual(results[1]['incoming_fund'], Decimal(35000))
+
+    def test_sector_budget_group_by(self):
+        """
+            group by sector, this is the non percentage aware sector aggregation
+            sector 11000 = 70000 + 80000 = 150000
+            sector 11001 = 80000
+        """
+        response = self.api_client.get('/api/activities/aggregations/?format=json&group_by=sector&aggregations=budget&order_by=sector', format='json')
+
+        results = list(response.data['results'])
+
+        self.assertTrue(len(results) == 2)
+        self.assertEqual(results[0]['budget'], Decimal(150000))
+        self.assertEqual(results[1]['budget'], Decimal(80000))
+
+    def test_sector_weighted_budget_aggregation(self):
+        """
+            group by sector, aggregate by sector weighted budget
+            this makes budgets percentage aware
+            sector 11000 = 70000 * 100% + 80000 * 50% = 110000
+            sector 11001 = 80000 * 50% = 40000
+        """
+        response = self.api_client.get('/api/activities/aggregations/?format=json&group_by=sector&aggregations=sector_percentage_weighted_budget&order_by=sector', format='json')
+
+        results = list(response.data['results'])
+        
+        self.assertTrue(len(results) == 2)
+        self.assertEqual(results[0]['budget'], Decimal(110000))
+        self.assertEqual(results[1]['budget'], Decimal(40000))
+
+    def test_recipient_country_incoming_fund_group_by(self):
+        """
+            group budget by recipient country, this is the non percentage aware sector aggregation
+        """
+        response = self.api_client.get('/api/activities/aggregations/?format=json&group_by=recipient_country&aggregations=incoming_fund&order_by=recipient_country')
+
+        results = list(response.data['results'])
+        
+        self.assertTrue(len(results) == 2)
+        self.assertEqual(results[0]['incoming_fund'], Decimal(85000))
+        self.assertEqual(results[1]['incoming_fund'], Decimal(35000))
+
+    def test_recipient_country_budget_group_by(self):
+        """
+            group budget by recipient country, this is the non percentage aware sector aggregation
+            sector 11000 = 70000 + 80000 = 150000
+            sector 11001 = 80000
+        """
+        response = self.api_client.get('/api/activities/aggregations/?format=json&group_by=recipient_country&aggregations=budget&order_by=recipient_country', format='json')
+
+        results = list(response.data['results'])
+
+        self.assertTrue(len(results) == 2)
+        self.assertEqual(results[0]['budget'], Decimal(150000))
+        self.assertEqual(results[1]['budget'], Decimal(80000))
diff --git a/OIPA/api/activity/tests/test_serializers.py b/OIPA/api/activity/tests/test_serializers.py
index 60e3dbf465..89ce6992c6 100755
--- a/OIPA/api/activity/tests/test_serializers.py
+++ b/OIPA/api/activity/tests/test_serializers.py
@@ -393,7 +393,7 @@ def test_OrganisationRoleSerializer(self):
             """
 
     def test_RecipientCountrySerializer(self):
-        recipient_country = iati_factory.RecipientCountryFactory.build(
+        recipient_country = iati_factory.ActivityRecipientCountryFactory.build(
             percentage=80
         )
         serializer = serializers.RecipientCountrySerializer(
@@ -629,12 +629,8 @@ def test_activitySerializer(self):
             contains the data in activity.iati_identifier
             """
 
-        assert serializer.data['last_updated_datetime'] ==\
-            activity.last_updated_datetime.strftime("%y-%m-%d"),\
-            """
-            a serialized activity should contain a field 'last_updated_datetime
-            that contains the data in activity.last_updated_datetime
-            """
+        self.assertEqual(serializer.data['last_updated_datetime'], activity.last_updated_datetime.isoformat())
+
         assert serializer.data['hierarchy'] == activity.hierarchy,\
             """
             a serialized activity should contain a field 'hierarchy' that
diff --git a/OIPA/api/generics/filters.py b/OIPA/api/generics/filters.py
index a592e43856..bfea86ab33 100755
--- a/OIPA/api/generics/filters.py
+++ b/OIPA/api/generics/filters.py
@@ -1,17 +1,28 @@
+import uuid
+import gc
+
 from rest_framework import filters
-from django.db.models.sql.constants import QUERY_TERMS
-from django_filters import CharFilter
 from haystack.query import SearchQuerySet
-import gc
+from haystack.inputs import Exact
 
+from django.db.models.sql.constants import QUERY_TERMS
+from django.db.models import Q
+from django_filters import CharFilter
+from django_filters import Filter, FilterSet, NumberFilter, DateFilter, BooleanFilter
 
 VALID_LOOKUP_TYPES = sorted(QUERY_TERMS)
 
 
 class SearchFilter(filters.BaseFilterBackend):
     def filter_queryset(self, request, queryset, view):
+
         query = request.query_params.get('q', None)
+        exact = request.query_params.get('exact', None)
+
         if query:
+            # always match text exactly
+            if exact: query = Exact(query)
+
             search_queryset = SearchQuerySet()
             query_fields = request.query_params.get('q_fields')
             if query_fields:
@@ -21,106 +32,93 @@ def filter_queryset(self, request, queryset, view):
                     search_queryset = search_queryset.filter_or(**filter_dict)
             else:
                 search_queryset = search_queryset.filter_or(text=query)
-            gc.disable()
-            activity_ids = search_queryset.values_list('pk',flat=True)[:3000000]
-            gc.enable()
-            return queryset.filter(pk__in=activity_ids).filter(is_searchable=True)
-        return queryset
 
-class FilterField(object):
+            activity_ids = search_queryset.values_list('pk',flat=True)[0:400000]
 
-    def __init__(self, lookup_type=None, field=None):
-        assert lookup_type in VALID_LOOKUP_TYPES,\
-            'lookup_type in FilterSpecification is invalid'
+            return queryset.filter(pk__in=activity_ids).filter(is_searchable=True)
 
-        self.lookup_type = lookup_type
-        self.field = field
+        return queryset
 
-    @property
-    def lookup_parameter(self):
-        return self.field + '__' + self.lookup_type
+class CommaSeparatedCharFilter(CharFilter):
 
+    def filter(self, qs, value):
 
-class BasicFilter(object):
+        if value:
+            value = value.split(',')
 
-    @property
-    def fields(self):
-        return self.Meta.fields
+        self.lookup_type = 'in'
 
-    @property
-    def model(self):
-        return self.Meta.model
+        return super(CommaSeparatedCharFilter, self).filter(qs, value)
 
-    def __init__(self):
+class CommaSeparatedCharMultipleFilter(CharFilter):
+    """
+    Comma separated filter for lookups like 'exact', 'iexact', etc..
+    """
+    def filter(self, qs, value):
+        if not value: return qs
 
-        assert self.fields,\
-            'filter_class is declared but no filter_fields'
+        values = value.split(',')
 
-        # Check that all fields specified in the dictionary
-        # have a filters.FilterField object
-        unknown_fields = set(self.fields) - set(dir(self))
-        assert len(unknown_fields) == 0,\
-            'filter_class contains fields that do not exist'
+        lookup_type = self.lookup_type
 
-        # When model is specified, check that all FilterField.field
-        # are available in the model.
-        if self.model is not None:
-            model_obj = self.model()
-            model_fields = model_obj._meta.get_all_field_names()
+        filters = [Q(**{"{}__{}".format(self.name, lookup_type): value}) for value in values]
+        final_filters = reduce(lambda a, b: a | b, filters)
 
-            filter_field_model_names = []
-            for filter in self.fields:
-                filter_field = getattr(self, filter, None)
-                filter_field_model_names.append(filter_field.field)
+        return qs.filter(final_filters)
 
-            unknown_model_fields = set(filter_field_model_names) - set(model_fields)
-            assert len(unknown_model_fields) == 0,\
-                'field does not exist in model'
+class CommaSeparatedDateRangeFilter(Filter):
 
-    def lookup_parameters(self, params):
-        to_filter_fields = set(self.fields) & set(params.keys())
+    def filter(self, qs, value):
 
-        lookup_parameters = {}
-        for field in to_filter_fields:
-            filter_field = getattr(self, field, None)
+        if value in ([], (), {}, None, ''):
+            return qs
 
-            if filter_field.lookup_type == 'in':
-                parameter_value = params[field].split(',')
-            else:
-                parameter_value = params[field]
+        values = value.split(',')
 
-            lookup_parameters[filter_field.lookup_parameter] = parameter_value
+        return super(CommaSeparatedDateRangeFilter, self).filter(qs, values)
 
-        return lookup_parameters
+class TogetherFilter(Filter):
+    """
+    Used with TogetherFilterSet, always gets called regardless of GET args
+    """
+    
+    def __init__(self, filters=None, values=None, **kwargs):
+        self.filter_classes = filters
+        self.values = values
 
-    def filter_queryset(self, queryset, params):
-        queryset_parameters = self.lookup_parameters(params)
+        super(TogetherFilter, self).__init__(**kwargs)
 
-        return queryset.filter(**queryset_parameters)
+    def filter(self, qs, values):
+        if self.filter_classes:
+            filters = { "%s__%s" % (c[0].name, c[0].lookup_type) : c[1] for c in zip(self.filter_classes, values)}
+            qs = qs.filter(**filters).distinct()
 
+            return qs
 
-class BasicFilterBackend(filters.BaseFilterBackend):
+class TogetherFilterSet(FilterSet):
+    def __init__(self, data=None, queryset=None, prefix=None, strict=None):
+        """
+        Adds a together_exclusive meta option that selects fields that have to 
+        be called in the same django filter() call when both present
+        """
 
-    def filter_queryset(self, request, queryset, view):
-        filter_class = getattr(view, 'filter_class', None)
+        meta = getattr(self, 'Meta', None)
 
-        if filter_class is None:
-            return queryset
+        # fields that must be filtered in the same filter call
+        self.together_exclusive = getattr(meta, 'together_exclusive', None)
 
-        filter_class = filter_class()
-        queryset = filter_class.filter_queryset(
-            queryset=queryset,
-            params=request.query_params
-            )
+        data = data.copy()
 
-        return queryset
+        for filterlist in self.together_exclusive:
+            if set(filterlist).issubset(data.keys()):
 
+                filter_values = [data.pop(filteritem)[0] for filteritem in filterlist]
+                filter_classes = [self.declared_filters.get(filteritem, None) for filteritem in filterlist]
 
-class CommaSeparatedCharFilter(CharFilter):
+                uid = uuid.uuid4()
 
-    def filter(self, qs, value):
+                self.base_filters[uid] = TogetherFilter(filters=filter_classes)
+                data.appendlist(uid, filter_values)
 
-        if value:
-            value = value.split(',')
+        super(FilterSet, self).__init__(data, queryset, prefix, strict)
 
-        return super(CommaSeparatedCharFilter, self).filter(qs, value)
\ No newline at end of file
diff --git a/OIPA/api/tests/test_filter.py b/OIPA/api/tests/test_filter.py
index 5e90bfbd9b..bf47403bd2 100755
--- a/OIPA/api/tests/test_filter.py
+++ b/OIPA/api/tests/test_filter.py
@@ -1,8 +1,6 @@
-from api.generics.filters import BasicFilter
-from api.generics.filters import BasicFilterBackend
-from api.generics.filters import FilterField
 from django.db import models
 from unittest import TestCase
+from unittest import skip
 
 
 class Model(models.Model):
@@ -11,55 +9,18 @@ class Model(models.Model):
 
 
 class TestFilter(TestCase):
+    @skip('filter test')
     def test_incorrect_lookup(self):
-        self.assertRaises(
-            AssertionError, FilterField, lookup_type='i', field='code')
+        pass
 
+    @skip('filter test')
     def test_unknown_model_filter(self):
-        class UnknownModelFieldFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='unknown_field')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes'
-                ]
-
-        self.assertRaises(AssertionError, UnknownModelFieldFilter)
+        pass
 
+    @skip('filter test')
     def test_unknown_field(self):
-        class UnknownFieldFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='code')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes',
-                    'name'
-                ]
-
-        self.assertRaises(AssertionError, UnknownFieldFilter)
+        pass
 
+    @skip('filter test')
     def test_valid_filter(self):
-        class CorrectFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='code')
-            name = FilterField(lookup_type='icontains', field='name')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes',
-                    'name'
-                ]
-
-        params = {
-            'codes': '1,3',
-            'name': 'test'
-        }
-        expected_result = {
-            'code__in': ['1', '3'],
-            'name__icontains': 'test'
-        }
-        filter_class = CorrectFilter()
-        result = filter_class.lookup_parameters(params=params)
-        assert result == expected_result
+        pass
diff --git a/OIPA/iati/factory/iati_factory.py b/OIPA/iati/factory/iati_factory.py
index 7eb204d286..b8a0af8bcb 100755
--- a/OIPA/iati/factory/iati_factory.py
+++ b/OIPA/iati/factory/iati_factory.py
@@ -114,6 +114,7 @@ class BudgetFactory(NoDatabaseFactory):
     class Meta:
         model = iati.models.Budget
 
+    activity = SubFactory(ActivityFactory)
     period_start = '2011-01-01'
     period_end = '2011-12-30'
     value = 100
@@ -317,11 +318,10 @@ class Meta:
     vocabulary = SubFactory(SectorVocabularyFactory)
     percentage = 100
 
-class RecipientCountryFactory(NoDatabaseFactory):
+class ActivityRecipientCountryFactory(NoDatabaseFactory):
     class Meta:
         model = iati.models.ActivityRecipientCountry
 
-    id = "1.1.1"
     activity = SubFactory(ActivityFactory)
     country = SubFactory(CountryFactory)
     percentage = 50
diff --git a/OIPA/iati/migrations/0008_auto_20151203_1403.py b/OIPA/iati/migrations/0008_auto_20151203_1403.py
new file mode 100755
index 0000000000..e7226e5d06
--- /dev/null
+++ b/OIPA/iati/migrations/0008_auto_20151203_1403.py
@@ -0,0 +1,635 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import models, migrations
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('iati', '0007_auto_20151127_1049'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='activity',
+            name='activity_status',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.ActivityStatus', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='actual_end',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='actual_start',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='capital_spend',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='collaboration_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.CollaborationType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='default_aid_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.AidType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='default_currency',
+            field=models.ForeignKey(related_name='default_currency', default=None, blank=True, to='iati_codelists.Currency', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='default_finance_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.FinanceType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='default_flow_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.FlowType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='default_tied_status',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.TiedStatus', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='end_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='planned_end',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='planned_start',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='scope',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.ActivityScope', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activity',
+            name='start_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='budget_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='budget_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='commitment_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='commitment_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='disbursement_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='disbursement_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='expenditure_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='expenditure_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='incoming_funds_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityaggregation',
+            name='incoming_funds_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityparticipatingorganisation',
+            name='organisation',
+            field=models.ForeignKey(default=None, blank=True, to='iati_organisation.Organisation', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activityparticipatingorganisation',
+            name='ref',
+            field=models.CharField(default=b'', max_length=250, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityparticipatingorganisation',
+            name='role',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.OrganisationRole', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activityparticipatingorganisation',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.OrganisationType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='budget_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='budget_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='commitment_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='commitment_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='disbursement_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='disbursement_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='expenditure_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='expenditure_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='incoming_funds_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypluschildaggregation',
+            name='incoming_funds_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitypolicymarker',
+            name='significance',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.PolicySignificance', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activityrecipientcountry',
+            name='percentage',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityrecipientregion',
+            name='percentage',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activityreportingorganisation',
+            name='organisation',
+            field=models.ForeignKey(default=None, blank=True, to='iati_organisation.Organisation', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activityreportingorganisation',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.OrganisationType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activitysector',
+            name='percentage',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='activitysector',
+            name='sector',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Sector', null=True),
+        ),
+        migrations.AlterField(
+            model_name='activitysector',
+            name='vocabulary',
+            field=models.ForeignKey(default=None, blank=True, to='iati_vocabulary.SectorVocabulary', null=True),
+        ),
+        migrations.AlterField(
+            model_name='budget',
+            name='currency',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Currency', null=True),
+        ),
+        migrations.AlterField(
+            model_name='budget',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.BudgetType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='budget',
+            name='value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='budget',
+            name='value_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='budgetitem',
+            name='percentage',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='budget_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='budget_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='commitment_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='commitment_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='disbursement_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='disbursement_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='expenditure_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='expenditure_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='incoming_funds_currency',
+            field=models.CharField(default=None, max_length=3, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='childaggregation',
+            name='incoming_funds_value',
+            field=models.DecimalField(null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='condition',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.ConditionType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='contactinfo',
+            name='type',
+            field=models.ForeignKey(blank=True, to='iati_codelists.ContactType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='countrybudgetitem',
+            name='percentage',
+            field=models.DecimalField(default=None, null=True, max_digits=5, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='currency',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Currency', null=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='interest_arrears',
+            field=models.DecimalField(default=None, null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='interest_received',
+            field=models.DecimalField(default=None, null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='principal_arrears',
+            field=models.DecimalField(default=None, null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='principal_outstanding',
+            field=models.DecimalField(default=None, null=True, max_digits=15, decimal_places=2, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='value_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanstatus',
+            name='year',
+            field=models.IntegerField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='commitment_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='rate_1',
+            field=models.IntegerField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='rate_2',
+            field=models.IntegerField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='repayment_final_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='repayment_first_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='repayment_plan',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.LoanRepaymentPeriod', null=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='repayment_plan_text',
+            field=models.TextField(default=b'', null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddloanterms',
+            name='repayment_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.LoanRepaymentType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='crsaddotherflags',
+            name='other_flags_significance',
+            field=models.IntegerField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='description',
+            name='type',
+            field=models.ForeignKey(related_name='description_type', default=None, blank=True, to='iati_codelists.DescriptionType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='documentlink',
+            name='file_format',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.FileFormat', null=True),
+        ),
+        migrations.AlterField(
+            model_name='documentlinklanguage',
+            name='language',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Language', null=True),
+        ),
+        migrations.AlterField(
+            model_name='fss',
+            name='extraction_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='fss',
+            name='phaseout_year',
+            field=models.IntegerField(null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='fssforecast',
+            name='value_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='fssforecast',
+            name='year',
+            field=models.IntegerField(null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='legacydata',
+            name='iati_equivalent',
+            field=models.CharField(max_length=150, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='legacydata',
+            name='name',
+            field=models.CharField(max_length=150, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='legacydata',
+            name='value',
+            field=models.CharField(max_length=200, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='exactness',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.GeographicExactness', null=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='feature_designation',
+            field=models.ForeignKey(related_name='feature_designation', default=None, blank=True, to='iati_codelists.LocationType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='location_class',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.GeographicLocationClass', null=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='location_id_vocabulary',
+            field=models.ForeignKey(related_name='location_id_vocabulary', default=None, blank=True, to='iati_vocabulary.GeographicVocabulary', null=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='location_reach',
+            field=models.ForeignKey(related_name='location_reach', default=None, blank=True, to='iati_codelists.GeographicLocationReach', null=True),
+        ),
+        migrations.AlterField(
+            model_name='location',
+            name='ref',
+            field=models.CharField(default=b'', max_length=200, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='locationadministrative',
+            name='level',
+            field=models.IntegerField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='otheridentifier',
+            name='type',
+            field=models.ForeignKey(blank=True, to='iati_codelists.OtherIdentifierType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='planneddisbursement',
+            name='budget_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.BudgetType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='planneddisbursement',
+            name='currency',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Currency', null=True),
+        ),
+        migrations.AlterField(
+            model_name='planneddisbursement',
+            name='value_date',
+            field=models.DateField(null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='relatedactivity',
+            name='ref_activity',
+            field=models.ForeignKey(related_name='ref_activity', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='iati.Activity', null=True),
+        ),
+        migrations.AlterField(
+            model_name='relatedactivity',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.RelatedActivityType', max_length=200, null=True),
+        ),
+        migrations.AlterField(
+            model_name='result',
+            name='type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.ResultType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='resultindicator',
+            name='measure',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.IndicatorMeasure', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='aid_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.AidType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='currency',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.Currency', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='disbursement_channel',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.DisbursementChannel', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='finance_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.FinanceType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='flow_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.FlowType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='recipient_country',
+            field=models.ForeignKey(default=None, blank=True, to='geodata.Country', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='recipient_region',
+            field=models.ForeignKey(blank=True, to='geodata.Region', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='ref',
+            field=models.CharField(default=b'', max_length=255, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='tied_status',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.TiedStatus', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='transaction_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='transaction_type',
+            field=models.ForeignKey(default=None, blank=True, to='iati_codelists.TransactionType', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transaction',
+            name='value_date',
+            field=models.DateField(default=None, null=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionprovider',
+            name='organisation',
+            field=models.ForeignKey(related_name='transaction_providing_organisation', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='iati_organisation.Organisation', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionprovider',
+            name='provider_activity',
+            field=models.ForeignKey(related_name='transaction_provider_activity', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='iati.Activity', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionprovider',
+            name='provider_activity_ref',
+            field=models.CharField(default=b'', max_length=200, null=True, db_index=True, blank=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionreceiver',
+            name='organisation',
+            field=models.ForeignKey(related_name='transaction_receiving_organisation', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='iati_organisation.Organisation', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionreceiver',
+            name='receiver_activity',
+            field=models.ForeignKey(related_name='transaction_receiver_activity', on_delete=django.db.models.deletion.SET_NULL, default=None, blank=True, to='iati.Activity', null=True),
+        ),
+        migrations.AlterField(
+            model_name='transactionreceiver',
+            name='receiver_activity_ref',
+            field=models.CharField(default=b'', max_length=200, null=True, db_index=True, blank=True),
+        ),
+    ]
diff --git a/OIPA/iati/migrations/0009_auto_20151208_1423.py b/OIPA/iati/migrations/0009_auto_20151208_1423.py
new file mode 100755
index 0000000000..3b52bca2c0
--- /dev/null
+++ b/OIPA/iati/migrations/0009_auto_20151208_1423.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import models, migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('iati', '0008_auto_20151203_1403'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='activityreportingorganisation',
+            name='normalized_ref',
+            field=models.CharField(default=b'', max_length=120, db_index=True),
+        ),
+        migrations.AlterField(
+            model_name='activityreportingorganisation',
+            name='ref',
+            field=models.CharField(max_length=250, db_index=True),
+        ),
+    ]
diff --git a/OIPA/iati/models.py b/OIPA/iati/models.py
index 588f2ec4f0..16b1e3f945 100755
--- a/OIPA/iati/models.py
+++ b/OIPA/iati/models.py
@@ -167,8 +167,8 @@ class ActivitySearchData(models.Model):
 
 
 class ActivityReportingOrganisation(models.Model):
-    ref = models.CharField(max_length=250)
-    normalized_ref = models.CharField(max_length=120, default="")
+    ref = models.CharField(max_length=250, db_index=True)
+    normalized_ref = models.CharField(max_length=120, db_index=True, default="")
 
     narratives = GenericRelation(
         Narrative,
diff --git a/OIPA/iati/search_indexes.py b/OIPA/iati/search_indexes.py
index 1aac4f221f..b10d0e9238 100755
--- a/OIPA/iati/search_indexes.py
+++ b/OIPA/iati/search_indexes.py
@@ -1,6 +1,6 @@
 from haystack import indexes
 from models import Activity
-
+from django.core.exceptions import ObjectDoesNotExist
 
 class ActivityIndex(indexes.SearchIndex, indexes.Indexable):
     text = indexes.MultiValueField(document=True)
@@ -37,12 +37,16 @@ def prepare(self, obj):
         texts.extend(self.prepare_sector(obj))
         texts.extend(self.prepare_document_link(obj))
         texts.extend(self.prepare_participating_org(obj))
+        texts.extend(self.prepare_reporting_org(obj))
         self.prepared_data['text'] = texts
 
         return self.prepared_data
 
     def prepare_title(self, obj):
-        return [narrative.content for narrative in obj.title.narratives.all()]
+	try:
+		return [narrative.content for narrative in obj.title.narratives.all()]
+	except ObjectDoesNotExist:
+		return []
 
     def prepare_description(self, obj):
         text = []
diff --git a/OIPA/iati/transaction/factories.py b/OIPA/iati/transaction/factories.py
index 891099e66e..3255c89cab 100755
--- a/OIPA/iati/transaction/factories.py
+++ b/OIPA/iati/transaction/factories.py
@@ -27,10 +27,11 @@ class TransactionReceiverFactory(NoDatabaseFactory):
     receiver_activity_ref = "IATI-0001"
 
 class TransactionFactory(NoDatabaseFactory):
-    id = 1
+
     activity = SubFactory(ActivityFactory)
     transaction_date = date.today()
     transaction_type = SubFactory(TransactionTypeFactory, code=1)
+    value = 200
 
     class Meta:
         model = Transaction
