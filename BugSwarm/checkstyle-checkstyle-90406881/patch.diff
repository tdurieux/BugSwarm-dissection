diff --git a/.travis.yml b/.travis.yml
index cc3597a921..3e323a5ee6 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -42,10 +42,15 @@ matrix:
     # assembly (oraclejdk8)
     - jdk: oraclejdk8
       env:
-        - DESC="assembly"
-        - CMD1="mvn clean install -Passembly -DskipTests -DskipITs -Dcobertura.skip=true"
-        - CMD2=" -Dpmd.skip=true -Dfindbugs.skip=true -Dcheckstyle.ant.skip=true"
-        - CMD=$CMD1$CMD2
+        - DESC="assembly & run '-all' jar"
+        - CMD1="mvn clean package -Passembly"
+        - CMD2=" && CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)"
+        - CMD3=" && echo verson:\$CS_POM_VERSION"
+        - CMD4=" && java -jar target/checkstyle-\$CS_POM_VERSION-all.jar -c /google_checks.xml"
+        - CMD5="      src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java > output.log"
+        - CMD6=" && cat output.log"
+        - CMD7=" && cat output.log | grep 'warning|(Audit done.)' | if [[ \"Audit done.\" != $? ]]; then exit 1; fi"
+        - CMD=$CMD1$CMD2$CMD3$CMD4$CMD5$CMD6$CMD7
         - COVERAGE_CMD=""
     # nemo.sonarqube.com (oraclejdk7)
     - jdk: oraclejdk7
diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 3e92d5b167..51f4ea010e 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -108,7 +108,9 @@
     <property name="tabWidth" value="4"/>
 
     <!-- Annotations -->
-    <module name="AnnotationLocation"/>
+    <module name="AnnotationLocation">
+      <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
+    </module>
     <module name="AnnotationUseStyle"/>
     <module name="MissingDeprecated"/>
     <module name="MissingOverride">
diff --git a/pom.xml b/pom.xml
index 944ae71a5c..07351aef02 100755
--- a/pom.xml
+++ b/pom.xml
@@ -192,7 +192,7 @@
     <projectVersion>${project.version}</projectVersion>
     <antlr4.version>4.5.1-1</antlr4.version>
     <maven.site.plugin.version>3.4</maven.site.plugin.version>
-    <maven.findbugs.plugin.version>3.0.2</maven.findbugs.plugin.version>
+    <maven.findbugs.plugin.version>3.0.3</maven.findbugs.plugin.version>
     <maven.pmd.plugin.version>3.5</maven.pmd.plugin.version>
     <maven.jacoco.plugin.version>0.7.5.201505241946</maven.jacoco.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
@@ -287,7 +287,7 @@
     <dependency>
       <groupId>org.slf4j</groupId>
       <artifactId>slf4j-simple</artifactId>
-      <version>1.7.12</version>
+      <version>1.7.13</version>
       <scope>test</scope>
     </dependency>
     <dependency>
@@ -888,29 +888,13 @@
           <bundledSignature>jdk-system-out</bundledSignature>
         </bundledSignatures>
         <excludes>
+          <!-- system-out is ok there, that is CLI -->
+          <exclude>**/Main.class</exclude>
+          <!-- generated classes, unfortunately use problematic api -->
           <exclude>**/GeneratedJavaLexer.class</exclude>
           <exclude>**/JavadocParser.class</exclude>
-          <exclude>**/Main.class</exclude>
           <!-- Tests related -->
           <exclude>**/Input*</exclude>
-          <exclude>**/*Input.class</exclude>
-          <exclude>**/New*</exclude>
-          <exclude>**/CompareTreesWithComments.class</exclude>
-          <exclude>**/UpdateClass.class</exclude>
-          <exclude>**/bug*</exclude>
-          <exclude>**/oneMoreClass.class</exclude>
-          <exclude>**/RightCurlyInput_Other.class</exclude>
-          <exclude>**/test_*</exclude>
-          <exclude>**/WithInner$Inner.class</exclude>
-          <exclude>**/Foo*</exclude>
-          <exclude>**/WithAnon$1.class</exclude>
-          <exclude>**/UncommentedMainTest*</exclude>
-          <exclude>**/Temp*</exclude>
-          <exclude>**/Issue*</exclude>
-          <exclude>**/Main1.class</exclude>
-          <exclude>**/ConfigurationBuilder.class</exclude>
-          <exclude>**/WithAnonymousClass$1.class</exclude>
-          <exclude>**/Test.class</exclude>
         </excludes>
       </configuration>
       <executions>
@@ -1735,6 +1719,7 @@
                   <exclude>com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalCheck.class</exclude>
                   <exclude>com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.class</exclude>
                   <exclude>com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.class</exclude>
+                  <exclude>com/puppycrawl/tools/checkstyle/checks/naming/AbstractTypeParameterNameCheck.class</exclude>
                 </excludes>
               </instrumentation>
             </configuration>
diff --git a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
index 7aa8823447..da9ab927b9 100755
--- a/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java
@@ -20,6 +20,8 @@
 package com.google.checkstyle.test.base;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -32,7 +34,6 @@
 import java.nio.charset.StandardCharsets;
 import java.text.MessageFormat;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
@@ -52,25 +53,22 @@
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 public class BaseCheckTestSupport {
-    private static final Pattern warnPattern = CommonUtils
+    private static final Pattern WARN_PATTERN = CommonUtils
             .createPattern(".*[ ]*//[ ]*warn[ ]*|/[*]warn[*]/");
-    
+
     private static final String XML_NAME = "/google_checks.xml";
 
-    private static Configuration configuration = null;
+    private static Configuration configuration;
 
     protected final ByteArrayOutputStream stream = new ByteArrayOutputStream();
 
-    static {
-        try {
+    protected static Configuration getConfiguration() throws CheckstyleException {
+        if (configuration == null) {
             configuration = ConfigurationLoader.loadConfiguration(XML_NAME, new PropertiesExpander(
                     System.getProperties()));
         }
-        catch (final CheckstyleException e) {
-            System.out.println("Error loading configuration file");
-            e.printStackTrace(System.out);
-            System.exit(1);
-        }
+
+        return configuration;
     }
 
     protected static DefaultConfiguration createCheckConfig(Class<?> clazz) {
@@ -81,8 +79,8 @@ protected Checker createChecker(Configuration checkConfig)
             throws Exception {
         final DefaultConfiguration dc = createCheckerConfig(checkConfig);
         final Checker checker = new Checker();
-        // make sure the tests always run with english error messages
-        // so the tests don't fail in supported locales like german
+        // make sure the tests always run with English error messages
+        // so the tests don't fail in supported locales like German
         final Locale locale = Locale.ENGLISH;
         checker.setLocaleCountry(locale.getCountry());
         checker.setLocaleLanguage(locale.getLanguage());
@@ -108,62 +106,51 @@ protected String getPath(String fileName) throws IOException {
                 .getCanonicalPath();
     }
 
-    protected void verify(Configuration aConfig, String aFileName, String[] aExpected,
-            Integer... aWarnsExpected) throws Exception {
-        verify(createChecker(aConfig), aFileName, aFileName, aExpected, aWarnsExpected);
-    }
-
-    protected void verify(Checker aC, String aFileName, String[] aExpected,
-            Integer... aWarnsExpected) throws Exception {
-        verify(aC, aFileName, aFileName, aExpected, aWarnsExpected);
+    protected void verify(Configuration config, String fileName, String[] expected,
+            Integer... warnsExpected) throws Exception {
+        verify(createChecker(config),
+                new File[] {new File(fileName)},
+                fileName, expected, warnsExpected);
     }
 
-    private void verify(Checker aC,
-            String aProcessedFilename,
-            String aMessageFileName,
-            String[] aExpected, Integer... aWarnsExpected)
-        throws Exception {
-        verify(aC,
-            new File[] {new File(aProcessedFilename)},
-            aMessageFileName, aExpected, aWarnsExpected);
-    }
-
-    protected void verify(Checker aC,
-            File[] aProcessedFiles,
-            String aMessageFileName,
-            String[] aExpected,
-            Integer... aWarnsExpected)
+    protected void verify(Checker checker,
+            File[] processedFiles,
+            String messageFileName,
+            String[] expected,
+            Integer... warnsExpected)
         throws Exception {
         stream.flush();
         final List<File> theFiles = Lists.newArrayList();
-        Collections.addAll(theFiles, aProcessedFiles);
-        final int errs = aC.process(theFiles);
+        Collections.addAll(theFiles, processedFiles);
+        final List<Integer> theWarnings = Lists.newArrayList();
+        Collections.addAll(theWarnings, warnsExpected);
+        final int errs = checker.process(theFiles);
 
         // process each of the lines
-        final ByteArrayInputStream localStream =
-            new ByteArrayInputStream(stream.toByteArray());
+        final ByteArrayInputStream inputStream =
+                new ByteArrayInputStream(stream.toByteArray());
         try (final LineNumberReader lnr = new LineNumberReader(
-                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {
+                new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
 
-            for (int i = 0; i < aExpected.length; i++) {
-                final String expected = aMessageFileName + ":" + aExpected[i];
+            for (int i = 0; i < expected.length; i++) {
+                final String expectedResult = messageFileName + ":" + expected[i];
                 final String actual = lnr.readLine();
-                assertEquals("error message " + i, expected, actual);
+                assertEquals("error message " + i, expectedResult, actual);
+
                 String parseInt = removeDeviceFromPathOnWindows(actual);
                 parseInt = parseInt.substring(parseInt.indexOf(':') + 1);
                 parseInt = parseInt.substring(0, parseInt.indexOf(':'));
                 final int lineNumber = Integer.parseInt(parseInt);
-                Integer integer = 0;
-                if (Arrays.asList(aWarnsExpected).contains(lineNumber)) {
-                    integer = lineNumber;
-                }
-                assertEquals("error message " + i, (long) integer, lineNumber);
+                assertNotNull("expected input file to have warning comment on line number "
+                        + lineNumber, theWarnings.remove((Integer) lineNumber));
             }
 
             assertEquals("unexpected output: " + lnr.readLine(),
-                    aExpected.length, errs);
+                    expected.length, errs);
+            assertTrue("unexpected warnings " + theWarnings, theWarnings.size() == 0);
         }
-        aC.destroy();
+
+        checker.destroy();
     }
 
     /**
@@ -203,9 +190,9 @@ protected String getCheckMessage(Map<String, String> messages, String messageKey
         return null;
     }
 
-    protected static Configuration getCheckConfig(String checkName) {
+    protected static Configuration getCheckConfig(String checkName) throws CheckstyleException {
         Configuration result = null;
-        for (Configuration currentConfig : configuration.getChildren()) {
+        for (Configuration currentConfig : getConfiguration().getChildren()) {
             if ("TreeWalker".equals(currentConfig.getName())) {
                 for (Configuration checkConfig : currentConfig.getChildren()) {
                     if (checkName.equals(checkConfig.getName())) {
@@ -230,7 +217,7 @@ private static String removeDeviceFromPathOnWindows(String path) {
         return path;
     }
 
-    protected static Integer[] getLinesWithWarn(String fileName) throws IOException {
+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {
         final List<Integer> result = new ArrayList<>();
         try (BufferedReader br = new BufferedReader(new InputStreamReader(
                 new FileInputStream(fileName), StandardCharsets.UTF_8))) {
@@ -240,7 +227,7 @@ private static String removeDeviceFromPathOnWindows(String path) {
                 if (line == null) {
                     break;
                 }
-                if (warnPattern.matcher(line).find()) {
+                if (WARN_PATTERN.matcher(line).find()) {
                     result.add(lineNumber);
                 }
                 lineNumber++;
diff --git a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
similarity index 96%
rename from src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java
rename to src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
index 400e375d0c..9f977b2a44 100755
--- a/src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/BaseIndentationCheckSupport.java
@@ -20,7 +20,6 @@
 package com.google.checkstyle.test.base;
 
 import java.io.BufferedReader;
-import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -34,7 +33,7 @@
 
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
-public class IndentationConfigurationBuilder extends ConfigurationBuilder {
+public class BaseIndentationCheckSupport extends BaseCheckTestSupport {
     private static final int TAB_WIDTH = 4;
 
     private static final Pattern NONEMPTY_LINE_REGEX =
@@ -55,13 +54,9 @@
     private static final Pattern NON_STRICT_LEVEL_COMMENT_REGEX =
             Pattern.compile("//indent:\\d+ exp:>=(\\d+)( warn)?");
 
-    public IndentationConfigurationBuilder(File aRoot) {
-        super(aRoot);
-    }
-
     @Override
-    public Integer[] getLinesWithWarn(String aFileName) throws IOException {
-        return getLinesWithWarnAndCheckComments(aFileName, TAB_WIDTH);
+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {
+        return getLinesWithWarnAndCheckComments(fileName, TAB_WIDTH);
     }
 
     private enum CommentType {
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
new file mode 100755
index 0000000000..85eec3f431
--- /dev/null
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigValidationTest.java
@@ -0,0 +1,69 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.google.checkstyle.test.base;
+
+import static org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
+import static org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.Checker;
+import com.puppycrawl.tools.checkstyle.api.Configuration;
+
+public class ConfigValidationTest extends BaseCheckTestSupport {
+    @Test
+    public void testGoogleChecks() throws Exception {
+        final Configuration checkerConfig = getConfiguration();
+        final Checker checker = new Checker();
+        final Locale locale = Locale.ROOT;
+        checker.setLocaleCountry(locale.getCountry());
+        checker.setLocaleLanguage(locale.getLanguage());
+        checker.setModuleClassLoader(Thread.currentThread().getContextClassLoader());
+        checker.configure(checkerConfig);
+        checker.addListener(new BriefLogger(stream));
+
+        final List<File> files = new ArrayList<>();
+        listFiles(files, new File("src/it/"), "java");
+
+        //runs over all input files;
+        //as severity level is "warning", no errors expected
+        verify(checker, files.toArray(new File[files.size()]), "",
+                EMPTY_STRING_ARRAY, EMPTY_INTEGER_OBJECT_ARRAY);
+    }
+
+    private static void listFiles(final List<File> files, final File folder,
+            final String extension) {
+        if (folder.canRead()) {
+            if (folder.isDirectory()) {
+                for (final File file : folder.listFiles()) {
+                    listFiles(files, file, extension);
+                }
+            }
+            else if (folder.toString().endsWith("." + extension)) {
+                files.add(folder);
+            }
+        }
+    }
+}
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
index 5fe580a28a..e588c031b7 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule231filetab/FileTabCharacterTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter2filebasic.rule231filetab;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck;
 
 public class FileTabCharacterTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter2filebasic" + File.separator + "rule231filetab"
+                + File.separator + fileName);
     }
 
     @Override
@@ -63,10 +61,9 @@ public void fileTabTest() throws Exception {
             "134:3: " + getCheckMessage(FileTabCharacterCheck.class, "containsTab"),
         };
 
-        final String filePath = builder.getFilePath("InputFileTabCharacter");
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
-        verify(createChecker(checkConfig), filePath,
-            expected, warnList);
+        final String filePath = getPath("InputFileTabCharacter.java");
+        final Integer[] warnList = getLinesWithWarn(filePath);
+        verify(checkConfig, filePath, expected, warnList);
     }
 
     /**
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
index 7e03c39079..d6ba17046f 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java
@@ -20,21 +20,19 @@
 package com.google.checkstyle.test.chapter2filebasic.rule232specialescape;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class IllegalTokenTextTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter2filebasic" + File.separator + "rule232specialescape"
+                + File.separator + fileName);
     }
 
     @Test
@@ -109,10 +107,10 @@ public void illegalTokensTest() throws Exception {
             "162:29: Avoid using corresponding octal or Unicode escape.",
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("IllegalTokenText");
-        final String filePath = builder.getFilePath("InputIllegalTokenText");
+        final Configuration checkConfig = getCheckConfig("IllegalTokenText");
+        final String filePath = getPath("InputIllegalTokenText.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
index a2103c2980..1171812fae 100755
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule233nonascii/AvoidEscapedUnicodeCharactersTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter2filebasic.rule233nonascii;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck;
 
 public class AvoidEscapedUnicodeCharactersTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter2filebasic" + File.separator + "rule233nonascii"
+                + File.separator + fileName);
     }
 
     @Test
@@ -53,10 +51,10 @@ public void unicodeEscapesTest() throws Exception {
             "36: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("AvoidEscapedUnicodeCharacters");
-        final String filePath = builder.getFilePath("InputAvoidEscapedUnicodeCharacters");
+        final Configuration checkConfig = getCheckConfig("AvoidEscapedUnicodeCharacters");
+        final String filePath = getPath("InputAvoidEscapedUnicodeCharacters.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
index 93a086e72a..e36a3e225e 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter3filestructure.rule32packagestate;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck;
 
 public class LineLengthTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule32packagestate"
+                + File.separator + fileName);
     }
 
     @Test
@@ -52,10 +50,10 @@ public void lineLengthTest() throws Exception {
             "57: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 116),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LineLength");
-        final String filePath = builder.getFilePath("InputLineLength");
+        final Configuration checkConfig = getCheckConfig("LineLength");
+        final String filePath = getPath("InputLineLength.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
index 0d2e07b301..a4d957fd36 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java
@@ -20,21 +20,19 @@
 package com.google.checkstyle.test.chapter3filestructure.rule331nowildcard;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class AvoidStarImportTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule331nowildcard"
+                + File.separator + fileName);
     }
 
     @Test
@@ -47,10 +45,10 @@ public void starImportTest() throws Exception {
             "19: Using the '.*' form of import should be avoided - javax.swing.WindowConstants.*.",
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("AvoidStarImport");
-        final String filePath = builder.getFilePath("InputAvoidStarImport");
+        final Configuration checkConfig = getCheckConfig("AvoidStarImport");
+        final String filePath = getPath("InputAvoidStarImport.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
index 45d34a659b..50f1dda395 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java
@@ -20,24 +20,22 @@
 package com.google.checkstyle.test.chapter3filestructure.rule332nolinewrap;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck;
 
 public class NoLineWrapTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule332nolinewrap"
+                + File.separator + fileName);
     }
 
     @Test
@@ -48,10 +46,10 @@ public void badLineWrapTest() throws Exception {
             "6: " + getCheckMessage(NoLineWrapCheck.class, "no.line.wrap", "import"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NoLineWrap");
-        final String filePath = builder.getFilePath("InputNoLineWrapBad");
+        final Configuration checkConfig = getCheckConfig("NoLineWrap");
+        final String filePath = getPath("InputNoLineWrapBad.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -60,10 +58,10 @@ public void goodLineWrapTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("NoLineWrap");
-        final String filePath = builder.getFilePath("InputNoLineWrapGood");
+        final Configuration checkConfig = getCheckConfig("NoLineWrap");
+        final String filePath = getPath("InputNoLineWrapGood.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -73,19 +71,13 @@ public void goodLineLength() throws Exception {
         final int maxLineLength = 100;
         final String[] expected = {
             "5: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 112),
-            "29: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 183),
-            "46: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 131),
-            "47: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 124),
-            "48: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 113),
-            "50: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 116),
-            "53: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 131),
-            "57: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 116),
+            "29: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", maxLineLength, 113),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LineLength");
-        final String filePath = builder.getFilePath("InputLineLength");
+        final Configuration checkConfig = getCheckConfig("LineLength");
+        final String filePath = getPath("InputLineLength.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
index 6d9dda4adb..96545aa454 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandspacing/CustomImportOrderTest.java
@@ -20,13 +20,12 @@
 package com.google.checkstyle.test.chapter3filestructure.rule333orderingandspacing;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck;
 
@@ -40,12 +39,12 @@
     private static final String STD = CustomImportOrderCheck.STANDARD_JAVA_PACKAGE_RULE_GROUP;
     private static final String SPECIAL = CustomImportOrderCheck.SPECIAL_IMPORTS_RULE_GROUP;
 
-    private static ConfigurationBuilder builder;
     private final Class<CustomImportOrderCheck> clazz = CustomImportOrderCheck.class;
 
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule333orderingandspacing"
+                + File.separator + fileName);
     }
 
     @Test
@@ -66,10 +65,10 @@ public void customImportTest1() throws Exception {
             "16: " + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, "java.io.Reader"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
-        final String filePath = builder.getFilePath("InputCustomImportOrder1");
+        final Configuration checkConfig = getCheckConfig("CustomImportOrder");
+        final String filePath = getPath("InputCustomImportOrder1.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -91,10 +90,10 @@ public void customImportTest2() throws Exception {
                 "com.google.common.reflect.*"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
-        final String filePath = builder.getFilePath("InputCustomImportOrder2");
+        final Configuration checkConfig = getCheckConfig("CustomImportOrder");
+        final String filePath = getPath("InputCustomImportOrder2.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -115,10 +114,10 @@ public void customImportTest3() throws Exception {
                 "com.google.common.reflect.*"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
-        final String filePath = builder.getFilePath("InputCustomImportOrder3");
+        final Configuration checkConfig = getCheckConfig("CustomImportOrder");
+        final String filePath = getPath("InputCustomImportOrder3.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -127,10 +126,10 @@ public void validTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
-        final String filePath = builder.getFilePath("InputCustomImportOrderValid");
+        final Configuration checkConfig = getCheckConfig("CustomImportOrder");
+        final String filePath = getPath("InputCustomImportOrderValid.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
index b3e89fbb38..952f752c90 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter3filestructure.rule341onetoplevel;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.design.OneTopLevelClassCheck;
 
 public class OneTopLevelClassTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule341onetoplevel"
+                + File.separator + fileName);
     }
 
     @Test
@@ -54,10 +52,10 @@ public void badTest() throws Exception {
             "77: " + getCheckMessage(clazz, messageKey, "AnotherClass"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OneTopLevelClass");
-        final String filePath = builder.getFilePath("InputOneTopLevelClassBasic");
+        final Configuration checkConfig = getCheckConfig("OneTopLevelClass");
+        final String filePath = getPath("InputOneTopLevelClassBasic.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -66,10 +64,10 @@ public void goodTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("OneTopLevelClass");
-        final String filePath = builder.getFilePath("InputOneTopLevelClassGood");
+        final Configuration checkConfig = getCheckConfig("OneTopLevelClass");
+        final String filePath = getPath("InputOneTopLevelClassGood.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -83,10 +81,10 @@ public void bad1Test() throws Exception {
             "4: " + getCheckMessage(clazz, messageKey, "FooEnum"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OneTopLevelClass");
-        final String filePath = builder.getFilePath("InputOneTopLevelClassBad1");
+        final Configuration checkConfig = getCheckConfig("OneTopLevelClass");
+        final String filePath = getPath("InputOneTopLevelClassBad1.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -101,10 +99,10 @@ public void bad2Test() throws Exception {
             "7: " + getCheckMessage(clazz, messageKey, "FooClass"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OneTopLevelClass");
-        final String filePath = builder.getFilePath("InputOneTopLevelClassBad2");
+        final Configuration checkConfig = getCheckConfig("OneTopLevelClass");
+        final String filePath = getPath("InputOneTopLevelClassBad2.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
index 6b5e01c500..a67a4908ee 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter3filestructure.rule3421overloadsplit;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.OverloadMethodsDeclarationOrderCheck;
 
 public class OverloadMethodsDeclarationOrderTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule3421overloadsplit"
+                + File.separator + fileName);
     }
 
     @Test
@@ -52,10 +50,10 @@ public void overloadMethodsTest() throws Exception {
             "109: " + getCheckMessage(clazz, messageKey, 98),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OverloadMethodsDeclarationOrder");
-        final String filePath = builder.getFilePath("InputOverloadMethodsDeclarationOrder");
+        final Configuration checkConfig = getCheckConfig("OverloadMethodsDeclarationOrder");
+        final String filePath = getPath("InputOverloadMethodsDeclarationOrder.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
index 322c510030..18e3f1fb61 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter3filestructure.rule3sourcefile;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck;
 
 public class EmptyLineSeparatorTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter3filestructure" + File.separator + "rule3sourcefile"
+                + File.separator + fileName);
     }
 
     @Test
@@ -56,10 +54,10 @@ public void emptyLineSeparatorTest() throws Exception {
             "119: " + getCheckMessage(clazz, messageKey, "VARIABLE_DEF"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyLineSeparator");
-        final String filePath = builder.getFilePath("InputEmptyLineSeparator");
+        final Configuration checkConfig = getCheckConfig("EmptyLineSeparator");
+        final String filePath = getPath("InputEmptyLineSeparator.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
index 2e68aa7e99..ff3453ce71 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule411bracesareused;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck;
 
 public class NeedBracesTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule411bracesareused"
+                + File.separator + fileName);
     }
 
     @Test
@@ -85,10 +83,10 @@ public void needBracesTest() throws Exception {
             "210: " + getCheckMessage(clazz, messageKey, "for"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NeedBraces");
-        final String filePath = builder.getFilePath("InputNeedBraces");
+        final Configuration checkConfig = getCheckConfig("NeedBraces");
+        final String filePath = getPath("InputNeedBraces.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
index b6d56c2d91..206ef27f70 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyTest.java
@@ -22,22 +22,20 @@
 import static com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck.MSG_KEY_LINE_PREVIOUS;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck;
 
 public class LeftCurlyTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule412nonemptyblocks"
+                + File.separator + fileName);
     }
 
     @Test
@@ -53,10 +51,10 @@ public void leftCurlyBracesTest() throws Exception {
             "97:5: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 5),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LeftCurly");
-        final String filePath = builder.getFilePath("InputLeftCurlyBraces");
+        final Configuration checkConfig = getCheckConfig("LeftCurly");
+        final String filePath = getPath("InputLeftCurlyBraces.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -71,10 +69,10 @@ public void leftCurlyAnnotationsTest() throws Exception {
             "50:5: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 5),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LeftCurly");
-        final String filePath = builder.getFilePath("InputLeftCurlyAnnotations");
+        final Configuration checkConfig = getCheckConfig("LeftCurly");
+        final String filePath = getPath("InputLeftCurlyAnnotations.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -99,10 +97,10 @@ public void leftCurlyMethodsTest() throws Exception {
             "76:5: " + getCheckMessage(LeftCurlyCheck.class, MSG_KEY_LINE_PREVIOUS, "{", 5),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LeftCurly");
-        final String filePath = builder.getFilePath("InputLeftCurlyMethod");
+        final Configuration checkConfig = getCheckConfig("LeftCurly");
+        final String filePath = getPath("InputLeftCurlyMethod.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
index aa69311a16..eec483d2c7 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
@@ -23,24 +23,22 @@
 import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_NEW;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption;
 
 public class RightCurlyTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule412nonemptyblocks"
+                + File.separator + fileName);
     }
 
     @Test
@@ -57,8 +55,8 @@ public void rightCurlyTestAlone() throws Exception {
             "122:6: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_NEW, "}", 6),
         };
 
-        final String filePath = builder.getFilePath("InputRightCurlyOther");
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final String filePath = getPath("InputRightCurlyOther.java");
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(newCheckConfig, filePath, expected, warnList);
     }
 
@@ -69,8 +67,8 @@ public void rightCurlyTestSame() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final String filePath = builder.getFilePath("InputRightCurlySame");
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final String filePath = getPath("InputRightCurlySame.java");
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(newCheckConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
index 2efa48095b..8c25633d68 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule413emptyblocks;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck;
 
 public class EmptyBlockTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule413emptyblocks"
+                + File.separator + fileName);
     }
 
     @Test
@@ -77,10 +75,10 @@ public void emptyBlockTest() throws Exception {
             "320:34: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "if"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyBlock");
-        final String filePath = builder.getFilePath("InputEmptyBlockBasic");
+        final Configuration checkConfig = getCheckConfig("EmptyBlock");
+        final String filePath = getPath("InputEmptyBlockBasic.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -93,10 +91,10 @@ public void emptyBlockTestCatch() throws Exception {
             "72:21: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "finally"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyBlock");
-        final String filePath = builder.getFilePath("InputEmptyBlockCatch");
+        final Configuration checkConfig = getCheckConfig("EmptyBlock");
+        final String filePath = getPath("InputEmptyBlock.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
index 8fe7aa17a7..ba1093899f 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java
@@ -20,22 +20,21 @@
 package com.google.checkstyle.test.chapter4formatting.rule413emptyblocks;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyCatchBlockCheck;
 
 public class EmptyCatchBlockTest extends BaseCheckTestSupport {
-    private static ConfigurationBuilder builder;
 
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule413emptyblocks"
+                + File.separator + fileName);
     }
 
     @Test
@@ -47,10 +46,10 @@ public void emptyBlockTestCatch() throws Exception {
             "71: " + getCheckMessage(EmptyCatchBlockCheck.class, "catch.block.empty"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyCatchBlock");
-        final String filePath = builder.getFilePath("InputEmptyBlockCatch");
+        final Configuration checkConfig = getCheckConfig("EmptyCatchBlock");
+        final String filePath = getPath("InputEmptyBlockCatch.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -59,10 +58,10 @@ public void testNoViolations() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyCatchBlock");
-        final String filePath = builder.getFilePath("InputEmptyCatchBlockNoViolations");
+        final Configuration checkConfig = getCheckConfig("EmptyCatchBlock");
+        final String filePath = getPath("InputEmptyCatchBlockNoViolations.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -74,10 +73,10 @@ public void testViolationsByComment() throws Exception {
             "27: " + getCheckMessage(EmptyCatchBlockCheck.class, "catch.block.empty"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyCatchBlock");
-        final String filePath = builder.getFilePath("InputEmptyCatchBlockViolationsByComment");
+        final Configuration checkConfig = getCheckConfig("EmptyCatchBlock");
+        final String filePath = getPath("InputEmptyCatchBlockViolationsByComment.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -90,10 +89,10 @@ public void testViolationsByVariableName() throws Exception {
             "58: " + getCheckMessage(EmptyCatchBlockCheck.class, "catch.block.empty"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyCatchBlock");
-        final String filePath = builder.getFilePath("InputEmptyCatchBlockViolationsByVariableName");
+        final Configuration checkConfig = getCheckConfig("EmptyCatchBlock");
+        final String filePath = getPath("InputEmptyCatchBlockViolationsByVariableName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
index 51ce9a8452..4d7b8f6625 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule43onestatement/OneStatementPerLineTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule43onestatement;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck;
 
 public class OneStatementPerLineTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule43onestatement"
+                + File.separator + fileName);
     }
 
     @Test
@@ -68,10 +66,10 @@ public void oneStatementTest() throws Exception {
             "307:39: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OneStatementPerLine");
-        final String filePath = builder.getFilePath("InputOneStatementPerLine");
+        final Configuration checkConfig = getCheckConfig("OneStatementPerLine");
+        final String filePath = getPath("InputOneStatementPerLine.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -85,12 +83,12 @@ public void oneStatementNonCompilableInputTest() throws Exception {
             "24:6: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OneStatementPerLine");
+        final Configuration checkConfig = getCheckConfig("OneStatementPerLine");
         final String filePath = new File("src/test/resources-noncompilable/"
             + "com/puppycrawl/tools/checkstyle/checks/coding/"
             + "InputOneStatementPerLine.java").getCanonicalPath();
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
index 2ab80382ca..1fb15c57b8 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/LineLengthTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule44columnlimit;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck;
 
 public class LineLengthTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule44columnlimit"
+                + File.separator + fileName);
     }
 
     @Test
@@ -43,19 +41,13 @@ public void lineLengthTest() throws Exception {
 
         final String[] expected = {
             "5: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 112),
-            "29: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 183),
-            "46: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 131),
-            "47: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 124),
-            "48: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 113),
-            "50: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 116),
-            "53: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 131),
-            "57: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 116),
+            "29: " + getCheckMessage(LineLengthCheck.class, "maxLineLen", 100, 113),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("LineLength");
-        final String filePath = builder.getFilePath("InputLineLength");
+        final Configuration checkConfig = getCheckConfig("LineLength");
+        final String filePath = getPath("InputLineLength.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
index 6449394889..f58dd8587e 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule451wheretobreak;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck;
 
 public class MethodParamPadTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule451wheretobreak"
+                + File.separator + fileName);
     }
 
     @Test
@@ -49,10 +47,10 @@ public void operatorWrapTest() throws Exception {
             "128:13: " + getCheckMessage(clazz, messageKey, "("),
             "130:9: " + getCheckMessage(clazz, messageKey, "("),
         };
-        final Configuration checkConfig = builder.getCheckConfig("MethodParamPad");
-        final String filePath = builder.getFilePath("InputMethodParamPad");
+        final Configuration checkConfig = getCheckConfig("MethodParamPad");
+        final String filePath = getPath("InputMethodParamPad.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
index bdf21ab8df..0c5ea65fe6 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/OperatorWrapTest.java
@@ -20,12 +20,11 @@
 package com.google.checkstyle.test.chapter4formatting.rule451wheretobreak;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck;
@@ -33,11 +32,10 @@
 
 public class OperatorWrapTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule451wheretobreak"
+                + File.separator + fileName);
     }
 
     @Test
@@ -68,10 +66,10 @@ public void operatorWrapTest() throws Exception {
             "185:38: " + getCheckMessage(clazz, messageKey, "?"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("OperatorWrap");
-        final String filePath = builder.getFilePath("InputOperatorWrap");
+        final Configuration checkConfig = getCheckConfig("OperatorWrap");
+        final String filePath = getPath("InputOperatorWrap.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -123,8 +121,8 @@ public void operatorWrapTestAssign() throws Exception {
             "348:17: " + getCheckMessage(clazz, messageKey, "<<="),
         };
 
-        final String filePath = builder.getFilePath("InputOperatorWrapAssign");
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final String filePath = getPath("InputOperatorWrapAssign.java");
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(newCheckConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
index a5cb93a989..2b535ecd4f 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule451wheretobreak;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck;
 
 public class SeparatorWrapTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule451wheretobreak"
+                + File.separator + fileName);
     }
 
     @Test
@@ -45,10 +43,10 @@ public void separatorWrapTest() throws Exception {
             "28:30: " + getCheckMessage(SeparatorWrapCheck.class, "line.new", "."),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("SeparatorWrap");
-        final String filePath = builder.getFilePath("InputSeparatorWrap");
+        final Configuration checkConfig = getCheckConfig("SeparatorWrap");
+        final String filePath = getPath("InputSeparatorWrap.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
index fb62e0cb0f..878c38089e 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule461verticalwhitespace;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck;
 
 public class EmptyLineSeparatorTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule461verticalwhitespace"
+                + File.separator + fileName);
     }
 
     @Test
@@ -56,10 +54,10 @@ public void emptyLineSeparatorTest() throws Exception {
             "119: " + getCheckMessage(clazz, messageKey, "VARIABLE_DEF"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyLineSeparator");
-        final String filePath = builder.getFilePath("InputEmptyLineSeparator");
+        final Configuration checkConfig = getCheckConfig("EmptyLineSeparator");
+        final String filePath = getPath("InputEmptyLineSeparator.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
index 9094b972ec..485520d4b0 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/GenericWhitespaceTest.java
@@ -20,21 +20,19 @@
 package com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class GenericWhitespaceTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule462horizontalwhitespace"
+                + File.separator + fileName);
     }
 
     @Test
@@ -42,7 +40,7 @@ public void whitespaceAroundGenericsTest() throws Exception {
 
         final String msgPreceded = "ws.preceded";
         final String msgFollowed = "ws.followed";
-        final Configuration checkConfig = builder.getCheckConfig("GenericWhitespace");
+        final Configuration checkConfig = getCheckConfig("GenericWhitespace");
 
         final String[] expected = {
             "12:16: " + getCheckMessage(checkConfig.getMessages(), msgPreceded, "<"),
@@ -63,9 +61,9 @@ public void whitespaceAroundGenericsTest() throws Exception {
             "20:61: " + getCheckMessage(checkConfig.getMessages(), msgPreceded, ">"),
         };
 
-        final String filePath = builder.getFilePath("InputWhitespaceAroundGenerics");
+        final String filePath = getPath("InputWhitespaceAroundGenerics.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -75,7 +73,7 @@ public void genericWhitespaceTest() throws Exception {
         final String msgFollowed = "ws.followed";
         final String msgNotPreceded = "ws.notPreceded";
         final String msgIllegalFollow = "ws.illegalFollow";
-        final Configuration checkConfig = builder.getCheckConfig("GenericWhitespace");
+        final Configuration checkConfig = getCheckConfig("GenericWhitespace");
 
         final String[] expected = {
             "16:13: " + getCheckMessage(checkConfig.getMessages(), msgPreceded, "<"),
@@ -106,9 +104,9 @@ public void genericWhitespaceTest() throws Exception {
             "63:60: " + getCheckMessage(checkConfig.getMessages(), msgFollowed, ">"),
         };
 
-        final String filePath = builder.getFilePath("InputGenericWhitespace");
+        final String filePath = getPath("InputGenericWhitespace.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
index a8de72b589..e164e92383 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java
@@ -20,28 +20,26 @@
 package com.google.checkstyle.test.chapter4formatting.rule462horizontalwhitespace;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class WhitespaceAroundTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule462horizontalwhitespace"
+                + File.separator + fileName);
     }
 
     @Test
     public void whitespaceAroundBasicTest() throws Exception {
 
-        final Configuration checkConfig = builder.getCheckConfig("WhitespaceAround");
+        final Configuration checkConfig = getCheckConfig("WhitespaceAround");
         final String msgPreceded = "ws.notPreceded";
         final String msgFollowed = "ws.notFollowed";
 
@@ -68,9 +66,9 @@ public void whitespaceAroundBasicTest() throws Exception {
             "150:20: " + getCheckMessage(checkConfig.getMessages(), msgPreceded, ":"),
         };
 
-        final String filePath = builder.getFilePath("InputWhitespaceAroundBasic");
+        final String filePath = getPath("InputWhitespaceAroundBasic.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -79,10 +77,10 @@ public void whitespaceAroundEmptyTypesCyclesTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("WhitespaceAround");
-        final String filePath = builder.getFilePath("InputWhitespaceAroundEmptyTypesAndCycles");
+        final Configuration checkConfig = getCheckConfig("WhitespaceAround");
+        final String filePath = getPath("InputWhitespaceAroundEmptyTypesAndCycles.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
index d613a560f9..35af6ed356 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariableperline/MultipleVariableDeclarationsTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4821onevariableperline;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.MultipleVariableDeclarationsCheck;
 
 public class MultipleVariableDeclarationsTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4821onevariableperline"
+                + File.separator + fileName);
     }
 
     @Test
@@ -69,10 +67,10 @@ public void multipleVariableDeclarationsTest() throws Exception {
             "89:5: " + msgComma,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("MultipleVariableDeclarations");
-        final String filePath = builder.getFilePath("InputMultipleVariableDeclarations");
+        final Configuration checkConfig = getCheckConfig("MultipleVariableDeclarations");
+        final String filePath = getPath("InputMultipleVariableDeclarations.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
index 69a07ca9d1..e67c86d4b0 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4822variabledistance;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.VariableDeclarationUsageDistanceCheck;
 
 public class VariableDeclarationUsageDistanceTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4822variabledistance"
+                + File.separator + fileName);
     }
 
     @Test
@@ -53,10 +51,10 @@ public void arrayTypeStyleTest() throws Exception {
         };
 
         final Configuration checkConfig =
-            builder.getCheckConfig("VariableDeclarationUsageDistance");
-        final String filePath = builder.getFilePath("InputVariableDeclarationUsageDistanceCheck");
+            getCheckConfig("VariableDeclarationUsageDistance");
+        final String filePath = getPath("InputVariableDeclarationUsageDistanceCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
index 52aa560e32..14c052f65a 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4832nocstylearray/ArrayTypeStyleTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4832nocstylearray;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck;
 
 public class ArrayTypeStyleTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4832nocstylearray"
+                + File.separator + fileName);
     }
 
     @Test
@@ -52,10 +50,10 @@ public void arrayTypeStyleTest() throws Exception {
             "42:19: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("ArrayTypeStyle");
-        final String filePath = builder.getFilePath("InputArrayTypeStyle");
+        final Configuration checkConfig = getCheckConfig("ArrayTypeStyle");
+        final String filePath = getPath("InputArrayTypeStyle.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
index 97617a7f1f..b4a44b2ac5 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java
@@ -20,23 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4841indentation;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
-import com.google.checkstyle.test.base.IndentationConfigurationBuilder;
+import com.google.checkstyle.test.base.BaseIndentationCheckSupport;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
-public class IndentationTest extends BaseCheckTestSupport {
+public class IndentationTest extends BaseIndentationCheckSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new IndentationConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4841indentation"
+                + File.separator + fileName);
     }
 
     @Test
@@ -44,10 +41,10 @@ public void correctClassTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrectClass");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectClass.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -56,10 +53,10 @@ public void correctFieldTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrectFieldAndParameter");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectFieldAndParameter.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -68,10 +65,10 @@ public void correctForTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrectForAndParameter");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectForAndParameter.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -80,10 +77,10 @@ public void correctIfTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrectIfAndParameter");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectIfAndParameter.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -92,10 +89,10 @@ public void correctTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrect");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrect.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -104,10 +101,10 @@ public void correctReturnTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder.getFilePath("InputIndentationCorrectReturnAndParameter");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectReturnAndParameter.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -116,11 +113,10 @@ public void correctWhileTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("Indentation");
-        final String filePath = builder
-            .getFilePath("InputIndentationCorrectWhileDoWhileAndParameter");
+        final Configuration checkConfig = getCheckConfig("Indentation");
+        final String filePath = getPath("InputIndentationCorrectWhileDoWhileAndParameter.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
index 3d3fabc620..e8e168f6de 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/FallThroughTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4842fallthrough;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck;
 
 public class FallThroughTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4842fallthrough"
+                + File.separator + fileName);
     }
 
     @Test
@@ -57,10 +55,10 @@ public void fallThroughTest() throws Exception {
             "374:41: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("FallThrough");
-        final String filePath = builder.getFilePath("InputFallThrough");
+        final Configuration checkConfig = getCheckConfig("FallThrough");
+        final String filePath = getPath("InputFallThrough.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
index d1e5162eb5..45c93a0cc6 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4843defaultcasepresent;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck;
 
 public class MissingSwitchDefaultTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4843defaultcasepresent"
+                + File.separator + fileName);
     }
 
     @Test
@@ -53,10 +51,10 @@ public void missingSwitchDefaultTest() throws Exception {
             "42: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("MissingSwitchDefault");
-        final String filePath = builder.getFilePath("InputMissingSwitchDefault");
+        final Configuration checkConfig = getCheckConfig("MissingSwitchDefault");
+        final String filePath = getPath("InputMissingSwitchDefault.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
index 7bf6a86615..61f43a4d7e 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule485annotations;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck;
 
 public class AnnotationLocationTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule485annotations"
+                + File.separator + fileName);
     }
 
     @Test
@@ -43,7 +41,7 @@ public void annotationTest() throws Exception {
 
         final Class<AnnotationLocationCheck> clazz = AnnotationLocationCheck.class;
         getCheckMessage(clazz, "annotation.location.alone");
-        final Configuration checkConfig = builder.getCheckConfig("AnnotationLocation");
+        final Configuration checkConfig = getCheckConfig("AnnotationLocation");
 
         final String msgLocationAlone = "annotation.location.alone";
         final String msgLocation = "annotation.location";
@@ -61,9 +59,9 @@ public void annotationTest() throws Exception {
             "90: " + getCheckMessage(clazz, msgLocation, "MyAnnotation2", "1", "0"),
         };
 
-        final String filePath = builder.getFilePath("InputAnnotationLocation");
+        final String filePath = getPath("InputAnnotationLocation.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/CommentsIndentationTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/CommentsIndentationTest.java
index a00d353dc9..9e0cc56693 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/CommentsIndentationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/CommentsIndentationTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule4861blockcommentstyle;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck;
 
 public class CommentsIndentationTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule4861blockcommentstyle"
+                + File.separator + fileName);
     }
 
     @Test
@@ -97,11 +95,11 @@ public void testCommentIsAtTheEndOfBlock() throws Exception {
                 352, 9, 8),
             };
 
-        final Configuration checkConfig = builder.getCheckConfig("CommentsIndentation");
+        final Configuration checkConfig = getCheckConfig("CommentsIndentation");
         final String filePath =
-            builder.getFilePath("InputCommentsIndentationCommentIsAtTheEndOfBlock");
+            getPath("InputCommentsIndentationCommentIsAtTheEndOfBlock.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -142,11 +140,11 @@ public void testCommentIsInsideSwitchBlock() throws Exception {
                 "228, 230", 6, "12, 12"),
             };
 
-        final Configuration checkConfig = builder.getCheckConfig("CommentsIndentation");
+        final Configuration checkConfig = getCheckConfig("CommentsIndentation");
         final String filePath =
-            builder.getFilePath("InputCommentsIndentationInSwitchBlock");
+            getPath("InputCommentsIndentationInSwitchBlock.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -165,11 +163,11 @@ public void testCommentIsInsideEmptyBlock() throws Exception {
                 72, 0, 8),
             };
 
-        final Configuration checkConfig = builder.getCheckConfig("CommentsIndentation");
+        final Configuration checkConfig = getCheckConfig("CommentsIndentation");
         final String filePath =
-            builder.getFilePath("InputCommentsIndentationInEmptyBlock");
+            getPath("InputCommentsIndentationInEmptyBlock.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -196,11 +194,11 @@ public void testSurroundingCode() throws Exception {
                 109, 33, 8),
             };
 
-        final Configuration checkConfig = builder.getCheckConfig("CommentsIndentation");
+        final Configuration checkConfig = getCheckConfig("CommentsIndentation");
         final String filePath =
-            builder.getFilePath("InputCommentsIndentationSurroundingCode");
+            getPath("InputCommentsIndentationSurroundingCode.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
index aa120edec9..3c9ecc8042 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter4formatting.rule487modifiers;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck;
 
 public class ModifierOrderTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule487modifiers"
+                + File.separator + fileName);
     }
 
     @Test
@@ -101,10 +99,10 @@ public void modifierOrderTest() throws Exception {
             "219:22: " + getCheckMessage(clazz, msgAnnotation, "@MyAnnotation2"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("ModifierOrder");
-        final String filePath = builder.getFilePath("InputModifierOrder");
+        final Configuration checkConfig = getCheckConfig("ModifierOrder");
+        final String filePath = getPath("InputModifierOrder.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
index 91e31b8bf5..d56d51bbfb 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java
@@ -20,21 +20,19 @@
 package com.google.checkstyle.test.chapter4formatting.rule488numericliterals;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class UpperEllTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter4formatting" + File.separator + "rule488numericliterals"
+                + File.separator + fileName);
     }
 
     @Test
@@ -67,10 +65,10 @@ public void upperEllTest() throws Exception {
             "100:22: Should use uppercase 'L'.",
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("UpperEll");
-        final String filePath = builder.getFilePath("InputUpperEll");
+        final Configuration checkConfig = getCheckConfig("UpperEll");
+        final String filePath = getPath("InputUpperEll.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
index 70c4b04855..3f84963ef8 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule521packagenames/PackageNameTest.java
@@ -20,27 +20,30 @@
 package com.google.checkstyle.test.chapter5naming.rule521packagenames;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class PackageNameTest extends BaseCheckTestSupport {
 
     private static final String MSG_KEY = "name.invalidPattern";
-    private static ConfigurationBuilder builder;
     private static Configuration checkConfig;
     private static String format;
 
+    protected String getPath(String packageName, String fileName) throws IOException {
+        return getPath("chapter5naming" + File.separator + "rule521" + packageName
+                + File.separator + fileName);
+    }
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        checkConfig = builder.getCheckConfig("PackageName");
+        checkConfig = getCheckConfig("PackageName");
         format = checkConfig.getAttribute("format");
     }
 
@@ -49,9 +52,9 @@ public void goodPackageNameTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final String filePath = builder.getFilePath("InputPackageNameGood");
+        final String filePath = getPath("packagenames", "InputPackageNameGood.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -66,9 +69,9 @@ public void badPackageNameTest() throws Exception {
             "1:9: " + msg,
         };
 
-        final String filePath = builder.getFilePath("InputPackageNameBad");
+        final String filePath = getPath("packageNamesCamelCase", "InputPackageNameBad.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -82,9 +85,9 @@ public void badPackageName2Test() throws Exception {
             "1:9: " + msg,
         };
 
-        final String filePath = builder.getFilePath("InputBadPackageName2");
+        final String filePath = getPath("_packagenames", "InputBadPackageName2.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -98,9 +101,9 @@ public void badPackageName3Test() throws Exception {
             "1:9: " + msg,
         };
 
-        final String filePath = builder.getFilePath("InputPackageBadName3");
+        final String filePath = getPath("$packagenames", "InputPackageBadName3.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
index 094ed7c041..367eaeb137 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java
@@ -20,27 +20,25 @@
 package com.google.checkstyle.test.chapter5naming.rule522typenames;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class TypeNameTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule522typenames"
+                + File.separator + fileName);
     }
 
     @Test
     public void typeNameTest() throws Exception {
 
-        final Configuration checkConfig = builder.getCheckConfig("TypeName");
+        final Configuration checkConfig = getCheckConfig("TypeName");
         final String msgKey = "name.invalidPattern";
         final String format = "^[A-Z][a-zA-Z0-9]*$";
 
@@ -83,9 +81,9 @@ public void typeNameTest() throws Exception {
             "71:12: " + getCheckMessage(checkConfig.getMessages(), msgKey, "Annotation$", format),
         };
 
-        final String filePath = builder.getFilePath("InputTypeName");
+        final String filePath = getPath("InputTypeName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
index bb479e817f..2113d245f3 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java
@@ -20,27 +20,25 @@
 package com.google.checkstyle.test.chapter5naming.rule523methodnames;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class MethodNameTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule523methodnames"
+                + File.separator + fileName);
     }
 
     @Test
     public void methodNameTest() throws Exception {
 
-        final Configuration checkConfig = builder.getCheckConfig("MethodName");
+        final Configuration checkConfig = getCheckConfig("MethodName");
         final String msgKey = "name.invalidPattern";
         final String format = "^[a-z][a-z0-9][a-zA-Z0-9_]*$";
 
@@ -71,9 +69,9 @@ public void methodNameTest() throws Exception {
             "50:14: " + getCheckMessage(checkConfig.getMessages(), msgKey, "fO", format),
         };
 
-        final String filePath = builder.getFilePath("InputMethodName");
+        final String filePath = getPath("InputMethodName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
index 4873ace4db..0a8d1057c1 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule525nonconstantfieldnames/MemberNameTest.java
@@ -20,26 +20,30 @@
 package com.google.checkstyle.test.chapter5naming.rule525nonconstantfieldnames;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class MemberNameTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
     private static final String MSG_KEY = "name.invalidPattern";
     private static Configuration checkConfig;
     private static String format;
 
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule525nonconstantfieldnames"
+                + File.separator + fileName);
+    }
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        checkConfig = builder.getCheckConfig("MemberName");
+        checkConfig = getCheckConfig("MemberName");
         format = checkConfig.getAttribute("format");
     }
 
@@ -62,9 +66,9 @@ public void memberNameTest() throws Exception {
             "25:9: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "mPackage$", format),
         };
 
-        final String filePath = builder.getFilePath("InputMemberNameBasic");
+        final String filePath = getPath("InputMemberNameBasic.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -106,9 +110,9 @@ public void simpleTest() throws Exception {
             "131:25: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "mTest2$", format),
         };
 
-        final String filePath = builder.getFilePath("InputMemberNameSimple");
+        final String filePath = getPath("InputMemberNameSimple.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
index ba676e3411..19d5d17fa5 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule526parameternames/ParameterNameTest.java
@@ -20,12 +20,12 @@
 package com.google.checkstyle.test.chapter5naming.rule526parameternames;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
@@ -33,13 +33,17 @@
 
     private static final String MSG_KEY = "name.invalidPattern";
     private static String format;
-    private static ConfigurationBuilder builder;
     private static Configuration checkConfig;
 
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule526parameternames"
+                + File.separator + fileName);
+    }
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        checkConfig = builder.getCheckConfig("ParameterName");
+        checkConfig = getCheckConfig("ParameterName");
         format = checkConfig.getAttribute("format");
     }
 
@@ -61,9 +65,9 @@ public void parameterNameTest() throws Exception {
             "50:21: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "bB", format),
         };
 
-        final String filePath = builder.getFilePath("InputParameterNameSimple");
+        final String filePath = getPath("InputParameterNameSimple.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
index 5ee7206967..d7d96f4fb0 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule527localvariablenames/LocalVariableNameTest.java
@@ -20,26 +20,30 @@
 package com.google.checkstyle.test.chapter5naming.rule527localvariablenames;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class LocalVariableNameTest extends BaseCheckTestSupport {
 
     private static final String MSG_KEY = "name.invalidPattern";
-    private static ConfigurationBuilder builder;
     private static Configuration checkConfig;
     private static String format;
 
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule527localvariablenames"
+                + File.separator + fileName);
+    }
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        checkConfig = builder.getCheckConfig("LocalVariableName");
+        checkConfig = getCheckConfig("LocalVariableName");
         format = checkConfig.getAttribute("format");
     }
 
@@ -60,9 +64,9 @@ public void localVariableNameTest() throws Exception {
             "36:13: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "aaaaaa$", format),
         };
 
-        final String filePath = builder.getFilePath("InputLocalVariableNameSimple");
+        final String filePath = getPath("InputLocalVariableNameSimple.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -79,9 +83,9 @@ public void oneCharTest() throws Exception {
             "61:17: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "index$", format),
         };
 
-        final String filePath = builder.getFilePath("InputLocalVariableNameOneCharVarName");
+        final String filePath = getPath("InputLocalVariableNameOneCharVarName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java
index a7475c6397..d3a3ed7dcb 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java
@@ -20,31 +20,27 @@
 package com.google.checkstyle.test.chapter5naming.rule528typevariablenames;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
-import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class ClassTypeParameterNameTest extends BaseCheckTestSupport {
 
     private static final String MSG_KEY = "name.invalidPattern";
-    private static ConfigurationBuilder builder;
-    private static Configuration configuration;
-    private static String format;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        configuration = builder.getCheckConfig("ClassTypeParameterName");
-        format = configuration.getAttribute("format");
+
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule528typevariablenames"
+                + File.separator + fileName);
     }
 
     @Test
     public void testClassDefault() throws Exception {
+        final Configuration configuration = getCheckConfig("ClassTypeParameterName");
+        final String format = configuration.getAttribute("format");
 
         final String[] expected = {
             "5:31: " + getCheckMessage(configuration.getMessages(), MSG_KEY, "t", format),
@@ -52,9 +48,9 @@ public void testClassDefault() throws Exception {
             "27:24: " + getCheckMessage(configuration.getMessages(), MSG_KEY, "$foo", format),
         };
 
-        final String filePath = builder.getFilePath("InputClassTypeParameterName");
+        final String filePath = getPath("InputClassTypeParameterName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(configuration, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/MethodTypeParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/MethodTypeParameterNameTest.java
index ecb3ce8873..7dc51b05ba 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/MethodTypeParameterNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/MethodTypeParameterNameTest.java
@@ -20,33 +20,37 @@
 package com.google.checkstyle.test.chapter5naming.rule528typevariablenames;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
 public class MethodTypeParameterNameTest extends BaseCheckTestSupport {
 
     private static final String MSG_KEY = "name.invalidPattern";
-    private static ConfigurationBuilder builder;
     private static Configuration configuration;
     private static String format;
 
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule528typevariablenames"
+                + File.separator + fileName);
+    }
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        configuration = builder.getCheckConfig("ClassTypeParameterName");
+        configuration = getCheckConfig("ClassTypeParameterName");
         format = configuration.getAttribute("format");
     }
 
     @Test
     public void testMethodDefault() throws Exception {
 
-        final Configuration checkConfig = builder.getCheckConfig("MethodTypeParameterName");
+        final Configuration checkConfig = getCheckConfig("MethodTypeParameterName");
 
         final String[] expected = {
             "9:6: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "e_e", format),
@@ -57,9 +61,9 @@ public void testMethodDefault() throws Exception {
             "42:14: " + getCheckMessage(checkConfig.getMessages(), MSG_KEY, "EE", format),
         };
 
-        final String filePath = builder.getFilePath("InputMethodTypeParameterName");
+        final String filePath = getPath("InputMethodTypeParameterName.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
index 982263e3f1..fe7317fdbd 100755
--- a/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule53camelcase/AbbreviationAsWordInNameTest.java
@@ -20,26 +20,23 @@
 package com.google.checkstyle.test.chapter5naming.rule53camelcase;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbbreviationAsWordInNameCheck;
 
 public class AbbreviationAsWordInNameTest extends BaseCheckTestSupport {
 
     private static final String MSG_KEY = "abbreviation.as.word";
-    private static ConfigurationBuilder builder;
-    private static Configuration checkConfig;
     private final Class<AbbreviationAsWordInNameCheck> clazz = AbbreviationAsWordInNameCheck.class;
 
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
-        checkConfig = builder.getCheckConfig("AbbreviationAsWordInName");
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule53camelcase"
+                + File.separator + fileName);
     }
 
     @Test
@@ -60,9 +57,10 @@ public void abbreviationAsWordInNameTest() throws Exception {
             "71: " + msg,
         };
 
-        final String filePath = builder.getFilePath("InputAbbreviationAsWordInTypeNameCheck");
+        final String filePath = getPath("InputAbbreviationAsWordInTypeNameCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Configuration checkConfig = getCheckConfig("AbbreviationAsWordInName");
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
index 6d207501ed..f1ab0b1cdf 100755
--- a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter6programpractice.rule62donotignoreexceptions;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck;
 
 public class EmptyBlockTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter6programpractice" + File.separator
+                + "rule62donotignoreexceptions" + File.separator + fileName);
     }
 
     @Test
@@ -47,10 +45,10 @@ public void emptyBlockTestCatch() throws Exception {
             "72:21: " + getCheckMessage(EmptyBlockCheck.class, "block.empty", "finally"),
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("EmptyBlock");
-        final String filePath = builder.getFilePath("InputEmptyBlockCatch");
+        final Configuration checkConfig = getCheckConfig("EmptyBlock");
+        final String filePath = getPath("InputEmptyBlockCatch.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
index ee0bbb3276..98c955c315 100755
--- a/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/NoFinalizerTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter6programpractice.rule64finalizers;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NoFinalizerCheck;
 
 public class NoFinalizerTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter6programpractice" + File.separator + "rule64finalizers"
+                + File.separator + fileName);
     }
 
     @Test
@@ -47,10 +45,10 @@ public void noFinalizerBasicTest() throws Exception {
             "5: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NoFinalizer");
-        final String filePath = builder.getFilePath("InputNoFinalizer");
+        final Configuration checkConfig = getCheckConfig("NoFinalizer");
+        final String filePath = getPath("InputNoFinalizer.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -71,10 +69,10 @@ public void noFinalizerExtendedTest() throws Exception {
             "136: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NoFinalizer");
-        final String filePath = builder.getFilePath("InputNoFinalizeExtend");
+        final Configuration checkConfig = getCheckConfig("NoFinalizer");
+        final String filePath = getPath("InputNoFinalizeExtend.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
index fd48161cca..035fe86c54 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter7javadoc.rule711generalform;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.SingleLineJavadocCheck;
 
 public class SingleLineJavadocTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule711generalform"
+                + File.separator + fileName);
     }
 
     @Test
@@ -56,9 +54,9 @@ public void singleLineJavadocTest() throws Exception {
 
         final DefaultConfiguration checkConfig = createCheckConfig(SingleLineJavadocCheck.class);
         checkConfig.addAttribute("ignoreInlineTags", "false");
-        final String filePath = builder.getFilePath("InputSingleLineJavadocCheck");
+        final String filePath = getPath("InputSingleLineJavadocCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -66,14 +64,14 @@ public void singleLineJavadocTest() throws Exception {
     public void customInlineTagTest() throws Exception {
         final String msg = getCheckMessage(SingleLineJavadocCheck.class, "singleline.javadoc");
 
-        final Configuration checkConfig = builder.getCheckConfig("SingleLineJavadocCheck");
-        final String filePath = builder.getFilePath("InputSingleLineJavadocCheckError");
+        final Configuration checkConfig = getCheckConfig("SingleLineJavadocCheck");
+        final String filePath = getPath("InputSingleLineJavadocCheckError.java");
 
         final String[] expected = {
             "4: " + msg,
         };
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
index b167726135..7a32efe380 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter7javadoc.rule712paragraphs;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocParagraphCheck;
 
 public class JavadocParagraphTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule712paragraphs"
+                + File.separator + fileName);
     }
 
     @Test
@@ -44,10 +42,10 @@ public void javadocParagraphCorrectTest() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("JavadocParagraph");
-        final String filePath = builder.getFilePath("InputCorrectJavadocParagraphCheck");
+        final Configuration checkConfig = getCheckConfig("JavadocParagraph");
+        final String filePath = getPath("InputCorrectJavadocParagraphCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -94,10 +92,10 @@ public void javadocParagraphIncorrectTest() throws Exception {
             "73: " + msgBefore,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("JavadocParagraph");
-        final String filePath = builder.getFilePath("InputIncorrectJavadocParagraphCheck");
+        final Configuration checkConfig = getCheckConfig("JavadocParagraph");
+        final String filePath = getPath("InputIncorrectJavadocParagraphCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
index a063e98b0a..f78637830d 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter7javadoc.rule713atclauses;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.AtclauseOrderCheck;
 
 public class AtclauseOrderTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule713atclauses"
+                + File.separator + fileName);
     }
 
     @Test
@@ -44,10 +42,10 @@ public void testCorrect() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("AtclauseOrder");
-        final String filePath = builder.getFilePath("InputCorrectAtClauseOrderCheck");
+        final Configuration checkConfig = getCheckConfig("AtclauseOrder");
+        final String filePath = getPath("InputCorrectAtClauseOrderCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -86,10 +84,10 @@ public void testIncorrect() throws Exception {
             "261: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("AtclauseOrder");
-        final String filePath = builder.getFilePath("InputIncorrectAtClauseOrderCheck");
+        final Configuration checkConfig = getCheckConfig("AtclauseOrder");
+        final String filePath = getPath("InputIncorrectAtClauseOrderCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java
index 1553c6835f..246f7f925a 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java
@@ -20,19 +20,24 @@
 package com.google.checkstyle.test.chapter7javadoc.rule713atclauses;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTagContinuationIndentationCheck;
 
 public class JavadocTagContinuationIndentationTest extends BaseCheckTestSupport {
 
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule713atclauses"
+                + File.separator + fileName);
+    }
+
     @Test
     public void testWithDefaultConfiguration() throws Exception {
-        final ConfigurationBuilder builder = new ConfigurationBuilder(new File("src/it/"));
         final String msg = getCheckMessage(JavadocTagContinuationIndentationCheck.class,
                 "tag.continuation.indent", 4);
 
@@ -51,11 +56,10 @@ public void testWithDefaultConfiguration() throws Exception {
             "322: " + msg,
         };
 
-        final Configuration checkConfig = builder
-            .getCheckConfig("JavadocTagContinuationIndentation");
-        final String filePath = builder.getFilePath("InputJavaDocTagContinuationIndentation");
+        final Configuration checkConfig = getCheckConfig("JavadocTagContinuationIndentation");
+        final String filePath = getPath("InputJavaDocTagContinuationIndentation.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
index 91b7c33094..ae52d9cc37 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter7javadoc.rule713atclauses;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.NonEmptyAtclauseDescriptionCheck;
 
 public class NonEmptyAtclauseDescriptionTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule713atclauses"
+                + File.separator + fileName);
     }
 
     @Test
@@ -57,8 +55,8 @@ public void testDefaultConfiguration() throws Exception {
             "52: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NonEmptyAtclauseDescription");
-        final String filePath = builder.getFilePath("InputNonEmptyAtclauseDescriptionCheck");
+        final Configuration checkConfig = getCheckConfig("NonEmptyAtclauseDescription");
+        final String filePath = getPath("InputNonEmptyAtclauseDescriptionCheck.java");
 
         final Integer[] warnList = getLineNumbersFromExpected(expected);
         verify(checkConfig, filePath, expected, warnList);
@@ -78,9 +76,8 @@ public void testSpaceSequence() throws Exception {
             "40: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("NonEmptyAtclauseDescription");
-        final String filePath = builder
-            .getFilePath("InputNonEmptyAtclauseDescriptionCheckSpaceSeq");
+        final Configuration checkConfig = getCheckConfig("NonEmptyAtclauseDescription");
+        final String filePath = getPath("InputNonEmptyAtclauseDescriptionCheckSpaceSeq.java");
 
         final Integer[] warnList = getLineNumbersFromExpected(expected);
         verify(checkConfig, filePath, expected, warnList);
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
index c7116aec63..b6df4f426c 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java
@@ -20,23 +20,21 @@
 package com.google.checkstyle.test.chapter7javadoc.rule72thesummaryfragment;
 
 import java.io.File;
+import java.io.IOException;
 
 import org.apache.commons.lang3.ArrayUtils;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck;
 
 public class SummaryJavadocTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule72thesummaryfragment"
+                + File.separator + fileName);
     }
 
     @Test
@@ -44,10 +42,10 @@ public void testCorrect() throws Exception {
 
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
 
-        final Configuration checkConfig = builder.getCheckConfig("SummaryJavadocCheck");
-        final String filePath = builder.getFilePath("InputCorrectSummaryJavaDocCheck");
+        final Configuration checkConfig = getCheckConfig("SummaryJavadocCheck");
+        final String filePath = getPath("InputCorrectSummaryJavaDocCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 
@@ -69,10 +67,10 @@ public void testIncorrect() throws Exception {
             "103: " + msgFirstSentence,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("SummaryJavadocCheck");
-        final String filePath = builder.getFilePath("InputIncorrectSummaryJavaDocCheck");
+        final Configuration checkConfig = getCheckConfig("SummaryJavadocCheck");
+        final String filePath = getPath("InputIncorrectSummaryJavaDocCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
index 3dc2ee8476..39d4bf8d29 100755
--- a/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter7javadoc/rule731selfexplanatory/JavadocMethodTest.java
@@ -20,22 +20,20 @@
 package com.google.checkstyle.test.chapter7javadoc.rule731selfexplanatory;
 
 import java.io.File;
+import java.io.IOException;
 
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.google.checkstyle.test.base.BaseCheckTestSupport;
-import com.google.checkstyle.test.base.ConfigurationBuilder;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck;
 
 public class JavadocMethodTest extends BaseCheckTestSupport {
 
-    private static ConfigurationBuilder builder;
-
-    @BeforeClass
-    public static void setConfigurationBuilder() {
-        builder = new ConfigurationBuilder(new File("src/it/"));
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter7javadoc" + File.separator + "rule731selfexplanatory"
+                + File.separator + fileName);
     }
 
     @Test
@@ -47,10 +45,10 @@ public void javadocMethodTest() throws Exception {
             "57:5: " + msg,
         };
 
-        final Configuration checkConfig = builder.getCheckConfig("JavadocMethod");
-        final String filePath = builder.getFilePath("InputJavadocMethodCheck");
+        final Configuration checkConfig = getCheckConfig("JavadocMethod");
+        final String filePath = getPath("InputJavadocMethodCheck.java");
 
-        final Integer[] warnList = builder.getLinesWithWarn(filePath);
+        final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
 }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestatement/InputLineLength.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/InputLineLength.java
similarity index 99%
rename from src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestatement/InputLineLength.java
rename to src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/InputLineLength.java
index 78294d2d97..c026e12ae7 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestatement/InputLineLength.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/InputLineLength.java
@@ -1,4 +1,4 @@
-package com.google.checkstyle.test.chapter3filestructure.rule32packagestatement; // ok
+package com.google.checkstyle.test.chapter3filestructure.rule32packagestate; // ok
 import java.io.*;
 final class InputLineLength
 {
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputLineLength.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputLineLength.java
new file mode 100755
index 0000000000..e983c1f03d
--- /dev/null
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputLineLength.java
@@ -0,0 +1,184 @@
+package com.google.checkstyle.test.chapter3filestructure.rule332nolinewrap; //ok
+import com.google.checkstyle.test.chapter3filestructure.toolongpackagetotestcoveragegooglesjavastylerule.*; //ok
+final class InputLineLength
+{
+    // Long line ---------------------------------------------------------------------------------------- //warn
+    // Contains a tab ->    <-
+    // Contains trailing whitespace ->
+
+    // Name format tests
+    //
+    /** Invalid format **/
+    public static final int badConstant = 2;
+    /** Valid format **/
+    public static final int MAX_ROWS = 2;
+
+    /** Invalid format **/
+    private static int badStatic = 2;
+    /** Valid format **/
+    private static int sNumCreated = 0;
+
+    /** Invalid format **/
+    private int badMember = 2;
+    /** Valid format **/
+    private int mNumCreated1 = 0;
+    /** Valid format **/
+    protected int mNumCreated2 = 0;
+
+    /** commas are wrong **/
+    private int[] mInts = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, }; //warn
+
+    //
+    // Accessor tests
+    //
+    /** should be private **/
+    public static int sTest1;
+    /** should be private **/
+    protected static int sTest3;
+    /** should be private **/
+    static int sTest2;
+
+    /** should be private **/
+    int mTest1;
+    /** should be private **/
+    public int mTest2;
+
+    //
+    // Parameter name format tests
+    //
+
+    /**
+     * @return hack
+     * @param badFormat1 bad format
+     * @param badFormat2 bad format
+     * @param badFormat3 bad format
+     * @throws java.lang.Exception abc
+     **/
+    int test1(int badFormat1,int badFormat2,
+              final int badFormat3)
+        throws java.lang.Exception
+    {
+        return 0;
+    }
+
+    /** method that is 20 lines long **/
+    private void longMethod()
+    {
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+    }
+
+    /** constructor that is 10 lines long **/
+    private InputLineLength()
+    {
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+        // a line
+    }
+
+    /** test local variables */
+    private void localVariables()
+    {
+        // normal decl
+        int abc = 0;
+        int ABC = 0;
+
+        // final decls
+        final int cde = 0;
+        final int CDE = 0;
+
+        // decl in for loop init statement
+        for (int k = 0; k < 1; k++)
+        {
+            String innerBlockVariable = "";
+        }
+        for (int I = 0; I < 1; I++)
+        {
+            String InnerBlockVariable = "";
+        }
+    }
+
+    /** test method pattern */
+    void ALL_UPPERCASE_METHOD()
+    {
+    }
+
+    /** test illegal constant **/
+    private static final int BAD__NAME = 3;
+
+    // A very, very long line that is OK because it matches the regexp "^.*is OK.*regexp.*$"
+    // long line that has a tab ->    <- and would be OK if tab counted as 1 char
+    // tabs that count as one char because of their position ->    <-   ->    <-, OK
+ 
+    /** some lines to test the error column after tabs */
+    void errorColumnAfterTabs()
+    {
+        // with tab-width 8 all statements below start at the same column,
+        // with different combinations of ' ' and '\t' before the statement
+                int tab0 =1;
+            int tab1 =1;
+             int tab2 =1;
+        int tab3 =1;
+            int tab4 =1;
+              int tab5 =1;
+    }
+
+    // FIXME:
+    /* FIXME: a
+     * FIXME:
+     * TODO
+     */
+    /* NOTHING */
+    /* YES */ /* FIXME: x */ /* YES!! */
+
+    /** test long comments **/
+    void veryLong()
+    {
+        /*
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          blah blah blah blah
+          enough talk */
+    }
+
+    /**
+     * @see to lazy to document all args. Testing excessive # args
+     **/
+    void toManyArgs(int aArg1, int aArg2, int aArg3, int aArg4, int aArg5,
+                    int aArg6, int aArg7, int aArg8, int aArg9)
+    {
+    }
+}
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
index 558e80dd74..faaafbed20 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/InputNoLineWrapGood.java
@@ -2,12 +2,12 @@
 
 import com.google.common.annotations.Beta; //ok
  
-import javax.accessibility.AccessibleAttributeSequence; //ok
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; //ok
+import javax.accessibility.AccessibleAttributeSequence; //ok
 
 public class InputNoLineWrapGood {
     
-    public void fooMethod() {
-        //
-    }
+  public void fooMethod() {
+      //
+  }
 }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefilestructure/InputEmptyLineSeparator.java b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/InputEmptyLineSeparator.java
similarity index 97%
rename from src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefilestructure/InputEmptyLineSeparator.java
rename to src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/InputEmptyLineSeparator.java
index 9782b70aa4..bd33be5856 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefilestructure/InputEmptyLineSeparator.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/InputEmptyLineSeparator.java
@@ -16,7 +16,7 @@
 // License along with this library; if not, write to the Free Software
 // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 ////////////////////////////////////////////////////////////////////////////////
-package com.google.checkstyle.test.chapter3filestructure.rule3sourcefilestructure; //warn
+package com.google.checkstyle.test.chapter3filestructure.rule3sourcefile; //warn
 import java.io.Serializable; //warn
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -107,8 +107,8 @@ public int compareTo(InputEmptyLineSeparator aObject) //ok
     }
 }
 
-class Class { //ok
-    private Class() {} //ok
+class Class1 { //ok
+    private Class1() {} //ok
 } 
 class Class2{ //warn
     public int compareTo(InputEmptyLineSeparator aObject) //ok
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyOther.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyOther.java
index 6c8ea7d6f8..56a837919d 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyOther.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyOther.java
@@ -75,12 +75,12 @@ void method2()
     {
         boolean flag = true;
         if (flag) {
-            System.out.println("heh");
-            flag = !flag; } System.err.
-              println("Xe-xe");
+            System.identityHashCode("heh");
+            flag = !flag; } System.
+              identityHashCode("Xe-xe");
         
        
-        if (flag) { System.err.println("some foo"); }
+        if (flag) { System.identityHashCode("some foo"); }
     } //ok
 } //ok
 
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlock.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlock.java
new file mode 100755
index 0000000000..624be9f0e3
--- /dev/null
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlock.java
@@ -0,0 +1,75 @@
+////////////////////////////////////////////////////////////////////////////////
+// Test case file for checkstyle.
+// Created: 2001
+////////////////////////////////////////////////////////////////////////////////
+package com.google.checkstyle.test.chapter4formatting.rule413emptyblocks;
+
+import java.io.*; 
+import java.awt.Dimension;
+import java.awt.Color;
+
+class Block {
+    boolean flag;
+    void doSm() {}
+    void foo() {
+        try {
+           if (!flag) {
+               doSm();
+           }
+        } catch (Exception e) { /* ignore */ } //ok
+        finally {/* ignore */} //ok
+    }
+
+    void foo2() {
+        try {
+           if (!flag) {
+               doSm();
+           }
+        } catch (Exception e) {}
+        finally {} //warn
+    }
+
+    class Inner {
+        boolean flag;
+        void doSm() {}
+        void foo() {
+            try {
+               if (!flag) {
+                   doSm();
+               }
+            } catch (Exception e) { /* ignore */ } //ok
+            finally {/* ignore */} //ok
+        }
+
+        void foo2() {
+            try {
+               if (!flag) {
+                   doSm();
+               }
+            } catch (Exception e) {}
+            finally {} //warn
+        }
+    }
+    
+    Inner anon = new Inner(){
+        boolean flag;
+        void doSm() {}
+        void foo() {
+            try {
+               if (!flag) {
+                   doSm();
+               }
+            } catch (Exception e) { /* ignore */ } //ok
+            finally {/* ignore */} //ok
+        }
+
+        void foo2() {
+            try {
+               if (!flag) {
+                   doSm();
+               }
+            } catch (Exception e) {}
+            finally {} //warn
+        }
+    };
+}
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockBasic.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockBasic.java
index 0100d19ebd..5e45ea28ee 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockBasic.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockBasic.java
@@ -23,7 +23,7 @@ public void fooMethod()
         IO in = new IO();
         while ((r = in.read()) != null) {} // ok
         for (; index < s.length && s[index] != 'x'; index++) {} // ok
-        if (a == 1) {} else {System.out.println("a");}  // warn
+        if (a == 1) {} else {System.identityHashCode("a");}  // warn
         do {} while(a == 1); //ok
         switch (a) {} //warn
         int[] z = {}; // ok
@@ -72,7 +72,7 @@ private void withEmpty()
             IO in = new IO();
             while ((r = in.read()) != null) {} // ok 
             for (; index < s.length && s[index] != 'x'; index++) {} // ok
-            if (a == 1) {} else {System.out.println("a");} // warn
+            if (a == 1) {} else {System.identityHashCode("a");} // warn
             do {} while(a == 1); //ok
             switch (a) {} //warn
             int[] z = {}; // ok
@@ -102,7 +102,7 @@ public void fooEmpty() {
                 IO in = new IO();
                 while ((r = in.read()) != null) {} // ok 
                 for (; index < s.length && s[index] != 'x'; index++) {} // ok
-                if (a == 1) {} else {System.out.println("a");} // warn
+                if (a == 1) {} else {System.identityHashCode("a");} // warn
                 do {} while(a == 1); //ok
                 switch (a) {} //warn
                 int[] z = {}; // ok
@@ -122,21 +122,21 @@ void foo() {
         int a = 1;
 
         if (a == 1) {
-            System.out.println("a");
+            System.identityHashCode("a");
         } else {} // warn
 
         if (a == 1) {
-            System.out.println("a");
+            System.identityHashCode("a");
         } else {/*ignore*/} // OK
 
         if (a == 1) {
             /*ignore*/
         } else {
-            System.out.println("a");
+            System.identityHashCode("a");
         } // ok
         
         if (a == 1) {
-            System.out.println("a");
+            System.identityHashCode("a");
         } else if (a != 1) {
             /*ignore*/
         } else {
@@ -146,7 +146,7 @@ void foo() {
         if (a == 1) {
             /*ignore*/
         } else if (a != 1) {
-            System.out.println("a");
+            System.identityHashCode("a");
         } else {
             /*ignore*/
         }
@@ -156,7 +156,7 @@ void foo() {
         } else if (a != 1) {
             /*ignore*/
         } else {
-            System.out.println("a");
+            System.identityHashCode("a");
         }
         
         if (a == 1) {
@@ -191,21 +191,21 @@ void foo() {
             int a = 1;
 
             if (a == 1) {
-                System.out.println("a");
+                System.identityHashCode("a");
             } else {} // warn
 
             if (a == 1) {
-                System.out.println("a");
+                System.identityHashCode("a");
             } else {/*ignore*/} // OK
 
             if (a == 1) {
                 /*ignore*/
             } else {
-                System.out.println("a");
+                System.identityHashCode("a");
             } // ok
             
             if (a == 1) {
-                System.out.println("a");
+                System.identityHashCode("a");
             } else if (a != 1) {
                 /*ignore*/
             } else {
@@ -215,7 +215,7 @@ void foo() {
             if (a == 1) {
                 /*ignore*/
             } else if (a != 1) {
-                System.out.println("a");
+                System.identityHashCode("a");
             } else {
                 /*ignore*/
             }
@@ -225,7 +225,7 @@ void foo() {
             } else if (a != 1) {
                 /*ignore*/
             } else {
-                System.out.println("a");
+                System.identityHashCode("a");
             }
             
             if (a == 1) {
@@ -260,21 +260,21 @@ void foo() {
                 int a = 1;
 
                 if (a == 1) {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 } else {} // warn
 
                 if (a == 1) {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 } else {/*ignore*/} // OK
 
                 if (a == 1) {
                     /*ignore*/
                 } else {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 } // ok
                 
                 if (a == 1) {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 } else if (a != 1) {
                     /*ignore*/
                 } else {
@@ -284,7 +284,7 @@ void foo() {
                 if (a == 1) {
                     /*ignore*/
                 } else if (a != 1) {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 } else {
                     /*ignore*/
                 }
@@ -294,7 +294,7 @@ void foo() {
                 } else if (a != 1) {
                     /*ignore*/
                 } else {
-                    System.out.println("a");
+                    System.identityHashCode("a");
                 }
                 
                 if (a == 1) {
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockCatch.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockCatch.java
index 259bef7e56..c4c27aca80 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockCatch.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyBlockCatch.java
@@ -26,7 +26,7 @@ void foo2() {
                doSm();
            }
         } catch (Exception e) {} //warn
-        finally {} //warn
+        finally {}
     }
 
     class Inner {
@@ -47,7 +47,7 @@ void foo2() {
                    doSm();
                }
             } catch (Exception e) {} //warn
-            finally {} //warn
+            finally {}
         }
     }
     
@@ -69,7 +69,7 @@ void foo2() {
                    doSm();
                }
             } catch (Exception e) {} //warn
-            finally {} //warn
+            finally {}
         }
     };
 }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyCatchBlockNoViolations.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyCatchBlockNoViolations.java
index 6229a1feb5..c481739f8a 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyCatchBlockNoViolations.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/InputEmptyCatchBlockNoViolations.java
@@ -24,7 +24,7 @@ public void testTryCatch()
             return; 
         } 
         catch (Exception e) {
-            System.out.println(e);
+            System.identityHashCode(e);
             return; 
         }
         finally
@@ -41,11 +41,11 @@ public void testTryCatch3()
             int e=u-y;
         } 
         catch (IllegalArgumentException e) {
-            System.out.println(e); //some comment
+            System.identityHashCode(e); //some comment
             return; 
         }
         catch (IllegalStateException ex) {
-                System.out.println(ex);
+                System.identityHashCode(ex);
                 return; 
         }
     }
@@ -58,7 +58,7 @@ public void testTryCatch4()
             int e=u-y;
         } 
         catch (IllegalArgumentException e) {
-            System.out.println(e);
+            System.identityHashCode(e);
             return; 
         }
     }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/FastMatcher.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputFastMatcher.java
similarity index 96%
rename from src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/FastMatcher.java
rename to src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputFastMatcher.java
index 9227b748b9..bea82148bf 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/FastMatcher.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputFastMatcher.java
@@ -1,6 +1,6 @@
 package com.google.checkstyle.test.chapter4formatting.rule42blockindentaion;
 
-public class FastMatcher
+public class InputFastMatcher
 {
 
     public boolean matches(char c)
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java
index 5a7e34cca5..6b47b0058c 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule42blockindentaion/InputIndentationCorrect.java
@@ -34,8 +34,8 @@
         }; //indent:8 exp:8
 
     /** Matches no characters. */ //indent:4 exp:4
-    public static final FastMatcher NONE = //indent:4 exp:4
-            new FastMatcher() { //indent:12 exp:>=8
+    public static final InputFastMatcher NONE = //indent:4 exp:4
+            new InputFastMatcher() { //indent:12 exp:>=8
       @Override public boolean matches(char c) { //indent:6 exp:6
         return false; //indent:8 exp:8
       } //indent:6 exp:6
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule43onestatement/InputOneStatementPerLine.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule43onestatement/InputOneStatementPerLine.java
index e87f25167a..bf77830bbd 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule43onestatement/InputOneStatementPerLine.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule43onestatement/InputOneStatementPerLine.java
@@ -31,7 +31,7 @@ public void doLegal() {
   public void doLegalString() {
     one = 1;
     two = 2;
-    System.out.println("one = 1; two = 2");
+    System.identityHashCode("one = 1; two = 2");
   }
 
   /**
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/InputLineLength.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/InputLineLength.java
index 5e1bf75632..03589cf058 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/InputLineLength.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule44columnlimit/InputLineLength.java
@@ -1,8 +1,8 @@
 package com.google.checkstyle.test.chapter4formatting.rule44columnlimit; //ok
 import com.google.checkstyle.test.chapter3filestructure.toolongpackagetotestcoveragegooglesjavastylerule.*; //ok
-final class LineLengthInput
+final class InputLineLength
 {
-    // Long line ----------------------------------------------------------------------------------------
+    // Long line ---------------------------------------------------------------------------------------- //warn
     // Contains a tab ->    <-
     // Contains trailing whitespace ->
 
@@ -85,7 +85,7 @@ private void longMethod()
     }
 
     /** constructor that is 10 lines long **/
-    private LineLengthInput()
+    private InputLineLength()
     {
         // a line
         // a line
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/FastMatcher.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputFastMatcher.java
similarity index 96%
rename from src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/FastMatcher.java
rename to src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputFastMatcher.java
index b0c632dae1..2bad7402bf 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/FastMatcher.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputFastMatcher.java
@@ -1,6 +1,6 @@
 package com.google.checkstyle.test.chapter4formatting.rule452indentcontinuationlines;
 
-public class FastMatcher
+public class InputFastMatcher
 {
 
     public boolean matches(char c)
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java
index 10118c682f..591b41dc42 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule452indentcontinuationlines/InputIndentationCorrect.java
@@ -34,8 +34,8 @@
         }; //indent:8 exp:8
 
     /** Matches no characters. */ //indent:4 exp:4
-    public static final FastMatcher NONE = //indent:4 exp:4
-            new FastMatcher() { //indent:12 exp:>=8
+    public static final InputFastMatcher NONE = //indent:4 exp:4
+            new InputFastMatcher() { //indent:12 exp:>=8
       @Override public boolean matches(char c) { //indent:6 exp:6
         return false; //indent:8 exp:8
       } //indent:6 exp:6
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
index 873e6fea24..dbe6088911 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/InputVariableDeclarationUsageDistanceCheck.java
@@ -88,7 +88,7 @@ public void testMethod4(int arg) {
 
 		String ar[] = { "1", "2" };
 		for (String st : ar) {
-			System.out.println(st);
+			System.identityHashCode(st);
 		}
 	}
 
@@ -381,11 +381,11 @@ public void testForCycle() {
 		int filterCount = 0;
 		for (int i = 0; i < 10; i++, filterCount++) {
 			int abc = 0;
-			System.out.println(abc);
+			System.identityHashCode(abc);
 
 			for (int j = 0; j < 10; j++) {
 				abc = filterCount;
-				System.out.println(abc);
+				System.identityHashCode(abc);
 			}
 		}
 	}
@@ -482,7 +482,7 @@ public void testIssue32_9() {
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
-        System.out.println("message");
+        System.identityHashCode("message");
         myOption.setArgName("abc"); // distance=7
     }
     
@@ -504,15 +504,15 @@ public int testIssue32_11(String toDir)
         int count = 0;
         String[] files = {};
 
-        System.out.println("Data archivation started");
+        System.identityHashCode("Data archivation started");
         files.notify();
-        System.out.println("sss");
+        System.identityHashCode("sss");
 
         if (files == null || files.length == 0) {
-            System.out.println("No files on a remote site");
+            System.identityHashCode("No files on a remote site");
         }
         else {
-            System.out.println("Files on remote site: " + files.length);
+            System.identityHashCode("Files on remote site: " + files.length);
 
             for (String ftpFile : files) {
                 if (files.length == 0) {
@@ -523,7 +523,7 @@ public int testIssue32_11(String toDir)
             }
         }
 
-        System.out.println();
+        System.lineSeparator();
 
         return count;
     }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/FastMatcher.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputFastMatcher.java
similarity index 96%
rename from src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/FastMatcher.java
rename to src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputFastMatcher.java
index b2e2f77a56..a4c279202a 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/FastMatcher.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputFastMatcher.java
@@ -1,6 +1,6 @@
 package com.google.checkstyle.test.chapter4formatting.rule4841indentation;
 
-public class FastMatcher
+public class InputFastMatcher
 {
 
     public boolean matches(char c)
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java
index 1cf911ce27..2b8530359f 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4841indentation/InputIndentationCorrect.java
@@ -34,8 +34,8 @@
         }; //indent:8 exp:8
 
     /** Matches no characters. */ //indent:4 exp:4
-    public static final FastMatcher NONE = //indent:4 exp:4
-            new FastMatcher() { //indent:12 exp:>=8
+    public static final InputFastMatcher NONE = //indent:4 exp:4
+            new InputFastMatcher() { //indent:12 exp:>=8
       @Override public boolean matches(char c) { //indent:6 exp:6
         return false; //indent:8 exp:8
       } //indent:6 exp:6
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/InputFallThrough.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/InputFallThrough.java
index 4877727d08..864f7661f0 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/InputFallThrough.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4842fallthrough/InputFallThrough.java
@@ -52,12 +52,12 @@ void method(int i, int j, boolean cond) {
                 }
             case 15:  //warn
                 do {
-                    System.out.println("something");
+                    System.identityHashCode("something");
                     return;
                 } while(true);
             case 16:
                 for (int j1 = 0; j1 < 10; j1++) {
-                    System.err.println("something");
+                    System.identityHashCode("something");
                     return;
                 }
             case 17:
@@ -185,12 +185,12 @@ void methodFallThru(int i, int j, boolean cond) {
               // fallthru
           case 15:
               do {
-                  System.out.println("something");
+                  System.identityHashCode("something");
                   return;
               } while(true);
           case 16:
               for (int j1 = 0; j1 < 10; j1++) {
-                  System.err.println("something");
+                  System.identityHashCode("something");
                   return;
               }
           case 17:
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule485annotations/InputAnnotationLocation.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule485annotations/InputAnnotationLocation.java
index 4d97799e8d..78cfb82416 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule485annotations/InputAnnotationLocation.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule485annotations/InputAnnotationLocation.java
@@ -21,7 +21,7 @@
     public InputCorrectAnnotationIndentation() {}
 
     @MyAnnotationWithParam("foo")
-    @MyAnnotation2 void foo1() {} //warn
+    @MyAnnotation2 void foo1() {}
 
     @MyAnnotation1
        @MyAnnotation2 //warn
@@ -33,7 +33,7 @@ void foo2() {}
           @MyAnnotation4 //warn
     class InnerClass
     {
-        @MyAnnotation2 @MyAnnotation1 //warn
+        @MyAnnotation2 @MyAnnotation1
         public int a;
 
         @MyAnnotation1 public int b;
@@ -60,7 +60,7 @@ void foo2() {}
     }
 
     @MyAnnotation1
-       @MyAnnotation2 //warn
+       @MyAnnotation2
     InnerClass anon = new InnerClass()
     {
         @MyAnnotation2 @MyAnnotation1 public int a;
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationCommentIsAtTheEndOfBlock.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
index 5dbac5d272..8b7057a2aa 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
@@ -145,7 +145,7 @@ public void foo21() {
         for (int i = 0; i < 5; i++) {
         org.junit.Assert.assertEquals(expected.get(i), array[i]);
         }
-        String s = String.format("The array element "
+        String s = String.format(java.util.Locale.ENGLISH, "The array element "
                + "immediately following the end of the collection should be nulled",
             array[1]);
         // the above example was taken from hibernate-orm and was modified a bit
@@ -158,7 +158,7 @@ public void foo22() {
         for (int i = 0; i < 5; i++) {
             org.junit.Assert.assertEquals(expected.get(i), array[i]);
         }
-        String s = String.format("The array element "
+        String s = String.format(java.util.Locale.ENGLISH, "The array element "
                 + "immediately following the end of the collection should be nulled",
             array[1]);
                                  // warn
@@ -175,13 +175,13 @@ public void foo24() {
     }
 
     public String foo25() {
-        return String.format("%d",
+        return String.format(java.util.Locale.ENGLISH, "%d",
             1);
         // comment
     }
 
     public String foo26() {
-        return String.format("%d",
+        return String.format(java.util.Locale.ENGLISH, "%d",
             1);
                                   // warn
     }
@@ -196,14 +196,14 @@ public void foo27() {
 
     public String foo28() {
         int a = 5;
-        return String.format("%d",
+        return String.format(java.util.Locale.ENGLISH, "%d",
             1);
         // comment
     }
 
     public String foo29() {
         int a = 5;
-        return String.format("%d",
+        return String.format(java.util.Locale.ENGLISH, "%d",
             1);
                           // warn
     }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationInSwitchBlock.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationInSwitchBlock.java
index 4acbe634ac..3ce959b5d5 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationInSwitchBlock.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/InputCommentsIndentationInSwitchBlock.java
@@ -66,7 +66,7 @@ private static void fooSwitch() {
                 int a;
             }
               // warn
-                case "18": { System.out.println();
+                case "18": { System.lineSeparator();
                 }   // trailing comment
             case "19":
                 // comment
diff --git a/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62caughtexceptions/InputEmptyBlockCatch.java b/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/InputEmptyBlockCatch.java
similarity index 91%
rename from src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62caughtexceptions/InputEmptyBlockCatch.java
rename to src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/InputEmptyBlockCatch.java
index 14bcddeb01..f5efc09f99 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62caughtexceptions/InputEmptyBlockCatch.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/InputEmptyBlockCatch.java
@@ -2,7 +2,7 @@
 // Test case file for checkstyle.
 // Created: 2001
 ////////////////////////////////////////////////////////////////////////////////
-package com.google.checkstyle.test.chapter6programpractice.rule62caughtexceptions;
+package com.google.checkstyle.test.chapter6programpractice.rule62donotignoreexceptions;
 
 import java.io.*; 
 import java.awt.Dimension;
@@ -25,7 +25,7 @@ void foo2() {
            if (!flag) {
                doSm();
            }
-        } catch (Exception e) {} //warn
+        } catch (Exception e) {}
         finally {} //warn
     }
 
@@ -46,7 +46,7 @@ void foo2() {
                if (!flag) {
                    doSm();
                }
-            } catch (Exception e) {} //warn
+            } catch (Exception e) {}
             finally {} //warn
         }
     }
@@ -68,7 +68,7 @@ void foo2() {
                if (!flag) {
                    doSm();
                }
-            } catch (Exception e) {} //warn
+            } catch (Exception e) {}
             finally {} //warn
         }
     };
diff --git a/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/InputNoFinalizeExtend.java b/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/InputNoFinalizeExtend.java
index c4281d83f9..75c003550d 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/InputNoFinalizeExtend.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter6programpractice/rule64finalizers/InputNoFinalizeExtend.java
@@ -113,7 +113,7 @@ public void foo() {
         Ball b = new Ball() {
             
             public void hit() {
-                System.out.println("You hit it!");
+                System.identityHashCode("You hit it!");
             }
 
             protected void finalize() { //warn
diff --git a/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputIncorrectAtClauseOrderCheck.java b/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputIncorrectAtClauseOrderCheck.java
index 83d4bae7c3..9ca960da2c 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputIncorrectAtClauseOrderCheck.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputIncorrectAtClauseOrderCheck.java
@@ -6,10 +6,10 @@
  * Some javadoc.
  * 
  * @since Some javadoc.
- * @version 1.0 //warn //warn
+ * @version 1.0
  * @deprecated Some javadoc.
- * @see Some javadoc. //warn
- * @author max //warn
+ * @see Some javadoc.
+ * @author max
  */
 class WithAnnotations12 implements Serializable
 {
diff --git a/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputJavaDocTagContinuationIndentation.java b/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputJavaDocTagContinuationIndentation.java
index e1b1ecb61f..281f11c25f 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputJavaDocTagContinuationIndentation.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/InputJavaDocTagContinuationIndentation.java
@@ -280,7 +280,7 @@ String method5(String aString)
         
         /**
          * Some text.
-         *       Some javadoc. // warn
+         *       Some javadoc.
          * @param aString Some text.
          *    Some javadoc. // warn
          * @return Some text.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
index cd19d7279a..9084a77d5d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -38,6 +38,7 @@
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.api.AbstractLoader;
@@ -264,7 +265,7 @@ public static Configuration loadConfiguration(InputSource configSource,
      *                           {@code ${} without a closing
      *                           {@code }}
      */
-    // Package visible for testing purposes
+    @VisibleForTesting
     static String replaceProperties(
             String value, PropertyResolver props, String defaultValue)
         throws CheckstyleException {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index b741311563..33f5423a72 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -25,6 +25,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Joiner;
 import com.google.common.collect.Sets;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
@@ -74,6 +75,7 @@
      * Registers a package name to use for shortName resolution.
      * @param packageName the package name
      */
+    @VisibleForTesting
     void addPackage(String packageName) {
         packages.add(packageName);
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
index db07fc2ec5..13584bd271 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java
@@ -21,6 +21,8 @@
 
 import java.util.Map;
 
+import com.google.common.annotations.VisibleForTesting;
+
 /**
  * Serves as an abstract base class for all modules that report inspection
  * findings. Such modules have a Severity level which is used for the
@@ -109,6 +111,7 @@ protected String getMessageBundle() {
      * @return name of a resource bundle that contains the messages
      *     used by the module.
      */
+    @VisibleForTesting
     static String getMessageBundle(final String className) {
         final int endIndex = className.lastIndexOf('.');
         final String messages = "messages";
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
index 4d591d4077..410577b8c5 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java
@@ -24,7 +24,7 @@
 import antlr.CommonASTWithHiddenTokens;
 import antlr.Token;
 import antlr.collections.AST;
-
+import com.google.common.annotations.VisibleForTesting;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
@@ -192,6 +192,7 @@ public int getChildCount(int type) {
      * Set the parent token.
      * @param parent the parent token
      */
+    @VisibleForTesting
     void setParent(DetailAST parent) {
         this.parent = parent;
         final DetailAST nextSibling = getNextSibling();
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
index cea70232d9..ae02c04ee9 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java
@@ -68,7 +68,7 @@ public void setOption(String optionStr) {
                     Enum.valueOf(optionClass, optionStr.trim().toUpperCase(Locale.ENGLISH));
         }
         catch (IllegalArgumentException iae) {
-            throw new ConversionException("unable to parse " + abstractOption, iae);
+            throw new ConversionException("unable to parse " + optionStr, iae);
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
index 6067a9006e..8a4b6805fb 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java
@@ -19,12 +19,15 @@
 
 package com.puppycrawl.tools.checkstyle.checks.blocks;
 
+import java.util.Locale;
+
+import org.apache.commons.beanutils.ConversionException;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
 
+import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.checks.AbstractOptionCheck;
 
 /**
  * Checks for empty blocks. The policy to verify is specified using the {@link
@@ -63,7 +66,7 @@
  * @author Lars Kühne
  */
 public class EmptyBlockCheck
-    extends AbstractOptionCheck<BlockOption> {
+    extends Check {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
@@ -76,11 +79,21 @@
      */
     public static final String MSG_KEY_BLOCK_EMPTY = "block.empty";
 
+    /** The policy to enforce. */
+    private BlockOption option = BlockOption.STMT;
+
     /**
-     * Creates a new {@code EmptyBlockCheck} instance.
+     * Set the option to enforce.
+     * @param optionStr string to decode option from
+     * @throws ConversionException if unable to decode
      */
-    public EmptyBlockCheck() {
-        super(BlockOption.STMT, BlockOption.class);
+    public void setOption(String optionStr) {
+        try {
+            option = BlockOption.valueOf(optionStr.trim().toUpperCase(Locale.ENGLISH));
+        }
+        catch (IllegalArgumentException iae) {
+            throw new ConversionException("unable to parse " + optionStr, iae);
+        }
     }
 
     @Override
@@ -139,7 +152,7 @@ public void visitToken(DetailAST ast) {
         }
 
         if (leftCurly != null) {
-            if (getAbstractOption() == BlockOption.STMT) {
+            if (option == BlockOption.STMT) {
                 boolean emptyBlock;
                 if (leftCurly.getType() == TokenTypes.LCURLY) {
                     emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractTypeParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractTypeParameterNameCheck.java
index 6401de9502..e0dbd7dda0 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractTypeParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractTypeParameterNameCheck.java
@@ -29,9 +29,12 @@
  * </p>
  *
  * <p>This class extends {@link AbstractNameCheck}</p>
- *
+ * @deprecated Checkstyle will not support abstract checks anymore. Use
+ *             {@link AbstractNameCheck} instead.
  * @author Travis Schneeberger
+ * @noinspection AbstractClassNeverImplemented
  */
+@Deprecated
 public abstract class AbstractTypeParameterNameCheck
     extends AbstractNameCheck {
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
index ae0c6ac0e7..b41d97173d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.naming;
 
+import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 /**
@@ -47,21 +48,33 @@
  * @author Travis Schneeberger
  */
 public class MethodTypeParameterNameCheck
-    extends AbstractTypeParameterNameCheck {
+    extends AbstractNameCheck {
     /** Creates a new {@code MethodTypeParameterNameCheck} instance. */
     public MethodTypeParameterNameCheck() {
         super("^[A-Z]$");
     }
 
     @Override
-    public int[] getRequiredTokens() {
+    public int[] getDefaultTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    public int[] getAcceptableTokens() {
         return new int[] {
             TokenTypes.TYPE_PARAMETER,
         };
     }
 
     @Override
-    protected final int getLocation() {
-        return TokenTypes.METHOD_DEF;
+    public int[] getRequiredTokens() {
+        return getAcceptableTokens();
+    }
+
+    @Override
+    protected final boolean mustCheckName(DetailAST ast) {
+        final DetailAST location =
+            ast.getParent().getParent();
+        return location.getType() == TokenTypes.METHOD_DEF;
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
index 7561b381a1..aec8b5c7fd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java
@@ -161,6 +161,13 @@
      */
     public static final String MSG_MULTIPLE_LINES = "empty.line.separator.multiple.lines";
 
+    /**
+     * A key is pointing to the warning message empty.line.separator.lines.after
+     * in "messages.properties" file.
+     */
+    public static final String MSG_MULTIPLE_LINES_AFTER =
+            "empty.line.separator.multiple.lines.after";
+
     /** Allows no empty line between fields. */
     private boolean allowNoEmptyLineBetweenFields;
 
@@ -212,8 +219,11 @@ public void setAllowMultipleEmptyLines(boolean allow) {
 
     @Override
     public void visitToken(DetailAST ast) {
-        final DetailAST nextToken = ast.getNextSibling();
+        if (hasMultipleLinesBefore(ast)) {
+            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
+        }
 
+        final DetailAST nextToken = ast.getNextSibling();
         if (nextToken != null) {
             final int astType = ast.getType();
             switch (astType) {
@@ -227,16 +237,34 @@ public void visitToken(DetailAST ast) {
                     processPackage(ast, nextToken);
                     break;
                 default:
-                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {
-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
+                    if (nextToken.getType() == TokenTypes.RCURLY) {
+                        if (hasNotAllowedTwoEmptyLinesBefore(nextToken)) {
+                            log(ast.getLineNo(), MSG_MULTIPLE_LINES_AFTER, ast.getText());
+                        }
                     }
-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
+                    else if (!hasEmptyLineAfter(ast)) {
+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
+                            nextToken.getText());
                     }
             }
         }
     }
 
+    /**
+     * Whether the token has not allowed multiple empty lines before.
+     * @param ast the ast to check.
+     * @return true if the token has not allowed multiple empty lines before.
+     */
+    private boolean hasMultipleLinesBefore(DetailAST ast) {
+        boolean result = false;
+        if ((ast.getType() != TokenTypes.VARIABLE_DEF
+            || isTypeField(ast))
+                && hasNotAllowedTwoEmptyLinesBefore(ast)) {
+            result = true;
+        }
+        return result;
+    }
+
     /**
      * Process Package.
      * @param ast token
@@ -249,9 +277,6 @@ private void processPackage(DetailAST ast, DetailAST nextToken) {
         if (!hasEmptyLineAfter(ast)) {
             log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
         }
-        if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
-            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
-        }
     }
 
     /**
@@ -264,9 +289,6 @@ private void processImport(DetailAST ast, DetailAST nextToken, int astType) {
         if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)) {
             log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());
         }
-        if (hasNotAllowedTwoEmptyLinesBefore(ast)) {
-            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
-        }
     }
 
     /**
@@ -280,9 +302,6 @@ private void processVariableDef(DetailAST ast, DetailAST nextToken) {
             log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,
                     nextToken.getText());
         }
-        if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast)) {
-            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());
-        }
     }
 
     /**
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages.properties
index d87d9e9878..b306a8c275 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages.properties
@@ -1,5 +1,6 @@
 empty.line.separator=''{0}'' should be separated from previous statement.
 empty.line.separator.multiple.lines=''{0}'' has more than 1 empty lines before.
+empty.line.separator.multiple.lines.after=''{0}'' has more than 1 empty lines after.
 
 containsTab=Line contains a tab character.
 file.containsTab=File contains tab characters (this is the first instance).
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_de.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_de.properties
index bfbf25924d..442b7d66e8 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_de.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_de.properties
@@ -1,4 +1,5 @@
 empty.line.separator=''{0}'' sollte vom vorangehenden Ausdruck getrennt stehen.
+empty.line.separator.multiple.lines.after=''{0}'' hat mehr als 1 Leerzeilen nach.
 
 containsTab=Zeile enthält ein TAB-Zeichen
 file.containsTab=Datei enthält Tabulatorzeichen (diese Stelle ist das erste Vorkommnen).
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_es.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_es.properties
index c6b9786d4b..cdadaf60e2 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_es.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_es.properties
@@ -13,6 +13,7 @@ ws.typeCast=''conversión de tipos'' no está seguido de espacio en blanco.
 
 empty.line.separator = ''{0}'' debe ser separado de la declaración anterior.
 empty.line.separator.multiple.lines = ''{0}'' cuenta con más de 1 líneas vacías antes.
+empty.line.separator.multiple.lines.after=''{0}'' cuenta con más de 1 líneas vacías después.
 file.containsTab = Archivo contiene caracteres de tabulación (este es el primer ejemplo).
 no.line.wrap = {0} declaración no debe ser la línea envuelto.
 ws.illegalFollow = ''{0}'' es seguido por un carácter ilegal.
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fi.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fi.properties
index bf19ad16d4..449ee19089 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fi.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fi.properties
@@ -14,5 +14,6 @@ ws.illegalFollow=''{0}'' seuraa laiton merkki.
 
 empty.line.separator = ''{0}'' olisi erotettava edellisen selonteon.
 empty.line.separator.multiple.lines = ''{0}'' on yli 1 tyhjää riviä ennen.
+empty.line.separator.multiple.lines.after=''{0}'' on yli 1 tyhjää riviä jälkeen.
 file.containsTab = Tiedosto sisältää sarkainmerkeillä (tämä on ensisijaisesti).
 no.line.wrap = {0} lausunto ei pitäisi olla linja-kääritty.
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fr.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fr.properties
index 8ac5935066..ced7345bc1 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fr.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_fr.properties
@@ -14,5 +14,6 @@ ws.illegalFollow=''{0}'' est suivi par un caractère illégal.
 
 empty.line.separator = ''{0}'' doit être séparé de la déclaration précédente.
 empty.line.separator.multiple.lines = ''{0}'' a plus de 1 lignes vides avant.
+empty.line.separator.multiple.lines.after=''{0}'' compte plus de 1 lignes vides après.
 file.containsTab = Fichier contient des caractères de tabulation (ce qui est le premier exemple).
 no.line.wrap = {0} déclaration ne devrait pas être sur des lignes enveloppé.
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_ja.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_ja.properties
index d6bbc579e9..79984b3d0c 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_ja.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_ja.properties
@@ -14,5 +14,6 @@ ws.illegalFollow=が ''{0}'' 不正な文字が続いています。
 
 empty.line.separator = ''{0}'' 前の文から分離する必要があります。
 empty.line.separator.multiple.lines = ''{0}'' の前に1以上の空行を持っています。
+empty.line.separator.multiple.lines.after=''{0}'' 後の1以上の空行を持っています。
 file.containsTab = ファイルが（これが最初のインスタンスである）タブ文字が含まれています。
 no.line.wrap = {0} 文は、行ラップされてはなりません。
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_pt.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_pt.properties
index 1789959ab3..d9f877385b 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_pt.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_pt.properties
@@ -14,5 +14,6 @@ ws.illegalFollow=''{0}'' é seguido por um carácter ilegal.
 
 empty.line.separator = ''{0}'' deve ser separada da declaração anterior.
 empty.line.separator.multiple.lines = ''{0}'' tem mais de 1 linhas vazias antes.
+empty.line.separator.multiple.lines.after=''{0}'' tem mais de 1 linhas vazias depois.
 file.containsTab = Arquivo contém caracteres de tabulação (esta é a primeira instância).
 no.line.wrap = {0} afirmação não deve ser linha-embrulhado.
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_tr.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_tr.properties
index 4063c011b4..c5b27c3f47 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_tr.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/messages_tr.properties
@@ -18,4 +18,5 @@ ws.typeCast=''türü dönüştürme'' ifadesinden sonra boşluk kullanılmamış
 
 empty.line.separator = {0} 'Bir önceki deyimi ayrılmalıdır.
 empty.line.separator.multiple.lines = {0} daha önce en fazla 1 boş hatları vardır.
+empty.line.separator.multiple.lines.after=''{0}'' sonra 1'den fazla boş hatları vardır.
 no.line.wrap = {0} ifadesi hattı sarılı olmamalıdır.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 442cab9e00..22561973bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -508,7 +508,8 @@ public void testExistingDirectoryWithViolations() throws Exception {
         };
 
         exit.checkAssertionAfterwards(new Assertion() {
-            @Override public void checkAssertion() throws IOException {
+            @Override
+            public void checkAssertion() throws IOException {
                 final String expectedPath = getFilePath("checks/metrics") + File.separator;
                 final StringBuilder sb = new StringBuilder();
                 sb.append("Starting audit...").append(System.getProperty("line.separator"));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 6f0ecfc39b..dcde375ac8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -48,7 +48,8 @@
 import com.puppycrawl.tools.checkstyle.checks.naming.TypeNameCheck;
 
 public class TreeWalkerTest extends BaseCheckTestSupport {
-    @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
     @Test
     public void testProperFileExtension() throws Exception {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
index b9bc9790d4..ce8004e09b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java
@@ -26,10 +26,12 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.commons.lang3.ArrayUtils;
 import org.junit.Test;
 
 import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 
 public class EmptyBlockCheckTest
     extends BaseCheckTestSupport {
@@ -135,4 +137,13 @@ public void allowEmptyLoopsText() throws Exception {
         };
         verify(checkConfig, getPath("InputSemantic2.java"), expected);
     }
+
+    @Test(expected = CheckstyleException.class)
+    public void testInvalidOption() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(EmptyBlockCheck.class);
+        checkConfig.addAttribute("option", "invalid_option");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputSemantic.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
index a8d4bb6987..99ed06508c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
@@ -214,8 +214,8 @@ public void testWithAnnotations() throws Exception {
             "188:13: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 13),
             "197:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
             "197:10: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 10),
-            "201:49: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 49),
-            "201:50: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 50),
+            "201:54: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 54),
+            "201:55: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 55),
             "204:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
             "204:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76),
             "204:77: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 77),
@@ -245,8 +245,8 @@ public void testAloneOrSingleLine() throws Exception {
             "148:13: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 13),
             "157:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
             "157:10: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 10),
-            "161:49: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 49),
-            "161:50: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 50),
+            "161:54: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 54),
+            "161:55: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 55),
             "164:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
             "164:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76),
             "164:77: " + getCheckMessage(MSG_KEY_LINE_NEW, "}", 77),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
index 1aceebcc26..e7c5e58e84 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
@@ -39,22 +39,6 @@ protected String getPath(String filename) throws IOException {
                 + "naming" + File.separator + filename);
     }
 
-    @Test
-    public void testGetInterfaceRequiredTokens() {
-        final InterfaceTypeParameterNameCheck checkObj =
-            new InterfaceTypeParameterNameCheck();
-        final int[] expected = {TokenTypes.TYPE_PARAMETER};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
-    }
-
-    @Test
-    public void testGetMethodRequiredTokens() {
-        final MethodTypeParameterNameCheck checkObj =
-            new MethodTypeParameterNameCheck();
-        final int[] expected = {TokenTypes.TYPE_PARAMETER};
-        assertArrayEquals(expected, checkObj.getRequiredTokens());
-    }
-
     @Test
     public void testGetClassRequiredTokens() {
         final ClassTypeParameterNameCheck checkObj =
@@ -79,38 +63,6 @@ public void testClassDefault()
         verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
     }
 
-    @Test
-    public void testMethodDefault()
-        throws Exception {
-        final DefaultConfiguration checkConfig =
-            createCheckConfig(MethodTypeParameterNameCheck.class);
-
-        final String pattern = "^[A-Z]$";
-
-        final String[] expected = {
-            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
-            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
-            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
-            "23:6: " + getCheckMessage(MSG_INVALID_PATTERN, "foo", pattern),
-            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
-        };
-        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
-    }
-
-    @Test
-    public void testInterfaceDefault()
-        throws Exception {
-        final DefaultConfiguration checkConfig =
-            createCheckConfig(InterfaceTypeParameterNameCheck.class);
-
-        final String pattern = "^[A-Z]$";
-
-        final String[] expected = {
-            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
-        };
-        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
-    }
-
     @Test
     public void testClassFooName()
         throws Exception {
@@ -127,43 +79,6 @@ public void testClassFooName()
         verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
     }
 
-    @Test
-    public void testMethodFooName()
-        throws Exception {
-        final DefaultConfiguration checkConfig =
-            createCheckConfig(MethodTypeParameterNameCheck.class);
-        checkConfig.addAttribute("format", "^foo$");
-
-        final String pattern = "^foo$";
-
-        final String[] expected = {
-            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
-            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
-            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
-            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
-            "35:6: " + getCheckMessage(MSG_INVALID_PATTERN, "E", pattern),
-            "37:14: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
-            //"40:14: Name 'EE' must match pattern '^foo$'.",
-        };
-        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
-    }
-
-    @Test
-    public void testInterfaceFooName()
-        throws Exception {
-        final DefaultConfiguration checkConfig =
-            createCheckConfig(InterfaceTypeParameterNameCheck.class);
-        checkConfig.addAttribute("format", "^foo$");
-
-        final String pattern = "^foo$";
-
-        final String[] expected = {
-            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
-            "52:24: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
-        };
-        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
-    }
-
     @Test
     public void testGetAcceptableTokens() {
         final ClassTypeParameterNameCheck typeParameterNameCheckObj =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
new file mode 100755
index 0000000000..89de3cf9ad
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/InterfaceTypeParameterNameCheckTest.java
@@ -0,0 +1,79 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.naming;
+
+import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class InterfaceTypeParameterNameCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "naming" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetInterfaceRequiredTokens() {
+        final InterfaceTypeParameterNameCheck checkObj =
+            new InterfaceTypeParameterNameCheck();
+        final int[] expected = {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testInterfaceDefault()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(InterfaceTypeParameterNameCheck.class);
+
+        final String pattern = "^[A-Z]$";
+
+        final String[] expected = {
+            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testInterfaceFooName()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(InterfaceTypeParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^foo$");
+
+        final String pattern = "^foo$";
+
+        final String[] expected = {
+            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
+            "52:24: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
new file mode 100755
index 0000000000..94af1fb8fe
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodTypeParameterNameCheckTest.java
@@ -0,0 +1,88 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.naming;
+
+import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class MethodTypeParameterNameCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "naming" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetMethodRequiredTokens() {
+        final MethodTypeParameterNameCheck checkObj =
+            new MethodTypeParameterNameCheck();
+        final int[] expected = {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testMethodDefault()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(MethodTypeParameterNameCheck.class);
+
+        final String pattern = "^[A-Z]$";
+
+        final String[] expected = {
+            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
+            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
+            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
+            "23:6: " + getCheckMessage(MSG_INVALID_PATTERN, "foo", pattern),
+            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testMethodFooName()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(MethodTypeParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^foo$");
+
+        final String pattern = "^foo$";
+
+        final String[] expected = {
+            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
+            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
+            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
+            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
+            "35:6: " + getCheckMessage(MSG_INVALID_PATTERN, "E", pattern),
+            "37:14: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
+            //"40:14: Name 'EE' must match pattern '^foo$'.",
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
index 21cc8661f0..883fd7b044 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
@@ -39,7 +39,8 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 
 public class RegexpMultilineCheckTest extends BaseFileSetCheckTestSupport {
-    @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
     private DefaultConfiguration checkConfig;
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
index 76a4375bf5..b0ec0a9831 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java
@@ -20,6 +20,7 @@
 package com.puppycrawl.tools.checkstyle.checks.whitespace;
 
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.MSG_MULTIPLE_LINES;
+import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.MSG_MULTIPLE_LINES_AFTER;
 import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck.MSG_SHOULD_BE_SEPARATED;
 import static org.junit.Assert.assertArrayEquals;
 
@@ -100,9 +101,11 @@ public void testMultipleEmptyLinesBetweenClassMembers() throws Exception {
         final String[] expected = {
             "21: " + getCheckMessage(MSG_MULTIPLE_LINES, "package"),
             "24: " + getCheckMessage(MSG_MULTIPLE_LINES, "import"),
+            "29: " + getCheckMessage(MSG_MULTIPLE_LINES, "CLASS_DEF"),
             "33: " + getCheckMessage(MSG_MULTIPLE_LINES, "VARIABLE_DEF"),
             "38: " + getCheckMessage(MSG_MULTIPLE_LINES, "VARIABLE_DEF"),
             "43: " + getCheckMessage(MSG_MULTIPLE_LINES, "METHOD_DEF"),
+            "45: " + getCheckMessage(MSG_MULTIPLE_LINES_AFTER, "METHOD_DEF"),
         };
         verify(checkConfig, getPath("InputEmptyLineSeparatorMultipleEmptyLines.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java
index e5065ec6a5..5abc375c48 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java
@@ -50,7 +50,9 @@ public boolean isCommentNodesRequired() {
 
     @Override
     public void beginTree(DetailAST rootAST) {
-        Assert.assertTrue(isAstEquals(expectedTree, rootAST));
+        if (!isAstEquals(expectedTree, rootAST)) {
+            Assert.assertEquals(expectedTree, rootAST);
+        }
     }
 
     private static boolean isAstEquals(DetailAST expected, DetailAST actual) {
@@ -64,9 +66,6 @@ else if (actual == null || expected == null) {
         else {
             result = isAstEqualsSafe(expected, actual);
         }
-        if (!result) {
-            System.out.println("Expected: " + expected + " | Actual: " + actual);
-        }
         return result;
     }
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputSemantic.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputSemantic.java
index 978963767a..b85c912b3f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputSemantic.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputSemantic.java
@@ -66,7 +66,7 @@ void exHandlerTest()
             // can never happen, empty compound statement is another workaround
         }
         catch (UnsupportedOperationException handledException) {
-            System.out.println(handledException.getMessage());
+            System.identityHashCode(handledException.getMessage());
         }
         catch (SecurityException ex) { /* hello */ }
         catch (StringIndexOutOfBoundsException ex) {}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain.java
index 646a1a2115..4c7ad1f835 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain.java
@@ -13,7 +13,7 @@
     // uncommented main
     public static void main(String[] args)
     {
-        System.out.println("InputUncommentedMain.main()");
+        System.identityHashCode("InputUncommentedMain.main()");
     }
 }
 
@@ -22,7 +22,7 @@ public static void main(String[] args)
     // uncommented main in class Main
     public static void main(String[] args)
     {
-        System.out.println("Main.main()");
+        System.identityHashCode("Main.main()");
     }
 }
 
@@ -31,7 +31,7 @@ public static void main(String[] args)
     // one more uncommented main
     public static void main(java.lang.String[] args)
     {
-        System.out.println("test1.main()");
+        System.identityHashCode("test1.main()");
     }
 }
 
@@ -40,7 +40,7 @@ public static void main(java.lang.String[] args)
     // wrong arg type
     public static void main(int args)
     {
-        System.out.println("test2.main()");
+        System.identityHashCode("test2.main()");
     }
 }
 
@@ -49,7 +49,7 @@ public static void main(int args)
     // no-public main
     static void main(String[] args)
     {
-        System.out.println("test3.main()");
+        System.identityHashCode("test3.main()");
     }
 }
 
@@ -58,7 +58,7 @@ static void main(String[] args)
     // non-static main
     public void main(String[] args)
     {
-        System.out.println("test4.main()");
+        System.identityHashCode("test4.main()");
     }
 }
 
@@ -67,7 +67,7 @@ public void main(String[] args)
     // wrong return type
     public static int main(String[] args)
     {
-        System.out.println("test5.main()");
+        System.identityHashCode("test5.main()");
         return 1;
     }
 }
@@ -77,7 +77,7 @@ public static int main(String[] args)
     // too many params
     public static void main(String[] args, int param)
     {
-        System.out.println("test6.main()");
+        System.identityHashCode("test6.main()");
     }
 }
 
@@ -86,6 +86,6 @@ public static void main(String[] args, int param)
     // main w/o params
     public static void main()
     {
-        System.out.println("test7.main()");
+        System.identityHashCode("test7.main()");
     }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain2.java
index 831fb4a122..325ceb391d 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain2.java
@@ -12,7 +12,7 @@
         // uncommented main with depth 2
         public void main(String[] args)
         {
-            System.out.println("InputUncommentedMain.main()");
+            System.identityHashCode("InputUncommentedMain.main()");
         }
         
         //lets go deeper
@@ -21,7 +21,7 @@ public void main(String[] args)
             // uncommented main with depth 3
             public void main(String[] args)
             {
-                System.out.println("InputUncommentedMain.main()");
+                System.identityHashCode("InputUncommentedMain.main()");
             }
             
             
@@ -30,7 +30,7 @@ public void main(String[] args)
     
     public static void main(String[] args)
     {
-        System.out.println("InputUncommentedMain.main()");
+        System.identityHashCode("InputUncommentedMain.main()");
     }
     
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain3.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain3.java
index 70378c175b..3152bac575 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain3.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain3.java
@@ -8,6 +8,6 @@
     
     public static void anyWrongMethodName(String[] args)
     {
-        System.out.println("InputUncommentedMain.main()");
+        System.identityHashCode("InputUncommentedMain.main()");
     }
 }
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain4.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain4.java
index 9f8dbe0702..4e363b3c76 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain4.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputUncommentedMain4.java
@@ -9,6 +9,6 @@
     // one more uncommented main
     public static void main(int[] args)
     {
-        System.out.println("test1.main()");
+        System.identityHashCode("test1.main()");
     }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
index 6260ddd825..84e8e7eb26 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputBracesSingleLineStatements.java
@@ -82,8 +82,8 @@ private int getSmth(int num)
     }
     
     private void testElse(int k) {
-        if (k == 4) System.out.println("yes");
-        else System.out.println("no");
+        if (k == 4) System.identityHashCode("yes");
+        else System.identityHashCode("no");
         for (;;);
     }
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCatchBlock.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCatchBlock.java
index 762deede3b..c2ce154298 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCatchBlock.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputEmptyCatchBlock.java
@@ -81,7 +81,7 @@ public void testTryCatch()
             return; 
         } 
         catch (Exception e) {
-            System.out.println(e);
+            System.identityHashCode(e);
             return; 
         }
         finally
@@ -112,11 +112,11 @@ public void testTryCatch3()
             int e=u-y;
         } 
         catch (IllegalArgumentException e) {
-            System.out.println(e); //some comment
+            System.identityHashCode(e); //some comment
             return; 
         }
         catch (IllegalStateException ex) {
-                System.out.println(ex);
+                System.identityHashCode(ex);
                 return; 
         }
     }
@@ -129,7 +129,7 @@ public void testTryCatch4()
             int e=u-y;
         } 
         catch (IllegalArgumentException e) {
-            System.out.println(e);
+            System.identityHashCode(e);
             return; 
         }
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyOther.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyOther.java
index 42c51c7dde..5a29cab0e3 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyOther.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputLeftCurlyOther.java
@@ -89,7 +89,7 @@ void method2()
     {
         boolean flag = true;
         if (flag) {
-            System.out.println("heh");
+            System.identityHashCode("heh");
             flag = !flag; } System.err.
               println("Xe-xe");
         // it is ok to have rcurly on the same line as previous
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNeedBraces.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNeedBraces.java
index 7e87cda6b3..74a8f9ebd1 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNeedBraces.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNeedBraces.java
@@ -32,7 +32,7 @@ public void method() {
         }
         
         switch(1) {
-        case 1:  System.out.println();
+        case 1:  System.lineSeparator();
         case 2: { break;}
         
         case 3: { 
@@ -41,7 +41,7 @@ public void method() {
         case 4: 
             break;
             
-        case 5:  System.out.println();
+        case 5:  System.lineSeparator();
             break;
         }
         
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNestedBlocks.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNestedBlocks.java
index 4be8c9da13..d0719610f1 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNestedBlocks.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputNestedBlocks.java
@@ -54,7 +54,7 @@ public void method()
             case 3: // test fallthrough
             default:
                 // Not OK, SLIST is not complete case body
-                System.out.println("Hello");
+                System.identityHashCode("Hello");
                 {
                     x = 2;
                 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java
index de27350d37..e982e59cd5 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneOrSingleline.java
@@ -153,12 +153,12 @@ void foo23(java.util.HashSet<String> set) {
 
     void foo25() {
         for (int i = 0; i < 10; i++) {
-            System.out.println("Hello, world!");
+            System.identityHashCode("Hello, world!");
         }} //violation
 
     void foo26() {
         for (int i = 0; i < 10; i++) {
-            System.out.println("Hello, world!");}} //violation
+            System.identityHashCode("Hello, world!");}} //violation
 
     void foo27() {
         for (int i = 0; i < 10; i++) {for (int j = 0; j < 15; j++) {int a;}}} //violation
@@ -172,7 +172,7 @@ void foo27() {
     private void foo29() {
         boolean flag = true;
         if (flag) {
-            System.out.println("heh");
+            System.identityHashCode("heh");
             flag = !flag; } System.err. //violation
             println("Xe-xe");
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAnnotations.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAnnotations.java
index 7802a02745..03ccc4b2b7 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAnnotations.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAnnotations.java
@@ -193,12 +193,12 @@ void foo23(java.util.HashSet<String> set) {
 
     void foo25() {
         for (int i = 0; i < 10; i++) {
-            System.out.println("Hello, world!");
+            System.identityHashCode("Hello, world!");
         }} //violation
 
     void foo26() {
         for (int i = 0; i < 10; i++) {
-            System.out.println("Hello, world!");}} //violation
+            System.identityHashCode("Hello, world!");}} //violation
 
     void foo27() {
         for (int i = 0; i < 10; i++) {for (int j = 0; j < 15; j++) {int a;}}} //violation
@@ -212,7 +212,7 @@ void foo27() {
     private void foo29() {
         boolean flag = true;
         if (flag) {
-            System.out.println("heh");
+            System.identityHashCode("heh");
             flag = !flag; } System.err. //violation
             println("Xe-xe");
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java
index a85c38998a..01b93dfdaa 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputSemantic2.java
@@ -19,7 +19,7 @@ public void fooMethod()
 		if (doSideEffect() == 1) {} //is not OK, 
 		while ((a = index - 1) != 0) {} // is OK 
 		for (; index < s.length && s[index] != 'x'; index++) {} // is OK
-		if (a == 1) {} else {System.out.println("a");} // is not OK
+		if (a == 1) {} else {System.identityHashCode("a");} // is not OK
 		switch (a) {} //warn
 		switch (a) { //ok
         case 1:
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough.java
index 85f3d15449..bc302a047d 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough.java
@@ -52,7 +52,7 @@ void method(int i, int j, boolean cond) {
                 }
             case 15: //fall through!!!
                 do {
-                    System.out.println("something");
+                    System.identityHashCode("something");
                     return;
                 } while(true);
             case 16:
@@ -185,7 +185,7 @@ void methodFallThru(int i, int j, boolean cond) {
               // fallthru
           case 15:
               do {
-                  System.out.println("something");
+                  System.identityHashCode("something");
                   return;
               } while(true);
           case 16:
@@ -422,7 +422,7 @@ void nextedSwitches2() {
         case 1:
             switch(hashCode()){}
         case 2:
-            System.out.println();
+            System.lineSeparator();
             break;
         }
     }
@@ -431,20 +431,20 @@ void ifWithoutBreak() {
         switch(hashCode()) {
         case 1:
             if (true) {
-                System.out.println();
+                System.lineSeparator();
             }
         case 2:
-            System.out.println();
+            System.lineSeparator();
             break;
         }
     }
     
     void noCommentAtTheEnd() {
         switch(hashCode()) {
-        case 1: System.out.println();
+        case 1: System.lineSeparator();
 
         case 2:
-            System.out.println();
+            System.lineSeparator();
             break;
         }
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough2.java
index 968165f3e2..2c8c9e92a3 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFallThrough2.java
@@ -26,7 +26,7 @@ public static void test() {
             case 0:
             case 1:
             case 2:
-                System.out.println(var2);
+                System.identityHashCode(var2);
                 break;
             case 3:
                 if (true) {
@@ -59,14 +59,14 @@ else if (true) {
                 }
             case 8:
                 if(var2 == 5) {
-                    System.out.println("0xB16B00B5");
+                    System.identityHashCode("0xB16B00B5");
                 }
                 else {
                     break;
                 }
             case 9:
                 if(var2 == 5) {
-                    System.out.println("0xCAFED00D");
+                    System.identityHashCode("0xCAFED00D");
                 }
                 else {
                     System.out.printf("0x4B1D");
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariable.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariable.java
index 5d2513e0c0..7c4d337d4b 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariable.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariable.java
@@ -148,7 +148,7 @@ public void anotherMethod()
 
     public void doSomething(Object _o)
     {
-        System.out.println(_o);
+        System.identityHashCode(_o);
     }
 
     public void doSomething2(Object _o1)
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameShadowing.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameShadowing.java
index 5408f03186..79d40a1581 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameShadowing.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameShadowing.java
@@ -2,7 +2,7 @@
 
 class Foo1 {
     public void foo(String text) {
-        System.out.println(text);
+        System.identityHashCode(text);
 
         class Bar {
             void bar (String text) {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNativeMethods.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNativeMethods.java
index ece7fbe238..f8cf647fcc 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNativeMethods.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNativeMethods.java
@@ -11,12 +11,12 @@
 
      public void print () {
          String str = nativeFoo(1, 4);
-         System.out.println(str);
+         System.identityHashCode(str);
      }
 
      public static void main(final String[] args) {
          (new InputFinalLocalVariableNativeMethods()).print();
-         System.out.println("In Java, the average is " +
+         System.identityHashCode("In Java, the average is " +
              new InputFinalLocalVariableNativeMethods().average(3, 2));
          return;
      }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputModifiedControl.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputModifiedControl.java
index 51731b4284..f47309948f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputModifiedControl.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputModifiedControl.java
@@ -35,7 +35,7 @@ void method1()
             Serializable s = new Serializable() {
                 int i = 3;
                 void a() {
-                    System.out.println(i++);
+                    System.identityHashCode(i++);
                 }
             };
         }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMultipleStringLiterals.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMultipleStringLiterals.java
index 67d7940598..aee8422a83 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMultipleStringLiterals.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputMultipleStringLiterals.java
@@ -11,7 +11,7 @@
 
     void method1() {
         String a1 = "StringContents";
-        System.out.println("StringContents");
+        System.identityHashCode("StringContents");
         // The following is not reported, since it is two string literals.
         String a2 = "String" + "Contents";
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputOneStatementPerLine.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputOneStatementPerLine.java
index c431cd1a2e..52c9c4501f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputOneStatementPerLine.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputOneStatementPerLine.java
@@ -85,7 +85,7 @@ public void doLegalComment() {
   public void doLegalString() {
     one = 1;
     two = 2;
-    System.out.println("one = 1; two = 2");
+    System.identityHashCode("one = 1; two = 2");
   }
 
   /**
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
index e8cdbb7b76..cef9f58834 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputRequireThis.java
@@ -102,7 +102,7 @@ public void foo() {
             foo.read();
         }
         catch (final IOException e) {
-            e.printStackTrace();
+            e.getCause();
         }
     }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputUnnecessaryParentheses.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputUnnecessaryParentheses.java
index af9d001052..04f11ddd7e 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputUnnecessaryParentheses.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputUnnecessaryParentheses.java
@@ -10,7 +10,7 @@ int f1() {
         }
 
         for (int i = (0+1); (i) < ((6+6)); i += (1+0)) {
-            System.out.println("hi");
+            System.identityHashCode("hi");
         }
 
         return (0);
@@ -84,7 +84,7 @@ private void f6(TypeA a) {
 
     private void print(int arg)
     {
-        System.out.println("arg = " + arg);
+        System.identityHashCode("arg = " + arg);
     }
 
     static class TypeParameterized<T> {}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputVariableDeclarationUsageDistance.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputVariableDeclarationUsageDistance.java
index ff223c802a..39c8ff6d8c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputVariableDeclarationUsageDistance.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/InputVariableDeclarationUsageDistance.java
@@ -88,7 +88,7 @@ public void testMethod4(int arg) {
 
 		String ar[] = { "1", "2" };
 		for (String st : ar) {
-			System.out.println(st);
+			System.identityHashCode(st);
 		}
 	}
 
@@ -381,11 +381,11 @@ public void testForCycle() {
 		int filterCount = 0;
 		for (int i = 0; i < 10; i++, filterCount++) {
 			int abc = 0;
-			System.out.println(abc);
+			System.identityHashCode(abc);
 
 			for (int j = 0; j < 10; j++) {
 				abc = filterCount;
-				System.out.println(abc);
+				System.identityHashCode(abc);
 			}
 		}
 	}
@@ -482,7 +482,7 @@ public void testIssue32_9() {
         options.addBindFile(null);
         options.addBindFile(null);
         options.addBindFile(null);
-        System.out.println("message");
+        System.identityHashCode("message");
         myOption.setArgName("abc"); // distance=7
     }
     
@@ -504,15 +504,15 @@ public int testIssue32_11(String toDir)
         int count = 0;
         String[] files = {};
 
-        System.out.println("Data archivation started");
+        System.identityHashCode("Data archivation started");
         files.notify();
-        System.out.println("sss");
+        System.identityHashCode("sss");
 
         if (files == null || files.length == 0) {
-            System.out.println("No files on a remote site");
+            System.identityHashCode("No files on a remote site");
         }
         else {
-            System.out.println("Files on remote site: " + files.length);
+            System.identityHashCode("Files on remote site: " + files.length);
 
             for (String ftpFile : files) {
                 if (files.length == 0) {
@@ -523,7 +523,7 @@ public int testIssue32_11(String toDir)
             }
         }
 
-        System.out.println();
+        System.lineSeparator();
 
         return count;
     }
@@ -553,13 +553,13 @@ private TreeMapNode buildTree(Object[][] tree)
             else {
                 node = new TreeMapNode(label);
             }
-            System.out.println(id.toString() + node);
-            System.out.println(node.toString() + id);
+            System.identityHashCode(id.toString() + node);
+            System.identityHashCode(node.toString() + id);
             if (parentId == null || parentId == -1) { ///!!!!!!!
                 root = node;
             }
             else {
-                System.out.println(parentId.toString() +node);
+                System.identityHashCode(parentId.toString() +node);
             }
         }
         return root;
@@ -841,68 +841,68 @@ public static void append(String line)
 class New {
     void a() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         while (true) {
-            System.out.println();
-            System.out.println(a);
+            System.lineSeparator();
+            System.identityHashCode(a);
         }
     }
     
     void b() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         do {
-            System.out.println();
-            System.out.println(a);
+            System.lineSeparator();
+            System.identityHashCode(a);
         } while (true);
     }
     
     void c() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         for (;;) {
-            System.out.println();
-            System.out.println(a);
+            System.lineSeparator();
+            System.identityHashCode(a);
         }
     }
     
     void d() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         for (int i: new int[]{1,2,3}) {
-            System.out.println();
-            System.out.println(a);
+            System.lineSeparator();
+            System.identityHashCode(a);
         }
     }
 
     void f() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         while (true)
-            System.out.println(a);
+            System.identityHashCode(a);
     }
     
     void h() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         while (true)
             while (true)
                 a++;
@@ -912,37 +912,37 @@ void i() {
         int a = 1;
         switch (Math.max(1, 2)) {
         case 1:
-            System.out.println();
+            System.lineSeparator();
             break;
         case 2:
-            System.out.println();
+            System.lineSeparator();
             break;
         }
 
         switch (Math.max(1, 2)) {
         case 1:
-            System.out.println(a);
+            System.identityHashCode(a);
             break;
         case 2:
-            System.out.println(a);
+            System.identityHashCode(a);
             break;
         }
     }
     
     void k() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         while (true) {
-            System.out.println();
+            System.lineSeparator();
             if (true) {
-                System.out.println();
+                System.lineSeparator();
             } else if (true) {
-                System.out.println(a);
+                System.identityHashCode(a);
             } else {
-                System.out.println();
+                System.lineSeparator();
             }
         }
     }
@@ -954,10 +954,10 @@ void l() {
             switch (hashCode()){}
             switch (Math.max(1, 2)) {
             case 1:
-                System.out.println(a);
+                System.identityHashCode(a);
                 break;
             case 2:
-                System.out.println(a);
+                System.identityHashCode(a);
                 break;
             }
         }
@@ -965,9 +965,9 @@ void l() {
     
     void tryWithoutFinally() {
         int a = 1;
-        System.out.println();
-        System.out.println();
-        System.out.println();
+        System.lineSeparator();
+        System.lineSeparator();
+        System.lineSeparator();
         try {
             a = 2;
         }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputDesignForExtension.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputDesignForExtension.java
index b35e0879ed..0b3914d24c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputDesignForExtension.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputDesignForExtension.java
@@ -21,7 +21,7 @@
     {
         protected void finalThroughClassDef()
         {
-            System.out.println("no way to override");
+            System.identityHashCode("no way to override");
         }
     }
 
@@ -36,7 +36,7 @@ public void nonFinalButEmpty2()
 
     private void aPrivateMethod()
     {
-        System.out.println("no way to override");
+        System.identityHashCode("no way to override");
     }
 
     protected abstract void nonFinalButAbstract();
@@ -45,7 +45,7 @@ private void aPrivateMethod()
 
     protected void doh()
     {
-        System.out.println("nonempty and overriding possible");
+        System.identityHashCode("nonempty and overriding possible");
     }
 
     // has a potentially complex implementation in native code.
@@ -55,12 +55,12 @@ protected void doh()
     
     public final void aFinalMethod()
     {
-    	System.out.println("no way to override");
+    	System.identityHashCode("no way to override");
     }
     
     public static void aStaticMethod()
     {
-    	System.out.println("no way to override");
+    	System.identityHashCode("no way to override");
     }
 
     // tries to trigger bug #884035
@@ -84,7 +84,7 @@ public int compare(Object o1, Object o2)
     {
         public void someMethod()
         {
-        	System.out.println("nonempty and overriding is possible");
+        	System.identityHashCode("nonempty and overriding is possible");
         }
     }
     
@@ -94,7 +94,7 @@ public void someMethod()
     	private nonFinalClass(){}    	
         public void someMethod()
         {
-        	System.out.println("nonempty and overriding is possible");
+        	System.identityHashCode("nonempty and overriding is possible");
         }
     }
     
@@ -104,7 +104,7 @@ public void someMethod()
     	public anotherNonFinalClass(){}    	
         public void someMethod()
         {
-        	System.out.println("nonempty and overriding is possible");
+        	System.identityHashCode("nonempty and overriding is possible");
         }
     }
     
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputInnerClass.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputInnerClass.java
index 61253fa301..d4e7f076b5 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputInnerClass.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputInnerClass.java
@@ -8,7 +8,7 @@ public void methodTestInner1() {
 
 		class InnerInMethod1 {
 			void methodTest1() {
-				System.out.println("test1");
+				System.identityHashCode("test1");
 			}
 		}
 
@@ -42,7 +42,7 @@ public void methodTestInner3() {
 	}
 
 	void methodTest2() { //error
-		System.out.println("test2");
+		System.identityHashCode("test2");
 	}
 }
 
@@ -63,7 +63,7 @@ public void methodTestInner3() {
 	}
 
 	void methodTest2() { //error
-		System.out.println("test2");
+		System.identityHashCode("test2");
 	}
 
 	private int i = 0; //error
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputNonUtilityClass.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputNonUtilityClass.java
index 57fa5e044c..68c3307225 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputNonUtilityClass.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputNonUtilityClass.java
@@ -16,6 +16,6 @@ public InputNonUtilityClass()
 
     public static void utilMethod()
     {
-	System.out.println("I'm a utility method");
+	System.identityHashCode("I'm a utility method");
     }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputBraceAdjustment.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputBraceAdjustment.java
index 7dd282c8a2..fb510d3d7f 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputBraceAdjustment.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputBraceAdjustment.java
@@ -24,7 +24,7 @@ public InputBraceAdjustment() //indent:4 exp:4
         boolean uglyGnuStyle = true; //indent:8 exp:8
         if (uglyGnuStyle) //indent:8 exp:8
           { //indent:10 exp:10
-            System.out.println("ugly GNU style braces"); //indent:12 exp:12
+            System.identityHashCode("ugly GNU style braces"); //indent:12 exp:12
         } //indent:8 exp:10 warn
       } //indent:6 exp:6
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationInSwitchBlock.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationInSwitchBlock.java
index eb9d9aded9..69c419cfdc 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationInSwitchBlock.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationInSwitchBlock.java
@@ -66,7 +66,7 @@ private static void fooSwitch() {
                 int a;
             }
               // violation
-                case "18": { System.out.println();
+                case "18": { System.lineSeparator();
                 }   // trailing comment
             case "19":
                 // comment
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelIndent.java
index cf1d275891..7be34f8394 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelIndent.java
@@ -22,21 +22,21 @@ public InputInvalidLabelIndent() { //indent:4 exp:4
 
         while (test) { //indent:8 exp:8
           label: //indent:10 exp:8,12 warn
-            System.out.println("label test"); //indent:12 exp:12
+            System.identityHashCode("label test"); //indent:12 exp:12
 
             if (test) { //indent:12 exp:12
                 unusedLabel: //indent:16 exp:16
-                System.out.println("more testing"); //indent:16 exp:16
+                System.identityHashCode("more testing"); //indent:16 exp:16
             } //indent:12 exp:12
 
         } //indent:8 exp:8
   label2: //indent:2 exp:4,8 warn
-        System.out.println("toplevel"); //indent:8 exp:8
+        System.identityHashCode("toplevel"); //indent:8 exp:8
     label3: //indent:4 exp:4
-                  System.out.println("toplevel"); //indent:18 exp:8,12 warn
-                  System.out.println("toplevel"); //indent:18 exp:8 warn
+                  System.identityHashCode("toplevel"); //indent:18 exp:8,12 warn
+                  System.identityHashCode("toplevel"); //indent:18 exp:8 warn
     label4: //indent:4 exp:4
-      System.out.println("toplevel"); //indent:6 exp:8,12 warn
+      System.identityHashCode("toplevel"); //indent:6 exp:8,12 warn
     label5: //indent:4 exp:4
       System //indent:6 exp:8,12 warn
             .out. //indent:12 exp:>=10
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
index ff428ae745..724329e3c0 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidMethodIndent.java
@@ -100,20 +100,20 @@ void method6a() //indent:4 exp:4
           System.getProperty("foo"); //indent:10 exp:12 warn
       } //indent:6 exp:8 warn
 
-        System.out.println("methods are: " + //indent:8 exp:8
+        System.identityHashCode("methods are: " + //indent:8 exp:8
           Arrays.asList( //indent:10 exp:12 warn
                 new String[] {"method"}).toString()); //indent:16 exp:>=14
 
 
-        System.out.println("methods are: " + //indent:8 exp:8
+        System.identityHashCode("methods are: " + //indent:8 exp:8
             Arrays.asList( //indent:12 exp:>=12
               new String[] {"method"}).toString()); //indent:14 exp:>=14
 
-        System.out.println("methods are: " //indent:8 exp:8
+        System.identityHashCode("methods are: " //indent:8 exp:8
           + Arrays.asList( //indent:10 exp:12 warn
                 new String[] {"method"}).toString()); //indent:16 exp:>=14
 
-        System.out.println("methods are: " //indent:8 exp:8
+        System.identityHashCode("methods are: " //indent:8 exp:8
             + Arrays.asList( //indent:12 exp:>=12
               new String[] {"method"}).toString()); //indent:14 exp:>=12
 
@@ -126,7 +126,7 @@ void method6a() //indent:4 exp:4
           new String("type") //indent:10 exp:12 warn
       ); //indent:6 exp:8 warn
 
-        System.out.println("methods are: " + Arrays.asList( //indent:8 exp:8
+        System.identityHashCode("methods are: " + Arrays.asList( //indent:8 exp:8
             new String[] {"method"}).toString() //indent:12 exp:>=12
       ); //indent:6 exp:8 warn
     } //indent:4 exp:4
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidSwitchIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidSwitchIndent.java
index 6d73b0dd33..9585c5c2b7 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidSwitchIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidSwitchIndent.java
@@ -30,7 +30,7 @@ private void method1() { //indent:4 exp:4
       switch (s) { //indent:6 exp:8 warn
 
           case 4: //indent:10 exp:12 warn
-              System.out.println(""); //indent:14 exp:16 warn
+              System.identityHashCode(""); //indent:14 exp:16 warn
                 break; //indent:16 exp:16
 
             case CONST: //indent:12 exp:12
@@ -41,7 +41,7 @@ private void method1() { //indent:4 exp:4
                 break; //indent:16 exp:16
 
           default: //indent:10 exp:12 warn
-              System.out.println(""); //indent:14 exp:16 warn
+              System.identityHashCode(""); //indent:14 exp:16 warn
               break; //indent:14 exp:16 warn
         } //indent:8 exp:8
 
@@ -50,21 +50,21 @@ private void method1() { //indent:4 exp:4
         switch (s) { //indent:8 exp:8
 
             case 4: { //indent:12 exp:12
-              System.out.println(""); //indent:14 exp:16 warn
+              System.identityHashCode(""); //indent:14 exp:16 warn
                   break; //indent:18 exp:16 warn
           } //indent:10 exp:12 warn
 
             case CONST2: //indent:12 exp:12
             case CONST3: //indent:12 exp:12
           { //indent:10 exp:12 warn
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
               } //indent:14 exp:12 warn
 
 
             case 22: //indent:12 exp:12
               { //indent:14 exp:12 warn
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
           } //indent:10 exp:12 warn
         } //indent:8 exp:8
@@ -80,7 +80,7 @@ private void method1() { //indent:4 exp:4
             case //indent:12 exp:12
               CONST3: //indent:14 exp:16 warn
             { //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
             } //indent:12 exp:12
         } //indent:8 exp:8
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidTryIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidTryIndent.java
index 5e6da9768e..0f4e6da470 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidTryIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidTryIndent.java
@@ -24,26 +24,26 @@ public void method() { //indent:4 exp:4
 
          try { //indent:9 exp:8 warn
        } catch (Throwable t) { //indent:7 exp:8 warn
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
        } //indent:7 exp:8 warn
 
     try { //indent:4 exp:8 warn
-        System.out.println("test"); //indent:8 exp:12 warn
+        System.identityHashCode("test"); //indent:8 exp:12 warn
     } finally { //indent:4 exp:8 warn
-        System.out.println("finally"); //indent:8 exp:12 warn
+        System.identityHashCode("finally"); //indent:8 exp:12 warn
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
         } catch (Throwable t) { //indent:8 exp:8
-        System.out.println("err"); //indent:8 exp:12 warn
+        System.identityHashCode("err"); //indent:8 exp:12 warn
         } finally { //indent:8 exp:8
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
           } catch (Exception t) { //indent:10 exp:8 warn
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
       } catch (Throwable t) { //indent:6 exp:8 warn
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
@@ -53,31 +53,31 @@ public void method() { //indent:4 exp:4
 
 
         try { //indent:8 exp:8
-            System.out.println("try"); //indent:12 exp:12
+            System.identityHashCode("try"); //indent:12 exp:12
         }  //indent:8 exp:8
         catch (Exception t) { //indent:8 exp:8
-          System.out.println("err"); //indent:10 exp:12 warn
-              System.out.println("err"); //indent:14 exp:12 warn
-          System.out.println("err"); //indent:10 exp:12 warn
+          System.identityHashCode("err"); //indent:10 exp:12 warn
+              System.identityHashCode("err"); //indent:14 exp:12 warn
+          System.identityHashCode("err"); //indent:10 exp:12 warn
         }  //indent:8 exp:8
       catch (Throwable t) { //indent:6 exp:8 warn
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         }  //indent:8 exp:8
         finally { //indent:8 exp:8
         } //indent:8 exp:8
 
         try  //indent:8 exp:8
           { //indent:10 exp:8 warn
-            System.out.println("try"); //indent:12 exp:12
+            System.identityHashCode("try"); //indent:12 exp:12
           }  //indent:10 exp:8 warn
         catch (Exception t)  //indent:8 exp:8
       { //indent:6 exp:8 warn
-            System.out.println("err"); //indent:12 exp:12
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
           }  //indent:10 exp:8 warn
         catch (Throwable t)  //indent:8 exp:8
         { //indent:8 exp:8
-          System.out.println("err"); //indent:10 exp:12 warn
+          System.identityHashCode("err"); //indent:10 exp:12 warn
         } //indent:8 exp:8
         finally  //indent:8 exp:8
         { //indent:8 exp:8
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputUseTwoSpaces.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputUseTwoSpaces.java
index 528bda87c5..6a2caaf41c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputUseTwoSpaces.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputUseTwoSpaces.java
@@ -33,7 +33,7 @@ public InputUseTwoSpaces() { //indent:2 exp:2
 
 class Test { //indent:0 exp:0
   public static void main(String[] args) { //indent:2 exp:2
-    System.out.println(" Hello" + //indent:4 exp:4
+    System.identityHashCode(" Hello" + //indent:4 exp:4
       new Object() { //indent:6 exp:>=6
         public String toString() { //indent:8 exp:8
           return "World"; //indent:10 exp:10
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidBlockIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidBlockIndent.java
index d85c266809..b2b4589e71 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidBlockIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidBlockIndent.java
@@ -152,7 +152,7 @@ public bug1260079() //indent:4 exp:4
         { //indent:8 exp:8
             public void run() //indent:12 exp:12
             { //indent:12 exp:12
-                System.out.println("ran"); //indent:16 exp:16
+                System.identityHashCode("ran"); //indent:16 exp:16
             } //indent:12 exp:12
         }.start(); //indent:8 exp:8
     } //indent:4 exp:4
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidCommaIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidCommaIndent.java
index 5de927ad68..d204ea12cc 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidCommaIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidCommaIndent.java
@@ -34,7 +34,7 @@ public void method1(int x, int y, int z) { //indent:4 exp:4
 
         if ((j == 2 && k == 3) //indent:8 exp:8
               || test) { //indent:14 exp:>=12
-            System.out.println("test"); //indent:12 exp:12
+            System.identityHashCode("test"); //indent:12 exp:12
         } //indent:8 exp:8
 
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidDotIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidDotIndent.java
index c334a0e536..c1373182bf 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidDotIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidDotIndent.java
@@ -22,7 +22,7 @@
     /** Creates a new instance of InputValidDotIndent */ //indent:4 exp:4
     public InputValidDotIndent() { //indent:4 exp:4
 
-        System.out.println(); //indent:8 exp:8
+        System.lineSeparator(); //indent:8 exp:8
 
         System. //indent:8 exp:8
             out.println(); //indent:12 exp:12
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidLabelIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidLabelIndent.java
index 4a35b28403..4e4872537c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidLabelIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidLabelIndent.java
@@ -22,16 +22,16 @@ public InputValidLabelIndent() { //indent:4 exp:4
 
         while (test) { //indent:8 exp:8
         label: //indent:8 exp:8,12
-            System.out.println("label test"); //indent:12 exp:12,16
+            System.identityHashCode("label test"); //indent:12 exp:12,16
 
             if (test) { //indent:12 exp:12
             unusedLabel: //indent:12 exp:12
-                System.out.println("more testing"); //indent:16 exp:16,20
+                System.identityHashCode("more testing"); //indent:16 exp:16,20
             } //indent:12 exp:12
 
         } //indent:8 exp:8
     label2: //indent:4 exp:4,8
-        System.out.println("toplevel"); //indent:8 exp:8,12
+        System.identityHashCode("toplevel"); //indent:8 exp:8,12
     } //indent:4 exp:4
 
 } //indent:0 exp:0
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidMethodIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidMethodIndent.java
index 1822713d88..316299bc5c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidMethodIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidMethodIndent.java
@@ -140,14 +140,14 @@ private int myfunc3(int a, int b, int c, int d) { //indent:4 exp:4
 
 
     void method6() { //indent:4 exp:4
-        System.out.println("methods are: " + Arrays.asList( //indent:8 exp:8
+        System.identityHashCode("methods are: " + Arrays.asList( //indent:8 exp:8
             new String[] {"method"}).toString()); //indent:12 exp:>=12
 
-        System.out.println("methods are: " + Arrays.asList( //indent:8 exp:8
+        System.identityHashCode("methods are: " + Arrays.asList( //indent:8 exp:8
             new String[] {"method"} //indent:12 exp:>=12
         ).toString()); //indent:8 exp:8
 
-        System.out.println("methods are: " + Arrays.asList( //indent:8 exp:8
+        System.identityHashCode("methods are: " + Arrays.asList( //indent:8 exp:8
             new String[] {"method"}).toString() //indent:12 exp:>=12
         ); //indent:8 exp:8
 
@@ -158,11 +158,11 @@ void method6() { //indent:4 exp:4
         myfunc2(3, 4, method2(3, 4, 5, 6) + 5,  //indent:8 exp:8
             6, 7, 8, 9); //indent:12 exp:>=12
 
-        System.out.println("methods are: " +  //indent:8 exp:8
+        System.identityHashCode("methods are: " +  //indent:8 exp:8
             Arrays.asList( //indent:12 exp:>=12
                 new String[] {"method"}).toString()); //indent:16 exp:>=16
 
-        System.out.println("methods are: "  //indent:8 exp:8
+        System.identityHashCode("methods are: "  //indent:8 exp:8
             + Arrays.asList( //indent:12 exp:>=12
                 new String[] {"method"}).toString()); //indent:16 exp:>=16
 
@@ -170,11 +170,11 @@ void method6() { //indent:4 exp:4
         String blah = (String) System.getProperty( //indent:8 exp:8
             new String("type")); //indent:12 exp:>=12
 
-        System.out.println(method1() + "mytext"  //indent:8 exp:8
+        System.identityHashCode(method1() + "mytext"  //indent:8 exp:8
             + " at indentation level not at correct indentation, "  //indent:12 exp:>=12
             + method1()); //indent:12 exp:>=12
 
-        System.out.println( //indent:8 exp:8
+        System.identityHashCode( //indent:8 exp:8
             method1() + "mytext"  //indent:12 exp:>=12
                 + " at indentation level not at correct indentation, "  //indent:16 exp:>=12
                 + method1()); //indent:16 exp:>=12
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidSwitchIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidSwitchIndent.java
index 42e7948e9a..a239e4a976 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidSwitchIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidSwitchIndent.java
@@ -30,7 +30,7 @@ private void method1() { //indent:4 exp:4
         switch (s) { //indent:8 exp:8
 
             case 4: //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
 
             case CONST: //indent:12 exp:12
@@ -41,7 +41,7 @@ private void method1() { //indent:4 exp:4
                 break; //indent:16 exp:16
 
             default: //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
         } //indent:8 exp:8
 
@@ -50,7 +50,7 @@ private void method1() { //indent:4 exp:4
         switch (s) { //indent:8 exp:8
 
             case 4: { //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
             } //indent:12 exp:12
 
@@ -60,7 +60,7 @@ private void method1() { //indent:4 exp:4
             case CONST2: //indent:12 exp:12
             case CONST3: //indent:12 exp:12
             { //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
             } //indent:12 exp:12
 
@@ -73,7 +73,7 @@ private void method1() { //indent:4 exp:4
 
             case  //indent:12 exp:12
                 4: { //indent:16 exp:16
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
             } //indent:12 exp:12
 
@@ -85,7 +85,7 @@ private void method1() { //indent:4 exp:4
             case  //indent:12 exp:12
                 CONST3: //indent:16 exp:16
             { //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
             } //indent:12 exp:12
 
@@ -99,7 +99,7 @@ private void method1() { //indent:4 exp:4
 
         switch (s) { //indent:8 exp:8
             default: //indent:12 exp:12
-                System.out.println(""); //indent:16 exp:16
+                System.identityHashCode(""); //indent:16 exp:16
                 break; //indent:16 exp:16
         } //indent:8 exp:8
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidTryIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidTryIndent.java
index 68f31e574b..959fb07bf8 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidTryIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputValidTryIndent.java
@@ -24,26 +24,26 @@ public void method() { //indent:4 exp:4
 
         try { //indent:8 exp:8
         } catch (Throwable t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
-            System.out.println("test"); //indent:12 exp:12
+            System.identityHashCode("test"); //indent:12 exp:12
         } finally { //indent:8 exp:8
-            System.out.println("finally"); //indent:12 exp:12
+            System.identityHashCode("finally"); //indent:12 exp:12
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
         } catch (Throwable t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } finally { //indent:8 exp:8
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
         } catch (Exception t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } catch (Throwable t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } //indent:8 exp:8
 
         try { //indent:8 exp:8
@@ -53,30 +53,30 @@ public void method() { //indent:4 exp:4
 
 
         try { //indent:8 exp:8
-            System.out.println("try"); //indent:12 exp:12
+            System.identityHashCode("try"); //indent:12 exp:12
         }  //indent:8 exp:8
         catch (Exception t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         }  //indent:8 exp:8
         catch (Throwable t) { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         }  //indent:8 exp:8
         finally { //indent:8 exp:8
         } //indent:8 exp:8
 
         try  //indent:8 exp:8
         { //indent:8 exp:8
-            System.out.println("try"); //indent:12 exp:12
+            System.identityHashCode("try"); //indent:12 exp:12
         }  //indent:8 exp:8
         catch (Exception t)  //indent:8 exp:8
         { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         }  //indent:8 exp:8
         catch (Throwable t)  //indent:8 exp:8
         { //indent:8 exp:8
-            System.out.println("err"); //indent:12 exp:12
+            System.identityHashCode("err"); //indent:12 exp:12
         } //indent:8 exp:8
         finally  //indent:8 exp:8
         { //indent:8 exp:8
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputScopeAnonInner.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputScopeAnonInner.java
index 913cf6a924..3de11834ef 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputScopeAnonInner.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputScopeAnonInner.java
@@ -25,7 +25,7 @@
     private Runnable mRunnable = new Runnable() {
         public void run() // should not have to be documented, class is anon.
         {
-            System.out.println("running");
+            System.identityHashCode("running");
         }
     };
 
@@ -38,7 +38,7 @@ public void run() // should not have to be documented, class is anon.
             {
                 public void mouseClicked( MouseEvent aEv )
                 {
-                    System.out.println("click");
+                    System.identityHashCode("click");
                 }
             } );
     }
@@ -52,7 +52,7 @@ public void addInputAnonInner()
             {
                 public void mouseClicked( MouseEvent aEv )
                 {
-                    System.out.println("click");
+                    System.identityHashCode("click");
                 }
             } );
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputBooleanExpressionComplexityNPE.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputBooleanExpressionComplexityNPE.java
index f7c5887d30..02e074f936 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputBooleanExpressionComplexityNPE.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputBooleanExpressionComplexityNPE.java
@@ -4,7 +4,7 @@
 {
     static {
         try {
-            System.out.println("a");
+            System.identityHashCode("a");
         } catch (IllegalStateException | IllegalArgumentException e) {
             throw new RuntimeException(e);
         }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputJavaNCSS.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputJavaNCSS.java
index f8ae290043..02b4450fe4 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputJavaNCSS.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/metrics/InputJavaNCSS.java
@@ -32,7 +32,7 @@ private void testMethod3() {
         int a = 0;
         switch (a) {
             case 1: //falls through
-            case 2: System.out.println("Hello"); break;
+            case 2: System.identityHashCode("Hello"); break;
             default: break;
         }
         
@@ -40,7 +40,7 @@ private void testMethod3() {
 
             //should give an ncss of 2
             public void itemStateChanged(ItemEvent e) {          
-                System.out.println("Hello");
+                System.identityHashCode("Hello");
             }
         };  
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java
index 766a368d24..6dfb0a51be 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/sizes/InputAnonInnerLength.java
@@ -50,22 +50,22 @@ private MyInner(int[] anArray)
     private Runnable mRunnable1 = new Runnable() {
         public void run() // should not have to be documented, class is anon.
         {
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
         }
     };
 
@@ -75,21 +75,21 @@ public void run() // should not have to be documented, class is anon.
     private Runnable mRunnable2 = new Runnable() {
         public void run() // should not have to be documented, class is anon.
         {
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
-            System.out.println("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
+            System.identityHashCode("running");
         }
     };
 
@@ -102,7 +102,7 @@ public void run() // should not have to be documented, class is anon.
             {
                 public void mouseClicked( MouseEvent aEv )
                 {
-                    System.out.println("click");
+                    System.identityHashCode("click");
                 }
             } );
     }
@@ -116,7 +116,7 @@ public void addInputAnonInner()
             {
                 public void mouseClicked( MouseEvent aEv )
                 {
-                    System.out.println("click");
+                    System.identityHashCode("click");
                 }
             } );
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputEmptyLineSeparatorMultipleEmptyLines.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputEmptyLineSeparatorMultipleEmptyLines.java
index 71b4aef559..eeddc2bd5a 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputEmptyLineSeparatorMultipleEmptyLines.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputEmptyLineSeparatorMultipleEmptyLines.java
@@ -43,5 +43,6 @@
     private static void foo() {}
     
     private static void foo1() {}
-    
+
+
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputParenPadWithSpace.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputParenPadWithSpace.java
index f7ff910b92..f42b7373c1 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputParenPadWithSpace.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputParenPadWithSpace.java
@@ -16,7 +16,7 @@ public void enhancedFor ()
     {
         int[] i = new int[2];
         for ( int j: i ) {
-            System.out.println ( j );
+            System.identityHashCode ( j );
         }
     }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputWhitespaceAround.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputWhitespaceAround.java
index 0de832df9e..a510313236 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputWhitespaceAround.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/InputWhitespaceAround.java
@@ -17,7 +17,7 @@ public void enhancedFor ()
     {
         int[] i = new int[2];
         for ( int j: i ) {
-            System.out.println ( j );
+            System.identityHashCode ( j );
         }
     }
 }
