diff --git a/sklearn/kernel_ridge.py b/sklearn/kernel_ridge.py
index 5ced812c4e..352f70335a 100755
--- a/sklearn/kernel_ridge.py
+++ b/sklearn/kernel_ridge.py
@@ -15,7 +15,6 @@
 from .utils.validation import check_is_fitted
 from .preprocessing import LabelBinarizer
 from .externals import six
-from .preprocessing import StandardScaler
 
 
 class _BaseKernelRidge(six.with_metaclass(ABCMeta, BaseEstimator)):
@@ -146,9 +145,7 @@ def fit(self, X, y=None, sample_weight=None):
             raise ValueError('_BaseKernelRidge cannot be used as'
                              ' a estimator')
 
-        self.scaler_ = StandardScaler()
-        X_ = self.scaler_.fit_transform(X)
-        K = self._get_kernel(X_)
+        K = self._get_kernel(X)
         self.dual_coef_ = _solve_cholesky_kernel(K, y_, alpha,
                                                  sample_weight,
                                                  copy)
@@ -156,7 +153,7 @@ def fit(self, X, y=None, sample_weight=None):
         if ravel:
             self.dual_coef_ = self.dual_coef_.ravel()
 
-        self.X_fit_ = X_
+        self.X_fit_ = X
 
         return self
 
@@ -174,7 +171,7 @@ def predict(self, X):
             Returns predicted values.
         """
         check_is_fitted(self, ["X_fit_", "dual_coef_"])
-        K = self._get_kernel(self.scaler_.transform(X), self.X_fit_)
+        K = self._get_kernel(X, self.X_fit_)
         return np.dot(K, self.dual_coef_)
 
 
@@ -361,6 +358,16 @@ class KernelRidgeClassifier(ClassifierMixin, _BaseKernelRidge):
                           gamma=None, kernel='rbf',
                           kernel_params=None)
     """
+    def __init__(self, alpha=0.1, kernel="rbf", gamma=None, degree=3, coef0=1,
+                 kernel_params=None):
+        super(KernelRidgeClassifier,
+              self).__init__(alpha=alpha,
+                             kernel=kernel,
+                             gamma=gamma,
+                             degree=degree,
+                             coef0=coef0,
+                             kernel_params=kernel_params)
+
     def decision_function(self, X):
         """Predict confidence scores for samples.
 
diff --git a/sklearn/tests/test_kernel_ridge.py b/sklearn/tests/test_kernel_ridge.py
index a185d58a5c..21f8e162de 100755
--- a/sklearn/tests/test_kernel_ridge.py
+++ b/sklearn/tests/test_kernel_ridge.py
@@ -18,6 +18,7 @@
 from sklearn.kernel_ridge import KernelRidgeClassifier
 from sklearn.linear_model import Ridge
 from sklearn.kernel_ridge import KernelRidge
+from sklearn.preprocessing import label_binarize
 
 # toy sample
 X = [[-2, -1], [-1, -1], [-1, -2], [1, 1], [1, 2], [2, 1]]
@@ -129,3 +130,14 @@ def test_kernel_ridge_multi_output():
                         alpha=1).fit(X_reg, y_reg).predict(X_reg)
     pred3 = np.array([pred3, pred3]).T
     assert_array_almost_equal(pred2, pred3)
+
+
+def test_ridge_regression_classifier():
+    # This test asserts that KernelRidge and KernelRidgeClassifier
+    # have the same dual_coef_ when classification target are
+    # specified as regressions
+    krc = KernelRidgeClassifier(kernel='linear', alpha=1).fit(X, Y)
+    Y_krr = label_binarize(Y, classes=np.array([1, 2]),
+                           neg_label=-1, pos_label=1).ravel()
+    krr = KernelRidge(kernel='linear', alpha=1).fit(X, Y_krr)
+    assert_array_equal(krc.dual_coef_, krr.dual_coef_)
