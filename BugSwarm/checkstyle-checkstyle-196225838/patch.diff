diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
index f52d54849a..377bbef2eb 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/RightCurlyTest.java
@@ -121,19 +121,4 @@ public void testRightCurlyAloneSameAndLiteralDo() throws Exception {
         final Integer[] warnList = getLinesWithWarn(filePath);
         verify(checkConfig, filePath, expected, warnList);
     }
-
-    @Test
-    public void testRightCurlyAloneInLambda() throws Exception {
-        final String[] expected = {
-            "12:70: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_ALONE, "}", 70),
-            "15:46: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_ALONE, "}", 46),
-            "22:33: " + getCheckMessage(RightCurlyCheck.class, MSG_KEY_LINE_ALONE, "}", 33),
-        };
-
-        final Configuration checkConfig = getCheckConfig("RightCurly", "RightCurlyAlone");
-        final String filePath = getPath("InputRightCurlyAloneLambda.java");
-
-        final Integer[] warnList = {12, 15, 22};
-        verify(checkConfig, filePath, expected, warnList);
-    }
 }
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyAloneLambda.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyAloneLambda.java
deleted file mode 100755
index 821e60eb6e..0000000000
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/InputRightCurlyAloneLambda.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.puppycrawl.tools.checkstyle.checks.blocks;
-
-/*Test lambda*/
-public class InputRightCurlyAloneLambda {
-
-    static Runnable k1 = () -> {
-        String.valueOf("Test rightCurly 1!");
-    };
-
-    static Runnable k2 = () -> String.valueOf("Test rightCurly 2!");
-
-    static Runnable k3 = () -> {String.valueOf("Test rightCurly 3!");};   // violation
-
-    static Runnable k4 = () -> {
-        String.valueOf("Test rightCurly 4!");};                     // violation
-
-    static Runnable k5 = () ->
-    {
-        String.valueOf("Test rightCurly 5!");
-    };
-
-    static Runnable k6 = () -> {};       // violation
-
-    static Runnable k7 = () -> {
-    };
-
-    static Runnable k8 = () ->
-    {
-    };
-}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
index 2d80793cfe..8cc49a5a2d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java
@@ -42,8 +42,7 @@
  *  {@link TokenTypes#LITERAL_CATCH LITERAL_CATCH},
  *  {@link TokenTypes#LITERAL_FINALLY LITERAL_FINALLY},
  *  {@link TokenTypes#LITERAL_IF LITERAL_IF},
- *  {@link TokenTypes#LITERAL_ELSE LITERAL_ELSE},
- *  {@link TokenTypes#LAMBDA LAMBDA}.
+ *  {@link TokenTypes#LITERAL_ELSE LITERAL_ELSE}.
  * Other acceptable tokens are:
  *  {@link TokenTypes#CLASS_DEF CLASS_DEF},
  *  {@link TokenTypes#METHOD_DEF METHOD_DEF},
@@ -53,7 +52,6 @@
  *  {@link TokenTypes#LITERAL_DO LITERAL_DO}.
  *  {@link TokenTypes#STATIC_INIT STATIC_INIT}.
  *  {@link TokenTypes#INSTANCE_INIT INSTANCE_INIT}.
- *  {@link TokenTypes#LAMBDA LAMBDA}.
  * </p>
  * <p>
  * <b>shouldStartLine</b> - does the check need to check
@@ -145,7 +143,6 @@ public void setShouldStartLine(boolean flag) {
             TokenTypes.LITERAL_FINALLY,
             TokenTypes.LITERAL_IF,
             TokenTypes.LITERAL_ELSE,
-            TokenTypes.LAMBDA,
         };
     }
 
@@ -165,7 +162,6 @@ public void setShouldStartLine(boolean flag) {
             TokenTypes.LITERAL_DO,
             TokenTypes.STATIC_INIT,
             TokenTypes.INSTANCE_INIT,
-            TokenTypes.LAMBDA,
         };
     }
 
@@ -207,11 +203,14 @@ public void visitToken(DetailAST ast) {
     private static String validate(Details details, RightCurlyOption bracePolicy,
                                    boolean shouldStartLine, String targetSourceLine) {
         final DetailAST rcurly = details.rcurly;
+        final DetailAST lcurly = details.lcurly;
         final DetailAST nextToken = details.nextToken;
         final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;
         String violation = "";
 
-        if (shouldHaveBeLineBreakBefore(bracePolicy, details)) {
+        if (bracePolicy == RightCurlyOption.SAME
+                && !hasLineBreakBefore(rcurly)
+                && lcurly.getLineNo() != rcurly.getLineNo()) {
             violation = MSG_KEY_LINE_BREAK_BEFORE;
         }
         else if (shouldCheckLastRcurly) {
@@ -249,19 +248,14 @@ private static boolean shouldBeOnSameLine(RightCurlyOption bracePolicy, Details
      * @return true if a right curly should be alone on a line.
      */
     private static boolean shouldBeAloneOnLine(RightCurlyOption bracePolicy, Details details) {
-        final int tokenLambda = details.lcurly.getParent().getType();
         return bracePolicy == RightCurlyOption.ALONE
-                && tokenLambda != TokenTypes.LAMBDA
                 && !isAloneOnLine(details)
                 && !isEmptyBody(details.lcurly)
                 || bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE
                 && !isAloneOnLine(details)
                 && !isSingleLineBlock(details)
                 && !isAnonInnerClassInit(details.lcurly)
-                && !isEmptyBody(details.lcurly)
-                || bracePolicy == RightCurlyOption.ALONE
-                && tokenLambda == TokenTypes.LAMBDA
-                && !isAloneLambda(details);
+                && !isEmptyBody(details.lcurly);
     }
 
     /**
@@ -301,24 +295,6 @@ private static boolean isSingleLineBlock(Details details) {
             && rcurly.getLineNo() != nextToken.getLineNo();
     }
 
-    /**
-     * Checks if right curly is alone on line in token the lambda.
-     * @param details for validation.
-     * @return true, if right curly is alone on line.
-     */
-    private static boolean isAloneLambda(Details details) {
-        final DetailAST lcurly = details.lcurly;
-        final DetailAST rcurly = details.rcurly;
-        final int lcurlyNo = lcurly.getLineNo();
-        final int rcurlyNo = rcurly.getLineNo();
-        boolean result = false;
-        if (lcurlyNo != rcurlyNo) {
-            result = rcurly.getPreviousSibling() == null
-                    || rcurlyNo != rcurly.getPreviousSibling().getLineNo();
-        }
-        return result;
-    }
-
     /**
      * Checks whether lcurly is in anonymous inner class initialization.
      * @param lcurly left curly token.
@@ -401,16 +377,9 @@ private static Details getDetails(DetailAST ast) {
                     rcurly = lcurly.getLastChild();
                 }
                 break;
-            case TokenTypes.LAMBDA:
-                lcurly = ast.findFirstToken(TokenTypes.SLIST);
-                nextToken = getNextToken(ast);
-                if (lcurly != null) {
-                    rcurly = lcurly.getLastChild();
-                }
-                break;
             default:
                 // ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,
-                // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE only.
+                // TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, only.
                 // It has been done to improve coverage to 100%. I couldn't replace it with
                 // if-else-if block because code was ugly and didn't pass pmd check.
 
@@ -466,21 +435,6 @@ private static DetailAST getNextToken(DetailAST ast) {
         return CheckUtils.getFirstNode(next);
     }
 
-    /**
-     * Checks that before a right curly should be a linebreak.
-     * @param bracePolicy options for placing the right curly brace.
-     * @param details Details for validation
-     * @return true if before a right curly should be a linebreak.
-     */
-    private static boolean shouldHaveBeLineBreakBefore(RightCurlyOption bracePolicy,
-                                                       Details details) {
-        final DetailAST rcurly = details.rcurly;
-        final DetailAST lcurly = details.lcurly;
-        return bracePolicy == RightCurlyOption.SAME
-                && !hasLineBreakBefore(rcurly)
-                && lcurly.getLineNo() != rcurly.getLineNo();
-    }
-
     /**
      * Checks if right curly has line break before.
      * @param rightCurly right curly token.
diff --git a/src/main/resources/google_checks.xml b/src/main/resources/google_checks.xml
index c6dd5b00bf..79a5c5c55f 100755
--- a/src/main/resources/google_checks.xml
+++ b/src/main/resources/google_checks.xml
@@ -61,7 +61,7 @@
         <module name="RightCurly">
             <property name="id" value="RightCurlyAlone"/>
             <property name="option" value="alone"/>
-            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, LAMBDA"/>
+            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
         </module>
         <module name="WhitespaceAround">
             <property name="allowEmptyConstructors" value="true"/>
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
index 30eef8a107..1b43a382ac 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java
@@ -259,18 +259,6 @@ public void testAloneOrSingleLine() throws Exception {
         verify(checkConfig, getPath("InputRightCurlyAloneOrSingleline.java"), expected);
     }
 
-    @Test
-    public void testRightCurlyIsAloneInLambda() throws Exception {
-        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
-        checkConfig.addAttribute("tokens", "LAMBDA");
-        final String[] expected = {
-            "14:74: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 74),
-            "17:49: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 49),
-            "24:33: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 33),
-        };
-        verify(checkConfig, getPath("InputRightCurlyAloneInLambda.java"), expected);
-    }
-
     @Test
     public void testCatchWithoutFinally() throws Exception {
         final String[] expected = {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneInLambda.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneInLambda.java
deleted file mode 100755
index b5b8400c3a..0000000000
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/blocks/InputRightCurlyAloneInLambda.java
+++ /dev/null
@@ -1,32 +0,0 @@
-package com.puppycrawl.tools.checkstyle.checks.blocks;
-
-/*
-This is test class for token LAMBDA.
- */
-public class InputRightCurlyAloneInLambda {
-
-    static Runnable r1 = () -> {
-        String.valueOf("Test rightCurly one!");
-    };
-
-    static Runnable r2 = () -> String.valueOf("Test rightCurly two!");
-
-    static Runnable r3 = () -> {String.valueOf("Test rightCurly three!");};   //violation
-
-    static Runnable r4 = () -> {
-        String.valueOf("Test rightCurly four!");};    //violation
-
-    static Runnable r5 = () ->
-    {
-        String.valueOf("Test rightCurly five!");
-    };
-
-    static Runnable r6 = () -> {};    //violation
-
-    static Runnable r7 = () -> {
-    };
-
-    static Runnable r8 = () ->
-    {
-    };
-}
diff --git a/src/xdocs/config_blocks.xml b/src/xdocs/config_blocks.xml
index af6eb53214..2c2c152924 100755
--- a/src/xdocs/config_blocks.xml
+++ b/src/xdocs/config_blocks.xml
@@ -799,9 +799,7 @@ for(int i = 0; i &lt; 10; value.incrementValue()); // OK
             <a
              href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_INIT">STATIC_INIT</a>,
             <a
-             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INSTANCE_INIT">INSTANCE_INIT</a>,
-            <a
-             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">LAMBDA</a>.</td>
+             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INSTANCE_INIT">INSTANCE_INIT</a>.</td>
 
             <td><a
              href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_TRY">LITERAL_TRY</a>,
@@ -812,9 +810,7 @@ for(int i = 0; i &lt; 10; value.incrementValue()); // OK
             <a
              href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">LITERAL_IF</a>,
             <a
-             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">LITERAL_ELSE</a>,
-            <a
-             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">LAMBDA</a>.</td>
+             href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">LITERAL_ELSE</a>.</td>
           </tr>
         </table>
       </subsection>
