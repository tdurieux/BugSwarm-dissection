diff --git a/conf/html/conf.py b/conf/html/conf.py
index b83909cf85..4774a58cea 100755
--- a/conf/html/conf.py
+++ b/conf/html/conf.py
@@ -41,7 +41,7 @@
 
 # General information about the project.
 project = u'TERASOLUNA Server Framework for Java (5.x) Development Guideline'
-copyright = u'2013-2015, NTT DATA'
+copyright = u'2013-2016, NTT DATA'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
diff --git a/conf/html_for_githubpages/conf.py b/conf/html_for_githubpages/conf.py
index 42f7b419cd..31a4a0ad25 100755
--- a/conf/html_for_githubpages/conf.py
+++ b/conf/html_for_githubpages/conf.py
@@ -41,7 +41,7 @@
 
 # General information about the project.
 project = u'TERASOLUNA Server Framework for Java (5.x) Development Guideline'
-copyright = u'2013-2015, NTT DATA'
+copyright = u'2013-2016, NTT DATA'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
diff --git a/conf/latexpdfen/conf.py b/conf/latexpdfen/conf.py
index be78e98447..4679d240f5 100755
--- a/conf/latexpdfen/conf.py
+++ b/conf/latexpdfen/conf.py
@@ -41,7 +41,7 @@
 
 # General information about the project.
 project = u'TERASOLUNA Server Framework for Java (5.x) Development Guideline'
-copyright = u'2013-2015, NTT DATA'
+copyright = u'2013-2016, NTT DATA'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
diff --git a/conf/latexpdfja/conf.py b/conf/latexpdfja/conf.py
index 165fb03fcd..e4762e9545 100755
--- a/conf/latexpdfja/conf.py
+++ b/conf/latexpdfja/conf.py
@@ -41,7 +41,7 @@
 
 # General information about the project.
 project = u'TERASOLUNA Server Framework for Java (5.x) Development Guideline'
-copyright = u'2013-2015, NTT DATA'
+copyright = u'2013-2016, NTT DATA'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
diff --git a/source/ArchitectureInDetail/DataAccessJpa.rst b/source/ArchitectureInDetail/DataAccessJpa.rst
index 4b201297a9..50969e0c1c 100755
--- a/source/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source/ArchitectureInDetail/DataAccessJpa.rst
@@ -1810,11 +1810,11 @@ Entityの検索方法について、目的別に説明する。
 
     @RequestMapping("list")
     public String list(@RequestParam("targetDate") Date targetDate,
-                       @PageableDefaults(
-                           pageNumber = 0,
+                       @PageableDefault(
+                           page = 0,
                            value = 5,
                            sort = { "createdDate" },
-                           sortDir = Direction.DESC)
+                           direction = Direction.DESC)
                            Pageable pageable, // (2)
                        Model model) {
         Page<Order> accountPage = accountService.getAccounts(targetDate, pageable);
@@ -1979,7 +1979,7 @@ Entityの動的条件による検索処理の実装
                 joinConditions.add("o.orderItems oi");
                 joinConditions.add("oi.item i");
                 andConditions.add("i.name LIKE :itemName ESCAPE '~'");
-                bindParameters.put("itemName", SqlUtils
+                bindParameters.put("itemName", QueryEscapeUtils
                         .toLikeCondition(criteria.getItemName()));
             }
 
@@ -2331,7 +2331,7 @@ Entityの動的条件による検索処理の実装
                 joinConditions.add("o.orderItems oi");
                 joinConditions.add("oi.item i");
                 andConditions.add("i.name LIKE :itemName ESCAPE '~'");
-                bindParameters.put("itemName", SqlUtils.toLikeCondition(criteria
+                bindParameters.put("itemName", QueryEscapeUtils.toLikeCondition(criteria
                         .getItemName()));
             }
 
@@ -4235,7 +4235,7 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
     * - | (2)
       - | ``@Where`` アノテーションで指定した条件が追加されている。
 
-- 標準的なキーワード``true``、``false``、``unknown``などを登録するためのDialectを拡張する
+- 標準的なキーワード ``true`` 、``false`` 、``unknown`` などを登録するためのDialectを拡張する
 
  .. code-block:: java
 
@@ -4258,10 +4258,10 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
     * - Sr. No.
       - Description
     * - | (1)
-      - | Hibernateは標準的なSQLキーワード``true``、``false``、``unknown``などを登録することができません。これらは、データベース特定のDialectを拡張することによって登録することができます。
+      - | Hibernateは標準的なSQLキーワード ``true`` 、``false`` 、``unknown`` などを登録することができません。これらは、データベース特定のDialectを拡張することによって登録することができます。
         | 例、postgresqlデータベースのデーフォルトDialectは``org.hibernate.dialect.PostgreSQL9Dialect``となります。
     * - | (2)
-      - | 標準的なSQLキーワード``true``、``false``、``unknown``などを登録する。
+      - | 標準的なSQLキーワード ``true`` 、``false`` 、``unknown`` などを登録する。
 
 - 拡張したDialectを設定する
 
diff --git a/source/ArchitectureInDetail/FileDownload.rst b/source/ArchitectureInDetail/FileDownload.rst
index ed62b49657..540c604c1c 100755
--- a/source/ArchitectureInDetail/FileDownload.rst
+++ b/source/ArchitectureInDetail/FileDownload.rst
@@ -38,7 +38,7 @@ Overview
 | クラスは、modelの情報を用いてPDFファイルをレンダリングするときに、サブクラスとして利用するクラスである。
 |
 | **Excelファイルの場合**
-| Springから提供されている\ ``org.springframework.web.servlet.view.document.AbstractExcelView``\
+| Springから提供されている\ ``org.springframework.web.servlet.view.document.AbstractXlsxView``\
 | クラスは、modelの情報を用いてExcelファイルをレンダリングするときに、サブクラスとして利用するクラスである。
 |
 | Spring では上記以外にも、いろいろなViewの実装を提供している。
@@ -91,11 +91,11 @@ PDFファイルのダウンロード
      - | 本例では、\ ``@Component``\ アノテーションを使用して、component-scanの対象としている。
        | 後述する、\ ``org.springframework.web.servlet.view.BeanNameViewResolver``\ の対象とすることができる。
    * - | (2)
-     - | AbstractPdfViewを継承する。
+     - | \ ``AbstractPdfView``\ を継承する。
    * - | (3)
-     - | buildPdfDocumentメソッドを実装する。
+     - | \ ``buildPdfDocument``\ メソッドを実装する。
 
-| AbstractPdfViewは、PDFのレンダリングに、\ `iText <http://itextpdf.com/>`_\ を利用している。
+| \ ``AbstractPdfView``\ は、PDFのレンダリングに、\ `iText <http://itextpdf.com/>`_\ を利用している。
 | そのため、Mavenのpom.xmlに itextの定義を追加する必要がある。
 
 .. code-block:: xml
@@ -150,7 +150,7 @@ PDFファイルのダウンロード
 ViewResolverの定義
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 \ ``org.springframework.web.servlet.view.BeanNameViewResolver``\ とは、
-Springのコンテキストで管理されたbean名を用いて実行する\ ``View``\ を選択するクラスである。
+Springのコンテキストで管理されたbean名を用いて実行するViewを選択するクラスである。
 
 \ ``BeanNameViewResolver``\ を使用する際は、通常使用する、
 
@@ -162,7 +162,7 @@ Springのコンテキストで管理されたbean名を用いて実行する\ ``
 .. note::
 
     Spring Frameworkはさまざまな\ ``ViewResolver``\ を提供しており、複数の\ ``ViewResolver``\をチェーンすることができる。
-    そのため、特定の状況では、意図しない\ ``View``\ が選択されてしまうことがある。
+    そのため、特定の状況では、意図しないViewが選択されてしまうことがある。
 
     この動作は、\ ``ViewResolver``\に適切な優先順位を設定する事で防ぐことができる。
     優先順位の設定方法は、\ ``ViewResolver``\ の定義方法によって異なる。
@@ -224,7 +224,7 @@ Springのコンテキストで管理されたbean名を用いて実行する\ ``
 コントローラでのViewの指定
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-| BeanNameViewResolverにより、コントローラで"samplePdfView"を返却することで、
+| \ ``BeanNameViewResolver``\ により、コントローラで"samplePdfView"を返却することで、
 | Springのコンテキストで管理されたBeanIDにより、"samplePdfView"であるViewが使用される。
 
 **Javaソースコード**
@@ -246,7 +246,7 @@ Springのコンテキストで管理されたbean名を用いて実行する\ ``
      - 説明
    * - | (1)
      - | "samplePdfView" をメソッドの戻り値として返却することで、
-       | Springのコンテキストで管理された、SamplePdfViewクラスが実行される。
+       | Springのコンテキストで管理された、\ ``SamplePdfView``\ クラスが実行される。
 
 | 上記の手順を実行した後、以下に示すようなPDFを開くことができる。
 
@@ -262,26 +262,26 @@ Springのコンテキストで管理されたbean名を用いて実行する\ ``
 Excelファイルのダウンロード
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 | EXCELファイルのレンダリングには、Springから提供されている、
-| \ ``org.springframework.web.servlet.view.document.AbstractExcelView``\ を継承したクラスを作成する必要がある。
+| \ ``org.springframework.web.servlet.view.document.AbstractXlsxView``\ を継承したクラスを作成する必要がある。
 | コントローラでEXCELファイルをダウンロードを実装するための手順は、以下で説明する。
 
 カスタムViewの実装
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-**AbstractExcelViewを継承したクラスの実装例**
+**AbstractXlsxViewを継承したクラスの実装例**
 
 .. code-block:: java
 
         @Component  // (1)
-        public class SampleExcelView extends AbstractExcelView {  // (2)
+        public class SampleExcelView extends AbstractXlsxView {  // (2)
 
             @Override
             protected void buildExcelDocument(Map<String, Object> model,
-                    HSSFWorkbook workbook, HttpServletRequest request,
+                    Workbook workbook, HttpServletRequest request,
                     HttpServletResponse response) throws Exception {  // (3)
-                HSSFSheet sheet;
-                HSSFCell cell;
-
+                Sheet sheet;
+                Cell cell;
+ 
                 sheet = workbook.createSheet("Spring");
                 sheet.setDefaultColumnWidth(12);
 
@@ -305,11 +305,11 @@ Excelファイルのダウンロード
      - | 本例では、\ ``@Component``\ アノテーションを使用して、component-scanの対象としている。
        | 前述した、\ ``org.springframework.web.servlet.view.BeanNameViewResolver``\ の対象とすることができる。
    * - | (2)
-     - | AbstractExcelViewを継承する。
+     - | \ ``AbstractXlsxView``\ を継承する。
    * - | (3)
-     - | buildExcelDocumentメソッドを実装する。
+     - | \ ``buildExcelDocument``\ メソッドを実装する。
 
-| AbstractExcelViewは、EXCELのレンダリングに、\ `Apache POI <http://poi.apache.org/>`_\ を利用している。
+| \ ``AbstractXlsxView``\ は、EXCELのレンダリングに、\ `Apache POI <http://poi.apache.org/>`_\ を利用している。
 | そのため、Mavenのpom.xmlに POIの定義を追加する必要がある。
 
 .. code-block:: xml
@@ -318,16 +318,18 @@ Excelファイルのダウンロード
       <!-- omitted -->
       <dependency>
           <groupId>org.apache.poi</groupId>
-          <artifactId>poi</artifactId>
-          <version>${org.apache.poi.poi.version}</version>
+          <artifactId>poi-ooxml</artifactId>
       </dependency>
   </dependencies>
-  
-  <properties>
-      <!-- omitted -->
-      <org.apache.poi.poi.version>3.9</org.apache.poi.poi.version>
-  </properties>
+
         
+\
+    .. note::
+        poi-ooxmlのバージョンはSpring IO Platformにて定義されているものを利用するため、設定例では <version> を省略している。
+
+        また、\ ``AbstractExcelView``\ はSpring Framework 4.2から@Deprecatedとなった。そのため、xlsファイルを使用したい場合も同様に\ ``AbstractXlsxView``\ の使用を推奨する。
+        詳細は、\ `AbstractExcelViewのJavaDoc <https://docs.spring.io/spring/docs/4.2.4.RELEASE/javadoc-api/org/springframework/web/servlet/view/document/AbstractExcelView.html>`_\ を参照されたい。
+          
 
 ViewResolverの定義
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -337,7 +339,7 @@ ViewResolverの定義
 コントローラでのViewの指定
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-| BeanNameViewResolverにより、コントローラで"sampleExcelView"を返却することで、
+| \ ``BeanNameViewResolver``\ により、コントローラで"sampleExcelView"を返却することで、
 | Springのコンテキストで管理されたBeanIDにより、”sampleExcelView”であるViewが使用される。
 
 **Javaソース**
@@ -359,7 +361,7 @@ ViewResolverの定義
      - 説明
    * - | (1)
      - | "sampleExcelView" をメソッドの戻り値として返却することで、
-       | Springのコンテキストで管理された、SampleExcelViewクラスが実行される。
+       | Springのコンテキストで管理された、\ ``SampleExcelView``\ クラスが実行される。
 
 | 上記の手順を実行した後、以下に示すようなEXCELを開くことができる。
 
@@ -374,7 +376,7 @@ ViewResolverの定義
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 | 前述した、PDFやEXCELファイル以外のファイルのダウンロードを行う場合、
 | 共通ライブラリが提供している、\ ``org.terasoluna.gfw.web.download.AbstractFileDownloadView``\ を継承したクラスを実装すればよい。
-| 他の形式にファイルレンダリングするために、AbstractFileDownloadViewでは、以下を実装する必要がある。
+| 他の形式にファイルレンダリングするために、\ ``AbstractFileDownloadView``\では、以下を実装する必要がある。
 
 1. レスポンスボディへの書き込むためのInputStreamを取得する。
 2. HTTPヘッダに情報を設定する。
@@ -420,12 +422,12 @@ ViewResolverの定義
      - | 本例では、\ ``@Component``\ アノテーションを使用して、component-scanの対象としている。
        | 前述した、\ ``org.springframework.web.servlet.view.BeanNameViewResolver``\ の対象とすることができる。
    * - | (2)
-     - | AbstractFileDownloadViewを継承する。
+     - | \ ``AbstractFileDownloadView``\ を継承する。
    * - | (3)
-     - | getInputStreamメソッドを実装する。
-       | ダウンロード対象の、InputStreameを返却すること。
+     - | \ ``getInputStream``\ メソッドを実装する。
+       | ダウンロード対象の、\ ``InputStream``\ を返却すること。
    * - | (4)
-     - | addResponseHeaderメソッドを実装する。
+     - | \ ``addResponseHeaderメソッド``\ を実装する。
        | ダウンロードするファイルに合わせた、 Content-Dispositionや、ContentTypeを設定する。
 
 ViewResolverの定義
@@ -435,7 +437,7 @@ ViewResolverの定義
 
 コントローラでのViewの指定
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| BeanNameViewResolverにより、コントローラで"textFileDownloadView"を返却することで、
+| \ ``BeanNameViewResolver``\ により、コントローラで"textFileDownloadView"を返却することで、
 | Springのコンテキストで管理されたBeanIDにより、”textFileDownloadView”であるViewが使用される。
 
 **Javaソース**
@@ -456,7 +458,7 @@ ViewResolverの定義
      - 説明
    * - | (1)
      - | "textFileDownloadView" をメソッドの戻り値として返却することで、
-       | Springのコンテキストで管理された、TextFileDownloadViewクラスが実行される。
+       | Springのコンテキストで管理された、\ ``TextFileDownloadView``\ クラスが実行される。
 
 \
 
diff --git a/source/ArchitectureInDetail/Internationalization.rst b/source/ArchitectureInDetail/Internationalization.rst
index dc7be59810..f0065d65f5 100755
--- a/source/ArchitectureInDetail/Internationalization.rst
+++ b/source/ArchitectureInDetail/Internationalization.rst
@@ -353,7 +353,11 @@ Localeをサーバに保存する場合は、\ ``SessionLocaleResolver``\ を使
         | beanタグのid属性は"localeResolver"と設定すること。
         | この設定により、 ``LocaleChangeInterceptor`` 内の処理で\ ``SessionLocaleResolver``\ が使用される。
     * - | (2)
-      - | リクエストパラメータでLocaleを指定しない場合、\ ``defaultLocale``\ プロパティに指定されたLocaleが有効になる。この場合、\ ``HttpServletRequest#getLocale``\ での取得値が有効になる。
+      - | \ ``defaultLocale``\ プロパティにLocaleを指定する。セッションからLocaleが取得できない場合、\ ``value``\ の設定値が有効になる。
+
+        .. note::
+
+         \ ``defaultLocale``\ プロパティを省略した場合、ユーザ端末（ブラウザ）に設定されたLocaleが有効になる。
 
 |
 
@@ -383,7 +387,12 @@ Localeをクライアントに保存する場合は、\ ``CookieLocaleResolver``
         | beanタグのid属性は"localeResolver"と設定すること。
         | この設定により、 ``LocaleChangeInterceptor`` 内の処理で\ ``CookieLocaleResolver``\ が使用される。
     * - | (2)
-      - | Localeを指定しない場合、\ ``defaultLocale``\ プロパティに指定されたLocaleが有効になる。この場合、\ ``HttpServletRequest#getLocale``\ での取得値が有効になる。
+      - | \ ``defaultLocale``\ プロパティにLocaleを指定する。CookieからLocaleが取得できない場合、\ ``value``\ の設定値が有効になる。
+
+        .. note::
+
+         \ ``defaultLocale``\ プロパティを省略した場合、ユーザ端末（ブラウザ）に設定されたLocaleが有効になる。
+
     * - | (3)
       - | \ ``cookieName``\ プロパティに指定した値が、cookie名となる。指定しない場合、\ ``org.springframework.web.servlet.i18n.CookieLocaleResolver.LOCALE``\ となる。**Spring Frameworkを使用していることがわかるため、変更することを推奨する。**
 
diff --git a/source/ArchitectureInDetail/Logging.rst b/source/ArchitectureInDetail/Logging.rst
index fa5b9f5d7b..7a9bdb365c 100755
--- a/source/ArchitectureInDetail/Logging.rst
+++ b/source/ArchitectureInDetail/Logging.rst
@@ -815,7 +815,7 @@ logback.xmlの\ ``<pattern>``\ に\ ``%X{X-Track}``\ および、\ ``%X{USER}``\
 
          .. code-block:: xml
 
-             <sec:http auto-config="true" use-expressions="true">
+             <sec:http auto-config="true">
                  <!-- omitted -->
                  <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/> <!-- (1) -->
                  <!-- omitted -->
diff --git a/source/ArchitectureInDetail/REST.rst b/source/ArchitectureInDetail/REST.rst
index f31a12376e..da573e8e0d 100755
--- a/source/ArchitectureInDetail/REST.rst
+++ b/source/ArchitectureInDetail/REST.rst
@@ -5316,20 +5316,11 @@ RESTful Web Service向けのリクエストに対して、CSRF対策の処理が
     <sec:http
         pattern="/api/v1/**"
         auto-config="true"
-        use-expressions="true"
         create-session="stateless">
-        <sec:headers />
+        <sec:csrf disabled="true"/>
     </sec:http>
 
-    <sec:http auto-config="true" use-expressions="true">
-        <sec:headers>
-            <sec:cache-control />
-            <sec:content-type-options />
-            <sec:hsts />
-            <sec:frame-options />
-            <sec:xss-protection />
-        </sec:headers>
-        <sec:csrf />
+    <sec:http auto-config="true">
         <sec:access-denied-handler ref="accessDeniedHandler"/>
         <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
         <sec:session-management />
@@ -5350,7 +5341,7 @@ RESTful Web Service向けのリクエストに対して、CSRF対策の処理が
        | 上記例では、\ ``/api/v1/``\で始まるリクエストパスをREST API用のリクエストパスとして扱う。
        | また、\ ``create-session``\属性を\ ``stateless``\とする事で、Spring Securityの処理でセッションが使用されなくなる。
        |
-       | CSRF対策を無効化するために、\ ``<sec:csrf>``\ 要素は指定していない。
+       | CSRF対策を無効化するために、\ ``<sec:csrf>``\ 要素に \ ``disabled="true"``\ を指定している。
 
 |
 
diff --git a/source/ArchitectureInDetail/SOAP.rst b/source/ArchitectureInDetail/SOAP.rst
new file mode 100755
index 0000000000..117c3f1be5
--- /dev/null
+++ b/source/ArchitectureInDetail/SOAP.rst
@@ -0,0 +1,2635 @@
+SOAP Web Service（サーバ/クライアント）
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 3
+    :local:
+
+.. _SOAPOverview:
+
+Overview
+--------------------------------------------------------------------------------
+本節では、SOAP Web Serviceの基本的な概念とJAX-WSを使用したSOAPサーバ、クライアント双方の開発について説明する。
+
+実装に対する具体的な説明については、
+
+* | 「:ref:`SOAPHowToUse`」
+  | JAX-WSを使用したSOAP Web Serviceのアプリケーション構成やAPIの実装方法について説明している。
+
+を参照されたい。
+
+|
+
+.. _SOAPOverviewAboutSOAPWebService:
+
+SOAPとは
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| SOAPとは、XMLで記述されたメッセージをコンピュータ間で送受信を行うためのプロトコルである。
+| もともとは「\ **S**\imple \ **O**\bject \ **A**\ccess \ **P**\rotocol」の略であった。
+| しかし現在では、「SOAP」はなにかの略ではなく、固有名詞であるとW3Cは宣言している。
+| W3CによるSOAP1.1、SOAP1.2の仕様はW3Cにより定義されている。
+| 詳細は、\ `W3C -SOAP Specifications- <http://www.w3.org/TR/soap/>`_\を参照されたい。
+
+| 本ガイドラインでは、以下の図のような構成でのSOAP Web Serviceを行う場合を想定して説明する。
+| ただし、下記の構成以外でのSOAP Web Serviceの場合にも応用可能である。（例：クライアントがバッチの場合など）
+
+.. figure:: images_SOAP/SOAPServerAndClient.png
+    :alt: Server and Client for SOAP
+    :width: 100%
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、別のSOAPサーバへの通信を行うWebアプリケーションを想定している。
+        | クライアントと呼んでいるがWebアプリケーション想定なので注意が必要である。
+    * - | (2)
+      - | SOAPサーバは、Webサービスを公開し、クライアントからのSOAP Web ServiceによるXMLを受信して処理を行う。データベースなどにアクセスを行い、業務処理を行うことを想定している。
+    * - | (3)
+      - | SOAP Web ServiceではXMLを使用して情報のやり取りを行う。
+        | 今回の想定では、SOAPサーバ、クライアントどちらもJavaである想定としているが、他のプラットフォームでも問題なく通信可能である。
+
+
+|
+
+.. _SOAPOverviewJaxWS:
+
+JAX-WSとは
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| JAX-WSとは、「\ **J**\ava \ **A**\PI for \ **X**\ML-Based \ **W**\eb \ **S**\ervices」の略であり、SOAPなどを使ったWebサービスを扱うためのJava標準APIである。
+| JAX-WSを用いることで、JavaのオブジェクトをSOAPの仕様に沿ったXMLに変換して送信することが可能である。
+| そのため、SOAP Web Serviceとしては、XMLでやり取りが行われるものの、利用者は、XMLの構造をあまり意識せずデータを扱うことができる。
+| Oracle WebLogic ServerやJBoss Enterprise Application Platformなど主要なJava EEサーバはJAX-WS実装をサーバ側で有しており、特別なライブラリを追加せずにその機能を使用して簡単にWebサービスを公開することができる。
+| ただし、Tomcatは、JAX-WSを実装してしないため、使用する際には別途JAX-WS実装ライブラリを追加する必要がある。
+| 詳細は、「\ :ref:`SOAPAppendixTomcatWebService`\」を参照されたい。
+
+|
+
+.. _SOAPOverviewJaxWSSpring:
+
+Spring FrameworkのJAX-WS連携機能について
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| Spring FrameworkはJAX-WSの連携機能をサポートしており、その機能を使用することでSOAPサーバ、クライアントともに簡単に実装することができる。
+| 以下はその機能を用いた、推奨アクセスフローの概要である。ここではSOAPのクライアント(図左)であるWebアプリケーションがSOAPサーバ(図右)にアクセスすることを前提としている。
+
+.. figure:: images_SOAP/SOAPProcessFlow.png
+    :alt: Server and Client Projects for SOAP
+    :width: 80%
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | [クライアント] ControllerがServiceを呼び出す。
+        | 通常の呼び出しと変更点は特にない。
+    * - | (2)
+      - | [クライアント] ServiceがSOAPサーバ提供側が用意したWebServiceインターフェースを呼び出す。
+        | この図では、ServiceがWebServiceインターフェースを呼び出しているが、要件に応じてControllerから直接WebServiceインターフェースを呼び出してもよい。
+    * - | (3)
+      - | [クライアント] WebServiceインターフェースが呼び出されると実体としてProxy Objectが呼び出される。
+        | このProxy Objectは\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\ が生成したWebServiceインターフェースの実装クラスである。
+        | この実装クラスがServiceにインジェクションされ、ServiceはWebServiceインターフェースのメソッドを呼び出すだけで、SOAP Web Serviceを利用した処理を行うことができる。
+    * - | (4)
+      - | ProxyObjectが、SOAPサーバのWebServiceインターフェースを呼び出す。
+        | SOAPサーバとクライアントでの値のやり取りはDomain Objectを使用して行う。
+      
+        .. Note::
+
+            厳密には、SOAPサーバとクライアントはXMLを使用して通信を行っている。
+            送信時、および受信時にはJAXBを使用して、Domain ObjectとXMLの相互変換が行われているが、SOAP Web Service作成者はXMLをあまり意識せず、開発を行うことができるようになっている。
+        
+    * - | (5)
+      - | [サーバ] WebServiceインターフェースが呼び出されると実体としてWebService実装クラスが呼び出される。
+        | SOAPサーバでは、WebServiceインターフェースの実装クラスとしてWebService実装クラスを用意する。
+        | このWebService実装クラスは、\ ``org.springframework.web.context.support.SpringBeanAutowiringSupport``\を継承することで、SpringのDIコンテナ上のBeanを\ ``@Inject``\などでインジェクションすることができる。
+    * - | (6)
+      - | [サーバ] WebService実装クラスでは、業務処理を行うServiceを呼び出す。
+    * - | (7)
+      - | [サーバ] Serviceでは、Repositoryなどを使用して業務処理を実行する。
+        | 通常の呼び出しと変更点は特にない。
+
+.. note::
+
+    Springでは、ドキュメントドリブンでWebサービスを開発するSpring Web Servicesをが提供されているが、ここでは扱わない。
+    詳細は\ `Spring Web Services <http://projects.spring.io/spring-ws/>`_\ を参照されたい。
+
+.. note::
+
+    SpringでのJAX-WS実装の詳細は、\ `Spring Framework Reference Documentation -Remoting and web services using Spring(Web services)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/remoting.html#remoting-web-services>`_\ を参照されたい。
+
+|
+
+.. _SOAPOverviewAboutRESTfulWebServiceDevelopment:
+
+JAX-WSを利用したWebサービスの開発について
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| TERASOLUNA Server Framework for Java (5.x)では、APサーバのJAX-WS実装とSpringの機能を利用してWebサービスの開発を行うことを推奨する。
+
+
+.. Note:: **APサーバへのデプロイについて**
+
+    SOAPサーバ、クライアントどちらにおいても、通常のWebアプリケーション同様に、ブランクプロジェクト内のwebプロジェクトから作成したWARファイルをAPサーバにデプロイすることで、SOAP Web Serviceを実現することができる。
+
+
+|
+
+JAX-WSを利用したWebサービスのモジュールの構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+JAX-WSを利用したWebサービスを作成する場合、既存のブランクプロジェクトとは別に以下2つのプロジェクトを追加することを推奨する。
+
+* modelプロジェクト
+* webserviceプロジェクト
+
+| modelプロジェクトは、Webサービスの引数や返り値に使用するDomain Objectを格納する。
+| webserviceプロジェクトは、Webサービスを呼び出すインターフェースを格納する。
+| この2つはSOAPサーバからクライアントに配布する必要があるクラスのみ格納するプロジェクトである。
+| 配布する範囲を明確に識別するため、別プロジェクトにすることを推奨している。
+
+
+本ガイドラインでは、マルチプロジェクトで以下のような構成を用いる。
+
+ここでもクライアントはWebアプリケーションであることを前提とするが、デスクトップアプリケーションやコマンドラインインターフェースから呼び出す場合も基本的な考え方は同じである。
+
+.. figure:: images_SOAP/SOAPClientAndServerProjects.png
+    :alt: Server and Client Projects for SOAP
+    :width: 80%
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントを作成する場合、従来のマルチプロジェクトにSOAPサーバから提供されるmodelプロジェクトとwebserviceプロジェクトを追加する。
+        | ここではサーバとクライアントをともに開発することを前提としている。
+        | これらのプロジェクトの詳細については「\ :ref:`SOAPHowToUseWebApplicationConstruction`\ 」で説明する。
+        | 追加方法については「\ :ref:`SOAPAppendixAddProject`\ 」を参照されたい。
+        |
+        | サーバとクライアントの開発が別々で、modelプロジェクトとwebserviceプロジェクトが提供されない場合、もしくはJava以外でSOAPサーバが作成されている場合には、modelプロジェクト内のDomain Objectとwebserviceプロジェクト内のWebサービスインターフェースを自分で作成する必要がある。
+        | wsimportを使用することで、WSDLから簡単にDomain ObjectとWebサービスインターフェースを作成することができる。
+        | 詳細については「\ :ref:`SOAPAppendixWsimport`\ 」を参照されたい。
+    * - | (2)
+      - | SOAPサーバを作成する場合、従来のマルチプロジェクトに追加してmodelプロジェクトとwebserviceプロジェクトを追加する。
+        | クライアントにこれら2つのプロジェクトを公開する。
+
+|
+
+| 結果として、プロジェクトは次のような構成となる。
+| 以下は、SOAPサーバのプロジェクト構成である。
+
+.. figure:: images_SOAP/SOAPServerPackageExplorer.png
+    :alt: Package explorer for SOAP server projects
+    :width: 50%
+
+以下は、クライアントのプロジェクト構成である。
+
+.. figure:: images_SOAP/SOAPClientPackageExplorer.png
+    :alt: Package explorer for SOAP client projects
+    :width: 42%
+
+
+|
+
+Webサービスとして公開されるURL
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+
+
+| SOAP Web Serviceを作成するとWSDL（\ **W**\ eb \ **S**\ ervices \ **D**\ escription \ **L**\ anguage）というWebサービスのインターフェース定義が公開され、クライアントはこの定義をもとにSOAP Web Serviceを実行する。
+| WSDLの詳細は、`W3C -Web Services Description Language (WSDL)- <http://www.w3.org/TR/wsdl>`_\を参照されたい。
+
+
+| WSDL内には、Webサービス実行時のアクセスURLやメソッド名、引数、戻り値などが定義される。
+| 本ガイドラインの通りにSOAP Web Serviceを作成すると、以下のURLでWSDLが公開される。
+| クライアントではこのURLを指定する必要がある。
+
+* `http://AAA.BBB.CCC.DDD:XXXX/コンテキストルート/Webサービス名?wsdl`
+  
+WSDL内で定義されるエンドポイントアドレスは以下のURLである。
+
+* `http://AAA.BBB.CCC.DDD:XXXX/コンテキストルート/Webサービス名`
+
+
+.. Note::
+
+    本ガイドラインでは、マルチプロジェクト構成のwebプロジェクトをWARファイル化して、APサーバにデプロイする前提である。その場合、コンテキストルートは基本的に、[server projectName]-webとなる。ただし、APサーバによって異なるので注意すること。
+
+
+.. Note::
+
+    本ガイドラインでは、SOAPサーバ、クライアントともにWebアプリケーションとして公開する前提であるため、クライアントではWSDLのURLを指定している。URLではなく、WSDLをファイルとして用意してクライアントを作成することも可能である。
+    詳細は、\ :ref:`SOAPHowToUseWebServiceClient`\ を参照されたい。
+
+
+.. warning::
+
+    本ガイドラインでは、APサーバ（Tomcatの場合は使用するライブラリ）でコンテキストルートのマッピングを切り替え以下のようなURLでアクセスするように設定している。
+     
+    * `http://AAA.BBB.CCC.DDD:XXXX/[server projectName]-web/ws/TodoWebService?wsdl`
+       
+    このコンテキストルート直下ではないURLにWebサービスをマッピングさせる方法は、APサーバごとに異なる。
+    詳細は以下を参照してほしい。
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.50\linewidth}|p{0.40\linewidth}|
+     .. list-table::
+         :header-rows: 1
+         :widths: 10 50 40
+
+         * - 項番
+           - APサーバ名
+           - 説明
+         * - | (1)
+           - | Apache Tomcat
+           - | \ :ref:`SOAPAppendixTomcatWebService`\
+         * - | (2)
+           - | Oracle WebLogic Server
+           - | TBD
+         * - | (3)
+           - | JBoss Enterprise Application Platform
+           - | TBD
+
+|
+
+.. _SOAPHowToUse:
+
+How to use
+--------------------------------------------------------------------------------
+本節では、SOAP Web Serviceの具体的な作成方法について説明する。
+
+|
+
+.. _SOAPHowToUseWebApplicationConstruction:
+
+SOAPサーバの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+
+プロジェクトの構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+**各プロジェクトの依存関係**
+
+| 「\ :ref:`SOAPOverviewAboutRESTfulWebServiceDevelopment`\」で述べたとおり、modelプロジェクトとwebserviceプロジェクトを追加する。
+| 追加方法は「\ :ref:`SOAPAppendixAddProject`\ 」を参照されたい。
+| またそれに伴い、既存のプロジェクトに依存関係を追加することが必要となる。
+
+.. figure:: images_SOAP/SOAPServerProjects.png
+    :alt: Server Projects for SOAP
+    :width: 80%
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 30 60
+
+    * - 項番
+      - プロジェクト名
+      - 説明
+    * - | (1)
+      - | webプロジェクト
+      - | Webサービス実装クラスを配置する。
+    * - | (2)
+      - | domainプロジェクト
+      - | WebServiceの実装クラスから呼び出されるServiceを配置する。
+        | その他、Repositoryなどは従来と同じである。
+    * - | (3)
+      - | webserviceプロジェクト
+      - | 公開するWebServiceのインターフェースをここに配置する。
+        | クライアントはこのインターフェースを使用してWebサービスを実行する。
+    * - | (4)
+      - | modelプロジェクト
+      - | ドメイン層に属するクラスのうち、SOAP Web Serviceで使用するクラスのみをここに配置する。
+        | クライアントからの入力値や返却結果はこのプロジェクト内のクラスを使用する。
+
+|
+
+アプリケーションの設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+**Webサービスを公開する際の初期設定**
+
+| APサーバとしてTomcatを使用する場合は、「\ :ref:`SOAPAppendixTomcatWebService`\」を実施する必要がある。
+| その他、APサーバによってWebサービス公開の方法は違うので、詳細は各APサーバのマニュアルを参照されたい。
+
+.. note::
+    以下、参考資料として、APサーバのマニュアルを記述しておく。
+    必ず、使用するバージョンとあっているか確認してから参照すること。
+     
+    Oracle WebLogic Server 12.2.1: \ `Oracle(R) Fusion Middleware Understanding WebLogic Web Services for Oracle WebLogic Server  Features and Standards Supported by WebLogic Web Services <https://docs.oracle.com/middleware/1221/wls/WSOVR/weblogic-web-service-stand.htm#WSOVR137>`_\
+     
+    JBoss Enterprise Application Platform 6.4: \ `DEVELOPMENT GUIDE JAX-WS WEB SERVICES <https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/6.4/html/Development_Guide/chap-JAX-WS_Web_Services.html>`_\
+
+|
+
+**パッケージのコンポーネントスキャン設定**
+
+Webサービスで使用するコンポーネントをスキャンするため、\ ``[server projectName]-ws.xml``\ を作成し、コンポーネントスキャンの定義を行い、Webサービスにインジェクションできるようにする。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/[server projectName]-ws.xml*
+
+.. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xmlns:context="http://www.springframework.org/schema/context"
+        xsi:schemaLocation="
+             http://www.springframework.org/schema/beans
+             http://www.springframework.org/schema/beans/spring-beans.xsd
+             http://www.springframework.org/schema/context
+             http://www.springframework.org/schema/context/spring-context.xsd">
+        <!-- (1) -->
+        <context:component-scan base-package="com.example.ws" />
+    </beans>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Webサービスで使用するコンポーネントが格納されているパッケージを指定する。
+
+|
+
+*[server projectName]-web/src/main/webapp/WEB-INF/web.xml*
+
+.. code-block:: xml
+    :emphasize-lines: 8
+
+    <context-param>
+        <param-name>contextConfigLocation</param-name>
+        <!-- Root ApplicationContext -->
+        <!-- (1) -->
+        <param-value>
+            classpath*:META-INF/spring/applicationContext.xml
+            classpath*:META-INF/spring/spring-security.xml
+            classpath*:META-INF/spring/[server projectName]-ws.xml
+        </param-value>
+    </context-param>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``[server projectName]-ws.xml``\ をルート\ ``ApplicationContext``\ 生成時の読み込み対象に加える。
+ 
+|
+
+**入力チェックを行うための定義**
+ 
+| 入力チェックにはメソッドバリデーションを使用するため、以下の定義を追加する。
+| 入力チェックの詳細は \ :ref:`SOAPHowToUseServerValidation`\を参照されたい。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/applicationContext.xml*
+
+.. code-block:: xml
+
+    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
+        <property name="validator" ref="validator" />
+    </bean>
+ 
+    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
+      
+|
+
+.. _SOAPHowToUseWebServiceImpl:
+
+Webサービスの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+以下の作成を行う。
+
+- Domain Objectの作成
+- WebServiceインターフェイスの作成
+- WebService実装クラスの作成
+
+.. figure:: images_SOAP/SOAPServerClass.png
+   :alt: Server Projects for SOAP
+   :width: 80%
+
+|
+
+**Domain Objectの作成**
+
+| modelプロジェクト内に、Webサービスの引数や返り値に使用するDomain Objectを作成する。
+| \ ``java.io.Serializable``\ インターフェースを実装した一般のJavaBeanと特に変わりはない。
+
+*[server projectName]-model/src/main/java/com/example/domain/model/Todo.java*
+
+.. code-block:: java
+
+    package com.example.domain.model;
+
+    import java.io.Serializable;
+    import java.util.Date;
+
+    public class Todo implements Serializable {
+
+        private String todoId;
+
+        private String title;
+
+        private String description;
+
+        private boolean finished;
+
+        private Date createdAt;
+
+        // omitted setter and getter
+
+    }
+
+|
+
+**WebServiceインターフェイスの作成**
+
+webserviceプロジェクト内にWebサービスを呼び出すインターフェースを作成する。
+
+*[server projectName]-webservice/src/main/java/com/example/ws/todo/TodoWebService.java*
+
+.. code-block:: java
+
+    package com.example.ws.todo;
+
+    import java.util.List;
+
+    import javax.jws.WebMethod;
+    import javax.jws.WebParam;
+    import javax.jws.WebResult;
+    import javax.jws.WebService;
+
+    import com.example.domain.model.Todo;
+    import com.example.ws.webfault.WebFaultException;
+
+    @WebService(targetNamespace = "http://example.com/todo") // (1)
+    public interface TodoWebService {
+
+        @WebMethod // (2)
+        @WebResult(name = "todo") // (3)
+        Todo getTodo(@WebParam(name = "todoId") /* (4) */ String todoId) throws WebFaultException;
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@WebService``\ を付けることで、WebServiceインターフェースであることを宣言する。
+        | \ ``targetNamespace``\ 属性には、名前空間を定義するが、これは作成するWebサービスのパッケージ名と合わせることを推奨する。
+          
+        .. warning::
+            \ ``targetNamespace``\ 属性の値は一意にする必要がある。そのため、ガイドライン上のソースを流用する場合は必ず変更すること。
+
+        .. Note::
+            \ ``targetNamespace``\ 属性の値はWSDL上に定義され、このWebサービスの名前空間を決定し、一意に特定するために使用される。
+              
+    * - | (2)
+      - | Webサービスのメソッドとして公開するメソッドに\ ``@WebMethod``\ を付ける。
+        | このアノテーションを付けることにより、WSDL上にメソッドが公開され、外部から使用することが可能になる。
+    * - | (3)
+      - | 返り値に\ ``@WebResult``\ を付け、名前を\ ``name``\ 属性に指定する。返り値がない場合は不要。
+        | このアノテーションを付けることにより、WSDL上に返り値として公開される。
+    * - | (4)
+      - | 引数に\ ``@WebParam``\ を付け、名前を\ ``name``\ 属性に指定する。
+        | このアノテーションを付けることにより、WSDL上に引数が公開され、外部から呼び出すときの必要なパラメータとして定義される。
+        | \ ``WebFaultException``\ の詳細は「\ :ref:`SOAPHowToUseExceptionHandler`\ 」を参照されたい。
+
+
+.. note:: **パッケージ名および、ネームスペースの付け方について**
+
+    パッケージ名が以下のような形式になっている場合
+
+      * 【ドメイン】.【アプリケーション名(システム名)】.ws.【ユースケース名】
+
+    本ガイドラインでは、以下のようなネームスペースにすることを推奨する。
+
+      * http://【ドメイン】/【アプリケーション名(システム名)】
+      
+      
+.. note:: **ネームスペースとパッケージ名の関係**
+
+    ドメインをcom.example、アプリケーション名をtodoとした場合、Namespaceは以下のようなJavaのパッケージと紐づけられる。
+
+    .. figure:: images_SOAP/SOAPURL.png
+        :alt: Server and Client Projects for SOAP
+        :width: 50%
+
+    仕様ではないが、Namespaceとパッケージの命名について、\ `XML Namespace Mapping(Red Hat JBoss Fuse) <https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_Fuse/6.0/html/Developing_Applications_Using_JAX-WS/files/JAXWSDataNamespaceMapping.html>`_\ にまとまっている。
+
+|
+
+    
+      
+**WebService実装クラスの作成**
+
+webプロジェクト内にWebServiceインターフェースの実装クラスを作成する。
+
+*[server projectName]-web/src/main/java/com/example/ws/todo/TodoWebServiceImpl.java*
+
+.. code-block:: java
+
+    package com.example.ws.todo;
+
+    import java.util.List;
+
+    import javax.inject.Inject;
+    import javax.jws.HandlerChain;
+    import javax.jws.WebService;
+    import javax.xml.ws.BindingType;
+    import javax.xml.ws.soap.SOAPBinding;
+
+    import org.springframework.web.context.support.SpringBeanAutowiringSupport;
+
+    import com.example.domain.model.Todo;
+    import com.example.domain.service.TodoService;
+    import com.example.ws.webfault.WebFaultException;
+    import com.example.ws.exception.WsExceptionHandler;
+    import com.example.ws.todo.TodoWebService;
+
+
+    @WebService(
+            portName = "TodoWebPort",
+            serviceName = "TodoWebService",
+            targetNamespace = "http://example.com/todo",
+            endpointInterface = "com.example.ws.todo.TodoWebService") // (1)
+    @BindingType(SOAPBinding.SOAP12HTTP_BINDING) // (2)
+    public class TodoWebServiceImpl extends SpringBeanAutowiringSupport implements TodoWebService { // (3)
+
+        @Inject // (4)
+        TodoService todoService;
+
+        @Override // (5)
+        public Todo getTodo(String todoId) throws WebFaultException {
+            return todoService.getTodo(todoId);
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@WebService``\ を付けることで、WebServiceの実装クラスであることを宣言する。
+        | \ ``portName``\ 属性は、WSDL上のポート名として公開される。
+        | \ ``serviceName``\ 属性は、WSDL上のサービス名として公開される。
+        | \ ``targetNamespace``\ 属性は、WSDL上で使用されるネームスペース。
+        | \ ``endpointInterface``\ 属性は、このクラスが実装しているWebサービスのインターフェース名を定義する。
+
+        .. note::
+          \ ``TodoWebService``\ インターフェースでは、\ ``@WebService``\ の属性として\ ``portName``\ 属性, \ ``serviceName``\ 属性, \ ``endpointInterface``\ 属性を設定してはいけない。これは、このインターフェースはWSDL上の\ ``portType``\ 要素に対応しており、Webサービスの内容を記述する要素ではないためである。
+
+    * - | (2)
+      - | \ ``@BindingType``\ を付けることで、バインディングの方式を設定する。
+        | \ ``SOAPBinding.SOAP12HTTP_BINDING``\ を定義するとSOAP1.2でのバインディングとなる。
+        | 何もつけない場合は、SOAP1.1でのバインディングとなる。
+    * - | (3)
+      - | 先ほど作成した\ ``TodoWebService``\ インターフェースを実装する。
+        | \ ``org.springframework.web.context.support.SpringBeanAutowiringSupport``\ を継承することで、SpringのBeanをDIできるようにする。
+    * - | (4)
+      - | Serviceをインジェクションする。
+        | 通常のControllerでServiceを呼び出す場合と変わりはない。
+    * - | (5)
+      - | Serviceを呼び出して業務処理を実行する。
+        | 通常のControllerでServiceを呼び出す場合と変わりはない。
+
+.. note::
+    Webサービス関連のクラスはwsパッケージ配下にまとめることを推奨する。これは、アプリケーション層のクラスはappパッケージ配下に配置することを推奨しており、それらと区別をしやすくするためである。
+
+|
+
+.. _SOAPHowToUseServerValidation:
+
+入力チェックの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SOAP Web Serviceにより送信されたパラメータの入力チェックには、Springから提供されているメソッドバリデーションを使用する。
+| メソッドバリデーションの詳細については\ :ref:`MethodValidationOnSpringFrameworkHowToUseApplyTarget`\ を参照されたい。
+| 以下のように、Serviceのインターフェースに入力チェック内容を定義する。
+
+*[server projectName]-domain/src/main/java/com/example/domain/service/todo/TodoService.java*
+
+.. code-block:: java
+
+    package com.example.domain.service.todo;
+
+    import java.util.List;
+
+    import javax.validation.Valid;
+    import javax.validation.constraints.NotNull;
+    import javax.validation.groups.Default;
+
+    import org.springframework.validation.annotation.Validated;
+
+    import com.example.domain.model.Todo;
+
+    @Validated // (1)
+    public interface TodoService {
+
+        Todo getTodo(@NotNull String todoId); // (2)
+
+        Todo createTodo(@Valid Todo todo); // (3)
+
+        @Validated({ Default.class, Todo.Update.class }) // (4)
+        Todo updateTodo(@Valid Todo todo);
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@Validated``\ を付けることで、このインターフェースの実装クラスが入力チェック対象であることを宣言する。
+    * - | (2)
+      - | 引数をチェックする場合には、引数自体にアノテーションを付ける。
+    * - | (3)
+      - | JavaBeanの入力チェックを行う場合も、引数に\ ``@Valid``\ を付ける。
+    * - | (4)
+      - | \ ``@Validated``\ にグループを指定し、特定の条件を絞って入力チェックすることも可能である。
+        | グループの詳細は次のJavaBeanの説明で記述する。
+
+|
+
+*[server projectName]-model/src/main/java/com/example/domain/model/Todo.java*
+
+.. code-block:: java
+
+    package com.example.domain.model;
+
+    import javax.validation.constraints.NotNull;
+    import javax.validation.constraints.Null;
+    import java.io.Serializable;
+    import java.util.Date;
+
+    // (1)
+    public class Todo implements Serializable {
+
+        // (2)
+        public interface Create {
+        }
+
+        public interface Update {
+        }
+
+        @Null(groups = Create.class)
+        @NotNull(groups = Update.class)
+        private String todoId;
+
+        @NotNull
+        private String title;
+
+        private String description;
+
+        private boolean finished;
+
+        @Null(groups = Create.class)
+        private Date createdAt;
+
+        // omitted setter and getter
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Bean ValidationでJavaBeanの入力チェックを定義する。
+        | 詳細は「\ :doc:`Validation`\ 」を参照されたい。
+    * - | (2)
+      - | バリデーションのグループ化を行うために使用するインターフェースを定義する。
+
+|
+
+セキュリティ対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+**認証処理**
+
+| SOAPの認証・認可方式に関して、本ガイドラインではSpring SecurityでBasic認証を行う方法とServiceでの認可の方法のみ紹介する。
+| WS-Securityは扱わない。
+| 詳細な利用方法は、「\ :doc:`../Security/Authentication`\ 」と「\ :doc:`../Security/Authorization`\ 」を参照されたい。
+
+以下にSOAP Web Serviceに対して、Basic認証を行うSpring Securityの設定例を示す。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/spring-security.xml*
+
+.. code-block:: xml
+
+    <sec:http pattern="/ws/**"
+              auto-config="true"
+              use-expressions="true"
+              create-session="stateless">
+       <sec:headers />
+       <sec:csrf disabled="true">
+       <!-- (1) -->
+       <sec:http-basic />
+    </sec:http>
+
+    <!-- (2) -->
+    <sec:authentication-manager>
+       <sec:authentication-provider
+           user-service-ref="sampleUserDetailsService">
+           <sec:password-encoder ref="passwordEncoder" />
+       </sec:authentication-provider>
+    </sec:authentication-manager>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``sec:http-basic``\タグを記述するとBasic認証を行うことができる。
+        | \ ``pattern``\属性を使用して、Webサービスを実行する部分のみ認証を行う。
+    * - | (2)
+      - | \ ``authentication-provider``\を利用して、認証方式を定義する。
+        | 実際の認証およびユーザ情報取得は\ ``UserDetailsService``\を作成して実施する必要がある。
+        | 詳細は「\ :doc:`../Security/Authentication`\」を参照されたい。
+
+|
+
+**認可処理**
+
+| 認可はServiceごとにアノテーションを付けて行う。
+| 詳細は「\ :doc:`../Security/Authorization`\ 」のアクセス認可(Method)を参照されたい。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/spring-security.xml*
+
+.. code-block:: xml
+
+    <sec:global-method-security pre-post-annotations="enabled" /> <!-- (1) -->
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:global-method-security>``\ 要素の\ ``pre-post-annotations``\ 属性を\ ``enabled``\ に指定する。
+
+|
+
+*[server projectName]-domain/src/main/java/com/example/domain/service/todo/TodoServiceImpl.java*
+
+.. code-block:: java
+
+    public class TodoServiceImpl implements TodoService {
+
+        // omitted
+
+        // (1)
+        @PreAuthorize("isAuthenticated()")
+        public List<Todo> getTodos() {
+            // omitted
+        }
+
+        @PreAuthorize("hasRole('ROLE_ADMIN')")
+        public Todo createTodo(Todo todo) {
+            // omitted
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認可処理を行うメソッドに\ ``org.springframework.security.access.prepost.PreAuthorize``\ アノテーションを設定する。
+
+|
+
+**CSRF対策**
+
+| SOAP Web Serviceはセッションを利用せず、ステートレスな通信にすべきである。
+| そのため、セッションを利用するCSRF対策を行わないようにするための設定方法について以下に記述する。
+| CSRFの詳細は「\ :doc:`../Security/CSRF`\」を参照されたい。
+| ブランクプロジェクトのデフォルトの設定では、CSRF対策が有効化されている。
+| そのため、以下の設定を追加し、SOAP Web Serviceのリクエストに対して、CSRF対策の処理が行われないようにする。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/spring-security.xml*
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <sec:http pattern="/ws/**"
+        auto-config="true"
+        use-expressions="true"
+        create-session="stateless">
+        <sec:headers />
+        <sec:csrf disabled="true">
+    </sec:http>
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+
+    * - | (1)
+      - | SOAP Web Service用のSpring Securityの定義を追加する。
+        | \ ``<sec:http>``\ 要素の\ ``pattern``\ 属性にSOAP Web Service用のリクエストパスのURLパターンを指定する。
+        | このコード例では、\ ``/ws/``\ で始まるリクエストパスをSOAP Web Service用のリクエストパスとしている。
+        | また、\ ``create-session``\ 属性を\ ``stateless``\ とする事で、Spring Securityの処理でセッションが使用されなくなる。
+        |
+        | CSRF対策を無効化するために、\ ``<sec:csrf>``\ 要素の\ ``disabled``\ 属性を\ ``true``\ に指定する。
+
+|
+
+例外ハンドリングの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SOAPサーバで例外が発生した場合にクライアントへ伝えるためには専用の例外クラスをスローする必要がある。
+| その実装を以下に記述する。
+
+
+**SOAPサーバで発生する例外**
+
+SOAPサーバで発生した例外はこれから記述する例外を実装したクラス（SOAPFault）を使用することで、クライアントへの通知メッセージを決定することができる。
+  
+具体的には以下のクラスを作成する。
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 30 60
+
+    * - 項番
+      - クラス名
+      - 概要
+    * - | (1)
+      - | \ ``ErrorBean``\
+      - | 発生した例外のコードとメッセージなどを保持するクラス。
+    * - | (2)
+      - | \ ``WebFaultType``\
+      - | 例外の種類を判別するために使用する列挙型。
+    * - | (3)
+      - | \ ``WebFaultBean``\
+      - | \ ``ErrorBean``\ と\ ``WebFaultType``\ を保持するクラス。\ ``ErrorBean``\ を\ ``List``\ で保持して例外情報を複数保持できる。
+    * - | (4)
+      - | \ ``WebFaultException``\
+      - | \ ``WebFaultBean``\ を保持する例外クラス。
+  
+これらの例外はSOAPサーバ、クライアントで共用するため、[server projectName]-webserviceに配置する。
+
+|
+
+*[server projectName]-webservice/src/main/java/com/example/ws/webfault/ErrorBean.java*
+
+.. code-block:: java
+
+    package com.example.ws.webfault;
+
+    public class ErrorBean { // (1)
+        private String code;
+        private String message;
+        private String path;
+
+        // omitted setter and getter
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 例外のメッセージなどを保持するクラスを作成する。
+
+|
+
+*[server projectName]-webservice/src/main/java/com/example/ws/webfault/WebFaultType.java*
+
+.. code-block:: java
+
+    package com.example.ws.webfault;
+
+    public enum WebFaultType { // (2)
+        AccessDeniedFault,
+        BusinessFault,
+        ResourceNotFoundFault,
+        ValidationFault,
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 例外の種類を判別するために使用する列挙型を定義する。
+
+|
+
+*[server projectName]-webservice/src/main/java/com/example/ws/webfault/WebFaultBean.java*
+
+.. code-block:: java
+
+    package com.example.ws.webfault;
+
+    import java.util.ArrayList;
+    import java.util.List;
+
+    public class WebFaultBean { // (3)
+
+        private WebFaultType type;
+
+        private List<ErrorBean> errors = new ArrayList<ErrorBean>();
+
+        public WebFaultBean(WebFaultType type) {
+            this.type = type;
+        }
+
+        public void addError(String code, String message) {
+            addError(code, message, null);
+        }
+
+        public void addError(String code, String message, String path) {
+            errors.add(new ErrorBean(code, message, path));
+        }
+
+        // omitted setter and getter
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``ErrorBean``\ と\ ``WebFaultType``\ を保持するクラスを作成する。
+
+|
+
+*[server projectName]-webservice/src/main/java/com/example/ws/webfault/WebFaultException.java*
+
+.. code-block:: java
+
+    package com.example.ws.webfault;
+
+    import java.util.List;
+
+    import javax.xml.ws.WebFault;
+
+    @WebFault(name = "WebFault", targetNamespace = "http://example.com/todo") // (1)
+    public class WebFaultException extends Exception {
+        private WebFaultBean faultInfo; // (2)
+
+        public WebFaultException() {
+        }
+
+        public WebFaultException(String message, WebFaultBean faultInfo) {
+            super(message);
+            this.faultInfo = faultInfo;
+        }
+
+        public WebFaultException(String message, WebFaultBean faultInfo, Throwable e) {
+            super(message, e);
+            this.faultInfo = faultInfo;
+        }
+
+        public List<ErrorBean> getErrors() {
+            return this.faultInfo.getErrors();
+        }
+
+        public WebFaultType getType() {
+            return this.faultInfo.getType();
+        }
+        // omitted setter and getter
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Exception継承クラスに\ ``@WebFault``\を付けて、SOAPFaultであることを宣言する。
+        | \ ``name``\属性には、クライアントに送信するSOAPFaultの\ ``name``\属性を設定する。
+        | \ ``targetNamespace``\属性には、使用するネームスペースを設定する。Webサービスと同じにする必要がある。
+    * - | (2)
+      - | faultInfoをフィールドに保持させるとともに、コード例のように以下のようなコンストラクタとメソッドを持たせる。
+
+        - メッセージ文字列とfaultInfoを引数とするコンストラクタ
+        - メッセージ文字列とfaultInfoと原因例外を引数とするコンストラクタ
+        - getFaultInfoメソッド
+
+.. Note:: **WebFaultExceptionにRuntimeExceptionではなく、Exceptionを継承させている理由**
+
+    \ ``WebFaultException``\ の親クラスを\ ``RuntimeException``\ にすれば、例外の処理をもっと簡略化することができそうに見える。しかし、親クラスを\ ``RuntimeException``\ にしてはいけない。\ `JSR 224: JavaTM API for XML-Based Web Services <https://jcp.org/en/jsr/detail?id=224>`_\ でも明確にしてはいけないと宣言されている。実際に試してみても、APサーバのJAX-WS実装次第ではあるが、クライアントで\ ``@WebFault``\ を付けた例外クラス（\ ``WebFaultException``\ ）を取得することができず、エラーの種類やメッセージを取得することができなくなる。AOPを使用して例外処理を実施していないのも\ ``Exception``\ を継承しているためである。
+
+.. warning:: **WebFaultExceptionのコンストラクタとフィールドについて**
+
+    \ ``WebFaultException``\ には、デフォルトコンストラクタと各フィールドに対応するsetterが必須となる。これは、クライアントの内部処理で、\ ``WebFaultException``\ を作成する際に使用するためである。そのため、各フィールドをfinalにすることも不可能である。
+  
+  
+|
+
+
+| この\ ``WebFaultException``\ を継承し、クライアントへ伝えたい種類分、子クラスを作成する。
+| たとえば以下のような子クラスを作成する。
+
+- 業務エラー例外
+- 入力エラー例外
+- リソース未検出エラー例外
+- 排他エラー例外
+- 認可エラー例外
+- システムエラー例外
+
+下記は、業務エラー例外の例である。
+
+*[server projectName]-webservice/src/main/java/com/example/ws/webfault/BusinessFaultException.java*
+
+.. code-block:: java
+
+    package com.example.ws.webfault;
+
+    import javax.xml.ws.WebFault;
+
+    @WebFault(name = "BusinessFault", targetNamespace = "http://example.com/todo") // (1)
+    public class BusinessFaultException extends WebFaultException {
+
+        public BusinessFaultException(String message, WebFaultBean faultInfo) {
+            super(message, faultInfo);
+        }
+
+        public BusinessFaultException(String message, WebFaultBean faultInfo, Throwable e) {
+            super(message, faultInfo, e);
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``WebFaultException``\ を継承し、コンストラクタのみ作成する。
+        | フィールドやその他メソッドは親クラスのメソッドを使用するため記述不要である。
+
+|
+
+**発生する例外をSOAPFaultでラップする例外ハンドラー**
+
+
+Serviceから発生する実行時例外をSOAPFaultでラップするために例外ハンドラークラスを作成する。
+本ガイドラインではWebService実装クラスがこのハンドラーを用いて例外を変換してスローする方針とする。
+
+Serviceからスローされる例外は以下を想定している。必要に応じて追加されたい。
+
+.. tabularcolumns:: |p{0.60\linewidth}|p{0.40\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 60 40
+
+    * - 例外名
+      - 内容
+    * - | \ ``org.springframework.security.access.AccessDeniedException``\		
+      - | 認可エラー時の例外
+    * - | \ ``javax.validation.ConstraintViolationException``\
+      - | 入力チェックエラー時の例外
+    * - | \ ``org.terasoluna.gfw.common.exception.ResourceNotFoundException``\
+      - | リソースが見つからない場合の例外
+    * - | \ ``org.terasoluna.gfw.common.exception.BusinessException``\
+      - | 業務例外
+
+
+*[server projectName]-web/src/main/java/com/example/ws/exception/WsExceptionHandler.java*
+
+.. code-block:: java
+
+    package com.example.ws.exception;
+
+    import java.util.Iterator;
+    import java.util.Locale;
+    import java.util.Set;
+
+    import javax.inject.Inject;
+    import javax.validation.ConstraintViolation;
+    import javax.validation.ConstraintViolationException;
+    import javax.validation.Path;
+
+    import org.springframework.context.MessageSource;
+    import org.springframework.security.access.AccessDeniedException;
+    import org.springframework.stereotype.Component;
+    import org.terasoluna.gfw.common.exception.BusinessException;
+    import org.terasoluna.gfw.common.exception.ExceptionCodeResolver;
+    import org.terasoluna.gfw.common.exception.ExceptionLogger;
+    import org.terasoluna.gfw.common.exception.ResourceNotFoundException;
+    import org.terasoluna.gfw.common.exception.SystemException;
+    import org.terasoluna.gfw.common.message.ResultMessage;
+    import org.terasoluna.gfw.common.message.ResultMessages;
+
+    import com.example.ws.webfault.WebFaultBean;
+    import com.example.ws.webfault.WebFaultException;
+    import com.example.ws.webfault.WebFaultType;
+
+    @Component  // (1)
+    public class WsExceptionHandler {
+
+        @Inject
+        MessageSource messageSource; // (2)
+
+        @Inject
+        ExceptionCodeResolver exceptionCodeResolver; // (3)
+
+        @Inject
+        ExceptionLogger exceptionLogger; // (4)
+
+        // (5)
+        public void translateException(Exception e) throws WebFaultException {
+            loggingException(e);
+            WebFaultBean faultInfo = null;
+
+            if (e instanceof AccessDeniedException) {
+                faultInfo = new WebFaultBean(WebFaultType.AccessDeniedFault);
+                faultInfo.addError(e.getClass().getName(), e.getMessage());
+            } else if (e instanceof ConstraintViolationException) {
+                faultInfo = new WebFaultBean(WebFaultType.ValidationFault);
+                this.addErrors(faultInfo, ((ConstraintViolationException) e).getConstraintViolations());
+            } else if (e instanceof ResourceNotFoundException) {
+                faultInfo = new WebFaultBean(WebFaultType.ResourceNotFoundFault);
+                this.addErrors(faultInfo, ((ResourceNotFoundException) e).getResultMessages());
+            } else if (e instanceof BusinessException) {
+                faultInfo = new WebFaultBean(WebFaultType.BusinessFault);
+                this.addErrors(faultInfo, ((BusinessException) e).getResultMessages());
+            } else {
+                // not translate.
+                throw new SystemException("e.ex.fw.9001", e);
+            }
+
+            throw new WebFaultException(e.getMessage(), faultInfo, e.getCause());
+        }
+
+        private void loggingException(Exception e) {
+            exceptionLogger.log(e);
+        }
+
+        private void addErrors(WebFaultBean faultInfo, Set<ConstraintViolation<?>> constraintViolations) {
+            for (ConstraintViolation<?> v : constraintViolations) {
+                Iterator<Path.Node> pathIt = v.getPropertyPath().iterator();
+                pathIt.next(); // method name node (skip)
+                Path.Node methodArgumentNameNode = pathIt.next();
+                faultInfo.addError(
+                    v.getConstraintDescriptor().getAnnotation().annotationType().getSimpleName(),
+                    v.getMessage(),
+                    pathIt.hasNext() ? pathIt.next().toString() : methodArgumentNameNode.toString());
+            }
+
+        }
+
+        private void addErrors(WebFaultBean faultInfo, ResultMessages resultMessages) {
+            Locale locale = Locale.getDefault();
+            for (ResultMessage message : resultMessages) {
+                faultInfo.addError(
+                    message.getCode(),
+                    messageSource.getMessage(message.getCode(), message.getArgs(), message.getText(), locale));
+            }
+        }
+
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 本クラスをDIコンテナに管理をさせるため、\ ``@Component``\ を付ける。
+    * - | (2)
+      - | 出力するメッセージを取得するために\ ``MessageSource``\ を使用する。
+    * - | (3)
+      - | 共通ライブラリが提供する\ ``ExceptionCodeResolverMessageSource``\ を使用して例外の種類と例外コードをマッピングする。
+        | 詳細は、「\ :doc:`ExceptionHandling`\」を参照されたい。
+    * - | (4)
+      - | 共通ライブラリが提供する\ ``ExceptionLogger``\ を使用して例外情報を例外に出力する。
+        | 詳細は、「\ :doc:`ExceptionHandling`\ 」を参照されたい。
+    * - | (5)
+      - | Serviceから発生しうる各例外について、\ ``SOAPFault``\へのラップを行う。
+        | 例外のマッピングは冒頭の表を参考されたい。
+
+.. note:: **その他の例外の扱いについて**
+
+    その他の例外発生時（上記の\ ``translateException``\ メソッドのelse部分）では、クライアントでは詳細な例外の内容は通知されず、\ ``com.sun.xml.internal.ws.fault.ServerSOAPFaultException``\ が発生するのみとなる。他の例外同様にラップしてクライアント側に通知することも可能である。
+
+|
+
+**Serviceで発生した例外をWebサービス内から例外ハンドラーを呼び出し、ラップする**
+
+Webサービスクラスにて、例外ハンドラーを呼び出す。以下はその例である。
+
+*[server projectName]-web/src/main/java/com/example/ws/todo/TodoWebServiceImpl.java*
+
+.. code-block:: java
+
+
+    @WebService(
+            portName = "TodoWebPort",
+            serviceName = "TodoWebService",
+            targetNamespace = "http://example.com/todo",
+            endpointInterface = "com.example.ws.todo.TodoWebService")
+    @BindingType(SOAPBinding.SOAP12HTTP_BINDING)
+    public class TodoWebServiceImpl extends SpringBeanAutowiringSupport implements TodoWebService {
+        @Inject
+        TodoService todoService;
+        @Inject
+        WsExceptionHandler handler; // (1)
+
+        @Override
+        public Todo getTodo(String todoId) throws WebFaultException /* (2) */ {
+            try {
+                return todoService.getTodo(todoId);
+            } catch (RuntimeException e) {
+                handler.translateException(e); // (3)
+            }
+        }
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 例外ハンドラーをインジェクションする。
+    * - | (2)
+      - | \ ``WebFaultException``\ にラップしてスローするため、throws句を付ける。
+    * - | (3)
+      - | 実行時例外が発生した場合は、例外ハンドラークラスに処理を委譲する。
+
+|
+
+MTOMを利用した大容量のバイナリデータを扱う方法
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SOAPでは、バイナリデータを扱う場合、Byte配列にマッピングすることで、送受信を行うことができる。
+| ただし、大容量のバイナリデータを扱う場合、ヒープが枯渇するなどの問題が発生することがある。
+| そこで、MTOM（Message Transmission Optimization Mechanism）に準拠した実装を行うことで、最適化した状態で添付ファイルとしてバイナリデータを扱うことができる。
+| 詳細な定義は `W3C -SOAP Message Transmission Optimization Mechanism- <http://www.w3.org/TR/soap12-mtom/>`_\ を参照されたい。
+| 以下にその方法を記述する。
+
+*[server projectName]-webservice/src/main/java/com/example/ws/todo/TodoWebService.java*
+
+.. code-block:: java
+
+    package com.example.ws.todo;
+
+    import java.util.List;
+
+    import javax.activation.DataHandler;
+    import javax.jws.WebMethod;
+    import javax.jws.WebParam;
+    import javax.jws.WebResult;
+    import javax.jws.WebService;
+    import javax.xml.bind.annotation.XmlMimeType;
+
+    import com.example.domain.model.Todo;
+    import com.example.ws.webfault.WebFaultException;
+
+    @WebService(targetNamespace = "http://example.com/todo")
+    public interface TodoWebService {
+
+        // omitted
+
+        @WebMethod
+        void uploadFile(@XmlMimeType("application/octet-stream") /* (1) */ DataHandler dataHandler) throws WebFaultException;
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | バイナリデータを処理する\ ``javax.activation.DataHandler``\ に対して\ ``@XmlMimeType``\ を付ける。
+
+|
+
+*[server projectName]-web/src/main/java/com/example/ws/todo/TodoWebServiceImpl.java*
+
+.. code-block:: java
+
+    package com.example.ws.todo;
+
+    import java.io.IOException;
+    import java.io.InputStream;
+    import java.util.List;
+
+    import javax.activation.DataHandler;
+    import javax.inject.Inject;
+    import javax.jws.HandlerChain;
+    import javax.jws.WebService;
+    import javax.xml.ws.BindingType;
+    import javax.xml.ws.soap.MTOM;
+    import javax.xml.ws.soap.SOAPBinding;
+
+    import org.springframework.web.context.support.SpringBeanAutowiringSupport;
+    import org.terasoluna.gfw.common.exception.SystemException;
+
+    import com.example.domain.model.Todo;
+    import com.example.domain.service.TodoService;
+    import com.example.ws.webfault.WebFaultException;
+    import com.example.ws.exception.WsExceptionHandler;
+
+    // (1)
+    @MTOM
+    @WebService(
+            portName = "TodoWebPort",
+            serviceName = "TodoWebService",
+            targetNamespace = "http://example.com/todo",
+            endpointInterface = "com.example.ws.todo.TodoWebService")
+    @BindingType(SOAPBinding.SOAP12HTTP_BINDING)
+    public class TodoWebServiceImpl extends SpringBeanAutowiringSupport implements TodoWebService {
+
+        @Inject
+        TodoService todoService;
+
+        // omitted
+
+        @Override
+        public void uploadFile(DataHandler dataHandler) throws WebFaultException {
+
+            try (InputStream inputStream = dataHandler.getInputStream()){ // (2)
+                todoService.uploadFile(inputStream);
+            } catch (Exception e) {
+                handler.translateException(e);
+            }
+        }
+
+    }
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@MTOM``\を付けて、MTOMに準拠した実装を使用することを宣言する。
+    * - | (2)
+      - | \ ``javax.activation.DataHandler``\から\ ``java.io.InputStream``\を取得してファイルを扱う。
+
+|
+
+クライアントの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+
+プロジェクトの構成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+「\ :ref:`SOAPOverviewAboutRESTfulWebServiceDevelopment`\」で述べたとおり、modelプロジェクトとwebserviceプロジェクトをSOAPサーバから受領する前提である。
+
+.. figure:: images_SOAP/SOAPClientProjects.png
+    :alt: Client Projects for SOAP
+    :width: 80%
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.30\linewidth}|p{0.60\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 30 60
+
+    * - 項番
+      - プロジェクト名
+      - 説明
+    * - | (1)
+      - | webプロジェクト
+      - | Controllerを作成する。
+        | 通常の画面遷移時のControllerと特に変更点はない。
+    * - | (2)
+      - | domainプロジェクト
+      - | Serviceクラスからwebserviceプロジェクトで用意されたWebServeインターフェースを使用してWebサービスを呼び出す。
+    * - | (3)
+      - | webserviceプロジェクト
+      - | SOAPサーバと同じ資材を配置する。
+        | クライアントはこのインターフェースを使用してWebサービスを実行する。
+    * - | (4)
+      - | modelプロジェクト
+      - | SOAPサーバと同じ資材を配置する。
+        | SOAPサーバに渡す入力値や返却結果はこのプロジェクト内のクラスを使用する。
+    * - | (5)
+      - | envプロジェクト
+      - | SOAPサーバと通信する際に使用するWebServiceインターフェースを実装したプロキシクラスを定義する。
+        | プロキシクラスの定義は環境依存することが多いため、envプロジェクトで定義している。
+
+|
+
+.. _SOAPHowToUseWebServiceClient:
+
+Webサービス クライアントの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+以下のクラスの実装を行う。
+
+- WebServiceインターフェースを実装したプロキシクラスの定義
+- ServiceクラスからWebServiceインターフェース経由でWebサービスを呼び出す。
+
+.. figure:: images_SOAP/SOAPClientClass.png
+    :alt: Server Projects for SOAP
+    :width: 80%
+
+
+**WebServiceインターフェースを実装したプロキシクラスの作成**
+
+WebServiceインターフェースを実装したプロキシクラスを生成する\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\の定義を行う。
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-env.xml*
+
+.. code-block:: xml
+
+    <bean id="todoWebService"
+        class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"><!-- (1) -->
+        <property name="serviceInterface" value="com.example.ws.todo.TodoWebService" /><!-- (2) -->
+        <!-- (3) -->
+        <property name="serviceName" value="TodoWebService" />
+        <property name="portName" value="TodoWebPort" />
+        <property name="namespaceUri" value="http://example.com/todo" />
+        <property name="wsdlDocumentResource" value="${webservice.todoWebService.wsdlDocumentResource}" /><!-- (4) -->
+    </bean>
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-infra.properties*
+
+.. code-block:: properties
+
+    # (5)
+    webservice.todoWebService.wsdlDocumentResource=http://AAA.BBB.CCC.DDD:XXXX/[server projectName]-web/ws/TodoWebService?wsdl
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\ を定義する。このクラスが生成するプロキシクラスを経由してSOAPサーバにアクセスできる。
+    * - | (2)
+      - | \ ``serviceInterface``\ プロパティに本来このWebサービスが実装すべきインターフェースを定義する。
+    * - | (3)
+      - | \ ``serviceName``\ 、\ ``portName``\ 、\ ``namespaceUri``\ プロパティにそれぞれSOAPサーバ側で定義している同じ内容を定義する必要がある。
+    * - | (4)
+      - | \ ``wsdlDocumentResource``\ プロパティに公開されているWDSLのURLを設定する。
+        | ここでは後述するプロパティファイルにURLを記述するため、プロパティのキーを指定している。
+    * - | (5)
+      - | \ ``[client projectName]-env.xml``\ で定義したプロパティのキーの値を設定する。WSDLのURLを記述する。
+
+        .. Note:: **wsdlDocumentResourceへのWSDLファイルのURL以外の指定**
+
+            上記の例では、SOAPサーバがWSDLファイルを公開している前提である。\ ``classpath:``\ や\ ``file:``\ プレフィックスを使用して指定することで静的ファイルを指定することもできる。指定できる文字列は、\ `Spring Framework Reference Documentation -Resources(The ResourceLoader)- <http://docs.spring.io/spring/docs/current/spring-framework-reference/html/resources.html#resources-resourceloader>`_\ を参照されたい。
+
+
+.. Note:: **エンドポイントアドレスの上書き指定**
+
+    WSDLファイルには、Webサービス実行時のアクセスURL（エンドポイントアドレス）が記述されているため、クライアントではアクセスURLの設定は不要である。
+    ただし、WSDLファイルに記述されているURLではないURLにアクセスする場合、\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\の\ ``endpointAddress``\ プロパティを設定することで上書きすることができる。
+    テストなどで、環境を切り替える場合に使用するとよい。
+    以下はその設定例である。
+
+    *[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-env.xml*
+
+     .. code-block:: xml
+         :emphasize-lines: 8
+
+         <bean id="todoWebService"
+             class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean">
+             <property name="serviceInterface" value="com.example.ws.todo.TodoWebService" />
+             <property name="serviceName" value="TodoWebService" />
+             <property name="portName" value="TodoWebPort" />
+             <property name="namespaceUri" value="http://example.com/todo" />
+             <property name="wsdlDocumentResource" value="${webservice.todoWebService.wsdlDocumentResource}" />
+             <property name="endpointAddress" value="${webservice.todoWebService.endpointAddress}" /><!-- (1) -->
+         </bean>
+
+    *[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-infra.properties*
+
+     .. code-block:: properties
+
+         # (2)
+         webservice.todoWebService.endpointAddress=http://AAA.BBB.CCC.DDD:XXXX/[server projectName]-web/ws/TodoWebService
+
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+         :header-rows: 1
+         :widths: 10 90
+
+         * - 項番
+           - 説明
+         * - | (1)
+           - | エンドポイントアドレスを設定する。
+             | ここでは後述するプロパティファイルにURLを記述するため、プロパティのキーを指定している。
+         * - | (2)
+           - | \ ``[client projectName]-env.xml``\ で定義したプロパティのキーの値を設定する。エンドポイントアドレスを記述する。
+
+|
+
+**ServiceからWebサービスを呼び出す**
+
+上記で作成したWebサービスをServiceでインジェクションして実行する。
+
+
+*[client projectName]-domain/src/main/java/com/example/domain/service/todo/TodoServiceImpl.java*
+
+.. code-block:: java
+
+    package com.example.soap.domain.service.todo;
+
+    import java.util.List;
+
+    import javax.inject.Inject;
+
+    import org.springframework.stereotype.Service;
+
+    import com.example.domain.model.Todo;
+    import com.example.ws.webfault.WebFaultException;
+    import com.example.ws.todo.TodoWebService;
+
+    @Service
+    public class TodoServiceImpl implements TodoService {
+
+        @Inject
+        TodoWebService todoWebService;
+
+        @Override
+        public void createTodo(Todo todo) {
+            // (1)
+            try {
+                todoWebService.createTodo(todo);
+            } catch (WebFaultException e) {
+                // (2)
+                // handle exception…
+            }
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+
+    * - | (1)
+      - | \ ``TodoWebService``\ をインジェクションして、実行対象のServiceを呼び出す。
+    * - | (2)
+      - | サーバ側で、例外が発生した場合は、\ ``WebFaultException``\ にラップされて送信される。
+        | 内容に応じて処理を行う。
+        | 例外処理の詳細は「:ref:`SOAPHowToUseExceptionHandler`」を参照されたい。
+
+.. note:: **プロキシクラスの定義ついて**
+
+    プロキシクラスの定義はenvプロジェクトで行うことを推奨する。
+    mavenのprofileを切り替えることで、Webサービスの実装クラスを切り替えられるようにするためである。
+    試験用のSOAPサーバへ通信先を変える場合や、そもそもSOAPサーバが準備できない場合に
+    スタブクラスを作成することで他のソースを変えることなく試験を行うことができるためである。
+
+.. note:: **レスポンスの情報取得**
+
+    リトライを考慮するなど、レスポンスの情報をクライアントで取得したい場合、以下のように\ ``javax.xml.ws.BindingProvider``\ クラスにキャストすることで取得できる。
+
+     .. code-block:: java
+
+         BindingProvider provider = (BindingProvider) todoWebService;
+         int status = (int) provider.getResponseContext().get(MessageContext.HTTP_RESPONSE_CODE);
+
+    ただし、この場合Webサービス実行がプロキシクラスに依存してしまう。そのため、テスト時にスタブを使用する場合にも、スタブに\ ``javax.xml.ws.BindingProvider``\を実装させる必要が発生する。
+    この機能の利用は最小限に抑えることを推奨する。
+
+|
+
+
+セキュリティ対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+**認証処理**
+
+\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\を使用している場合でBasic認証を使用しているSOAPサーバと通信をする場合には、bean定義にユーザ名とパスワードを追加するだけで認証を行うことができる。
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-env.xml*
+
+.. code-block:: xml
+    :emphasize-lines: 8-10
+
+    <bean id="todoWebService"
+        class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean">
+        <property name="serviceInterface" value="com.example.ws.todo.TodoWebService" />
+        <property name="serviceName" value="TodoWebService" />
+        <property name="portName" value="TodoWebPort" />
+        <property name="namespaceUri" value="http://example.com/todo" />
+        <property name="wsdlDocumentResource" value="${webservice.todoWebService.wsdlDocumentResource}" />
+        <!-- (1) -->
+        <property name="username" value="${webservice.todoWebService.username}" />
+        <property name="password" value="${webservice.todoWebService.password}" />
+    </bean>
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-infra.properties*
+
+.. code-block:: properties
+
+    # (2)
+    webservice.todoWebService.username=testuser
+    webservice.todoWebService.password=password
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\のbean定義にusernameとpasswordを加えることでBasic認証における、認証情報を送信することができる。
+        | ユーザ名とパスワードをプロパティファイルに切り出した場合のサンプルである。
+    * - | (2)
+      - | \ ``[client projectName]-env.xml``\ で定義したプロパティのキーの値を設定する。認証に使用するユーザ名とパスワードを記述する。
+
+|
+
+.. _SOAPHowToUseExceptionHandler:
+
+例外ハンドリングの実装
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| SOAPサーバでは、\ ``WebFaultException``\ に例外をラップして、スローすることを推奨している。
+| クライアントは\ ``WebFaultException``\ をキャッチして、その原因例外を判定してそれぞれの処理を行う。
+
+.. code-block:: java
+    :emphasize-lines: 8-19
+
+    @Override
+    public void createTodo(Todo todo) {
+
+        try {
+            // (1)
+            todoWebService.createTodo(todo);
+        } catch (WebFaultException e) {
+            // (2)
+            switch (e.getFaultInfo().getType()) {
+            case ValidationFault:
+                // handle exception…
+                break;
+            case BusinessFault:
+                // handle exception…
+                break;
+            default:
+                // handle exception…
+                break;
+            }
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Webサービスを呼び出す。throwsがついているため、\ ``WebFaultException``\ をキャッチする必要がある。
+    * - | (2)
+      - | \ ``faultInfo``\ の種別で例外を判定し、それぞれの処理を記述する（画面にメッセージを出す、例外をスローするなど）
+
+|
+
+タイムアウトの設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+クライアントで指定できるタイムアウトは大きく以下の2つがある。
+
+- SOAPサーバとのコネクションタイムアウト
+- SOAPサーバへのリクエストタイムアウト
+
+| どちらの設定も、\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\ のカスタムプロパティに指定する必要がある。
+| 設定の方法は以下の通りである。
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-env.xml*
+
+.. code-block:: xml
+    :emphasize-lines: 9-16
+
+    <bean id="todoWebService"
+        class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean">
+        <property name="serviceInterface" value="com.example.ws.todo.TodoWebService" />
+        <property name="serviceName" value="TodoWebService" />
+        <property name="portName" value="TodoWebPort" />
+        <property name="namespaceUri" value="http://example.com/todo" />
+        <property name="wsdlDocumentResource" value="${webservice.todoWebService.wsdlDocumentResource}" />
+        <!-- (1) -->
+        <property name="customProperties">
+            <map>
+                <!-- (2) -->
+                <entry key="com.sun.xml.internal.ws.connect.timeout" value-type="java.lang.Integer" value="${webservice.connect.timeout}"/>
+                <entry key="com.sun.xml.internal.ws.request.timeout" value-type="java.lang.Integer" value="${webservice.request.timeout}"/>
+            </map>
+        </property>
+    </bean>
+
+*[client projectName]-env/src/main/resources/META-INF/spring/[client projectName]-infra.properties*
+
+.. code-block:: properties
+
+    # (3)
+    webservice.request.timeout=3000
+    webservice.connect.timeout=3000
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``customProperties``\ プロパティにMapを指定することでカスタムプロパティを定義する。
+    * - | (2)
+      - | コネクションタイムアウトとリクエストタイムアウトを定義する。
+        | それぞれの値をプロパティファイルに切り出した場合のサンプルである。
+
+        .. warning:: **タイムアウト定義に使用するキーについて**
+
+            それぞれのタイムアウトを定義するキーはJAX-WSの実装により異なる値を設定する必要がある。
+            詳細は\ `JAX_WS-1166 Standardize timeout settings <https://java.net/jira/browse/JAX_WS-1166>`_\を参照されたい。
+
+    * - | (3)
+      - | \ ``[client projectName]-env.xml``\ で定義したプロパティのキーの値を設定する。コネクションタイムアウトとリクエストタイムアウトを記述する。
+
+
+|
+
+Appendix
+--------------------------------------------------------------------------------
+
+.. _SOAPAppendixAddProject:
+
+SOAPサーバ用にプロジェクトの設定を変更する
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| SOAPサーバを作成する場合、ブランクプロジェクトにmodelプロジェクトとwebserviceプロジェクトを追加することを推奨する。
+| 以下にその方法を記述する。
+
+| ブランクプロジェクトは初期状態は以下の構成になっている。
+| なお、artifactIdにはブランクプロジェクト作成時に指定したartifactIdが設定される。
+
+.. code-block:: console
+
+    artifactId
+    ├── pom.xml
+    ├── artifactId-domain
+    ├── artifactId-env
+    ├── artifactId-initdb
+    ├── artifactId-selenium
+    └── artifactId-web
+
+以下のようなプロジェクト構成にする。
+
+.. code-block:: console
+
+    artifactId
+    ├── pom.xml
+    ├── artifactId-domain
+    ├── artifactId-env
+    ├── artifactId-initdb
+    ├── artifactId-selenium
+    ├── artifactId-web
+    ├── artifactId-model
+    └── artifactId-webservice
+
+|
+
+既存プロジェクトの変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| ブランクプロジェクトの初期状態では、ControllerなどWebアプリケーションの簡易実装が含まれている。
+| そのままにしてもSOAP Web Serviceは実現可能だが、不要であるため、削除することを推奨する。
+| 削除対象は、「:doc:`../ImplementationAtEachLayer/CreateWebApplicationProject` の :ref:`CreateWebApplicationProjectConfigurationMulti`」を参照されたい。
+
+|
+
+modelプロジェクトの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+modelプロジェクトの構成について説明する。
+
+.. code-block:: console
+
+    artifactId-model
+        ├── pom.xml  ... (1)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - | 項番
+      - | 説明
+    * - | (1)
+      - modelモジュールの構成を定義するPOM(Project Object Model)ファイル。
+        このファイルでは、以下の定義を行う。
+
+        * 依存ライブラリとビルド用プラグインの定義
+        * jarファイルを作成するための定義
+
+| \ ``pom.xml``\ は以下のようなイメージになる。必要に応じて編集する必要がある。
+| 実際には、「artifactId」と「groupId」はブランクプロジェクト作成時に指定した値を設定する必要がある。
+
+.. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+        <modelVersion>4.0.0</modelVersion>
+        <artifactId>artifactId-model</artifactId>
+        <packaging>jar</packaging>
+        <parent>
+            <groupId>groupId</groupId>
+            <artifactId>artifactId</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+            <relativePath>../pom.xml</relativePath>
+        </parent>
+        <dependencies>
+            <!-- == Begin TERASOLUNA == -->
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-common</artifactId>
+            </dependency>
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-jodatime</artifactId>
+            </dependency>
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-security-core</artifactId>
+            </dependency>
+
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-recommended-dependencies</artifactId>
+                <type>pom</type>
+            </dependency>
+            <!-- == End TERASOLUNA == -->
+        </dependencies>
+    </project>
+
+|
+
+webserviceプロジェクトの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+webserviceプロジェクトの構成について説明する。
+
+.. code-block:: console
+
+    artifactId-webservice
+        ├── pom.xml  ... (1)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - | 項番
+      - | 説明
+    * - | (1)
+      - webserviceモジュールの構成を定義するPOM(Project Object Model)ファイル。
+        このファイルでは、以下の定義を行う。
+
+        * 依存ライブラリとビルド用プラグインの定義
+        * jarファイルを作成するための定義
+
+| \ ``pom.xml``\ は以下のようなイメージになる。必要に応じて編集する必要がある。
+| 実際には、「artifactId」と「groupId」はブランクプロジェクト作成時に指定した値を設定する必要がある。
+
+.. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
+    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+        <modelVersion>4.0.0</modelVersion>
+        <artifactId>artifactId-webservice</artifactId>
+        <packaging>jar</packaging>
+        <parent>
+            <groupId>groupId</groupId>
+            <artifactId>artifactId</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+            <relativePath>../pom.xml</relativePath>
+        </parent>
+        <dependencies>
+            <dependency>
+                <groupId>${project.groupId}</groupId>
+                <artifactId>artifactId-model</artifactId>
+            </dependency>
+            <!-- == Begin TERASOLUNA == -->
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-common</artifactId>
+            </dependency>
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-jodatime</artifactId>
+            </dependency>
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-security-core</artifactId>
+            </dependency>
+
+            <dependency>
+                <groupId>org.terasoluna.gfw</groupId>
+                <artifactId>terasoluna-gfw-recommended-dependencies</artifactId>
+                <type>pom</type>
+            </dependency>
+            <!-- == End TERASOLUNA == -->
+        </dependencies>
+    </project>
+
+|
+
+.. _SOAPAppendixPackageServer:
+
+SOAPサーバのパッケージ構成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| SOAPサーバを作成するときの推奨する構成について、説明する。
+| ガイドラインに従いプロジェクトを追加すると以下の構成となる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 30 70
+
+    * - プロジェクト名
+      - 説明
+    * - | [server projectName]-domain
+      - | SOAPサーバのドメイン層に関するクラス・設定ファイルを格納するプロジェクト
+    * - | [server projectName]-web
+      - | SOAPサーバのアプリケーション層に関するクラス・設定ファイルを格納するプロジェクト
+    * - | [server projectName]-env
+      - | SOAPサーバの環境に依存するファイル等を格納するプロジェクト
+    * - | [server projectName]-model
+      - | SOAPサーバのドメイン層に関するクラスの中で、Webサービス実行時に使用し、クライアントと共有するクラスを格納するプロジェクト
+    * - | [server projectName]-webservice
+      - | SOAPサーバが提供するWebサービスのインターフェースを格納するプロジェクト
+
+|
+
+
+[server projectName]-domain
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[server projectName]-modelの依存関係を追加するため、\ ``pom.xml``\ に以下を追加する。
+
+.. code-block:: xml
+      
+    <dependency>
+        <groupId>${project.groupId}</groupId>
+        <artifactId>artifactId-model</artifactId>
+    </dependency>
+
+その他のパッケージ構成は、通常のdomainプロジェクトと変わらないため、「:doc:`../Overview/ApplicationLayering` の :ref:`application-layering_project-structure`」を参照されたい。
+
+|
+
+[server projectName]-web
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[server projectName]-webserviceの依存関係を追加するため、\ ``pom.xml``\ に以下を追加する。
+
+.. code-block:: xml
+
+    <dependency>
+        <groupId>${project.groupId}</groupId>
+        <artifactId>artifactId-webservice</artifactId>
+    </dependency>
+
+.. note:: **依存性の解決について**
+
+    [server projectName]-modelの依存関係の定義は不要である。これは[server projectName]-webserviceから[server projectName]-modelへの依存関係が定義されているため、推移的に依存関係が追加されるためである。
+      
+|
+
+[server projectName]-webのプロジェクト推奨構成を、以下に示す。
+
+.. code-block:: console
+
+    [server projectName]-web
+      └src
+          └main
+              ├java
+              │  └com
+              │      └example
+              │          ├app...(1)
+              │          └ws...(2)
+              │            ├exception...(3)
+              │            │  └WsExceptionHandler.java
+              │            ├abc
+              │            │  └AbcWebServiceImpl.java
+              │            └def
+              │                └DefWebServiceImpl.java
+              ├resources
+              │  ├META-INF
+              │  │  └spring
+              │  │      ├applicationContext.xml...(4)
+              │  │      ├application.properties...(5)
+              │  │      ├spring-mvc.xml ...(6)
+              │  │      ├spring-security.xml...(7)
+              │  │      └[server projectName]-ws.xml...(8)
+              │  └i18n
+              │      └application-messages.properties...(9)
+              └webapp
+                  ├resources...(10)
+                  └WEB-INF
+                      ├views ...(11)
+                      └web.xml...(12)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | アプリケーション層の構成要素を格納するパッケージ。
+        | Webサービスのみ作成する場合は削除してもよい。
+    * - | (2)
+      - | Webサービスの関連クラスを格納するパッケージ。
+    * - | (3)
+      - | Webサービスの例外ハンドラーなどを格納するパッケージ。
+    * - | (4)
+      - | アプリケーション全体に関するBean定義を行う。
+    * - | (5)
+      - | アプリケーションで使用するプロパティを定義する。
+    * - | (6)
+      - | Spring MVCの設定を行うBean定義を行う。
+        | Webサービスのみ作成する場合は削除してもよい。
+    * - | (7)
+      - | Spring Securityの設定を行うBean定義を行う。
+    * - | (8)
+      - | Webサービスに関するBean定義を行う。
+    * - | (9)
+      - | 画面表示用のメッセージ(国際化対応)定義を行う。
+    * - | (10)
+      - | 静的リソース(css、js、画像など)を格納する。
+        | Webサービスのみ作成する場合は削除してもよい。
+    * - | (11)
+      - | View(jsp)を格納する。
+        | Webサービスのみ作成する場合は削除してもよい。
+    * - | (12)
+      - | Servletのデプロイメント定義を行う。
+
+
+.. Note:: **SOAPサーバの不要なファイル**
+
+    SOAPサーバで、Webサービスのみを作成する場合、ブランクプロジェクトに存在するSpring MVCの設定ファイルなどは不要となるため、削除したほうが望ましい。
+
+
+|
+
+[server projectName]-env
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[server projectName]-envについては、通常のenvプロジェクトと変わらないため、「:doc:`../Overview/ApplicationLayering` の :ref:`application-layering_project-structure`」を参照されたい。
+
+|
+
+[server projectName]-model
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[server projectName]-modelのプロジェクト推奨構成を、以下に示す。
+
+.. code-block:: console
+
+    [server projectName]-model
+      └src
+          └main
+              └java
+                  └com
+                      └example
+                          └domain ...(1)
+                              └model ...(2)
+                                  ├Xxx.java
+                                  ├Yyy.java
+                                  └Zzz.java
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ドメイン層の構成要素を格納するパッケージ。
+    * - | (2)
+      - | Domain Objectの中でWebサービス実行時に使用するクラスを格納するパッケージ。
+
+|
+
+[server projectName]-webservice
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[server projectName]-webserviceのプロジェクト推奨構成を、以下に示す。
+  
+  
+.. code-block:: console
+
+    [server projectName]-webservice
+      └src
+          └main
+              └java
+                  └com
+                      └example
+                          └ws...(1)
+                            ├webfault...(2)
+                            ├abc
+                            │  └AbcWebService.java
+                            └def
+                                └DefWebService.java
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Webサービスのインターフェースを格納するパッケージ。
+    * - | (2)
+      - | Webサービスのwebfaultを格納するパッケージ。
+
+|
+
+.. _SOAPAppendixPackageClient:
+
+クライアントのパッケージ構成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| クライアントを作成するときの推奨する構成について、説明する。
+| ガイドラインに従いプロジェクトをSOAPサーバから提供されると以下の構成となる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 30 70
+
+    * - プロジェクト名
+      - 説明
+    * - | [client projectName]-domain
+      - | クライアントのドメイン層に関するクラス・設定ファイルを格納するプロジェクト
+    * - | [client projectName]-web
+      - | クライアントのアプリケーション層に関するクラス・設定ファイルを格納するプロジェクト
+    * - | [client projectName]-env
+      - | クライアントの環境に依存するファイル等を格納するプロジェクト
+
+.. note::
+
+    [server projectName]-modelと[server projectName]-webserviceについては、前述の「 :ref:`SOAPAppendixPackageServer`」を参照されたい。
+
+|
+
+[client projectName]-domain
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+SOAPサーバから提供される[server projectName]-webserviceの依存関係を追加するため、\ ``pom.xml``\ に以下を追加する。
+
+.. code-block:: xml
+      
+    <dependency>
+        <groupId>${project.groupId}</groupId>
+        <artifactId>artifactId-webservice</artifactId>
+    </dependency>
+
+.. note:: **依存性の解決について**
+
+    [server projectName]-webと同様に、この\ ``pom.xml``\ には、[server projectName]-modelの依存関係の定義は不要である。これは[server projectName]-webserviceから[server projectName]-modelへの依存関係が定義されているため、推移的に依存関係が追加されるためである。
+
+その他のパッケージ構成は、通常のdomainプロジェクトと変わらないため、「:doc:`../Overview/ApplicationLayering` の :ref:`application-layering_project-structure`」を参照されたい。
+
+|
+
+[client projectName]-web
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[client projectName]-webについては、通常のwebプロジェクトと変わらないため、「:doc:`../Overview/ApplicationLayering` の :ref:`application-layering_project-structure`」を参照されたい。
+  
+  
+
+[client projectName]-env
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+[client projectName]-envのプロジェクト推奨構成を、以下に示す。
+  
+  
+.. code-block:: console
+
+    [projectName]-env
+      ├configs ...(1)
+      │   └[envName] ...(2)
+      │       └resources ...(3)
+      └src
+          └main
+              └resources ...(4)
+                 ├META-INF
+                 │  └spring
+                 │      ├[projectName]-env.xml ...(5)
+                 │      └[projectName]-infra.properties ...(6)
+                 ├dozer.properties
+                 ├log4jdbc.properties
+                 └logback.xml ...(7)
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 全環境の環境依存ファイルを管理するためのディレクトリ。
+    * - | (2)
+      - | 環境毎の環境依存ファイルを管理するためのディレクトリ。
+        | ディレクトリ名は、環境を識別する名前を指定する。
+    * - | (3)
+      - | 環境毎の設定ファイルを管理するためのディレクトリ。
+        | サブディレクトリの構成や管理する設定ファイルは、(4)と同様。
+    * - | (4)
+      - | ローカル開発環境用の設定ファイルを管理するためのディレクトリ。
+    * - | (5)
+      - | ローカル開発環境用のBean定義を行う。
+        | このファイルにWebサービスのプロキシクラスを指定する。
+    * - | (6)
+      - | ローカル開発環境用のプロパティを定義する。
+        | WSDLのURLなど環境ごとに変更の可能性がある値を設定する。
+    * - | (7)
+      - | ローカル開発環境用のログ出力定義を行う。
+
+|
+
+.. _SOAPAppendixWsimport:
+
+wsimportについて
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| wsimportは Java SEに同梱されるコマンドライン・ツールである。
+| WSDLファイルを読み取り、Webサービスを呼び出すことが可能なJavaクラス（オプションによってはソースも）を出力するツールである。
+
+wsimportの使い道
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| 本ガイドラインでは、wsimportは以下の図のような場合に使用することを推奨している。
+| クライアント作成時に、SOAPサーバで使用されるDomain ObjectやWebサービスインターフェースが使用できない場合でも、wsimportを使用することでWebサービスの実行ができるようになる。
+
+.. figure:: images_SOAP/SOAPModelNoProvide.png
+    :alt: Server and Client Projects for SOAP
+    :width: 80%
+
+|
+
+wsimportの使い方
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| JDKのbinフォルダに格納されており、パスを通すだけで使用可能になる。
+| コマンドライン上で以下のようにコマンドを実行すると、ソースファイルがカレントディレクトリに作成される。
+
+
+.. code-block:: bat
+
+    # (1)
+    wsimport -keep -p [出力するソースのパッケージ名] -s [出力するソースを格納する場所] [wsdlのURL]
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | wsimportの引数としてWSDLのURLを指定する。
+        | オプションとして以下を使用をする。
+        
+          * -keep ソースも出力する。
+          * -p 出力するソースのパッケージを指定する。
+          * -s 出力するソースを格納する場所を指定する。
+          
+        | その他オプションについては、\ `Java Platform, Standard Edition Tools Reference -Web Services(wsimport)- <http://docs.oracle.com/javase/8/docs/technotes/tools/windows/wsimport.html>`_\ を参照されたい。
+
+.. note::
+
+    wsimportはデフォルトの挙動としてclassファイルのみが出力される。動かすだけなら問題はないが、デバッグなどを実行したい場合に備えkeepオプションを付けてソースも保存することを推奨する。
+
+
+|
+
+例えば、以下のようなコマンドとなる。
+
+.. code-block:: bat
+
+    wsimport -keep -p com.example.ws.todo -s c:/tmp http://AAA.BBB.CCC.DDD:XXXX/soap-web/ws/TodoWebService?wsdl
+
+作成されるソースは公開されているWebサービスに依存するが、本ガイドラインで使用している以下のJavaクラスが出力される。
+    
+* Webサービスインターフェース（ソース例では\ ``TodoWebService.java``\ ）
+* Domain Object（ソース例では\ ``Todo.java``\ ）
+
+| wsimportで生成したクラスを1つのクライアントプロジェクトのみでしか使用しない場合は、これらをdomainプロジェクトへ配置すればよい。
+| 生成したクラスはインフラストラクチャ層(\ :ref:`application-layering_Integration-System-Connector`\ )に所属するが、\ :ref:`application-layering_project-structure`\ のNoteで示したように通常はdomainプロジェクトに含めても問題ない。
+| 生成したクラスを複数のクライアントで使用する場合は、\ :ref:`SOAPAppendixAddProject`\ をもとに、modelプロジェクトとwebserviceプロジェクトを作成し、それぞれのクライアントから参照して使用することが望ましい。
+
+.. note::
+
+    出力されるJavaクラスは上記以外にも出力される。出力されたソースのみでクライアントを作成可能なソースである。ただし、本ガイドラインではクライアントは、\ ``org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean``\ を使用する方針であるため、その他のJavaクラスは使用しないことを推奨する。
+
+|
+
+.. _SOAPAppendixTomcatWebService:
+
+Tomcat上でのWebサービス開発
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| 本ガイドラインでは、Java EEサーバ上のJAX-WSを使う前提で記述されているが、Tomcatの場合、JAX-WS実装が存在しない。
+| そのため、ここではSOAPサーバがTomcatの場合、JAX-WSの実装プロダクトとして\ `Apache CXF <https://cxf.apache.org/>`_\ を使用する。設定を変更して\ ``CXFServlet``\ を使用する必要がある。
+| Apache CXFを使用する場合は、WebServiceクラスの実装方式は以下の2つが存在する。
+
+#. POJOでWebサービス実装クラスを記述する方式
+#. \ ``SpringBeanAutowiringSupport``\を継承してWebサービス実装クラスを作成する方式 (これまで説明してきた方法)
+
+| 1の場合、Webサービス実装クラスがPOJOになるため、単体試験などをしやすくなる。ただし、この方式はTomcat以外のAPサーバでは、うまく動作しないことがある。そのため、ガイドライン本体では、この方式ではなく2の方式での実現を記述しているが、Tomcatのみを使用する場合、この1の方式を使用したほうがメリットが多いのでこちらを推奨する。
+| 2の場合、他のAPサーバ同様に実装をすることができる。運用はJava EEサーバであるが、開発中はTomcatを使用せざるをえないケースではこちらの方式を利用されたい。
+
+|
+
+CXFServletを使用する場合の設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``CXFServlet``\ を使用するため、\ ``pom.xml``\ にライブラリの設定を記述する。
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <dependency>
+        <groupId>org.apache.cxf</groupId>
+        <artifactId>cxf-rt-frontend-jaxws</artifactId>
+        <version>3.1.4</version>
+    </dependency>
+    <dependency>
+        <groupId>org.apache.cxf</groupId>
+        <artifactId>cxf-rt-transports-http</artifactId>
+        <version>3.1.4</version>
+    </dependency>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``CXFServlet``\ を使用するため、Apache CXFライブラリへの依存関係を追加する。
+
+|
+
+次に\ ``web.xml``\ にSOAP Web Serviceを受け付ける\ ``CXFServlet``\ を定義する。
+
+.. code-block:: xml
+      
+    <!-- (1) -->
+    <servlet>
+        <servlet-name>cxfServlet</servlet-name>
+        <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
+        <init-param>
+            <param-name>config-location</param-name>
+            <param-value>classpath:/META-INF/spring/cxf-servlet.xml</param-value>
+        </init-param>
+        <load-on-startup>1</load-on-startup>
+    </servlet>
+    <!-- (2) -->
+    <servlet-mapping>
+        <servlet-name>cxfServlet</servlet-name>
+        <url-pattern>/ws/*</url-pattern>
+    </servlet-mapping>
+      
+      
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.apache.cxf.transport.servlet.CXFServlet``\ のサーブレット定義を行う。
+        | \ ``config-location``\ には、後述する\ ``cxf-servlet.xml``\ のパスを指定する。
+    * - | (2)
+      - | 定義したサーブレットへのマッピングを定義する。この場合、コンテキスト名/ws配下にWebサービスが作成される。
+
+|
+
+POJO方式で必要な設定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Webサービス実装クラスをエンドポイントとして設定する。
+
+
+*[server projectName]-web/src/main/resources/META-INF/spring/cxf-servlet.xml*
+
+.. code-block:: xml
+
+    <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xmlns:context="http://www.springframework.org/schema/context"
+        xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
+        xsi:schemaLocation="http://www.springframework.org/schema/beans
+             http://www.springframework.org/schema/beans/spring-beans.xsd
+             http://www.springframework.org/schema/context
+             http://www.springframework.org/schema/context/spring-context.xsd
+             http://cxf.apache.org/jaxws
+             http://cxf.apache.org/schemas/jaxws.xsd
+             http://cxf.apache.org/bindings/soap
+             http://cxf.apache.org/schemas/configuration/soap.xsd">
+
+        <!-- (1) -->
+        <jaxws:endpoint id="todoWebEndpoint" implementor="#todoWebServiceImpl"
+            address="/TodoWebService" />
+
+    </beans>
+      
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 公開するエンドポイントを定義する。
+        | \ ``implementor``\ 属性に、DIコンテナに登録済みのWebサービスクラスのbean名(「#bean名」形式)を指定する。
+        | \ ``address``\ 属性にWebサービスを公開するアドレスを指定する。
+        | アドレスは、公開するエンドポイントのパス部分のみ記述する。
+        | 属性の詳細については\ `Apache CXF JAX-WS Configuration <https://cwiki.apache.org/confluence/display/CXF20DOC/JAX-WS+Configuration>`_\ を参照されたい。
+
+
+|
+
+\ ``TodoWebServiceImpl``\ をPOJOとして作成する。
+
+*[server projectName]-web/src/main/java/com/example/ws/todo/TodoWebServiceImpl.java*
+
+.. code-block:: java
+
+    package com.example.ws.todo;
+
+    import java.util.List;
+
+    import javax.inject.Inject;
+    import javax.jws.HandlerChain;
+    import javax.jws.WebService;
+    import javax.xml.ws.BindingType;
+    import javax.xml.ws.soap.SOAPBinding;
+
+    import org.springframework.web.context.support.SpringBeanAutowiringSupport;
+
+    import org.springframework.stereotype.Component;
+
+    import com.example.domain.model.Todo;
+    import com.example.domain.service.TodoService;
+    import com.example.ws.webfault.WebFaultException;
+    import com.example.ws.exception.WsExceptionHandler;
+    import com.example.ws.todo.TodoWebService;
+
+    // (1)
+    @Component
+    @WebService(
+          portName = "TodoWebPort",
+          serviceName = "TodoWebService",
+          targetNamespace = "http://example.com/todo",
+          endpointInterface = "com.example.ws.todo.TodoWebService")
+    @BindingType(SOAPBinding.SOAP12HTTP_BINDING)
+    // (2)
+    public class TodoWebServiceImpl implements TodoWebService {
+
+        // omitted
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@Component`` \を付けて、DIコンテナへの登録を行う。
+        |
+    * - | (2)
+      - | コンポーネントスキャンにてDIコンテナへの登録が可能であるため、POJOとして作成する。つまり、\ ``org.springframework.web.context.support.SpringBeanAutowiringSupport``\を継承する必要がなくなる。
+        |
+
+|
+
+SpringBeanAutowiringSupportを継承する方式で必要な設定
+"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+CXFServlet用のBean定義ファイルに、SOAPのエンドポイントとなるクラス名およびアドレスを定義する。
+
+*[server projectName]-web/src/main/resources/META-INF/spring/cxf-servlet.xml*
+
+.. code-block:: xml
+
+    <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+        xmlns:context="http://www.springframework.org/schema/context"
+        xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:soap="http://cxf.apache.org/bindings/soap"
+        xsi:schemaLocation="http://www.springframework.org/schema/beans
+             http://www.springframework.org/schema/beans/spring-beans.xsd
+             http://www.springframework.org/schema/context
+             http://www.springframework.org/schema/context/spring-context.xsd
+             http://cxf.apache.org/jaxws
+             http://cxf.apache.org/schemas/jaxws.xsd
+             http://cxf.apache.org/bindings/soap
+             http://cxf.apache.org/schemas/configuration/soap.xsd">
+        <!-- (1) -->
+        <jaxws:endpoint id="todoWebEndpoint" implementor="com.example.ws.todo.TodoWebServiceImpl"
+            address="/TodoWebService" />
+
+    </beans>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 公開するエンドポイントを定義する。
+        | \ ``implementor``\ 属性に公開するWebサービスの実装クラスを指定する。
+        | \ ``address``\ 属性にWebサービスを公開するアドレスを指定する。
+        | アドレスは、公開するエンドポイントのパス部分のみ記述する。
+        | 属性の詳細については\ `Apache CXF JAX-WS Configuration`_\ を参照されたい。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/ArchitectureInDetail/Utilities/DateAndTime.rst b/source/ArchitectureInDetail/Utilities/DateAndTime.rst
new file mode 100755
index 0000000000..e8e7f41446
--- /dev/null
+++ b/source/ArchitectureInDetail/Utilities/DateAndTime.rst
@@ -0,0 +1,816 @@
+日付操作(JSR-310 Date and Time API)
+--------------------------------------------------------------------------------
+
+.. only:: html
+
+ .. contents:: 目次
+    :depth: 4
+    :local:
+
+|
+
+Overview
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| 本ガイドラインでは、``java.util.Date`` , ``java.util.Calender`` に比べて、
+| 様々な日時計算が提供されている JSR-310 Date and Time API の使用を推奨する。
+
+    .. note::
+
+        JSR-310 Date and Time APIはJava8から導入されたため、
+        Java8未満の環境は、Joda Timeの利用を推奨している。
+        Joda Timeの利用方法は、 :doc:`./JodaTime` を参照されたい。
+
+
+How to use
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+| Date and Time APIでは、日付のみ扱うクラス、時刻のみ扱うクラスなど、用途に応じた様々なクラスが提供されている。
+| 本ガイドラインでは、``java.time.LocalDate`` , ``java.time.LocalTime`` , ``java.time.LocalDateTime`` を中心に説明を進めるが、主要な日時操作については、各クラスで提供されるメソッドの接頭辞が同一であるため、適時クラス名を置き換えて解釈されたい。
+| 主に使われるクラスとメソッドを示す。
+|
+| **日時を扱う主なクラス**
+
+.. list-table::
+   :header-rows: 1
+   :widths: 30 35 35
+
+   * - クラス名
+     - 説明
+     - 主なファクトリメソッド
+   * - | `java.time.LocalDate <https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html>`_
+       | `java.time.LocalTime <https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html>`_
+       | `java.time.LocalDateTime <https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html>`_
+     - タイムゾーン・時差の情報を持たない日付・時刻の操作を行うクラス
+     - | ``now`` 現在日時で生成
+       | ``of``  任意日時で生成
+       | ``parse`` 日時文字列から生成
+       | ``from``  日時情報を持つ他オブジェクトから生成
+   * - | `java.time.OffsetTime <https://docs.oracle.com/javase/8/docs/api/java/time/OffsetTime.html>`_
+       | `java.time.OffsetDateTime <https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html>`_
+       | `java.time.ZonedDateTime <https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html>`_
+     - タイムゾーン・時差を考慮した日付・時刻の操作を行うクラス
+     - 同上
+   * - | `java.time.chrono.JapaneseDate <https://docs.oracle.com/javase/8/docs/api/java/time/chrono/JapaneseDate.html>`_
+     - 和暦の操作を行うクラス
+     - 同上
+     
+|
+| **期間の情報を扱う主なクラス**
+
+.. list-table::
+   :header-rows: 1
+   :widths: 30 35 35
+   
+   * - クラス名
+     - 説明
+     - 主なファクトリメソッド
+   * - | `java.time.Period <https://docs.oracle.com/javase/8/docs/api/java/time/Period.html>`_
+       | `java.time.Duration <https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html>`_
+     - 日時ベース、時間ベースの期間を扱うクラス
+     - | ``between`` 日時情報を持つ2つのオブジェクトの差から生成
+       
+       | ``from`` 時間量を持つ他オブジェクトから生成
+       
+       | ``of`` 任意期間で生成
+
+|
+| **フォーマットを扱うクラス**
+
+.. list-table::
+   :header-rows: 1
+   :widths: 30 35 35
+   
+   * - クラス名
+     - 説明
+     - 主なファクトリメソッド
+   * - | `java.time.format.DateTimeFormatter <https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html>`_
+     - 日時のフォーマットに関する操作を行うクラス
+     - | ``ofPattern`` 指定されたパターンでフォーマッタを生成
+
+
+|
+| 各クラス・メソッドの具体的な利用方法を、以下で説明する。
+|
+
+    .. note::
+
+        本ガイドラインで触れなかった内容を含め、詳細は `Javadoc <https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html>`_ を参照されたい。
+
+
+    .. note::
+
+         Date and Time APIのクラスは、immutableである(日時計算等の結果は、新規オブジェクトであり、計算元オブジェクトに変化は起きない)。
+
+日時取得
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+現在日時で取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 利用用途に合わせて、 ``java.time.LocalTime`` , ``java.time.LocalDate`` , ``java.time.LocalDateTime``  を使い分けること。以下に例を示す。
+
+1. 時刻のみ取得したい場合は、 ``java.time.LocalTime`` を使用する。
+
+.. code-block:: java
+
+   LocalTime localTime =  LocalTime.now();
+
+2. 日付のみ取得したい場合は ``java.time.LocalDate`` を使用する。
+
+.. code-block:: java
+
+   LocalDate localDate =  LocalDate.now();
+
+3. 日付・時刻を取得したい場合は、、 ``java.time.LocalDateTime`` を使用する。
+
+.. code-block:: java
+
+   LocalDateTime localDateTime = LocalDateTime.now();
+
+
+|
+
+
+年月日時分秒を指定して取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| ofメソッドを使うことで、特定の日時を指定することができる。以下に例を示す。
+
+1. 時刻を指定して、 ``java.time.LocalTime`` を取得する。
+
+.. code-block:: java
+
+   // 23:30:59
+   LocalTime localTime =  LocalTime.of(23, 30, 59);
+
+2. 日付を指定して ``java.time.LocalDate`` を取得する。
+
+.. code-block:: java
+
+   // 2015/12/25
+   LocalDate localDate =  LocalDate.of(2015, 12, 25);
+
+3. 日付・時刻）を指定して、 ``java.time.LocalDateTime`` を取得する。
+
+.. code-block:: java
+
+   // 2015/12/25 23:30:59
+   LocalDateTime localDateTime = LocalDateTime.of(2015, 12, 25, 23, 30, 59);
+
+|
+| また、``java.time.temporal.TemporalAdjusters`` を使うことで様々な日時を取得することができる。
+
+.. code-block:: java
+
+   // LeapYear(2012/2)
+   LocalDate localDate1 = LocalDate.of(2012, 2, 1);
+   
+   // Last day of month(2012/2/29)
+   LocalDate localDate2 = localDate1.with(TemporalAdjusters.lastDayOfMonth());
+   
+   // Next monday（2012/2/6）
+   LocalDate localDate3 = localDate1.with(TemporalAdjusters.next(DayOfWeek.MONDAY));
+
+
+.. note::
+
+    ``java.util.Calendar`` の仕様とは異なり、Monthは 1 始まりである。
+
+
+タイムゾーンを指定する場合の日時取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 国際的なアプリケーションを作成する場合、タイムゾーンを意識した設計を行う場合がある。
+| Date and Time APIでは、利用用途に合わせて、 ``java.time.OffsetTime`` , ``java.time.OffsetDateTime`` , ``java.time.ZonedDateTime``  を使い分けること。
+| 以下に例を示す。
+
+1. 時刻＋UTCとの時差を取得したい場合は、 ``java.time.OffsetTime`` を使用する。
+
+.. code-block:: java
+
+   // Ex, 12:30:11.567+09:00
+   OffsetTime offsetTime =  OffsetTime.now();
+
+2. 日付・時刻＋UTCとの時差を取得したい場合は、 ``java.time.OffsetDateTime`` を使用する。
+
+.. code-block:: java
+
+   // Ex, 2015-12-25T12:30:11.567+09:00
+   OffsetDateTime offsetDateTime =  OffsetDateTime.now();
+
+3. 日付・時刻＋UTCとの時差・地域を取得したい場合は、 ``java.time.ZonedDateTime`` を使用する。
+
+.. code-block:: java
+
+   // Ex, 2015-12-25T12:30:11.567+09:00[Asia/Tokyo]
+   ZonedDateTime zonedDateTime = ZonedDateTime.now();
+
+| また、これらのメソッドでは全て、タイムゾーンを表す ``java.time.ZoneId`` を引数に設定することで、タイムゾーンを考慮した現在日時が取得できる。
+| 以下に ``java.time.ZoneId`` の例を示す。
+
+.. code-block:: java
+
+   ZoneId zoneIdTokyo = ZoneId.of("Asia/Tokyo");
+   OffsetTime offsetTime =  OffsetTime.now(zoneIdTokyo);
+
+| なお、 ``java.time.ZoneId`` は地域名/地名形式で定義する方法や、UTCからの時差で定義する方法がある。
+
+.. code-block:: java
+
+   ZoneId.of("Asia/Tokyo");
+   ZoneId.of("UTC+01:00");
+   
+|
+
+| ``java.time.OffsetDateTime`` , ``java.time.ZonedDateTime`` の2クラスは用途が似ているが、具体的には以下のような違いがある。
+| 作成するシステムの特性に応じて適切なクラスを選択されたい。
+
+.. list-table::
+   :header-rows: 1
+   :widths: 50 50
+   
+   * - クラス名
+     - 説明
+   * - | ``java.time.OffsetDateTime``
+     - 定量値（時差のみ）を持つため、各地域の時間の概念に変化がある場合も、システムに変化が起こらない。
+   * - | ``java.time.ZonedDateTime``
+     - 時差に加えて地域の概念があるため、各地域の時間の概念に変化があった場合、システムに変化が起こる。（政策としてサマータイム導入される場合など）
+
+期間
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+期間の取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+| 日付ベースの期間を扱う場合は、 ``java.time.Period`` 、時間ベースの期間を扱う場合は、 ``java.time.Duration`` を使用する。
+| ``java.time.Duration`` で表される1日は厳密に24時間であるため、サマータイムの変化が解釈されずに想定通りの結果にならない可能性がある。
+| 対して、 ``java.time.Period`` はサマータイムなどの概念を考慮した1日を表すため、サマータイムを扱うシステムであっても誤差は生じない。
+| 以下に例を示す。
+
+.. code-block:: java
+
+   LocalDate date1 = LocalDate.of(2010, 01, 15);
+   LocalDate date2 = LocalDate.of(2011, 03, 18);
+   LocalTime time1 = LocalTime.of(11, 50, 50);
+   LocalTime time2 = LocalTime.of(12, 52, 53);
+   
+   // One year, two months and three days.
+   Period pd = Period.between(date1, date2);
+   
+   // One hour, two minutes and three seconds.
+   Duration dn = Duration.between(time1, time2); 
+
+|
+
+    .. note::
+
+        ``of`` メソッドを利用して、期間を指定して生成する方法もある。詳細は `Period, DurationのJavadoc <https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html>`_ を参照されたい。
+
+型変換
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Date and Time APIの各クラスの相互運用性
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| ``java.time.LocalTime`` , ``java.time.LocalDate`` , ``java.time.LocalDateTime`` はそれぞれ容易に変換が可能である。以下に例を示す。
+
+1. ``java.time.LocalTime`` から、 ``java.time.LocalDateTime`` への変換。
+
+.. code-block:: java
+
+   // Ex. 12:10:30
+   LocalTime localTime =  LocalTime.now();
+   
+   // 2015-12-25 12:10:30
+   LocalDateTime localDateTime = localTime.atDate(LocalDate.of(2015, 12, 25));
+
+2. ``java.time.LocalDate`` から、 ``java.time.LocalDateTime`` への変換。
+
+.. code-block:: java
+
+   // Ex. 2012-12-25
+   LocalDate localDate =  LocalDate.now();
+   
+   // 2015-12-25 12:10:30
+   LocalDateTime localDateTime = localDate.atTime(LocalTime.of(12, 10, 30));
+
+3. ``java.time.LocalDateTime`` から、 ``java.time.LocalTime`` ,  ``java.time.LocalDate`` への変換。
+
+.. code-block:: java
+
+   // Ex. 2015-12-25 12:10:30
+   LocalDateTime localDateTime =  LocalDateTime.now();
+   
+   // 12:10:30
+   LocalTime localTime =  localDateTime.toLocalTime();
+   
+   // 2012-12-25
+   LocalDate localDate =  localDateTime.toLocalDate();
+   
+|
+| 同様に、``java.time.OffsetTime`` , ``java.time.OffsetDateTime`` , ``java.time.ZonedDateTime`` もそれぞれ容易に変換が可能である。以下に例を示す。
+
+1. ``java.time.OffsetTime`` から、 ``java.time.OffsetDateTime`` への変換。
+
+.. code-block:: java
+
+   // Ex, 12:30:11.567+09:00
+   OffsetTime offsetTime =  OffsetTime.now();
+   
+   // 2015-12-25T12:30:11.567+09:00
+   OffsetDateTime OffsetDateTime = offsetTime.atDate(LocalDate.of(2015, 12, 25));
+
+2. ``java.time.OffsetDateTime`` から、 ``java.time.ZonedDateTime`` への変換。
+
+.. code-block:: java
+
+   // Ex, 2015-12-25T12:30:11.567+09:00
+   OffsetDateTime offsetDateTime =  OffsetDateTime.now();
+   
+   // 2015-12-25T12:30:11.567+09:00[Asia/Tokyo]
+   ZonedDateTime zonedDateTime = offsetDateTime.atZoneSameInstant(ZoneId.of("Asia/Tokyo"));
+
+3. ``java.time.ZonedDateTime`` から、 ``java.time.OffsetDateTime`` ,  ``java.time.OffsetTime`` への変換。
+
+.. code-block:: java
+
+   // Ex, 2015-12-25T12:30:11.567+09:00[Asia/Tokyo]
+   ZonedDateTime zonedDateTime =  ZonedDateTime.now();
+   
+   // 2015-12-25T12:30:11.567+09:00
+   OffsetDateTime offsetDateTime =  zonedDateTime.toOffsetDateTime();
+   
+   // 12:30:11.567+09:00
+   OffsetTime offsetTime =  zonedDateTime.toOffsetDateTime().toOffsetTime();
+   
+|
+| また、時差情報を加えることで、``java.time.LocalTime`` を ``java.time.OffsetTime`` に変換することも可能である。
+
+.. code-block:: java
+
+   // Ex, 12:30:11.567
+   LocalTime localTime =  LocalTime.now();
+   
+   // 12:30:11.567+09:00
+   OffsetTime offsetTime = localTime.atOffset(ZoneOffset.ofHours(9));
+
+|
+| この他についても、不足している情報（ ``LocalTime`` から ``LocalDateTime`` の変換であれば日付の情報が不足している の要領）を加えることで別のクラスへ変換が可能である。
+| 変換メソッドは接頭辞が ``at`` または ``to`` で始まる。詳細は `各クラスのJavadoc <https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html>`_ を参照されたい。
+
+java.util.Dateとの相互運用性
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+``java.time.LocalDate`` 等のクラスを、``java.util.Date`` に直接変換するメソッドは提供されていない。
+
+| ただし、Java8からは ``java.util.Date`` にDate and Time APIが提供する  ``java.time.Instant`` を変換するメソッドが追加されているため、``java.time.Instant`` を経由して変換を行うことが可能である。
+| 以下に例を示す。
+
+1. ``java.time.LocalDateTime`` から、 ``java.util.Date`` への変換。
+
+.. code-block:: java
+
+   LocalDateTime localDateTime = LocalDateTime.now();
+   Instant instant = localDateTime.toInstant(ZoneOffset.ofHours(9));
+   Date date = Date.from(instant);
+
+2. ``java.util.Date`` から、 ``java.time.LocalDateTime`` への変換。
+
+.. code-block:: java
+
+   Date date = new Date();
+   Instant instant = date.toInstant();
+   LocalDateTime localDateTime = LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
+
+|
+
+    .. note::
+
+        ``java.time.LocalTime`` , ``java.time.LocalDate`` はInstant値を持たないため、一度 ``java.time.LocalDateTime`` に変換する必要がある。
+
+java.sql パッケージとの相互運用性
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| Java8 より ``java.sql`` パッケージに改修が入り、 ``java.time`` パッケージとの相互変換メソッドが定義された。
+| 以下に例を示す。
+
+1. ``java.sql.Date`` から、 ``java.time.LocalDate`` への変換。
+
+.. code-block:: java
+
+   java.sql.Date date =  new java.sql.Date(System.currentTimeMillis());
+   LocalDate localDate = date.toLocalDate();
+
+2. ``java.time.LocalDate`` から、 ``java.sql.Date`` への変換。
+
+.. code-block:: java
+
+   LocalDate localDate = LocalDate.now();
+   java.sql.Date date =  java.sql.Date.valueOf(localDate);
+   
+3. ``java.sql.Time`` から、 ``java.time.LocalTime`` への変換。
+
+.. code-block:: java
+
+   java.sql.Time time =  new java.sql.Time(System.currentTimeMillis());
+   LocalTime localTime = time.toLocalTime();
+
+4. ``java.time.LocalTime`` から、 ``java.sql.Time`` への変換。
+
+.. code-block:: java
+
+   LocalTime localTime = LocalTime.now();
+   java.sql.Time time =  java.sql.Time.valueOf(localTime);
+
+
+5. ``java.sql.Timestamp`` から、 ``java.time.LocalDateTime`` への変換。
+
+.. code-block:: java
+
+   java.sql.Timestamp timestamp =  new java.sql.Timestamp(System.currentTimeMillis());
+   LocalDateTime localDateTime = timestamp.toLocalDateTime();
+
+6. ``java.time.LocalDateTime`` から、 ``java.sql.Timestamp`` への変換。
+
+.. code-block:: java
+
+   LocalDateTime localDateTime = LocalDateTime.now();
+   java.sql.Timestamp timestamp =  java.sql.Timestamp.valueOf(localDateTime);
+
+org.terasoluna.gfw.common.date パッケージの利用方法
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 現在、Date and Time API用のDate Factoryは共通ライブラリから提供されていない。（参照： :doc:`../SystemDate` ）
+| ただし、暫定対処として、 ``org.terasoluna.gfw.common.date.ClassicDateFactory`` と ``java.sql.Date`` を利用することで、 ``java.time.LocalDate`` を生成できる。
+| ``java.time.LocalTime`` , ``java.time.LocalDateTime`` クラスに関しても、 ``java.time.LocalDate`` から変換することで生成できる。
+| 以下に例を示す。
+
+**bean定義ファイル([projectname]-env.xml)**
+
+.. code-block:: xml
+
+    <bean id="dateFactory" class="org.terasoluna.gfw.common.date.DefaultClassicDateFactory" />
+
+**Javaクラス**
+
+.. code-block:: java
+
+   @Inject
+   ClassicDateFactory dateFactory;
+   
+   public DateFactorySample getSystemDate() {
+
+    java.sql.Date date = dateFactory.newSqlDate();
+    LocalDate localDate = date.toLocalDate();
+
+    // omitted
+   }
+   
+|
+
+    .. note::
+
+        Date and Time APIに対応したDate Factoryは今後追加予定である。
+
+
+文字列へのフォーマット
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 日時情報を持つオブジェクトを文字列に変換するには、``toString`` メソッドを使用する方法と、``java.time.fomat.DateTimeFormatter`` を使用する方法がある。
+| 任意の日時文字列で出力したい場合は、``java.time.fomat.DateTimeFormatter`` を使用し様々な日時文字列へ変換することが出来る。
+|
+| ``java.time.fomat.DateTimeFormatter`` は、事前定義されたISOパターンのフォーマッタを利用する方法と、任意のパターンのフォーマットを定義して利用する方法がある。
+
+.. code-block:: java
+
+   DateTimeFormatter formatter1 = DateTimeFormatter.BASIC_ISO_DATE;
+                                             
+   DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("G uuuu/MM/dd E")
+                                             .withLocale(Locale.JAPANESE)
+                                             .withResolverStyle(ResolverStyle.STRICT);
+
+| この際、文字列の形式の他に ``Locale`` と ``ResolverStyle`` （厳密性）を定義できる。
+| ``Locale`` のデフォルト値はシステムによって変化するため、初期化時に設定することが望ましい。
+| また、 ``ResolverStyle`` （厳密性）は ``ofPattern`` メソッドを使う場合、デフォルトで ``ResolverStyle.SMART`` が設定されるが、本ガイドラインでは予期せぬ挙動が起こらないよう、厳密に日付を解釈する ``ResolverStyle.STRICT`` の設定を推奨している。（ISOパターンのフォーマッタを利用する場合は ``ResolverStyle.STRICT`` が設定されている)
+|
+| なお、Date and Time API では書式 ``yyyy`` は暦に対する年を表すため、暦によって解釈が異なる(西暦なら2015と解釈されるが、和暦なら0027と解釈される）。
+| 西暦を表したい場合は、 ``yyyy`` 形式に変えて ``uuuu`` 形式を利用することを推奨する。定義されている書式一覧は `DateTimeFormatter <http://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns>`_ を参照されたい。
+|
+| 以下に例を示す。
+
+
+.. code-block:: java
+
+   DateTimeFormatter formatter1 = DateTimeFormatter.BASIC_ISO_DATE;
+                                             
+   DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("G uuuu/MM/dd E")
+                                             .withLocale(Locale.JAPANESE)
+                                             .withResolverStyle(ResolverStyle.STRICT);
+      
+   LocalDate localDate1 = LocalDate.of(2015, 12, 25);
+   
+   // "2015-12-25"
+   System.out.println(localDate1.toString()); 
+   // "20151225"
+   System.out.println(formatter1.format(localDate1));
+   // "西暦 2015/12/25 金"
+   System.out.println(formatter2.format(localDate1));
+
+|
+| また、これらの文字列を画面上に表示したい場合、
+| Date and Time APIでは、Joda Timeと異なり、専用のJSPタグは存在していない。
+| JSTLの ``fmt:formatDate`` タグは、``java.util.Date`` と、 ``java.util.TimeZone`` オブジェクトのみを扱うため、
+| JSP上でDate and Time APIのオブジェクトが持つ日時情報を表示する場合は、フォーマット済みの文字列を渡して表示する。
+
+**Controllerクラス**
+
+.. code-block:: java
+
+  @Controller
+  public class HomeController {
+
+      @RequestMapping(value = "/", method = {RequestMethod.GET, RequestMethod.POST})
+      public String home(Model model, Locale locale) {
+      
+          DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("uuuu/MM/dd")
+                                             .withLocale(locale)
+                                             .withResolverStyle(ResolverStyle.STRICT);
+                                                       
+          LocalDate localDate1 = LocalDate.now();
+
+          model.addAttribute("currentDate", localDate1.toString());
+          model.addAttribute("formattedCurrentDateString", dateFormatter.format(localDate1));
+
+      // omitted
+
+      }
+  }
+  
+**jspファイル**
+
+.. code-block:: jsp
+
+  <p>currentDate =  ${f:h(currentDate)}.</p>
+  <p>formattedCurrentDateString =  ${f:h(formattedCurrentDateString)}.</p>
+
+**出力結果例(html)**
+
+.. code-block:: html
+
+  <p>currentDate =  2015-12-25.</p>
+  <p>formattedCurrentDateString =  2015/12/25.</p>
+
+
+文字列からのパース
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 文字列への変換と同様に、``java.time.fomat.DateTimeFormatter`` を用いることで、様々な日付文字列をDate and Time APIのクラスへ変換することが出来る。
+| 以下に例を示す。
+
+.. code-block:: java
+
+   DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("uuuu/MM/dd")
+                                              .withLocale(Locale.JAPANESE)
+                                              .withResolverStyle(ResolverStyle.STRICT);
+   
+   DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("HH:mm:ss")
+                                              .withLocale(Locale.JAPANESE)
+                                              .withResolverStyle(ResolverStyle.STRICT);
+
+   LocalDate localDate = LocalDate.parse("2015/12/25", formatter1);
+   LocalTime localTime = LocalDate.parse("14:09:20", formatter2);
+ 
+|
+
+日付操作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| Date and Time APIでは、日時の計算や比較などを容易に行うことが出来る。
+| 以下に例を示す。
+
+
+
+
+日時の計算
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+
+| 日時の計算をするために、 ``plus`` メソッドと ``minus`` メソッドが提供されている。
+
+
+1. 時間の計算を行う場合の例。
+
+.. code-block:: java
+
+   LocalTime localTime =  LocalTime.of(20, 30, 50);
+   LocalTime plusHoursTime = localTime.plusHours(2);
+   LocalTime plusMinutesTime = localTime.plusMinutes(10);
+   LocalTime minusSecondsTime = localTime.minusSeconds(15);
+
+2. 日付の計算を行う場合の例。
+
+.. code-block:: java
+
+   LocalDate localDate =  LocalDate.of(2015, 12, 25);
+   LocalDate plusYearsDate = localDate.plusYears(10);
+   LocalDate minusMonthsTime = localDate.minusMonths(1);
+   LocalDate plusDaysTime = localDate.plusDays(3);
+
+
+|
+
+    .. note::
+
+        ``plus`` メソッドに負数を渡すと、 ``minus`` メソッドを利用した場合と同様の結果が得られる。 ``minus`` メソッドも同様。
+
+
+
+日時の比較
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| Date and Time APIでは、過去・未来・同時などの時系列の比較が行える。
+| 以下に例を示す。
+
+1. 時間の比較を行う場合の例。
+
+.. code-block:: java
+
+   LocalTime morning =  LocalTime.of(7, 30, 00);
+   LocalTime daytime =  LocalTime.of(12, 00, 00);
+   LocalTime evening =  LocalTime.of(17, 30, 00);
+   
+   daytime.isBefore(morning); // false
+   morning.isAfter(evening); // true
+   evening.equals(LocalTime.of(17, 30, 00)); // true
+   
+   daytime.isBefore(daytime); // false
+   morning.isAfter(morning); // false
+
+2. 日付の比較を行う場合の例。
+
+.. code-block:: java
+
+   LocalDate may =  LocalDate.of(2015, 6, 1);
+   LocalDate june =  LocalDate.of(2015, 7, 1);
+   LocalDate july =  LocalDate.of(2015, 8, 1);
+   
+   may.isBefore(june); // true
+   june.isAfter(july); // false
+   july.equals(may); // false
+   
+   may.isBefore(may); // false
+   june.isAfter(june); // false
+   
+|
+| なお、Date and Time APIでは現在、Joda Timeの ``Interval`` に当たるクラスは存在しない。
+
+
+日時の判定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 以下に日時の判定の例を示す。
+
+
+1. 妥当な日時文字列かを判定したい場合、 ``java.time.format.DateTimeParseException`` の発生有無で判定できる。
+
+.. code-block:: java
+
+   String strDateTime = "aabbcc";
+   DateTimeFormatter timeFormatter  = DateTimeFormatter.ofPattern("HHmmss")
+                                 .withLocale(Locale.JAPANESE)
+                                 .withResolverStyle(ResolverStyle.STRICT);;
+                                 
+   DateTimeFormatter dateFormatter  = DateTimeFormatter.ofPattern("uuMMdd")
+                                 .withLocale(Locale.JAPANESE)
+                                 .withResolverStyle(ResolverStyle.STRICT);;
+
+   try {
+       // DateTimeParseException
+       LocalTime localTime = LocalTime.parse(strDateTime, timeFormatter);
+   }
+   catch (DateTimeParseException e) {
+       System.out.println("Invalid time string !!");
+   }
+   
+   try {
+       // DateTimeParseException
+       LocalDate localDate = LocalDate.parse(strDateTime, dateFormatter);
+   }
+   catch (DateTimeParseException e) {
+       System.out.println("Invalid date string !!");
+   }
+
+
+
+2. うるう年かを判定したい場合、``java.time.LocalDate`` の ``isLeapYear`` メソッドで判定できる。
+
+.. code-block:: java
+
+   LocalDate date1 = LocalDate.of(2012, 1, 1);
+   LocalDate date2 = LocalDate.of(2015, 1, 1);
+   
+   date1.isLeapYear(); // true
+   date2.isLeapYear(); // false
+
+
+年月日時分秒の取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 年月日時分秒をそれぞれ取得したい場合は、 ``get`` メソッドを利用する。
+| 以下に日付に関する情報を取得する例を示す。
+
+.. code-block:: java
+
+   LocalDate localDate = LocalDate.of(2015, 2, 1);
+   
+   // 2015
+   int year = localDate.getYear();
+   
+   // 2
+   int month = localDate.getMonthValue();
+   
+   // 1
+   int dayOfMonth = localDate.getDayOfMonth();
+
+   // 32 ( day of year )
+   int dayOfYear = localDate.getDayOfYear();
+
+
+和暦（JapaneseDate）
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| Date and Time APIでは、``java.time.chrono.JapaneseDate`` という、和暦を扱うクラスが提供されている。
+
+    .. note::
+
+        ``java.time.chrono.JapaneseDate`` は、グレゴリオ暦が導入された明治6年(西暦1873年)より前は利用できない。
+
+和暦の取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| ``java.time.LocalDate`` と同様に、 ``now`` メソッド,  ``of`` メソッドで取得できる。
+| また、``java.time.chrono.JapaneseEra`` クラスを使うことで、和暦を指定した取得も行うことが出来る。
+
+| 以下に例を示す。
+
+.. code-block:: java
+
+   JapaneseDate japaneseDate1 = JapaneseDate.now();
+   JapaneseDate japaneseDate2 = JapaneseDate.of(2015, 12, 25); 
+   JapaneseDate japaneseDate3 = JapaneseDate.of(JapaneseEra.HEISEI, 27, 12, 25); 
+
+| 明治6年より前を引数に指定すると例外が発生する。
+
+.. code-block:: java
+
+   // DateTimeException
+   JapaneseDate japaneseDate = JapaneseDate.of(1500, 1, 1);
+  
+文字列へのフォーマット
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| ``java.time.fomat.DateTimeFormatter`` を用いることで、和暦日付へ変換することが出来る。利用の際には、 ``DateTimeFormatter#withChronology`` メソッドで暦を ``java.time.chrono.JapaneseChronology`` に設定する。
+| 和暦日付でも様々なフォーマットを扱うことが出来るため、0埋めや空白埋めなど要件に応じた出力が行える。
+| 以下に空白埋めで和暦を表示する例を示す。
+
+.. code-block:: java
+
+   DateTimeFormatter formatter = DateTimeFormatter.ofPattern("Gppy年ppM月ppd日")
+                                    .withLocale(Locale.JAPANESE)
+                                    .withResolverStyle(ResolverStyle.STRICT)
+                                    .withChronology(JapaneseChronology.INSTANCE);
+                                              
+   JapaneseDate japaneseDate = JapaneseDate.of(1992, 1, 1);
+   
+   // "平成 4年 1月 1日"
+   System.out.println(formatter.format(japaneseDate));
+
+
+文字列からのパース
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| ``java.time.fomat.DateTimeFormatter`` を用いることで、和暦文字列から ``java.time.chrono.JapaneseDate`` へ変換することが出来る。
+| 以下に例を示す。
+
+.. code-block:: java
+
+   DateTimeFormatter formatter = DateTimeFormatter.ofPattern("Gy年MM月dd日")
+                                   .withLocale(Locale.JAPANESE)
+                                   .withResolverStyle(ResolverStyle.STRICT)
+                                   .withChronology(JapaneseChronology.INSTANCE);
+                                        
+   JapaneseDate japaneseDate1 = JapaneseDate.from(formatter.parse("平成27年12月25日"));
+   JapaneseDate japaneseDate2 = JapaneseDate.from(formatter.parse("明治6年01月01日"));
+
+
+西暦・和暦の変換
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| fromメソッドを使うことで、``java.time.LocalDate`` からの変換を容易に行える。
+
+.. code-block:: java
+
+   LocalDate localDate = LocalDate.of(2015, 12, 25);
+   JapaneseDate jpDate = JapaneseDate.from(localDate);
+
+
diff --git a/source/ArchitectureInDetail/Utilities/JodaTime.rst b/source/ArchitectureInDetail/Utilities/JodaTime.rst
index 34aa60c8ce..82534f6fb7 100755
--- a/source/ArchitectureInDetail/Utilities/JodaTime.rst
+++ b/source/ArchitectureInDetail/Utilities/JodaTime.rst
@@ -772,3 +772,54 @@ JSP(calendar.jsp)で、次のように出力する。
 
    \newpage
 
+Appendix
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Java8未満の和暦操作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| Java8では ``java.time.chrono.JapaneseDate`` という和暦操作クラスが提供されているが、Java8未満の環境では ``java.util.Calendar`` クラスで和暦を扱うことが出来る。
+| 具体的には、 ``java.util.Calendar`` クラス、 ``java.text.DateFormat`` クラスに以下の ``java.util.Locale`` を指定する必要がある。
+
+.. code-block:: java
+
+   Locale locale = new Locale("ja", "JP", "JP");
+
+| 以下に、``Calendar`` クラスを利用した和暦表示の例を示す。
+
+.. code-block:: java
+
+   Locale locale = new Locale("ja", "JP", "JP");
+   Calendar cal = Calendar.getInstance(locale); // Ex, 2015-06-05
+   String format1 = "Gy.MM.dd";
+   String format2 = "GGGGyy/MM/dd";
+
+   DateFormat df1 = new SimpleDateFormat(format1, locale);
+   DateFormat df2 = new SimpleDateFormat(format2, locale);
+
+   df1.format(cal.getTime()); // "H27.06.05"
+   df2.format(cal.getTime()); // "平成27/06/05"
+
+| また、同様に文字列からのパースも行うことが出来る。
+
+.. code-block:: java
+
+   Locale locale = new Locale("ja", "JP", "JP");
+   String format1 = "Gy.MM.dd";
+   String format2 = "GGGGyy/MM/dd";
+   
+   DateFormat df1 = new SimpleDateFormat(format1, locale);
+   DateFormat df2 = new SimpleDateFormat(format2, locale);
+   
+   Calendar cal1 = Calendar.getInstance(locale);
+   Calendar cal2 = Calendar.getInstance(locale);
+
+   cal1.setTime(df1.parse("H27.06.05"));
+   cal2.setTime(df2.parse("平成27/06/05"));
+
+|
+
+    .. note::
+
+        | ``new Locale("ja", "JP", "JP")`` を ``getInstance`` メソッドに指定することで、 和暦に対応した ``java.util.JapaneseImperialCalendar`` オブジェクトが作成される。
+        | その他を指定すると ``java.util.GregorianCalendar`` オブジェクトが作成されるため、留意されたい。
diff --git a/source/ArchitectureInDetail/Utilities/StringProcessing.rst b/source/ArchitectureInDetail/Utilities/StringProcessing.rst
index c69555e592..a1be754be7 100755
--- a/source/ArchitectureInDetail/Utilities/StringProcessing.rst
+++ b/source/ArchitectureInDetail/Utilities/StringProcessing.rst
@@ -12,12 +12,168 @@
 Overview
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-| 
-|
+| Javaの文字列標準APIでは、日本語に特化した操作が少ない。
+| 全角カタカナ/半角カタカナの変換や、半角カタカナのみで構成される文字列の判定を行う場合などは、
+| 独自に処理を作りこむ必要がある。
+
+| また、Javaでは全ての文字列をUnicodeで表現するが、
+| Unicodeでは 𠮷 のような特殊文字は、サロゲートペアと呼ばれるchar型2つ（32ビット）で表される。
+| このような文字を扱う場合にも予期せぬ挙動が起きぬよう、様々な文字を扱うことを考慮した実装を行う必要がある。
+
+| 本ガイドラインでは、日本語を処理するケースを想定し、
+| 一般的な文字列操作の例と、共通ライブラリによる日本語操作APIの提供を行う。
 
 How to use
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
+トリム
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+| 半角空白のトリム操作を行う場合、``String#trim`` メソッドを利用することも出来るが、前・後ろのみのトリム操作や、任意の文字列のトリム操作などの複雑な操作を行う場合は、Springから提供されている ``org.springframework.util.StringUtils`` を利用するとよい。
+|
+| 以下に例を示す。
+|
+
+.. code-block:: java
+
+   String str = "  Hello World!!";
+
+   StringUtils.trimWhitespace(str); // => "Hello World!!"
+
+   StringUtils.trimLeadingCharacter(str, ' '); // => "Hello World!!"
+
+   StringUtils.trimTrailingCharacter(str, '!'); // => "  Hello World"
+
+.. note::
+  | ``StringUtils#trimLeadingCharacter`` , ``StringUtils#trimTrailingCharacter`` の第1引数にサロゲートペアの文字列は指定しても挙動に変化はない。なお、第2引数はchar型のため、サロゲートペアを指定することは出来ない。
+
+パディング・サプレス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+| パディング（文字列埋め）操作・サプレス（文字列取り）操作を行う場合は、
+| ``String`` クラスから提供されているメソッドで行うことが出来る。
+|
+| 以下に例を示す。
+
+.. code-block:: java
+
+   int num = 1;
+
+   String paddingStr = String.format("%03d", num); // => "001"
+   String suppressStr = paddingStr.replaceFirst("^0+(?!$)", ""); // => "1"
+
+.. warning::
+  | ``String#format`` はサロゲートペアを考慮できないため、見た目上の長さでパディングを行いたい場合、サロゲートペアが含まれると正しい結果が得られない。
+  | サロゲートペアを考慮してパディングを実現するためには、後述するサロゲートペアを考慮した文字数のカウントを行い、パディングすべき正しい文字数を算出して文字列結合を行う必要がある。
+
+サロゲートペアを考慮した文字列処理
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+
+文字列長の取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| サロゲートペアを考慮した文字列の長さを取得する場合、
+| 単に ``String#length`` メソッドを使用することは出来ない。
+| サロゲートペアは32ビット（char型2つ）で表現されるため、見た目上の文字数よりも多くカウントされてしまう。
+|
+| 下記例では、変数 ``len`` には5が代入される。
+
+.. code-block:: java
+
+   String str = "𠮷田太郎";
+   int len = str.length(); // => 5
+
+|
+| そこで、Java SE 5よりサロゲートペアを考慮した文字列の長さを取得するためのメソッド ``String#codePointCount`` が定義された。
+| ``String#codePointCount`` の引数に、対象文字列の開始インデックスと終了インデックスを指定することで、文字列長を取得することが出来る。
+|
+| 以下に例を示す。
+
+.. code-block:: java
+
+   String str = "𠮷田太郎";
+   int lenOfChar = str.length(); // => 5
+   int lenOfCodePoint = str.codePointCount(0, lenOfChar); // => 4
+
+|
+| また、Unicodeでは結合文字が存在する。
+| 「が」を表す ``\u304c`` と、「か」と「濁点」を表す ``\u304b\u3099`` は、見た目上の違いは存在しないが、「か」＋「濁点」の例は2文字としてカウントされてしまう。
+| こうした結合文字が入力されることも考慮して文字数をカウントする場合、 ``java.text.Normalizer`` を使用してテキストの正規化を行ってからカウントする。
+|
+| 以下に、結合文字とサロゲートペアを考慮をした上で、文字列の長さを返却するメソッドを示す。
+
+.. code-block:: java
+
+   public int getStrLength(String str) {
+     String normalizedStr  = Normalizer.normalize(str, Normalizer.Form.NFC);
+     int length = normalizedStr.codePointCount(0, normalizedStr.length());
+
+     return length;
+   }
+
+
+指定範囲の文字列取得
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+| 指定範囲の文字列を取得する場合、単に ``String#substring`` を利用すると、想定していない結果になる可能性がある。
+
+.. code-block:: java
+
+   String str = "𠮷田 太郎";
+   int startIndex = 0;
+   int endIndex = 2;
+   
+   String subStr = str.substring(startIndex, endIndex);
+
+   System.out.println(subStr); // => "𠮷"
+
+| 上記の例では、0文字目（先頭）から2文字を取り出し、 「𠮷田」 を取得しようと試みているが、サロゲートペアは32ビット（char型2つ）で表現されるため「𠮷」しか取得できない。
+| このような場合には、``String#offsetByCodePoints`` を利用し、サロゲートペアを考慮した開始位置と終了位置を求めてから ``String#substring`` メソッドを使う必要がある。
+|
+| 以下に、先頭から2文字（苗字部分）を取り出す例を示す。
+
+.. code-block:: java
+
+   String str = "𠮷田 太郎";
+   int startIndex = 0;
+   int endIndex = 2;
+
+   int startIndexSurrogate = str.offsetByCodePoints(0, startIndex); // => 0
+   int endIndexSurrogate = str.offsetByCodePoints(0, endIndex); // => 3
+
+   String subStrSurrogate = str.substring(startIndexSurrogate, endIndexSurrogate); // => "𠮷田"
+
+|
+
+文字列分割
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+| ``String#split`` メソッドは、サロゲートペアにデフォルトで対応している。
+| 以下に例を示す。
+
+
+.. code-block:: java
+
+   String str = "𠮷田 太郎";
+   
+   str.split(" "); // => {"𠮷田", "太郎"}
+
+|
+
+    .. note::
+      | サロゲートペアを区切り文字として、 ``String#split`` の引数に指定することも出来る。
+      
+    .. note::
+      | Java SE 7までの環境とJava SE 8で、 ``String#split`` に空文字を渡したときの挙動に変化があるため留意されたい。 参照： `Pattern#splitのJavadoc <http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#split-java.lang.CharSequence-int->`_
+      
+      .. code-block:: java
+      
+        String str = "ABC";
+        String[] elems = str.split("");
+        
+        // Java SE 7 => {, A, B, C}
+        // Java SE 8 => {A, B, C}
+
+
 全角・半角文字列変換
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
diff --git a/source/ArchitectureInDetail/Utilities/index.rst b/source/ArchitectureInDetail/Utilities/index.rst
index 6a1227c709..444befa116 100755
--- a/source/ArchitectureInDetail/Utilities/index.rst
+++ b/source/ArchitectureInDetail/Utilities/index.rst
@@ -4,6 +4,7 @@
    :maxdepth: 1
    
    Dozer
+   DateAndTime
    JodaTime
    StringProcessing
 
diff --git a/source/ArchitectureInDetail/Validation.rst b/source/ArchitectureInDetail/Validation.rst
index 7c0c9c90f9..0891fdbcd2 100755
--- a/source/ArchitectureInDetail/Validation.rst
+++ b/source/ArchitectureInDetail/Validation.rst
@@ -3789,28 +3789,6 @@ Hibernate Validatorの代表的なアノテーション(\ ``org.hibernate.valida
             @NotEmpty
             private String password;
 
-
-.. warning::
-
-    Hibernate Validatorから提供されている以下のアノテーションを使用した場合、
-    デフォルトで提供されているメッセージを使用するとメッセージが正しく生成されないバグ(\ `HV-881 <https://hibernate.atlassian.net/browse/HV-881>`_\ 、\ `HV-949 <https://hibernate.atlassian.net/browse/HV-949>`_\ )が存在する。
-
-    * \ ``@CreditCardNumber``\ (メッセージは表示されるがWARNログが出力される)
-    * \ ``@LuhnCheck``\
-    * \ ``@Mod10Check``\
-    * \ ``@Mod11Check``\
-    * \ ``@ModCheck``\ (5.1.0.Finalから非推奨API)
-
-    このバグは、デフォルトで提供されているメッセージ定義の不備が原因なので、
-    デフォルトで提供されているメッセージを適切なメッセージで上書きする事で回避可能である。
-
-    デフォルトで提供されているメッセージを上書きする場合は、
-    クラスパス直下(通常src/main/resources)に :file:`ValidationMessages.properties` を作成し、
-    適切なメッセージ定義を行えばよい。
-
-    適切なメッセージ定義については、
-    \ `Hibernate Validator 5.2系(次のマイナーバージョンアップ)に対して行われている修正内容 <https://github.com/hibernate/hibernate-validator/commit/5a9d7bae26bccb15229ae5612d67506a7a775b48#diff-762e02c90cfb2f00b0b2788486e3fd5e>`_\ を参照されたい。
-
 .. _Validation_default_message_in_hibernate_validator:
 
 Hibernate Validatorが用意するデフォルトメッセージ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPClientAndServerProjects.png b/source/ArchitectureInDetail/images_SOAP/SOAPClientAndServerProjects.png
new file mode 100755
index 0000000000..89deff92ff
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPClientAndServerProjects.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPClientClass.png b/source/ArchitectureInDetail/images_SOAP/SOAPClientClass.png
new file mode 100755
index 0000000000..4ed4f28791
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPClientClass.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPClientPackageExplorer.png b/source/ArchitectureInDetail/images_SOAP/SOAPClientPackageExplorer.png
new file mode 100755
index 0000000000..9160a530cc
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPClientPackageExplorer.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPClientProjects.png b/source/ArchitectureInDetail/images_SOAP/SOAPClientProjects.png
new file mode 100755
index 0000000000..20a92133d1
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPClientProjects.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPJAXWSArchitecture.png b/source/ArchitectureInDetail/images_SOAP/SOAPJAXWSArchitecture.png
new file mode 100755
index 0000000000..c1ddf83b6f
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPJAXWSArchitecture.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPModelNoProvide.png b/source/ArchitectureInDetail/images_SOAP/SOAPModelNoProvide.png
new file mode 100755
index 0000000000..1f4857d0d1
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPModelNoProvide.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPProcessFlow.png b/source/ArchitectureInDetail/images_SOAP/SOAPProcessFlow.png
new file mode 100755
index 0000000000..a8b35296e9
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPProcessFlow.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPServerAndClient.png b/source/ArchitectureInDetail/images_SOAP/SOAPServerAndClient.png
new file mode 100755
index 0000000000..165dabf6fe
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPServerAndClient.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPServerClass.png b/source/ArchitectureInDetail/images_SOAP/SOAPServerClass.png
new file mode 100755
index 0000000000..64877ee288
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPServerClass.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPServerPackageExplorer.png b/source/ArchitectureInDetail/images_SOAP/SOAPServerPackageExplorer.png
new file mode 100755
index 0000000000..0ed6bdff63
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPServerPackageExplorer.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPServerProjects.png b/source/ArchitectureInDetail/images_SOAP/SOAPServerProjects.png
new file mode 100755
index 0000000000..a493966bd4
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPServerProjects.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/SOAPURL.png b/source/ArchitectureInDetail/images_SOAP/SOAPURL.png
new file mode 100755
index 0000000000..86f797144e
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/SOAPURL.png differ
diff --git a/source/ArchitectureInDetail/images_SOAP/materialSOAP.pptx b/source/ArchitectureInDetail/images_SOAP/materialSOAP.pptx
new file mode 100755
index 0000000000..cb129024cd
Binary files /dev/null and b/source/ArchitectureInDetail/images_SOAP/materialSOAP.pptx differ
diff --git a/source/ArchitectureInDetail/index.rst b/source/ArchitectureInDetail/index.rst
index 7573b16c5b..c1da3060fb 100755
--- a/source/ArchitectureInDetail/index.rst
+++ b/source/ArchitectureInDetail/index.rst
@@ -23,6 +23,7 @@ TERASOLUNA Server Framework for Java (5.x)の機能詳細
    Ajax
    REST
    RestClient
+   SOAP
    FileUpload
    FileDownload
    Email
diff --git a/source/Overview/ApplicationLayering.rst b/source/Overview/ApplicationLayering.rst
index 63e679575f..2bad49607b 100755
--- a/source/Overview/ApplicationLayering.rst
+++ b/source/Overview/ApplicationLayering.rst
@@ -256,6 +256,8 @@ O/R Mapperは、Repositoryインタフェースの実装に用いられる。
 
 |
 
+.. _application-layering_Integration-System-Connector:
+
 Integration System Connector
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
diff --git a/source/Overview/FirstApplication.rst b/source/Overview/FirstApplication.rst
index 7c04f211dd..32cb123b96 100755
--- a/source/Overview/FirstApplication.rst
+++ b/source/Overview/FirstApplication.rst
@@ -146,7 +146,7 @@ Spring MVCの設定方法を理解するために、生成されたSpring MVCの
                 <bean
                     class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
                 <bean
-                    class="org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver" />
+                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
             </mvc:argument-resolvers>
         </mvc:annotation-driven>
 
diff --git a/source/TutorialREST/index.rst b/source/TutorialREST/index.rst
index a6a226dee3..0092256071 100755
--- a/source/TutorialREST/index.rst
+++ b/source/TutorialREST/index.rst
@@ -549,7 +549,7 @@ spring-mvc-rest.xmlの作成
                 <bean
                     class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
                 <bean
-                    class="org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver" />
+                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
             </mvc:argument-resolvers>
             <mvc:message-converters register-defaults="false">
                 <!-- (1) -->
@@ -660,20 +660,11 @@ REST API用のSpring Securityの定義追加
         <sec:http
             pattern="/api/v1/**"
             auto-config="true"
-            use-expressions="true"
             create-session="stateless">
-            <sec:headers />
+            <sec:csrf disabled="true"/>
         </sec:http>
 
-        <sec:http auto-config="true" use-expressions="true">
-            <sec:headers>
-                <sec:cache-control />
-                <sec:content-type-options />
-                <sec:hsts />
-                <sec:frame-options />
-                <sec:xss-protection />
-            </sec:headers>
-            <sec:csrf />
+        <sec:http auto-config="true">
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
             <sec:session-management />
@@ -731,6 +722,8 @@ REST API用のSpring Securityの定義追加
        | \ ``<sec:http>``\ 要素の\ ``pattern``\ 属性に、REST API用のリクエストパスのURLパターンを指定している。
        | 本チュートリアルでは\ ``/api/v1/``\ で始まるリクエストパスをREST API用のリクエストパスとして扱う。
        | また、\ ``create-session``\ 属性を\ ``stateless``\ とする事で、Spring Securityの処理でセッションが使用されなくなる。
+       | 
+       | CSRF対策を無効化するために、\ ``<sec:csrf>``\ 要素に \ ``disabled="true"``\ を指定している。
 
 |
 
diff --git a/source/TutorialTodo/index.rst b/source/TutorialTodo/index.rst
index fb8362212c..f56f7cc316 100755
--- a/source/TutorialTodo/index.rst
+++ b/source/TutorialTodo/index.rst
@@ -4011,7 +4011,7 @@ spring-mvc.xml
                 <bean
                     class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
                 <bean
-                    class="org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver" />
+                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
             </mvc:argument-resolvers>
         </mvc:annotation-driven>
 
@@ -4201,15 +4201,7 @@ spring-security.xml
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
         <sec:http pattern="/resources/**" security="none"/>
-        <sec:http auto-config="true" use-expressions="true">
-            <sec:headers>
-                <sec:cache-control />
-                <sec:content-type-options />
-                <sec:hsts />
-                <sec:frame-options />
-                <sec:xss-protection />
-            </sec:headers>
-            <sec:csrf />
+        <sec:http auto-config="true">
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
             <sec:session-management />
diff --git a/source_en/ArchitectureInDetail/DataAccessJpa.rst b/source_en/ArchitectureInDetail/DataAccessJpa.rst
index 71e1551148..26138c2639 100755
--- a/source_en/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source_en/ArchitectureInDetail/DataAccessJpa.rst
@@ -1807,11 +1807,11 @@ Amongst the entities matching the conditions, call a query method to fetch the e
 
     @RequestMapping("list")
     public String list(@RequestParam("targetDate") Date targetDate,
-                       @PageableDefaults(
-                           pageNumber = 0,
+                       @PageableDefault(
+                           page = 0,
                            value = 5,
                            sort = { "createdDate" },
-                           sortDir = Direction.DESC)
+                           direction = Direction.DESC)
                            Pageable pageable, // (2)
                        Model model) {
         Page<Order> accountPage = accountService.getAccounts(targetDate, pageable);
@@ -1976,7 +1976,7 @@ If no condition is specified, a blank list will be returned.
                 joinConditions.add("o.orderItems oi");
                 joinConditions.add("oi.item i");
                 andConditions.add("i.name LIKE :itemName ESCAPE '~'");
-                bindParameters.put("itemName", SqlUtils
+                bindParameters.put("itemName", QueryEscapeUtils
                         .toLikeCondition(criteria.getItemName()));
             }
 
@@ -2328,7 +2328,7 @@ Further, the description for fetching all records is omitted.
                 joinConditions.add("o.orderItems oi");
                 joinConditions.add("oi.item i");
                 andConditions.add("i.name LIKE :itemName ESCAPE '~'");
-                bindParameters.put("itemName", SqlUtils.toLikeCondition(criteria
+                bindParameters.put("itemName", QueryEscapeUtils.toLikeCondition(criteria
                         .getItemName()));
             }
 
@@ -4315,7 +4315,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
         | The WHERE clause should be specified in SQL instead of JPQL i.e. it is necessary to specify the column name instead of the property name of Java object.
     * - | (2)
       - | The condition specified with ``@Where`` annotation is added.
-
+      
 - Extending Dialect to register standard keywords such as ``true``, ``false`` and ``unknown``.
 
  .. code-block:: java
@@ -4363,7 +4363,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
       - Description
     * - | (3)
       - | The extended Dialect is set as the value of ``databasePlatform`` property in JPA Vendor Adapter of EntityManager.
-
+      
  .. note:: **Class that can be specified**
 
     ``@Where`` annotation is valid only in the class with ``@Entity``.
