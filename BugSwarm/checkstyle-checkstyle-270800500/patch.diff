diff --git a/pom.xml b/pom.xml
index 399dba3c21..8712c5e9e0 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1668,7 +1668,7 @@
                 <param>com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheckTest</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.UpperEllCheckTest</param>
               </targetTests>
-              <mutationThreshold>99</mutationThreshold>
+              <mutationThreshold>100</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
diff --git a/shippable.yml b/shippable.yml
index 660e020c73..89ba2aa8d7 100755
--- a/shippable.yml
+++ b/shippable.yml
@@ -14,11 +14,11 @@ env:
     - PROFILE="-Ppitest-checks-regexp,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-sizes,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-whitespace,no-validations"
-    - PROFILE="-Ppitest-checks-misc,no-validations"
+    - PROFILE="-Ppitest-checks-misc,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-blocks,no-validations"
     - PROFILE="-Ppitest-checks-coding,no-validations"
     - PROFILE="-Ppitest-checks-design,no-validations"; POST_ACTION=check_survived
-    - PROFILE="-Ppitest-checks-annotation,no-validations"
+    - PROFILE="-Ppitest-checks-annotation,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-header,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-modifier,no-validations"; POST_ACTION=check_survived
     - PROFILE="-Ppitest-checks-naming,no-validations"; POST_ACTION=check_survived
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index c0dd675b12..c026dfbc95 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -47,7 +47,6 @@
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
-import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
@@ -325,10 +324,8 @@ private void checkExistenceOfRequiredTranslations(ResourceBundle bundle) {
      * @param fileName file name.
      */
     private void logMissingTranslation(String filePath, String fileName) {
-        final MessageDispatcher dispatcher = getMessageDispatcher();
         log(0, MSG_KEY_MISSING_TRANSLATION_FILE, fileName);
         fireErrors(filePath);
-        dispatcher.fireFileFinished(filePath);
     }
 
     /**
@@ -455,7 +452,6 @@ private void checkTranslationKeys(ResourceBundle bundle) {
     private void checkFilesForConsistencyRegardingTheirKeys(SetMultimap<File, String> fileKeys,
                                                             Set<String> keysThatMustExist) {
         for (File currentFile : fileKeys.keySet()) {
-            final MessageDispatcher dispatcher = getMessageDispatcher();
             final Set<String> currentFileKeys = fileKeys.get(currentFile);
             final Set<String> missingKeys = keysThatMustExist.stream()
                 .filter(e -> !currentFileKeys.contains(e)).collect(Collectors.toSet());
@@ -464,9 +460,7 @@ private void checkFilesForConsistencyRegardingTheirKeys(SetMultimap<File, String
                     log(0, MSG_KEY, key);
                 }
             }
-            final String path = currentFile.getPath();
-            fireErrors(path);
-            dispatcher.fireFileFinished(path);
+            fireErrors(currentFile.getPath());
         }
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
index 5fc12c9c8b..9a33764603 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -94,9 +94,6 @@ public void beginTree(DetailAST rootAST) {
     @Override
     public void leaveToken(DetailAST ast) {
         if (ast.getType() == TokenTypes.CLASS_DEF) {
-            if (classDepth == 1) {
-                currentClass = null;
-            }
             classDepth--;
         }
     }
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4 b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
index 52b6e2f3f5..d0970e1752 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
@@ -889,8 +889,8 @@ javadocTag: AUTHOR_LITERAL (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
       | RETURN_LITERAL (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
-      | SEE_LITERAL (WS | NEWLINE)* reference? (STRING | htmlElement)* (WS | NEWLINE)*
-          ((WS | NEWLINE) description)?
+      | SEE_LITERAL (WS | NEWLINE | {!isNextJavadocTag()}? LEADING_ASTERISK)* reference?
+          (STRING | htmlElement)* (WS | NEWLINE)* ((WS | NEWLINE) description)?
 
       | SERIAL_LITERAL (WS | NEWLINE)*
           ((WS | NEWLINE) description | LITERAL_INCLUDE | LITERAL_EXCLUDE)? (WS | NEWLINE)*
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
index 5887afd65c..ca7be3ce60 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
@@ -34,7 +34,6 @@
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -42,11 +41,7 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 import java.util.Set;
 import java.util.SortedSet;
 
@@ -58,13 +53,10 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import com.google.common.collect.ImmutableMap;
 import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
-import com.puppycrawl.tools.checkstyle.XMLLogger;
-import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
@@ -218,38 +210,6 @@ public void testDefaultTranslationFileIsMissing() throws Exception {
             expected);
     }
 
-    @Test
-    public void testDefaultTranslationFileIsMissing1() throws Exception {
-        final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
-        checkConfig.addAttribute("requiredTranslations", "ja,de");
-        final Checker checker = createChecker(checkConfig);
-        final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        final XMLLogger logger = new XMLLogger(out, AutomaticBean.OutputStreamOptions.NONE);
-        checker.addListener(logger);
-        final Path logPath = new File(getPath("xml-log.xml")).toPath();
-
-        final String defaultProps = getPath("messages_check_fire_errors.properties");
-        final String translationProps = getPath("messages_check_fire_errors_de.properties");
-
-        final File[] propertyFiles = {
-            new File(defaultProps),
-            new File(translationProps),
-        };
-
-        final List<String> expectedRoot = Collections.singletonList(
-            "0: " + getCheckMessage(MSG_KEY_MISSING_TRANSLATION_FILE,
-                        "messages_check_fire_errors_ja.properties")
-        );
-        final List<String> expectedTranslation = Collections.singletonList(
-            "0: " + getCheckMessage(MSG_KEY, "anotherKey")
-        );
-        verify(checker, propertyFiles, ImmutableMap.of(getPath(""), expectedRoot,
-                        translationProps, expectedTranslation));
-        assertEquals("Unexpected log output",
-                new String(Files.readAllBytes(logPath), StandardCharsets.UTF_8),
-                out.toString(StandardCharsets.UTF_8.name()));
-    }
-
     @Test
     public void testTranslationFilesAreMissing() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
@@ -352,6 +312,25 @@ public void testTranslationFileWithLanguageCountryVariantIsMissing() throws Exce
             expected);
     }
 
+    @Test
+    public void testTranslationFileWithLanguageCountryVariantArePresent() throws Exception {
+        final DefaultConfiguration checkConfig = createModuleConfig(TranslationCheck.class);
+        checkConfig.addAttribute("requiredTranslations", "es, fr");
+
+        final File[] propertyFiles = {
+            new File(getPath("messages_home.properties")),
+            new File(getPath("messages_home_es_US.properties")),
+            new File(getPath("messages_home_fr_CA_UNIX.properties")),
+            };
+
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(
+            createChecker(checkConfig),
+            propertyFiles,
+            getPath(""),
+            expected);
+    }
+
     /**
      * Pitest requires all closes of streams and readers to be verified. Using PowerMock
      * is almost only posibility to check it without rewriting production code.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
index 2b724997b2..e2f8990687 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
@@ -305,4 +305,10 @@ public void testHtmlVoidElementWbr() throws Exception {
         verifyJavadocTree(getHtmlPath("expectedHtmlVoidElementWbrAst.txt"),
                 getHtmlPath("InputHtmlVoidElementWbr.javadoc"));
     }
+
+    @Test
+    public void testLeadingAsteriskAfterSeeTag() throws Exception {
+        verifyJavadocTree(getDocPath("expectedLeadingAsteriskAfterSeeTagAst.txt"),
+                getDocPath("InputLeadingAsteriskAfterSeeTag.javadoc"));
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc
new file mode 100755
index 0000000000..50aa9ffa50
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/InputLeadingAsteriskAfterSeeTag.javadoc
@@ -0,0 +1,6 @@
+* @see
+* "string"
+
+* @see
+* package.Class#member()
+* Description
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt
new file mode 100755
index 0000000000..42ce83f00d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/javadocTags/expectedLeadingAsteriskAfterSeeTagAst.txt
@@ -0,0 +1,32 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK -> * [0:0]
+|--WS ->   [0:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [0:2]
+|   |--SEE_LITERAL -> @see [0:2]
+|   |--NEWLINE -> \n [0:6]
+|   |--LEADING_ASTERISK -> * [1:0]
+|   |--WS ->   [1:1]
+|   |--STRING -> "string" [1:2]
+|   |--NEWLINE -> \n [1:10]
+|   `--NEWLINE -> \n [2:0]
+|--LEADING_ASTERISK -> * [3:0]
+|--WS ->   [3:1]
+|--JAVADOC_TAG -> JAVADOC_TAG [3:2]
+|   |--SEE_LITERAL -> @see [3:2]
+|   |--NEWLINE -> \n [3:6]
+|   |--LEADING_ASTERISK -> * [4:0]
+|   |--WS ->   [4:1]
+|   |--REFERENCE -> REFERENCE [4:2]
+|   |   |--PACKAGE -> package [4:2]
+|   |   |--DOT -> . [4:9]
+|   |   |--CLASS -> Class [4:10]
+|   |   |--HASH -> # [4:15]
+|   |   |--MEMBER -> member [4:16]
+|   |   `--PARAMETERS -> PARAMETERS [4:22]
+|   |       |--LEFT_BRACE -> ( [4:22]
+|   |       `--RIGHT_BRACE -> ) [4:23]
+|   |--NEWLINE -> \n [4:24]
+|   `--DESCRIPTION -> DESCRIPTION [5:0]
+|       |--LEADING_ASTERISK -> * [5:0]
+|       `--TEXT ->  Description [5:1]
+`--EOF -> <EOF> [5:13]
