diff --git a/source/ArchitectureInDetail/FileUpload.rst b/source/ArchitectureInDetail/FileUpload.rst
index 41367ad483..ce1d0ef323 100755
--- a/source/ArchitectureInDetail/FileUpload.rst
+++ b/source/ArchitectureInDetail/FileUpload.rst
@@ -281,6 +281,8 @@ Servlet 3.0のアップロード機能を有効化するために、以下の設
 
         アプリケーションとしてアップロードされたファイルを一時的なファイルとして保存しておきたい場合は、\ ``<location>``\ 要素で指定するディレクトリとは、別のディレクトリに出力すること。
 
+.. _file-upload_setting_servlet_filter:
+
 Servlet Filterの設定
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 multipart/form-dataリクエストの時、ファイルアップロードで許容する最大サイズを超えた場合の動作は、アプリケーションサーバによって異なる。アプリケーションサーバによっては、許容サイズを超えたアップロードの際に発生する\ ``MultipartException``\ が検知されず、後述する例外ハンドリングの設定が有効にならない場合がある。
@@ -316,17 +318,19 @@ multipart/form-dataリクエストの時、ファイルアップロードで許
      - | \ ``MultipartFilter``\ を適用するURLのパターンを指定する。
      
 
- .. warning::
- 
-    **MultipartFilterは、リクエストパラメータにアクセスするServlet Filterより前に定義する必要がある。**
-    
-    Spring Securityを使ってセキュリティ対策を行う場合は、 ``springSecurityFilterChain`` より前に定義すること。
+ .. warning:: **Spring Security使用時の注意点**
+
+    Spring Securityを使ってセキュリティ対策を行う場合は、\ ``springSecurityFilterChain``\ より前に定義すること。
     また、プロジェクト独自で作成するServlet Filterでリクエストパラメータにアクセスするものがある場合は、そのServlet Filterより前に定義すること。
-    
 
- .. note::
+    ただし、\ ``springSecurityFilterChain``\ より前に定義することで、認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容することになる。
+    この動作を回避する方法が\ `Spring Security Reference -Cross Site Request Forgery (CSRF)- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#csrf-include-csrf-token-in-action>`_\ の中で紹介されているが、セキュリティ上のリスクを含む回避方法になるため、本ガイドラインでは回避策の適用は推奨していない。
+
+ .. warning:: **ファイルアップロードの許容サイズを超過した場合の注意点**
+
+   ファイルアップロードの許容サイズを超過した場合、WebLogicなど一部のアプリケーションサーバでは、CSRFトークンを取得する前にサイズ超過のエラーが検知され、CSRFトークンチェックが行われないことがある。
 
-    **MultipartResolverのデフォルト呼び出し**
+ .. note:: **MultipartResolverのデフォルト呼び出し**
     
     \ ``MultipartFilter``\ を使用すると、デフォルトで
     \ ``org.springframework.web.multipart.support.StandardServletMultipartResolver``\ が呼び出される。
@@ -1805,7 +1809,7 @@ Commons FileUploadを使用する場合は以下の設定を行う。
      - | Commons FileUploadを使用する場合、Servlet 3.0のアップロード機能を無効にする必要がある。
        | \ ``DispatcherServlet``\ の定義の中に\ ``<multipart-config>``\ 要素がある場合は、必ず削除すること。
    * - | (2)
-     - | Commons Fileuploadを使用する場合、\ :ref:`CSRF対策 <csrf_use-multipart-filter>`\ を有効にするために\ ``MultipartFilter``\ を定義する必要がある。
+     - | Commons Fileuploadを使用する場合、Spring Securityを使ったセキュリティ対策を有効にするために\ ``MultipartFilter``\ を定義する必要がある。
        | \ ``MultipartFilter``\ のマッピング定義は、springSecurityFilterChain(Spring SecurityのServlet Filter)の定義より前に行うこと。
 
 .. tip::
diff --git a/source/Security/CSRF.rst b/source/Security/CSRF.rst
index 5b07fd7dcd..2b34d589dc 100755
--- a/source/Security/CSRF.rst
+++ b/source/Security/CSRF.rst
@@ -43,6 +43,10 @@ CSRF対策が行われていないWebアプリケーションを利用すると
     CSRF対策はログイン中のリクエストだけではなく、ログイン処理でも行う必要がある。
     ログイン処理に対してCSRF対策を怠った場合、攻撃者が用意したアカウントを使って知らぬ間にログインさせられ、ログイン中に行った操作履歴などを盗まれる可能性がある。
 
+.. warning:: **マルチパートリクエスト(ファイルアップロード)時におけるCSRF対策**
+
+    ファイルアップロード時のCSRF対策については、\ :ref:`ファイルアップロード Servlet Filterの設定 <file-upload_setting_servlet_filter>`\ を留意されたい。
+
 
 Spring SecurityのCSRF対策
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
@@ -463,152 +467,3 @@ CSRFトークンチェックエラー時に専用のエラー画面（JSP）に
   **ステータスコード403以外を返却したい場合**
 
   リクエストに含まれるCSRFトークンが一致しない場合に、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを実装した、独自のAccessDeniedHandlerを作成する必要がある。
-
-|
-
-Appendix
---------------------------------------------------------------------------------
-
-マルチパートリクエスト(ファイルアップロード)時の留意点
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-
-ファイルアップロードなど、マルチパートリクエストを送信する場合、formから送信されるCSRFトークンを\ ``springSecurityFilterChain``\ 内では取得できないため、CSRFトークンエラーが発生する。
-
-そのため、マルチパートリクエストを送信する場合は、以下の方法によって、CSRFトークンを取得できるようにする必要がある。
-
-* \ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用する
-* クエリのパラメータでCSRFトークンを送信する
-
-.. note::
-
-    それぞれメリット・デメリットが存在するため、システム要件を考慮して、採用する対策方法を決めて頂きたい。
-
-ファイルアップロードの詳細については、\ :doc:`FileUpload <../ArchitectureInDetail/FileUpload>`\ を参照されたい。
-
-
-.. _csrf_use-multipart-filter:
-
-MultipartFilterを使用する方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-\ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用することで、マルチパートリクエストでも、\ ``springSecurityFilterChain``\ 内で、formから送信されたCSRFトークンを取得することができる。
-
-.. warning:: **MultipartFilterを使用する際の留意点**
-
-    \ ``MultipartFilter``\ を使用した場合、\ ``springSecurityFilterChain``\による認証・認可処理が行われる前にアップロード処理が行われるため、認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容してしまうことになる。
-
-\ ``MultipartFilter``\ を使用するには、以下のように設定する。
-
-* web.xmlの設定例
-
-.. code-block:: xml
-
-    <!-- (1) -->
-    <filter>
-        <filter-name>MultipartFilter</filter-name>
-        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
-    </filter>
-    <filter-mapping>
-        <filter-name>MultipartFilter</filter-name>
-        <servlet-name>/*</servlet-name>
-    </filter-mapping>
-
-    <!-- (2) -->
-    <filter>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
-    </filter>
-    <filter-mapping>
-        <filter-name>springSecurityFilterChain</filter-name>
-        <url-pattern>/*</url-pattern>
-    </filter-mapping>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``org.springframework.web.multipart.support.MultipartFilter``\ を 定義する。
-   * - | (2)
-     - | \ ``springSecurityFilterChain``\ より前に、\ ``MultipartFilter``\ を定義すること。
-
-* JSPの実装例
-
-.. code-block:: jsp
-
-    <!-- (1) -->
-    <form:form action="${pageContext.request.contextPath}/fileupload"
-        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data">  
-        <table>
-            <tr>
-                <td width="65%"><form:input type="file" path="uploadFile" /></td>
-            </tr>
-            <tr>
-                <td><input type="submit" value="Upload" /></td>
-            </tr>
-        </table>
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<form:form>``\ タグを使用することで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが自動的に追加されるため、JSPの実装でCSRFトークンを意識する必要はない。
-       |
-       | **<html> タグを使用する場合**
-       | :ref:`csrf_htmlformtag-use`\ を参照して、CSRFトークンを設定すること。
-
-
-クエリパラメータでCSRFトークンを送る方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を防ぎたい場合は、\ ``MultipartFilter``\ は使用せず、クエリパラメータでCSRFトークンを送る必要がある。
-
-.. warning:: **クエリパラメータでCSRFトークンを送る際の留意点**
-
-    この方法でCSRFトークンを送信した場合、以下の危険性があるため、\ ``MultipartFilter``\ を使用する方法と比べると、攻撃者にCSRFトークンを悪用されるリスクが高くなる。
-    なお、Spring Securityのデフォルト実装では、CSRFトークンの値としてランダムなUUIDを生成しているため、仮にCSRFトークンが漏洩してもセッションハイジャックされる事はないという点を補足しておく。
-
-    * ブラウザのアドレスバーにCSRFトークンが表示される
-    * ブックマークした場合、ブックマークにCSRFトークンが記録される
-    * WebサーバのアクセスログにCSRFトークンが記録される
-
-
-以下に、CSRFトークンをクエリパラメータとして送る実装例を示す。
-
-* JSPの実装例
-
-.. code-block:: jsp
-
-    <form:form action="${pageContext.request.contextPath}/fileupload?${f:h(_csrf.parameterName)}=${f:h(_csrf.token)}"
-        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data"> <!-- (1) -->
-        <table>
-            <tr>
-                <td width="65%"><form:input type="file" path="uploadFile" /></td>
-            </tr>
-            <tr>
-                <td><input type="submit" value="Upload" /></td>
-            </tr>
-        </table>
-    </form:form>
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<form:form>``\ タグのaction属性に、CSRFトークンのパラメータ名と、CSRFトークン値をクエリパラメタとして付加する。
-
-.. raw:: latex
-
-   \newpage
-
diff --git a/source_en/ArchitectureInDetail/DataAccessMyBatis3.rst b/source_en/ArchitectureInDetail/DataAccessMyBatis3.rst
index 26ac8e815b..6d18b4c38d 100755
--- a/source_en/ArchitectureInDetail/DataAccessMyBatis3.rst
+++ b/source_en/ArchitectureInDetail/DataAccessMyBatis3.rst
@@ -5856,6 +5856,7 @@ a method which assigns \ ``@org.apache.ibatis.annotations.Flush``\  annotation i
 
 How to create and call a method which assigns \ ``@Flush``\  annotation is given below.
 |
+
  .. code-block:: java
 
     public interface TodoRepository {
