diff --git a/h/_version.py b/h/_version.py
index 66f228b28d..9569ab72a2 100755
--- a/h/_version.py
+++ b/h/_version.py
@@ -14,8 +14,8 @@
 # git-archive substitution markers. When this file is written out by a `git
 # archive` command, these will be replaced by the short commit hash and the
 # commit date, respectively.
-VERSION_GIT_REF = 'd65e84bcd0'
-VERSION_GIT_DATE = '1500887234'
+VERSION_GIT_REF = '50296083e8'
+VERSION_GIT_DATE = '1500888311'
 
 # Fallback version in case we cannot derive the version.
 VERSION_UNKNOWN = '0+unknown'
diff --git a/tests/h/oauth/jwt_grant_token_test.py b/tests/h/oauth/jwt_grant_token_test.py
index 4d4b53bde4..a7b4b166a0 100755
--- a/tests/h/oauth/jwt_grant_token_test.py
+++ b/tests/h/oauth/jwt_grant_token_test.py
@@ -48,7 +48,7 @@ def test_issuer_raises_for_missing_iss_claim(self):
         with pytest.raises(MissingJWTGrantTokenClaimError) as exc:
             grant_token.issuer
 
-        assert exc.value.description == 'Missing grant token issuer (iss).'
+        assert exc.value.description == "Missing claim 'iss' (issuer) from grant token."
 
     def test_verified_initializes_verified_token(self, patch):
         verified_token = patch('h.oauth.jwt_grant_token.VerifiedJWTGrantToken')
@@ -125,7 +125,7 @@ def test_init_raises_for_missing_claims(self, claims, claim, description):
         with pytest.raises(InvalidGrantError) as exc:
             VerifiedJWTGrantToken(jwttok, 'top-secret', 'test-audience')
 
-        assert exc.value.description == 'Missing grant token {} ({}).'.format(description, claim)
+        assert exc.value.description == "Missing claim '{}' ({}) from grant token.".format(claim, description)
 
     def test_init_raises_for_invalid_aud(self, claims):
         claims['aud'] = 'different-audience'
@@ -134,7 +134,7 @@ def test_init_raises_for_invalid_aud(self, claims):
         with pytest.raises(InvalidJWTGrantTokenClaimError) as exc:
             VerifiedJWTGrantToken(jwttok, 'top-secret', 'test-audience')
 
-        assert exc.value.description == 'Invalid grant token audience (aud).'
+        assert exc.value.description == "Invalid claim 'aud' (audience) in grant token."
 
     @pytest.mark.parametrize('claim,description', [
         ['exp', 'expiry'],
@@ -147,7 +147,7 @@ def test_init_raises_for_invalid_timestamp_types(self, claims, claim, descriptio
         with pytest.raises(InvalidJWTGrantTokenClaimError) as exc:
             VerifiedJWTGrantToken(jwttok, 'top-secret', 'test-audience')
 
-        assert exc.value.description == 'Invalid grant token {} ({}).'.format(description, claim)
+        assert exc.value.description == "Invalid claim '{}' ({}) in grant token.".format(claim, description)
 
     def test_init_returns_token_when_expired_but_in_leeway(self, claims):
         claims['exp'] = epoch(delta=timedelta(seconds=-8))
@@ -219,7 +219,7 @@ def test_subject_raises_for_missing_sub_claim(self, claims):
         with pytest.raises(InvalidGrantError) as exc:
             grant_token.subject
 
-        assert exc.value.description == 'Missing grant token subject (sub).'
+        assert exc.value.description == "Missing claim 'sub' (subject) from grant token."
 
     def test_subject_raises_for_empty_sub_claim(self, claims):
         claims['sub'] = ''
@@ -229,7 +229,7 @@ def test_subject_raises_for_empty_sub_claim(self, claims):
         with pytest.raises(InvalidGrantError) as exc:
             grant_token.subject
 
-        assert exc.value.description == 'Missing grant token subject (sub).'
+        assert exc.value.description == "Missing claim 'sub' (subject) from grant token."
 
     @pytest.fixture
     def claims(self):
