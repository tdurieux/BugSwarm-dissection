diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/MantaClient.java b/java-manta-client/src/main/java/com/joyent/manta/client/MantaClient.java
index 10954cea7f..0ccbf3a684 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/MantaClient.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/MantaClient.java
@@ -4,7 +4,16 @@
 package com.joyent.manta.client;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.api.client.http.*;
+import com.google.api.client.http.ByteArrayContent;
+import com.google.api.client.http.EmptyContent;
+import com.google.api.client.http.GenericUrl;
+import com.google.api.client.http.HttpContent;
+import com.google.api.client.http.HttpHeaders;
+import com.google.api.client.http.HttpRequest;
+import com.google.api.client.http.HttpRequestFactory;
+import com.google.api.client.http.HttpResponse;
+import com.google.api.client.http.HttpResponseException;
+import com.google.api.client.http.InputStreamContent;
 import com.google.api.client.util.ObjectParser;
 import com.joyent.http.signature.HttpSignerUtils;
 import com.joyent.http.signature.google.httpclient.HttpSigner;
@@ -39,12 +48,10 @@
 import java.time.temporal.TemporalAmount;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Scanner;
 import java.util.UUID;
 import java.util.stream.Stream;
 
@@ -1277,17 +1284,7 @@ protected void processJobInputs(final UUID jobId,
         String path = String.format("%s/jobs/%s/live/in", home, jobId);
 
         HttpResponse response = httpGet(path);
-        final Reader reader = new InputStreamReader(response.getContent());
-        final BufferedReader br = new BufferedReader(reader);
-
-        return br.lines().onClose(() -> {
-            try {
-                br.close();
-                response.disconnect();
-            } catch (IOException e) {
-                throw new UncheckedIOException(e);
-            }
-        });
+        return responseAsStream(response);
     }
 
     /**
@@ -1542,16 +1539,14 @@ public MantaJob getJob(final UUID jobId) throws IOException {
 
         final String path = String.format("%s/jobs", home, query);
 
-        final GenericUrl genericUrl = new GenericUrl(this.url + formatPath(path) +
-            query);
+        final GenericUrl genericUrl = new GenericUrl(this.url + formatPath(path)
+                + query);
 
         final HttpResponse response = httpGet(genericUrl, null);
-
         final ObjectMapper mapper = MantaObjectParser.MAPPER;
-        final Reader reader = new InputStreamReader(response.getContent());
-        final BufferedReader br = new BufferedReader(reader);
+        final Stream<String> responseStream = responseAsStream(response);
 
-        return br.lines().map(s -> {
+        return responseStream.map(s -> {
             try {
                 final Map jobDetails = mapper.readValue(s, Map.class);
                 final Object value = jobDetails.get("name");
@@ -1564,13 +1559,6 @@ public MantaJob getJob(final UUID jobId) throws IOException {
             } catch (IOException e) {
                 throw new UncheckedIOException(e);
             }
-        }).onClose(() -> {
-            try {
-                br.close();
-                response.disconnect();
-            } catch (IOException e) {
-                throw new UncheckedIOException(e);
-            }
         });
     }
 
@@ -1591,17 +1579,7 @@ public MantaJob getJob(final UUID jobId) throws IOException {
         String path = String.format("%s/jobs/%s/live/out", home, jobId);
 
         HttpResponse response = httpGet(path);
-        final Reader reader = new InputStreamReader(response.getContent());
-        final BufferedReader br = new BufferedReader(reader);
-
-        return br.lines().onClose(() -> {
-            try {
-                br.close();
-                response.disconnect();
-            } catch (IOException e) {
-                throw new UncheckedIOException(e);
-            }
-        });
+        return responseAsStream(response);
     }
 
 
@@ -1637,7 +1615,7 @@ public MantaJob getJob(final UUID jobId) throws IOException {
      * <p><strong>Make sure to close this stream when you are done with
      * otherwise the HTTP socket will remain open.</strong></p>
      * @param jobId UUID of the Manta job
-     * @return stream of each output's input stream
+     * @return stream of each job output as a string
      * @throws IOException thrown when we can't get a list of outputs over the network
      */
     public Stream<String> getJobOutputsAsStrings(final UUID jobId) throws IOException {
@@ -1653,6 +1631,82 @@ public MantaJob getJob(final UUID jobId) throws IOException {
                 });
     }
 
+
+    /**
+     * <p>Returns the current "live" set of failures from a job. Think of this
+     * like tail -f. The objects are returned as a stream. The stream is
+     * composed of a list of object names on Manta that contain the output
+     * of the job.</p>
+     *
+     * <p><strong>Make sure to close this stream when you are done with
+     * otherwise the HTTP socket will remain open.</strong></p>
+     *
+     * @param jobId UUID of the Manta job
+     * @return stream of Manta object names containing failure data
+     * @throws IOException thrown when we can't get a list of failures over the network
+     */
+    public Stream<String> getJobFailures(final UUID jobId) throws IOException {
+        Objects.requireNonNull(jobId, "Job id must be present");
+
+        String path = String.format("%s/jobs/%s/live/fail", home, jobId);
+
+        final HttpResponse response = httpGet(path);
+
+        return responseAsStream(response);
+    }
+
+
+    /**
+     * <p>Returns a stream of {@link InputStream} implementations for each
+     * failure returned from the Manta API for a job.</p>
+     *
+     * <p><strong>Make sure to close this stream when you are done with
+     * otherwise the HTTP socket will remain open.</strong></p>
+     *
+     * @param jobId UUID of the Manta job
+     * @return stream of each failure object's input stream
+     * @throws IOException thrown when we can't get a list of outputs over the network
+     */
+    public Stream<MantaObjectInputStream> getJobFailuresAsStreams(final UUID jobId) throws IOException {
+        Objects.requireNonNull(jobId, "Job id must be present");
+
+        return getJobFailures(jobId)
+                .map(obj -> {
+                    try {
+                        return getAsInputStream(obj);
+                    } catch (IOException e) {
+                        throw new UncheckedIOException(e);
+                    }
+                });
+    }
+
+
+    /**
+     * <p>Returns a stream of strings containing all of the
+     * output returned from the Manta API for a job's failures. Be careful,
+     * this method is not memory-efficient.</p>
+     *
+     * <p><strong>Make sure to close this stream when you are done with
+     * otherwise the HTTP socket will remain open.</strong></p>
+     *
+     * @param jobId UUID of the Manta job
+     * @return stream of each failure object as a string
+     * @throws IOException thrown when we can't get a list of outputs over the network
+     */
+    public Stream<String> getJobFailuresAsStrings(final UUID jobId) throws IOException {
+        Objects.requireNonNull(jobId, "Job id must be present");
+
+        return getJobFailures(jobId)
+                .map(obj -> {
+                    try {
+                        return getAsString(obj);
+                    } catch (IOException e) {
+                        throw new UncheckedIOException(e);
+                    }
+                });
+    }
+
+
     /**
      * Finds the content type set in {@link MantaHttpHeaders} and returns that if it
      * is not null. Otherwise, it will return the specified default content type.
@@ -1754,6 +1808,29 @@ protected HttpResponse executeAndCloseRequest(final HttpRequest request,
     }
 
 
+    /**
+     * Parses a HTTP response's content as a Java 8 stream of strings.
+     *
+     * @param response HTTP response object
+     * @return stream of strings representing each line of the response
+     * @throws IOException thrown when we can't access the response over the network
+     */
+    protected Stream<String> responseAsStream(final HttpResponse response)
+            throws IOException {
+        final Reader reader = new InputStreamReader(response.getContent());
+        final BufferedReader br = new BufferedReader(reader);
+
+        return br.lines().onClose(() -> {
+            try {
+                br.close();
+                response.disconnect();
+            } catch (IOException e) {
+                throw new UncheckedIOException(e);
+            }
+        });
+    }
+
+
     @Override
     public void close() throws Exception {
         this.httpRequestFactoryProvider.close();
diff --git a/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java b/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
index 89934af32e..ef05ad59d6 100755
--- a/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
+++ b/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
@@ -17,6 +17,7 @@
 import org.testng.annotations.Test;
 
 import java.io.IOException;
+import java.io.UncheckedIOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
@@ -277,9 +278,9 @@ public void canListAllRunningJobs() throws IOException, InterruptedException {
     @Test(dependsOnMethods = { "createJob", "getJob" })
     public void canListJobsByName() throws IOException {
         final String name = String.format("by_name_%s", UUID.randomUUID());
-        final MantaJob job1 = buildJob(name);
+        final MantaJob job1 = buildJob(name, "cat");
         final UUID job1id = mantaClient.createJob(job1);
-        MantaJob job2 = buildJob(name);
+        MantaJob job2 = buildJob(name, "cat");
         final UUID job2id = mantaClient.createJob(job2);
 
         try (Stream<UUID> jobs = mantaClient.getJobIdsByName(name)) {
@@ -342,16 +343,182 @@ public void canListOutputsForJobWithOneInput() throws IOException, InterruptedEx
                 "Output wasn't the same as input");
     }
 
+    @Test
+    public void canListOutputsForJobAsStreams() throws IOException, InterruptedException {
+        String path1 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path1, TEST_DATA);
+
+        String path2 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path2, TEST_DATA);
+
+        final MantaJob job = buildJob();
+        final UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        inputs.add(path1);
+        inputs.add(path2);
+
+        mantaClient.addJobInputs(jobId, inputs.iterator());
+        mantaClient.endJobInput(jobId);
+
+        while (!mantaClient.getJob(jobId).getState().equals("done")) {
+            Thread.sleep(1000);
+        }
+
+        final AtomicInteger count = new AtomicInteger(0);
+
+        mantaClient.getJobOutputsAsStreams(jobId)
+                .forEach(o -> {
+                    count.incrementAndGet();
+                    try {
+                        String content = MantaUtils.inputStreamToString(o);
+                        Assert.assertEquals(content, TEST_DATA);
+                    } catch (IOException e) {
+                        throw new UncheckedIOException(e);
+                    }
+                });
+
+        Assert.assertEquals(count.get(), 2, "Missing both outputs");
+    }
+
+    @Test
+    public void canListOutputsForJobAsStrings() throws IOException, InterruptedException {
+        String path1 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path1, TEST_DATA);
+
+        String path2 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path2, TEST_DATA);
+
+        final MantaJob job = buildJob();
+        final UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        inputs.add(path1);
+        inputs.add(path2);
+
+        mantaClient.addJobInputs(jobId, inputs.iterator());
+        mantaClient.endJobInput(jobId);
+
+        while (!mantaClient.getJob(jobId).getState().equals("done")) {
+            Thread.sleep(1000);
+        }
+
+        final AtomicInteger count = new AtomicInteger(0);
+
+        mantaClient.getJobOutputsAsStrings(jobId)
+                .forEach(content -> {
+                    count.incrementAndGet();
+                    Assert.assertEquals(content, TEST_DATA);
+                });
+
+        Assert.assertEquals(count.get(), 2, "Missing both outputs");
+    }
+
+    @Test
+    public void canListFailedJobs() throws IOException, InterruptedException {
+        String path = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path, TEST_DATA);
+
+        final MantaJob job = buildJob("failed_job", "grep foo");
+        final UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        inputs.add(path);
+
+        mantaClient.addJobInputs(jobId, inputs.iterator());
+        mantaClient.endJobInput(jobId);
+
+        while (!mantaClient.getJob(jobId).getState().equals("done")) {
+            Thread.sleep(1000);
+        }
+
+        List<String> failures = mantaClient.getJobFailures(jobId)
+                .collect(Collectors.toList());
+
+        Assert.assertEquals(failures.size(), 1, "There should only be a single failure");
+    }
+
+    @Test
+    public void canListFailuresForJobAsStreams() throws IOException, InterruptedException {
+        String path1 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path1, TEST_DATA);
+
+        String path2 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path2, TEST_DATA);
+
+        final MantaJob job = buildJob("failed_job", "grep foo");
+        final UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        inputs.add(path1);
+        inputs.add(path2);
+
+        mantaClient.addJobInputs(jobId, inputs.iterator());
+        mantaClient.endJobInput(jobId);
+
+        while (!mantaClient.getJob(jobId).getState().equals("done")) {
+            Thread.sleep(1000);
+        }
+
+        final AtomicInteger count = new AtomicInteger(0);
+
+        mantaClient.getJobFailuresAsStreams(jobId)
+                .forEach(o -> {
+                    count.incrementAndGet();
+                    try {
+                        String content = MantaUtils.inputStreamToString(o);
+                        Assert.assertEquals(content, TEST_DATA);
+                    } catch (IOException e) {
+                        throw new UncheckedIOException(e);
+                    }
+                });
+
+        Assert.assertEquals(count.get(), 2, "Missing both outputs");
+    }
+
+    @Test
+    public void canListFailuresForJobAsStrings() throws IOException, InterruptedException {
+        String path1 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path1, TEST_DATA);
+
+        String path2 = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(path2, TEST_DATA);
+
+        final MantaJob job = buildJob("failed_job", "grep foo");
+        final UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        inputs.add(path1);
+        inputs.add(path2);
+
+        mantaClient.addJobInputs(jobId, inputs.iterator());
+        mantaClient.endJobInput(jobId);
+
+        while (!mantaClient.getJob(jobId).getState().equals("done")) {
+            Thread.sleep(1000);
+        }
+
+        final AtomicInteger count = new AtomicInteger(0);
+
+        mantaClient.getJobFailuresAsStrings(jobId)
+                .forEach(content -> {
+                    count.incrementAndGet();
+                    Assert.assertEquals(content, TEST_DATA);
+                });
+
+        Assert.assertEquals(count.get(), 2, "Missing both outputs");
+    }
+
     private MantaJob buildJob() {
         String name = String.format("integration_test_%d", count.incrementAndGet());
-        return buildJob(name);
+        return buildJob(name, "cat");
     }
 
-    private MantaJob buildJob(final String name) {
+    private MantaJob buildJob(final String name, final String exec) {
         List<MantaJobPhase> phases = new ArrayList<>();
         MantaJobPhase map = new MantaJobPhase()
             .setType("map")
-            .setExec("cat");
+            .setExec(exec);
         phases.add(map);
 
         return new MantaJob(name, phases);
