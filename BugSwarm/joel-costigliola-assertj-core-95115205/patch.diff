diff --git a/src/main/java/org/assertj/core/util/diff/DiffException.java b/src/main/java/org/assertj/core/util/diff/DiffException.java
deleted file mode 100755
index 407c605d21..0000000000
--- a/src/main/java/org/assertj/core/util/diff/DiffException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
-   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-package org.assertj.core.util.diff;
-
-/**
- * Base class for all exceptions emanating from this package.
- * 
- * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
- */
-public class DiffException extends Exception {
-    
-    private static final long serialVersionUID = 1L;
-    
-    public DiffException() {
-    }
-    
-    public DiffException(String msg) {
-        super(msg);
-    }
-}
diff --git a/src/main/java/org/assertj/core/util/diff/DiffRow.java b/src/main/java/org/assertj/core/util/diff/DiffRow.java
deleted file mode 100755
index ed69c86ce0..0000000000
--- a/src/main/java/org/assertj/core/util/diff/DiffRow.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
-   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-package org.assertj.core.util.diff;
-
-/**
- * Describes the diff row in form [tag, oldLine, newLine) for showing the
- * difference between two texts
- * 
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
- */
-public class DiffRow {
-    private final Tag tag;
-    private final String oldLine;
-    private final String newLine;
-    
-    public DiffRow(Tag tag, String oldLine, String newLine) {
-        this.tag = tag;
-        this.oldLine = oldLine;
-        this.newLine = newLine;
-    }
-    
-    public enum Tag {
-        INSERT, DELETE, CHANGE, EQUAL
-    }
-    
-    /**
-     * @return the tag
-     */
-    public Tag getTag() {
-        return tag;
-    }
-    
-    /**
-     * @return the oldLine
-     */
-    public String getOldLine() {
-        return oldLine;
-    }
-    
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.lang.Object#hashCode()
-     */
-    @Override
-    public int hashCode() {
-        final int prime = 31;
-        int result = 1;
-        result = prime * result + ((newLine == null) ? 0 : newLine.hashCode());
-        result = prime * result + ((oldLine == null) ? 0 : oldLine.hashCode());
-        result = prime * result + ((tag == null) ? 0 : tag.hashCode());
-        return result;
-    }
-    
-    /*
-     * (non-Javadoc)
-     * 
-     * @see java.lang.Object#equals(java.lang.Object)
-     */
-    @Override
-    public boolean equals(Object obj) {
-        if (this == obj)
-            return true;
-        if (obj == null)
-            return false;
-        if (getClass() != obj.getClass())
-            return false;
-        DiffRow other = (DiffRow) obj;
-        if (newLine == null) {
-            if (other.newLine != null)
-                return false;
-        } else if (!newLine.equals(other.newLine))
-            return false;
-        if (oldLine == null) {
-            if (other.oldLine != null)
-                return false;
-        } else if (!oldLine.equals(other.oldLine))
-            return false;
-        if (tag == null) {
-            if (other.tag != null)
-                return false;
-        } else if (!tag.equals(other.tag))
-            return false;
-        return true;
-    }
-    
-    public String toString() {
-        return "[" + this.tag + "," + this.oldLine + "," + this.newLine + "]";
-    }
-}
diff --git a/src/main/java/org/assertj/core/util/diff/DiffRowGenerator.java b/src/main/java/org/assertj/core/util/diff/DiffRowGenerator.java
deleted file mode 100755
index bf8b3f3052..0000000000
--- a/src/main/java/org/assertj/core/util/diff/DiffRowGenerator.java
+++ /dev/null
@@ -1,302 +0,0 @@
-/*
-   Copyright 2010 Dmitry Naumenko (dm.naumenko@gmail.com)
-
-   Licensed under the Apache License, Version 2.0 (the "License");
-   you may not use this file except in compliance with the License.
-   You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
- */
-package org.assertj.core.util.diff;
-
-import org.assertj.core.util.diff.DiffRow.Tag;
-import org.assertj.core.util.diff.myers.Equalizer;
-
-import java.util.*;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-
-/**
- * This class for generating DiffRows for side-by-sidy view.
- * You can customize the way of generating. For example, show inline diffs on not, ignoring
- * white spaces or/and blank lines and so on. All parameters for generating are optional. If you do
- * not specify them, the class will use the default values.
- *
- * These values are:
- * showInlineDiffs = false;
- * ignoreWhiteSpaces = true;
- * ignoreBlankLines = true;
- * ...
- *
- * For instantiating the DiffRowGenerator you should use the its builder. Like in example
- * <code>
- *    DiffRowGenerator generator = new DiffRowGenerator.Builder().showInlineDiffs(true).
- *    	ignoreWhiteSpaces(true).columnWidth(100).build();
- * </code>
- *
- * @author <a href="dm.naumenko@gmail.com">Dmitry Naumenko</a>
-  */
-public class DiffRowGenerator {
-    private final boolean showInlineDiffs;
-    private final boolean ignoreWhiteSpaces;
-    private final String InlineOldTag;
-    private final String InlineNewTag;
-    private final String InlineOldCssClass;
-    private final String InlineNewCssClass;
-    private final int columnWidth;
-    private final Equalizer<String> equalizer;
-
-    /**
-     * This class used for building the DiffRowGenerator.
-     * @author dmitry
-     *
-     */
-    public static class Builder {
-        private boolean showInlineDiffs = false;
-        private boolean ignoreWhiteSpaces = false;
-        private String InlineOldTag = "span";
-        private String InlineNewTag = "span";
-        private String InlineOldCssClass = "editOldInline";
-        private String InlineNewCssClass = "editNewInline";
-        private int columnWidth = 80;
-
-        /**
-         * Show inline diffs in generating diff rows or not.
-         * @param val the value to set. Default: false.
-         * @return builder with configured showInlineDiff parameter
-         */
-        public Builder showInlineDiffs(boolean val) {
-            showInlineDiffs = val;
-            return this;
-        }
-
-        /**
-         * Ignore white spaces in generating diff rows or not.
-         * @param val the value to set. Default: true.
-         * @return builder with configured ignoreWhiteSpaces parameter
-         */
-        public Builder ignoreWhiteSpaces(boolean val) {
-            ignoreWhiteSpaces = val;
-            return this;
-        }
-
-        /**
-         * Set the column with of generated lines of original and revised texts.
-         * @param width the width to set. Making it < 0 doesn't have any sense. Default 80.
-         * @return builder with configured ignoreBlankLines parameter
-         */
-        public Builder columnWidth(int width) {
-            if (width > 0) {
-                columnWidth = width;
-            }
-            return this;
-        }
-
-        /**
-         * Build the DiffRowGenerator. If some parameters is not set, the default values are used.
-         * @return the customized DiffRowGenerator
-         */
-        public DiffRowGenerator build() {
-            return new DiffRowGenerator(this);
-        }
-    }
-
-    private DiffRowGenerator(Builder builder) {
-        showInlineDiffs = builder.showInlineDiffs;
-        ignoreWhiteSpaces = builder.ignoreWhiteSpaces; //
-        InlineOldTag = builder.InlineOldTag;
-        InlineNewTag = builder.InlineNewTag;
-        InlineOldCssClass = builder.InlineOldCssClass;
-        InlineNewCssClass = builder.InlineNewCssClass;
-        columnWidth = builder.columnWidth; //
-        equalizer = (String original, String revised) -> {
-            if (ignoreWhiteSpaces) {
-                original = original.trim().replaceAll("\\s+", " ");
-                revised = revised.trim().replaceAll("\\s+", " ");
-            }
-            return original.equals(revised);
-        };
-    }
-
-    /**
-     * Get the DiffRows describing the difference between original and revised texts using the
-     * given patch. Useful for displaying side-by-side diff.
-     *
-     * @param original the original text
-     * @param revised the revised text
-     * @return the DiffRows between original and revised texts
-     */
-    public List<DiffRow> generateDiffRows(List<String> original, List<String> revised) {
-        return generateDiffRows(original, revised, DiffUtils.diff(original, revised, equalizer));
-    }
-
-    /**
-     * Generates the DiffRows describing the difference between original and revised texts using the
-     * given patch. Useful for displaying side-by-side diff.
-     *
-     * @param original the original text
-     * @param revised the revised text
-     * @param patch the given patch
-     * @return the DiffRows between original and revised texts
-     */
-    public List<DiffRow> generateDiffRows(List<String> original, List<String> revised, Patch<String> patch) {
-        // normalize the lines (expand tabs, escape html entities)
-        original = StringUtils.normalize(original);
-        revised = StringUtils.normalize(revised);
-
-        // wrap to the column width
-        original = StringUtils.wrapText(original, this.columnWidth);
-
-        Function<String, DiffRow> equal = l -> new DiffRow(Tag.EQUAL, l, l);
-        Function<String, DiffRow> insert = l -> new DiffRow(Tag.INSERT, "", l);
-        Function<String, DiffRow> delete = l -> new DiffRow(Tag.DELETE, l, "");
-
-        List<DiffRow> diffRows = new ArrayList<>();
-        int endPos = 0;
-        final List<Delta<String>> deltaList = patch.getDeltas();
-        for (int i = 0; i < deltaList.size(); i++) {
-            Delta<String> delta = deltaList.get(i);
-            Chunk<String> orig = delta.getOriginal();
-            Chunk<String> rev = delta.getRevised();
-
-            // We should normalize and wrap lines in deltas too.
-            orig.setLines(StringUtils.normalize(orig.getLines()));
-            rev.setLines(StringUtils.normalize(rev.getLines()));
-
-            orig.setLines(StringUtils.wrapText(orig.getLines(), this.columnWidth));
-            rev.setLines(StringUtils.wrapText(rev.getLines(), this.columnWidth));
-
-            // catch the equal prefix for each chunk
-            diffRows.addAll(original.subList(endPos, orig.getPosition()).stream()
-                                .map(equal).collect(Collectors.toList()));
-
-            // Inserted DiffRow
-            if (delta.getClass().equals(InsertDelta.class)) {
-                endPos = orig.last() + 1;
-                diffRows.addAll(rev.getLines().stream()
-                                    .map(insert).collect(Collectors.toList()));
-                continue;
-            }
-
-            // Deleted DiffRow
-            if (delta.getClass().equals(DeleteDelta.class)) {
-                endPos = orig.last() + 1;
-                diffRows.addAll(orig.getLines().stream()
-                                    .map(delete).collect(Collectors.toList()));
-                continue;
-            }
-
-            if (showInlineDiffs) {
-                addInlineDiffs(delta);
-            }
-            // the changed size is match
-            if (orig.size() == rev.size()) {
-                for (int j = 0; j < orig.size(); j++) {
-                    diffRows.add(new DiffRow(Tag.CHANGE, orig.getLines().get(j),
-                                 rev.getLines().get(j)));
-                }
-            } else if (orig.size() > rev.size()) {
-                for (int j = 0; j < orig.size(); j++) {
-                    diffRows.add(new DiffRow(Tag.CHANGE, orig.getLines().get(j), rev
-                            .getLines().size() > j ? rev.getLines().get(j) : ""));
-                }
-            } else {
-                for (int j = 0; j < rev.size(); j++) {
-                    diffRows.add(new DiffRow(Tag.CHANGE, orig.getLines().size() > j ? orig
-                            .getLines().get(j) : "", rev.getLines().get(j)));
-                }
-            }
-            endPos = orig.last() + 1;
-        }
-
-        // Copy the final matching chunk if any.
-        diffRows.addAll(original.subList(endPos, original.size()).stream()
-                            .map(equal).collect(Collectors.toList()));
-
-        return diffRows;
-    }
-
-    /**
-     * Add the inline diffs for given delta
-     * @param delta the given delta
-     */
-    private void addInlineDiffs(Delta<String> delta) {
-        List<String> orig = delta.getOriginal().getLines();
-        List<String> rev = delta.getRevised().getLines();
-        LinkedList<String> origList = new LinkedList<>();
-        for (Character character : StringUtils.join(orig, "\n").toCharArray()) {
-            origList.add(character.toString());
-        }
-        LinkedList<String> revList = new LinkedList<>();
-        for (Character character : StringUtils.join(rev, "\n").toCharArray()) {
-            revList.add(character.toString());
-        }
-        List<Delta<String>> inlineDeltas = DiffUtils.diff(origList, revList).getDeltas();
-        if (inlineDeltas.size() < 3) {
-            Collections.reverse(inlineDeltas);
-            for (Delta<String> inlineDelta : inlineDeltas) {
-                Chunk<String> inlineOrig = inlineDelta.getOriginal();
-                Chunk<String> inlineRev = inlineDelta.getRevised();
-                if (inlineDelta.getClass().equals(DeleteDelta.class)) {
-                    origList = wrapInTag(origList, inlineOrig.getPosition(), inlineOrig
-                            .getPosition()
-                            + inlineOrig.size() + 1, this.InlineOldTag, this.InlineOldCssClass);
-                } else if (inlineDelta.getClass().equals(InsertDelta.class)) {
-                    revList = wrapInTag(revList, inlineRev.getPosition(), inlineRev.getPosition()
-                            + inlineRev.size() + 1, this.InlineNewTag, this.InlineNewCssClass);
-                } else if (inlineDelta.getClass().equals(ChangeDelta.class)) {
-                    origList = wrapInTag(origList, inlineOrig.getPosition(), inlineOrig
-                            .getPosition()
-                            + inlineOrig.size() + 1, this.InlineOldTag, this.InlineOldCssClass);
-                    revList = wrapInTag(revList, inlineRev.getPosition(), inlineRev.getPosition()
-                            + inlineRev.size() + 1, this.InlineNewTag, this.InlineNewCssClass);
-                }
-            }
-            StringBuilder origResult = new StringBuilder(), revResult = new StringBuilder();
-            origList.stream().forEach(origResult::append);
-            revList.stream().forEach(revResult::append);
-
-            delta.getOriginal().setLines(Arrays.asList(origResult.toString().split("\n")));
-            delta.getRevised().setLines(Arrays.asList(revResult.toString().split("\n")));
-        }
-    }
-
-    /**
-     * Wrap the elements in the sequence with the given tag
-     * @param startPosition the position from which tag should start. The counting start from a zero.
-     * @param endPosition the position before which tag should should be closed.
-     * @param tag the tag name without angle brackets, just a word
-     * @param cssClass the optional css class
-     */
-    public static LinkedList<String> wrapInTag(LinkedList<String> sequence, int startPosition,
-            int endPosition, String tag, String cssClass) {
-        LinkedList<String> result = (LinkedList<String>) sequence.clone();
-        StringBuilder tagBuilder = new StringBuilder();
-        tagBuilder.append("<");
-        tagBuilder.append(tag);
-        if (cssClass != null) {
-            tagBuilder.append(" class=\"");
-            tagBuilder.append(cssClass);
-            tagBuilder.append("\"");
-        }
-        tagBuilder.append(">");
-        String startTag = tagBuilder.toString();
-
-        tagBuilder.delete(0, tagBuilder.length());
-
-        tagBuilder.append("</");
-        tagBuilder.append(tag);
-        tagBuilder.append(">");
-        String endTag = tagBuilder.toString();
-
-        result.add(startPosition, startTag);
-        result.add(endPosition, endTag);
-        return result;
-    }
-}
diff --git a/src/main/java/org/assertj/core/util/diff/PatchFailedException.java b/src/main/java/org/assertj/core/util/diff/PatchFailedException.java
index 1f6464f0ae..19ecaced98 100755
--- a/src/main/java/org/assertj/core/util/diff/PatchFailedException.java
+++ b/src/main/java/org/assertj/core/util/diff/PatchFailedException.java
@@ -20,7 +20,7 @@
  *
  * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
  */
-public class PatchFailedException extends DiffException {
+public class PatchFailedException extends Exception {
     
     private static final long serialVersionUID = 1L;
     
diff --git a/src/main/java/org/assertj/core/util/diff/myers/DiffException.java b/src/main/java/org/assertj/core/util/diff/myers/DiffException.java
deleted file mode 100755
index ebca6d472e..0000000000
--- a/src/main/java/org/assertj/core/util/diff/myers/DiffException.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * ====================================================================
- *
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 1999-2003 The Apache Software Foundation.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution, if
- *    any, must include the following acknowledgement:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgement may appear in the software itself,
- *    if and wherever such third-party acknowledgements normally appear.
- *
- * 4. The names "The Jakarta Project", "Commons", and "Apache Software
- *    Foundation" must not be used to endorse or promote products derived
- *    from this software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache"
- *    nor may "Apache" appear in their names without prior written
- *    permission of the Apache Software Foundation.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- *
- */
-
-package org.assertj.core.util.diff.myers;
-
-/**
- * Base class for all exceptions emanating from this package.
- *
- * @author <a href="mailto:juanco@suigeneris.org">Juanco Anez</a>
- */
-public class DiffException extends Exception {
-    
-    private static final long serialVersionUID = 1L;
-
-    public DiffException(String msg) {
-        super(msg);
-    }
-}
diff --git a/src/main/java/org/assertj/core/util/diff/myers/DifferentiationFailedException.java b/src/main/java/org/assertj/core/util/diff/myers/DifferentiationFailedException.java
index c6c0173333..844b4e757f 100755
--- a/src/main/java/org/assertj/core/util/diff/myers/DifferentiationFailedException.java
+++ b/src/main/java/org/assertj/core/util/diff/myers/DifferentiationFailedException.java
@@ -67,7 +67,7 @@
  * @see MyersDiff
  * @see DiffAlgorithm
  */
-public class DifferentiationFailedException extends DiffException {
+public class DifferentiationFailedException extends Exception {
     private static final long serialVersionUID = 1L;
     
     public DifferentiationFailedException(String msg) {
diff --git a/src/test/java/org/assertj/core/util/diff/ChangeDeltaTest.java b/src/test/java/org/assertj/core/util/diff/ChangeDeltaTest.java
new file mode 100755
index 0000000000..a32700773d
--- /dev/null
+++ b/src/test/java/org/assertj/core/util/diff/ChangeDeltaTest.java
@@ -0,0 +1,38 @@
+package org.assertj.core.util.diff;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class ChangeDeltaTest {
+
+  @Test
+  public void testGetType() throws Exception {
+    // given
+    Chunk<String> chunk = new Chunk<>(1, new ArrayList<>());
+    Delta<String> delta = new ChangeDelta<>(chunk, chunk);
+
+    // when
+    Delta.TYPE type = delta.getType();
+
+    // then
+    assertThat(type).isEqualTo(Delta.TYPE.CHANGE);
+  }
+
+  @Test
+  public void testToString() throws Exception {
+    // given
+    Chunk<String> chunk1 = new Chunk<>(1, new ArrayList<>());
+    Chunk<String> chunk2 = new Chunk<>(2, Arrays.asList("line1", "line2"));
+    Delta<String> delta = new ChangeDelta<>(chunk1, chunk2);
+
+    // when
+    String desc = delta.toString();
+
+    // then
+    assertThat(desc).isEqualTo("[ChangeDelta, position: 1, lines: [] to [line1, line2]]");
+  }
+}
\ No newline at end of file
diff --git a/src/test/java/org/assertj/core/util/diff/DeleteDeltaTest.java b/src/test/java/org/assertj/core/util/diff/DeleteDeltaTest.java
new file mode 100755
index 0000000000..8a98eeb634
--- /dev/null
+++ b/src/test/java/org/assertj/core/util/diff/DeleteDeltaTest.java
@@ -0,0 +1,38 @@
+package org.assertj.core.util.diff;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class DeleteDeltaTest {
+
+  @Test
+  public void testGetType() throws Exception {
+    // given
+    Chunk<String> chunk = new Chunk<>(1, new ArrayList<>());
+    Delta<String> delta = new DeleteDelta<>(chunk, chunk);
+
+    // when
+    Delta.TYPE type = delta.getType();
+
+    // then
+    assertThat(type).isEqualTo(Delta.TYPE.DELETE);
+  }
+
+  @Test
+  public void testToString() throws Exception {
+    // given
+    Chunk<String> chunk1 = new Chunk<>(1, Arrays.asList("line1", "line2"));
+    Chunk<String> chunk2 = new Chunk<>(2, new ArrayList<>());
+    Delta<String> delta = new DeleteDelta<>(chunk1, chunk2);
+
+    // when
+    String desc = delta.toString();
+
+    // then
+    assertThat(desc).isEqualTo("[DeleteDelta, position: 1, lines: [line1, line2]]");
+  }
+}
\ No newline at end of file
diff --git a/src/test/java/org/assertj/core/util/diff/DiffRowGeneratorTest.java b/src/test/java/org/assertj/core/util/diff/DiffRowGeneratorTest.java
deleted file mode 100755
index c3ca01e26d..0000000000
--- a/src/test/java/org/assertj/core/util/diff/DiffRowGeneratorTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package org.assertj.core.util.diff;
-
-import junit.framework.TestCase;
-
-import java.util.Arrays;
-import java.util.List;
-
-public class DiffRowGeneratorTest  extends TestCase {
-
-    public void testGenerator_Default() {
-        String first = "anything \n \nother";
-        String second ="anything\n\nother";
-
-        DiffRowGenerator generator = new DiffRowGenerator.Builder()
-            .columnWidth(Integer.MAX_VALUE) // do not wrap
-            .build();
-        List<DiffRow> rows = generator.generateDiffRows(split(first), split(second));
-        print(rows);
-
-        assertEquals(3, rows.size());
-    }
-
-    public void testGenerator_InlineDiff() {
-        String first = "anything \n \nother";
-        String second ="anything\n\nother";
-
-        DiffRowGenerator generator = new DiffRowGenerator.Builder()
-            .showInlineDiffs(true)
-            .columnWidth(Integer.MAX_VALUE) // do not wrap
-            .build();
-		List<DiffRow> rows = generator.generateDiffRows(split(first), split(second));
-        print(rows);
-
-        assertEquals(3, rows.size());
-        assertTrue(rows.get(0).getOldLine().indexOf("<span") > 0);
-    }
-
-    public void testGenerator_IgnoreWhitespaces() {
-        String first = "anything \n \nother\nmore lines";
-        String second ="anything\n\nother\nsome more lines";
-
-        DiffRowGenerator generator = new DiffRowGenerator.Builder()
-            .ignoreWhiteSpaces(true)
-            .columnWidth(Integer.MAX_VALUE) // do not wrap
-            .build();
-        List<DiffRow> rows = generator.generateDiffRows(split(first), split(second));
-        print(rows);
-
-        assertEquals(4, rows.size());
-        assertEquals(rows.get(0).getTag(), DiffRow.Tag.EQUAL);
-        assertEquals(rows.get(1).getTag(), DiffRow.Tag.EQUAL);
-        assertEquals(rows.get(2).getTag(), DiffRow.Tag.EQUAL);
-        assertEquals(rows.get(3).getTag(), DiffRow.Tag.CHANGE);
-    }
-
-    private List<String> split(String content) {
-        return Arrays.asList(content.split("\n"));
-    }
-
-    private void print(List<DiffRow> diffRows) {
-        for (DiffRow row: diffRows) {
-            System.out.println(row);
-        }
-    }
-}
diff --git a/src/test/java/org/assertj/core/util/diff/InsertDeltaTest.java b/src/test/java/org/assertj/core/util/diff/InsertDeltaTest.java
new file mode 100755
index 0000000000..e8925f4bbe
--- /dev/null
+++ b/src/test/java/org/assertj/core/util/diff/InsertDeltaTest.java
@@ -0,0 +1,38 @@
+package org.assertj.core.util.diff;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class InsertDeltaTest {
+
+  @Test
+  public void testGetType() throws Exception {
+    // given
+    Chunk<String> chunk = new Chunk<>(1, new ArrayList<>());
+    Delta<String> delta = new InsertDelta<>(chunk, chunk);
+
+    // when
+    Delta.TYPE type = delta.getType();
+
+    // then
+    assertThat(type).isEqualTo(Delta.TYPE.INSERT);
+  }
+
+  @Test
+  public void testToString() throws Exception {
+    // given
+    Chunk<String> chunk1 = new Chunk<>(1, new ArrayList<>());
+    Chunk<String> chunk2 = new Chunk<>(2, Arrays.asList("line1", "line2"));
+    Delta<String> delta = new InsertDelta<>(chunk1, chunk2);
+
+    // when
+    String desc = delta.toString();
+
+    // then
+    assertThat(desc).isEqualTo("[InsertDelta, position: 1, lines: [line1, line2]]");
+  }
+}
\ No newline at end of file
