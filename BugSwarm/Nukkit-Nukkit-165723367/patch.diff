diff --git a/src/main/java/cn/nukkit/level/generator/biome/Biome.java b/src/main/java/cn/nukkit/level/generator/biome/Biome.java
index ade75d0192..c0103fc2cc 100755
--- a/src/main/java/cn/nukkit/level/generator/biome/Biome.java
+++ b/src/main/java/cn/nukkit/level/generator/biome/Biome.java
@@ -172,10 +172,4 @@ private static int generateBiomeColor(double temperature, double rainfall) {
     }
 
     abstract public int getColor();
-
-    abstract public int getStoneBlock();
-
-    abstract public int getSurfaceBlock();
-
-    abstract public int getGroundBlock();
 }
diff --git a/src/main/java/cn/nukkit/level/generator/biome/CaveBiome.java b/src/main/java/cn/nukkit/level/generator/biome/CaveBiome.java
new file mode 100755
index 0000000000..51e9da6d0b
--- /dev/null
+++ b/src/main/java/cn/nukkit/level/generator/biome/CaveBiome.java
@@ -0,0 +1,13 @@
+package cn.nukkit.level.generator.biome;
+
+/**
+ * Nukkit Project
+ * Author: MagicDroidX
+ */
+public interface CaveBiome {
+    int getStoneBlock();
+
+    int getSurfaceBlock();
+
+    int getGroundBlock();
+}
diff --git a/src/main/java/cn/nukkit/level/generator/biome/GrassyBiome.java b/src/main/java/cn/nukkit/level/generator/biome/GrassyBiome.java
index 1a8f77bf95..23fd94184c 100755
--- a/src/main/java/cn/nukkit/level/generator/biome/GrassyBiome.java
+++ b/src/main/java/cn/nukkit/level/generator/biome/GrassyBiome.java
@@ -8,7 +8,7 @@
  * author: MagicDroidX
  * Nukkit Project
  */
-public abstract class GrassyBiome extends NormalBiome {
+public abstract class GrassyBiome extends NormalBiome implements CaveBiome {
     public GrassyBiome() {
         this.setGroundCover(new Block[]{
                 new BlockGrass(),
diff --git a/src/main/java/cn/nukkit/level/generator/biome/SandyBiome.java b/src/main/java/cn/nukkit/level/generator/biome/SandyBiome.java
index d8a64c22e0..eea095bac2 100755
--- a/src/main/java/cn/nukkit/level/generator/biome/SandyBiome.java
+++ b/src/main/java/cn/nukkit/level/generator/biome/SandyBiome.java
@@ -10,7 +10,7 @@
  * author: MagicDroidX
  * Nukkit Project
  */
-public abstract class SandyBiome extends NormalBiome {
+public abstract class SandyBiome extends NormalBiome implements CaveBiome{
     public SandyBiome() {
 
         PopulatorCactus cactus = new PopulatorCactus();
diff --git a/src/main/java/cn/nukkit/level/generator/biome/WateryBiome.java b/src/main/java/cn/nukkit/level/generator/biome/WateryBiome.java
index 87cd98d96b..5bab371105 100755
--- a/src/main/java/cn/nukkit/level/generator/biome/WateryBiome.java
+++ b/src/main/java/cn/nukkit/level/generator/biome/WateryBiome.java
@@ -7,7 +7,7 @@
  * author: Angelic47
  * Nukkit Project
  */
-public abstract class WateryBiome extends NormalBiome {
+public abstract class WateryBiome extends NormalBiome implements CaveBiome {
     public WateryBiome() {
         this.setGroundCover(new Block[]{
                 new BlockDirt(),
diff --git a/src/main/java/cn/nukkit/level/generator/populator/PopulatorCaves.java b/src/main/java/cn/nukkit/level/generator/populator/PopulatorCaves.java
index 8e22e2571a..d77e6b1e5a 100755
--- a/src/main/java/cn/nukkit/level/generator/populator/PopulatorCaves.java
+++ b/src/main/java/cn/nukkit/level/generator/populator/PopulatorCaves.java
@@ -4,6 +4,7 @@
 import cn.nukkit.level.ChunkManager;
 import cn.nukkit.level.format.FullChunk;
 import cn.nukkit.level.generator.biome.Biome;
+import cn.nukkit.level.generator.biome.CaveBiome;
 import cn.nukkit.math.MathHelper;
 import cn.nukkit.math.NukkitRandom;
 
@@ -32,7 +33,7 @@
 
     public int worldHeightCap = 128;
 
-    public ChunkManager world;
+    public ChunkManager chunk;
 
     @Override
     public void populate(ChunkManager level, int chunkX, int chunkZ, NukkitRandom random) {
@@ -41,42 +42,40 @@ public void populate(ChunkManager level, int chunkX, int chunkZ, NukkitRandom ra
         long worldLong1 = this.random.nextLong();
         long worldLong2 = this.random.nextLong();
 
-        int i = this.checkAreaSize;
+        int size = this.checkAreaSize;
 
-        for(int x = chunkX - i; x <= chunkX + i; x++)
-            for(int z = chunkZ - i; z <= chunkZ + i; z++) {
-                long l3 = x * worldLong1;
-                long l4 = z * worldLong2;
-                this.random.setSeed(l3 ^ l4 ^ level.getSeed());
+        for (int x = chunkX - size; x <= chunkX + size; x++)
+            for (int z = chunkZ - size; z <= chunkZ + size; z++) {
+                long randomX = x * worldLong1;
+                long randomZ = z * worldLong2;
+                this.random.setSeed(randomX ^ randomZ ^ level.getSeed());
                 generateChunk(x, z, level.getChunk(chunkX, chunkZ));
             }
     }
 
-    protected void generateLargeCaveNode(long seed, FullChunk generatingChunkBuffer, double x, double y, double z) {
-        generateCaveNode(seed, generatingChunkBuffer, x, y, z, 1.0F + this.random.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
+    protected void generateLargeCaveNode(long seed, FullChunk chunk, double x, double y, double z) {
+        generateCaveNode(seed, chunk, x, y, z, 1.0F + this.random.nextFloat() * 6.0F, 0.0F, 0.0F, -1, -1, 0.5D);
     }
 
-    protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, double x, double y, double z, float paramFloat1,
-                                    float paramFloat2, float paramFloat3, int angle, int maxAngle, double paramDouble4) {
-        int chunkX = generatingChunkBuffer.getX();
-        int chunkZ = generatingChunkBuffer.getZ();
+    protected void generateCaveNode(long seed, FullChunk chunk, double x, double y, double z, float paramFloat1, float paramFloat2, float paramFloat3, int angle, int maxAngle, double paramDouble4) {
+        int chunkX = chunk.getX();
+        int chunkZ = chunk.getZ();
 
-
-        double real_x = chunkX * 16 + 8;
-        double real_z = chunkZ * 16 + 8;
+        double realX = chunkX * 16 + 8;
+        double realZ = chunkZ * 16 + 8;
 
         float f1 = 0.0F;
         float f2 = 0.0F;
 
         Random localRandom = new Random(seed);
 
-        if(maxAngle <= 0) {
+        if (maxAngle <= 0) {
             int checkAreaSize = this.checkAreaSize * 16 - 16;
             maxAngle = checkAreaSize - localRandom.nextInt(checkAreaSize / 4);
         }
         boolean isLargeCave = false;
 
-        if(angle == -1) {
+        if (angle == -1) {
             angle = maxAngle / 2;
             isLargeCave = true;
         }
@@ -84,7 +83,7 @@ protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, doub
         int j = localRandom.nextInt(maxAngle / 2) + maxAngle / 4;
         int k = localRandom.nextInt(6) == 0 ? 1 : 0;
 
-        for(; angle < maxAngle; angle++) {
+        for (; angle < maxAngle; angle++) {
             double d3 = 1.5D + MathHelper.sin(angle * 3.141593F / maxAngle) * paramFloat1 * 1.0F;
             double d4 = d3 * paramDouble4;
 
@@ -94,7 +93,7 @@ protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, doub
             y += f4;
             z += MathHelper.sin(paramFloat2) * f3;
 
-            if(k != 0)
+            if (k != 0)
                 paramFloat3 *= 0.92F;
             else {
                 paramFloat3 *= 0.7F;
@@ -107,28 +106,28 @@ protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, doub
             f2 += (localRandom.nextFloat() - localRandom.nextFloat()) * localRandom.nextFloat() * 2.0F;
             f1 += (localRandom.nextFloat() - localRandom.nextFloat()) * localRandom.nextFloat() * 4.0F;
 
-            if((!isLargeCave) && (angle == j) && (paramFloat1 > 1.0F) && (maxAngle > 0)) {
-                generateCaveNode(localRandom.nextLong(), generatingChunkBuffer, x, y, z, localRandom.nextFloat() * 0.5F + 0.5F,
+            if ((!isLargeCave) && (angle == j) && (paramFloat1 > 1.0F) && (maxAngle > 0)) {
+                generateCaveNode(localRandom.nextLong(), chunk, x, y, z, localRandom.nextFloat() * 0.5F + 0.5F,
                         paramFloat2 - 1.570796F, paramFloat3 / 3.0F, angle, maxAngle, 1.0D);
-                generateCaveNode(localRandom.nextLong(), generatingChunkBuffer, x, y, z, localRandom.nextFloat() * 0.5F + 0.5F,
+                generateCaveNode(localRandom.nextLong(), chunk, x, y, z, localRandom.nextFloat() * 0.5F + 0.5F,
                         paramFloat2 + 1.570796F, paramFloat3 / 3.0F, angle, maxAngle, 1.0D);
                 return;
             }
-            if((!isLargeCave) && (localRandom.nextInt(4) == 0)) {
+            if ((!isLargeCave) && (localRandom.nextInt(4) == 0)) {
                 continue;
             }
 
             // Check if distance to working point (x and z) too larger than working radius (maybe ??)
-            double d5 = x - real_x;
-            double d6 = z - real_z;
+            double d5 = x - realX;
+            double d6 = z - realZ;
             double d7 = maxAngle - angle;
             double d8 = paramFloat1 + 2.0F + 16.0F;
-            if(d5 * d5 + d6 * d6 - d7 * d7 > d8 * d8) {
+            if (d5 * d5 + d6 * d6 - d7 * d7 > d8 * d8) {
                 return;
             }
 
             //Boundaries check.
-            if((x < real_x - 16.0D - d3 * 2.0D) || (z < real_z - 16.0D - d3 * 2.0D) || (x > real_x + 16.0D + d3 * 2.0D) || (z > real_z + 16.0D + d3 * 2.0D))
+            if ((x < realX - 16.0D - d3 * 2.0D) || (z < realZ - 16.0D - d3 * 2.0D) || (x > realX + 16.0D + d3 * 2.0D) || (z > realZ + 16.0D + d3 * 2.0D))
                 continue;
 
 
@@ -141,73 +140,75 @@ protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, doub
             int i3 = MathHelper.floor(z - d3) - chunkZ * 16 - 1;
             int i4 = MathHelper.floor(z + d3) - chunkZ * 16 + 1;
 
-            if(m < 0)
+            if (m < 0)
                 m = 0;
-            if(n > 16)
+            if (n > 16)
                 n = 16;
 
-            if(i1 < 1)
+            if (i1 < 1)
                 i1 = 1;
-            if(i2 > this.worldHeightCap - 8) {
+            if (i2 > this.worldHeightCap - 8) {
                 i2 = this.worldHeightCap - 8;
             }
-            if(i3 < 0)
+            if (i3 < 0)
                 i3 = 0;
-            if(i4 > 16)
+            if (i4 > 16)
                 i4 = 16;
 
             // Search for water
             boolean waterFound = false;
-            for(int local_x = m; (!waterFound) && (local_x < n); local_x++) {
-                for(int local_z = i3; (!waterFound) && (local_z < i4); local_z++) {
-                    for(int local_y = i2 + 1; (!waterFound) && (local_y >= i1 - 1); local_y--) {
-                        if(local_y >= 0 && local_y < this.worldHeightCap) {
-                            int material = generatingChunkBuffer.getBlockId(local_x, local_y, local_z);
-                            if(material == Block.WATER
+            for (int local_x = m; (!waterFound) && (local_x < n); local_x++) {
+                for (int local_z = i3; (!waterFound) && (local_z < i4); local_z++) {
+                    for (int local_y = i2 + 1; (!waterFound) && (local_y >= i1 - 1); local_y--) {
+                        if (local_y >= 0 && local_y < this.worldHeightCap) {
+                            int material = chunk.getBlockId(local_x, local_y, local_z);
+                            if (material == Block.WATER
                                     || material == Block.STILL_WATER) {
                                 waterFound = true;
                             }
-                            if((local_y != i1 - 1) && (local_x != m) && (local_x != n - 1) && (local_z != i3) && (local_z != i4 - 1))
+                            if ((local_y != i1 - 1) && (local_x != m) && (local_x != n - 1) && (local_z != i3) && (local_z != i4 - 1))
                                 local_y = i1;
                         }
                     }
                 }
             }
-            if(waterFound)
+            if (waterFound)
                 continue;
 
             // Generate cave
-            for(int local_x = m; local_x < n; local_x++) {
+            for (int local_x = m; local_x < n; local_x++) {
                 double d9 = (local_x + chunkX * 16 + 0.5D - x) / d3;
-                for(int local_z = i3; local_z < i4; local_z++) {
+                for (int local_z = i3; local_z < i4; local_z++) {
 
                     double d10 = (local_z + chunkZ * 16 + 0.5D - z) / d3;
 
 
                     boolean grassFound = false;
-                    if(d9 * d9 + d10 * d10 < 1.0D) {
-                        for(int local_y = i2; local_y > i1; local_y--) {
+                    if (d9 * d9 + d10 * d10 < 1.0D) {
+                        for (int local_y = i2; local_y > i1; local_y--) {
                             double d11 = ((local_y - 1) + 0.5D - y) / d4;
-                            if((d11 > -0.7D) && (d9 * d9 + d11 * d11 + d10 * d10 < 1.0D)) {
-                                Biome biome = Biome.getBiome(generatingChunkBuffer.getBiomeId(local_x, local_z)); //this.world.getBiomeAt(local_x, local_z));
-                                int material = generatingChunkBuffer.getBlockId(local_x, local_y, local_z);
-                                int materialAbove = generatingChunkBuffer.getBlockId(local_x, local_y + 1, local_z);
-                                if(material == Block.GRASS || material == Block.MYCELIUM)
+                            if ((d11 > -0.7D) && (d9 * d9 + d11 * d11 + d10 * d10 < 1.0D)) {
+                                Biome biome = Biome.getBiome(chunk.getBiomeId(local_x, local_z));
+                                if (!(biome instanceof CaveBiome)) {
+                                    continue;
+                                }
+
+                                int material = chunk.getBlockId(local_x, local_y, local_z);
+                                int materialAbove = chunk.getBlockId(local_x, local_y + 1, local_z);
+                                if (material == Block.GRASS || material == Block.MYCELIUM) {
                                     grassFound = true;
+                                }
 //								if (this.isSuitableBlock(material, materialAbove, biome))
                                 {
-                                    if(local_y - 1 < 10) {
-                                        generatingChunkBuffer.setBlock(local_x, local_y, local_z, Block.LAVA);
+                                    if (local_y - 1 < 10) {
+                                        chunk.setBlock(local_x, local_y, local_z, Block.LAVA);
                                     } else {
-                                        generatingChunkBuffer.setBlock(local_x, local_y, local_z, Block.AIR);
+                                        chunk.setBlock(local_x, local_y, local_z, Block.AIR);
 
                                         // If grass was just deleted, try to
                                         // move it down
-                                        if(grassFound
-                                                && (generatingChunkBuffer.getBlockId(local_x, local_y - 1, local_z)
-                                                == Block.DIRT)) {
-                                            generatingChunkBuffer.setBlock(local_x, local_y - 1, local_z,
-                                                    biome.getSurfaceBlock());
+                                        if (grassFound && (chunk.getBlockId(local_x, local_y - 1, local_z) == Block.DIRT)) {
+                                            chunk.setBlock(local_x, local_y - 1, local_z, ((CaveBiome) biome).getSurfaceBlock());
                                         }
                                     }
                                 }
@@ -216,71 +217,68 @@ protected void generateCaveNode(long seed, FullChunk generatingChunkBuffer, doub
                     }
                 }
             }
-            if(isLargeCave)
+            if (isLargeCave)
                 break;
         }
     }
 
-    protected boolean isSuitableBlock(int material, int materialAbove, Biome biome) {
-        if(material == biome.getStoneBlock()) {
+    protected boolean isSuitableBlock(int material, int materialAbove, CaveBiome biome) {
+        if (material == biome.getStoneBlock()) {
             return true;
         }
-        if(material == Block.SAND || material == Block.GRAVEL) {
+        if (material == Block.SAND || material == Block.GRAVEL) {
             return !(materialAbove == Block.WATER || materialAbove == Block.STILL_WATER ||
                     materialAbove == Block.LAVA || materialAbove == Block.STILL_LAVA);
         }
-        if(material == biome.getGroundBlock()) {
+        if (material == biome.getGroundBlock()) {
             return true;
         }
-        if(material == biome.getSurfaceBlock()) {
+        if (material == biome.getSurfaceBlock()) {
             return true;
         }
 
         // Few hardcoded cases
-        if(material == Block.HARDENED_CLAY) {
+        if (material == Block.HARDENED_CLAY) {
             return true;
         }
-        if(material == Block.SANDSTONE) {
+        if (material == Block.SANDSTONE) {
             return true;
         }
         // TODO: add red sandstone case in Minecraft 1.8
-        if(material == Block.SNOW) {
-            return true;
-        }
+        return material == Block.SNOW;
 
-        return false;
     }
 
     protected void generateChunk(int chunkX, int chunkZ, FullChunk generatingChunkBuffer) {
-        int i = this.random.nextInt(this.random.nextInt(this.random.nextInt(this.caveFrequency) + 1) + 1);
-        if(this.evenCaveDistribution)
-            i = this.caveFrequency;
-        if(this.random.nextInt(100) >= this.caveRarity)
+        int i = this.random.nextInt(this.random.nextInt(this.random.nextInt(caveFrequency) + 1) + 1);
+        if (evenCaveDistribution)
+            i = caveFrequency;
+        if (this.random.nextInt(100) >= caveRarity)
             i = 0;
 
-        for(int j = 0; j < i; j++) {
+        for (int j = 0; j < i; j++) {
             double x = chunkX * 16 + this.random.nextInt(16);
 
             double y;
 
-            if(this.evenCaveDistribution)
-                y = numberInRange(random, this.caveMinAltitude, this.caveMaxAltitude);
+            if (evenCaveDistribution)
+                y = numberInRange(random, caveMinAltitude, caveMaxAltitude);
             else
-                y = this.random.nextInt(this.random.nextInt(this.caveMaxAltitude - this.caveMinAltitude + 1) + 1) + this.caveMinAltitude;
+                y = this.random.nextInt(this.random.nextInt(caveMaxAltitude - caveMinAltitude + 1) + 1) + caveMinAltitude;
 
             double z = chunkZ * 16 + this.random.nextInt(16);
 
-            int count = this.caveSystemFrequency;
+            int count = caveSystemFrequency;
             boolean largeCaveSpawned = false;
-            if(this.random.nextInt(100) <= this.individualCaveRarity) {
+            if (this.random.nextInt(100) <= individualCaveRarity) {
                 generateLargeCaveNode(this.random.nextLong(), generatingChunkBuffer, x, y, z);
                 largeCaveSpawned = true;
             }
 
-            if((largeCaveSpawned) || (this.random.nextInt(100) <= this.caveSystemPocketChance - 1)) {
-                count += numberInRange(random, this.caveSystemPocketMinSize, this.caveSystemPocketMaxSize);
+            if ((largeCaveSpawned) || (this.random.nextInt(100) <= caveSystemPocketChance - 1)) {
+                count += numberInRange(random, caveSystemPocketMinSize, caveSystemPocketMaxSize);
             }
-            while(count > 0) {
+            while (count > 0) {
                 count--;
                 float f1 = this.random.nextFloat() * 3.141593F * 2.0F;
                 float f2 = (this.random.nextFloat() - 0.5F) * 2.0F / 8.0F;
