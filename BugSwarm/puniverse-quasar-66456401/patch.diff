diff --git a/build.gradle b/build.gradle
index 3d3ead1276..f635c68c99 100755
--- a/build.gradle
+++ b/build.gradle
@@ -459,7 +459,7 @@ project (':quasar-core') {
             classpath = project.sourceSets["${set.name}test"].runtimeClasspath
             
             project.afterEvaluate {
-                jvmArgs "-javaagent:${shadowJarTask.archivePath}"
+                jvmArgs "-javaagent:${shadowJarTask.archivePath}" // =vdc
             }
         }
         
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
index 39fe14bbe0..a8bde13111 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/Fiber.java
@@ -1682,12 +1682,14 @@ private static void printCandidates(Method[] candidates, StringBuilder stackTrac
             for (final Method m : candidates) {
                 stackTrace.append("\n\t\t");
                 final Instrumented i = m.getAnnotation(Instrumented.class);
-                if (i != null)
+                if (i != null) {
+                    int[] susCallSites = i.suspendableCallSites();
                     stackTrace.append("@Instrumented(startLine=").append(i.methodStart())
                         .append(", endLine=").append(i.methodEnd())
                         .append(", optimized=").append(i.methodOptimized())
-                        .append(", susCallSites=").append(i.suspendableCallsites() == null ? "[]" : Arrays.toString(i.suspendableCallsites()))
+                        .append(", susCallSites=").append(susCallSites == null ? "[]" : Arrays.toString(susCallSites))
                         .append(") ");
+                }
                 stackTrace.append(m.toGenericString());
             }
         }
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/Instrumented.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/Instrumented.java
index e0296e9bfb..99e5c996c6 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/Instrumented.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/Instrumented.java
@@ -19,7 +19,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Instrumented {
     // Relevant only for methods
-    int[] suspendableCallsites() default {};
+    int[] suspendableCallSites() default {};
     int methodStart() default -1;
     int methodEnd() default -1;
     boolean methodOptimized() default false;
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
index 6c0d50da13..a8ce7bd756 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/Classes.java
@@ -17,7 +17,9 @@
  * @author pron
  */
 final class Classes {
-    static final String EXCEPTION_NAME = "co/paralleluniverse/fibers/SuspendExecution";
+    static final String EXCEPTION_NAME = "java/lang/Exception";
+    static final String THROWABLE_NAME = "java/lang/Throwable";
+    static final String SUSPEND_EXECUTION_NAME = "co/paralleluniverse/fibers/SuspendExecution";
     static final String RUNTIME_EXCEPTION_NAME = "co/paralleluniverse/fibers/RuntimeSuspendExecution";
     static final String UNDECLARED_THROWABLE_NAME = "java/lang/reflect/UndeclaredThrowableException";
     static final String ANNOTATION_NAME = "co/paralleluniverse/fibers/Suspendable";
@@ -32,7 +34,7 @@
         new BlockingMethod("java/lang/Object", "wait", "()V", "(J)V", "(JI)V"),
     };
     // computed
-    static final String EXCEPTION_DESC = "L" + EXCEPTION_NAME + ";";
+    static final String EXCEPTION_DESC = "L" + SUSPEND_EXECUTION_NAME + ";";
     static final String ANNOTATION_DESC = "L" + ANNOTATION_NAME + ";";
     static final String DONT_INSTRUMENT_ANNOTATION_DESC = "L" + DONT_INSTRUMENT_ANNOTATION_NAME + ";";
     static final String ALREADY_INSTRUMENTED_DESC = Type.getDescriptor(Instrumented.class);
@@ -48,7 +50,7 @@ public static boolean isAllowedToBlock(String className, String methodName) {
         return STRAND_NAME.equals(className);
     }
 
-    public static int isBlockingCall(MethodInsnNode ins) {
+    public static int blockingCallIdx(MethodInsnNode ins) {
         for (int i = 0, n = BLOCKING_METHODS.length; i < n; i++) {
             if (BLOCKING_METHODS[i].match(ins))
                 return i;
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java
index 0eb95fc218..23fc04f041 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/DefaultSuspendableClassifier.java
@@ -13,7 +13,7 @@
  */
 package co.paralleluniverse.fibers.instrument;
 
-import static co.paralleluniverse.fibers.instrument.Classes.EXCEPTION_NAME;
+import static co.paralleluniverse.fibers.instrument.Classes.SUSPEND_EXECUTION_NAME;
 import co.paralleluniverse.fibers.instrument.MethodDatabase.SuspendableType;
 import java.util.ServiceLoader;
 
@@ -61,7 +61,7 @@ public SuspendableType isSuspendable(MethodDatabase db, String sourceName, Strin
     private static boolean checkExceptions(String[] exceptions) {
         if (exceptions != null) {
             for (String ex : exceptions) {
-                if (ex.equals(EXCEPTION_NAME))
+                if (ex.equals(SUSPEND_EXECUTION_NAME))
                     return true;
             }
         }
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
index 17c1335ee4..4490d74b88 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentClass.java
@@ -248,13 +248,11 @@ public void visitEnd() {
                         if (db.isDebug())
                             db.log(LogLevel.INFO, "About to instrument method %s#%s%s", className, mn.name, mn.desc);
 
-                        final int[] suspCallsIndexes = im.getSuspCallsIndexes();
-                        if (suspCallsIndexes.length > 0) {
+                        if (im.callsSuspendables()) {
                             if (mn.name.charAt(0) == '<')
                                 throw new UnableToInstrumentException("special method", className, mn.name, mn.desc);
 
-                            // There are suspendable calls => adding @Instrumented at the very least
-                            im.accept(outMV, hasAnnotation(mn), suspCallsIndexes);
+                            im.accept(outMV, hasAnnotation(mn));
                         } else {
                             db.log(LogLevel.INFO, "Nothing to instrument in method %s#%s%s", className, mn.name, mn.desc);
                             mn.accept(outMV);
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
index 493d6391a6..ee68480718 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/InstrumentMethod.java
@@ -45,18 +45,19 @@
 import co.paralleluniverse.fibers.Stack;
 import static co.paralleluniverse.fibers.instrument.Classes.ALREADY_INSTRUMENTED_DESC;
 import static co.paralleluniverse.fibers.instrument.Classes.EXCEPTION_NAME;
+import static co.paralleluniverse.fibers.instrument.Classes.THROWABLE_NAME;
+import static co.paralleluniverse.fibers.instrument.Classes.SUSPEND_EXECUTION_NAME;
 import static co.paralleluniverse.fibers.instrument.Classes.RUNTIME_EXCEPTION_NAME;
 import static co.paralleluniverse.fibers.instrument.Classes.STACK_NAME;
 import static co.paralleluniverse.fibers.instrument.Classes.UNDECLARED_THROWABLE_NAME;
 import static co.paralleluniverse.fibers.instrument.Classes.isAllowedToBlock;
-import static co.paralleluniverse.fibers.instrument.Classes.isBlockingCall;
+import static co.paralleluniverse.fibers.instrument.Classes.blockingCallIdx;
 import static co.paralleluniverse.fibers.instrument.Classes.isYieldMethod;
 import co.paralleluniverse.fibers.instrument.MethodDatabase.SuspendableType;
 import static co.paralleluniverse.fibers.instrument.MethodDatabase.isInvocationHandlerInvocation;
 import static co.paralleluniverse.fibers.instrument.MethodDatabase.isMethodHandleInvocation;
 import static co.paralleluniverse.fibers.instrument.MethodDatabase.isReflectInvocation;
 import static co.paralleluniverse.fibers.instrument.MethodDatabase.isSyntheticAccess;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -117,6 +118,7 @@
     private int startSourceLine = -1;
     private int endSourceLine = -1;
     private int[] suspCallsSourceLines = new int[8];
+    private int[] suspCallsIndexes = null;
 
     public InstrumentMethod(MethodDatabase db, String sourceName, String className, MethodNode mn) throws AnalyzerException {
         this.db = db;
@@ -137,40 +139,46 @@ public InstrumentMethod(MethodDatabase db, String sourceName, String className,
         }
     }
 
-    public int[] getSuspCallsIndexes() {
-        final int numIns = mn.instructions.size();
-        int[] suspCallsIndexes = new int[8];
-        int currSourceLine = -1;
-        int count = 0;
-        for (int i = 0; i < numIns; i++) {
-            final Frame f = frames[i];
-            if (f != null) { // reachable ?
-                final AbstractInsnNode in = mn.instructions.get(i);
-                if (in.getType() == AbstractInsnNode.LINE) {
-                    final LineNumberNode lnn = (LineNumberNode) in;
-                    currSourceLine = lnn.line;
-                    if (startSourceLine == -1 || currSourceLine < startSourceLine)
-                        startSourceLine = currSourceLine;
-                    if (endSourceLine == -1 || currSourceLine > endSourceLine)
-                        endSourceLine = currSourceLine;
-                } else if (in.getType() == AbstractInsnNode.METHOD_INSN || in.getType() == AbstractInsnNode.INVOKE_DYNAMIC_INSN) {
-                    if (isSuspendableCall(in)) {
-                        if (count >= suspCallsIndexes.length)
-                            suspCallsIndexes = Arrays.copyOf(suspCallsIndexes, suspCallsIndexes.length * 2);
-                        if (count >= suspCallsSourceLines.length)
-                            suspCallsSourceLines = Arrays.copyOf(suspCallsSourceLines, suspCallsSourceLines.length * 2);
-                        suspCallsIndexes[count] = i;
-                        suspCallsSourceLines[count] = currSourceLine;
-                        count++;
+    public boolean callsSuspendables() {
+        if (suspCallsIndexes == null) {
+            suspCallsIndexes = new int[8];
+            final int numIns = mn.instructions.size();
+            int currSourceLine = -1;
+            int count = 0;
+            for (int i = 0; i < numIns; i++) {
+                final Frame f = frames[i];
+                if (f != null) { // reachable ?
+                    final AbstractInsnNode in = mn.instructions.get(i);
+                    if (in.getType() == AbstractInsnNode.LINE) {
+                        final LineNumberNode lnn = (LineNumberNode) in;
+                        currSourceLine = lnn.line;
+                        if (startSourceLine == -1 || currSourceLine < startSourceLine)
+                            startSourceLine = currSourceLine;
+                        if (endSourceLine == -1 || currSourceLine > endSourceLine)
+                            endSourceLine = currSourceLine;
+                    } else if (in.getType() == AbstractInsnNode.METHOD_INSN || in.getType() == AbstractInsnNode.INVOKE_DYNAMIC_INSN) {
+                        if (isSuspendableCall(in)) {
+                            if (count >= suspCallsIndexes.length)
+                                suspCallsIndexes = Arrays.copyOf(suspCallsIndexes, suspCallsIndexes.length * 2);
+                            if (count >= suspCallsSourceLines.length)
+                                suspCallsSourceLines = Arrays.copyOf(suspCallsSourceLines, suspCallsSourceLines.length * 2);
+                            suspCallsIndexes[count] = i;
+                            suspCallsSourceLines[count] = currSourceLine;
+                            count++;
+                        } else
+                            possiblyWarnAboutBlocking((MethodInsnNode) in);
                     }
                 }
             }
+
+            if (count < suspCallsSourceLines.length)
+                suspCallsSourceLines = Arrays.copyOf(suspCallsSourceLines, count);
+
+            if (count < suspCallsIndexes.length)
+                suspCallsIndexes = Arrays.copyOf(suspCallsIndexes, count);
         }
 
-        if (count < suspCallsSourceLines.length)
-            Arrays.copyOf(suspCallsSourceLines, count);
-            
-        return count < suspCallsIndexes.length ? Arrays.copyOf(suspCallsIndexes, count) : suspCallsIndexes;
+        return suspCallsIndexes.length > 0;
     }
 
     private boolean isSuspendableCall(AbstractInsnNode in) {
@@ -250,18 +258,7 @@ else if (st == null) {
                         if (in.getType() == AbstractInsnNode.METHOD_INSN) {// not invokedynamic
                             final MethodInsnNode min = (MethodInsnNode) in;
                             db.log(LogLevel.DEBUG, "Method call at instruction %d to %s#%s%s is not suspendable", i, min.owner, min.name, min.desc);
-                            int blockingId = isBlockingCall(min);
-                            if (blockingId >= 0 && !isAllowedToBlock(className, mn.name)) {
-                                int mask = 1 << blockingId;
-                                if (!db.isAllowBlocking()) {
-                                    throw new UnableToInstrumentException("blocking call to "
-                                            + min.owner + "#" + min.name + min.desc, className, mn.name, mn.desc);
-                                } else if ((warnedAboutBlocking & mask) == 0) {
-                                    warnedAboutBlocking |= mask;
-                                    db.log(LogLevel.WARNING, "Method %s#%s%s contains potentially blocking call to "
-                                            + min.owner + "#" + min.name + min.desc, className, mn.name, mn.desc);
-                                }
-                            }
+                            possiblyWarnAboutBlocking(min);
                         }
                     }
                 }
@@ -270,22 +267,36 @@ else if (st == null) {
         addCodeBlock(null, numIns);
     }
 
-    public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexes) {
-        db.log(LogLevel.INFO, "Instrumenting method %s#%s%s", className, mn.name, mn.desc);
+    private void possiblyWarnAboutBlocking(final MethodInsnNode min) throws UnableToInstrumentException {
+        int blockingId = blockingCallIdx(min);
+        if (blockingId >= 0 && !isAllowedToBlock(className, mn.name)) {
+            int mask = 1 << blockingId;
+            if (!db.isAllowBlocking()) {
+                throw new UnableToInstrumentException("blocking call to "
+                        + min.owner + "#" + min.name + min.desc, className, mn.name, mn.desc);
+            } else if ((warnedAboutBlocking & mask) == 0) {
+                warnedAboutBlocking |= mask;
+                db.log(LogLevel.WARNING, "Method %s#%s%s contains potentially blocking call to "
+                        + min.owner + "#" + min.name + min.desc, className, mn.name, mn.desc);
+            }
+        }
+    }
 
-        // Called by InstrumentClass => we need at least to dump the @Instrumented annotation
+    public void accept(MethodVisitor mv, boolean hasAnnotation) {
+        db.log(LogLevel.INFO, "Instrumenting method %s#%s%s", className, mn.name, mn.desc);
 
-        final boolean skip = skip(susCallsIndexes);
+        final boolean skipInstrumentation = canInstrumentationBeSkipped(suspCallsIndexes);
 
-        emitInstrumentedAnn(mv, skip);
+        emitInstrumentedAnn(mv, skipInstrumentation);
 
-        if (skip) {
-            db.log(LogLevel.INFO, "[OPTIMIZE] skipping instrumentation for method %s#%s%s", className, mn.name, mn.desc);
-            mn.accept(mv);
+        if (skipInstrumentation) {
+            db.log(LogLevel.INFO, "[OPTIMIZE] Skipping instrumentation for method %s#%s%s", className, mn.name, mn.desc);
+            mn.accept(mv); // Dump
             return;
         }
 
         // Instrument
+
         final boolean handleProxyInvocations = HANDLE_PROXY_INVOCATIONS & hasSuspendableSuperCalls;
 
         collectCodeBlocks();
@@ -311,7 +322,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexe
 //            mv.visitInsn(Opcodes.ICONST_0);
 //            mv.visitVarInsn(Opcodes.ISTORE, lvarSuspendableCalled);
 //        }
-        mv.visitTryCatchBlock(lMethodStart, lMethodEnd, lCatchSEE, EXCEPTION_NAME);
+        mv.visitTryCatchBlock(lMethodStart, lMethodEnd, lCatchSEE, SUSPEND_EXECUTION_NAME);
         mv.visitTryCatchBlock(lMethodStart, lMethodEnd, lCatchSEE, RUNTIME_EXCEPTION_NAME);
         if (handleProxyInvocations)
             mv.visitTryCatchBlock(lMethodStart, lMethodEnd, lCatchUTE, UNDECLARED_THROWABLE_NAME);
@@ -341,7 +352,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexe
         for (Object o : mn.tryCatchBlocks) {
             final TryCatchBlockNode tcb = (TryCatchBlockNode) o;
 
-            if (EXCEPTION_NAME.equals(tcb.type) && !hasAnnotation) // we allow catch of SuspendExecution in method annotated with @Suspendable.
+            if (SUSPEND_EXECUTION_NAME.equals(tcb.type) && !hasAnnotation) // we allow catch of SuspendExecution in method annotated with @Suspendable.
                 throw new UnableToInstrumentException("catch for SuspendExecution", className, mn.name, mn.desc);
             if (handleProxyInvocations && UNDECLARED_THROWABLE_NAME.equals(tcb.type)) // we allow catch of SuspendExecution in method annotated with @Suspendable.
                 throw new UnableToInstrumentException("catch for UndeclaredThrowableException", className, mn.name, mn.desc);
@@ -473,7 +484,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexe
                     mv.visitLabel(startCatch); // catch(InvocationTargetException ex) {
                     mv.visitInsn(Opcodes.DUP);
                     mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
-                    mv.visitTypeInsn(Opcodes.INSTANCEOF, EXCEPTION_NAME);
+                    mv.visitTypeInsn(Opcodes.INSTANCEOF, SUSPEND_EXECUTION_NAME);
                     mv.visitJumpInsn(Opcodes.IFEQ, notSuspendExecution);
                     mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
                     mv.visitLabel(notSuspendExecution);
@@ -499,7 +510,7 @@ public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexe
             // println(mv, "CTCH: ");
             mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
             // println(mv, "CAUSE: ");
-            mv.visitTypeInsn(Opcodes.INSTANCEOF, EXCEPTION_NAME);
+            mv.visitTypeInsn(Opcodes.INSTANCEOF, SUSPEND_EXECUTION_NAME);
             mv.visitJumpInsn(Opcodes.IFEQ, lCatchAll);
             mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;", false);
             mv.visitJumpInsn(Opcodes.GOTO, lCatchSEE);
@@ -535,24 +546,55 @@ public void accept(MethodVisitor mv, boolean hasAnnotation, int[] susCallsIndexe
         return new Pair<>(null, null);
     }
 
-    private boolean skip(int[] susCallsIndexes) {
+    private boolean canInstrumentationBeSkipped(int[] susCallsIndexes) {
+        db.log(LogLevel.DEBUG, "[OPTIMIZE] Examining method %s#%s%s with susCallsIndexes=%s", className, mn.name, mn.desc, Arrays.toString(susCallsIndexes));
+        // Fully instrumentation-transparent methods
         return forwardsToSuspendable(susCallsIndexes);
     }
 
     private boolean forwardsToSuspendable(int[] susCallsIndexes) {
-        if (susCallsIndexes.length == 1) { // => Exactly one suspendable call
-            boolean ret =
-                !containsInvocations(susCallsIndexes, 0) &&
-                !containsBackBranches(susCallsIndexes, 0) &&
-                !containsBackBranchesAtOrBeforeStart(susCallsIndexes, 1) &&
-                startsWithSuspCallButNotYield(susCallsIndexes, 1);
-
-            return ret;
-        } else
-            return false;
+        if (susCallsIndexes.length == 1) // => Exactly one suspendable call
+            return
+                (db.isAllowMonitors() || !hasMonitors()) && // If not checking we could optimize away and skip collectCodeBlocks' exception/warning
+                !hasSuspendableTryCatchBlocksStartingIn(susCallsIndexes, 0) &&
+                !hasCalls(susCallsIndexes, 0) && // They could alter fields
+                !accessesFields(susCallsIndexes, 0) && // They could alter fields
+                !branchesBack(susCallsIndexes, 0) && // We assume instrumenting is cheaper than for-loops recalculating locals
+                (db.isAllowBlocking() || !callsBlocking(susCallsIndexes, 1)) && // If not checking we could optimize away and skip collectCodeBlocks' exception/warning
+                !branchesAtOrBeforeStart(susCallsIndexes, 1) && // Suspendable is called only ones
+                startsWithSuspCallButNotYield(susCallsIndexes, 1); // Direct yield calls need instrumentation support
+
+        return false;
+    }
+
+    private boolean hasMonitors() {
+        for (int i = 0; i < mn.instructions.size() - 1; i++) {
+            AbstractInsnNode ins = mn.instructions.get(i);
+
+            switch (ins.getOpcode()) {
+                case Opcodes.MONITORENTER:
+                case Opcodes.MONITOREXIT:
+                    return true;
+            }
+        }
+        return false;
     }
 
-    private boolean containsInvocations(int[] susCallsIndexes, int blockNum) {
+    private boolean hasSuspendableTryCatchBlocksStartingIn(int[] susCallsIndexes, int blockNum) {
+        final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
+        for(Object o : mn.tryCatchBlocks) {
+            TryCatchBlockNode tcb = (TryCatchBlockNode) o;
+            if (mn.instructions.indexOf(tcb.start) <= end) {
+                if (THROWABLE_NAME.equals(tcb.type)
+                    || EXCEPTION_NAME.equals(tcb.type)
+                    || SUSPEND_EXECUTION_NAME.equals(tcb.type))
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean hasCalls(int[] susCallsIndexes, int blockNum) {
         final int start = getBlockStartInsnIdxInclusive(blockNum, susCallsIndexes);
         final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
 
@@ -564,7 +606,31 @@ private boolean containsInvocations(int[] susCallsIndexes, int blockNum) {
         return false;
     }
 
-    private boolean containsBackBranchesAtOrBeforeStart(int[] susCallsIndexes, int blockNum) {
+    private boolean callsBlocking(int[] susCallsIndexes, int blockNum) {
+        final int start = getBlockStartInsnIdxInclusive(blockNum, susCallsIndexes);
+        final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
+
+        for (int i = start; i <= end; i++) {
+            final AbstractInsnNode ain = mn.instructions.get(i);
+            if (ain instanceof MethodInsnNode && blockingCallIdx((MethodInsnNode) ain) != -1)
+                return true;
+        }
+        return false;
+    }
+
+    private boolean accessesFields(int[] susCallsIndexes, int blockNum) {
+        final int start = getBlockStartInsnIdxInclusive(blockNum, susCallsIndexes);
+        final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
+
+        for (int i = start; i <= end; i++) {
+            final AbstractInsnNode ain = mn.instructions.get(i);
+            if (ain.getType() == AbstractInsnNode.FIELD_INSN)
+                return true;
+        }
+        return false;
+    }
+
+    private boolean branchesAtOrBeforeStart(int[] susCallsIndexes, int blockNum) {
         final int start = getBlockStartInsnIdxInclusive(blockNum, susCallsIndexes);
         final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
 
@@ -582,7 +648,7 @@ private boolean startsWithSuspCallButNotYield(int[] susCallsIndexes, int blockNu
         return isSuspendableCall(insn) && !isYieldCall(insn);
     }
 
-    private boolean containsBackBranches(int[] susCallsIndexes, int blockNum) {
+    private boolean branchesBack(int[] susCallsIndexes, int blockNum) {
         final int start = getBlockStartInsnIdxInclusive(blockNum, susCallsIndexes);
         final int end = getBlockEndInsnIdxInclusive(blockNum, susCallsIndexes);
 
@@ -610,15 +676,29 @@ private int getBlockEndInsnIdxInclusive(int blockNum, int[] susCallsIndexes) {
     }
 
     private void emitInstrumentedAnn(MethodVisitor mv, boolean skip) {
+        final StringBuilder sb = new StringBuilder();
         final AnnotationVisitor instrumentedAV = mv.visitAnnotation(ALREADY_INSTRUMENTED_DESC, true);
-        final AnnotationVisitor linesAV = instrumentedAV.visitArray("suspendableCallsites");
-        for(int i = 0; i < suspCallsSourceLines.length; i++)
-            linesAV.visit("", suspCallsSourceLines[i]);
+        sb.append("@Instrumented(");
+        final AnnotationVisitor linesAV = instrumentedAV.visitArray("suspendableCallSites");
+        sb.append("suspendableCallSites=[");
+        for(int i = 0; i < suspCallsSourceLines.length; i++) {
+            if (i != 0)
+                sb.append(", ");
+            final int l = suspCallsSourceLines[i];
+            linesAV.visit("", l);
+            sb.append(l);
+        }
         linesAV.visitEnd();
+        sb.append("],");
         instrumentedAV.visit("methodStart", startSourceLine);
+        sb.append("methodStart=").append(startSourceLine).append(",");
         instrumentedAV.visit("methodEnd", endSourceLine);
+        sb.append("methodEnd=").append(endSourceLine).append(",");
         instrumentedAV.visit("methodOptimized", skip);
+        sb.append("methodOptimized=").append(skip);
         instrumentedAV.visitEnd();
+        sb.append(")");
+        db.log(LogLevel.INFO, "Annotating method %s#%s%s with %s", className, mn.name, mn.desc, sb);
     }
 
     private void dumpStack(MethodVisitor mv) {
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java
index 53d9f49600..6436bd16eb 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendableHelper.java
@@ -73,9 +73,9 @@ public static boolean isInstrumented(Class clazz) {
         } else {
             Instrumented i = m.getAnnotation(Instrumented.class);
             if (i != null) {
-                for(int j : i.suspendableCallsites()) {
+                for(int j : i.suspendableCallSites()) {
                     if (j == sourceLine)
-                        return new Pair<>(true, i.suspendableCallsites());
+                        return new Pair<>(true, i.suspendableCallSites());
                 }
             }
         }
diff --git a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java
index 44ca8c4389..53ba6d6d02 100755
--- a/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java
+++ b/quasar-core/src/main/java/co/paralleluniverse/fibers/instrument/SuspendablesScanner.java
@@ -18,7 +18,7 @@
 import static co.paralleluniverse.common.reflection.ClassLoaderUtil.classToResource;
 import static co.paralleluniverse.fibers.instrument.Classes.ANNOTATION_DESC;
 import static co.paralleluniverse.fibers.instrument.Classes.DONT_INSTRUMENT_ANNOTATION_DESC;
-import static co.paralleluniverse.fibers.instrument.Classes.EXCEPTION_NAME;
+import static co.paralleluniverse.fibers.instrument.Classes.SUSPEND_EXECUTION_NAME;
 import co.paralleluniverse.fibers.instrument.MethodDatabase.SuspendableType;
 import com.google.common.base.Function;
 import java.io.File;
@@ -386,7 +386,7 @@ private void markKnownSuspendable(String methodname, String desc, SuspendableTyp
         private boolean checkExceptions(String[] exceptions) {
             if (exceptions != null) {
                 for (String ex : exceptions) {
-                    if (ex.equals(EXCEPTION_NAME))
+                    if (ex.equals(SUSPEND_EXECUTION_NAME))
                         return true;
                 }
             }
diff --git a/quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java b/quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
index 4bd413cef4..43f217d360 100755
--- a/quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
+++ b/quasar-core/src/test/java/co/paralleluniverse/fibers/instrument/BlockingTest.java
@@ -38,7 +38,7 @@
 import org.junit.Test;
 
 /**
- * Test to checking blocking call detection
+ * Test to check blocking call detection
  *
  * @author Matthias Mann
  */
@@ -48,7 +48,7 @@
     @Test
     public void testSuspend() throws IOException {
         final String className = BlockingTest.class.getName().replace('.', '/');
-        final HashSet<String> msgs = new HashSet<String>();
+        final HashSet<String> msgs = new HashSet<>();
         msgs.add("Method " + className + "#t_wait()V contains potentially blocking call to java/lang/Object#wait()V");
         msgs.add("Method " + className + "#t_sleep1()V contains potentially blocking call to java/lang/Thread#sleep(J)V");
         msgs.add("Method " + className + "#t_sleep2()V contains potentially blocking call to java/lang/Thread#sleep(JI)V");
@@ -60,6 +60,7 @@ public void testSuspend() throws IOException {
         final MethodDatabase db = instrumentor.getMethodDatabase();
         db.setAllowBlocking(true);
         db.setLog(new Log() {
+            @Override
             public void log(LogLevel level, String msg, Object... args) {
                 if (level == LogLevel.WARNING) {
                     msg = String.format(Locale.ENGLISH, msg, args);
@@ -67,6 +68,7 @@ public void log(LogLevel level, String msg, Object... args) {
                 }
             }
 
+            @Override
             public void error(String msg, Throwable ex) {
                 throw new Error(msg, ex);
             }
