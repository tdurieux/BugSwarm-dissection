diff --git a/config/intellij-idea-inspections.xml b/config/intellij-idea-inspections.xml
index 09349c9d75..4b9ffd7f8e 100755
--- a/config/intellij-idea-inspections.xml
+++ b/config/intellij-idea-inspections.xml
@@ -1126,7 +1126,8 @@
     <inspection_tool class="JSUnfilteredForInLoop" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnnecessarySemicolon" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnresolvedFunction" enabled="true" level="ERROR" enabled_by_default="true" />
-    <inspection_tool class="JSUnresolvedLibraryURL" enabled="true" level="ERROR" enabled_by_default="true" />
+    <!-- it produce false positives on references of globally availbale libraries -->
+    <inspection_tool class="JSUnresolvedLibraryURL" enabled="false" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnresolvedVariable" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnusedAssignment" enabled="true" level="ERROR" enabled_by_default="true" />
     <inspection_tool class="JSUnusedGlobalSymbols" enabled="true" level="ERROR" enabled_by_default="true" />
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 2a400b49c1..a6ff663e4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -471,7 +471,7 @@ public void testCreateListenerIllegalStateException() throws Exception {
         method.setAccessible(true);
         try {
             method.invoke(null, "myformat", null);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause() instanceof IllegalStateException);
@@ -487,7 +487,7 @@ public void testCreateListenerWithLocationIllegalStateException() throws Excepti
         final String outDir = "myfolder123";
         try {
             method.invoke(null, "myformat", outDir);
-            fail();
+            fail("InvocationTargetException  is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause() instanceof IllegalStateException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
index dcf8652801..506d36002a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -129,7 +129,7 @@ public void testPackagesWithSaxException() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof SAXException);
@@ -154,7 +154,7 @@ public void testPackagesWithIoException() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof IOException);
@@ -171,7 +171,7 @@ public void testPackagesWithIoExceptionGetResources() throws Exception {
 
         try {
             PackageNamesLoader.getPackageNames(classLoader);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof IOException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
index 73f9645164..f4bb66c2bd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -107,7 +107,7 @@ public void testExceptionNoSuchAlgorithmException() throws Exception {
         method.setAccessible(true);
         try {
             method.invoke(cache, config);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (InvocationTargetException ex) {
             assertTrue(ex.getCause().getCause() instanceof NoSuchAlgorithmException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 5664aff996..0b69994b4d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -91,7 +91,7 @@ public void testAcceptableTokens()
         final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
         try {
             verify(checkConfig, getPath("InputMain.java"), expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             final String errorMsg = ex.getMessage();
@@ -118,7 +118,7 @@ public void testWithCheckNotHavingTreeWalkerAsParent() throws Exception {
 
         try {
             verify(checkConfig, temporaryFolder.newFile().getPath(), expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException exception) {
             assertTrue(exception.getMessage().contains("TreeWalker is not allowed as a parent of"));
@@ -318,7 +318,7 @@ public void testRequiredTokenIsNotInDefaultTokens() throws Exception {
 
         try {
             verify(checkConfig, pathToEmptyFile, expected);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getMessage().startsWith("cannot initialize module"
@@ -340,7 +340,7 @@ public void testRequiredTokenIsEmptyIntArray() throws Exception {
         }
         catch (CheckstyleException ignored) {
             // unexpected
-            fail();
+            fail("CheckstyleException is NOT expected");
         }
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
index 56d19a61c1..ffdb8127e9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java
@@ -74,7 +74,7 @@ public void testContextualizeInvocationTargetException() {
         context.add("exceptionalMethod", 123.0f);
         try {
             testBean.contextualize(context);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof InvocationTargetException);
@@ -89,7 +89,7 @@ public void testContextualizeConversionException() {
         context.add("val", "some string");
         try {
             testBean.contextualize(context);
-            fail();
+            fail("InvocationTargetException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getCause() instanceof ConversionException);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
index 0d64a90151..e48c621026 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
@@ -35,7 +35,7 @@ public void testUnsupportedCharset() throws IOException {
         final String charsetName = "STRANGE_CHARSET";
         try {
             new FileText(new File("any name"), charsetName);
-            fail();
+            fail("UnsupportedEncodingException is expected");
         }
         catch (UnsupportedEncodingException ex) {
             assertEquals("Unsupported charset: " + charsetName, ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
index 7ab2097c66..ae8662b255 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java
@@ -61,7 +61,7 @@ public void testMisc() throws ClassNotFoundException {
 
         try {
             classResolver.resolve("ChoiceFormat", "");
-            fail();
+            fail("ClassNotFoundException is expected");
         }
         catch (ClassNotFoundException ex) {
             // expected
@@ -77,7 +77,7 @@ public void testMisc() throws ClassNotFoundException {
         javaUtilClassResolver.resolve("List", "");
         try {
             javaUtilClassResolver.resolve("two.nil.england", "");
-            fail();
+            fail("ClassNotFoundException is expected");
         }
         catch (ClassNotFoundException ex) {
             // expected
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
index 9ebe768349..8d8677d935 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java
@@ -91,7 +91,7 @@ public void testCallVisitToken() throws Exception {
         final TrailingCommentCheck check = new TrailingCommentCheck();
         try {
             check.visitToken(new DetailAST());
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals("visitToken() shouldn't be called.", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
index 8cfabf4b60..4e3ea92c79 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -108,7 +108,7 @@ public void testIllegalStateException() throws Exception {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.CTOR_DEF, "ctor"));
         try {
             check.visitToken(ast);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals(ast.toString(), ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
index 75ffd85d03..3bdaae1048 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
@@ -265,13 +265,12 @@ public void testGetOption() throws Exception {
         final AnnotationUseStyleCheck check = new AnnotationUseStyleCheck();
         try {
             check.setElementStyle("SHOULD_PRODUCE_ERROR");
+            Assert.fail("ConversionException is expected");
         }
         catch (ConversionException ex) {
             assertTrue(ex.getMessage().startsWith("unable to parse"));
             return;
         }
-
-        Assert.fail();
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
index c98584f1fb..0d7294d7dc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
@@ -178,7 +178,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(lambdaAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
index 87e4192271..08d59ebe39 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
@@ -183,7 +183,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(lambdaAst);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
index c0395bcfb8..180e11ae1d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java
@@ -210,7 +210,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
index 80fa0d0763..c75c3d6eb5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
@@ -98,7 +98,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -106,7 +106,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
index ad318661e1..d0928276db 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
@@ -71,7 +71,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -79,7 +79,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
index e6df187462..548c59afcc 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
@@ -124,7 +124,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.visitToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
@@ -132,7 +132,7 @@ public void testImproperToken() throws Exception {
 
         try {
             check.leaveToken(classDefAst);
-            Assert.fail();
+            Assert.fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             // it is OK
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
index dffba0c279..4c8a382665 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java
@@ -99,7 +99,7 @@ public void testWrongTokenType() {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.INTERFACE_DEF, "interface"));
         try {
             obj.visitToken(ast);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             //expected
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
index 953a205316..94b61ea1d8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheckTest.java
@@ -90,7 +90,7 @@ public void testWrongTokenType() {
         ast.initialize(new CommonHiddenStreamToken(TokenTypes.CLASS_DEF, "class"));
         try {
             obj.visitToken(ast);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException ex) {
             assertEquals(ast.toString(), ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index d00ad048a4..4b662fcaa1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -77,7 +77,7 @@ public void testNoHeader() throws Exception {
         }
         catch (CheckstyleException ex) {
             // Exception is not expected
-            fail();
+            fail("Exception is not expected");
         }
     }
 
@@ -87,7 +87,7 @@ public void testNonExistingHeaderFile() throws Exception {
         checkConfig.addAttribute("headerFile", getPath("nonExisting.file"));
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertTrue(ex.getMessage()
@@ -105,7 +105,7 @@ public void testInvalidCharset() throws Exception {
         checkConfig.addAttribute("charset", "XSO-8859-1");
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertEquals("cannot initialize module"
@@ -160,7 +160,7 @@ public void testSetHeaderTwice() {
         check.setHeader("Header");
         try {
             check.setHeader("Header2");
-            fail();
+            fail("ConversionException is expected");
         }
         catch (ConversionException ex) {
             assertEquals("header has already been set - "
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
index b7950ede08..9f7d5b7d37 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java
@@ -356,7 +356,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromName(null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the name is null", ex.getMessage());
@@ -364,7 +364,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromName("myname");
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the name [myname] is not a valid Javadoc tag name", ex.getMessage());
@@ -372,7 +372,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromText(null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the text is null", ex.getMessage());
@@ -380,7 +380,7 @@ public void testCoverage() {
 
         try {
             JavadocTagInfo.fromText("myname");
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the text [myname] is not a valid Javadoc tag text", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
index ea111de473..a1aaa87fb8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java
@@ -65,7 +65,7 @@ public void testIllegalRegexp()
         checkConfig.addAttribute("format", "\\");
         try {
             createChecker(checkConfig);
-            fail();
+            fail("CheckstyleException is expected");
         }
         catch (CheckstyleException ex) {
             assertEquals("cannot initialize module"
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
index 27a1882362..f9cd099912 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java
@@ -114,7 +114,7 @@ public void testExtensions() throws Exception {
         assertEquals("extension should be the same", ".java", check.getFileExtensions()[0]);
         try {
             check.setFileExtensions((String[]) null);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("Extensions array can not be null", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
index 1a2ed44f12..049506600e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
@@ -121,7 +121,7 @@ public void testEmptyJavadoc() throws Exception {
 
         try {
             TokenTypesDoclet.start(rootDoc);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             // Token types must have first sentence of Javadoc summary
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
index 05c3b2e61b..52dff3b24e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java
@@ -46,7 +46,7 @@ public void testIsProperUtilsClass() throws ReflectiveOperationException {
     public void testContainsAnnotationNull() {
         try {
             AnnotationUtility.containsAnnotation(null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -57,7 +57,7 @@ public void testContainsAnnotationNull() {
     public void testContainsAnnotationNull2() {
         try {
             AnnotationUtility.containsAnnotation(null, "");
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -98,7 +98,7 @@ public void testContainsAnnotationTrue() {
     public void testAnnotationHolderNull() {
         try {
             AnnotationUtility.getAnnotationHolder(null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -109,7 +109,7 @@ public void testAnnotationHolderNull() {
     public void testAnnotationNull() {
         try {
             AnnotationUtility.getAnnotation(null, null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the ast is null", ex.getMessage());
@@ -120,7 +120,7 @@ public void testAnnotationNull() {
     public void testAnnotationNull2() {
         try {
             AnnotationUtility.getAnnotation(new DetailAST(), null);
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the annotation is null", ex.getMessage());
@@ -131,7 +131,7 @@ public void testAnnotationNull2() {
     public void testAnnotationEmpty() {
         try {
             AnnotationUtility.getAnnotation(new DetailAST(), "");
-            Assert.fail();
+            Assert.fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException ex) {
             assertEquals("the annotation is empty or spaces", ex.getMessage());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
index cc0bfacf73..33c9240274 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java
@@ -157,7 +157,7 @@ public void testGetExistingConstructor() throws NoSuchMethodException {
     public void testGetNonExistingConstructor() {
         try {
             CommonUtils.getConstructor(Math.class);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertSame(NoSuchMethodException.class, expected.getCause().getClass());
@@ -180,7 +180,7 @@ public void testInvokeConstructorThatFails() throws NoSuchMethodException {
 
         try {
             CommonUtils.invokeConstructor(constructor);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertSame(InstantiationException.class, expected.getCause().getClass());
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
index 7e927f9523..b87d2968eb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java
@@ -51,7 +51,7 @@ public void testGetIntFromInaccessibleField() throws NoSuchFieldException {
 
         try {
             TokenUtils.getIntFromField(field, 0);
-            fail();
+            fail("IllegalStateException is expected");
         }
         catch (IllegalStateException expected) {
             assertTrue(expected.getMessage().startsWith(
@@ -66,7 +66,7 @@ public void testTokenValueIncorrect() {
         final Integer id = Integer.MAX_VALUE - 1;
         try {
             TokenUtils.getTokenName(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given id " + id, expected.getMessage());
@@ -104,7 +104,7 @@ public void testTokenValueIncorrect2() throws Exception {
 
         }
         catch (IllegalAccessException | NoSuchFieldException ex) {
-            fail();
+            fail("Exception is expected");
         }
     }
 
@@ -113,7 +113,7 @@ public void testTokenIdIncorrect() {
         final String id = "NON_EXISTING_VALUE";
         try {
             TokenUtils.getTokenId(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given name " + id, expected.getMessage());
@@ -125,7 +125,7 @@ public void testShortDescriptionIncorrect() {
         final String id = "NON_EXISTING_VALUE";
         try {
             TokenUtils.getShortDescription(id);
-            fail();
+            fail("IllegalArgumentException is expected");
         }
         catch (IllegalArgumentException expected) {
             assertEquals("given name " + id, expected.getMessage());
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
index 8d363a0612..6fc1a87a7e 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputFromGuava2.java
@@ -20,7 +20,7 @@
  *                                                                            //indent:1 exp:1
  *                                                                            //indent:1 exp:1
  */                                                                           //indent:1 exp:1
-public class InputFromGuava2<K extends Comparable<?>, V> implements RangeMap<K, V> { //indent:0 exp:0
+public abstract class InputFromGuava2<K extends Comparable<?>, V> implements RangeMap<K, V> { //indent:0 exp:0
 
   public InputFromGuava2<K, V> subRangeMap1(final Range<K> range) { //indent:2 exp:2
     Range<K> ranges = null; //indent:4 exp:4
