diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/description/type/TypeDescription.java b/byte-buddy-dep/src/main/java/net/bytebuddy/description/type/TypeDescription.java
index e2ee9450b7..eaf7e3c29f 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/description/type/TypeDescription.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/description/type/TypeDescription.java
@@ -45,107 +45,107 @@
     /**
      * A representation of the {@link java.lang.Object} type.
      */
-    TypeDescription OBJECT = ForLoadedType.OBJECT;
+    TypeDescription OBJECT = new ForLoadedType(Object.class);
 
     /**
      * A representation of the {@link java.lang.String} type.
      */
-    TypeDescription STRING = ForLoadedType.STRING;
+    TypeDescription STRING = new ForLoadedType(String.class);
 
     /**
      * A representation of the {@link java.lang.Class} type.
      */
-    TypeDescription CLASS = ForLoadedType.CLASS;
+    TypeDescription CLASS = new ForLoadedType(Class.class);
 
     /**
      * A representation of the {@link java.lang.Throwable} type.
      */
-    TypeDescription THROWABLE = ForLoadedType.THROWABLE;
+    TypeDescription THROWABLE = new ForLoadedType(Throwable.class);
 
     /**
      * A representation of the {@code void} non-type.
      */
-    TypeDescription VOID = ForLoadedType.VOID;
+    TypeDescription VOID = new ForLoadedType(void.class);
 
     /**
      * A representation of the {@code Integer} non-type.
      */
-    TypeDescription INTEGER = ForLoadedType.INTEGER;
+    TypeDescription INTEGER = new ForLoadedType(Integer.class);
 
     /**
      * A representation of the {@code Long} non-type.
      */
-    TypeDescription LONG = ForLoadedType.LONG;
+    TypeDescription LONG = new ForLoadedType(Long.class);
 
     /**
      * A representation of the {@code Short} non-type.
      */
-    TypeDescription SHORT = ForLoadedType.SHORT;
+    TypeDescription SHORT = new ForLoadedType(Short.class);
 
     /**
      * A representation of the {@code Byte} non-type.
      */
-    TypeDescription BYTE = ForLoadedType.BYTE;
+    TypeDescription BYTE = new ForLoadedType(Byte.class);
 
     /**
      * A representation of the {@code Character} non-type.
      */
-    TypeDescription CHARACTER = ForLoadedType.CHARACTER;
+    TypeDescription CHARACTER = new ForLoadedType(Character.class);
 
     /**
      * A representation of the {@code Double} non-type.
      */
-    TypeDescription DOUBLE = ForLoadedType.DOUBLE;
+    TypeDescription DOUBLE = new ForLoadedType(Double.class);
 
     /**
      * A representation of the {@code Float} non-type.
      */
-    TypeDescription FLOAT = ForLoadedType.FLOAT;
+    TypeDescription FLOAT = new ForLoadedType(Float.class);
 
     /**
      * A representation of the {@code Boolean} non-type.
      */
-    TypeDescription BOOLEAN = ForLoadedType.BOOLEAN;
+    TypeDescription BOOLEAN = new ForLoadedType(Boolean.class);
 
     /**
      * A representation of the {@code int} non-type.
      */
-    TypeDescription INTEGER_PRIMITIVE = ForLoadedType.INTEGER_PRIMITIVE;
+    TypeDescription INTEGER_PRIMITIVE = new ForLoadedType(int.class);
 
     /**
      * A representation of the {@code long} non-type.
      */
-    TypeDescription LONG_PRIMITIVE = ForLoadedType.LONG_PRIMITIVE;
+    TypeDescription LONG_PRIMITIVE = new ForLoadedType(long.class);
 
     /**
      * A representation of the {@code short} non-type.
      */
-    TypeDescription SHORT_PRIMITIVE = ForLoadedType.SHORT_PRIMITIVE;
+    TypeDescription SHORT_PRIMITIVE = new ForLoadedType(short.class);
 
     /**
      * A representation of the {@code byte} non-type.
      */
-    TypeDescription BYTE_PRIMITIVE = ForLoadedType.BYTE_PRIMITIVE;
+    TypeDescription BYTE_PRIMITIVE = new ForLoadedType(byte.class);
 
     /**
      * A representation of the {@code char} non-type.
      */
-    TypeDescription CHARACTER_PRIMITIVE = ForLoadedType.CHARACTER_PRIMITIVE;
+    TypeDescription CHARACTER_PRIMITIVE = new ForLoadedType(char.class);
 
     /**
      * A representation of the {@code double} non-type.
      */
-    TypeDescription DOUBLE_PRIMITIVE = ForLoadedType.DOUBLE_PRIMITIVE;
+    TypeDescription DOUBLE_PRIMITIVE = new ForLoadedType(double.class);
 
     /**
      * A representation of the {@code float} non-type.
      */
-    TypeDescription FLOAT_PRIMITIVE = ForLoadedType.FLOAT_PRIMITIVE;
+    TypeDescription FLOAT_PRIMITIVE = new ForLoadedType(float.class);
 
     /**
      * A representation of the {@code boolean} non-type.
      */
-    TypeDescription BOOLEAN_PRIMITIVE = ForLoadedType.BOOLEAN_PRIMITIVE;
+    TypeDescription BOOLEAN_PRIMITIVE = new ForLoadedType(boolean.class);
 
     /**
      * A list of interfaces that are implicitly implemented by any array type.
@@ -404,6 +404,34 @@
      */
     Object getDefaultValue();
 
+    class TypeCache {
+
+        static final Map<java.lang.reflect.Type, TypeDescription> WELLKNOWN_TYPE_MAP;
+
+        static {
+            WELLKNOWN_TYPE_MAP = new HashMap<java.lang.reflect.Type, TypeDescription>(20);
+            WELLKNOWN_TYPE_MAP.put(Integer.class, INTEGER);
+            WELLKNOWN_TYPE_MAP.put(Long.class, LONG);
+            WELLKNOWN_TYPE_MAP.put(Short.class, SHORT);
+            WELLKNOWN_TYPE_MAP.put(Character.class, CHARACTER);
+            WELLKNOWN_TYPE_MAP.put(Byte.class, BYTE);
+            WELLKNOWN_TYPE_MAP.put(Float.class, FLOAT);
+            WELLKNOWN_TYPE_MAP.put(Double.class, DOUBLE);
+            WELLKNOWN_TYPE_MAP.put(Boolean.class, BOOLEAN);
+            WELLKNOWN_TYPE_MAP.put(int.class, INTEGER_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(long.class, LONG_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(short.class, SHORT_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(char.class, CHARACTER_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(byte.class, BYTE_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(float.class, FLOAT_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(double.class, DOUBLE_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(boolean.class, BOOLEAN_PRIMITIVE);
+            WELLKNOWN_TYPE_MAP.put(void.class, VOID);
+            WELLKNOWN_TYPE_MAP.put(String.class, STRING);
+            WELLKNOWN_TYPE_MAP.put(Object.class, OBJECT);
+        }
+    }
+
     /**
      * <p>
      * Represents a generic type of the Java programming language. A non-generic {@link TypeDescription} is considered to be
@@ -7123,137 +7151,6 @@ public int getActualModifiers(boolean superFlag) {
      * A type description implementation that represents a loaded type.
      */
     class ForLoadedType extends AbstractBase implements Serializable {
-
-        static final Map<java.lang.reflect.Type, TypeDescription> WELLKNOWN_TYPE_MAP;
-
-        /**
-         * A representation of the {@link java.lang.Object} type.
-         */
-        static final TypeDescription OBJECT = new ForLoadedType(Object.class);
-
-        /**
-         * A representation of the {@link java.lang.String} type.
-         */
-        static final TypeDescription STRING = new ForLoadedType(String.class);
-
-        /**
-         * A representation of the {@link java.lang.Class} type.
-         */
-        static final TypeDescription CLASS = new ForLoadedType(Class.class);
-
-        /**
-         * A representation of the {@link java.lang.Throwable} type.
-         */
-        static final TypeDescription THROWABLE = new ForLoadedType(Throwable.class);
-
-        /**
-         * A representation of the {@code void} non-type.
-         */
-        static final TypeDescription VOID = new ForLoadedType(void.class);
-
-        /**
-         * A representation of the {@code Integer} non-type.
-         */
-        static final TypeDescription INTEGER = new ForLoadedType(Integer.class);
-
-        /**
-         * A representation of the {@code Long} non-type.
-         */
-        static final TypeDescription LONG = new ForLoadedType(Long.class);
-
-        /**
-         * A representation of the {@code Short} non-type.
-         */
-        static final TypeDescription SHORT = new ForLoadedType(Short.class);
-
-        /**
-         * A representation of the {@code Byte} non-type.
-         */
-        static final TypeDescription BYTE = new ForLoadedType(Byte.class);
-
-        /**
-         * A representation of the {@code Character} non-type.
-         */
-        static final TypeDescription CHARACTER = new ForLoadedType(Character.class);
-
-        /**
-         * A representation of the {@code Double} non-type.
-         */
-        static final TypeDescription DOUBLE = new ForLoadedType(Double.class);
-
-        /**
-         * A representation of the {@code Float} non-type.
-         */
-        static final TypeDescription FLOAT = new ForLoadedType(Float.class);
-
-        /**
-         * A representation of the {@code Boolean} non-type.
-         */
-        static final TypeDescription BOOLEAN = new ForLoadedType(Boolean.class);
-
-        /**
-         * A representation of the {@code int} non-type.
-         */
-        static final TypeDescription INTEGER_PRIMITIVE = new ForLoadedType(int.class);
-
-        /**
-         * A representation of the {@code long} non-type.
-         */
-        static final TypeDescription LONG_PRIMITIVE = new ForLoadedType(long.class);
-
-        /**
-         * A representation of the {@code short} non-type.
-         */
-        static final TypeDescription SHORT_PRIMITIVE = new ForLoadedType(short.class);
-
-        /**
-         * A representation of the {@code byte} non-type.
-         */
-        static final TypeDescription BYTE_PRIMITIVE = new ForLoadedType(byte.class);
-
-        /**
-         * A representation of the {@code char} non-type.
-         */
-        static final TypeDescription CHARACTER_PRIMITIVE = new ForLoadedType(char.class);
-
-        /**
-         * A representation of the {@code double} non-type.
-         */
-        static final TypeDescription DOUBLE_PRIMITIVE = new ForLoadedType(double.class);
-
-        /**
-         * A representation of the {@code float} non-type.
-         */
-        static final TypeDescription FLOAT_PRIMITIVE = new ForLoadedType(float.class);
-
-        /**
-         * A representation of the {@code boolean} non-type.
-         */
-        static final TypeDescription BOOLEAN_PRIMITIVE = new ForLoadedType(boolean.class);
-
-        static {
-            WELLKNOWN_TYPE_MAP = new HashMap<java.lang.reflect.Type, TypeDescription>(20);
-            WELLKNOWN_TYPE_MAP.put(Integer.class, INTEGER);
-            WELLKNOWN_TYPE_MAP.put(Long.class, LONG);
-            WELLKNOWN_TYPE_MAP.put(Short.class, SHORT);
-            WELLKNOWN_TYPE_MAP.put(Character.class, CHARACTER);
-            WELLKNOWN_TYPE_MAP.put(Byte.class, BYTE);
-            WELLKNOWN_TYPE_MAP.put(Float.class, FLOAT);
-            WELLKNOWN_TYPE_MAP.put(Double.class, DOUBLE);
-            WELLKNOWN_TYPE_MAP.put(Boolean.class, BOOLEAN);
-            WELLKNOWN_TYPE_MAP.put(int.class, INTEGER_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(long.class, LONG_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(short.class, SHORT_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(char.class, CHARACTER_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(byte.class, BYTE_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(float.class, FLOAT_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(double.class, DOUBLE_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(boolean.class, BOOLEAN_PRIMITIVE);
-            WELLKNOWN_TYPE_MAP.put(void.class, VOID);
-            WELLKNOWN_TYPE_MAP.put(String.class, STRING);
-            WELLKNOWN_TYPE_MAP.put(Object.class, OBJECT);
-        }
-
         /**
          * The class's serial version UID.
          */
@@ -7290,7 +7187,7 @@ public static String getName(Class<?> type) {
         }
 
         public static TypeDescription of(Class<?> type) {
-            TypeDescription res = WELLKNOWN_TYPE_MAP.get(type);
+            TypeDescription res = TypeDescription.TypeCache.WELLKNOWN_TYPE_MAP.get(type);
             if (res != null) {
                 return res;
             }
