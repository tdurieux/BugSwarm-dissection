diff --git a/java-checks/pom.xml b/java-checks/pom.xml
index 16c1440ad7..16b30dd799 100755
--- a/java-checks/pom.xml
+++ b/java-checks/pom.xml
@@ -190,6 +190,12 @@
                   <version>7.0</version>
                   <type>jar</type>
                 </artifactItem>
+                <artifactItem>
+                  <groupId>javax.ws.rs</groupId>
+                  <artifactId>javax.ws.rs-api</artifactId>
+                  <version>2.1</version>
+                  <type>jar</type>
+                </artifactItem>
                 <artifactItem>
                   <groupId>com.google.guava</groupId>
                   <artifactId>guava</artifactId>
diff --git a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
index b5e5b2be57..4ce8ae4a95 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/CheckList.java
@@ -43,6 +43,7 @@
 import org.sonar.java.checks.naming.MethodNamedEqualsCheck;
 import org.sonar.java.checks.naming.MethodNamedHashcodeOrEqualCheck;
 import org.sonar.java.checks.security.AESAlgorithmCheck;
+import org.sonar.java.checks.security.CookieHttpOnlyCheck;
 import org.sonar.java.checks.security.CookieShouldNotContainSensitiveDataCheck;
 import org.sonar.java.checks.security.HostnameVerifierImplementationCheck;
 import org.sonar.java.checks.security.IntegerToHexStringCheck;
@@ -305,6 +306,7 @@ private CheckList() {
       .add(ToStringReturningNullCheck.class)
       .add(TransactionalMethodVisibilityCheck.class)
       .add(CompareToResultTestCheck.class)
+      .add(CookieHttpOnlyCheck.class)
       .add(CookieShouldNotContainSensitiveDataCheck.class)
       .add(SecureCookieCheck.class)
       .add(CatchIllegalMonitorStateExceptionCheck.class)
diff --git a/java-checks/src/main/java/org/sonar/java/checks/SecureCookieCheck.java b/java-checks/src/main/java/org/sonar/java/checks/SecureCookieCheck.java
index c88a2dfeb5..40eaf089e6 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/SecureCookieCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/SecureCookieCheck.java
@@ -23,9 +23,7 @@
 import java.util.List;
 import org.sonar.check.Rule;
 import org.sonar.java.checks.security.InstanceShouldBeInitializedCorrectlyBase;
-import org.sonar.java.model.LiteralUtils;
-import org.sonar.plugins.java.api.tree.Arguments;
-import org.sonar.plugins.java.api.tree.ExpressionTree;
+import org.sonar.plugins.java.api.tree.VariableTree;
 
 @Rule(key = "S2092")
 public class SecureCookieCheck extends InstanceShouldBeInitializedCorrectlyBase {
@@ -36,19 +34,13 @@ protected String getMessage() {
   }
 
   @Override
-  protected String getMethodName() {
-    return "setSecure";
+  protected boolean constructorInitializesCorrectly(VariableTree variableTree) {
+    return false;
   }
 
   @Override
-  protected boolean methodArgumentsHaveExpectedValue(Arguments arguments) {
-    ExpressionTree expressionTree = arguments.get(0);
-    return LiteralUtils.isTrue(expressionTree);
-  }
-
-  @Override
-  protected int getMethodArity() {
-    return 1;
+  protected String getSetterName() {
+    return "setSecure";
   }
 
   @Override
diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/CookieHttpOnlyCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/CookieHttpOnlyCheck.java
index eb2407ae79..9b35532841 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/security/CookieHttpOnlyCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/security/CookieHttpOnlyCheck.java
@@ -22,40 +22,72 @@
 import java.util.Arrays;
 import java.util.List;
 import org.sonar.check.Rule;
+import org.sonar.java.matcher.MethodMatcher;
+import org.sonar.java.matcher.TypeCriteria;
 import org.sonar.java.model.LiteralUtils;
 import org.sonar.plugins.java.api.tree.Arguments;
 import org.sonar.plugins.java.api.tree.ExpressionTree;
+import org.sonar.plugins.java.api.tree.NewClassTree;
+import org.sonar.plugins.java.api.tree.Tree.Kind;
+import org.sonar.plugins.java.api.tree.VariableTree;
 
 @Rule(key = "S3330")
 public class CookieHttpOnlyCheck extends InstanceShouldBeInitializedCorrectlyBase {
 
-  // TODO move to static class and reuse
-  private static class ClassName {
+  private static final String CONSTRUCTOR = "<init>";
+  private static final String JAVA_LANG_STRING = "java.lang.String";
+  private static final String JAVA_UTIL_DATE = "java.util.Date";
+  private static final String INT = "int";
+  private static final String BOOLEAN = "boolean";
+
+  private static final class ClassName {
     private static final String SERVLET_COOKIE = "javax.servlet.http.Cookie";
     private static final String NET_HTTP_COOKIE = "java.net.HttpCookie";
     private static final String JAX_RS_COOKIE = "javax.ws.rs.core.Cookie";
+    private static final String JAX_RS_NEW_COOKIE = "javax.ws.rs.core.NewCookie";
     private static final String SHIRO_COOKIE = "org.apache.shiro.web.servlet.SimpleCookie";
   }
 
-  @Override
-  protected String getMessage() {
-    return "Add the \"HttpOnly\" cookie attribute.";
+  private static List<MethodMatcher> constructorsWithHttpOnlyParameter() {
+    return Arrays.asList(
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(ClassName.JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+          .parameters(ClassName.JAX_RS_COOKIE, JAVA_LANG_STRING, INT, JAVA_UTIL_DATE, BOOLEAN, BOOLEAN),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(ClassName.JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+          .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, JAVA_LANG_STRING, INT, JAVA_UTIL_DATE, BOOLEAN, BOOLEAN),
+        MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(ClassName.JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+          .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, BOOLEAN, BOOLEAN));
+  }
+
+  private static final List<MethodMatcher> constructorsWithGoodDefault() {
+    return Arrays.asList(
+      MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(ClassName.SHIRO_COOKIE)).name(CONSTRUCTOR).withoutParameter(),
+      MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(ClassName.SHIRO_COOKIE)).name(CONSTRUCTOR).parameters(JAVA_LANG_STRING));
   }
 
   @Override
-  protected String getMethodName() {
-    return "setHttpOnly";
+  protected String getMessage() {
+    return "Add the \"HttpOnly\" cookie attribute.";
   }
 
   @Override
-  protected boolean methodArgumentsHaveExpectedValue(Arguments arguments) {
-    ExpressionTree expressionTree = arguments.get(0);
-    return LiteralUtils.isTrue(expressionTree);
+  protected boolean constructorInitializesCorrectly(VariableTree variableTree) {
+    ExpressionTree initializer = variableTree.initializer();
+    if (initializer != null && initializer.is(Kind.NEW_CLASS)) {
+      NewClassTree newClassTree = (NewClassTree) initializer;
+      if (constructorsWithHttpOnlyParameter().stream().anyMatch(matcher -> matcher.matches(newClassTree))) {
+        Arguments arguments = newClassTree.arguments();
+        ExpressionTree lastArgument = arguments.get(arguments.size() - 1);
+        return LiteralUtils.isTrue(lastArgument);
+      } else {
+        return constructorsWithGoodDefault().stream().anyMatch(matcher -> matcher.matches(newClassTree));
+      }
+    }
+    return false;
   }
 
   @Override
-  protected int getMethodArity() {
-    return 1;
+  protected String getSetterName() {
+    return "setHttpOnly";
   }
 
   @Override
diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/InstanceShouldBeInitializedCorrectlyBase.java b/java-checks/src/main/java/org/sonar/java/checks/security/InstanceShouldBeInitializedCorrectlyBase.java
index f10855f337..bfff29267d 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/security/InstanceShouldBeInitializedCorrectlyBase.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/security/InstanceShouldBeInitializedCorrectlyBase.java
@@ -1,11 +1,32 @@
+/*
+ * SonarQube Java
+ * Copyright (C) 2012-2018 SonarSource SA
+ * mailto:info AT sonarsource DOT com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
 package org.sonar.java.checks.security;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import java.util.List;
+import org.sonar.java.model.LiteralUtils;
 import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
 import org.sonar.plugins.java.api.JavaFileScannerContext;
 import org.sonar.plugins.java.api.semantic.Symbol;
+import org.sonar.plugins.java.api.semantic.Symbol.VariableSymbol;
 import org.sonar.plugins.java.api.semantic.Type;
 import org.sonar.plugins.java.api.tree.Arguments;
 import org.sonar.plugins.java.api.tree.ExpressionTree;
@@ -16,7 +37,10 @@
 import org.sonar.plugins.java.api.tree.VariableTree;
 
 public abstract class InstanceShouldBeInitializedCorrectlyBase extends IssuableSubscriptionVisitor {
-  private final List<Symbol.VariableSymbol> variablesToFlag = Lists.newArrayList();
+
+  private final List<VariableSymbol> correctlyInitializedViaConstructor = Lists.newArrayList();
+  private final List<VariableSymbol> declarationsToFlag = Lists.newArrayList();
+  private final List<MethodInvocationTree> settersToFlag = Lists.newArrayList();
 
   @Override
   public List<Tree.Kind> nodesToVisit() {
@@ -25,22 +49,25 @@
 
   protected abstract String getMessage();
 
-  //protected abstract boolean constructorArgumentsHaveExpectedValue(Arguments arguments);
-
-  protected abstract String getMethodName();
+  protected abstract boolean constructorInitializesCorrectly(VariableTree variableSymbol);
 
-  protected abstract boolean methodArgumentsHaveExpectedValue(Arguments arguments);
-
-  protected abstract int getMethodArity();
+  protected abstract String getSetterName();
 
   protected abstract List<String> getClasses();
 
   @Override
   public void scanFile(JavaFileScannerContext context) {
-    variablesToFlag.clear();
+    correctlyInitializedViaConstructor.clear();
+    declarationsToFlag.clear();
+    settersToFlag.clear();
     super.scanFile(context);
-    for (Symbol.VariableSymbol var : variablesToFlag) {
-      reportIssue(var.declaration().simpleName(), getMessage());
+    for (VariableSymbol var : declarationsToFlag) {
+      if (var.declaration() != null) {
+        reportIssue(var.declaration().simpleName(), getMessage());
+      }
+    }
+    for (MethodInvocationTree mit : settersToFlag) {
+      reportIssue(mit.arguments(), getMessage());
     }
   }
 
@@ -52,48 +79,62 @@ public void visitNode(Tree tree) {
         addToVariablesToFlag(variableTree);
       } else if (tree.is(Tree.Kind.METHOD_INVOCATION)) {
         MethodInvocationTree mit = (MethodInvocationTree) tree;
-        removeFromVariablesToFlagIfInitializedWithMethod(mit);
+        checkSetterInvocation(mit);
       }
     }
   }
 
   private void addToVariablesToFlag(VariableTree variableTree) {
     Type type = variableTree.type().symbolType();
-    if (getClasses().stream().anyMatch(type::isSubtypeOf) && isConstructorInitialized(variableTree)) {
-      Symbol variableSymbol = variableTree.symbol();
+    if (getClasses().stream().anyMatch(type::isSubtypeOf) && isInitializedByConstructor(variableTree)) {
+      Symbol variableTreeSymbol = variableTree.symbol();
       //Ignore field variables
-      if (variableSymbol.isVariableSymbol() && variableSymbol.owner().isMethodSymbol()) {
-        variablesToFlag.add((Symbol.VariableSymbol) variableSymbol);
+      if (variableTreeSymbol.isVariableSymbol() && variableTreeSymbol.owner().isMethodSymbol()) {
+        VariableSymbol variableSymbol = (VariableSymbol) variableTreeSymbol;
+        if (constructorInitializesCorrectly(variableTree)) {
+          correctlyInitializedViaConstructor.add(variableSymbol);
+        } else {
+          declarationsToFlag.add(variableSymbol);
+        }
       }
     }
   }
 
-  // TODO for certain classes, must check the parameters of the constructor as well
-  private static boolean isConstructorInitialized(VariableTree variableTree) {
+  private static boolean isInitializedByConstructor(VariableTree variableTree) {
     ExpressionTree initializer = variableTree.initializer();
     return initializer != null && initializer.is(Tree.Kind.NEW_CLASS);
   }
 
-  // TODO should check the method vs constructor parameters
-  private void removeFromVariablesToFlagIfInitializedWithMethod(MethodInvocationTree mit) {
-    if (isInitializedWithMethod(mit) && mit.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
+  private void checkSetterInvocation(MethodInvocationTree mit) {
+    if (isExpectedSetter(mit) && mit.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
       MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
       if (mse.expression().is(Tree.Kind.IDENTIFIER)) {
-        Symbol reference = ((IdentifierTree) mse.expression()).symbol();
-        variablesToFlag.remove(reference);
+        VariableSymbol reference = (VariableSymbol)((IdentifierTree) mse.expression()).symbol();
+        if (setterArgumentHasExpectedValue(mit.arguments())) {
+          declarationsToFlag.remove(reference);
+        } else if (correctlyInitializedViaConstructor.contains(reference)) {
+          declarationsToFlag.add(reference);
+        } else if (!declarationsToFlag.contains(reference)) {
+          settersToFlag.add(mit);
+        }
       }
     }
   }
 
-  private boolean isInitializedWithMethod(MethodInvocationTree mit) {
+  private boolean isExpectedSetter(MethodInvocationTree mit) {
     Symbol methodSymbol = mit.symbol();
-    boolean hasMethodArity = mit.arguments().size() == getMethodArity();
-    if (hasMethodArity && isWantedClassMethod(methodSymbol) && methodArgumentsHaveExpectedValue(mit.arguments())) {
-      return getMethodName().equals(getIdentifier(mit).name());
+    boolean hasMethodArity = mit.arguments().size() == 1;
+    if (hasMethodArity && isWantedClassMethod(methodSymbol)) {
+      return getSetterName().equals(getIdentifier(mit).name());
     }
     return false;
   }
 
+  private boolean setterArgumentHasExpectedValue(Arguments arguments) {
+    ExpressionTree expressionTree = arguments.get(0);
+    return !LiteralUtils.isFalse(expressionTree);
+  }
+
   private boolean isWantedClassMethod(Symbol methodSymbol) {
     return methodSymbol.isMethodSymbol() && getClasses().stream().anyMatch(methodSymbol.owner().type()::isSubtypeOf);
   }
diff --git a/java-checks/src/test/files/checks/SecureCookieCheck.java b/java-checks/src/test/files/checks/SecureCookieCheck.java
index 1f62c25a8c..0a6f259cfb 100755
--- a/java-checks/src/test/files/checks/SecureCookieCheck.java
+++ b/java-checks/src/test/files/checks/SecureCookieCheck.java
@@ -4,7 +4,7 @@
 
   Cookie cookie = new Cookie("name", "value");
 
-  private static final boolean TRUE_CONSTANT = true;
+  private static final boolean FALSE_CONSTANT = false;
 
   void foo(Cookie cookie) {
     int age = cookie.getMaxAge();
@@ -21,9 +21,12 @@ void qix() {
     Cookie cookie = new Cookie("name", "value"); // Noncompliant {{Add the "secure" attribute to this cookie}}
     cookie.setSecure(false);
   }
+  void baw(Cookie cookie) {
+    cookie.setSecure(false); // Noncompliant [[sc=21;ec=28]] {{Add the "secure" attribute to this cookie}}
+  }
   void qiz() {
-    Cookie cookie = new Cookie("name", "value"); // Noncompliant
-    cookie.setSecure(TRUE_CONSTANT); // would require SE to check value
+    Cookie cookie = new Cookie("name", "value");
+    cookie.setSecure(FALSE_CONSTANT); // FN
   }
   Cookie qfn() {
     return new Cookie("name", "value"); // FN
diff --git a/java-checks/src/test/files/checks/security/CookieHttpOnlyCheck.java b/java-checks/src/test/files/checks/security/CookieHttpOnlyCheck.java
index 6c56ad3e4a..1264dd79c1 100755
--- a/java-checks/src/test/files/checks/security/CookieHttpOnlyCheck.java
+++ b/java-checks/src/test/files/checks/security/CookieHttpOnlyCheck.java
@@ -9,23 +9,36 @@
 
 class S3330 {
 
-  private static final boolean TRUE_CONSTANT = true;
+  private static final boolean FALSE_CONSTANT = false;
 
   Cookie c1 = new Cookie("name", "value"); // FN
   HttpCookie c3 = new HttpCookie("name", "value"); // FN
   javax.ws.rs.core.Cookie c2 = new javax.ws.rs.core.Cookie("name", "value"); // FN
 
-  void servletCookie() {
+  void servletCookie(boolean param, Cookie c0) {
+    c0.setHttpOnly(false); // Noncompliant [[sc=19;ec=26]] {{Add the "HttpOnly" cookie attribute.}}
+
     Cookie c1 = new Cookie("name", "value");
     c1.setHttpOnly(true);
 
-    Cookie c2 = new Cookie("name", "value"); // Noncompliant {{Add the "HttpOnly" cookie attribute.}}
+    Cookie c2 = new Cookie("name", "value"); // Noncompliant [[sc=12;ec=14]]
 
     Cookie c3 = new Cookie("name", "value"); // Noncompliant
     c3.setHttpOnly(false);
 
-    Cookie c4 = new Cookie("name", "value"); // Noncompliant
-    c4.setHttpOnly(TRUE_CONSTANT); // would require SE to avoid FP
+    Cookie c4 = new Cookie("name", "value");
+    c4.setHttpOnly(FALSE_CONSTANT); // FN, would require SE
+
+    Cookie c5 = new Cookie("name", "value");
+    boolean b = true;
+    c5.setHttpOnly(b); // FN, would require SE
+
+    Cookie c6 = new Cookie("name", "value");
+    c6.setHttpOnly(param);
+  }
+
+  Cookie getC1() {
+    return new Cookie("name", "value"); // FN
   }
 
   void httpCookie() {
@@ -37,8 +50,12 @@ void httpCookie() {
     HttpCookie c3 = new HttpCookie("name", "value"); // Noncompliant
     c3.setHttpOnly(false);
 
-    HttpCookie c4 = new HttpCookie("name", "value"); // Noncompliant
-    c4.setHttpOnly(TRUE_CONSTANT); // would require SE to avoid FP
+    HttpCookie c4 = new HttpCookie("name", "value");
+    c4.setHttpOnly(FALSE_CONSTANT); // FN, would require SE
+  }
+
+  HttpCookie getC2() {
+    return new HttpCookie("name", "value"); // FN
   }
 
   void jaxRsCookie() {
@@ -51,12 +68,22 @@ void jaxRsNewCookie(javax.ws.rs.core.Cookie cookie) {
     NewCookie c2 = new NewCookie(cookie, "comment", 2, true); // Noncompliant
     NewCookie c3 = new NewCookie(cookie); // Noncompliant
     NewCookie c4 = new NewCookie(cookie, "c", 1, true); // Noncompliant
+
+    NewCookie c5 = new NewCookie(cookie, "c", 1, new Date(), false, true); // last param is HttpOnly
+    NewCookie c6 = new NewCookie("1", "2", "3", "4", 5, "6", 7, new Date(), false, true);
+    NewCookie c7 = new NewCookie("1", "2", "3", "4", "5", 6, false, true);
+  }
+
+  NewCookie getC3() {
+    return new NewCookie("name", "value", "path", "domain", "comment", 1, true); // FN
   }
 
   void apacheShiro(SimpleCookie unknownCookie) {
     SimpleCookie c1 = new SimpleCookie(unknownCookie); // Noncompliant
     SimpleCookie c2 = new SimpleCookie(); // Noncompliant
     c2.setHttpOnly(false);
+    SimpleCookie c3 = new SimpleCookie(); // Apache Shiro cookies have HttpOnly 'true' value by default
+    SimpleCookie c4 = new SimpleCookie("name");
   }
 
   void compliant(Cookie c1, HttpCookie c2, javax.ws.rs.core.Cookie c3, NewCookie c4, SimpleCookie c5) {
@@ -67,10 +94,5 @@ void compliant(Cookie c1, HttpCookie c2, javax.ws.rs.core.Cookie c3, NewCookie c
     c5.isHttpOnly();
     SavedCookie c6 = new SavedCookie(c1); // Spring cookies are HttpOnly, without possibility to change that
     SavedCookie c7 = new SavedCookie("n", "v", "c", "d", 1, "p", false, 1);
-    SimpleCookie c8 = new SimpleCookie(); // Apache Shiro cookies have HttpOnly 'true' value by default
-    SimpleCookie c9 = new SimpleCookie("name");
-    NewCookie c10 = new NewCookie(c3, "c", 1, new Date(), false, true); // last param is HttpOnly
-    NewCookie c11 = new NewCookie("1", "2", "3", "4", 5, "6", 7, new Date(), false, true);
-    NewCookie c12 = new NewCookie("1", "2", "3", "4", "5", 6, false, true);
   }
 }
