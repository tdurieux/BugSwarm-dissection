diff --git a/pychron/experiment/tests/peak_hop_parse.py b/pychron/experiment/tests/peak_hop_parse.py
index 05cd5e97ea..2e1b94b3ca 100755
--- a/pychron/experiment/tests/peak_hop_parse.py
+++ b/pychron/experiment/tests/peak_hop_parse.py
@@ -1,20 +1,16 @@
 import yaml
 
-
 __author__ = 'ross'
 
 import unittest
 
-
 from pychron.experiment.automated_run.hop_util import parse_hops, generate_hops
 
-
 HOPS = [('Ar40:H1, Ar36:CDD', 2, 1),
         ('bs:39.5:H1', 45, 2),
         ('Ar39:CDD', 2, 1)]
 
 
-
 class PeakHopYamlCase(unittest.TestCase):
     def setUp(self):
         hops = yaml.load(self.txt)
@@ -159,9 +155,10 @@ class PeakHopYamlCase2(PeakHopYamlCase):
     def test_hop1_deflections(self):
         hop = self.hop1()
         self.assertEqual(hop['deflections'], [0])
+
     def test_hop2_deflections(self):
-        hop =self.hop2()
-        self.assertEqual(hop['deflections'], [3250,0,0,0,0])
+        hop = self.hop2()
+        self.assertEqual(hop['deflections'], [3250, 0, 0, 0, 0])
 
 
 class PeakHopYamlCase1(PeakHopYamlCase):
@@ -203,6 +200,7 @@ class PeakHopYamlCase1(PeakHopYamlCase):
      protect: False
      is_baseline: False
 '''
+
     def test_hop1_settle(self):
         hop = self.hop1()
         self.assertEqual(hop['settle'], 1)
@@ -236,8 +234,6 @@ def test_hop2_detectors(self):
         self.assertEqual(hop['isotopes'], ['Ar37'])
 
 
-
-
 class PeakHopTxtCase(unittest.TestCase):
     def setUp(self):
         hop_txt = '''#('Ar40:H1:10,     Ar39:AX,     Ar36:CDD',      3, 1)
@@ -280,27 +276,27 @@ def test_parse_baseline(self):
     def test_generate_hops(self):
         g = generate_hops(HOPS)
         h1 = g.next()
-        print h1
+        # print h1
         h1 = g.next()
-        print h1
+        # print h1
         self.assertEqual(h1['is_baselines'], (False, False))
 
         h1 = g.next()
-        print h1
+        # print h1
         self.assertEqual(h1['is_baselines'], (True,))
 
         h1 = g.next()
-        print h1
+        # print h1
         h1 = g.next()
-        print h1
+        # print h1
         self.assertEqual(h1['is_baselines'], (False,))
         h1 = g.next()
-        print h1
+        # print h1
         h1 = g.next()
-        print h1
+        # print h1
         self.assertEqual(h1['is_baselines'], (False, False))
         h1 = g.next()
-        print h1
+        # print h1
         self.assertEqual(h1['is_baselines'], (True,))
 
 
diff --git a/pychron/spectrometer/tests/mftable.py b/pychron/spectrometer/tests/mftable.py
index 2f4c142e35..c76e6844a3 100755
--- a/pychron/spectrometer/tests/mftable.py
+++ b/pychron/spectrometer/tests/mftable.py
@@ -7,7 +7,7 @@
 class Argon2CDDMFTableTestCase(unittest.TestCase):
     def setUp(self):
         self.mftable = MagnetFieldTable(bind=False)
-        self.mftable.molweights = {'Ar40': 40, 'Ar39': 39, 'Ar36': 36, 'Ar38':38, 'PHHCbs': 1}
+        self.mftable.molweights = {'Ar40': 40, 'Ar39': 39, 'Ar36': 36, 'Ar38': 38, 'PHHCbs': 1}
 
         p = './data/argon_2CDD.csv'
         if not os.path.isfile(p):
@@ -32,7 +32,7 @@ def setUp(self):
         self.mftable = MagnetFieldTable(bind=False)
         self.mftable.molweights = {'Ar40': 40, 'Ar39': 39, 'Ar36': 36, 'Foo': 1}
 
-        p = './data/discrete_mftable.csv'
+        p = './spectrometer/tests/data/discrete_mftable.csv'
         if not os.path.isfile(p):
             p = 'pychron/spectrometer/tests/data/discrete_mftable.csv'
 
@@ -43,7 +43,8 @@ def test_mass_func(self):
         self.assertEqual(self.mftable.mass_cal_func, 'discrete')
 
     def test_missing(self):
-        self.assertEqual(self.mftable._mftable['L2(CDD)'], (['Ar40', 'Ar39', 'Ar36', 'Foo'], [1], (12.34,), None))
+        self.assertEqual(self.mftable._mftable['L2(CDD)'], (['Ar40', 'Ar39', 'Ar36', 'Foo'],
+                                                            [40, 39, 36, 1], ('---', '---', '---', 12.34), None))
 
     def test_discrete1(self):
         dac = self.mftable.map_mass_to_dac('Ar40', 'H2')
@@ -55,7 +56,7 @@ def setUp(self):
         self.mftable = MagnetFieldTable(bind=False)
         self.mftable.molweights = {'Ar40': 40, 'Ar39': 39, 'Ar36': 36, 'Foo': 1}
 
-        p = './data/mftable.csv'
+        p = './spectrometer/tests/data/mftable.csv'
         if not os.path.isfile(p):
             p = 'pychron/spectrometer/tests/data/mftable.csv'
 
