diff --git a/mypy/plugin.py b/mypy/plugin.py
index 3512094656..ada4e97c7e 100755
--- a/mypy/plugin.py
+++ b/mypy/plugin.py
@@ -69,6 +69,7 @@ class SemanticAnalyzerPluginInterface:
     """Interface for accessing semantic analyzer functionality in plugins."""
 
     options = None  # type: Options
+    msg = None  # type: MessageBuilder
 
     @abstractmethod
     def named_type(self, qualified_name: str, args: Optional[List[Type]] = None) -> Instance:
@@ -534,7 +535,8 @@ def attr_class_maker_callback(
                             and rvalue.callee.fullname in attr_attrib_makers):
                         if auto_attribs and not stmt.new_syntax:
                             # auto_attribs requires annotation on every attr.ib.
-                            ctx.api.fail(messages.NEED_ANNOTATION_FOR_VAR, stmt)
+                            assert lhs.node is not None
+                            ctx.api.msg.need_annotation_for_var(lhs.node, stmt)
                             continue
 
                         if len(stmt.lvalues) > 1:
@@ -560,6 +562,14 @@ def attr_class_maker_callback(
                                     lhs.node.type = typ
                                     lhs.is_inferred_def = False
 
+                        if ctx.api.options.disallow_untyped_defs and not typ:
+                            # This is a compromise.  If you don't have a type here then the
+                            # __init__ will be untyped. But since the __init__ is added it's
+                            # pointing at the decorator. So instead we also show the error in the
+                            # assignment, which is where you would fix the issue.
+                            assert lhs.node is not None
+                            ctx.api.msg.need_annotation_for_var(lhs.node, stmt)
+
                         # If the attrib has a converter function take the type of the first
                         # argument as the init type.
                         # Note: convert is deprecated but works the same as converter.
@@ -636,15 +646,6 @@ def attr_class_maker_callback(
     # TODO: This doesn't work with incremental mode if the parent class is in a different file.
     attr_classes[info] = attributes
 
-    if ctx.api.options.disallow_untyped_defs:
-        for attribute in attributes:
-            if attribute.type is None:
-                # This is a compromise.  If you don't have a type here then the __init__ will
-                # be untyped. But since the __init__ is added it's pointing at the decorator.
-                # So instead we just show the error in the assignment, which is where you
-                # would fix the issue.
-                ctx.api.fail(messages.NEED_ANNOTATION_FOR_VAR, attribute.context)
-
     # Check the init args for correct default-ness.  Note: This has to be done after all the
     # attributes for all classes have been read, because subclasses can override parents.
     last_default = False
diff --git a/test-data/unit/check-attr.test b/test-data/unit/check-attr.test
index 51ce2dabdb..c5459f4cca 100755
--- a/test-data/unit/check-attr.test
+++ b/test-data/unit/check-attr.test
@@ -76,10 +76,10 @@ A(1, [2], '3', 4, 5)  # E: Too many arguments for "A"
 import attr
 @attr.s    # E: Function is missing a type annotation for one or more arguments
 class A:
-    a = attr.ib()  # E: Need type annotation for variable
-    _b = attr.ib()  # E: Need type annotation for variable
-    c = attr.ib(18)  # E: Need type annotation for variable
-    _d = attr.ib(validator=None, default=18)   # E: Need type annotation for variable
+    a = attr.ib()  # E: Need type annotation for 'a'
+    _b = attr.ib()  # E: Need type annotation for '_b'
+    c = attr.ib(18)  # E: Need type annotation for 'c'
+    _d = attr.ib(validator=None, default=18)   # E: Need type annotation for '_d'
     E = 18
 [builtins fixtures/bool.pyi]
 
@@ -621,9 +621,9 @@ class A:
    a: int
    b = 17
    # The following forms are not allowed with auto_attribs=True
-   c = attr.ib()  # E: Need type annotation for variable
-   d, e = attr.ib(), attr.ib() # E: Need type annotation for variable
-   f = g = attr.ib()  # E: Need type annotation for variable
+   c = attr.ib()  # E: Need type annotation for 'c'
+   d, e = attr.ib(), attr.ib() # E: Need type annotation for 'd' # E: Need type annotation for 'e'
+   f = g = attr.ib()  # E: Need type annotation for 'f' # E: Need type annotation for 'g'
 [builtins fixtures/bool.pyi]
 
 [case testAttrsRepeatedName]
