diff --git a/OIPA/api/activity/aggregation.py b/OIPA/api/activity/aggregation.py
index de4030f7e5..05b28f4a0f 100755
--- a/OIPA/api/activity/aggregation.py
+++ b/OIPA/api/activity/aggregation.py
@@ -1,7 +1,6 @@
 from rest_framework import serializers
 from api.generics.serializers import DynamicFieldsSerializer
 from api.generics import utils
-from api.generics.filters import BasicFilterBackend
 from api.activity.filters import ActivityFilter
 from api.generics.serializers import NoCountPaginationSerializer
 from rest_framework.response import Response
diff --git a/OIPA/api/activity/filters.py b/OIPA/api/activity/filters.py
index 9a475839c8..a972612c8c 100755
--- a/OIPA/api/activity/filters.py
+++ b/OIPA/api/activity/filters.py
@@ -7,69 +7,10 @@
 from django_filters import Filter, FilterSet, NumberFilter, DateFilter, BooleanFilter
 from rest_framework.filters import OrderingFilter
 
-from api.generics.filters import CommaSeparatedCharFilter
+from api.generics.filters import CommaSeparatedCharFilter, CommaSeparatedCharMultipleFilter, TogetherFilterSet
 from iati.models import Activity, Budget, RelatedActivity
 
 
-class CommaSeparatedDateRangeFilter(Filter):
-
-    def filter(self, qs, value):
-
-        if value in ([], (), {}, None, ''):
-            return qs
-
-        value = value.split(',')
-
-        return super(CommaSeparatedCharFilter, self).filter(qs, value)
-
-
-class TogetherFilter(Filter):
-    """
-    Used with TogetherFilterSet, always gets called regardless of GET args
-    """
-    
-    def __init__(self, filters=None, values=None, **kwargs):
-        self.filter_classes = filters
-        self.values = values
-
-        super(TogetherFilter, self).__init__(**kwargs)
-
-    def filter(self, qs, values):
-        if self.filter_classes:
-            filters = { "%s__%s" % (c[0].name, c[0].lookup_type) : c[1] for c in zip(self.filter_classes, values)}
-            qs = qs.filter(**filters).distinct()
-
-            return qs
-
-
-class TogetherFilterSet(FilterSet):
-    def __init__(self, data=None, queryset=None, prefix=None, strict=None):
-        """
-        Adds a together_exclusive meta option that selects fields that have to 
-        be called in the same django filter() call when both present
-        """
-
-        meta = getattr(self, 'Meta', None)
-
-        # fields that must be filtered in the same filter call
-        self.together_exclusive = getattr(meta, 'together_exclusive', None)
-
-        data = data.copy()
-
-        for filterlist in self.together_exclusive:
-            if set(filterlist).issubset(data.keys()):
-
-                filter_values = [data.pop(filteritem)[0] for filteritem in filterlist]
-                filter_classes = [self.declared_filters.get(filteritem, None) for filteritem in filterlist]
-
-                uid = uuid.uuid4()
-
-                self.base_filters[uid] = TogetherFilter(filters=filter_classes)
-                data.appendlist(uid, filter_values)
-
-        super(FilterSet, self).__init__(data, queryset, prefix, strict)
-
-
 class ActivityFilter(TogetherFilterSet):
 
     activity_id = CommaSeparatedCharFilter(
@@ -165,8 +106,8 @@ class ActivityFilter(TogetherFilterSet):
         lookup_type='in',
         name='participating_organisations__role__code')
 
-    reporting_organisation = CommaSeparatedCharFilter(
-        lookup_type='in',
+    reporting_organisation = CommaSeparatedCharMultipleFilter(
+        lookup_type='startswith',
         name='reporting_organisations__ref')
 
     xml_source_ref = CommaSeparatedCharFilter(
@@ -316,7 +257,6 @@ class ActivityFilter(TogetherFilterSet):
         lookup_type='gte',
         name='activity_plus_child_aggregation__commitment_value')
 
-
     class Meta:
         model = Activity
         together_exclusive = [('budget_period_start', 'budget_period_end')]
diff --git a/OIPA/api/activity/tests/test_serializers.py b/OIPA/api/activity/tests/test_serializers.py
index 60e3dbf465..899b52b0ae 100755
--- a/OIPA/api/activity/tests/test_serializers.py
+++ b/OIPA/api/activity/tests/test_serializers.py
@@ -629,12 +629,8 @@ def test_activitySerializer(self):
             contains the data in activity.iati_identifier
             """
 
-        assert serializer.data['last_updated_datetime'] ==\
-            activity.last_updated_datetime.strftime("%y-%m-%d"),\
-            """
-            a serialized activity should contain a field 'last_updated_datetime
-            that contains the data in activity.last_updated_datetime
-            """
+        self.assertEqual(serializer.data['last_updated_datetime'], activity.last_updated_datetime.isoformat())
+
         assert serializer.data['hierarchy'] == activity.hierarchy,\
             """
             a serialized activity should contain a field 'hierarchy' that
diff --git a/OIPA/api/generics/filters.py b/OIPA/api/generics/filters.py
index 6812d07f16..407638be62 100755
--- a/OIPA/api/generics/filters.py
+++ b/OIPA/api/generics/filters.py
@@ -1,10 +1,12 @@
 from rest_framework import filters
 from django.db.models.sql.constants import QUERY_TERMS
-from django_filters import CharFilter
 from haystack.query import SearchQuerySet
 from haystack.inputs import Exact
 import gc
 
+from django.db.models import Q
+from django_filters import CharFilter
+from django_filters import Filter, FilterSet, NumberFilter, DateFilter, BooleanFilter
 
 VALID_LOOKUP_TYPES = sorted(QUERY_TERMS)
 
@@ -35,100 +37,86 @@ def filter_queryset(self, request, queryset, view):
 
         return queryset
 
-class FilterField(object):
-
-    def __init__(self, lookup_type=None, field=None):
-        assert lookup_type in VALID_LOOKUP_TYPES,\
-            'lookup_type in FilterSpecification is invalid'
-
-        self.lookup_type = lookup_type
-        self.field = field
-
-    @property
-    def lookup_parameter(self):
-        return self.field + '__' + self.lookup_type
+class CommaSeparatedCharFilter(CharFilter):
 
+    def filter(self, qs, value):
 
-class BasicFilter(object):
+        if value:
+            value = value.split(',')
 
-    @property
-    def fields(self):
-        return self.Meta.fields
+        self.lookup_type = 'in'
 
-    @property
-    def model(self):
-        return self.Meta.model
+        return super(CommaSeparatedCharFilter, self).filter(qs, value)
 
-    def __init__(self):
+class CommaSeparatedCharMultipleFilter(CharFilter):
+    """
+    Comma separated filter for lookups like 'exact', 'iexact', etc..
+    """
+    def filter(self, qs, value):
+        if not value: return qs
 
-        assert self.fields,\
-            'filter_class is declared but no filter_fields'
+        values = value.split(',')
 
-        # Check that all fields specified in the dictionary
-        # have a filters.FilterField object
-        unknown_fields = set(self.fields) - set(dir(self))
-        assert len(unknown_fields) == 0,\
-            'filter_class contains fields that do not exist'
+        lookup_type = self.lookup_type
 
-        # When model is specified, check that all FilterField.field
-        # are available in the model.
-        if self.model is not None:
-            model_obj = self.model()
-            model_fields = model_obj._meta.get_all_field_names()
+        filters = [Q(**{"{}__{}".format(self.name, lookup_type): value}) for value in values]
+        final_filters = reduce(lambda a, b: a | b, filters)
 
-            filter_field_model_names = []
-            for filter in self.fields:
-                filter_field = getattr(self, filter, None)
-                filter_field_model_names.append(filter_field.field)
+        return qs.filter(final_filters)
 
-            unknown_model_fields = set(filter_field_model_names) - set(model_fields)
-            assert len(unknown_model_fields) == 0,\
-                'field does not exist in model'
+class CommaSeparatedDateRangeFilter(Filter):
 
-    def lookup_parameters(self, params):
-        to_filter_fields = set(self.fields) & set(params.keys())
+    def filter(self, qs, value):
 
-        lookup_parameters = {}
-        for field in to_filter_fields:
-            filter_field = getattr(self, field, None)
+        if value in ([], (), {}, None, ''):
+            return qs
 
-            if filter_field.lookup_type == 'in':
-                parameter_value = params[field].split(',')
-            else:
-                parameter_value = params[field]
+        values = value.split(',')
 
-            lookup_parameters[filter_field.lookup_parameter] = parameter_value
+        return super(CommaSeparatedDateRangeFilter, self).filter(qs, values)
 
-        return lookup_parameters
+class TogetherFilter(Filter):
+    """
+    Used with TogetherFilterSet, always gets called regardless of GET args
+    """
+    
+    def __init__(self, filters=None, values=None, **kwargs):
+        self.filter_classes = filters
+        self.values = values
 
-    def filter_queryset(self, queryset, params):
-        queryset_parameters = self.lookup_parameters(params)
+        super(TogetherFilter, self).__init__(**kwargs)
 
-        return queryset.filter(**queryset_parameters)
+    def filter(self, qs, values):
+        if self.filter_classes:
+            filters = { "%s__%s" % (c[0].name, c[0].lookup_type) : c[1] for c in zip(self.filter_classes, values)}
+            qs = qs.filter(**filters).distinct()
 
+            return qs
 
-class BasicFilterBackend(filters.BaseFilterBackend):
+class TogetherFilterSet(FilterSet):
+    def __init__(self, data=None, queryset=None, prefix=None, strict=None):
+        """
+        Adds a together_exclusive meta option that selects fields that have to 
+        be called in the same django filter() call when both present
+        """
 
-    def filter_queryset(self, request, queryset, view):
-        filter_class = getattr(view, 'filter_class', None)
+        meta = getattr(self, 'Meta', None)
 
-        if filter_class is None:
-            return queryset
+        # fields that must be filtered in the same filter call
+        self.together_exclusive = getattr(meta, 'together_exclusive', None)
 
-        filter_class = filter_class()
-        queryset = filter_class.filter_queryset(
-            queryset=queryset,
-            params=request.query_params
-            )
+        data = data.copy()
 
-        return queryset
+        for filterlist in self.together_exclusive:
+            if set(filterlist).issubset(data.keys()):
 
+                filter_values = [data.pop(filteritem)[0] for filteritem in filterlist]
+                filter_classes = [self.declared_filters.get(filteritem, None) for filteritem in filterlist]
 
-class CommaSeparatedCharFilter(CharFilter):
+                uid = uuid.uuid4()
 
-    def filter(self, qs, value):
+                self.base_filters[uid] = TogetherFilter(filters=filter_classes)
+                data.appendlist(uid, filter_values)
 
-        if value:
-            value = value.split(',')
+        super(FilterSet, self).__init__(data, queryset, prefix, strict)
 
-        return super(CommaSeparatedCharFilter, self).filter(qs, value)
diff --git a/OIPA/api/tests/test_filter.py b/OIPA/api/tests/test_filter.py
index 5e90bfbd9b..bf47403bd2 100755
--- a/OIPA/api/tests/test_filter.py
+++ b/OIPA/api/tests/test_filter.py
@@ -1,8 +1,6 @@
-from api.generics.filters import BasicFilter
-from api.generics.filters import BasicFilterBackend
-from api.generics.filters import FilterField
 from django.db import models
 from unittest import TestCase
+from unittest import skip
 
 
 class Model(models.Model):
@@ -11,55 +9,18 @@ class Model(models.Model):
 
 
 class TestFilter(TestCase):
+    @skip('filter test')
     def test_incorrect_lookup(self):
-        self.assertRaises(
-            AssertionError, FilterField, lookup_type='i', field='code')
+        pass
 
+    @skip('filter test')
     def test_unknown_model_filter(self):
-        class UnknownModelFieldFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='unknown_field')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes'
-                ]
-
-        self.assertRaises(AssertionError, UnknownModelFieldFilter)
+        pass
 
+    @skip('filter test')
     def test_unknown_field(self):
-        class UnknownFieldFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='code')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes',
-                    'name'
-                ]
-
-        self.assertRaises(AssertionError, UnknownFieldFilter)
+        pass
 
+    @skip('filter test')
     def test_valid_filter(self):
-        class CorrectFilter(BasicFilter):
-            codes = FilterField(lookup_type='in', field='code')
-            name = FilterField(lookup_type='icontains', field='name')
-
-            class Meta:
-                model = Model
-                fields = [
-                    'codes',
-                    'name'
-                ]
-
-        params = {
-            'codes': '1,3',
-            'name': 'test'
-        }
-        expected_result = {
-            'code__in': ['1', '3'],
-            'name__icontains': 'test'
-        }
-        filter_class = CorrectFilter()
-        result = filter_class.lookup_parameters(params=params)
-        assert result == expected_result
+        pass
