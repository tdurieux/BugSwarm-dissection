diff --git a/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3.rst b/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3.rst
index 9571185003..ca1ec33ddb 100755
--- a/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3.rst
+++ b/source_en/ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3.rst
@@ -1030,55 +1030,18 @@ Basically, it is used when
 A \ ``TypeHandler`` \  is provided by MyBatis3 for general Java classes like primitive type and primitive wrapper type class.
 Specific settings are not required.
 
-**Configuration while using JSR-310 Date and Time API**
-
-When a class which represents date and time offered by JSR-310 Date and Time API in MyBatis3 is used, \ ``TypeHandler`` \  offered by a library different from  that of MyBatis (\ ``mybatis-typehandlers-jsr310`` \) is used.
-While using, configuration to recognise \ ``TypeHandler`` \  is added to \ ``mybatis-config.xml`` \, in MyBatis.
-    
-
- .. code-block:: xml
- 
-      <typeHandlers>
-          <typeHandler handler="org.apache.ibatis.type.InstantTypeHandler" />         <!-- (1) -->
-          <typeHandler handler="org.apache.ibatis.type.LocalDateTimeTypeHandler" />   <!-- (2) -->
-          <typeHandler handler="org.apache.ibatis.type.LocalDateTypeHandler" />       <!-- (3) -->
-          <typeHandler handler="org.apache.ibatis.type.LocalTimeTypeHandler" />       <!-- (4) -->
-          <typeHandler handler="org.apache.ibatis.type.OffsetDateTimeTypeHandler" />  <!-- (5) -->
-          <typeHandler handler="org.apache.ibatis.type.OffsetTimeTypeHandler" />      <!-- (6) -->
-          <typeHandler handler="org.apache.ibatis.type.ZonedDateTimeTypeHandler" />   <!-- (7) -->
-          <typeHandler handler="org.apache.ibatis.type.YearTypeHandler" />            <!-- (8) -->
-          <typeHandler handler="org.apache.ibatis.type.MonthTypeHandler" />           <!-- (9) -->
-      </typeHandlers>
+ .. note:: **Regarding implementation for BLOB and CLOB**
 
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-   :header-rows: 1
-   :widths: 10 80
+    \ ``TypeHandler`` \  added by MyBatis 3.4 implements conversion of BLOB and \ ``java.io.InputStream`` \ , and CLOB and \ ``java.io.Reader`` \  by using API added by JDBC 4.0 (Java 1.6).
+    In case of a JDBC driver with JDBC 4.0 support, it is not necessary to implement a new \ ``TypeHandler`` \  since type handler for conversion of
+    BLOB⇔\ ``InputStream`` \  and CLOB⇔\ ``Reader`` \  is enabled by default.
 
-   * - Sr. No.
-     - Description
-   * - (1)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.Instant`` \  in \ ``java.sql.Timestamp`` \.
-   * - (2)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.LocalDateTime`` \  in \ ``java.sql.Timestamp`` \.
-   * - (3)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.LocalDate`` \  in \ ``java.sql.Date`` \
-   * - (4)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.LocalTime`` \  in \ ``java.sql.Time`` \
-   * - (5)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.OffsetDateTime`` \  in \ ``java.sql.Timestamp`` \
-   * - (6)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.OffsetTime`` \  in \ ``java.sql.Time`` \
-   * - (7)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.ZonedDateTime`` \  in \ ``java.sql.Timestamp`` \
-   * - (8)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.Year`` \  in primitive type int
-   * - (9)
-     - A \ ``TypeHandler`` \  to map \ ``java.time.Month`` \  in primitive type int
+**Configuration while using JSR-310 Date and Time API**
 
- .. tip::
+When a class which represents date and time offered by JSR-310 Date and Time API in MyBatis3 is used, \ ``TypeHandler`` \  offered by a library different from  that of MyBatis (\ ``mybatis-typehandlers-jsr310`` \) is used.
+Note that, \ ``mybatis-typehandlers-jsr310`` \  can be used by default in the `blank project for MyBatis3 <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank#multi-blank-project-with-mybatis3>`_ \.
 
-        Since \ ``TypeHandler`` \  is auto-detected in MyBatis 3.4, above configuration is not required.
+Further, since \ ``TypeHandler`` \  is auto-detected in MyBatis3.4 used by TERASOLUNA Server Framework for Java (5.3.x), it is not necessary to add \ ``TypeHandler``\  to configuration file of MyBatis.
 
 .. tip::
 
@@ -1107,19 +1070,12 @@ While using, configuration to recognise \ ``TypeHandler`` \  is added to \ ``myb
 
 |
 
-Creating a \ ``TypeHandler`` \  is required while mapping a Java class and JDBC type not supported by MyBatis3.
-
-Basically, it is necessary to create a \ ``TypeHandler`` \  in the following cases
-
-* A file data with large capacity (binary data) is retained in \ ``java.io.InputStream`` \  type and mapped in \ ``BLOB`` \  type of JDBC type.
-* A large capacity text data is retained as \ ``java.io.Reader`` \  type and mapped in \ ``CLOB`` \  type of JDBC type.
-* \ ``org.joda.time.DateTime`` \  type of ":doc:`../GeneralFuncDetail/JodaTime`" that is recommended to be used in this guideline is mapped with \ ``TIMESTAMP`` \  type of JDBC type.
-* etc ...
-
+Creating a \ ``TypeHandler`` \  is required while mapping a Joda-Time class and JDBC type not supported by MyBatis3.
 
+Basically, creating a \ ``TypeHandler`` \  is required while mapping \ ``org.joda.time.DateTime`` \  type of ":doc:`../GeneralFuncDetail/JodaTime`" recommended by this guideline and \ ``TIMESTAMP`` \  type  of JDBC type.
 
-Refer to ":ref:`DataAccessMyBatis3HowToExtendTypeHandler`" for creating the three types of \ ``TypeHandler`` \  described above.
-
+For creation of \ ``TypeHandler`` \  which maps Joda-Time class and JDBC type,
+refer ":ref:`DataAccessMyBatis3HowToExtendTypeHandler`".
 
 |
 
@@ -4890,117 +4846,23 @@ Implementation example of mapping file is as given below.
 Implementation of TypeHandler
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-When it is necessary to perform mapping with the Java class not supported by MyBatis3 standard
-and when it is necessary to change the standard behavior of MyBatis3, a unique \ ``TypeHandler`` \  should be created.
-
-How to implement the \ ``TypeHandler`` \  is explained using the examples given below.
-
-* :ref:`DataAccessMyBatis3HowToExtendTypeHandlerBlob`
-* :ref:`DataAccessMyBatis3HowToExtendTypeHandlerClob`
-* :ref:`DataAccessMyBatis3HowToExtendTypeHandlerJoda`
-
+Creation of a unique \ ``TypeHandler`` \  is required when mapping
+with Joda-Time class not supported by MyBatis3 standards, is necessary.
 
+This guideline explains how to implement \ ``TypeHandler`` \  using ":ref:`DataAccessMyBatis3HowToExtendTypeHandlerJoda`" as an example.
 
 Refer to ":ref:`DataAccessMyBatis3HowToUseSettingsTypeHandler`" for how to apply a created \ ``TypeHandler`` \  in an application.
 
 
- .. note:: **Preconditions for implementation of BLOB and CLOB**
-
-    A method added from JDBC 4.0 is used for the implementation of BLOB and CLOB.
-
-    When using a JDBC driver that is not compatible with JDBC 4.0 or a 3rd party wrapper class,
-    it must be noted that the operation may not work in the implementation example explained below.
-    When the operation is to be performed in an environment wherein the driver is not compatible with JDBC 4.0,
-    the implementation must be changed to suit the compatible version of JDBC driver to be used.
+ .. note:: **Regarding implementation for BLOB and CLOB**
 
-    For example, a lot of methods added by JDBC 4.0 are not implemented in JDBC driver for PostgreSQL9.3 (\ ``postgresql-9.3-1102-jdbc41.jar``\ ).
-    
-
-|
-
-.. _DataAccessMyBatis3HowToExtendTypeHandlerBlob:
-
-Implementing the TypeHandler for BLOB
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+    \ ``TypeHandler`` \  added by MyBatis 3.4 implements conversion of BLOB and \ ``java.io.InputStream`` \, and CLOBと\ ``java.io.Reader`` \  by using API added by JDBC 4.0 (Java 1.6).
+    In case of a JDBC driver of JDBC 4.0 support, it is not necessary to implement a new \ ``TypeHandler`` \  since type handler for the conversion of BLOB⇔\ ``InputStream`` \  and CLOB⇔\ ``Reader`` \
+    is enabled by default.
 
-MyBatis3 provides a \ ``TypeHandler`` \  for mapping BLOB in \ ``byte[]``\ .
-However, when the data to be handled is very large, it is necessary to map in \ ``java.io.InputStream``\ .
+    If a JDBC driver incompatible with JDBC 4.0 is used, a \ ``TypeHandler`` \  should be created considering compatibility version of JDBC driver to be used.
 
-How to implement a \ ``TypeHandler`` \  for mapping BLOB in \ ``java.io.InputStream``\  is given below.
-
- .. code-block:: java
-
-    package com.example.infra.mybatis.typehandler;
-
-    import org.apache.ibatis.type.BaseTypeHandler;
-    import org.apache.ibatis.type.JdbcType;
-    import org.apache.ibatis.type.MappedTypes;
-
-    import java.io.InputStream;
-    import java.sql.*;
-
-    // (1)
-    public class BlobInputStreamTypeHandler extends BaseTypeHandler<InputStream> {
-
-        // (2)
-        @Override
-        public void setNonNullParameter(PreparedStatement ps, int i, InputStream parameter,
-                                        JdbcType jdbcType) throws SQLException {
-            ps.setBlob(i, parameter);
-        }
-
-        // (3)
-        @Override
-        public InputStream getNullableResult(ResultSet rs, String columnName)
-                throws SQLException {
-            return toInputStream(rs.getBlob(columnName));
-        }
-
-        // (3)
-        @Override
-        public InputStream getNullableResult(ResultSet rs, int columnIndex)
-                throws SQLException {
-            return toInputStream(rs.getBlob(columnIndex));
-        }
-
-        // (3)
-        @Override
-        public InputStream getNullableResult(CallableStatement cs, int columnIndex)
-                throws SQLException {
-            return toInputStream(cs.getBlob(columnIndex));
-        }
-
-        private InputStream toInputStream(Blob blob) throws SQLException {
-            // (4)
-            if (blob == null) {
-                return null;
-            } else {
-                return blob.getBinaryStream();
-            }
-        }
-
-    }
-
- .. tabularcolumns:: |p{0.10\linewidth}|p{0.80\linewidth}|
- .. list-table::
-    :header-rows: 1
-    :widths: 10 80
-
-    * - Sr. No.
-      - Description
-    * - (1)
-      - Specify \ ``BaseTypeHandler``\  provided by MyBatis3 in parent class.
-
-        In such cases, specify \ ``InputStream``\  in the generic type of \ ``BaseTypeHandler``\.
-    * - (2)
-      - Implement the process that configures \ ``InputStream``\  in \ ``PreparedStatement``\.
-    * - (3)
-      - Fetch \ ``InputStream``\  from \ ``Blob``\  that is fetched from \ ``ResultSet``\  or \ ``CallableStatement``\  and return as a return value.
-    * - (4)
-      - Since the fetched \ ``Blob``\  can become \ ``null``\  in case of the column which allows \ ``null``\ , \ ``InputStream``\  must be fetched only after performing \ ``null``\  check.
-        
-
-        In the implementation example described above, a private method is created since same process is required for all three methods.
+    For example, some methods added from JDBC 4.0 are not yet implemented in JDBC driver (\ ``postgresql-9.4-1212.jar``\ ) for PostgreSQL9.4.
 
 |
 
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
index 748ffd571d..fb998b6e6e 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
@@ -1632,8 +1632,8 @@ Method to handle exception at use case level
     servlet container since \ ``NestedServletException``\ which wraps the fatal error get handled unintentionally.
     For details, refer to \ :ref:`"Regarding handling of fatal errors using @ExceptionHandler and SystemExceptionResolver"<exception-handling-class-fatalerror-warning>`\.
 
-    In such a case, in order to notify fatal error to the servlet container, \ ``NestedServletException``\  is handled by the method which assigns \ ``@ExceptionHandler``\  by adding it to
-    <exception-handling-how-to-use-application-configuration-app-label>`\  which excludes NestedServletException from handling by \ :ref:`SystemExceptionResolver, and then is thrown again.
+    In such a case, in order to notify fatal error to the servlet container, \ :ref: NestedServletException is excluded from handling by SystemExceptionResolver<exception-handling-how-to-use-application-configuration-app-label>
+    and \  NestedServletException \  is handled by the method which assigns \ @ExceptionHandler \  and then is thrown again.
     Implementation example is as below.
 
      .. code-block:: java
diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
index 0b1aefc704..aa641ae9d9 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/Validation.rst
@@ -3894,7 +3894,8 @@ Refer to \ `Hibernate Validator specifications <http://docs.jboss.org/hibernate/
 
    * - \ ``@URL``\
      - It is applicable to any implementation class of \ ``CharSequence``\  interface
-     - Validate whether it is compliant with RFC2396.
+     - Verify that it is valid as URL. Character string is validated by using \ ``java.net.URL``\  constructor
+       and the protocol that is validated as a URL is dependent on the protocols supported by JVM (\ ``http``\ ,\ ``https``\ ,\ ``file``\ ,\ ``jar``\  etc).
      - .. code-block:: java
 
             @URL
@@ -3917,26 +3918,20 @@ Refer to \ `Hibernate Validator specifications <http://docs.jboss.org/hibernate/
             @NotEmpty
             private String password;
 
-.. warning::
-
-    When following annotations provided by Hibernate Validator are used,
-    if a default message is used, a bug that the message is not generated correctly \ `HV-881 <https://hibernate.atlassian.net/browse/HV-881>`_\ , \ `HV-949 <https://hibernate.atlassian.net/browse/HV-949>`_\ ) occurs.
+.. tip::
 
-    * \ ``@CreditCardNumber``\ (message is displayed, but WARN log is output)
-    * \ ``@LuhnCheck``\
-    * \ ``@Mod10Check``\
-    * \ ``@Mod11Check``\
-    * \ ``@ModCheck``\ (deprecated API from 5.1.0.Final)
+     In \ ``@URL``\ , when the verification is to be performed for validating the protocol not supported by JVM, \ ``org.hibernate.validator.constraintvalidators.RegexpURLValidator``\  provided by Hibernate is used.
+     This class is a Validator class corresponding to \ ``@URL``\  annotation and it can be checked whether it is a URL format by a regular expression. It can also verify the validation for the protocols not supported by JVM.
 
-    This bug occurs because of the flaws in message definitions provided by default,
-    and it is possible to avoid them by overwriting the default messages by an appropriate message.
+     * If the check rules of \ ``@URL``\  of overall application can be changed, Validator class is changed to \ ``RegexpURLValidator``\  in XML,
+       as described in \ `JavaDoc <https://docs.jboss.org/hibernate/validator/5.2/api/org/hibernate/validator/constraints/URL.html>`_\ .
+     * When only some of the items are to be validated by using regular expressions and default rules are to be used for \ ``@URL``\ , a new annotation and an implementation class \ ``javax.validation.ConstraintValidator``\  that performs validation similar to \ ``RegexpURLValidator``\  are created
+       and the validation by the annotation thus created is applied to the required items.
 
-    In case of overwriting the default messages,
-    it is advisable to define an appropriate message 
-    by creating :file:`ValidationMessages.properties` directly under the class path (normal src/main/resources).
+     These can be applied as per the intended use.
 
-    For appropriate message definition, refer to:
-    \ `Modifications for Hibernate Validator 5.2 version (next minor version upgrade) <https://github.com/hibernate/hibernate-validator/commit/5a9d7bae26bccb15229ae5612d67506a7a775b48#diff-762e02c90cfb2f00b0b2788486e3fd5e>`_\ .
+     For details of check rule change by XML, refer to \ `Hibernate reference <https://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/ch07.html#section-configuration-validation-xml>`_\ 
+     and for how to create a new annotation, refer to \ :ref:`Validation_implement_new_constraint`\  respectively..
 
 .. _Validation_default_message_in_hibernate_validator:
 
diff --git a/source_en/ArchitectureInDetail/WebServiceDetail/RestClient.rst b/source_en/ArchitectureInDetail/WebServiceDetail/RestClient.rst
index a1db8c195f..7934330edf 100755
--- a/source_en/ArchitectureInDetail/WebServiceDetail/RestClient.rst
+++ b/source_en/ArchitectureInDetail/WebServiceDetail/RestClient.rst
@@ -1812,12 +1812,6 @@ Define a bean for ``AsyncRestTemplate``\ .
         | In case of default configuration, \ ``SimpleClientHttpRequestFactory``\  which has set \ ``org.springframework.core.task.SimpleAsyncTaskExecutor``\  is set as \ ``org.springframework.core.task.AsyncListenableTaskExecutor``\  in \ ``org.springframework.http.client.AsyncClientHttpRequestFactory``\  of \ ``AsyncRestTemplate``\ .
 
 
-.. note:: **Applying ClientHttpRequestInterceptor to AsyncRestTemplate**
-
-    \ ``ClientHttpRequestInterceptor``\  cannot be applied in \ ``AsyncRestTemplate``\ .
-    Hence, a common process must be executed independently.
-
-
 .. note:: **How to customise AsyncRestTemplate**
 
     \ ``SimpleAsyncTaskExecutor``\  set as default generates threads without using a thread pool
@@ -1916,6 +1910,133 @@ Internal method
         | Implement the process in \ ``onSuccess``\  method when a successful response has returned and implement a process in \ ``onFailure``\ when an error has occurred.
 
 
+Implementation of common processing for asynchronous request
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Any arbitrary process can be executed before and after communicating with the server by using \ ``org.springframework.http.client.AsyncClientHttpRequestInterceptor``\.
+
+An example of login process is introduced here.
+
+**Implementation example of communication log output**
+
+.. code-block:: java
+
+    package com.example.restclient;
+
+    import java.io.IOException;
+    import java.nio.charset.StandardCharsets;
+
+    import org.slf4j.Logger;
+    import org.slf4j.LoggerFactory;
+    import org.springframework.http.HttpRequest;
+    import org.springframework.http.client.AsyncClientHttpRequestExecution;
+    import org.springframework.http.client.AsyncClientHttpRequestInterceptor;
+    import org.springframework.http.client.ClientHttpResponse;
+    import org.springframework.util.concurrent.ListenableFuture;
+    import org.springframework.util.concurrent.ListenableFutureCallback;
+
+    public class AsyncLoggingInterceptor implements
+                                         AsyncClientHttpRequestInterceptor { // (1)
+        private static final Logger log = LoggerFactory.getLogger(
+                AsyncLoggingInterceptor.class);
+
+        @Override
+        public ListenableFuture<ClientHttpResponse> intercept(HttpRequest request,
+                byte[] body,
+                AsyncClientHttpRequestExecution execution) throws IOException {
+            // (2)
+            if (log.isInfoEnabled()) {
+                String requestBody = new String(body, StandardCharsets.UTF_8);
+
+                log.info("Request Header {}", request.getHeaders());
+                log.info("Request Body {}", requestBody);
+            }
+
+            // (3)
+            ListenableFuture<ClientHttpResponse> future = execution.executeAsync(
+                    request, body);
+            if (log.isInfoEnabled()) {
+                // (4)
+                future.addCallback(new ListenableFutureCallback<ClientHttpResponse>() {
+
+                    @Override
+                    public void onSuccess(ClientHttpResponse response) {
+                        try {
+                            log.info("Response Header {}", response
+                                    .getHeaders());
+                            log.info("Response Status Code {}", response
+                                    .getStatusCode());
+                        } catch (IOException e) {
+                            log.warn("I/O Error", e);
+                        }
+                    }
+
+                    @Override
+                    public void onFailure(Throwable e) {
+                        log.info("Communication Error", e);
+                    }
+                });
+            }
+
+            return future; // (5)
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - Sr. No.
+      - Description
+    * - | (1)
+      - | Implement \ ``AsyncClientHttpRequestInterceptor``\  interface.
+    * - | (2)
+      - | Implement a process which is  executed prior to sending an asynchronous request.
+        | In the implementation example above, contents of request header and request body are output in the log.
+    * - | (3)
+      - | Send an asynchronous request by using \ ``executeAsync``\  method of \ ``AsyncClientHttpRequestExecution``\  which is received as an argument of \ ``intercept``\  method.
+    * - | (4)
+      - | Register \ ``org.springframework.util.concurrent.ListenableFutureCallback``\  in \ ``ListenableFuture``\  which is received in (3) and implement the process once the response is received.
+        | When the response is received, \ ``onSuccess``\  method is called.
+        | Also, when an exception occurs at the time of asynchronous request, \ ``onFailure``\  method is called. A specific example is shown below.
+
+        * Unable to connect a specified host （\ ``ConnectException``\ ）
+        * Timeout occurred for reading of response data （\ ``SocketTimeoutException``\ ）
+
+    * - | (5)
+      - | Return \ ``ListenableFuture``\  returned in (3).
+
+
+**Definition example of a bean definition file (applicationContext.xml)**
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="asyncLoggingInterceptor" class="com.example.restclient.AsyncLoggingInterceptor" />
+
+    <bean id="asyncRestTemplate" class="org.springframework.web.client.AsyncRestTemplate">
+        <property name="interceptors"><!-- (2) -->
+            <list>
+                <ref bean="asyncLoggingInterceptor" />
+            </list>
+        </property>
+    </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - Sr. No.
+      - Description
+    * - | (1)
+      - | Define a bean for implementation class of \ ``AsyncClientHttpRequestInterceptor``\.
+    * - | (2)
+      - | Inject a bean of \ ``AsyncClientHttpRequestInterceptor``\  in \ ``interceptors``\  property.
+        | When multiple beans are injected, they are executed in the sequence starting from top of the list, similar to \ ``RestTemplate``\.
+
+
+
 .. _RestClientAppendix:
 
 Appendix
diff --git a/source_en/ImplementationAtEachLayer/ApplicationLayer.rst b/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
index ac4a4a4203..4977c562c4 100755
--- a/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
+++ b/source_en/ImplementationAtEachLayer/ApplicationLayer.rst
@@ -1814,10 +1814,31 @@ Example of definition when \ ``<bean>``\  element is to be used
    * - | (6)
      - When View name ``"sample/hello"`` is the return value of handler method, ``"/WEB-INF/views/sample/hello.jsp"`` is called and HTML is sent as response.
 
+
 .. note::
     HTML output is generated using JSP in the above example, however, even if HTML is generated using other template engine such as Velocity, FreeMarker, return value of handler method will be ``"sample/hello"``. 
     ``ViewResolver`` takes care of task to determine which template engine is to be used.
 
+
+.. note::
+
+   When simply a method to return view name is to be implemented, implementation of Controller class can be substituted by using \ ``<mvc:view-controller>`` \.
+    
+    * Implementation example of Controller which uses \ ``<mvc:view-controller>``\.
+    
+      .. code-block:: xml
+      
+        <mvc:view-controller path="/hello" view-name="sample/hello" />
+      
+
+
+.. warning:: **Considerations for using <mvc:view-controller>**
+
+    Since HTTP methods authorized by \ ``<mvc:view-controller>``\  are restricted only to GET and HEAD due to version-up of Spring Framework 4.3 (`SPR-13130 <https://jira.spring.io/browse/SPR-13130>`_),
+    \ ``<mvc:view-controller>``\  cannot used for the pages which are to be accessed by HTTP methods other than GET and HEAD (POST etc).
+    This also happens when pages are forwarded by methods other than GET and HEAD (POST etc). Hence, when HTTP methods for forwarding operations such as transition to error page etc cannot be restricted, adequate care must be taken to avoid the use of \ ``<mvc:view-controller>``\.
+
+
 |
 
 .. _controller_method_return-download-label:
diff --git a/source_en/ImplementationAtEachLayer/DomainLayer.rst b/source_en/ImplementationAtEachLayer/DomainLayer.rst
index d888526a2c..f45c7e7ad4 100755
--- a/source_en/ImplementationAtEachLayer/DomainLayer.rst
+++ b/source_en/ImplementationAtEachLayer/DomainLayer.rst
@@ -824,40 +824,6 @@ Regarding interface and base classes to limit signature of method
             | In the above example, it is defined as generic type of input (I) and output (O) information having one method (execute) for executing business logic.
             | In this guideline, the above interface is called BLogic interface.
 
-    - Controller
-
-     .. code-block:: java
-
-        // (2)
-        @Inject
-        XxxBLogic<XxxInput, XxxOutput> xxxBLogic;
-
-        public String reserve(XxxForm form, RedirectAttributes redirectAttributes) {
-
-            XxxInput input = new XxxInput();
-            // omitted
-
-            // (3)
-            XxxOutput output = xxxBlogic.execute(input);
-
-            // omitted
-
-            redirectAttributes.addFlashAttribute(output.getTourReservation());
-            return "redirect:/xxx?complete";
-        }
-
-     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-     .. list-table::
-        :header-rows: 1
-        :widths: 10 90
-
-        * - Sr. No.
-          - Description
-        * - | (2)
-          - | Controller injects calling BLogic interface.
-        * - | (3)
-          - | Controller calls execute method of BLogic interface and executes business logic.
-
     To standardize process flow of business logic when a fixed common process is included in Service, base classes are created to limit signature of method.
 
     - Base classes to limit signature
@@ -865,6 +831,9 @@ Regarding interface and base classes to limit signature of method
      .. code-block:: java
 
 
+        // (2)
+        @Service
+        @Transactional
         public abstract class AbstractBLogic<I, O> implements BLogic<I, O> {
 
             public O execute(I input){
@@ -872,10 +841,10 @@ Regarding interface and base classes to limit signature of method
 
                   // omitted
 
-                  // (4)
+                  // (3)
                   preExecute(input);
 
-                  // (5)
+                  // (4)
                   O output = doExecute(input);
 
                   // omitted
@@ -901,10 +870,13 @@ Regarding interface and base classes to limit signature of method
 
         * - Sr. No.
           - Description
-        * - | (4)
+        * - | (2)
+          - | While creating a base class, since the method executed externally and the class which implements the method are targets of AOP in the specification of \ `@Transactional`\ , they are assigned to base class when the transaction control is necessary.
+            | Similar to \ `@Servicve`\ , it must be assigned to the base class when Service is considered as an target using AOP, as for \ `ResultMessagesLoggingInterceptor`\.
+        * - | (3)
           - | Call the method to perform pre-processing before executing business logic from base classes.
             | In the preExecute method, business rules are checked.
-        * - | (5)
+        * - | (4)
           - | Call the method executing business logic from the base classes.
 
 
@@ -915,9 +887,31 @@ Regarding interface and base classes to limit signature of method
 
      .. code-block:: java
 
-        public class XxxBLogic extends AbstractBLogic<XxxInput, XxxOutput> {
+        // (5)
+        public interface XxxBLogic extends BLogic<XxxInput, XxxOutput> {
+
+        }
+
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - Sr. No.
+          - Description
+        * - | (5)
+          - | Create an interface that inherits BLogic interface in order to enable type-safe injection.
+            | Implement a sub-interface which inherits BLogic in order to enable calling via a method of new interface.
+
+
+     .. code-block:: java
+
+        @Service
+        public class XxxBLogicImpl extends AbstractBLogic<XxxInput, XxxOutput> implements XxxBLogic {
 
             // (6)
+            @Override
             protected void preExecute(XxxInput input) {
 
                 // omitted
@@ -930,6 +924,7 @@ Regarding interface and base classes to limit signature of method
             }
 
             // (7)
+            @Override
             protected XxxOutput doExecute(XxxInput input) {
                 TourReservation tourReservation = new TourReservation();
 
@@ -960,6 +955,40 @@ Regarding interface and base classes to limit signature of method
           - | Implement business logic.
             | Logic is implemented to satisfy business rules.
 
+    - Controller
+
+     .. code-block:: java
+
+        // (8)
+        @Inject
+        XxxBLogic xxxBLogic;
+
+        public String reserve(XxxForm form, RedirectAttributes redirectAttributes) {
+
+            XxxInput input = new XxxInput();
+            // omitted
+
+            // (9)
+            XxxOutput output = xxxBlogic.execute(input);
+
+            // omitted
+
+            redirectAttributes.addFlashAttribute(output.getTourReservation());
+            return "redirect:/xxx?complete";
+        }
+
+     .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+     .. list-table::
+        :header-rows: 1
+        :widths: 10 90
+
+        * - Sr. No.
+          - Description
+        * - | (8)
+          - | Controller injects BLogic interface to be called.
+        * - | (9)
+          - | Controller calls execute method of BLogic interface and executes business logic.
+
 
 .. _service-creation-unit-label:
 
diff --git a/source_en/Introduction/ChangeLog.rst b/source_en/Introduction/ChangeLog.rst
index 717064e0ec..5c2c932011 100755
--- a/source_en/Introduction/ChangeLog.rst
+++ b/source_en/Introduction/ChangeLog.rst
@@ -25,6 +25,14 @@ Change Log
         * :doc:`../Tutorial/TutorialSecurity`  
         * :doc:`../Tutorial/TutorialTodo`  
 
+    * - 
+      - :doc:`../ImplementationAtEachLayer/ApplicationLayer`
+      - Description details added
+
+        * Added "\ ``<mvc:view-controller>`` \  is used when a simple view controller is to be created" (\ `guideline#2371 <https://github.com/terasolunaorg/guideline/issues/2371>`_\ )
+
+        * Precautions while using \ ``<mvc:view-controller>`` \  added (\ `guideline#2371 <https://github.com/terasolunaorg/guideline/issues/2371>`_\ )
+
     * -
       - :doc:`../ArchitectureInDetail/WebApplicationDetail/ExceptionHandling`
       - Modifications associated with Spring Framework 4.3 support
@@ -37,6 +45,14 @@ Change Log
 
         * Code example of entity when using JPA modified (\ `guideline#2476 <https://github.com/terasolunaorg/guideline/issues/2476>`_\ )
 
+    * -
+      - :doc:`../ArchitectureInDetail/DataAccessDetail/DataAccessMyBatis3`
+      - Description details changed, added
+
+        * Description related to configuration method while using JSR-310 Date and Time API changed (\ `guideline#2365 <https://github.com/terasolunaorg/guideline/issues/2365>`_\ )
+
+        * Added "TypeHandler of JSR310 can be used by default in `blank project for MyBatis3 <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank#multi-blank-project-with-mybatis3>`_ \ (\ `guideline#2365 <https://github.com/terasolunaorg/guideline/issues/2365>`_\ )
+
     * - 2016-08-31
       - \-
       - 5.2.0 RELEASE version published
diff --git a/source_en/Security/Authentication.rst b/source_en/Security/Authentication.rst
index c60eb3d600..c5da3fdd2f 100755
--- a/source_en/Security/Authentication.rst
+++ b/source_en/Security/Authentication.rst
@@ -1356,6 +1356,28 @@ An audit log which records information like "When", "Who", "Which data" and "Typ
     How to coordinate with Spring MVC is explained in ":ref:`SpringSecurityAuthenticationIntegrationWithSpringMVC`".
     **This guideline recommends fetching authentication information by using coordination with Spring MVC.**
 
+.. note::
+
+    When a filter (FORM_LOGIN_FILTER) for authentication is to be customized,
+    it is necessary to disable the following 2 \ ``SessionAuthenticationStrategy``\  classes, apart from specifying \ ``<sec:concurrency-control>``\  element.
+
+    * | ``org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy``
+      | A class to check number of sessions for each logged in user after successful authentication.
+
+    * | ``org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy``
+      | A class to register a session with successful authentication, in session management area.
+
+    In version 1.0.x.RELEASE dependent Spring Security 3.1, \ ``org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy``\  class is provided; however,
+    it is deprecated API from Spring Security 3.2 and it is abolished API from Spring Security 4.0.
+    When upgrading version from Spring Security 3.1 to Spring Security 3.2 or later versions, changes need to be made so that it can be used with combination of following classes.
+
+    * ``ConcurrentSessionControlAuthenticationStrategy`` (added in Spring Security 3.2)
+    * ``RegisterSessionAuthenticationStrategy`` (added in Spring Security 3.2)
+    * ``org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy``
+
+    For specific methods of definition,
+    refer to sample code of `Spring Security Reference -Web Application Security (Concurrency Control)- <http://docs.spring.io/spring-security/site/docs/4.1.4.RELEASE/reference/htmlsingle/#concurrent-sessions>`_.
+
 |
 
 Access from JSP
@@ -2724,11 +2746,7 @@ Definition example of Controller which displays login form.
 
 As per this example, it is also possible to substitute by using \ ``<mvc:view-controller>``\  in case of a controller with only one method which simply returns only the view name.
 
-* Definition example of Controller using \ ``<mvc:view-controller>``\ .
-
-.. code-block:: xml
-
-    <mvc:view-controller path="/login" view-name="login" /><!-- (1) -->
+For details, refer \ :ref:`controller_method_return-html-label`\.
 
 |
 
