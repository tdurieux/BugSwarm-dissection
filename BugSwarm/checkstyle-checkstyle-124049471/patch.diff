diff --git a/.travis.yml b/.travis.yml
index a94ce51cc2..fe786afdef 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -102,6 +102,20 @@ matrix:
         - CMD=$CMD1$CMD2$CMD3$CMD4$CMD5$CMD6$CMD7$CS_CMD
         - COVERAGE_CMD=""
 
+    # NoErrorTest - Apache Apex (oraclejdk8)
+    - jdk: oraclejdk8
+      env:
+        - DESC="NoErrorTest - Apache Apex"
+        - CMD1="mvn clean install -DskipTests -DskipITs -Dcobertura.skip=true"
+        - CMD2="              -Dpmd.skip=true -Dfindbugs.skip=true "
+        - CMD3="              -Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true -Dxml.skip=true"
+        - CMD4=" && CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)"
+        - CMD5=" && echo CS_version:\$CS_POM_VERSION"
+        - CMD6=" && git clone https://github.com/apache/incubator-apex-core/ && cd incubator-apex-core"
+        - CS_CMD=" && mvn compile checkstyle:check -Dcheckstyle.version=\$CS_POM_VERSION"
+        - CMD=$CMD1$CMD2$CMD3$CMD4$CMD5$CMD6$CMD7$CS_CMD
+        - COVERAGE_CMD=""
+
     # NoExceptiontest - Checkstyle, sevntu-checkstyle (oraclejdk8)
     - jdk: oraclejdk8
       env:
diff --git a/config/suppressions.xml b/config/suppressions.xml
index 895057bf38..b0aaec12e1 100755
--- a/config/suppressions.xml
+++ b/config/suppressions.xml
@@ -13,10 +13,10 @@
          See https://github.com/checkstyle/checkstyle/issues/2285-->
     <suppress checks="IllegalCatch"
               files="Checker.java"
-              lines="315"/>
+              lines="247"/>
     <suppress checks="IllegalCatch"
               files="Checker.java"
-              lines="320"/>
+              lines="252"/>
     <!--Test to reproduce error catching in Checker and satisfy coverage rate. -->
     <suppress checks="IllegalCatch"
               files="CheckerTest.java"
diff --git a/pom.xml b/pom.xml
index 02085b7693..4b50baaf31 100755
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
 
   <groupId>com.puppycrawl.tools</groupId>
   <artifactId>checkstyle</artifactId>
-  <version>6.18-SNAPSHOT</version>
+  <version>6.19-SNAPSHOT</version>
   <packaging>jar</packaging>
 
   <name>checkstyle</name>
@@ -191,7 +191,7 @@
     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
     <projectVersion>${project.version}</projectVersion>
     <antlr4.version>4.5.3</antlr4.version>
-    <maven.site.plugin.version>3.4</maven.site.plugin.version>
+    <maven.site.plugin.version>3.5.1</maven.site.plugin.version>
     <maven.findbugs.plugin.version>3.0.3</maven.findbugs.plugin.version>
     <maven.pmd.plugin.version>3.6</maven.pmd.plugin.version>
     <maven.jacoco.plugin.version>0.7.6.201602180812</maven.jacoco.plugin.version>
@@ -200,7 +200,7 @@
     <tools.jar.version>1.7.0</tools.jar.version>
     <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
     <java.version>1.7</java.version>
-    <checkstyle.version>6.17</checkstyle.version>
+    <checkstyle.version>6.18</checkstyle.version>
   </properties>
 
   <!-- that repositories are required for testing plugin's snapshot version -->
@@ -272,19 +272,19 @@
     <dependency>
       <groupId>org.powermock</groupId>
       <artifactId>powermock-api-mockito</artifactId>
-      <version>1.6.4</version>
+      <version>1.6.5</version>
       <scope>test</scope>
     </dependency>
     <dependency>
       <groupId>org.powermock</groupId>
       <artifactId>powermock-module-junit4</artifactId>
-      <version>1.6.4</version>
+      <version>1.6.5</version>
       <scope>test</scope>
     </dependency>
     <dependency>
       <groupId>commons-io</groupId>
       <artifactId>commons-io</artifactId>
-      <version>2.4</version>
+      <version>2.5</version>
       <scope>test</scope>
     </dependency>
     <dependency>
@@ -604,11 +604,12 @@
         <version>${maven.site.plugin.version}</version>
         <configuration>
           <xdocDirectory>${basedir}/src/xdocs</xdocDirectory>
-          <validate>true</validate>
+          <!-- false till https://issues.apache.org/jira/browse/MSITE-774 -->
+          <validate>false</validate>
         </configuration>
         <dependencies>
-          <!-- add support for ssh/scp -->
           <dependency>
+            <!-- add support for ssh/scp -->
             <groupId>org.apache.maven.wagon</groupId>
             <artifactId>wagon-ssh</artifactId>
             <version>2.10</version>
@@ -1161,9 +1162,6 @@
             <excludedLink>http://sonar-plugins.codehaus.org/maven-report</excludedLink>
             <!-- SSLHandshakeException but page is opening -->
             <excludedLink>http://www.sickboy.cz/checkstyle/</excludedLink>
-            <!-- Excluded due to Checkstyle's issue #549 until https://issues.apache.org/jira/browse/MJAVADOC-428
-            and http://jira.codehaus.org/browse/DOXIA-525 and http://jira.codehaus.org/browse/MLINKCHECK-21 will be fixed -->
-            <excludedLink>**/com/puppycrawl/**</excludedLink>
             <!-- Excluded due to Checkstyle's issue #549 until https://issues.apache.org/jira/browse/MJAVADOC-428 will be fixed -->
             <excludedLink>http://docs.oracle.com/javase/7/docs/api/org/xml/sax/helpers.DefaultHandler.html?*</excludedLink>
             <!-- Excluded due to Maven Enforcer Plugin's issue #234: https://issues.apache.org/jira/browse/MENFORCER-234-->
diff --git a/release.sh b/release.sh
index 11aafd8970..027e274a73 100755
--- a/release.sh
+++ b/release.sh
@@ -4,14 +4,14 @@ set -e
 #https://github.com/checkstyle/checkstyle/wiki/How-to-make-a-release
 
 SF_USER=romanivanov
-PREV_RELEASE=6.16.1
+PREV_RELEASE=6.18
 RELEASE=$(git describe $(git rev-list --tags --max-count=1) | sed "s/checkstyle-//")
 
 echo "PREVIOUS RELESE version:"$PREV_RELEASE
 echo "RELESE version:"$RELEASE
 
 #############################
-
+echo "Please provide password for $SF_USER,checkstyle@shell.sourceforge.net"
 echo "exit" | ssh -t $SF_USER,checkstyle@shell.sourceforge.net create
 
 # Version bump in pom.xml - https://github.com/checkstyle/checkstyle/commits/master
@@ -48,7 +48,7 @@ mvn -Passembly clean package
 #Publish them to sourceforce
 FRS_PATH=/home/frs/project/checkstyle/checkstyle/$RELEASE
 ssh $SF_USER,checkstyle@shell.sourceforge.net "mkdir -p $FRS_PATH"
-# !!! THIS WILL AS A PASSWORD !!
+# !!! THIS WILL ASK A SOURCEFORGE PASSWORD !!
 scp target/*.jar $SF_USER@frs.sourceforge.net:$FRS_PATH
 scp target/*.tar.gz $SF_USER@frs.sourceforge.net:$FRS_PATH
 scp target/*.zip $SF_USER@frs.sourceforge.net:$FRS_PATH
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 1f32b76f42..2211372147 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -133,90 +133,6 @@ public void setCacheFile(String fileName) throws IOException {
         cache.load();
     }
 
-    @Override
-    public void finishLocalSetup() throws CheckstyleException {
-        final Locale locale = new Locale(localeLanguage, localeCountry);
-        LocalizedMessage.setLocale(locale);
-
-        if (moduleFactory == null) {
-
-            if (moduleClassLoader == null) {
-                throw new CheckstyleException(
-                        "if no custom moduleFactory is set, "
-                                + "moduleClassLoader must be specified");
-            }
-
-            final Set<String> packageNames = PackageNamesLoader
-                    .getPackageNames(moduleClassLoader);
-            moduleFactory = new PackageObjectFactory(packageNames,
-                    moduleClassLoader);
-        }
-
-        final DefaultContext context = new DefaultContext();
-        context.add("charset", charset);
-        context.add("classLoader", classLoader);
-        context.add("moduleFactory", moduleFactory);
-        context.add("severity", severityLevel.getName());
-        context.add("basedir", basedir);
-        childContext = context;
-    }
-
-    @Override
-    protected void setupChild(Configuration childConf)
-        throws CheckstyleException {
-        final String name = childConf.getName();
-        final Object child;
-
-        try {
-            child = moduleFactory.createModule(name);
-
-            if (child instanceof AutomaticBean) {
-                final AutomaticBean bean = (AutomaticBean) child;
-                bean.contextualize(childContext);
-                bean.configure(childConf);
-            }
-        }
-        catch (final CheckstyleException ex) {
-            throw new CheckstyleException("cannot initialize module " + name
-                    + " - " + ex.getMessage(), ex);
-        }
-        if (child instanceof FileSetCheck) {
-            final FileSetCheck fsc = (FileSetCheck) child;
-            fsc.init();
-            addFileSetCheck(fsc);
-        }
-        else if (child instanceof Filter) {
-            final Filter filter = (Filter) child;
-            addFilter(filter);
-        }
-        else if (child instanceof AuditListener) {
-            final AuditListener listener = (AuditListener) child;
-            addListener(listener);
-        }
-        else {
-            throw new CheckstyleException(name
-                    + " is not allowed as a child in Checker");
-        }
-    }
-
-    /**
-     * Adds a FileSetCheck to the list of FileSetChecks
-     * that is executed in process().
-     * @param fileSetCheck the additional FileSetCheck
-     */
-    public void addFileSetCheck(FileSetCheck fileSetCheck) {
-        fileSetCheck.setMessageDispatcher(this);
-        fileSetChecks.add(fileSetCheck);
-    }
-
-    /**
-     * Adds a filter to the end of the audit event filter chain.
-     * @param filter the additional filter
-     */
-    public void addFilter(Filter filter) {
-        filters.addFilter(filter);
-    }
-
     /**
      * Removes filter.
      * @param filter filter to remove.
@@ -239,14 +155,6 @@ public void destroy() {
         }
     }
 
-    /**
-     * Add the listener that will be used to receive events from the audit.
-     * @param listener the nosy thing
-     */
-    public final void addListener(AuditListener listener) {
-        listeners.add(listener);
-    }
-
     /**
      * Removes a given listener.
      * @param listener a listener to remove
@@ -255,6 +163,14 @@ public void removeListener(AuditListener listener) {
         listeners.remove(listener);
     }
 
+    /**
+     * Sets base directory.
+     * @param basedir the base directory to strip off in file names
+     */
+    public void setBasedir(String basedir) {
+        this.basedir = basedir;
+    }
+
     /**
      * Processes a set of files with all FileSetChecks.
      * Once this is done, it is highly recommended to call for
@@ -289,6 +205,22 @@ public int process(List<File> files) throws CheckstyleException {
         return errorCount;
     }
 
+    /** Notify all listeners about the audit start. */
+    private void fireAuditStarted() {
+        final AuditEvent event = new AuditEvent(this);
+        for (final AuditListener listener : listeners) {
+            listener.auditStarted(event);
+        }
+    }
+
+    /** Notify all listeners about the audit end. */
+    private void fireAuditFinished() {
+        final AuditEvent event = new AuditEvent(this);
+        for (final AuditListener listener : listeners) {
+            listener.auditFinished(event);
+        }
+    }
+
     /**
      * Processes a list of files with all FileSetChecks.
      * @param files a list of files to process.
@@ -315,7 +247,7 @@ private void processFiles(List<File> files) throws CheckstyleException {
             catch (Exception ex) {
                 // We need to catch all exceptions to put a reason failure (file name) in exception
                 throw new CheckstyleException("Exception was thrown while processing "
-                    + file.getPath(), ex);
+                        + file.getPath(), ex);
             }
             catch (Error error) {
                 // We need to catch all errors to put a reason failure (file name) in error
@@ -341,36 +273,12 @@ private void processFiles(List<File> files) throws CheckstyleException {
         catch (final IOException ioe) {
             LOG.debug("IOException occurred.", ioe);
             fileMessages.add(new LocalizedMessage(0,
-                Definitions.CHECKSTYLE_BUNDLE, "general.exception",
-                new String[] {ioe.getMessage()}, null, getClass(), null));
+                    Definitions.CHECKSTYLE_BUNDLE, "general.exception",
+                    new String[] {ioe.getMessage()}, null, getClass(), null));
         }
         return fileMessages;
     }
 
-    /**
-     * Sets base directory.
-     * @param basedir the base directory to strip off in file names
-     */
-    public void setBasedir(String basedir) {
-        this.basedir = basedir;
-    }
-
-    /** Notify all listeners about the audit start. */
-    private void fireAuditStarted() {
-        final AuditEvent event = new AuditEvent(this);
-        for (final AuditListener listener : listeners) {
-            listener.auditStarted(event);
-        }
-    }
-
-    /** Notify all listeners about the audit end. */
-    private void fireAuditFinished() {
-        final AuditEvent event = new AuditEvent(this);
-        for (final AuditListener listener : listeners) {
-            listener.auditFinished(event);
-        }
-    }
-
     /**
      * Notify all listeners about the beginning of a file audit.
      *
@@ -386,6 +294,25 @@ public void fireFileStarted(String fileName) {
         }
     }
 
+    /**
+     * Notify all listeners about the errors in a file.
+     *
+     * @param fileName the audited file
+     * @param errors the audit errors from the file
+     */
+    @Override
+    public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors) {
+        final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
+        for (final LocalizedMessage element : errors) {
+            final AuditEvent event = new AuditEvent(this, stripped, element);
+            if (filters.accept(event)) {
+                for (final AuditListener listener : listeners) {
+                    listener.addError(event);
+                }
+            }
+        }
+    }
+
     /**
      * Notify all listeners about the end of a file audit.
      *
@@ -401,23 +328,96 @@ public void fireFileFinished(String fileName) {
         }
     }
 
-    /**
-     * Notify all listeners about the errors in a file.
-     *
-     * @param fileName the audited file
-     * @param errors the audit errors from the file
-     */
     @Override
-    public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors) {
-        final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
-        for (final LocalizedMessage element : errors) {
-            final AuditEvent event = new AuditEvent(this, stripped, element);
-            if (filters.accept(event)) {
-                for (final AuditListener listener : listeners) {
-                    listener.addError(event);
-                }
+    public void finishLocalSetup() throws CheckstyleException {
+        final Locale locale = new Locale(localeLanguage, localeCountry);
+        LocalizedMessage.setLocale(locale);
+
+        if (moduleFactory == null) {
+
+            if (moduleClassLoader == null) {
+                throw new CheckstyleException(
+                        "if no custom moduleFactory is set, "
+                                + "moduleClassLoader must be specified");
             }
+
+            final Set<String> packageNames = PackageNamesLoader
+                    .getPackageNames(moduleClassLoader);
+            moduleFactory = new PackageObjectFactory(packageNames,
+                    moduleClassLoader);
         }
+
+        final DefaultContext context = new DefaultContext();
+        context.add("charset", charset);
+        context.add("classLoader", classLoader);
+        context.add("moduleFactory", moduleFactory);
+        context.add("severity", severityLevel.getName());
+        context.add("basedir", basedir);
+        childContext = context;
+    }
+
+    @Override
+    protected void setupChild(Configuration childConf)
+            throws CheckstyleException {
+        final String name = childConf.getName();
+        final Object child;
+
+        try {
+            child = moduleFactory.createModule(name);
+
+            if (child instanceof AutomaticBean) {
+                final AutomaticBean bean = (AutomaticBean) child;
+                bean.contextualize(childContext);
+                bean.configure(childConf);
+            }
+        }
+        catch (final CheckstyleException ex) {
+            throw new CheckstyleException("cannot initialize module " + name
+                    + " - " + ex.getMessage(), ex);
+        }
+        if (child instanceof FileSetCheck) {
+            final FileSetCheck fsc = (FileSetCheck) child;
+            fsc.init();
+            addFileSetCheck(fsc);
+        }
+        else if (child instanceof Filter) {
+            final Filter filter = (Filter) child;
+            addFilter(filter);
+        }
+        else if (child instanceof AuditListener) {
+            final AuditListener listener = (AuditListener) child;
+            addListener(listener);
+        }
+        else {
+            throw new CheckstyleException(name
+                    + " is not allowed as a child in Checker");
+        }
+    }
+
+    /**
+     * Adds a FileSetCheck to the list of FileSetChecks
+     * that is executed in process().
+     * @param fileSetCheck the additional FileSetCheck
+     */
+    public void addFileSetCheck(FileSetCheck fileSetCheck) {
+        fileSetCheck.setMessageDispatcher(this);
+        fileSetChecks.add(fileSetCheck);
+    }
+
+    /**
+     * Adds a filter to the end of the audit event filter chain.
+     * @param filter the additional filter
+     */
+    public void addFilter(Filter filter) {
+        filters.addFilter(filter);
+    }
+
+    /**
+     * Add the listener that will be used to receive events from the audit.
+     * @param listener the nosy thing
+     */
+    public final void addListener(AuditListener listener) {
+        listeners.add(listener);
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index ac2056ec78..158fe6b85a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -562,7 +562,7 @@ private static boolean isInLambda(DetailAST paramDef) {
     }
 
     /**
-     * Find the Class, Constructor, Enum or Method in which it is defined.
+     * Find the Class, Constructor, Enum, Method, or Field in which it is defined.
      * @param ast Variable for which we want to find the scope in which it is defined
      * @return ast The Class or Constructor or Method in which it is defined.
      */
@@ -571,7 +571,8 @@ private static DetailAST findFirstUpperNamedBlock(DetailAST ast) {
         while (astTraverse.getType() != TokenTypes.METHOD_DEF
                 && astTraverse.getType() != TokenTypes.CLASS_DEF
                 && astTraverse.getType() != TokenTypes.ENUM_DEF
-                && astTraverse.getType() != TokenTypes.CTOR_DEF) {
+                && astTraverse.getType() != TokenTypes.CTOR_DEF
+                && !ScopeUtils.isClassFieldDef(astTraverse)) {
             astTraverse = astTraverse.getParent();
         }
         return astTraverse;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
index 5f31d8d982..b9b47c6ff8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -383,9 +383,6 @@ public void setPublicMemberPattern(String pattern) {
      */
     public void setAllowPublicImmutableFields(boolean allow) {
         allowPublicImmutableFields = allow;
-        if (!allow) {
-            allowPublicFinalFields = false;
-        }
     }
 
     /**
@@ -394,9 +391,6 @@ public void setAllowPublicImmutableFields(boolean allow) {
      */
     public void setAllowPublicFinalFields(boolean allow) {
         allowPublicFinalFields = allow;
-        if (allow) {
-            allowPublicImmutableFields = true;
-        }
     }
 
     /**
@@ -595,9 +589,8 @@ private boolean isIgnoredPublicMember(String variableName, String variableScope)
      * @return true if allowed
      */
     private boolean isAllowedPublicField(DetailAST variableDef) {
-        return (allowPublicImmutableFields || allowPublicFinalFields)
-              && isImmutableField(variableDef)
-              && (allowPublicFinalFields || isDefinedInFinalClass(variableDef));
+        return allowPublicFinalFields && isImmutableField(variableDef)
+            || allowPublicImmutableFields && isImmutableFieldDefinedInFinalClass(variableDef);
     }
 
     /**
@@ -605,10 +598,11 @@ private boolean isAllowedPublicField(DetailAST variableDef) {
      * @param variableDef Variable definition node.
      * @return true if immutable field is defined in final class.
      */
-    private boolean isDefinedInFinalClass(DetailAST variableDef) {
+    private boolean isImmutableFieldDefinedInFinalClass(DetailAST variableDef) {
         final DetailAST classDef = variableDef.getParent().getParent();
         final Set<String> classModifiers = getModifiers(classDef);
-        return classModifiers.contains(FINAL_KEYWORD) || classDef.getType() == TokenTypes.ENUM_DEF;
+        return (classModifiers.contains(FINAL_KEYWORD) || classDef.getType() == TokenTypes.ENUM_DEF)
+                && isImmutableField(variableDef);
     }
 
     /**
@@ -627,7 +621,6 @@ private boolean isDefinedInFinalClass(DetailAST variableDef) {
             }
         }
         return modifiersSet;
-
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
index 357016eeb9..90ad4fd855 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java
@@ -149,7 +149,7 @@ else if (isInEmptyCodeBlock(prevStmt, nextStmt)) {
                 handleSingleLineCommentInEmptyCodeBlock(singleLineComment, nextStmt);
             }
             else if (isSingleLineCommentAtTheEndOfTheCodeBlock(nextStmt)) {
-                handleSIngleLineCommentAtTheEndOfTheCodeBlock(prevStmt, singleLineComment,
+                handleSingleLineCommentAtTheEndOfTheCodeBlock(prevStmt, singleLineComment,
                     nextStmt);
             }
             else if (nextStmt != null
@@ -200,7 +200,7 @@ private static boolean isDistributedPreviousStatement(DetailAST singleLineCommen
      */
     private static boolean isDistributedMethodChainOrConcatenationStatement(
         DetailAST comment, DetailAST commentPreviousSibling) {
-        boolean destributed = false;
+        boolean isDistributed = false;
         if (commentPreviousSibling != null
                 && commentPreviousSibling.getType() == TokenTypes.SEMI
                 && comment.getLineNo() - commentPreviousSibling.getLineNo() == 1) {
@@ -208,12 +208,18 @@ private static boolean isDistributedMethodChainOrConcatenationStatement(
             while (currentToken.getFirstChild() != null) {
                 currentToken = currentToken.getFirstChild();
             }
-            if (currentToken.getType() != TokenTypes.COMMENT_CONTENT
-                    && commentPreviousSibling.getLineNo() != currentToken.getLineNo()) {
-                destributed = true;
+            if (currentToken.getType() == TokenTypes.COMMENT_CONTENT) {
+                currentToken = currentToken.getParent();
+                while (currentToken.getType() == TokenTypes.SINGLE_LINE_COMMENT
+                        || currentToken.getType() == TokenTypes.BLOCK_COMMENT_BEGIN) {
+                    currentToken = currentToken.getNextSibling();
+                }
+            }
+            if (commentPreviousSibling.getLineNo() != currentToken.getLineNo()) {
+                isDistributed = true;
             }
         }
-        return destributed;
+        return isDistributed;
     }
 
     /**
@@ -224,16 +230,16 @@ private static boolean isDistributedMethodChainOrConcatenationStatement(
      *         statement.
      */
     private static boolean isDistributedReturnStatement(DetailAST commentPreviousSibling) {
-        boolean destributed = false;
+        boolean isDistributed = false;
         if (commentPreviousSibling != null
                 && commentPreviousSibling.getType() == TokenTypes.LITERAL_RETURN) {
             final DetailAST firstChild = commentPreviousSibling.getFirstChild();
             final DetailAST nextSibling = firstChild.getNextSibling();
             if (nextSibling != null) {
-                destributed = true;
+                isDistributed = true;
             }
         }
-        return destributed;
+        return isDistributed;
     }
 
     /**
@@ -244,16 +250,16 @@ private static boolean isDistributedReturnStatement(DetailAST commentPreviousSib
      *         statement.
      */
     private static boolean isDistributedThrowStatement(DetailAST commentPreviousSibling) {
-        boolean destributed = false;
+        boolean isDistributed = false;
         if (commentPreviousSibling != null
                 && commentPreviousSibling.getType() == TokenTypes.LITERAL_THROW) {
             final DetailAST firstChild = commentPreviousSibling.getFirstChild();
             final DetailAST nextSibling = firstChild.getNextSibling();
             if (nextSibling.getLineNo() != commentPreviousSibling.getLineNo()) {
-                destributed = true;
+                isDistributed = true;
             }
         }
-        return destributed;
+        return isDistributed;
     }
 
     /**
@@ -440,7 +446,7 @@ private void handleFallThroughtSingleLineComment(DetailAST prevStmt, DetailAST c
      * @param comment single line statement.
      * @param nextStmt next statement.
      */
-    private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,
+    private void handleSingleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,
                                                                DetailAST comment,
                                                                DetailAST nextStmt) {
         if (prevStmt != null) {
@@ -454,8 +460,9 @@ private void handleSIngleLineCommentAtTheEndOfTheCodeBlock(DetailAST prevStmt,
                 }
             }
             else if (!areSameLevelIndented(comment, prevStmt, prevStmt)) {
-                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmt.getLineNo(),
-                    comment.getColumnNo(), prevStmt.getColumnNo());
+                final int prevStmtLineNo = prevStmt.getLineNo();
+                log(comment.getLineNo(), MSG_KEY_SINGLE, prevStmtLineNo,
+                    comment.getColumnNo(), getLineStart(prevStmtLineNo));
             }
         }
 
@@ -552,7 +559,8 @@ else if (root.getType() == TokenTypes.PLUS) {
             tokenWhichBeginsTheLine = root;
         }
         if (tokenWhichBeginsTheLine != null
-                && isOnPreviousLine(comment, tokenWhichBeginsTheLine)) {
+                && isOnPreviousLine(comment, tokenWhichBeginsTheLine)
+            ) {
             previousStatement = tokenWhichBeginsTheLine;
         }
         return previousStatement;
@@ -615,8 +623,8 @@ private static boolean isOnPreviousLine(DetailAST currentStatement,
     /**
      * Logs comment which can have the same indentation level as next or previous statement.
      * @param comment comment.
-     * @param nextStmt previous statement.
-     * @param prevStmt next statement.
+     * @param nextStmt next statement.
+     * @param prevStmt previous statement.
      */
     private void logMultilineIndentation(DetailAST prevStmt, DetailAST comment,
                                          DetailAST nextStmt) {
@@ -723,19 +731,33 @@ private static DetailAST getPrevCaseToken(DetailAST parentStatement) {
      * @param nextStmt next code statement.
      * @return true if comment and next code statement are indented at the same level.
      */
-    private static boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,
+    private boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,
                                                 DetailAST nextStmt) {
         final boolean result;
         if (prevStmt == null) {
-            result = comment.getColumnNo() == nextStmt.getColumnNo();
+            result = comment.getColumnNo() == getLineStart(nextStmt.getLineNo());
         }
         else {
-            result = comment.getColumnNo() == nextStmt.getColumnNo()
-                || comment.getColumnNo() == prevStmt.getColumnNo();
+            result = comment.getColumnNo() == getLineStart(nextStmt.getLineNo())
+                    || comment.getColumnNo() == getLineStart(prevStmt.getLineNo());
         }
         return result;
     }
 
+    /**
+     * Get a column number where a code starts.
+     * @param lineNo the line number to get column number in.
+     * @return the column number where a code starts.
+     */
+    private int getLineStart(int lineNo) {
+        final char[] line = getLines()[lineNo - 1].toCharArray();
+        int lineStart = 0;
+        while (Character.isWhitespace(line[lineStart])) {
+            lineStart++;
+        }
+        return lineStart;
+    }
+
     /**
      * Checks if current single line comment is trailing comment, e.g.:
      * <p>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/DoWhileHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/DoWhileHandler.java
index b26088d365..b2523cf414 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/DoWhileHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/DoWhileHandler.java
@@ -42,17 +42,28 @@ public DoWhileHandler(IndentationCheck indentCheck,
     }
 
     /**
-     * Check the indentation level of the conditional expression.
+     * Check the indentation level of the while and conditional expression.
      */
-    private void checkCondExpr() {
-        final DetailAST condAst = getMainAst()
-            .findFirstToken(TokenTypes.LPAREN).getNextSibling();
+    private void checkWhileExpr() {
+        // check while statement alone
+
+        final DetailAST whileAst = getMainAst().findFirstToken(TokenTypes.DO_WHILE);
+
+        if (isOnStartOfLine(whileAst)
+                && !getIndent().isAcceptable(expandedTabsColumnNo(whileAst))) {
+            logError(whileAst, "while", expandedTabsColumnNo(whileAst));
+        }
+
+        // check condition alone
+
+        final DetailAST condAst = getMainAst().findFirstToken(TokenTypes.LPAREN).getNextSibling();
+
         checkExpressionSubtree(condAst, getIndent(), false, false);
     }
 
     @Override
     public void checkIndentation() {
         super.checkIndentation();
-        checkCondExpr();
+        checkWhileExpr();
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
index c9c58c9f51..e9c3958f71 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java
@@ -84,52 +84,21 @@ public void checkIndentation(DetailAST firstNode, DetailAST lastNode, int indent
 
         // First node should be removed because it was already checked before.
         firstNodesOnLines.remove(firstNodesOnLines.firstKey());
-        final int firstNodeIndent = getFirstNodeIndent(firstLineNode);
+        final int firstNodeIndent = getLineStart(firstLineNode);
         final int currentIndent = firstNodeIndent + indentLevel;
 
         for (DetailAST node : firstNodesOnLines.values()) {
             final int currentType = node.getType();
 
-            if (currentType == TokenTypes.RCURLY
-                    || currentType == TokenTypes.RPAREN
-                    || currentType == TokenTypes.ARRAY_INIT) {
+            if (currentType == TokenTypes.RPAREN) {
                 logWarningMessage(node, firstNodeIndent);
             }
-            else {
+            else if (currentType != TokenTypes.RCURLY && currentType != TokenTypes.ARRAY_INIT) {
                 logWarningMessage(node, currentIndent);
             }
         }
     }
 
-    /**
-     * Calculates indentation of first node.
-     *
-     * @param node
-     *            first node.
-     * @return indentation of first node.
-     */
-    private int getFirstNodeIndent(DetailAST node) {
-        final int result;
-
-        if (node.getType() == TokenTypes.LITERAL_IF
-                && node.getParent().getType() == TokenTypes.LITERAL_ELSE) {
-            final DetailAST lcurly = node.getParent().getPreviousSibling();
-            final DetailAST rcurly = lcurly.getLastChild();
-
-            if (lcurly.getType() == TokenTypes.SLIST
-                    && rcurly.getLineNo() == node.getLineNo()) {
-                result = expandedTabsColumnNo(rcurly);
-            }
-            else {
-                result = expandedTabsColumnNo(node.getParent());
-            }
-        }
-        else {
-            result = expandedTabsColumnNo(node);
-        }
-        return result;
-    }
-
     /**
      * Finds first nodes on line and puts them into Map.
      *
@@ -192,7 +161,7 @@ private static DetailAST getNextCurNode(DetailAST curNode) {
      */
     private void checkAnnotationIndentation(DetailAST atNode,
             NavigableMap<Integer, DetailAST> firstNodesOnLines, int indentLevel) {
-        final int firstNodeIndent = expandedTabsColumnNo(atNode);
+        final int firstNodeIndent = getLineStart(atNode);
         final int currentIndent = firstNodeIndent + indentLevel;
         final Collection<DetailAST> values = firstNodesOnLines.values();
         final DetailAST lastAnnotationNode = getLastAnnotationNode(atNode);
@@ -239,6 +208,33 @@ private int expandedTabsColumnNo(DetailAST ast) {
             indentCheck.getIndentationTabWidth());
     }
 
+    /**
+     * Get the start of the line for the given expression.
+     *
+     * @param ast   the expression to find the start of the line for
+     *
+     * @return the start of the line for the given expression
+     */
+    private int getLineStart(DetailAST ast) {
+        final String line = indentCheck.getLine(ast.getLineNo() - 1);
+        return getLineStart(line);
+    }
+
+    /**
+     * Get the start of the specified line.
+     *
+     * @param line the specified line number
+     *
+     * @return the start of the specified line
+     */
+    private int getLineStart(String line) {
+        int index = 0;
+        while (Character.isWhitespace(line.charAt(index))) {
+            index++;
+        }
+        return CommonUtils.lengthExpandedTabs(line, index, indentCheck.getIndentationTabWidth());
+    }
+
     /**
      * Finds and returns last annotation node.
      * @param atNode first at-clause node.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
index e0c00e54ea..632f501514 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java
@@ -268,13 +268,13 @@ public static boolean isLocalVariableDef(DetailAST node) {
 
     /**
      * Determines whether a node is a class field definition.
-     * I.e. if it is not declared in a code block, a for initializer,
+     * I.e. if a variable is not declared in a code block, a for initializer,
      * or a catch parameter.
      * @param node the node to check.
      * @return whether a node is a class field definition.
      */
     public static boolean isClassFieldDef(DetailAST node) {
-        return !isLocalVariableDef(node);
+        return node.getType() == TokenTypes.VARIABLE_DEF && !isLocalVariableDef(node);
     }
 
     /**
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4 b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
index c5d332f8ca..411a6993d0 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
@@ -917,4 +917,10 @@ javadocInlineTag:
 
 htmlComment: HTML_COMMENT_START (text | NEWLINE | LEADING_ASTERISK)* HTML_COMMENT_END;
 
-text : (CHAR | WS)+ ;
+text : ((CHAR | WS)
+ {
+  _la = _input.LA(1);
+  if ((_la != WS) && (_la != CHAR)) return _localctx;
+  else if (_alt == 1) continue;
+ }
+       )+;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
index 3b8205d81b..634bf69de3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java
@@ -160,7 +160,9 @@ public void testLambda()
         final DefaultConfiguration checkConfig =
             createCheckConfig(FinalLocalVariableCheck.class);
         checkConfig.addAttribute("tokens", "PARAMETER_DEF,VARIABLE_DEF");
-        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        final String[] expected = {
+            "32:16: " + "Variable 'result' should be declared final.",
+        };
         verify(checkConfig, getNonCompilablePath("InputFinalLocalVariableNameLambda.java"),
             expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
index 6e706c676f..5d080ada2b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java
@@ -117,6 +117,25 @@ public void testStrictJavadoc() throws Exception {
     public void testAllowPublicFinalFieldsInImmutableClass() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(VisibilityModifierCheck.class);
+        checkConfig.addAttribute("allowPublicImmutableFields", "true");
+        checkConfig.addAttribute("allowPublicFinalFields", "false");
+        final String[] expected = {
+            "12:39: " + getCheckMessage(MSG_KEY, "includes"),
+            "13:39: " + getCheckMessage(MSG_KEY, "excludes"),
+            "16:23: " + getCheckMessage(MSG_KEY, "list"),
+            "34:20: " + getCheckMessage(MSG_KEY, "value"),
+            "36:24: " + getCheckMessage(MSG_KEY, "bValue"),
+            "37:31: " + getCheckMessage(MSG_KEY, "longValue"),
+        };
+        verify(checkConfig, getPath("InputImmutable.java"), expected);
+    }
+
+    @Test
+    public void testAllowPublicFinalFieldsInNonFinalClass() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(VisibilityModifierCheck.class);
+        checkConfig.addAttribute("allowPublicImmutableFields", "false");
+        checkConfig.addAttribute("allowPublicFinalFields", "true");
         final String[] expected = {
             "12:39: " + getCheckMessage(MSG_KEY, "includes"),
             "13:39: " + getCheckMessage(MSG_KEY, "excludes"),
@@ -134,6 +153,8 @@ public void testUserSpecifiedImmutableClassesList() throws Exception {
                 createCheckConfig(VisibilityModifierCheck.class);
         checkConfig.addAttribute("immutableClassCanonicalNames", "java.util.List,"
                 + "com.google.common.collect.ImmutableSet");
+        checkConfig.addAttribute("allowPublicImmutableFields", "true");
+        checkConfig.addAttribute("allowPublicFinalFields", "false");
         final String[] expected = {
             "14:35: " + getCheckMessage(MSG_KEY, "notes"),
             "15:29: " + getCheckMessage(MSG_KEY, "value"),
@@ -321,8 +342,6 @@ public void testPublicFinalFieldsAllowed() throws Exception {
         checkConfig.addAttribute("allowPublicImmutableFields", "false");
         checkConfig.addAttribute("allowPublicFinalFields", "true");
         final String[] expected = {
-            //"10:22: " + getCheckMessage(MSG_KEY, "someIntValue"),
-            //"11:39: " + getCheckMessage(MSG_KEY, "includes"),
             "12:35: " + getCheckMessage(MSG_KEY, "notes"),
             "13:29: " + getCheckMessage(MSG_KEY, "value"),
             "14:23: " + getCheckMessage(MSG_KEY, "list"),
@@ -330,6 +349,18 @@ public void testPublicFinalFieldsAllowed() throws Exception {
         verify(checkConfig, getPath("InputPublicImmutable.java"), expected);
     }
 
+    @Test
+    public void testPublicFinalFieldInEnum() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(VisibilityModifierCheck.class);
+        checkConfig.addAttribute("allowPublicImmutableFields", "true");
+        checkConfig.addAttribute("allowPublicFinalFields", "false");
+        final String[] expected = {
+            "15:23: " + getCheckMessage(MSG_KEY, "hole"),
+        };
+        verify(checkConfig, getPath("InputEnumIsSealed.java"), expected);
+    }
+
     @Test(expected = IllegalArgumentException.class)
     public void testWrongTokenType() {
         final VisibilityModifierCheck obj = new VisibilityModifierCheck();
@@ -342,6 +373,7 @@ public void testWrongTokenType() {
     public void testNullModifiers() throws Exception {
         final DefaultConfiguration checkConfig =
             createCheckConfig(VisibilityModifierCheck.class);
+        checkConfig.addAttribute("allowPublicFinalFields", "false");
         final String[] expected = {
             "11:50: " + getCheckMessage(MSG_KEY, "i"),
         };
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
index 578c8f692d..449c2092a4 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheckTest.java
@@ -80,6 +80,9 @@ public void testCommentIsAtTheEndOfBlock() throws Exception {
             "322: " + getCheckMessage(MSG_KEY_SINGLE, 323, 0, 4),
             "336: " + getCheckMessage(MSG_KEY_SINGLE, 337, 0, 4),
             "355: " + getCheckMessage(MSG_KEY_SINGLE, 352, 9, 8),
+            "380: " + getCheckMessage(MSG_KEY_BLOCK, 381, 12, 8),
+            "393: " + getCheckMessage(MSG_KEY_SINGLE, 392, 12, 8),
+            "400: " + getCheckMessage(MSG_KEY_SINGLE, 401, 8, 10),
         };
         final String testInputFile = "InputCommentsIndentationCommentIsAtTheEndOfBlock.java";
         verify(checkConfig, getPath(testInputFile), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
index dccc2dae07..1a70e8a75f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -26,6 +26,7 @@
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -145,20 +146,13 @@ private static int getLineStart(String line, final int tabWidth) {
     private void verifyWarns(Configuration config, String filePath,
                     String... expected)
                     throws Exception {
-        verifyWarns(config, filePath, expected, 0);
-    }
-
-    private void verifyWarns(Configuration config, String filePath,
-                    String[] expected, int warnCountCorrection)
-                    throws Exception {
         final int tabWidth = Integer.parseInt(config.getAttribute("tabWidth"));
         final IndentComment[] linesWithWarn =
                         getLinesWithWarnAndCheckComments(filePath, tabWidth);
+        verify(config, filePath, expected, linesWithWarn);
         assertEquals("Expected warning count in UT does not match warn"
-                        + " comment count in input file", linesWithWarn.length
-                        + warnCountCorrection,
+                        + " comment count in input file", linesWithWarn.length,
                         expected.length);
-        verify(config, filePath, expected, linesWithWarn);
     }
 
     private void verify(Configuration config, String filePath, String[] expected,
@@ -205,6 +199,21 @@ public void testThrowsIndentProperty() {
         assertEquals(1, indentationCheck.getThrowsIndent());
     }
 
+    @Test
+    public void testStrictCondition() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+        checkConfig.addAttribute("arrayInitIndent", "4");
+        checkConfig.addAttribute("basicOffset", "4");
+        checkConfig.addAttribute("braceAdjustment", "4");
+        checkConfig.addAttribute("caseIndent", "4");
+        checkConfig.addAttribute("forceStrictCondition", "true");
+        checkConfig.addAttribute("lineWrappingIndentation", "8");
+        checkConfig.addAttribute("tabWidth", "4");
+        checkConfig.addAttribute("throwsIndent", "8");
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verifyWarns(checkConfig, getPath("InputStrictCondition.java"), expected);
+    }
+
     @Test
     public void forbidCStyle() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
@@ -492,7 +501,7 @@ public void testInvalidLabelWithWhileLoop() throws Exception {
             "19: " + getCheckMessage(MSG_CHILD_ERROR_MULTI, "label", 9, "8, 12"),
         };
         verifyWarns(checkConfig, getPath("InputInvalidLabelWithWhileLoopIndent.java"),
-            expected, -1);
+            expected);
     }
 
     @Test
@@ -618,7 +627,7 @@ public void testInvalidMethodWithChecker()
             "180: " + getCheckMessage(MSG_ERROR, "method9", 4, 8),
             "190: " + getCheckMessage(MSG_CHILD_ERROR, "method def", 12, 8),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -661,7 +670,7 @@ public void testInvalidSwitchWithChecker()
             "95: " + getCheckMessage(MSG_ERROR, "switch lcurly", 10, 8),
             "96: " + getCheckMessage(MSG_ERROR, "switch rcurly", 6, 8),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -824,7 +833,7 @@ public void testInvalidTryWithChecker()
             "77: " + getCheckMessage(MSG_ERROR, "catch rcurly", 10, 8),
             "80: " + getCheckMessage(MSG_CHILD_ERROR, "catch", 10, 12),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -870,16 +879,16 @@ public void testInvalidClassDefWithChecker()
             "127: " + getCheckMessage(MSG_ERROR, "member def type", 10, 12),
             "132: " + getCheckMessage(MSG_CHILD_ERROR, "method def", 10, 8),
             "133: " + getCheckMessage(MSG_ERROR_MULTI, "object def lcurly", 8, "10, 14"),
-            "137: " + getCheckMessage(MSG_ERROR, "}", 8, 10),
+            "137: " + getCheckMessage(MSG_ERROR_MULTI, "object def rcurly", 8, "10, 14"),
             "141: " + getCheckMessage(MSG_ERROR_MULTI, "object def lcurly", 6, "8, 12"),
             "142: " + getCheckMessage(MSG_ERROR, "method def modifier", 12, 10),
             "144: " + getCheckMessage(MSG_ERROR, "method def rcurly", 12, 10),
-            "145: " + getCheckMessage(MSG_ERROR, "}", 6, 8),
+            "145: " + getCheckMessage(MSG_ERROR_MULTI, "object def rcurly", 6, "8, 12"),
             "150: " + getCheckMessage(MSG_ERROR, "method def modifier", 10, 12),
             "152: " + getCheckMessage(MSG_ERROR, "method def rcurly", 10, 12),
             "188: " + getCheckMessage(MSG_ERROR, "class", 0, 4),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -944,7 +953,7 @@ public void testInvalidBlockWithChecker()
             "147: " + getCheckMessage(MSG_ERROR, "block rcurly", 2, 4),
             "150: " + getCheckMessage(MSG_CHILD_ERROR, "block", 6, 8),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -1036,7 +1045,7 @@ public void testInvalidIfWithChecker()
             "251: " + getCheckMessage(MSG_ERROR, "if lparen", 6, 8),
             "253: " + getCheckMessage(MSG_ERROR, "if rparen", 6, 8),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -1147,7 +1156,7 @@ public void testInvalidForWithChecker()
             "77: " + getCheckMessage(MSG_ERROR, "for rcurly", 39, 8),
             "81: " + getCheckMessage(MSG_ERROR, "for rparen", 12, 8),
         };
-        verifyWarns(checkConfig, fileName, expected, 0);
+        verifyWarns(checkConfig, fileName, expected);
     }
 
     @Test
@@ -1186,6 +1195,42 @@ public void testValidDoWhileWithChecker()
         verifyWarns(checkConfig, fileName, expected);
     }
 
+    @Test
+    public void testInvalidDoWhileWithChecker()
+        throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+
+        checkConfig.addAttribute("arrayInitIndent", "4");
+        checkConfig.addAttribute("basicOffset", "4");
+        checkConfig.addAttribute("braceAdjustment", "0");
+        checkConfig.addAttribute("caseIndent", "4");
+        checkConfig.addAttribute("forceStrictCondition", "false");
+        checkConfig.addAttribute("lineWrappingIndentation", "4");
+        checkConfig.addAttribute("tabWidth", "4");
+        checkConfig.addAttribute("throwsIndent", "4");
+        final String fileName = getPath("InputInvalidDoWhileIndent.java");
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "8: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "9: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "10: " + getCheckMessage(MSG_ERROR, "do..while rcurly", 0, 8),
+            "11: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "12: " + getCheckMessage(MSG_ERROR, "do..while while", 0, 8),
+            "13: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "14: " + getCheckMessage(MSG_ERROR, "do..while lcurly", 0, 8),
+            "15: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "16: " + getCheckMessage(MSG_ERROR, "do..while while", 0, 8),
+            "17: " + getCheckMessage(MSG_ERROR, "do..while lparen", 0, 8),
+            "18: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "19: " + getCheckMessage(MSG_ERROR, "do..while lparen", 0, 8),
+            "20: " + getCheckMessage(MSG_ERROR, "do..while", 0, 8),
+            "21: " + getCheckMessage(MSG_ERROR, "do..while lparen", 0, 8),
+            "22: " + getCheckMessage(MSG_CHILD_ERROR, "do..while", 0, 8),
+            "23: " + getCheckMessage(MSG_ERROR, "do..while rparen", 0, 8),
+        };
+        verifyWarns(checkConfig, fileName, expected);
+    }
+
     @Test
     public void testValidBlockWithChecker()
         throws Exception {
@@ -1553,7 +1598,7 @@ public void testLambda1() throws Exception {
             "180: " + getCheckMessage(MSG_CHILD_ERROR, "block", 11, 10),
             "185: " + getCheckMessage(MSG_ERROR, "block rcurly", 7, 8),
         };
-        verifyWarns(checkConfig, getNonCompilablePath("InputLambda1.java"), expected, 0);
+        verifyWarns(checkConfig, getNonCompilablePath("InputLambda1.java"), expected);
     }
 
     @Test
@@ -1563,7 +1608,7 @@ public void testLambda2() throws Exception {
         checkConfig.addAttribute("basicOffset", "4");
         checkConfig.addAttribute("lineWrappingIndentation", "8");
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
-        verifyWarns(checkConfig, getNonCompilablePath("InputLambda2.java"), expected, 0);
+        verifyWarns(checkConfig, getNonCompilablePath("InputLambda2.java"), expected);
     }
 
     @Test
@@ -1584,6 +1629,16 @@ public void testSeparatedLineWithJustSpaces() throws Exception {
         verify(checkConfig, fileName, expected);
     }
 
+    @Test
+    public void testTwoStatementsPerLine() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(IndentationCheck.class);
+        checkConfig.addAttribute("tabWidth", "4");
+        checkConfig.addAttribute("basicOffset", "4");
+        final String fileName = getPath("InputTwoStatementsPerLine.java");
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verifyWarns(checkConfig, fileName, expected);
+    }
+
     private static final class IndentAudit implements AuditListener {
         private final IndentComment[] comments;
         private int position;
@@ -1616,6 +1671,12 @@ public void fileFinished(AuditEvent event) {
         public void addError(AuditEvent event) {
             final int line = event.getLine();
             final String message = event.getMessage();
+
+            if (position >= comments.length) {
+                fail("found a warning when none was expected for #" + position + " at line " + line
+                        + " with message " + message);
+            }
+
             final IndentComment comment = comments[position];
             position++;
 
@@ -1623,7 +1684,8 @@ public void addError(AuditEvent event) {
                     "input expected warning #" + position + " at line " + comment.getLineNumber()
                             + " to report '" + comment.getExpectedMessage() + "' but got instead: "
                             + line + ": " + message,
-                    message.endsWith(comment.getExpectedMessage()));
+                    line == comment.getLineNumber()
+                            && message.endsWith(comment.getExpectedMessage()));
         }
 
         @Override
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameLambda.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameLambda.java
index 8b7ec0e00e..e012bc1858 100755
--- a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameLambda.java
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/coding/InputFinalLocalVariableNameLambda.java
@@ -25,3 +25,12 @@ private void addTotalValueOfOrder(final AugmentedOrder order) {
                     (t, u) -> t.add(u.getAmount()));
  }
 }
+interface Operation {
+    public Object apply();
+
+    public static final Operation OPERATION = () -> {
+        Object result;
+        result = null;
+        return result;
+    };
+}
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputEnumIsSealed.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputEnumIsSealed.java
new file mode 100755
index 0000000000..444dd2bc96
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/design/InputEnumIsSealed.java
@@ -0,0 +1,16 @@
+
+package com.puppycrawl.tools.checkstyle.checks.design;
+
+/** Shows that sealed enum is good as final. */
+public enum InputEnumIsSealed {
+    SOME_VALUE;
+
+    static class Hole {
+    }
+
+    /** Normally disallowed if final enclosing class is required. */
+    public final int someField = Integer.MAX_VALUE;
+
+    /** Disallowed because mutable. */
+    public final Hole hole = null;
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationCommentIsAtTheEndOfBlock.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
index 49a5aa8f17..1e769770f9 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputCommentsIndentationCommentIsAtTheEndOfBlock.java
@@ -362,6 +362,46 @@ public String foo52() {
         // comment
     }
 
+    void foo53() {
+        // comment
+        new Object()
+            .toString();
+        // comment
+    }
+
+    void foo54() {
+        /* comment */
+        new Object()
+            .toString();
+        // comment
+    }
+
+    void foo55() {
+            /* violation */
+        new Object()
+            .toString();
+            // comment
+    }
+
+    void foo56() {
+        new Object().toString();
+        // comment
+    }
+
+    void foo57() {
+        new Object().toString();
+            // violation
+    }
+
+    void foo58() {
+        /*
+           comment
+           */
+        // comment
+          foo1();
+          // comment
+    }
+
     // We almost reached the end of the class here.
 }
 // The END of the class.
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidClassDefIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidClassDefIndent.java
index 1640704264..c5b5224a0a 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidClassDefIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidClassDefIndent.java
@@ -134,7 +134,7 @@ private void myMethod() { //indent:4 exp:4
             public void actionPerformed(ActionEvent e) { //indent:12 exp:12
 
             } //indent:12 exp:12
-        }); //indent:8 exp:10 warn
+        }); //indent:8 exp:10,14 warn
 
 
         new JButton().addActionListener(new ActionListener()  //indent:8 exp:8
@@ -142,7 +142,7 @@ public void actionPerformed(ActionEvent e) { //indent:12 exp:12
             public void actionPerformed(ActionEvent e) { //indent:12 exp:10 warn
 
             } //indent:12 exp:10 warn
-      }); //indent:6 exp:8 warn
+      }); //indent:6 exp:8,12 warn
 
 
         new JButton().addActionListener(new ActionListener()  //indent:8 exp:8
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidDoWhileIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidDoWhileIndent.java
new file mode 100755
index 0000000000..03a153bd0c
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidDoWhileIndent.java
@@ -0,0 +1,25 @@
+package com.puppycrawl.tools.checkstyle.checks.indentation; //indent:0 exp:0
+
+public class InputInvalidDoWhileIndent { //indent:0 exp:0
+    public void method1() { //indent:4 exp:4
+        boolean test = true; //indent:8 exp:8
+
+do System.getProperty("foo"); while (test); //indent:0 exp:8 warn
+do {} while (test); //indent:0 exp:8 warn
+do { //indent:0 exp:8 warn
+} while (test); //indent:0 exp:8 warn
+do {} //indent:0 exp:8 warn
+while (test); //indent:0 exp:8 warn
+do //indent:0 exp:8 warn
+{} while (test); //indent:0 exp:8 warn
+do {} //indent:0 exp:8 warn
+while //indent:0 exp:8 warn
+(test); //indent:0 exp:8 warn
+do {} while //indent:0 exp:8 warn
+(test); //indent:0 exp:8 warn
+do {} while //indent:0 exp:8 warn
+( //indent:0 exp:8 warn
+test //indent:0 exp:8 warn
+); //indent:0 exp:8 warn
+    } //indent:4 exp:4
+} //indent:0 exp:0
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelWithWhileLoopIndent.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelWithWhileLoopIndent.java
index 80b291063d..1d63432d31 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelWithWhileLoopIndent.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelWithWhileLoopIndent.java
@@ -17,7 +17,7 @@
     public InputInvalidLabelWithWhileLoopIndent() { //indent:4 exp:4
          LOOP://indent:9 exp:4,8 warn
          while (true) { //indent:9 exp:8,12 warn
-            break LOOP; //indent:12 exp:13 warn
+            break LOOP; //indent:12 exp:12
         } //indent:8 exp:8
     } //indent:4 exp:4
 } //indent:0 exp:0
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputStrictCondition.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputStrictCondition.java
new file mode 100755
index 0000000000..ad2a00bd0e
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputStrictCondition.java
@@ -0,0 +1,14 @@
+package com.puppycrawl.tools.checkstyle.checks.indentation; //indent:0 exp:0
+
+import java.lang.Thread; //indent:0 exp:0
+
+public class InputStrictCondition { //indent:0 exp:0
+    void method(Thread foo) { //indent:4 exp:4
+        method( //indent:8 exp:8
+                new Thread() { //indent:16 exp:16
+                        public void run() { //indent:24 exp:24
+                            } //indent:28 exp:28
+                    } //indent:20 exp:20
+        ); //indent:8 exp:8
+        } //indent:8 exp:8
+    } //indent:4 exp:4
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputTwoStatementsPerLine.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputTwoStatementsPerLine.java
new file mode 100755
index 0000000000..50f659d824
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputTwoStatementsPerLine.java
@@ -0,0 +1,13 @@
+package com.puppycrawl.tools.checkstyle.checks.indentation;//indent:0 exp:0
+
+public class InputTwoStatementsPerLine {//indent:0 exp:0
+    int var6 = 5; int var7 = 6, //indent:4 exp:4
+        var8 = 5; //indent:8 exp:8
+
+    public void method() { //indent:4 exp:4
+        long_lined_label: if (true //indent:8 exp:8
+            && true) {} //indent:12 exp:12
+    } //indent:4 exp:4
+    /* package-private */ static final void //indent:4 exp:4
+        method2() {} //indent:8 exp:8
+}//indent:0 exp:0
diff --git a/src/xdocs/config_design.xml b/src/xdocs/config_design.xml
index a300f28d91..dbb5abb304 100755
--- a/src/xdocs/config_design.xml
+++ b/src/xdocs/config_design.xml
@@ -912,34 +912,15 @@ public class Foo{
         </source>
         <p>
           To configure the Check so that it allows public immutable fields
-          (as it does by default):
+          (mostly for immutable classes):
         </p>
         <source>
 &lt;module name=&quot;VisibilityModifier&quot;/&gt;
-        </source>
-        <p>
-          To configure the Check so that it allows public immutable fields
-          only for final classes (which are presumptively immutable):
-        </p>
-        <source>
-&lt;module name=&quot;VisibilityModifier&quot;&gt;
-    &lt;property name=&quot;allowPublicFinalFields&quot; value=&quot;false&quot;/&gt;
-&lt;/module&gt;
-        </source>
-        <p>
-          To configure the Check so that it disallows public fields
-          even if they are immutable:
-        </p>
-        <source>
-&lt;module name=&quot;VisibilityModifier&quot;&gt;
-    &lt;property name=&quot;allowPublicImmutableFields&quot; value=&quot;false&quot;/&gt;
-&lt;/module&gt;
         </source>
         <p>
           Example of allowed public immutable fields:
         </p>
         <source>
-// Must be final class if allowPublicFinalFields is false
 public class ImmutableClass
 {
     public final ImmutableSet&lt;String&gt; includes; // No warning
diff --git a/src/xdocs/config_regexp.xml b/src/xdocs/config_regexp.xml
index bf5bcb84d3..522f092a1c 100755
--- a/src/xdocs/config_regexp.xml
+++ b/src/xdocs/config_regexp.xml
@@ -697,7 +697,7 @@
         </p>
         <source>
 &lt;module name=&quot;RegexpOnFilename&quot;&gt;
-  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\\.gif$&quot;/&gt;
+  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\.gif$&quot;/&gt;
 &lt;/module&gt;
         </source>
         <p>
@@ -714,7 +714,7 @@
         </p>
         <source>
 &lt;module name=&quot;RegexpOnFilename&quot;&gt;
-  &lt;property name=&quot;folderPattern&quot; value=&quot;[\\/]src[\\/]\\w+[\\/]resources[\\/]&quot;/&gt;
+  &lt;property name=&quot;folderPattern&quot; value=&quot;[\\/]src[\\/]\w+[\\/]resources[\\/]&quot;/&gt;
   &lt;property name=&quot;match&quot; value=&quot;false&quot;/&gt;
   &lt;property name=&quot;fileExtensions&quot; value=&quot;properties, xml&quot;/&gt;
 &lt;/module&gt;
@@ -724,7 +724,7 @@
         </p>
         <source>
 &lt;module name=&quot;RegexpOnFilename&quot;&gt;
-  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\\.(java|xml)$&quot;/&gt;
+  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\.(java|xml)$&quot;/&gt;
   &lt;property name=&quot;match&quot; value=&quot;false&quot;/&gt;
 &lt;/module&gt;
         </source>
@@ -737,7 +737,7 @@
         <source>
 &lt;module name=&quot;RegexpOnFilename&quot;&gt;
   &lt;property name=&quot;folderPattern&quot; value=&quot;[\\/]src[\\/]&quot;/&gt;
-  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\\.(java|xml)$&quot;/&gt;
+  &lt;property name=&quot;fileNamePattern&quot; value=&quot;\.(java|xml)$&quot;/&gt;
   &lt;property name=&quot;match&quot; value=&quot;false&quot;/&gt;
 &lt;/module&gt;
         </source>
diff --git a/src/xdocs/config_whitespace.xml b/src/xdocs/config_whitespace.xml
index d4d03d4ae4..b7fb5e0ad4 100755
--- a/src/xdocs/config_whitespace.xml
+++ b/src/xdocs/config_whitespace.xml
@@ -1199,7 +1199,8 @@ import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#COLON">COLON</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#EQUAL">EQUAL</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#NOT_EQUAL">NOT_EQUAL</a>,
-              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#DIV, PLUS">DIV, PLUS</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#DIV">DIV</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PLUS">PLUS</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#MINUS">MINUS</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STAR">STAR</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#MOD">MOD</a>,
@@ -1236,7 +1237,8 @@ import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#COLON">COLON</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#EQUAL">EQUAL</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#NOT_EQUAL">NOT_EQUAL</a>,
-              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#DIV, PLUS">DIV, PLUS</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#DIV">DIV</a>,
+              <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PLUS">PLUS</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#MINUS">MINUS</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STAR">STAR</a>,
               <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#MOD">MOD</a>,
diff --git a/src/xdocs/releasenotes.xml b/src/xdocs/releasenotes.xml
index 05ea1908fb..c07a3e924e 100755
--- a/src/xdocs/releasenotes.xml
+++ b/src/xdocs/releasenotes.xml
@@ -15,6 +15,99 @@
 
   <body>
 
+    <section name="Release 6.18">
+      <p>New:</p>
+        <ul>
+          <li>
+            Make CLI option to print full parsing tree (java + comments + javadoc comments). Author: Baratali Izmailov <a href="https://github.com/checkstyle/checkstyle/issues/3040">#3040</a>
+          </li>
+          <li>
+            Add the ability to validate language codes by TranslationCheck. Author: Andrei Selkin <a href="https://github.com/checkstyle/checkstyle/issues/2969">#2969</a>
+          </li>
+          <li>
+            EmptyLineSeparator to check empty lines inside methods. Author: Vladislav Lisetskiy <a href="https://github.com/checkstyle/checkstyle/issues/2944">#2944</a>
+          </li>
+        </ul>
+      <p>Bug fixes:</p>
+        <ul>
+          <li>
+            NullPointerException in FinalLocalVariableCheck with Lambdas. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3144">#3144</a>
+          </li>
+          <li>
+            Serious performance problem in All Javadoc Check that are based on ANTLR parser. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/1064">#1064</a>
+          </li>
+          <li>
+            CommentsIndentation Check - False Positive at End-of-Method. Author: Vladislav Lisetskiy <a href="https://github.com/checkstyle/checkstyle/issues/2998">#2998</a>
+          </li>
+          <li>
+            Indentation: fix line wrap hanlding. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/2950">#2950</a>
+          </li>
+          <li>
+            Indentation module regression in 6.16 and 6.17.. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3103">#3103</a>
+          </li>
+          <li>
+            NPE in AnnotationLocationCheck.hasAnnotations. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3106">#3106</a>
+          </li>
+          <li>
+            Execution of checkstyle audit failed caused by inherited javadoc tag. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3065">#3065</a>
+          </li>
+          <li>
+            AvoidEscapedUnicodeCharacters: Tail comment check failed if there&#39;s tabs before tail comment.. Author: Vladislav Lisetskiy <a href="https://github.com/checkstyle/checkstyle/issues/3005">#3005</a>
+          </li>
+          <li>
+            FinalLocalVariable: false positive when variable is assigned multiple times. Author: Andrei Selkin <a href="https://github.com/checkstyle/checkstyle/issues/3006">#3006</a>
+          </li>
+          <li>
+            Support for LAMDA token in WhitespaceAround check. Author: Vladislav Lisetskiy <a href="https://github.com/checkstyle/checkstyle/issues/2924">#2924</a>
+          </li>
+        </ul>
+      <p>Notes:</p>
+        <ul>
+          <li>
+            maven-site-plugin:3.5 has problem to build our website. Author: Vladislav Lisetskiy, Roman Ivanov <a href="https://github.com/checkstyle/checkstyle/issues/2966">#2966</a>
+          </li>
+          <li>
+            RegexpOnFilename example from documentation does not work on checkstyle source. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3085">#3085</a>
+          </li>
+          <li>
+            Create web-page with instructions: how to create Javadoc Check. Author: Baratali Izmailov <a href="https://github.com/checkstyle/checkstyle/issues/410">#410</a>
+          </li>
+          <li>
+            IndentationCheckTest: &#39;exp&#39; in input files are out of sync with test. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3105">#3105</a>
+          </li>
+          <li>
+            Some redundant messages.. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/3000">#3000</a>
+          </li>
+          <li>
+            doc: added Codacy to the list of active tools. Author: JosÃ© Castro
+          </li>
+          <li>
+            Fix all issues for Java found by Codacy static analysis tool. Author: Andrei Selkin <a href="https://github.com/checkstyle/checkstyle/issues/2271">#2271</a>
+          </li>
+          <li>
+            Use Distelli CI for testing of Javadoc Checks. Author: Baratali Izmailov, Roman Ivanov <a href="https://github.com/checkstyle/checkstyle/issues/2825">#2825</a>
+          </li>
+          <li>
+            doc: DesignForExtension documentation is extended to warn user about possible misusage of this Check. Author: Roman Ivanov
+          </li>
+          <li>
+            Fund raising pages for checkstyle. Author: Roman Ivanov <a href="https://github.com/checkstyle/checkstyle/issues/3057">#3057</a>
+          </li>
+          <li>
+            Use DatatypeConverter#printHexBinary to convert byte array to hex String in PropertyCacheFile. Author: Andrei Selkin <a href="https://github.com/checkstyle/checkstyle/issues/3093">#3093</a>
+          </li>
+          <li>
+            SSLHandshakeException exception during linkcheck-maven-plugin . Author: Roman Ivanov <a href="https://github.com/checkstyle/checkstyle/issues/3080">#3080</a>
+          </li>
+          <li>
+            Speed up google_check validation test. Author: Vladislav Lisetskiy <a href="https://github.com/checkstyle/checkstyle/issues/3070">#3070</a>
+          </li>
+          <li>
+            Strive for 100% line coverage for java grammar. Author: rnveach <a href="https://github.com/checkstyle/checkstyle/issues/2973">#2973</a>
+          </li>
+        </ul>
+    </section>
+
     <section name="Release 6.17">
       <p>Breaking backward compatibility:</p>
         <ul>
diff --git a/src/xdocs/releasenotes_old.xml b/src/xdocs/releasenotes_old.xml
index e34b2c27fb..5bf0f1a71d 100755
--- a/src/xdocs/releasenotes_old.xml
+++ b/src/xdocs/releasenotes_old.xml
@@ -381,10 +381,7 @@
           <a href="dependencies.html">Project Dependencies</a> for details.
         </li>
         <li>
-          Made the method
-          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.html#hasText%28com.puppycrawl.tools.checkstyle.api.DetailAST%29">
-            EmptyBlockCheck.hasText(DetailAST)
-         </a>
+          Made the method EmptyBlockCheck.hasText(DetailAST) as
           <code>protected</code> so that it is accessible to subclasses.
           Requested by Steve McKay.
         </li>
diff --git a/src/xdocs/writingchecks.xml b/src/xdocs/writingchecks.xml
new file mode 100755
index 0000000000..58db275cf6
--- /dev/null
+++ b/src/xdocs/writingchecks.xml
@@ -0,0 +1,643 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<document xmlns="http://maven.apache.org/XDOC/2.0"
+  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
+
+  <head>
+    <title>Writing Checks</title>
+    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"/>
+    <script type="text/javascript" src="js/anchors.js"/>
+    <script type="text/javascript" src="js/google-analytics.js"/>
+    <link rel="icon" href="images/favicon.png" type="image/x-icon" />
+    <link rel="shortcut icon" href="images/favicon.ico" type="image/ico" />
+  </head>
+
+  <body>
+    <section name="Content">
+      <macro name="toc">
+        <param name="fromDepth" value="1"/>
+        <param name="toDepth" value="1"/>
+      </macro>
+    </section>
+
+    <section name="Overview">
+
+      <p>
+        OK, so you have finally decided to write your own Check.  Welcome
+        aboard, this is really a easy thing to do. Very basic Java knowledge is required
+        to write a Check, it is good practice for even for student.
+        There are actually two
+        kinds of Checks, so before you can start, you have to find out
+        which kind of Check you want to implement.
+      </p>
+
+      <p>
+        The functionality of Checkstyle is implemented in modules that can
+        be plugged into Checkstyle. Modules can be containers for other
+        modules, i.e. they form a tree structure. The toplevel modules
+        that are known directly to the Checkstyle kernel (which is also a
+        module and forms the root of the tree) implement the <a
+        href="apidocs/com/puppycrawl/tools/checkstyle/api/FileSetCheck.html">FileSetCheck</a>
+        interface. These are pretty simple to grasp: they take a set of
+        input files and fire error messages.
+      </p>
+
+      <p>
+        Checkstyle provides a few FileSetCheck implementations by default
+        and one of them happens to be the <a
+        href="apidocs/com/puppycrawl/tools/checkstyle/TreeWalker.html">TreeWalker</a>. A
+        TreeWalker supports submodules that are derived from the <a
+        href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html">AbstractCheck</a>
+        class. The TreeWalker operates by separately transforming each of
+        the Java input files into an abstract syntax tree and then handing
+        the result over to each of the Check submodules which in turn have
+        a look at a certain aspect of the tree.
+      </p>
+
+    </section>
+
+    <section name="Writing Checks">
+
+      <p>
+        Most of the functionality of Checkstyle is implemented as
+        Checks. If you know how to write your own Checks, you can extend
+        Checkstyle according to your needs without having to wait for the
+        Checkstyle development team. You are about to become a Checkstyle
+        Expert.
+      </p>
+
+      <p>
+        Suppose you have a convention that the number of methods in a
+        class should not exceed a certain limit, say 30. This rule makes
+        sense, a class should only do one thing and do it well. With a
+        zillion methods chances are that the class does more than one
+        thing. The only problem you have is that your convention is not
+        checked by Checkstyle, so you&#39;ll have to write your own Check
+        and plug it into the Checkstyle framework.
+      </p>
+
+      <p> This chapter is organized as a tour that takes you
+      through the process step by step and explains both the theoretical
+      foundations and the <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/package-summary.html">Checkstyle
+      API</a> along the way.  </p>
+
+    </section>
+
+    <section name="Java Grammar">
+
+      <p>
+        Every Java Program is structured into files, and each of these
+        files has a certain structure. For example, if there is a
+        package statement then it is the first line of the file that is
+        not comment or whitespace. After the package statement comes a
+        list of import statements, which is followed by a class or
+        interface definition, and so on.
+      </p>
+      <p>
+        If you have ever read an introductory level Java book you probably
+        knew all of the above. And if you have studied computer science,
+        you probably also know that the rules that specify the Java language
+        can be formally specified using a grammar (statement is simplified
+        for didactic purposes).
+      </p>
+      <p>
+        There are tools which read a grammar definition and produce a parser
+        for the language that is specified in the grammar. In other
+        words, the output of the tool is a program that can transform a
+        stream of characters (a Java file) into a tree representation
+        that reflects the structure of the file. Checkstyle uses the
+        parser generator <a href="http://www.antlr.org">ANTLR</a> but
+        that is an implementation detail you do not need to worry about
+        when writing Checks, as well tested parser will parse Java file for you.
+      </p>
+
+    </section>
+
+    <section name="The Checkstyle SDK Gui">
+
+      <p>
+        Still with us? Great, you have mastered the basic theory so here
+        is your reward - a GUI that displays the structure of a Java source file. To run it type
+      </p>
+      <source>
+java -cp checkstyle-${projectVersion}-all.jar com.puppycrawl.tools.checkstyle.gui.Main
+      </source>
+
+      <p>
+        on the command line. Click the button at the bottom of the frame
+        and select a syntactically correct Java source file. The frame
+        will be populated with a tree that corresponds to the structure
+        of the Java source code.
+      </p>
+
+      <p>
+        <img alt="screenshot" src="images/gui_screenshot.png"/>
+      </p>
+
+      <p> In the leftmost column you can open and close branches
+      of the tree, the remaining columns display information about each node
+      in the tree.  The second column displays a token type for each node. As
+      you navigate from the root of the tree to one of the leafs, you&#39;ll
+      notice that the token type denotes smaller and smaller units of your
+      source file, i.e. close to the root you might see the token type <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF">CLASS_DEF</a>
+      (a node that represents a class definition) while you will see token
+      types like IDENT (an identifier) near the leaves of the tree.  </p>
+
+      <p>
+        Notice: text of a tree node and its children is selected automaticaly
+        after either pressing "Enter" or double-clicking on it, so there is no
+        need to make selection manually.
+      </p>
+
+      <p>
+        We&#39;ll get back to the details in the other columns later, they
+        are important for implementing Checks but not for understanding
+        the basic concepts. For now it is sufficient to know that the
+        gui is a tool that lets you look at the structure of a Java file, i.e. you can see the Java grammar &#39;in action&#39;.
+      </p>
+
+      <p> If you use <a href="https://eclipse.org">Eclipse</a> you can install
+        <a href="https://github.com/sevntu-checkstyle/checkstyle-ast-eclipse-viewer">
+          Checkstyle AST Eclipse Viewer</a>
+        plugin to launch that application from context menu on any file in Eclipse.
+      </p>
+
+    </section>
+
+    <section name="Understanding the visitor pattern">
+
+      <p>
+        Ready for a bit more theory? The last bit
+        that is missing before you can start writing Checks is understanding
+        the <a href="https://en.wikipedia.org/wiki/Visitor_pattern">Visitor pattern</a>.
+      </p>
+
+      <p>
+        When working with <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">
+        Abstract Syntax Tree (AST)</a>, a simple approach to define check operations
+        on them would be to add a <code>check()</code> method to the Class that defines
+        the AST nodes. For example, our AST type could have a method
+        <code>checkNumberOfMethods()</code>. Such an approach would suffer from a few
+        serious drawbacks. Most importantly, it does not provide an extensible
+        design, i.e. the Checks have to be known at compile time; there is no
+        way to write plugins.
+      </p>
+
+      <p> Hence Checkstyle&#39;s AST classes do not have any
+      methods that implement checking functionality. Instead,
+      Checkstyle&#39;s <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/TreeWalker.html">TreeWalker</a>
+      takes a set of objects that conform to a <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html">AbstractCheck</a>
+      interface. OK, you&#39;re right - actually it&#39;s not an interface
+      but an abstract class to provide some helper methods. A Check provides
+      methods that take an AST as an argument and perform the checking process
+      for that AST, most prominently <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#visitToken-com.puppycrawl.tools.checkstyle.api.DetailAST-"><code>visitToken()</code></a>.  </p>
+
+      <p> It is important to understand that the individual
+      Checks do no drive the AST traversal (it possible to traverse itself, but not recommended).
+      Instead, the TreeWalker initiates
+      a recursive descend from the root of the AST to the leaf nodes and calls
+      the Check methods. The traversal is done using a <a
+      href="https://en.wikipedia.org/wiki/Tree_traversal">tree traversal (depth-first)</a>
+      algorithm.  </p>
+
+      <p> Before any visitor method is called, the TreeWalker
+      will call <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#beginTree-com.puppycrawl.tools.checkstyle.api.DetailAST-"><code>beginTree()</code></a> to give the Check a chance to do
+      some initialization. Then, when performing the recursive descend from
+      the root to the leaf nodes, the <code>visitToken()</code>
+      method is called. Unlike the basic examples in the pattern book, there
+      is a <code>visitToken()</code> counterpart called <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#leaveToken-com.puppycrawl.tools.checkstyle.api.DetailAST-"><code>leaveToken()</code></a>. The TreeWalker will call that
+      method to signal that the subtree below the node has been processed and
+      the TreeWalker is backtracking from the node. After the root node has
+      been left, the TreeWalker will call <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#finishTree-com.puppycrawl.tools.checkstyle.api.DetailAST-"><code>finishTree()</code></a>.  </p>
+
+    </section>
+
+    <section name="Visitor in action">
+
+      <p>
+        Let&#39;s get back to our example and start writing code - that&#39;s why
+        you came here, right?
+        When you fire up the Checkstyle GUI and look at a few source
+        files you&#39;ll figure out pretty quickly that you are mainly
+        interested in the number of tree nodes of type METHOD_DEF. The
+        number of such tokens should be counted separately for each
+        CLASS_DEF / INTERFACE_DEF.
+      </p>
+
+      <p>
+        Hence we need to register the Check for the token types
+        CLASS_DEF and INTERFACE_DEF. The TreeWalker will only call
+        visitToken for these token types. Because the requirements of
+        our tasks are so simple, there is no need to implement the other
+        fancy methods, like <code>finishTree()</code>, etc., so here is our first
+        shot at our Check implementation:
+      </p>
+
+      <source>
+package com.mycompany.checks;
+import com.puppycrawl.tools.checkstyle.api.*;
+
+public class MethodLimitCheck extends AbstractCheck
+{
+    private static final int DEFAULT_MAX = 30;
+    private int max = DEFAULT_MAX;
+
+    @Override
+    public int[] getDefaultTokens()
+    {
+        return new int[]{TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF};
+    }
+
+    @Override
+    public void visitToken(DetailAST ast)
+    {
+        // find the OBJBLOCK node below the CLASS_DEF/INTERFACE_DEF
+        DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);
+
+        // count the number of direct children of the OBJBLOCK
+        // that are METHOD_DEFS
+        int methodDefs = objBlock.getChildCount(TokenTypes.METHOD_DEF);
+
+        // report error if limit is reached
+        if (methodDefs > this.max) {
+            String message = "too many methods, only " + this.max + " are allowed";
+            log(ast.getLineNo(), message);
+        }
+   }
+}
+      </source>
+
+    </section>
+
+    <section name="Understanding token sets">
+
+      <p>
+        There are four methods in Check class to control the processed
+        <a href="http://checkstyle.sourceforge.net/apidocs/index.html">TokenTypes</a> -
+        one setter
+        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#setTokens-java.lang.String...-">
+        setTokens()</a>, which is used to define a custom set (which is different
+        from the default one) of the processed TokenTypes via config file and
+        three getters, which have to be overridden:
+        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#getDefaultTokens--">
+        getDefaultTokens()</a>,
+        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#getAcceptableTokens--">
+        getAcceptableTokens()</a>,
+        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#getRequiredTokens--">
+        getRequiredTokens()</a>.
+      </p>
+
+      <ul>
+
+        <li>
+          getDefaultTokens() - returns a set of TokenTypes which are processed in
+          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractCheck.html#visitToken-com.puppycrawl.tools.checkstyle.api.DetailAST-">
+          visitToken()</a> method by default.
+        </li>
+
+        <li>
+          getRequiredTokens() - returns a set of TokenTypes which Check must be subscribed to for
+          a valid execution. If the user wants to specify a custom set of TokenTypes then
+          this set must contain all the TokenTypes from RequiredTokens.
+        </li>
+
+        <li>
+          getAcceptableTokens() - returns a set, which contains all the TokenTypes that
+          can be processed by the check. Both DefaultTokens and RequiredTokens and any custom
+          set of TokenTypes are subsets of AcceptableTokens.
+        </li>
+
+      </ul>
+
+    </section>
+
+    <section name="Navigating the AST">
+
+      <p>
+        In the example above you already saw that the DetailsAST class
+        provides utility methods to extract information from the tree,
+        like <code>getChildCount()</code>. By now you have
+        probably consulted the API documentation and found that
+        <a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java">DetailsAST</a> additionally provides methods for navigating around
+        in the syntax tree, like finding the next sibling of a node, the
+        children of a node, the parent of a node, etc.
+      </p>
+
+      <p>
+        These methods provide great power for developing complex
+        Checks. Most of the Checks that Checkstyle provides by default
+        use these methods to analyze the environment of the ASTs that
+        are visited by the TreeWalker.  Don&#39;t abuse that feature for
+        exploring the whole tree, though. Let the TreeWalker drive the
+        tree traversal and limit the visitor to the neighbours of a
+        single AST.
+      </p>
+
+    </section>
+
+    <section name="Defining Check Properties">
+
+      <p>
+
+        OK Mr. Checkstyle, that&#39;s all very nice but in my company we
+        have several projects, and each has another number of allowed
+        methods. I need to control my Check through properties, so where
+        is the API to do that?
+      </p>
+
+      <p>
+        Well, the short answer is, there is no API. It&#39;s magic. Really!
+      </p>
+
+      <p>
+        If you need to make something configurable, just add a setter method
+        to the Check:
+      </p>
+
+      <source>
+public class MethodLimitCheck extends AbstractCheck
+{
+    // code from above omitted for brevity
+    public void setMax(int limit)
+    {
+        max = limit;
+    }
+}
+      </source>
+
+      <p>
+        With this code added, you can set the property <code>max</code> for the MethodLimitCheck module in the
+        configuration file. It doesn&#39;t get any simpler than that. The secret is
+        that Checkstyle uses <a href="https://docs.oracle.com/javase/tutorial/reflect/member/fieldValues.html">
+        JavaBean reflection to set the JavaBean properties</a>. That works for all primitive types like boolean,
+        int, long, etc., plus Strings, plus arrays of these types.
+      </p>
+
+    </section>
+
+    <section name="Logging errors">
+
+      <p>
+        Detecting errors is one thing, presenting them to the user is
+        another. To do that, the Check base class provides several log
+        methods, the simplest of them being <code>Check.log(String)</code>. In your
+        Check you can simply use a verbatim error string like in <code>log(&quot;Too many methods, only &quot; + mMax +
+        &quot; are allowed&quot;);</code> as the argument. That will
+        work, but it&#39;s not the best possible solution if your Check is
+        intended for a wider audience.
+      </p>
+
+      <p>
+        If you are not living in a country where people speak English,
+        you may have noticed that Checkstyle writes internationalized
+        error messages, for example if you live in Germany the error
+        messages are German. The individual Checks don&#39;t have to do
+        anything fancy to achieve this, it&#39;s actually quite easy and the
+        Checkstyle framework does most of the work.
+      </p>
+
+      <p>
+        To support internationalized error messages, you need to create or reuse existing
+        a messages.properties file alongside your Check class
+        (<a href="https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages.properties">example</a>)
+        , i.e. the
+        Java file and the properties files should be in the same
+        directory.  Add a symbolic error code and an English
+        representation to the messages.properties. The file should
+        contain the following line: <code>too.many.methods=Too many methods, only {0} are
+        allowed</code>.  Then replace the verbatim error message with
+        the symbolic representation and use one of the log helper
+        methods to provide the dynamic part of the message (mMax in this
+        case): <code>log(&quot;too.many.methods&quot;,
+        mMax);</code>. Please consult the documentation of Java&#39;s <a
+        href="http://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html">MessageFormat</a>
+        to learn about the syntax of format strings (especially about
+        those funny numbers in the translated text).
+      </p>
+
+      <p>
+        Supporting a new language is very easy now, simply create a new
+        messages file for the language, e.g. messages_fr.properties to
+        provide French error messages. The correct file will be chosen
+        automatically, based on the language settings of the user&#39;s
+        operating system.
+      </p>
+
+    </section>
+
+    <section name="Integrate your Check">
+
+      <p>
+        The great final moment has arrived, you are about to run your
+        Check. To integrate your Check, add a new subentry under the
+        TreeWalker module of your configuration file. Use the full
+        classname of your Check class as the name of the module.
+        Your configuration file <code>config.xml</code> should look something like this:
+      </p>
+
+      <source>
+&lt;?xml version=&quot;1.0&quot;?&gt;
+&lt;!DOCTYPE module PUBLIC
+    &quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot;
+    &quot;http://www.puppycrawl.com/dtds/configuration_1_3.dtd&quot;&gt;
+&lt;module name=&quot;Checker&quot;&gt;
+  &lt;module name=&quot;TreeWalker&quot;&gt;
+          &lt;!-- your standard Checks that come with Checkstyle --&gt;
+    &lt;module name=&quot;UpperEll&quot;/&gt;
+    &lt;module name=&quot;MethodLength&quot;/&gt;
+          &lt;!-- your Check goes here --&gt;
+    &lt;module name=&quot;com.mycompany.checks.MethodLimitCheck&quot;&gt;
+      &lt;property name=&quot;max&quot; value=&quot;45&quot;/&gt;
+    &lt;/module&gt;
+  &lt;/module&gt;
+&lt;/module&gt;
+      </source>
+
+      <p>
+        To run the new Check on the command line compile your Check,
+        create a jar that contains the classes and property files,
+        e.g. <code>mycompanychecks.jar</code>. Then run
+        (with the path separator
+        <a href="http://docs.oracle.com/javase/tutorial/essential/environment/sysprop.html">
+        system property ("path.separator")</a> adjusted to your platform:
+        Linux/Unix - ":", Windows - ";"):
+      </p>
+
+      <p>For Linux/Unix OS:</p>
+      <source>
+java -classpath mycompanychecks.jar:checkstyle-${projectVersion}-all.jar \
+     com.puppycrawl.tools.checkstyle.Main
+     -c config.xml myproject
+      </source>
+
+      <p>For Windows OS:</p>
+      <source>
+java -classpath mycompanychecks.jar;checkstyle-${projectVersion}-all.jar \
+     com.puppycrawl.tools.checkstyle.Main
+     -c config.xml myproject
+      </source>
+
+      <p>
+        Did you see all those errors about &quot;too many methods&quot;
+        flying over your screen? Congratulations. You can now consider
+        yourself a Checkstyle expert. Go to your fridge. Have a beer.
+      </p>
+
+      <p>
+        Please consult the <a href="config.html#Packages">Checkstyle
+        configuration manual</a> to learn how to integrate your Checks
+        into the package configuration so that you can use <code>MethodLimit</code> instead of the full class name.
+      </p>
+
+    </section>
+
+    <section name="Limitations">
+
+      <p>
+        OK, so you have written your first Check, and you have found
+        several flaws in many of your programs. You now know that your
+        boss does not follow the coding conventions he wrote.  And you
+        know that you are the king of the world. To become a programming
+        god, you want to write your second Check - now wait, first you
+        should know what your limits are.
+      </p>
+
+      <p>
+        There are basically only few of them:
+      </p>
+      <ul>
+        <li>Java code should be written with <a href="https://en.wikipedia.org/wiki/ASCII">ASCII</a> characters only, no UTF-8 support.</li>
+        <li>To get valid violations, code have to be compilable, in other case you can get not easy to understand parse errors.</li>
+        <li>You cannot determine the type of an expression. Example: "getValue() + getValue2()"</li>
+        <li>You cannot determine the full inheritance hierarchy of type.</li>
+        <li>You cannot see the content of other files. You have content of one file only during all Checks execution. All files are processed one by one.</li>
+      </ul>
+      <p>
+        This means that you cannot implement some of the code inspection
+        features that are available in advanced IDEs like <a
+        href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>,
+        <a href="http://findbugs.sourceforge.net/">FindBugs</a>,
+        <a href="http://pmd.sourceforge.net/">PMD</a>,
+        <a href="http://www.sonarqube.org/">Sonarqube</a>.
+      </p>
+
+      <p>
+        For example you will not be able to implement:
+        <br/>
+        - a Check that finds redundant type casts or unused public methods.
+        <br/>
+        - a Check that validate that user custom Exception class inherited from java.lang.Exception class.
+      </p>
+
+    </section>
+
+    <section name="Writing FileSetChecks">
+
+      <p>Writing a FileSetCheck usually required when you do not need parse Java file
+      to get inner structure, or you are going to validate non "*.java" files.
+      </p>
+
+      <p> Writing a FileSetCheck is pretty straightforward: Just
+      inherit from <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.html">AbstractFileSetCheck</a>
+      and override the abstract <a
+      href="apidocs/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.html#processFiltered-java.io.File-java.util.List-"><code>processFiltered(java.io.File, java.util.List)</code></a> method and you&#39;re
+      done. A very simple example could fire an error if the number of files
+      exceeds a certain limit. Here is a FileSetCheck that does just that:</p>
+
+      <source>
+package com.mycompany.checks;
+import java.io.File;
+import java.util.List;
+import com.puppycrawl.tools.checkstyle.api.*;
+
+public class LimitImplementationFiles extends AbstractFileSetCheck
+{
+    private static final int DEFAULT_MAX = 100;
+    private int fileCount;
+    private int max = DEFAULT_MAX;
+    public void setMax(int aMax)
+    {
+        this.max = aMax;
+    }
+
+    @Override
+    public void beginProcessing(String aCharset)
+    {
+        super.beginProcessing(aCharset);
+
+        //reset the file count
+        this.fileCount = 0;
+    }
+
+    @Override
+    public void processFiltered(File file, List&lt;String&gt; aLines)
+    {
+        this.fileCount++;
+
+        if (this.fileCount > this.max) {
+            // log the message
+            log(0, "max.files.exceeded", Integer.valueOf(this.max));
+            // you can call log() multiple times to flag multiple
+            // errors in the same file
+        }
+    }
+}
+      </source>
+
+      <p>
+        Note that the configuration via bean introspection also applies
+        here.  By implementing the <code>setMax()</code>
+        method the FileSetCheck automatically makes &quot;max&quot; a
+        legal configuration parameter that you can use in the Checkstyle
+        configuration file.
+      </p>
+      <p>
+        There are virtually no limits what you can do in
+        FileSetChecks, but please do not be crazy.
+      </p>
+
+    </section>
+
+    <section name="Huh? I can&#39;t figure it out!">
+      <p>
+        That&#39;s probably our fault, and it means that we have to provide
+        better documentation. Please do not hesitate to ask questions on
+        the user <a href="http://checkstyle.sourceforge.net/mail-lists.html">
+        mailing lists</a>, this will help us to improve this
+        document.  Please ask your questions as precisely as possible.
+        We will not be able to answer questions like &quot;I want to
+        write a Check but I don&#39;t know how, can you help me?&quot;. Tell
+        us what you are trying to do (the purpose of the Check), what
+        you have understood so far, and what exactly you are getting stuck
+        on.
+      </p>
+
+    </section>
+
+    <section name="Contributing">
+
+      <p>
+        We need <em>your</em> help to keep improving Checkstyle.
+
+        Whenever you write a Check or FileSetCheck that you think is
+        generally useful, please consider
+        <a href="contributing.html">contributing</a> it to the
+        Checkstyle community and submit it for inclusion in the next
+        release of Checkstyle.
+
+      </p>
+    </section>
+
+  </body>
+</document>
+
diff --git a/src/xdocs/writingjavadocchecks.xml.vm b/src/xdocs/writingjavadocchecks.xml.vm
index 425378fe04..9b0ac35439 100755
--- a/src/xdocs/writingjavadocchecks.xml.vm
+++ b/src/xdocs/writingjavadocchecks.xml.vm
@@ -21,10 +21,38 @@
       </macro>
     </section>
 
+    <section name="What is Javadoc comment">
+      <p>
+      Javadoc comment is multiline comment that starts with <b>*</b> character and placed under class definition, interface definition, enum definition, method definition or field definition. 
+      The comment should be written in XHTML to be correctly processed by Checkstyle. This means that every HTML tag should have matching closed HTML tag or it is self-closed one (singlton tag). 
+      The only exceptions are &lt;p&gt;, &lt;li&gt;, &lt;tr&gt;, &lt;td&gt;, &lt;th&gt;, &lt;body&gt;, &lt;colgroup&gt;, &lt;dd&gt;, &lt;dt&gt;, &lt;head&gt;, &lt;html&gt;, &lt;option&gt;, 
+      &lt;tbody&gt;, &lt;thead&gt;, &lt;tfoot&gt; and Checkstyle won't show error about missing closing tag, however, it leads to broken XHTML structure and, therefore, 
+      incorrect Abstract Syntax Tree of the Javadoc comment anyway. See examples at "HTML Code In Javadoc Comments" chapter.
+      </p>
+    </section>
+
     <section name="Overview">
+      <p>
+      To start implementing your own Check create new class and extend <a href='http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html'>AbstractJavadocCheck</a>. It has two abstract methods:
+      </p>
+      <ul>
+        <li>getDefaultJavadocTokens() - return array of token types that your new Check requires to process (see "Token Types" section)</li>
+        <li>visitJavadocToken(DetailNode) - it's the place you should put tree nodes proccessing. The argument is Javadoc tree node of type you described 
+          before in getDefaultJavadocTokens() method.</li>
+      </ul>
+      <p>
+        Javadoc parser requires XHTML to be used in Javadoc comments, i.e. if there is some open tag(for example &lt;div&gt;) then there have to be its close tag &lt;/div&gt;.
+        This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment, therefore, your new Check can't get its parse tree and process anything from this Javadoc comment. For more details and examples go to "HTML code in Javadoc comments" section.
+      </p>
     </section>
 
     <section name="Difference between Java Grammar and Javadoc comments Grammar">
+      <p>
+        Java grammar parses java file due to language specifications. So, there are singleline comments and multiline/block comments in it. Java compiler doesn't know about Javadoc because it is just a multiline comment.
+        To parse multiline comment as a Javadoc comment, checkstyle has second grammar - Javadoc grammar. So, it's supposed to proccess block comments and parse them to Abstract Syntax Tree.
+        The problem is that Java grammar is old one and uses ANTLR v2, while Javadoc grammar uses ANTLR v4. Because of that, these two grammars and their trees are not compatible.
+        Java AST consists of DetailAST objects, while Javadoc AST consists of DetailNode objects.
+      </p>
     </section>
 
     <section name="Tools to see Javadoc tree structure">
@@ -142,13 +170,104 @@ JAVADOC ->  * My <b>class</b>.\r\n * @see AbstractClass<EOF> [0:0]
 |       `--CLASS -> AbstractClass [1:8]
 `--EOF -> <EOF> [1:21]
       ]]></source>
-
-
     </section>
 
     <section name="Token types">
     </section>
 
+    <section name="HTML Code In Javadoc Comments">
+    <p>
+    Examples:
+    1) Unclosed paragraph HTML tag. As you see in the tree, content of the paragraph tag is not nested to this tag. That is because HTML tags are not closed by pair tag &lt;/p&gt;, and Checkstyle requires XHTML to correctly parse Javadoc comments.
+    </p>
+    <source><![CDATA[
+<p> First
+<p> Second
+    ]]></source>
+    <source><![CDATA[
+JAVADOC -> <p> First\r\n<p> Second<EOF> [0:0]
+|--HTML_ELEMENT -> <p> [0:0]
+|   `--P_TAG_OPEN -> <p> [0:0]
+|       |--OPEN -> < [0:0]
+|       |--P_HTML_TAG_NAME -> p [0:1]
+|       `--CLOSE -> > [0:2]
+|--TEXT ->  First [0:3]
+|   |--WS ->   [0:3]
+|   |--CHAR -> F [0:4]
+|   |--CHAR -> i [0:5]
+|   |--CHAR -> r [0:6]
+|   |--CHAR -> s [0:7]
+|   `--CHAR -> t [0:8]
+|--NEWLINE -> \r\n [0:9]
+|--HTML_ELEMENT -> <p> [1:0]
+|   `--P_TAG_OPEN -> <p> [1:0]
+|       |--OPEN -> < [1:0]
+|       |--P_HTML_TAG_NAME -> p [1:1]
+|       `--CLOSE -> > [1:2]
+|--TEXT ->  Second [1:3]
+|   |--WS ->   [1:3]
+|   |--CHAR -> S [1:4]
+|   |--CHAR -> e [1:5]
+|   |--CHAR -> c [1:6]
+|   |--CHAR -> o [1:7]
+|   |--CHAR -> n [1:8]
+|   `--CHAR -> d [1:9]
+`--EOF -> <EOF> [1:10]
+    ]]></source>
+    <p>
+    2) Here is correct version with open and closed HTML tags. 
+    </p>
+    <source><![CDATA[
+<p> First </p>
+<p> Second </p>
+    ]]></source>
+    <source><![CDATA[
+JAVADOC -> <p> First </p>\r\n<p> Second </p><EOF> [0:0]
+|--HTML_ELEMENT -> <p> First </p> [0:0]
+|   `--PARAGRAPH -> <p> First </p> [0:0]
+|       |--P_TAG_OPEN -> <p> [0:0]
+|       |   |--OPEN -> < [0:0]
+|       |   |--P_HTML_TAG_NAME -> p [0:1]
+|       |   `--CLOSE -> > [0:2]
+|       |--TEXT ->  First  [0:3]
+|       |   |--WS ->   [0:3]
+|       |   |--CHAR -> F [0:4]
+|       |   |--CHAR -> i [0:5]
+|       |   |--CHAR -> r [0:6]
+|       |   |--CHAR -> s [0:7]
+|       |   |--CHAR -> t [0:8]
+|       |   `--WS ->   [0:9]
+|       `--P_TAG_CLOSE -> </p> [0:10]
+|           |--OPEN -> < [0:10]
+|           |--SLASH -> / [0:11]
+|           |--P_HTML_TAG_NAME -> p [0:12]
+|           `--CLOSE -> > [0:13]
+|--NEWLINE -> \r\n [0:14]
+|--HTML_ELEMENT -> <p> Second </p> [1:0]
+|   `--PARAGRAPH -> <p> Second </p> [1:0]
+|       |--P_TAG_OPEN -> <p> [1:0]
+|       |   |--OPEN -> < [1:0]
+|       |   |--P_HTML_TAG_NAME -> p [1:1]
+|       |   `--CLOSE -> > [1:2]
+|       |--TEXT ->  Second  [1:3]
+|       |   |--WS ->   [1:3]
+|       |   |--CHAR -> S [1:4]
+|       |   |--CHAR -> e [1:5]
+|       |   |--CHAR -> c [1:6]
+|       |   |--CHAR -> o [1:7]
+|       |   |--CHAR -> n [1:8]
+|       |   |--CHAR -> d [1:9]
+|       |   `--WS ->   [1:10]
+|       `--P_TAG_CLOSE -> </p> [1:11]
+|           |--OPEN -> < [1:11]
+|           |--SLASH -> / [1:12]
+|           |--P_HTML_TAG_NAME -> p [1:13]
+|           `--CLOSE -> > [1:14]
+`--EOF -> <EOF> [1:15]
+    ]]></source>
+    </section>
+
+
     <section name="Checkstyle SDK GUI">
     </section>
 
