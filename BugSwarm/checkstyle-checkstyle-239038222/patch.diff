diff --git a/.ci/travis/travis.sh b/.ci/travis/travis.sh
index 8c4cd54ef4..53e951d732 100755
--- a/.ci/travis/travis.sh
+++ b/.ci/travis/travis.sh
@@ -56,6 +56,7 @@ check-chmod)
 all-sevntu-checks)
   xmlstarlet sel --net --template -m .//module -v "@name" -n config/checkstyle_sevntu_checks.xml \
     | grep -vE "Checker|TreeWalker|Filter|Holder" | grep -v "^$" \
+    | sed "s/com\.github\.sevntu\.checkstyle\.checks\..*\.//" \
     | sort | uniq | sed "s/Check$//" > file.txt
   wget -q http://sevntu-checkstyle.github.io/sevntu.checkstyle/apidocs/allclasses-frame.html -O - | html2text \
     | grep -E "Check$" | cut -d " " -f6 \
diff --git a/config/checkstyle_sevntu_checks.xml b/config/checkstyle_sevntu_checks.xml
index 292fde8522..75e592c7a9 100755
--- a/config/checkstyle_sevntu_checks.xml
+++ b/config/checkstyle_sevntu_checks.xml
@@ -190,7 +190,7 @@
         <module name="NumericLiteralNeedsUnderscoreCheck"/>
         <module name="UniformEnumConstantNameCheck" />
         <module name="ForbidAnnotationElementValueCheck" />
-        <module name="HideUtilityClassConstructorCheck" />
+        <module name="com.github.sevntu.checkstyle.checks.design.HideUtilityClassConstructorCheck" />
         <module name="AvoidModifiersForTypesCheck">
           <property name="forbiddenClassesRegexpProtected" value="Logger"/>
           <property name="forbiddenClassesRegexpPublic" value="Logger"/>
diff --git a/pom.xml b/pom.xml
index dfe9409460..73f20f7f62 100755
--- a/pom.xml
+++ b/pom.xml
@@ -22,7 +22,7 @@
 
   <groupId>com.puppycrawl.tools</groupId>
   <artifactId>checkstyle</artifactId>
-  <version>7.9-SNAPSHOT</version>
+  <version>7.8.2-SNAPSHOT</version>
   <packaging>jar</packaging>
 
   <name>checkstyle</name>
@@ -204,7 +204,7 @@
     <maven.jacoco.plugin.version>0.7.9</maven.jacoco.plugin.version>
     <maven.checkstyle.plugin.version>2.17</maven.checkstyle.plugin.version>
     <maven.sevntu.checkstyle.plugin.version>1.24.0</maven.sevntu.checkstyle.plugin.version>
-    <maven.sevntu-checkstyle-check.checkstyle.version>7.8</maven.sevntu-checkstyle-check.checkstyle.version>
+    <maven.sevntu-checkstyle-check.checkstyle.version>7.8.1</maven.sevntu-checkstyle-check.checkstyle.version>
     <maven.versions.plugin.version>2.3</maven.versions.plugin.version>
     <java.version>1.8</java.version>
     <tools.jar.version>${java.version}.0</tools.jar.version>
@@ -278,7 +278,7 @@
     <dependency>
       <groupId>nl.jqno.equalsverifier</groupId>
       <artifactId>equalsverifier</artifactId>
-      <version>2.2.2</version>
+      <version>2.3</version>
       <scope>test</scope>
     </dependency>
     <dependency>
@@ -1450,9 +1450,14 @@
                 <haltOnFailure>true</haltOnFailure>
                 <branchRate>100</branchRate>
                 <lineRate>100</lineRate>
-                <totalBranchRate>91</totalBranchRate>
-                <totalLineRate>98</totalLineRate>
+                <totalBranchRate>92</totalBranchRate>
+                <totalLineRate>99</totalLineRate>
                 <regexes>
+                  <regex>
+                    <pattern>com.puppycrawl.tools.checkstyle.PackageObjectFactory</pattern>
+                    <branchRate>96</branchRate>
+                    <lineRate>100</lineRate>
+                  </regex>
                   <regex>
                     <pattern>com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer</pattern>
                     <branchRate>72</branchRate>
@@ -1644,7 +1649,7 @@
               <targetTests>
                 <param>com.puppycrawl.tools.checkstyle.checks.header.*</param>
               </targetTests>
-              <mutationThreshold>78</mutationThreshold>
+              <mutationThreshold>94</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
diff --git a/release.sh b/release.sh
index efa0d337e9..8690ef7bdf 100755
--- a/release.sh
+++ b/release.sh
@@ -28,7 +28,7 @@ echo "exit" | ssh -t $SF_USER,checkstyle@shell.sourceforge.net create
 mvn -Pgpg release:prepare -B -Darguments="-DskipTests -DskipITs -Dpmd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true -Dxml.skip=true"
 
 # deployment of jars to maven central and publication of site to http://checkstyle.sourceforge.net/new-site/
-mvn -Pgpg release:perform -Darguments='-Dcheckstyle.ant.skip=true'
+mvn -Pgpg release:perform -Darguments='-Dcheckstyle.ant.skip=true -Dcheckstyle.skip=true'
 
 #############################
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
index 3646178041..304a5dc138 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -200,7 +200,8 @@ private Object createObjectFromMap(String name, Map<String, String> map)
         Map<String, String> returnValue;
         try {
             returnValue = ModuleReflectionUtils.getCheckstyleModules(packages, loader).stream()
-                    .collect(Collectors.toMap(Class::getSimpleName, Class::getCanonicalName));
+                .filter(clazz -> !NAME_TO_FULL_MODULE_NAME.keySet().contains(clazz.getSimpleName()))
+                .collect(Collectors.toMap(Class::getSimpleName, Class::getCanonicalName));
         }
         catch (IOException ignore) {
             returnValue = new HashMap<>();
diff --git a/src/site/site.xml b/src/site/site.xml
index 465e8e4b77..b67b620d9b 100755
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -46,6 +46,10 @@
           img="images/Google-Plus-Logo-120x38.png"
           href="https://plus.google.com/+CheckstyleJava"
           />
+    <logo name="JProfiler"
+          img="https://www.ej-technologies.com/images/product_banners/jprofiler_medium.png"
+          href="https://www.ej-technologies.com/products/jprofiler/overview.html"
+          />
   </poweredBy>
 
   <body>
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index 4ab4979bf3..95e7a04b8e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -288,4 +288,13 @@ public void testCacheHeaderWithoutFile() throws Exception {
 
         verify(checker, getPath("InputHeader.java"), expected);
     }
+
+    @Test
+    public void testIgnoreLinesSorted() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(HeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getConfigPath("java.header"));
+        checkConfig.addAttribute("ignoreLines", "4,2,3");
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getConfigPath("java3.header"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
index 48d05271c8..bebdfcaa0d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
@@ -23,14 +23,25 @@
 import static com.puppycrawl.tools.checkstyle.checks.header.RegexpHeaderCheck.MSG_HEADER_MISSING;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.times;
+import static org.powermock.api.mockito.PowerMockito.doNothing;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 import java.io.File;
 import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.Reader;
 import java.net.URI;
 import java.util.Locale;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
 
+import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.BaseFileSetCheckTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
@@ -40,6 +51,8 @@
  * Unit test for RegexpHeaderCheck.
  * @author richter
  */
+@RunWith(PowerMockRunner.class)
+@PrepareForTest(Closeables.class)
 public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
@@ -76,10 +89,18 @@ public void testSetHeaderEmpty() {
      */
     @Test
     public void testSetHeaderSimple() {
+        //check if reader finally closed
+        mockStatic(Closeables.class);
+        doNothing().when(Closeables.class);
+        Closeables.closeQuietly(any(Reader.class));
+
         final RegexpHeaderCheck instance = new RegexpHeaderCheck();
         // check valid header passes
         final String header = "abc.*";
         instance.setHeader(header);
+
+        verifyStatic(times(1));
+        Closeables.closeQuietly(any(Reader.class));
     }
 
     /**
@@ -282,4 +303,63 @@ public void testRegexpHeaderMulti52()
         };
         verify(checkConfig, getPath("InputRegexpHeader5.java"), expected);
     }
+
+    @Test
+    public void testIgnoreLinesSorted() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getPath("regexp.header5"));
+        checkConfig.addAttribute("multiLines", "7,5,3");
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputRegexpHeader8.java"), expected);
+    }
+
+    @Test
+    public void testHeaderWithInvalidRegexp() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getPath("regexp.invalid.header"));
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        try {
+            verify(checkConfig, getPath("InputRegexpHeader5.java"), expected);
+            fail("IllegalArgumentException is expected");
+        }
+        catch (IllegalArgumentException ex) {
+            assertEquals("line 1 in header specification is not a regular expression",
+                    ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testNoWarningIfSingleLinedLeft() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getPath("regexp.header4"));
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputRegexpHeader4.java"), expected);
+    }
+
+    @Test
+    public void testNoHeaderMissingErrorInCaseHeaderSizeEqualToFileSize() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getPath("regexp.header3"));
+        checkConfig.addAttribute("multiLines", "1");
+        final String[] expected = {
+            "5: " + getCheckMessage(MSG_HEADER_MISMATCH, "^$"),
+        };
+        verify(checkConfig, getPath("InputRegexpHeader5.java"), expected);
+    }
+
+    @Test
+    public void testReaderClosedAfterHeaderRead() throws Exception {
+        mockStatic(Closeables.class);
+        doNothing().when(Closeables.class);
+        Closeables.closeQuietly(any(InputStreamReader.class));
+
+        final DefaultConfiguration checkConfig = createCheckConfig(RegexpHeaderCheck.class);
+        checkConfig.addAttribute("headerFile", getPath("regexp.header"));
+        createChecker(checkConfig);
+
+        //check if reader finally closed
+        verifyStatic(times(1));
+        Closeables.closeQuietly(any(InputStreamReader.class));
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
index 4384f54784..268cabebdd 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java
@@ -76,6 +76,7 @@ public void testDefault() throws Exception {
             "264:2: " + getCheckMessage(MSG_KEY, "."),
             "290:6: " + getCheckMessage(MSG_KEY, "@"),
             "292:6: " + getCheckMessage(MSG_KEY, "@"),
+            "299:6: " + getCheckMessage(MSG_KEY, "@"),
         };
         verify(checkConfig, getPath("InputNoWhitespaceAfter.java"), expected);
     }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/InputRegexpHeader8.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/InputRegexpHeader8.java
new file mode 100755
index 0000000000..a02b5aed8b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/InputRegexpHeader8.java
@@ -0,0 +1,10 @@
+package com.puppycrawl.tools.checkstyle.checks.header;
+
+import java.awt.*;
+import java.awt.*;
+
+import java.awt.*;
+import java.awt.*;
+
+import java.awt.*;
+import java.awt.*;
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header4 b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header4
new file mode 100755
index 0000000000..200ea2e9f7
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header4
@@ -0,0 +1,3 @@
+^package
+^$
+^import
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header5 b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header5
new file mode 100755
index 0000000000..69f1f22bde
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.header5
@@ -0,0 +1,7 @@
+^package
+^$
+^import
+^$
+^import
+^$
+^import
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.invalid.header b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.invalid.header
new file mode 100755
index 0000000000..07c63a2fd7
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/header/regexp.invalid.header
@@ -0,0 +1 @@
+},{
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespaceafter/InputNoWhitespaceAfter.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespaceafter/InputNoWhitespaceAfter.java
index cb2e4ff61c..e7efe0398e 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespaceafter/InputNoWhitespaceAfter.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/whitespace/nowhitespaceafter/InputNoWhitespaceAfter.java
@@ -293,4 +293,11 @@ public static void testNoWhitespaceBeforeEllipses(String ... args) {
     public String toString() {
         return "";
     }
+
+    @interface OK{}
+
+    @
+    WithWhitespace
+    @OK
+    public void method(){}
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/configs/java3.header b/src/test/resources/com/puppycrawl/tools/checkstyle/configs/java3.header
new file mode 100755
index 0000000000..79ccf69318
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/configs/java3.header
@@ -0,0 +1,18 @@
+////////////////////////////////////////////////////////////////////////////////
+//testvdfvcheckstyle: Checks Java source code for adherence to a set of rules.
+//testvdfv Copyright (C) 2001-2017 the original author or authors.
+//testvdfv
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
diff --git a/src/xdocs/index.xml.vm b/src/xdocs/index.xml.vm
index 398806c868..131e8e6208 100755
--- a/src/xdocs/index.xml.vm
+++ b/src/xdocs/index.xml.vm
@@ -250,10 +250,10 @@
                   <td/>
               </tr>
               <tr>
-                  <td><a href="https://sonarqube.com/about">SonarQube</a></td>
+                  <td><a href="https://www.sonarqube.org/">SonarQube</a></td>
                   <td>Freddy Mallet (initial author)</td>
-                  <td><a href="https://sonarqube.com/about">SonarQube Home Page</a></td>
-                  <td><a href="https://sonarqube.com/projects">Demo site</a></td>
+                  <td><a href="https://github.com/checkstyle/sonar-checkstyle">Checkstyle SonarQube repository</a></td>
+                  <td><a href="https://sonarcloud.io/projects">Demo site of SonarQube</a></td>
               </tr>
               <tr>
                   <td><a href="http://www.jedit.org/">jEdit</a></td>
diff --git a/src/xdocs/releasenotes.xml b/src/xdocs/releasenotes.xml
index 9359082f5c..75ec704899 100755
--- a/src/xdocs/releasenotes.xml
+++ b/src/xdocs/releasenotes.xml
@@ -16,6 +16,26 @@
   <body>
 
     <!-- placeholder for a new section -->
+    <section name="Release 7.8.1">
+      <p>Bug fixes:</p>
+        <ul>
+          <li>
+            problem with usage of third-party Check libraries and checkstyle 7.8. Author: rnveach, Roman Ivanov
+                <a href="https://github.com/checkstyle/checkstyle/issues/4387">#4387</a>
+          </li>
+        </ul>
+      <p>Notes:</p>
+        <ul>
+          <li>
+            pitest: increase mutation coverage for pitest-check-annotation profile to 100%. Author: vasilyeva
+                <a href="https://github.com/checkstyle/checkstyle/issues/4402">#4402</a>
+          </li>
+          <li>
+            pitest: create profile for non-checks code . Author: vasilyeva
+                <a href="https://github.com/checkstyle/checkstyle/issues/4367">#4367</a>
+          </li>
+        </ul>
+    </section>
     <section name="Release 7.8">
       <p>New:</p>
         <ul>
