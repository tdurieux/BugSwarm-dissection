diff --git a/pychron/experiment/duration_tracker.py b/pychron/experiment/duration_tracker.py
new file mode 100755
index 0000000000..87ece0bf4a
--- /dev/null
+++ b/pychron/experiment/duration_tracker.py
@@ -0,0 +1,147 @@
+# ===============================================================================
+# Copyright 2016 Jake Ross
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+# ===============================================================================
+
+# ============= enthought library imports =======================
+from traits.api import Dict
+# ============= standard library imports ========================
+from numpy.random import random
+import os
+# ============= local library imports  ==========================
+from pychron.loggable import Loggable
+from pychron.paths import paths
+
+
+def write_txt_file(p, out):
+    with open(p, 'w') as wfile:
+        for line in out:
+            wfile.write('{}\n'.format(','.join(map(str, line))))
+
+
+class AutomatedRunDurationTracker(Loggable):
+    _items = Dict
+    _frequencies = Dict
+
+    def __init__(self, *args, **kw):
+        super(AutomatedRunDurationTracker, self).__init__(*args, **kw)
+        self.load()
+
+    def load(self):
+        items = {}
+        if os.path.isfile(paths.duration_tracker):
+            with open(paths.duration_tracker, 'r') as rfile:
+                for line in rfile:
+                    line = line.strip()
+                    if line:
+                        args = line.split(',')
+                        items[args[0]] = float(args[1])
+
+        self._items = items
+
+        # load frequencies
+        freq = {}
+        if os.path.isfile(paths.duration_tracker_frequencies):
+            with open(paths.duration_tracker_frequencies, 'r') as rfile:
+                for line in rfile:
+                    if line:
+                        h, total, truncated = line.split(',')
+
+                    freq[h] = float(truncated) / float(total)
+        self._frequencies = freq
+
+    def update(self, run, t):
+        rh = run.spec.script_hash_truncated
+        self.debug('update duration runid={}, duration={}, md5={}'.format(run.spec.runid, t, rh[:8]))
+
+        p = paths.duration_tracker
+
+        out = []
+        exists = False
+
+        if os.path.isfile(p):
+            with open(p, 'r') as rfile:
+                for line in rfile:
+                    line = line.strip()
+                    if line:
+                        args = line.split(',')
+
+                        h, ct, ds = args[0], args[1], args[2:]
+                        # update the runs duration by taking running average of last 10
+                        if h == rh:
+                            exists = True
+
+                            ds = map(float, ds)
+                            ds.append(t)
+                            ds = ds[-10:]
+                            if len(ds):
+                                args = [h, sum(ds) / len(ds)]
+                                args.extend(ds)
+
+                        out.append(args)
+
+        if not exists:
+            self.debug('adding {} {} to durations'.format(run.spec.runid, rh[:8]))
+            out.append((rh, t))
+
+        write_txt_file(p, out)
+
+        # update frequencies
+        rh = run.spec.script_hash
+        out = []
+        exists = False
+        p = paths.duration_tracker_frequencies
+
+        ist = run.spec.is_truncated()
+        if os.path.isfile(p):
+            with open(p, 'r') as rfile:
+                for line in rfile:
+                    line = line.strip()
+                    if line:
+                        h, total, truncated = line.split(',')
+                        if h == rh:
+                            exists = True
+                            total = int(total) + 1
+                            if ist:
+                                truncated = int(truncated) + 1
+
+                        out.append((h, total, truncated))
+
+        if not exists:
+            self.debug('adding {} {} to frequencies'.format(run.spec.runid, rh[:8]))
+            out.append((rh, 1, 1 if ist else 0))
+
+        write_txt_file(p, out)
+        self.load()
+
+    def probability_model(self, h, ht):
+        self.debug('using probability model')
+        prob = self._frequencies.get(h, 0)
+
+        self.debug('probability: {}'.format(prob))
+        # probability run is truncated
+        if random() < prob:
+            h = ht
+            self.debug('use truncated duration')
+
+        dur = self._items[h]
+        return dur
+
+    def __contains__(self, v):
+        return v in self._items
+
+    def __getitem__(self, k):
+        return self._items[k]
+
+# ============= EOF =============================================
diff --git a/pychron/experiment/stats.py b/pychron/experiment/stats.py
index 54bdd6221d..0b629ff176 100755
--- a/pychron/experiment/stats.py
+++ b/pychron/experiment/stats.py
@@ -15,141 +15,18 @@
 # ===============================================================================
 
 # ============= enthought library imports =======================
-from traits.api import Property, String, Float, Any, Int, List, Instance, Bool, Dict
+from traits.api import Property, String, Float, Any, Int, List, Instance, Bool
 # ============= standard library imports ========================
-from numpy.random import random
 from datetime import datetime, timedelta
-import os
 import time
 # ============= local library imports  ==========================
 from pychron.core.helpers.timer import Timer
 from pychron.core.ui.pie_clock import PieClockModel
+from pychron.experiment.duration_tracker import AutomatedRunDurationTracker
 from pychron.loggable import Loggable
-from pychron.paths import paths
 from pychron.pychron_constants import MEASUREMENT_COLOR, EXTRACTION_COLOR
 
 
-def write_txt_file(p, out):
-    with open(p, 'w') as wfile:
-        for line in out:
-            wfile.write('{}\n'.format(','.join(map(str, line))))
-
-
-class AutomatedRunDurationTracker(Loggable):
-    _items = Dict
-    _frequencies = Dict
-
-    def __init__(self, *args, **kw):
-        super(AutomatedRunDurationTracker, self).__init__(*args, **kw)
-        self.load()
-
-    def load(self):
-        items = {}
-        if os.path.isfile(paths.duration_tracker):
-            with open(paths.duration_tracker, 'r') as rfile:
-                for line in rfile:
-                    line = line.strip()
-                    if line:
-                        args = line.split(',')
-                        items[args[0]] = float(args[1])
-
-        self._items = items
-
-        # load frequencies
-        freq = {}
-        if os.path.isfile(paths.duration_tracker_frequencies):
-            with open(paths.duration_tracker_frequencies, 'r') as rfile:
-                for line in rfile:
-                    if line:
-                        h, total, truncated = line.split(',')
-
-                    freq[h] = float(truncated) / float(total)
-        self._frequencies = freq
-
-    def update(self, run, t):
-        rh = run.spec.script_hash_truncated
-        self.debug('update duration runid={}, duration={}, md5={}'.format(run.spec.runid, t, rh[:8]))
-
-        p = paths.duration_tracker
-
-        out = []
-        exists = False
-
-        if os.path.isfile(p):
-            with open(p, 'r') as rfile:
-                for line in rfile:
-                    line = line.strip()
-                    if line:
-                        args = line.split(',')
-
-                        h, ct, ds = args[0], args[1], args[2:]
-                        # update the runs duration by taking running average of last 10
-                        if h == rh:
-                            exists = True
-
-                            ds = map(float, ds)
-                            ds.append(t)
-                            ds = ds[-10:]
-                            if len(ds):
-                                args = [h, sum(ds) / len(ds)]
-                                args.extend(ds)
-
-                        out.append(args)
-
-        if not exists:
-            self.debug('adding {} {} to durations'.format(run.spec.runid, rh[:8]))
-            out.append((rh, t))
-
-        write_txt_file(p, out)
-
-        # update frequencies
-        rh = run.spec.script_hash
-        out = []
-        exists = False
-        p = paths.duration_tracker_frequencies
-
-        ist = run.spec.is_truncated()
-        if os.path.isfile(p):
-            with open(p, 'r') as rfile:
-                for line in rfile:
-                    line = line.strip()
-                    if line:
-                        h, total, truncated = line.split(',')
-                        if h == rh:
-                            exists = True
-                            total = int(total)+1
-                            if ist:
-                                truncated = int(truncated)+1
-
-                        out.append((h, total, truncated))
-
-        if not exists:
-            self.debug('adding {} {} to frequencies'.format(run.spec.runid, rh[:8]))
-            out.append((rh, 1, 1 if ist else 0))
-
-        write_txt_file(p, out)
-        self.load()
-
-    def probability_model(self, h, ht):
-        self.debug('using probability model')
-        prob = self._frequencies.get(h, 0)
-
-        self.debug('probability: {}'.format(prob))
-        # probability run is truncated
-        if random() < prob:
-            h = ht
-            self.debug('use truncated duration')
-
-        dur = self._items[h]
-        return dur
-
-    def __contains__(self, v):
-        return v in self._items
-
-    def __getitem__(self, k):
-        return self._items[k]
-
-
 class ExperimentStats(Loggable):
     elapsed = Property(depends_on='_elapsed')
     _elapsed = Float
diff --git a/pychron/experiment/tests/duration_tracker.py b/pychron/experiment/tests/duration_tracker.py
index 3cc337df06..68731f8f39 100755
--- a/pychron/experiment/tests/duration_tracker.py
+++ b/pychron/experiment/tests/duration_tracker.py
@@ -1,7 +1,7 @@
 import os
 import unittest
 
-from pychron.experiment.stats import AutomatedRunDurationTracker
+from pychron.experiment.duration_tracker import AutomatedRunDurationTracker
 from pychron.paths import paths
 
 
diff --git a/setup.py b/setup.py
index d498656a30..efc68746c6 100755
--- a/setup.py
+++ b/setup.py
@@ -30,6 +30,7 @@
                   'pychron.experiment.utilities.position_regex',
                   'pychron.experiment.utilities.frequency_generator',
                   'pychron.experiment.utilities.aliquot_numbering',
+                  'pychron.experiment.duration_tracker',
                   'pychron.entry.loaders.analysis_loader',
                   'pychron.core.geometry.affine'
                   ],
