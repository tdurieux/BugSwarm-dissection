diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyProxyService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyProxyService.java
index 6d6b80bfbb..b5c792d423 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyProxyService.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyProxyService.java
@@ -19,9 +19,6 @@
 
 import java.io.IOException;
 import java.net.URI;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Map;
 
 import org.apache.jena.query.QueryExecution;
 import org.apache.jena.query.QuerySolution;
@@ -31,12 +28,12 @@
 import org.fcrepo.client.FcrepoOperationFailedException;
 import org.fcrepo.client.FcrepoResponse;
 
-import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fedora.PID;
 import edu.unc.lib.dl.fedora.ServiceException;
 import edu.unc.lib.dl.sparql.SparqlQueryService;
 
 /**
+ * Service for destroying membership proxies from ldp IndirectContainers.
  *
  * @author bbpennel
  * @author harring
@@ -44,19 +41,21 @@
  */
 public class DestroyProxyService {
 
-    private Map<String, Collection<PID>> sourceToPid;
     private SparqlQueryService sparqlQueryService;
     private FcrepoClient fcrepoClient;
 
-    public DestroyProxyService(Map<String, Collection<PID>> sourceToPid, SparqlQueryService sparqlQueryService,
-            FcrepoClient fcrepoClient) {
-        this.sourceToPid = sourceToPid;
-        this.sparqlQueryService = sparqlQueryService;
-        this.fcrepoClient = fcrepoClient;
+    public DestroyProxyService() {
     }
 
-    public void destroyProxy(PID objPid) {
-        URI proxyUri = getProxyUri(objPid);
+    /**
+     * Destroys the membership proxy referencing objPid.
+     *
+     * @param objPid pid of the object whose proxy will be destroyed.
+     * @return the path of the parent object the proxy was removed from.
+     */
+    public String destroyProxy(PID objPid) {
+        ProxyInfo proxyInfo = getProxyInfo(objPid);
+        URI proxyUri = proxyInfo.proxyUri;
 
         try (FcrepoResponse resp = fcrepoClient.delete(proxyUri).perform()) {
         } catch (FcrepoOperationFailedException | IOException e) {
@@ -68,6 +67,8 @@ public void destroyProxy(PID objPid) {
         } catch (FcrepoOperationFailedException | IOException e) {
             throw new ServiceException("Unable to clean up proxy tombstone for " + objPid, e);
         }
+
+        return proxyInfo.sourcePath;
     }
 
     private final static String PROXY_QUERY =
@@ -78,7 +79,7 @@ public void destroyProxy(PID objPid) {
             "  FILTER regex(str(?proxyuri), \"/member\")\n" +
             "}";
 
-    private URI getProxyUri(PID pid) {
+    private ProxyInfo getProxyInfo(PID pid) {
         String query = String.format(PROXY_QUERY, pid.getRepositoryPath());
 
         try (QueryExecution exec = sparqlQueryService.executeQuery(query)) {
@@ -89,23 +90,34 @@ private URI getProxyUri(PID pid) {
                 Resource proxyUri = soln.getResource("proxyuri");
                 Resource parentResc = soln.getResource("parent");
 
-                // Store the pid of the content container owning this proxy as a move source
-                addPidToSource(pid, parentResc.getURI());
-
-                return URI.create(proxyUri.getURI());
+                return new ProxyInfo(URI.create(proxyUri.getURI()), parentResc.getURI());
             }
         }
         return null;
     }
 
-        private void addPidToSource(PID pid, String sourcePath) {
-            String sourceId = PIDs.get(sourcePath).getId();
-            Collection<PID> pidsForSource = sourceToPid.get(sourceId);
-            if (pidsForSource == null) {
-                pidsForSource = new ArrayList<>();
-                sourceToPid.put(sourceId, pidsForSource);
-            }
-            pidsForSource.add(pid);
+    /**
+     * @param sparqlQueryService the sparqlQueryService to set
+     */
+    public void setSparqlQueryService(SparqlQueryService sparqlQueryService) {
+        this.sparqlQueryService = sparqlQueryService;
+    }
+
+    /**
+     * @param fcrepoClient the fcrepoClient to set
+     */
+    public void setFcrepoClient(FcrepoClient fcrepoClient) {
+        this.fcrepoClient = fcrepoClient;
+    }
+
+    private static class ProxyInfo {
+        public URI proxyUri;
+        public String sourcePath;
+
+        public ProxyInfo(URI proxyUri, String sourcePath) {
+            this.proxyUri = proxyUri;
+            this.sourcePath = sourcePath;
         }
 
+    }
 }
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsJob.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsJob.java
index 5a13a1ddb7..0ab56add87 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsJob.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsJob.java
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.security.SecureRandom;
 import java.text.ParseException;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
@@ -25,7 +26,6 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import org.fcrepo.client.FcrepoClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -48,7 +48,6 @@
 import edu.unc.lib.dl.search.solr.model.ObjectPath;
 import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;
 import edu.unc.lib.dl.services.OperationsMessageSender;
-import edu.unc.lib.dl.sparql.SparqlQueryService;
 import edu.unc.lib.dl.util.DateTimeUtil;
 import io.dropwizard.metrics5.Timer;
 
@@ -66,8 +65,6 @@
     private AccessControlService aclService;
     private RepositoryObjectLoader repositoryObjectLoader;
     private TransactionManager transactionManager;
-    private SparqlQueryService sparqlQueryService;
-    private FcrepoClient fcrepoClient;
     private OperationsMessageSender operationsMessageSender;
     private ObjectPathFactory objectPathFactory;
     private ActivityMetricsClient operationMetrics;
@@ -85,11 +82,10 @@
 
     private static final Timer timer = TimerFactory.createTimerForClass(MoveObjectsJob.class);
 
-    public MoveObjectsJob(AgentPrincipals agent, PID destination, List<PID> pids, DestroyProxyService proxyService) {
+    public MoveObjectsJob(AgentPrincipals agent, PID destination, List<PID> pids) {
         this.agent = agent;
         this.destinationPid = destination;
         this.pids = pids;
-        this.proxyService = proxyService;
         sourceToPid = new HashMap<>();
         moveId = Long.toString(new SecureRandom().nextLong());
     }
@@ -145,11 +141,23 @@ private void moveObject(PID objPid) {
 
         ContentObject moveContent = (ContentObject) repositoryObjectLoader.getRepositoryObject(objPid);
 
-        proxyService.destroyProxy(objPid);
+        String sourcePath = proxyService.destroyProxy(objPid);
+        // Store the pid of the content container owning this proxy as a move source
+        addPidToSource(objPid, sourcePath);
 
         destContainer.addMember(moveContent);
     }
 
+    private void addPidToSource(PID pid, String sourcePath) {
+        String sourceId = PIDs.get(sourcePath).getId();
+        Collection<PID> pidsForSource = sourceToPid.get(sourceId);
+        if (pidsForSource == null) {
+            pidsForSource = new ArrayList<>();
+            sourceToPid.put(sourceId, pidsForSource);
+        }
+        pidsForSource.add(pid);
+    }
+
     private void logMoveAction() {
         Map<String, Object> logEntry = new HashMap<>();
         logEntry.put("event", "moved");
@@ -215,20 +223,6 @@ public void setTransactionManager(TransactionManager transactionManager) {
         this.transactionManager = transactionManager;
     }
 
-    /**
-     * @param sparqlQueryService the sparqlQueryService to set
-     */
-    public void setSparqlQueryService(SparqlQueryService sparqlQueryService) {
-        this.sparqlQueryService = sparqlQueryService;
-    }
-
-    /**
-     * @param fcrepoClient the fcrepoClient to set
-     */
-    public void setFcrepoClient(FcrepoClient fcrepoClient) {
-        this.fcrepoClient = fcrepoClient;
-    }
-
     /**
      * @param operationsMessageSender the operationsMessageSender to set
      */
@@ -256,4 +250,11 @@ public void setOperationMetrics(ActivityMetricsClient operationMetrics) {
     public String getMoveId() {
         return moveId;
     }
+
+    /**
+     * @param proxyService the proxyService to set
+     */
+    public void setProxyService(DestroyProxyService proxyService) {
+        this.proxyService = proxyService;
+    }
 }
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsService.java
index 082550e00a..2d4b588d4b 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsService.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/move/MoveObjectsService.java
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
-import org.fcrepo.client.FcrepoClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,7 +30,6 @@
 import edu.unc.lib.dl.reporting.ActivityMetricsClient;
 import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;
 import edu.unc.lib.dl.services.OperationsMessageSender;
-import edu.unc.lib.dl.sparql.SparqlQueryService;
 
 /**
  * Service which moves content objects between containers.
@@ -45,8 +43,6 @@
     private AccessControlService aclService;
     private RepositoryObjectLoader repositoryObjectLoader;
     private TransactionManager transactionManager;
-    private SparqlQueryService sparqlQueryService;
-    private FcrepoClient fcrepoClient;
     private OperationsMessageSender operationsMessageSender;
     private ObjectPathFactory objectPathFactory;
     private boolean asynchronous;
@@ -70,15 +66,14 @@ public String moveObjects(AgentPrincipals agent, PID destinationPid, List<PID> p
             throw new IllegalArgumentException("Must provide agent identification information");
         }
 
-        MoveObjectsJob job = new MoveObjectsJob(agent, destinationPid, pids, proxyService);
+        MoveObjectsJob job = new MoveObjectsJob(agent, destinationPid, pids);
         job.setAclService(aclService);
-        job.setFcrepoClient(fcrepoClient);
         job.setRepositoryObjectLoader(repositoryObjectLoader);
-        job.setSparqlQueryService(sparqlQueryService);
         job.setTransactionManager(transactionManager);
         job.setOperationsMessageSender(operationsMessageSender);
         job.setObjectPathFactory(objectPathFactory);
         job.setOperationMetrics(operationMetrics);
+        job.setProxyService(proxyService);
 
         if (asynchronous) {
             log.info("User {} is queueing move operation {} of {} objects to destination {}",
@@ -112,20 +107,6 @@ public void setTransactionManager(TransactionManager transactionManager) {
         this.transactionManager = transactionManager;
     }
 
-    /**
-     * @param sparqlQueryService the sparqlQueryService to set
-     */
-    public void setSparqlQueryService(SparqlQueryService sparqlQueryService) {
-        this.sparqlQueryService = sparqlQueryService;
-    }
-
-    /**
-     * @param fcrepoClient the fcrepoClient to set
-     */
-    public void setFcrepoClient(FcrepoClient fcrepoClient) {
-        this.fcrepoClient = fcrepoClient;
-    }
-
     /**
      * @param asynchronous the asynchronous to set
      */
diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/move/MoveObjectsServiceTest.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/move/MoveObjectsServiceTest.java
index 8e1935f7bd..7a35bf5554 100755
--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/move/MoveObjectsServiceTest.java
+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/move/MoveObjectsServiceTest.java
@@ -141,7 +141,6 @@
     @Mock
     private ObjectPath sourceObjPath;
 
-
     private MoveObjectsService service;
 
     private ListAppender<ILoggingEvent> actionAppender;
@@ -152,9 +151,8 @@ public void init() throws Exception {
 
         service = new MoveObjectsService();
         service.setAclService(aclService);
-        service.setFcrepoClient(fcrepoClient);
+
         service.setRepositoryObjectLoader(repositoryObjectLoader);
-        service.setSparqlQueryService(sparqlQueryService);
         service.setTransactionManager(transactionManager);
         service.setOperationsMessageSender(operationsMessageSender);
         service.setObjectPathFactory(objectPathFactory);
@@ -239,16 +237,17 @@ public void testMoveObject() throws Exception {
         when(mockResultSet.hasNext()).thenReturn(true, false);
         when(mockProxyResource.getURI()).thenReturn(proxyUri);
         when(mockParentResource.getURI()).thenReturn(sourcePid.getRepositoryPath());
+        when(proxyService.destroyProxy(any(PID.class))).thenReturn(sourcePid.getRepositoryPath());
 
         List<PID> movePids = asList(makeMoveObject());
         service.moveObjects(mockAgent, destPid, movePids);
 
-        //verify(fcrepoClient).delete(eq(URI.create(proxyUri)));
+        verify(proxyService).destroyProxy(movePids.get(0));
         verify(mockDestObj).addMember(any(ContentObject.class));
         verify(operationsMessageSender).sendMoveOperation(anyString(), anyListOf(PID.class),
                 eq(destPid), anyListOf(PID.class), eq(null));
 
-        //verifyLogMessage(sourcePid, movePids);
+        verifyLogMessage(sourcePid, movePids);
     }
 
     @Test
@@ -259,11 +258,12 @@ public void testMoveMultipleObjects() throws Exception {
         when(mockResultSet.hasNext()).thenReturn(true, true, false);
         when(mockProxyResource.getURI()).thenReturn(proxyUri1, proxyUri2);
         when(mockParentResource.getURI()).thenReturn(sourcePid.getRepositoryPath());
+        when(proxyService.destroyProxy(any(PID.class))).thenReturn(sourcePid.getRepositoryPath());
 
         List<PID> movePids = asList(makeMoveObject(), makeMoveObject());
         service.moveObjects(mockAgent, destPid, movePids);
 
-        //verify(fcrepoClient, times(4)).delete(any(URI.class));
+        verify(proxyService, times(2)).destroyProxy(any(PID.class));
         verify(mockDestObj, times(2)).addMember(any(ContentObject.class));
         verify(operationsMessageSender).sendMoveOperation(anyString(), anyListOf(PID.class),
                 eq(destPid), anyListOf(PID.class), eq(null));
diff --git a/services/src/main/webapp/WEB-INF/service-context.xml b/services/src/main/webapp/WEB-INF/service-context.xml
index c9b27626a8..13ce95ec39 100755
--- a/services/src/main/webapp/WEB-INF/service-context.xml
+++ b/services/src/main/webapp/WEB-INF/service-context.xml
@@ -81,18 +81,22 @@
         <constructor-arg ref="jedisPool" />
     </bean>
     
+    <bean id="destroyProxyService" class="edu.unc.lib.dl.persist.services.destroy.DestroyProxyService">
+        <property name="sparqlQueryService" ref="sparqlQueryService" />
+        <property name="fcrepoClient" ref="fcrepoClient" />
+    </bean>
+    
     <bean id="moveObjectsService"
         class="edu.unc.lib.dl.persist.services.move.MoveObjectsService">
         <property name="aclService" ref="aclService" />
         <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
         <property name="transactionManager" ref="transactionManager" />
-        <property name="sparqlQueryService" ref="sparqlQueryService" />
-        <property name="fcrepoClient" ref="fcrepoClient" />
         <property name="operationsMessageSender" ref="operationsMessageSender" />
         <property name="objectPathFactory" ref="objectPathFactory" />
         <property name="asynchronous" value="true" />
         <property name="moveExecutor" ref="moveExecutor" />
         <property name="operationMetrics" ref="activityMetricsClient" />
+        <property name="proxyService" ref="destroyProxyService" />
     </bean>
 
     <!-- <bean id="rollbackMoveJob" class="edu.unc.lib.dl.cdr.services.processing.MoveRollbackJob"></bean>
diff --git a/services/src/test/resources/move-objects-it-servlet.xml b/services/src/test/resources/move-objects-it-servlet.xml
index 1deb4e2a14..40c2010914 100755
--- a/services/src/test/resources/move-objects-it-servlet.xml
+++ b/services/src/test/resources/move-objects-it-servlet.xml
@@ -32,15 +32,19 @@
 
     <context:component-scan resource-pattern="**/MoveObjectsController*" base-package="edu.unc.lib.dl.cdr.services.rest.modify"/>
     
+    <bean id="destroyProxyService" class="edu.unc.lib.dl.persist.services.destroy.DestroyProxyService">
+        <property name="sparqlQueryService" ref="sparqlQueryService" />
+        <property name="fcrepoClient" ref="fcrepoClient" />
+    </bean>
+    
     <bean id="moveObjectsService" class="edu.unc.lib.dl.persist.services.move.MoveObjectsService">
         <property name="aclService" ref="aclService" />
         <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
-        <property name="sparqlQueryService" ref="sparqlQueryService" />
         <property name="operationsMessageSender" ref="operationsMessageSender" />
         <property name="operationMetrics" ref="operationMetrics" />
         <property name="objectPathFactory" ref="objectPathFactory" />
-        <property name="fcrepoClient" ref="fcrepoClient" />
         <property name="transactionManager" ref="transactionManager" />
+        <property name="proxyService" ref="destroyProxyService" />
     </bean>
     
     <bean id="aclService" class="org.mockito.Mockito" factory-method="mock">
