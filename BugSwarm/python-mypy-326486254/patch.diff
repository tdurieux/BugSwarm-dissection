diff --git a/ISSUE_TEMPLATE.md b/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000000..be838e9148
--- /dev/null
+++ b/ISSUE_TEMPLATE.md
@@ -0,0 +1,16 @@
+Please provide more information to help us understand the issue:
+
+* Are you reporting a bug, or opening a feature request?
+* Please insert below the code you are checking with mypy,
+  or a mock-up repro if the source is private. We would appreciate
+  if you try to simplify your case to a minimal repro.
+* What is the actual behavior/output?
+* What is the behavior/output you expect?
+* What are the versions of mypy and Python you are using?
+  Do you see the same issue after installing mypy from Git master?
+* What are the mypy flags you are using? (For example --strict-optional)
+* If mypy crashed with a traceback, please paste
+  the full traceback below.
+
+(You can freely edit this text, please remove all the lines
+you believe are unnecessary.)
diff --git a/docs/source/kinds_of_types.rst b/docs/source/kinds_of_types.rst
index d55926a814..b3c8ae6c07 100644
--- a/docs/source/kinds_of_types.rst
+++ b/docs/source/kinds_of_types.rst
@@ -986,6 +986,11 @@ annotated the first example as the following:
    def squares(n: int) -> Generator[int, None, None]:
        for i in range(n):
            yield i * i
+           
+This is slightly different from using ``Iterable[int]`` or ``Iterator[int]``,
+since generators have ``close()``, ``send()``, and ``throw()`` methods that
+generic iterables don't. If you will call these methods on the returned
+generator, use the ``Generator`` type instead of ``Iterable`` or ``Iterator``.
 
 .. _async-and-await:
 
diff --git a/mypy/checker.py b/mypy/checker.py
index 56d22c1f44..0a268a0343 100644
--- a/mypy/checker.py
+++ b/mypy/checker.py
@@ -2675,7 +2675,7 @@ def intersect_instance_callable(self, typ: Instance, callable_type: CallableType
 
         # Build up a fake FuncDef so we can populate the symbol table.
         func_def = FuncDef('__call__', [], Block([]), callable_type)
-        func_def._fullname = gen_name + '.__call__'
+        func_def._fullname = '__call__'
         func_def.info = info
         info.names['__call__'] = SymbolTableNode(MDEF, func_def, callable_type)
 
