diff --git a/config/checkstyle_non_main_files_suppressions.xml b/config/checkstyle_non_main_files_suppressions.xml
index 4311d5e47b..e2497d2a0a 100755
--- a/config/checkstyle_non_main_files_suppressions.xml
+++ b/config/checkstyle_non_main_files_suppressions.xml
@@ -22,4 +22,10 @@
     <!--Empty file cannot have any new line at the end. -->
     <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]checks[\\/]misc[\\/]newlineatendoffile[\\/]InputEmptyFile\.txt"/>
     <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]InputRegressionEmptyAst\.txt"/>
+
+    <!-- File with CR line separators used for testing -->
+    <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]astprinter[\\/]InputFullOfBlockCommentsCR\.java"/>
+
+    <!-- For the testing purposes -->
+    <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]checks[\\/]misc[\\/]uniqueproperties[\\/]InputUniquePropertiesWithDuplicates\.properties"/>
 </suppressions>
diff --git a/config/findbugs-exclude.xml b/config/findbugs-exclude.xml
index d0340a82cd..0f4b8a21fe 100755
--- a/config/findbugs-exclude.xml
+++ b/config/findbugs-exclude.xml
@@ -97,4 +97,10 @@
         <Method name="makeCodeSelection"/>
         <Bug pattern="RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT"/>
     </Match>
+    <Match>
+        <!-- false-positive. Bugs reported even though casting is done only after verification using instanceof -->
+        <Class name="com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser"/>
+        <Method name="parseJavadocAsDetailNode"/>
+        <Bug pattern="BC_UNCONFIRMED_CAST_OF_RETURN_VALUE"/>
+    </Match>
 </FindBugsFilter>
diff --git a/pom.xml b/pom.xml
index 5571c0bfa6..2320e9d6ce 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1546,8 +1546,8 @@
                 <haltOnFailure>true</haltOnFailure>
                 <branchRate>100</branchRate>
                 <lineRate>100</lineRate>
-                <totalBranchRate>81</totalBranchRate>
-                <totalLineRate>84</totalLineRate>
+                <totalBranchRate>83</totalBranchRate>
+                <totalLineRate>88</totalLineRate>
                 <regexes>
                   <regex>
                     <pattern>com.puppycrawl.tools.checkstyle.grammars.GeneratedJavaRecognizer</pattern>
@@ -1561,13 +1561,13 @@
                   </regex>
                   <regex>
                     <pattern>com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocParser</pattern>
-                    <branchRate>23</branchRate>
-                    <lineRate>27</lineRate>
+                    <branchRate>34</branchRate>
+                    <lineRate>45</lineRate>
                   </regex>
                   <regex>
                     <pattern>com.puppycrawl.tools.checkstyle.grammars.javadoc.JavadocLexer</pattern>
-                    <branchRate>41</branchRate>
-                    <lineRate>55</lineRate>
+                    <branchRate>57</branchRate>
+                    <lineRate>75</lineRate>
                   </regex>
                 </regexes>
               </check>
@@ -1652,7 +1652,7 @@
                 <param>com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheckTest</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.UpperEllCheckTest</param>
               </targetTests>
-              <mutationThreshold>90</mutationThreshold>
+              <mutationThreshold>93</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index 484cfde233..8ba3904965 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -19,16 +19,24 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import java.util.ArrayDeque;
+import java.util.Deque;
+import java.util.List;
+
 import org.antlr.v4.runtime.ANTLRInputStream;
 import org.antlr.v4.runtime.BailErrorStrategy;
 import org.antlr.v4.runtime.BaseErrorListener;
+import org.antlr.v4.runtime.BufferedTokenStream;
 import org.antlr.v4.runtime.CommonTokenStream;
+import org.antlr.v4.runtime.FailedPredicateException;
 import org.antlr.v4.runtime.InputMismatchException;
+import org.antlr.v4.runtime.NoViableAltException;
 import org.antlr.v4.runtime.Parser;
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.antlr.v4.runtime.RecognitionException;
 import org.antlr.v4.runtime.Recognizer;
 import org.antlr.v4.runtime.Token;
+import org.antlr.v4.runtime.misc.Interval;
 import org.antlr.v4.runtime.misc.ParseCancellationException;
 import org.antlr.v4.runtime.tree.ParseTree;
 import org.antlr.v4.runtime.tree.TerminalNode;
@@ -120,11 +128,29 @@ public ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
                                 + JAVADOC_START.length());
             result.setTree(tree);
         }
-        catch (ParseCancellationException | IllegalArgumentException ignored) {
-            // If syntax error occurs then message is printed by error listener
-            // and parser throws this runtime exception to stop parsing.
-            // Just stop processing current Javadoc comment.
-            final ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
+        catch (ParseCancellationException | IllegalArgumentException ex) {
+            ParseErrorMessage parseErrorMessage = null;
+
+            if (ex.getCause() instanceof FailedPredicateException
+                    || ex.getCause() instanceof NoViableAltException) {
+                final RecognitionException recognitionEx = (RecognitionException) ex.getCause();
+                if (recognitionEx.getCtx() instanceof JavadocParser.HtmlTagContext) {
+                    final Token htmlTagNameStart = getMissedHtmlTag(recognitionEx);
+                    parseErrorMessage = new ParseErrorMessage(
+                            errorListener.offset + htmlTagNameStart.getLine(),
+                            MSG_JAVADOC_MISSED_HTML_CLOSE,
+                            htmlTagNameStart.getCharPositionInLine(),
+                            htmlTagNameStart.getText());
+                }
+            }
+
+            if (parseErrorMessage == null) {
+                // If syntax error occurs then message is printed by error listener
+                // and parser throws this runtime exception to stop parsing.
+                // Just stop processing current Javadoc comment.
+                parseErrorMessage = errorListener.getErrorMessage();
+            }
+
             result.setParseErrorMessage(parseErrorMessage);
         }
 
@@ -422,6 +448,60 @@ private static String getNodeClassNameWithoutContext(ParseTree node) {
         return className.substring(0, className.length() - contextLength);
     }
 
+    /**
+     * Method to get the missed HTML tag to generate more informative error message for the user.
+     * This method doesn't concern itself with
+     * <a href="https://www.w3.org/TR/html51/syntax.html#void-elements">void elements</a>
+     * since it is forbidden to close them.
+     * Missed HTML tags for the following tags will <i>not</i> generate an error message from ANTLR:
+     * {@code
+     * <p>
+     * <li>
+     * <tr>
+     * <td>
+     * <th>
+     * <body>
+     * <colgroup>
+     * <dd>
+     * <dt>
+     * <head>
+     * <html>
+     * <option>
+     * <tbody>
+     * <thead>
+     * <tfoot>
+     * }
+     * @param exception {@code NoViableAltException} object catched while parsing javadoc
+     * @return returns appropriate {@link Token} if a HTML close tag is missed;
+     *     null otherwise
+     */
+    private static Token getMissedHtmlTag(RecognitionException exception) {
+        Token htmlTagNameStart = null;
+        final Interval sourceInterval = exception.getCtx().getSourceInterval();
+        final List<Token> tokenList = ((BufferedTokenStream) exception.getInputStream())
+                .getTokens(sourceInterval.a, sourceInterval.b);
+        final Deque<Token> stack = new ArrayDeque<>();
+        for (int i = 0; i < tokenList.size(); i++) {
+            final Token token = tokenList.get(i);
+            if (token.getType() == JavadocTokenTypes.HTML_TAG_NAME
+                    && tokenList.get(i - 1).getType() == JavadocTokenTypes.START) {
+                stack.push(token);
+            }
+            else if (token.getType() == JavadocTokenTypes.HTML_TAG_NAME && !stack.isEmpty()) {
+                if (stack.peek().getText().equals(token.getText())) {
+                    stack.pop();
+                }
+                else {
+                    htmlTagNameStart = stack.pop();
+                }
+            }
+        }
+        if (htmlTagNameStart == null) {
+            htmlTagNameStart = stack.pop();
+        }
+        return htmlTagNameStart;
+    }
+
     /**
      * Custom error listener for JavadocParser that prints user readable errors.
      */
@@ -474,17 +554,11 @@ public void syntaxError(
                 int line, int charPositionInLine,
                 String msg, RecognitionException ex) {
             final int lineNumber = offset + line;
-            final Token token = (Token) offendingSymbol;
-
-            if (MSG_JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {
-                errorMessage = new ParseErrorMessage(lineNumber,
-                        MSG_JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());
 
-                throw new IllegalArgumentException(msg);
-            }
-            else if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {
+            if (MSG_JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {
                 errorMessage = new ParseErrorMessage(lineNumber,
-                        MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());
+                        MSG_JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine,
+                        ((Token) offendingSymbol).getText());
 
                 throw new IllegalArgumentException(msg);
             }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
index ce915ab2bd..c1d7425c6d 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java
@@ -67,7 +67,7 @@ public void visitToken(DetailAST ast) {
             if (variableAST != null) {
                 final boolean isJavaStyle =
                     variableAST.getLineNo() > ast.getLineNo()
-                    || variableAST.getColumnNo() > ast.getColumnNo();
+                    || variableAST.getColumnNo() - ast.getColumnNo() > -1;
 
                 if (isJavaStyle != javaStyle) {
                     log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
index 8a8c3fd9ce..a9d0f3763c 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java
@@ -355,7 +355,7 @@ public void setLimitedTokens(String... limitedTokensParam) {
         int maxToken = 0;
         for (int i = 0; i < limitedTokensParam.length; i++) {
             limitedTokens[i] = TokenUtils.getTokenId(limitedTokensParam[i]);
-            if (limitedTokens[i] > maxToken) {
+            if (limitedTokens[i] >= maxToken + 1) {
                 maxToken = limitedTokens[i];
             }
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 218225ceaf..6e7cbc7cef 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -236,7 +236,6 @@ private static boolean isValidLanguageCode(final String userSpecifiedLanguageCod
 
     @Override
     public void beginProcessing(String charset) {
-        super.beginProcessing(charset);
         filesToProcess.clear();
     }
 
@@ -248,8 +247,6 @@ protected void processFiltered(File file, FileText fileText) {
 
     @Override
     public void finishProcessing() {
-        super.finishProcessing();
-
         final Set<ResourceBundle> bundles = groupFilesIntoBundles(filesToProcess, baseName);
         for (ResourceBundle currentBundle : bundles) {
             checkExistenceOfDefaultTranslation(currentBundle);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
index 72df156f77..afbd42f464 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
@@ -111,7 +111,9 @@ private static int getLineNumber(FileText fileText, String keyName) {
             }
             ++lineNumber;
         }
-        if (lineNumber > fileText.size()) {
+        // -1 as check seeks for the first duplicate occurance in file,
+        // so it cannot be the last line.
+        if (lineNumber > fileText.size() - 1) {
             lineNumber = 0;
         }
         return lineNumber;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
index 4b6fca11f0..a86328e6c1 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -44,7 +44,7 @@
  * <li>groups static imports: ensures that static imports are at the top (or the
  * bottom) of all the imports, or above (or under) each group, or are treated
  * like non static imports (@see {@link ImportOrderOption}</li>
- * </ul>
+ * </ul>.
  *
  * <pre>
  * Properties:
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4 b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
index 0ef2d12730..b466c8af5c 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParser.g4
@@ -114,16 +114,7 @@ htmlTag: htmlElementStart (htmlElement
                               | NEWLINE
                               | text
                               | javadocInlineTag)* htmlElementEnd
-
-            | htmlElementStart (htmlElement
-                              | ({!isNextJavadocTag()}? LEADING_ASTERISK)
-                              | htmlComment
-                              | CDATA
-                              | NEWLINE
-                              | text
-                              | javadocInlineTag)*
-            {notifyErrorListeners($htmlElementStart.ctx.getToken(HTML_TAG_NAME, 0).getSymbol()
-                                         , "javadoc.missed.html.close", null);}
+                              {isSameTagNames($htmlElementStart.ctx, $htmlElementEnd.ctx)}?
             ;
 
 //////////////////////////////////////////////////////////////////////////////////////
@@ -133,7 +124,7 @@ pTagStart: START P_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)*
 pTagEnd: START SLASH P_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 paragraph: pTagStart
             (htmlTag
-            | emptyTag
+            | singletonElement
             | li
             | tr
             | td
@@ -175,7 +166,7 @@ liTagStart: START LI_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 liTagEnd: START SLASH LI_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 li: liTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | tr
         | td
@@ -217,7 +208,7 @@ trTagStart: START TR_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 trTagEnd: START SLASH TR_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 tr: trTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | td
@@ -259,7 +250,7 @@ tdTagStart: START TD_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 tdTagEnd: START SLASH TD_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 td: tdTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -301,7 +292,7 @@ thTagStart: START TH_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 thTagEnd: START SLASH TH_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 th: thTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -343,7 +334,7 @@ bodyTagStart: START BODY_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK |
 bodyTagEnd: START SLASH BODY_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 body: bodyTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -385,7 +376,7 @@ colgroupTagStart: START COLGROUP_HTML_TAG_NAME (attribute | NEWLINE | LEADING_AS
 colgroupTagEnd: START SLASH COLGROUP_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 colgroup: colgroupTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -427,7 +418,7 @@ ddTagStart: START DD_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 ddTagEnd: START SLASH DD_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 dd: ddTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -469,7 +460,7 @@ dtTagStart: START DT_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK | WS)
 dtTagEnd: START SLASH DT_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 dt: dtTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -511,7 +502,7 @@ headTagStart: START HEAD_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK |
 headTagEnd: START SLASH HEAD_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 head: headTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -553,7 +544,7 @@ htmlTagStart: START HTML_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK |
 htmlTagEnd: START SLASH HTML_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 html: htmlTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -595,7 +586,7 @@ optionTagStart: START OPTION_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERI
 optionTagEnd: START SLASH OPTION_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 option: optionTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -637,7 +628,7 @@ tbodyTagStart: START TBODY_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK
 tbodyTagEnd: START SLASH TBODY_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 tbody: tbodyTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -679,7 +670,7 @@ tfootTagStart: START TFOOT_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK
 tfootTagEnd: START SLASH TFOOT_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 tfoot: tfootTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
@@ -721,7 +712,7 @@ theadTagStart: START THEAD_HTML_TAG_NAME (attribute | NEWLINE | LEADING_ASTERISK
 theadTagEnd: START SLASH THEAD_HTML_TAG_NAME (NEWLINE | LEADING_ASTERISK | WS)* END;
 thead: theadTagStart
     (htmlTag
-        | emptyTag
+        | singletonElement
         | paragraph
         | li
         | tr
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
index 4158376df0..1e9440ef05 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
@@ -19,15 +19,15 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.MSG_JAVADOC_MISSED_HTML_CLOSE;
+import static com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.MSG_JAVADOC_PARSE_RULE_ERROR;
+import static com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.MSG_JAVADOC_WRONG_SINGLETON_TAG;
+import static com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.ParseErrorMessage;
 import static com.puppycrawl.tools.checkstyle.internal.TestUtils.assertUtilsClassHasPrivateConstructor;
 import static org.junit.Assert.assertEquals;
 
 import java.io.File;
 import java.lang.reflect.Method;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Paths;
-import java.util.Locale;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -37,7 +37,13 @@
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class DetailNodeTreeStringPrinterTest extends AbstractPathTestSupport {
+public class DetailNodeTreeStringPrinterTest extends AbstractTreeTestSupport {
+
+    // [REFLECTION]
+    // DetailNodeTreeStringPrinter#getParseErrorMessage is used for creating error messages
+    // for validating those obtained in UTs against the ones created.
+    private static final Method GET_PARSE_ERROR_MESSAGE = Whitebox.getMethod(
+            DetailNodeTreeStringPrinter.class, "getParseErrorMessage", ParseErrorMessage.class);
 
     @Override
     protected String getPackageLocation() {
@@ -51,28 +57,22 @@ public void testIsProperUtilsClass() throws ReflectiveOperationException {
 
     @Test
     public void testParseFile() throws Exception {
-        final String actual = DetailNodeTreeStringPrinter.printFileAst(
-            new File(getPath("InputJavadocComment.javadoc")))
-                .replaceAll("\\\\r\\\\n", "\\\\n");
-        final String expected = new String(Files.readAllBytes(Paths.get(
-            getPath("expectedInputJavadocComment.txt"))), StandardCharsets.UTF_8)
-            .replaceAll("\\\\r\\\\n", "\\\\n");
-        assertEquals("Invalid parsing result", expected, actual);
+        verifyJavadocTree(getPath("expectedInputJavadocComment.txt"),
+                getPath("InputJavadocComment.javadoc"));
     }
 
     @Test
     public void testParseFileWithError() throws Exception {
-        LocalizedMessage.setLocale(Locale.ROOT);
         try {
             DetailNodeTreeStringPrinter.printFileAst(
                     new File(getPath("InputJavadocWithError.javadoc")));
-            Assert.fail("Javadoc parser didn't failed on missing end tag");
+            Assert.fail("Javadoc parser didn't fail on missing end tag");
         }
         catch (IllegalArgumentException ex) {
-            final String expected = "[ERROR:0] Javadoc comment at column 1 has parse error. "
-                    + "Missed HTML close tag 'qwe'. Sometimes it means that close tag missed "
-                    + "for one of previous tags.";
-            assertEquals("Invalidexception message", expected, ex.getMessage());
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(0, MSG_JAVADOC_MISSED_HTML_CLOSE, 1, "qwe"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
         }
     }
 
@@ -103,12 +103,134 @@ public void testCreationOfFakeCommentBlock() throws Exception {
 
     @Test
     public void testNoUnnecessaryTextinJavadocAst() throws Exception {
-        final String actual = DetailNodeTreeStringPrinter.printFileAst(
-                new File(getPath("InputNoUnnecessaryTextInJavadocAst.javadoc")))
-                .replaceAll("\\\\r\\\\n", "\\\\n");
-        final String expected = new String(Files.readAllBytes(Paths.get(
-                getPath("expectedNoUnnecessaryTextInJavadocAst.txt"))), StandardCharsets.UTF_8)
-                .replaceAll("\\\\r\\\\n", "\\\\n");
-        assertEquals("Invalid parsing result", expected, actual);
+        verifyJavadocTree(getPath("expectedNoUnnecessaryTextInJavadocAst.txt"),
+                getPath("InputNoUnnecessaryTextInJavadocAst.javadoc"));
+    }
+
+    @Test
+    public void testMissedHtmlTagParseErrorMessage() throws Exception {
+        final String actual = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                new ParseErrorMessage(35, MSG_JAVADOC_MISSED_HTML_CLOSE, 7, "xyz"));
+        final LocalizedMessage localizedMessage = new LocalizedMessage(
+                35,
+                "com.puppycrawl.tools.checkstyle.checks.javadoc.messages",
+                MSG_JAVADOC_MISSED_HTML_CLOSE,
+                new Object[] {7, "xyz"},
+                "",
+                DetailNodeTreeStringPrinter.class,
+                null);
+        final String expected = "[ERROR:35] " + localizedMessage.getMessage();
+        assertEquals("Javadoc parse error message for missed HTML tag doesn't meet expectations",
+                expected, actual);
+    }
+
+    @Test
+    public void testParseErrorMessage() throws Exception {
+        final String actual = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                new ParseErrorMessage(10, MSG_JAVADOC_PARSE_RULE_ERROR,
+                        9, "no viable alternative at input ' xyz'", "SOME_JAVADOC_ELEMENT"));
+        final LocalizedMessage localizedMessage = new LocalizedMessage(
+                10,
+                "com.puppycrawl.tools.checkstyle.checks.javadoc.messages",
+                MSG_JAVADOC_PARSE_RULE_ERROR,
+                new Object[] {9, "no viable alternative at input ' xyz'", "SOME_JAVADOC_ELEMENT"},
+                "",
+                DetailNodeTreeStringPrinter.class,
+                null);
+        final String expected = "[ERROR:10] " + localizedMessage.getMessage();
+        assertEquals("Javadoc parse error message doesn't meet expectations", expected, actual);
+    }
+
+    @Test
+    public void testWrongSingletonParseErrorMessage() throws Exception {
+        final String actual = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                new ParseErrorMessage(100, MSG_JAVADOC_WRONG_SINGLETON_TAG,
+                        9, "tag"));
+        final LocalizedMessage localizedMessage = new LocalizedMessage(
+                100,
+                "com.puppycrawl.tools.checkstyle.checks.javadoc.messages",
+                MSG_JAVADOC_WRONG_SINGLETON_TAG,
+                new Object[] {9, "tag"},
+                "",
+                DetailNodeTreeStringPrinter.class,
+                null);
+        final String expected = "[ERROR:100] " + localizedMessage.getMessage();
+        assertEquals("Javadoc parse error message for void elements with close tag "
+                + "doesn't meet expectations", expected, actual);
+    }
+
+    @Test
+    public void testUnescapedJavaCodeWithGenericsInJavadoc() throws Exception {
+        try {
+            DetailNodeTreeStringPrinter.printFileAst(new File(getPath(
+                    "InputUnescapedJavaCodeWithGenericsInJavadoc.javadoc")));
+        }
+        catch (IllegalArgumentException ex) {
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(35, MSG_JAVADOC_MISSED_HTML_CLOSE, 7, "parsing"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testNoViableAltException() throws Exception {
+        try {
+            DetailNodeTreeStringPrinter.printFileAst(new File(getPath(
+                    "InputNoViableAltException.javadoc")));
+        }
+        catch (IllegalArgumentException ex) {
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(0, MSG_JAVADOC_PARSE_RULE_ERROR,
+                            9, "no viable alternative at input ' <<'", "JAVADOC_TAG"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testHtmlTagCloseBeforeTagOpen() throws Exception {
+        try {
+            DetailNodeTreeStringPrinter.printFileAst(new File(getPath(
+                    "InputHtmlTagCloseBeforeTagOpen.javadoc"
+            )));
+        }
+        catch (IllegalArgumentException ex) {
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(0, MSG_JAVADOC_PARSE_RULE_ERROR,
+                            4, "no viable alternative at input '</tag'", "HTML_ELEMENT"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testWrongHtmlTagOrder() throws Exception {
+        try {
+            DetailNodeTreeStringPrinter.printFileAst(new File(getPath(
+                    "InputWrongHtmlTagOrder.javadoc"
+            )));
+        }
+        catch (IllegalArgumentException ex) {
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(0, MSG_JAVADOC_MISSED_HTML_CLOSE, 10, "tag2"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
+        }
+    }
+
+    @Test
+    public void testOmittedStartTagForHtmlElement() throws Exception {
+        try {
+            DetailNodeTreeStringPrinter.printFileAst(new File(getPath(
+                    "InputOmittedStartTagForHtmlElement.javadoc"
+            )));
+        }
+        catch (IllegalArgumentException ex) {
+            final String expected = (String) GET_PARSE_ERROR_MESSAGE.invoke(null,
+                    new ParseErrorMessage(0, MSG_JAVADOC_MISSED_HTML_CLOSE, 3, "a"));
+            assertEquals("Generated and expected parse error messages don't match",
+                    expected, ex.getMessage());
+        }
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 67e2881448..35bc10569e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -230,7 +230,6 @@ public void testProcessNonJavaFiles() throws Exception {
         }
     }
 
-    @SuppressWarnings("unchecked")
     @Test
     public void testProcessNonJavaFilesWithoutException() throws Exception {
         final TreeWalker treeWalker = new TreeWalker();
@@ -239,8 +238,7 @@ public void testProcessNonJavaFilesWithoutException() throws Exception {
         final File file = new File(getPath("InputTreeWalkerNotJava.xml"));
         final FileText fileText = new FileText(file, StandardCharsets.ISO_8859_1.name());
         treeWalker.processFiltered(file, fileText);
-        final Collection<Checks> checks =
-                (Collection<Checks>) Whitebox.getInternalState(treeWalker, "ordinaryChecks");
+        final Collection<Checks> checks = Whitebox.getInternalState(treeWalker, "ordinaryChecks");
         assertTrue("No checks -> No parsing", checks.isEmpty());
     }
 
@@ -336,7 +334,6 @@ public void testRequiredTokenIsEmptyIntArray() throws Exception {
         }
     }
 
-    @SuppressWarnings("unchecked")
     @Test
     public void testBehaviourWithZeroChecks() throws Exception {
         final TreeWalker treeWalker = new TreeWalker();
@@ -348,8 +345,7 @@ public void testBehaviourWithZeroChecks() throws Exception {
         final FileText fileText = new FileText(file, new ArrayList<>());
 
         treeWalker.processFiltered(file, fileText);
-        final Collection<Checks> checks =
-                (Collection<Checks>) Whitebox.getInternalState(treeWalker, "ordinaryChecks");
+        final Collection<Checks> checks = Whitebox.getInternalState(treeWalker, "ordinaryChecks");
         assertTrue("No checks -> No parsing", checks.isEmpty());
     }
 
@@ -506,7 +502,7 @@ public void testFinishLocalSetupFullyInitialized() throws Exception {
         treeWalker.setTabWidth(100);
         treeWalker.finishLocalSetup();
 
-        final Context context = (Context) Whitebox.getInternalState(treeWalker, "childContext");
+        final Context context = Whitebox.getInternalState(treeWalker, "childContext");
         assertEquals("Classloader object differs from expected",
                 contextClassLoader, context.get("classLoader"));
         assertEquals("Severity differs from expected",
@@ -555,12 +551,12 @@ public void testCommentCheckDestroyIsCalledInTreeWalker() throws Exception {
      */
     @Test
     public void testIsPositionGreater() throws Exception {
-        DetailAST ast1 = createAst(1, 3);
-        DetailAST ast2 = createAst(1, 2);
-        DetailAST ast3 = createAst(2, 2);
+        final DetailAST ast1 = createAst(1, 3);
+        final DetailAST ast2 = createAst(1, 2);
+        final DetailAST ast3 = createAst(2, 2);
 
         final TreeWalker treeWalker = new TreeWalker();
-        Method isPositionGreater = Whitebox.getMethod(TreeWalker.class,
+        final Method isPositionGreater = Whitebox.getMethod(TreeWalker.class,
                 "isPositionGreater", DetailAST.class, DetailAST.class);
 
         assertTrue("Should return true when lines are equal and column is greater",
@@ -572,7 +568,7 @@ public void testIsPositionGreater() throws Exception {
     }
 
     private static DetailAST createAst(int line, int column) {
-        DetailAST ast = new DetailAST();
+        final DetailAST ast = new DetailAST();
         ast.setLineNo(line);
         ast.setColumnNo(column);
         return ast;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
index a72fb9dd4e..d92a5a8009 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java
@@ -51,7 +51,8 @@ public void testJavaStyleOn()
             createModuleConfig(ArrayTypeStyleCheck.class);
         final String[] expected = {
             "14:23: " + getCheckMessage(MSG_KEY),
-            "20:44: " + getCheckMessage(MSG_KEY),
+            "15:18: " + getCheckMessage(MSG_KEY),
+            "21:44: " + getCheckMessage(MSG_KEY),
         };
         verify(checkConfig, getPath("InputArrayTypeStyle.java"), expected);
     }
@@ -64,9 +65,9 @@ public void testJavaStyleOff()
         checkConfig.addAttribute("javaStyle", "false");
         final String[] expected = {
             "13:16: " + getCheckMessage(MSG_KEY),
-            "16:39: " + getCheckMessage(MSG_KEY),
-            "22:18: " + getCheckMessage(MSG_KEY),
-            "30:20: " + getCheckMessage(MSG_KEY),
+            "17:39: " + getCheckMessage(MSG_KEY),
+            "23:18: " + getCheckMessage(MSG_KEY),
+            "31:20: " + getCheckMessage(MSG_KEY),
         };
         verify(checkConfig, getPath("InputArrayTypeStyle.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
index b4228994cb..83e54d06a1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java
@@ -21,11 +21,15 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.AvoidEscapedUnicodeCharactersCheck.MSG_KEY;
 import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
 
+import java.lang.reflect.Method;
 import java.util.Arrays;
+import java.util.regex.Pattern;
 import java.util.stream.IntStream;
 
 import org.junit.Test;
+import org.powermock.reflect.Whitebox;
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -352,6 +356,26 @@ public void testAllowEscapesForControlCharacterSetForAllCharacters() throws Exce
         verify(checkConfig, getPath("InputAllEscapedUnicodeCharacters.java"), expected);
     }
 
+    /**
+     * Method countMatches is used only inside isOnlyUnicodeValidChars method, and when
+     * pitest mutates 316:13 countMatches++ to countMatches-- it makes no difference for
+     * isOnlyUnicodeValidChars method as it applies countMatches to both cases in comparison.
+     * It is possible to kill mutation in countMatches method by changing code in
+     * isOnlyUnicodeValidChars, but it creates new uncoverable mutations and makes code harder
+     * to understand.
+     *
+     * @throws Exception when code tested throws some exception
+     */
+    @Test
+    public void testCountMatches() throws Exception {
+        final Method countMatches = Whitebox.getMethod(AvoidEscapedUnicodeCharactersCheck.class,
+                "countMatches", Pattern.class, String.class);
+        final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck();
+        final int actual = (int) countMatches.invoke(check,
+                Pattern.compile("\\\\u[a-fA-F0-9]{4}"), "\\u1234");
+        assertEquals("Unexpected matches count", 1, actual);
+    }
+
     private static boolean isControlCharacter(final int character) {
         return Arrays.binarySearch(C0_CONTROL_CHARACTER_INDICES, character) >= 0
                 || Arrays.binarySearch(C1_CONTROL_CHARACTER_INDICES, character) >= 0
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
index df3898310e..7d8af46e00 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java
@@ -346,4 +346,34 @@ public void testWithSumLessThenMinCustomMsg() throws Exception {
 
         verify(checkConfig, getPath("InputDescendantTokenReturnFromFinally.java"), expected);
     }
+
+    @Test
+    public void testMaxTokenType() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createModuleConfig(DescendantTokenCheck.class);
+        checkConfig.addAttribute("tokens", "OBJBLOCK");
+        checkConfig.addAttribute("limitedTokens", "LCURLY,RCURLY");
+        checkConfig.addAttribute("maximumNumber", "0");
+        checkConfig.addAttribute("maximumDepth", "2");
+        final String[] expected = {
+            "6:48: " + getCheckMessage(MSG_KEY_MAX, 1, 0, "OBJBLOCK", "LCURLY"),
+            "6:48: " + getCheckMessage(MSG_KEY_MAX, 1, 0, "OBJBLOCK", "RCURLY"),
+        };
+        verify(checkConfig, getPath("InputDescendantTokenLastTokenType.java"), expected);
+    }
+
+    @Test
+    public void testMaxTokenTypeReverseOrder() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createModuleConfig(DescendantTokenCheck.class);
+        checkConfig.addAttribute("tokens", "OBJBLOCK");
+        checkConfig.addAttribute("limitedTokens", "RCURLY,LCURLY");
+        checkConfig.addAttribute("maximumNumber", "0");
+        checkConfig.addAttribute("maximumDepth", "2");
+        final String[] expected = {
+            "6:48: " + getCheckMessage(MSG_KEY_MAX, 1, 0, "OBJBLOCK", "LCURLY"),
+            "6:48: " + getCheckMessage(MSG_KEY_MAX, 1, 0, "OBJBLOCK", "RCURLY"),
+        };
+        verify(checkConfig, getPath("InputDescendantTokenLastTokenType.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
index 6bfe34a8c8..6c380c88d8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
@@ -25,7 +25,13 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Mockito.times;
+import static org.powermock.api.mockito.PowerMockito.doNothing;
 import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 
 import java.io.File;
@@ -39,7 +45,11 @@
 import java.util.Set;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
 
+import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
@@ -47,6 +57,8 @@
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
+@RunWith(PowerMockRunner.class)
+@PrepareForTest(Closeables.class)
 public class NewlineAtEndOfFileCheckTest
     extends AbstractModuleTestSupport {
     @Override
@@ -66,6 +78,31 @@ public void testNewlineLfAtEndOfFile() throws Exception {
             expected);
     }
 
+    /**
+     * Pitest requires all closes of streams and readers to be verified. Using PowerMock
+     * is almost only posibility to check it without rewriting production code.
+     *
+     * @throws Exception when code tested throws some exception
+     */
+    @Test
+    public void testCloseRandomAccessFile() throws Exception {
+        mockStatic(Closeables.class);
+        doNothing().when(Closeables.class);
+        Closeables.close(any(RandomAccessFile.class), anyBoolean());
+
+        final DefaultConfiguration checkConfig =
+                createModuleConfig(NewlineAtEndOfFileCheck.class);
+        checkConfig.addAttribute("lineSeparator", LineSeparatorOption.LF.toString());
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(
+                createChecker(checkConfig),
+                getPath("InputNewlineLfAtEndOfFile.java"),
+                expected);
+
+        verifyStatic(times(1));
+        Closeables.close(any(RandomAccessFile.class), anyBoolean());
+    }
+
     @Test
     public void testNewlineCrlfAtEndOfFile() throws Exception {
         final DefaultConfiguration checkConfig =
@@ -171,6 +208,18 @@ public void testEmptyFileFile() throws Exception {
             expected);
     }
 
+    @Test
+    public void testFileWithEmptyLineOnly() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createModuleConfig(NewlineAtEndOfFileCheck.class);
+        checkConfig.addAttribute("lineSeparator", LineSeparatorOption.LF.toString());
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(
+                createChecker(checkConfig),
+                getPath("InputNewlineAtTheEndOfTheEmptyFile.txt"),
+                expected);
+    }
+
     @Test
     public void testWrongFile() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(NewlineAtEndOfFileCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
index 736537e89c..549f71ca5a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
@@ -92,6 +92,13 @@ public void testFinePublic() throws Exception {
         verify(checkConfig, getPath("InputOuterTypeFilename2.java"), expected);
     }
 
+    @Test
+    public void testPublicClassIsNotFirst() throws Exception {
+        final DefaultConfiguration checkConfig = createModuleConfig(OuterTypeFilenameCheck.class);
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputOuterTypeFilenameCheckPublic.java"), expected);
+    }
+
     @Test
     public void testFineDefault() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(OuterTypeFilenameCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
index 62d2c595a5..46f5e431a6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -85,6 +85,16 @@ public void testDeepDepth() throws Exception {
         verify(checkConfig, getPath("InputUncommentedMain2.java"), expected);
     }
 
+    @Test
+    public void testVisitPackage() throws Exception {
+        final DefaultConfiguration checkConfig = createModuleConfig(UncommentedMainCheck.class);
+        checkConfig.addAttribute("excludedClasses", "uncommentedmain\\.InputUncommentedMain5");
+        final String[] expected = {
+            "14: " + getCheckMessage(MSG_KEY),
+        };
+        verify(checkConfig, getPath("InputUncommentedMain5.java"), expected);
+    }
+
     @Test
     public void testWrongName() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(UncommentedMainCheck.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index c80873afed..049450073c 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -22,6 +22,11 @@
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.MSG_IO_EXCEPTION_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.MSG_KEY;
 import static org.junit.Assert.assertEquals;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.times;
+import static org.powermock.api.mockito.PowerMockito.doNothing;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -39,15 +44,22 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.PowerMockRunner;
 
+import com.google.common.io.Closeables;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * JUnit tests for Unique Properties check.
  */
+@RunWith(PowerMockRunner.class)
+@PrepareForTest(Closeables.class)
 public class UniquePropertiesCheckTest extends AbstractModuleTestSupport {
 
     private DefaultConfiguration checkConfig;
@@ -88,6 +100,25 @@ public void testDefault() throws Exception {
         verify(checkConfig, getPath("InputUniqueProperties.properties"), expected);
     }
 
+    /**
+     * Pitest requires all closes of streams and readers to be verified. Using PowerMock
+     * is almost only posibility to check it without rewriting production code.
+     *
+     * @throws Exception when code tested throws some exception
+     */
+    @Test
+    public void testCloseInputStream() throws Exception {
+        mockStatic(Closeables.class);
+        doNothing().when(Closeables.class);
+        Closeables.closeQuietly(any(FileInputStream.class));
+
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputUniquePropertiesWithoutErrors.properties"), expected);
+
+        verifyStatic(times(1));
+        Closeables.closeQuietly(any(FileInputStream.class));
+    }
+
     /**
      * Tests the {@link UniquePropertiesCheck#getLineNumber(FileText, String)}
      * method return value.
@@ -109,6 +140,20 @@ public void testNotFoundKey() throws Exception {
         assertEquals("Invalid line number", 0, lineNumber);
     }
 
+    @Test
+    public void testDuplicatedProperty() throws Exception {
+        final String[] expected = {
+            "2: " + getCheckMessage(MSG_KEY, "key", 2),
+        };
+        verify(checkConfig, getPath("InputUniquePropertiesWithDuplicates.properties"), expected);
+    }
+
+    @Test
+    public void testShouldNotProcessFilesWithWrongFileExtension() throws Exception {
+        final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputUniqueProperties.txt"), expected);
+    }
+
     /**
      * Tests IO exception, that can occur during reading of properties file.
      */
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index 9c43b4676b..58d27063f0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -19,8 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import static com.puppycrawl.tools.checkstyle.JavadocDetailNodeParser.MSG_JAVADOC_PARSE_RULE_ERROR;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_MISSED_HTML_CLOSE;
-import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_PARSE_RULE_ERROR;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_WRONG_SINGLETON_TAG;
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
@@ -63,9 +63,8 @@ protected String getPackageLocation() {
     public void testNumberFormatException() throws Exception {
         final DefaultConfiguration checkConfig = createModuleConfig(TempCheck.class);
         final String[] expected = {
-            "3: " + getCheckMessage(MSG_JAVADOC_PARSE_RULE_ERROR, 52, "no viable "
-                + "alternative at input '<ul><li>a' {@link EntityEntry} (by way of {@link #;'",
-                "HTML_TAG"),
+            "3: " + getCheckMessage(MSG_JAVADOC_PARSE_RULE_ERROR, 52,
+                    "mismatched input ';' expecting MEMBER", "REFERENCE"),
         };
         verify(checkConfig, getPath("InputAbstractJavadocNumberFormatException.java"), expected);
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
index 5dad4f260b..78fcb651ff 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheckTest.java
@@ -131,6 +131,7 @@ public void testPeriodAtEnd() throws Exception {
             "17: " + getCheckMessage(MSG_SUMMARY_JAVADOC_MISSING),
             "24: " + getCheckMessage(MSG_SUMMARY_JAVADOC_MISSING),
             "31: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
+            "51: " + getCheckMessage(MSG_SUMMARY_FIRST_SENTENCE),
         };
 
         verify(checkConfig, getPath("InputPeriodAtEnd.java"), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
index 1608a5d0a5..3659ce0e33 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java
@@ -251,4 +251,10 @@ public void testJavadocWithCrAsNewline() throws Exception {
         verifyJavadocTree(getPath("expectedJavadocWithCrAsNewlineAst.txt"),
                 getPath("InputJavadocWithCrAsNewline.javadoc"));
     }
+
+    @Test
+    public void testNestingWithSingletonElement() throws Exception {
+        verifyJavadocTree(getHtmlPath("expectedNestingWithSingletonElementAst.txt"),
+                getHtmlPath("InputNestingWithSingletonElement.javadoc"));
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputHtmlTagCloseBeforeTagOpen.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputHtmlTagCloseBeforeTagOpen.javadoc
new file mode 100755
index 0000000000..70e190be82
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputHtmlTagCloseBeforeTagOpen.javadoc
@@ -0,0 +1 @@
+* </tag> <tag>
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputNoViableAltException.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputNoViableAltException.javadoc
new file mode 100755
index 0000000000..624cb929d1
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputNoViableAltException.javadoc
@@ -0,0 +1 @@
+* @see <<p>
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputOmittedStartTagForHtmlElement.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputOmittedStartTagForHtmlElement.javadoc
new file mode 100755
index 0000000000..aa984faef1
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputOmittedStartTagForHtmlElement.javadoc
@@ -0,0 +1 @@
+* <a href="http://www.redbooks.ibm.com/Redbooks.nsf/RedbookAbstracts/tips0243.html">IBM website</code>
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputUnescapedJavaCodeWithGenericsInJavadoc.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputUnescapedJavaCodeWithGenericsInJavadoc.javadoc
new file mode 100755
index 0000000000..f786d83d6f
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputUnescapedJavaCodeWithGenericsInJavadoc.javadoc
@@ -0,0 +1,41 @@
+/**
+  @Test
+  public void someTestMethod() {
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      Issue #4390: Javadoc comments containing unescaped Java code with
+      generic types leads to enormous parsing times
+      <Issue> <#4390:> <javadoc> <comments> <containing> <unescaped> <java> <code> <with>
+      <generic> <types> <leads> <to> <enormous> <parsing> <times>
+
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+
+      List<Foo> x = makeAList();
+      List<Foo> x = makeAList();
+      Issue #4390: Javadoc comments containing unescaped Java code with
+      generic types leads to enormous parsing times
+      <parsing> <Issue> <#4390:> <javadoc> <comments> <containing> <unescaped> <java> <code> <with>
+      <generic> <types> <leads> <to> <enormous> <parsing>
+      </parsing> </enormous> </to> </leads> </types> </generic> </with> </code> </java>
+      </unescaped> </containing> </comments> </javadoc> </Issue>
+  }
+**/
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputWrongHtmlTagOrder.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputWrongHtmlTagOrder.javadoc
new file mode 100755
index 0000000000..781ea678f8
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/InputWrongHtmlTagOrder.javadoc
@@ -0,0 +1 @@
+* <tag1> <tag2> </tag1> </tag2>
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/summaryjavadoc/InputPeriodAtEnd.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/summaryjavadoc/InputPeriodAtEnd.java
index 2e86f946fe..91461ab063 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/summaryjavadoc/InputPeriodAtEnd.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/summaryjavadoc/InputPeriodAtEnd.java
@@ -47,4 +47,14 @@ public void foo4(){
     public void foo5(){
 
     }
+
+    /**
+     * <p>Sentence without period</p>
+     *
+     * <p> this is a <br>
+     *     paragraph.</p>
+     */
+    public void foo6() {
+
+    }
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/arraytypestyle/InputArrayTypeStyle.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/arraytypestyle/InputArrayTypeStyle.java
index c64f6377c0..954f5bca14 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/arraytypestyle/InputArrayTypeStyle.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/arraytypestyle/InputArrayTypeStyle.java
@@ -12,6 +12,7 @@
 {
     private int[] javaStyle = new int[0];
     private int cStyle[] = new int[0];
+    private int c[] = new int[0];
 
     public static void mainJava(String[] aJavaStyle)
     {
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/descendanttoken/InputDescendantTokenLastTokenType.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/descendanttoken/InputDescendantTokenLastTokenType.java
new file mode 100755
index 0000000000..34cdcd2b41
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/descendanttoken/InputDescendantTokenLastTokenType.java
@@ -0,0 +1,6 @@
+package com.puppycrawl.tools.checkstyle.checks.misc.descendanttoken;
+
+/**
+ * Created by valeria on 8/19/17.
+ */
+public class InputDescendantTokenLastTokenType {}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineAtTheEndOfTheEmptyFile.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineAtTheEndOfTheEmptyFile.txt
new file mode 100755
index 0000000000..8b13789179
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineAtTheEndOfTheEmptyFile.txt
@@ -0,0 +1 @@
+
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/outertypefilename/InputOuterTypeFilenameCheckPublic.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/outertypefilename/InputOuterTypeFilenameCheckPublic.java
new file mode 100755
index 0000000000..76a2c4b6b5
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/outertypefilename/InputOuterTypeFilenameCheckPublic.java
@@ -0,0 +1,12 @@
+// someexamples of 1.5 extensions
+package com.puppycrawl.tools.checkstyle.checks.misc.outertypefilename;
+
+class UnicClassName {
+
+}
+
+public class InputOuterTypeFilenameCheckPublic {
+
+
+}
+
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uncommentedmain/InputUncommentedMain5.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uncommentedmain/InputUncommentedMain5.java
new file mode 100755
index 0000000000..715faee40f
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uncommentedmain/InputUncommentedMain5.java
@@ -0,0 +1,30 @@
+package com.puppycrawl.tools.checkstyle.checks.misc.uncommentedmain;
+
+public class InputUncommentedMain5
+{
+    public static void main(String[] args)
+    {
+        System.identityHashCode("InputUncommentedMain.main()");
+    }
+}
+
+class PC {
+
+    // uncommented main with depth 2
+    public static void main(String[] args)
+    {
+        System.identityHashCode("PC.main()");
+    }
+
+    //lets go deeper
+    private class PC2 {
+
+        // uncommented main with depth 3
+        public void main(String[] args)
+        {
+            System.identityHashCode("PC.main()");
+        }
+
+
+    }
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniqueProperties.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniqueProperties.txt
new file mode 100755
index 0000000000..120bc85f8b
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniqueProperties.txt
@@ -0,0 +1,2 @@
+1=val
+1=foo
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithDuplicates.properties b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithDuplicates.properties
new file mode 100755
index 0000000000..36b0d84615
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithDuplicates.properties
@@ -0,0 +1,3 @@
+host=localhost
+key=value1
+key=value2
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithoutErrors.properties b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithoutErrors.properties
new file mode 100755
index 0000000000..48580bfcce
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties/InputUniquePropertiesWithoutErrors.properties
@@ -0,0 +1,2 @@
+key1=value1
+key2=value2
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNestingWithSingletonElement.javadoc b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNestingWithSingletonElement.javadoc
new file mode 100755
index 0000000000..278c935a1f
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/InputNestingWithSingletonElement.javadoc
@@ -0,0 +1,19 @@
+* <p> paragraph with a <br>singletonElement. <hr> And it contains another one. </p>
+* <li> List with singletonElement
+* <param name=movie value="~/imitation game.mp4"> <param name=allowfullscreen value=true> </li>
+*
+* <tr> tr with <base href="www.something.com"> singletonElement </tr>
+* <td> td with singletonElement <br/> </td>
+* <th> th with <base/> singletonElement </th>
+* <body> body with <br/> singletonElement </body>
+* <colgroup><col><col><col></colgroup>
+* <dd> dd with <hr> singletonElement </dd>
+* <dt> dt with <img src="~/singletonElement.jpg" alt="" width="100" height="150"/> singletonElement </dt>
+* <head> head with <img src="~/singletonElement.jpg" alt="" width="100" height="150">
+* singletonElement </head>
+*
+* <html> <bR> <Br> <BR> <Br/> <BR/> <bR/> </html>
+* <option> <INPut/> </option>
+* <tbody> <input/> <br> </tbody>
+* <thead> <br> </thead>
+* <tfoot> <AREA ALT="alt" COORDS="100,0,200,50" HREF="/href/"> </tfoot>
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt
index 39dc3cd822..a19e1df322 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedMixedCaseOfHtmlTagsAst.txt
@@ -1,81 +1,76 @@
 JAVADOC -> JAVADOC [0:0]
 |--HTML_ELEMENT -> HTML_ELEMENT [0:0]
-|   `--P_TAG_START -> P_TAG_START [0:0]
-|       |--START -> < [0:0]
-|       |--P_HTML_TAG_NAME -> P [0:1]
-|       `--END -> > [0:2]
-|--NEWLINE -> \r\n [0:3]
-|--HTML_ELEMENT -> HTML_ELEMENT [1:0]
-|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [1:0]
-|       `--BR_TAG -> BR_TAG [1:0]
-|           |--START -> < [1:0]
-|           |--BR_HTML_TAG_NAME -> br [1:1]
-|           `--END -> > [1:3]
-|--NEWLINE -> \r\n [1:4]
-|--HTML_ELEMENT -> HTML_ELEMENT [2:0]
-|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [2:0]
-|       `--BR_TAG -> BR_TAG [2:0]
-|           |--START -> < [2:0]
-|           |--BR_HTML_TAG_NAME -> br [2:1]
-|           `--SLASH_END -> /> [2:3]
-|--NEWLINE -> \r\n [2:5]
-|--HTML_ELEMENT -> HTML_ELEMENT [3:0]
-|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [3:0]
-|       `--BR_TAG -> BR_TAG [3:0]
-|           |--START -> < [3:0]
-|           |--BR_HTML_TAG_NAME -> BR [3:1]
-|           `--END -> > [3:3]
-|--NEWLINE -> \r\n [3:4]
-|--HTML_ELEMENT -> HTML_ELEMENT [4:0]
-|   `--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [4:0]
-|       `--BR_TAG -> BR_TAG [4:0]
-|           |--START -> < [4:0]
-|           |--BR_HTML_TAG_NAME -> BR [4:1]
-|           `--SLASH_END -> /> [4:3]
-|--NEWLINE -> \r\n [4:5]
-|--HTML_ELEMENT -> HTML_ELEMENT [5:0]
-|   `--HTML_TAG -> HTML_TAG [5:0]
-|       |--HTML_ELEMENT_START -> HTML_ELEMENT_START [5:0]
-|       |   |--START -> < [5:0]
-|       |   |--HTML_TAG_NAME -> TABLE [5:1]
-|       |   `--END -> > [5:6]
-|       |--NEWLINE -> \r\n [5:7]
-|       |--TEXT -> \t [6:0]
-|       |--HTML_ELEMENT -> HTML_ELEMENT [6:1]
-|       |   `--TR -> TR [6:1]
-|       |       |--TR_TAG_START -> TR_TAG_START [6:1]
-|       |       |   |--START -> < [6:1]
-|       |       |   |--TR_HTML_TAG_NAME -> tr [6:2]
-|       |       |   `--END -> > [6:4]
-|       |       `--TR_TAG_END -> TR_TAG_END [6:5]
-|       |           |--START -> < [6:5]
-|       |           |--SLASH -> / [6:6]
-|       |           |--TR_HTML_TAG_NAME -> TR [6:7]
-|       |           `--END -> > [6:9]
-|       |--NEWLINE -> \r\n [6:10]
-|       |--TEXT -> \t [7:0]
-|       |--HTML_ELEMENT -> HTML_ELEMENT [7:1]
-|       |   `--TR -> TR [7:1]
-|       |       |--TR_TAG_START -> TR_TAG_START [7:1]
-|       |       |   |--START -> < [7:1]
-|       |       |   |--TR_HTML_TAG_NAME -> TR [7:2]
-|       |       |   `--END -> > [7:4]
-|       |       `--TR_TAG_END -> TR_TAG_END [7:5]
-|       |           |--START -> < [7:5]
-|       |           |--SLASH -> / [7:6]
-|       |           |--TR_HTML_TAG_NAME -> tr [7:7]
-|       |           `--END -> > [7:9]
-|       |--NEWLINE -> \r\n [7:10]
-|       `--HTML_ELEMENT_END -> HTML_ELEMENT_END [8:0]
-|           |--START -> < [8:0]
-|           |--SLASH -> / [8:1]
-|           |--HTML_TAG_NAME -> table [8:2]
-|           `--END -> > [8:7]
-|--NEWLINE -> \r\n [8:8]
-|--HTML_ELEMENT -> HTML_ELEMENT [9:0]
-|   `--P_TAG_END -> P_TAG_END [9:0]
-|       |--START -> < [9:0]
-|       |--SLASH -> / [9:1]
-|       |--P_HTML_TAG_NAME -> p [9:2]
-|       `--END -> > [9:3]
+|   `--PARAGRAPH -> PARAGRAPH [0:0]
+|       |--P_TAG_START -> P_TAG_START [0:0]
+|       |   |--START -> < [0:0]
+|       |   |--P_HTML_TAG_NAME -> P [0:1]
+|       |   `--END -> > [0:2]
+|       |--NEWLINE -> \r\n [0:3]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [1:0]
+|       |   `--BR_TAG -> BR_TAG [1:0]
+|       |       |--START -> < [1:0]
+|       |       |--BR_HTML_TAG_NAME -> br [1:1]
+|       |       `--END -> > [1:3]
+|       |--NEWLINE -> \r\n [1:4]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [2:0]
+|       |   `--BR_TAG -> BR_TAG [2:0]
+|       |       |--START -> < [2:0]
+|       |       |--BR_HTML_TAG_NAME -> br [2:1]
+|       |       `--SLASH_END -> /> [2:3]
+|       |--NEWLINE -> \r\n [2:5]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [3:0]
+|       |   `--BR_TAG -> BR_TAG [3:0]
+|       |       |--START -> < [3:0]
+|       |       |--BR_HTML_TAG_NAME -> BR [3:1]
+|       |       `--END -> > [3:3]
+|       |--NEWLINE -> \r\n [3:4]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [4:0]
+|       |   `--BR_TAG -> BR_TAG [4:0]
+|       |       |--START -> < [4:0]
+|       |       |--BR_HTML_TAG_NAME -> BR [4:1]
+|       |       `--SLASH_END -> /> [4:3]
+|       |--NEWLINE -> \r\n [4:5]
+|       |--HTML_TAG -> HTML_TAG [5:0]
+|       |   |--HTML_ELEMENT_START -> HTML_ELEMENT_START [5:0]
+|       |   |   |--START -> < [5:0]
+|       |   |   |--HTML_TAG_NAME -> TABLE [5:1]
+|       |   |   `--END -> > [5:6]
+|       |   |--NEWLINE -> \r\n [5:7]
+|       |   |--TEXT -> \t [6:0]
+|       |   |--HTML_ELEMENT -> HTML_ELEMENT [6:1]
+|       |   |   `--TR -> TR [6:1]
+|       |   |       |--TR_TAG_START -> TR_TAG_START [6:1]
+|       |   |       |   |--START -> < [6:1]
+|       |   |       |   |--TR_HTML_TAG_NAME -> tr [6:2]
+|       |   |       |   `--END -> > [6:4]
+|       |   |       `--TR_TAG_END -> TR_TAG_END [6:5]
+|       |   |           |--START -> < [6:5]
+|       |   |           |--SLASH -> / [6:6]
+|       |   |           |--TR_HTML_TAG_NAME -> TR [6:7]
+|       |   |           `--END -> > [6:9]
+|       |   |--NEWLINE -> \r\n [6:10]
+|       |   |--TEXT -> \t [7:0]
+|       |   |--HTML_ELEMENT -> HTML_ELEMENT [7:1]
+|       |   |   `--TR -> TR [7:1]
+|       |   |       |--TR_TAG_START -> TR_TAG_START [7:1]
+|       |   |       |   |--START -> < [7:1]
+|       |   |       |   |--TR_HTML_TAG_NAME -> TR [7:2]
+|       |   |       |   `--END -> > [7:4]
+|       |   |       `--TR_TAG_END -> TR_TAG_END [7:5]
+|       |   |           |--START -> < [7:5]
+|       |   |           |--SLASH -> / [7:6]
+|       |   |           |--TR_HTML_TAG_NAME -> tr [7:7]
+|       |   |           `--END -> > [7:9]
+|       |   |--NEWLINE -> \r\n [7:10]
+|       |   `--HTML_ELEMENT_END -> HTML_ELEMENT_END [8:0]
+|       |       |--START -> < [8:0]
+|       |       |--SLASH -> / [8:1]
+|       |       |--HTML_TAG_NAME -> table [8:2]
+|       |       `--END -> > [8:7]
+|       |--NEWLINE -> \r\n [8:8]
+|       `--P_TAG_END -> P_TAG_END [9:0]
+|           |--START -> < [9:0]
+|           |--SLASH -> / [9:1]
+|           |--P_HTML_TAG_NAME -> p [9:2]
+|           `--END -> > [9:3]
 `--EOF -> <EOF> [9:4]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNestingWithSingletonElementAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNestingWithSingletonElementAst.txt
new file mode 100755
index 0000000000..c73e3ca8cc
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/grammars/javadoc/htmlTags/expectedNestingWithSingletonElementAst.txt
@@ -0,0 +1,461 @@
+JAVADOC -> JAVADOC [0:0]
+|--LEADING_ASTERISK -> * [0:0]
+|--TEXT ->   [0:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [0:2]
+|   `--PARAGRAPH -> PARAGRAPH [0:2]
+|       |--P_TAG_START -> P_TAG_START [0:2]
+|       |   |--START -> < [0:2]
+|       |   |--P_HTML_TAG_NAME -> p [0:3]
+|       |   `--END -> > [0:4]
+|       |--TEXT ->  paragraph with a  [0:5]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [0:23]
+|       |   `--BR_TAG -> BR_TAG [0:23]
+|       |       |--START -> < [0:23]
+|       |       |--BR_HTML_TAG_NAME -> br [0:24]
+|       |       `--END -> > [0:26]
+|       |--TEXT -> singletonElement.  [0:27]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [0:45]
+|       |   `--HR_TAG -> HR_TAG [0:45]
+|       |       |--START -> < [0:45]
+|       |       |--HR_HTML_TAG_NAME -> hr [0:46]
+|       |       `--END -> > [0:48]
+|       |--TEXT ->  And it contains another one.  [0:49]
+|       `--P_TAG_END -> P_TAG_END [0:79]
+|           |--START -> < [0:79]
+|           |--SLASH -> / [0:80]
+|           |--P_HTML_TAG_NAME -> p [0:81]
+|           `--END -> > [0:82]
+|--NEWLINE -> \r\n [0:83]
+|--LEADING_ASTERISK -> * [1:0]
+|--TEXT ->   [1:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [1:2]
+|   `--LI -> LI [1:2]
+|       |--LI_TAG_START -> LI_TAG_START [1:2]
+|       |   |--START -> < [1:2]
+|       |   |--LI_HTML_TAG_NAME -> li [1:3]
+|       |   `--END -> > [1:5]
+|       |--TEXT ->  List with singletonElement [1:6]
+|       |--NEWLINE -> \r\n [1:33]
+|       |--LEADING_ASTERISK -> * [2:0]
+|       |--TEXT ->   [2:1]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [2:2]
+|       |   `--PARAM_TAG -> PARAM_TAG [2:2]
+|       |       |--START -> < [2:2]
+|       |       |--PARAM_HTML_TAG_NAME -> param [2:3]
+|       |       |--WS ->   [2:8]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [2:9]
+|       |       |   |--HTML_TAG_NAME -> name [2:9]
+|       |       |   |--EQUALS -> = [2:13]
+|       |       |   `--ATTR_VALUE -> movie [2:14]
+|       |       |--WS ->   [2:20]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [2:21]
+|       |       |   |--HTML_TAG_NAME -> value [2:21]
+|       |       |   |--EQUALS -> = [2:26]
+|       |       |   `--ATTR_VALUE -> "~/imitation game.mp4" [2:27]
+|       |       `--END -> > [2:50]
+|       |--TEXT ->   [2:51]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [2:52]
+|       |   `--PARAM_TAG -> PARAM_TAG [2:52]
+|       |       |--START -> < [2:52]
+|       |       |--PARAM_HTML_TAG_NAME -> param [2:53]
+|       |       |--WS ->   [2:58]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [2:59]
+|       |       |   |--HTML_TAG_NAME -> name [2:59]
+|       |       |   |--EQUALS -> = [2:63]
+|       |       |   `--ATTR_VALUE -> allowfullscreen [2:64]
+|       |       |--WS ->   [2:80]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [2:81]
+|       |       |   |--HTML_TAG_NAME -> value [2:81]
+|       |       |   |--EQUALS -> = [2:86]
+|       |       |   `--ATTR_VALUE -> true [2:87]
+|       |       `--END -> > [2:92]
+|       |--TEXT ->   [2:93]
+|       `--LI_TAG_END -> LI_TAG_END [2:94]
+|           |--START -> < [2:94]
+|           |--SLASH -> / [2:95]
+|           |--LI_HTML_TAG_NAME -> li [2:96]
+|           `--END -> > [2:98]
+|--NEWLINE -> \r\n [2:99]
+|--LEADING_ASTERISK -> * [3:0]
+|--NEWLINE -> \r\n [3:1]
+|--LEADING_ASTERISK -> * [4:0]
+|--TEXT ->   [4:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [4:2]
+|   `--TR -> TR [4:2]
+|       |--TR_TAG_START -> TR_TAG_START [4:2]
+|       |   |--START -> < [4:2]
+|       |   |--TR_HTML_TAG_NAME -> tr [4:3]
+|       |   `--END -> > [4:5]
+|       |--TEXT ->  tr with  [4:6]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [4:15]
+|       |   `--BASE_TAG -> BASE_TAG [4:15]
+|       |       |--START -> < [4:15]
+|       |       |--BASE_HTML_TAG_NAME -> base [4:16]
+|       |       |--WS ->   [4:20]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [4:21]
+|       |       |   |--HTML_TAG_NAME -> href [4:21]
+|       |       |   |--EQUALS -> = [4:25]
+|       |       |   `--ATTR_VALUE -> "www.something.com" [4:26]
+|       |       `--END -> > [4:46]
+|       |--TEXT ->  singletonElement  [4:47]
+|       `--TR_TAG_END -> TR_TAG_END [4:65]
+|           |--START -> < [4:65]
+|           |--SLASH -> / [4:66]
+|           |--TR_HTML_TAG_NAME -> tr [4:67]
+|           `--END -> > [4:69]
+|--NEWLINE -> \r\n [4:70]
+|--LEADING_ASTERISK -> * [5:0]
+|--TEXT ->   [5:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [5:2]
+|   `--TD -> TD [5:2]
+|       |--TD_TAG_START -> TD_TAG_START [5:2]
+|       |   |--START -> < [5:2]
+|       |   |--TD_HTML_TAG_NAME -> td [5:3]
+|       |   `--END -> > [5:5]
+|       |--TEXT ->  td with singletonElement  [5:6]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [5:32]
+|       |   `--BR_TAG -> BR_TAG [5:32]
+|       |       |--START -> < [5:32]
+|       |       |--BR_HTML_TAG_NAME -> br [5:33]
+|       |       `--SLASH_END -> /> [5:35]
+|       |--TEXT ->   [5:37]
+|       `--TD_TAG_END -> TD_TAG_END [5:38]
+|           |--START -> < [5:38]
+|           |--SLASH -> / [5:39]
+|           |--TD_HTML_TAG_NAME -> td [5:40]
+|           `--END -> > [5:42]
+|--NEWLINE -> \r\n [5:43]
+|--LEADING_ASTERISK -> * [6:0]
+|--TEXT ->   [6:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [6:2]
+|   `--TH -> TH [6:2]
+|       |--TH_TAG_START -> TH_TAG_START [6:2]
+|       |   |--START -> < [6:2]
+|       |   |--TH_HTML_TAG_NAME -> th [6:3]
+|       |   `--END -> > [6:5]
+|       |--TEXT ->  th with  [6:6]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [6:15]
+|       |   `--BASE_TAG -> BASE_TAG [6:15]
+|       |       |--START -> < [6:15]
+|       |       |--BASE_HTML_TAG_NAME -> base [6:16]
+|       |       `--SLASH_END -> /> [6:20]
+|       |--TEXT ->  singletonElement  [6:22]
+|       `--TH_TAG_END -> TH_TAG_END [6:40]
+|           |--START -> < [6:40]
+|           |--SLASH -> / [6:41]
+|           |--TH_HTML_TAG_NAME -> th [6:42]
+|           `--END -> > [6:44]
+|--NEWLINE -> \r\n [6:45]
+|--LEADING_ASTERISK -> * [7:0]
+|--TEXT ->   [7:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [7:2]
+|   `--BODY -> BODY [7:2]
+|       |--BODY_TAG_START -> BODY_TAG_START [7:2]
+|       |   |--START -> < [7:2]
+|       |   |--BODY_HTML_TAG_NAME -> body [7:3]
+|       |   `--END -> > [7:7]
+|       |--TEXT ->  body with  [7:8]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [7:19]
+|       |   `--BR_TAG -> BR_TAG [7:19]
+|       |       |--START -> < [7:19]
+|       |       |--BR_HTML_TAG_NAME -> br [7:20]
+|       |       `--SLASH_END -> /> [7:22]
+|       |--TEXT ->  singletonElement  [7:24]
+|       `--BODY_TAG_END -> BODY_TAG_END [7:42]
+|           |--START -> < [7:42]
+|           |--SLASH -> / [7:43]
+|           |--BODY_HTML_TAG_NAME -> body [7:44]
+|           `--END -> > [7:48]
+|--NEWLINE -> \r\n [7:49]
+|--LEADING_ASTERISK -> * [8:0]
+|--TEXT ->   [8:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [8:2]
+|   `--COLGROUP -> COLGROUP [8:2]
+|       |--COLGROUP_TAG_START -> COLGROUP_TAG_START [8:2]
+|       |   |--START -> < [8:2]
+|       |   |--COLGROUP_HTML_TAG_NAME -> colgroup [8:3]
+|       |   `--END -> > [8:11]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [8:12]
+|       |   `--COL_TAG -> COL_TAG [8:12]
+|       |       |--START -> < [8:12]
+|       |       |--COL_HTML_TAG_NAME -> col [8:13]
+|       |       `--END -> > [8:16]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [8:17]
+|       |   `--COL_TAG -> COL_TAG [8:17]
+|       |       |--START -> < [8:17]
+|       |       |--COL_HTML_TAG_NAME -> col [8:18]
+|       |       `--END -> > [8:21]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [8:22]
+|       |   `--COL_TAG -> COL_TAG [8:22]
+|       |       |--START -> < [8:22]
+|       |       |--COL_HTML_TAG_NAME -> col [8:23]
+|       |       `--END -> > [8:26]
+|       `--COLGROUP_TAG_END -> COLGROUP_TAG_END [8:27]
+|           |--START -> < [8:27]
+|           |--SLASH -> / [8:28]
+|           |--COLGROUP_HTML_TAG_NAME -> colgroup [8:29]
+|           `--END -> > [8:37]
+|--NEWLINE -> \r\n [8:38]
+|--LEADING_ASTERISK -> * [9:0]
+|--TEXT ->   [9:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [9:2]
+|   `--DD -> DD [9:2]
+|       |--DD_TAG_START -> DD_TAG_START [9:2]
+|       |   |--START -> < [9:2]
+|       |   |--DD_HTML_TAG_NAME -> dd [9:3]
+|       |   `--END -> > [9:5]
+|       |--TEXT ->  dd with  [9:6]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [9:15]
+|       |   `--HR_TAG -> HR_TAG [9:15]
+|       |       |--START -> < [9:15]
+|       |       |--HR_HTML_TAG_NAME -> hr [9:16]
+|       |       `--END -> > [9:18]
+|       |--TEXT ->  singletonElement  [9:19]
+|       `--DD_TAG_END -> DD_TAG_END [9:37]
+|           |--START -> < [9:37]
+|           |--SLASH -> / [9:38]
+|           |--DD_HTML_TAG_NAME -> dd [9:39]
+|           `--END -> > [9:41]
+|--NEWLINE -> \r\n [9:42]
+|--LEADING_ASTERISK -> * [10:0]
+|--TEXT ->   [10:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [10:2]
+|   `--DT -> DT [10:2]
+|       |--DT_TAG_START -> DT_TAG_START [10:2]
+|       |   |--START -> < [10:2]
+|       |   |--DT_HTML_TAG_NAME -> dt [10:3]
+|       |   `--END -> > [10:5]
+|       |--TEXT ->  dt with  [10:6]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [10:15]
+|       |   `--IMG_TAG -> IMG_TAG [10:15]
+|       |       |--START -> < [10:15]
+|       |       |--IMG_HTML_TAG_NAME -> img [10:16]
+|       |       |--WS ->   [10:19]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [10:20]
+|       |       |   |--HTML_TAG_NAME -> src [10:20]
+|       |       |   |--EQUALS -> = [10:23]
+|       |       |   `--ATTR_VALUE -> "~/singletonElement.jpg" [10:24]
+|       |       |--WS ->   [10:49]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [10:50]
+|       |       |   |--HTML_TAG_NAME -> alt [10:50]
+|       |       |   |--EQUALS -> = [10:53]
+|       |       |   `--ATTR_VALUE -> "" [10:54]
+|       |       |--WS ->   [10:57]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [10:58]
+|       |       |   |--HTML_TAG_NAME -> width [10:58]
+|       |       |   |--EQUALS -> = [10:63]
+|       |       |   `--ATTR_VALUE -> "100" [10:64]
+|       |       |--WS ->   [10:70]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [10:71]
+|       |       |   |--HTML_TAG_NAME -> height [10:71]
+|       |       |   |--EQUALS -> = [10:77]
+|       |       |   `--ATTR_VALUE -> "150" [10:78]
+|       |       `--SLASH_END -> /> [10:84]
+|       |--TEXT ->  singletonElement  [10:86]
+|       `--DT_TAG_END -> DT_TAG_END [10:104]
+|           |--START -> < [10:104]
+|           |--SLASH -> / [10:105]
+|           |--DT_HTML_TAG_NAME -> dt [10:106]
+|           `--END -> > [10:108]
+|--NEWLINE -> \r\n [10:109]
+|--LEADING_ASTERISK -> * [11:0]
+|--TEXT ->   [11:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [11:2]
+|   `--HEAD -> HEAD [11:2]
+|       |--HEAD_TAG_START -> HEAD_TAG_START [11:2]
+|       |   |--START -> < [11:2]
+|       |   |--HEAD_HTML_TAG_NAME -> head [11:3]
+|       |   `--END -> > [11:7]
+|       |--TEXT ->  head with  [11:8]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [11:19]
+|       |   `--IMG_TAG -> IMG_TAG [11:19]
+|       |       |--START -> < [11:19]
+|       |       |--IMG_HTML_TAG_NAME -> img [11:20]
+|       |       |--WS ->   [11:23]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [11:24]
+|       |       |   |--HTML_TAG_NAME -> src [11:24]
+|       |       |   |--EQUALS -> = [11:27]
+|       |       |   `--ATTR_VALUE -> "~/singletonElement.jpg" [11:28]
+|       |       |--WS ->   [11:53]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [11:54]
+|       |       |   |--HTML_TAG_NAME -> alt [11:54]
+|       |       |   |--EQUALS -> = [11:57]
+|       |       |   `--ATTR_VALUE -> "" [11:58]
+|       |       |--WS ->   [11:61]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [11:62]
+|       |       |   |--HTML_TAG_NAME -> width [11:62]
+|       |       |   |--EQUALS -> = [11:67]
+|       |       |   `--ATTR_VALUE -> "100" [11:68]
+|       |       |--WS ->   [11:74]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [11:75]
+|       |       |   |--HTML_TAG_NAME -> height [11:75]
+|       |       |   |--EQUALS -> = [11:81]
+|       |       |   `--ATTR_VALUE -> "150" [11:82]
+|       |       `--END -> > [11:88]
+|       |--NEWLINE -> \r\n [11:89]
+|       |--LEADING_ASTERISK -> * [12:0]
+|       |--TEXT ->  singletonElement  [12:1]
+|       `--HEAD_TAG_END -> HEAD_TAG_END [12:19]
+|           |--START -> < [12:19]
+|           |--SLASH -> / [12:20]
+|           |--HEAD_HTML_TAG_NAME -> head [12:21]
+|           `--END -> > [12:25]
+|--NEWLINE -> \r\n [12:26]
+|--LEADING_ASTERISK -> * [13:0]
+|--NEWLINE -> \r\n [13:1]
+|--LEADING_ASTERISK -> * [14:0]
+|--TEXT ->   [14:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [14:2]
+|   `--HTML -> HTML [14:2]
+|       |--HTML_TAG_START -> HTML_TAG_START [14:2]
+|       |   |--START -> < [14:2]
+|       |   |--HTML_HTML_TAG_NAME -> html [14:3]
+|       |   `--END -> > [14:7]
+|       |--TEXT ->   [14:8]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:9]
+|       |   `--BR_TAG -> BR_TAG [14:9]
+|       |       |--START -> < [14:9]
+|       |       |--BR_HTML_TAG_NAME -> bR [14:10]
+|       |       `--END -> > [14:12]
+|       |--TEXT ->   [14:13]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:14]
+|       |   `--BR_TAG -> BR_TAG [14:14]
+|       |       |--START -> < [14:14]
+|       |       |--BR_HTML_TAG_NAME -> Br [14:15]
+|       |       `--END -> > [14:17]
+|       |--TEXT ->   [14:18]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:19]
+|       |   `--BR_TAG -> BR_TAG [14:19]
+|       |       |--START -> < [14:19]
+|       |       |--BR_HTML_TAG_NAME -> BR [14:20]
+|       |       `--END -> > [14:22]
+|       |--TEXT ->   [14:23]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:24]
+|       |   `--BR_TAG -> BR_TAG [14:24]
+|       |       |--START -> < [14:24]
+|       |       |--BR_HTML_TAG_NAME -> Br [14:25]
+|       |       `--SLASH_END -> /> [14:27]
+|       |--TEXT ->   [14:29]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:30]
+|       |   `--BR_TAG -> BR_TAG [14:30]
+|       |       |--START -> < [14:30]
+|       |       |--BR_HTML_TAG_NAME -> BR [14:31]
+|       |       `--SLASH_END -> /> [14:33]
+|       |--TEXT ->   [14:35]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [14:36]
+|       |   `--BR_TAG -> BR_TAG [14:36]
+|       |       |--START -> < [14:36]
+|       |       |--BR_HTML_TAG_NAME -> bR [14:37]
+|       |       `--SLASH_END -> /> [14:39]
+|       |--TEXT ->   [14:41]
+|       `--HTML_TAG_END -> HTML_TAG_END [14:42]
+|           |--START -> < [14:42]
+|           |--SLASH -> / [14:43]
+|           |--HTML_HTML_TAG_NAME -> html [14:44]
+|           `--END -> > [14:48]
+|--NEWLINE -> \r\n [14:49]
+|--LEADING_ASTERISK -> * [15:0]
+|--TEXT ->   [15:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [15:2]
+|   `--OPTION -> OPTION [15:2]
+|       |--OPTION_TAG_START -> OPTION_TAG_START [15:2]
+|       |   |--START -> < [15:2]
+|       |   |--OPTION_HTML_TAG_NAME -> option [15:3]
+|       |   `--END -> > [15:9]
+|       |--TEXT ->   [15:10]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [15:11]
+|       |   `--INPUT_TAG -> INPUT_TAG [15:11]
+|       |       |--START -> < [15:11]
+|       |       |--INPUT_HTML_TAG_NAME -> INPut [15:12]
+|       |       `--SLASH_END -> /> [15:17]
+|       |--TEXT ->   [15:19]
+|       `--OPTION_TAG_END -> OPTION_TAG_END [15:20]
+|           |--START -> < [15:20]
+|           |--SLASH -> / [15:21]
+|           |--OPTION_HTML_TAG_NAME -> option [15:22]
+|           `--END -> > [15:28]
+|--NEWLINE -> \r\n [15:29]
+|--LEADING_ASTERISK -> * [16:0]
+|--TEXT ->   [16:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [16:2]
+|   `--TBODY -> TBODY [16:2]
+|       |--TBODY_TAG_START -> TBODY_TAG_START [16:2]
+|       |   |--START -> < [16:2]
+|       |   |--TBODY_HTML_TAG_NAME -> tbody [16:3]
+|       |   `--END -> > [16:8]
+|       |--TEXT ->   [16:9]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [16:10]
+|       |   `--INPUT_TAG -> INPUT_TAG [16:10]
+|       |       |--START -> < [16:10]
+|       |       |--INPUT_HTML_TAG_NAME -> input [16:11]
+|       |       `--SLASH_END -> /> [16:16]
+|       |--TEXT ->   [16:18]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [16:19]
+|       |   `--BR_TAG -> BR_TAG [16:19]
+|       |       |--START -> < [16:19]
+|       |       |--BR_HTML_TAG_NAME -> br [16:20]
+|       |       `--END -> > [16:22]
+|       |--TEXT ->   [16:23]
+|       `--TBODY_TAG_END -> TBODY_TAG_END [16:24]
+|           |--START -> < [16:24]
+|           |--SLASH -> / [16:25]
+|           |--TBODY_HTML_TAG_NAME -> tbody [16:26]
+|           `--END -> > [16:31]
+|--NEWLINE -> \r\n [16:32]
+|--LEADING_ASTERISK -> * [17:0]
+|--TEXT ->   [17:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [17:2]
+|   `--THEAD -> THEAD [17:2]
+|       |--THEAD_TAG_START -> THEAD_TAG_START [17:2]
+|       |   |--START -> < [17:2]
+|       |   |--THEAD_HTML_TAG_NAME -> thead [17:3]
+|       |   `--END -> > [17:8]
+|       |--TEXT ->   [17:9]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [17:10]
+|       |   `--BR_TAG -> BR_TAG [17:10]
+|       |       |--START -> < [17:10]
+|       |       |--BR_HTML_TAG_NAME -> br [17:11]
+|       |       `--END -> > [17:13]
+|       |--TEXT ->   [17:14]
+|       `--THEAD_TAG_END -> THEAD_TAG_END [17:15]
+|           |--START -> < [17:15]
+|           |--SLASH -> / [17:16]
+|           |--THEAD_HTML_TAG_NAME -> thead [17:17]
+|           `--END -> > [17:22]
+|--NEWLINE -> \r\n [17:23]
+|--LEADING_ASTERISK -> * [18:0]
+|--TEXT ->   [18:1]
+|--HTML_ELEMENT -> HTML_ELEMENT [18:2]
+|   `--TFOOT -> TFOOT [18:2]
+|       |--TFOOT_TAG_START -> TFOOT_TAG_START [18:2]
+|       |   |--START -> < [18:2]
+|       |   |--TFOOT_HTML_TAG_NAME -> tfoot [18:3]
+|       |   `--END -> > [18:8]
+|       |--TEXT ->   [18:9]
+|       |--SINGLETON_ELEMENT -> SINGLETON_ELEMENT [18:10]
+|       |   `--AREA_TAG -> AREA_TAG [18:10]
+|       |       |--START -> < [18:10]
+|       |       |--AREA_HTML_TAG_NAME -> AREA [18:11]
+|       |       |--WS ->   [18:15]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [18:16]
+|       |       |   |--HTML_TAG_NAME -> ALT [18:16]
+|       |       |   |--EQUALS -> = [18:19]
+|       |       |   `--ATTR_VALUE -> "alt" [18:20]
+|       |       |--WS ->   [18:26]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [18:27]
+|       |       |   |--HTML_TAG_NAME -> COORDS [18:27]
+|       |       |   |--EQUALS -> = [18:33]
+|       |       |   `--ATTR_VALUE -> "100,0,200,50" [18:34]
+|       |       |--WS ->   [18:49]
+|       |       |--ATTRIBUTE -> ATTRIBUTE [18:50]
+|       |       |   |--HTML_TAG_NAME -> HREF [18:50]
+|       |       |   |--EQUALS -> = [18:54]
+|       |       |   `--ATTR_VALUE -> "/href/" [18:55]
+|       |       `--END -> > [18:64]
+|       |--TEXT ->   [18:65]
+|       `--TFOOT_TAG_END -> TFOOT_TAG_END [18:66]
+|           |--START -> < [18:66]
+|           |--SLASH -> / [18:67]
+|           |--TFOOT_HTML_TAG_NAME -> tfoot [18:68]
+|           `--END -> > [18:73]
+`--EOF -> <EOF> [18:74]
