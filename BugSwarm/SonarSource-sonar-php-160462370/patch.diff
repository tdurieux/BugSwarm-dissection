diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
index b81a6cc4e0..9ed0116a94 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/PHPSensor.java
@@ -45,7 +45,6 @@
 import org.sonar.api.batch.sensor.issue.NewIssue;
 import org.sonar.api.batch.sensor.issue.NewIssueLocation;
 import org.sonar.api.batch.sensor.symbol.NewSymbolTable;
-import org.sonar.api.config.Settings;
 import org.sonar.api.issue.NoSonarFilter;
 import org.sonar.api.measures.CoreMetrics;
 import org.sonar.api.measures.FileLinesContextFactory;
@@ -70,18 +69,17 @@
   private static final Logger LOG = LoggerFactory.getLogger(PHPSensor.class);
 
   private final FileSystem fileSystem;
-  private final Settings settings;
   private final FilePredicate mainFilePredicate;
   private final FileLinesContextFactory fileLinesContextFactory;
   private final PHPChecks checks;
   private final NoSonarFilter noSonarFilter;
 
-  public PHPSensor(Settings settings, FileSystem fileSystem, FileLinesContextFactory fileLinesContextFactory,
+  public PHPSensor(FileSystem fileSystem, FileLinesContextFactory fileLinesContextFactory,
                    CheckFactory checkFactory, NoSonarFilter noSonarFilter) {
-    this(settings, fileSystem, fileLinesContextFactory, checkFactory, noSonarFilter, null);
+    this(fileSystem, fileLinesContextFactory, checkFactory, noSonarFilter, null);
   }
 
-  public PHPSensor(Settings settings, FileSystem fileSystem, FileLinesContextFactory fileLinesContextFactory,
+  public PHPSensor(FileSystem fileSystem, FileLinesContextFactory fileLinesContextFactory,
                    CheckFactory checkFactory, NoSonarFilter noSonarFilter, @Nullable PHPCustomRulesDefinition[] customRulesDefinitions) {
 
     this.checks = PHPChecks.createPHPCheck(checkFactory)
@@ -89,7 +87,6 @@ public PHPSensor(Settings settings, FileSystem fileSystem, FileLinesContextFacto
       .addCustomChecks(customRulesDefinitions);
     this.fileLinesContextFactory = fileLinesContextFactory;
     this.fileSystem = fileSystem;
-    this.settings = settings;
     this.noSonarFilter = noSonarFilter;
     this.mainFilePredicate = this.fileSystem.predicates().and(
       this.fileSystem.predicates().hasType(InputFile.Type.MAIN),
@@ -124,7 +121,6 @@ public void execute(SensorContext context) {
   private void processCoverage(SensorContext context, Map<File, Integer> numberOfLinesOfCode) {
     PhpUnitService phpUnitSensor = new PhpUnitService(
       fileSystem,
-      settings,
       new PhpUnitResultParser(fileSystem),
       new PhpUnitCoverageResultParser(fileSystem),
       new PhpUnitItCoverageResultParser(fileSystem),
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitService.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitService.java
index 3ba09f997e..4e386c87c4 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitService.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitService.java
@@ -26,7 +26,6 @@
 import org.slf4j.LoggerFactory;
 import org.sonar.api.batch.fs.FileSystem;
 import org.sonar.api.batch.sensor.SensorContext;
-import org.sonar.api.config.Settings;
 import org.sonar.plugins.php.PhpPlugin;
 
 /**
@@ -36,8 +35,6 @@
 
   private static final Logger LOGGER = LoggerFactory.getLogger(PhpUnitService.class);
 
-  private final Settings settings;
-
   private final PhpUnitOverallCoverageResultParser overallCoverageParser;
   private final PhpUnitItCoverageResultParser itCoverageParser;
   private final PhpUnitCoverageResultParser coverageParser;
@@ -45,13 +42,12 @@
 
   private final FileSystem fileSystem;
 
-  public PhpUnitService(FileSystem fileSystem, Settings settings, PhpUnitResultParser parser,
+  public PhpUnitService(FileSystem fileSystem, PhpUnitResultParser parser,
                        PhpUnitCoverageResultParser coverageParser,
                        PhpUnitItCoverageResultParser itCoverageParser,
                        PhpUnitOverallCoverageResultParser overallCoverageParser) {
 
     this.fileSystem = fileSystem;
-    this.settings = settings;
     this.parser = parser;
     this.coverageParser = coverageParser;
     this.itCoverageParser = itCoverageParser;
@@ -66,7 +62,7 @@ public void execute(SensorContext context, Map<File, Integer> numberOfLinesOfCod
   }
 
   private void parseReport(String reportPathKey, PhpUnitParser parser, String msg, SensorContext context, Map<File, Integer> numberOfLinesOfCode) {
-    String reportPath = settings.getString(reportPathKey);
+    String reportPath = context.settings().getString(reportPathKey);
 
     if (reportPath != null) {
       File xmlFile = getIOFile(reportPath);
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
index 75b640088e..52cdc3c3f1 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
@@ -64,6 +64,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
@@ -119,7 +120,7 @@ public void setUp() {
     when(fileLinesContextFactory.createFor(any(InputFile.class))).thenReturn(fileLinesContext);
 
     CheckFactory checkFactory = new CheckFactory(mock(ActiveRules.class));
-    sensor = new PHPSensor(new Settings(), fileSystem, fileLinesContextFactory, checkFactory, new NoSonarFilter(), CUSTOM_RULES);
+    sensor = new PHPSensor(fileSystem, fileLinesContextFactory, checkFactory, new NoSonarFilter(), CUSTOM_RULES);
   }
 
   @Test
@@ -180,8 +181,11 @@ private void checkNoSonar(String componentKey, int line, boolean expected) throw
   @Test
   public void parse_error() throws Exception {
     SensorContext context = mock(SensorContext.class);
+    when(context.settings()).thenReturn(new Settings());
     analyseSingleFile(context, "parseError.php");
 
+    // check that the context is never used, except for a few calls to method settings()
+    verify(context, times(4)).settings();
     verifyZeroInteractions(context);
   }
 
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/core/NoSonarAndCommentedOutLocSensorTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/core/NoSonarAndCommentedOutLocSensorTest.java
index c1d383809a..088168523a 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/core/NoSonarAndCommentedOutLocSensorTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/core/NoSonarAndCommentedOutLocSensorTest.java
@@ -36,7 +36,6 @@
 import org.sonar.squidbridge.text.Source;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
@@ -63,11 +62,6 @@ public void setUp() throws Exception {
     sensor = spy(new NoSonarAndCommentedOutLocSensor(fs, noSonarFilter));
   }
 
-  @Test
-  public void testToString() {
-    assertThat(sensor.toString()).isEqualTo("NoSonar and Commented out LOC Sensor");
-  }
-
   @Test
   public void testAnalyse() {
     SensorContextTester context = setUpForSensorContextTester();
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitServiceTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitServiceTest.java
index 55cdd58d82..bb8ef7d635 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitServiceTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitServiceTest.java
@@ -41,9 +41,11 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyMap;
+import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class PhpUnitServiceTest {
 
@@ -70,29 +72,22 @@
   @Mock
   private Map<File, Integer> numberOfLinesOfCode;
 
-  private Settings settings;
-  private PhpUnitService sensor;
+  private PhpUnitService phpUnitService;
   private static final File TEST_REPORT_FILE = TestUtils.getResource(PhpTestUtils.PHPUNIT_REPORT_NAME);
   private static final File COVERAGE_REPORT_FILE = TestUtils.getResource(PhpTestUtils.PHPUNIT_COVERAGE_REPORT);
 
   @Before
   public void init() throws Exception {
     MockitoAnnotations.initMocks(this);
-
-    settings = newSettings();
     fs = new DefaultFileSystem(TestUtils.getResource(PhpTestUtils.PHPUNIT_REPORT_DIR));
-    sensor = createService(fs, settings);
-  }
-
-  @Test
-  public void testToString() {
-    assertThat(sensor.toString()).isEqualTo("PHPUnit Sensor");
+    phpUnitService = createService(fs);
   }
 
   @Test
   public void shouldParseReport() {
-    sensor = createService(fs, settings);
-    sensor.execute(context, numberOfLinesOfCode);
+    when(context.settings()).thenReturn(newSettings());
+    phpUnitService = createService(fs);
+    phpUnitService.execute(context, numberOfLinesOfCode);
 
     verify(parser, times(1)).parse(TEST_REPORT_FILE, context, numberOfLinesOfCode);
     verify(coverageParser, times(1)).parse(COVERAGE_REPORT_FILE, context, numberOfLinesOfCode);
@@ -103,8 +98,9 @@ public void shouldParseReport() {
   @SuppressWarnings("unchecked")
   @Test
   public void noReport() {
-    sensor = createService(fs, new Settings());
-    sensor.execute(context, numberOfLinesOfCode);
+    when(context.settings()).thenReturn(new Settings());
+    phpUnitService = createService(fs);
+    phpUnitService.execute(context, numberOfLinesOfCode);
 
     verify(parser, never()).parse(any(File.class), any(SensorContext.class), anyMap());
   }
@@ -112,8 +108,9 @@ public void noReport() {
   @SuppressWarnings("unchecked")
   @Test
   public void badReport() {
-    sensor = createService(fs, settings("/fake/path.xml"));
-    sensor.execute(context, numberOfLinesOfCode);
+    when(context.settings()).thenReturn(settings("/fake/path.xml"));
+    phpUnitService = createService(fs);
+    phpUnitService.execute(context, numberOfLinesOfCode);
 
     verify(parser, never()).parse(any(File.class), any(SensorContext.class), anyMap());
   }
@@ -121,22 +118,25 @@ public void badReport() {
   @SuppressWarnings("unchecked")
   @Test
   public void xstream_exception() throws Exception {
-    Mockito.doThrow(new XStreamException("")).when(parser).parse((File) any(), any(SensorContext.class), anyMap());
-    sensor = createService(fs, settings("phpunit.xml"));
+    doThrow(new XStreamException("")).when(parser).parse((File) any(), any(SensorContext.class), anyMap());
+    when(context.settings()).thenReturn(settings("phpunit.xml"));
+    phpUnitService = createService(fs);
+
     expected.expect(IllegalStateException.class);
-    sensor.execute(context, numberOfLinesOfCode);
+    phpUnitService.execute(context, numberOfLinesOfCode);
   }
 
   @Test
   public void should_parse_relative_path_report() {
-    sensor = createService(fs, settings("phpunit.xml"));
-    sensor.execute(context, numberOfLinesOfCode);
+    phpUnitService = createService(fs);
+    when(context.settings()).thenReturn(settings("phpunit.xml"));
+    phpUnitService.execute(context, numberOfLinesOfCode);
 
     verify(parser, times(1)).parse(TEST_REPORT_FILE, context, numberOfLinesOfCode);
   }
 
-  private PhpUnitService createService(FileSystem fs, Settings settings) {
-    return new PhpUnitService(fs, settings, parser, coverageParser, itCoverageParser, overallCoverageParser);
+  private PhpUnitService createService(FileSystem fs) {
+    return new PhpUnitService(fs, parser, coverageParser, itCoverageParser, overallCoverageParser);
   }
 
   private Settings settings(String path) {
