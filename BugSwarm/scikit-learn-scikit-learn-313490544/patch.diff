diff --git a/doc/tutorial/statistical_inference/supervised_learning.rst b/doc/tutorial/statistical_inference/supervised_learning.rst
index 48df31122e..6f53e9af79 100755
--- a/doc/tutorial/statistical_inference/supervised_learning.rst
+++ b/doc/tutorial/statistical_inference/supervised_learning.rst
@@ -330,7 +330,7 @@ application of Occam's razor: *prefer simpler models*.
     Lasso(alpha=0.025118864315095794, copy_X=True, fit_intercept=True,
        max_iter=1000, normalize=False, positive=False, precompute=False,
        random_state=None, selection='cyclic', tol=0.0001, warm_start=False)
-    >>> print(regr.coef_)
+    >>> print(regr.coef_)  # doctest: +NORMALIZE_WHITESPACE
     [   0.         -212.43764548  517.19478111  313.77959962 -160.8303982    -0.
      -187.19554705   69.38229038  508.66011217   71.84239008]
 
diff --git a/sklearn/multioutput.py b/sklearn/multioutput.py
index 1cb07d1ebd..036940b1f6 100755
--- a/sklearn/multioutput.py
+++ b/sklearn/multioutput.py
@@ -376,6 +376,7 @@ def __init__(self, base_estimator, order=None, cv=None, random_state=None):
         self.cv = cv
         self.random_state = random_state
 
+    @abstractmethod
     def fit(self, X, Y):
         """Fit the model to data matrix X and targets Y.
 
@@ -562,7 +563,6 @@ def fit(self, X, Y):
             self.classes_.append(estimator.classes_)
         return self
 
-
     @if_delegate_has_method('base_estimator')
     def predict_proba(self, X):
         """Predict probability estimates.
@@ -682,3 +682,20 @@ class RegressorChain(_BaseChain, RegressorMixin, MetaEstimatorMixin):
         The order of labels in the classifier chain.
 
     """
+    def fit(self, X, Y):
+        """Fit the model to data matrix X and targets Y.
+
+        Parameters
+        ----------
+        X : {array-like, sparse matrix}, shape (n_samples, n_features)
+            The input data.
+        Y : array-like, shape (n_samples, n_classes)
+            The target values.
+
+        Returns
+        -------
+        self : object
+            Returns self.
+        """
+        super(RegressorChain, self).fit(X, Y)
+        return self
