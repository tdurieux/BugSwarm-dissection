diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactory.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactory.java
index 79f2bbc9c9..7f4de90b44 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactory.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactory.java
@@ -40,7 +40,7 @@ public CompatibilityImportersFactory(SensorContext context) {
 
   public List<PhpUnitImporter> createImporters() {
     final ArrayList<PhpUnitImporter> importers = new ArrayList<>();
-    importers.add(new PhpUnitTestResultImporter());
+    importers.add(new TestResultImporter());
     if (supportsMultiPathCoverage() && multiPathCoverageUsed()) {
       addMultiCoverageImporter(importers);
     } else {
@@ -58,13 +58,13 @@ private boolean multiPathCoverageUsed() {
   }
 
   private void addMultiCoverageImporter(ArrayList<PhpUnitImporter> importers) {
-    importers.add(new MultiPathImporter(new PhpUnitCoverageResultImporter(), PhpPlugin.PHPUNIT_COVERAGE_REPORT_PATHS_KEY, "coverage"));
+    importers.add(new MultiPathImporter(new CoverageResultImporter(), PhpPlugin.PHPUNIT_COVERAGE_REPORT_PATHS_KEY, "coverage"));
   }
 
   private void addLegacyImporters(ArrayList<PhpUnitImporter> importers) {
-    importers.add(new PhpUnitCoverageResultImporter());
-    importers.add(new PhpUnitItCoverageResultImporter());
-    importers.add(new PhpUnitOverallCoverageResultImporter());
+    importers.add(new CoverageResultImporter());
+    importers.add(new ItCoverageResultImporter());
+    importers.add(new OverallCoverageResultImporter());
   }
 
   public List<String> deprecationWarnings() {
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporter.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CoverageResultImporter.java
similarity index 96%
rename from sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporter.java
rename to sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CoverageResultImporter.java
index ac4517b04c..cdb1335bc3 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporter.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/CoverageResultImporter.java
@@ -47,9 +47,9 @@
 import org.sonar.plugins.php.phpunit.xml.PackageNode;
 import org.sonar.plugins.php.phpunit.xml.ProjectNode;
 
-public class PhpUnitCoverageResultImporter extends SingleFilePhpUnitImporter {
+public class CoverageResultImporter extends SingleFilePhpUnitImporter {
 
-  private static final Logger LOG = LoggerFactory.getLogger(PhpUnitCoverageResultImporter.class);
+  private static final Logger LOG = LoggerFactory.getLogger(CoverageResultImporter.class);
 
   protected Metric<Integer> linesToCoverMetric = CoreMetrics.LINES_TO_COVER;
 
@@ -59,11 +59,11 @@
 
   private static final String WRONG_LINE_EXCEPTION_MESSAGE = "Line with number %s doesn't belong to file %s";
 
-  public PhpUnitCoverageResultImporter() {
+  public CoverageResultImporter() {
     super(PhpPlugin.PHPUNIT_COVERAGE_REPORT_PATH_KEY, "unit test coverage");
   }
 
-  protected PhpUnitCoverageResultImporter(String reportPathKey, String msg) {
+  protected CoverageResultImporter(String reportPathKey, String msg) {
     super(reportPathKey, msg);
   }
 
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporter.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporter.java
similarity index 91%
rename from sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporter.java
rename to sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporter.java
index c42ed55524..fb9288a19e 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporter.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporter.java
@@ -23,9 +23,9 @@
 import org.sonar.api.measures.CoreMetrics;
 import org.sonar.plugins.php.PhpPlugin;
 
-public class PhpUnitItCoverageResultImporter extends PhpUnitCoverageResultImporter {
+public class ItCoverageResultImporter extends CoverageResultImporter {
 
-  public PhpUnitItCoverageResultImporter() {
+  public ItCoverageResultImporter() {
     super(PhpPlugin.PHPUNIT_IT_COVERAGE_REPORT_PATH_KEY, "integration test coverage");
     linesToCoverMetric = CoreMetrics.IT_LINES_TO_COVER;
     uncoveredLinesMetric = CoreMetrics.IT_UNCOVERED_LINES;
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporter.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporter.java
similarity index 90%
rename from sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporter.java
rename to sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporter.java
index 227bf0c8ea..275203d6fa 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporter.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporter.java
@@ -23,9 +23,9 @@
 import org.sonar.api.measures.CoreMetrics;
 import org.sonar.plugins.php.PhpPlugin;
 
-public class PhpUnitOverallCoverageResultImporter extends PhpUnitCoverageResultImporter {
+public class OverallCoverageResultImporter extends CoverageResultImporter {
 
-  public PhpUnitOverallCoverageResultImporter() {
+  public OverallCoverageResultImporter() {
     super(PhpPlugin.PHPUNIT_OVERALL_COVERAGE_REPORT_PATH_KEY, "overall coverage");
     linesToCoverMetric = CoreMetrics.OVERALL_LINES_TO_COVER;
     uncoveredLinesMetric = CoreMetrics.OVERALL_UNCOVERED_LINES;
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReport.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestFileReport.java
similarity index 95%
rename from sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReport.java
rename to sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestFileReport.java
index 8a20ebde69..af5070e873 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReport.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestFileReport.java
@@ -38,9 +38,9 @@
  * The reason why the report is file-based (as opposed to class-based) is that the SonarQube measures
  * are stored per file.
  */
-public class PhpUnitTestFileReport {
+public class TestFileReport {
 
-  private static final Logger LOGGER = LoggerFactory.getLogger(PhpUnitTestResultImporter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(TestResultImporter.class);
   private int errors = 0;
   private int failures = 0;
   private String file;
@@ -48,7 +48,7 @@
   private int tests = 0;
   private double testDuration = 0;
 
-  public PhpUnitTestFileReport(String file, double testDuration) {
+  public TestFileReport(String file, double testDuration) {
     this.file = file;
     this.testDuration = testDuration;
   }
@@ -114,7 +114,7 @@ public boolean equals(Object o) {
       return false;
     }
 
-    PhpUnitTestFileReport that = (PhpUnitTestFileReport) o;
+    TestFileReport that = (TestFileReport) o;
 
     return new EqualsBuilder()
       .append(errors, that.errors)
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporter.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestResultImporter.java
similarity index 87%
rename from sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporter.java
rename to sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestResultImporter.java
index 169bda7ec4..c54addf018 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporter.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/TestResultImporter.java
@@ -25,18 +25,18 @@
 import org.sonar.plugins.php.PhpPlugin;
 import org.sonar.plugins.php.phpunit.xml.TestSuites;
 
-public class PhpUnitTestResultImporter extends SingleFilePhpUnitImporter {
+public class TestResultImporter extends SingleFilePhpUnitImporter {
 
   private final JUnitLogParserForPhpUnit parser = new JUnitLogParserForPhpUnit();
 
-  public PhpUnitTestResultImporter() {
+  public TestResultImporter() {
     super(PhpPlugin.PHPUNIT_TESTS_REPORT_PATH_KEY, "test");
   }
 
   @Override
   protected void importReport(File reportFile, SensorContext context, Map<String, Integer> numberOfLinesOfCode) {
     TestSuites testSuites = parser.parse(reportFile);
-    for (PhpUnitTestFileReport fileReport : testSuites.arrangeSuitesIntoTestFileReports()) {
+    for (TestFileReport fileReport : testSuites.arrangeSuitesIntoTestFileReports()) {
       fileReport.saveTestMeasures(context);
     }
   }
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuite.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuite.java
index a600d1e70f..272c419360 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuite.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuite.java
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.sonar.api.internal.google.common.annotations.VisibleForTesting;
-import org.sonar.plugins.php.phpunit.PhpUnitTestFileReport;
+import org.sonar.plugins.php.phpunit.TestFileReport;
 
 @XStreamAlias("testsuite")
 public final class TestSuite {
@@ -70,7 +70,7 @@ public TestSuite() {
     this.testCases = Arrays.asList(testCases);
   }
 
-  public Collection<PhpUnitTestFileReport> generateReports() {
+  public Collection<TestFileReport> generateReports() {
     return collectAllFileBasedSuites().stream().map(TestSuite::createReport).collect(Collectors.toSet());
   }
 
@@ -97,7 +97,7 @@ private void logMisplacedTestCases() {
    * - data-provider-based (a suite generated to contain all dataset variants of a test fed with a PHPUnit dataProvider)
    *
    * Currently we only care about distinguishing between the file-based suite and all the others.
-   * @see PhpUnitTestFileReport
+   * @see TestFileReport
    *
    * @return true if the suite contains a file attribute
    */
@@ -105,13 +105,13 @@ private boolean isFileBased() {
     return file != null;
   }
 
-  private PhpUnitTestFileReport createReport() {
-    final PhpUnitTestFileReport report = new PhpUnitTestFileReport(file, time);
+  private TestFileReport createReport() {
+    final TestFileReport report = new TestFileReport(file, time);
     collectTestCases(report);
     return report;
   }
 
-  private void collectTestCases(PhpUnitTestFileReport fileReport) {
+  private void collectTestCases(TestFileReport fileReport) {
     testCases.forEach(fileReport::addTestCase);
     testSuites.forEach(childSuite -> childSuite.collectTestCases(fileReport));
   }
diff --git a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuites.java b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuites.java
index ff635bf6a1..52744893b3 100755
--- a/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuites.java
+++ b/sonar-php-plugin/src/main/java/org/sonar/plugins/php/phpunit/xml/TestSuites.java
@@ -27,7 +27,7 @@
 import org.apache.commons.lang.builder.EqualsBuilder;
 import org.apache.commons.lang.builder.HashCodeBuilder;
 import org.sonar.api.internal.google.common.annotations.VisibleForTesting;
-import org.sonar.plugins.php.phpunit.PhpUnitTestFileReport;
+import org.sonar.plugins.php.phpunit.TestFileReport;
 
 @XStreamAlias("testsuites")
 public final class TestSuites {
@@ -45,8 +45,8 @@ public TestSuites() {
     this.suites = Arrays.asList(suites);
   }
 
-  public List<PhpUnitTestFileReport> arrangeSuitesIntoTestFileReports() {
-    List<PhpUnitTestFileReport> result = new ArrayList<>();
+  public List<TestFileReport> arrangeSuitesIntoTestFileReports() {
+    List<TestFileReport> result = new ArrayList<>();
     for (TestSuite testSuite : suites) {
       result.addAll(testSuite.generateReports());
     }
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
index 2800bb9be2..aaaffbeecf 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PHPSensorTest.java
@@ -20,15 +20,20 @@
 package org.sonar.plugins.php;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.io.Files;
 import com.sonar.sslr.api.RecognitionException;
 import java.io.File;
 import java.io.InterruptedIOException;
 import java.lang.reflect.Field;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
+import org.junit.After;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.sonar.api.SonarQubeSide;
@@ -88,6 +93,8 @@
   private static final SonarRuntime NOT_SONARLINT_RUNTIME = SonarRuntimeImpl.forSonarQube(SONARLINT_DETECTABLE_VERSION, SonarQubeSide.SERVER);
   private static final SonarRuntime SONARQUBE_6_2 = SonarRuntimeImpl.forSonarQube(Version.create(6, 2), SonarQubeSide.SCANNER);
 
+  private Set<File> tempReportFiles = new HashSet<>();
+
   @org.junit.Rule
   public final ExpectedException thrown = ExpectedException.none();
 
@@ -431,23 +438,53 @@ public void should_disable_unnecessary_features_for_sonarlint() throws Exception
   @Test
   public void should_use_multi_path_coverage() throws Exception {
     context.settings().setProperty(PhpPlugin.PHPUNIT_COVERAGE_REPORT_PATHS_KEY,
-      String.join(",", PhpTestUtils.PHPUNIT_COVERAGE_REPORT, PhpTestUtils.PHPUNIT_IT_COVERAGE_REPORT, PhpTestUtils.PHPUNIT_OVERALL_COVERAGE_REPORT));
+      String.join(",", PhpTestUtils.GENERATED_UT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.GENERATED_IT_COVERAGE_REPORT_RELATIVE_PATH/*, PhpTestUtils.OVERALL_COVERAGE_REPORT_RELATIVE_PATH*/));
 
-    DefaultInputFile inputFile = new DefaultInputFile("moduleKey", PhpTestUtils.PHPUNIT_REPORT_DIR + "src/Monkey.php")
+    DefaultInputFile inputFile = new DefaultInputFile("moduleKey", "src/App.php")
       .setModuleBaseDir(context.fileSystem().baseDirPath())
       .setType(Type.MAIN)
       .setCharset(Charset.defaultCharset())
       .setLanguage(Php.KEY);
     inputFile.initMetadata(new FileMetadata().readMetadata(inputFile.file(), Charsets.UTF_8));
 
-    String mainFileKey = inputFile.key();
+    createReportWithAbsolutePath(PhpTestUtils.GENERATED_UT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.UT_COVERAGE_REPORT_RELATIVE_PATH, inputFile);
+    createReportWithAbsolutePath(PhpTestUtils.GENERATED_IT_COVERAGE_REPORT_RELATIVE_PATH, PhpTestUtils.IT_COVERAGE_REPORT_RELATIVE_PATH, inputFile);
+//    createReportWithAbsolutePath("it-coverage", PhpTestUtils.IT_COVERAGE_REPORT_RELATIVE_PATH, inputFile);
+//    createReportWithAbsolutePath("overall-coverage", PhpTestUtils.OVERALL_COVERAGE_REPORT_RELATIVE_PATH, inputFile);
 
+    String mainFileKey = inputFile.key();
     context.fileSystem().add(inputFile);
-
     context.setRuntime(SONARQUBE_6_2);
+
     createSensor().execute(context);
-    assertThat(context.lineHits(mainFileKey, 46)).isEqualTo(1);
 
+    assertThat(context.lineHits(mainFileKey, 3)).isEqualTo(2);
+    assertThat(context.lineHits(mainFileKey, 7)).isEqualTo(1);
+
+  }
+
+  @After
+  public void tearDown() throws Exception {
+    tempReportFiles.forEach(File::delete);
+  }
+
+  /**
+   * Creates a file name with absolute path in coverage report.
+   *
+   * This hack allow to have this unit test, as only absolute path
+   * in report is supported.
+   * */
+  private void createReportWithAbsolutePath(String generatedReportRelativePath, String relativeReportPath, InputFile inputFile) throws Exception {
+    File tempReport = new File(context.fileSystem().baseDir(), generatedReportRelativePath);
+    tempReport.createNewFile();
+    File originalReport = new File(context.fileSystem().baseDir(), relativeReportPath);
+
+    Files.write(
+      Files.toString(originalReport, StandardCharsets.UTF_8)
+        .replace(inputFile.relativePath(), inputFile.absolutePath()),
+      tempReport, StandardCharsets.UTF_8);
+
+    tempReportFiles.add(tempReport);
   }
 
   private void analyseFileWithException(PHPCheck check, InputFile inputFile, String expectedMessageSubstring) {
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PhpTestUtils.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PhpTestUtils.java
index 262e01bcc0..ff8ffb031e 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PhpTestUtils.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/PhpTestUtils.java
@@ -37,6 +37,14 @@
   public static final String PHPUNIT_IT_COVERAGE_REPORT = PHPUNIT_REPORT_DIR + "phpunit.it.coverage.xml";
   public static final String PHPUNIT_OVERALL_COVERAGE_REPORT = PHPUNIT_REPORT_DIR + "phpunit.overall.coverage.xml";
 
+  public static final String PHPUNIT_REPORT_DIR2 = "phpunit-reports/";
+  public static final String UT_COVERAGE_REPORT_RELATIVE_PATH = PHPUNIT_REPORT_DIR2 + "coverage/ut-coverage.xml";
+  public static final String IT_COVERAGE_REPORT_RELATIVE_PATH = PHPUNIT_REPORT_DIR2 +  "coverage/it-coverage.xml";
+  public static final String OVERALL_COVERAGE_REPORT_RELATIVE_PATH = PHPUNIT_REPORT_DIR2 +  "coverage/overall-coverage.xml";
+
+  public static final String GENERATED_UT_COVERAGE_REPORT_RELATIVE_PATH = PHPUNIT_REPORT_DIR2 + "coverage/generated-ut-coverage.xml";
+  public static final String GENERATED_IT_COVERAGE_REPORT_RELATIVE_PATH = PHPUNIT_REPORT_DIR2 + "coverage/generated-it-coverage.xml";
+
   private PhpTestUtils() {
   }
   
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactoryTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactoryTest.java
index 33a8dcaebb..199e7f4c9f 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactoryTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CompatibilityImportersFactoryTest.java
@@ -39,10 +39,10 @@
 
   private static final String BASE_DIR = "/org/sonar/plugins/php/phpunit/sensor/src/";
   private static final Class[] LEGACY_IMPORTER_CLASSES = {
-    PhpUnitTestResultImporter.class,
-    PhpUnitCoverageResultImporter.class,
-    PhpUnitItCoverageResultImporter.class,
-    PhpUnitOverallCoverageResultImporter.class
+    TestResultImporter.class,
+    CoverageResultImporter.class,
+    ItCoverageResultImporter.class,
+    OverallCoverageResultImporter.class
   };
   private static final SonarRuntime SONAR_QUBE_6_2 = SonarRuntimeImpl.forSonarQube(Version.create(6, 2), SonarQubeSide.SCANNER);
   private static final SonarRuntime SONAR_QUBE_6_1 = SonarRuntimeImpl.forSonarQube(Version.create(6, 1), SonarQubeSide.SCANNER);
@@ -72,7 +72,7 @@ public void should_create_test_result_and_multi_coverage_importer_starting_from_
     context.setRuntime(SONAR_QUBE_6_2);
     context.settings().setProperty(COVERAGES_KEY, "coverage report");
     final List<Class> importerClasses = importerClasses(importersFactory.createImporters());
-    assertThat(importerClasses).containsExactly(PhpUnitTestResultImporter.class, MultiPathImporter.class);
+    assertThat(importerClasses).containsExactly(TestResultImporter.class, MultiPathImporter.class);
   }
 
   @Test
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporterTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CoverageResultImporterTest.java
similarity index 97%
rename from sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporterTest.java
rename to sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CoverageResultImporterTest.java
index e27c537f43..bef1666bc9 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitCoverageResultImporterTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/CoverageResultImporterTest.java
@@ -45,7 +45,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class PhpUnitCoverageResultImporterTest {
+public class CoverageResultImporterTest {
 
   private static final String BASE_DIR = "/org/sonar/plugins/php/phpunit/sensor/src/";
   private static final String MONKEY_FILE_NAME = "Monkey.php";
@@ -59,7 +59,7 @@
   @Rule
   public TemporaryFolder folder = new TemporaryFolder();
 
-  private PhpUnitCoverageResultImporter importer;
+  private CoverageResultImporter importer;
 
   private Map<String, Integer> numberOfLinesOfCode;
   private SensorContextTester context;
@@ -80,7 +80,7 @@ public void setUp() throws Exception {
 
     numberOfLinesOfCode = new HashMap<>();
 
-    importer = new PhpUnitCoverageResultImporter();
+    importer = new CoverageResultImporter();
   }
 
   @Test
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporterTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporterTest.java
similarity index 91%
rename from sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporterTest.java
rename to sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporterTest.java
index 3c86b5032e..41314ecd87 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitItCoverageResultImporterTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/ItCoverageResultImporterTest.java
@@ -29,7 +29,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class PhpUnitItCoverageResultImporterTest {
+public class ItCoverageResultImporterTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();
@@ -37,11 +37,11 @@
   @Mock
   private SensorContext context;
 
-  private PhpUnitCoverageResultImporter importer;
+  private CoverageResultImporter importer;
 
   @Before
   public void setUp() throws Exception {
-    importer = new PhpUnitItCoverageResultImporter();
+    importer = new ItCoverageResultImporter();
   }
 
   @Test
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporterTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporterTest.java
similarity index 90%
rename from sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporterTest.java
rename to sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporterTest.java
index db5382e287..734536ad09 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitOverallCoverageResultImporterTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/OverallCoverageResultImporterTest.java
@@ -29,7 +29,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class PhpUnitOverallCoverageResultImporterTest {
+public class OverallCoverageResultImporterTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();
@@ -37,11 +37,11 @@
   @Mock
   private SensorContext context;
 
-  private PhpUnitCoverageResultImporter importer;
+  private CoverageResultImporter importer;
 
   @Before
   public void setUp() throws Exception {
-    importer = new PhpUnitOverallCoverageResultImporter();
+    importer = new OverallCoverageResultImporter();
   }
 
   @Test
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReportTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestFileReportTest.java
similarity index 90%
rename from sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReportTest.java
rename to sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestFileReportTest.java
index 150d74391f..76a4088587 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestFileReportTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestFileReportTest.java
@@ -30,7 +30,7 @@
 import org.sonar.plugins.php.api.Php;
 import org.sonar.plugins.php.phpunit.xml.TestCase;
 
-public class PhpUnitTestFileReportTest {
+public class TestFileReportTest {
 
   private String componentKey;
   private String testFileName;
@@ -47,7 +47,7 @@ public void setUp() throws Exception {
 
   @Test
   public void shouldReportStatusCounts() throws Exception {
-    final PhpUnitTestFileReport report = new PhpUnitTestFileReport(testFileName, 3d);
+    final TestFileReport report = new TestFileReport(testFileName, 3d);
     report.addTestCase(new TestCase(TestCase.Status.SKIPPED));
     report.addTestCase(new TestCase(TestCase.Status.ERROR));
     report.addTestCase(new TestCase(TestCase.Status.FAILURE));
@@ -61,14 +61,14 @@ public void shouldReportStatusCounts() throws Exception {
 
   @Test
   public void shouldReportZeroTestsIfEmpty() throws Exception {
-    final PhpUnitTestFileReport report = new PhpUnitTestFileReport(testFileName, 0d);
+    final TestFileReport report = new TestFileReport(testFileName, 0d);
     report.saveTestMeasures(context);
     PhpTestUtils.assertMeasure(context, componentKey, CoreMetrics.TESTS, 0);
   }
 
   @Test
   public void shouldNotCountSkippedTests() throws Exception {
-    final PhpUnitTestFileReport report = new PhpUnitTestFileReport(testFileName, 1d);
+    final TestFileReport report = new TestFileReport(testFileName, 1d);
     report.addTestCase(new TestCase());
     report.addTestCase(new TestCase(TestCase.Status.SKIPPED));
     report.addTestCase(new TestCase(TestCase.Status.FAILURE));
@@ -80,7 +80,7 @@ public void shouldNotCountSkippedTests() throws Exception {
 
   @Test
   public void shouldReportNoSuccessDensityIfNoLiveTests() throws Exception {
-    final PhpUnitTestFileReport report = new PhpUnitTestFileReport(testFileName, 1d);
+    final TestFileReport report = new TestFileReport(testFileName, 1d);
     report.addTestCase(new TestCase(TestCase.Status.SKIPPED));
     report.addTestCase(new TestCase(TestCase.Status.SKIPPED));
     report.addTestCase(new TestCase(TestCase.Status.SKIPPED));
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporterTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestResultImporterTest.java
similarity index 94%
rename from sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporterTest.java
rename to sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestResultImporterTest.java
index 7f1458988d..a61209c764 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/PhpUnitTestResultImporterTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/TestResultImporterTest.java
@@ -31,13 +31,13 @@
 import org.sonar.plugins.php.api.Php;
 import org.sonar.test.TestUtils;
 
-public class PhpUnitTestResultImporterTest {
+public class TestResultImporterTest {
 
-  private PhpUnitTestResultImporter importer;
+  private TestResultImporter importer;
 
   private SensorContextTester setUpForSensorContextTester() {
     SensorContextTester context = SensorContextTester.create(new File("src/test/resources"));
-    importer = new PhpUnitTestResultImporter();
+    importer = new TestResultImporter();
     return context;
   }
 
@@ -56,7 +56,7 @@ public void shouldGenerateTestsMeasures() {
     String appTestFileKey = appTestFile.key();
     String appSkipTestFileKey = appSkippedTestFile.key();
 
-    importer = new PhpUnitTestResultImporter();
+    importer = new TestResultImporter();
     importer.importReport(TestUtils.getResource(PhpTestUtils.PHPUNIT_REPORT_NAME), context, new HashMap<>());
 
     PhpTestUtils.assertMeasure(context, appTestFileKey, CoreMetrics.TESTS, 1);
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuiteTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuiteTest.java
index 726b3f9ca6..2937b8e41f 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuiteTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuiteTest.java
@@ -21,7 +21,7 @@
 
 import java.util.Collection;
 import org.junit.Test;
-import org.sonar.plugins.php.phpunit.PhpUnitTestFileReport;
+import org.sonar.plugins.php.phpunit.TestFileReport;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -31,7 +31,7 @@
   public void shouldCreateReportOnlyIfFileBased() throws Exception {
     final TestSuite fileSuite = new TestSuite("file");
     assertThat(fileSuite.generateReports().size()).isEqualTo(1);
-    assertThat(fileSuite.generateReports().iterator().next()).isEqualTo(new PhpUnitTestFileReport("file", 0d));
+    assertThat(fileSuite.generateReports().iterator().next()).isEqualTo(new TestFileReport("file", 0d));
     final TestSuite notFileSuite = new TestSuite(null);
     assertThat(notFileSuite.generateReports().isEmpty()).isTrue();
   }
@@ -55,7 +55,7 @@ public void shouldCreateOneReportForEveryNestedFileBasedSuite() throws Exception
     final TestSuite fileSuite2 = new TestSuite("file2");
     intermediateSuite.addNested(fileSuite2);
     rootSuite.addNested(intermediateSuite);
-    final Collection<PhpUnitTestFileReport> reports = rootSuite.generateReports();
+    final Collection<TestFileReport> reports = rootSuite.generateReports();
     assertThat(reports).contains(fileSuite1.generateReports().iterator().next());
     assertThat(reports).contains(fileSuite2.generateReports().iterator().next());
   }
diff --git a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuitesTest.java b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuitesTest.java
index 6b04662dc0..4ee98fbcea 100755
--- a/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuitesTest.java
+++ b/sonar-php-plugin/src/test/java/org/sonar/plugins/php/phpunit/xml/TestSuitesTest.java
@@ -24,7 +24,7 @@
 
 import java.util.List;
 import org.junit.Test;
-import org.sonar.plugins.php.phpunit.PhpUnitTestFileReport;
+import org.sonar.plugins.php.phpunit.TestFileReport;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -45,10 +45,10 @@ public void shouldCollectReportsFromAllTestSuites() {
     final String testFile1 = "one.php";
     final String testFile2 = "two.php";
     final TestSuites testSuites = new TestSuites(new TestSuite(testFile1), new TestSuite(testFile2));
-    final List<PhpUnitTestFileReport> reports = testSuites.arrangeSuitesIntoTestFileReports();
+    final List<TestFileReport> reports = testSuites.arrangeSuitesIntoTestFileReports();
     assertThat(reports.size()).isEqualTo(2);
-    assertThat(reports).contains(new PhpUnitTestFileReport(testFile1, 0d));
-    assertThat(reports).contains(new PhpUnitTestFileReport(testFile2, 0d));
+    assertThat(reports).contains(new TestFileReport(testFile1, 0d));
+    assertThat(reports).contains(new TestFileReport(testFile2, 0d));
   }
 
 }
diff --git a/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/it-coverage.xml b/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/it-coverage.xml
new file mode 100755
index 0000000000..7bc08a40f1
--- /dev/null
+++ b/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/it-coverage.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<coverage generated="1234543251" phpunit="3.3.1">
+  <project name="AllTests" timestamp="1234543251">
+    <file name="src/App.php">
+      <line num="3" type="stmt" count="1"/>
+      <line num="4" type="stmt" count="1"/>
+      <line num="6" type="stmt" count="1"/>
+      <line num="7" type="stmt" count="0"/>
+    </file>
+  </project>
+</coverage>
diff --git a/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/ut-coverage.xml b/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/ut-coverage.xml
new file mode 100755
index 0000000000..5bb4ff8f44
--- /dev/null
+++ b/sonar-php-plugin/src/test/resources/phpunit-reports/coverage/ut-coverage.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<coverage generated="1234543251" phpunit="3.3.1">
+  <project name="AllTests" timestamp="1234543251">
+    <file name="src/App.php">
+      <line num="3" type="stmt" count="1"/>
+      <line num="4" type="stmt" count="1"/>
+      <line num="6" type="stmt" count="1"/>
+      <line num="7" type="stmt" count="1"/>
+    </file>
+  </project>
+</coverage>
diff --git a/sonar-php-plugin/src/test/resources/src/App.php b/sonar-php-plugin/src/test/resources/src/App.php
new file mode 100755
index 0000000000..af5be29b24
--- /dev/null
+++ b/sonar-php-plugin/src/test/resources/src/App.php
@@ -0,0 +1,8 @@
+<?php
+
+$x = 1;
+echo $x;
+
+if (false) {
+  echo "hello";
+}
