diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 2d4e38e506..f58dd9c4ea 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -380,4 +380,31 @@
   <module name="Translation">
     <property name="requiredTranslations" value="de, fr, fi, es, pt, ja, tr"/>
   </module>
+  <module name="SuppressWarningsFilter"/>
+  <module name="SeverityMatchFilter">
+    <!--
+      report all violations except ignore
+    -->
+    <property name="severity" value="ignore"/>
+    <property name="acceptOnMatch" value="false"/>
+  </module>
+  <module name="SuppressWithNearbyCommentFilter">
+    <!--
+      Use suppressions.xml for suppressions, this is only example.
+      checkFormat will prevent suppression comments from being valid.
+    -->
+    <property name="checkFormat" value="IGNORETHIS"/>
+    <property name="commentFormat" value="SUPPRESS CHECKSTYLE, (\w+)"/>
+    <property name="messageFormat" value="$1"/>
+    <property name="influenceFormat" value="-1"/>
+  </module>
+  <module name="SuppressionCommentFilter">
+    <!--
+      Use suppressions.xml for suppressions, this is only example.
+      checkFormat will prevent suppression comments from being valid.
+    -->
+    <property name="checkFormat" value="IGNORETHIS"/>
+    <property name="offCommentFormat" value="CSOFF\: .*"/>
+    <property name="onCommentFormat" value="CSON\: .*"/>
+  </module>
 </module>
diff --git a/config/pmd.xml b/config/pmd.xml
index a9892601f5..da6fc7d81e 100755
--- a/config/pmd.xml
+++ b/config/pmd.xml
@@ -186,6 +186,12 @@
       <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@Image='Main']"/>
     </properties>
   </rule>
+  <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace">
+    <properties>
+      <!-- it is ok to use print stack trace in CLI class -->
+      <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@Image='Main']"/>
+    </properties>
+  </rule>
 
   <rule ref="rulesets/java/migrating.xml"/>
   
diff --git a/config/suppressions.xml b/config/suppressions.xml
index eb090a7b67..63346cdd9f 100755
--- a/config/suppressions.xml
+++ b/config/suppressions.xml
@@ -42,7 +42,7 @@
               files="AbstractClassNameCheckTest.java|AbstractTypeAwareCheckTest.java|AbstractJavadocCheckTest.java|AbstractViolationReporterTest.java"/>
 
     <!-- Tone down the checking for test code -->
-    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="322"/>
+    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="321"/>
     <suppress checks="EmptyBlock" files=".*[\\/]src[\\/]test[\\/]"/>
     <suppress checks="ImportControl" files=".*[\\/]src[\\/](test|it)[\\/]"/>
     <suppress checks="Javadoc" files=".*[\\/]src[\\/](test|it)[\\/]"/>
@@ -100,7 +100,7 @@
 
     <!-- Suppressions from PMD configuration-->
     <!-- validateCli is not reasonable to split as encapsulation of logic will be damaged -->
-    <suppress checks="CyclomaticComplexity" files="Main\.java"  lines="179"/>
+    <suppress checks="CyclomaticComplexity" files="Main\.java"  lines="169"/>
     <!-- JavadocMethodCheck, JavadocStyleCheck, JavadocUtils.getJavadocTags() - deprecated -->
     <suppress checks="CyclomaticComplexity" files="JavadocMethodCheck\.java"/>
     <suppress checks="CyclomaticComplexity" files="JavadocStyleCheck\.java"/>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 2df5198d5d..bc0defa3a8 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -277,6 +277,7 @@ public int process(List<File> files) throws CheckstyleException {
                 fireFileFinished(fileName);
             }
             catch (Exception ex) {
+                // We need to catch all exception to put a reason failure(file name) in exception
                 throw new CheckstyleException("Exception happens during processing of "
                         + file.getPath(), ex);
             }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index 5f5404edbf..05979ad7c2 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -82,8 +82,8 @@ private Main() {
      * is the number of errors found in all the files.
      * @param args the command line arguments.
      * @throws FileNotFoundException if there is a problem with files access
+     * @noinspection CallToPrintStackTrace
      **/
-    @SuppressWarnings("CallToPrintStackTrace")
     public static void main(String... args) throws FileNotFoundException {
         int errorCounter = 0;
         boolean cliViolations = false;
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 9f54c756b1..40c3e35776 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -20,13 +20,15 @@
 package com.puppycrawl.tools.checkstyle.checks.annotation;
 
 import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.commons.lang3.ArrayUtils;
 
+import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
 import com.puppycrawl.tools.checkstyle.utils.AnnotationUtility;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
@@ -38,7 +40,7 @@
  * </p>
  *
  * <p>
- * The {@link AbstractFormatCheck#setFormat warnings} property is a
+ * The {@link #setFormat warnings} property is a
  * regex pattern.  Any warning being suppressed matching
  * this pattern will be flagged.
  * </p>
@@ -47,7 +49,7 @@
  * By default, any warning specified will be disallowed on
  * all legal TokenTypes unless otherwise specified via
  * the
- * {@link com.puppycrawl.tools.checkstyle.api.Check#setTokens(String[]) tokens}
+ * {@link Check#setTokens(String[]) tokens}
  * property.
  *
  * Also, by default warnings that are empty strings or all
@@ -89,7 +91,7 @@
  * </pre>
  * @author Travis Schneeberger
  */
-public class SuppressWarningsCheck extends AbstractFormatCheck {
+public class SuppressWarningsCheck extends Check {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
@@ -107,12 +109,20 @@
     private static final String FQ_SUPPRESS_WARNINGS =
         "java.lang." + SUPPRESS_WARNINGS;
 
+    /** The format string of the regexp. */
+    private String format = "^$|^\\s+$";
+
+    /** The regexp to match against. */
+    private Pattern regexp = Pattern.compile(format);
+
     /**
-     * Ctor that specifies the default for the format property
-     * as specified in the class javadocs.
+     * Set the format to the specified regular expression.
+     * @param format a {@code String} value
+     * @throws org.apache.commons.beanutils.ConversionException unable to parse format
      */
-    public SuppressWarningsCheck() {
-        super("^$|^\\s+$");
+    public final void setFormat(String format) {
+        this.format = format;
+        regexp = CommonUtils.createPattern(format);
     }
 
     @Override
@@ -234,7 +244,7 @@ private static DetailAST getSuppressWarnings(DetailAST ast) {
      */
     private void logMatch(final int lineNo,
         final int colNum, final String warningText) {
-        final Matcher matcher = getRegexp().matcher(warningText);
+        final Matcher matcher = regexp.matcher(warningText);
         if (matcher.matches()) {
             log(lineNo, colNum,
                     MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, warningText);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index c8ccf233f6..e2f388c918 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -37,7 +37,8 @@
  * </p>
  *
  * <p>
- * Import statements (lines matching pattern {@code ^import .*}) are not verified by this check.
+ * Package statements and import statements (lines matching pattern
+ * {@code ^(package|import) .*}), and are not verified by this check.
  * </p>
  * <p>
  * The default maximum allowable line length is 80 characters. To change the
@@ -84,8 +85,8 @@
     /** Default maximum number of columns in a line. */
     private static final int DEFAULT_MAX_COLUMNS = 80;
 
-    /** Pattern matching import and import static statements. */
-    private static final Pattern IMPORT_PATTERN = Pattern.compile("^import .*");
+    /** Patterns matching package, import, and import static statements. */
+    private static final Pattern IGNORE_PATTERN = Pattern.compile("^(package|import) .*");
 
     /** The maximum number of columns in a line. */
     private int max = DEFAULT_MAX_COLUMNS;
@@ -124,7 +125,7 @@ public void beginTree(DetailAST rootAST) {
             final int realLength = CommonUtils.lengthExpandedTabs(
                 line, line.length(), getTabWidth());
 
-            if (realLength > max && !IMPORT_PATTERN.matcher(line).find()
+            if (realLength > max && !IGNORE_PATTERN.matcher(line).find()
                 && !ignorePattern.matcher(line).find()) {
                 log(i + 1, MSG_KEY, max, realLength);
             }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
index 7e53d5dbb1..091e063206 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
@@ -191,13 +191,6 @@ public void testAllCheckstyleModulesInCheckstyleConfig() throws Exception {
         final Set<String> configChecks = getCheckStyleChecksReferencedInConfig(CONFIG_PATH);
 
         for (String moduleName : getSimpleNames(getCheckstyleModules())) {
-            if ("SuppressionCommentFilter".equals(moduleName)
-                || "SeverityMatchFilter".equals(moduleName)
-                || "SuppressWithNearbyCommentFilter".equals(moduleName)
-                || "SuppressWarningsFilter".equals(moduleName)) {
-                continue;
-            }
-
             Assert.assertTrue("checkstyle_checks.xml is missing module: " + moduleName,
                     configChecks.contains(moduleName));
         }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index e099927ec1..6b1e60c972 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -147,11 +147,11 @@ public void testNonExistingConfigFile()
         exit.checkAssertionAfterwards(new Assertion() {
             @Override
             public void checkAssertion() {
-                assertEquals(String.format(Locale.ROOT,
-                        "Unable to find: src/main/resources/non_existing_config.xml%n"
-                                + "Checkstyle ends with 1 errors.%n"),
+                assertEquals(String.format(Locale.ROOT, "Checkstyle ends with 1 errors.%n"),
                         systemOut.getLog());
-                assertEquals("", systemErr.getLog());
+                final String cause = "com.puppycrawl.tools.checkstyle.api.CheckstyleException:"
+                        + " Unable to find: src/main/resources/non_existing_config.xml";
+                assertTrue(systemErr.getLog().startsWith(cause));
             }
         });
         Main.main("-c", "src/main/resources/non_existing_config.xml",
@@ -176,38 +176,18 @@ public void checkAssertion() {
     @Test
     public void testNonExistingClass() throws Exception {
         exit.expectSystemExitWithStatus(-2);
-        final String cause = "Unable to instantiate 'NonExistingClass' class,"
-            + " it is also not possible to instantiate it as"
-            + " com.puppycrawl.tools.checkstyle.checks.annotation.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.blocks.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.coding.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.design.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.header.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.imports.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.indentation.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.javadoc.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.metrics.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.modifier.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.naming.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.regexp.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.sizes.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.whitespace.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.checks.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.filters.NonExistingClass,"
-            + " com.puppycrawl.tools.checkstyle.NonExistingClass."
-            + " Please recheck that class name is specified as canonical name or read"
-            + " how to configure short name usage"
-            + " http://checkstyle.sourceforge.net/config.html#Packages."
-            + " Please also recheck that provided ClassLoader to Checker is configured correctly.";
-        final String expectedExceptionMessage =
-            String.format(Locale.ROOT, "cannot initialize module TreeWalker - %1$s%n"
-                + "Cause: com.puppycrawl.tools.checkstyle.api.CheckstyleException: %1$s%n"
-                + "Checkstyle ends with 1 errors.%n", cause);
         exit.checkAssertionAfterwards(new Assertion() {
             @Override
             public void checkAssertion() {
+                final String expectedExceptionMessage =
+                        String.format(Locale.ROOT, "Checkstyle ends with 1 errors.%n");
                 assertEquals(expectedExceptionMessage, systemOut.getLog());
-                assertEquals("", systemErr.getLog());
+
+                final String cause = "com.puppycrawl.tools.checkstyle.api.CheckstyleException:"
+                        + " cannot initialize module TreeWalker - "
+                        + "Unable to instantiate 'NonExistingClass' class, "
+                        + "it is also not possible to instantiate it as ";
+                assertTrue(systemErr.getLog().startsWith(cause));
             }
         });
 
@@ -438,16 +418,10 @@ public void testExistingIncorrectConfigFile()
         exit.checkAssertionAfterwards(new Assertion() {
             @Override
             public void checkAssertion() {
-                assertTrue(systemOut.getLog().startsWith(String.format(Locale.ROOT,
-                      "unable to parse configuration stream"
-                      + " - Content is not allowed in prolog.:7:1%n"
-                      + "Cause: org.xml.sax.SAXParseException; systemId: file:")));
-                assertTrue(systemOut.getLog().endsWith(String.format(Locale.ROOT,
-                        "com/puppycrawl/tools/checkstyle/config-Incorrect.xml;"
-                                + " lineNumber: 7; columnNumber: 1; "
-                                + "Content is not allowed in prolog.%n"
-                                + "Checkstyle ends with 1 errors.%n")));
-                assertEquals("", systemErr.getLog());
+                assertEquals("Checkstyle ends with 1 errors.\n", systemOut.getLog());
+                assertTrue(systemErr.getLog().startsWith("com.puppycrawl.tools.checkstyle.api."
+                        + "CheckstyleException: unable to parse configuration stream"
+                        + " - Content is not allowed in prolog.:7:1\n"));
             }
         });
         Main.main("-c", getPath("config-Incorrect.xml"),
@@ -596,7 +570,7 @@ public void testFileReferenceDuringException() throws Exception {
             @Override
             public void checkAssertion() {
                 assertEquals(expectedExceptionMessage, systemOut.getLog());
-                String exceptionFirstLine = "com.puppycrawl.tools.checkstyle.api."
+                final String exceptionFirstLine = "com.puppycrawl.tools.checkstyle.api."
                         + "CheckstyleException: Exception happens during processing of "
                         + "src/test/resources-noncompilable/com/puppycrawl/tools/"
                         + "checkstyle/InputIncorrectClass.java\n";
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
index 20b4e4b067..d4d62730e3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
@@ -109,7 +109,6 @@
     private static final Set<String> FILESET_PROPERTIES = getProperties(AbstractFileSetCheck.class);
 
     private static final List<String> UNDOCUMENTED_PROPERTIES = Arrays.asList(
-            "SuppressWarningsCheck.compileFlags",
             "SuppressWithNearbyCommentFilter.fileContents",
             "IllegalTokenTextCheck.compileFlags",
             "ReturnCountCheck.compileFlags",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
index 2f4d8bed59..75ffd85d03 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
@@ -39,7 +39,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class AnnotationUseStyleTest extends BaseCheckTestSupport {
+public class AnnotationUseStyleCheckTest extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
index f60d47e849..e36b839718 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
@@ -34,7 +34,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class MissingDeprecatedTest extends BaseCheckTestSupport {
+public class MissingDeprecatedCheckTest extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java
similarity index 97%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java
index cd0074166d..a383b1cf3f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java
@@ -30,7 +30,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class PackageAnnotationTest extends BaseCheckTestSupport {
+public class PackageAnnotationCheckTest extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
index 409078b28c..f1d287b774 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
@@ -31,7 +31,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class AvoidStarImportTest
+public class AvoidStarImportCheckTest
     extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
index d6a043fecc..2db80505d9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
@@ -31,7 +31,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class AvoidStaticImportTest
+public class AvoidStaticImportCheckTest
     extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
index 217899ceb6..3f08002ec8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
@@ -32,7 +32,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class RedundantModifierTest
+public class RedundantModifierCheckTest
     extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
index 2aa2133a91..5de40a3eb5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
@@ -31,7 +31,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class TypeParameterNameTest
+public class ClassTypeParameterNameCheckTest
     extends BaseCheckTestSupport {
     @Override
     protected String getPath(String filename) throws IOException {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
index 2e0f2063ff..ec447e8f77 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
@@ -38,6 +38,12 @@ protected String getPath(String filename) throws IOException {
                 + "sizes" + File.separator + filename);
     }
 
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "sizes" + File.separator + filename);
+    }
+
     @Test
     public void testGetRequiredTokens() {
         final LineLengthCheck checkObj = new LineLengthCheck();
@@ -89,4 +95,15 @@ public void shouldNotLogLongImportStatements() throws Exception {
         };
         verify(checkConfig, getPath("InputLongImportStatements.java"), expected);
     }
+
+    @Test
+    public void shouldNotLogLongPackageStatements() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(LineLengthCheck.class);
+        checkConfig.addAttribute("max", "80");
+        final String[] expected = {
+            "6: " + getCheckMessage(MSG_KEY, 80, 88),
+        };
+        verify(checkConfig, getNonCompilablePath("InputLongPackageStatement.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
similarity index 99%
rename from src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java
rename to src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
index 836d2681f7..4305a37c09 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
@@ -34,7 +34,7 @@
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class WhitespaceAroundTest
+public class WhitespaceAroundCheckTest
     extends BaseCheckTestSupport {
     private DefaultConfiguration checkConfig;
 
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java
new file mode 100755
index 0000000000..a14b0640f8
--- /dev/null
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java
@@ -0,0 +1,8 @@
+package com.nameofcompany.nameofdivision.nameofproject.systemtests.parallel.areaoftest.featuretested.flowtested;
+
+public class InputLongImportStatements {
+    @Override
+    public String toString() {
+        return "This is very long line that should be logged because it is not package";
+    }
+}
diff --git a/src/xdocs/config_filters.xml b/src/xdocs/config_filters.xml
index 12f29003ff..32832a2bca 100755
--- a/src/xdocs/config_filters.xml
+++ b/src/xdocs/config_filters.xml
@@ -73,6 +73,12 @@
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L384-L390">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -528,6 +534,12 @@ HashSet hashSet; // Warning here: Declaring variables, return values or paramete
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L401-L409">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -713,6 +725,12 @@ public static final int [] array; // @cs.suppress ConstantName | NoWhitespaceAft
             </source>
         </subsection>
         <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L391-L400">
+            Checkstyle Style</a>
+          </li>
+        </ul>
         </subsection>
         <subsection name="Package">
             <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -774,6 +792,12 @@ private int [] ARRAY; // should NOT fail MemberNameCheck and NoWhitespaceAfterCh
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L383">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
diff --git a/src/xdocs/config_sizes.xml b/src/xdocs/config_sizes.xml
index 64bd09a1ae..9936f6ed08 100755
--- a/src/xdocs/config_sizes.xml
+++ b/src/xdocs/config_sizes.xml
@@ -245,7 +245,7 @@
             property <code>tabWidth</code> for <code>LineLength</code> alone.
           </li>
           <li>
-            Import statements (lines matching pattern <code>^import .*</code>) are not verified by
+            Package and import statements (lines matching pattern <code>^(package|import) .*</code>) are not verified by
             this check.
           </li>
         </ul>
