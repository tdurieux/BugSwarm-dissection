diff --git a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
index 7ffd6b290e..1d92c1e788 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/NewPHPGrammar.java
@@ -167,7 +167,7 @@ public SwitchStatementTree SWITCH_STATEMENT() {
                 PARENTHESIZED_EXPRESSION(),
                 b.token(PHPPunctuator.LCURLYBRACE),
                 b.optional(b.token(PHPPunctuator.SEMICOLON)),
-                b.oneOrMore(SWITCH_CASE_CLAUSE()),
+                b.zeroOrMore(SWITCH_CASE_CLAUSE()),
                 b.token(PHPPunctuator.RCURLYBRACE)
             ),
             f.alternativeSwitchStatement(
@@ -175,7 +175,7 @@ public SwitchStatementTree SWITCH_STATEMENT() {
                 PARENTHESIZED_EXPRESSION(),
                 b.token(PHPPunctuator.COLON),
                 b.optional(b.token(PHPPunctuator.SEMICOLON)),
-                b.oneOrMore(SWITCH_CASE_CLAUSE()),
+                b.zeroOrMore(SWITCH_CASE_CLAUSE()),
                 b.token(PHPKeyword.ENDSWITCH),
                 EOS()
             )
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
index ff313267c0..6ab7169671 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/PHPLexicalGrammar.java
@@ -118,10 +118,6 @@
   FOREACH_VARIABLE,
   SWITCH_STATEMENT,
   SWITCH_CASE_CLAUSE,
-  CASE_LIST,
-  CASE_CLAUSE,
-  DEFAULT_CLAUSE,
-  CASE_SEPARTOR,
   BREAK_STATEMENT,
   CONTINUE_STATEMENT,
   RETURN_STATEMENT,
diff --git a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
index e82cc62570..c0986c2a20 100755
--- a/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
+++ b/php-frontend/src/main/java/org/sonar/php/parser/TreeFactory.java
@@ -44,8 +44,10 @@
 import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
 import org.sonar.php.tree.impl.statement.BlockTreeImpl;
 import org.sonar.php.tree.impl.statement.BreakStatementTreeImpl;
+import org.sonar.php.tree.impl.statement.CaseClauseTreeImpl;
 import org.sonar.php.tree.impl.statement.CatchBlockTreeImpl;
 import org.sonar.php.tree.impl.statement.ContinueStatementTreeImpl;
+import org.sonar.php.tree.impl.statement.DefaultClauseTreeImpl;
 import org.sonar.php.tree.impl.statement.DoWhileStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.ElseClauseTreeImpl;
 import org.sonar.php.tree.impl.statement.ElseifClauseTreeImpl;
@@ -59,6 +61,7 @@
 import org.sonar.php.tree.impl.statement.IfStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.LabelTreeImpl;
 import org.sonar.php.tree.impl.statement.ReturnStatementTreeImpl;
+import org.sonar.php.tree.impl.statement.SwitchStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.ThrowStatementTreeImpl;
 import org.sonar.php.tree.impl.statement.TryStatementImpl;
 import org.sonar.php.tree.impl.statement.WhileStatementTreeImpl;
@@ -85,8 +88,10 @@
 import org.sonar.plugins.php.api.tree.expression.YieldExpressionTree;
 import org.sonar.plugins.php.api.tree.statement.BlockTree;
 import org.sonar.plugins.php.api.tree.statement.BreakStatementTree;
+import org.sonar.plugins.php.api.tree.statement.CaseClauseTree;
 import org.sonar.plugins.php.api.tree.statement.CatchBlockTree;
 import org.sonar.plugins.php.api.tree.statement.ContinueStatementTree;
+import org.sonar.plugins.php.api.tree.statement.DefaultClauseTree;
 import org.sonar.plugins.php.api.tree.statement.DoWhileStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
 import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
@@ -406,6 +411,46 @@ public WhileStatementTree alternativeWhileStatement(
     );
   }
 
+  public SwitchStatementTree switchStatement(InternalSyntaxToken switchToken, ParenthesisedExpressionTree expression, InternalSyntaxToken openCurlyBraceToken, Optional<InternalSyntaxToken> semicolonToken, Optional<List<SwitchCaseClauseTree>> switchCaseClauses, InternalSyntaxToken closeCurlyBraceToken) {
+    return new SwitchStatementTreeImpl(
+        switchToken,
+        expression,
+        openCurlyBraceToken,
+        semicolonToken.orNull(),
+        optionalList(switchCaseClauses),
+        closeCurlyBraceToken
+    );
+  }
+
+  public SwitchStatementTree alternativeSwitchStatement(InternalSyntaxToken switchToken, ParenthesisedExpressionTree expression, InternalSyntaxToken colonToken, Optional<InternalSyntaxToken> semicolonToken, Optional<List<SwitchCaseClauseTree>> switchCaseClauses, InternalSyntaxToken endswitchToken, InternalSyntaxToken eosToken) {
+    return new SwitchStatementTreeImpl(
+        switchToken,
+        expression,
+        colonToken,
+        semicolonToken.orNull(),
+        optionalList(switchCaseClauses),
+        endswitchToken,
+        eosToken
+    );
+  }
+
+  public CaseClauseTree caseClause(InternalSyntaxToken caseToken, ExpressionTree expression, InternalSyntaxToken caseSeparatorToken, Optional<List<StatementTree>> statements) {
+    return new CaseClauseTreeImpl(
+        caseToken,
+        expression,
+        caseSeparatorToken,
+        optionalList(statements)
+    );
+  }
+
+  public DefaultClauseTree defaultClause(InternalSyntaxToken defaultToken, InternalSyntaxToken caseSeparatorToken, Optional<List<StatementTree>> statements) {
+    return new DefaultClauseTreeImpl(
+        defaultToken,
+        caseSeparatorToken,
+        optionalList(statements)
+    );
+  }
+
   /**
    * [ END ] Statement
    */
@@ -640,17 +685,6 @@ public ExpressionTree memberExpression(ExpressionTree object, Optional<List<Expr
     return result;
   }
 
-  public SwitchStatementTree switchStatement(InternalSyntaxToken switchToken, ParenthesisedExpressionTree expression, InternalSyntaxToken openCurlyBraceToken, Optional<InternalSyntaxToken> semicolonToken, List<SwitchCaseClauseTree> switchCaseClauses, InternalSyntaxToken closeCurlyBraceToken) {
-    return new SwitchStatementTreeImpl(
-        switchToken,
-        expression,
-        openCurlyBraceToken,
-        semicolonToken.orNull(),
-        switchCaseClauses,
-        closeCurlyBraceToken
-    );
-  }
-
   /**
    * [ END ] Expression
    */
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/CaseClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/CaseClauseTreeImpl.java
new file mode 100755
index 0000000000..4179238277
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/CaseClauseTreeImpl.java
@@ -0,0 +1,88 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.CaseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import java.util.Iterator;
+import java.util.List;
+
+public class CaseClauseTreeImpl extends PHPTree implements CaseClauseTree {
+
+  private static final Kind KIND = Kind.CASE_CLAUSE;
+
+  private final InternalSyntaxToken caseToken;
+  private final ExpressionTree expression;
+  private final InternalSyntaxToken caseSeparatorToken;
+  private final List<StatementTree> statements;
+
+  public CaseClauseTreeImpl(InternalSyntaxToken caseToken, ExpressionTree expression, InternalSyntaxToken caseSeparatorToken, List<StatementTree> statements) {
+    this.caseToken = caseToken;
+    this.expression = expression;
+    this.caseSeparatorToken = caseSeparatorToken;
+    this.statements = statements;
+  }
+
+  @Override
+  public ExpressionTree expression() {
+    return expression;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(caseToken, expression, caseSeparatorToken),
+        statements.iterator()
+    );
+  }
+
+  @Override
+  public SyntaxToken caseToken() {
+    return caseToken;
+  }
+
+  @Override
+  public SyntaxToken caseSeparatorToken() {
+    return caseSeparatorToken;
+  }
+
+  @Override
+  public List<StatementTree> statements() {
+    return statements;
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitCaseClause(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/DefaultClauseTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/DefaultClauseTreeImpl.java
new file mode 100755
index 0000000000..1c4c6df8a8
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/DefaultClauseTreeImpl.java
@@ -0,0 +1,80 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.DefaultClauseTree;
+import org.sonar.plugins.php.api.tree.statement.StatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import java.util.Iterator;
+import java.util.List;
+
+public class DefaultClauseTreeImpl extends PHPTree implements DefaultClauseTree {
+
+  private static final Kind KIND = Kind.DEFAULT_CLAUSE;
+
+  private final InternalSyntaxToken defaultToken;
+  private final InternalSyntaxToken caseSeparatorToken;
+  private final List<StatementTree> statements;
+
+  public DefaultClauseTreeImpl(InternalSyntaxToken defaultToken, InternalSyntaxToken caseSeparatorToken, List<StatementTree> statements) {
+    this.defaultToken = defaultToken;
+    this.caseSeparatorToken = caseSeparatorToken;
+    this.statements = statements;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(defaultToken, caseSeparatorToken),
+        statements.iterator()
+    );
+  }
+
+  @Override
+  public SyntaxToken caseToken() {
+    return defaultToken;
+  }
+
+  @Override
+  public SyntaxToken caseSeparatorToken() {
+    return caseSeparatorToken;
+  }
+
+  @Override
+  public List<StatementTree> statements() {
+    return statements;
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitDefaultClause(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeImpl.java b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeImpl.java
new file mode 100755
index 0000000000..bfe6609e4e
--- /dev/null
+++ b/php-frontend/src/main/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeImpl.java
@@ -0,0 +1,159 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import com.google.common.collect.Iterators;
+import org.sonar.php.tree.impl.PHPTree;
+import org.sonar.php.tree.impl.lexical.InternalSyntaxToken;
+import org.sonar.plugins.php.api.tree.Tree;
+import org.sonar.plugins.php.api.tree.expression.ParenthesisedExpressionTree;
+import org.sonar.plugins.php.api.tree.lexical.SyntaxToken;
+import org.sonar.plugins.php.api.tree.statement.SwitchCaseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.SwitchStatementTree;
+import org.sonar.plugins.php.api.visitors.TreeVisitor;
+
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.List;
+
+public class SwitchStatementTreeImpl extends PHPTree implements SwitchStatementTree {
+
+  private final Kind KIND;
+
+  private final InternalSyntaxToken switchToken;
+  private final ParenthesisedExpressionTree expression;
+  private final InternalSyntaxToken openCurlyBraceToken;
+  private final InternalSyntaxToken colonToken;
+  private final InternalSyntaxToken semicolonToken;
+  private final List<SwitchCaseClauseTree> cases;
+  private final InternalSyntaxToken closeCurlyBraceToken;
+  private final InternalSyntaxToken endswitchToken;
+  private final InternalSyntaxToken eosToken;
+
+  public SwitchStatementTreeImpl(
+      InternalSyntaxToken switchToken, ParenthesisedExpressionTree expression, InternalSyntaxToken openCurlyBraceToken,
+      @Nullable InternalSyntaxToken semicolonToken,
+      List<SwitchCaseClauseTree> cases,
+      InternalSyntaxToken closeCurlyBraceToken
+  ) {
+    this.KIND = Kind.SWITCH_STATEMENT;
+
+    this.switchToken = switchToken;
+    this.expression = expression;
+    this.openCurlyBraceToken = openCurlyBraceToken;
+    this.semicolonToken = semicolonToken;
+    this.cases = cases;
+    this.closeCurlyBraceToken = closeCurlyBraceToken;
+
+    this.colonToken = null;
+    this.endswitchToken = null;
+    this.eosToken = null;
+  }
+
+  public SwitchStatementTreeImpl(
+      InternalSyntaxToken switchToken, ParenthesisedExpressionTree expression, InternalSyntaxToken colonToken,
+      @Nullable InternalSyntaxToken semicolonToken,
+      List<SwitchCaseClauseTree> cases,
+      InternalSyntaxToken endswitchToken, InternalSyntaxToken eosToken
+  ) {
+    this.KIND = Kind.ALTERNATIVE_SWITCH_STATEMENT;
+
+    this.switchToken = switchToken;
+    this.expression = expression;
+    this.openCurlyBraceToken = null;
+    this.semicolonToken = semicolonToken;
+    this.cases = cases;
+    this.closeCurlyBraceToken = null;
+
+    this.colonToken = colonToken;
+    this.endswitchToken = endswitchToken;
+    this.eosToken = eosToken;
+  }
+
+  @Override
+  public Kind getKind() {
+    return KIND;
+  }
+
+  @Override
+  public Iterator<Tree> childrenIterator() {
+    return Iterators.concat(
+        Iterators.forArray(switchToken, expression, openCurlyBraceToken, colonToken, semicolonToken),
+        cases.iterator(),
+        Iterators.forArray(closeCurlyBraceToken, endswitchToken, eosToken)
+    );
+  }
+
+  @Override
+  public SyntaxToken switchToken() {
+    return switchToken;
+  }
+
+  @Override
+  public ParenthesisedExpressionTree expression() {
+    return expression;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken openCurlyBraceToken() {
+    return openCurlyBraceToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken colonToken() {
+    return colonToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken semicolonToken() {
+    return semicolonToken;
+  }
+
+  @Override
+  public List<SwitchCaseClauseTree> cases() {
+    return cases;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken closeCurlyBraceToken() {
+    return closeCurlyBraceToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken endswitchToken() {
+    return endswitchToken;
+  }
+
+  @Nullable
+  @Override
+  public SyntaxToken eosToken() {
+    return eosToken;
+  }
+
+  @Override
+  public void accept(TreeVisitor visitor) {
+    visitor.visitSwitchStatement(this);
+  }
+}
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/SwitchStatementTree.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/SwitchStatementTree.java
index 9578685347..19e30a7683 100755
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/SwitchStatementTree.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/tree/statement/SwitchStatementTree.java
@@ -48,7 +48,7 @@
   SyntaxToken closeCurlyBraceToken();
 
   @Nullable
-  SyntaxToken endSwitchToken();
+  SyntaxToken endswitchToken();
 
   @Nullable
   SyntaxToken eosToken();
diff --git a/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java b/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
index ea377b956a..22290b534c 100755
--- a/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
+++ b/php-frontend/src/main/java/org/sonar/plugins/php/api/visitors/TreeVisitor.java
@@ -40,8 +40,10 @@
 import org.sonar.plugins.php.api.tree.expression.YieldExpressionTree;
 import org.sonar.plugins.php.api.tree.statement.BlockTree;
 import org.sonar.plugins.php.api.tree.statement.BreakStatementTree;
+import org.sonar.plugins.php.api.tree.statement.CaseClauseTree;
 import org.sonar.plugins.php.api.tree.statement.CatchBlockTree;
 import org.sonar.plugins.php.api.tree.statement.ContinueStatementTree;
+import org.sonar.plugins.php.api.tree.statement.DefaultClauseTree;
 import org.sonar.plugins.php.api.tree.statement.DoWhileStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ElseClauseTree;
 import org.sonar.plugins.php.api.tree.statement.ElseifClauseTree;
@@ -53,6 +55,7 @@
 import org.sonar.plugins.php.api.tree.statement.IfStatementTree;
 import org.sonar.plugins.php.api.tree.statement.LabelTree;
 import org.sonar.plugins.php.api.tree.statement.ReturnStatementTree;
+import org.sonar.plugins.php.api.tree.statement.SwitchStatementTree;
 import org.sonar.plugins.php.api.tree.statement.ThrowStatementTree;
 import org.sonar.plugins.php.api.tree.statement.TryStatementTree;
 import org.sonar.plugins.php.api.tree.statement.WhileStatementTree;
@@ -75,6 +78,12 @@
    * [ START ] Statement
    */
 
+  void visitDefaultClause(DefaultClauseTree tree);
+
+  void visitCaseClause(CaseClauseTree tree);
+
+  void visitSwitchStatement(SwitchStatementTree tree);
+
   void visitWhileStatement(WhileStatementTree tree);
 
   void visitDoWhileStatement(DoWhileStatementTree tree);
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchCaseClauseTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchCaseClauseTest.java
new file mode 100755
index 0000000000..a4f147979a
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchCaseClauseTest.java
@@ -0,0 +1,39 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.parser.statement;
+
+import org.junit.Test;
+import org.sonar.php.parser.PHPLexicalGrammar;
+
+import static org.sonar.php.utils.Assertions.assertThat;
+
+public class SwitchCaseClauseTest {
+
+  @Test
+  public void test() {
+    assertThat(PHPLexicalGrammar.SWITCH_CASE_CLAUSE)
+      .matches("case $a:")
+      .matches("case $a;")
+      .matches("case $a: $b;")
+
+      .matches("default: break;")
+      .matches("default: $b; break;");
+  }
+}
diff --git a/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchStatementTest.java b/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchStatementTest.java
index b2c9c6a938..1768f5994c 100755
--- a/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchStatementTest.java
+++ b/php-frontend/src/test/java/org/sonar/php/parser/statement/SwitchStatementTest.java
@@ -31,9 +31,11 @@
   public void test() {
     assertThat(PHPLexicalGrammar.SWITCH_STATEMENT)
       .matches("switch ($a) {}")
+      .matches("switch ($a) {; }")
       .matches("switch ($a): endswitch;")
       .matches("switch ($a): ; endswitch;")
 
+      .matches("switch ($a) { case $a : default : }")
     ;
   }
 }
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchCaseClauseTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchCaseClauseTreeTest.java
new file mode 100755
index 0000000000..0a7bed47ce
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchCaseClauseTreeTest.java
@@ -0,0 +1,52 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.CaseClauseTree;
+import org.sonar.plugins.php.api.tree.statement.DefaultClauseTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class SwitchCaseClauseTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void case_clause() throws Exception {
+    CaseClauseTree tree = parse("case $a: $b; break;", PHPLexicalGrammar.SWITCH_CASE_CLAUSE);
+
+    assertThat(tree.is(Kind.CASE_CLAUSE)).isTrue();
+    assertThat(tree.expression().is(Kind.VARIABLE_IDENTIFIER)).isTrue();
+    assertThat(tree.caseSeparatorToken().text()).isEqualTo(":");
+    assertThat(tree.statements()).hasSize(2);
+  }
+
+  @Test
+  public void default_clause() throws Exception {
+    DefaultClauseTree tree = parse("default : $b; break;", PHPLexicalGrammar.SWITCH_CASE_CLAUSE);
+
+    assertThat(tree.is(Kind.DEFAULT_CLAUSE)).isTrue();
+    assertThat(tree.caseSeparatorToken().text()).isEqualTo(":");
+    assertThat(tree.statements()).hasSize(2);
+  }
+
+}
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchClauseTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchClauseTreeTest.java
new file mode 100755
index 0000000000..4c5aca83e8
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchClauseTreeTest.java
@@ -0,0 +1,49 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.BlockTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class SwitchClauseTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void empty() throws Exception {
+    BlockTree tree = parse("{}", PHPLexicalGrammar.BLOCK);
+
+    assertThat(tree.is(Kind.BLOCK)).isTrue();
+    assertThat(tree.statements()).isEmpty();
+  }
+
+  @Test
+  public void not_empty() throws Exception {
+    BlockTree tree = parse("{ $a; }", PHPLexicalGrammar.BLOCK);
+    assertThat(tree.statements()).hasSize(1);
+
+    tree = parse("{ $a; $b; }", PHPLexicalGrammar.BLOCK);
+    assertThat(tree.statements()).hasSize(2);
+  }
+
+}
diff --git a/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeTest.java b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeTest.java
new file mode 100755
index 0000000000..7d7677c821
--- /dev/null
+++ b/php-frontend/src/test/java/org/sonar/php/tree/impl/statement/SwitchStatementTreeTest.java
@@ -0,0 +1,58 @@
+/*
+ * SonarQube PHP Plugin
+ * Copyright (C) 2010 SonarSource and Akram Ben Aissi
+ * sonarqube@googlegroups.com
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 3 of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
+ */
+package org.sonar.php.tree.impl.statement;
+
+import org.junit.Test;
+import org.sonar.php.PHPTreeModelTest;
+import org.sonar.php.parser.PHPLexicalGrammar;
+import org.sonar.plugins.php.api.tree.Tree.Kind;
+import org.sonar.plugins.php.api.tree.statement.SwitchStatementTree;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+public class SwitchStatementTreeTest extends PHPTreeModelTest {
+
+  @Test
+  public void standard_syntax() throws Exception {
+    SwitchStatementTree tree = parse("switch ($a) { case $a : break; default : break; }", PHPLexicalGrammar.SWITCH_STATEMENT);
+
+    assertThat(tree.is(Kind.SWITCH_STATEMENT)).isTrue();
+    assertThat(tree.cases()).hasSize(2);
+
+    assertThat(tree.colonToken()).isNull();
+    assertThat(tree.endswitchToken()).isNull();
+    assertThat(tree.eosToken()).isNull();
+  }
+
+  @Test
+  public void alternative_syntax() throws Exception {
+    SwitchStatementTree tree = parse("switch ($a) : default : break; endswitch ;", PHPLexicalGrammar.SWITCH_STATEMENT);
+
+    assertThat(tree.is(Kind.ALTERNATIVE_SWITCH_STATEMENT)).isTrue();
+    assertThat(tree.cases()).hasSize(1);
+
+    assertThat(tree.colonToken()).isNotNull();
+    assertThat(tree.endswitchToken()).isNotNull();
+    assertThat(tree.eosToken()).isNotNull();
+  }
+
+
+
+}
