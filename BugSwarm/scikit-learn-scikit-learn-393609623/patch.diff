diff --git a/doc/modules/model_persistence.rst b/doc/modules/model_persistence.rst
index 15ecf3c2d8..f5173e5d9f 100755
--- a/doc/modules/model_persistence.rst
+++ b/doc/modules/model_persistence.rst
@@ -42,12 +42,12 @@ is often the case for fitted scikit-learn estimators, but can only pickle to the
 disk and not to a string::
 
   >>> from sklearn.externals import joblib
-  >>> joblib.dump(clf, 'filename.pkl') # doctest: +SKIP
+  >>> joblib.dump(clf, 'filename.joblib') # doctest: +SKIP
 
 Later you can load back the pickled model (possibly in another Python process)
 with::
 
-  >>> clf = joblib.load('filename.pkl') # doctest:+SKIP
+  >>> clf = joblib.load('filename.joblib') # doctest:+SKIP
 
 .. note::
 
diff --git a/doc/tutorial/basic/tutorial.rst b/doc/tutorial/basic/tutorial.rst
index ece691f7de..781495df99 100755
--- a/doc/tutorial/basic/tutorial.rst
+++ b/doc/tutorial/basic/tutorial.rst
@@ -239,12 +239,12 @@ which is more efficient on big data but it can only pickle to the disk
 and not to a string::
 
   >>> from sklearn.externals import joblib
-  >>> joblib.dump(clf, 'filename.pkl') # doctest: +SKIP
+  >>> joblib.dump(clf, 'filename.joblib') # doctest: +SKIP
 
 Later, you can reload the pickled model (possibly in another Python process)
 with::
 
-  >>> clf = joblib.load('filename.pkl') # doctest:+SKIP
+  >>> clf = joblib.load('filename.joblib') # doctest:+SKIP
 
 .. note::
 
diff --git a/sklearn/impute.py b/sklearn/impute.py
index cd70d0f58b..e6a4614da5 100755
--- a/sklearn/impute.py
+++ b/sklearn/impute.py
@@ -172,12 +172,19 @@ def _validate_input(self, X):
         try:
             X = check_array(X, accept_sparse='csc', dtype=dtype,
                             force_all_finite=force_all_finite, copy=self.copy)
-        except TypeError:
-            raise TypeError("Cannot use {0} strategy with non-numeric "
-                            "data.".format(self.strategy))
+        except ValueError as ve:
+            if "could not convert" in str(ve):
+                raise TypeError("Cannot use {0} strategy with non-numeric "
+                                "data. Received datatype :{1}."
+                                "".format(self.strategy, X.dtype.kind))
+            else:
+                raise ve
 
         if X.dtype.kind not in ("i", "u", "f", "O"):
-            X = X.astype(object)
+            raise TypeError("The SimpleImputer does not support this datatype"
+                            " ({0}). Please provide either numeric data or"
+                            " categorical data represented by integer or "
+                            "object datatypes.".format(X.dtype))
 
         return X
 
diff --git a/sklearn/tests/test_impute.py b/sklearn/tests/test_impute.py
index cab1996c0c..7dbbe6bd37 100755
--- a/sklearn/tests/test_impute.py
+++ b/sklearn/tests/test_impute.py
@@ -223,29 +223,21 @@ def test_imputation_mean_median_error_invalid_type(strategy, dtype):
 
 
 @pytest.mark.parametrize("strategy", ["constant", "most_frequent"])
-@pytest.mark.parametrize("dtype", [None, object, str])
-def test_imputation_non_numeric(strategy, dtype):
+@pytest.mark.parametrize("dtype", [str, np.dtype('U'), np.dtype('S')])
+def test_imputation_const_mostf_error_invalid_types(strategy, dtype):
     # Test imputation on non-numeric data using "most_frequent" and "constant"
     # strategy
     X = np.array([
-        ["", "a", "f"],
-        ["c", "d", "d"],
-        ["b", "d", "d"],
-        ["c", "d", "h"],
+        [np.nan, np.nan, "a", "f"],
+        [np.nan, "c", np.nan, "d"],
+        [np.nan, "b", "d", np.nan],
+        [np.nan, "c", "d", "h"],
     ], dtype=dtype)
 
-    X_true = np.array([
-        ["c", "a", "f"],
-        ["c", "d", "d"],
-        ["b", "d", "d"],
-        ["c", "d", "h"],
-    ], dtype=dtype)
-
-    imputer = SimpleImputer(missing_values="", strategy=strategy,
-                            fill_value="c")
-    X_trans = imputer.fit(X).transform(X)
-
-    assert_array_equal(X_trans, X_true)
+    err_msg = "SimpleImputer does not support this datatype"
+    with pytest.raises(TypeError, match=err_msg):
+        imputer = SimpleImputer(strategy=strategy)
+        imputer.fit(X).transform(X)
 
 
 def test_imputation_most_frequent():
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index 2f62299a20..5fd54dc49b 100755
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -492,10 +492,6 @@ def check_array(array, accept_sparse=False, dtype="numeric", order=None,
             try:
                 warnings.simplefilter('error', ComplexWarning)
                 array = np.asarray(array, dtype=dtype, order=order)
-            except ValueError as ve:
-                if "convert" in ve:
-                    raise TypeError("Invalid dtype conversion from {0} to "
-                                    "{1}".format(dtype_orig, dtype))
             except ComplexWarning:
                 raise ValueError("Complex data not supported\n"
                                  "{}\n".format(array))
