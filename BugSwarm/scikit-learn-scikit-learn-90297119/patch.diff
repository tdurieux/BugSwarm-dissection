diff --git a/doc/modules/model_evaluation.rst b/doc/modules/model_evaluation.rst
index d7361127d9..d311e60c9f 100755
--- a/doc/modules/model_evaluation.rst
+++ b/doc/modules/model_evaluation.rst
@@ -1405,7 +1405,7 @@ Dummy estimators
 
 When doing supervised learning, a simple sanity check consists of comparing
 one's estimator against simple rules of thumb. :class:`DummyClassifier`
-implements three such simple strategies for classification:
+implements several such simple strategies for classification:
 
 - ``stratified`` generates random predictions by respecting the training
   set class distribution.
diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1fcea4a0fa..a5e532884a 100755
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -649,7 +649,7 @@ def logistic_regression_path(X, y, pos_class=None, Cs=10, fit_intercept=True,
             le = LabelEncoder()
             Y_multi = le.fit_transform(y)
 
-        w0 = np.zeros((Y_multi.shape[1], n_features + int(fit_intercept)),
+        w0 = np.zeros((classes.size, n_features + int(fit_intercept)),
                       order='F')
 
     if coef is not None:
diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index f82ca9de49..6f6095c303 100755
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -397,11 +397,11 @@ def ridge_regression(X, y, alpha, sample_weight=None, solver='auto',
         n_iter = np.empty(y.shape[1], dtype=np.int32)
         intercept = np.zeros((y.shape[1], ))
         for i, (alpha_i, target) in enumerate(zip(alpha, y.T)):
-            start = {'coef': np.zeros(n_features + int(return_intercept))}
+            init = {'coef': np.zeros((n_features + int(return_intercept), 1))}
             coef_, n_iter_, _ = sag_solver(
                 X, target.ravel(), sample_weight, 'squared', alpha_i,
                 max_iter, tol, verbose, random_state, False, max_squared_sum,
-                start)
+                init)
             if return_intercept:
                 coef[i] = coef_[:-1]
                 intercept[i] = coef_[-1]
