diff --git a/server/app/api.py b/server/app/api.py
index 598290ee0a..d19ab4fd92 100755
--- a/server/app/api.py
+++ b/server/app/api.py
@@ -2152,6 +2152,9 @@ def new_entity(self, attributes):
         if not subm:
             raise BadValueError('No such submission exists.')
 
+        if not subm.backup.get():
+            raise BadValueError('Submission backup is missing.')
+
         subm.mark_as_final()
         return subm.get_final()
 
diff --git a/server/tests/integration/test_api_final_submissions.py b/server/tests/integration/test_api_final_submissions.py
index 8374461bba..9f0535869e 100755
--- a/server/tests/integration/test_api_final_submissions.py
+++ b/server/tests/integration/test_api_final_submissions.py
@@ -40,4 +40,31 @@ def setUp(self):
 		self._submission = make_fake_submission(self._backup)
 
 	def get_accounts(self):
-		return APITest().get_accounts()
\ No newline at end of file
+		return APITest().get_accounts()	
+
+	# tests for mark as final
+
+	def test_mark_as_final(self):
+		""" Tests that marking works, at the basic level """
+		self.API().post(self.user2, dict(submission=self._submission.key))
+
+		assert models.FinalSubmission.query(
+			models.FinalSubmission.submission==self._submission.key
+		).get() is not None
+
+	def test_ERROR_mark_as_final_backup(self):
+		""" Tests that a missing backup raises the correct error. """
+		try:
+			key = self._backup.key
+			key.delete()
+			self.API().post(self.user, dict(submission=self._submission.key))
+		except BadValueError as e:
+			self.assertEqual(str(e), 'Submission backup is missing.')
+
+	def test_ERROR_mark_as_final_subm(self):
+		""" Tests that a missing submission raises the correct error. """
+		try:
+			self._submission.key.delete()
+			self.API().post(self.user, dict(submission=self._submission.key))
+		except BadValueError as e:
+			self.assertEqual(str(e), 'No such submission exists.')
\ No newline at end of file
diff --git a/server/tests/integration/test_api_submission.py b/server/tests/integration/test_api_submission.py
index ffb6217521..9379298f40 100755
--- a/server/tests/integration/test_api_submission.py
+++ b/server/tests/integration/test_api_submission.py
@@ -22,7 +22,7 @@
 
 class SubmissionAPITest(APIBaseTestCase):
 
-	API = api.FinalSubmissionAPI
+	API = api.SubmissionAPI
 
 	def setUp(self):
 		super(SubmissionAPITest, self).setUp()
@@ -46,25 +46,8 @@ def get_accounts(self):
 
 	def test_mark_as_final(self):
 		""" Tests that marking works, at the basic level """
-		self.API().mark_as_final(self._submission, self.user, {})
+		self._submission.mark_as_final()
 	
 		assert models.FinalSubmission.query(
 			models.FinalSubmission.submission==self._submission.key
-		).get() is not None
-
-	def test_ERROR_mark_as_final_backup(self):
-		""" Tests that a missing backup raises the correct error. """
-		try:
-			key = self._backup.key
-			key.delete()
-			self.API().mark_as_final(self._submission, self.user, {})
-		except BadValueError as e:
-			self.assertEqual(str(e), 'No such backup exists.')
-	
-	def test_ERROR_mark_as_final_subm(self):
-		""" Tests that a missing submission raises the correct error. """
-		try:
-			self._submission.key.delete()
-			self.API().mark_as_final(self._submission, self.user, {})
-		except BadValueError as e:
-			self.assertEqual(str(e), 'No such submission exists.')
\ No newline at end of file
+		).get() is not None
\ No newline at end of file
diff --git a/server/tests/integration/test_final_submissions.py b/server/tests/integration/test_final_submissions.py
index 4fffc81d97..36bab3cac1 100755
--- a/server/tests/integration/test_final_submissions.py
+++ b/server/tests/integration/test_final_submissions.py
@@ -264,9 +264,11 @@ def test_set_different_backup_as_final_submission(self):
         self.run_deferred()
 
         self.assertNumFinalSubmissions(1)
+        
+        subm = models.Submission(backup=self.backups['second'].key)
+        subm.put()
 
-        api.FinalSubmissionAPI().mark_backup(
-            self.user, dict(backup=self.backups['second'].key))
+        api.FinalSubmissionAPI().post(self.user, dict(submission=subm.key))
         self.assertFinalSubmission(self.user, self.backups['second'])
 
     def test_create_group(self):
