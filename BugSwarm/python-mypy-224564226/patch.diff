diff --git a/extensions/mypy_extensions.py b/extensions/mypy_extensions.py
index 644750095c..82eea32a31 100755
--- a/extensions/mypy_extensions.py
+++ b/extensions/mypy_extensions.py
@@ -98,6 +98,7 @@ class Point2D(TypedDict):
 # return their type argument, to make them complete noops in terms of the
 # `typing` module.
 
+
 def Arg(type=Any, name=None):
     """A normal positional argument"""
     return type
diff --git a/mypy/exprtotype.py b/mypy/exprtotype.py
index e29a25cb41..8a8f1c4a7e 100755
--- a/mypy/exprtotype.py
+++ b/mypy/exprtotype.py
@@ -3,7 +3,7 @@
 from mypy.nodes import (
     Expression, NameExpr, MemberExpr, IndexExpr, TupleExpr,
     ListExpr, StrExpr, BytesExpr, UnicodeExpr, EllipsisExpr, CallExpr,
-    ARG_POS, ARG_NAMED, get_member_expr_fullname, UnicodeExpr,
+    ARG_POS, ARG_NAMED, get_member_expr_fullname
 )
 from mypy.fastparse import parse_type_comment
 from mypy.types import (
diff --git a/mypy/types.py b/mypy/types.py
index 0310b61d0a..3226105a0c 100755
--- a/mypy/types.py
+++ b/mypy/types.py
@@ -266,12 +266,7 @@ def accept(self, visitor: 'TypeVisitor[T]') -> T:
         return visitor.visit_type_list(self)
 
     def serialize(self) -> JsonDict:
-        return {'.class': 'TypeList', 'items': [t.serialize() for t in self.items]}
-
-    @classmethod
-    def deserialize(cls, data: JsonDict) -> 'TypeList':
-        assert data['.class'] == 'TypeList'
-        return TypeList([deserialize_type(t) for t in data['items']])
+        assert False, "Sythetic types don't serialize"
 
 
 class AnyType(Type):
@@ -1002,6 +997,9 @@ def accept(self, visitor: 'TypeVisitor[T]') -> T:
         assert isinstance(visitor, SyntheticTypeVisitor)
         return visitor.visit_star_type(self)
 
+    def serialize(self) -> JsonDict:
+        assert False, "Sythetic types don't serialize"
+
 
 class UnionType(Type):
     """The union type Union[T1, ..., Tn] (at least one type argument)."""
@@ -1145,12 +1143,7 @@ def accept(self, visitor: 'TypeVisitor[T]') -> T:
         return visitor.visit_ellipsis_type(self)
 
     def serialize(self) -> JsonDict:
-        return {'.class': 'EllipsisType'}
-
-    @classmethod
-    def deserialize(cls, data: JsonDict) -> 'EllipsisType':
-        assert data['.class'] == 'EllipsisType'
-        return EllipsisType()
+        assert False, "Synthetic types don't serialize"
 
 
 class TypeType(Type):
@@ -1302,7 +1295,7 @@ def visit_ellipsis_type(self, t: EllipsisType) -> T:
         pass
 
 
-class TypeTranslator(SyntheticTypeVisitor[Type]):
+class TypeTranslator(TypeVisitor[Type]):
     """Identity type transformation.
 
     Subclass this and override some methods to implement a non-trivial
@@ -1312,12 +1305,6 @@ class TypeTranslator(SyntheticTypeVisitor[Type]):
     def visit_unbound_type(self, t: UnboundType) -> Type:
         return t
 
-    def visit_type_list(self, t: TypeList) -> Type:
-        return t
-
-    def visit_callable_argument(self, t: CallableArgument) -> Type:
-        return t
-
     def visit_any(self, t: AnyType) -> Type:
         return t
 
@@ -1363,15 +1350,9 @@ def visit_typeddict_type(self, t: TypedDictType) -> Type:
                              cast(Any, t.fallback.accept(self)),
                              t.line, t.column)
 
-    def visit_star_type(self, t: StarType) -> Type:
-        return StarType(t.type.accept(self), t.line, t.column)
-
     def visit_union_type(self, t: UnionType) -> Type:
         return UnionType(self.translate_types(t.items), t.line, t.column)
 
-    def visit_ellipsis_type(self, t: EllipsisType) -> Type:
-        return t
-
     def translate_types(self, types: List[Type]) -> List[Type]:
         return [t.accept(self) for t in types]
 
diff --git a/test-data/unit/lib-stub/typing.pyi b/test-data/unit/lib-stub/typing.pyi
index 6ca469edb8..01ac7b14f7 100755
--- a/test-data/unit/lib-stub/typing.pyi
+++ b/test-data/unit/lib-stub/typing.pyi
@@ -11,12 +11,12 @@ Optional = 0
 TypeVar = 0
 Generic = 0
 Tuple = 0
+Callable = 0
 builtinclass = 0
 _promote = 0
 NamedTuple = 0
 Type = 0
 no_type_check = 0
-Callable = 0
 ClassVar = 0
 NoReturn = 0
 
@@ -93,16 +93,15 @@ class AsyncIterator(AsyncIterable[T], Generic[T]):
     def __anext__(self) -> Awaitable[T]: pass
 
 class Sequence(Iterable[T], Generic[T]):
-    # Use int because slice isn't defined in the default test builtins
     @abstractmethod
-    def __getitem__(self, n: int) -> T: pass
+    def __getitem__(self, n: Any) -> T: pass
 
 class Mapping(Generic[T, U]): pass
 
 class MutableMapping(Generic[T, U]): pass
 
 def NewType(name: str, tp: Type[T]) -> Callable[[T], T]:
-    def new_type(x: T) -> T:
+    def new_type(x):
         return x
     return new_type
 
diff --git a/test-data/unit/parse-python2.test b/test-data/unit/parse-python2.test
index f3a88beb69..b654f6af7b 100755
--- a/test-data/unit/parse-python2.test
+++ b/test-data/unit/parse-python2.test
@@ -374,8 +374,8 @@ def f(a, (a, b)):
 def g((x, (x, y))):
     pass
 [out]
-main:1: error: duplicate argument 'a' in function definition
-main:3: error: duplicate argument 'x' in function definition
+main:1: error: Duplicate argument 'a' in function definition
+main:3: error: Duplicate argument 'x' in function definition
 
 [case testBackquotesInPython2]
 `1 + 2`
