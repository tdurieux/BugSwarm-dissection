diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForFieldTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForFieldTest.java
index e27204c589..501220eb71 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForFieldTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForFieldTest.java
@@ -6,7 +6,6 @@
 import net.bytebuddy.description.modifier.ModifierContributor;
 import net.bytebuddy.description.type.TypeDefinition;
 import net.bytebuddy.description.type.TypeDescription;
-import net.bytebuddy.matcher.ElementMatchers;
 import net.bytebuddy.test.utility.MockitoRule;
 import net.bytebuddy.test.utility.ObjectPropertyAssertion;
 import org.junit.Before;
@@ -18,6 +17,7 @@
 import java.util.Collections;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.none;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Matchers.any;
@@ -60,7 +60,7 @@
     @SuppressWarnings("unchecked")
     public void setUp() throws Exception {
         when(fieldType.accept(any(TypeDescription.Generic.Visitor.class))).thenReturn(fieldType);
-        when(fieldDescription.asToken(ElementMatchers.is(instrumentedType))).thenReturn(fieldToken);
+        when(fieldDescription.asToken(none())).thenReturn(fieldToken);
         when(fieldDescription.getDeclaringType()).thenReturn(declaringType);
         when(fieldDescription.asDefined()).thenReturn(definedField);
         when(fieldToken.getName()).thenReturn(FOO);
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForMethodTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForMethodTest.java
index 6a0873e981..58b7e52d73 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForMethodTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/TransformerForMethodTest.java
@@ -11,7 +11,6 @@
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.description.type.TypeList;
 import net.bytebuddy.description.type.TypeVariableToken;
-import net.bytebuddy.matcher.ElementMatchers;
 import net.bytebuddy.test.utility.MockitoRule;
 import net.bytebuddy.test.utility.ObjectPropertyAssertion;
 import org.junit.Before;
@@ -23,6 +22,7 @@
 import java.util.Collections;
 
 import static net.bytebuddy.matcher.ElementMatchers.named;
+import static net.bytebuddy.matcher.ElementMatchers.none;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.mockito.Matchers.any;
@@ -77,7 +77,7 @@ public void setUp() throws Exception {
         when(typeVariableBound.getSymbol()).thenReturn(QUX);
         when(typeVariableBound.getSort()).thenReturn(TypeDefinition.Sort.VARIABLE);
         when(typeVariableBound.asGenericType()).thenReturn(typeVariableBound);
-        when(methodDescription.asToken(ElementMatchers.is(instrumentedType))).thenReturn(methodToken);
+        when(methodDescription.asToken(none())).thenReturn(methodToken);
         when(methodDescription.getDeclaringType()).thenReturn(declaringType);
         when(methodDescription.asDefined()).thenReturn(definedMethod);
         when(methodToken.getName()).thenReturn(FOO);
