diff --git a/src/main/java/org/springframework/hateoas/Affordance.java b/src/main/java/org/springframework/hateoas/Affordance.java
index b09bf03416..c447e6d2ed 100755
--- a/src/main/java/org/springframework/hateoas/Affordance.java
+++ b/src/main/java/org/springframework/hateoas/Affordance.java
@@ -15,11 +15,88 @@
  */
 package org.springframework.hateoas;
 
+import java.beans.PropertyDescriptor;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import lombok.Data;
+
+import org.springframework.beans.BeanUtils;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMethod;
+
 /**
  * Representation of an action a link is able to take.
  *
  * @author Greg Turnquist
  */
+@Data
 public class Affordance {
 
+	private final String verb;
+	private final boolean required;
+	private final Map<String, Class<?>> properties;
+
+	public Affordance() {
+		this.verb = "";
+		this.required = false;
+		this.properties = new HashMap<String, Class<?>>();
+	}
+
+	public Affordance(Method method, Class<?> targetType, RequestMethod requestMethod) {
+
+		switch (requestMethod) {
+			case POST:
+			case PUT:
+				this.required = true;
+				this.verb = requestMethod.toString();
+				this.properties = new HashMap<String, Class<?>>();
+				gatherInputRequirements(method, targetType);
+				break;
+			case PATCH:
+				this.required = false;
+				this.verb = requestMethod.toString();
+				this.properties = new HashMap<String, Class<?>>();
+				gatherInputRequirements(method, targetType);
+				break;
+			case GET:
+			case HEAD:
+			case DELETE:
+			case OPTIONS:
+			case TRACE:
+			default:
+				this.required = false;
+				this.verb = requestMethod.toString();
+				this.properties = new HashMap<String, Class<?>>();
+				break;
+		}
+	}
+
+	public static List<Affordance> byLink(Link link) {
+		return link.getAffordances();
+	}
+
+	private void gatherInputRequirements(Method method, Class<?> targetType) {
+
+		System.out.println("Must gather details about " + method.getName());
+
+		for (int i = 0; i < method.getParameterTypes().length; i++) {
+			for (Annotation annotation : method.getParameterAnnotations()[i]) {
+				if (annotation.annotationType().equals(RequestBody.class)) {
+					System.out.println("\t Spring MVC @RequestBody => " + method.getParameterTypes()[i]);
+					for (PropertyDescriptor descriptor : BeanUtils.getPropertyDescriptors(method.getParameterTypes()[i])) {
+						if (!descriptor.getName().equals("class")) {
+							System.out.println("\t\t\t" + descriptor.getName() + ", " + descriptor.getPropertyType());
+							this.properties.put(descriptor.getName(), descriptor.getPropertyType());
+						}
+					}
+				}
+			}
+		}
+
+		System.out.println(this.toString());
+	}
 }
diff --git a/src/main/java/org/springframework/hateoas/Link.java b/src/main/java/org/springframework/hateoas/Link.java
index 19b01e2bd9..fc9ce7b9bb 100755
--- a/src/main/java/org/springframework/hateoas/Link.java
+++ b/src/main/java/org/springframework/hateoas/Link.java
@@ -137,8 +137,8 @@ public String getRel() {
 	 * 
 	 * @return
 	 */
-	public Collection<Affordance> getAffordances() {
-		return Collections.unmodifiableCollection(this.affordances);
+	public List<Affordance> getAffordances() {
+		return new ArrayList<Affordance>(Collections.unmodifiableCollection(this.affordances));
 	}
 
 	/**
@@ -175,6 +175,15 @@ public Link withAffordance(Affordance affordance) {
 		return new Link(this.href, this.rel, newAffordances);
 	}
 
+	public Link withAffordances(List<Affordance> affordances) {
+
+		List<Affordance> newAffordances = new ArrayList<Affordance>();
+		newAffordances.addAll(this.affordances);
+		newAffordances.addAll(affordances);
+
+		return new Link(this.href, this.rel, newAffordances);
+	}
+
 
 	/**
 	 * Returns the variable names contained in the template.
diff --git a/src/main/java/org/springframework/hateoas/core/AnnotationMappingDiscoverer.java b/src/main/java/org/springframework/hateoas/core/AnnotationMappingDiscoverer.java
index a40cb44efa..1266b5fb51 100755
--- a/src/main/java/org/springframework/hateoas/core/AnnotationMappingDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/core/AnnotationMappingDiscoverer.java
@@ -23,6 +23,7 @@
 import java.util.regex.Pattern;
 
 import org.springframework.util.Assert;
+import org.springframework.web.bind.annotation.RequestMethod;
 
 /**
  * {@link MappingDiscoverer} implementation that inspects mappings from a particular annotation.
@@ -106,6 +107,15 @@ public String getMapping(Class<?> type, Method method) {
 		return typeMapping == null || "/".equals(typeMapping) ? mapping[0] : join(typeMapping, mapping[0]);
 	}
 
+	@Override
+	public RequestMethod[] getRequestType(Class<?> type, Method method) {
+
+		Assert.notNull(type, "Type must not be null!");
+		Assert.notNull(method, "Method must not be null!");
+
+		return getHttpMethodsFrom(findMergedAnnotation(method, annotationType));
+	}
+
 	private String[] getMappingFrom(Annotation annotation) {
 
 		Object value = mappingAttributeName == null ? getValue(annotation) : getValue(annotation, mappingAttributeName);
@@ -122,6 +132,13 @@ public String getMapping(Class<?> type, Method method) {
 				"Unsupported type for the mapping attribute! Support String and String[] but got %s!", value.getClass()));
 	}
 
+	private RequestMethod[] getHttpMethodsFrom(Annotation annotation) {
+
+		Object value = getValue(annotation, "method");
+
+		return (RequestMethod[]) value;
+	}
+
 	/**
 	 * Joins the given mappings making sure exactly one slash.
 	 * 
diff --git a/src/main/java/org/springframework/hateoas/core/LinkBuilderSupport.java b/src/main/java/org/springframework/hateoas/core/LinkBuilderSupport.java
index 896a29711d..9c969cb9f3 100755
--- a/src/main/java/org/springframework/hateoas/core/LinkBuilderSupport.java
+++ b/src/main/java/org/springframework/hateoas/core/LinkBuilderSupport.java
@@ -19,7 +19,10 @@
 import static org.springframework.web.util.UriComponentsBuilder.*;
 
 import java.net.URI;
+import java.util.ArrayList;
+import java.util.List;
 
+import org.springframework.hateoas.Affordance;
 import org.springframework.hateoas.Identifiable;
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.LinkBuilder;
@@ -40,6 +43,8 @@
 
 	private final UriComponents uriComponents;
 
+	private final List<Affordance> affordances;
+
 	/**
 	 * Creates a new {@link LinkBuilderSupport} using the given {@link UriComponentsBuilder}.
 	 * 
@@ -49,6 +54,7 @@ public LinkBuilderSupport(UriComponentsBuilder builder) {
 
 		Assert.notNull(builder, "UriComponentsBuilder must not be null!");
 		this.uriComponents = builder.build();
+		this.affordances = new ArrayList<Affordance>();
 	}
 
 	/**
@@ -60,6 +66,7 @@ public LinkBuilderSupport(UriComponents uriComponents) {
 
 		Assert.notNull(uriComponents, "UriComponents must not be null!");
 		this.uriComponents = uriComponents;
+		this.affordances = new ArrayList<Affordance>();
 	}
 
 	/*
@@ -130,12 +137,25 @@ public URI toUri() {
 		return uriComponents.encode().toUri().normalize();
 	}
 
+	public LinkBuilderSupport withAffordance(Affordance affordance) {
+
+		this.affordances.add(affordance);
+
+		return this;
+	}
+
 	/*
 	 * (non-Javadoc)
 	 * @see org.springframework.hateoas.LinkBuilder#withRel(java.lang.String)
 	 */
 	public Link withRel(String rel) {
-		return new Link(toString(), rel);
+		Link link = new Link(toString(), rel);
+
+		for (Affordance affordance : this.affordances) {
+			link = link.withAffordance(affordance);
+		}
+
+		return link;
 	}
 
 	/*
diff --git a/src/main/java/org/springframework/hateoas/core/MappingDiscoverer.java b/src/main/java/org/springframework/hateoas/core/MappingDiscoverer.java
index 4b04464dee..d7eaf8150a 100755
--- a/src/main/java/org/springframework/hateoas/core/MappingDiscoverer.java
+++ b/src/main/java/org/springframework/hateoas/core/MappingDiscoverer.java
@@ -17,6 +17,8 @@
 
 import java.lang.reflect.Method;
 
+import org.springframework.web.bind.annotation.RequestMethod;
+
 /**
  * Strategy interface to discover a URI mapping for either a given type or method.
  * 
@@ -49,4 +51,6 @@
 	 * @return the method mapping including the type-level one or {@literal null} if neither of them present.
 	 */
 	String getMapping(Class<?> type, Method method);
+
+	RequestMethod[] getRequestType(Class<?> type, Method method);
 }
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDeserializers.java b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDeserializers.java
index 0e79d70a15..1b84a20277 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDeserializers.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDeserializers.java
@@ -19,17 +19,24 @@
 import static org.springframework.hateoas.hal.forms.HalFormsDocument.*;
 
 import java.io.IOException;
-import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
+import org.springframework.hateoas.Resource;
 import org.springframework.http.MediaType;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
+import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonDeserializer;
+import com.fasterxml.jackson.databind.JsonMappingException;
+import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
 import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;
 import com.fasterxml.jackson.databind.type.TypeFactory;
 
@@ -38,13 +45,50 @@
  */
 public class HalFormsDeserializers {
 
+	static class HalFormsResourceDeserializer extends ContainerDeserializerBase<Resource<?>> implements ContextualDeserializer {
+
+		private JavaType contentType;
+
+		HalFormsResourceDeserializer(JavaType contentType) {
+
+			super(contentType);
+			this.contentType = contentType;
+		}
+
+		HalFormsResourceDeserializer() {
+			this(null);
+		}
+		
+		@Override
+		public Resource<?> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
+
+			HalFormsDocument doc = p.getCodec().readValue(p, HalFormsDocument.class);
+			
+			return new Resource<Object>(doc.getContent(), doc.getLinks());
+		}
+
+		@Override
+		public JavaType getContentType() {
+			return null;
+		}
+
+		@Override
+		public JsonDeserializer<Object> getContentDeserializer() {
+			return null;
+		}
+
+		@Override
+		public JsonDeserializer<?> createContextual(DeserializationContext deserializationContext, BeanProperty beanProperty) throws JsonMappingException {
+			return null;
+		}
+	}
+
 	/**
 	 * Deserialize an entire <a href="https://rwcbook.github.io/hal-forms/">HAL-Forms</a> document.
 	 */
 	static class HalFormsDocumentDeserializer extends JsonDeserializer<HalFormsDocument> {
 
 		private final HalLinkListDeserializer linkDeser = new HalLinkListDeserializer();
-		private final HalFormsTemplateListDeserializer templateDeser = new HalFormsTemplateListDeserializer();
 
 		@Override
 		public HalFormsDocument deserialize(JsonParser jp, DeserializationContext ctxt)
@@ -63,7 +107,8 @@ public HalFormsDocument deserialize(JsonParser jp, DeserializationContext ctxt)
 				if ("_links".equals(jp.getCurrentName())) {
 					halFormsDocumentBuilder.links(this.linkDeser.deserialize(jp, ctxt));
 				} else if ("_templates".equals(jp.getCurrentName())) {
-					halFormsDocumentBuilder.templates(this.templateDeser.deserialize(jp, ctxt));
+					TypeReference<Map<String, Template>> type = new TypeReference<Map<String, Template>>() {};
+					halFormsDocumentBuilder.templates(jp.getCodec().<Map<? extends String, ? extends Template>> readValue(jp, type));
 				}
 			}
 
@@ -74,10 +119,10 @@ public HalFormsDocument deserialize(JsonParser jp, DeserializationContext ctxt)
 	/**
 	 * Deserialize an object of HAL-Forms {@link Template}s into a {@link List} of {@link Template}s.
 	 */
-	static class HalFormsTemplateListDeserializer extends ContainerDeserializerBase<List<Template>> {
+	static class HalFormsTemplateListDeserializer extends ContainerDeserializerBase<Map<String, Template>> {
 
 		public HalFormsTemplateListDeserializer() {
-			super(TypeFactory.defaultInstance().constructCollectionLikeType(List.class, Template.class));
+			super(TypeFactory.defaultInstance().constructMapType(Map.class, String.class, Template.class));
 		}
 
 		/**
@@ -145,9 +190,9 @@ public JavaType getContentType() {
 		 * @return Deserialized value
 		 */
 		@Override
-		public List<Template> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
+		public Map<String, Template> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
 
-			List<Template> result = new ArrayList<Template>();
+			Map<String, Template> result = new HashMap<String, Template>();
 			String relation;
 			Template template;
 
@@ -161,16 +206,16 @@ public JavaType getContentType() {
 				// save the relation in case the link does not contain it
 				relation = jp.getText();
 
-				if (JsonToken.START_ARRAY.equals(jp.nextToken())) {
-					while (!JsonToken.END_ARRAY.equals(jp.nextToken())) {
+				if (JsonToken.START_OBJECT.equals(jp.nextToken())) {
+					while (!JsonToken.END_OBJECT.equals(jp.nextToken())) {
 						template = jp.readValueAs(Template.class);
 						template.setKey(relation);
-						result.add(template);
+						result.put(relation, template);
 					}
 				} else {
 					template = jp.readValueAs(Template.class);
 					template.setKey(relation);
-					result.add(template);
+					result.put(relation, template);
 				}
 			}
 
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDocument.java b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDocument.java
index f81ca54b88..2252a6c9b9 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDocument.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsDocument.java
@@ -19,20 +19,22 @@
 import static org.springframework.hateoas.hal.Jackson2HalModule.*;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import lombok.Builder;
 import lombok.Data;
 import lombok.Singular;
 
 import org.springframework.hateoas.Link;
-import org.springframework.hateoas.hal.forms.HalFormsDeserializers.HalFormsTemplateListDeserializer;
-import org.springframework.hateoas.hal.forms.HalFormsSerializers.HalFormsTemplateListSerializer;
+import org.springframework.hateoas.hal.forms.HalFormsDeserializers.HalFormsDocumentDeserializer;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+import com.fasterxml.jackson.annotation.JsonUnwrapped;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
@@ -44,17 +46,18 @@
  */
 @Data
 @Builder(builderMethodName = "halFormsDocument")
-@JsonPropertyOrder({ "links", "templates" })
-//@JsonDeserialize(using = HalFormsDocumentDeserializer.class)
+@JsonPropertyOrder({ "content", "links", "templates" })
+@JsonDeserialize(using = HalFormsDocumentDeserializer.class)
 public class HalFormsDocument {
 
+	@JsonUnwrapped
 	private Object content;
 
 	@Singular private List<Link> links;
 
-	@Singular private List<Template> templates;
+	@Singular private Map<String, Template> templates;
 
-	HalFormsDocument(Object content, List<Link> links, List<Template> templates) {
+	HalFormsDocument(Object content, List<Link> links, Map<String, Template> templates) {
 
 		this.content = content;
 		this.links = links;
@@ -62,7 +65,7 @@
 	}
 
 	HalFormsDocument() {
-		this(null, new ArrayList<Link>(), new ArrayList<Template>());
+		this(null, new ArrayList<Link>(), new HashMap<String, Template>());
 	}
 
 	@JsonInclude(Include.NON_NULL)
@@ -80,9 +83,7 @@ public Object getContent() {
 
 	@JsonProperty("_templates")
 	@JsonInclude(Include.NON_EMPTY)
-	@JsonSerialize(using = HalFormsTemplateListSerializer.class)
-	@JsonDeserialize(using = HalFormsTemplateListDeserializer.class)
-	public List<Template> getTemplates() {
+	public Map<String, Template> getTemplates() {
 		return this.templates;
 	}
 
@@ -93,13 +94,6 @@ public Template getTemplate() {
 
 	@JsonIgnore
 	public Template getTemplate(String key) {
-
-		for (Template template : this.templates) {
-			if (template.getKey().equals(key)) {
-				return template;
-			}
-		}
-
-		return null;
+		return this.templates.get(key);
 	}
 }
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverter.java b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverter.java
index c32c552847..e6d02e77df 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverter.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverter.java
@@ -19,7 +19,6 @@
 import java.util.Arrays;
 
 import org.springframework.hateoas.MediaTypes;
-import org.springframework.hateoas.hal.Jackson2HalModule;
 import org.springframework.http.HttpInputMessage;
 import org.springframework.http.HttpOutputMessage;
 import org.springframework.http.converter.AbstractHttpMessageConverter;
@@ -47,7 +46,6 @@ public HalFormsMessageConverter(ObjectMapper objectMapper) {
 
 		this.objectMapper = objectMapper;
 
-		objectMapper.registerModule(new Jackson2HalModule());
 		objectMapper.registerModule(new Jackson2HalFormsModule());
 
 		setSupportedMediaTypes(Arrays.asList(MediaTypes.HAL_FORMS_JSON));
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsSerializers.java b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsSerializers.java
index efb6079cc6..eda53872dd 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsSerializers.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsSerializers.java
@@ -15,212 +15,80 @@
  */
 package org.springframework.hateoas.hal.forms;
 
+import static org.springframework.hateoas.hal.forms.HalFormsUtils.*;
+
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 
-import org.springframework.context.NoSuchMessageException;
-import org.springframework.context.support.MessageSourceAccessor;
+import org.springframework.hateoas.Resource;
 import org.springframework.hateoas.hal.Jackson2HalModule;
-import org.springframework.util.Assert;
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.BeanProperty;
 import com.fasterxml.jackson.databind.JavaType;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
 import com.fasterxml.jackson.databind.ser.ContainerSerializer;
 import com.fasterxml.jackson.databind.ser.ContextualSerializer;
-import com.fasterxml.jackson.databind.ser.std.MapSerializer;
-import com.fasterxml.jackson.databind.type.TypeFactory;
 
 /**
  * @author Greg Turnquist
  */
 public class HalFormsSerializers {
 
-	/**
-	 * Serialize {@link List} of {@link Template}s into HAL-Forms format.
-	 */
-	static class HalFormsTemplateListSerializer extends ContainerSerializer<List<Template>> implements ContextualSerializer {
-
-		private static final long serialVersionUID = 1L;
-
-		private static final String RELATION_MESSAGE_TEMPLATE = "_templates.%s.title";
+	static class HalFormsResourceSerializer extends ContainerSerializer<Resource<?>> implements ContextualSerializer {
 
 		private final BeanProperty property;
-		private final MessageSourceAccessor messageSource;
 
-		public HalFormsTemplateListSerializer(BeanProperty property, MessageSourceAccessor messageSource) {
+		HalFormsResourceSerializer(BeanProperty property) {
 
-			super(TypeFactory.defaultInstance().constructType(List.class));
+			super(Resource.class, false);
 			this.property = property;
-			this.messageSource = messageSource;
-		}
-
-		public HalFormsTemplateListSerializer(MessageSourceAccessor messageSource) {
-			this(null, messageSource);
 		}
 
-		public HalFormsTemplateListSerializer() {
-			this(null, null);
+		HalFormsResourceSerializer() {
+			this(null);
 		}
 
 		@Override
-		public void serialize(List<Template> value, JsonGenerator gen, SerializerProvider provider) throws IOException {
+		public void serialize(Resource<?> value, JsonGenerator gen, SerializerProvider provider) throws IOException {
 
-			// sort templates according to their relation
-			Map<String, List<Object>> sortedTemplates = new LinkedHashMap<String, List<Object>>();
+			ObjectMapper mapper = (ObjectMapper) gen.getCodec();
 
-			for (Template template : value) {
-				if (sortedTemplates.get(template.getKey()) == null) {
-					sortedTemplates.put(template.getKey(), new ArrayList<Object>());
-				}
-				sortedTemplates.get(template.getKey()).add(toHalFormsTemplate(template));
-			}
+			HalFormsDocument doc = toHalFormsDocument(value, mapper);
 
-			TypeFactory typeFactory = provider.getConfig().getTypeFactory();
-			JavaType keyType = typeFactory.constructSimpleType(String.class, new JavaType[0]);
-			JavaType valueType = typeFactory.constructCollectionType(ArrayList.class, Object.class);
-			JavaType mapType = typeFactory.constructMapType(HashMap.class, keyType, valueType);
-
-			MapSerializer serializer = MapSerializer.construct(Collections.<String> emptySet(), mapType, true, null,
-				provider.findKeySerializer(keyType, null), new Jackson2HalModule.OptionalListJackson2Serializer(this.property), null);
-
-			if (!sortedTemplates.isEmpty()) {
-				serializer.serialize(sortedTemplates, gen, provider);
-			}
+			provider
+				.findValueSerializer(HalFormsDocument.class, property)
+				.serialize(doc, gen, provider);
 		}
 
-		/**
-		 * Wraps the given link into a HAL specific extension.
-		 *
-		 * @param template must not be {@literal null}.
-		 * @return
-		 */
-		private HalFormsTemplate toHalFormsTemplate(Template template) {
-
-			String key = template.getKey();
-			String title = getTitle(key);
-
-			if (title == null) {
-				title = getTitle(key.contains(":") ? key.substring(key.indexOf(":") + 1) : key);
-			}
-
-			return new HalFormsTemplate(template, title);
-		}
-
-		/**
-		 * Returns the title for the given local link relation resolved through the configured {@link MessageSourceAccessor}
-		 *
-		 * @param localRel must not be {@literal null} or empty.
-		 * @return
-		 */
-		private String getTitle(String localRel) {
-
-			Assert.hasText(localRel, "Local relation must not be null or empty!");
-
-			try {
-				return this.messageSource == null ? null
-					: this.messageSource.getMessage(String.format(RELATION_MESSAGE_TEMPLATE, localRel));
-			} catch (NoSuchMessageException o_O) {
-				return null;
-			}
-		}
-
-		/**
-		 * Accessor for finding declared (static) element type for
-		 * type this serializer is used for.
-		 */
 		@Override
 		public JavaType getContentType() {
 			return null;
 		}
 
-		/**
-		 * Accessor for serializer used for serializing contents
-		 * (List and array elements, Map values etc) of the
-		 * container for which this serializer is used, if it is
-		 * known statically.
-		 * Note that for dynamic types this may return null; if so,
-		 * caller has to instead use {@link #getContentType()} and
-		 * {@link SerializerProvider#findValueSerializer}.
-		 */
 		@Override
 		public JsonSerializer<?> getContentSerializer() {
 			return null;
 		}
 
-		/**
-		 * Method called to determine if the given value (of type handled by
-		 * this serializer) contains exactly one element.
-		 * Note: although it might seem sensible to instead define something
-		 * like "getElementCount()" method, this would not work well for
-		 * containers that do not keep track of size (like linked lists may
-		 * not).
-		 *
-		 * @param value
-		 */
 		@Override
-		public boolean hasSingleElement(List<Template> value) {
-			return value.size() == 1;
+		public boolean hasSingleElement(Resource<?> resource) {
+			return false;
 		}
 
-		/**
-		 * Method called to check whether given serializable value is
-		 * considered "empty" value (for purposes of suppressing serialization
-		 * of empty values).
-		 * Default implementation will consider only null values to be empty.
-		 * NOTE: replaces {@link #isEmpty(Object)}, which was deprecated in 2.5
-		 *
-		 * @param provider
-		 * @param value
-		 * @since 2.5
-		 */
 		@Override
-		public boolean isEmpty(SerializerProvider provider, List<Template> value) {
-			return value.isEmpty();
-		}
-
-		/**
-		 * Method that needs to be implemented to allow construction of a new
-		 * serializer object with given {@link TypeSerializer}, used when
-		 * addition type information is to be embedded.
-		 *
-		 * @param vts
-		 */
-		@Override
-		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {
+		protected ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer typeSerializer) {
 			return null;
 		}
 
-		/**
-		 * Method called to see if a different (or differently configured) serializer
-		 * is needed to serialize values of specified property.
-		 * Note that instance that this method is called on is typically shared one and
-		 * as a result method should <b>NOT</b> modify this instance but rather construct
-		 * and return a new instance. This instance should only be returned as-is, in case
-		 * it is already suitable for use.
-		 *
-		 * @param prov Serializer provider to use for accessing config, other serializers
-		 * @param property Method or field that represents the property
-		 * (and is used to access value to serialize).
-		 * Should be available; but there may be cases where caller can not provide it and
-		 * null is passed instead (in which case impls usually pass 'this' serializer as is)
-		 * @return Serializer to use for serializing values of specified property;
-		 * may be this instance or a new instance.
-		 * @throws JsonMappingException
-		 */
 		@Override
 		public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {
-			return new HalFormsTemplateListSerializer(property, null);
+			return new HalFormsResourceSerializer(property);
 		}
 	}
 
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsUtils.java b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsUtils.java
index d54663555d..fda962379f 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/HalFormsUtils.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/HalFormsUtils.java
@@ -22,12 +22,16 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import org.springframework.hateoas.Affordance;
+import org.springframework.hateoas.Link;
 import org.springframework.hateoas.Resource;
 import org.springframework.hateoas.ResourceSupport;
 import org.springframework.hateoas.Resources;
+import org.springframework.http.HttpMethod;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -63,7 +67,7 @@ private static HalFormsDocument toHalFormsDocument(Resources<?> resources) {
 		return HalFormsDocument.halFormsDocument()
 			.content(resources.getContent())
 			.links(resources.getLinks())
-			.templates(new ArrayList<Template>())
+			.templates(new HashMap<String, Template>())
 			.build();
 	}
 
@@ -75,10 +79,27 @@ private static HalFormsDocument toHalFormsDocument(Resources<?> resources) {
 	 */
 	private static HalFormsDocument toHalFormsDocument(Resource<?> resource) {
 
+		Map<String, Template> templates = new HashMap<String, Template>();
+
+		for (Affordance affordance : resource.getLink(Link.REL_SELF).getAffordances()) {
+			Template template = new Template();
+			template.setHttpMethod(HttpMethod.valueOf(affordance.getVerb()));
+
+			List<Property> properties = new ArrayList<Property>();
+
+			for (Map.Entry<String, Class<?>> entry : affordance.getProperties().entrySet()) {
+				properties.add(new Property(entry.getKey(), null, null, null, null, false, affordance.isRequired(), false));
+			}
+
+			template.setProperties(properties);
+
+			templates.put(affordance.getVerb(), template);
+		}
+
 		return HalFormsDocument.halFormsDocument()
 			.content(resource.getContent())
 			.links(resource.getLinks())
-			.templates(new ArrayList<Template>())
+			.templates(templates)
 			.build();
 	}
 
@@ -112,7 +133,7 @@ private static HalFormsDocument toHalFormsDocument(ResourceSupport rs) {
 		return HalFormsDocument.halFormsDocument()
 			.content(content)
 			.links(rs.getLinks())
-			.templates(new ArrayList<Template>())
+			.templates(new HashMap<String, Template>())
 			.build();
 	}
 
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/Jackson2HalFormsModule.java b/src/main/java/org/springframework/hateoas/hal/forms/Jackson2HalFormsModule.java
index 8dd3b34e06..29070891ae 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/Jackson2HalFormsModule.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/Jackson2HalFormsModule.java
@@ -21,6 +21,7 @@
 import org.springframework.context.support.MessageSourceAccessor;
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.RelProvider;
+import org.springframework.hateoas.Resource;
 import org.springframework.hateoas.ResourceSupport;
 import org.springframework.hateoas.hal.CurieProvider;
 import org.springframework.hateoas.hal.Jackson2HalModule.EmbeddedMapper;
@@ -29,7 +30,6 @@
 import org.springframework.hateoas.hal.LinkMixin;
 import org.springframework.hateoas.hal.ResourceSupportMixin;
 import org.springframework.hateoas.hal.forms.HalFormsSerializers.HalFormsEmbeddedResourcesSerializer;
-import org.springframework.hateoas.hal.forms.HalFormsSerializers.HalFormsTemplateListSerializer;
 
 import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.DeserializationConfig;
@@ -59,6 +59,7 @@ public Jackson2HalFormsModule() {
 
 		setMixInAnnotation(Link.class, LinkMixin.class);
 		setMixInAnnotation(ResourceSupport.class, ResourceSupportMixin.class);
+		setMixInAnnotation(Resource.class, ResourceMixin.class);
 	}
 
 	/**
@@ -76,7 +77,6 @@ public HalFormsHandlerInstantiator(RelProvider resolver, CurieProvider curieProv
 			EmbeddedMapper mapper = new EmbeddedMapper(resolver, curieProvider, enforceEmbeddedCollections);
 
 			this.serializers.put(HalLinkListSerializer.class, new HalLinkListSerializer(curieProvider, mapper, messageSource));
-			this.serializers.put(HalFormsTemplateListSerializer.class, new HalFormsTemplateListSerializer(messageSource));
 			this.serializers.put(HalFormsEmbeddedResourcesSerializer.class, new HalFormsEmbeddedResourcesSerializer(mapper));
 		}
 
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/Property.java b/src/main/java/org/springframework/hateoas/hal/forms/Property.java
index 7a625efdc9..7660720cb8 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/Property.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/Property.java
@@ -20,6 +20,7 @@
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
 /**
  * Describe a parameter for the associated state transition in a HAL-FORMS document. A {@link Template} may contain a
@@ -43,7 +44,7 @@
 	private String prompt;
 	private String regex;
 	private boolean templated;
-	private boolean required;
+	@JsonInclude(Include.ALWAYS) private boolean required;
 	private boolean multi;
 
 	/**
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/ResourceMixin.java b/src/main/java/org/springframework/hateoas/hal/forms/ResourceMixin.java
new file mode 100755
index 0000000000..5b27bd3b5e
--- /dev/null
+++ b/src/main/java/org/springframework/hateoas/hal/forms/ResourceMixin.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright 2017 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.hateoas.hal.forms;
+
+import org.springframework.hateoas.hal.forms.HalFormsSerializers.HalFormsResourceSerializer;
+
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+
+/**
+ * @author Greg Turnquist
+ */
+@JsonSerialize(using = HalFormsResourceSerializer.class)
+abstract class ResourceMixin {
+
+}
diff --git a/src/main/java/org/springframework/hateoas/hal/forms/Template.java b/src/main/java/org/springframework/hateoas/hal/forms/Template.java
index b296bc48fb..116962a207 100755
--- a/src/main/java/org/springframework/hateoas/hal/forms/Template.java
+++ b/src/main/java/org/springframework/hateoas/hal/forms/Template.java
@@ -61,13 +61,11 @@
 	 * @param key
 	 */
 	public Template(String key) {
-		this.key = key;//(key != null) ? key : Template.DEFAULT_KEY;
+		this.key = key;
 	}
 
 	/**
 	 * A HAL-Forms template with no name is dubbed the <a href="https://rwcbook.github.io/hal-forms/#_the_code__templates_code_element">"default" template</a>.
-	 *
-	 * TODO: Assess spec's statement that 'For this release, the only valid value for key is "default"'
 	 */
 	public Template() {
 		this(Template.DEFAULT_KEY);
diff --git a/src/main/java/org/springframework/hateoas/mvc/ControllerLinkBuilderFactory.java b/src/main/java/org/springframework/hateoas/mvc/ControllerLinkBuilderFactory.java
index 3a48f4d29f..accf08d3f5 100755
--- a/src/main/java/org/springframework/hateoas/mvc/ControllerLinkBuilderFactory.java
+++ b/src/main/java/org/springframework/hateoas/mvc/ControllerLinkBuilderFactory.java
@@ -31,6 +31,7 @@
 import java.util.Map;
 
 import org.springframework.core.MethodParameter;
+import org.springframework.hateoas.Affordance;
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.MethodLinkBuilderFactory;
 import org.springframework.hateoas.TemplateVariable;
@@ -47,6 +48,7 @@
 import org.springframework.util.MultiValueMap;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ValueConstants;
 import org.springframework.web.util.UriComponents;
@@ -136,6 +138,8 @@ public ControllerLinkBuilder linkTo(Object invocationValue) {
 		Method method = invocation.getMethod();
 
 		String mapping = DISCOVERER.getMapping(invocation.getTargetType(), method);
+		RequestMethod[] httpMethods = DISCOVERER.getRequestType(invocation.getTargetType(), method);
+
 		UriComponentsBuilder builder = ControllerLinkBuilder.getBuilder().path(mapping);
 
 		UriTemplate template = new UriTemplate(mapping);
@@ -183,7 +187,16 @@ public ControllerLinkBuilder linkTo(Object invocationValue) {
 			variables = variables.concat(variable);
 		}
 
-		return new ControllerLinkBuilder(components, variables);
+		ControllerLinkBuilder controllerLinkBuilder = new ControllerLinkBuilder(components, variables);
+
+		for (RequestMethod requestMethod : httpMethods) {
+			if (requestMethod != RequestMethod.GET) {
+				controllerLinkBuilder.withAffordance(
+					new Affordance(invocation.getMethod(), invocation.getTargetType(), requestMethod));
+			}
+		}
+
+		return controllerLinkBuilder;
 	}
 
 	/* 
diff --git a/src/test/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverterTest.java b/src/test/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverterTest.java
index 119fb5b198..fe45f7cb70 100755
--- a/src/test/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverterTest.java
+++ b/src/test/java/org/springframework/hateoas/hal/forms/HalFormsMessageConverterTest.java
@@ -90,10 +90,11 @@ public HttpHeaders getHeaders() {
 		assertThat(halFormsDocument.getLinks().get(1).getHref(), is("/employees/1"));
 
 		assertThat(halFormsDocument.getTemplates().size(), is(1));
-		assertThat(halFormsDocument.getTemplates().get(0).getContentType(), is("application/hal+json"));
-		assertThat(halFormsDocument.getTemplates().get(0).getKey(), is(Template.DEFAULT_KEY));
-		assertThat(halFormsDocument.getTemplates().get(0).getHttpMethod(), is(HttpMethod.GET));
-		assertThat(halFormsDocument.getTemplates().get(0).getMethod(), is(HttpMethod.GET.toString().toLowerCase()));
+		assertThat(halFormsDocument.getTemplates().keySet(), hasItems("default"));
+		assertThat(halFormsDocument.getTemplates().get("default").getContentType(), is("application/hal+json"));
+		assertThat(halFormsDocument.getTemplates().get("default").getKey(), is(Template.DEFAULT_KEY));
+		assertThat(halFormsDocument.getTemplates().get("default").getHttpMethod(), is(HttpMethod.GET));
+		assertThat(halFormsDocument.getTemplates().get("default").getMethod(), is(HttpMethod.GET.toString().toLowerCase()));
 	}
 
 	@Test
@@ -107,10 +108,10 @@ public void canWriteAHalFormsDocumentMessage() throws IOException {
 		template.setTitle("HAL-Forms unit test");
 		template.getProperties().add(property);
 
-		HalFormsDocument halFormsDocument = halFormsDocument()
+		HalFormsDocument expected = halFormsDocument()
 			.link(new Link("/employees").withRel("collection"))
 			.link(new Link("/employees/1").withSelfRel())
-			.template(template)
+			.template("foo", template)
 			.build();
 
 
@@ -128,11 +129,15 @@ public HttpHeaders getHeaders() {
 			}
 		};
 
-		this.messageConverter.write(halFormsDocument, MediaTypes.HAL_FORMS_JSON, convertedMessage);
+		this.messageConverter.write(expected, MediaTypes.HAL_FORMS_JSON, convertedMessage);
 
-		HalFormsDocument copy = this.mapper.readValue(stream.toString(), HalFormsDocument.class);
+		String json = stream.toString();
 
-		assertThat(copy, is(halFormsDocument));
+		System.out.println(json);
+		
+		HalFormsDocument actual = this.mapper.readValue(json, HalFormsDocument.class);
+
+		assertThat(actual, is(expected));
 	}
 
 }
diff --git a/src/test/java/org/springframework/hateoas/hal/forms/HalFormsWebMvcTest.java b/src/test/java/org/springframework/hateoas/hal/forms/HalFormsWebMvcTest.java
index 3d20f7c584..a761a58c60 100755
--- a/src/test/java/org/springframework/hateoas/hal/forms/HalFormsWebMvcTest.java
+++ b/src/test/java/org/springframework/hateoas/hal/forms/HalFormsWebMvcTest.java
@@ -17,6 +17,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
+import static org.springframework.hateoas.Affordance.byLink;
 import static org.springframework.hateoas.mvc.ControllerLinkBuilder.*;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
@@ -87,12 +88,20 @@ public void basic() throws Exception {
 		this.mockMvc.perform(get("/employees/0").accept(MediaTypes.HAL_FORMS_JSON))
 			.andDo(print())
 			.andExpect(status().isOk())
-			.andExpect(jsonPath("$._links.*", hasSize(4)))
+			.andExpect(jsonPath("$.name", is("Frodo Baggins")))
+			.andExpect(jsonPath("$.role", is("ring bearer")))
+			.andExpect(jsonPath("$._links.*", hasSize(2)))
 			.andExpect(jsonPath("$._links['self'].href", is("http://localhost/employees/0")))
-			.andExpect(jsonPath("$._links['put'].href", is("http://localhost/employees/0")))
-			.andExpect(jsonPath("$._links['patch'].href", is("http://localhost/employees/0")))
 			.andExpect(jsonPath("$._links['employees'].href", is("http://localhost/employees")))
-			.andExpect(jsonPath("$._templates.*", hasSize(1)));
+			.andExpect(jsonPath("$._templates.*", hasSize(2)))
+			.andExpect(jsonPath("$._templates['PUT'].properties[0].name", is("role")))
+			.andExpect(jsonPath("$._templates['PUT'].properties[0].required", is(true)))
+			.andExpect(jsonPath("$._templates['PUT'].properties[1].name", is("name")))
+			.andExpect(jsonPath("$._templates['PUT'].properties[1].required", is(true)))
+			.andExpect(jsonPath("$._templates['PATCH'].properties[0].name", is("role")))
+			.andExpect(jsonPath("$._templates['PATCH'].properties[0].required", is(false)))
+			.andExpect(jsonPath("$._templates['PATCH'].properties[1].name", is("name")))
+			.andExpect(jsonPath("$._templates['PATCH'].properties[1].required", is(false)));
 	}
 
 	@RestController
@@ -138,13 +147,16 @@ public void basic() throws Exception {
 			Link partiallyUpdateLink =
 				linkTo(methodOn(EmployeeController.class).partiallyUpdateEmployee(null, id)).withRel("patch");
 
+			// Define final affordance as means to find entire collection.
+			Link employeesLink = linkTo(methodOn(EmployeeController.class).all()).withRel("employees");
+
 			// Return the affordance + a link back to the entire collection resource.
 			return new Resource<Employee>(
 				EMPLOYEES.get(Integer.parseInt(id)),
-				findOneLink,
-				updateLink,
-				partiallyUpdateLink,
-				linkTo(methodOn(EmployeeController.class).all()).withRel("employees"));
+				findOneLink
+					.withAffordances(byLink(updateLink))
+					.withAffordances(byLink(partiallyUpdateLink)),
+				employeesLink);
 		}
 
 		@PostMapping("/employees")
