diff --git a/README.md b/README.md
index c01f1a52a7..9d0b90292d 100755
--- a/README.md
+++ b/README.md
@@ -1 +1,16 @@
+Sonar XML plugin
+=========================
+
+### Build status
+
 [![Build Status](https://travis-ci.org/SonarCommunity/sonar-xml.svg?branch=master)](https://travis-ci.org/SonarCommunity/sonar-xml)
+
+This is the Sonar XML plugin
+
+Project homepage:
+http://docs.sonarqube.org/display/PLUG/XML+Plugin
+
+Issue tracking:
+https://jira.sonarsource.com/browse/SONARXML/
+
+
diff --git a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/XmlSensor.java b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/XmlSensor.java
index 4f8fbd0d19..abecca180e 100755
--- a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/XmlSensor.java
+++ b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/XmlSensor.java
@@ -18,6 +18,7 @@
 package org.sonar.plugins.xml;
 
 import com.google.common.annotations.VisibleForTesting;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.sonar.api.batch.Sensor;
@@ -51,12 +52,11 @@
  */
 public class XmlSensor implements Sensor {
 
-  private static final Logger LOG = LoggerFactory.getLogger(XmlSensor.class);
-
   private final Checks<Object> checks;
   private final FileSystem fileSystem;
   private final ResourcePerspectives resourcePerspectives;
   private final FilePredicate mainFilesPredicate;
+  private static final Logger LOG = LoggerFactory.getLogger(XmlSensor.class);
 
   public XmlSensor(FileSystem fileSystem, ResourcePerspectives resourcePerspectives, CheckFactory checkFactory) {
     this.checks = checkFactory.create(CheckRepository.REPOSITORY_KEY).addAnnotatedChecks(CheckRepository.getCheckClasses());
@@ -88,7 +88,7 @@ public void analyse(Project project, SensorContext sensorContext) {
           saveSyntaxHighlighting(XMLHighlighting.getHighlightingData(inputFile.file(), fileSystem.encoding()), inputFile);
         }
       } catch (Exception e) {
-        LOG.error("Could not analyze the file " + inputFile.file().getAbsolutePath(), e);
+        throw new IllegalStateException("Could not analyze the file " + inputFile.file().getAbsolutePath(), e);
       }
     }
   }
diff --git a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/AbstractXmlCheck.java b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/AbstractXmlCheck.java
index 5f7a858b11..a72831afdf 100755
--- a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/AbstractXmlCheck.java
+++ b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/AbstractXmlCheck.java
@@ -55,6 +55,10 @@ public final void setRuleKey(RuleKey ruleKey) {
     this.ruleKey = ruleKey;
   }
 
+  public RuleKey getRuleKey() {
+    return ruleKey;
+  }
+
   protected void setWebSourceCode(XmlSourceCode xmlSourceCode) {
     this.xmlSourceCode = xmlSourceCode;
   }
diff --git a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/XPathCheck.java b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/XPathCheck.java
index 6333babb1d..5e96d25df1 100755
--- a/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/XPathCheck.java
+++ b/sonar-xml-plugin/src/main/java/org/sonar/plugins/xml/checks/XPathCheck.java
@@ -102,7 +102,7 @@ private void evaluateXPathForBoolean(Document document, XPathExpression xPathExp
       }
 
     } catch (XPathExpressionException exceptionBoolean) {
-      throw new IllegalStateException(String.format("Can't evaluate XPath expression \"%s\"", expression), exceptionBoolean);
+      throw createExpressionException(exceptionBoolean);
     }
   }
 
@@ -133,10 +133,15 @@ private XPathExpression getXPathExpressionForDocument(Document document) {
       xpath.setNamespaceContext(new DocumentNamespaceContext(resolver));
       return xpath.compile(expression);
     } catch (XPathExpressionException e) {
-      throw new IllegalStateException(String.format("Can't compile XPath expression \"%s\"", expression), e);
+      throw createExpressionException(e);
     }
   }
 
+  private IllegalStateException createExpressionException(XPathExpressionException e) {
+    return new IllegalStateException(
+      String.format("Can't compile XPath expression \"%s\" for rule %s", expression, getRuleKey()), e);
+  }
+
   public void setExpression(String expression) {
     this.expression = expression;
   }
diff --git a/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/XmlSensorTest.java b/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/XmlSensorTest.java
index fcf4510c79..4948484a74 100755
--- a/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/XmlSensorTest.java
+++ b/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/XmlSensorTest.java
@@ -17,18 +17,6 @@
  */
 package org.sonar.plugins.xml;
 
-import static org.fest.assertions.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.atLeastOnce;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import java.io.File;
-import java.util.Collections;
-
 import com.google.common.collect.ImmutableList;
 import org.junit.Before;
 import org.junit.Test;
@@ -37,20 +25,29 @@
 import org.sonar.api.batch.fs.InputFile;
 import org.sonar.api.batch.fs.internal.DefaultFileSystem;
 import org.sonar.api.batch.fs.internal.DefaultInputFile;
-import org.sonar.api.batch.rule.ActiveRule;
 import org.sonar.api.batch.rule.CheckFactory;
 import org.sonar.api.batch.rule.internal.ActiveRulesBuilder;
 import org.sonar.api.batch.rule.internal.DefaultActiveRules;
-import org.sonar.api.batch.rule.internal.NewActiveRule;
 import org.sonar.api.component.ResourcePerspectives;
 import org.sonar.api.issue.Issuable;
+import org.sonar.api.issue.Issue;
 import org.sonar.api.resources.Project;
 import org.sonar.api.rule.RuleKey;
-import org.sonar.api.scan.filesystem.PathResolver;
 import org.sonar.plugins.xml.checks.CheckRepository;
-import org.sonar.plugins.xml.checks.XmlSourceCode;
 import org.sonar.plugins.xml.language.Xml;
 
+import java.io.File;
+
+import static org.fest.assertions.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.atLeastOnce;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
 public class XmlSensorTest extends AbstractXmlPluginTester {
 
   @org.junit.Rule
@@ -74,7 +71,18 @@ public void setUp() throws Exception {
       ImmutableList.of(new ActiveRulesBuilder().create(RuleKey.of(CheckRepository.REPOSITORY_KEY, "NewlineCheck")))));
 
     perspectives = mock(ResourcePerspectives.class);
-    when(perspectives.as(any(Class.class), any(InputFile.class))).thenReturn(mock(Issuable.class));
+
+    Issuable.IssueBuilder issueBuilder = mock(Issuable.IssueBuilder.class);
+    Issue issue = mock(Issue.class);
+    Issuable issuable = mock(Issuable.class);
+
+    when(perspectives.as(eq(Issuable.class), any(InputFile.class))).thenReturn(issuable);
+    when(issuable.newIssueBuilder()).thenReturn(issueBuilder);
+    when(issueBuilder.ruleKey(any(RuleKey.class))).thenReturn(issueBuilder);
+    when(issueBuilder.line(anyInt())).thenReturn(issueBuilder);
+    when(issueBuilder.message(any(String.class))).thenReturn(issueBuilder);
+    when(issueBuilder.build()).thenReturn(issue);
+    when(issuable.addIssue(issue)).thenReturn(true);
 
     sensor = new XmlSensor(fs, perspectives, checkFactory);
   }
diff --git a/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/highlighting/XmlHighlightingTest.java b/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/highlighting/XmlHighlightingTest.java
index 046fbc6381..943d9e3c1b 100755
--- a/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/highlighting/XmlHighlightingTest.java
+++ b/sonar-xml-plugin/src/test/java/org/sonar/plugins/xml/highlighting/XmlHighlightingTest.java
@@ -24,7 +24,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class XMLHighlightingTest {
+public class XmlHighlightingTest {
 
   @Test
   public void testCDATAWithTagsInside() throws Exception {
