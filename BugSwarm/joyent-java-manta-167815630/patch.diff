diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/MantaMultipart.java b/java-manta-client/src/main/java/com/joyent/manta/client/MantaMultipart.java
index 668938b7c5..5c1777fc36 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/MantaMultipart.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/MantaMultipart.java
@@ -5,6 +5,7 @@
 import com.joyent.manta.exception.MantaClientHttpResponseException;
 import com.joyent.manta.exception.MantaIOException;
 import org.apache.commons.lang3.SerializationUtils;
+import org.apache.commons.lang3.builder.ToStringBuilder;
 import org.apache.http.HttpStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -17,6 +18,7 @@
 import java.time.Duration;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Stream;
@@ -245,14 +247,13 @@ public MantaObjectResponse putPart(final UUID id, final int partNumber,
      * @return stream of parts identified by integer part number
      * @throws IOException thrown if there is a problem connecting to Manta
      */
-    public Stream<Integer> listParts(final UUID id) throws IOException {
+    public Stream<Part> listParts(final UUID id) throws IOException {
         final String dir = multipartUploadDir(id);
 
         return mantaClient.listObjects(dir)
-                .map(mantaObject -> Paths.get(mantaObject.getPath())
-                        .getFileName().toString())
-                .filter(value -> !value.equals(METADATA_FILE))
-                .map(Integer::parseInt);
+                .filter(value -> !Paths.get(value.getPath())
+                        .getFileName().toString().equals(METADATA_FILE))
+                .map(Part::new);
     }
 
     /**
@@ -264,6 +265,7 @@ public MantaObjectResponse putPart(final UUID id, final int partNumber,
     public void validateThereAreNoMissingParts(final UUID id) throws IOException {
         listParts(id)
             .sorted()
+            .map(Part::getPartNumber)
             .reduce(1, (memo, value) -> {
                 if (!memo.equals(value)) {
                     MantaClientException e = new MantaClientException(
@@ -309,14 +311,11 @@ public void complete(final UUID id) throws IOException {
 
         final String path = metadata.getPath();
 
-        final Stream<Integer> parts = listParts(id)
-                .sorted();
-
+        final Stream<Part> parts = listParts(id).sorted();
         final StringBuilder jobExecText = new StringBuilder("mget -q ");
 
         parts.forEach(part ->
-                jobExecText.append(uploadDir)
-                           .append(part)
+                jobExecText.append(part.getObjectPath())
                            .append(" ")
         );
 
@@ -474,8 +473,10 @@ static void validatePartNumber(final int partNumber) {
 
     /**
      * Returns the Manta job used to concatenate multiple file parts.
+     *
      * @param id multipart upload id
      * @return Manta job object
+     * @throws IOException thrown if there is a problem connecting to Manta
      */
     MantaJob findJob(final UUID id) throws IOException {
         return mantaClient.getJobsByName("append-" + id)
@@ -483,6 +484,99 @@ MantaJob findJob(final UUID id) throws IOException {
                 .orElse(null);
     }
 
+    /**
+     * A single part of a multipart upload.
+     */
+    public static class Part implements Comparable<Part> {
+        /**
+         * Non-zero positive integer representing the relative position of the
+         * part in relation to the other parts for the multipart upload.
+         */
+        private final int partNumber;
+
+        /**
+         * Remote path on Manta for the part's file.
+         */
+        private final String objectPath;
+
+        /**
+         * Etag value of the part.
+         */
+        private final String etag;
+
+        /**
+         * Creates a new instance based on explicitly defined parameters.
+         *
+         * @param partNumber Non-zero positive integer representing the relative position of the part
+         * @param objectPath Remote path on Manta for the part's file
+         * @param etag Etag value of the part
+         */
+        public Part(final int partNumber, final String objectPath, final String etag) {
+            this.partNumber = partNumber;
+            this.objectPath = objectPath;
+            this.etag = etag;
+        }
+
+        /**
+         * Creates a new instance based on a response from {@link MantaClient}.
+         *
+         * @param object response object from returned from {@link MantaClient}
+         */
+        protected Part(final MantaObject object) {
+            final String filename = Paths.get(object.getPath()).getFileName().toString();
+            this.objectPath = object.getPath();
+            this.partNumber = Integer.parseInt(filename);
+            this.etag = object.getEtag();
+        }
+
+        public int getPartNumber() {
+            return partNumber;
+        }
+
+        public String getEtag() {
+            return etag;
+        }
+
+        protected String getObjectPath() {
+            return objectPath;
+        }
+
+        @Override
+        public int compareTo(final Part that) {
+            return Integer.compare(this.getPartNumber(), that.getPartNumber());
+        }
+
+        @Override
+        public boolean equals(final Object that) {
+            if (this == that) {
+                return true;
+            }
+
+            if (that == null || getClass() != that.getClass()) {
+                return false;
+            }
+
+            final Part part = (Part) that;
+            return partNumber == part.partNumber
+                    && Objects.equals(objectPath, part.objectPath)
+                    && Objects.equals(etag, part.etag);
+        }
+
+        @Override
+        public int hashCode() {
+            return Objects.hash(partNumber, objectPath, etag);
+        }
+
+        @Override
+        public String toString() {
+            return new ToStringBuilder(this)
+                    .append("partNumber", partNumber)
+                    .append("objectPath", objectPath)
+                    .append("etag", etag)
+                    .toString();
+        }
+    }
+
     /**
      * Inner class used only with the jobs-based multipart implementation for
      * storing header and metadata information.
@@ -526,6 +620,11 @@ public MultipartMetadata setPath(final String path) {
             return this;
         }
 
+        /**
+         * Gets the metadata associated with the final Manta object.
+         *
+         * @return new instance of {@link MantaMetadata} with data populated
+         */
         public MantaMetadata getObjectMetadata() {
             if (this.objectMetadata == null) {
                 return null;
diff --git a/java-manta-client/src/test/java/com/joyent/manta/client/MantaMultipartTest.java b/java-manta-client/src/test/java/com/joyent/manta/client/MantaMultipartTest.java
index a5f3e4690e..65675f08fd 100755
--- a/java-manta-client/src/test/java/com/joyent/manta/client/MantaMultipartTest.java
+++ b/java-manta-client/src/test/java/com/joyent/manta/client/MantaMultipartTest.java
@@ -49,12 +49,14 @@ public void canBuildMultiPartUploadPath() {
     public void noErrorWhenAllPartsArePresentOrdered() throws IOException {
         final UUID id = new UUID(0L, 24L);
 
-        List<Integer> partsList = new LinkedList<>();
+        List<MantaMultipart.Part> partsList = new LinkedList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            partsList.add(i);
+            MantaMultipart.Part part = new MantaMultipart.Part(i, null, null);
+            partsList.add(part);
         }
+
         MantaMultipart multiPart = spy(multipartInstance());
         when(multiPart.listParts(id)).thenReturn(partsList.stream());
 
@@ -64,11 +66,12 @@ public void noErrorWhenAllPartsArePresentOrdered() throws IOException {
     public void noErrorWhenAllPartsArePresentUnordered() throws IOException {
         final UUID id = new UUID(0L, 36L);
 
-        List<Integer> partsList = new LinkedList<>();
+        List<MantaMultipart.Part> partsList = new LinkedList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            partsList.add(i);
+            MantaMultipart.Part part = new MantaMultipart.Part(i, null, null);
+            partsList.add(part);
         }
 
         Collections.shuffle(partsList);
@@ -82,11 +85,12 @@ public void noErrorWhenAllPartsArePresentUnordered() throws IOException {
     public void errorWhenMissingPart() throws IOException {
         final UUID id = new UUID(0L, 48L);
 
-        ArrayList<Integer> partsList = new ArrayList<>();
+        ArrayList<MantaMultipart.Part> partsList = new ArrayList<>();
 
         final int totalParts = 64;
         for (int i = 1; i <= totalParts; i++) {
-            partsList.add(i);
+            MantaMultipart.Part part = new MantaMultipart.Part(i, null, null);
+            partsList.add(part);
         }
 
         partsList.remove(2);
diff --git a/java-manta-it/src/test/java/com/joyent/manta/client/MantaMultipartIT.java b/java-manta-it/src/test/java/com/joyent/manta/client/MantaMultipartIT.java
index badf32aab6..dbed49b1ba 100755
--- a/java-manta-it/src/test/java/com/joyent/manta/client/MantaMultipartIT.java
+++ b/java-manta-it/src/test/java/com/joyent/manta/client/MantaMultipartIT.java
@@ -111,7 +111,8 @@ public void canUploadSmallMultipartString() throws IOException {
 
         assertEquals(mantaClient.getAsString(path),
                 combined.toString(),
-                "Manta combined string doesn't match expectation");
+                "Manta combined string doesn't match expectation: "
+                        + multipart.findJob(uploadId));
 
         Duration totalCompletionTime = Duration.between(start, end);
 
@@ -219,7 +220,7 @@ public void canUpload5MBMultipartBinary() throws IOException {
         byte[] remoteMd5 = head.getMd5Bytes();
 
         assertTrue(Arrays.equals(remoteMd5, expectedMd5),
-                "MD5 values do not match");
+                "MD5 values do not match - job id: " + multipart.findJob(uploadId));
 
         Duration totalCompletionTime = Duration.between(start, end);
 
