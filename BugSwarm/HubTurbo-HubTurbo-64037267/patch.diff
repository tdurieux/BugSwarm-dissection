diff --git a/build.gradle b/build.gradle
index a138d570b1..50ecbb01e5 100755
--- a/build.gradle
+++ b/build.gradle
@@ -67,7 +67,15 @@ allprojects {
     }
 
     test {
-        // exclude 'guitests'
+        exclude 'guitests'
+        dependsOn 'guiTests'
+    }
+
+    task guiTests(type: Test) {
+        filter {
+            includeTestsMatching 'guitests.*'
+        }
+        forkEvery = 1
     }
 
     jacoco {
@@ -98,7 +106,7 @@ allprojects {
     assemble.dependsOn shadowJar
 }
 
-task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
+task jacocoRootReport(type: JacocoReport) {
     dependsOn = allprojects.test
     sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
     classDirectories =  files(allprojects.sourceSets.main.output)
diff --git a/src/main/java/ui/UI.java b/src/main/java/ui/UI.java
index 1148d4cd52..7469f82a5b 100755
--- a/src/main/java/ui/UI.java
+++ b/src/main/java/ui/UI.java
@@ -211,11 +211,11 @@ private static void initialiseJNA(String windowTitle) {
 	private HashMap<String, String> initialiseCommandLineArguments() {
 		Parameters params = getParameters();
 		final List<String> parameters = params.getRaw();
-		assert parameters.size() % 2 == 0 : "Parameters should come in pairs";
+//		assert parameters.size() % 2 == 0 : "Parameters should come in pairs";
 		HashMap<String, String> commandLineArgs = new HashMap<>();
-		for (int i=0; i<parameters.size(); i+=2) {
-			commandLineArgs.put(parameters.get(i), parameters.get(i+1));
-		}
+//		for (int i=0; i<parameters.size(); i+=2) {
+//			commandLineArgs.put(parameters.get(i), parameters.get(i+1));
+//		}
 		return commandLineArgs;
 	}
 
diff --git a/src/test/java/guitests/TestGuiTest.java b/src/test/java/guitests/TestGuiTest.java
index 38f65c803b..3fd9f9c186 100755
--- a/src/test/java/guitests/TestGuiTest.java
+++ b/src/test/java/guitests/TestGuiTest.java
@@ -1,16 +1,20 @@
 package guitests;
 
 import com.google.common.util.concurrent.SettableFuture;
+import javafx.application.Platform;
 import javafx.scene.Parent;
 import javafx.scene.control.TextField;
 import javafx.scene.input.KeyCode;
 import javafx.stage.Stage;
+import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.loadui.testfx.GuiTest;
 import org.loadui.testfx.utils.FXTestUtils;
 import ui.UI;
 
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.assertNotNull;
@@ -30,13 +34,16 @@ public void start(Stage primaryStage) {
             super.start(primaryStage);
             stageFuture.set(primaryStage);
         }
+
+        @Override
+        public void quit() {
+            super.quit();
+        }
     }
 
     @Before
     @Override
     public void setupStage() throws Throwable {
-//        assumeTrue(!UserInputDetector.instance.hasDetectedUserInput());
-
         FXTestUtils.launchApp(TestUI.class, "--test=true"); // You can add start parameters here
         try {
             stage = targetWindow(stageFuture.get(25, TimeUnit.SECONDS));
diff --git a/src/test/java/guitests/TestGuiTest2.java b/src/test/java/guitests/TestGuiTest2.java
new file mode 100755
index 0000000000..823af1fce6
--- /dev/null
+++ b/src/test/java/guitests/TestGuiTest2.java
@@ -0,0 +1,64 @@
+package guitests;
+
+import com.google.common.util.concurrent.SettableFuture;
+import javafx.scene.Parent;
+import javafx.scene.control.TextField;
+import javafx.scene.input.KeyCode;
+import javafx.stage.Stage;
+import org.junit.Before;
+import org.junit.Test;
+import org.loadui.testfx.GuiTest;
+import org.loadui.testfx.utils.FXTestUtils;
+import ui.UI;
+
+import java.util.concurrent.TimeUnit;
+
+import static org.junit.Assert.assertNotNull;
+import static org.loadui.testfx.controls.Commons.hasText;
+
+public class TestGuiTest2 extends GuiTest {
+
+    private static final SettableFuture<Stage> stageFuture = SettableFuture.create();
+
+    protected static class TestUI extends UI {
+        public TestUI() {
+            super();
+        }
+
+        @Override
+        public void start(Stage primaryStage) {
+            super.start(primaryStage);
+            stageFuture.set(primaryStage);
+        }
+    }
+
+    @Before
+    @Override
+    public void setupStage() throws Throwable {
+        FXTestUtils.launchApp(TestUI.class, "--test=true"); // You can add start parameters here
+        try {
+            stage = targetWindow(stageFuture.get(25, TimeUnit.SECONDS));
+            FXTestUtils.bringToFront(stage);
+        } catch (Exception e) {
+            throw new RuntimeException("Unable to show stage", e);
+        }
+    }
+
+    @Override
+    protected Parent getRootNode() {
+        return stage.getScene().getRoot();
+    }
+
+    @Test
+    public void testBadLoginAgain() throws InterruptedException {
+        TextField repoOwnerField = find("#repoOwnerField");
+        doubleClick(repoOwnerField);
+        type("HubTurbo").push(KeyCode.TAB);
+        type("HubTurbo").push(KeyCode.TAB);
+        type("test").push(KeyCode.TAB);
+        type("test");
+        click("Sign in");
+        sleep(2000);
+        assertNotNull(hasText("Failed to sign in. Please try again."));
+    }
+}
