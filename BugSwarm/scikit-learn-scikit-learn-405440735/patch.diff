diff --git a/sklearn/decomposition/sparse_pca.py b/sklearn/decomposition/sparse_pca.py
index 6de8567d9b..0f12ce632c 100755
--- a/sklearn/decomposition/sparse_pca.py
+++ b/sklearn/decomposition/sparse_pca.py
@@ -66,6 +66,9 @@ class SparsePCA(BaseEstimator, TransformerMixin):
         If None, the random number generator is the RandomState instance used
         by `np.random`.
 
+    variance : bool, optional
+        If true, compute the explained variance
+
     Attributes
     ----------
     components_ : array, [n_components, n_features]
@@ -77,9 +80,6 @@ class SparsePCA(BaseEstimator, TransformerMixin):
     n_iter_ : int
         Number of iterations run.
 
-    variance : bool, optional
-        If true, compute the explained variance
-
     explained_variance_ : array, [n_components]
         The explained variance versus component
 
@@ -144,8 +144,7 @@ def fit(self, X, y=None):
         self.components_ = Vt.T
         self.error_ = E
         if self.variance:
-            self.explained_variance_ = \
-                self._get_explained_variance(self.components_, X)
+            self.explained_variance_ = self._get_explained_variance(X)
         return self
 
     def transform(self, X, ridge_alpha='deprecated'):
@@ -361,7 +360,6 @@ def fit(self, X, y=None):
         self.components_ = Vt.T
 
         if self.variance:
-            self.explained_variance_ = \
-                self._get_explained_variance(self.components_, X)
+            self.explained_variance_ = self._get_explained_variance(X)
 
         return self
diff --git a/sklearn/decomposition/tests/test_sparse_pca.py b/sklearn/decomposition/tests/test_sparse_pca.py
index 69b8c35d5c..19de6be4c9 100755
--- a/sklearn/decomposition/tests/test_sparse_pca.py
+++ b/sklearn/decomposition/tests/test_sparse_pca.py
@@ -80,21 +80,27 @@ def test_fit_transform():
 
 
 def test_fit_transform_variance():
+    '''
+        This function asserts that the variance computed by SparsePCA is the
+        same as the variance in PCA when the components are orthogonal.
+    '''
     alpha = 1
     rng = np.random.RandomState(0)
-    Y, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array
+    X, _, _ = generate_toy_data(3, 10, (8, 8), random_state=rng)  # wide array
+    # init spca and pca
     spca_lars = SparsePCA(n_components=3, method='lars', alpha=alpha,
                           random_state=0, variance=True)
     pca = PCA(n_components=3, random_state=0)
 
-    pca.fit(Y)
-    # no need to fit spca for this
-    spca_lars.fit(Y)
+    # fit PCA
+    pca.fit(X)
 
-    components = pca.components_
     explained_variance = pca.explained_variance_
-    spca_lars.components_ = components
-    explained_variance_sparse = spca_lars.explained_variance_
+
+    # force the components in spca_lars to be the same as in pca
+    spca_lars.components_ = pca.components_
+    # compute using private method
+    explained_variance_sparse = spca_lars._get_explained_variance(X)
 
     assert_array_almost_equal(explained_variance, explained_variance_sparse)
 
diff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py
index 3db9865aad..ab09229c35 100755
--- a/sklearn/utils/estimator_checks.py
+++ b/sklearn/utils/estimator_checks.py
@@ -589,7 +589,7 @@ def check_sample_weights_invariance(name, estimator_orig):
             if hasattr(estimator_orig, method):
                 X_pred1 = getattr(estimator1, method)(X)
                 X_pred2 = getattr(estimator2, method)(X)
-                assert_allclose(X_pred1, X_pred2, rtol=0.5,
+                assert_allclose(X_pred1, X_pred2,
                                 err_msg="For %s sample_weight=None is not"
                                         " equivalent to sample_weight=ones"
                                         % name)
