diff --git a/numpy/f2py/f90mod_rules.py b/numpy/f2py/f90mod_rules.py
index ec3a248397..85eae80479 100755
--- a/numpy/f2py/f90mod_rules.py
+++ b/numpy/f2py/f90mod_rules.py
@@ -49,7 +49,7 @@ def findf90modules(m):
 fgetdims1 = """\
       external f2pysetdata
       logical ns
-      integer r,i,j
+      integer r,i
       integer(%d) s(*)
       ns = .FALSE.
       if (allocated(d)) then
diff --git a/numpy/random/mtrand/mtrand.pyx b/numpy/random/mtrand/mtrand.pyx
index 4be9f75f04..35143bd9b4 100755
--- a/numpy/random/mtrand/mtrand.pyx
+++ b/numpy/random/mtrand/mtrand.pyx
@@ -648,7 +648,7 @@ def _rand_bool(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_bool>(high_data - low_data)
+        rng = <npy_bool>(int(high_data) - int(low_data))
         off = <npy_bool>low_data
 
         rk_random_bool(off, rng, 1, &buf, state)
@@ -713,7 +713,7 @@ def _rand_int8(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint8>(high_data - low_data)
+        rng = <npy_uint8>(int(high_data) - int(low_data))
         off = <npy_uint8>(<npy_int8>low_data)
 
         rk_random_uint8(off, rng, 1, &buf, state)
@@ -778,7 +778,7 @@ def _rand_int16(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint16>(high_data - low_data)
+        rng = <npy_uint16>(int(high_data) - int(low_data))
         off = <npy_uint16>(<npy_int16>low_data)
 
         rk_random_uint16(off, rng, 1, &buf, state)
@@ -898,7 +898,7 @@ def _rand_int32(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint32>(high_data - low_data)
+        rng = <npy_uint32>(int(high_data) - int(low_data))
         off = <npy_uint32>(<npy_int32>low_data)
 
         rk_random_uint32(off, rng, 1, &buf, state)
@@ -963,7 +963,7 @@ def _rand_int64(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint64>(high_data - low_data)
+        rng = <npy_uint64>(int(high_data) - int(low_data))
         off = <npy_uint64>(<npy_int64>low_data)
 
         rk_random_uint64(off, rng, 1, &buf, state)
@@ -1028,7 +1028,7 @@ def _rand_uint8(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint8>(high_data - low_data)
+        rng = <npy_uint8>(int(high_data) - int(low_data))
         off = <npy_uint8>low_data
 
         rk_random_uint8(off, rng, 1, &buf, state)
@@ -1093,7 +1093,7 @@ def _rand_uint16(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint16>(high_data - low_data)
+        rng = <npy_uint16>(int(high_data) - int(low_data))
         off = <npy_uint16>low_data
 
         rk_random_uint16(off, rng, 1, &buf, state)
@@ -1158,7 +1158,7 @@ def _rand_uint32(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint32>(high_data - low_data)
+        rng = <npy_uint32>(int(high_data) - int(low_data))
         off = <npy_uint32>low_data
 
         rk_random_uint32(off, rng, 1, &buf, state)
@@ -1223,7 +1223,7 @@ def _rand_uint64(low, high, size, rngstate):
         raise ValueError("size is not compatible with inputs")
 
     for low_data, high_data in multi:
-        rng = <npy_uint64>(high_data - low_data)
+        rng = <npy_uint64>(int(high_data) - int(low_data))
         off = <npy_uint64>low_data
 
         rk_random_uint64(off, rng, 1, &buf, state)
