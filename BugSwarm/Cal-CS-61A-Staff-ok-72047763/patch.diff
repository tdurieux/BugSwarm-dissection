diff --git a/server/tests/integration/test_api_assignment.py b/server/tests/integration/test_api_assignment.py
index 64bfe9c8fa..7c00191acd 100755
--- a/server/tests/integration/test_api_assignment.py
+++ b/server/tests/integration/test_api_assignment.py
@@ -20,92 +20,94 @@
 from integration.test_api_base import APITest
 
 
-# class AssignmentAPITest(APITest, APIBaseTestCase):
-# 	model = models.Assignment
-# 	API = api.AssignmentAPI
-# 	name = 'assignment'
-# 	num = 1
-# 	access_token = 'dummy_admin'
-#
-# 	def setUp(self):
-# 		super(AssignmentAPITest, self).setUp()
-# 		self.user = self.accounts['dummy_admin']
-# 		self.user1 = self.accounts['dummy_student']
-# 		self.user2 = self.accounts['dummy_student2']
-# 		self.user3 = self.accounts['dummy_student3']
-# 		self.assignment_name = 'Hog Project'
-# 		self._course = make_fake_course(self.user)
-# 		self._course.put()
-# 		self._assign = make_fake_assignment(self._course, self.user)
-# 		self._assign.name = self._assign.display_name = self.assignment_name
-# 		self._assign.put()
-# 		self._backup = make_fake_backup(self._assign, self.user2)
-# 		self._submission = make_fake_submission(self._backup)
-# 		self._finalsubmission = make_fake_finalsubmission(self._submission, self._assign, self.user2)
-#
-# 	def get_basic_instance(self, mutate=True):
-# 		name = 'proj'
-# 		if mutate:
-# 			name += str(self.num)
-# 			self.num += 1
-#
-# 		self._course = make_fake_course(self.user)
-# 		self._course.put()
-# 		self.enroll_accounts(self._course)
-# 		self._assignment = make_fake_assignment(self._course, self.user)
-# 		self._assignment.name = name
-# 		return self._assignment
-#
-# 	def get_accounts(self):
-# 		return APITest().get_accounts()
-#
-# 	def post_entity(self, inst, *args, **kwds):
-# 		"""Posts an entity to the server."""
-# 		data = inst
-# 		if not isinstance(data, dict):
-# 			data = inst.to_json()
-# 			data['course'] = data['course']['id']
-#
-# 		self.post_json('/{}'.format(self.name),
-# 		               data=data, *args, **kwds)
-# 		if self.response_json and 'key' in self.response_json:
-# 			if inst.key:
-# 				self.assertEqual(inst.key.id(), self.response_json['key'])
-# 			else:
-# 				inst.key = models.ndb.Key(self.model,
-# 				                          self.response_json.get('key'))
-#
-# 	def test_course_does_not_exist(self):
-# 		inst = self.get_basic_instance()
-# 		data = inst.to_json()
-# 		data['course'] = self._course.key.id() + 100000
-#
-# 		self.post_entity(data)
-#
-# 		self.assertStatusCode(400)
-#
-# 	def test_post_duplicate(self):
-# 		""" Post duplicate entity """
-# 		with self.assertRaises(BadValueError):
-# 			self.API().post(self.accounts['admin'], {'name': self.assignment_name})
-#
-# 	def test_edit(self):
-# 		""" Tests that edit works """
-# 		self.API().post(self._assign, self.accounts['admin'], {
-# 			'name': self.assignment_name,
-# 		    'url': 'okpy.org'
-# 		})
-# 		self.assertEqual('okpy.org', self._assign.key.get().url)
-#
-# 	def test_assign(self):
-# 		""" Tests that assign functions without dying """
-# 		self.API().assign(self.accounts['admin'], self.accounts['admin'], {})
-#
-# 	def test_assign_check(self):
-# 		""" Tests that assign checks for permissions  """
-# 		with self.assertRaises(PermissionError):
-# 			self.API().assign(self.accounts['dummy_student3'], self.accounts['dummy_student2'], {})
-#
-# 	def test_invite_err(self):
-# 		""" Test that error is thrown if need be"""
-#
\ No newline at end of file
+class AssignmentAPITest(APIBaseTestCase):
+	model = models.Assignment
+	API = api.AssignmentAPI
+	name = 'assignment'
+	num = 1
+	access_token = 'dummy_admin'
+
+	def setUp(self):
+		super(AssignmentAPITest, self).setUp()
+		self.user = self.accounts['dummy_admin']
+		self.user1 = self.accounts['dummy_student']
+		self.user2 = self.accounts['dummy_student2']
+		self.user3 = self.accounts['dummy_student3']
+		self.assignment_name = 'Hog Project'
+		self._course = make_fake_course(self.user)
+		self._course.put()
+		self._assign = make_fake_assignment(self._course, self.user)
+		self._assign.name = self._assign.display_name = self.assignment_name
+		self._assign.put()
+		self._backup = make_fake_backup(self._assign, self.user2)
+		self._submission = make_fake_submission(self._backup)
+		self._finalsubmission = make_fake_finalsubmission(self._submission, self._assign, self.user2)
+
+	def get_basic_instance(self, mutate=True):
+		name = 'proj'
+		if mutate:
+			name += str(self.num)
+			self.num += 1
+
+		self._course = make_fake_course(self.user)
+		self._course.put()
+		self.enroll_accounts(self._course)
+		self._assignment = make_fake_assignment(self._course, self.user)
+		self._assignment.name = name
+		return self._assignment
+
+	def get_accounts(self):
+		return APITest().get_accounts()
+
+	def post_entity(self, inst, *args, **kwds):
+		"""Posts an entity to the server."""
+		data = inst
+		if not isinstance(data, dict):
+			data = inst.to_json()
+			data['course'] = data['course']['id']
+
+		self.post_json('/{}'.format(self.name),
+		               data=data, *args, **kwds)
+		if self.response_json and 'key' in self.response_json:
+			if inst.key:
+				self.assertEqual(inst.key.id(), self.response_json['key'])
+			else:
+				inst.key = models.ndb.Key(self.model,
+				                          self.response_json.get('key'))
+
+	def test_course_does_not_exist(self):
+		""" Test that error thrown when course does not exist """
+		with self.assertRaises(BadValueError):
+			self.API().post(self.accounts['dummy_admin'], {
+				'creator': self.accounts['dummy_admin'].key,
+				'course': ndb.Key(models.Course, self._course.key.id() + 1)
+			})
+
+	def test_post_duplicate(self):
+		""" Post duplicate entity """
+		with self.assertRaises(BadValueError):
+			self.API().post(self.accounts['dummy_admin'], {
+			'name': self.assignment_name,
+			'course': self._course.key
+		})
+
+	def test_edit(self):
+		""" Tests that edit works """
+		self.API().edit(self._assign, self.accounts['dummy_admin'], {
+			'name': self.assignment_name,
+		    'url': 'okpy.org',
+		    'course': self._course.key
+		})
+		self.assertEqual('okpy.org', self._assign.key.get().url)
+
+	def test_assign(self):
+		""" Tests that assign functions without dying """
+		self.API().assign(self.accounts['dummy_admin'], self.accounts['dummy_admin'], {})
+
+	def test_assign_check(self):
+		""" Tests that assign checks for permissions  """
+		with self.assertRaises(PermissionError):
+			self.API().assign(self.accounts['dummy_student3'], self.accounts['dummy_student2'], {})
+
+	def test_invite_err(self):
+		""" Test that error is thrown if need be"""
diff --git a/server/tests/permissions/test_user.py b/server/tests/permissions/test_user.py
index 1934ae25e4..f9f4918160 100755
--- a/server/tests/permissions/test_user.py
+++ b/server/tests/permissions/test_user.py
@@ -137,7 +137,7 @@ def test_resubmit(self):
         def resubmit(*args):
             calls[0] += 1
 
-        self.mock(models.Submission, 'resubmit', resubmit)
+        self.mock(models.Submission, 'resubmit').using(resubmit)
 
         backup = models.Backup()
         backup.submitter = user_obj2.key
@@ -164,7 +164,7 @@ def test_no_resubmit_other_user(self):
         def resubmit(*args):
             calls[0] += 1
 
-        self.mock(models.Submission, 'resubmit', resubmit)
+        self.mock(models.Submission, 'resubmit').using(resubmit)
 
         backup = models.Backup()
         backup.submitter = user_obj.key
@@ -283,19 +283,18 @@ def test_call_functions(self):
         def unique_email_address_mock(user):
             self.assertEqual(user, user_obj)
             calls[0] += 1
-        self.mock(utils, 'unique_email_address', unique_email_address_mock)
+        self.mock(utils, 'unique_email_address').using(unique_email_address_mock)
 
         def unique_final_submission_mock(user):
             self.assertEqual(user, user_obj)
             calls[1] += 1
-        self.mock(
-            utils, 'unique_final_submission', unique_final_submission_mock)
+        self.mock(utils, 'unique_final_submission').using(unique_final_submission_mock)
 
         def unique_group_mock(user):
             self.assertEqual(user, user_obj)
             calls[2] += 1
 
-        self.mock(utils, 'unique_group', unique_group_mock)
+        self.mock(utils, 'unique_group').using(unique_group_mock)
 
         utils.deferred_check_user(user_obj.key.id())
         self.assertNotEqual(calls[0], 0)
