diff --git a/modules/wyc/build.xml b/modules/wyc/build.xml
index 6013a7eb01..0f6e51545d 100755
--- a/modules/wyc/build.xml
+++ b/modules/wyc/build.xml
@@ -2,7 +2,7 @@
   <import file="../../config.xml"/>
 
   <target name="compile-wyc">
-    <javac debug="true" debuglevel="vars,lines,source" source="1.7" target="1.7" includeantruntime="true" classpath="../wyil/src:../wybs/src/:../wycs/src:../wyrl/src/">
+    <javac debug="true" debuglevel="vars,lines,source" source="1.7" target="1.7" includeantruntime="true" classpath="../wyil/src:../wybs/src/:../wycs/src:../../${WYRL_JAR}">
       <src path="src"/>
       <include name="*/**"/>
       <exclude name="*/**/package-info.java"/>
diff --git a/modules/wycs/src/wycs/builders/CodeGeneration.java b/modules/wycs/src/wycs/builders/CodeGeneration.java
index 2ec4d4d703..68f0edb74a 100755
--- a/modules/wycs/src/wycs/builders/CodeGeneration.java
+++ b/modules/wycs/src/wycs/builders/CodeGeneration.java
@@ -338,23 +338,9 @@ protected Code generate(Expr.Nary e, HashMap<String,Code> environment, WyalFile.
 		case TUPLE:
 			opcode = Code.Op.TUPLE;
 			break;
-		case LIST: {
-
-			// The goal here is convert from a list of the form [x,y,z] into a
-			// set of tuples of the form {(0,x),(1,y),(2,z)}.
-
-			for (int i = 0; i != operands.length; ++i) {
-				SemanticType.Tuple tt = SemanticType.Tuple(SemanticType.Int,
-						operands[i].returnType());
-				Code.Constant idx = Code.Constant(Value.Integer(BigInteger
-						.valueOf(i)));
-				operands[i] = Code.Nary(tt, Code.Op.TUPLE, new Code[] { idx,
-						operands[i] });
-			}
-			
+		case ARRAY: 			
 			opcode = Code.Op.ARRAY;
-			break;
-		}
+			break;		
 		default:
 			internalFailure("unknown unary opcode encountered (" + e + ")",
 					filename, e);
diff --git a/modules/wycs/src/wycs/io/WyalFileParser.java b/modules/wycs/src/wycs/io/WyalFileParser.java
index 4a1e97cf09..c66f4a7b55 100755
--- a/modules/wycs/src/wycs/io/WyalFileParser.java
+++ b/modules/wycs/src/wycs/io/WyalFileParser.java
@@ -1680,7 +1680,7 @@ private Expr parseListExpression(WyalFile wf, HashSet<String> generics,
 			exprs.add(parseUnitExpression(wf, generics, environment, true));
 		}
 
-		return new Expr.Nary(Expr.Nary.Op.LIST, exprs, sourceAttr(start,
+		return new Expr.Nary(Expr.Nary.Op.ARRAY, exprs, sourceAttr(start,
 				index - 1));
 	}
 
diff --git a/modules/wycs/src/wycs/io/WyalFilePrinter.java b/modules/wycs/src/wycs/io/WyalFilePrinter.java
index 06ec3e99f4..6eba11093d 100755
--- a/modules/wycs/src/wycs/io/WyalFilePrinter.java
+++ b/modules/wycs/src/wycs/io/WyalFilePrinter.java
@@ -280,7 +280,7 @@ private void write(WyalFile wf, Expr.Nary e, int indent) {
 			}
 			return;
 		}		
-		case LIST: {
+		case ARRAY: {
 			boolean firstTime=true;
 			out.print("[");
 			for(Expr operand : e.operands) {
diff --git a/modules/wycs/src/wycs/solver/Arrays.wyrl b/modules/wycs/src/wycs/solver/Arrays.wyrl
index 2e32ac1a33..9efb9d6a06 100755
--- a/modules/wycs/src/wycs/solver/Arrays.wyrl
+++ b/modules/wycs/src/wycs/solver/Arrays.wyrl
@@ -30,7 +30,10 @@ include "Core.wyrl"
 // ====================================================================
 
 // An array is a mapping from an index value to another value.
-term Array{[Expr,Expr]...}
+term Array[Expr...]
+
+reduce LengthOf(Array[Expr... xs]):
+    => Num((real) |xs|)
 
 // ====================================================================
 // IndexOf Expressions
@@ -40,11 +43,15 @@ term Array{[Expr,Expr]...}
 // array (left) at a given index position (right).
 term IndexOf[Expr,Expr]
 
+reduce IndexOf[Array[Expr... xs], Num(real i)]:
+    => let j = num i
+       in xs[j], if j >= 0 && j < |xs|
+
 // ====================================================================
 // Expressions & Values
 // ====================================================================
 
-define Value as Array{[Value,Value]...} | ...
+define Value as Array[Value...] | ...
 
 define SExpr as VExpr | Array | ...
 
diff --git a/modules/wycs/src/wycs/syntax/Expr.java b/modules/wycs/src/wycs/syntax/Expr.java
index 9776fe4ec7..855e344808 100755
--- a/modules/wycs/src/wycs/syntax/Expr.java
+++ b/modules/wycs/src/wycs/syntax/Expr.java
@@ -490,7 +490,7 @@ public String toString() {
 	public static class Nary extends Expr {
 		public enum Op {
 			TUPLE(0),
-			LIST(3);
+			ARRAY(3);
 
 			public int offset;
 
@@ -600,7 +600,7 @@ public String toString() {
 			String end;
 			String sep;
 			switch(this.op) {
-			case LIST:
+			case ARRAY:
 				beg = "[";
 				end = "]";
 				sep = ", ";
diff --git a/modules/wycs/src/wycs/transforms/TypePropagation.java b/modules/wycs/src/wycs/transforms/TypePropagation.java
index e18aba9651..30fef575e2 100755
--- a/modules/wycs/src/wycs/transforms/TypePropagation.java
+++ b/modules/wycs/src/wycs/transforms/TypePropagation.java
@@ -406,7 +406,7 @@ private SemanticType propagate(Expr.Nary e,
 			} else {
 				return SemanticType.Tuple(op_types);
 			}
-		case LIST:
+		case ARRAY:
 			if (op_types.length == 0) {
 				return SemanticType.Array(true, SemanticType.Void);
 			} else {
@@ -611,7 +611,7 @@ public static SemanticType returnType(Expr e) {
 			Expr.Nary ue = (Expr.Nary) e;
 			switch (ue.op) {
 			case TUPLE:
-			case LIST:
+			case ARRAY:
 				return type;
 			}
 		} else if (e instanceof Expr.IndexOf) {
diff --git a/modules/wyil/build.xml b/modules/wyil/build.xml
index 5fa8020600..737461655e 100755
--- a/modules/wyil/build.xml
+++ b/modules/wyil/build.xml
@@ -2,7 +2,7 @@
   <import file="../../config.xml"/>
 
   <target name="compile-wyil">
-    <javac memoryMaximumSize="2048m" fork="true" debug="true" debuglevel="vars,lines,source" source="1.7" target="1.7" includeantruntime="true"  classpath="../wycs/src/;../wybs/src/;../wyrl/src">
+    <javac memoryMaximumSize="2048m" fork="true" debug="true" debuglevel="vars,lines,source" source="1.7" target="1.7" includeantruntime="true"  classpath="../wycs/src/:../wybs/src/:../../${WYRL_JAR}">
       <src path="src"/>
       <include name="*/**"/>
       <exclude name="*/**/package-info.java"/>
diff --git a/modules/wyil/src/wyil/builders/VcGenerator.java b/modules/wyil/src/wyil/builders/VcGenerator.java
index 21a8781a62..75d0aab5c1 100755
--- a/modules/wyil/src/wyil/builders/VcGenerator.java
+++ b/modules/wyil/src/wyil/builders/VcGenerator.java
@@ -1566,7 +1566,7 @@ protected void transform(Code.Unit code, AttributedCodeBlock block,
 			} else if (code instanceof Codes.ListGenerator) {
 				transform((Codes.ListGenerator) code, block, branch);
 			} else if (code instanceof Codes.NewList) {
-				transformNary(Expr.Nary.Op.LIST, (Codes.NewList) code, branch,
+				transformNary(Expr.Nary.Op.ARRAY, (Codes.NewList) code, branch,
 						block);
 			} else if (code instanceof Codes.NewRecord) {
 				transformNary(Expr.Nary.Op.TUPLE, (Codes.NewRecord) code,
diff --git a/tests/valid/String_Valid_6.whiley b/tests/valid/String_Valid_6.whiley
index 143954316b..caf159365b 100755
--- a/tests/valid/String_Valid_6.whiley
+++ b/tests/valid/String_Valid_6.whiley
@@ -6,12 +6,17 @@ ensures |zs| == |xs| + |ys|:
     [int] rs = [0; count]
     //
     int i = 0
-    while i < |xs| where i >= 0:
+    while i < |xs|
+        where i >= 0
+        where |xs| <= |rs|
+        where |ys| <= |rs|:
         rs[i] = xs[i]
         i = i + 1
     //
     int j = 0
-    while j < |ys| where j >= 0:
+    while j < |ys|
+        where j >= 0
+        where |ys| <= |rs|:
         rs[j + i] = ys[j]
         j = j + 1
     //
