diff --git a/config/checkstyle_sevntu_checks.xml b/config/checkstyle_sevntu_checks.xml
index 6503b7bcfc..36aff19234 100755
--- a/config/checkstyle_sevntu_checks.xml
+++ b/config/checkstyle_sevntu_checks.xml
@@ -139,5 +139,6 @@
         </module>
         <module name="LogicConditionNeedOptimizationCheck"/>
         <module name="AvoidConditionInversionCheck"/>
+        <module name="SingleBreakOrContinueCheck"/>
     </module>
 </module>
diff --git a/pom.xml b/pom.xml
index 321d99af0c..95e8f0a891 100755
--- a/pom.xml
+++ b/pom.xml
@@ -196,7 +196,7 @@
     <maven.pmd.plugin.version>3.6</maven.pmd.plugin.version>
     <maven.jacoco.plugin.version>0.7.5.201505241946</maven.jacoco.plugin.version>
     <maven.checkstyle.plugin.version>2.17</maven.checkstyle.plugin.version>
-    <maven.sevntu.checkstyle.plugin.version>1.17.1</maven.sevntu.checkstyle.plugin.version>
+    <maven.sevntu.checkstyle.plugin.version>1.18.0</maven.sevntu.checkstyle.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
     <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
     <java.version>1.7</java.version>
@@ -271,7 +271,7 @@
     <dependency>
       <groupId>nl.jqno.equalsverifier</groupId>
       <artifactId>equalsverifier</artifactId>
-      <version>1.7.6</version>
+      <version>1.7.7</version>
       <scope>test</scope>
     </dependency>
     <dependency>
diff --git a/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InterfaceTypeParameterNameTest.java b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InterfaceTypeParameterNameTest.java
new file mode 100755
index 0000000000..94766304c3
--- /dev/null
+++ b/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InterfaceTypeParameterNameTest.java
@@ -0,0 +1,57 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2016 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.google.checkstyle.test.chapter5naming.rule528typevariablenames;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.google.checkstyle.test.base.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.api.Configuration;
+
+public class InterfaceTypeParameterNameTest extends BaseCheckTestSupport {
+
+    private static final String MSG_KEY = "name.invalidPattern";
+
+    @Override
+    protected String getPath(String fileName) throws IOException {
+        return super.getPath("chapter5naming" + File.separator + "rule528typevariablenames"
+            + File.separator + fileName);
+    }
+
+    @Test
+    public void testInterfaceDefault() throws Exception {
+        final Configuration configuration = getCheckConfig("InterfaceTypeParameterName");
+        final String format = configuration.getAttribute("format");
+
+        final String[] expected = {
+            "48:15: " + getCheckMessage(configuration.getMessages(), MSG_KEY, "Input", format),
+            "76:25: " + getCheckMessage(configuration.getMessages(), MSG_KEY, "Request", format),
+            "80:25: " + getCheckMessage(configuration.getMessages(), MSG_KEY, "TRequest", format),
+        };
+
+        final String filePath = getPath("InputInterfaceTypeParameterName.java");
+
+        final Integer[] warnList = getLinesWithWarn(filePath);
+        verify(configuration, filePath, expected, warnList);
+    }
+
+}
diff --git a/src/it/resources/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InputInterfaceTypeParameterName.java b/src/it/resources/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InputInterfaceTypeParameterName.java
new file mode 100755
index 0000000000..07969354b2
--- /dev/null
+++ b/src/it/resources/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InputInterfaceTypeParameterName.java
@@ -0,0 +1,86 @@
+package com.google.checkstyle.test.chapter5naming.rule528typevariablenames;
+
+import java.io.Serializable;
+
+public class InputInterfaceTypeParameterName <t>
+{
+    public <TT> void foo() { }
+
+    <e_e> void foo(int i) {
+    }
+}
+
+class OtherClass <foo extends Serializable & Cloneable> {
+
+    foo getOne() {
+        return null;//comment
+    }
+
+    <Tfo$o2T extends foo> /*comment*/Tfo$o2T getTwo(Tfo$o2T a) {
+        return null;
+    }
+
+    <foo extends Runnable> foo getShadow() {
+        return null;
+    }
+
+    static class Junk <foo> {
+        <_fo extends foo> void getMoreFoo() {
+        }
+    }
+}
+
+class MoreOtherClass <T extends Cloneable> {
+
+    <E extends T> void getMore() {
+        new Other() {
+            <T> void getMoreFoo() {
+            }
+        };
+
+//        Other o = new Other() {
+//            <EE> void getMoreFoo() {
+//            }
+//        };
+    }
+}
+
+interface Boo<Input> { // warn
+    Input boo();
+}
+
+interface FooInterface<T> {
+    T foo();
+}
+
+interface FooInterface2 {
+    Input foo();
+}
+
+interface FooInterface3<T2> {
+    Input foo();
+}
+
+interface FooInterface4<E> {
+    Input foo();
+}
+
+interface FooInterface5<X> {
+    Input foo();
+}
+
+interface FooInterface6<RequestT> {
+    Input foo();
+}
+
+interface FooInterface7<Request> { // warn
+    Input foo();
+}
+
+interface FooInterface8<TRequest> { // warn
+    Input foo();
+}
+
+class Input {
+
+}
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
index 7226966b77..7d0842463f 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java
@@ -256,13 +256,15 @@ private void processMethods(DetailAST ast) {
                 final DetailAST classModifiers =
                     parent.findFirstToken(TokenTypes.MODIFIERS);
                 checkFinal = checkFinal || classModifiers.branchContains(TokenTypes.FINAL);
-                break;
+                parent = null;
             }
-            if (parent.getType() == TokenTypes.LITERAL_NEW) {
+            else if (parent.getType() == TokenTypes.LITERAL_NEW) {
                 checkFinal = true;
-                break;
+                parent = null;
+            }
+            else {
+                parent = parent.getParent();
             }
-            parent = parent.getParent();
         }
         if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {
             DetailAST modifier = modifiers.getFirstChild();
diff --git a/src/main/resources/google_checks.xml b/src/main/resources/google_checks.xml
index dbccd15170..f1c6b9fe79 100755
--- a/src/main/resources/google_checks.xml
+++ b/src/main/resources/google_checks.xml
@@ -128,6 +128,11 @@
             <message key="name.invalidPattern"
              value="Method type name ''{0}'' must match pattern ''{1}''."/>
         </module>
+        <module name="InterfaceTypeParameterName">
+            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
+            <message key="name.invalidPattern"
+             value="Interface type name ''{0}'' must match pattern ''{1}''."/>
+        </module>
         <module name="NoFinalizer"/>
         <module name="GenericWhitespace">
             <message key="ws.followed"
diff --git a/src/xdocs/google_style.xml b/src/xdocs/google_style.xml
index 519d0c6c4d..327612f620 100755
--- a/src/xdocs/google_style.xml
+++ b/src/xdocs/google_style.xml
@@ -1201,6 +1201,11 @@
                                     src="images/ok_green.png"
                                     alt="" />
                                 <a href="config_naming.html#ClassTypeParameterName">ClassTypeParameterName</a>
+                                <br/>
+                                <img
+                                   src="images/ok_green.png"
+                                   alt="" />
+                                <a href="config_naming.html#InterfaceTypeParameterName">InterfaceTypeParameterName</a>
                             </td>
                             <td>
                                 <a
@@ -1214,6 +1219,12 @@
                                 <br />
                                 <a
                                     href="https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java">test</a>
+                                <br />
+                                <a
+                                    href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+InterfaceTypeParameterName">config</a>
+                                <br />
+                                <a
+                                    href="https://github.com/checkstyle/checkstyle/blob/master/src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/InterfaceTypeParameterNameTest.java">test</a>
                             </td>
                         </tr>
                         <tr>
diff --git a/src/xdocs/index.xml.vm b/src/xdocs/index.xml.vm
index e9a08e87e1..decc765859 100755
--- a/src/xdocs/index.xml.vm
+++ b/src/xdocs/index.xml.vm
@@ -106,8 +106,8 @@
       </p>
 
       <ul>
-        <li>An <a href="http://ant.apache.org/index.html">Ant</a> task.</li>
-        <li>A command line tool.</li>
+        <li>An <a href="anttask.html">Ant task</a>.</li>
+        <li>A <a href="cmdline.html">command line</a> interface (CLI).</li>
       </ul>
 
       <p>
