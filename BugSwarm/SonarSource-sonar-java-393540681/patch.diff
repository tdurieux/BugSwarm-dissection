diff --git a/java-checks/src/main/java/org/sonar/java/checks/security/SecureCookieCheck.java b/java-checks/src/main/java/org/sonar/java/checks/security/SecureCookieCheck.java
index 81513ee556..41cfec0f39 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/security/SecureCookieCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/security/SecureCookieCheck.java
@@ -19,10 +19,11 @@
  */
 package org.sonar.java.checks.security;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import org.sonar.check.Rule;
 import org.sonar.java.matcher.MethodMatcher;
 import org.sonar.java.matcher.TypeCriteria;
@@ -32,168 +33,184 @@
 import org.sonar.plugins.java.api.semantic.Symbol;
 import org.sonar.plugins.java.api.semantic.Type;
 import org.sonar.plugins.java.api.tree.Arguments;
+import org.sonar.plugins.java.api.tree.AssignmentExpressionTree;
 import org.sonar.plugins.java.api.tree.ExpressionTree;
 import org.sonar.plugins.java.api.tree.IdentifierTree;
 import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;
 import org.sonar.plugins.java.api.tree.MethodInvocationTree;
 import org.sonar.plugins.java.api.tree.NewClassTree;
+import org.sonar.plugins.java.api.tree.ReturnStatementTree;
 import org.sonar.plugins.java.api.tree.Tree;
 import org.sonar.plugins.java.api.tree.VariableTree;
 
 @Rule(key = "S2092")
 public class SecureCookieCheck extends IssuableSubscriptionVisitor {
-  private static final String SERVLET_COOKIE = "javax.servlet.http.Cookie";
-  private static final String NET_HTTP_COOKIE = "java.net.HttpCookie";
+
+  private static final String MESSAGE = "Add the \"secure\" attribute to this cookie";
+
   private static final String JAX_RS_COOKIE = "javax.ws.rs.core.Cookie";
   private static final String JAX_RS_NEW_COOKIE = "javax.ws.rs.core.NewCookie";
-  private static final String SHIRO_SIMPLE_COOKIE = "org.apache.shiro.web.servlet.SimpleCookie";
   private static final String SPRING_SAVED_COOKIE = "org.springframework.security.web.savedrequest.SavedCookie";
   private static final String PLAY_COOKIE = "play.mvc.Http$Cookie";
-  private static final String PLAY_COOKIE_BUILDER = "play.mvc.Http$CookieBuilder";
-  private static final List<String> COOKIES = Arrays.asList(SERVLET_COOKIE,
-      NET_HTTP_COOKIE,
-      JAX_RS_COOKIE,
-      JAX_RS_NEW_COOKIE,
-      SHIRO_SIMPLE_COOKIE,
-      SPRING_SAVED_COOKIE,
-      PLAY_COOKIE);
-
+  private static final List<String> COOKIES = Arrays.asList(
+    "javax.servlet.http.Cookie",
+    "java.net.HttpCookie",
+    JAX_RS_COOKIE,
+    JAX_RS_NEW_COOKIE,
+    "org.apache.shiro.web.servlet.SimpleCookie",
+    SPRING_SAVED_COOKIE,
+    PLAY_COOKIE,
+    "play.mvc.Http$CookieBuilder");
+
+  private static final List<String> SETTER_NAMES = Arrays.asList("setSecure", "withSecure");
+
+  /**
+   * Some constructors have the 'secure' parameter and do not need a 'setSecure' call afterwards.
+   */
   private static final String CONSTRUCTOR = "<init>";
   private static final String JAVA_LANG_STRING = "java.lang.String";
-  private static final String JAVA_UTIL_DATE = "java.util.Date";
   private static final String INT = "int";
   private static final String BOOLEAN = "boolean";
 
   private static final List<MethodMatcher> CONSTRUCTORS_WITH_SECURE_PARAM_LAST = Arrays.asList(
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
       .parameters(JAX_RS_COOKIE, JAVA_LANG_STRING, INT, BOOLEAN),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
       .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, JAVA_LANG_STRING, INT, BOOLEAN),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
-      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, BOOLEAN)
-  );
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, BOOLEAN));
 
   private static final List<MethodMatcher> CONSTRUCTORS_WITH_SECURE_PARAM_BEFORE_LAST = Arrays.asList(
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
-      .parameters(JAX_RS_COOKIE, JAVA_LANG_STRING, INT, JAVA_UTIL_DATE, BOOLEAN, BOOLEAN),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
-      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, JAVA_LANG_STRING, INT, JAVA_UTIL_DATE, BOOLEAN, BOOLEAN),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+      .parameters(JAX_RS_COOKIE, JAVA_LANG_STRING, INT, "java.util.Date", BOOLEAN, BOOLEAN),
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
+      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, JAVA_LANG_STRING, INT, "java.util.Date", BOOLEAN, BOOLEAN),
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(JAX_RS_NEW_COOKIE)).name(CONSTRUCTOR)
       .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, BOOLEAN, BOOLEAN),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(SPRING_SAVED_COOKIE)).name(CONSTRUCTOR)
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(SPRING_SAVED_COOKIE)).name(CONSTRUCTOR)
       .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, JAVA_LANG_STRING, INT, JAVA_LANG_STRING, BOOLEAN, INT),
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(PLAY_COOKIE)).name(CONSTRUCTOR)
-      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, "java.lang.Integer", JAVA_LANG_STRING, JAVA_LANG_STRING, BOOLEAN, BOOLEAN)
-  );
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(PLAY_COOKIE)).name(CONSTRUCTOR)
+      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, "java.lang.Integer", JAVA_LANG_STRING, JAVA_LANG_STRING, BOOLEAN, BOOLEAN));
 
-  private static final List<MethodMatcher> CONSTRUCTORS_WITH_SECURE_PARAM_BEFORE_BEFORE_LAST = Arrays.asList(
-    MethodMatcher.create()
-      .typeDefinition(TypeCriteria.subtypeOf(PLAY_COOKIE)).name(CONSTRUCTOR)
-      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, "java.lang.Integer", JAVA_LANG_STRING, JAVA_LANG_STRING, BOOLEAN, BOOLEAN, "play.mvc.Http.Cookie.SameSite")
-  );
+  private static final List<MethodMatcher> CONSTRUCTORS_WITH_SECURE_PARAM_BEFORE_BEFORE_LAST = Collections.singletonList(
+    MethodMatcher.create().typeDefinition(TypeCriteria.subtypeOf(PLAY_COOKIE)).name(CONSTRUCTOR)
+      .parameters(JAVA_LANG_STRING, JAVA_LANG_STRING, "java.lang.Integer", JAVA_LANG_STRING, JAVA_LANG_STRING, BOOLEAN, BOOLEAN, "play.mvc.Http$Cookie$SameSite"));
 
-  private List<Symbol.VariableSymbol> unsecuredCookies = Lists.newArrayList();
+  private final Set<Symbol.VariableSymbol> unsecuredCookies = new HashSet<>();
+  private final Set<NewClassTree> unsecuredReturns = new HashSet<>();
+  private final Set<MethodInvocationTree> unsecuredSetters = new HashSet<>();
 
   @Override
   public List<Tree.Kind> nodesToVisit() {
-    return ImmutableList.of(Tree.Kind.VARIABLE, Tree.Kind.METHOD_INVOCATION);
+    return Arrays.asList(
+      Tree.Kind.VARIABLE,
+      Tree.Kind.ASSIGNMENT,
+      Tree.Kind.METHOD_INVOCATION,
+      Tree.Kind.RETURN_STATEMENT);
   }
 
   @Override
   public void scanFile(JavaFileScannerContext context) {
     unsecuredCookies.clear();
+    unsecuredReturns.clear();
+    unsecuredSetters.clear();
     super.scanFile(context);
-    for (Symbol.VariableSymbol unsecuredCookie : unsecuredCookies) {
-      reportIssue(unsecuredCookie.declaration().simpleName(), "Add the \"secure\" attribute to this cookie");
-    }
+    unsecuredCookies.forEach(v -> reportIssue(v.declaration().simpleName(), MESSAGE));
+    unsecuredReturns.forEach(r -> reportIssue(r, MESSAGE));
+    unsecuredSetters.forEach(m -> reportIssue(m.arguments(), MESSAGE));
   }
 
   @Override
   public void visitNode(Tree tree) {
-    if (hasSemantic()) {
-      if (tree.is(Tree.Kind.VARIABLE)) {
-        VariableTree variableTree = (VariableTree) tree;
-        addToUnsecuredCookies(variableTree);
-      } else if (tree.is(Tree.Kind.METHOD_INVOCATION)) {
-        MethodInvocationTree mit = (MethodInvocationTree) tree;
-        checkSecureCall(mit);
-      }
+    if (!hasSemantic()) {
+      return;
+    }
+    if (tree.is(Tree.Kind.VARIABLE)) {
+      addToUnsecuredCookies((VariableTree) tree);
+    } else if (tree.is(Tree.Kind.ASSIGNMENT)) {
+      addToUnsecuredCookies((AssignmentExpressionTree) tree);
+    } else if (tree.is(Tree.Kind.METHOD_INVOCATION)) {
+      checkSecureCall((MethodInvocationTree) tree);
+    } else {
+      addToUnsecuredReturns((ReturnStatementTree) tree);
     }
   }
 
   private void addToUnsecuredCookies(VariableTree variableTree) {
     Type type = variableTree.type().symbolType();
-    //Ignore field variables
-    if (COOKIES.stream().anyMatch(type::is)
-        && isConstructorInitialized(variableTree)
-        && variableTree.symbol().isVariableSymbol()
-        && variableTree.symbol().owner().isMethodSymbol()) {
-      NewClassTree constructor = (NewClassTree) variableTree.initializer();
-      Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) variableTree.symbol();
-      if (isSecureParamTrue(constructor)) {
+    ExpressionTree initializer = variableTree.initializer();
+    // Ignore field variables
+    if (initializer != null && variableTree.symbol().isVariableSymbol() && variableTree.symbol().owner().isMethodSymbol()) {
+      boolean isInitializedWithConstructor = initializer.is(Tree.Kind.NEW_CLASS);
+      boolean isMatchedType = isCookieClass(type) || isCookieClass(initializer.symbolType());
+      if (isInitializedWithConstructor && isMatchedType && isSecureParamFalse((NewClassTree) initializer)) {
+        unsecuredCookies.add((Symbol.VariableSymbol) variableTree.symbol());
       }
-      else {
-        unsecuredCookies.add(variableSymbol);
+    }
+  }
+
+  private void addToUnsecuredCookies(AssignmentExpressionTree assignment) {
+    if (assignment.expression().is(Tree.Kind.NEW_CLASS) && assignment.variable().is(Tree.Kind.IDENTIFIER)) {
+      IdentifierTree identifier = (IdentifierTree) assignment.variable();
+      boolean isMethodVariable = identifier.symbol().isVariableSymbol() && identifier.symbol().owner().isMethodSymbol();
+      boolean isSupportedClass = isCookieClass(identifier.symbolType()) || isCookieClass(assignment.expression().symbolType());
+      if (isMethodVariable && isSupportedClass && isSecureParamFalse((NewClassTree) assignment.expression())) {
+        unsecuredCookies.add((Symbol.VariableSymbol) ((IdentifierTree) assignment.variable()).symbol());
       }
     }
   }
 
   private void checkSecureCall(MethodInvocationTree mit) {
     if (isSetSecureCall(mit) && mit.methodSelect().is(Tree.Kind.MEMBER_SELECT)) {
-      MemberSelectExpressionTree mse = (MemberSelectExpressionTree) mit.methodSelect();
-      if (mse.expression().is(Tree.Kind.IDENTIFIER)) {
-        Symbol reference = ((IdentifierTree) mse.expression()).symbol();
-        unsecuredCookies.remove(reference);
+      ExpressionTree methodObject = ((MemberSelectExpressionTree) mit.methodSelect()).expression();
+      if (methodObject.is(Tree.Kind.IDENTIFIER)) {
+        IdentifierTree identifierTree = (IdentifierTree) methodObject;
+        if (!LiteralUtils.isFalse(mit.arguments().get(0))) {
+          unsecuredCookies.remove(identifierTree.symbol());
+        } else if (identifierTree.symbol().owner().isMethodSymbol()) {
+          unsecuredCookies.add((Symbol.VariableSymbol) identifierTree.symbol());
+        }
+      } else if (LiteralUtils.isFalse(mit.arguments().get(0))) {
+        // builder method
+        unsecuredSetters.add(mit);
       }
     }
   }
 
-  private static boolean isConstructorInitialized(VariableTree variableTree) {
-    ExpressionTree initializer = variableTree.initializer();
-    return initializer != null && initializer.is(Tree.Kind.NEW_CLASS);
+  private void addToUnsecuredReturns(ReturnStatementTree tree) {
+    ExpressionTree returnedExpression = tree.expression();
+    if (returnedExpression != null
+      && returnedExpression.is(Tree.Kind.NEW_CLASS)
+      && isCookieClass(returnedExpression.symbolType())
+      && isSecureParamFalse((NewClassTree) returnedExpression)) {
+      unsecuredReturns.add((NewClassTree) returnedExpression);
+    }
   }
 
-  private static boolean isSecureParamTrue(NewClassTree newClassTree) {
+  private static boolean isSecureParamFalse(NewClassTree newClassTree) {
     ExpressionTree secureArgument = null;
+    Arguments arguments = newClassTree.arguments();
     if (CONSTRUCTORS_WITH_SECURE_PARAM_LAST.stream().anyMatch(m -> m.matches(newClassTree))) {
-      Arguments arguments = newClassTree.arguments();
       secureArgument = arguments.get(arguments.size() - 1);
     } else if (CONSTRUCTORS_WITH_SECURE_PARAM_BEFORE_LAST.stream().anyMatch(m -> m.matches(newClassTree))) {
-      Arguments arguments = newClassTree.arguments();
       secureArgument = arguments.get(arguments.size() - 2);
     } else if (CONSTRUCTORS_WITH_SECURE_PARAM_BEFORE_BEFORE_LAST.stream().anyMatch(m -> m.matches(newClassTree))) {
-      Arguments arguments = newClassTree.arguments();
       secureArgument = arguments.get(arguments.size() - 3);
     }
     if (secureArgument != null) {
-      return LiteralUtils.isTrue(secureArgument);
+      return LiteralUtils.isFalse(secureArgument);
     }
-    return false;
+    return true;
   }
 
   private static boolean isSetSecureCall(MethodInvocationTree mit) {
-    Symbol methodSymbol = mit.symbol();
-    boolean hasArityOne = mit.arguments().size() == 1;
-    if (hasArityOne && isCallSiteCookie(methodSymbol)) {
-      ExpressionTree expressionTree = mit.arguments().get(0);
-      if (LiteralUtils.isFalse(expressionTree)) {
-        return false;
-      }
-      return "setSecure".equals(getIdentifier(mit).name());
-    }
-    return false;
+    return mit.arguments().size() == 1
+      && isCookieClass(mit.symbol().owner().type())
+      && SETTER_NAMES.stream().anyMatch(getIdentifier(mit).name()::equals);
   }
 
-  private static boolean isCallSiteCookie(Symbol methodSymbol) {
-    return methodSymbol.isMethodSymbol() && COOKIES.stream().anyMatch(methodSymbol.owner().type()::is);
+  private static boolean isCookieClass(Type type) {
+    return COOKIES.stream().anyMatch(type::isSubtypeOf);
   }
 
   private static IdentifierTree getIdentifier(MethodInvocationTree mit) {
diff --git a/java-checks/src/test/files/checks/security/SecureCookieCheck.java b/java-checks/src/test/files/checks/security/SecureCookieCheck.java
index 495d1089f2..77bdd48b88 100755
--- a/java-checks/src/test/files/checks/security/SecureCookieCheck.java
+++ b/java-checks/src/test/files/checks/security/SecureCookieCheck.java
@@ -23,10 +23,16 @@ void foo(Cookie cookie) {
     int age = cookie.getMaxAge();
   }
 
-  Cookie servletCookie(Cookie cookie4, boolean param) {
+  Cookie servletCookie(
+      Cookie firstParam, // Noncompliant [[sc=14;ec=24]] {{Add the "secure" attribute to this cookie}}
+      Cookie secondParam,
+      Cookie thirdParam,
+      boolean param) {
+    firstParam.setSecure(false);
+    secondParam.setSecure(true);
 
-    field4 = new Cookie("name, value"); // FN
-    field5.setSecure(false); // FN
+    field4 = new Cookie("name, value"); // FN, ignore fields
+    field5.setSecure(false); // FN, ignore fields
 
     Cookie cookie = new Cookie("name", "value");
     cookie.setSecure(true);
@@ -36,8 +42,6 @@ Cookie servletCookie(Cookie cookie4, boolean param) {
     Cookie cookie3 = new Cookie("name", "value"); // Noncompliant {{Add the "secure" attribute to this cookie}}
     cookie3.setSecure(false);
 
-    cookie4.setSecure(false); // FN
-
     Cookie cookie5 = new Cookie("name", "value");
     cookie5.setSecure(FALSE_CONSTANT); // FN
 
@@ -62,10 +66,10 @@ Cookie servletCookie(Cookie cookie4, boolean param) {
     c10 = new Cookie("name", "value");
     c10.setSecure(true);
 
-    Object c12; // Noncompliant
+    Object c12;  // Noncompliant [[sc=12;ec=15]] {{Add the "secure" attribute to this cookie}}
     c12 = new Cookie("name", "value");
 
-    return new Cookie("name", "value"); // FN
+    return new Cookie("name", "value"); // Noncompliant
   }
 
   HttpCookie getHttpCookie() {
@@ -84,7 +88,7 @@ HttpCookie getHttpCookie() {
     c5 = new HttpCookie("name", "value");
     c3.setSecure(false);
 
-    field6 = new HttpCookie("name, value"); // FN
+    field6 = new HttpCookie("name, value"); // FN, ignore fields
 
     return new HttpCookie("name", "value"); // Noncompliant
   }
@@ -130,28 +134,35 @@ SavedCookie springSavedCookie(javax.servlet.http.Cookie cookie) {
   }
 
   void playFw(play.mvc.Http.Cookie.SameSite sameSite) {
-    play.mvc.Http.Cookie c1 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", false, true); // Noncompliant
-    play.mvc.Http.Cookie c2 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", false, false, sameSite); // Noncompliant
-    play.mvc.Http.Cookie c3 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", true, false);
-    CookieBuilder cb1 = Cookie.builder("1", "2");
-    cb1.withSecure(false); // Noncompliant
-    cb1.withSecure(true); // is ignored, so above is a FN
-    CookieBuilder cb2 = Cookie.builder("1", "2");
+    play.mvc.Http.Cookie c11 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", false, true); // Noncompliant
+    play.mvc.Http.Cookie c12 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", true, false);
+    play.mvc.Http.Cookie c21 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", false, false, sameSite); // Noncompliant
+    play.mvc.Http.Cookie c22 = new play.mvc.Http.Cookie("1", "2", 3, "4", "5", true, false, sameSite);
+    play.mvc.Http.Cookie c4;
+    c4 =  new play.mvc.Http.Cookie("1", "2", 3, "4", "5", true, true);
+    CookieBuilder cb1 = play.mvc.Http.Cookie.builder("1", "2"); // Noncompliant
+    cb1.withSecure(false);
+    CookieBuilder cb2 = play.mvc.Http.Cookie.builder("1", "2");
     cb2.withSecure(true);
     play.mvc.Http.Cookie.builder("1", "2")
         .withMaxAge(1)
         .withPath("x")
         .withDomain("x")
         .withSecure(true)
-        .withSecure(false) // Noncompliant
+        .withSecure(false) // Noncompliant [[sc=20;ec=27]] {{Add the "secure" attribute to this cookie}}
+        .withSecure(true)
         .build();
-    play.mvc.Http.Cookie.builder("theme", "blue").withSecure(true);
+    play.mvc.Http.Cookie c5 = play.mvc.Http.Cookie.builder("theme", "blue").withSecure(true).build();
   }
 
   play.mvc.Http.Cookie getC5() {
     return new play.mvc.Http.Cookie("1", "2", 3, "4", "5", false, true); // Noncompliant
   }
 
+  play.mvc.Http.Cookie getC5() {
+    return new play.mvc.Http.Cookie("1", "2", 3, "4", "5", true, true);
+  }
+
   play.mvc.Http.Cookie getC6() {
     return play.mvc.Http.Cookie.builder("theme", "blue").withSecure(false); // Noncompliant
   }
@@ -161,12 +172,26 @@ void playFw(play.mvc.Http.Cookie.SameSite sameSite) {
   public Cookie c;
   public void setSecure(boolean bool) { }
   void foo() {
-    setSecure(false); // Noncompliant
+    setSecure(false); // FN (to avoid implementation complexity)
   }
+  Date d = new Date();
   void bar(boolean x) {
     setSecure(x);
   }
   void baz() {
     setSecure(true);
+    return; // code coverage
+  }
+  Date codeCoverage(Cookie cookie) {
+    A a = new A();
+    a.foo(cookie);
+    Date d1 = new Date();
+    Date d2;
+    d2 = d1;
+    d2 = new Date();
+    d = d1;
+    d = new Date();
+    new Date() = new Date();
+    return new Date();
   }
-}
\ No newline at end of file
+}
diff --git a/java-checks/src/test/java/org/sonar/java/checks/security/SecureCookieCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/security/SecureCookieCheckTest.java
index 36e225a163..ade179099b 100755
--- a/java-checks/src/test/java/org/sonar/java/checks/security/SecureCookieCheckTest.java
+++ b/java-checks/src/test/java/org/sonar/java/checks/security/SecureCookieCheckTest.java
@@ -27,5 +27,6 @@
   @Test
   public void test() {
     JavaCheckVerifier.verify("src/test/files/checks/security/SecureCookieCheck.java", new SecureCookieCheck());
+    JavaCheckVerifier.verifyNoIssueWithoutSemantic("src/test/files/checks/security/SecureCookieCheck.java", new SecureCookieCheck());
   }
 }
