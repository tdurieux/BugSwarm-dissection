diff --git a/src/main/java/de/thm/arsnova/config/SecurityConfig.java b/src/main/java/de/thm/arsnova/config/SecurityConfig.java
index cbb810fddc..63a018f2e1 100755
--- a/src/main/java/de/thm/arsnova/config/SecurityConfig.java
+++ b/src/main/java/de/thm/arsnova/config/SecurityConfig.java
@@ -23,6 +23,8 @@
 import de.thm.arsnova.security.LoginAuthenticationSucessHandler;
 import de.thm.arsnova.security.CustomLdapUserDetailsMapper;
 import de.thm.arsnova.security.RegisteredUserDetailsService;
+import de.thm.arsnova.security.jwt.JwtAuthenticationProvider;
+import de.thm.arsnova.security.jwt.JwtTokenFilter;
 import de.thm.arsnova.security.pac4j.OauthCallbackFilter;
 import de.thm.arsnova.security.pac4j.OauthAuthenticationProvider;
 import org.jasig.cas.client.validation.Cas20ProxyTicketValidator;
@@ -53,6 +55,7 @@
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.core.session.SessionRegistry;
 import org.springframework.security.core.session.SessionRegistryImpl;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
@@ -67,6 +70,7 @@
 import org.springframework.security.ldap.userdetails.LdapUserDetailsMapper;
 import org.springframework.security.web.AuthenticationEntryPoint;
 import org.springframework.security.web.authentication.Http403ForbiddenEntryPoint;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 import org.springframework.security.web.authentication.logout.LogoutFilter;
 import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
 import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
@@ -132,11 +136,13 @@ private void init() {
 
 	@Override
 	protected void configure(HttpSecurity http) throws Exception {
+		http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
 		http.exceptionHandling().authenticationEntryPoint(restAuthenticationEntryPoint());
 		http.csrf().disable();
 		http.headers()
 			.addHeaderWriter(new HstsHeaderWriter(false));
 
+		http.addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
 		if (casEnabled) {
 			http.addFilter(casAuthenticationFilter());
 			http.addFilter(casLogoutFilter());
@@ -150,6 +156,7 @@ protected void configure(HttpSecurity http) throws Exception {
 	@Override
 	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
 		List<String> providers = new ArrayList<>();
+		auth.authenticationProvider(jwtAuthenticationProvider());
 		if (ldapEnabled) {
 			providers.add("ldap");
 			auth.authenticationProvider(ldapAuthenticationProvider());
@@ -200,6 +207,17 @@ public static AuthenticationEntryPoint restAuthenticationEntryPoint() {
 		return new Http403ForbiddenEntryPoint();
 	}
 
+	@Bean
+	public JwtAuthenticationProvider jwtAuthenticationProvider() {
+		return new JwtAuthenticationProvider();
+	}
+
+	@Bean
+	public JwtTokenFilter jwtTokenFilter() throws Exception {
+		JwtTokenFilter jwtTokenFilter = new JwtTokenFilter();
+		return jwtTokenFilter;
+	}
+
 	@Bean
 	LoginAuthenticationSucessHandler successHandler() {
 		final LoginAuthenticationSucessHandler successHandler = new LoginAuthenticationSucessHandler();
diff --git a/src/main/java/de/thm/arsnova/controller/AuthenticationController.java b/src/main/java/de/thm/arsnova/controller/AuthenticationController.java
index 5fe60e8c53..2b11b73800 100755
--- a/src/main/java/de/thm/arsnova/controller/AuthenticationController.java
+++ b/src/main/java/de/thm/arsnova/controller/AuthenticationController.java
@@ -1,12 +1,13 @@
 package de.thm.arsnova.controller;
 
 import de.thm.arsnova.entities.ClientAuthentication;
+import de.thm.arsnova.entities.LoginCredentials;
 import de.thm.arsnova.entities.UserProfile;
 import de.thm.arsnova.services.UserService;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
@@ -18,17 +19,15 @@ public AuthenticationController(final UserService userService) {
 		this.userService = userService;
 	}
 
-	@PostMapping("/login/guest")
-	public ClientAuthentication loginGuest(@RequestParam final String token) {
-		userService.authenticate(new UsernamePasswordAuthenticationToken(token, null),
-				UserProfile.AuthProvider.ARSNOVA_GUEST);
+	@PostMapping("/login")
+	public ClientAuthentication login() {
 		return userService.getCurrentClientAuthentication();
 	}
 
 	@PostMapping("/login/registered")
-	public ClientAuthentication loginRegistered(@RequestParam final String username, @RequestParam final String password) {
-		final String loginId = username.toLowerCase();
-		userService.authenticate(new UsernamePasswordAuthenticationToken(loginId, password),
+	public ClientAuthentication loginRegistered(@RequestBody LoginCredentials loginCredentials) {
+		final String loginId = loginCredentials.getLoginId().toLowerCase();
+		userService.authenticate(new UsernamePasswordAuthenticationToken(loginId, loginCredentials.getPassword()),
 				UserProfile.AuthProvider.ARSNOVA);
 		return userService.getCurrentClientAuthentication();
 	}
diff --git a/src/main/java/de/thm/arsnova/controller/ControllerExceptionHandler.java b/src/main/java/de/thm/arsnova/controller/ControllerExceptionHandler.java
index 31d43c4cbf..d6223f7a7b 100755
--- a/src/main/java/de/thm/arsnova/controller/ControllerExceptionHandler.java
+++ b/src/main/java/de/thm/arsnova/controller/ControllerExceptionHandler.java
@@ -25,6 +25,7 @@
 import de.thm.arsnova.exceptions.PayloadTooLargeException;
 import de.thm.arsnova.exceptions.PreconditionFailedException;
 import de.thm.arsnova.exceptions.UnauthorizedException;
+import org.ektorp.DocumentNotFoundException;
 import org.slf4j.event.Level;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.converter.HttpMessageNotReadableException;
@@ -33,12 +34,14 @@
 import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.HttpRequestMethodNotSupportedException;
 import org.springframework.web.bind.annotation.ControllerAdvice;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseBody;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.servlet.NoHandlerFoundException;
 
+import javax.naming.OperationNotSupportedException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.util.Map;
@@ -109,7 +112,7 @@
 		return handleException(e, Level.DEBUG);
 	}
 
-	@ExceptionHandler(BadRequestException.class)
+	@ExceptionHandler({BadRequestException.class, HttpRequestMethodNotSupportedException.class})
 	@ResponseBody
 	@ResponseStatus(HttpStatus.BAD_REQUEST)
 	public Map<String, Object> handleBadRequestException(final Exception e, final HttpServletRequest request) {
@@ -123,7 +126,7 @@
 		return handleException(e, Level.DEBUG);
 	}
 
-	@ExceptionHandler(NotImplementedException.class)
+	@ExceptionHandler({NotImplementedException.class, OperationNotSupportedException.class})
 	@ResponseBody
 	@ResponseStatus(HttpStatus.NOT_IMPLEMENTED)
 	public Map<String, Object> handleNotImplementedException(final Exception e, final HttpServletRequest request) {
@@ -143,4 +146,12 @@
 	public Map<String, Object> handleHttpMessageNotReadableException(final Exception e, final HttpServletRequest request) {
 		return handleException(e, Level.DEBUG);
 	}
+
+	/* FIXME: Wrap persistance Exceptions - do not handle persistance Exceptions at the controller layer */
+	@ExceptionHandler(DocumentNotFoundException.class)
+	@ResponseBody
+	@ResponseStatus(HttpStatus.NOT_FOUND)
+	public Map<String, Object> handleDocumentNotFoundException(final Exception e, final HttpServletRequest request) {
+		return handleException(e, Level.TRACE);
+	}
 }
diff --git a/src/main/java/de/thm/arsnova/controller/UserController.java b/src/main/java/de/thm/arsnova/controller/UserController.java
new file mode 100755
index 0000000000..befbc3f780
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/controller/UserController.java
@@ -0,0 +1,23 @@
+package de.thm.arsnova.controller;
+
+import de.thm.arsnova.entities.LoginCredentials;
+import de.thm.arsnova.services.UserService;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/user")
+public class UserController {
+	private UserService userService;
+
+	public UserController(final UserService userService) {
+		this.userService = userService;
+	}
+
+	@PostMapping("/register")
+	public void register(@RequestBody LoginCredentials loginCredentials) {
+		userService.create(loginCredentials.getLoginId(), loginCredentials.getPassword());
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/entities/LoginCredentials.java b/src/main/java/de/thm/arsnova/entities/LoginCredentials.java
new file mode 100755
index 0000000000..9d86bc9471
--- /dev/null
+++ b/src/main/java/de/thm/arsnova/entities/LoginCredentials.java
@@ -0,0 +1,27 @@
+package de.thm.arsnova.entities;
+
+import com.fasterxml.jackson.annotation.JsonView;
+import de.thm.arsnova.entities.serialization.View;
+
+public class LoginCredentials {
+	private String loginId;
+	private String password;
+
+	public String getLoginId() {
+		return loginId;
+	}
+
+	@JsonView(View.Public.class)
+	public void setLoginId(final String loginId) {
+		this.loginId = loginId;
+	}
+
+	public String getPassword() {
+		return password;
+	}
+
+	@JsonView(View.Public.class)
+	public void setPassword(final String password) {
+		this.password = password;
+	}
+}
diff --git a/src/main/java/de/thm/arsnova/security/jwt/JwtAuthenticationProvider.java b/src/main/java/de/thm/arsnova/security/jwt/JwtAuthenticationProvider.java
index ac7d51b463..569a4df5f4 100755
--- a/src/main/java/de/thm/arsnova/security/jwt/JwtAuthenticationProvider.java
+++ b/src/main/java/de/thm/arsnova/security/jwt/JwtAuthenticationProvider.java
@@ -1,6 +1,7 @@
 package de.thm.arsnova.security.jwt;
 
 import de.thm.arsnova.security.User;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.AuthenticationException;
@@ -8,10 +9,6 @@
 public class JwtAuthenticationProvider implements AuthenticationProvider {
 	private JwtService jwtService;
 
-	public JwtAuthenticationProvider(final JwtService jwtService) {
-		this.jwtService = jwtService;
-	}
-
 	@Override
 	public Authentication authenticate(final Authentication authentication) throws AuthenticationException {
 		final String token = (String) authentication.getCredentials();
@@ -24,4 +21,9 @@ public Authentication authenticate(final Authentication authentication) throws A
 	public boolean supports(final Class<?> aClass) {
 		return JwtToken.class.isAssignableFrom(aClass);
 	}
+
+	@Autowired
+	public void setJwtService(final JwtService jwtService) {
+		this.jwtService = jwtService;
+	}
 }
diff --git a/src/main/java/de/thm/arsnova/security/jwt/JwtService.java b/src/main/java/de/thm/arsnova/security/jwt/JwtService.java
index f1620aaee8..ee5bb47fff 100755
--- a/src/main/java/de/thm/arsnova/security/jwt/JwtService.java
+++ b/src/main/java/de/thm/arsnova/security/jwt/JwtService.java
@@ -71,6 +71,6 @@ public User verifyToken(final String token) {
 		final Collection<GrantedAuthority> authorities = decodedJwt.getClaim(ROLES_CLAIM_NAME).asList(String.class).stream()
 				.map(role -> new SimpleGrantedAuthority(ROLE_PREFIX + role)).collect(Collectors.toList());
 
-		return new User(userService.get(userId), authorities);
+		return userService.loadUser(userId, authorities);
 	}
 }
diff --git a/src/main/java/de/thm/arsnova/security/jwt/JwtToken.java b/src/main/java/de/thm/arsnova/security/jwt/JwtToken.java
index f7ce5cea3d..ecce14b5be 100755
--- a/src/main/java/de/thm/arsnova/security/jwt/JwtToken.java
+++ b/src/main/java/de/thm/arsnova/security/jwt/JwtToken.java
@@ -16,6 +16,7 @@ public JwtToken(final String token, final User principal,
 		super(grantedAuthorities);
 		this.token = token;
 		this.principal = principal;
+		setAuthenticated(!grantedAuthorities.isEmpty());
 	}
 
 	public JwtToken(final String token) {
diff --git a/src/main/java/de/thm/arsnova/security/jwt/JwtTokenFilter.java b/src/main/java/de/thm/arsnova/security/jwt/JwtTokenFilter.java
index 282a3c16b8..f8c5e2e062 100755
--- a/src/main/java/de/thm/arsnova/security/jwt/JwtTokenFilter.java
+++ b/src/main/java/de/thm/arsnova/security/jwt/JwtTokenFilter.java
@@ -1,29 +1,50 @@
 package de.thm.arsnova.security.jwt;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.security.core.Authentication;
-import org.springframework.security.core.AuthenticationException;
-import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
-import org.springframework.security.web.authentication.preauth.PreAuthenticatedCredentialsNotFoundException;
-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.stereotype.Component;
+import org.springframework.web.filter.GenericFilterBean;
 
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
 
-public class JwtTokenFilter extends AbstractAuthenticationProcessingFilter {
+@Component
+public class JwtTokenFilter extends GenericFilterBean {
 	private static final String JWT_HEADER_NAME = "Arsnova-Auth-Token";
-
-	protected JwtTokenFilter() {
-		super(new AntPathRequestMatcher("/**"));
-	}
+	private static final Logger logger = LoggerFactory.getLogger(JwtTokenFilter.class);
+	private JwtAuthenticationProvider jwtAuthenticationProvider;
 
 	@Override
-	public Authentication attemptAuthentication(final HttpServletRequest httpServletRequest, final HttpServletResponse httpServletResponse) throws AuthenticationException {
-		String jwtHeader = httpServletRequest.getHeader(JWT_HEADER_NAME);
-		if (jwtHeader == null) {
-			throw new PreAuthenticatedCredentialsNotFoundException("No authentication header present.");
+	public void doFilter(final ServletRequest servletRequest, final ServletResponse servletResponse, final FilterChain filterChain) throws IOException, ServletException {
+		String jwtHeader = ((HttpServletRequest) servletRequest).getHeader(JWT_HEADER_NAME);
+		if (jwtHeader != null) {
+			JwtToken token = new JwtToken(jwtHeader);
+			try {
+				Authentication authenticatedToken = jwtAuthenticationProvider.authenticate(token);
+				if (authenticatedToken != null) {
+					logger.debug("Storing JWT to SecurityContext: {}", authenticatedToken);
+					SecurityContextHolder.getContext().setAuthentication(authenticatedToken);
+				} else {
+					logger.debug("Could not authenticate JWT.");
+				}
+			} catch (final Exception e) {
+				logger.debug("JWT authentication failed", e);
+			}
+		} else {
+			logger.debug("No authentication header present.");
 		}
-		JwtToken token = new JwtToken(jwtHeader);
+		filterChain.doFilter(servletRequest, servletResponse);
+	}
 
-		return getAuthenticationManager().authenticate(token);
+	@Autowired
+	public void setJwtAuthenticationProvider(final JwtAuthenticationProvider jwtAuthenticationProvider) {
+		this.jwtAuthenticationProvider = jwtAuthenticationProvider;
 	}
 }
diff --git a/src/main/java/de/thm/arsnova/services/UserService.java b/src/main/java/de/thm/arsnova/services/UserService.java
index e53f57227e..7e088ef6c1 100755
--- a/src/main/java/de/thm/arsnova/services/UserService.java
+++ b/src/main/java/de/thm/arsnova/services/UserService.java
@@ -71,6 +71,8 @@
 	User loadUser(UserProfile.AuthProvider authProvider, String loginId,
 			Collection<GrantedAuthority> grantedAuthorities, boolean autoCreate) throws UsernameNotFoundException;
 
+	User loadUser(String userId, Collection<GrantedAuthority> grantedAuthorities);
+
 	UserProfile getByAuthProviderAndLoginId(UserProfile.AuthProvider authProvider, String loginId);
 
 	UserProfile getByUsername(String username);
diff --git a/src/main/java/de/thm/arsnova/services/UserServiceImpl.java b/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
index 93fe119e0f..38d28a62c3 100755
--- a/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
+++ b/src/main/java/de/thm/arsnova/services/UserServiceImpl.java
@@ -227,7 +227,7 @@ public ClientAuthentication getCurrentUser() {
 
 		de.thm.arsnova.entities.ClientAuthentication clientAuthentication =
 				new de.thm.arsnova.entities.ClientAuthentication(user.getId(), user.getUsername(),
-						user.getAuthProvider(), user.getToken());
+						user.getAuthProvider(), jwt);
 
 		return clientAuthentication;
 	}
@@ -393,6 +393,18 @@ public User loadUser(final UserProfile.AuthProvider authProvider, final String l
 		return new User(userProfile, grantedAuthorities);
 	}
 
+	@Override
+	public User loadUser(final String userId, final Collection<GrantedAuthority> grantedAuthorities)
+			throws UsernameNotFoundException {
+		logger.debug("Load user: UserId: {}", userId);
+		UserProfile userProfile = userRepository.findOne(userId);
+		if (userProfile == null) {
+			throw new UsernameNotFoundException("User does not exist.");
+		}
+
+		return new User(userProfile, grantedAuthorities);
+	}
+
 	@Override
 	public UserProfile getByAuthProviderAndLoginId(final UserProfile.AuthProvider authProvider, final String loginId) {
 		return userRepository.findByAuthProviderAndLoginId(authProvider, loginId);
diff --git a/src/test/java/de/thm/arsnova/services/StubUserService.java b/src/test/java/de/thm/arsnova/services/StubUserService.java
index 0bfe0823fe..5a53c66044 100755
--- a/src/test/java/de/thm/arsnova/services/StubUserService.java
+++ b/src/test/java/de/thm/arsnova/services/StubUserService.java
@@ -41,7 +41,7 @@ public StubUserService(
 			UserRepository repository,
 			JavaMailSender mailSender,
 			@Qualifier("defaultJsonMessageConverter") MappingJackson2HttpMessageConverter jackson2HttpMessageConverter) {
-		super(repository, null, mailSender, jackson2HttpMessageConverter);
+		super(repository, mailSender, jackson2HttpMessageConverter);
 		grantedAuthorities = new HashSet<>();
 		grantedAuthorities.add(new SimpleGrantedAuthority("ROLE_USER"));
 	}
