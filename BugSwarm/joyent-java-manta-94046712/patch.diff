diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/MantaJobPhase.java b/java-manta-client/src/main/java/com/joyent/manta/client/MantaJobPhase.java
index 54f9ec60c6..f26f36567c 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/MantaJobPhase.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/MantaJobPhase.java
@@ -10,101 +10,218 @@
 
 /**
  * Class representing either a map or a reduce phase of a Manta Job.
+ *
  * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
  */
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class MantaJobPhase {
+    /**
+     * List of Manta objects to include in job as assets.
+     */
     private List<String> assets;
+
+    /**
+     * Command to execute as job phase.
+     */
     private String exec;
+
+    /**
+     * Phase type - either "map" or "reduce".
+     */
     private String type;
+
+    /**
+     * Initial command to execute before exec command is executed.
+     */
     private String init;
+
+    /**
+     * An optional number of reducers for this phase (reduce-only).
+     */
     private Integer count;
-    private Integer memory;
-    private Integer disk;
 
-    public MantaJobPhase() {
+    /**
+     * An optional amount of DRAM to give to your compute zone (MB).
+     */
+    private Integer memory;
 
-    }
+    /**
+     * An optional amount of disk space to give to your compute zone (GB).
+     */
+    private Integer disk;
 
 
-    public MantaJobPhase(String exec, String type) {
-        this.exec = exec;
-        this.type = type;
+    /**
+     * Constructor used when creating a phase for starting a new job.
+     * Use the fluent setters to set properties.
+     */
+    public MantaJobPhase() {
     }
 
 
+    /**
+     * @return command to execute as job phase
+     */
     public String getExec() {
         return exec;
     }
 
 
-    public void setExec(String exec) {
+    /**
+     * @param exec command to execute as job phase
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setExec(final String exec) {
         this.exec = exec;
+        return this;
     }
 
 
+    /**
+     * @return Phase type - either "map" or "reduce"
+     */
     public String getType() {
         return type;
     }
 
 
-    public void setType(String type) {
+    /**
+     * @param type phase type - either "map" or "reduce"
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setType(final String type) {
+        Objects.requireNonNull(type, "Type must be present");
+
+        if (!(type.equals("map") || type.equals("reduce"))) {
+            throw new IllegalArgumentException("Type must equal map or reduce");
+        }
+
         this.type = type;
+        return this;
     }
 
 
+    /**
+     * @return list of Manta objects to include in job as assets
+     */
     public List<String> getAssets() {
         return assets;
     }
 
-    public void setAssets(List<String> assets) {
+
+    /**
+     * @param assets list of Manta objects to include in job as assets
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setAssets(final List<String> assets) {
         this.assets = assets;
+        return this;
     }
 
+    /**
+     * @return initial command to execute before exec command is executed
+     */
     public String getInit() {
         return init;
     }
 
-    public void setInit(String init) {
+
+    /**
+     * @param init initial command to execute before exec command is executed
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setInit(final String init) {
         this.init = init;
+        return this;
     }
 
+
+    /**
+     * @return an optional number of reducers for this phase (reduce-only)
+     */
     public Integer getCount() {
         return count;
     }
 
-    public void setCount(Integer count) {
+
+    /**
+     * @param count an optional number of reducers for this phase (reduce-only)
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setCount(final Integer count) {
+        if (getType() != null && !getType().equals("reduce")) {
+            throw new IllegalArgumentException("Count can only be set for the reduce phase");
+        }
+
+        if (count != null && count < 1) {
+            throw new IllegalArgumentException("Count must be null or greater than 1");
+        }
+
         this.count = count;
+        return this;
     }
 
+
+    /**
+     * @return an optional amount of DRAM to give to your compute zone (MB)
+     */
     public Integer getMemory() {
         return memory;
     }
 
-    public void setMemory(Integer memory) {
+
+    /**
+     * @param memory an optional amount of DRAM to give to your compute zone (MB)
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setMemory(final Integer memory) {
+        if (memory != null && memory < 1) {
+            throw new IllegalArgumentException("Count must be null or greater than 1");
+        }
+
         this.memory = memory;
+        return this;
     }
 
+
+    /**
+     * @return an optional amount of disk space to give to your compute zone (GB)
+     */
     public Integer getDisk() {
         return disk;
     }
 
-    public void setDisk(Integer disk) {
+
+    /**
+     * @param disk an optional amount of disk space to give to your compute zone (GB)
+     * @return reference to the current instance
+     */
+    public MantaJobPhase setDisk(final Integer disk) {
+        if (disk != null && disk < 1) {
+            throw new IllegalArgumentException("Count must be null or greater than 1");
+        }
+
         this.disk = disk;
+        return this;
     }
 
+
     @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        MantaJobPhase that = (MantaJobPhase) o;
-        return Objects.equals(assets, that.assets) &&
-                Objects.equals(exec, that.exec) &&
-                Objects.equals(type, that.type) &&
-                Objects.equals(init, that.init) &&
-                Objects.equals(count, that.count) &&
-                Objects.equals(memory, that.memory) &&
-                Objects.equals(disk, that.disk);
+    public boolean equals(final Object other) {
+        if (this == other) {
+            return true;
+        }
+        if (other == null || getClass() != other.getClass()) {
+            return false;
+        }
+        MantaJobPhase that = (MantaJobPhase) other;
+        return Objects.equals(assets, that.assets)
+                && Objects.equals(exec, that.exec)
+                && Objects.equals(type, that.type)
+                && Objects.equals(init, that.init)
+                && Objects.equals(count, that.count)
+                && Objects.equals(memory, that.memory)
+                && Objects.equals(disk, that.disk);
     }
 
     @Override
@@ -112,16 +229,18 @@ public int hashCode() {
         return Objects.hash(assets, exec, type, init, count, memory, disk);
     }
 
+
     @Override
     public String toString() {
-        return "MantaJobPhase{" +
-                "assets=" + assets +
-                ", exec='" + exec + '\'' +
-                ", type='" + type + '\'' +
-                ", init='" + init + '\'' +
-                ", count=" + count +
-                ", memory=" + memory +
-                ", disk=" + disk +
-                '}';
+        final StringBuilder sb = new StringBuilder("MantaJobPhase{");
+        sb.append("assets=").append(assets);
+        sb.append(", exec='").append(exec).append('\'');
+        sb.append(", type='").append(type).append('\'');
+        sb.append(", init='").append(init).append('\'');
+        sb.append(", count=").append(count);
+        sb.append(", memory=").append(memory);
+        sb.append(", disk=").append(disk);
+        sb.append('}');
+        return sb.toString();
     }
 }
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/MantaObjectParser.java b/java-manta-client/src/main/java/com/joyent/manta/client/MantaObjectParser.java
index 54e83ae400..39bf1ec681 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/MantaObjectParser.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/MantaObjectParser.java
@@ -1,8 +1,12 @@
+/**
+ * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ */
 package com.joyent.manta.client;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.core.type.TypeReference;
-import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import com.google.api.client.util.ObjectParser;
 
@@ -13,9 +17,16 @@
 import java.nio.charset.Charset;
 
 /**
+ * {@link ObjectParser} implementation that uses Jackson data binding. This
+ * is very useful because Jackson core doesn't provide much flexibility
+ * when de/serializing many different data types.
+ *
  * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
  */
 public class MantaObjectParser implements ObjectParser {
+    /**
+     * Jackson data binding mapper instance.
+     */
     public static final ObjectMapper MAPPER;
 
     static {
@@ -31,8 +42,8 @@
     }
 
     @Override
-    public <T> T parseAndClose(InputStream in, Charset charset,
-                               Class<T> dataClass) throws IOException {
+    public <T> T parseAndClose(final InputStream in, final Charset charset,
+                               final Class<T> dataClass) throws IOException {
         try {
             return MAPPER.readValue(in, dataClass);
         } finally {
@@ -41,8 +52,8 @@
     }
 
     @Override
-    public Object parseAndClose(InputStream in, Charset charset,
-                                Type dataType) throws IOException {
+    public Object parseAndClose(final InputStream in, final Charset charset,
+                                final Type dataType) throws IOException {
         try {
             final Class clazz = Class.forName(dataType.getTypeName());
             return MAPPER.readValue(in, clazz);
@@ -56,7 +67,7 @@ public Object parseAndClose(InputStream in, Charset charset,
     }
 
     @Override
-    public <T> T parseAndClose(Reader reader, Class<T> dataClass)
+    public <T> T parseAndClose(final Reader reader, final Class<T> dataClass)
             throws IOException {
         try {
             return MAPPER.readValue(reader, dataClass);
@@ -66,7 +77,7 @@ public Object parseAndClose(InputStream in, Charset charset,
     }
 
     @Override
-    public Object parseAndClose(Reader reader, Type dataType)
+    public Object parseAndClose(final Reader reader, final Type dataType)
             throws IOException {
         try {
             final Class clazz = Class.forName(dataType.getTypeName());
diff --git a/java-manta-client/src/main/java/com/joyent/manta/client/StringIteratorHttpContent.java b/java-manta-client/src/main/java/com/joyent/manta/client/StringIteratorHttpContent.java
index b25a76949f..b1f467a511 100755
--- a/java-manta-client/src/main/java/com/joyent/manta/client/StringIteratorHttpContent.java
+++ b/java-manta-client/src/main/java/com/joyent/manta/client/StringIteratorHttpContent.java
@@ -12,15 +12,40 @@
 import java.util.stream.Stream;
 
 /**
+ * Implementation of {@link HttpContent} that allows for the real-time streaming
+ * of data from an iterator or a Java 8 stream to an {@link OutputStream} that
+ * is connected to HTTP content.
+ *
  * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
  */
 public class StringIteratorHttpContent implements HttpContent {
+    /**
+     * Iterator containing lines to stream into content.
+     */
     private final Iterator<String> iterator;
+
+    /**
+     * Java 8 stream containing lines to stream into content.
+     */
     private final Stream<String> stream;
+
+    /**
+     * Content (mime) type associated with content.
+     */
     private final String contentType;
+
+    /**
+     * Total bytes of content. Defaults to -1 before content is written.
+     */
     private volatile long length = -1L;
 
 
+    /**
+     * Create a new instance based on a {@link Iterator} of strings.
+     *
+     * @param iterator iterator of strings for each line
+     * @param contentType content (mime) type associated with content
+     */
     public StringIteratorHttpContent(final Iterator<String> iterator,
                                      final String contentType) {
         this.iterator = iterator;
@@ -29,6 +54,12 @@ public StringIteratorHttpContent(final Iterator<String> iterator,
     }
 
 
+    /**
+     * Create a new instance based on a {@link Stream} of strings.
+     *
+     * @param stream stream of strings for each line
+     * @param contentType content (mime) type associated with content
+     */
     public StringIteratorHttpContent(final Stream<String> stream,
                                      final String contentType) {
         this.stream = stream;
@@ -56,7 +87,7 @@ public boolean retrySupported() {
 
 
     @Override
-    public void writeTo(OutputStream out) throws IOException {
+    public void writeTo(final OutputStream out) throws IOException {
         try {
             if (iterator != null) {
                 writeIterator(out);
@@ -69,7 +100,14 @@ public void writeTo(OutputStream out) throws IOException {
     }
 
 
-    protected void writeIterator(OutputStream out) throws IOException {
+    /**
+     * Write all of the strings in the stored iterator to the passed
+     * {@link OutputStream}.
+     *
+     * @param out output to write to
+     * @throws IOException thrown when we can't write
+     */
+    protected void writeIterator(final OutputStream out) throws IOException {
         Objects.requireNonNull(iterator, "Iterator must be present");
 
         // Start length at zero because it is set to -1 by default
@@ -89,7 +127,14 @@ protected void writeIterator(OutputStream out) throws IOException {
     }
 
 
-    protected void writeStream(OutputStream out) throws IOException {
+    /**
+     * Write all of the strings in the stored stream to the passed
+     * {@link OutputStream}.
+     *
+     * @param out output to write to
+     * @throws IOException thrown when we can't write
+     */
+    protected void writeStream(final OutputStream out) throws IOException {
         Objects.requireNonNull(stream, "Stream must be present");
 
         // Start length at zero because it is set to -1 by default
@@ -116,11 +161,23 @@ protected void writeStream(OutputStream out) throws IOException {
     }
 
 
+    /**
+     * Inner exception class for handling the wrapping of {@link IOException}
+     * when processing Java 8 streams.
+     */
     protected static class StreamIOException extends RuntimeException {
-        public StreamIOException(Throwable cause) {
+        /**
+         * Create an instance that wraps the passed cause.
+         *
+         * @param cause {@link IOException} to wrap
+         */
+        public StreamIOException(final Throwable cause) {
             super(cause);
         }
 
+        /**
+         * @return the wrapped exception as a {@link IOException}
+         */
         @SuppressWarnings("unchecked")
         IOException getIOCause() {
             return (IOException)getCause();
diff --git a/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobPhaseTest.java b/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobPhaseTest.java
new file mode 100755
index 0000000000..aac0f66c13
--- /dev/null
+++ b/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobPhaseTest.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ */
+package com.joyent.manta.client;
+
+import org.testng.annotations.Test;
+
+/**
+ * Tests the behavior of the validations and accessors of {@link MantaJobPhase}
+ * instance.
+ *
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ */
+public class MantaJobPhaseTest {
+
+    @Test
+    public void canCreateMapPhase() {
+        new MantaJobPhase().setType("map");
+    }
+
+    @Test
+    public void canCreateReducePhase() {
+        new MantaJobPhase().setType("reduce");
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void cantCreateUnknownPhase() {
+        new MantaJobPhase().setType("anything else");
+    }
+
+    @Test
+    public void canSetCountForReduce() {
+        new MantaJobPhase()
+                .setType("reduce")
+                .setCount(2);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void cantSetCountForMapPhase() {
+        new MantaJobPhase()
+                .setType("map")
+                .setCount(2);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void cantSetBadCountValue() {
+        new MantaJobPhase()
+                .setCount(0);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void cantSetBadMemoryValue() {
+        new MantaJobPhase()
+                .setMemory(0);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void cantSetBadDiskValue() {
+        new MantaJobPhase()
+                .setDisk(0);
+    }
+}
diff --git a/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobTest.java b/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobTest.java
new file mode 100755
index 0000000000..cf30ed812e
--- /dev/null
+++ b/java-manta-client/src/test/java/com/joyent/manta/client/MantaJobTest.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright (c) 2015, Joyent, Inc. All rights reserved.
+ */
+package com.joyent.manta.client;
+
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Tests the behavior of the validations and accessors of {@link MantaJob}
+ * instance.
+ *
+ * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
+ */
+public class MantaJobTest {
+    @Test
+    public void canGetMapPhases() {
+        MantaJobPhase phase1 = new MantaJobPhase().setType("map").setExec("echo 1");
+        MantaJobPhase phase2 = new MantaJobPhase().setType("map").setExec("echo 2");
+        MantaJobPhase phase3 = new MantaJobPhase().setType("reduce").setExec("echo 3");
+        List<MantaJobPhase> phases = new ArrayList<>();
+        phases.add(phase1);
+        phases.add(phase2);
+        phases.add(phase3);
+
+        MantaJob job = new MantaJob("test job", phases);
+
+        List<MantaJobPhase> mapPhases = job.getMapPhases();
+
+        Assert.assertEquals(mapPhases.get(0), phase1);
+        Assert.assertEquals(mapPhases.get(1), phase2);
+    }
+
+    @Test
+    public void canGetReducePhases() {
+        MantaJobPhase phase1 = new MantaJobPhase().setType("map").setExec("echo 1");
+        MantaJobPhase phase2 = new MantaJobPhase().setType("map").setExec("echo 2");
+        MantaJobPhase phase3 = new MantaJobPhase().setType("reduce").setExec("echo 3");
+        MantaJobPhase phase4 = new MantaJobPhase().setType("reduce").setExec("echo 4");
+
+        List<MantaJobPhase> phases = new ArrayList<>();
+        phases.add(phase1);
+        phases.add(phase2);
+        phases.add(phase3);
+        phases.add(phase4);
+
+        MantaJob job = new MantaJob("test job", phases);
+
+        List<MantaJobPhase> reducePhases = job.getReducePhases();
+
+        Assert.assertEquals(reducePhases.get(0), phase3);
+        Assert.assertEquals(reducePhases.get(1), phase4);
+    }
+}
diff --git a/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java b/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
index 49a7669696..e436502f34 100755
--- a/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
+++ b/java-manta-it/src/test/java/com/joyent/manta/client/MantaClientJobIT.java
@@ -124,7 +124,7 @@ public void cancelJob() throws IOException {
 
 
     @Test(dependsOnMethods = { "createJob" })
-    public void canAddAndGetInputs() throws IOException {
+    public void canAddAndGetInputsFromIterator() throws IOException {
         MantaJob job = buildJob();
         UUID jobId = mantaClient.createJob(job);
 
@@ -144,11 +144,32 @@ public void canAddAndGetInputs() throws IOException {
         }
     }
 
+    @Test(dependsOnMethods = { "createJob" })
+    public void canAddAndGetInputsFromStream() throws IOException {
+        MantaJob job = buildJob();
+        UUID jobId = mantaClient.createJob(job);
+
+        List<String> inputs = new ArrayList<>();
+        String objPath = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
+        mantaClient.put(objPath, TEST_DATA);
+        inputs.add(objPath);
+
+        try {
+            mantaClient.addJobInputs(jobId, inputs.stream());
+            boolean ended = mantaClient.endJobInput(jobId);
+            Assert.assertTrue(ended, "Ending input wasn't accepted");
+            List<String> inputsResponse = mantaClient.getJobInputs(jobId);
+            Assert.assertEquals(inputsResponse, inputs);
+        } finally {
+            mantaClient.cancelJob(jobId);
+        }
+    }
+
     private MantaJob buildJob() {
         List<MantaJobPhase> phases = new ArrayList<>();
-        MantaJobPhase map = new MantaJobPhase();
-        map.setType("map");
-        map.setExec("echo 'Hello World'");
+        MantaJobPhase map = new MantaJobPhase()
+            .setType("map")
+            .setExec("echo 'Hello World'");
         phases.add(map);
 
         String name = String.format("integration_test_%d", count.incrementAndGet());
