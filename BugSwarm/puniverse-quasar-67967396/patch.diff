diff --git a/build.gradle b/build.gradle
index 969efdc7b9..a956efe966 100755
--- a/build.gradle
+++ b/build.gradle
@@ -127,7 +127,7 @@ subprojects {
     //    }
 
     compileJava.dependsOn processResources
-    classes {
+    compileJava {
         doLast {
             scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtime])
         }
@@ -442,17 +442,47 @@ project (':quasar-core') {
     }
 
     ssets.each { set ->
-        configure(project.tasks["${set.name}Classes"]) {
+        configure(project.tasks["compile${capitalize(set.name)}Java"]) {
             doLast {
                 rootProject.scanAndInstrument(set, [configurations["${set.name}Runtime"], configurations.provided, configurations.runtime])
             }
         }
 
-        def jarTask = task("${set.name}Jar", type: Jar) {
+//        def jarTask = task("${set.name}Jar", type: Jar) {
+//            from set.output
+//            from zipTree("${baselib}/high-scale-lib.jar")  // include non-Maven jars
+//            exclude 'META-INF/INDEX.LIST'
+//
+//            manifest {
+//                attributes(
+//	            "Built-By"                  :   System.getProperty("user.name"),
+//	            "Implementation-Title"      :   project.name,
+//	            "Implementation-Version"    :   version,
+//	            "Implementation-Vendor"     :   vendor,
+//	            "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
+//                    "Agent-Class"               :   "co.paralleluniverse.fibers.instrument.JavaAgent",
+//	            "Can-Retransform-Classes"   :   "true",
+//                    "Can-Redefine-Classes"      :   "true",
+//                    //  "Class-Path"                :   configurations.runtime.collect { "lib/"+it.getName() }.join(',')
+//                )
+//            }
+//        }
+
+        def shadowJarTask = task("${set.name}ShadowJar", type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar, dependsOn: classes) {
+            classifier = '' // overwrite jar
+            destinationDir = file("$buildDir/libs")
+
             from set.output
-            from zipTree("${baselib}/high-scale-lib.jar")  // include non-Maven jars
+
+            configurations = [project.configurations.runtime, project.configurations["${set.name}Runtime"]]
+            dependencies {
+                include(dependency('org.ow2.asm:.*:.*'))
+                include(dependency(':high-scale-lib'))
+            }
             exclude 'META-INF/INDEX.LIST'
 
+            relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'
+
             manifest {
                 attributes(
 	            "Built-By"                  :   System.getProperty("user.name"),
@@ -468,26 +498,6 @@ project (':quasar-core') {
             }
         }
 
-        def shadowJarTask = task("${set.name}ShadowJar", type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar, dependsOn: jarTask) {
-            outputs.upToDateWhen { false }
-
-            classifier = '' // overwrite jar
-            destinationDir = file("$buildDir/libs")
-
-            from set.output
-
-            configurations = [project.configurations.runtime, project.configurations["${set.name}Runtime"]]
-            dependencies {
-                include(dependency('org.ow2.asm:.*:.*'))
-                include(dependency(':high-scale-lib'))
-            }
-            exclude 'META-INF/INDEX.LIST'
-
-            relocate 'org.objectweb.asm.', 'co.paralleluniverse.asm.'
-
-            manifest.inheritFrom jarTask.manifest
-        }
-
         def testTask = task("${set.name}Test", type: Test, dependsOn: shadowJarTask) {
             testClassesDir = project.sourceSets["${set.name}test"].output.classesDir
             classpath = project.sourceSets["${set.name}test"].runtimeClasspath
@@ -510,9 +520,9 @@ project (':quasar-core') {
         targetCompatibility = '1.7'
     }
 
-    jdk7Jar {
-        from zipTree("${baselib}/jsr166e.jar")  // include non-Maven jars
-    }
+//    jdk7Jar {
+//        from zipTree("${baselib}/jsr166e.jar")  // include non-Maven jars
+//    }
 
     jdk7ShadowJar {
         dependencies {
@@ -535,12 +545,12 @@ project (':quasar-core') {
             targetCompatibility = '1.8'
         }
 
-        jdk8Jar {
-            classifier = 'jdk8'
-        }
+//        jdk8Jar {
+//            classifier = 'jdk8'
+//        }
 
         jdk8ShadowJar {
-            classifier = 'jdk8' + (classifier.empty ? '' :  '-')
+            classifier = 'jdk8'
         }
 
         artifacts {
@@ -741,3 +751,5 @@ task javadoc(type: Javadoc, dependsOn: subprojects.javadoc) {
 task clean(dependsOn: subprojects.clean) << {
     delete 'docs/javadoc'
 }
+
+def capitalize(s) { s[0].toUpperCase() + s[1..-1].toLowerCase() }
\ No newline at end of file
diff --git a/quasar-kotlin/build.gradle b/quasar-kotlin/build.gradle
index c8e5e196cd..b95b1db1c3 100755
--- a/quasar-kotlin/build.gradle
+++ b/quasar-kotlin/build.gradle
@@ -10,9 +10,15 @@ buildscript {
 apply plugin: 'kotlin'
 
 dependencies {
-    provided project(path: ':quasar-core', configuration: 'jdk7Archives')
+    provided project(path: ':quasar-core', configuration: "jdk${jdkVer}Archives")
     compile project(':quasar-actors')
 
     compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVer"
     compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVer"
 }
+
+classes {
+    doLast {
+        scanAndInstrument(sourceSets.main, [configurations.provided, configurations.runtime])
+    }
+}
\ No newline at end of file
