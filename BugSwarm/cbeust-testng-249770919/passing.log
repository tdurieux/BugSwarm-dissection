travis_fold:start:worker_info[0K[33;1mWorker information[0m
hostname: i-0d7d30c-precise-production-2-worker-org-docker.travisci.net:6476bfa8-5aeb-4487-828a-9a10362c0d37
version: v2.5.0 https://github.com/travis-ci/worker/tree/da3a43228dffc0fcca5a46569ca786b22991979f
instance: 5c65262:travis:java
startup: 354.159477ms
travis_fold:end:worker_info[0Ktravis_fold:start:system_info[0K[33;1mBuild system information[0m
Build language: java
Build group: stable
Build dist: precise
Build id: 251059738
Job id: 251059739
travis-build version: 6094b6ae8
[34m[1mBuild image provisioning date and time[0m
Thu Feb  5 15:09:33 UTC 2015
[34m[1mOperating System Details[0m
Distributor ID:	Ubuntu
Description:	Ubuntu 12.04.5 LTS
Release:	12.04
Codename:	precise
[34m[1mLinux Version[0m
3.13.0-29-generic
[34m[1mCookbooks Version[0m
a68419e https://github.com/travis-ci/travis-cookbooks/tree/a68419e
[34m[1mGCC version[0m
gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3
Copyright (C) 2011 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[34m[1mLLVM version[0m
clang version 3.4 (tags/RELEASE_34/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
[34m[1mPre-installed Ruby versions[0m
ruby-1.9.3-p551
[34m[1mPre-installed Node.js versions[0m
v0.10.36
[34m[1mPre-installed Go versions[0m
1.4.1
[34m[1mRedis version[0m
redis-server 2.8.19
[34m[1mriak version[0m
2.0.2
[34m[1mMongoDB version[0m
MongoDB 2.4.12
[34m[1mCouchDB version[0m
couchdb 1.6.1
[34m[1mNeo4j version[0m
1.9.4
[34m[1mRabbitMQ Version[0m
3.4.3
[34m[1mElasticSearch version[0m
1.4.0
[34m[1mInstalled Sphinx versions[0m
2.0.10
2.1.9
2.2.6
[34m[1mDefault Sphinx version[0m
2.2.6
[34m[1mInstalled Firefox version[0m
firefox 31.0esr
[34m[1mPhantomJS version[0m
1.9.8
[34m[1mant -version[0m
Apache Ant(TM) version 1.8.2 compiled on December 3 2011
[34m[1mmvn -version[0m
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T17:29:23+00:00)
Maven home: /usr/local/maven
Java version: 1.7.0_76, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-7-oracle/jre
Default locale: en_US, platform encoding: ANSI_X3.4-1968
OS name: "linux", version: "3.13.0-29-generic", arch: "amd64", family: "unix"
travis_fold:end:system_info[0K
travis_fold:start:fix.CVE-2015-7547[0K$ export DEBIAN_FRONTEND=noninteractive
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libc-bin libc-dev-bin libc6-dev
Suggested packages:
  glibc-doc
The following packages will be upgraded:
  libc-bin libc-dev-bin libc6 libc6-dev
4 upgraded, 0 newly installed, 0 to remove and 278 not upgraded.
Need to get 8,856 kB of archives.
After this operation, 13.3 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6-dev amd64 2.15-0ubuntu10.18 [2,948 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-dev-bin amd64 2.15-0ubuntu10.18 [84.5 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc-bin amd64 2.15-0ubuntu10.18 [1,178 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libc6 amd64 2.15-0ubuntu10.18 [4,646 kB]
Preconfiguring packages ...
Fetched 8,856 kB in 0s (34.5 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72019 files and directories currently installed.)
Preparing to replace libc6-dev 2.15-0ubuntu10.10 (using .../libc6-dev_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6-dev ...
Preparing to replace libc-dev-bin 2.15-0ubuntu10.10 (using .../libc-dev-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-dev-bin ...
Preparing to replace libc-bin 2.15-0ubuntu10.10 (using .../libc-bin_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc-bin ...
Processing triggers for man-db ...
Setting up libc-bin (2.15-0ubuntu10.18) ...
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libc6 2.15-0ubuntu10.10 (using .../libc6_2.15-0ubuntu10.18_amd64.deb) ...
Unpacking replacement libc6 ...
Setting up libc6 (2.15-0ubuntu10.18) ...
Setting up libc-dev-bin (2.15-0ubuntu10.18) ...
Setting up libc6-dev (2.15-0ubuntu10.18) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
travis_fold:end:fix.CVE-2015-7547[0Ktravis_fold:start:update_libssl1.0.0[0K$ sudo apt-get install libssl1.0.0
Reading package lists...
Building dependency tree...
Reading state information...
The following extra packages will be installed:
  libssl-dev
The following packages will be upgraded:
  libssl-dev libssl1.0.0
2 upgraded, 0 newly installed, 0 to remove and 276 not upgraded.
Need to get 2,634 kB of archives.
After this operation, 29.7 kB of additional disk space will be used.
Get:1 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl-dev amd64 1.0.1-4ubuntu5.39 [1,580 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main libssl1.0.0 amd64 1.0.1-4ubuntu5.39 [1,054 kB]
Preconfiguring packages ...
Fetched 2,634 kB in 0s (18.3 MB/s)
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 72018 files and directories currently installed.)
Preparing to replace libssl-dev 1.0.1-4ubuntu5.21 (using .../libssl-dev_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl-dev ...
Preparing to replace libssl1.0.0 1.0.1-4ubuntu5.21 (using .../libssl1.0.0_1.0.1-4ubuntu5.39_amd64.deb) ...
Unpacking replacement libssl1.0.0 ...
Setting up libssl1.0.0 (1.0.1-4ubuntu5.39) ...
Setting up libssl-dev (1.0.1-4ubuntu5.39) ...
Processing triggers for libc-bin ...
ldconfig deferred processing now taking place
travis_fold:end:update_libssl1.0.0[0K$ jdk_switcher use oraclejdk8
Switching to Oracle JDK8 (java-8-oracle), JAVA_HOME will be set to /usr/lib/jvm/java-8-oracle
travis_fold:start:git.checkout[0Ktravis_time:start:0a766379[0K$ git clone --depth=50 --branch=master https://github.com/cbeust/testng.git cbeust/testng
Cloning into 'cbeust/testng'...

travis_time:end:0a766379:start=1499413402318100761,finish=1499413403432713831,duration=1114613070[0K$ cd cbeust/testng
$ git checkout -qf 72fbd7fb56ccd03fbb0b69b4f373e47a4ff619e6
travis_fold:end:git.checkout[0K
[33;1mSetting environment variables from repository settings[0m
$ export SONATYPE_USER=[secure]
$ export SONATYPE_PASSWORD=[secure]
$ export SONAR_TOKEN=[secure]
$ export SONAR_GITHUB_OAUTH=[secure]

[33;1mSetting environment variables from .travis.yml[0m
$ export GRADLE_OPTS=-Xmx512m

$ export TERM=dumb
travis_fold:start:cache.1[0KSetting up build cache
$ export CASHER_DIR=$HOME/.casher
travis_time:start:0b290e9c[0K$ Installing caching utilities

travis_time:end:0b290e9c:start=1499413406561840357,finish=1499413406590108071,duration=28267714[0Ktravis_time:start:00880b45[0K
travis_time:end:00880b45:start=1499413406596037620,finish=1499413406600111744,duration=4074124[0Ktravis_time:start:003260a4[0K[32;1mattempting to download cache archive[0m
[32;1mfetching master/cache-linux-precise-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--jdk-oraclejdk8.tgz[0m
[32;1mfound cache[0m

travis_time:end:003260a4:start=1499413406604883174,finish=1499413414458934935,duration=7854051761[0Ktravis_time:start:035f4c5a[0K
travis_time:end:035f4c5a:start=1499413414463970471,finish=1499413414467978567,duration=4008096[0Ktravis_time:start:11fc5ec0[0K[32;1madding /home/travis/.gradle/caches to cache[0m
[32;1mcreating directory /home/travis/.gradle/caches[0m
[32;1madding /home/travis/.gradle/wrapper to cache[0m
[32;1mcreating directory /home/travis/.gradle/wrapper[0m

travis_time:end:11fc5ec0:start=1499413414472758517,finish=1499413418639424906,duration=4166666389[0Ktravis_fold:end:cache.1[0K$ java -Xmx32m -version
java version "1.8.0_31"
Java(TM) SE Runtime Environment (build 1.8.0_31-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.31-b07, mixed mode)
$ javac -J-Xmx32m -version
javac 1.8.0_31
travis_fold:start:install[0Ktravis_time:start:1f4201e8[0K$ ./gradlew assemble
Starting a Gradle Daemon (subsequent builds will be faster)
:compileJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileGroovy NO-SOURCE
:processResources
:classes
:jar
:javadoc
:javadocJar
:sourcesJar
:signArchives SKIPPED
:assemble

BUILD SUCCESSFUL

Total time: 22.08 secs

travis_time:end:1f4201e8:start=1499413419025094073,finish=1499413441512202215,duration=22487108142[0Ktravis_fold:end:install[0Ktravis_fold:start:before_script[0Ktravis_time:start:140705f0[0K$ if [[ "x$JDK" == *'x9'* ]]; then remove_dir_from_path $JAVA_HOME/bin; export JAVA_HOME=/usr/lib/jvm/java-9-oracle; export PATH=$JAVA_HOME/bin:$PATH; java -Xmx32m -version; fi

travis_time:end:140705f0:start=1499413441517522102,finish=1499413441521704524,duration=4182422[0Ktravis_fold:end:before_script[0Ktravis_time:start:0a0896ce[0K$ ./gradlew check --stacktrace
:compileJava UP-TO-DATE
:compileGroovy NO-SOURCE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:compileTestJavawarning: [options] bootstrap class path not set in conjunction with -source 1.7
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
1 warning

:compileTestGroovy
:processTestResources
:testClasses
:test

Gradle Test Executor 2 STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter

TestNG Running Junit Tests > Junit via TestNG XML STANDARD_ERROR
    org.testng.TestNGException: 
    Failure in JUnit mode for class test.junit.SetNameTest
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:114)
    	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:70)
    	at org.testng.TestRunner$1.run(TestRunner.java:669)
    	at org.testng.TestRunner.runJUnitWorkers(TestRunner.java:969)
    	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:700)
    	at org.testng.TestRunner.run(TestRunner.java:601)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1310)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.AssertionError
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter.onTestStart(TestNGTestResultProcessorAdapter.java:116)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:89)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:83)
    	at com.sun.proxy.$Proxy5.onTestStart(Unknown Source)
    	at org.testng.junit.JUnit4TestRunner$RL.testStarted(JUnit4TestRunner.java:207)
    	at org.junit.runner.notification.SynchronizedRunListener.testStarted(SynchronizedRunListener.java:49)
    	at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:121)
    	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
    	at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:118)
    	at org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(JUnit38ClassRunner.java:37)
    	at junit.framework.TestResult.startTest(TestResult.java:168)
    	at junit.framework.TestResult.run(TestResult.java:119)
    	at junit.framework.TestCase.run(TestCase.java:129)
    	at junit.framework.TestSuite.runTest(TestSuite.java:252)
    	at junit.framework.TestSuite.run(TestSuite.java:247)
    	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:82)
    	... 43 more
Executed test ==> test.guice.GuiceParentModuleTest.testService() with result: SUCCESS
Executed test ==> NoPackageTest.test() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test3TestNG2() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testNonExistentParameter[0](null)() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testSingleString[0](Cedric)() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.noNPEInCountingResults STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.noNPEInCountingResults() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.beforeMethodWithParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.enumParameters() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParameterTest.invalidEnumParameters STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: No enum constant test.parameters.EnumParameterSample.MyEnum.INVALID_VALUE
    	at java.lang.Enum.valueOf(Enum.java:238)
    	at org.testng.internal.Parameters.convertType(Parameters.java:364)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:231)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:494)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:620)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.parameters.ParameterTest.invalidEnumParameters(ParameterTest.java:86)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.parameters.ParameterTest.invalidEnumParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.stringSingle() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod1() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod2() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod3() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptions() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptionsDeprecatedSyntax() with result: SUCCESS
Executed test ==> test.access.PrivateAccessConfigurationMethods.allAccessModifiersConfiguration() with result: SUCCESS
Executed test ==> test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.CountTest.skippedMethodsShouldBeCounted() with result: SUCCESS
Executed test ==> test.StaticTest$InnerStaticClass.test() with result: SUCCESS
Executed test ==> test.MethodTest.excludeMethodsOnly() with result: SUCCESS
Executed test ==> test.MethodTest.excludePackage() with result: SUCCESS
Executed test ==> test.MethodTest.includeMethodsOnly() with result: SUCCESS
Executed test ==> test.EclipseTest.xmlFileShouldBeRunAtItsPlaceAndNotCopied[0](org.testng.TestRunner@1ef03214)() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS
Executed test ==> test.ReporterApiTest.testApi() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldBeCorrect() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldFail() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessors() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessorsTiming() with result: SUCCESS
Executed test ==> test.GraphTest.sort() with result: SUCCESS
Executed test ==> test.reports.UniqueReporterInjectionTest.testPruningOfDuplicateReporter() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test2() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test3() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test4() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test8() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.testOrderingOfEdgesWithSameWeight() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporterWithMultipleClasses() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitXMLReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testTestCaseOrderingInJUnitReportReporterWhenPrioritiesDefined() with result: SUCCESS
Executed test ==> test.ReflectionHelperTest.testMethodCount() with result: SUCCESS
Executed test ==> test.abstractmethods.AbstractTest.abstractShouldRun() with result: SUCCESS
Executed test ==> test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest.testPrivateMethod() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeAndExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeAndExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeShouldWork() with result: SUCCESS
Executed test ==> test.multiple.TestMultiple.multiple() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential1() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential2() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependencyAndFailures() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependsOnMethods() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testOne() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testThree() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testTwo() with result: SUCCESS
Executed test ==> test.NestedStaticTest.nestedClassShouldBeIncluded() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfterMethod() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunBefore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationListenerTest.listenerShouldBeCalled() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestClassFails() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestSuiteFails() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[0]([Ljava.lang.String;@63622e1e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[1]([Ljava.lang.String;@58757bd6, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[2]([Ljava.lang.String;@59d42560, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[3]([Ljava.lang.String;@f047e89, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[4]([Ljava.lang.String;@a4e677e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[5]([Ljava.lang.String;@6fa88cbd, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[0]([Ljava.lang.String;@6b6d3263, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[1]([Ljava.lang.String;@457d17ad, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[2]([Ljava.lang.String;@40dd5b0f, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[3]([Ljava.lang.String;@548fef71, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[4]([Ljava.lang.String;@67808512, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[5]([Ljava.lang.String;@4cd753dc, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Xml() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[0]([Ljava.lang.String;@687a59d4, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[1]([Ljava.lang.String;@f865afe, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[2]([Ljava.lang.String;@32cde3f4, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[3]([Ljava.lang.String;@50c9fe2b, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[4]([Ljava.lang.String;@16bc9c2c, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[5]([Ljava.lang.String;@5235033, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[0]([Ljava.lang.String;@4666a6a3, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[1]([Ljava.lang.String;@7d3dc507, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[2]([Ljava.lang.String;@423e7e5b, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[3]([Ljava.lang.String;@282714c2, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[4]([Ljava.lang.String;@5ad96b35, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[5]([Ljava.lang.String;@238541d3, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[0]([Ljava.lang.String;@343fdb5e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[1]([Ljava.lang.String;@10788b35, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[2]([Ljava.lang.String;@542d5fc9, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[3]([Ljava.lang.String;@26a68547, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[4]([Ljava.lang.String;@68bd6596, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[5]([Ljava.lang.String;@48e28d85, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Xml() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithClassTest() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithMethodTest() with result: SUCCESS
Executed test ==> test.StaticTest.test() with result: SUCCESS
Executed test ==> test.superclass.Test3.shouldExcludeBaseMethods() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWork() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWorkWithConfigurationListener() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderWithNoClassLoader() with result: SUCCESS
Executed test ==> test.failures.FailuresTest.shouldIncludeFailedMethodsFromBaseClass() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineExcludedGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.shouldRunBothMethods() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationOthers() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyExpectedExceptions() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyFactory() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyParameters() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestClassLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestConstructorLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestMethodLevel() with result: SUCCESS
Executed test ==> test.jason.MainTest.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyConfigurationGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnMethodsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestGroupsInheritance() with result: SUCCESS
Executed test ==> test.bug90.Bug90Test.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryNotParallel() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelMethods() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelTests() with result: SUCCESS
Executed test ==> test.bug92.Bug92Test.BeforeTestShouldRunOnce() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential3() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded3() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldNotBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.testReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[2](true, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[3](false, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[4](true, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[5](false, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[6](true, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[7](false, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[8](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[9](false, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[2](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[3](false, instances, 2)() with result: SUCCESS

TestNG > Regression2 > test.groupbug.GroupBugTest.shouldOrderByClass STANDARD_OUT
    RUN class test.groupbug.ITCaseOne.beforeClass()
    RUN class test.groupbug.ITCaseOne.one1()
    RUN class test.groupbug.ITCaseOne.one2()
    RUN class test.groupbug.ITCaseOne.afterClass()
    RUN class test.groupbug.ITCaseTwo.beforeClass()
    RUN class test.groupbug.ITCaseTwo.two1()
    RUN class test.groupbug.ITCaseTwo.two2()
    RUN class test.groupbug.ITCaseTwo.afterClass()
    ===== Invoked methods
      ITCaseOne.beforeClassOne()[pri:0, instance:test.groupbug.ITCaseOne@4ef344c6] 1324565702
        ITCaseOne.one1()[pri:0, instance:test.groupbug.ITCaseOne@4ef344c6] 1324565702
        ITCaseOne.one2()[pri:0, instance:test.groupbug.ITCaseOne@4ef344c6] 1324565702
      ITCaseOne.afterClassOne()[pri:0, instance:test.groupbug.ITCaseOne@4ef344c6] 1324565702
      ITCaseTwo.beforeClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@b5a4ed3] 190467795
        ITCaseTwo.two1()[pri:0, instance:test.groupbug.ITCaseTwo@b5a4ed3] 190467795
        ITCaseTwo.two2()[pri:0, instance:test.groupbug.ITCaseTwo@b5a4ed3] 190467795
      ITCaseTwo.afterClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@b5a4ed3] 190467795
    =====

    ===============================================
    Command line suite
    Total tests run: 4, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.groupbug.GroupBugTest.shouldOrderByClass() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldNotUseThreadsIfNotUsingParallel() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseDefaultDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseSpecifiedDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.parameters.ShadowTest.parametersShouldNotBeShadowed() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test2Threads() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test3Threads() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[0](testOverrideSuite, PASS_TEST)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[1](classOverrideSuite, PASS_CLASS)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[2](includeOverrideClass, PASS_INCLUDE)() with result: SUCCESS
Executed test ==> test.thread.TrueParallelTest.shouldRunInParallel() with result: SUCCESS
Executed test ==> test.reports.FailedReporterTest.failedFile() with result: SUCCESS
Executed test ==> test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest.testMethod() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount1() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount2() with result: SUCCESS
Executed test ==> test.reports.ReportTest.directoryShouldBeSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.github1090() with result: SUCCESS
Executed test ==> test.reports.ReportTest.oneDirectoryPerSuite() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableEvenWithTimeOut() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableWithListener() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[0](class test.reports.GitHub1148Sample, [Ljava.lang.String;@792765ad, [Ljava.lang.String;@59602e93)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[1](class test.reports.GitHub148Sample, [Ljava.lang.String;@1c778495, [Ljava.lang.String;@10082ee9)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.shouldHonorSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.verifyIndex() with result: SUCCESS

TestNG > Regression2 > test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass2() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerHasOnlyOneNonNullArgument() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerMethod() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationWithoutTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyConfigurationTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyDataProviderTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyFactoryTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyInvocationCountTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyListenerAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyMyParamTransformerOnlyOneNonNull() with result: SUCCESS

TestNG > Regression2 > test.xml.XmlVerifyTest.handleInvalidSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.xml.XmlVerifyTest.handleInvalidSuites() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.preserverOrderAttribute() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.simple() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue629_InvokedMethodDoesNotRecognizeConfigurationMethod() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue87_method_orderning_with_disable_test_class() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.testMethodsWithExpectedExceptionsShouldShowUpAsPass() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withFailure() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withSuccess() with result: SUCCESS
Executed test ==> test.testng249.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.testng195.AfterMethodTest.testContextShouldBeInitialized() with result: SUCCESS
Executed test ==> test.regression.BeforeTestFailingTest.beforeTestFailingShouldCauseSkips() with result: SUCCESS
Executed test ==> test.testng285.TestNG285Test.verifyBug() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedAndSkippedMethodsShouldBeIncluded() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedMethodWithDataProviderShouldHaveInvocationNumbers() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigs() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsAmidstInheritance() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtSuiteLevel() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtTestLevel() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f1[0](org.testng.TestRunner@1ef03214)() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f2[0](org.testng.TestRunner@1ef03214)() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyBaseClassTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithAnnotation() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithoutAnnotation() with result: SUCCESS
Executed test ==> test.abstractconfmethod.C.test1() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.factoryPreserve() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.orderShouldBePreservedWithDependencies() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[0]([Ljava.lang.Class;@760e4eac)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[1]([Ljava.lang.Class;@1c779f70)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[2]([Ljava.lang.Class;@5f33c280)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[3]([Ljava.lang.Class;@1a0cf48a)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[4]([Ljava.lang.Class;@31def0bd)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[5]([Ljava.lang.Class;@6021fc94)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[0]([Ljava.lang.String;@a69fa25)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[1]([Ljava.lang.String;@1709b8d8)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[2]([Ljava.lang.String;@4fa93575)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[3]([Ljava.lang.String;@32a9215)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[4]([Ljava.lang.String;@7d4b4c7e)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[5]([Ljava.lang.String;@3fd06619)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveOrderValueShouldBeTheDefaultOne() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationInMixedMode() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationSkipWhenNoFailuresExist() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationWhenFailuresExist() with result: SUCCESS
Executed test ==> test_result.GitHub1197Test.testGitHub1197() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterParametersTest.failedSuiteShouldHaveParameters() with result: SUCCESS
Executed test ==> test.listeners.github1319.TestResultInstanceCheckTest.testInstances() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[0](class test.reports.ReporterLogSuccessSample, Listener: onTestSuccess)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[1](class test.reports.ReporterLogSkippedSample, Listener: onTestSkipped)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[2](class test.reports.ReporterLogFailureSample, Listener: onTestFailure)() with result: SUCCESS
Executed test ==> test.testng1396.ParallelByInstancesInterceptorTest.should_honor_interceptor_order_when_running_parallel_instances() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS

TestNG > Regression2 > test.github1417.TestParamsInjectionInBeforeClass.testMethod STANDARD_OUT
    ...
    ... TestNG 6.11.1-SNAPSHOT by Cédric Beust (cedric@beust.com)
    ...

    PASSED: testMethod
    PASSED: testMethod

    ===============================================
        1417_test
        Tests run: 2, Failures: 0, Skips: 0
    ===============================================

    PASSED: testMethod

    ===============================================
        1417_test_regular
        Tests run: 1, Failures: 0, Skips: 0
    ===============================================


    ===============================================
    1417_suite
    Total tests run: 3, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.github1417.TestParamsInjectionInBeforeClass.testMethod() with result: SUCCESS
Executed test ==> test.testng1231.TestExecutionListenerInvocationOrder.testListenerOrder() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsUsingGroupsWithFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasExplicitSkipInConfiguration() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasMultipleFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenConfigHasAlwaysRun() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInABaseClass() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInSuiteConfigs() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasException() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasExceptionInInheritance() with result: SUCCESS
Executed test ==> test.testng106.TestNG106.testFailingBeforeSuiteShouldSkipAllTests() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterModificationFromListener() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterSetFromListener() with result: SUCCESS
Executed test ==> test.test111.Test1.testAbstract() with result: SUCCESS
Executed test ==> test.test111.Test1.test() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClasses() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClassesAndDifferentPackage() with result: SUCCESS
Executed test ==> test.listeners.github551.Test551.testExecutionTimeOfFailedConfig() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.verify() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.threadPoolAndTimeOutShouldFail() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.verify() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f1() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f2() with result: SUCCESS
Executed test ==> test.listeners.ResultEndMillisTest.endMillisShouldBeNonNull() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.aggregateListeners() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldBeOnlyRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkFromAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkWithManyTestMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.failureBeforeAfterMethod() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.invokedMethodListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.listenerRegistration STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
Executed test ==> test.listeners.ListenerTest.listenerRegistration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.listenerShouldBeCalledBeforeConfiguration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodInterceptorShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodListenersShouldNotBeCalledForSkippedMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.setStatusShouldWorkInListener() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.shouldAttachOnlyOneInstanceOfTheSameListenerClassPerTest() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenerInListernersAnnotationShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyIdenticalTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.testListenerCallInvocation() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndInvokedMethodListenerTest.bothListenersShouldRun() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndConfigurationListenerTest.bothListenersShouldRun() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithXml() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithoutListener() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldFail() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSkip() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSucceed() with result: SUCCESS

TestNG > Listeners > test.multiplelisteners.TestMaker.run STANDARD_ERROR
    [TestNG] Reporter test.multiplelisteners.SimpleReporter@55e89fb6 failed
    java.lang.RuntimeException: java.lang.NoSuchFieldException: m_configuration
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:31)
    	at org.testng.TestNG.generateReports(TestNG.java:1205)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.multiplelisteners.TestMaker.run(TestMaker.java:26)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.NoSuchFieldException: m_configuration
    	at java.lang.Class.getDeclaredField(Class.java:2062)
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:24)
    	... 52 more
Executed test ==> test.multiplelisteners.TestMaker.run() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnce() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnceInMultiTestContext() with result: SUCCESS
Executed test ==> test.listeners.github1296.GitHub1296Test.test_number_of_call_of_configuration_listener() with result: SUCCESS

TestNG > Reflection STANDARD_OUT
    exactMatchDP:
    s0, [[Ljava.lang.Object;@31993278
    s0, [[Ljava.lang.Object;@4910e28f
    s0, [[Ljava.lang.Object;@800df00
    s0, [[Ljava.lang.Object;@1737aac9
    s0, [[Ljava.lang.Object;@6f4550a5
    s1, [[Ljava.lang.Object;@210fc358
    s1, [[Ljava.lang.Object;@2ff9e0a6
    s1, [[Ljava.lang.Object;@5326672
    s1, [[Ljava.lang.Object;@40b7ce09
    s1, [[Ljava.lang.Object;@1ffdc044
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[0]([[Ljava.lang.Object;@31993278, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[1]([[Ljava.lang.Object;@4910e28f, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[2]([[Ljava.lang.Object;@800df00, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[3]([[Ljava.lang.Object;@1737aac9, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[4]([[Ljava.lang.Object;@6f4550a5, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0())() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[5]([[Ljava.lang.Object;@210fc358, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[6]([[Ljava.lang.Object;@2ff9e0a6, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[7]([[Ljava.lang.Object;@5326672, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[8]([[Ljava.lang.Object;@40b7ce09, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[9]([[Ljava.lang.Object;@1ffdc044, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
    matchArrayEndingDP:
    s0, [[Ljava.lang.Object;@35c88ae0
    s0, [[Ljava.lang.Object;@db50fc6
    s0, [[Ljava.lang.Object;@5228b967
    s0, [[Ljava.lang.Object;@7ba03844
    s0, [[Ljava.lang.Object;@ace225a
    s1, [[Ljava.lang.Object;@2f20c7fa
    s1, [[Ljava.lang.Object;@3854b0f8
    s1, [[Ljava.lang.Object;@424ccdae
    s1, [[Ljava.lang.Object;@396beb4f
    s1, [[Ljava.lang.Object;@10ddf48f
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[0]([[Ljava.lang.Object;@35c88ae0, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[1]([[Ljava.lang.Object;@db50fc6, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,float[],org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[2]([[Ljava.lang.Object;@5228b967, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[],org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[3]([[Ljava.lang.Object;@7ba03844, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[4]([[Ljava.lang.Object;@ace225a, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[5]([[Ljava.lang.Object;@2f20c7fa, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[6]([[Ljava.lang.Object;@3854b0f8, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[7]([[Ljava.lang.Object;@424ccdae, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,float[],org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[8]([[Ljava.lang.Object;@396beb4f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[9]([[Ljava.lang.Object;@10ddf48f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@2d7cbe3c) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@2d7cbe3c)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@6c279808) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@6c279808)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@763c5731) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@763c5731)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@58a975a9) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@58a975a9)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@3e2fb77a, [Ljava.lang.Object;@44906e5e) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@3e2fb77a, [Ljava.lang.Object;@44906e5e)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@aa25d9b, [Ljava.lang.Object;@44906e5e) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, null, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@aa25d9b, [Ljava.lang.Object;@44906e5e)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@ed0da3c, [Ljava.lang.Object;@44906e5e) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@ed0da3c, [Ljava.lang.Object;@44906e5e)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7b967e57, [Ljava.lang.Object;@44906e5e) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7b967e57, [Ljava.lang.Object;@44906e5e)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[0](class org.testng.TestRunner)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[1](interface org.testng.ITestContext)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[2](class test.reflect.TestContextJustForTesting)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[0](class java.lang.Object)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[1](class java.lang.Class)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[2](interface java.sql.Connection)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@347c6a1c, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@347c6a1c, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@4fa2e589, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@4fa2e589, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@84c87f1, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@84c87f1, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@7cbfbdec, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@7cbfbdec, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@76259c61, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@76259c61, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@1fa795ad, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@1fa795ad, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@8d2d91e, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri0(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@5f99cc7"
    ITestContext is "org.testng.TestRunner@187b3558"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@239c5e4b"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@8d2d91e, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@3d18790f, org.testng.TestRunner@187b3558, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri1(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@51c17b07"
    ITestContext is "org.testng.TestRunner@187b3558"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@10ee0972"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@3d18790f, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@6ec0ca61, org.testng.TestRunner@187b3558, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: goodTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@6ec0ca61, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@726cd55b, org.testng.TestRunner@187b3558, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: badTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@726cd55b, org.testng.TestRunner@187b3558, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@5a0e4bc1, org.testng.TestRunner@187b3558, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: mixedArgs([Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=[Ljava.lang.String;, declaredAnnotations=[]}, Parameter{index=3, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.Boolean)true,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@5a0e4bc1, org.testng.TestRunner@187b3558, null)() with result: SUCCESS
Executed test ==> test.inject.InjectTestContextTest.injectionAndParameters[0](Cedric, org.testng.TestRunner@40c1c8f8)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[0](a)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[1](b)() with result: SUCCESS
Executed test ==> test.inject.InjectTestResultTest.verifyTestResultInjection() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[0](1, org.testng.TestRunner@40c1c8f8, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[1](2, org.testng.TestRunner@40c1c8f8, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[0](org.testng.TestRunner@40c1c8f8, 1, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[1](org.testng.TestRunner@40c1c8f8, 2, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[0](1, a, org.testng.TestRunner@40c1c8f8)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[1](2, b, org.testng.TestRunner@40c1c8f8)() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withInjection[0](public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withoutInjection[0](public void test.inject.CC.f())() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[0](class test.inject.NativeInjectionTestSamples$BadBeforeSuiteSample, beforeSuite, Can inject only one of <ITestContext, XmlTest> into a @BeforeSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[1](class test.inject.NativeInjectionTestSamples$BadBeforeTestSample, beforeTest, Can inject only one of <ITestContext, XmlTest> into a @BeforeTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[2](class test.inject.NativeInjectionTestSamples$BadBeforeClassSample, beforeClass, Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[3](class test.inject.NativeInjectionTestSamples$BadBeforeMethodSample, beforeMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[4](class test.inject.NativeInjectionTestSamples$BadAfterMethodSample, afterMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[5](class test.inject.NativeInjectionTestSamples$BadAfterClassSample, afterClass, Can inject only one of <ITestContext, XmlTest> into a @AfterClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[6](class test.inject.NativeInjectionTestSamples$BadAfterTestSample, afterTest, Can inject only one of <ITestContext, XmlTest> into a @AfterTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[7](class test.inject.NativeInjectionTestSamples$BadAfterSuiteSample, afterSuite, Can inject only one of <ITestContext, XmlTest> into a @AfterSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[8](class test.inject.NativeInjectionTestSamples$BadBeforeGroupsSample, beforeGroups, Can inject only one of <ITestContext, XmlTest> into a @BeforeGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[9](class test.inject.NativeInjectionTestSamples$BadAfterGroupsSample, afterGroups, Can inject only one of <ITestContext, XmlTest> into a @AfterGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.Github1298Test.testPlugin() with result: SUCCESS
Executed test ==> test.configuration.BeforeMethodTest.mainTest() with result: SUCCESS
Executed test ==> test.sample.Basic1.basic1() with result: SUCCESS
Executed test ==> test.Misc.makeSureSetUpWithParameterWithNoParametersFails() with result: SUCCESS
Executed test ==> test.sample.Basic2.basic2() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_first0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_premiere1() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentGroupsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethods() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithNonExistentMethod() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithSkip() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentWithDataProvider() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.instanceDependencies() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[0]([Ljava.lang.Class;@3d9e4049, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[1]([Ljava.lang.Class;@1f57b110, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[2]([Ljava.lang.Class;@568d6f50, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[3]([Ljava.lang.Class;@700604b, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.multipleSkips() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[0](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@74d64b1b, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[1](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@4d8620c0, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[2](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@35c17f4c, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[3](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@de0e855, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[4](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@5dd6240d, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[5](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@1775129, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[6](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@28d0559b, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[7](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@3189d7fe, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleSkip() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentTest.test2() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.canBeRunAnytime() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneB() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one[0](Cedric)() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentConfigurationMethods.verifyDependents() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyDependsOnGroups() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyGroupsAcrossClasses() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups1AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups2AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnMethodsAlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.MultiGroupTest.verifyDependsOnMultiGroups() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion2() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion3() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion4() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitMethodInclusion() with result: SUCCESS
Executed test ==> test.dependent.ClassWide1Test.m1() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.send() with result: SUCCESS
Executed test ==> test.dependent.DepBugVerifyTest.verify() with result: SUCCESS
Executed test ==> test.dependent.DependsOnProtectedMethodTest.verifyBeforeInvocations() with result: SUCCESS
Executed test ==> test.dependsongroup.DependsOnGroupsTest.methodsShouldBeGroupedByClasses() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.dontGroupByInstances() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.groupByInstances() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[0]([Ljava.lang.String;@52d1ecaf)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[1]([Ljava.lang.String;@148dfce2)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[2]([Ljava.lang.String;@683053da)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[3]([Ljava.lang.String;@3f850186)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[4]([Ljava.lang.String;@27573734)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[5]([Ljava.lang.String;@68e94760)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[0]([Ljava.lang.String;@724980eb)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[1]([Ljava.lang.String;@5c43014d)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[2]([Ljava.lang.String;@b1ce2df)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[3]([Ljava.lang.String;@277b15f0)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[4]([Ljava.lang.String;@20cad069)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[5]([Ljava.lang.String;@183db8ca)() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingGroup() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second1() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.secondA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.secondA() with result: SUCCESS
Executed test ==> test.dependent.ClassWide2Test.m2() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.get() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.third0() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.thirdA() with result: SUCCESS
Executed test ==> test.SampleInheritance.baseMethod() with result: SUCCESS
Executed test ==> test.SampleInheritance.configurationsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.setVerify() with result: SUCCESS
Executed test ==> test.inheritance.testng739.TestNG739.test_classes_should_be_skipped_when_a_before_class_fails() with result: SUCCESS
Executed test ==> test.inheritance.testng234.PolymorphicFailureTest.superclassFailureShouldCauseFailure() with result: SUCCESS

TestNG > Inheritance > test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails STANDARD_OUT
    ===== Invoked methods
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class1@141f0966] 337578342
      Class1.beforeClass1()[pri:0, instance:test.inheritance.testng471.Class1@141f0966] 337578342
      Class1.beforeMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@141f0966] 337578342
        Class1.test1_1()[pri:0, instance:test.inheritance.testng471.Class1@141f0966] 337578342
      Class1.afterMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@141f0966] 337578342
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.beforeClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
        Class2.test2_1()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
        Class2.test2_2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      Class2.afterClass2()[pri:0, instance:test.inheritance.testng471.Class2@ae4ffed] 182779885
      SuperClass2.beforeSuperClass2()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.beforeClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
        Class3.test3_1()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
        Class3.test3_2()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
      Class3.afterClass3()[pri:0, instance:test.inheritance.testng471.Class3@630cb8b4] 1661778100
    =====

    ===============================================
    Command line suite
    Total tests run: 7, Failures: 1, Skips: 1
    Configuration Failures: 1, Skips: 2
    ===============================================

Executed test ==> test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails() with result: SUCCESS
Executed test ==> test.SampleInheritance.testBooleans() with result: SUCCESS
Executed test ==> test.SampleInheritance.inheritedMethodsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.verify() with result: SUCCESS

TestNG > Inheritance STANDARD_OUT
    ===== Invoked methods
      BaseSampleInheritance.baseConfiguration()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
      SampleInheritance.configuration0()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
      BaseSampleInheritance.configuration1()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
      SampleInheritance.configuration2()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
        BaseSampleInheritance.baseMethod()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
        SampleInheritance.configurationsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
        ClassScopeTest.setVerify()[pri:0, instance:test.inheritance.ClassScopeTest@6c47c375] 1816642421
        TestNG739.test_classes_should_be_skipped_when_a_before_class_fails()[pri:0, instance:test.inheritance.testng739.TestNG739@bdd3595] 199046549
        PolymorphicFailureTest.superclassFailureShouldCauseFailure()[pri:0, instance:test.inheritance.testng234.PolymorphicFailureTest@6a8fdb2c] 1787812652
        TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails()[pri:0, instance:test.inheritance.testng471.TestNG471@3881e163] 948035939
        BaseSampleInheritance.testBooleans()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
        SampleInheritance.inheritedMethodsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@20d99263] 551129699
        ClassScopeTest.verify()[pri:0, instance:test.inheritance.ClassScopeTest@6c47c375] 1816642421
    =====
Executed test ==> test.sample.Scope.outerDeprecated[0](out)() with result: SUCCESS

TestNG > Test outer scope STANDARD_OUT
    ===== Invoked methods
        Scope.outerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@4162509d]out  1096962205
    =====
Executed test ==> test.sample.Scope.innerDeprecated[0](in)() with result: SUCCESS

TestNG > Test inner scope STANDARD_OUT
    ===== Invoked methods
        Scope.innerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@3352f293]in  861074067
    =====
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS

TestNG > AfterClassCalledAtEnd STANDARD_OUT
    ===== Invoked methods
      AfterClassCalledAtEnd.before1Class()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
        AfterClassCalledAtEnd.test1()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
        AfterClassCalledAtEnd.test2()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
        AfterClassCalledAtEnd.test3()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
      AfterClassCalledAtEnd.afterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
      BaseAfterClassCalledAtEnd.baseAfterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@63ada7f2] 1672325106
    =====
Executed test ==> test.triangle.Child1.child1() with result: SUCCESS
Executed test ==> test.triangle.Child1.child1a() with result: SUCCESS
Executed test ==> test.triangle.Child2.child2() with result: SUCCESS

TestNG > Triangle STANDARD_OUT
    ===== Invoked methods
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child1@71cf7782] 1909421954
        Child1.child1()[pri:0, instance:test.triangle.Child1@71cf7782] 1909421954
        Child1.child1a()[pri:0, instance:test.triangle.Child1@71cf7782] 1909421954
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child1@71cf7782] 1909421954
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child2@1d661be5] 493231077
        Child2.child2()[pri:0, instance:test.triangle.Child2@1d661be5] 493231077
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child2@1d661be5] 493231077
    =====
Executed test ==> test.triangle.CheckCount.testCheckCount[0](2)() with result: SUCCESS
Executed test ==> test.triangle.CheckCount.testCheckCountDeprecated[0](2)() with result: SUCCESS

TestNG > CheckTrianglePost STANDARD_OUT
    ===== Invoked methods
        CheckCount.testCheckCount(java.lang.String)[pri:0, instance:test.triangle.CheckCount@28f96686]2  687433350
        CheckCount.testCheckCountDeprecated(java.lang.String)[pri:0, instance:test.triangle.CheckCount@28f96686]2  687433350
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 1 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@8065d0] 8414672
        First.first2()[pri:0, instance:test.classgroup.First@8065d0] 8414672
        Second.verify()[pri:0, instance:test.classgroup.Second@6aec1ff0] 1793859568
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 2 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@1d2e2268] 489562728
        First.first2()[pri:0, instance:test.classgroup.First@1d2e2268] 489562728
        Second.verify()[pri:0, instance:test.classgroup.Second@1e836af8] 511929080
    =====
Executed test ==> test.factory.TestClassAnnotationTest.testOne() with result: SUCCESS
Executed test ==> test.factory.FactoryWithDataProviderTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryOrderMainTest.factoriesShouldBeInvokedInTheOrderOfCreation() with result: SUCCESS
Executed test ==> test.factory.FactoryFailureTest.factoryThrowingShouldNotRunTests() with result: SUCCESS
Executed test ==> test.factory.FactoryInSuperClassTest.factoryInSuperClassShouldWork() with result: SUCCESS
Executed test ==> test.factory.classconf.XClassOrderWithFactoryTest.testBeforeAfterClassInvocationsWithFactory() with result: SUCCESS
Executed test ==> test.factory.FactoryInterleavingTest.methodsShouldBeInterleaved() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithLocalDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNotStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.DisabledFactoryTest.disabledFactoryShouldNotRun() with result: SUCCESS
Executed test ==> test.factory.FactoryAndTestMethodTest$NullArgsTest.test() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.doubleFactoryMethodShouldWork() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithBadFactoryMethodReturnType() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithNonStaticFactoryMethod() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testNonPublicFactoryMethodShouldWork() with result: SUCCESS

TestNG > Factory > test.factory.EmptyFactoryDataProviderTest.test STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 0, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.factory.EmptyFactoryDataProviderTest.test() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnEmptyConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnIntConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnStringConstructor() with result: SUCCESS
Executed test ==> test.factory.nested.GitHub1307Test.testGitHub1307() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 42]() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 43]() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.FactoryInSeparateClassTest.checkSum() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryWithInstanceInfoTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInNonParallel() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[0](tests)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[1](methods)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[2](classes)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[3](instances)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[4](none)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[5](true)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[6](false)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.verifyInvocationTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.noTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutInParallelTestsFromXml() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnSuiteTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnTestTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.twoDifferentTests() with result: SUCCESS

TestNG > TimeOut > test.timeout.TimeOutIntegrationTest.testGitHub1314 STANDARD_OUT
    Test1
    Test2
Executed test ==> test.timeout.TimeOutIntegrationTest.testGitHub1314() with result: SUCCESS
Executed test ==> test.timeout.TimeOutIntegrationTest.testTimeOutWhenParallelIsTest() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.invocationCount() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatFails() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatSucceeds() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyAttributeShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldNotStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueTrue() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.factoryReceivesContext() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnSuite() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnTestNG() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CombinedTestAndObjectFactoryTest.combinedTestAndObjectFactory() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnSuiteShouldWork() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnTestNGShouldWork() with result: SUCCESS
Executed test ==> test.ParameterConstructorTest.verify() with result: SUCCESS
Executed test ==> test.Exclude.included1() with result: SUCCESS
Executed test ==> test.Exclude.included2() with result: SUCCESS
Executed test ==> test.Exclude.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value1)() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value2)() with result: SUCCESS
Executed test ==> test.IndividualMethodsTest.testMethod() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest$LocalTestClass.helloWorld() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest.testDescriptionInclusion() with result: SUCCESS
Executed test ==> test.inheritance.DChild_2.test() with result: SUCCESS
Executed test ==> test.inheritance.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.greaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellTest.onlyGroup1() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellNegativeTest.testNegativeScenario() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineGreaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineMultipleSelectors() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNoTest1Selector() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineTestWithXmlFile() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.programmaticXmlSuite() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite() with result: SUCCESS
Executed test ==> test.interleavedorder.InterleavedInvocationTest.invocationOrder() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyExternal[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyStatic[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[0](10, verifyTen)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[1](5, verifyFive)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verifySix() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.duplicateDataProviders STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Found two providers called &apos;duplicate&apos; on class test.dataprovider.DuplicateDataProviderSample
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:467)
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:383)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:549)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.duplicateDataProviders(FailingDataProviderTest.java:20)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.duplicateDataProviders() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProvider STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: expected exception from @DP
    	at test.dataprovider.FailingDataProviderSample.throwsExpectedException(FailingDataProviderSample.java:11)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProvider(FailingDataProviderTest.java:13)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProvider() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProvider() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProviderWithInvocationNumber() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test2() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.allMethodsShouldBeInvoked() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.booleanTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classInjectionTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.configurationAndDataProvidersTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorOrMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.createDataTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.dataProviderAsTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.emptyDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.failedDataProviderShouldCauseSkip() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.iTestNGMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.inheritedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.instanceDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.methodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.oneDimDataProviderShouldWork() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.parallelDataProviderSample() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException STANDARD_ERROR
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.should_prefer_dataProvider_explicit_name() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderSampleWithoutGuiceTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testExceptions() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testInstanceFactoryTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testNG411Test() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.unnamedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.varArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore1.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore2.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestAfter.testAfter() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationInheritGroupsSampleTest.test1() with result: SUCCESS
Executed test ==> test.nested.GarfTest.testGarf() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue599() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue862() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.g1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.run() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.verify() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsThatStartWithTest() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsWithSetup() with result: SUCCESS
Executed test ==> test.JUnitTest1.setNameShouldBeInvoked() with result: SUCCESS
Executed test ==> test.JUnitTest1.setUpFailingShouldCauseMethodsToBeSkipped() with result: SUCCESS
Executed test ==> test.JUnitTest1.testAbstract() with result: SUCCESS
Executed test ==> test.JUnitTest1.testNewInstance() with result: SUCCESS
Executed test ==> test.JUnitTest1.testSuite() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing2() with result: SUCCESS
Executed test ==> test.CommandLineTest.suiteNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testMethodParameter() with result: SUCCESS
Executed test ==> test.CommandLineTest.testNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testUseDefaultListenersArgument() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[0]([Ljava.lang.Class;@1c15dfe4, [Ljava.lang.String;@5d77f721, [Ljava.lang.String;@2697036, [Ljava.lang.String;@79ed51da)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[1]([Ljava.lang.Class;@1b741249, [Ljava.lang.String;@1f777a95, [Ljava.lang.String;@2c2b86dd, [Ljava.lang.String;@44ce45ea)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[2]([Ljava.lang.Class;@7bfe7f9c, [Ljava.lang.String;@38f58b8d, [Ljava.lang.String;@aa34bbb, [Ljava.lang.String;@4253ccbe)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[3]([Ljava.lang.Class;@6689417b, [Ljava.lang.String;@13cdba7f, [Ljava.lang.String;@eb2874e, [Ljava.lang.String;@5491ab7f)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[4]([Ljava.lang.Class;@3f586836, [Ljava.lang.String;@19ae13d0, [Ljava.lang.String;@2d006367, [Ljava.lang.String;@317473a6)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[5]([Ljava.lang.Class;@5856fcfb, [Ljava.lang.String;@31f160ec, [Ljava.lang.String;@74f97c9f, [Ljava.lang.String;@28440ebb)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[6]([Ljava.lang.Class;@6a21fad1, [Ljava.lang.String;@6e540ba, [Ljava.lang.String;@62427482, [Ljava.lang.String;@3ae9303a)() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.easyGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.reporterWithSpockSampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.specialNameGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.spockSampleShouldWork() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testDOSPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testUnixPathResolution() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testA() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testAB() with result: SUCCESS
Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInConfigurationMethods() with result: SUCCESS

TestNG > SkipExceptions > test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 3, Failures: 1, Skips: 1
    ===============================================

Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods() with result: SUCCESS
Executed test ==> test.skipex.SkipAndExpectedTest.shouldSkip() with result: SUCCESS

TestNG > RetryAnalyzer > test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts STANDARD_OUT
    Test Called : Test3
    Test Called : Test2
    Test Called : Test7
    Test Called : Test0
    Test Called : Test8
    Test Called : Test9
    Test Called : Test4
    Test Called : Test6
    Test Called : Test1
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
Executed test ==> test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithNonzeroOnFailure() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroAfterSuccessfulRetry() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroOnSuccess() with result: SUCCESS
Executed test ==> test.retryAnalyzer.dataprovider.RetryAnalyzerWithDataProviderTest.testRetryCounts() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldNotRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.noMethodsShouldRun() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.nullMethodInterceptorWorksInTestngXml() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.shouldNotLockUpWithInterceptorThatRemovesMethods() with result: SUCCESS
Executed test ==> test.methodinterceptors.Issue392Test.AfterClass_method_should_be_fired_when_IMethodInterceptor_removes_test_methods() with result: SUCCESS
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptors() with result: SUCCESS

TestNG > MethodInterceptor > test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsMapShouldFail() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricScalar() with result: SUCCESS
Executed test ==> org.testng.AssertTest.mapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullCollectionAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertNoOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.setAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_1() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_2() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_3() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.doubleNaNAssertion() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsDetectsTypeMismatchesViaExplicitTypeHint() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsIncludesAnInformativeDefaultMessage() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsRequiresAnExceptionToBeThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsReturnsTheSameObjectThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsWrapsAndPropagatesUnexpectedExceptions() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.intArray_Issue4() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderFailure() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderSuccess() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.setsSuccess() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArrayAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInIterablesAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListAndMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideIterableAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeepWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertNotEquals() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoin() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.escapeUnicode() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.joinTwoStringsWithJoinStrings() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethods() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethodsWhenOverrdingIsInvolved() with result: SUCCESS
Executed test ==> test.issue1430.TestFileToClass.testFileToClass() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$RedundantGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$UniqueGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithRedundantGroups() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithUniqueGroups() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[0]([Ljava.lang.Class;@17b80a2e, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[1]([Ljava.lang.Class;@5275cf15, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[2]([Ljava.lang.Class;@398ceb03, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[3]([Ljava.lang.Class;@30c3b4b5, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[4]([Ljava.lang.Class;@5d0c6973, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[5]([Ljava.lang.Class;@36dc9283, 4, 0, 4)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[6]([Ljava.lang.Class;@424c9050, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[7]([Ljava.lang.Class;@5df2d507, 1, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[8]([Ljava.lang.Class;@14c9a4b0, 2, 3, 3)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[9]([Ljava.lang.Class;@6559157, 0, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[10]([Ljava.lang.Class;@4fd8a718, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[11]([Ljava.lang.Class;@3ff51019, 8, 0, 8)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[12]([Ljava.lang.Class;@1655a201, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithTest.nestedA() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithInheritedTest.nestedWithInheritedTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceWithNoModules() with result: SUCCESS
Executed test ==> test.guice.GuiceInheritanceTest.singletonShouldWork() with result: SUCCESS
Executed test ==> test.guice.GuiceModuleFactoryTest.singletonShouldWork() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingExtendedListenerInstance() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingSimpleListenerInstance() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[0](a1)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[1](a2)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[2](a3)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[3](a4)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[0](goodWithDoctype.xml, true)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[2](badWithDoctype.xml, false)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[4](issue174.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroups() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroupsWithRun() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkNoError STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkNoError() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkTestNamesForProgrammaticSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkProgrammaticSuitesFails() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifyBeforeGroupUseAppropriateInstance() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifySingleInvocation() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyBothAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyIteratorDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyParametersAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassThreadTest.beforeClassMethodsShouldRunInParallel() with result: SUCCESS
Executed test ==> test.configuration.MethodCallOrderTest.realTest() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassWithDisabledTest.afterClassShouldRunEvenWithDisabledMethods() with result: SUCCESS
Executed test ==> test.configuration.BeforeTestOrderingTest.verifyBeforeTestOrdering() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.test() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2() with result: SUCCESS
Executed test ==> test.configuration.SuiteFactoryOnceTest.suiteMethodsShouldOnlyRunOnce() with result: SUCCESS
Executed test ==> test.configuration.SuiteTest.test1() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[0]({two=orld, one=ello}, H{{one}} W{{two}}, Hello World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[1]({}, E{{#foo}}xxx{{/foo}}lephant, Elephant)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[2]({}, Hello
{{#foo}}@
{{/foo}}World, Hello
World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[3]({day=Monday, person=test.mustache.MustacheTest$Person@5763792a}, Hello {{#person}}{{name}}{{/person}}, {{day}}, Hello John, Monday)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[4]({name=Carl, person=test.mustache.MustacheTest$Person@296a6942}, Hello {{#person}}{{name}}{{/person}}, {{name}}, Hello John, Carl)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[5]({people=[test.mustache.MustacheTest$Person@1dac263d, test.mustache.MustacheTest$Person@67767cb3]}, People:@{{#people}}-{{/people}}!, People:@--!)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[6]({ages=[test.mustache.MustacheTest$Age@7cee9309, test.mustache.MustacheTest$Age@fdf67], people=[test.mustache.MustacheTest$Person@1dac263d, test.mustache.MustacheTest$Person@67767cb3]}, :@{{#people}}{{name}}{{#ages}}{{age}}{{/ages}}@{{/people}}!_, :@Carl4243@Christopher4243@!_)() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedClasses() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedMethods() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedWithExcludedGroups() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test1() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2_fails() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testAssertAllCount() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testOnSucceedAndFailureCalled() with result: SUCCESS
Executed test ==> test.enable.EnableTest.disabled_methods_should_not_be_run() with result: SUCCESS
Executed test ==> test.enable.EnableTest.issue420() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.complexITestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testOnClassFromReporter() with result: SUCCESS
Executed test ==> test.name.github1046.TestCustomNamesForTests.testCustomTestNames() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatAllEventsForATestMethodInClassInstanceExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTwoInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThreeInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
:check

BUILD SUCCESSFUL

Total time: 4 mins 33.694 secs

travis_time:end:0a0896ce:start=1499413441526737145,finish=1499413715636819061,duration=274110081916[0K
[32;1mThe command "./gradlew check --stacktrace" exited with 0.[0m
travis_fold:start:before_cache.1[0Ktravis_time:start:0bef230a[0K$ rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock

travis_time:end:0bef230a:start=1499413715642483442,finish=1499413715648509950,duration=6026508[0Ktravis_fold:end:before_cache.1[0Ktravis_fold:start:before_cache.2[0Ktravis_time:start:0065b518[0K$ rm -fr $HOME/.gradle/caches/*/plugin-resolution/

travis_time:end:0065b518:start=1499413715654784712,finish=1499413715659778633,duration=4993921[0Ktravis_fold:end:before_cache.2[0Ktravis_fold:start:cache.2[0Kstore build cache
travis_time:start:28407288[0K
travis_time:end:28407288:start=1499413715664831322,finish=1499413715668875553,duration=4044231[0Ktravis_time:start:1a0ca1ec[0K[32;1mchange detected (content changed, file is created, or file is deleted):
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.bin
/home/travis/.gradle/caches/3.4/fileHashes/fileHashes.lock

[0m
[32;1mchanges detected, packing new archive[0m
.
.
[32;1muploading archive[0m

travis_time:end:1a0ca1ec:start=1499413715673624462,finish=1499413737925191033,duration=22251566571[0Ktravis_fold:end:cache.2[0Ktravis_fold:start:after_success.1[0Ktravis_time:start:16367f4d[0K$ ./travis.sh deploy
Deploy skipped: Only on Oracle JDK7

travis_time:end:16367f4d:start=1499413737930666080,finish=1499413737936825429,duration=6159349[0Ktravis_fold:end:after_success.1[0Ktravis_fold:start:after_success.2[0Ktravis_time:start:05f08446[0K$ ./travis.sh sonarqube
Initialized native services in: /home/travis/.gradle/native
Connected to daemon DaemonInfo{pid=2326, address=[47882af6-ca1c-4208-abe8-a8f73d8ef2b2 port:46039, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1499413442325, context=DefaultDaemonContext[uid=aec3347f-36c3-4a6d-b5ee-5cdc068717f9,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/travis/.gradle/daemon,pid=2326,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=UTF-8,-Duser.country=US,-Duser.language=en,-Duser.variant]}. Dispatching request Build{id=bcb61fe7-23f3-4365-b1fc-7c603c8a0cd1.1, currentDir=/home/travis/build/cbeust/testng}.
Received result org.gradle.launcher.daemon.protocol.BuildStarted@f99f5e0 from daemon DaemonInfo{pid=2326, address=[47882af6-ca1c-4208-abe8-a8f73d8ef2b2 port:46039, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1499413442325, context=DefaultDaemonContext[uid=aec3347f-36c3-4a6d-b5ee-5cdc068717f9,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/travis/.gradle/daemon,pid=2326,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=UTF-8,-Duser.country=US,-Duser.language=en,-Duser.variant]} (build should be starting).
The client will now receive all logging from the daemon (pid: 2326). The daemon log file: /home/travis/.gradle/daemon/3.4/daemon-2326.out.log
Starting 3rd build in daemon [uptime: 5 mins 18.679 secs, performance: 100%, no major garbage collections]
Executing build with daemon context: DefaultDaemonContext[uid=aec3347f-36c3-4a6d-b5ee-5cdc068717f9,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/travis/.gradle/daemon,pid=2326,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=UTF-8,-Duser.country=US,-Duser.language=en,-Duser.variant]
Creating new cache for plugin-use-metadata, path /home/travis/.gradle/caches/3.4/plugin-resolution/plugin-use-metadata.bin, access org.gradle.cache.internal.DefaultCacheAccess@4771fa9d
Creating new cache for client-status, path /home/travis/.gradle/caches/3.4/plugin-resolution/client-status.bin, access org.gradle.cache.internal.DefaultCacheAccess@4771fa9d
Starting Build
Settings evaluated using settings file '/home/travis/build/cbeust/testng/settings.gradle'.
Projects loaded. Root project using build file '/home/travis/build/cbeust/testng/build.gradle'.
Included projects: [root project 'testng']
Evaluating root project 'testng' using build file '/home/travis/build/cbeust/testng/build.gradle'.
Creating new cache for metadata-2.23/module-metadata, path /home/travis/.gradle/caches/modules-2/metadata-2.23/module-metadata.bin, access org.gradle.cache.internal.DefaultCacheAccess@5a195d06
Creating new cache for metadata-2.23/artifact-at-repository, path /home/travis/.gradle/caches/modules-2/metadata-2.23/artifact-at-repository.bin, access org.gradle.cache.internal.DefaultCacheAccess@5a195d06
Using 32 worker leases.
All projects evaluated.
Configuring artifactoryPublish task ':artifactoryPublish' for project 'testng'.
Selected primary task 'sonarqube' from project :
Creating new cache for fileHashes, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/fileHashes.bin, access org.gradle.cache.internal.DefaultCacheAccess@56eebda8
Creating new cache for annotation-processors, path /home/travis/build/cbeust/testng/.gradle/3.4/fileContent/annotation-processors.bin, access org.gradle.cache.internal.DefaultCacheAccess@57edf8f6
Tasks to be executed: [task ':compileJava', task ':compileGroovy', task ':processResources', task ':classes', task ':compileTestJava', task ':compileTestGroovy', task ':processTestResources', task ':testClasses', task ':test', task ':sonarqube']
Creating new cache for jvmClassSignatures, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/jvmClassSignatures.bin, access org.gradle.cache.internal.DefaultCacheAccess@56eebda8
Creating new cache for fileSnapshots, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/fileSnapshots.bin, access org.gradle.cache.internal.DefaultCacheAccess@56eebda8
Creating new cache for taskHistory, path /home/travis/build/cbeust/testng/.gradle/3.4/taskHistory/taskHistory.bin, access org.gradle.cache.internal.DefaultCacheAccess@56eebda8
:compileJava (Thread[Daemon worker,5,main]) started.
:compileJava
Putting task artifact state for task ':compileJava' into context took 0.001 secs.
Task :compileJava class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileJava actions class loader hash: 483ba3697bb1616b2939f2a370280d0e
Skipping task ':compileJava' as it is up-to-date (took 0.02 secs).
:compileJava UP-TO-DATE
:compileJava (Thread[Daemon worker,5,main]) completed. Took 0.023 secs.
:compileGroovy (Thread[Daemon worker,5,main]) started.
:compileGroovy
Putting task artifact state for task ':compileGroovy' into context took 0.0 secs.
file or directory '/home/travis/build/cbeust/testng/src/main/groovy', not found
Skipping task ':compileGroovy' as it has no source files and no previous output files.
:compileGroovy NO-SOURCE
:compileGroovy (Thread[Daemon worker,5,main]) completed. Took 0.002 secs.
:processResources (Thread[Daemon worker,5,main]) started.
:processResources
Putting task artifact state for task ':processResources' into context took 0.0 secs.
Task :processResources class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :processResources actions class loader hash: 921e077e8d7918b0e60fb90df8b9d794
Skipping task ':processResources' as it is up-to-date (took 0.006 secs).
:processResources UP-TO-DATE
:processResources (Thread[Daemon worker,5,main]) completed. Took 0.007 secs.
:classes (Thread[Daemon worker,5,main]) started.
:classes
Skipping task ':classes' as it has no actions.
:classes UP-TO-DATE
:classes (Thread[Daemon worker,5,main]) completed. Took 0.001 secs.
:compileTestJava (Thread[Daemon worker,5,main]) started.
:compileTestJava
Putting task artifact state for task ':compileTestJava' into context took 0.0 secs.
Task :compileTestJava class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileTestJava actions class loader hash: 10a55fdc909a1d0579fff2771b7a973b
Skipping task ':compileTestJava' as it is up-to-date (took 0.051 secs).
:compileTestJava UP-TO-DATE
:compileTestJava (Thread[Daemon worker,5,main]) completed. Took 0.052 secs.
:compileTestGroovy (Thread[Daemon worker,5,main]) started.
:compileTestGroovy
Putting task artifact state for task ':compileTestGroovy' into context took 0.0 secs.
Task :compileTestGroovy class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :compileTestGroovy actions class loader hash: 10a55fdc909a1d0579fff2771b7a973b
Skipping task ':compileTestGroovy' as it is up-to-date (took 0.006 secs).
:compileTestGroovy UP-TO-DATE
:compileTestGroovy (Thread[Daemon worker,5,main]) completed. Took 0.008 secs.
:processTestResources (Thread[Daemon worker,5,main]) started.
:processTestResources
Putting task artifact state for task ':processTestResources' into context took 0.0 secs.
Task :processTestResources class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :processTestResources actions class loader hash: 921e077e8d7918b0e60fb90df8b9d794
Skipping task ':processTestResources' as it is up-to-date (took 0.02 secs).
:processTestResources UP-TO-DATE
:processTestResources (Thread[Daemon worker,5,main]) completed. Took 0.022 secs.
:testClasses (Thread[Daemon worker,5,main]) started.
:testClasses
Skipping task ':testClasses' as it has no actions.
:testClasses UP-TO-DATE
:testClasses (Thread[Daemon worker,5,main]) completed. Took 0.001 secs.
:test (Thread[Daemon worker,5,main]) started.
:test
Putting task artifact state for task ':test' into context took 0.001 secs.
Task :test class loader hash: 133c7c2b45305add2339d45bd60790fc
Task :test actions class loader hash: 4ee8aba1cf986be6f98f567428174ee5
Executing task ':test' (up-to-date check took 0.045 secs) due to:
  Value of input property 'systemProperties' has changed for task ':test'
Starting process 'Gradle Test Executor 1'. Working directory: /home/travis/build/cbeust/testng Command: /usr/lib/jvm/java-8-oracle/bin/java -Dawt.toolkit=sun.awt.X11.XToolkit -Dfile.encoding.pkg=sun.io -Dfile.separator=/ -Djava.awt.graphicsenv=sun.awt.X11GraphicsEnvironment -Djava.awt.printerjob=sun.print.PSPrinterJob -Djava.class.path=/home/travis/.gradle/wrapper/dists/gradle-3.4-bin/aeufj4znodijbvwfbsq3044r0/gradle-3.4/lib/gradle-launcher-3.4.jar -Djava.class.version=52.0 -Djava.endorsed.dirs=/usr/lib/jvm/java-8-oracle/jre/lib/endorsed -Djava.ext.dirs=/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext -Djava.home=/usr/lib/jvm/java-8-oracle/jre -Djava.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib -Djava.runtime.name=Java(TM) SE Runtime Environment -Djava.runtime.version=1.8.0_31-b13 -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Djava.specification.name=Java Platform API Specification -Djava.specification.vendor=Oracle Corporation -Djava.specification.version=1.8 -Djava.vendor=Oracle Corporation -Djava.vendor.url=http://java.oracle.com/ -Djava.vendor.url.bug=http://bugreport.sun.com/bugreport/ -Djava.version=1.8.0_31 -Djava.vm.info=mixed mode -Djava.vm.name=Java HotSpot(TM) 64-Bit Server VM -Djava.vm.specification.name=Java Virtual Machine Specification -Djava.vm.specification.vendor=Oracle Corporation -Djava.vm.specification.version=1.8 -Djava.vm.vendor=Oracle Corporation -Djava.vm.version=25.31-b07 -Dlibrary.jansi.path=/home/travis/.gradle/native/jansi/1.14/linux64 -Dline.separator=
 -Dorg.gradle.appname=gradlew -Dos.arch=amd64 -Dos.name=Linux -Dos.version=4.8.12-040812-generic -Dpath.separator=: -Dsonar.login=[secure] -Dsun.arch.data.model=64 -Dsun.boot.class.path=/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes -Dsun.boot.library.path=/usr/lib/jvm/java-8-oracle/jre/lib/amd64 -Dsun.cpu.endian=little -Dsun.cpu.isalist -Dsun.io.unicode.encoding=UnicodeLittle -Dsun.java.command=org.gradle.launcher.daemon.bootstrap.GradleDaemon 3.4 -Dsun.java.launcher=SUN_STANDARD -Dsun.jnu.encoding=UTF-8 -Dsun.management.compiler=HotSpot 64-Bit Tiered Compilers -Dsun.os.patch.level=unknown -Dtest.resources.dir=build/resources/test/ -Duser.dir=/home/travis/build/cbeust/testng -Duser.home=/home/travis -Duser.name=travis -Duser.timezone=Etc/UTC -javaagent:build/tmp/expandedArchives/org.jacoco.agent-0.7.8.jar_5d9j4zag85dqrmizz3ut3i065/jacocoagent.jar=destfile=build/jacoco/test.exec,append=true,inclnolocationclasses=false,dumponexit=true,output=file,jmx=false -Xmx1500m -Dfile.encoding=UTF-8 -Djava.io.tmpdir=/tmp -Duser.country=US -Duser.language=en -Duser.variant -ea -cp /home/travis/.gradle/caches/3.4/workerMain/gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain 'Gradle Test Executor 1'
Successfully started process 'Gradle Test Executor 1'
Initialized native services in: /home/travis/.gradle/native
Gradle Test Executor 1 started executing tests.

Gradle Test Executor 1 STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter
    [TestNG] [WARN] Ignoring duplicate listener : org.testng.internal.ConsoleReporter

TestNG Running Junit Tests > Junit via TestNG XML STANDARD_ERROR
    org.testng.TestNGException: 
    Failure in JUnit mode for class test.junit.SetNameTest
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:114)
    	at org.testng.junit.JUnit4TestRunner.run(JUnit4TestRunner.java:70)
    	at org.testng.TestRunner$1.run(TestRunner.java:669)
    	at org.testng.TestRunner.runJUnitWorkers(TestRunner.java:969)
    	at org.testng.TestRunner.privateRunJUnit(TestRunner.java:700)
    	at org.testng.TestRunner.run(TestRunner.java:601)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1310)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.AssertionError
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter.onTestStart(TestNGTestResultProcessorAdapter.java:116)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:89)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory$AdaptedListener.invoke(TestNGListenerAdapterFactory.java:83)
    	at com.sun.proxy.$Proxy5.onTestStart(Unknown Source)
    	at org.testng.junit.JUnit4TestRunner$RL.testStarted(JUnit4TestRunner.java:207)
    	at org.junit.runner.notification.SynchronizedRunListener.testStarted(SynchronizedRunListener.java:49)
    	at org.junit.runner.notification.RunNotifier$3.notifyListener(RunNotifier.java:121)
    	at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:72)
    	at org.junit.runner.notification.RunNotifier.fireTestStarted(RunNotifier.java:118)
    	at org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(JUnit38ClassRunner.java:37)
    	at junit.framework.TestResult.startTest(TestResult.java:168)
    	at junit.framework.TestResult.run(TestResult.java:119)
    	at junit.framework.TestCase.run(TestCase.java:129)
    	at junit.framework.TestSuite.runTest(TestSuite.java:252)
    	at junit.framework.TestSuite.run(TestSuite.java:247)
    	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
    	at org.testng.junit.JUnit4TestRunner.start(JUnit4TestRunner.java:82)
    	... 43 more
Executed test ==> test.guice.GuiceParentModuleTest.testService() with result: SUCCESS
Executed test ==> NoPackageTest.test() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG3.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1.test3TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test1TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test1TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test1TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test2TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG2NoPriority.test3TestNG2() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test2TestNG1() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test2TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG3NoPriority.test3TestNG3() with result: SUCCESS
Executed test ==> test.github1336.TestNG1NoPriority.test3TestNG1() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testNonExistentParameter[0](null)() with result: SUCCESS
Executed test ==> test.parameters.ParameterSample.testSingleString[0](Cedric)() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.noNPEInCountingResults STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.noNPEInCountingResults() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.parameters.ParamInheritanceTest.parameterInheritanceAndOverriding() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.beforeMethodWithParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.enumParameters() with result: SUCCESS

TestNG > Regression1 > test.parameters.ParameterTest.invalidEnumParameters STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.IllegalArgumentException: No enum constant test.parameters.EnumParameterSample.MyEnum.INVALID_VALUE
    	at java.lang.Enum.valueOf(Enum.java:238)
    	at org.testng.internal.Parameters.convertType(Parameters.java:364)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:231)
    	at org.testng.internal.Parameters.createParameters(Parameters.java:494)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:620)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.parameters.ParameterTest.invalidEnumParameters(ParameterTest.java:86)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.parameters.ParameterTest.invalidEnumParameters() with result: SUCCESS
Executed test ==> test.parameters.ParameterTest.stringSingle() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod1() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod2() with result: SUCCESS
Executed test ==> test.CtorCalledOnce.testMethod3() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptions() with result: SUCCESS
Executed test ==> test.expectedexceptions.ExpectedExceptionsTest.expectedExceptionsDeprecatedSyntax() with result: SUCCESS
Executed test ==> test.access.PrivateAccessConfigurationMethods.allAccessModifiersConfiguration() with result: SUCCESS
Executed test ==> test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout() with result: SUCCESS
Executed test ==> test.Test1.excludedGroups() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsSimple() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithCycle() with result: SUCCESS
Executed test ==> test.Test1.groupsOfGroupsWithIndirections() with result: SUCCESS
Executed test ==> test.Test1.includedGroups() with result: SUCCESS
Executed test ==> test.Test1.logger() with result: SUCCESS
Executed test ==> test.Test1.regexp() with result: SUCCESS
Executed test ==> test.CountTest.skippedMethodsShouldBeCounted() with result: SUCCESS
Executed test ==> test.StaticTest$InnerStaticClass.test() with result: SUCCESS
Executed test ==> test.MethodTest.excludeMethodsOnly() with result: SUCCESS
Executed test ==> test.MethodTest.excludePackage() with result: SUCCESS
Executed test ==> test.MethodTest.includeMethodsOnly() with result: SUCCESS
Executed test ==> test.EclipseTest.xmlFileShouldBeRunAtItsPlaceAndNotCopied[0](org.testng.TestRunner@4a7dd256)() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS
Executed test ==> test.ReporterApiTest.testApi() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldBeCorrect() with result: SUCCESS
Executed test ==> test.GraphTest.cycleShouldFail() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessors() with result: SUCCESS
Executed test ==> test.GraphTest.findPredecessorsTiming() with result: SUCCESS
Executed test ==> test.GraphTest.sort() with result: SUCCESS
Executed test ==> test.reports.UniqueReporterInjectionTest.testPruningOfDuplicateReporter() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test2() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test3() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test4() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.test8() with result: SUCCESS
Executed test ==> test.DynamicGraphTest.testOrderingOfEdgesWithSameWeight() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitReportReporterWithMultipleClasses() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testJUnitXMLReporter() with result: SUCCESS
Executed test ==> test.junitreports.JUnitReportsTest.testTestCaseOrderingInJUnitReportReporterWhenPrioritiesDefined() with result: SUCCESS
Executed test ==> test.ReflectionHelperTest.testMethodCount() with result: SUCCESS
Executed test ==> test.abstractmethods.AbstractTest.abstractShouldRun() with result: SUCCESS
Executed test ==> test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest.testPrivateMethod() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeAndExcludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeAndExcludeShouldWork() with result: SUCCESS

TestNG > Regression2 > test.override.OverrideTest.overrideIncludeShouldWork STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.override.OverrideTest.overrideIncludeShouldWork() with result: SUCCESS
Executed test ==> test.multiple.TestMultiple.multiple() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential1() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityInSequential2() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependencyAndFailures() with result: SUCCESS
Executed test ==> test.priority.PriorityTest.priorityWithDependsOnMethods() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testOne() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testThree() with result: SUCCESS
Executed test ==> test.ClassConfigurations.testTwo() with result: SUCCESS
Executed test ==> test.NestedStaticTest.nestedClassShouldBeIncluded() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withAlwaysRunAfterMethod() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunAfter() with result: SUCCESS
Executed test ==> test.alwaysrun.AlwaysRunTest.withoutAlwaysRunBefore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationListenerTest.listenerShouldBeCalled() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestClassFails() with result: SUCCESS
Executed test ==> test.conffailure.ConfigurationFailure.beforeTestSuiteFails() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[0]([Ljava.lang.String;@62a249e, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[1]([Ljava.lang.String;@600ad96d, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[2]([Ljava.lang.String;@12531ef, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[3]([Ljava.lang.String;@17e2e850, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[4]([Ljava.lang.String;@110c86ae, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite1[5]([Ljava.lang.String;@53b32b8e, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[0]([Ljava.lang.String;@31c7ffea, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[1]([Ljava.lang.String;@70c154d7, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[2]([Ljava.lang.String;@600fe0ae, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[3]([Ljava.lang.String;@33f60552, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[4]([Ljava.lang.String;@4af08632, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeFromSuite2[5]([Ljava.lang.String;@7d105826, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.excludeTestAndSuite2Xml() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[0]([Ljava.lang.String;@24580be9, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[1]([Ljava.lang.String;@3087124a, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[2]([Ljava.lang.String;@3d6d52fd, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[3]([Ljava.lang.String;@57806e5, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[4]([Ljava.lang.String;@5ea8f278, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite0[5]([Ljava.lang.String;@4d893c1a, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[0]([Ljava.lang.String;@2ac476ba, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[1]([Ljava.lang.String;@2e760c1f, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[2]([Ljava.lang.String;@54bf4039, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[3]([Ljava.lang.String;@7bc4d798, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[4]([Ljava.lang.String;@3f592ecb, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite1[5]([Ljava.lang.String;@6a9f533b, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[0]([Ljava.lang.String;@916cbf0, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[1]([Ljava.lang.String;@2a8c0ed3, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[2]([Ljava.lang.String;@58027568, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[3]([Ljava.lang.String;@7db771f5, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[4]([Ljava.lang.String;@694e890d, true)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeFromSuite2[5]([Ljava.lang.String;@3d285e5b, false)() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Cli() with result: SUCCESS
Executed test ==> test.groupinvocation.GroupSuiteTest.includeTestAndSuite1Xml() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithClassTest() with result: SUCCESS
Executed test ==> test.superclass.MainTest.baseMethodIsCalledWithMethodTest() with result: SUCCESS
Executed test ==> test.StaticTest.test() with result: SUCCESS
Executed test ==> test.superclass.Test3.shouldExcludeBaseMethods() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWork() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderShouldWorkWithConfigurationListener() with result: SUCCESS
Executed test ==> test.serviceloader.ServiceLoaderTest.serviceLoaderWithNoClassLoader() with result: SUCCESS
Executed test ==> test.failures.FailuresTest.shouldIncludeFailedMethodsFromBaseClass() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineExcludedGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.commandLineGroupsShouldOverrideXml() with result: SUCCESS
Executed test ==> test.commandline.CommandLineOverridesXml.shouldRunBothMethods() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyConfigurationOthers() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyExpectedExceptions() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyFactory() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationAfter() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyNewConfigurationBefore() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyParameters() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestClassLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestConstructorLevel() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotationSampleTest.verifyTestMethodLevel() with result: SUCCESS
Executed test ==> test.jason.MainTest.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyConfigurationGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnGroupsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestDependsOnMethodsInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance() with result: SUCCESS
Executed test ==> test.mannotation.MAnnotation2SampleTest.verifyTestGroupsInheritance() with result: SUCCESS
Executed test ==> test.bug90.Bug90Test.afterClassShouldRun() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryNotParallel() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelMethods() with result: SUCCESS
Executed test ==> test.thread.FactoryTest.verifyFactoryParallelTests() with result: SUCCESS
Executed test ==> test.bug92.Bug92Test.BeforeTestShouldRunOnce() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySequential3() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded1() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded2() with result: SUCCESS
Executed test ==> test.thread.SequentialTest.verifySingleThreaded3() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.suiteReturnValueTestShouldNotBeRun() with result: SUCCESS
Executed test ==> test.ReturnValueTest.testReturnValueTestShouldBeRun() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[2](true, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[3](false, tests, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[4](true, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[5](false, methods, 4)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[6](true, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[7](false, classes, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[8](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallel[9](false, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[0](true, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[1](false, none, 1)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[2](true, instances, 2)() with result: SUCCESS
Executed test ==> test.thread.ParallelTestTest.verifyParallelWithFactory[3](false, instances, 2)() with result: SUCCESS

TestNG > Regression2 > test.groupbug.GroupBugTest.shouldOrderByClass STANDARD_OUT
    RUN class test.groupbug.ITCaseOne.beforeClass()
    RUN class test.groupbug.ITCaseOne.one1()
    RUN class test.groupbug.ITCaseOne.one2()
    RUN class test.groupbug.ITCaseOne.afterClass()
    RUN class test.groupbug.ITCaseTwo.beforeClass()
    RUN class test.groupbug.ITCaseTwo.two1()
    RUN class test.groupbug.ITCaseTwo.two2()
    RUN class test.groupbug.ITCaseTwo.afterClass()
    ===== Invoked methods
      ITCaseOne.beforeClassOne()[pri:0, instance:test.groupbug.ITCaseOne@ece0a69] 248384105
        ITCaseOne.one1()[pri:0, instance:test.groupbug.ITCaseOne@ece0a69] 248384105
        ITCaseOne.one2()[pri:0, instance:test.groupbug.ITCaseOne@ece0a69] 248384105
      ITCaseOne.afterClassOne()[pri:0, instance:test.groupbug.ITCaseOne@ece0a69] 248384105
      ITCaseTwo.beforeClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@bf8e70b] 200861451
        ITCaseTwo.two1()[pri:0, instance:test.groupbug.ITCaseTwo@bf8e70b] 200861451
        ITCaseTwo.two2()[pri:0, instance:test.groupbug.ITCaseTwo@bf8e70b] 200861451
      ITCaseTwo.afterClassTwo()[pri:0, instance:test.groupbug.ITCaseTwo@bf8e70b] 200861451
    =====

    ===============================================
    Command line suite
    Total tests run: 4, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.groupbug.GroupBugTest.shouldOrderByClass() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldNotUseThreadsIfNotUsingParallel() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseDefaultDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.thread.DataProviderThreadPoolSizeTest.shouldUseSpecifiedDataProviderThreadCount() with result: SUCCESS
Executed test ==> test.parameters.ShadowTest.parametersShouldNotBeShadowed() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test2Threads() with result: SUCCESS
Executed test ==> test.thread.MultiThreadedDependentTest.test3Threads() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[0](testOverrideSuite, PASS_TEST)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[1](classOverrideSuite, PASS_CLASS)() with result: SUCCESS
Executed test ==> test.parameters.ParameterOverrideTest.testOverrideParameter[2](includeOverrideClass, PASS_INCLUDE)() with result: SUCCESS
Executed test ==> test.thread.TrueParallelTest.shouldRunInParallel() with result: SUCCESS
Executed test ==> test.reports.FailedReporterTest.failedFile() with result: SUCCESS
Executed test ==> test.github765.ExcludeSyntheticMethodsFromTemplateCallsTest.testMethod() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount1() with result: SUCCESS
Executed test ==> test.simple.IncludedExcludedTest.verifyIncludedExcludedCount2() with result: SUCCESS
Executed test ==> test.reports.ReportTest.directoryShouldBeSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.github1090() with result: SUCCESS
Executed test ==> test.reports.ReportTest.oneDirectoryPerSuite() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableEvenWithTimeOut() with result: SUCCESS
Executed test ==> test.reports.ReportTest.reportLogShouldBeAvailableWithListener() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[0](class test.reports.GitHub1148Sample, [Ljava.lang.String;@5f44df7e, [Ljava.lang.String;@4ff3023f)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.runFailedTestTwiceShouldBeConsistent[1](class test.reports.GitHub148Sample, [Ljava.lang.String;@7f0a070b, [Ljava.lang.String;@5c397ec2)() with result: SUCCESS
Executed test ==> test.reports.ReportTest.shouldHonorSuiteName() with result: SUCCESS
Executed test ==> test.reports.ReportTest.verifyIndex() with result: SUCCESS

TestNG > Regression2 > test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.annotationTransformerInXmlShouldBeRun() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerClass2() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerHasOnlyOneNonNullArgument() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationTransformerMethod() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyAnnotationWithoutTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyConfigurationTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyDataProviderTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyFactoryTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyInvocationCountTransformer() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyListenerAnnotationTransformerClass() with result: SUCCESS
Executed test ==> test.annotationtransformer.AnnotationTransformerTest.verifyMyParamTransformerOnlyOneNonNull() with result: SUCCESS

TestNG > Regression2 > test.xml.XmlVerifyTest.handleInvalidSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.xml.XmlVerifyTest.handleInvalidSuites() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.preserverOrderAttribute() with result: SUCCESS
Executed test ==> test.xml.XmlVerifyTest.simple() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue629_InvokedMethodDoesNotRecognizeConfigurationMethod() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.issue87_method_orderning_with_disable_test_class() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.testMethodsWithExpectedExceptionsShouldShowUpAsPass() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withFailure() with result: SUCCESS
Executed test ==> test.invokedmethodlistener.InvokedMethodListenerTest.withSuccess() with result: SUCCESS
Executed test ==> test.testng249.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.testng195.AfterMethodTest.testContextShouldBeInitialized() with result: SUCCESS
Executed test ==> test.regression.BeforeTestFailingTest.beforeTestFailingShouldCauseSkips() with result: SUCCESS
Executed test ==> test.testng285.TestNG285Test.verifyBug() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedAndSkippedMethodsShouldBeIncluded() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.failedMethodWithDataProviderShouldHaveInvocationNumbers() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigs() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsAmidstInheritance() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtSuiteLevel() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterTest.testExclusionOfPassedConfigsInvolvingGroupsAtTestLevel() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f1[0](org.testng.TestRunner@4a7dd256)() with result: SUCCESS
Executed test ==> test.attributes.AttributeTest.f2[0](org.testng.TestRunner@4a7dd256)() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyBaseClassTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyTestListener() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithAnnotation() with result: SUCCESS
Executed test ==> test.verify.VerifyTest.verifyWithoutAnnotation() with result: SUCCESS
Executed test ==> test.abstractconfmethod.C.test1() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.factoryPreserve() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.orderShouldBePreservedWithDependencies() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[0]([Ljava.lang.Class;@244c1f4b)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[1]([Ljava.lang.Class;@353b4b7d)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[2]([Ljava.lang.Class;@386ae30c)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[3]([Ljava.lang.Class;@3b791d53)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[4]([Ljava.lang.Class;@38dd598)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveClassOrder[5]([Ljava.lang.Class;@7ba16dc3)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[0]([Ljava.lang.String;@6b76e6c0)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[1]([Ljava.lang.String;@678f6458)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[2]([Ljava.lang.String;@629a6808)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[3]([Ljava.lang.String;@77fb563c)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[4]([Ljava.lang.String;@5c442097)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveMethodOrder[5]([Ljava.lang.String;@33d03640)() with result: SUCCESS
Executed test ==> test.preserveorder.PreserveOrderTest.preserveOrderValueShouldBeTheDefaultOne() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationInMixedMode() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationSkipWhenNoFailuresExist() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterScenariosTest.testFileCreationWhenFailuresExist() with result: SUCCESS
Executed test ==> test_result.GitHub1197Test.testGitHub1197() with result: SUCCESS
Executed test ==> test.failedreporter.FailedReporterParametersTest.failedSuiteShouldHaveParameters() with result: SUCCESS
Executed test ==> test.listeners.github1319.TestResultInstanceCheckTest.testInstances() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[0](class test.reports.ReporterLogSuccessSample, Listener: onTestSuccess)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[1](class test.reports.ReporterLogSkippedSample, Listener: onTestSkipped)() with result: SUCCESS
Executed test ==> test.reports.ReporterLogTest.shouldLogFromListener[2](class test.reports.ReporterLogFailureSample, Listener: onTestFailure)() with result: SUCCESS
Executed test ==> test.testng1396.ParallelByInstancesInterceptorTest.should_honor_interceptor_order_when_running_parallel_instances() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS
Executed test ==> test.testng387.TestNG387.testInvocationCounterIsCorrectForMethodWithDataProvider() with result: SUCCESS

TestNG > Regression2 > test.github1417.TestParamsInjectionInBeforeClass.testMethod STANDARD_OUT
    ...
    ... TestNG 6.11.1-SNAPSHOT by Cédric Beust (cedric@beust.com)
    ...

    PASSED: testMethod
    PASSED: testMethod

    ===============================================
        1417_test
        Tests run: 2, Failures: 0, Skips: 0
    ===============================================

    PASSED: testMethod

    ===============================================
        1417_test_regular
        Tests run: 1, Failures: 0, Skips: 0
    ===============================================


    ===============================================
    1417_suite
    Total tests run: 3, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.github1417.TestParamsInjectionInBeforeClass.testMethod() with result: SUCCESS
Executed test ==> test.testng1231.TestExecutionListenerInvocationOrder.testListenerOrder() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExists() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingAnnotations() with result: SUCCESS

TestNG > Regression2 > test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
    [TestNG] [WARN] Ignoring duplicate listener : test.testng1232.TestListenerFor1232
Executed test ==> test.testng1232.TestListenerInstances.testIfOnlyOneListenerInstanceExistsUsingListenerTag() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsUsingGroupsWithFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasExplicitSkipInConfiguration() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenClassHasMultipleFailures() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenConfigHasAlwaysRun() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInABaseClass() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testExceptionDetailsWhenFailuresExistInSuiteConfigs() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasException() with result: SUCCESS
Executed test ==> test.testng674.BeforeClassSkipExceptionTest.testIfTestMethodHasExceptionInInheritance() with result: SUCCESS
Executed test ==> test.testng106.TestNG106.testFailingBeforeSuiteShouldSkipAllTests() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterModificationFromListener() with result: SUCCESS
Executed test ==> test.issue107.Issue107Test.testSuiteParameterSetFromListener() with result: SUCCESS
Executed test ==> test.test111.Test1.testAbstract() with result: SUCCESS
Executed test ==> test.test111.Test1.test() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClasses() with result: SUCCESS
Executed test ==> test.testng173.TestNG173Test.orderShouldBePreservedInMethodsWithSameNameAndInDifferentClassesAndDifferentPackage() with result: SUCCESS
Executed test ==> test.listeners.github551.Test551.testExecutionTimeOfFailedConfig() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeTest.verify() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.f1() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.threadPoolAndTimeOutShouldFail() with result: SUCCESS
Executed test ==> test.thread.ThreadPoolSizeWithTimeOutTest.verify() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f1() with result: SUCCESS
Executed test ==> test.listeners.EndMillisShouldNotBeZeroTest.f2() with result: SUCCESS
Executed test ==> test.listeners.ResultEndMillisTest.endMillisShouldBeNonNull() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.aggregateListeners() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldBeOnlyRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkFromAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.classListenerShouldWorkWithManyTestMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.failureBeforeAfterMethod() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.invokedMethodListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerTest.listenerRegistration STANDARD_OUT
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
    [TestNG] [WARN] Ignoring duplicate listener : test.listeners.MultiListener
Executed test ==> test.listeners.ListenerTest.listenerRegistration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.listenerShouldBeCalledBeforeConfiguration() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodInterceptorShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.methodListenersShouldNotBeCalledForSkippedMethods() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.setStatusShouldWorkInListener() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.shouldAttachOnlyOneInstanceOfTheSameListenerClassPerTest() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenerInListernersAnnotationShouldBeRunOnce() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyIdenticalTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldBeOnlyRunOnceWithManyTests() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.suiteListenersShouldWork() with result: SUCCESS
Executed test ==> test.listeners.ListenerTest.testListenerCallInvocation() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndInvokedMethodListenerTest.bothListenersShouldRun() with result: SUCCESS
Executed test ==> test.listeners.SuiteAndConfigurationListenerTest.bothListenersShouldRun() with result: SUCCESS

TestNG > Listeners > test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.listeners.ListenerInXmlTest.listenerInXmlShouldBeInvoked() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerAnnotation() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithXml() with result: SUCCESS
Executed test ==> test.listeners.ExecutionListenerTest.executionListenerWithoutListener() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldFail() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSkip() with result: SUCCESS
Executed test ==> test.listeners.ConfigurationListenerTest.shouldSucceed() with result: SUCCESS

TestNG > Listeners > test.multiplelisteners.TestMaker.run STANDARD_ERROR
    [TestNG] Reporter test.multiplelisteners.SimpleReporter@1175b776 failed
    java.lang.RuntimeException: java.lang.NoSuchFieldException: m_configuration
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:31)
    	at org.testng.TestNG.generateReports(TestNG.java:1205)
    	at org.testng.TestNG.run(TestNG.java:1133)
    	at test.multiplelisteners.TestMaker.run(TestMaker.java:26)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    Caused by: java.lang.NoSuchFieldException: m_configuration
    	at java.lang.Class.getDeclaredField(Class.java:2062)
    	at test.multiplelisteners.SimpleReporter.generateReport(SimpleReporter.java:24)
    	... 52 more
Executed test ==> test.multiplelisteners.TestMaker.run() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnce() with result: SUCCESS
Executed test ==> test.listeners.github1130.GitHub1130Test.classListenerShouldBeOnlyInstantiatedOnceInMultiTestContext() with result: SUCCESS
Executed test ==> test.listeners.github1296.GitHub1296Test.test_number_of_call_of_configuration_listener() with result: SUCCESS

TestNG > Reflection STANDARD_OUT
    exactMatchDP:
    s0, [[Ljava.lang.Object;@69caa6c9
    s0, [[Ljava.lang.Object;@7b02696a
    s0, [[Ljava.lang.Object;@21bbfd37
    s0, [[Ljava.lang.Object;@3ea4d529
    s0, [[Ljava.lang.Object;@264c0da
    s1, [[Ljava.lang.Object;@6ac5b0c5
    s1, [[Ljava.lang.Object;@14e9baef
    s1, [[Ljava.lang.Object;@cfc38c6
    s1, [[Ljava.lang.Object;@28ba5b93
    s1, [[Ljava.lang.Object;@6f3e95d9
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[0]([[Ljava.lang.Object;@69caa6c9, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[1]([[Ljava.lang.Object;@7b02696a, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[2]([[Ljava.lang.Object;@21bbfd37, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[3]([[Ljava.lang.Object;@3ea4d529, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[4]([[Ljava.lang.Object;@264c0da, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s0())() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[5]([[Ljava.lang.Object;@6ac5b0c5, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[6]([[Ljava.lang.Object;@14e9baef, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[7]([[Ljava.lang.Object;@cfc38c6, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[8]([[Ljava.lang.Object;@28ba5b93, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(int))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.exactMatchTest[9]([[Ljava.lang.Object;@6f3e95d9, public abstract void test.reflect.ReflectionRecipesTest$ExactMatchTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,java.lang.reflect.Method))() with result: SUCCESS
    matchArrayEndingDP:
    s0, [[Ljava.lang.Object;@63ab3f55
    s0, [[Ljava.lang.Object;@3bda109f
    s0, [[Ljava.lang.Object;@45e0f656
    s0, [[Ljava.lang.Object;@3cba559f
    s0, [[Ljava.lang.Object;@6d184ca
    s1, [[Ljava.lang.Object;@6d642267
    s1, [[Ljava.lang.Object;@2f743bdb
    s1, [[Ljava.lang.Object;@410c8507
    s1, [[Ljava.lang.Object;@4bf1ae38
    s1, [[Ljava.lang.Object;@7caca3b
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[0]([[Ljava.lang.Object;@63ab3f55, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[1]([[Ljava.lang.Object;@3bda109f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,float[],org.testng.ITestResult))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[2]([[Ljava.lang.Object;@45e0f656, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[],org.testng.ITestContext))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[3]([[Ljava.lang.Object;@3cba559f, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(org.testng.ITestContext,org.testng.ITestResult,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[4]([[Ljava.lang.Object;@6d184ca, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s0(float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[5]([[Ljava.lang.Object;@6d642267, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,java.lang.Integer,org.testng.ITestResult,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[6]([[Ljava.lang.Object;@2f743bdb, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[7]([[Ljava.lang.Object;@410c8507, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,org.testng.ITestContext,org.testng.ITestResult,float[],org.testng.xml.XmlTest))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[8]([[Ljava.lang.Object;@4bf1ae38, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(int,float[]))() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.matchArrayEndingTest[9]([[Ljava.lang.Object;@7caca3b, public abstract void test.reflect.ReflectionRecipesTest$MatchArrayEndingTest.s1(org.testng.ITestContext,org.testng.ITestResult,int,org.testng.xml.XmlTest,float[],java.lang.reflect.Method))() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@3d15c20) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[0]([Lorg.testng.internal.reflect.Parameter;@3d15c20)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@ad240b8) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[1]([Lorg.testng.internal.reflect.Parameter;@ad240b8)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@210b75e4) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[2]([Lorg.testng.internal.reflect.Parameter;@210b75e4)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@512b5591) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    Out: [Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
Executed test ==> test.reflect.ReflectionRecipesTest.testFilters[3]([Lorg.testng.internal.reflect.Parameter;@512b5591)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@131b094f, [Ljava.lang.Object;@7aca800a) STANDARD_OUT
    In: [Parameter{index=0, type=test.reflect.TestContextJustForTesting, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[0]([Lorg.testng.internal.reflect.Parameter;@131b094f, [Ljava.lang.Object;@7aca800a)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@376bf5a4, [Ljava.lang.Object;@7aca800a) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, null, true]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[1]([Lorg.testng.internal.reflect.Parameter;@376bf5a4, [Ljava.lang.Object;@7aca800a)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@5295d633, [Ljava.lang.Object;@7aca800a) STANDARD_OUT
    In: [Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[2]([Lorg.testng.internal.reflect.Parameter;@5295d633, [Ljava.lang.Object;@7aca800a)() with result: SUCCESS

TestNG > Reflection > test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7d121e95, [Ljava.lang.Object;@7aca800a) STANDARD_OUT
    In: [Parameter{index=0, type=org.testng.ITestContext, declaredAnnotations=[]}, Parameter{index=1, type=int, declaredAnnotations=[]}, Parameter{index=2, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=3, type=org.testng.ITestContext, declaredAnnotations=[]}]
    args: [343, true]
    injectedArgs: [null, 343, true, null]
Executed test ==> test.reflect.ReflectionRecipesTest.testInject[3]([Lorg.testng.internal.reflect.Parameter;@7d121e95, [Ljava.lang.Object;@7aca800a)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[0](class org.testng.TestRunner)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[1](interface org.testng.ITestContext)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testIsOrImplementsInterface[2](class test.reflect.TestContextJustForTesting)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[0](class java.lang.Object)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[1](class java.lang.Class)() with result: SUCCESS
Executed test ==> test.reflect.ReflectionRecipesTest.testNegativeCaseIsOrImplementsInterface[2](interface java.sql.Connection)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@2e25ada, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[0](goodTestIssue122, [Ljava.lang.Object;@2e25ada, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@58e9cb1f, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[1](badTestIssue122, [Ljava.lang.Object;@58e9cb1f, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@7dbfd9a9, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[2](goodTestIssue122, [Ljava.lang.Object;@7dbfd9a9, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@5351b632, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "three"
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[3](badTestIssue122, [Ljava.lang.Object;@5351b632, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@665f30a5, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[4](mixedArgs, [Ljava.lang.Object;@665f30a5, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@4c064721, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[5](mixedArgs, [Ljava.lang.Object;@4c064721, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@40874fc3, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri0(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@68b31512"
    ITestContext is "org.testng.TestRunner@54e1c055"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@230ec824"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[6](potpourri0, [Ljava.lang.Object;@40874fc3, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@598d72d1, org.testng.TestRunner@54e1c055, null) STANDARD_OUT
    MyMethod1 is "public void test.reflect.TestMethodMatcher.mixedArgs(int,java.lang.Boolean,java.lang.String[],java.lang.String[])"
    MyMethod2 is "public void test.reflect.TestMethodMatcher.badTestIssue122(java.lang.String,java.lang.String[])"
    CurrentTestMethod is "public void test.reflect.TestMethodMatcher.potpourri1(java.lang.reflect.Method,org.testng.xml.XmlTest,java.lang.reflect.Method,int,java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestContext,java.lang.Boolean,org.testng.ITestResult,org.testng.ITestResult,java.lang.String[],org.testng.xml.XmlTest,java.lang.String[])"
    MyITestContext is "test.reflect.TestContextJustForTesting@2cacc4aa"
    ITestContext is "org.testng.TestRunner@54e1c055"
    ITestResult is "null"
    MyTestResult is "test.reflect.TestResultJustForTesting@793666f3"
    XmlTest is "[Test: "Reflection" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes:[XmlClass class=test.reflect.ReflectionRecipesTest] [XmlClass class=test.reflect.TestMethodMatcher]  packages:] "
    MyXmlTest is "[Test: "null" verbose:1[parameters:][metagroups:] [included: ][excluded: ]  classes: packages:] "
    An item is "four"
Executed test ==> test.reflect.TestMethodMatcher.testMatcher[7](potpourri1, [Ljava.lang.Object;@598d72d1, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@4b9f98fe, org.testng.TestRunner@54e1c055, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: goodTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[0](goodTestIssue122, [Ljava.lang.Object;@4b9f98fe, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@2dbbd9ba, org.testng.TestRunner@54e1c055, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: badTestIssue122([Parameter{index=0, type=java.lang.String, declaredAnnotations=[]}, Parameter{index=1, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[1](badTestIssue122, [Ljava.lang.Object;@2dbbd9ba, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS

TestNG > Reflection > test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@4881b559, org.testng.TestRunner@54e1c055, null) STANDARD_ERROR
    org.testng.internal.reflect.MethodMatcherException: 
    Data provider mismatch
    Method: mixedArgs([Parameter{index=0, type=int, declaredAnnotations=[]}, Parameter{index=1, type=java.lang.Boolean, declaredAnnotations=[]}, Parameter{index=2, type=[Ljava.lang.String;, declaredAnnotations=[]}, Parameter{index=3, type=[Ljava.lang.String;, declaredAnnotations=[]}])
    Arguments: [(java.lang.Integer)3,(java.lang.Boolean)true,(java.lang.String)three,(java.lang.String)four]
    	at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:45)
    	at test.reflect.TestMethodMatcher.testNegativeCaseMatcher(TestMethodMatcher.java:101)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.reflect.TestMethodMatcher.testNegativeCaseMatcher[2](mixedArgs, [Ljava.lang.Object;@4881b559, org.testng.TestRunner@54e1c055, null)() with result: SUCCESS
Executed test ==> test.inject.InjectTestContextTest.injectionAndParameters[0](Cedric, org.testng.TestRunner@748b06e)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[0](a)() with result: SUCCESS
Executed test ==> test.inject.InjectBeforeMethodTest.f[1](b)() with result: SUCCESS
Executed test ==> test.inject.InjectTestResultTest.verifyTestResultInjection() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[0](1, org.testng.TestRunner@748b06e, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject1[1](2, org.testng.TestRunner@748b06e, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[0](org.testng.TestRunner@748b06e, 1, a)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject2[1](org.testng.TestRunner@748b06e, 2, b)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[0](1, a, org.testng.TestRunner@748b06e)() with result: SUCCESS
Executed test ==> test.inject.InjectDataProviderTest.dpObject3[1](2, b, org.testng.TestRunner@748b06e)() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withInjection[0](public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method))() with result: SUCCESS
Executed test ==> test.inject.NoInjectionTest.withoutInjection[0](public void test.inject.CC.f())() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[0](class test.inject.NativeInjectionTestSamples$BadBeforeSuiteSample, beforeSuite, Can inject only one of <ITestContext, XmlTest> into a @BeforeSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[1](class test.inject.NativeInjectionTestSamples$BadBeforeTestSample, beforeTest, Can inject only one of <ITestContext, XmlTest> into a @BeforeTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[2](class test.inject.NativeInjectionTestSamples$BadBeforeClassSample, beforeClass, Can inject only one of <ITestContext, XmlTest> into a @BeforeClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[3](class test.inject.NativeInjectionTestSamples$BadBeforeMethodSample, beforeMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[4](class test.inject.NativeInjectionTestSamples$BadAfterMethodSample, afterMethod, Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @AfterMethod annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[5](class test.inject.NativeInjectionTestSamples$BadAfterClassSample, afterClass, Can inject only one of <ITestContext, XmlTest> into a @AfterClass annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[6](class test.inject.NativeInjectionTestSamples$BadAfterTestSample, afterTest, Can inject only one of <ITestContext, XmlTest> into a @AfterTest annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[7](class test.inject.NativeInjectionTestSamples$BadAfterSuiteSample, afterSuite, Can inject only one of <ITestContext, XmlTest> into a @AfterSuite annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[8](class test.inject.NativeInjectionTestSamples$BadBeforeGroupsSample, beforeGroups, Can inject only one of <ITestContext, XmlTest> into a @BeforeGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.NativeInjectionTest.testBeforeSuiteInjection[9](class test.inject.NativeInjectionTestSamples$BadAfterGroupsSample, afterGroups, Can inject only one of <ITestContext, XmlTest> into a @AfterGroups annotated )() with result: SUCCESS
Executed test ==> test.inject.Github1298Test.testPlugin() with result: SUCCESS
Executed test ==> test.configuration.BeforeMethodTest.mainTest() with result: SUCCESS
Executed test ==> test.sample.Basic1.basic1() with result: SUCCESS
Executed test ==> test.Misc.makeSureSetUpWithParameterWithNoParametersFails() with result: SUCCESS
Executed test ==> test.sample.Basic2.basic2() with result: SUCCESS
Executed test ==> test.Test2.noGroups() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsClass() with result: SUCCESS
Executed test ==> test.Test2.partialGroupsMethod() with result: SUCCESS
Executed test ==> test.Test2.setUpWithGroups() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_first0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.z_premiere1() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentGroupsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethods() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithCycle() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithNonExistentMethod() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentMethodsWithSkip() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.dependentWithDataProvider() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.instanceDependencies() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[0]([Ljava.lang.Class;@70b17d97, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[1]([Ljava.lang.Class;@4ea9f65f, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[2]([Ljava.lang.Class;@6a9c587, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.methodDependencyBetweenClassesShouldWork[3]([Ljava.lang.Class;@481240ec, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.multipleSkips() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[0](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@69d79dbc, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[1](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@580f1289, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[2](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@cb25823, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[3](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@48793003, false)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[4](class test.dependent.github1380.GitHub1380Sample, [Ljava.lang.String;@424087cf, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[5](class test.dependent.github1380.GitHub1380Sample2, [Ljava.lang.String;@3feb2202, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[6](class test.dependent.github1380.GitHub1380Sample3, [Ljava.lang.String;@61ff8989, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleCyclingDependencyShouldWork[7](class test.dependent.github1380.GitHub1380Sample4, [Ljava.lang.String;@16a82c12, true)() with result: SUCCESS
Executed test ==> test.dependent.DependentTest.simpleSkip() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentTest.test2() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.canBeRunAnytime() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.oneB() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.one[0](Cedric)() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentConfigurationMethods.verifyDependents() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyDependsOnGroups() with result: SUCCESS
Executed test ==> test.dependent.ClassDependsOnGroups.verifyGroupsAcrossClasses() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups1AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnGroups2AlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.DependentAlwaysRunTest.verifyDependsOnMethodsAlwaysRun() with result: SUCCESS
Executed test ==> test.dependent.MultiGroupTest.verifyDependsOnMultiGroups() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion2() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion3() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitGroupInclusion4() with result: SUCCESS
Executed test ==> test.dependent.ImplicitGroupInclusionTest.verifyImplicitMethodInclusion() with result: SUCCESS
Executed test ==> test.dependent.ClassWide1Test.m1() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.send() with result: SUCCESS
Executed test ==> test.dependent.DepBugVerifyTest.verify() with result: SUCCESS
Executed test ==> test.dependent.DependsOnProtectedMethodTest.verifyBeforeInvocations() with result: SUCCESS
Executed test ==> test.dependsongroup.DependsOnGroupsTest.methodsShouldBeGroupedByClasses() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.dontGroupByInstances() with result: SUCCESS
Executed test ==> test.dependent.GroupByInstancesTest.groupByInstances() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[0]([Ljava.lang.String;@567d86d0)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[1]([Ljava.lang.String;@3c5c87f9)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[2]([Ljava.lang.String;@7aadb2ad)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[3]([Ljava.lang.String;@7d2d031b)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[4]([Ljava.lang.String;@59e0df87)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupMulti[5]([Ljava.lang.String;@43b54c31)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[0]([Ljava.lang.String;@419b365)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[1]([Ljava.lang.String;@1e06ab8e)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[2]([Ljava.lang.String;@3ff8163)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[3]([Ljava.lang.String;@5e2b93be)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[4]([Ljava.lang.String;@512fb3d0)() with result: SUCCESS
Executed test ==> test.dependent.xml.GroupDependencyTest.verifyGroupSingle[5]([Ljava.lang.String;@3ddd5df0)() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingGroup() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnNonExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second0() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.a_second1() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.secondA() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods3.secondA() with result: SUCCESS
Executed test ==> test.dependent.ClassWide2Test.m2() with result: SUCCESS
Executed test ==> test.dependent.DepBugSampleTest.get() with result: SUCCESS
Executed test ==> test.dependent.DependencyFixTest.dependentOnExistingMethod() with result: SUCCESS
Executed test ==> test.dependent.OrderMethodTest.third0() with result: SUCCESS
Executed test ==> test.dependent.SampleDependentMethods.thirdA() with result: SUCCESS
Executed test ==> test.SampleInheritance.baseMethod() with result: SUCCESS
Executed test ==> test.SampleInheritance.configurationsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.setVerify() with result: SUCCESS
Executed test ==> test.inheritance.testng739.TestNG739.test_classes_should_be_skipped_when_a_before_class_fails() with result: SUCCESS
Executed test ==> test.inheritance.testng234.PolymorphicFailureTest.superclassFailureShouldCauseFailure() with result: SUCCESS

TestNG > Inheritance > test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails STANDARD_OUT
    ===== Invoked methods
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class1@72a8fe9e] 1923677854
      Class1.beforeClass1()[pri:0, instance:test.inheritance.testng471.Class1@72a8fe9e] 1923677854
      Class1.beforeMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@72a8fe9e] 1923677854
        Class1.test1_1()[pri:0, instance:test.inheritance.testng471.Class1@72a8fe9e] 1923677854
      Class1.afterMethodClass1()[pri:0, instance:test.inheritance.testng471.Class1@72a8fe9e] 1923677854
      SuperClass1.beforeSuperClass1()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.beforeClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
        Class2.test2_1()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.beforeMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
        Class2.test2_2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.afterMethodClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      Class2.afterClass2()[pri:0, instance:test.inheritance.testng471.Class2@31120c73] 823266419
      SuperClass2.beforeSuperClass2()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.beforeClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
        Class3.test3_1()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.beforeMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
        Class3.test3_2()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.afterMethodClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
      Class3.afterClass3()[pri:0, instance:test.inheritance.testng471.Class3@19e3d219] 434360857
    =====

    ===============================================
    Command line suite
    Total tests run: 7, Failures: 1, Skips: 1
    Configuration Failures: 1, Skips: 2
    ===============================================

Executed test ==> test.inheritance.testng471.TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails() with result: SUCCESS
Executed test ==> test.SampleInheritance.testBooleans() with result: SUCCESS
Executed test ==> test.SampleInheritance.inheritedMethodsWereCalledInOrder() with result: SUCCESS
Executed test ==> test.inheritance.ClassScopeTest.verify() with result: SUCCESS

TestNG > Inheritance STANDARD_OUT
    ===== Invoked methods
      BaseSampleInheritance.baseConfiguration()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
      SampleInheritance.configuration0()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
      BaseSampleInheritance.configuration1()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
      SampleInheritance.configuration2()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
        BaseSampleInheritance.baseMethod()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
        SampleInheritance.configurationsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
        ClassScopeTest.setVerify()[pri:0, instance:test.inheritance.ClassScopeTest@714ae077] 1900732535
        TestNG739.test_classes_should_be_skipped_when_a_before_class_fails()[pri:0, instance:test.inheritance.testng739.TestNG739@30968767] 815171431
        PolymorphicFailureTest.superclassFailureShouldCauseFailure()[pri:0, instance:test.inheritance.testng234.PolymorphicFailureTest@d66328] 14050088
        TestNG471.test_classes_should_not_be_skipped_when_a_after_method_fails()[pri:0, instance:test.inheritance.testng471.TestNG471@26b9721d] 649687581
        BaseSampleInheritance.testBooleans()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
        SampleInheritance.inheritedMethodsWereCalledInOrder()[pri:0, instance:test.SampleInheritance@2971acc6] 695315654
        ClassScopeTest.verify()[pri:0, instance:test.inheritance.ClassScopeTest@714ae077] 1900732535
    =====
Executed test ==> test.sample.Scope.outerDeprecated[0](out)() with result: SUCCESS

TestNG > Test outer scope STANDARD_OUT
    ===== Invoked methods
        Scope.outerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@40c4b8d4]out  1086634196
    =====
Executed test ==> test.sample.Scope.innerDeprecated[0](in)() with result: SUCCESS

TestNG > Test inner scope STANDARD_OUT
    ===== Invoked methods
        Scope.innerDeprecated(java.lang.String)[pri:0, instance:test.sample.Scope@21f7fa1b]in  569899547
    =====
Executed test ==> test.sample.AfterClassCalledAtEnd.test1() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test2() with result: SUCCESS
Executed test ==> test.sample.AfterClassCalledAtEnd.test3() with result: SUCCESS

TestNG > AfterClassCalledAtEnd STANDARD_OUT
    ===== Invoked methods
      AfterClassCalledAtEnd.before1Class()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
        AfterClassCalledAtEnd.test1()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
        AfterClassCalledAtEnd.test2()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
        AfterClassCalledAtEnd.test3()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
      AfterClassCalledAtEnd.afterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
      BaseAfterClassCalledAtEnd.baseAfterClass()[pri:0, instance:test.sample.AfterClassCalledAtEnd@58160352] 1477837650
    =====
Executed test ==> test.triangle.Child1.child1() with result: SUCCESS
Executed test ==> test.triangle.Child1.child1a() with result: SUCCESS
Executed test ==> test.triangle.Child2.child2() with result: SUCCESS

TestNG > Triangle STANDARD_OUT
    ===== Invoked methods
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child1@1b0851ee] 453530094
        Child1.child1()[pri:0, instance:test.triangle.Child1@1b0851ee] 453530094
        Child1.child1a()[pri:0, instance:test.triangle.Child1@1b0851ee] 453530094
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child1@1b0851ee] 453530094
      Base.initBeforeTestClass()[pri:0, instance:test.triangle.Child2@db85688] 230184584
        Child2.child2()[pri:0, instance:test.triangle.Child2@db85688] 230184584
      Base.postAfterTestClass()[pri:0, instance:test.triangle.Child2@db85688] 230184584
    =====
Executed test ==> test.triangle.CheckCount.testCheckCount[0](2)() with result: SUCCESS
Executed test ==> test.triangle.CheckCount.testCheckCountDeprecated[0](2)() with result: SUCCESS

TestNG > CheckTrianglePost STANDARD_OUT
    ===== Invoked methods
        CheckCount.testCheckCount(java.lang.String)[pri:0, instance:test.triangle.CheckCount@33beb29e]2  868135582
        CheckCount.testCheckCountDeprecated(java.lang.String)[pri:0, instance:test.triangle.CheckCount@33beb29e]2  868135582
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 1 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@206aeb59] 543877977
        First.first2()[pri:0, instance:test.classgroup.First@206aeb59] 543877977
        Second.verify()[pri:0, instance:test.classgroup.Second@7cbd3205] 2092773893
    =====
Executed test ==> test.classgroup.First.first1() with result: SUCCESS
Executed test ==> test.classgroup.First.first2() with result: SUCCESS
Executed test ==> test.classgroup.Second.verify() with result: SUCCESS

TestNG > Test class groups 2 STANDARD_OUT
    ===== Invoked methods
        First.first1()[pri:0, instance:test.classgroup.First@108f0fec] 277811180
        First.first2()[pri:0, instance:test.classgroup.First@108f0fec] 277811180
        Second.verify()[pri:0, instance:test.classgroup.Second@67c81e87] 1741168263
    =====
Executed test ==> test.factory.TestClassAnnotationTest.testOne() with result: SUCCESS
Executed test ==> test.factory.FactoryWithDataProviderTest.verifyDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryOrderMainTest.factoriesShouldBeInvokedInTheOrderOfCreation() with result: SUCCESS
Executed test ==> test.factory.FactoryFailureTest.factoryThrowingShouldNotRunTests() with result: SUCCESS
Executed test ==> test.factory.FactoryInSuperClassTest.factoryInSuperClassShouldWork() with result: SUCCESS
Executed test ==> test.factory.classconf.XClassOrderWithFactoryTest.testBeforeAfterClassInvocationsWithFactory() with result: SUCCESS
Executed test ==> test.factory.FactoryInterleavingTest.methodsShouldBeInterleaved() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithLocalDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithNotStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.FactoryDataProviderTest.factoryWithStaticDataProvider() with result: SUCCESS
Executed test ==> test.factory.DisabledFactoryTest.disabledFactoryShouldNotRun() with result: SUCCESS
Executed test ==> test.factory.FactoryAndTestMethodTest$NullArgsTest.test() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.doubleFactoryMethodShouldWork() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithBadFactoryMethodReturnType() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testExceptionWithNonStaticFactoryMethod() with result: SUCCESS
Executed test ==> test.factory.FactoryIntegrationTest.testNonPublicFactoryMethodShouldWork() with result: SUCCESS

TestNG > Factory > test.factory.EmptyFactoryDataProviderTest.test STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 0, Failures: 0, Skips: 0
    ===============================================

Executed test ==> test.factory.EmptyFactoryDataProviderTest.test() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnEmptyConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnIntConstructor() with result: SUCCESS
Executed test ==> test.factory.github1131.GitHub1131Test.testFactoryOnStringConstructor() with result: SUCCESS
Executed test ==> test.factory.nested.GitHub1307Test.testGitHub1307() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testInputImages() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 42]() with result: SUCCESS
Executed test ==> test.factory.FactoryTest2.testInt on [FactoryTest2 43]() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.FactoryWithInstanceInfo2Sample.testInt() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.MySample.testMethod() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.FactoryInSeparateClassTest.checkSum() with result: SUCCESS
Executed test ==> test.factory.VerifyFactoryWithInstanceInfoTest.mainCheck() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.Factory2Sample.testImages() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.factory.MySample.verifyThatTestMethodOnFactoryClassWasRun() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInNonParallel() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[0](tests)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[1](methods)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[2](classes)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[3](instances)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[4](none)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[5](true)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.timeOutInParallel[6](false)() with result: SUCCESS
Executed test ==> test.timeout.TimeOutTest.verifyInvocationTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.noTimeOut() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutInParallelTestsFromXml() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnSuiteTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.timeOutOnTestTag() with result: SUCCESS
Executed test ==> test.timeout.TimeOutFromXmlTest.twoDifferentTests() with result: SUCCESS

TestNG > TimeOut > test.timeout.TimeOutIntegrationTest.testGitHub1314 STANDARD_OUT
    Test1
    Test2
Executed test ==> test.timeout.TimeOutIntegrationTest.testGitHub1314() with result: SUCCESS
Executed test ==> test.timeout.TimeOutIntegrationTest.testTimeOutWhenParallelIsTest() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.invocationCount() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatFails() with result: SUCCESS
Executed test ==> test.InvocationAndSuccessPercentageTest.successPercentageThatSucceeds() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyAttributeShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldNotStop() with result: SUCCESS
Executed test ==> test.invocationcount.FailedInvocationCountTest.verifyGloballyShouldStop() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyDataProviderTrueTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountFalseTrue() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueFalse() with result: SUCCESS
Executed test ==> test.invocationcount.FirstAndLastTimeTest.verifyInvocationCountTrueTrue() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun1() with result: SUCCESS
Executed test ==> test.methods.SampleMethod1.shouldRun2() with result: SUCCESS
Executed test ==> test.methods.VerifyMethod1.verify() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.factoryReceivesContext() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnSuite() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setFactoryOnTestNG() with result: SUCCESS
Executed test ==> test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation() with result: SUCCESS
Executed test ==> test.objectfactory.CombinedTestAndObjectFactoryTest.combinedTestAndObjectFactory() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnSuiteShouldWork() with result: SUCCESS
Executed test ==> test.objectfactory.ObjectFactory2Test.factoryOnTestNGShouldWork() with result: SUCCESS
Executed test ==> test.ParameterConstructorTest.verify() with result: SUCCESS
Executed test ==> test.Exclude.included1() with result: SUCCESS
Executed test ==> test.Exclude.included2() with result: SUCCESS
Executed test ==> test.Exclude.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value1)() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationWithParameters.testMethod[0](value2)() with result: SUCCESS
Executed test ==> test.IndividualMethodsTest.testMethod() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest$LocalTestClass.helloWorld() with result: SUCCESS
Executed test ==> test.xml.TestNGContentHandlerTest.testDescriptionInclusion() with result: SUCCESS
Executed test ==> test.inheritance.DChild_2.test() with result: SUCCESS
Executed test ==> test.inheritance.VerifyTest.verify() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.greaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.lessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorTest.negativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellTest.onlyGroup1() with result: SUCCESS
Executed test ==> test.methodselectors.BeanShellNegativeTest.testNegativeScenario() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineGreaterThanPriorityTest1Test2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityAllTests() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineLessThanPriorityTest1Test() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineMultipleSelectors() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityAllGroups() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNegativePriorityGroup2() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineNoTest1Selector() with result: SUCCESS
Executed test ==> test.methodselectors.CommandLineTest.commandLineTestWithXmlFile() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.fileOnCommandLine() with result: SUCCESS
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.programmaticXmlSuite() with result: SUCCESS

TestNG > Method selectors > test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodselectors.MethodSelectorInSuiteTest.xmlXmlSuite() with result: SUCCESS
Executed test ==> test.interleavedorder.InterleavedInvocationTest.invocationOrder() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyExternal[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.StaticDataProviderSampleWithoutGuiceSample.verifyStatic[0](Cedric)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[0](10, verifyTen)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verify[1](5, verifyFive)() with result: SUCCESS
Executed test ==> test.dataprovider.TestContextTest.verifySix() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.duplicateDataProviders STANDARD_ERROR
    [Utils] [ERROR] [Error] org.testng.TestNGException: 
    Found two providers called &apos;duplicate&apos; on class test.dataprovider.DuplicateDataProviderSample
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:467)
    	at org.testng.internal.Parameters.findDataProvider(Parameters.java:383)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:549)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.duplicateDataProviders(FailingDataProviderTest.java:20)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.duplicateDataProviders() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProvider STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: expected exception from @DP
    	at test.dataprovider.FailingDataProviderSample.throwsExpectedException(FailingDataProviderSample.java:11)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProvider(FailingDataProviderTest.java:13)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProvider() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount STANDARD_ERROR
    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

    [Utils] [ERROR] [Error] java.lang.RuntimeException: Fail
    	at test.dataprovider.DataProviderWithErrorSample.Data(DataProviderWithErrorSample.java:21)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:55)
    	at org.testng.internal.MethodInvocationHelper.invokeMethodNoCheckedException(MethodInvocationHelper.java:45)
    	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:115)
    	at org.testng.internal.Parameters.handleParameters(Parameters.java:560)
    	at org.testng.internal.Invoker.handleParameters(Invoker.java:1316)
    	at org.testng.internal.Invoker.createParameters(Invoker.java:1044)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1134)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at test.SimpleBaseTest.run(SimpleBaseTest.java:48)
    	at test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount(FailingDataProviderTest.java:27)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
    	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
    	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
    	at org.testng.TestRunner.privateRun(TestRunner.java:746)
    	at org.testng.TestRunner.run(TestRunner.java:604)
    	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
    	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
    	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
    	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
    	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
    	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
    	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1314)
    	at org.testng.TestNG.runSuitesLocally(TestNG.java:1239)
    	at org.testng.TestNG.runSuites(TestNG.java:1157)
    	at org.testng.TestNG.run(TestNG.java:1128)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
    	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
    	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
    	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
    	at com.sun.proxy.$Proxy3.stop(Unknown Source)
    	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:120)
    	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.lang.reflect.Method.invoke(Method.java:483)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
    	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:147)
    	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:129)
    	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
    	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
    	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)

Executed test ==> test.dataprovider.FailingDataProviderTest.failingDataProviderAndInvocationCount() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProvider() with result: SUCCESS
Executed test ==> test.dataprovider.FailingIterableDataProviderTest.failingDataProviderWithInvocationNumber() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test() with result: SUCCESS
Executed test ==> test.dataprovider.IndicesTest.test2() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.allMethodsShouldBeInvoked() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.booleanTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classInjectionTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.classTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.configurationAndDataProvidersTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorOrMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.constructorTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.createDataTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.dataProviderAsTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.emptyDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.failedDataProviderShouldCauseSkip() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.iTestNGMethodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.inheritedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.instanceDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.methodTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.oneDimDataProviderShouldWork() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.parallelDataProviderSample() with result: SUCCESS

TestNG > DataProvider > test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException STANDARD_ERROR
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
    java.lang.IllegalStateException: A succeed test is supposed to be invoked
    	at test.InvokedMethodNameListener.onTestSuccess(InvokedMethodNameListener.java:97)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1743)
    	at org.testng.internal.Invoker.runTestListeners(Invoker.java:1722)
    	at org.testng.internal.Invoker.invokeMethod(Invoker.java:722)
    	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:71)
    	at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:14)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    	at java.lang.Thread.run(Thread.java:745)
Executed test ==> test.dataprovider.DataProviderTest.shouldNotThrowConcurrentModificationException() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.should_prefer_dataProvider_explicit_name() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderSampleWithoutGuiceTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.staticDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testExceptions() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testInstanceFactoryTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.testNG411Test() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.unnamedDataProviderTest() with result: SUCCESS
Executed test ==> test.dataprovider.DataProviderTest.varArgsDataProviderTest() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore1.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestBefore2.verify() with result: SUCCESS
Executed test ==> test.uniquesuite.TestAfter.testAfter() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationInheritGroupsSampleTest.test1() with result: SUCCESS
Executed test ==> test.nested.GarfTest.testGarf() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.configurableSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookFailure() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccess() with result: SUCCESS
Executed test ==> test.hook.HookableTest.hookSuccessWithListener() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue599() with result: SUCCESS
Executed test ==> test.hook.HookableTest.issue862() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.g1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.f1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.fa() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.run() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.f() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run1() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.run2() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups1SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups2SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups3SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups4SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups5SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups6SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups7SampleTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomething() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.testSomethingMore() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationGroups8SampleTest.verify() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsThatStartWithTest() with result: SUCCESS
Executed test ==> test.JUnitTest1.methodsWithSetup() with result: SUCCESS
Executed test ==> test.JUnitTest1.setNameShouldBeInvoked() with result: SUCCESS
Executed test ==> test.JUnitTest1.setUpFailingShouldCauseMethodsToBeSkipped() with result: SUCCESS
Executed test ==> test.JUnitTest1.testAbstract() with result: SUCCESS
Executed test ==> test.JUnitTest1.testNewInstance() with result: SUCCESS
Executed test ==> test.JUnitTest1.testSuite() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing() with result: SUCCESS
Executed test ==> test.CommandLineTest.junitParsing2() with result: SUCCESS
Executed test ==> test.CommandLineTest.suiteNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testMethodParameter() with result: SUCCESS
Executed test ==> test.CommandLineTest.testNameOverride() with result: SUCCESS
Executed test ==> test.CommandLineTest.testUseDefaultListenersArgument() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[0]([Ljava.lang.Class;@55154b03, [Ljava.lang.String;@110e7dee, [Ljava.lang.String;@55ad8273, [Ljava.lang.String;@68bbfaab)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[1]([Ljava.lang.Class;@7542d6a2, [Ljava.lang.String;@2332493e, [Ljava.lang.String;@3da7f897, [Ljava.lang.String;@43a6678d)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[2]([Ljava.lang.Class;@4848ac77, [Ljava.lang.String;@11fbd845, [Ljava.lang.String;@317b9c5f, [Ljava.lang.String;@491ee39)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[3]([Ljava.lang.Class;@51a79e8c, [Ljava.lang.String;@aec2cc8, [Ljava.lang.String;@3cefd2cc, [Ljava.lang.String;@6d6daf8c)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[4]([Ljava.lang.Class;@5086f661, [Ljava.lang.String;@58cead74, [Ljava.lang.String;@15879887, [Ljava.lang.String;@79ec623c)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[5]([Ljava.lang.Class;@6ebc7a2d, [Ljava.lang.String;@36c9776, [Ljava.lang.String;@3f6270b7, [Ljava.lang.String;@7f6b2494)() with result: SUCCESS
Executed test ==> test.JUnit4Test.testTests[6]([Ljava.lang.Class;@1351d866, [Ljava.lang.String;@6f51be41, [Ljava.lang.String;@431db0b9, [Ljava.lang.String;@7f3d6820)() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.easyGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.reporterWithSpockSampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.specialNameGroovySampleShouldWork() with result: SUCCESS
Executed test ==> test.groovy.GroovyTest.spockSampleShouldWork() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testDOSPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testPathResolution() with result: SUCCESS
Executed test ==> test.ant.TestCommandLineArgs.testUnixPathResolution() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.regression.groupsordering.A.testA() with result: SUCCESS
Executed test ==> test.regression.groupsordering.B.testB() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testA() with result: SUCCESS
Executed test ==> test.groupinvocation.DummyTest.testAB() with result: SUCCESS
Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInConfigurationMethods() with result: SUCCESS

TestNG > SkipExceptions > test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods STANDARD_OUT

    ===============================================
    Command line suite
    Total tests run: 3, Failures: 1, Skips: 1
    ===============================================

Executed test ==> test.skipex.SkippedExceptionTest.skippedExceptionInTestMethods() with result: SUCCESS
Executed test ==> test.skipex.SkipAndExpectedTest.shouldSkip() with result: SUCCESS

TestNG > RetryAnalyzer > test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts STANDARD_OUT
    Test Called : Test1
    Test Called : Test7
    Test Called : Test9
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test5
    Test Called : Test0
    Test Called : Test4
    Test Called : Test2
    Test Called : Test3
    Test Called : Test6
    Test Called : Test8
Executed test ==> test.retryAnalyzer.RetryAnalyzerTest.testInvocationCounts() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithNonzeroOnFailure() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroAfterSuccessfulRetry() with result: SUCCESS
Executed test ==> test.retryAnalyzer.ExitCodeTest.exitsWithZeroOnSuccess() with result: SUCCESS
Executed test ==> test.retryAnalyzer.dataprovider.RetryAnalyzerWithDataProviderTest.testRetryCounts() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldNotRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.fastShouldRunFirst() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.noMethodsShouldRun() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.nullMethodInterceptorWorksInTestngXml() with result: SUCCESS
Executed test ==> test.methodinterceptors.MethodInterceptorTest.shouldNotLockUpWithInterceptorThatRemovesMethods() with result: SUCCESS
Executed test ==> test.methodinterceptors.Issue392Test.AfterClass_method_should_be_fired_when_IMethodInterceptor_removes_test_methods() with result: SUCCESS
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptors() with result: SUCCESS

TestNG > MethodInterceptor > test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.methodinterceptors.multipleinterceptors.MultipleInterceptorsTest.testMultipleInterceptorsWithPreserveOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsMapShouldFail() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricArrays() with result: SUCCESS
Executed test ==> org.testng.AssertTest.assertEqualsSymmetricScalar() with result: SUCCESS
Executed test ==> org.testng.AssertTest.mapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullCollectionAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullObjectArrayAssertNoOrder() with result: SUCCESS
Executed test ==> org.testng.AssertTest.nullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullMapAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.oneNullSetAssertEquals() with result: SUCCESS
Executed test ==> org.testng.AssertTest.setAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_1() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_2() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.arraysFailures_3() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.doubleNaNAssertion() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsDetectsTypeMismatchesViaExplicitTypeHint() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsIncludesAnInformativeDefaultMessage() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsRequiresAnExceptionToBeThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsReturnsTheSameObjectThrown() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsSuppliesACoherentErrorMessageUponTypeMismatch() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.expectThrowsWrapsAndPropagatesUnexpectedExceptions() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.intArray_Issue4() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderFailure() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.noOrderSuccess() with result: SUCCESS
Executed test ==> test.asserttests.AssertTest.setsSuccess() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArrayAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInIterablesAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListAndMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInListsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapAndListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayDeepInMapsAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideIterableAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideListAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsDeepWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertEqualsWithMessage() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideMapAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.arrayInsideSetAssertNotEqualsDeep() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.boxedArrayAssertNotEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertEquals() with result: SUCCESS
Executed test ==> test.asserttests.ArrayEqualityAssertTest.mixedArraysAssertNotEquals() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoin() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.createEmptyStringWhenJoiningEmptyListWithJoinStrings() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.escapeUnicode() with result: SUCCESS
Executed test ==> org.testng.internal.UtilsTest.joinTwoStringsWithJoinStrings() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethods() with result: SUCCESS
Executed test ==> test.issue1339.ClassHelperTest.testGetAvailableMethodsWhenOverrdingIsInvolved() with result: SUCCESS
Executed test ==> test.issue1430.TestFileToClass.testFileToClass() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$RedundantGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest$UniqueGroupNamesSample.test() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithRedundantGroups() with result: SUCCESS
Executed test ==> test.groupinvocation.InvokerTest.testClassWithUniqueGroups() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTestWithXMLFile_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsContinue() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.commandLineTest_policyAsSkip() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[0]([Ljava.lang.Class;@53fe4de0, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[1]([Ljava.lang.Class;@671bef4, 1, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[2]([Ljava.lang.Class;@3dd65532, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[3]([Ljava.lang.Class;@5c2c7b48, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[4]([Ljava.lang.Class;@7aaf7e52, 1, 3, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[5]([Ljava.lang.Class;@7826ae89, 4, 0, 4)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[6]([Ljava.lang.Class;@41f7b96, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[7]([Ljava.lang.Class;@14418de2, 1, 2, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[8]([Ljava.lang.Class;@1819dbb9, 2, 3, 3)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[9]([Ljava.lang.Class;@5d7f5b7e, 0, 1, 1)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[10]([Ljava.lang.Class;@1203f3af, 2, 0, 2)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[11]([Ljava.lang.Class;@105ea044, 8, 0, 8)() with result: SUCCESS
Executed test ==> test.configurationfailurepolicy.FailurePolicyTest.confFailureTest[12]([Ljava.lang.Class;@20822ce3, 2, 2, 2)() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithTest.nestedA() with result: SUCCESS
Executed test ==> test.nested2.TmpA$NestedAWithInheritedTest.nestedWithInheritedTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceTest() with result: SUCCESS
Executed test ==> test.guice.GuiceTest.guiceWithNoModules() with result: SUCCESS
Executed test ==> test.guice.GuiceInheritanceTest.singletonShouldWork() with result: SUCCESS
Executed test ==> test.guice.GuiceModuleFactoryTest.singletonShouldWork() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingExtendedListenerInstance() with result: SUCCESS
Executed test ==> org.testng.internal.invokers.InvokedMethodListenerSubtypeTest.testFromListenerUsingSimpleListenerInstance() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[0](a1)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[1](a2)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[2](a3)() with result: SUCCESS
Executed test ==> test.yaml.YamlTest.compareFiles[3](a4)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[0](goodWithDoctype.xml, true)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[1](goodWithoutDoctype.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[2](badWithDoctype.xml, false)() with result: SUCCESS

TestNG > XML > org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false) STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[3](badWithoutDoctype.xml, false)() with result: SUCCESS
Executed test ==> org.testng.xml.SuiteXmlParserTest.testParse[4](issue174.xml, true)() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroups() with result: SUCCESS
Executed test ==> org.testng.xml.XmlSuiteTest.testIncludedAndExcludedGroupsWithRun() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkNoError STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkNoError() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkTestNamesForProgrammaticSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckTestNamesTest.checkWithoutChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuites STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuites() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkChildSuitesFails() with result: SUCCESS
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkProgrammaticSuitesFails() with result: SUCCESS

TestNG > Sanity Check > test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition STANDARD_OUT
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
    [TestNGContentHandler] [WARN] It is strongly recommended to add "<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd" >" at the top of your file, otherwise TestNG may fail or not work as expected.
Executed test ==> test.sanitycheck.CheckSuiteNamesTest.checkXmlSuiteAddition() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifyBeforeGroupUseAppropriateInstance() with result: SUCCESS
Executed test ==> test.configuration.BaseGroupsTest.verifySingleInvocation() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyBothAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyIteratorDataProviderAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.GroupsTest.verifyParametersAfterGroups() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.SingleConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassThreadTest.beforeClassMethodsShouldRunInParallel() with result: SUCCESS
Executed test ==> test.configuration.MethodCallOrderTest.realTest() with result: SUCCESS
Executed test ==> test.configuration.BeforeClassWithDisabledTest.afterClassShouldRunEvenWithDisabledMethods() with result: SUCCESS
Executed test ==> test.configuration.BeforeTestOrderingTest.verifyBeforeTestOrdering() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.test() with result: SUCCESS
Executed test ==> test.configuration.ConfigurationTest.verify() with result: SUCCESS
Executed test ==> test.configuration.MultipleBeforeGroupTest.verify() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1() with result: SUCCESS
Executed test ==> test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2() with result: SUCCESS
Executed test ==> test.configuration.SuiteFactoryOnceTest.suiteMethodsShouldOnlyRunOnce() with result: SUCCESS
Executed test ==> test.configuration.SuiteTest.test1() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[0]({two=orld, one=ello}, H{{one}} W{{two}}, Hello World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[1]({}, E{{#foo}}xxx{{/foo}}lephant, Elephant)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[2]({}, Hello
{{#foo}}@
{{/foo}}World, Hello
World)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[3]({day=Monday, person=test.mustache.MustacheTest$Person@7fbb8e5}, Hello {{#person}}{{name}}{{/person}}, {{day}}, Hello John, Monday)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[4]({name=Carl, person=test.mustache.MustacheTest$Person@587566ea}, Hello {{#person}}{{name}}{{/person}}, {{name}}, Hello John, Carl)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[5]({people=[test.mustache.MustacheTest$Person@16bc5e4b, test.mustache.MustacheTest$Person@650d2840]}, People:@{{#people}}-{{/people}}!, People:@--!)() with result: SUCCESS
Executed test ==> test.mustache.MustacheTest.runTest[6]({ages=[test.mustache.MustacheTest$Age@256d53d9, test.mustache.MustacheTest$Age@51d70f39], people=[test.mustache.MustacheTest$Person@16bc5e4b, test.mustache.MustacheTest$Person@650d2840]}, :@{{#people}}{{name}}{{#ages}}{{age}}{{/ages}}@{{/people}}!_, :@Carl4243@Christopher4243@!_)() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedClasses() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedMethods() with result: SUCCESS
Executed test ==> test.mixed.MixedTest.mixedWithExcludedGroups() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test1() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2() with result: SUCCESS
Executed test ==> test.assertion.AssertionTest.test2_fails() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testAssertAllCount() with result: SUCCESS
Executed test ==> test.assertion.SoftAssertTest.testOnSucceedAndFailureCalled() with result: SUCCESS
Executed test ==> test.enable.EnableTest.disabled_methods_should_not_be_run() with result: SUCCESS
Executed test ==> test.enable.EnableTest.issue420() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.blankNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.complexITestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTest() with result: SUCCESS
Executed test ==> test.name.NameTest.itestTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.noNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTest() with result: SUCCESS
Executed test ==> test.name.NameTest.testNameTestWithXml() with result: SUCCESS
Executed test ==> test.name.NameTest.testOnClassFromReporter() with result: SUCCESS
Executed test ==> test.name.github1046.TestCustomNamesForTests.testCustomTestNames() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase1Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase2Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase3Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyOnlyOneInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase4Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatAllEventsForATestMethodInClassInstanceExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario1.verifyTwoInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase5Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase6Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifySuiteAndTestLevelEventsRunInSequentialOrderInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyTestMethodLevelEventsAllOccurBetweenTestListenerStartAndFinish() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatAllEventsForATestMethodExecuteInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario1.verifyThreeInstancesOfTestClassForAllTestMethods() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuiteAndTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifySuitesRunSequentiallyInSameThread() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase7Scenario2.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.sanityCheck() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyNumberOfInstanceOfTestClassForAllTestMethodsForAllSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelEventsRunInSequentialOrderForIndividualSuites() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyTestLevelMethodLevelEventLogsOccurBetweenAfterTestListenerStartAndFinishEventLogs() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatMethodLevelEventsRunInDifferentThreadsFromSuiteAndTestLevelEvents() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatSuitesRunInParallelThreads() with result: SUCCESS
Executed test ==> test.thread.parallelization.ParallelByMethodsTestCase8Scenario1.verifyThatTestMethodsRunInParallelThreads() with result: SUCCESS
Gradle Test Executor 1 finished executing tests.
Finished generating test XML results (0.032 secs) into: /home/travis/build/cbeust/testng/build/test-results/test
Generating HTML test report...
Finished generating test html results (0.079 secs) into: /home/travis/build/cbeust/testng/build/reports/tests/test
:test (Thread[Daemon worker,5,main]) completed. Took 4 mins 31.616 secs.
:sonarqube (Thread[Daemon worker,5,main]) started.
:sonarqube
Putting task artifact state for task ':sonarqube' into context took 0.001 secs.
Executing task ':sonarqube' (up-to-date check took 0.0 secs) due to:
  Task has not declared any outputs.
User cache: /home/travis/.sonar/cache
Load global settings
Load global settings (done) | time=152ms
User cache: /home/travis/.sonar/cache
Load plugins index
Load plugins index (done) | time=7ms
Download sonar-scm-cvs-plugin-1.0.jar
Download sonar-scm-svn-plugin-1.3.jar
Download sonar-billing-plugin-1.0.0.440.jar
Download sonar-plsql-plugin-2.9.0.901.jar
Download sonar-csharp-plugin-6.0.0.2033.jar
Download sonar-java-plugin-4.10.0.10260.jar
Download sonar-web-plugin-2.5.0.476.jar
Download sonar-xml-plugin-1.4.2.885.jar
Download sonar-flex-plugin-2.3.jar
Download sonar-vbnet-plugin-3.0.3.346.jar
Download sonar-swift-plugin-2.0.0.1127.jar
Download sonar-github-plugin-1.4.1.822.jar
Download sonar-python-plugin-1.8.0.1496.jar
Download sonar-cfamily-plugin-4.9.0.8153.jar
Download sonar-auth-github-plugin-1.3.jar
Download sonar-rpg-plugin-2.1.0.736.jar
Download sonar-scm-mercurial-plugin-1.1.1.jar
Download sonar-googleanalytics-plugin-1.1.jar
Download sonar-pli-plugin-1.5.0.702.jar
Download sonar-javascript-plugin-3.1.0.5111.jar
Download sonar-cobol-plugin-3.4.0.1932.jar
Download sonar-scm-git-plugin-1.2.jar
Download sonar-php-plugin-2.10.0.2087.jar
Download sonar-abap-plugin-3.3.jar
Download qualinsight-sonarqube-badges-3.0.1.jar
Default locale: "en_US", source code encoding: "UTF-8" (analysis is platform dependent)
Process project properties
Load project repositories
Load project repositories (done) | time=853ms
Execute project builders
Execute project builders (done) | time=1ms
Load quality profiles
Load quality profiles (done) | time=76ms
Load active rules
Load active rules (done) | time=976ms
Load metrics repository
Load metrics repository (done) | time=78ms
Publish mode
Project key: org.testng:testng
-------------  Scan testng
Load server rules
Load server rules (done) | time=148ms
Initializer GenericCoverageSensor
Initializer GenericCoverageSensor (done) | time=0ms
Base dir: /home/travis/build/cbeust/testng
Working dir: /home/travis/build/cbeust/testng/build/sonar
Source paths: src/main/resources, src/main/java
Test paths: src/test/resources, src/test/java, src/test/groovy
Source encoding: UTF-8, default locale: en_US
Index files
1551 files indexed
Quality profile for java: Sonar way
Quality profile for js: Sonar way
Quality profile for web: Sonar way
Quality profile for xml: Sonar way
Sensor JavaSquidSensor [java]
Configured Java source version (sonar.java.source): 7
JavaClasspath initialization
JavaClasspath initialization (done) | time=37ms
JavaTestClasspath initialization
JavaTestClasspath initialization (done) | time=0ms
Java Main Files AST scan
358 source files to be analyzed
72/358 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/TestRunner.java
183/358 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/internal/annotations/AnnotationHelper.java
342/358 files analyzed, current file: /home/travis/build/cbeust/testng/src/main/java/org/testng/xml/XmlSuite.java
Java Main Files AST scan (done) | time=35910ms
358/358 source files have been analyzed
Java Test Files AST scan
1063 source files to be analyzed
1000/1063 files analyzed, current file: /home/travis/build/cbeust/testng/src/test/java/test/tmp/Base.java
1063/1063 source files have been analyzed
Classes not found during the analysis : [org.testng.IAlterSuiteListener, org.testng.IAnnotationTransformer, org.testng.IAnnotationTransformer2, org.testng.IAnnotationTransformer3, org.testng.IClass, org.testng.IClassListener, org.testng.IConfigurable, org.testng.IConfigurationListener, org.testng.IConfigureCallBack, org.testng.IExecutionListener, org.testng.IHookCallBack, org.testng.IHookable, org.testng.IInvokedMethod, org.testng.IInvokedMethodListener, org.testng.IMethodInstance, org.testng.IMethodInterceptor, org.testng.IObjectFactory, org.testng.IObjectFactory2, org.testng.IReporter, org.testng.IResultMap, org.testng.IRetryAnalyzer, org.testng.ISuite, org.testng.ISuiteListener, org.testng.ITest, org.testng.ITestClass, org.testng.ITestContext, org.testng.ITestListener, org.testng.ITestNGListener, org.testng.ITestNGMethod, org.testng.ITestResult, org.testng.ITestRunnerFactory, org.testng.TestListenerAdapter, org.testng.TestNG, org.testng.TestNGException, org.testng.annotations.IConfigurationAnnotation, org.testng.annotations.IDataProviderAnnotation, org.testng.annotations.IFactoryAnnotation, org.testng.annotations.IListenersAnnotation, org.testng.annotations.ITestAnnotation, org.testng.asserts.Assertion, org.testng.asserts.IAssert, org.testng.asserts.SoftAssert, org.testng.internal.IConfiguration, org.testng.internal.IResultListener, org.testng.internal.IResultListener2, org.testng.internal.ObjectFactoryImpl, org.testng.internal.collections.Pair, org.testng.reporters.JUnitReportReporter, org.testng.reporters.JUnitXMLReporter, org.testng.xml.XMLParser, ...]
Java Test Files AST scan (done) | time=10458ms
Sensor JavaSquidSensor [java] (done) | time=46882ms
Sensor SurefireSensor [java]
parsing /home/travis/build/cbeust/testng/build/test-results/test
Resource not found: test.groovy.GroovyTest
Sensor SurefireSensor [java] (done) | time=240ms
Sensor JaCoCoSensor [java]
Property 'sonar.jacoco.reportPath' is deprecated. Please use 'sonar.jacoco.reportPaths' instead.
Analysing /home/travis/build/cbeust/testng/build/jacoco/test.exec
No information about coverage per test.
Sensor JaCoCoSensor [java] (done) | time=464ms
Sensor SonarJavaXmlFileSensor [java]
90 source files to be analyzed
Sensor SonarJavaXmlFileSensor [java] (done) | time=362ms
90/90 source files have been analyzed
Sensor Web [web]
Sensor Web [web] (done) | time=127ms
Sensor XML Sensor [xml]
Sensor XML Sensor [xml] (done) | time=2ms
Sensor Coverage Report Import [vbnet]
Sensor Coverage Report Import [vbnet] (done) | time=0ms
Sensor Coverage Report Import [vbnet]
Sensor Coverage Report Import [vbnet] (done) | time=0ms
Sensor Unit Test Results Import [vbnet]
Sensor Unit Test Results Import [vbnet] (done) | time=0ms
Sensor JavaScript Squid Sensor [javascript]
2 source files to be analyzed
Unit Test Coverage Sensor is started
2/2 source files have been analyzed
Integration Test Coverage Sensor is started
Overall Coverage Sensor is started
Sensor JavaScript Squid Sensor [javascript] (done) | time=427ms
Sensor Analyzer for "php.ini" files [php]
Sensor Analyzer for "php.ini" files [php] (done) | time=7ms
Sensor Zero Coverage Sensor
Sensor Zero Coverage Sensor (done) | time=147ms
Sensor CPD Block Indexer
Sensor CPD Block Indexer (done) | time=323ms
SCM provider for this project is: git
1 files to be analyzed
1/1 files analyzed
138 files had no CPD blocks
Calculating CPD for 222 files
CPD calculation finished
Analysis report generated in 1077ms, dir size=6 MB
Analysis reports compressed in 2129ms, zip size=3 MB
Analysis report uploaded in 1399ms
ANALYSIS SUCCESSFUL, you can browse https://sonarcloud.io/dashboard/index/org.testng:testng
Note that you will be able to access the updated dashboard once the server has processed the submitted analysis report
More about the report processing at https://sonarcloud.io/api/ce/task?id=AV0cC4iNIFNNGQWIvTig
Task total time: 59.654 s
:sonarqube (Thread[Daemon worker,5,main]) completed. Took 1 mins 34.175 secs.

BUILD SUCCESSFUL

Total time: 6 mins 7.086 secs
Stopped 0 worker daemon(s).
Received result Success[value=null] from daemon DaemonInfo{pid=2326, address=[47882af6-ca1c-4208-abe8-a8f73d8ef2b2 port:46039, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1499413442325, context=DefaultDaemonContext[uid=aec3347f-36c3-4a6d-b5ee-5cdc068717f9,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/travis/.gradle/daemon,pid=2326,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=UTF-8,-Duser.country=US,-Duser.language=en,-Duser.variant]} (build should be done).

travis_time:end:05f08446:start=1499413737943541937,finish=1499414105444279753,duration=367500737816[0Ktravis_fold:end:after_success.2[0K
Done. Your build exited with 0.
