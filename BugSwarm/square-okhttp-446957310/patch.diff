diff --git a/okhttp-tests/src/test/java/okhttp3/DuplexTest.java b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java
index 9bf987a069..5d106bdd16 100755
--- a/okhttp-tests/src/test/java/okhttp3/DuplexTest.java
+++ b/okhttp-tests/src/test/java/okhttp3/DuplexTest.java
@@ -58,9 +58,9 @@
             latchParty.step(1);
             responseBodySink.sink().writeUtf8("ok");
             responseBodySink.sink().flush();
+            responseBodySink.headers(Headers.of("b", "banada"));
 
             latchParty.step(3);
-            responseBodySink.headers(Headers.of("b", "banada"));
             responseBodySink.sink().writeUtf8("http");
             responseBodySink.sink().flush();
 
@@ -91,11 +91,10 @@
 
     latchParty.step(4);
     assertEquals("http", source.readUtf8(4));
-    assertEquals(Collections.singletonList(Headers.of("b", "banada")), headersListener.takeAll());
+    assertEquals(Headers.of("b", "banada"), headersListener.takeFirst());
 
     latchParty.step(6);
     assertTrue(source.exhausted());
-
     assertEquals(Collections.singletonList(Headers.of("c", "cookie")), headersListener.takeAll());
   }
 
diff --git a/okhttp-tests/src/test/java/okhttp3/internal/RecordingHeadersListener.java b/okhttp-tests/src/test/java/okhttp3/internal/RecordingHeadersListener.java
index ee25208ca2..9253646dd9 100755
--- a/okhttp-tests/src/test/java/okhttp3/internal/RecordingHeadersListener.java
+++ b/okhttp-tests/src/test/java/okhttp3/internal/RecordingHeadersListener.java
@@ -18,6 +18,7 @@
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
+import javax.annotation.Nullable;
 import okhttp3.Headers;
 import okhttp3.internal.http2.Header;
 
@@ -28,6 +29,10 @@
     receivedHeaders.add(headers);
   }
 
+  public @Nullable Headers takeFirst() {
+    return receivedHeaders.poll();
+  }
+
   public List<Headers> takeAll() {
     List<Headers> result = new ArrayList<>();
     for (Headers headers; (headers = receivedHeaders.poll()) != null; ) {
