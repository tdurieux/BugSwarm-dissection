diff --git a/paramiko/auth_handler.py b/paramiko/auth_handler.py
index b4502e9a7c..db0c7e8829 100755
--- a/paramiko/auth_handler.py
+++ b/paramiko/auth_handler.py
@@ -23,8 +23,10 @@
 import subprocess
 import threading
 import os
-from ctypes import *
+from ctypes import (cdll, Structure, c_ulong, c_void_p, byref, c_char,
+                    c_int)
 import cryptography
+from cryptography.hazmat.primitives.serialization import load_ssh_public_key
 import weakref
 import time
 
@@ -114,7 +116,8 @@ def auth_publickey(self, username, key, event):
         finally:
             self.transport.lock.release()
 
-    def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session, event):
+    def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session,
+                    event):
         self.transport.lock.acquire()
         try:
             self.auth_event = event
@@ -272,8 +275,13 @@ def _pkcs11_get_public_key(self):
         public_key = ""
         if self.pkcs11session is None:
             if which("pkcs15-tool") is None:
-                raise Exception("Cannot find pkcs15-tool in PATH. Install opensc and make sure pkcs15-tool is in the path")
-            p = subprocess.Popen(["pkcs15-tool", "--read-ssh-key", "01"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
+                raise Exception("Cannot find pkcs15-tool in PATH. Install \
+                                 opensc and make sure pkcs15-tool is in \
+                                  the path")
+            p = subprocess.Popen(["pkcs15-tool", "--read-ssh-key", "01"],
+                                 stdout=subprocess.PIPE,
+                                 stderr=subprocess.PIPE,
+                                 stdin=subprocess.PIPE)
             out, err = p.communicate()
             if out is not None:
                 public_key = out
@@ -283,19 +291,23 @@ def _pkcs11_get_public_key(self):
 
     def _pkcs11_sign_ssh_data(self, blob):
         if not os.path.isfile(self.pkcs11provider):
-            raise Exception("pkcs11provider path is not valid: %s" % self.pkcs11provider)
+            raise Exception("pkcs11provider path is not valid: %s"
+                            % self.pkcs11provider)
         lib = cdll.LoadLibrary(self.pkcs11provider)
         if self.pkcs11session is None:
-            (session, public_key, keyret) = pkcs11_open_session(self.pkcs11provider, self.pkcs11pin)
+            (session,
+             public_key,
+             keyret) = pkcs11_open_session(self.pkcs11provider, self.pkcs11pin)
         else:
             (session, public_key, keyret) = self.pkcs11session
 
         # Init Signing Data
         class ck_mechanism(Structure):
-            _fields_ = [("mechanism", c_ulong),("parameter", c_void_p),("parameter_len", c_ulong)]
+            _fields_ = [("mechanism", c_ulong), ("parameter", c_void_p),
+                        ("parameter_len", c_ulong)]
 
         mech = ck_mechanism()
-        mech.mechanism =  6 #CKM_SHA1_RSA_PKCS
+        mech.mechanism = 6 # CKM_SHA1_RSA_PKCS
         self.pkcs11_lock.acquire()
         res = lib.C_SignInit(session, byref(mech), keyret)
         if res != 0:
@@ -354,14 +366,19 @@ def _parse_service_accept(self, m):
                     # Smartcard PKCS11 Private Key
                     keym = Message()
                     keym.add_string('ssh-rsa')
-                    test_pub = cryptography.hazmat.primitives.serialization.load_ssh_public_key(self._pkcs11_get_public_key(), cryptography.hazmat.backends.default_backend())
-                    keym.add_mpint(test_pub.public_numbers().e)
-                    keym.add_mpint(test_pub.public_numbers().n)
+                    pkcs11_tmp_pub = load_ssh_public_key(
+                        self._pkcs11_get_public_key(),
+                        cryptography.hazmat.backends.default_backend())
+                    keym.add_mpint(pkcs11_tmp_pub.public_numbers().e)
+                    keym.add_mpint(pkcs11_tmp_pub.public_numbers().n)
                     key_asbytes = keym.asbytes()
                     m.add_boolean(True)
                     m.add_string("ssh-rsa")
                     m.add_string(key_asbytes)
-                    blob = self._get_session_blob_pkcs11("ssh-rsa", key_asbytes, 'ssh-connection', self.username)
+                    blob = self._get_session_blob_pkcs11("ssh-rsa",
+                                                         key_asbytes,
+                                                         'ssh-connection',
+                                                         self.username)
                     sig = self._pkcs11_sign_ssh_data(blob)
                     m.add_string(sig)
             elif self.auth_method == 'keyboard-interactive':
diff --git a/paramiko/pkcs11.py b/paramiko/pkcs11.py
index 7508c5d956..857c5c0e58 100755
--- a/paramiko/pkcs11.py
+++ b/paramiko/pkcs11.py
@@ -1,4 +1,5 @@
-from ctypes import *
+from ctypes import (c_void_p, c_ulong, c_int, c_char_p, cast, addressof,
+                    sizeof, byref, cdll, Structure)
 import subprocess
 import paramiko.common
 import os
@@ -64,7 +65,7 @@ class ck_attribute(Structure):
         _fields_ = [('type', c_ulong), ('value', c_void_p),
                     ('value_len', c_ulong)]
 
-    attrs = (ck_attribute*3)()
+    attrs = (ck_attribute * 3)()
     count = c_ulong()
 
     # Hard coded, two defined below
diff --git a/paramiko/sftp_client.py b/paramiko/sftp_client.py
index 12fccb2f59..f2e6869f26 100755
--- a/paramiko/sftp_client.py
+++ b/paramiko/sftp_client.py
@@ -36,8 +36,8 @@
     CMD_CLOSE, SFTP_FLAG_READ, SFTP_FLAG_WRITE, SFTP_FLAG_CREATE,
     SFTP_FLAG_TRUNC, SFTP_FLAG_APPEND, SFTP_FLAG_EXCL, CMD_OPEN, CMD_REMOVE,
     CMD_RENAME, CMD_MKDIR, CMD_RMDIR, CMD_STAT, CMD_ATTRS, CMD_LSTAT,
-    CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, CMD_REALPATH, CMD_STATUS, SFTP_OK,
-    SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED,
+    CMD_SYMLINK, CMD_SETSTAT, CMD_READLINK, CMD_REALPATH, CMD_STATUS,
+    CMD_EXTENDED, SFTP_OK, SFTP_EOF, SFTP_NO_SUCH_FILE, SFTP_PERMISSION_DENIED,
 )
 
 from paramiko.sftp_attr import SFTPAttributes
@@ -368,8 +368,10 @@ def rename(self, oldpath, newpath):
         """
         Rename a file or folder from ``oldpath`` to ``newpath``.
 
-        :param str oldpath: existing name of the file or folder
-        :param str newpath: new name for the file or folder
+        :param str oldpath:
+            existing name of the file or folder
+        :param str newpath:
+            new name for the file or folder, must not exist already
 
         :raises:
             ``IOError`` -- if ``newpath`` is a folder, or something else goes
@@ -380,6 +382,26 @@ def rename(self, oldpath, newpath):
         self._log(DEBUG, 'rename(%r, %r)' % (oldpath, newpath))
         self._request(CMD_RENAME, oldpath, newpath)
 
+    def posix_rename(self, oldpath, newpath):
+        """
+        Rename a file or folder from ``oldpath`` to ``newpath``, following
+        posix conventions.
+
+        :param str oldpath: existing name of the file or folder
+        :param str newpath: new name for the file or folder, will be
+            overwritten if it already exists
+
+        :raises:
+            ``IOError`` -- if ``newpath`` is a folder, posix-rename is not
+            supported by the server or something else goes wrong
+        """
+        oldpath = self._adjust_cwd(oldpath)
+        newpath = self._adjust_cwd(newpath)
+        self._log(DEBUG, 'posix_rename(%r, %r)' % (oldpath, newpath))
+        self._request(
+            CMD_EXTENDED, "posix-rename@openssh.com", oldpath, newpath
+        )
+
     def mkdir(self, path, mode=o777):
         """
         Create a folder (directory) named ``path`` with numeric mode ``mode``.
@@ -451,8 +473,7 @@ def lstat(self, path):
 
     def symlink(self, source, dest):
         """
-        Create a symbolic link (shortcut) of the ``source`` path at
-        ``destination``.
+        Create a symbolic link to the ``source`` path at ``destination``.
 
         :param str source: path of the original file
         :param str dest: path of the newly created symlink
diff --git a/paramiko/sftp_server.py b/paramiko/sftp_server.py
index 1cfe286b1f..f7d1c65793 100755
--- a/paramiko/sftp_server.py
+++ b/paramiko/sftp_server.py
@@ -469,6 +469,12 @@ def _process(self, t, request_number, msg):
             tag = msg.get_text()
             if tag == 'check-file':
                 self._check_file(request_number, msg)
+            elif tag == 'posix-rename@openssh.com':
+                oldpath = msg.get_text()
+                newpath = msg.get_text()
+                self._send_status(
+                    request_number, self.server.posix_rename(oldpath, newpath)
+                )
             else:
                 self._send_status(request_number, SFTP_OP_UNSUPPORTED)
         else:
diff --git a/paramiko/sftp_si.py b/paramiko/sftp_si.py
index 09e7025c04..4096930937 100755
--- a/paramiko/sftp_si.py
+++ b/paramiko/sftp_si.py
@@ -201,6 +201,18 @@ def rename(self, oldpath, newpath):
         """
         return SFTP_OP_UNSUPPORTED
 
+    def posix_rename(self, oldpath, newpath):
+        """
+        Rename (or move) a file, following posix conventions. If newpath
+        already exists, it will be overwritten.
+
+        :param str oldpath:
+            the requested path (relative or absolute) of the existing file.
+        :param str newpath: the requested new path of the file.
+        :return: an SFTP error code `int` like ``SFTP_OK``.
+        """
+        return SFTP_OP_UNSUPPORTED
+
     def mkdir(self, path, attr):
         """
         Create a new directory with the given attributes.  The ``attr``
diff --git a/paramiko/transport.py b/paramiko/transport.py
index 088db36b09..6d4c4423eb 100755
--- a/paramiko/transport.py
+++ b/paramiko/transport.py
@@ -1407,12 +1407,15 @@ def auth_publickey(self, username, key, event=None):
             return []
         return self.auth_handler.wait_for_response(my_event)
 
-    def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session, event=None):
+    def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session,
+                    event=None):
         """
         :param str username: the username to authenticate as
         :param str pkcs11pin: pin to authenticate to smartcard
-        :param str pkcs11provider: pkcs11 provider such as opensc. Example: /usr/local/lib/opensc-pkcs11.so.
-        :param str pkcs11session: pkcs11 session used for multithreaded applications.
+        :param str pkcs11provider: pkcs11 provider such as opensc.
+            Example: /usr/local/lib/opensc-pkcs11.so.
+        :param str pkcs11session: pkcs11 session used for multithreaded
+            applications.
         :param .threading.Event event:
             an event to trigger when the authentication attempt is complete
             (whether it was successful or not)
@@ -1420,9 +1423,10 @@ def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session, event=
             `list` of auth types permissible for the next stage of
             authentication (normally empty)
 
-        :raises AuthenticationException: if the authentication failed (and no
+        :raises:
+            `.AuthenticationException` -- if the authentication failed (and no
             event was passed in)
-        :raises SSHException: if there was a network error
+        :raises: `.SSHException` -- if there was a network error
         """
         if (not self.active) or (not self.initial_kex_done):
             # we should never try to authenticate unless we're on a secure link
@@ -1432,7 +1436,8 @@ def auth_pkcs11(self, username, pkcs11pin, pkcs11provider, pkcs11session, event=
         else:
             my_event = event
         self.auth_handler = AuthHandler(self)
-        self.auth_handler.auth_pkcs11(username, pkcs11pin, pkcs11provider, pkcs11session, my_event)
+        self.auth_handler.auth_pkcs11(username, pkcs11pin, pkcs11provider,
+                                      pkcs11session, my_event)
         if event is not None:
             # caller wants to wait for event themselves
             return []
diff --git a/sites/www/changelog.rst b/sites/www/changelog.rst
index b9d8409b1b..f5978124e9 100755
--- a/sites/www/changelog.rst
+++ b/sites/www/changelog.rst
@@ -4,10 +4,25 @@ Changelog
 
 * :feature:`827` Add support for PKCS #11 which enables the use of smartcards
   and other cryptographic tokens.
+* :feature:`65` (via :issue:`471`) Add support for OpenSSH's SFTP
+  ``posix-rename`` protocol extension (section 3.3 of `OpenSSH's protocol
+  extension document
+  <http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL?rev=1.31>`_),
+  via a new ``posix_rename`` method in `SFTPClient
+  <paramiko.sftp_client.SFTPClient.posix_rename>` and `SFTPServerInterface
+  <paramiko.sftp_si.SFTPServerInterface.posix_rename>`. Thanks to Wren Turkal
+  for the initial patch & Mika Pflüger for the enhanced, merged PR.
 * :feature:`869` Add an ``auth_timeout`` kwarg to `SSHClient.connect
   <paramiko.client.SSHClient.connect>` (default: 30s) to avoid hangs when the
   remote end becomes unresponsive during the authentication step. Credit to
   ``@timsavage``.
+
+  .. note::
+    This technically changes behavior, insofar as very slow auth steps >30s
+    will now cause timeout exceptions instead of completing. We doubt most
+    users will notice; those affected can simply give a higher value to
+    ``auth_timeout``.
+
 * :support:`921` Tighten up the ``__hash__`` implementation for various key
   classes; less code is good code. Thanks to Francisco Couzo for the patch.
 * :bug:`983` Move ``sha1`` above the now-arguably-broken ``md5`` in the list of
diff --git a/tests/stub_sftp.py b/tests/stub_sftp.py
index 334af56168..0d6730910d 100755
--- a/tests/stub_sftp.py
+++ b/tests/stub_sftp.py
@@ -24,7 +24,7 @@
 import sys
 from paramiko import (
     ServerInterface, SFTPServerInterface, SFTPServer, SFTPAttributes,
-    SFTPHandle, SFTP_OK, AUTH_SUCCESSFUL, OPEN_SUCCEEDED,
+    SFTPHandle, SFTP_OK, SFTP_FAILURE, AUTH_SUCCESSFUL, OPEN_SUCCEEDED,
 )
 from paramiko.common import o666
 
@@ -141,12 +141,24 @@ def remove(self, path):
     def rename(self, oldpath, newpath):
         oldpath = self._realpath(oldpath)
         newpath = self._realpath(newpath)
+        if os.path.exists(newpath):
+            return SFTP_FAILURE
         try:
             os.rename(oldpath, newpath)
         except OSError as e:
             return SFTPServer.convert_errno(e.errno)
         return SFTP_OK
 
+    def posix_rename(self, oldpath, newpath):
+        oldpath = self._realpath(oldpath)
+        newpath = self._realpath(newpath)
+        try:
+            os.rename(oldpath, newpath)
+        except OSError as e:
+            return SFTPServer.convert_errno(e.errno)
+        return SFTP_OK
+
+
     def mkdir(self, path, attr):
         path = self._realpath(path)
         try:
diff --git a/tests/test_sftp.py b/tests/test_sftp.py
index d3064fff03..8f1b7d2ebc 100755
--- a/tests/test_sftp.py
+++ b/tests/test_sftp.py
@@ -276,6 +276,39 @@ def test_5_rename(self):
             except:
                 pass
 
+
+    def test_5a_posix_rename(self):
+        """Test posix-rename@openssh.com protocol extension."""
+        try:
+            # first check that the normal rename works as specified
+            with sftp.open(FOLDER + '/a', 'w') as f:
+                f.write('one')
+            sftp.rename(FOLDER + '/a', FOLDER + '/b')
+            with sftp.open(FOLDER + '/a', 'w') as f:
+                f.write('two')
+            try:
+                sftp.rename(FOLDER + '/a', FOLDER + '/b')
+                self.assertTrue(False, 'no exception when rename-ing onto existing file')
+            except (OSError, IOError):
+                pass
+
+            # now check with the posix_rename
+            sftp.posix_rename(FOLDER + '/a', FOLDER + '/b')
+            with sftp.open(FOLDER + '/b', 'r') as f:
+                data = u(f.read())
+            self.assertEqual('two', data, "Contents of renamed file not the same as original file")
+
+        finally:
+            try:
+                sftp.remove(FOLDER + '/a')
+            except:
+                pass
+            try:
+                sftp.remove(FOLDER + '/b')
+            except:
+                pass
+
+
     def test_6_folder(self):
         """
         create a temporary folder, verify that we can create a file in it, then
