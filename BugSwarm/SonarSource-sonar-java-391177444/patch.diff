diff --git a/java-checks/pom.xml b/java-checks/pom.xml
index 4b5ff7637d..b51248d18d 100755
--- a/java-checks/pom.xml
+++ b/java-checks/pom.xml
@@ -140,6 +140,11 @@
                   <version>1.3.2</version>
                   <type>jar</type>
                 </artifactItem>
+                <artifactItem>
+                  <groupId>org.springframework.boot</groupId>
+                  <artifactId>spring-boot-autoconfigure</artifactId>
+                  <version>2.0.2.RELEASE</version>
+                </artifactItem>
                 <artifactItem>
                   <groupId>org.springframework</groupId>
                   <artifactId>spring-beans</artifactId>
diff --git a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheck.java b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheck.java
index 3c9c72e2aa..fe38c9d2ef 100755
--- a/java-checks/src/main/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheck.java
+++ b/java-checks/src/main/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheck.java
@@ -26,85 +26,130 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import org.sonar.check.Rule;
+import org.sonar.java.checks.helpers.ConstantUtils;
+import org.sonar.java.model.PackageUtils;
 import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;
 import org.sonar.plugins.java.api.semantic.SymbolMetadata;
+import org.sonar.plugins.java.api.tree.AnnotationTree;
+import org.sonar.plugins.java.api.tree.AssignmentExpressionTree;
 import org.sonar.plugins.java.api.tree.ClassTree;
 import org.sonar.plugins.java.api.tree.CompilationUnitTree;
+import org.sonar.plugins.java.api.tree.ExpressionTree;
 import org.sonar.plugins.java.api.tree.IdentifierTree;
-import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;
-import org.sonar.plugins.java.api.tree.PackageDeclarationTree;
+import org.sonar.plugins.java.api.tree.NewArrayTree;
 import org.sonar.plugins.java.api.tree.Tree;
 import org.sonar.plugins.java.api.tree.Tree.Kind;
 
 @Rule(key = "S4605")
 public class SpringBeansShouldBeAccessibleCheck extends IssuableSubscriptionVisitor {
 
-  final Set<String> componentScanPackageNames = Sets.newHashSet();
-  final Map<String, List<ClassTree>> springBeansPerPackage = Maps.newHashMap();
+  private static final String MESSAGE_FORMAT = "'%s' is not reachable by {{@ComponentsScan}}s or {{@SpringBootApplication}}. "
+    + "Either move it to a package configured in {{@ComponentsScan}}s or update your {{@ComponentsScan}}s configuration.";
 
   private static final String[] SPRING_BEAN_ANNOTATIONS = {
-      "org.springframework.stereotype.Component",
-          "org.springframework.stereotype.Service",
-          "org.springframework.stereotype.Repository",
-          "org.springframework.stereotype.Controller",
-          "org.springframework.web.bind.annotation.RestController"
+    "org.springframework.stereotype.Component",
+    "org.springframework.stereotype.Service",
+    "org.springframework.stereotype.Repository",
+    "org.springframework.stereotype.Controller",
+    "org.springframework.web.bind.annotation.RestController"
   };
 
-  private static final String SPRING_BOOT_APP = "org.springframework.boot.autoconfigure.SpringBootApplication";
   private static final String COMPONENT_SCAN = "org.springframework.context.annotation.ComponentScan";
+  private static final List<String> COMPONENT_SCAN_CONFIG = Arrays.asList("basePackages", "value");
+  private static final String SPRING_BOOT_APP = "org.springframework.boot.autoconfigure.SpringBootApplication";
+
+  private final Map<String, List<ClassTree>> springBeansPerPackage = Maps.newHashMap();
+  private final Set<String> componentScanPackageNames = Sets.newHashSet();
+  private String springBootApplicationPackageName;
 
   @Override
   public List<Kind> nodesToVisit() {
     return Collections.singletonList(Kind.CLASS);
   }
 
+  @Override
+  public void endOfAnalysis() {
+    springBeansPerPackage.forEach((packageName, beansInPackage) -> {
+      if (packageIsNotAccessible(packageName)) {
+        beansInPackage.forEach(classTree -> {
+          reportIssue(classTree.simpleName(), String.format(MESSAGE_FORMAT, classTree.simpleName()));
+        });
+      }
+    });
+  }
+
   @Override
   public void visitNode(Tree tree) {
-    if(!hasSemantic()) {
+    if (!hasSemantic()) {
       return;
     }
+
     ClassTree classTree = (ClassTree) tree;
-    if (isClassTreeAnnotatedWith(classTree,
-        "org.springframework.stereotype.Controller",
-        "org.springframework.stereotype.Repository",
-        "org.springframework.stereotype.Service")) {
-      System.out.println(classTree);
+    String classPackageName = packageName(classTree);
+
+    Optional<AnnotationTree> componentScanAnnotation = classTree.modifiers().annotations().stream().filter(a -> a.annotationType().symbolType().isSubtypeOf(COMPONENT_SCAN)).findFirst();
+    if (componentScanAnnotation.isPresent()) {
+      componentScanAnnotation.get().arguments().forEach(this::storePackageNames);
+    } else if (classHasAnnotation(classTree, SPRING_BEAN_ANNOTATIONS)) {
+      addBeanToPackageList(classPackageName, classTree);
+    } else if (classHasAnnotation(classTree, SPRING_BOOT_APP)) {
+      springBootApplicationPackageName = classPackageName;
     }
-    // TODO must refactor this
-    String packageName = "";
-    List<SymbolMetadata.AnnotationInstance> a = classTree.symbol().metadata().annotations();
+  }
+
+  private void addBeanToPackageList(String classPackageName, ClassTree classTree) {
+    List<ClassTree> beansInPackage = springBeansPerPackage.get(classPackageName);
+    if (beansInPackage == null) {
+      beansInPackage = new ArrayList<>();
+      springBeansPerPackage.put(classPackageName, beansInPackage);
+    }
+    beansInPackage.add(classTree);
+  }
 
+  private String packageName(ClassTree classTree) {
     if (classTree.parent().is(Tree.Kind.COMPILATION_UNIT)) {
       CompilationUnitTree cTree = (CompilationUnitTree) classTree.parent();
-      PackageDeclarationTree packageDeclarationTree = cTree.packageDeclaration();
-      if (packageDeclarationTree != null) {
-        if (packageDeclarationTree.packageName() != null && packageDeclarationTree.packageName().is(Kind.MEMBER_SELECT)) {
-          packageName = ((MemberSelectExpressionTree) packageDeclarationTree.packageName()).identifier().name();
-        } else if (packageDeclarationTree.packageName().is(Kind.IDENTIFIER)) {
-          packageName = ((IdentifierTree) packageDeclarationTree.packageName()).name();
-        }
+      if (cTree.packageDeclaration() != null) {
+        return PackageUtils.packageName(cTree.packageDeclaration(), ".");
       }
     }
+    return "";
+  }
+
+  private static boolean classHasAnnotation(ClassTree classTree, String... annotationName) {
+    List<SymbolMetadata.AnnotationInstance> a = classTree.symbol().metadata().annotations();
+    return Arrays.stream(annotationName).anyMatch(annotation -> classTree.symbol().metadata().isAnnotatedWith(annotation));
+  }
+
+  private boolean packageIsNotAccessible(String packageName) {
+    return !componentScanPackageNames.contains(packageName)
+      && !(springBootApplicationPackageName != null && packageName.contains(springBootApplicationPackageName));
+  }
 
-    // TODO problem: annotations.get(0).annotationType().symbolType() == "unknown"
-    if (isClassTreeAnnotatedWith(classTree, SPRING_BEAN_ANNOTATIONS)) {
-      if (packageName != "") {
-        List<ClassTree> beansInPackage = springBeansPerPackage.get(packageName);
-        if (beansInPackage == null) {
-          beansInPackage = new ArrayList<>();
-        }
-        beansInPackage.add(classTree);
+  private void storePackageNames(ExpressionTree argsTree) {
+    if (argsTree.is(Kind.ASSIGNMENT)) {
+      AssignmentExpressionTree assignment = (AssignmentExpressionTree) argsTree;
+      ExpressionTree variableTree = assignment.variable();
+      if (variableTree.is(Kind.IDENTIFIER) && COMPONENT_SCAN_CONFIG.contains(((IdentifierTree) variableTree).name())) {
+        addLiteralValues(assignment.expression());
       }
-    } else if (isClassTreeAnnotatedWith(classTree, SPRING_BOOT_APP)) {
-      componentScanPackageNames.add(packageName);
-    } else if (isClassTreeAnnotatedWith(classTree, COMPONENT_SCAN)) {
-      componentScanPackageNames.add(packageName);
+    } else {
+      addLiteralValues(argsTree);
     }
   }
 
-  private static boolean isClassTreeAnnotatedWith(ClassTree classTree, String... annotationName) {
-    return Arrays.stream(annotationName).anyMatch(annotation -> classTree.symbol().metadata().isAnnotatedWith(annotation));
+  private void addLiteralValues(ExpressionTree expressionTree) {
+    if (expressionTree.is(Kind.STRING_LITERAL)) {
+      String name = ConstantUtils.resolveAsStringConstant(expressionTree);
+      componentScanPackageNames.add(name);
+    } else if (expressionTree.is(Kind.NEW_ARRAY)) {
+      for (ExpressionTree p : ((NewArrayTree) expressionTree).initializers()) {
+        String name = ConstantUtils.resolveAsStringConstant(p);
+        componentScanPackageNames.add(name);
+      }
+    }
   }
 }
diff --git a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S4605_java.html b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S4605_java.html
index 34114be71e..4b5af17c7d 100755
--- a/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S4605_java.html
+++ b/java-checks/src/main/resources/org/sonar/l10n/java/rules/squid/S4605_java.html
@@ -1,5 +1,7 @@
 <p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring
-Application Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. </p>
+Application Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the
+<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components
+in the package containing the Spring Boot main class and its sub-packages.</p>
 <h2>Noncompliant Code Example</h2>
 <pre>
 @Configuration
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java
index 4b36e20a2b..c54964127d 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java
@@ -6,6 +6,7 @@
 import org.springframework.stereotype.Repository;
 import org.springframework.web.bind.annotation.RestController;
 
+
 @Component
 class A1 { // Compliant
   A1() {}
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java
index 26a3e3df64..1b81efe2e5 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java
@@ -1,4 +1,4 @@
-package src.test.files.checks.B;
+package src.test.files.checks.spring.B;
 
 import org.springframework.stereotype.Component;
 import org.springframework.stereotype.Controller;
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/C.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/C.java
new file mode 100755
index 0000000000..3f0ce66cf6
--- /dev/null
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/C.java
@@ -0,0 +1,6 @@
+package src.test.files.checks.C;
+
+import org.springframework.stereotype.Component;
+
+@Component
+class C {} // Noncompliant
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java
index ed93722aa9..ddfabb1afe 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java
@@ -9,8 +9,38 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @Configuration
-@ComponentScan({"src.test.files.checks.spring.A","src.test.files.checks.spring.B"})
-class Foo {
+@ComponentScan({"src.test.files.checks.spring.A", "src.test.files.checks.spring.B"})
+class Foo1 {
+
+}
+
+@Configuration
+@ComponentScan("src.test.files.checks.spring.X")
+class Foo2 {
+
+}
+
+@Configuration
+@ComponentScan(basePackageClasses = Bar4.class, basePackages = {"src.test.files.checks.spring.Y1"})
+class Foo3 {
+
+}
+
+@Configuration
+@ComponentScan(basePackages = "src.Y2")
+class Foo4 {
+
+}
+
+@Configuration
+@ComponentScan(value = "src.test.files.checks.spring.Z1")
+class Foo5 {
+
+}
+
+@Configuration
+@ComponentScan(value = {"src.test.files.checks.spring.Z2", "src.test.files.checks.spring.Z3"})
+class Foo6 {
 
 }
 
@@ -24,4 +54,4 @@
 class Bar3 { } // Noncompliant
 
 @RestController
-class Bar4 { } // Noncompliant
+class Bar4 { } // Noncompliant, we ignore basePackageClasses
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y1.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y1.java
new file mode 100755
index 0000000000..65df3efa1f
--- /dev/null
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y1.java
@@ -0,0 +1,5 @@
+package src.test.files.checks.spring.Y1;
+import org.springframework.stereotype.Component;
+
+@Component
+class Y1 {} // Compliant
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y2.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y2.java
new file mode 100755
index 0000000000..8ff47fc542
--- /dev/null
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y2.java
@@ -0,0 +1,6 @@
+package src.Y2;
+
+import org.springframework.stereotype.Component;
+
+@Component
+class Y2 {} // Compliant
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Z2.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Z2.java
new file mode 100755
index 0000000000..4851ff4028
--- /dev/null
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Z2.java
@@ -0,0 +1,7 @@
+package src.test.files.checks.spring.Z2;
+
+import org.springframework.stereotype.Component;
+
+
+@Component
+class Z2 {} // Compliant
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java
index 407b0ffbe6..8db8e45787 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java
@@ -1,8 +1,6 @@
 package foo.bar.Ko;
 
-import org.springframework.stereotype.Controller;
-import org.springframework.stereotype.Service;
-import org.springframework.stereotype.Repository;
+import org.springframework.stereotype.*;
 import org.springframework.web.bind.annotation.RestController;
 
 // Different from root package hierarchy
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java
index fbf569be46..688c88af5f 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java
@@ -1,8 +1,6 @@
 package src.test.files.checks.spring.SpringBootApplication.Ok;
 
-import org.springframework.stereotype.Controller;
-import org.springframework.stereotype.Service;
-import org.springframework.stereotype.Repository;
+import org.springframework.stereotype.*;
 import org.springframework.web.bind.annotation.RestController;
 
 // Sub-package of the root package.
@@ -16,5 +14,8 @@
 @Controller
 class Ok3 {} // Compliant
 
-@RestController
+@Repository
 class Ok4 {} // Compliant
+
+@RestController
+class Ok5 {} // Compliant
diff --git a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java
index 9aed531be6..36aed56b8d 100755
--- a/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java
+++ b/java-checks/src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java
@@ -1,9 +1,6 @@
 package src.test.files.checks.spring.SpringBootApplication;
 
-import org.springframework.stereotype.Controller;
-import org.springframework.stereotype.Service;
-import org.springframework.stereotype.Repository;
-import org.springframework.boot.SpringApplication;
+import org.springframework.stereotype.Component;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
@@ -12,7 +9,6 @@
   public static void main(String[] args) {
     SpringApplication.run(Application.class, args);
   }
-
 }
 
 @Component
diff --git a/java-checks/src/test/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheckTest.java b/java-checks/src/test/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheckTest.java
index 3dc665c63b..1c8cece174 100755
--- a/java-checks/src/test/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheckTest.java
+++ b/java-checks/src/test/java/org/sonar/java/checks/spring/SpringBeansShouldBeAccessibleCheckTest.java
@@ -20,111 +20,108 @@
 package org.sonar.java.checks.spring;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.sonar.sslr.api.typed.ActionParser;
 import java.io.File;
-import java.io.IOException;
-import java.nio.file.FileVisitResult;
-import java.nio.file.FileVisitor;
-import java.nio.file.Files;
-import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.nio.file.SimpleFileVisitor;
-import java.nio.file.attribute.BasicFileAttributes;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
-import java.util.stream.Collectors;
+import java.util.Set;
+import org.assertj.core.api.Fail;
 import org.junit.Test;
-import org.sonar.java.SonarComponents;
+import org.sonar.java.AnalyzerMessage;
 import org.sonar.java.ast.JavaAstScanner;
 import org.sonar.java.ast.parser.JavaParser;
+import org.sonar.java.ast.visitors.SubscriptionVisitor;
 import org.sonar.java.checks.verifier.CheckVerifier;
-import org.sonar.java.checks.verifier.JavaCheckVerifier;
 import org.sonar.java.model.JavaVersionImpl;
-import org.sonar.java.model.VisitorsBridge;
 import org.sonar.java.model.VisitorsBridgeForTests;
-import org.sonar.java.se.SymbolicExecutionMode;
-import org.sonar.plugins.java.api.JavaCheck;
-import org.sonar.plugins.java.api.JavaVersion;
+import org.sonar.plugins.java.api.tree.SyntaxTrivia;
 import org.sonar.plugins.java.api.tree.Tree;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 public class SpringBeansShouldBeAccessibleCheckTest {
 
   private static final String DEFAULT_TEST_JARS_DIRECTORY = "target/test-jars";
 
   @Test
-  public void classicTest() {
-    //JavaCheckVerifier.verify("src/test/files/checks/spring/SpringComponentWithNonAutowiredMembersCheck.java", new SpringBeansShouldBeAccessibleCheck());
-    JavaCheckVerifier.verify("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java", new SpringBeansShouldBeAccessibleCheck());
+  public void testComponentScan() {
+    LocalVerifier localVerifier = new LocalVerifier();
+    List<File> filesToScan = Arrays.asList(
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/C.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y1.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Y2.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/Z2.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java"));
+
+    Set<AnalyzerMessage> analysisResult = scanFiles(localVerifier, filesToScan);
+
+    localVerifier.checkIssues(analysisResult, false);
   }
 
   @Test
-  public void testComponentScan() {
-    List<File> classPath = new ArrayList<>();
+  public void testSpringBootApplication() {
+    LocalVerifier localVerifier = new LocalVerifier();
+    List<File> filesToScan = Arrays.asList(
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java"),
+        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java")
+    );
 
-    classPath =  getFilesRecursively(Paths.get(DEFAULT_TEST_JARS_DIRECTORY), new String[] {"jar", "zip"});
+    Set<AnalyzerMessage> analysisResult = scanFiles(localVerifier, filesToScan);
 
-    classPath.add(new File("target/test-classes"));
-    SpringBeansShouldBeAccessibleCheck check = new SpringBeansShouldBeAccessibleCheck();
+    localVerifier.checkIssues(analysisResult, false);
+  }
 
-    List<File> filesToScan = Arrays.asList(new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/A.java"),
-        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/B.java"),
-        new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/ComponentScan/ComponentScan.java"));
-    SonarComponents sonarComponents = CheckVerifier.sonarComponents(filesToScan.get(0));
-    VisitorsBridge vb = new VisitorsBridge(ImmutableList.of(check), classPath, sonarComponents, SymbolicExecutionMode.DISABLED);
+  private Set<AnalyzerMessage> scanFiles(LocalVerifier localVerifier, List<File> filesToScan) {
+    List<File> classPath = Arrays.asList(
+        Paths.get("target/test-jars/spring-web-4.3.7.RELEASE.jar").toFile(),
+        Paths.get("target/test-jars/spring-boot-autoconfigure-2.0.2.RELEASE.jar").toFile(),
+        Paths.get("target/test-jars/spring-context-4.3.7.RELEASE.jar").toFile());
+    VisitorsBridgeForTests vb = new VisitorsBridgeForTests(
+        ImmutableList.of(new SpringBeansShouldBeAccessibleCheck(), new ExpectedIssueCollector(localVerifier)),
+        classPath,
+        null);
     vb.setJavaVersion(new JavaVersionImpl());
+
     JavaAstScanner astScanner = new JavaAstScanner(JavaParser.createParser(), null);
     astScanner.setVisitorBridge(vb);
     astScanner.scan(filesToScan);
 
-    assertThat(check.componentScanPackageNames).isNotEmpty();
-    assertThat(check.springBeansPerPackage).isNotEmpty();
+    VisitorsBridgeForTests.TestJavaFileScannerContext testJavaFileScannerContext = vb.lastCreatedTestContext();
+    if (testJavaFileScannerContext == null) {
+      Fail.fail("Semantic was required but it was not possible to create it. Please checks the logs to find out the reason.");
+    }
+
+    return testJavaFileScannerContext.getIssues();
   }
-//
-//  @Test
-//  public void testSpringBootApplication() {
-//    SpringBeansShouldBeAccessibleCheck check = new SpringBeansShouldBeAccessibleCheck();
-//    JavaAstScanner.scanSingleFileForTests(new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ko.java"), new VisitorsBridge(check));
-//    JavaAstScanner.scanSingleFileForTests(new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/Ok.java"), new VisitorsBridge(check));
-//    JavaAstScanner.scanSingleFileForTests(new File("src/test/files/checks/spring/SpringBeansShouldBeAccessibleCheck/SpringBootApplication/SpringBoot.java"), new VisitorsBridge(check));
-//
-//    assertThat(check.springBeansPerPackage).isNotEmpty();
-//    assertThat(check.componentScanPackageNames).isNotEmpty();
-
-//  }
-
-  static List<File> getFilesRecursively(Path root, final String[] extensions) {
-    final List<File> files = new ArrayList<>();
-
-    FileVisitor<Path> visitor = new SimpleFileVisitor<Path>() {
-      @Override
-      public FileVisitResult visitFile(Path filePath, BasicFileAttributes attrs) throws IOException {
-        for (String extension : extensions) {
-          if (filePath.toString().endsWith("." + extension)) {
-            files.add(filePath.toFile());
-            break;
-          }
-        }
-        return FileVisitResult.CONTINUE;
-      }
-
-      @Override
-      public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
-        return FileVisitResult.CONTINUE;
-      }
-    };
-
-    try {
-      Files.walkFileTree(root, visitor);
-    } catch (IOException e) {
-      // we already ignore errors in the visitor
+
+  private static class LocalVerifier extends CheckVerifier {
+    @Override
+    public String getExpectedIssueTrigger() {
+      return "// " + ISSUE_MARKER;
+    }
+    @Override
+    protected void collectExpectedIssues(String comment, int line) {
+      super.collectExpectedIssues(comment, line);
     }
+  }
+
+  private static class ExpectedIssueCollector extends SubscriptionVisitor {
+
+    private final LocalVerifier verifier;
 
-    return files;
+    public ExpectedIssueCollector(LocalVerifier verifier) {
+      this.verifier = verifier;
+    }
+
+    @Override
+    public List<Tree.Kind> nodesToVisit() {
+      return ImmutableList.of(Tree.Kind.TRIVIA);
+    }
+
+    @Override
+    public void visitTrivia(SyntaxTrivia syntaxTrivia) {
+      verifier.collectExpectedIssues(syntaxTrivia.comment(), syntaxTrivia.startLine());
+    }
   }
 }
diff --git a/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java b/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java
index a1f9e48604..b2f1a2841f 100755
--- a/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java
+++ b/java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java
@@ -231,6 +231,7 @@ public void endOfAnalysis() {
       }
       LOG.warn("Classes not found during the analysis : [{}{}]", classesNotFound.stream().limit(50).collect(Collectors.joining(", ")), message);
     }
+    scanners.forEach(JavaFileScanner::endOfAnalysis);
     classLoader.close();
   }
 }
diff --git a/java-frontend/src/main/java/org/sonar/plugins/java/api/JavaFileScanner.java b/java-frontend/src/main/java/org/sonar/plugins/java/api/JavaFileScanner.java
index 706f6b5733..c6231e6016 100755
--- a/java-frontend/src/main/java/org/sonar/plugins/java/api/JavaFileScanner.java
+++ b/java-frontend/src/main/java/org/sonar/plugins/java/api/JavaFileScanner.java
@@ -33,4 +33,8 @@
    */
   void scanFile(JavaFileScannerContext context);
 
+  /**
+   * Method called at the end of analysis, after all files have been analyzed.
+   */
+  default void endOfAnalysis() { }
 }
diff --git a/java-frontend/src/test/java/org/sonar/java/ast/JavaAstScannerTest.java b/java-frontend/src/test/java/org/sonar/java/ast/JavaAstScannerTest.java
index fa25680573..3fa76d7bc9 100755
--- a/java-frontend/src/test/java/org/sonar/java/ast/JavaAstScannerTest.java
+++ b/java-frontend/src/test/java/org/sonar/java/ast/JavaAstScannerTest.java
@@ -70,7 +70,9 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
@@ -139,13 +141,18 @@ public void should_handle_analysis_cancellation() throws Exception {
       public void scanFile(JavaFileScannerContext context) {
         // do nothing
       }
+      @Override
+      public void endOfAnalysis() {
+        // do nothing
+      }
     });
     SonarComponents sonarComponents = mock(SonarComponents.class);
     when(sonarComponents.analysisCancelled()).thenReturn(true);
     JavaAstScanner scanner = new JavaAstScanner(JavaParser.createParser(), sonarComponents);
     scanner.setVisitorBridge(new VisitorsBridge(Lists.newArrayList(visitor), Lists.newArrayList(), sonarComponents));
     scanner.scan(ImmutableList.of(new File("src/test/files/metrics/NoSonar.java")));
-    verifyZeroInteractions(visitor);
+    verify(visitor, never()).scanFile(any());
+    verify(visitor, times(1)).endOfAnalysis();
   }
 
   @Test
@@ -227,7 +234,10 @@ public void should_report_analysis_error_in_sonarLint_context_withSQ_6_0() {
     scanner.setVisitorBridge(new VisitorsBridge(Lists.newArrayList(listener), Lists.newArrayList(), sonarComponents));
     scanner.scan(ImmutableList.of(new File("src/test/resources/AstScannerParseError.txt")));
     verify(sonarComponents).reportAnalysisError(any(RecognitionException.class), any(File.class));
-    verifyZeroInteractions(listener);
+    verify(listener, never()).scanFile(any());
+    verify(listener, never()).processRecognitionException(any());
+    verify(listener, never()).processException(any());
+    verify(listener, times(1)).endOfAnalysis();
   }
 
   private static JavaAstScanner defaultJavaAstScanner() {
