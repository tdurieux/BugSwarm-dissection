diff --git a/plugin_ide.core.tests/src/com/googlecode/goclipse/core/engine/GoBuildManagerTest.java b/plugin_ide.core.tests/src/com/googlecode/goclipse/core/engine/GoBuildManagerTest.java
index b85175bf42..9bc1da8a1d 100755
--- a/plugin_ide.core.tests/src/com/googlecode/goclipse/core/engine/GoBuildManagerTest.java
+++ b/plugin_ide.core.tests/src/com/googlecode/goclipse/core/engine/GoBuildManagerTest.java
@@ -92,7 +92,7 @@ protected ToolManager getToolManager() {
 		testGetBuildTargetFor(pbi, BUILD_TYPE_RunTests+":go_foo", "go_foo", BUILD_TYPE_RunTests, null);
 		
 		// Test without separator
-		testGetBuildTargetFor(pbi, "go_package", "go_package", "build");
+		testGetBuildTargetFor(pbi, ":go_package", "go_package", "build");
 		
 		testBuildOperation();
 	}
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/ToolManager.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/ToolManager.java
index 4df1e2cceb..c25d5b9fd2 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/ToolManager.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/ToolManager.java
@@ -14,6 +14,8 @@
 import static melnorme.utilbox.core.CoreUtil.list;
 
 import java.nio.file.Path;
+import java.util.Optional;
+import java.util.function.Supplier;
 
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.CoreException;
@@ -76,18 +78,26 @@ public String getSDKPathPreference(IProject project) {
 	
 	protected final IStringVariableManager globalVarManager = VariablesPlugin.getDefault().getStringVariableManager();
 	
-	public VariablesResolver getVariablesManager(IProject project) {
+	public VariablesResolver getVariablesManager(Optional<IProject> project) {
 		VariablesResolver variablesResolver = new VariablesResolver(globalVarManager);
 		
 		setupVariableResolver(variablesResolver, project);
 		return variablesResolver;
 	}
 	
-	protected void setupVariableResolver(VariablesResolver variablesResolver, IProject project) {
+	protected void setupVariableResolver(VariablesResolver variablesResolver, Optional<IProject> project) {
+		Supplier<String> sdkToolPath;
+		
+		if(project.isPresent()) {
+			sdkToolPath = ToolchainPreferences.SDK_PATH2.getProperty(project.get());
+		} else {
+			sdkToolPath = ToolchainPreferences.SDK_PATH2.getGlobalPreference();
+		}
+		
 		variablesResolver.putDynamicVar(new SupplierAdapterVar(
 			LangCore_Actual.VAR_NAME_SdkToolPath, 
 			LangCore_Actual.VAR_NAME_SdkToolPath_DESCRIPTION, 
-			ToolchainPreferences.SDK_PATH2.getProperty(project))
+			sdkToolPath)
 		);
 	}
 	
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManager.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManager.java
index 935baed9e1..9f0b8087dd 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManager.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManager.java
@@ -455,6 +455,17 @@ else if(requireNonNull) {
 		return buildTarget;
 	}
 	
+	public BuildTarget getFirstDefinedBuildTarget(IProject project, BuildType buildType) throws CommonException {
+		ProjectBuildInfo buildInfo = getBuildInfo(project);
+		
+		assertNotNull(buildType);
+		BuildTarget foundBT = buildInfo.getBuildTargets().findElement((bt) -> bt.getBuildType() == buildType);
+		if(foundBT == null) {
+			throw CommonException.fromMsgFormat(BuildManagerMessages.NO_BUILD_TARGET_FOUND_FOR_BUILD_TYPE_0, buildType.getName());
+		}
+		return foundBT;
+	}
+	
 	/* ----------------- Build operations ----------------- */
 	
 	protected BuildOperationCreator createBuildOperationCreator(IOperationMonitor opMonitor, IProject project) {
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManagerMessages.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManagerMessages.java
index 9651fca338..bd5297fbcd 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManagerMessages.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildManagerMessages.java
@@ -38,6 +38,8 @@
 	
 	public String MSG_Starting_LANG_Build = "Starting {0} build";
 	
+	public String NO_BUILD_TARGET_FOUND_FOR_BUILD_TYPE_0 = "No Build Target found for build type `{0}`. ";
+	
 	public static String BuildConfig_NotFound(String buildConfigName) {
 		return MessageFormat.format("Build configuration `{0}` not found.", buildConfigName);
 	}
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTarget.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTarget.java
index e8396bf51a..4ac5e9aab2 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTarget.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/BuildTarget.java
@@ -68,7 +68,7 @@ public IProject getProject() {
 	
 	@Override
 	public String toString() {
-		return project.getName() + " >> " + targetData.getTargetName();
+		return project.getName() + "//" + targetData.getTargetName();
 	}
 	
 	public Location getProjectLocation() throws CommonException {
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommandInvocation.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommandInvocation.java
new file mode 100755
index 0000000000..cf02c5b43e
--- /dev/null
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommandInvocation.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Copyright (c) 2016 Bruno Medeiros and other Contributors.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     Bruno Medeiros - initial API and implementation
+ *******************************************************************************/
+package melnorme.lang.ide.core.operations.build;
+
+import static melnorme.utilbox.core.Assert.AssertNamespace.assertNotNull;
+
+import java.util.Optional;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.debug.core.DebugPlugin;
+
+import melnorme.lang.ide.core.operations.ToolManager;
+import melnorme.utilbox.collections.ArrayList2;
+import melnorme.utilbox.collections.Indexable;
+import melnorme.utilbox.core.CommonException;
+
+public class CommandInvocation {
+	
+	protected final String commandInvocation;
+	protected final ToolManager toolManager;
+	protected final Optional<IProject> project; 
+	
+	public CommandInvocation(String commandInvocation, ToolManager toolManager, Optional<IProject> project) {
+		this.commandInvocation = assertNotNull(commandInvocation);
+		this.toolManager = assertNotNull(toolManager);
+		this.project = assertNotNull(project);
+	}
+	
+	public ToolManager getToolManager() {
+		return toolManager;
+	}
+	
+	public Indexable<String> getEffectiveCommandLine() throws CommonException {
+		VariablesResolver variablesManager = getToolManager().getVariablesManager(project);
+		
+		String evaluatedCommandLine = variablesManager.performStringSubstitution(commandInvocation);
+		
+		String[] evaluatedArguments = DebugPlugin.parseArguments(evaluatedCommandLine);
+		return new ArrayList2<>(evaluatedArguments);
+	}
+	
+}
\ No newline at end of file
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommonBuildTargetOperation.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommonBuildTargetOperation.java
index 053ec3b51d..47b4ebfc3e 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommonBuildTargetOperation.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/operations/build/CommonBuildTargetOperation.java
@@ -12,16 +12,15 @@
 
 import static melnorme.utilbox.core.Assert.AssertNamespace.assertNotNull;
 
+import java.util.Optional;
+
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.debug.core.DebugPlugin;
 
 import melnorme.lang.ide.core.operations.AbstractToolManagerOperation;
 import melnorme.lang.ide.core.operations.ILangOperationsListener_Default.IOperationMonitor;
 import melnorme.lang.ide.core.operations.ToolManager;
-import melnorme.lang.ide.core.operations.build.BuildManager.BuildType;
 import melnorme.lang.ide.core.utils.ProgressSubTaskHelper;
 import melnorme.lang.tooling.bundle.BuildConfiguration;
-import melnorme.utilbox.collections.ArrayList2;
 import melnorme.utilbox.collections.Indexable;
 import melnorme.utilbox.concurrency.OperationCancellation;
 import melnorme.utilbox.core.CommonException;
@@ -33,8 +32,7 @@
 	protected final IOperationMonitor opMonitor;
 	
 	protected final BuildConfiguration buildConfiguration;
-	protected final BuildType buildType;
-	protected final String buildCommand;
+	protected final CommandInvocation buildCommand;
 	
 	public CommonBuildTargetOperation(
 			ToolManager toolManager, BuildTarget buildTarget, IOperationMonitor opHandler
@@ -45,8 +43,8 @@ public CommonBuildTargetOperation(
 		
 		assertNotNull(buildTarget);
 		this.buildConfiguration = assertNotNull(buildTarget.getBuildConfiguration());
-		this.buildType = assertNotNull(buildTarget.getBuildType());
-		this.buildCommand = assertNotNull(buildTarget.getEffectiveBuildCommand());
+		String buildCommand = assertNotNull(buildTarget.getEffectiveBuildCommand());
+		this.buildCommand = assertNotNull(new CommandInvocation(buildCommand, toolManager, Optional.of(project)));
 	}
 	
 	public BuildConfiguration getConfiguration() {
@@ -57,14 +55,6 @@ public String getConfigurationName() {
 		return buildConfiguration.getName();
 	}
 	
-	public BuildType getBuildType() {
-		return buildType;
-	}
-	
-	public String getBuildTypeName() {
-		return buildType.getName();
-	}
-	
 	public String getBuildTargetName() {
 		return buildTargetName;
 	}
@@ -82,16 +72,7 @@ protected String getBuildOperationName() {
 	}
 	
 	public Indexable<String> getEffectiveProccessCommandLine() throws CommonException {
-		return evaluateBuildCommand(buildCommand);
-	}
-	
-	protected ArrayList2<String> evaluateBuildCommand(String toolCommandLine) throws CommonException {
-		VariablesResolver variablesManager = getToolManager().getVariablesManager(project);
-		
-		toolCommandLine = variablesManager.performStringSubstitution(toolCommandLine);
-		
-		String[] evaluatedArguments = DebugPlugin.parseArguments(toolCommandLine);
-		return new ArrayList2<>(evaluatedArguments);
+		return buildCommand.getEffectiveCommandLine();
 	}
 	
 	public ProcessBuilder getToolProcessBuilder() throws CommonException, OperationCancellation {
diff --git a/plugin_ide.core/src-lang/melnorme/lang/ide/core/utils/prefs/IGlobalPreference.java b/plugin_ide.core/src-lang/melnorme/lang/ide/core/utils/prefs/IGlobalPreference.java
index 9399ca7c48..b3b7b075a0 100755
--- a/plugin_ide.core/src-lang/melnorme/lang/ide/core/utils/prefs/IGlobalPreference.java
+++ b/plugin_ide.core/src-lang/melnorme/lang/ide/core/utils/prefs/IGlobalPreference.java
@@ -10,16 +10,19 @@
  *******************************************************************************/
 package melnorme.lang.ide.core.utils.prefs;
 
+import java.util.function.Supplier;
+
 import org.eclipse.core.resources.IProject;
 
 import melnorme.utilbox.core.CommonException;
 import melnorme.utilbox.fields.IFieldView;
 
 
-public interface IGlobalPreference<T> {
+public interface IGlobalPreference<T> extends Supplier<T> {
 	
 	IFieldView<T> asField();
 	
+	@Override
 	default T get() {
 		return asField().get();
 	}
