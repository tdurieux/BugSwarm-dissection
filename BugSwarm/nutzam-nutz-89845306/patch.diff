diff --git a/src/org/nutz/http/Http.java b/src/org/nutz/http/Http.java
index 5077b93198..cc977acdbf 100755
--- a/src/org/nutz/http/Http.java
+++ b/src/org/nutz/http/Http.java
@@ -1,5 +1,6 @@
 package org.nutz.http;
 
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
@@ -18,6 +19,7 @@
 import javax.net.ssl.X509TrustManager;
 
 import org.nutz.http.Request.METHOD;
+import org.nutz.http.sender.FilePostSender;
 import org.nutz.lang.Encoding;
 import org.nutz.lang.Lang;
 
@@ -100,6 +102,25 @@ public static Response post2(String url, Map<String, Object> params, int timeout
                      .send();
     }
     
+    public static Response post3(String url, Object body, Header header, int timeout) {
+        Request req = Request.create(url, METHOD.POST).setHeader(header);
+        if (body != null) {
+            if (body instanceof InputStream) {
+                req.setInputStream((InputStream) body);
+            } else if (body instanceof byte[]) {
+                req.setData((byte[])body);
+            } else {
+                req.setData(String.valueOf(body));
+            }
+        }
+        return Sender.create(req).setTimeout(timeout).send();
+    }
+    
+    public static Response upload(String url, Map<String, Object> params, Header header, int timeout) {
+        Request req = Request.create(url, METHOD.POST, params, header);
+        return new FilePostSender(req).setTimeout(timeout).send();
+    }
+    
     public static String encode(Object s) {
         return encode(s, null);
     }
diff --git a/src/org/nutz/http/Request.java b/src/org/nutz/http/Request.java
index 98acbf58a1..e13829cb3f 100755
--- a/src/org/nutz/http/Request.java
+++ b/src/org/nutz/http/Request.java
@@ -5,12 +5,16 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
+import java.util.Map.Entry;
 
 import org.nutz.json.Json;
+import org.nutz.lang.ContinueLoop;
+import org.nutz.lang.Each;
 import org.nutz.lang.Encoding;
+import org.nutz.lang.ExitLoop;
 import org.nutz.lang.Lang;
+import org.nutz.lang.LoopException;
 
 public class Request {
 
@@ -94,16 +98,23 @@ public URL getUrl() {
     }
 
     public String getURLEncodedParams() {
-        StringBuilder sb = new StringBuilder();
+        final StringBuilder sb = new StringBuilder();
         if (params != null) {
-            for (Iterator<String> it = params.keySet().iterator(); it.hasNext();) {
-                String key = it.next();
-                sb.append(Http.encode(key, this.enc))
-                  .append('=')
-                  .append(Http.encode(params.get(key), this.enc));
-                if (it.hasNext())
-                    sb.append('&');
+            for (Entry<String, Object> en : params.entrySet()) {
+                final String key = en.getKey();
+                Object val = en.getValue();
+                if (val == null)
+                    val = "";
+                Lang.each(val, new Each<Object>() {
+                    public void invoke(int index, Object ele, int length)throws ExitLoop, ContinueLoop, LoopException {
+                        sb.append(Http.encode(key, enc))
+                        .append('=')
+                        .append(Http.encode(ele, enc)).append('&');
+                    }
+                });
             }
+            if (sb.length() > 0)
+                sb.setLength(sb.length() - 1);
         }
         return sb.toString();
     }
diff --git a/src/org/nutz/http/sender/FilePostSender.java b/src/org/nutz/http/sender/FilePostSender.java
index 48e50b488e..ced4a41d19 100755
--- a/src/org/nutz/http/sender/FilePostSender.java
+++ b/src/org/nutz/http/sender/FilePostSender.java
@@ -16,16 +16,9 @@
 import org.nutz.lang.Lang;
 import org.nutz.lang.LoopException;
 import org.nutz.lang.Streams;
-import org.nutz.lang.random.R;
 
-/**
- * 文件上传
- * @author wendal
- * @author Kerbores
- * @email kerbores@gmail.com
- */
 public class FilePostSender extends PostSender {
-    
+
     public static final String SEPARATOR = "\r\n";
 
     public FilePostSender(Request request) {
@@ -35,7 +28,7 @@ public FilePostSender(Request request) {
     @Override
     public Response send() throws HttpException {
         try {
-            final String boundary = "---------------------------[nutz]"+R.UU32();
+            String boundary = "---------------------------[Nutz]7d91571440efc";
             openConnection();
             setupRequestHeader();
             conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
@@ -46,44 +39,49 @@ public Response send() throws HttpException {
                 for (Entry<String, ?> entry : params.entrySet()) {
                     outs.writeBytes("--" + boundary + SEPARATOR);
                     final String key = entry.getKey();
-                    File[] fs = null;
-                    if (entry.getValue() instanceof File)
-                        fs = Lang.array((File) entry.getValue());
-                    else if (entry.getValue() instanceof File[])
-                        fs = (File[]) entry.getValue();
-                    if (fs != null) {
-                        Lang.each(fs, new Each<File>() {
+                    Object val = entry.getValue();
+                    if (val == null)
+                        val = "";
+                    Lang.each(val, new Each<Object>() {
+                        public void invoke(int index, Object ele, int length) throws ExitLoop, ContinueLoop, LoopException {
 
-                            @Override
-                            public void invoke(int index, File f, int length) throws ExitLoop, ContinueLoop, LoopException {
-                                try {
-                                    if (f != null && f.exists()) {
-                                        outs.writeBytes("Content-Disposition:    form-data;    name=\"" + key + "\";    filename=\"" + f.getName() + "\"\r\n");
-                                        outs.writeBytes("Content-Type:   application/octet-stream\r\n\r\n");
-                                        if (f.length() == 0)
-                                            return;
-                                        InputStream is = Streams.fileIn(f);
-                                        byte[] buffer = new byte[8192];
-                                        while (true) {
-                                            int amountRead = is.read(buffer);
-                                            if (amountRead == -1) {
-                                                break;
-                                            }
-                                            outs.write(buffer, 0, amountRead);
-                                        }
-                                        outs.writeBytes("\r\n");
+                            File f = null;
+                            if (ele instanceof File)
+                                f = (File) ele;
+                            try {
+                                if (f != null && f.exists() && f.length() > 0) {
+                                    outs.writeBytes("Content-Disposition:    form-data;    name=\""
+                                                    + key
+                                                    + "\";    filename=\"");
+                                    outs.write(f.getName().getBytes(request.getEnc()));
+                                    outs.writeBytes("\"" + SEPARATOR);
+                                    outs.writeBytes("Content-Type:   application/octet-stream"
+                                                    + SEPARATOR
+                                                    + SEPARATOR);
+                                    InputStream is = null;
+                                    try {
+                                        is = Streams.fileIn(f);
+                                        Streams.write(outs, is);
+                                        outs.writeBytes(SEPARATOR);
+                                    }
+                                    finally {
                                         Streams.safeClose(is);
                                     }
-                                    outs.writeBytes("--" + boundary + SEPARATOR);
-                                } catch (Exception e) {
-                                    e.printStackTrace();
+                                } else {
+                                    outs.writeBytes("Content-Disposition:    form-data;    name=\""
+                                                    + key
+                                                    + "\""
+                                                    + SEPARATOR
+                                                    + SEPARATOR);
+                                    outs.write(String.valueOf(ele).getBytes(request.getEnc()));
+                                    outs.writeBytes(SEPARATOR);
                                 }
                             }
-                        });
-                    } else {
-                        outs.writeBytes("Content-Disposition:    form-data;    name=\"" + key + "\"\r\n\r\n");
-                        outs.write((entry.getValue() + "\r\n").getBytes());
-                    }
+                            catch (Exception e) {
+                                throw Lang.wrapThrow(e);
+                            }
+                        }
+                    });
                 }
                 outs.writeBytes("--" + boundary + "--" + SEPARATOR);
                 Streams.safeFlush(outs);
@@ -92,9 +90,9 @@ public void invoke(int index, File f, int length) throws ExitLoop, ContinueLoop,
 
             return createResponse(getResponseHeader());
 
-        } catch (IOException e) {
+        }
+        catch (IOException e) {
             throw new HttpException(request.getUrl().toString(), e);
         }
     }
-
 }
\ No newline at end of file
