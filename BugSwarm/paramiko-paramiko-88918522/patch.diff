diff --git a/paramiko/config.py b/paramiko/config.py
index 0b1345fd93..233a87d9fb 100755
--- a/paramiko/config.py
+++ b/paramiko/config.py
@@ -53,7 +53,7 @@ def parse(self, file_obj):
         """
         Read an OpenSSH config from the given file object.
 
-        :param file_obj: a file-like object to read the config file from
+        :param file file_obj: a file-like object to read the config file from
         """
         host = {"host": ['*'], "config": {}}
         for line in file_obj:
@@ -98,7 +98,7 @@ def lookup(self, hostname):
 
         The host-matching rules of OpenSSH's ``ssh_config`` man page are used:
         For each parameter, the first obtained value will be used.  The
-        configuration files contain sections separated by ``Host``
+        configuration files contain sections separated by ``Host''
         specifications, and that section is only applied for hosts that match
         one of the patterns given in the specification.
 
diff --git a/paramiko/pkey.py b/paramiko/pkey.py
index e95d60bad6..7d2be468cd 100755
--- a/paramiko/pkey.py
+++ b/paramiko/pkey.py
@@ -171,9 +171,8 @@ def from_private_key_file(cls, filename, password=None):
         is useless on the abstract PKey class.
 
         :param str filename: name of the file to read
-        :param str password:
-            an optional password to use to decrypt the key file, if it's
-            encrypted
+        :param str password: an optional password to use to decrypt the key file,
+            if it's encrypted
         :return: a new `.PKey` based on the given private key
 
         :raises IOError: if there was an error reading the file
@@ -188,18 +187,18 @@ def from_private_key_file(cls, filename, password=None):
     def from_private_key(cls, file_obj, password=None):
         """
         Create a key object by reading a private key from a file (or file-like)
-        object.  If the private key is encrypted and ``password`` is not
-        ``None``, the given password will be used to decrypt the key (otherwise
+        object.  If the private key is encrypted and ``password`` is not ``None``,
+        the given password will be used to decrypt the key (otherwise
         `.PasswordRequiredException` is thrown).
 
-        :param file_obj: the file-like object to read from
+        :param file file_obj: the file to read from
         :param str password:
             an optional password to use to decrypt the key, if it's encrypted
         :return: a new `.PKey` based on the given private key
 
         :raises IOError: if there was an error reading the key
-        :raises PasswordRequiredException:
-            if the private key file is encrypted, and ``password`` is ``None``
+        :raises PasswordRequiredException: if the private key file is encrypted,
+            and ``password`` is ``None``
         :raises SSHException: if the key file is invalid
         """
         key = cls(file_obj=file_obj, password=password)
@@ -224,7 +223,7 @@ def write_private_key(self, file_obj, password=None):
         Write private key contents into a file (or file-like) object.  If the
         password is not ``None``, the key is encrypted before writing.
 
-        :param file_obj: the file-like object to write into
+        :param file file_obj: the file object to write into
         :param str password: an optional password to use to encrypt the key
 
         :raises IOError: if there was an error writing to the file
@@ -310,9 +309,8 @@ def _write_private_key_file(self, tag, filename, data, password=None):
         a trivially-encoded format (base64) which is completely insecure.  If
         a password is given, DES-EDE3-CBC is used.
 
-        :param str tag:
-            ``"RSA"`` or ``"DSA"``, the tag used to mark the data block.
-        :param filename: name of the file to write.
+        :param str tag: ``"RSA"`` or ``"DSA"``, the tag used to mark the data block.
+        :param file filename: name of the file to write.
         :param str data: data blob that makes up the private key.
         :param str password: an optional password to use to encrypt the file.
 
diff --git a/paramiko/sftp_client.py b/paramiko/sftp_client.py
index f8c770424d..89840eaa96 100755
--- a/paramiko/sftp_client.py
+++ b/paramiko/sftp_client.py
@@ -599,7 +599,7 @@ def putfo(self, fl, remotepath, file_size=0, callback=None, confirm=True):
 
         The SFTP operations use pipelining for speed.
 
-        :param fl: opened file or file-like object to copy
+        :param file fl: opened file or file-like object to copy
         :param str remotepath: the destination path on the SFTP server
         :param int file_size:
             optional size parameter passed to callback. If none is specified,
diff --git a/tasks.py b/tasks.py
index 3d55a778f1..05654d3b11 100755
--- a/tasks.py
+++ b/tasks.py
@@ -3,7 +3,7 @@
 from shutil import rmtree, copytree
 
 from invoke import Collection, ctask as task
-from invocations.docs import docs, www, sites
+from invocations.docs import docs, www
 from invocations.packaging import publish
 
 
@@ -39,4 +39,4 @@ def release(ctx):
     print("\n\nDon't forget to update RTD's versions page for new minor releases!")
 
 
-ns = Collection(test, coverage, release, docs, www, sites)
+ns = Collection(test, coverage, release, docs, www)
