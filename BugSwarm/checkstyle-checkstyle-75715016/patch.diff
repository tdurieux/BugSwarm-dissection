diff --git a/pom.xml b/pom.xml
index 5679d450cc..a9f9b0148f 100755
--- a/pom.xml
+++ b/pom.xml
@@ -171,7 +171,8 @@
     <projectVersion>${project.version}</projectVersion>
     <antlr4.version>4.5.1</antlr4.version>
     <maven.site.plugin.version>3.4</maven.site.plugin.version>
-    <maven.findbugs.plugin.version>3.0.1</maven.findbugs.plugin.version>
+    <maven.findbugs.plugin.version>3.0.2</maven.findbugs.plugin.version>
+    <maven.pmd.plugin.version>3.5</maven.pmd.plugin.version>
     <tools.jar.version>1.7.0</tools.jar.version>
     <tools.jar.path>${java.home}/../lib/tools.jar</tools.jar.path>
     <java.version>1.7</java.version>
@@ -255,7 +256,7 @@
         <plugin>
           <groupId>org.apache.maven.plugins</groupId>
           <artifactId>maven-pmd-plugin</artifactId>
-          <version>3.5</version>
+          <version>${maven.pmd.plugin.version}</version>
           <configuration>
             <targetJdk>1.7</targetJdk>
             <minimumTokens>20</minimumTokens>
@@ -701,7 +702,6 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-pmd-plugin</artifactId>
-        <version>3.5</version>
         <executions>
           <execution>
             <goals>
@@ -714,7 +714,6 @@
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>findbugs-maven-plugin</artifactId>
-        <version>${maven.findbugs.plugin.version}</version>
         <executions>
           <execution>
             <goals>
diff --git a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
index e2b68fd32e..3d7c4b57b9 100755
--- a/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
+++ b/src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java
@@ -37,7 +37,7 @@ public ConfigurationBuilder(File aROOT)
 		listFiles(files, ROOT, "java");
 	}
 
-	private Configuration getConfigurationFromXML(String aConfigName,
+	private static Configuration getConfigurationFromXML(String aConfigName,
 			Properties aProps) throws CheckstyleException {
 		try {
 			return ConfigurationLoader.loadConfiguration(aConfigName,
diff --git a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java
index 4bed7d6b3f..37b2f4b1a8 100755
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java
@@ -21,6 +21,10 @@
     String msgOrder = "custom.import.order";
     String msgNongroup = "custom.import.order.nongroup.import";
 
+    /** Shortcuts to make code more compact */
+    private static final String STD = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.STANDARD_JAVA_PACKAGE_RULE_GROUP;
+    private static final String SPECIAL = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.SPECIAL_IMPORTS_RULE_GROUP;
+
     @BeforeClass
     public static void setConfigurationBuilder() throws CheckstyleException, IOException {
         builder = new ConfigurationBuilder(new File("src/it/"));
@@ -30,17 +34,17 @@ public static void setConfigurationBuilder() throws CheckstyleException, IOExcep
     public void customImportTest_1() throws IOException, Exception {
         
         final String[] expected = {
-            "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT"),
-            "7: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "8: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "9: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "10: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "11: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "12: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "13: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "14: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "15: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "16: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
+            "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "7: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.awt.Button"),
+            "8: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.awt.Frame"),
+            "9: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.awt.Dialog"),
+            "10: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.awt.event.ActionEvent"),
+            "11: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "javax.swing.JComponent"),
+            "12: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "javax.swing.JTable"),
+            "13: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.io.File"),
+            "14: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.io.IOException"),
+            "15: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.io.InputStream"),
+            "16: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.io.Reader"),
         };
         
         Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
@@ -54,14 +58,14 @@ public void customImportTest_1() throws IOException, Exception {
     public void customImportTest_2() throws IOException, Exception {
         
         final String[] expected = {
-            "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT"),
-            "7: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "8: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "9: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "10: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-            "11: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
+            "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "7: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.List"),
+            "8: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.StringTokenizer"),
+            "9: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.*"),
+            "10: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.concurrent.AbstractExecutorService"),
+            "11: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.concurrent.*"),
             "14: " + getCheckMessage(clazz, msgSeparator, "com.sun.xml.internal.xsom.impl.scd.Iterators"),
-            "16: " + getCheckMessage(clazz, msgOrder, "SPECIAL_IMPORTS"),
+            "16: " + getCheckMessage(clazz, msgOrder, SPECIAL, STD, "com.google.common.reflect.*"),
         };
 
         Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
@@ -75,13 +79,13 @@ public void customImportTest_2() throws IOException, Exception {
     public void customImportTest_3() throws IOException, Exception {
         
         final String[] expected = {
-                "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT"),
-                "8: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-                "9: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-                "10: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
-                "11: " + getCheckMessage(clazz, msgOrder, "STANDARD_JAVA_PACKAGE"),
+                "4: " + getCheckMessage(clazz, msgLex, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+                "8: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.StringTokenizer"),
+                "9: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.*"),
+                "10: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.concurrent.AbstractExecutorService"),
+                "11: " + getCheckMessage(clazz, msgOrder, STD, SPECIAL, "java.util.concurrent.*"),
                 "14: " + getCheckMessage(clazz, msgSeparator, "com.sun.xml.internal.xsom.impl.scd.Iterators"),
-                "16: " + getCheckMessage(clazz, msgOrder, "SPECIAL_IMPORTS"),
+                "16: " + getCheckMessage(clazz, msgOrder, SPECIAL, STD, "com.google.common.reflect.*"),
         };
 
         Configuration checkConfig = builder.getCheckConfig("CustomImportOrder");
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
index 6a44d8dba4..be532cd2cd 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Checker.java
@@ -432,7 +432,7 @@ public final void setClassLoader(ClassLoader classLoader) {
      */
     @Deprecated
     public final void setClassloader(ClassLoader loader) {
-        setClassLoader(loader);
+        classLoader = loader;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
index a0e218df4a..485f9116ae 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -292,27 +292,30 @@ private static AuditListener createListener(String format,
 
         // setup the output stream
         OutputStream out;
-        boolean closeOut;
+        boolean closeOutputStream;
         if (outputLocation != null) {
             out = new FileOutputStream(outputLocation);
-            closeOut = true;
+            closeOutputStream = true;
         }
         else {
             out = System.out;
-            closeOut = false;
+            closeOutputStream = false;
         }
 
         // setup a listener
         AuditListener listener;
         if ("xml".equals(format)) {
-            listener = new XMLLogger(out, closeOut);
+            listener = new XMLLogger(out, closeOutputStream);
 
         }
         else if ("plain".equals(format)) {
-            listener = new DefaultLogger(out, closeOut);
+            listener = new DefaultLogger(out, closeOutputStream);
 
         }
         else {
+            if (closeOutputStream) {
+                Utils.close(out);
+            }
             throw new IllegalStateException("Invalid output format. Found '" + format
                     + "' but expected 'plain' or 'xml'.");
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
index 7ea82de117..750e3b9f66 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Utils.java
@@ -19,7 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import java.io.Closeable;
 import java.io.File;
+import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -401,4 +403,21 @@ public static int getIntFromField(Field field, Object object) {
             throw new IllegalStateException(exception);
         }
     }
+
+    /**
+     * Closes a stream re-throwing IOException as IllegalStateException.
+     *
+     * @param closeable Closeable object
+     */
+    public static void close(Closeable closeable) {
+        if (closeable == null) {
+            return;
+        }
+        try {
+            closeable.close();
+        }
+        catch (IOException e) {
+            throw new IllegalStateException("Cannot close the stream", e);
+        }
+    }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java
index e854c5edde..87de87fc40 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/JavadocTokenTypes.java
@@ -130,7 +130,8 @@
      * }
      * </pre>
      */
-    public static final int JAVADOC_INLINE_TAG = JavadocParser.RULE_javadocInlineTag + RULE_TYPES_OFFSET;
+    public static final int JAVADOC_INLINE_TAG = JavadocParser.RULE_javadocInlineTag
+            + RULE_TYPES_OFFSET;
 
     /**
      * '@return' literal in @return Javadoc tag.
@@ -149,7 +150,8 @@
      *           |--TEXT[4x11] : [true if file exists]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCDBGG">
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCDBGG">
      * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
@@ -172,7 +174,9 @@
      *       |--TEXT[3x12] : [it is deprecated method]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#deprecated">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#deprecated">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int DEPRECATED_LITERAL = JavadocParser.DEPRECATED_LITERAL;
@@ -194,7 +198,9 @@
      *           |--TEXT[3x7] : [3.4 RELEASE]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHGJGD">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHGJGD">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int SINCE_LITERAL = JavadocParser.SINCE_LITERAL;
@@ -217,7 +223,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDJBFDB">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDJBFDB">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int SERIAL_DATA_LITERAL = JavadocParser.SERIAL_DATA_LITERAL;
@@ -248,7 +256,9 @@
      *           |--TEXT[3x29] : [objects counter]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGHIDG">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGHIDG">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int SERIAL_FIELD_LITERAL = JavadocParser.SERIAL_FIELD_LITERAL;
@@ -276,7 +286,9 @@
      *           |--TEXT[4x12] : [The bar.]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHJECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHJECF">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int PARAM_LITERAL = JavadocParser.PARAM_LITERAL;
@@ -308,7 +320,9 @@
      *               |--RIGHT_BRACE[3x53] : [)]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDIEDI">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDIEDI">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int SEE_LITERAL = JavadocParser.SEE_LITERAL;
@@ -342,7 +356,9 @@
      *           |--TEXT[3x8] : [serialized company name]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int SERIAL_LITERAL = JavadocParser.SERIAL_LITERAL;
@@ -364,7 +380,9 @@
      *           |--TEXT[3x9] : [1.3]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCHBAE">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCHBAE">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int VERSION_LITERAL = JavadocParser.VERSION_LITERAL;
@@ -388,7 +406,9 @@
      *           |--TEXT[3x24] : [if query is not correct]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCEAHH">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCEAHH">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int EXCEPTION_LITERAL = JavadocParser.EXCEPTION_LITERAL;
@@ -412,7 +432,9 @@
      *           |--TEXT[3x21] : [if query is not correct]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCHAHD">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCHAHD">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int THROWS_LITERAL = JavadocParser.THROWS_LITERAL;
@@ -434,7 +456,9 @@
      *           |--TEXT[3x8] : [Baratali Izmailov]
      * }</pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCBAHA">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCBAHA">
+     * Oracle Docs</a>
      * @see #JAVADOC_TAG
      */
     public static final int AUTHOR_LITERAL = JavadocParser.AUTHOR_LITERAL;
@@ -519,7 +543,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDFHHBB">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDFHHBB">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int CODE_LITERAL = JavadocParser.CODE_LITERAL;
@@ -560,7 +586,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDBACBF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDBACBF">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int DOC_ROOT_LITERAL = JavadocParser.DOC_ROOT_LITERAL;
@@ -574,7 +602,8 @@
      * <pre>{@code {&#64;link org.apache.utils.Lists.Comparator#compare(Object)}}</pre>
      * <p><b>Tree:</b></p>
      * <pre>
-     * {@code |--JAVADOC_INLINE_TAG[1x0] : [{&#64;link org.apache.utils.Lists.Comparator#compare(Object)}]
+     * {@code |--JAVADOC_INLINE_TAG[1x0] :
+     *               [{&#64;link org.apache.utils.Lists.Comparator#compare(Object)}]
      *        |--JAVADOC_INLINE_TAG_START[1x0] : [{]
      *        |--LINK_LITERAL[1x1] : [@link]
      *        |--WS[1x6] : [ ]
@@ -594,7 +623,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDIECH">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDIECH">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int LINK_LITERAL = JavadocParser.LINK_LITERAL;
@@ -620,7 +651,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGJCHC">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGJCHC">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int INHERIT_DOC_LITERAL = JavadocParser.INHERIT_DOC_LITERAL;
@@ -635,7 +668,8 @@
      * <pre>{@code {&#64;linkplain org.apache.utils.Lists.Comparator#compare(Object) compare}}</pre>
      * <b>Tree:</b>
      * <pre>
-     * {@code |--JAVADOC_INLINE_TAG[1x0] : [{&#64;linkplain org.apache.utils.Lists.Comparator#compare(Object) compare}]
+     * {@code |--JAVADOC_INLINE_TAG[1x0] :
+     *               [{&#64;linkplain org.apache.utils.Lists.Comparator#compare(Object) compare}]
      *        |--JAVADOC_INLINE_TAG_START[1x0] : [{]
      *        |--LINKPLAIN_LITERAL[1x1] : [@linkplain]
      *        |--WS[1x11] : [ ]
@@ -657,7 +691,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGBICD">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDGBICD">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int LINKPLAIN_LITERAL = JavadocParser.LINKPLAIN_LITERAL;
@@ -686,7 +722,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCFJDG">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDCFJDG">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int LITERAL_LITERAL = JavadocParser.LITERAL_LITERAL;
@@ -718,7 +756,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDCDHH">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDDCDHH">
+     * Oracle Docs</a>
      * @see #JAVADOC_INLINE_TAG
      */
     public static final int VALUE_LITERAL = JavadocParser.VALUE_LITERAL;
@@ -1055,7 +1095,8 @@
      * <pre>{@code @throws IOException if &lt;b&gt;connection&lt;/b&gt; problems occur}</pre>
      * <b>Tree:</b>
      * <pre>
-     * {@code |--JAVADOC_TAG[1x0] : [@throws IOException if &lt;b&gt;connection&lt;/b&gt; problems occur]
+     * {@code |--JAVADOC_TAG[1x0] :
+     *               [@throws IOException if &lt;b&gt;connection&lt;/b&gt; problems occur]
      *        |--THROWS_LITERAL[1x0] : [@throws]
      *        |--WS[1x7] : [ ]
      *        |--CLASS_NAME[1x8] : [IOException]
@@ -1122,7 +1163,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHJECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHJECF">
+     * Oracle Docs</a>
      * @see #PARAM_LITERAL
      */
     public static final int PARAMETER_NAME = JavadocParser.PARAMETER_NAME;
@@ -1143,7 +1186,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">
+     * Oracle Docs</a>
      * @see #SERIAL_LITERAL
      */
     public static final int LITERAL_EXCLUDE = JavadocParser.LITERAL_EXCLUDE;
@@ -1164,7 +1209,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">
+     * Oracle Docs</a>
      * @see #SERIAL_LITERAL
      */
     public static final int LITERAL_INCLUDE = JavadocParser.LITERAL_INCLUDE;
@@ -1189,7 +1236,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">
+     * Oracle Docs</a>
      * @see #SERIAL_FIELD_LITERAL
      */
     public static final int FIELD_NAME = JavadocParser.FIELD_NAME;
@@ -1214,7 +1263,9 @@
      * }
      * </pre>
      *
-     * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">Oracle Docs</a>
+     * @see
+     * <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javadoc.html#CHDHDECF">
+     * Oracle Docs</a>
      * @see #SERIAL_FIELD_LITERAL
      */
     public static final int FIELD_TYPE = JavadocParser.FIELD_TYPE;
@@ -1223,13 +1274,23 @@
     //------------------        HTML TAGS          -----------------------------------------------//
     //--------------------------------------------------------------------------------------------//
 
-    public static final int HTML_ELEMENT = JavadocParser.RULE_htmlElement + RULE_TYPES_OFFSET; // parent node for all html tags
-    public static final int HTML_ELEMENT_OPEN = JavadocParser.RULE_htmlElementOpen + RULE_TYPES_OFFSET + RULE_TYPES_OFFSET; // <XXX>
-    public static final int HTML_ELEMENT_CLOSE = JavadocParser.RULE_htmlElementClose + RULE_TYPES_OFFSET; // </XXX>
+    public static final int HTML_ELEMENT = JavadocParser.RULE_htmlElement
+            + RULE_TYPES_OFFSET; // parent node for all html tags
+    public static final int HTML_ELEMENT_OPEN = JavadocParser.RULE_htmlElementOpen
+            + RULE_TYPES_OFFSET
+            + RULE_TYPES_OFFSET; // <XXX>
+    public static final int HTML_ELEMENT_CLOSE = JavadocParser.RULE_htmlElementClose
+            + RULE_TYPES_OFFSET; // </XXX>
+
+    public static final int HTML_TAG = JavadocParser.RULE_htmlTag
+            + RULE_TYPES_OFFSET; // non-special HTML tag
+    public static final int HTML_TAG_NAME = JavadocParser
+            .HTML_TAG_NAME; // identifier inside HTML tag: tag name or attribute name
 
-    public static final int HTML_TAG = JavadocParser.RULE_htmlTag + RULE_TYPES_OFFSET; // non-special HTML tag
-    public static final int HTML_TAG_NAME = JavadocParser.HTML_TAG_NAME; // identifier inside HTML tag: tag name or attribute name
-    public static final int ATTRIBUTE = JavadocParser.RULE_attribute + RULE_TYPES_OFFSET + RULE_TYPES_OFFSET; // html tag attribute. Parent node for: HTML_TAG_IDENT, EQUALS, ATTR_VALUE
+    // html tag attribute. Parent node for: HTML_TAG_IDENT, EQUALS, ATTR_VALUE
+    public static final int ATTRIBUTE = JavadocParser.RULE_attribute
+            + RULE_TYPES_OFFSET
+            + RULE_TYPES_OFFSET;
 
     // HTML tag components
     public static final int OPEN = JavadocParser.OPEN; // '<'
@@ -1271,8 +1332,10 @@
     public static final int BODY_HTML_TAG_NAME = JavadocParser.BODY_HTML_TAG_NAME;
 
     public static final int COLGROUP = JavadocParser.RULE_colgroup + RULE_TYPES_OFFSET;
-    public static final int COLGROUP_TAG_OPEN = JavadocParser.RULE_colgroupTagOpen + RULE_TYPES_OFFSET;
-    public static final int COLGROUP_TAG_CLOSE = JavadocParser.RULE_colgroupTagClose + RULE_TYPES_OFFSET;
+    public static final int COLGROUP_TAG_OPEN = JavadocParser.RULE_colgroupTagOpen
+            + RULE_TYPES_OFFSET;
+    public static final int COLGROUP_TAG_CLOSE = JavadocParser.RULE_colgroupTagClose
+            + RULE_TYPES_OFFSET;
     public static final int COLGROUP_HTML_TAG_NAME = JavadocParser.COLGROUP_HTML_TAG_NAME;
 
     public static final int DD = JavadocParser.RULE_dd + RULE_TYPES_OFFSET;
@@ -1297,7 +1360,8 @@
 
     public static final int OPTION = JavadocParser.RULE_option + RULE_TYPES_OFFSET;
     public static final int OPTION_TAG_OPEN = JavadocParser.RULE_optionTagOpen + RULE_TYPES_OFFSET;
-    public static final int OPTION_TAG_CLOSE = JavadocParser.RULE_optionTagClose + RULE_TYPES_OFFSET;
+    public static final int OPTION_TAG_CLOSE = JavadocParser.RULE_optionTagClose
+            + RULE_TYPES_OFFSET;
     public static final int OPTION_HTML_TAG_NAME = JavadocParser.OPTION_HTML_TAG_NAME;
 
     public static final int TBODY = JavadocParser.RULE_tbody + RULE_TYPES_OFFSET;
@@ -1317,9 +1381,11 @@
     ///////////////////////////////////////////////////////////////////////////////////////////////
 
     /////////////////////// SINGLETON HTML TAGS  //////////////////////////////////////////////////
-    public static final int SINGLETON_ELEMENT = JavadocParser.RULE_singletonElement + RULE_TYPES_OFFSET; // parent node for all singleton tags
+    public static final int SINGLETON_ELEMENT = JavadocParser.RULE_singletonElement
+            + RULE_TYPES_OFFSET; // parent node for all singleton tags
 
-    public static final int SINGLETON_TAG = JavadocParser.RULE_singletonTag + RULE_TYPES_OFFSET; // non-special singleton tag
+    public static final int SINGLETON_TAG = JavadocParser.RULE_singletonTag
+            + RULE_TYPES_OFFSET; // non-special singleton tag
 
     public static final int AREA_TAG = JavadocParser.RULE_areaTag + RULE_TYPES_OFFSET;
     public static final int AREA_HTML_TAG_NAME = JavadocParser.AREA_HTML_TAG_NAME;
@@ -1362,7 +1428,9 @@
     ///////////////////////////////////////////////////////////////////////////////////////////////
 
     // HTML comments
-    public static final int HTML_COMMENT = JavadocParser.RULE_htmlComment + RULE_TYPES_OFFSET + RULE_TYPES_OFFSET;
+    public static final int HTML_COMMENT = JavadocParser.RULE_htmlComment
+            + RULE_TYPES_OFFSET
+            + RULE_TYPES_OFFSET;
     public static final int HTML_COMMENT_START = JavadocParser.HTML_COMMENT_START; // <!---
     public static final int HTML_COMMENT_END = JavadocParser.HTML_COMMENT_END; // -->
 
@@ -1376,7 +1444,8 @@
     public static final int NEWLINE = JavadocParser.NEWLINE; // \n
     public static final int CHAR = JavadocParser.CHAR; // any symbol
     public static final int WS = JavadocParser.WS; // whitespace, \t
-    public static final int TEXT = JavadocParser.RULE_text + RULE_TYPES_OFFSET; // CHAR and WS sequence
+    public static final int TEXT = JavadocParser.RULE_text
+            + RULE_TYPES_OFFSET; // CHAR and WS sequence
 
     public static final int EOF = JavadocParser.EOF; // end of file
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
index 667d081a91..e35da632d3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java
@@ -95,7 +95,7 @@
      */
     public TranslationCheck() {
         setFileExtensions("properties");
-        setBasenameSeparator("_");
+        basenameSeparator = "_";
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
index 5cbab3fe2e..e22621a3a6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java
@@ -131,21 +131,15 @@ protected static int getLineNumber(List<String> lines, String keyName) {
          */
         private final Multiset<String> duplicatedStrings = HashMultiset
                 .create();
-        /**
-         * Lock for this class to synchronize on
-         */
-        private final Object lock = new Object();
 
         @Override
         public Object put(Object key, Object value) {
-            synchronized (lock) {
-                final Object oldValue = super.put(key, value);
-                if (oldValue != null && key instanceof String) {
-                    final String keyString = (String) key;
-                    duplicatedStrings.add(keyString);
-                }
-                return oldValue;
+            final Object oldValue = super.put(key, value);
+            if (oldValue != null && key instanceof String) {
+                final String keyString = (String) key;
+                duplicatedStrings.add(keyString);
             }
+            return oldValue;
         }
 
         public Multiset<String> getDuplicatedStrings() {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
index b48df3563b..2605ccd39a 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java
@@ -105,6 +105,7 @@
      * @deprecated since 6.10 release, option is not required for the Check.
      */
     @Deprecated
+    @SuppressWarnings("unused")
     private int maxLineLength = DEFAULT_MAX_LINE_LENGTH;
 
     /** If true, Check will ignore enums*/
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
index fb2e9f1d3e..3a951bf689 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java
@@ -777,10 +777,8 @@ private static boolean isVariableInOperatorExpr(
                 final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();
 
                 if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {
-                    isVarInOperatorDeclr |=
-                            isVariableInOperatorExpr(
-                                firstNodeInsideElseBlock,
-                                    variable);
+                    isVarInOperatorDeclr =
+                        isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);
                 }
             }
         }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
index 044c57dc0a..cca8cc27ec 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -283,29 +283,35 @@
      */
     public static final String MSG_NONGROUP_IMPORT = "custom.import.order.nongroup.import";
 
+    /**
+     * A key is pointing to the warning message text in "messages.properties"
+     * file.
+     */
+    public static final String MSG_NONGROUP_EXPECTED = "custom.import.order.nongroup.expected";
+
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
      */
     public static final String MSG_ORDER = "custom.import.order";
 
-    /** STATIC group name */
-    private static final String STATIC_RULE_GROUP = "STATIC";
+    /** STATIC group name. */
+    public static final String STATIC_RULE_GROUP = "STATIC";
 
-    /** SAME_PACKAGE group name */
-    private static final String SAME_PACKAGE_RULE_GROUP = "SAME_PACKAGE";
+    /** SAME_PACKAGE group name. */
+    public static final String SAME_PACKAGE_RULE_GROUP = "SAME_PACKAGE";
 
-    /** THIRD_PARTY_PACKAGE group name */
-    private static final String THIRD_PARTY_PACKAGE_RULE_GROUP = "THIRD_PARTY_PACKAGE";
+    /** THIRD_PARTY_PACKAGE group name. */
+    public static final String THIRD_PARTY_PACKAGE_RULE_GROUP = "THIRD_PARTY_PACKAGE";
 
-    /** STANDARD_JAVA_PACKAGE group name */
-    private static final String STANDARD_JAVA_PACKAGE_RULE_GROUP = "STANDARD_JAVA_PACKAGE";
+    /** STANDARD_JAVA_PACKAGE group name. */
+    public static final String STANDARD_JAVA_PACKAGE_RULE_GROUP = "STANDARD_JAVA_PACKAGE";
 
-    /** NON_GROUP group name */
-    private static final String SPECIAL_IMPORTS_RULE_GROUP = "SPECIAL_IMPORTS";
+    /** SPECIAL_IMPORTS group name. */
+    public static final String SPECIAL_IMPORTS_RULE_GROUP = "SPECIAL_IMPORTS";
 
-    /** NON_GROUP group name */
-    private static final String NON_GROUP_RULE_GROUP = "NON_GROUP";
+    /** NON_GROUP group name. */
+    private static final String NON_GROUP_RULE_GROUP = "NOT_ASSIGNED_TO_ANY_GROUP";
 
     /** RegExp for SAME_PACKAGE group imports */
     private String samePackageDomainsRegExp = "";
@@ -472,12 +478,12 @@ public void finishTree(DetailAST rootAST) {
                     }
                     else {
                         logWrongImportGroupOrder(importObject.getLineNumber(),
-                                importGroup);
+                                importGroup, nextGroup, fullImportIdent);
                     }
                 }
                 else {
                     logWrongImportGroupOrder(importObject.getLineNumber(),
-                            importGroup);
+                            importGroup, currentGroup, fullImportIdent);
                 }
             }
             else if (sortImportsInGroupAlphabetically
@@ -485,7 +491,7 @@ else if (sortImportsInGroupAlphabetically
                     && matchesImportGroup(importObject.isStaticImport(),
                             fullImportIdent, currentGroup)
                     && compareImports(fullImportIdent, previousImport) < 0) {
-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);
+                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);
             }
             previousImport = fullImportIdent;
         }
@@ -497,13 +503,21 @@ else if (sortImportsInGroupAlphabetically
      *        line number of current import current import.
      * @param importGroup
      *        import group.
+     * @param currentGroupNumber
+     *        current group number we are checking.
+     * @param fullImportIdent
+     *        full import name.
      */
-    private void logWrongImportGroupOrder(int currentImportLine, String importGroup) {
+    private void logWrongImportGroupOrder(int currentImportLine, String importGroup,
+            String currentGroupNumber, String fullImportIdent) {
         if (NON_GROUP_RULE_GROUP.equals(importGroup)) {
-            log(currentImportLine, MSG_NONGROUP_IMPORT);
+            log(currentImportLine, MSG_NONGROUP_IMPORT, fullImportIdent);
+        }
+        else if (NON_GROUP_RULE_GROUP.equals(currentGroupNumber)) {
+            log(currentImportLine, MSG_NONGROUP_EXPECTED, importGroup, fullImportIdent);
         }
         else {
-            log(currentImportLine, MSG_ORDER, importGroup);
+            log(currentImportLine, MSG_ORDER, importGroup, currentGroupNumber, fullImportIdent);
         }
     }
 
@@ -802,10 +816,10 @@ private static String getFirstNDomainsFromIdent(
          */
         public ImportDetails(String importFullPath,
                 int lineNumber, String importGroup, boolean staticImport) {
-            setImportFullPath(importFullPath);
-            setLineNumber(lineNumber);
-            setImportGroup(importGroup);
-            setStaticImport(staticImport);
+            this.importFullPath = importFullPath;
+            this.lineNumber = lineNumber;
+            this.importGroup = importGroup;
+            this.staticImport = staticImport;
         }
 
         /**
@@ -816,15 +830,6 @@ public String getImportFullPath() {
             return importFullPath;
         }
 
-        /**
-         * Set import full path variable.
-         * @param importFullPath
-         *        import full path variable.
-         */
-        public final void setImportFullPath(String importFullPath) {
-            this.importFullPath = importFullPath;
-        }
-
         /**
          * Get import line number.
          * @return import line.
@@ -833,15 +838,6 @@ public int getLineNumber() {
             return lineNumber;
         }
 
-        /**
-         * Set import line number.
-         * @param lineNumber
-         *        import line number.
-         */
-        public final void setLineNumber(int lineNumber) {
-            this.lineNumber = lineNumber;
-        }
-
         /**
          * Get import group.
          * @return import group.
@@ -850,15 +846,6 @@ public String getImportGroup() {
             return importGroup;
         }
 
-        /**
-         * Set import group.
-         * @param importGroup
-         *        import group.
-         */
-        public final void setImportGroup(String importGroup) {
-            this.importGroup = importGroup;
-        }
-
         /**
          * Checks if import is static.
          * @return true, if import is static.
@@ -866,14 +853,5 @@ public final void setImportGroup(String importGroup) {
         public boolean isStaticImport() {
             return staticImport;
         }
-
-        /**
-         * Set true, if import is static
-         * @param isStatic
-         *        if import is static.
-         */
-        public final void setStaticImport(boolean isStatic) {
-            staticImport = isStatic;
-        }
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
index 9d584a9de1..25dd19ad02 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -493,7 +493,7 @@ private void checkComment(DetailAST ast, TextBlock comment) {
             // Check for inheritDoc
             boolean hasInheritDocTag = false;
             while (it.hasNext() && !hasInheritDocTag) {
-                hasInheritDocTag |= it.next().isInheritDocTag();
+                hasInheritDocTag = it.next().isInheritDocTag();
             }
 
             checkParamTags(tags, ast, !hasInheritDocTag);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
index a9f475b0cf..fe5fd2b382 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -78,7 +78,7 @@
      * @param defaultMax default value for allowed complexity.
      */
     protected AbstractClassCouplingCheck(int defaultMax) {
-        setMax(defaultMax);
+        max = defaultMax;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
index cd9ae986fb..660399b2f6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java
@@ -153,7 +153,7 @@ protected final void setCurrentValue(BigInteger value) {
      * @param by the amount to increment by
      */
     protected final void incrementCurrentValue(BigInteger by) {
-        setCurrentValue(getCurrentValue().add(by));
+        currentValue = getCurrentValue().add(by);
     }
 
     /** Push the current value on the stack */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
index 8be250eeeb..17327c3612 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java
@@ -57,7 +57,7 @@
 
     /** Creates new instance of the check. */
     public BooleanExpressionComplexityCheck() {
-        setMax(DEFAULT_MAX);
+        max = DEFAULT_MAX;
     }
 
     @Override
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
index d2e48bd0a3..6632dac293 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java
@@ -173,6 +173,6 @@ else if (it.hasNext()) {
             }
         }
 
-        return modifier;
+        return null;
     }
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index de5d805495..7ef583cd38 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -126,8 +126,8 @@
      */
     public SuppressWithNearbyCommentFilter() {
         setCommentFormat(DEFAULT_COMMENT_FORMAT);
-        setCheckFormat(DEFAULT_CHECK_FORMAT);
-        setInfluenceFormat(DEFAULT_INFLUENCE_FORMAT);
+        checkFormat = DEFAULT_CHECK_FORMAT;
+        influenceFormat = DEFAULT_INFLUENCE_FORMAT;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
index 53c145a83e..bc61b6eb61 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -113,7 +113,7 @@
     public SuppressionCommentFilter() {
         setOnCommentFormat(DEFAULT_ON_FORMAT);
         setOffCommentFormat(DEFAULT_OFF_FORMAT);
-        setCheckFormat(DEFAULT_CHECK_FORMAT);
+        checkFormat = DEFAULT_CHECK_FORMAT;
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
index 4510e7e7c7..915cfbd656 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractCellEditor.java
@@ -31,7 +31,8 @@
  * methods in the CellEditor interface and support for managing a series
  * of listeners.
  *
- * <a href="https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
+ * <a href=
+ * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
  * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
index 95b7e1cbbf..cc1951badf 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/AbstractTreeTableModel.java
@@ -27,7 +27,9 @@
  * An abstract implementation of the TreeTableModel interface, handling
  * the list of listeners.
  *
- * <a href="https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">Original&nbsp;Source&nbsp;Location</a>
+ * <a href=
+ * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
+ * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
  */
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
index 3709571f3c..b09fd8d112 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java
@@ -50,7 +50,8 @@
  * by using a JTree as a renderer (and editor) for the cells in a
  * particular column in the JTable.
  *
- * <a href="https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
+ * <a href=
+ * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
  * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
@@ -61,7 +62,7 @@
     /** For Serialisation that will never happen. */
     private static final long serialVersionUID = -8493693409423365387L;
     /** A subclass of JTree. */
-    protected final TreeTableCellRenderer tree;
+    private final TreeTableCellRenderer tree;
     private JTextArea editor;
     private List<Integer> linePositionMap;
 
@@ -185,7 +186,7 @@ public void setLinePositionMap(List<Integer> linePositionMap) {
          */
         private static final long serialVersionUID = 4324031590789321581L;
         /** Last table/tree row asked to renderer. */
-        protected int visibleRow;
+        private int visibleRow;
 
         /** creates a new instance */
         public TreeTableCellRenderer(TreeModel model) {
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
index 470e4029af..539ea4a967 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/ListToTreeSelectionModelWrapper.java
@@ -37,7 +37,7 @@
      */
     private static final long serialVersionUID = 2267930983939339510L;
     /** Set to true when we are updating the ListSelectionModel. */
-    protected boolean updatingListSelectionModel;
+    private boolean updatingListSelectionModel;
     /** JTreeTable to perform updates on */
     private final JTreeTable treeTable;
 
@@ -122,7 +122,7 @@ protected void updateSelectedPathsFromSelectedRows() {
      */
     private void updateSelectedPathIfRowIsSelected(int counter) {
         if (listSelectionModel.isSelectedIndex(counter)) {
-            final TreePath selPath = treeTable.tree.getPathForRow(counter);
+            final TreePath selPath = treeTable.getTree().getPathForRow(counter);
 
             if (selPath != null) {
                 addSelectionPath(selPath);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java
index 594c325014..728f4e80dc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/Main.java
@@ -36,6 +36,13 @@
      */
     private static JFrame frame;
 
+    /**
+     * Hidden constructor of the current utility class.
+     */
+    private Main() {
+        // no code
+    }
+
     /**
      * Entry point.
      * @param args the command line arguments.
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java
index 9bb390f7f2..0e85ab2ccc 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModel.java
@@ -29,7 +29,9 @@
  * the TreeTableModel can return a value for each of the columns and
  * set that value if isCellEditable() returns true.
  *
- * <a href="http://docs.oracle.com/cd/E16162_01/apirefs.1112/e17493/oracle/ide/controls/TreeTableModel.html">Original&nbsp;Source&nbsp;Location</a>
+ * <a href=
+ * "http://docs.oracle.com/cd/E16162_01/apirefs.1112/e17493/oracle/ide/controls/TreeTableModel.html">
+ * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
  * @author Scott Violet
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
index f83ca8f7ab..c50cf75076 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java
@@ -34,7 +34,8 @@
  * all of the event dispatching support provided by the superclass:
  * the AbstractTableModel.
  *
- * <a href="https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
+ * <a href=
+ * "https://docs.oracle.com/cd/E48246_01/apirefs.1111/e13403/oracle/ide/controls/TreeTableModel.html">
  * Original&nbsp;Source&nbsp;Location</a>
  *
  * @author Philip Milne
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
index 4eb8e24fe7..39b0ba5751 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/imports/messages.properties
@@ -10,7 +10,8 @@ import.separation=''{0}'' should be separated from previous imports.
 import.control.missing.file=Missing an import control file.
 import.control.disallowed=Disallowed import - {0}.
 import.control.unknown.pkg=Import control file does not handle this package.
-custom.import.order=Import statement is in the wrong order. Should be in the ''{0}'' group.
+custom.import.order=Import statement for ''{2}'' is in the wrong order. Should be in the ''{0}'' group, expecting group ''{1}'' on this line.
 custom.import.order.line.separator=''{0}'' should be separated from previous import group.
-custom.import.order.lex=Wrong lexicographical order for ''{0}'' import.
-custom.import.order.nongroup.import=Imports without groups should be placed at the end of the import list.
+custom.import.order.lex=Wrong lexicographical order for ''{0}'' import. Should be before ''{1}''.
+custom.import.order.nongroup.import=Imports without groups should be placed at the end of the import list: ''{0}''.
+custom.import.order.nongroup.expected=Import statement for ''{2}'' is in the wrong order. Should be in the ''{0}'' group, expecting not assigned imports on this line.
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
index 744b430d8d..90d10ef134 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -51,12 +51,12 @@
 @PrepareForTest({ ConfigurationLoader.class, ConfigurationLoaderTest.class })
 public class ConfigurationLoaderTest {
 
-    private Configuration loadConfiguration(String name)
+    private static Configuration loadConfiguration(String name)
         throws CheckstyleException {
         return loadConfiguration(name, new Properties());
     }
 
-    private Configuration loadConfiguration(
+    private static Configuration loadConfiguration(
         String name, Properties props) throws CheckstyleException {
         final String fName =
             "src/test/resources/com/puppycrawl/tools/checkstyle/configs/" + name;
@@ -213,7 +213,7 @@ public void testCustomMessages() throws CheckstyleException {
             .containsKey("name.invalidPattern"));
     }
 
-    private void verifyConfigNode(
+    private static void verifyConfigNode(
         DefaultConfiguration config, String name, int childrenLength,
         Properties atts) throws Exception {
         assertEquals("name.", name, config.getName());
@@ -298,7 +298,7 @@ public void testReplacePropertiesReplace()
         }
     }
 
-    private Properties initProperties() {
+    private static Properties initProperties() {
         final Properties props = new Properties();
         props.put("a", "A");
         props.put("b", "B");
@@ -450,6 +450,7 @@ public void testLoadConfiguration_WrongURL() throws CheckstyleException {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testLoadConfiguration_URISyntaxException() throws CheckstyleException {
         mockStatic(ConfigurationLoader.class);
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 599af01445..b89e2cd743 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -33,6 +33,7 @@
 import java.util.List;
 import java.util.ResourceBundle;
 
+import org.apache.commons.io.FileUtils;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.contrib.java.lang.system.Assertion;
@@ -179,12 +180,10 @@ public void checkAssertion() throws IOException {
                         ResourceBundle.getBundle("checkstylecompilation");
                 String version = compilationProperties.getString("checkstyle.compile.version");
                 assertEquals(String.format("<?xml version=\"1.0\" encoding=\"UTF-8\"?>%n"
-                        + "<checkstyle version=\"" + version + "\">%n"
-                        + "<file name=\""
-                        + expectedPath
-                        + "\">%n"
+                        + "<checkstyle version=\"%s\">%n"
+                        + "<file name=\"%s\">%n"
                         + "</file>%n"
-                        + "</checkstyle>%n"), systemOut.getLog());
+                        + "</checkstyle>%n", version, expectedPath), systemOut.getLog());
                 assertEquals("", systemErr.getLog());
             }
         });
@@ -218,11 +217,11 @@ public void checkAssertion() throws IOException {
                     + "/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java"
                     .replace("/", File.separator);
                 assertEquals(String.format("Starting audit...%n"
-                                + expectedPath + ":3:14: "
+                                + "%1$s:3:14: "
                                 + "warning: Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"
-                                + expectedPath + ":5:7: "
+                                + "%1$s:5:7: "
                                 + "warning: Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"
-                                + "Audit done.%n"),
+                                + "Audit done.%n", expectedPath),
                         systemOut.getLog());
                 assertEquals("", systemErr.getLog());
             }
@@ -242,12 +241,12 @@ public void checkAssertion() throws IOException {
                     + "/src/test/resources/com/puppycrawl/tools/checkstyle/InputMain.java"
                     .replace("/", File.separator);
                 assertEquals(String.format("Starting audit...%n"
-                        + expectedPath + ":3:14: "
+                        + "%1$s:3:14: "
                         + "Name 'InputMain' must match pattern '^[a-z0-9]*$'.%n"
-                        + expectedPath + ":5:7: "
+                        + "%1$s:5:7: "
                         + "Name 'InputMainInner' must match pattern '^[a-z0-9]*$'.%n"
                         + "Audit done.%n"
-                        + "Checkstyle ends with 2 errors.%n"), systemOut.getLog());
+                        + "Checkstyle ends with 2 errors.%n", expectedPath), systemOut.getLog());
                 assertEquals("", systemErr.getLog());
             }
         });
@@ -435,6 +434,27 @@ public void testCreateListener_IllegalStateException() throws Exception {
         }
     }
 
+    @Test
+    public void testCreateListenerWithLocation_IllegalStateException() throws Exception {
+        Class<?>[] param = new Class<?>[1];
+        param[0] = File.class;
+        Method method = Main.class.getDeclaredMethod("createListener", String.class, String.class);
+        method.setAccessible(true);
+        String outDir = "myfolder123";
+        try {
+            method.invoke(null, "myformat", outDir);
+            fail();
+        }
+        catch (InvocationTargetException e) {
+            assertTrue(e.getCause() instanceof IllegalStateException);
+            assertTrue(e.getCause().getMessage().startsWith("Invalid output format. Found"));
+        }
+        finally {
+            // method creates output folder
+            FileUtils.deleteQuietly(new File(outDir));
+        }
+    }
+
     @Test
     public void testExistingDirectoryWithViolations() throws Exception {
 
@@ -469,6 +489,7 @@ public void checkAssertion() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testListFiles_notFile() throws Exception {
         Class<?>[] param = new Class<?>[1];
         param[0] = File.class;
@@ -485,6 +506,7 @@ public void testListFiles_notFile() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testListFiles_DirectoryWithNull() throws Exception {
         Class<?>[] param = new Class<?>[1];
         param[0] = File.class;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
index be5ac33ae2..3afa734d15 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -61,7 +61,7 @@ public void testDefault()
         validatePackageNames(packageNames);
     }
 
-    private void validatePackageNames(Set<String> pkgNames) {
+    private static void validatePackageNames(Set<String> pkgNames) {
         final String[] checkstylePackages = {
             "com.puppycrawl.tools.checkstyle.",
             "com.puppycrawl.tools.checkstyle.checks.",
@@ -91,11 +91,10 @@ private void validatePackageNames(Set<String> pkgNames) {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testPackagesWithDots() throws Exception {
 
-        Constructor<PackageNamesLoader> constructor =
-                (Constructor<PackageNamesLoader>) PackageNamesLoader.class
-                        .getDeclaredConstructors()[0];
+        Constructor<PackageNamesLoader> constructor = PackageNamesLoader.class.getDeclaredConstructor();
         constructor.setAccessible(true);
         PackageNamesLoader loader = constructor.newInstance();
 
@@ -111,6 +110,7 @@ public void testPackagesWithDots() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testPackagesWithSaxException() throws Exception {
 
         final URLConnection mockConnection = Mockito.mock(URLConnection.class);
@@ -136,6 +136,7 @@ public void testPackagesWithSaxException() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testPackagesWithIoException() throws Exception {
 
         final URLConnection mockConnection = Mockito.mock(URLConnection.class);
@@ -161,6 +162,7 @@ public void testPackagesWithIoException() throws Exception {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testPackagesWithIoException_getResources() throws Exception {
 
         ClassLoader classLoader = mock(ClassLoader.class);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
index b46b2013a1..bc21dbbe42 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -89,6 +89,7 @@ public void testInCache() throws IOException {
     }
 
     @Test
+    @SuppressWarnings("unchecked")
     public void testException_NoSuchAlgorithmException() throws Exception {
 
         Configuration config = new DefaultConfiguration("myname");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
index 56911e69fb..1dd052f7e3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java
@@ -25,6 +25,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.Constructor;
@@ -156,6 +157,7 @@ public void testInvokeConstructor() throws NoSuchMethodException {
         assertEquals("string", constructedString);
     }
 
+    @SuppressWarnings("rawtypes")
     @Test
     public void testInvokeConstructorThatFails() throws NoSuchMethodException {
         Constructor<Dictionary> constructor = Dictionary.class.getConstructor();
@@ -269,4 +271,27 @@ public void testIsCommentType() throws NoSuchMethodException {
         assertTrue(Utils.isCommentType(TokenTypes.BLOCK_COMMENT_END));
         assertTrue(Utils.isCommentType(TokenTypes.COMMENT_CONTENT));
     }
+
+    @Test
+    public void testClose() {
+        Utils.close(null);
+
+        Utils.close(new Closeable() {
+
+            @Override
+            public void close() throws IOException {
+            }
+        });
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void testCloseWithException() {
+        Utils.close(new Closeable() {
+
+            @Override
+            public void close() throws IOException {
+                throw new IOException();
+            }
+        });
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
index 572715b44e..8f006af139 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java
@@ -254,6 +254,9 @@ private void verifyLines(String[] expectedLines)
     }
 
     private static class TestThrowable extends Exception {
+
+        private static final long serialVersionUID = 1L;
+
         @Override
         public void printStackTrace(PrintWriter s) {
             s.print("stackTrace");
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
index 9192678565..fd4c23ea06 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java
@@ -129,7 +129,7 @@ else if (files[i].isDirectory()) {
         }
     }
 
-    private void checkFile(String filename) throws Exception {
+    private static void checkFile(String filename) throws Exception {
         final FileText text = new FileText(new File(filename),
                            System.getProperty("file.encoding", "UTF-8"));
         final FileContents contents = new FileContents(text);
@@ -139,7 +139,7 @@ private void checkFile(String filename) throws Exception {
         }
     }
 
-    private void checkTree(final DetailAST node,
+    private static void checkTree(final DetailAST node,
                            final DetailAST parent,
                            final DetailAST prev,
                            final String filename,
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java
index df0070721f..e700bb25ad 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java
@@ -24,7 +24,7 @@
 
 public class FullIdentTest {
 
-    public void testToString() {
+    public static void testToString() {
         DetailAST ast = new DetailAST();
         ast.setType(TokenTypes.LITERAL_NEW);
         ast.setColumnNo(14);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/CheckUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/CheckUtilsTest.java
index bba8ea4d7e..0def1df313 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/CheckUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/CheckUtilsTest.java
@@ -21,8 +21,6 @@
 
 import static com.puppycrawl.tools.checkstyle.TestUtils.assertUtilsClassHasPrivateConstructor;
 
-import java.lang.reflect.InvocationTargetException;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -33,13 +31,7 @@
 
     @Test
     public void testIsProperUtilsClass() throws ReflectiveOperationException {
-        try {
-            assertUtilsClassHasPrivateConstructor(CheckUtils.class);
-            Assert.fail();
-        }
-        catch (InvocationTargetException ex) {
-            Assert.assertTrue(ex.getCause() instanceof UnsupportedOperationException);
-        }
+        assertUtilsClassHasPrivateConstructor(CheckUtils.class);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index 18daf6f3b4..c5ba3758fb 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -114,7 +114,7 @@ public void testIOException() throws Exception {
      * @param file to be opened
      * @return detail message of {@link FileNotFoundException}
      */
-    private String getFileNotFoundDetail(File file) throws Exception {
+    private static String getFileNotFoundDetail(File file) throws Exception {
         // Create exception to know detail message we should wait in
         // LocalisedMessage
         try {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
index 8ec62f3d18..154e108b50 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java
@@ -21,6 +21,7 @@
 
 import static com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.MSG_LEX;
 import static com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.MSG_LINE_SEPARATOR;
+import static com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.MSG_NONGROUP_EXPECTED;
 import static com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.MSG_NONGROUP_IMPORT;
 import static com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.MSG_ORDER;
 import static org.junit.Assert.assertArrayEquals;
@@ -39,29 +40,35 @@
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
 public class CustomImportOrderCheckTest extends BaseCheckTestSupport {
+    /** Shortcuts to make code more compact */
+    private static final String STATIC = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.STATIC_RULE_GROUP;
+    private static final String SAME = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.SAME_PACKAGE_RULE_GROUP;
+    private static final String THIRD = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.THIRD_PARTY_PACKAGE_RULE_GROUP;
+    private static final String STD = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.STANDARD_JAVA_PACKAGE_RULE_GROUP;
+    private static final String SPECIAL = com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck.SPECIAL_IMPORTS_RULE_GROUP;
+
     @Test
     public void testCustom() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("standardPackageRegExp", "^(java|javax)\\.");
         checkConfig.addAttribute("thirdPartyPackageRegExp", "com|org");
-        checkConfig
-                .addAttribute("customImportOrderRules",
-                        "STATIC###SAME_PACKAGE(3)###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE");
+        checkConfig.addAttribute("customImportOrderRules",
+                "STATIC###SAME_PACKAGE(3)###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT"),
-            "8: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "9: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "10: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "12: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "13: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "14: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "15: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "16: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "17: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "18: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
+            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "8: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.awt.Button"),
+            "9: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.awt.Frame"),
+            "10: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.awt.Dialog"),
+            "11: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.awt.color.ColorSpace"),
+            "12: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.awt.event.ActionEvent"),
+            "13: " + getCheckMessage(MSG_ORDER, STD, SAME, "javax.swing.JComponent"),
+            "14: " + getCheckMessage(MSG_ORDER, STD, SAME, "javax.swing.JTable"),
+            "15: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.io.File"),
+            "16: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.io.IOException"),
+            "17: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.io.InputStream"),
+            "18: " + getCheckMessage(MSG_ORDER, STD, SAME, "java.io.Reader"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -73,7 +80,7 @@ public void testCustom() throws Exception {
      * specified in the configuration.
      */
     @Test
-    public void testGoogleStyleguideConfiguraiton() throws Exception {
+    public void testStaticStandardThird() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("thirdPartyPackageRegExp", "com.|org.");
@@ -81,10 +88,10 @@ public void testGoogleStyleguideConfiguraiton() throws Exception {
                 "STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT"),
-            "10: " + getCheckMessage(MSG_LEX, "java.awt.Dialog"),
-            "15: " + getCheckMessage(MSG_LEX, "java.io.File"),
-            "22: " + getCheckMessage(MSG_LEX, "com.google.common.collect.*"),
+            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "10: " + getCheckMessage(MSG_LEX, "java.awt.Dialog", "java.awt.Frame"),
+            "15: " + getCheckMessage(MSG_LEX, "java.io.File", "javax.swing.JTable"),
+            "22: " + getCheckMessage(MSG_LEX, "com.google.common.collect.*", "com.puppycrawl.tools.*"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -99,16 +106,15 @@ public void testNonSpecifiedImports() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("thirdPartyPackageRegExp", "org.");
-        checkConfig
-                .addAttribute("customImportOrderRules",
-                        "STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###SAME_PACKAGE(3)");
+        checkConfig.addAttribute("customImportOrderRules",
+                "STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###SAME_PACKAGE(3)");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT"),
-            "10: " + getCheckMessage(MSG_LEX, "java.awt.Dialog"),
-            "15: " + getCheckMessage(MSG_LEX, "java.io.File"),
-            "20: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "22: " + getCheckMessage(MSG_NONGROUP_IMPORT),
+            "4: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "10: " + getCheckMessage(MSG_LEX, "java.awt.Dialog", "java.awt.Frame"),
+            "15: " + getCheckMessage(MSG_LEX, "java.io.File", "javax.swing.JTable"),
+            "20: " + getCheckMessage(MSG_ORDER, SAME, THIRD, "com.puppycrawl.tools.*"),
+            "22: " + getCheckMessage(MSG_NONGROUP_IMPORT, "com.google.common.collect.*"),
             "23: " + getCheckMessage(MSG_LINE_SEPARATOR, "org.junit.*"),
         };
 
@@ -125,11 +131,11 @@ public void testOrderRuleWithOneGroup() throws Exception {
                 "STANDARD_JAVA_PACKAGE");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "7: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "8: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "9: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "10: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
+            "7: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "java.util.List"),
+            "8: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "java.util.StringTokenizer"),
+            "9: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "java.util.*"),
+            "10: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "java.util.concurrent.AbstractExecutorService"),
+            "11: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STD, "java.util.concurrent.*"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -137,7 +143,7 @@ public void testOrderRuleWithOneGroup() throws Exception {
     }
 
     @Test
-    public void testSamePackageAndStatic() throws Exception {
+    public void testStaticSamePackage() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("thirdPartyPackageRegExp", "org.");
@@ -145,11 +151,11 @@ public void testSamePackageAndStatic() throws Exception {
                 "STATIC###SAME_PACKAGE(3)");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "6: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "7: " + getCheckMessage(MSG_ORDER, "STATIC"),
-            "8: " + getCheckMessage(MSG_ORDER, "STATIC"),
-            "10: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "STATIC"),
+            "6: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.*"),
+            "7: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "java.awt.Button.ABORT"),
+            "8: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "javax.swing.WindowConstants.*"),
+            "10: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.AbstractExecutorService"),
+            "11: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "java.io.File.createTempFile"),
         };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -167,11 +173,11 @@ public void testWithoutLineSeparator() throws Exception {
                 "STATIC###SAME_PACKAGE(3)");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "6: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "7: " + getCheckMessage(MSG_ORDER, "STATIC"),
-            "8: " + getCheckMessage(MSG_ORDER, "STATIC"),
-            "10: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "STATIC"),
+            "6: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.*"),
+            "7: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "java.awt.Button.ABORT"),
+            "8: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "javax.swing.WindowConstants.*"),
+            "10: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.AbstractExecutorService"),
+            "11: " + getCheckMessage(MSG_NONGROUP_EXPECTED, STATIC, "java.io.File.createTempFile"),
         };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -188,7 +194,7 @@ public void testWithoutLineSeparator2() throws Exception {
                 "STATIC###STANDARD_JAVA_PACKAGE");
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
         final String[] expected = {
-            "4: " + getCheckMessage(MSG_LEX, "java.io.File.createTempFile"),
+            "4: " + getCheckMessage(MSG_LEX, "java.io.File.createTempFile", "javax.swing.WindowConstants.*"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -220,7 +226,7 @@ public void testPossibleIndexOutOfBoundsException() throws Exception {
         checkConfig.addAttribute("customImportOrderRules",
                 "STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE");
         final String[] expected = {
-            "5: " + getCheckMessage(MSG_ORDER, "THIRD_PARTY_PACKAGE"),
+            "5: " + getCheckMessage(MSG_NONGROUP_EXPECTED, THIRD, "org.w3c.dom.Node"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -237,18 +243,18 @@ public void testDefaultPackage2() throws Exception {
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
 
         final String[] expected = {
-            "7: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT"),
-            "10: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "12: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "13: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "14: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "15: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "16: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "17: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "18: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "19: " + getCheckMessage(MSG_ORDER, "STANDARD_JAVA_PACKAGE"),
-            "23: " + getCheckMessage(MSG_LEX, "com.google.common.*"),
+            "7: " + getCheckMessage(MSG_LEX, "java.awt.Button.ABORT", "java.io.File.createTempFile"),
+            "10: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.awt.Button"),
+            "11: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.awt.Frame"),
+            "12: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.awt.Dialog"),
+            "13: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.awt.event.ActionEvent"),
+            "14: " + getCheckMessage(MSG_ORDER, STD, THIRD, "javax.swing.JComponent"),
+            "15: " + getCheckMessage(MSG_ORDER, STD, THIRD, "javax.swing.JTable"),
+            "16: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.io.File"),
+            "17: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.io.IOException"),
+            "18: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.io.InputStream"),
+            "19: " + getCheckMessage(MSG_ORDER, STD, THIRD, "java.io.Reader"),
+            "23: " + getCheckMessage(MSG_LEX, "com.google.common.*", "com.puppycrawl.tools.*"),
         };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -277,10 +283,9 @@ public void testThirdPartyAndSpecialImports() throws Exception {
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("specialImportsRegExp", "antlr.*");
         checkConfig.addAttribute("customImportOrderRules",
-                "SAME_PACKAGE(3)###THIRD_PARTY_PACKAGE###STATIC###"
-                + "SPECIAL_IMPORTS");
+                "SAME_PACKAGE(3)###THIRD_PARTY_PACKAGE###STATIC###SPECIAL_IMPORTS");
         final String[] expected = {
-            "11: " + getCheckMessage(MSG_ORDER, "THIRD_PARTY_PACKAGE"),
+            "11: " + getCheckMessage(MSG_ORDER, THIRD, SPECIAL, "com.google.common.annotations.GwtCompatible"),
         };
 
         verify(checkConfig, getPath("imports" + File.separator
@@ -337,6 +342,7 @@ public void testGetFullImportIdent() {
         assertEquals(expected, (String) actual);
     }
 
+    @Test
     public void testSamePackageDepth2() throws Exception {
         final DefaultConfiguration checkConfig =
                 createCheckConfig(CustomImportOrderCheck.class);
@@ -345,14 +351,14 @@ public void testSamePackageDepth2() throws Exception {
         checkConfig.addAttribute("customImportOrderRules",
                 "SAME_PACKAGE(2)");
         final String[] expected = {
-            "7: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "8: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "9: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "10: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "12: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "13: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "14: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
+            "7: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.*"),
+            "8: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.List"),
+            "9: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.StringTokenizer"),
+            "10: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.*"),
+            "11: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.AbstractExecutorService"),
+            "12: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.locks.LockSupport"),
+            "13: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.regex.Pattern"),
+            "14: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.regex.Matcher"),
             };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -369,9 +375,9 @@ public void testSamePackageDepth3() throws Exception {
         checkConfig.addAttribute("customImportOrderRules",
                 "SAME_PACKAGE(3)");
         final String[] expected = {
-            "10: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "11: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "12: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
+            "10: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.*"),
+            "11: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.AbstractExecutorService"),
+            "12: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.locks.LockSupport"),
             };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -388,7 +394,7 @@ public void testSamePackageDepth4() throws Exception {
         checkConfig.addAttribute("customImportOrderRules",
                 "SAME_PACKAGE(4)");
         final String[] expected = {
-            "12: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
+            "12: " + getCheckMessage(MSG_NONGROUP_EXPECTED, SAME, "java.util.concurrent.locks.LockSupport"),
             };
 
         verify(checkConfig, new File("src/test/resources-noncompilable/com/puppycrawl/tools/"
@@ -445,13 +451,7 @@ public void testUnsupportedRule() throws Exception {
                 createCheckConfig(CustomImportOrderCheck.class);
         checkConfig.addAttribute("customImportOrderRules", "SAME_PACKAGE(3)###UNSUPPORTED_RULE"); //#AAA##BBBB###CCCC####DDDD
         checkConfig.addAttribute("sortImportsInGroupAlphabetically", "true");
-        final String[] expected = {
-            "4: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "6: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "7: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "8: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-            "9: " + getCheckMessage(MSG_ORDER, "SAME_PACKAGE"),
-        };
+        final String[] expected = {};
 
         verify(checkConfig, getPath("imports" + File.separator
                 + "InputCustomImportOrder.java"), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
index d0900420d5..e7907ed729 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java
@@ -537,7 +537,7 @@ public void test_1379666() throws Exception {
         checkConfig.addAttribute("allowThrowsTagsForSubclasses", "true");
         checkConfig.addAttribute("allowUndeclaredRTE", "true");
         final String[] expected = {};
-        verify(checkConfig, getSrcPath("checks/javadoc/Input_1379666.java"), expected);
+        verify(checkConfig, getPath("checks/javadoc/Input_1379666.java"), expected);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
index 330bf8fc9d..1c3bc59b81 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
@@ -48,8 +48,8 @@ public void testMissing() throws Exception {
         };
         verify(
             createChecker(checkConfig),
-            getSrcPath("checks/javadoc/BadCls.java"),
-            getSrcPath("checks/javadoc/BadCls.java"),
+            getPath("checks/javadoc/BadCls.java"),
+            getPath("checks/javadoc/BadCls.java"),
             expected);
     }
 
@@ -62,8 +62,8 @@ public void testMissingWithAllowLegacy() throws Exception {
         };
         verify(
             createChecker(checkConfig),
-            getSrcPath("checks/javadoc/BadCls.java"),
-            getSrcPath("checks/javadoc/BadCls.java"),
+            getPath("checks/javadoc/BadCls.java"),
+            getPath("checks/javadoc/BadCls.java"),
             expected);
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java
index ee802d2422..d25e3a29f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java
@@ -22,8 +22,6 @@
 import static com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck.MSG_KEY;
 import static org.junit.Assert.fail;
 
-import java.text.NumberFormat;
-
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -65,8 +63,6 @@ public void testIntegerOverflow() throws Exception {
         checkConfig.addAttribute("max", "0");
 
         final long largerThanMaxInt = 3486784401L;
-        // use i18n for number formatting so test wont fail in non-english environments
-        final String expectedComplexity = NumberFormat.getInstance().format(largerThanMaxInt);
 
         String[] expected = {
             "9:5: " + getCheckMessage(MSG_KEY, largerThanMaxInt, 0),
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java
index f3b00a9b27..b8e607b4e6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java
@@ -96,7 +96,7 @@ public void testBadFile() throws Exception {
      * Creates a configuration that is functionally close to that in the docs.
      * @param verbose verbose mode
      */
-    private DefaultConfiguration createConfig(boolean verbose) {
+    private static DefaultConfiguration createConfig(boolean verbose) {
         final DefaultConfiguration checkConfig =
             createCheckConfig(FileTabCharacterCheck.class);
         checkConfig.addAttribute("eachLine", Boolean.toString(verbose));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
index 7d72aefb93..30345e8ebf 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java
@@ -23,7 +23,7 @@ public void beginTree(DetailAST aRootAST) {
         Assert.assertTrue(isAstEquals(expectedTree, aRootAST));
     }
 
-    private boolean isAstEquals(DetailAST expected, DetailAST actual) {
+    private static boolean isAstEquals(DetailAST expected, DetailAST actual) {
         boolean result = false;
         if (expected == actual) {
             result = true;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
index 64a1bda7ad..0fcd68157d 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilterTest.java
@@ -116,7 +116,7 @@ protected Checker createChecker(Configuration filterConfig)
         return checker;
     }
 
-    private String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String[] remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index b3ba9a62b6..59436f2ad5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -227,7 +227,7 @@ protected Checker createChecker(Configuration filterConfig)
         return checker;
     }
 
-    private String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String[] remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
index 030343e554..f5046357d8 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilterTest.java
@@ -227,7 +227,7 @@ protected Checker createChecker(Configuration aFilterConfig)
         return checker;
     }
 
-    private String[] removeSuppressed(String[] from, String[] remove) {
+    private static String[] removeSuppressed(String[] from, String[] remove) {
         final Collection<String> coll =
             Lists.newArrayList(Arrays.asList(from));
         coll.removeAll(Arrays.asList(remove));
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/annotation/InputMissingDeprecatedCheckTest2.java b/src/test/resources/com/puppycrawl/tools/checkstyle/annotation/InputMissingDeprecatedCheckTest2.java
index 0d6232f93d..3a1cf1d610 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/annotation/InputMissingDeprecatedCheckTest2.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/annotation/InputMissingDeprecatedCheckTest2.java
@@ -1,4 +1,4 @@
-package com.puppycrawl.tools.checkstyle.checks.annotation;
+package com.puppycrawl.tools.checkstyle.annotation;
 
 public class InputMissingDeprecatedCheckTest2 {
 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/BadCls.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/BadCls.java
new file mode 100755
index 0000000000..a7e834eb6d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/BadCls.java
@@ -0,0 +1,6 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc;
+
+class BadCls {
+    class X extends Exception {}
+    void m() throws X {}
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/Input_1379666.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/Input_1379666.java
new file mode 100755
index 0000000000..c7ba96097d
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/Input_1379666.java
@@ -0,0 +1,39 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc;
+
+/**
+ * comment.
+ */
+public class Input_1379666 {
+    /**
+     * @throws BadStringFormat some text
+     */
+    public void ok() throws BadStringFormat {
+    }
+
+    /**
+     * @throws Input_1379666.BadStringFormat some text
+     */
+    public void error1()
+        throws com.puppycrawl.tools.checkstyle.checks.javadoc.Input_1379666.BadStringFormat {
+    }
+
+    /**
+     * Some comment.
+     * @throws com.puppycrawl.tools.checkstyle.checks.javadoc.Input_1379666.BadStringFormat some text
+     */
+    public void error2() throws Input_1379666.BadStringFormat {
+    }
+
+    /**
+     * Some exception class.
+     */
+    public static class BadStringFormat extends Exception {
+        /**
+         * Some comment.
+         * @param s string.
+         */
+        BadStringFormat(String s) {
+            super(s);
+        }
+    }
+}
