diff --git a/mypy/fastparse.py b/mypy/fastparse.py
index a75636083c..b70fdd814c 100755
--- a/mypy/fastparse.py
+++ b/mypy/fastparse.py
@@ -27,7 +27,7 @@
 from mypy.errors import Errors
 
 try:
-    from typed_ast import ast3  # type: ignore
+    from typed_ast import ast3  # type: ignore  # typeshed PR #931
 except ImportError:
     if sys.version_info.minor > 2:
         print('You must install the typed_ast package before you can run mypy'
@@ -120,7 +120,7 @@ def is_no_type_check_decorator(expr: ast3.expr) -> bool:
     return False
 
 
-class ASTConverter(ast3.NodeTransformer):  # type: ignore
+class ASTConverter(ast3.NodeTransformer):  # type: ignore  # typeshed PR #931
     def __init__(self,
                  pyversion: Tuple[int, int],
                  is_stub: bool,
@@ -913,7 +913,7 @@ def visit_Index(self, n: ast3.Index) -> Node:
         return self.visit(n.value)
 
 
-class TypeConverter(ast3.NodeTransformer):  # type: ignore
+class TypeConverter(ast3.NodeTransformer):  # type: ignore  # typeshed PR #931
     def __init__(self, errors: Errors, line: int = -1) -> None:
         self.errors = errors
         self.line = line
diff --git a/mypy/fastparse2.py b/mypy/fastparse2.py
index 80b654cfdb..a593fd4046 100755
--- a/mypy/fastparse2.py
+++ b/mypy/fastparse2.py
@@ -44,7 +44,7 @@
 
 try:
     from typed_ast import ast27
-    from typed_ast import ast3  # type: ignore
+    from typed_ast import ast3  # type: ignore  # typeshed PR #931
 except ImportError:
     if sys.version_info.minor > 2:
         print('You must install the typed_ast package before you can run mypy'
diff --git a/mypy/semanal.py b/mypy/semanal.py
index af6ec9be80..9a6a749938 100755
--- a/mypy/semanal.py
+++ b/mypy/semanal.py
@@ -1497,7 +1497,7 @@ def analyze_lvalue(self, lval: Lvalue, nested: bool = False,
               isinstance(lval, ListExpr)):
             items = lval.items
             if len(items) == 0 and isinstance(lval, TupleExpr):
-                self.fail("Can't assign to ()", lval)
+                self.fail("can't assign to ()", lval)
             self.analyze_tuple_or_list_lvalue(lval, add_global, explicit_type)
         elif isinstance(lval, StarExpr):
             if nested:
