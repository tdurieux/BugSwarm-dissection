diff --git a/dev-requirements.txt b/dev-requirements.txt
index 9e862e103e..f0d13b7618 100755
--- a/dev-requirements.txt
+++ b/dev-requirements.txt
@@ -2,8 +2,8 @@
 tox==2.3.1
 # For newer tasks like building Sphinx docs.
 invoke==0.12.2
-invocations==0.11.0
-sphinx==1.4a1
+invocations==0.12.0
+sphinx==1.4.1
 alabaster==0.7.7
 releases==1.0.0
 semantic_version==2.5.0
diff --git a/sites/www/changelog.rst b/sites/www/changelog.rst
index 6b30ff683a..eaf3cd5756 100755
--- a/sites/www/changelog.rst
+++ b/sites/www/changelog.rst
@@ -2,6 +2,10 @@
 Changelog
 =========
 
+* :support:`612` Identify & work around a race condition in the test for
+  handshake timeouts, which was causing frequent test failures for a subset of
+  contributors as well as Travis-CI (usually, but not always, limited to Python
+  3.5). Props to Ed Kellett for assistance during some of the troubleshooting.
 * :support:`697` Remove whitespace in our ``setup.py``'s ``install_requires``
   as it triggers occasional bugs in some versions of ``setuptools``. Thanks to
   Justin Lecher for catch & original patch.
diff --git a/tests/test_transport.py b/tests/test_transport.py
index a93d8b63d4..5069e5b0c8 100755
--- a/tests/test_transport.py
+++ b/tests/test_transport.py
@@ -32,7 +32,7 @@
 import unittest
 
 from paramiko import Transport, SecurityOptions, ServerInterface, RSAKey, DSSKey, \
-    SSHException, ChannelException
+    SSHException, ChannelException, Packetizer
 from paramiko import AUTH_FAILED, AUTH_SUCCESSFUL
 from paramiko import OPEN_SUCCEEDED, OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED
 from paramiko.common import MSG_KEXINIT, cMSG_CHANNEL_WINDOW_ADJUST, \
@@ -800,6 +800,22 @@ def test_L_handshake_timeout(self):
         """
         verify that we can get a hanshake timeout.
         """
+        # Tweak client Transport instance's Packetizer instance so
+        # its read_message() sleeps a bit. This helps prevent race conditions
+        # where the client Transport's timeout timer thread doesn't even have
+        # time to get scheduled before the main client thread finishes
+        # handshaking with the server.
+        # (Doing this on the server's transport *sounds* more 'correct' but
+        # actually doesn't work nearly as well for whatever reason.)
+        class SlowPacketizer(Packetizer):
+            def read_message(self):
+                time.sleep(1)
+                return super(SlowPacketizer, self).read_message()
+        # NOTE: prettttty sure since the replaced .packetizer Packetizer is now
+        # no longer doing anything with its copy of the socket...everything'll
+        # be fine. Even tho it's a bit squicky.
+        self.tc.packetizer = SlowPacketizer(self.tc.sock)
+        # Continue with regular test red tape.
         host_key = RSAKey.from_private_key_file(test_path('test_rsa.key'))
         public_host_key = RSAKey(data=host_key.asbytes())
         self.ts.add_server_key(host_key)
