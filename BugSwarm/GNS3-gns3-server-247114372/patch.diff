diff --git a/tests/compute/vpcs/test_vpcs_vm.py b/tests/compute/vpcs/test_vpcs_vm.py
index e08f537f0a..9ebed97f79 100755
--- a/tests/compute/vpcs/test_vpcs_vm.py
+++ b/tests/compute/vpcs/test_vpcs_vm.py
@@ -52,164 +52,63 @@ def test_vm(project, manager):
     assert vm.id == "00010203-0405-0607-0809-0a0b0c0d0e0f"
 
 
-def test_vm_check_vpcs_version(loop, vm, manager):
-    with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.subprocess_check_output", return_value="Welcome to Virtual PC Simulator, version 0.9"):
-        loop.run_until_complete(asyncio.async(vm._check_vpcs_version()))
-        assert vm._vpcs_version == parse_version("0.9")
-
-
-def test_vm_check_vpcs_version_0_6_1(loop, vm, manager):
-    with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.subprocess_check_output", return_value="Welcome to Virtual PC Simulator, version 0.6.1"):
-        loop.run_until_complete(asyncio.async(vm._check_vpcs_version()))
-        assert vm._vpcs_version == parse_version("0.6.1")
-
-
-def test_vm_invalid_vpcs_version(loop, manager, vm):
-    with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.subprocess_check_output", return_value="Welcome to Virtual PC Simulator, version 0.1"):
-        with pytest.raises(VPCSError):
-            nio = manager.create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-            vm.port_add_nio_binding(0, nio)
-            loop.run_until_complete(asyncio.async(vm._check_vpcs_version()))
-            assert vm.name == "test"
-            assert vm.id == "00010203-0405-0607-0809-0a0b0c0d0e0f"
-
-
-def test_vm_invalid_vpcs_path(vm, manager, loop):
-    with patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM._vpcs_path", return_value="/tmp/fake/path/vpcs"):
-        with pytest.raises(VPCSError):
-            nio = manager.create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-            vm.port_add_nio_binding(0, nio)
-            loop.run_until_complete(asyncio.async(vm.start()))
-            assert vm.name == "test"
-            assert vm.id == "00010203-0405-0607-0809-0a0b0c0d0e0e"
-
-
 def test_start(loop, vm, async_run):
-    process = MagicMock()
-    process.returncode = None
+    vm._check_requirements = AsyncioMagicMock(return_value=True)
+    vm._add_ubridge_udp_connection = AsyncioMagicMock()
+    vm._manager.get_mac_id = MagicMock(return_value=3)
 
     with NotificationManager.instance().queue() as queue:
         async_run(queue.get(0))  # Ping
 
-        with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM._check_requirements", return_value=True):
-            with asyncio_patch("asyncio.create_subprocess_exec", return_value=process) as mock_exec:
-                with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM.start_wrap_console"):
-                    nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-                    async_run(vm.port_add_nio_binding(0, nio))
-                    loop.run_until_complete(asyncio.async(vm.start()))
-                    assert mock_exec.call_args[0] == (vm._vpcs_path(),
-                                                      '-p',
-                                                      str(vm._internal_console_port),
-                                                      '-m', '1',
-                                                      '-i',
-                                                      '1',
-                                                      '-F',
-                                                      '-R',
-                                                      '-s',
-                                                      ANY,
-                                                      '-c',
-                                                      ANY,
-                                                      '-t',
-                                                      '127.0.0.1')
-                assert vm.is_running()
-                assert vm.command_line == ' '.join(mock_exec.call_args[0])
+        nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
+        async_run(vm.port_add_nio_binding(0, nio))
+        loop.run_until_complete(asyncio.async(vm.start()))
         (action, event, kwargs) = async_run(queue.get(0))
         assert action == "node.updated"
         assert event == vm
 
-
-def test_start_0_6_1(loop, vm, async_run):
-    """
-    Version 0.6.1 doesn't have the -R options. It's not require
-    because GNS3 provide a patch for this.
-    """
-    process = MagicMock()
-    process.returncode = None
-    vm._vpcs_version = parse_version("0.6.1")
-
-    with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM._check_requirements", return_value=True):
-        with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM.start_wrap_console"):
-            with asyncio_patch("asyncio.create_subprocess_exec", return_value=process) as mock_exec:
-                nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-                async_run(vm.port_add_nio_binding(0, nio))
-                async_run(vm.start())
-                assert mock_exec.call_args[0] == (vm._vpcs_path(),
-                                                  '-p',
-                                                  str(vm._internal_console_port),
-                                                  '-m', '1',
-                                                  '-i',
-                                                  '1',
-                                                  '-F',
-                                                  '-s',
-                                                  ANY,
-                                                  '-c',
-                                                  ANY,
-                                                  '-t',
-                                                  '127.0.0.1')
-                assert vm.is_running()
+        assert vm._device.mac_address == "00:50:79:68:90:13"
+        assert vm._device.ip_address == "192.168.1.4"
+        assert vm._device_shell
+        assert vm._device_transport
+        assert vm._device_shell_server
 
 
 def test_stop(loop, vm, async_run):
-    process = MagicMock()
+    vm._check_requirements = AsyncioMagicMock(return_value=True)
+    vm._add_ubridge_udp_connection = AsyncioMagicMock()
 
-    # Wait process kill success
-    future = asyncio.Future()
-    future.set_result(True)
-    process.wait.return_value = future
-    process.returncode = None
+    vm._device_shell = MagicMock()
+    mock_transport = MagicMock()
+    vm._device_transport = mock_transport
+    mock_shell_server = MagicMock()
+    vm._device_shell_server = mock_shell_server
+    vm._started = True
 
     with NotificationManager.instance().queue() as queue:
-        with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM._check_requirements", return_value=True):
-            with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM.start_wrap_console"):
-                with asyncio_patch("asyncio.create_subprocess_exec", return_value=process):
-                    nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-                    async_run(vm.port_add_nio_binding(0, nio))
+        loop.run_until_complete(asyncio.async(vm.stop()))
+        assert vm.is_running() is False
 
-                    async_run(vm.start())
-                    assert vm.is_running()
-
-                    with asyncio_patch("gns3server.utils.asyncio.wait_for_process_termination"):
-                        loop.run_until_complete(asyncio.async(vm.stop()))
-                    assert vm.is_running() is False
-
-                    if sys.platform.startswith("win"):
-                        process.send_signal.assert_called_with(1)
-                    else:
-                        process.terminate.assert_called_with()
-
-                    async_run(queue.get(0))  #  Ping
-                    async_run(queue.get(0))  #  Started
+        async_run(queue.get(0))  # Ping
 
-                    (action, event, kwargs) = async_run(queue.get(0))
-                    assert action == "node.updated"
-                    assert event == vm
+        (action, event, kwargs) = async_run(queue.get(0))
+        assert action == "node.updated"
+        assert event == vm
+        assert mock_transport.close.called
+        assert mock_shell_server.close.called
 
 
 def test_reload(loop, vm, async_run):
-    process = MagicMock()
+    vm._check_requirements = AsyncioMagicMock(return_value=True)
+    vm._add_ubridge_udp_connection = AsyncioMagicMock()
 
-    # Wait process kill success
-    future = asyncio.Future()
-    future.set_result(True)
-    process.wait.return_value = future
-    process.returncode = None
+    nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
+    async_run(vm.port_add_nio_binding(0, nio))
+    async_run(vm.start())
+    assert vm.is_running()
 
-    with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM._check_requirements", return_value=True):
-        with asyncio_patch("gns3server.compute.vpcs.vpcs_vm.VPCSVM.start_wrap_console"):
-            with asyncio_patch("asyncio.create_subprocess_exec", return_value=process):
-                nio = VPCS.instance().create_nio({"type": "nio_udp", "lport": 4242, "rport": 4243, "rhost": "127.0.0.1"})
-                async_run(vm.port_add_nio_binding(0, nio))
-                async_run(vm.start())
-                assert vm.is_running()
-
-                with asyncio_patch("gns3server.utils.asyncio.wait_for_process_termination"):
-                    async_run(vm.reload())
-                assert vm.is_running() is True
-
-                if sys.platform.startswith("win"):
-                    process.send_signal.assert_called_with(1)
-                else:
-                    process.terminate.assert_called_with()
+    async_run(vm.reload())
+    assert vm.is_running() is True
 
 
 def test_add_nio_binding_udp(vm, async_run):
