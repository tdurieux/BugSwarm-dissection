diff --git a/src/main/java/org/testng/TestClass.java b/src/main/java/org/testng/TestClass.java
index 213ce1a08b..a982fc1818 100755
--- a/src/main/java/org/testng/TestClass.java
+++ b/src/main/java/org/testng/TestClass.java
@@ -97,6 +97,9 @@ private void initTestClassesAndInstances() {
         break;
       }
     }
+    if (m_testName == null) {
+      m_testName = m_iClass.getTestName();
+    }
   }
 
   @Override
diff --git a/src/main/java/org/testng/internal/ClassImpl.java b/src/main/java/org/testng/internal/ClassImpl.java
index eddbc48a93..60a8c4f70f 100755
--- a/src/main/java/org/testng/internal/ClassImpl.java
+++ b/src/main/java/org/testng/internal/ClassImpl.java
@@ -14,6 +14,7 @@
 import org.testng.ITestObjectFactory;
 import org.testng.TestNGException;
 import org.testng.annotations.Guice;
+import org.testng.annotations.ITestAnnotation;
 import org.testng.collections.Lists;
 import org.testng.collections.Objects;
 import org.testng.internal.annotations.AnnotationHelper;
@@ -62,6 +63,12 @@ public ClassImpl(ITestContext context, Class cls, XmlClass xmlClass, Object inst
     if (instance instanceof ITest) {
       m_testName = ((ITest) instance).getTestName();
     }
+    if (m_testName == null) {
+      ITestAnnotation annotation = m_annotationFinder.findAnnotation(cls, ITestAnnotation.class);
+      if (annotation != null) {
+        m_testName = annotation.getTestName();
+      }
+    }
     m_hasParentModule = isStringNotEmpty(m_testContext.getSuite().getParentModule());
   }
 
diff --git a/src/main/java/org/testng/internal/TestResult.java b/src/main/java/org/testng/internal/TestResult.java
index 9fb5909dfe..867bd33996 100755
--- a/src/main/java/org/testng/internal/TestResult.java
+++ b/src/main/java/org/testng/internal/TestResult.java
@@ -87,8 +87,8 @@ public void init (IClass testClass,
       if (m_instance instanceof ITest) {
         m_name = ((ITest) m_instance).getTestName();
       }
-      else if (context.getName() != null) {
-        m_name = context.getName();
+      else if (testClass.getTestName() != null) {
+        m_name = testClass.getTestName();
       }
       else {
         String string = m_instance.toString();
@@ -128,8 +128,8 @@ public String getTestName() {
     if (m_instance instanceof ITest) {
       return ((ITest) m_instance).getTestName();
     }
-    if (m_context.getName() != null) {
-      return m_context.getName();
+    if (m_testClass.getTestName() != null) {
+      return m_testClass.getTestName();
     }
     return null;
   }
diff --git a/src/main/java/org/testng/junit/JUnitTestClass.java b/src/main/java/org/testng/junit/JUnitTestClass.java
index b7171e97df..25b4d13895 100755
--- a/src/main/java/org/testng/junit/JUnitTestClass.java
+++ b/src/main/java/org/testng/junit/JUnitTestClass.java
@@ -23,8 +23,6 @@
     private Class m_realClass;
     private Object[] m_instances;
     private long[] m_instanceHashes;
-    private XmlTest m_xmlTest;
-    private XmlClass m_xmlClass;
 
     public JUnitTestClass(Class test) {
         m_realClass = test;
@@ -62,17 +60,17 @@ public Class getRealClass() {
 
     @Override
     public String getTestName() {
-        return m_xmlTest.getName();
+        return null;
     }
 
     @Override
     public XmlTest getXmlTest() {
-        return m_xmlTest;
+        return null;
     }
 
     @Override
     public XmlClass getXmlClass() {
-        return m_xmlClass;
+        return null;
     }
 
     /**
diff --git a/src/test/java/test/name/ITestSample.java b/src/test/java/test/name/ITestSample.java
new file mode 100755
index 0000000000..430be2ca8a
--- /dev/null
+++ b/src/test/java/test/name/ITestSample.java
@@ -0,0 +1,43 @@
+package test.name;
+
+import org.testng.Assert;
+import org.testng.ITest;
+import org.testng.annotations.AfterMethod;
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.DataProvider;
+import org.testng.annotations.Test;
+
+// From http://stackoverflow.com/q/33404335/4234729
+public class ITestSample implements ITest {
+
+  public ThreadLocal<String> testName = new ThreadLocal<>();
+
+  @DataProvider(name = "dp", parallel = true)
+  public Object[][] getTests() {
+    return new Object[][]{new Object[]{"test1"},
+                          new Object[]{"test2"},
+                          new Object[]{"test3"},
+                          new Object[]{"test4"},
+                          new Object[]{"test5"}};
+  }
+
+  @Test(dataProvider = "dp")
+  public void run(String testName) {
+    Assert.assertEquals(testName, this.testName.get());
+  }
+
+  @BeforeMethod
+  public void init(Object[] testArgs) {
+    testName.set((String) testArgs[0]);
+  }
+
+  @AfterMethod
+  public void tearDown(Object[] testArgs) {
+    Assert.assertEquals((String) testArgs[0], this.testName.get());
+  }
+
+  @Override
+  public String getTestName() {
+    return testName.get();
+  }
+}
diff --git a/src/test/java/test/name/NameTest.java b/src/test/java/test/name/NameTest.java
index d1cc34ec01..f87bbc66dd 100755
--- a/src/test/java/test/name/NameTest.java
+++ b/src/test/java/test/name/NameTest.java
@@ -6,12 +6,17 @@
 import org.testng.TestNG;
 import org.testng.annotations.Test;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
 import test.SimpleBaseTest;
 
 public class NameTest extends SimpleBaseTest {
 
   @Test
-  public void itest_test() {
+  public void itestTest() {
     TestNG tng = create(SimpleITestSample.class);
     TestListenerAdapter adapter = new TestListenerAdapter();
     tng.addListener(adapter);
@@ -28,7 +33,24 @@ public void itest_test() {
   }
 
   @Test
-  public void testName_test() {
+  public void itestTestWithXml() {
+    TestNG tng = createTests("suite", SimpleITestSample.class);
+    TestListenerAdapter adapter = new TestListenerAdapter();
+    tng.addListener(adapter);
+
+    tng.run();
+
+    Assert.assertTrue(adapter.getFailedTests().isEmpty());
+    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
+    Assert.assertEquals(adapter.getPassedTests().size(), 1);
+    ITestResult result = adapter.getPassedTests().get(0);
+    Assert.assertEquals(result.getMethod().getMethodName(), "test");
+    Assert.assertEquals(result.getName(), "NAME");
+    Assert.assertEquals(result.getTestName(), "NAME");
+  }
+
+  @Test
+  public void testNameTest() {
     TestNG tng = create(NameSample.class);
     TestListenerAdapter adapter = new TestListenerAdapter();
     tng.addListener(adapter);
@@ -43,4 +65,48 @@ public void testName_test() {
     Assert.assertEquals(result.getName(), "NAME");
     Assert.assertEquals(result.getTestName(), "NAME");
   }
+
+  @Test
+  public void testNameTestWithXml() {
+    TestNG tng = createTests("suite", NameSample.class);
+    TestListenerAdapter adapter = new TestListenerAdapter();
+    tng.addListener(adapter);
+
+    tng.run();
+
+    Assert.assertTrue(adapter.getFailedTests().isEmpty());
+    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
+    Assert.assertEquals(adapter.getPassedTests().size(), 1);
+    ITestResult result = adapter.getPassedTests().get(0);
+    Assert.assertEquals(result.getMethod().getMethodName(), "test");
+    Assert.assertEquals(result.getName(), "NAME");
+    Assert.assertEquals(result.getTestName(), "NAME");
+  }
+
+  @Test
+  public void complexITestTest() {
+    TestNG tng = create(ITestSample.class);
+    TestListenerAdapter adapter = new TestListenerAdapter();
+    tng.addListener(adapter);
+
+    tng.run();
+
+    Assert.assertTrue(adapter.getFailedTests().isEmpty());
+    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
+    Assert.assertEquals(adapter.getPassedTests().size(), 5);
+    List<String> testNames = new ArrayList<>(Arrays.asList("test1", "test2", "test3", "test4", "test5"));
+    for (ITestResult testResult : adapter.getPassedTests()) {
+      Assert.assertTrue(testNames.remove(testResult.getName()),
+                        "Duplicate test names " + getNames(adapter.getPassedTests()));
+    }
+    Assert.assertEquals(testNames, Collections.emptyList());
+  }
+
+  private static List<String> getNames(List<ITestResult> results) {
+    List<String> names = new ArrayList<>(results.size());
+    for (ITestResult result : results) {
+      names.add(result.getName());
+    }
+    return names;
+  }
 }
diff --git a/src/test/java/test/thread/Helper.java b/src/test/java/test/thread/Helper.java
index 2053a0b7bf..aa944ac73f 100755
--- a/src/test/java/test/thread/Helper.java
+++ b/src/test/java/test/thread/Helper.java
@@ -10,7 +10,10 @@
     synchronized(m_maps) {
       Map<Long, Long> result = m_maps.get(className);
       if (result == null) {
-        result = new HashMap();
+        // TODO a synchronizedMap will break MultiThreadedDependentSampleTest
+        // a not synchronizedMap will __sometimes__ break ParallelITestTest
+        //result = Collections.synchronizedMap(new HashMap<Long, Long>());
+        result = new HashMap<>();
         m_maps.put(className, result);
       }
       return result;
