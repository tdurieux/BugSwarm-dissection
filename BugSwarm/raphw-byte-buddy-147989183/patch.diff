diff --git a/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByExtensionBenchmark.java b/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByExtensionBenchmark.java
index d2a1c8a855..112f4ea0fa 100755
--- a/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByExtensionBenchmark.java
+++ b/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByExtensionBenchmark.java
@@ -93,7 +93,7 @@ public ExampleClass benchmarkByteBuddyWithAnnotations() throws Exception {
                 .make()
                 .load(newClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
     }
 
@@ -114,7 +114,7 @@ public ExampleClass benchmarkByteBuddySpecialized() throws Exception {
                 .make()
                 .load(newClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
     }
 
@@ -175,7 +175,7 @@ public boolean isHandled(Method method) {
             }
         });
         @SuppressWarnings("unchecked")
-        Object instance = proxyFactory.createClass().getConstructor().newInstance();
+        Object instance = proxyFactory.createClass().getDeclaredConstructor().newInstance();
         ((javassist.util.proxy.Proxy) instance).setHandler(new MethodHandler() {
             public Object invoke(Object self,
                                  Method thisMethod,
diff --git a/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByImplementationBenchmark.java b/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByImplementationBenchmark.java
index 7fa16d94f8..6a79e8652e 100755
--- a/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByImplementationBenchmark.java
+++ b/byte-buddy-benchmark/src/main/java/net/bytebuddy/benchmark/ClassByImplementationBenchmark.java
@@ -274,7 +274,7 @@ public ExampleInterface benchmarkByteBuddy() throws Exception {
                 .make()
                 .load(newClassLoader(), ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
     }
 
@@ -333,7 +333,7 @@ public boolean isHandled(Method method) {
             }
         });
         @SuppressWarnings("unchecked")
-        Object instance = proxyFactory.createClass().getConstructor().newInstance();
+        Object instance = proxyFactory.createClass().getDeclaredConstructor().newInstance();
         ((javassist.util.proxy.Proxy) instance).setHandler(new MethodHandler() {
             public Object invoke(Object self,
                                  Method thisMethod,
diff --git a/byte-buddy-benchmark/src/test/java/net/bytebuddy/benchmark/AbstractBlackHoleTest.java b/byte-buddy-benchmark/src/test/java/net/bytebuddy/benchmark/AbstractBlackHoleTest.java
index 0a88a32527..6b30aa9b8b 100755
--- a/byte-buddy-benchmark/src/test/java/net/bytebuddy/benchmark/AbstractBlackHoleTest.java
+++ b/byte-buddy-benchmark/src/test/java/net/bytebuddy/benchmark/AbstractBlackHoleTest.java
@@ -32,6 +32,6 @@ public void setUpBlackHole() throws Exception {
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         Method method = blackHoleGenerator.getDeclaredMethod(BLACK_HOLE_METHOD);
-        blackHole = (Blackhole) method.invoke(blackHoleGenerator.getConstructor().newInstance());
+        blackHole = (Blackhole) method.invoke(blackHoleGenerator.getDeclaredConstructor().newInstance());
     }
 }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTest.java
index 18ff49392a..b0833629bd 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTest.java
@@ -70,7 +70,7 @@ public void testTypeInitializerInstrumentation() throws Exception {
                 .make(TypeResolutionStrategy.Active.INSTANCE)
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance(), instanceOf(type));
+        assertThat(type.getDeclaredConstructor().newInstance(), instanceOf(type));
         assertThat(recorder.counter, is(1));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTutorialExamplesTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTutorialExamplesTest.java
index 74715c1b96..a0ebf05456 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTutorialExamplesTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/ByteBuddyTutorialExamplesTest.java
@@ -79,7 +79,7 @@ public void testHelloWorld() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getConstructor().newInstance().toString(), is("Hello World!"));
+        assertThat(dynamicType.getDeclaredConstructor().newInstance().toString(), is("Hello World!"));
     }
 
     @Test
@@ -92,7 +92,7 @@ public void testExtensiveExample() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getConstructor().newInstance().apply("Byte Buddy"), is((Object) "Hello from Byte Buddy"));
+        assertThat(dynamicType.getDeclaredConstructor().newInstance().apply("Byte Buddy"), is((Object) "Hello from Byte Buddy"));
     }
 
     @Test
@@ -181,7 +181,7 @@ public void testFieldsAndMethodsToString() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .toString();
         assertThat(toString, startsWith("example.Type"));
@@ -204,7 +204,7 @@ public void testFieldsAndMethodsMatcherStack() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         assertThat(foo.bar(), is("Hello World!"));
         assertThat(foo.foo(), is("Hello Foo!"));
@@ -227,7 +227,7 @@ public void testFieldsAndMethodsMethodDelegation() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .hello("World");
         assertThat(helloWorld, is("Hello World!"));
@@ -241,7 +241,7 @@ public void testFieldsAndMethodsMethodDelegationAlternatives() throws Exception
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .hello("World");
         assertThat(helloWorld, is("Hello World!"));
@@ -255,7 +255,7 @@ public void testFieldsAndMethodsMethodSuperCall() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         assertThat(loggingDatabase.load("qux"), is(Arrays.asList("qux: foo", "qux: bar")));
     }
@@ -277,7 +277,7 @@ public void testFieldsAndMethodsMethodDefaultCall() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         Method method = instance.getClass().getMethod("foo");
         assertThat(method.invoke(instance), is((Object) "foo"));
@@ -305,7 +305,7 @@ public void testFieldsAndMethodsSuper() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         assertThat(loggingDatabase.load("qux"), is(Arrays.asList("qux (logged access): foo", "qux (logged access): bar")));
     }
@@ -318,7 +318,7 @@ public void testFieldsAndMethodsRuntimeType() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         assertThat(trivialGetterBean.loop(42), is(42));
         assertThat(trivialGetterBean.loop("foo"), is("foo"));
@@ -335,7 +335,7 @@ public void testFieldsAndMethodsForwarding() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         assertThat(loggingDatabase.load("qux"), is(Arrays.asList("qux: foo", "qux: bar")));
     }
@@ -356,7 +356,7 @@ public void testFieldsAndMethodsFieldAccess() throws Exception {
                 .make()
                 .load(dynamicUserType.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance();
         UserType userType = (UserType) factory.makeInstance();
         ((InterceptionAccessor) userType).setInterceptor(new HelloWorldInterceptor());
@@ -398,7 +398,7 @@ public void testCustomImplementationMethodImplementation() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .calculate(), is(60));
     }
@@ -412,7 +412,7 @@ public void testCustomImplementationAssigner() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .toString(), is("42"));
     }
@@ -427,7 +427,7 @@ public void testCustomImplementationDelegationAnnotation() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .toString(), is("Hello!"));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/ClassFileVersionKnownVersionsTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/ClassFileVersionKnownVersionsTest.java
index c172fdb83e..1419edee64 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/ClassFileVersionKnownVersionsTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/ClassFileVersionKnownVersionsTest.java
@@ -110,7 +110,7 @@ public void testSimpleClassCreation() throws Exception {
                     .make()
                     .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                     .getLoaded();
-            assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+            assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         }
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationRedefineTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationRedefineTest.java
index 945d91fff5..d9a6d88a04 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationRedefineTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationRedefineTest.java
@@ -98,7 +98,7 @@ public void testRedefinition() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = simpleTypeLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -122,7 +122,7 @@ public void testRedefinitionOptionalType() throws Exception {
         try {
             Class<?> type = optionalTypeLoader.loadClass(SimpleOptionalType.class.getName());
             // The hybrid strategy cannot transform optional types.
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()),
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()),
                     is((Object) (descriptionStrategy == AgentBuilder.DescriptionStrategy.Default.HYBRID ? FOO : BAR)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -146,7 +146,7 @@ public void testRetransformation() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = simpleTypeLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -170,7 +170,7 @@ public void testRetransformationOptionalType() throws Exception {
         try {
             Class<?> type = optionalTypeLoader.loadClass(SimpleOptionalType.class.getName());
             // The hybrid strategy cannot transform optional types.
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (descriptionStrategy == AgentBuilder.DescriptionStrategy.Default.HYBRID
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (descriptionStrategy == AgentBuilder.DescriptionStrategy.Default.HYBRID
                     ? FOO
                     : BAR)));
         } finally {
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
index 1744825cd9..7e2d25f0e6 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/agent/builder/AgentBuilderDefaultApplicationTest.java
@@ -133,7 +133,7 @@ public void testAgentWithoutSelfInitialization() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Foo.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -151,7 +151,7 @@ public void testAgentSelfInitialization() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Bar.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -169,7 +169,7 @@ public void testAgentSelfInitializationAuxiliaryTypeEager() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Qux.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -187,7 +187,7 @@ public void testAgentSelfInitializationAuxiliaryTypeLazy() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(QuxBaz.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -207,7 +207,7 @@ public void testAgentWithoutSelfInitializationWithNativeMethodPrefix() throws Ex
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Baz.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
             assertThat(type.getDeclaredMethod(QUX + FOO), notNullValue(Method.class));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -232,7 +232,7 @@ public void testRedefinition() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -269,7 +269,7 @@ public void testChunkedRedefinition() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -307,7 +307,7 @@ public void testRedefinitionWithPoolOnly() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -332,7 +332,7 @@ public void testRedefinitionWithPoolFirst() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -357,7 +357,7 @@ public void testRedefinitionWithPoolLastDeferred() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -381,7 +381,7 @@ public void testRetransformation() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -418,7 +418,7 @@ public void testChunkedRetransformation() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(SimpleType.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -450,7 +450,7 @@ public void testChainedAgent() throws Exception {
         ClassFileTransformer secondTransformer = agentBuilder.installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Qux.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR + BAR)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR + BAR)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(firstTransformer);
             ByteBuddyAgent.getInstrumentation().removeTransformer(secondTransformer);
@@ -470,7 +470,7 @@ public void testSignatureTypesAreAvailableAfterLoad() throws Exception {
         try {
             Class<?> type = classLoader.loadClass(Foo.class.getName());
             assertThat(type.getDeclaredConstructors().length, is(2));
-            assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+            assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -489,7 +489,7 @@ public void testDecoration() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Foo.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR + QUX)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR + QUX)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -508,7 +508,7 @@ public void testDecorationFallThrough() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Foo.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR + QUX)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR + QUX)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -527,7 +527,7 @@ public void testDecorationBlocked() throws Exception {
                 .installOnByteBuddyAgent();
         try {
             Class<?> type = classLoader.loadClass(Foo.class.getName());
-            assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO + QUX)));
+            assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + QUX)));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
         }
@@ -549,7 +549,7 @@ public void testNonCapturingLambda() throws Exception {
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
             @SuppressWarnings("unchecked")
-            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getConstructor().newInstance());
+            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getDeclaredConstructor().newInstance());
             assertThat(instance.call(), is(BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -572,8 +572,8 @@ public void testNonCapturingLambdaIsConstant() throws Exception {
                 .installOn(ByteBuddyAgent.getInstrumentation());
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
-            assertThat(sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getConstructor().newInstance()),
-                    sameInstance(sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getConstructor().newInstance())));
+            assertThat(sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getDeclaredConstructor().newInstance()),
+                    sameInstance(sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getDeclaredConstructor().newInstance())));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
             AgentBuilder.LambdaInstrumentationStrategy.release(classFileTransformer, ByteBuddyAgent.getInstrumentation());
@@ -596,7 +596,7 @@ public void testLambdaFactoryIsReset() throws Exception {
         AgentBuilder.LambdaInstrumentationStrategy.release(classFileTransformer, ByteBuddyAgent.getInstrumentation());
         Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
         @SuppressWarnings("unchecked")
-        Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getConstructor().newInstance());
+        Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("nonCapturing").invoke(sampleFactory.getDeclaredConstructor().newInstance());
         assertThat(instance.call(), is(FOO));
     }
 
@@ -616,7 +616,7 @@ public void testArgumentCapturingLambda() throws Exception {
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
             @SuppressWarnings("unchecked")
-            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getConstructor().newInstance(), FOO);
+            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getDeclaredConstructor().newInstance(), FOO);
             assertThat(instance.call(), is(BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -639,8 +639,8 @@ public void testArgumentCapturingLambdaIsNotConstant() throws Exception {
                 .installOn(ByteBuddyAgent.getInstrumentation());
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
-            assertThat(sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getConstructor().newInstance(), FOO),
-                    not(sameInstance(sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getConstructor().newInstance(), FOO))));
+            assertThat(sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getDeclaredConstructor().newInstance(), FOO),
+                    not(sameInstance(sampleFactory.getDeclaredMethod("argumentCapturing", String.class).invoke(sampleFactory.getDeclaredConstructor().newInstance(), FOO))));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
             AgentBuilder.LambdaInstrumentationStrategy.release(classFileTransformer, ByteBuddyAgent.getInstrumentation());
@@ -663,7 +663,7 @@ public void testInstanceCapturingLambda() throws Exception {
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
             @SuppressWarnings("unchecked")
-            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("instanceCapturing").invoke(sampleFactory.getConstructor().newInstance());
+            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("instanceCapturing").invoke(sampleFactory.getDeclaredConstructor().newInstance());
             assertThat(instance.call(), is(BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -686,7 +686,7 @@ public void testNonCapturingLambdaWithArguments() throws Exception {
                 .installOn(ByteBuddyAgent.getInstrumentation());
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
-            Object instance = sampleFactory.getDeclaredMethod("nonCapturingWithArguments").invoke(sampleFactory.getConstructor().newInstance());
+            Object instance = sampleFactory.getDeclaredMethod("nonCapturingWithArguments").invoke(sampleFactory.getDeclaredConstructor().newInstance());
             assertThat(instance.getClass().getMethod("apply", Object.class).invoke(instance, FOO), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -709,7 +709,7 @@ public void testCapturingLambdaWithArguments() throws Exception {
                 .installOn(ByteBuddyAgent.getInstrumentation());
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
-            Object instance = sampleFactory.getDeclaredMethod("capturingWithArguments", String.class).invoke(sampleFactory.getConstructor().newInstance(), FOO);
+            Object instance = sampleFactory.getDeclaredMethod("capturingWithArguments", String.class).invoke(sampleFactory.getDeclaredConstructor().newInstance(), FOO);
             assertThat(instance.getClass().getMethod("apply", Object.class).invoke(instance, FOO), is((Object) BAR));
         } finally {
             ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
@@ -732,7 +732,7 @@ public void testSerializableLambda() throws Exception {
         try {
             Class<?> sampleFactory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
             @SuppressWarnings("unchecked")
-            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("serializable", String.class).invoke(sampleFactory.getConstructor().newInstance(), FOO);
+            Callable<String> instance = (Callable<String>) sampleFactory.getDeclaredMethod("serializable", String.class).invoke(sampleFactory.getDeclaredConstructor().newInstance(), FOO);
             assertThat(instance.call(), is(FOO));
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream);
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceBoxedAssignmentTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceBoxedAssignmentTest.java
index b3b5d9ee5b..2e95ad49d4 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceBoxedAssignmentTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceBoxedAssignmentTest.java
@@ -53,7 +53,7 @@ public void testAssignment() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getConstructor().newInstance()), is(expected));
+        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getDeclaredConstructor().newInstance()), is(expected));
     }
 
     @SuppressWarnings("all")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceDeadCodeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceDeadCodeTest.java
index b5e7f14f96..99686bef1d 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceDeadCodeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceDeadCodeTest.java
@@ -58,7 +58,7 @@ public void testAdviceProcessesDeadCode() throws Exception {
                 .make()
                 .load(null, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -86,7 +86,7 @@ public void testAdviceContainsDeadCode() throws Exception {
                 .load(null, ClassLoadingStrategy.Default.CHILD_FIRST)
                 .getLoaded();
         assertThat(redefined, not(sameInstance((Object) foo)));
-        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @SuppressWarnings("all")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceFrameTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceFrameTest.java
index f26a399e1b..c04db7dc00 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceFrameTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceFrameTest.java
@@ -52,7 +52,7 @@ public void testFrameAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) FOO));
         assertThat(type.getField(COUNT).getInt(null), is((Object) count));
     }
 
@@ -76,7 +76,7 @@ public void testFrameAdviceExpanded() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) FOO));
         assertThat(type.getField(COUNT).getInt(null), is((Object) count));
     }
 
@@ -100,7 +100,7 @@ public void testFrameAdviceComputedMaxima() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) FOO));
         assertThat(type.getField(COUNT).getInt(null), is((Object) count));
     }
 
@@ -124,7 +124,7 @@ public void testFrameAdviceComputedFrames() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) FOO));
         assertThat(type.getField(COUNT).getInt(null), is((Object) count));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceInconsistentStackSizeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceInconsistentStackSizeTest.java
index 6934891799..0d5ce5a283 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceInconsistentStackSizeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceInconsistentStackSizeTest.java
@@ -76,7 +76,7 @@ public void testInconsistentStackSize() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(adviced.getDeclaredMethod(FOO).invoke(adviced.getConstructor().newInstance()), is((Object) replaced));
+        assertThat(adviced.getDeclaredMethod(FOO).invoke(adviced.getDeclaredConstructor().newInstance()), is((Object) replaced));
     }
 
     @Test
@@ -104,7 +104,7 @@ public void testInconsistentStackSizeAdvice() throws Exception {
                 .load(null, ClassLoadingStrategy.Default.CHILD_FIRST)
                 .getLoaded();
         assertThat(redefined, not(sameInstance((Object) foo)));
-        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @SuppressWarnings("all")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceJsrRetTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceJsrRetTest.java
index aa5d149f46..4abd733ada 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceJsrRetTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceJsrRetTest.java
@@ -30,14 +30,14 @@ public void testJsrRetByteCodes() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER_PERSISTENT)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         Class<?> advised = new ByteBuddy()
                 .redefine(type)
                 .visit(Advice.to(JsrAdvice.class).on(named(FOO)))
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(advised.getDeclaredMethod(FOO).invoke(advised.getConstructor().newInstance()), is((Object) BAR));
+        assertThat(advised.getDeclaredMethod(FOO).invoke(advised.getDeclaredConstructor().newInstance()), is((Object) BAR));
     }
 
     @SuppressWarnings("all")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnTest.java
index 88b4304f29..4e3536eb6a 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnTest.java
@@ -51,7 +51,7 @@ public void testNoRegularReturnWithSkip() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -67,7 +67,7 @@ public void testNoRegularReturnWithoutHandler() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -83,7 +83,7 @@ public void testNoRegularReturnWithHandler() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnWithinAdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnWithinAdviceTest.java
index 680dc17322..48923a31bd 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnWithinAdviceTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceNoRegularReturnWithinAdviceTest.java
@@ -72,7 +72,7 @@ public void testNoRegularReturn() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSkipIfTrueTypeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSkipIfTrueTypeTest.java
index fabe4212f3..1689e9e985 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSkipIfTrueTypeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSkipIfTrueTypeTest.java
@@ -81,7 +81,7 @@ public void testAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is(value));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is(value));
     }
 
     @SuppressWarnings("unused")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSuppressionTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSuppressionTest.java
index d4f7aa9ef2..8ee45e629e 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSuppressionTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceSuppressionTest.java
@@ -78,7 +78,7 @@ public void testIllegalAssignment() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @SuppressWarnings("unused")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java
index f89539e4bb..da16c35064 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTest.java
@@ -50,7 +50,7 @@ public void testEmptyAdviceEntryAndExit() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -61,7 +61,7 @@ public void testEmptyAdviceEntryAndExitWithEntrySuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -72,7 +72,7 @@ public void testEmptyAdviceEntryAndExitWithExitSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -83,7 +83,7 @@ public void testEmptyAdviceEntryAndExitWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -94,7 +94,7 @@ public void testEmptyAdviceEntryAndExitWithExceptionHandling() throws Exception
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -105,7 +105,7 @@ public void testEmptyAdviceEntryAndExitWithExceptionHandlingAndEntrySuppression(
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -116,7 +116,7 @@ public void testEmptyAdviceEntryAndExitWithExceptionHandlingAndExitSuppression()
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -127,7 +127,7 @@ public void testEmptyAdviceEntryAndExitWithExceptionHandlingAndSuppression() thr
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -138,7 +138,7 @@ public void testEmptyAdviceEntry() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -149,7 +149,7 @@ public void testEmptyAdviceEntryWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -160,7 +160,7 @@ public void testEmptyAdviceExit() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -171,7 +171,7 @@ public void testEmptyAdviceExitAndSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -182,7 +182,7 @@ public void testEmptyAdviceExitWithExceptionHandling() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -193,7 +193,7 @@ public void testEmptyAdviceExitWithExceptionHandlingAndSuppression() throws Exce
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -204,7 +204,7 @@ public void testTrivialDelegation() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -215,7 +215,7 @@ public void testTrivialAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -228,7 +228,7 @@ public void testTrivialAdviceWithDelegation() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -241,7 +241,7 @@ public void testTrivialAdviceWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -254,7 +254,7 @@ public void testTrivialAdviceDistributedEnterOnly() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 0));
     }
@@ -267,7 +267,7 @@ public void testTrivialAdviceDistributedExitOnly() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 0));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -280,7 +280,7 @@ public void testTrivialAdviceWithDelegationEnterOnly() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 0));
     }
@@ -293,7 +293,7 @@ public void testTrivialAdviceWithDelegationExitOnly() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 0));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -306,7 +306,7 @@ public void testTrivialAdviceMultipleMethods() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredMethod(BAZ).invoke(null), is((Object) FOO));
@@ -322,7 +322,7 @@ public void testTrivialAdviceMultipleMethodsWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredMethod(BAZ).invoke(null), is((Object) FOO));
@@ -339,7 +339,7 @@ public void testTrivialAdviceNested() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 2));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 2));
     }
@@ -353,7 +353,7 @@ public void testTrivialAdviceNestedWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 2));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 2));
     }
@@ -366,7 +366,7 @@ public void testTrivialAdviceWithHandler() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -379,7 +379,7 @@ public void testTrivialAdviceWithHandlerAndSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -392,7 +392,7 @@ public void testAdviceOnConstructor() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -405,7 +405,7 @@ public void testAdviceOnConstructorExitAdviceWithSuppression() throws Exception
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -418,7 +418,7 @@ public void testFrameAdviceSimpleShift() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -429,7 +429,7 @@ public void testFrameAdviceSimpleShiftExpanded() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -448,7 +448,7 @@ public void testAdviceWithImplicitArgument() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getConstructor().newInstance(), BAR), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), BAR), is((Object) BAR));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -461,7 +461,7 @@ public void testAdviceWithImplicitArgumentDelegation() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getConstructor().newInstance(), BAR), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), BAR), is((Object) BAR));
     }
 
     @Test
@@ -472,7 +472,7 @@ public void testAdviceWithExplicitArgument() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(QUX, String.class, String.class).invoke(type.getConstructor().newInstance(), FOO, BAR), is((Object) (FOO + BAR)));
+        assertThat(type.getDeclaredMethod(QUX, String.class, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO, BAR), is((Object) (FOO + BAR)));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -485,7 +485,7 @@ public void testAdviceWithIncrement() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, int.class).invoke(type.getConstructor().newInstance(), 0), is((Object) 2));
+        assertThat(type.getDeclaredMethod(FOO, int.class).invoke(type.getDeclaredConstructor().newInstance(), 0), is((Object) 2));
     }
 
     @Test
@@ -496,7 +496,7 @@ public void testAdviceWithThisReference() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -509,7 +509,7 @@ public void testAdviceWithOptionalThisReferenceNonOptional() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -535,7 +535,7 @@ public void testAdviceWithEntranceValue() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -548,7 +548,7 @@ public void testAdviceWithReturnValue() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 0));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -561,7 +561,7 @@ public void testAdviceWithExceptionHandler() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -575,7 +575,7 @@ public void testAdviceWithExceptionHandlerNested() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 2));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 2));
     }
@@ -589,7 +589,7 @@ public void testAdviceNotSkipExceptionImplicit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO + BAR).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -608,7 +608,7 @@ public void testAdviceNotSkipExceptionImplicitNested() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO + BAR).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -626,7 +626,7 @@ public void testAdviceSkipExceptionImplicit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO + BAR).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -644,7 +644,7 @@ public void testAdviceNotSkipExceptionExplicit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(BAR + BAZ).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(NullPointerException.class));
@@ -663,7 +663,7 @@ public void testAdviceNotSkipExceptionExplicitNested() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(BAR + BAZ).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(NullPointerException.class));
@@ -681,7 +681,7 @@ public void testAdviceSkipExceptionExplicit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(BAR + BAZ).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(NullPointerException.class));
@@ -698,7 +698,7 @@ public void testAdviceSkipExceptionDoesNotSkipNonException() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -711,7 +711,7 @@ public void testObsoleteReturnValue() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 0));
     }
@@ -724,7 +724,7 @@ public void testUnusedReturnValue() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -737,7 +737,7 @@ public void testVariableMappingAdviceLarger() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getConstructor().newInstance(), FOO + BAR + QUX + BAZ), is((Object) (FOO + BAR + QUX + BAZ)));
+        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO + BAR + QUX + BAZ), is((Object) (FOO + BAR + QUX + BAZ)));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -750,7 +750,7 @@ public void testVariableMappingInstrumentedLarger() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(QUX + BAZ).invoke(type.getConstructor().newInstance()), is((Object) (FOO + BAR + QUX + BAZ)));
+        assertThat(type.getDeclaredMethod(QUX + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR + QUX + BAZ)));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -763,7 +763,7 @@ public void testExceptionWhenNotThrown() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) (FOO)));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO)));
         assertThat(type.getDeclaredField(THROWABLE).get(null), nullValue(Object.class));
     }
 
@@ -776,7 +776,7 @@ public void testExceptionWhenThrown() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO + BAR).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -793,7 +793,7 @@ public void testAdviceThrowOnEnter() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -812,7 +812,7 @@ public void testAdviceThrowOnExit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -830,7 +830,7 @@ public void testAdviceThrowSuppressed() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+        type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(INSIDE).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
@@ -845,7 +845,7 @@ public void testAdviceThrowNotSuppressedOnEnter() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(Exception.class));
@@ -864,7 +864,7 @@ public void testAdviceThrowNotSuppressedOnExit() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(Exception.class));
@@ -931,7 +931,7 @@ public void testReturnValueSubstitution() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) BAR));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -950,7 +950,7 @@ public void testEnterValueSubstitution() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -969,7 +969,7 @@ public void testFieldAdviceImplicit() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -982,7 +982,7 @@ public void testFieldAdviceExplicit() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -995,7 +995,7 @@ public void testOriginAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -1008,7 +1008,7 @@ public void testOriginCustomAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -1021,7 +1021,7 @@ public void testExceptionSuppressionAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO + BAR).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -1033,7 +1033,7 @@ public void testExceptionTypeAdvice() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(IllegalStateException.class));
@@ -1051,7 +1051,7 @@ public void testExceptionNotCatchedAdvice() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(Exception.class));
@@ -1069,7 +1069,7 @@ public void testExceptionCatchedAdvice() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -1087,7 +1087,7 @@ public void testExceptionCatchedWithExchangeAdvice() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(IOException.class));
@@ -1105,7 +1105,7 @@ public void testNonAssignableCasting() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(ClassCastException.class));
@@ -1120,7 +1120,7 @@ public void testTrivialAssignableCasting() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
     }
 
     @Test
@@ -1132,7 +1132,7 @@ public void testPrimitiveNonAssignableCasting() throws Exception {
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         try {
-            type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance());
+            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(ClassCastException.class));
@@ -1155,7 +1155,7 @@ public Object resolve(MethodDescription.InDefinedShape instrumentedMethod,
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -1174,7 +1174,7 @@ public Object resolve(MethodDescription.InDefinedShape instrumentedMethod,
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -1193,7 +1193,7 @@ public Object resolve(MethodDescription.InDefinedShape instrumentedMethod,
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -1204,7 +1204,7 @@ public void testSkipInstrumentedMethod() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(FOO).get(null), is((Object) 0));
@@ -1218,7 +1218,7 @@ public void testSkipInstrumentedMethodNonInlined() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(FOO).get(null), is((Object) 0));
@@ -1232,7 +1232,7 @@ public void testSkipInstrumentedMethodWithSuppression() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(FOO).get(null), is((Object) 1));
@@ -1246,7 +1246,7 @@ public void testSkipInstrumentedMethodNonInlinedWithSuppression() throws Excepti
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(FOO).get(null), is((Object) 1));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTypeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTypeTest.java
index facb8e26b6..57d67fade4 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTypeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/asm/AdviceTypeTest.java
@@ -91,7 +91,7 @@ public void testAdvice() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, this.type, this.type).invoke(type.getConstructor().newInstance(), value, value), is((Object) value));
+        assertThat(type.getDeclaredMethod(FOO, this.type, this.type).invoke(type.getDeclaredConstructor().newInstance(), value, value), is((Object) value));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
@@ -110,7 +110,7 @@ public void testAdviceWithException() throws Exception {
                 .getLoaded();
         type.getDeclaredField(exception).set(null, true);
         try {
-            assertThat(type.getDeclaredMethod(BAR, this.type, this.type).invoke(type.getConstructor().newInstance(), value, value), is((Object) value));
+            assertThat(type.getDeclaredMethod(BAR, this.type, this.type).invoke(type.getDeclaredConstructor().newInstance(), value, value), is((Object) value));
             fail();
         } catch (InvocationTargetException exception) {
             assertThat(exception.getCause(), instanceOf(RuntimeException.class));
@@ -134,7 +134,7 @@ public void testAdviceWithProperty() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO, this.type, this.type).invoke(type.getConstructor().newInstance(), value, value), is((Object) value));
+        assertThat(type.getDeclaredMethod(FOO, this.type, this.type).invoke(type.getDeclaredConstructor().newInstance(), value, value), is((Object) value));
         assertThat(type.getDeclaredField(ENTER).get(null), is((Object) 1));
         assertThat(type.getDeclaredField(EXIT).get(null), is((Object) 1));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/AbstractDynamicTypeBuilderTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/AbstractDynamicTypeBuilderTest.java
index 216d7a6c4d..1f207170e2 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/AbstractDynamicTypeBuilderTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/AbstractDynamicTypeBuilderTest.java
@@ -127,7 +127,7 @@ public void testMethodDefinition() throws Exception {
         assertThat(method.getReturnType(), CoreMatchers.<Class<?>>is(Object.class));
         assertThat(method.getExceptionTypes(), is(new Class<?>[]{Exception.class}));
         assertThat(method.getModifiers(), is(Modifier.PUBLIC));
-        assertThat(method.invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(method.invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -207,7 +207,7 @@ public void testApplicationOrder() throws Exception {
                 .make()
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .toString(), is(BAR));
     }
@@ -224,7 +224,7 @@ public void testTypeInitializer() throws Exception {
                 .make()
                 .load(classLoader, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         Class<?> foo = classLoader.loadClass(Bar.class.getName());
         assertThat(foo.getDeclaredField(FOO).get(null), is((Object) FOO));
     }
@@ -238,7 +238,7 @@ public void testConstructorInvokingMethod() throws Exception {
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         Method method = type.getDeclaredMethod(FOO);
-        assertThat(method.invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(method.invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -250,7 +250,7 @@ public void testMethodTransformation() throws Exception {
                 .make()
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance().toString(), is(FOO));
+        assertThat(type.getDeclaredConstructor().newInstance().toString(), is(FOO));
         assertThat(type.getDeclaredMethod(TO_STRING).getModifiers(), is(Opcodes.ACC_FINAL | Opcodes.ACC_PUBLIC));
     }
 
@@ -275,7 +275,7 @@ public void testIgnoredMethod() throws Exception {
                 .make()
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance().toString(), CoreMatchers.not(FOO));
+        assertThat(type.getDeclaredConstructor().newInstance().toString(), CoreMatchers.not(FOO));
     }
 
     @Test
@@ -287,7 +287,7 @@ public void testIgnoredMethodDoesNotApplyForDefined() throws Exception {
                 .make()
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     @Test
@@ -370,7 +370,7 @@ public void visitEnd() {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         verify(asmVisitorWrapper).mergeWriter(0);
         verify(asmVisitorWrapper, atMost(1)).mergeReader(0);
         verify(asmVisitorWrapper).wrap(any(TypeDescription.class), any(ClassVisitor.class), anyInt(), anyInt());
@@ -961,11 +961,11 @@ public void testBridgeResolutionAmbiguous() throws Exception {
             if (method.getReturnType() == String.class) {
                 assertThat(method.getName(), is(QUX));
                 assertThat(method.getParameterTypes().length, is(0));
-                assertThat(method.invoke(type.getConstructor().newInstance()), is((Object) BAR));
+                assertThat(method.invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
             } else if (method.getReturnType() == Object.class) {
                 assertThat(method.getName(), is(QUX));
                 assertThat(method.getParameterTypes().length, is(0));
-                assertThat(method.invoke(type.getConstructor().newInstance()), is((Object) BAR));
+                assertThat(method.invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
             } else {
                 throw new AssertionError();
             }
@@ -986,7 +986,7 @@ public void testCanOverloadMethodByReturnType() throws Exception {
             if (method.getReturnType() == String.class) {
                 assertThat(method.getName(), is(QUX));
                 assertThat(method.getParameterTypes().length, is(0));
-                assertThat(method.invoke(type.getConstructor().newInstance()), is((Object) FOO));
+                assertThat(method.invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
             } else if (method.getReturnType() == Object.class) {
                 assertThat(method.getName(), is(QUX));
                 assertThat(method.getParameterTypes().length, is(0));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassInjectorUsingReflectionTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassInjectorUsingReflectionTest.java
index f87f3a47d2..5d8028c1ea 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassInjectorUsingReflectionTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassInjectorUsingReflectionTest.java
@@ -79,7 +79,7 @@ public void testInjectionOrderNoPrematureAuxiliaryInjection() throws Exception {
                 .intercept(MethodDelegation.to(Interceptor.class)).make()
                 .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getConstructor().newInstance(), FOO), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) BAR));
     }
 
     @Test
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
index 51f379059e..884ac10522 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategyTest.java
@@ -212,7 +212,7 @@ public void testAnonymousType() throws Exception {
         Instrumentation instrumentation = ByteBuddyAgent.install();
         Class<?> factory = classLoader.loadClass(LAMBDA_SAMPLE_FACTORY);
         @SuppressWarnings("unchecked")
-        Callable<String> instance = (Callable<String>) factory.getDeclaredMethod("nonCapturing").invoke(factory.getConstructor().newInstance());
+        Callable<String> instance = (Callable<String>) factory.getDeclaredMethod("nonCapturing").invoke(factory.getDeclaredConstructor().newInstance());
         // Anonymous types can only be reset to their original format, if a retransformation is applied.
         ClassReloadingStrategy classReloadingStrategy = new ClassReloadingStrategy(instrumentation,
                 ClassReloadingStrategy.Strategy.RETRANSFORMATION).preregistered(instance.getClass());
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/TypeWriterDefaultTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/TypeWriterDefaultTest.java
index ad4b462457..d55cce7c01 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/TypeWriterDefaultTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/TypeWriterDefaultTest.java
@@ -390,7 +390,7 @@ public void testTypeInLegacyConstantPoolRemapped() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getConstructor().newInstance()), is((Object) Object.class));
+        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getDeclaredConstructor().newInstance()), is((Object) Object.class));
     }
 
     @Test
@@ -403,7 +403,7 @@ public void testArrayTypeInLegacyConstantPoolRemapped() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getConstructor().newInstance()), is((Object) Object[].class));
+        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getDeclaredConstructor().newInstance()), is((Object) Object[].class));
     }
 
     @Test
@@ -416,7 +416,7 @@ public void testPrimitiveTypeInLegacyConstantPoolRemapped() throws Exception {
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getConstructor().newInstance()), is((Object) int.class));
+        assertThat(dynamicType.getDeclaredMethod(FOO).invoke(dynamicType.getDeclaredConstructor().newInstance()), is((Object) int.class));
     }
 
     @Test
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/AbstractDynamicTypeBuilderForInliningTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/AbstractDynamicTypeBuilderForInliningTest.java
index 2ffe868f34..a7e56dfdd8 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/AbstractDynamicTypeBuilderForInliningTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/AbstractDynamicTypeBuilderForInliningTest.java
@@ -101,7 +101,7 @@ public void testTypeInitializerRetention() throws Exception {
                 .make()
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         assertThat(type.getDeclaredField(FOO).get(null), is((Object) FOO));
         assertThat(type.getDeclaredField(BAR).get(null), is((Object) BAR));
     }
@@ -222,7 +222,7 @@ public void testBridgeMethodCreation() throws Exception {
                 .getLoaded();
         assertEquals(String.class, dynamicType.getDeclaredMethod(FOO).getReturnType());
         assertThat(dynamicType.getDeclaredMethod(FOO).getGenericReturnType(), is((Type) String.class));
-        BridgeRetention<String> bridgeRetention = (BridgeRetention<String>) dynamicType.getConstructor().newInstance();
+        BridgeRetention<String> bridgeRetention = (BridgeRetention<String>) dynamicType.getDeclaredConstructor().newInstance();
         assertThat(bridgeRetention.foo(), is(FOO));
         bridgeRetention.assertZeroCalls();
     }
@@ -242,7 +242,7 @@ public void testBridgeMethodCreationForExistingBridgeMethod() throws Exception {
         assertEquals(Object.class, dynamicType.getDeclaredMethod(FOO, Object.class).getReturnType());
         assertThat(dynamicType.getDeclaredMethod(FOO, Object.class).getGenericReturnType(), is((Type) Object.class));
         assertThat(dynamicType.getDeclaredMethod(FOO, Object.class).isBridge(), is(true));
-        CallSuperMethod<String> callSuperMethod = (CallSuperMethod<String>) dynamicType.getConstructor().newInstance();
+        CallSuperMethod<String> callSuperMethod = (CallSuperMethod<String>) dynamicType.getDeclaredConstructor().newInstance();
         assertThat(callSuperMethod.foo(FOO), is(FOO));
         callSuperMethod.assertOnlyCall(FOO);
     }
@@ -360,7 +360,7 @@ public void testMethodTransformationExistingMethod() throws Exception {
                 .load(new URLClassLoader(new URL[0], null), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
         Method foo = type.getDeclaredMethod(FOO);
-        assertThat(foo.invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(foo.invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
         assertThat(foo.getModifiers(), is(Opcodes.ACC_FINAL | Opcodes.ACC_PUBLIC));
     }
 
@@ -396,7 +396,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
                 .make()
                 .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(FOO).invoke(type.getConstructor().newInstance()), is((Object) BAR));
+        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
         verify(asmVisitorWrapper).mergeWriter(0);
         verify(asmVisitorWrapper).mergeReader(0);
         verify(asmVisitorWrapper).wrap(any(TypeDescription.class), any(ClassVisitor.class), anyInt(), anyInt());
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RebaseDynamicTypeBuilderTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RebaseDynamicTypeBuilderTest.java
index 7cd4a3a9e3..bf59294021 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RebaseDynamicTypeBuilderTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RebaseDynamicTypeBuilderTest.java
@@ -161,7 +161,7 @@ public void testDefaultInterfaceSubInterface() throws Exception {
                 .make()
                 .load(dynamicInterfaceType.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getConstructor().newInstance()), is((Object) (FOO + BAR)));
+        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR)));
         assertThat(dynamicInterfaceType.getDeclaredMethods().length, is(3));
         assertThat(dynamicClassType.getDeclaredMethods().length, is(0));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RedefinitionDynamicTypeBuilderTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RedefinitionDynamicTypeBuilderTest.java
index 23df465bd8..e46b5fef81 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RedefinitionDynamicTypeBuilderTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/inline/RedefinitionDynamicTypeBuilderTest.java
@@ -130,7 +130,7 @@ public void testDefaultInterfaceSubInterface() throws Exception {
                 .make()
                 .load(dynamicInterfaceType.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getConstructor().newInstance()), is((Object) BAR));
+        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getDeclaredConstructor().newInstance()), is((Object) BAR));
         assertThat(dynamicInterfaceType.getDeclaredMethods().length, is(1));
         assertThat(dynamicClassType.getDeclaredMethods().length, is(0));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/subclass/SubclassDynamicTypeBuilderTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/subclass/SubclassDynamicTypeBuilderTest.java
index 9624bbca2d..3e73b811be 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/subclass/SubclassDynamicTypeBuilderTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/dynamic/scaffold/subclass/SubclassDynamicTypeBuilderTest.java
@@ -87,7 +87,7 @@ public void testSimpleSubclass() throws Exception {
         assertThat(type.getDeclaredConstructor(), notNullValue(Constructor.class));
         assertThat(Object.class.isAssignableFrom(type), is(true));
         assertThat(type, not(CoreMatchers.<Class<?>>is(Object.class)));
-        assertThat(type.getConstructor().newInstance(), notNullValue(Object.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
         assertThat(type.isInterface(), is(false));
         assertThat(type.isAnnotation(), is(false));
     }
@@ -119,7 +119,7 @@ public void testSimpleSubclassWithDefaultConstructor() throws Exception {
         assertThat(type.getDeclaredConstructor(), notNullValue(Constructor.class));
         assertThat(DefaultConstructor.class.isAssignableFrom(type), is(true));
         assertThat(type, not(CoreMatchers.<Class<?>>is(DefaultConstructor.class)));
-        assertThat(type.getConstructor().newInstance(), notNullValue(DefaultConstructor.class));
+        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(DefaultConstructor.class));
         assertThat(type.isInterface(), is(false));
         assertThat(type.isAnnotation(), is(false));
     }
@@ -225,7 +225,7 @@ public void testDefaultMethodNonOverridden() throws Exception {
                 .getLoaded();
         assertThat(dynamicType.getDeclaredFields().length, is(0));
         assertThat(dynamicType.getDeclaredMethods().length, is(0));
-        assertThat(interfaceMethod.invoke(dynamicType.getConstructor().newInstance()), is(interfaceMarker));
+        assertThat(interfaceMethod.invoke(dynamicType.getDeclaredConstructor().newInstance()), is(interfaceMarker));
     }
 
     @Test
@@ -241,7 +241,7 @@ public void testDefaultMethodOverridden() throws Exception {
                 .getLoaded();
         assertThat(dynamicType.getDeclaredFields().length, is(0));
         assertThat(dynamicType.getDeclaredMethods().length, is(1));
-        assertThat(interfaceMethod.invoke(dynamicType.getConstructor().newInstance()), is((Object) BAR));
+        assertThat(interfaceMethod.invoke(dynamicType.getDeclaredConstructor().newInstance()), is((Object) BAR));
     }
 
     @Test
@@ -285,7 +285,7 @@ public void testDefaultInterfaceSubInterface() throws Exception {
                 .make()
                 .load(dynamicInterfaceType.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded();
-        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getConstructor().newInstance()), is((Object) (FOO + BAR)));
+        assertThat(dynamicClassType.getMethod(FOO).invoke(dynamicClassType.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR)));
         assertThat(dynamicInterfaceType.getDeclaredMethods().length, is(2));
         assertThat(dynamicClassType.getDeclaredMethods().length, is(0));
     }
@@ -376,7 +376,7 @@ public void testBridgeMethodCreation() throws Exception {
                 .getLoaded();
         assertEquals(String.class, dynamicType.getDeclaredMethod(FOO).getReturnType());
         assertThat(dynamicType.getDeclaredMethod(FOO).getGenericReturnType(), is((Type) String.class));
-        BridgeRetention<String> bridgeRetention = (BridgeRetention<String>) dynamicType.getConstructor().newInstance();
+        BridgeRetention<String> bridgeRetention = (BridgeRetention<String>) dynamicType.getDeclaredConstructor().newInstance();
         assertThat(bridgeRetention.foo(), is(FOO));
         bridgeRetention.assertZeroCalls();
     }
@@ -397,7 +397,7 @@ public void testBridgeMethodCreationForExistingBridgeMethod() throws Exception {
         assertEquals(Object.class, dynamicType.getDeclaredMethod(FOO, Object.class).getReturnType());
         assertThat(dynamicType.getDeclaredMethod(FOO, Object.class).getGenericReturnType(), is((Type) Object.class));
         assertThat(dynamicType.getDeclaredMethod(FOO, Object.class).isBridge(), is(true));
-        CallSuperMethod<String> callSuperMethod = (CallSuperMethod<String>) dynamicType.getConstructor().newInstance();
+        CallSuperMethod<String> callSuperMethod = (CallSuperMethod<String>) dynamicType.getDeclaredConstructor().newInstance();
         assertThat(callSuperMethod.foo(FOO), is(FOO));
         callSuperMethod.assertOnlyCall(FOO);
     }
@@ -436,12 +436,12 @@ public void testVisibilityBridge() throws Exception {
         assertThat(foo.isBridge(), is(true));
         assertThat(foo.getDeclaredAnnotations().length, is(1));
         assertThat(foo.getAnnotation(Foo.class), notNullValue(Foo.class));
-        assertThat(foo.invoke(type.getConstructor().newInstance(), BAR), is((Object) (FOO + BAR)));
+        assertThat(foo.invoke(type.getDeclaredConstructor().newInstance(), BAR), is((Object) (FOO + BAR)));
         Method bar = type.getDeclaredMethod(BAR, List.class);
         assertThat(bar.isBridge(), is(true));
         assertThat(bar.getDeclaredAnnotations().length, is(0));
         List<?> list = new ArrayList<Object>();
-        assertThat(bar.invoke(type.getConstructor().newInstance(), list), sameInstance((Object) list));
+        assertThat(bar.invoke(type.getDeclaredConstructor().newInstance(), list), sameInstance((Object) list));
         assertThat(bar.getGenericReturnType(), instanceOf(Class.class));
         assertThat(bar.getGenericParameterTypes()[0], instanceOf(Class.class));
         assertThat(bar.getGenericExceptionTypes()[0], instanceOf(Class.class));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/DefaultMethodCallTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/DefaultMethodCallTest.java
index 242f97bab0..27a08ef81f 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/DefaultMethodCallTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/DefaultMethodCallTest.java
@@ -46,7 +46,7 @@ public void testUnambiguousDefaultMethod() throws Exception {
                 Class.forName(SINGLE_DEFAULT_METHOD));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
@@ -84,7 +84,7 @@ private void assertConflictChoice(Class<?> preferredInterface,
                 preferredInterface, secondInterface);
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is(expectedResult));
     }
 
@@ -126,7 +126,7 @@ public void testDeclaredAndImplementedMethod() throws Exception {
                 Class.forName(SINGLE_DEFAULT_METHOD));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
@@ -150,7 +150,7 @@ public void testDeclaredAndImplementedAmbiguousMethodWithPreference() throws Exc
                 Class.forName(SINGLE_DEFAULT_METHOD), Class.forName(CONFLICTING_INTERFACE));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ExceptionMethodTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ExceptionMethodTest.java
index e1d2e1e87c..36fd179047 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ExceptionMethodTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ExceptionMethodTest.java
@@ -23,7 +23,7 @@ public void testWithoutMessage() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         try {
@@ -42,7 +42,7 @@ public void testWithMessage() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         try {
@@ -61,7 +61,7 @@ public void testWithNonDeclaredCheckedException() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         try {
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorNonBeanTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorNonBeanTest.java
index fc91fa88e0..9e519388fd 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorNonBeanTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorNonBeanTest.java
@@ -20,7 +20,7 @@
     @Test
     public void testExplicitNameSetter() throws Exception {
         DynamicType.Loaded<SampleSetter> loaded = implement(SampleSetter.class, FieldAccessor.ofField(FOO));
-        SampleSetter sampleSetter = loaded.getLoaded().getConstructor().newInstance();
+        SampleSetter sampleSetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = SampleSetter.class.getDeclaredField(FOO);
         field.setAccessible(true);
         assertThat(field.get(sampleSetter), is((Object) STRING_DEFAULT_VALUE));
@@ -32,7 +32,7 @@ public void testExplicitNameSetter() throws Exception {
     @Test
     public void testExplicitNameGetter() throws Exception {
         DynamicType.Loaded<SampleGetter> loaded = implement(SampleGetter.class, FieldAccessor.ofField(FOO));
-        SampleGetter sampleGetter = loaded.getLoaded().getConstructor().newInstance();
+        SampleGetter sampleGetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = SampleGetter.class.getDeclaredField(FOO);
         field.setAccessible(true);
         assertThat(field.get(sampleGetter), is((Object) STRING_VALUE));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorTest.java
index 3cf03d102f..188bbf0d86 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorTest.java
@@ -193,7 +193,7 @@ public void testDefineFieldSetter() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(definesField ? 1 : 0));
-        Z instance = loaded.getLoaded().getConstructor().newInstance();
+        Z instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         if (definesField) {
             initializeField(instance);
         }
@@ -214,7 +214,7 @@ public void testDefineFieldSetter() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(definesField ? 1 : 0));
-        Z instance = loaded.getLoaded().getConstructor().newInstance();
+        Z instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(target)));
         assertThat(instance, instanceOf(target));
         Method setter = loaded.getLoaded()
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueConstantPoolTypesTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueConstantPoolTypesTest.java
index 58bda69553..2b5624154f 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueConstantPoolTypesTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueConstantPoolTypesTest.java
@@ -86,7 +86,7 @@ public void testConstantPool() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(2));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(StringTarget.class)));
         assertThat(instance, instanceOf(helperClass));
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO).invoke(instance), is(fixedValue));
@@ -100,7 +100,7 @@ public void testStaticField() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(2));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(fixedValue == null ? 0 : 1));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(StringTarget.class)));
         assertThat(instance, instanceOf(helperClass));
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO).invoke(instance), is(fixedValue));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueTest.java
index aac9460641..49905eb61a 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FixedValueTest.java
@@ -44,14 +44,14 @@ public void setUp() throws Exception {
     public void testTypeDescriptionConstantPool() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(TypeDescription.OBJECT)).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(qux.getConstructor().newInstance().bar(), is((Object) Object.class));
+        assertThat(qux.getDeclaredConstructor().newInstance().bar(), is((Object) Object.class));
     }
 
     @Test
     public void testClassConstantPool() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(Object.class)).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(qux.getConstructor().newInstance().bar(), is((Object) Object.class));
+        assertThat(qux.getDeclaredConstructor().newInstance().bar(), is((Object) Object.class));
     }
 
     @Test
@@ -59,7 +59,7 @@ public void testClassConstantPool() throws Exception {
     public void testMethodTypeConstantPool() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(JavaConstant.MethodType.of(void.class, Object.class))).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(qux.getConstructor().newInstance().bar(), is(makeMethodType(void.class, Object.class)));
+        assertThat(qux.getDeclaredConstructor().newInstance().bar(), is(makeMethodType(void.class, Object.class)));
     }
 
     @Test
@@ -67,7 +67,7 @@ public void testMethodTypeConstantPool() throws Exception {
     public void testMethodTypeConstantPoolValue() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(makeMethodType(void.class, Object.class))).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(qux.getConstructor().newInstance().bar(), is(makeMethodType(void.class, Object.class)));
+        assertThat(qux.getDeclaredConstructor().newInstance().bar(), is(makeMethodType(void.class, Object.class)));
     }
 
     @Test
@@ -75,7 +75,7 @@ public void testMethodTypeConstantPoolValue() throws Exception {
     public void testMethodHandleConstantPool() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(JavaConstant.MethodHandle.of(Qux.class.getDeclaredMethod("bar")))).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(JavaConstant.MethodHandle.ofLoaded(qux.getConstructor().newInstance().bar()), is(JavaConstant.MethodHandle.ofLoaded(makeMethodHandle())));
+        assertThat(JavaConstant.MethodHandle.ofLoaded(qux.getDeclaredConstructor().newInstance().bar()), is(JavaConstant.MethodHandle.ofLoaded(makeMethodHandle())));
     }
 
     @Test
@@ -83,7 +83,7 @@ public void testMethodHandleConstantPool() throws Exception {
     public void testMethodHandleConstantPoolValue() throws Exception {
         Class<? extends Qux> qux = implement(Qux.class, FixedValue.value(makeMethodHandle())).getLoaded();
         assertThat(qux.getDeclaredFields().length, is(0));
-        assertThat(JavaConstant.MethodHandle.ofLoaded(qux.getConstructor().newInstance().bar()), is(JavaConstant.MethodHandle.ofLoaded(makeMethodHandle())));
+        assertThat(JavaConstant.MethodHandle.ofLoaded(qux.getDeclaredConstructor().newInstance().bar()), is(JavaConstant.MethodHandle.ofLoaded(makeMethodHandle())));
     }
 
     @Test
@@ -101,7 +101,7 @@ public void testNullValue() throws Exception {
         Class<?> type = implement(Foo.class, FixedValue.nullValue()).getLoaded();
         assertThat(type.getDeclaredFields().length, is(0));
         assertThat(type.getDeclaredMethods().length, is(1));
-        assertThat(type.getDeclaredMethod(BAR).invoke(type.getConstructor().newInstance()), nullValue(Object.class));
+        assertThat(type.getDeclaredMethod(BAR).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
     }
 
     @Test
@@ -109,7 +109,7 @@ public void testOriginType() throws Exception {
         Class<?> type = implement(Baz.class, FixedValue.originType()).getLoaded();
         assertThat(type.getDeclaredFields().length, is(0));
         assertThat(type.getDeclaredMethods().length, is(1));
-        assertThat(type.getDeclaredMethod(BAR).invoke(type.getConstructor().newInstance()), is((Object) Baz.class));
+        assertThat(type.getDeclaredMethod(BAR).invoke(type.getDeclaredConstructor().newInstance()), is((Object) Baz.class));
     }
 
     @Test
@@ -153,7 +153,7 @@ private void assertType(DynamicType.Loaded<Foo> loaded) throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         assertThat((Bar) loaded.getLoaded().getDeclaredMethod(BAR).invoke(instance), is(bar));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ForwardingTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ForwardingTest.java
index 92d1357867..cbd7d3d1c9 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ForwardingTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/ForwardingTest.java
@@ -23,7 +23,7 @@ public void testStaticInstanceForwarding() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
@@ -35,7 +35,7 @@ public void testInstanceFieldForwarding() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = loaded.getLoaded().getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(instance, new Bar());
@@ -50,7 +50,7 @@ public void testStaticFieldForwarding() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = loaded.getLoaded().getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(null, new Bar());
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvocationHandlerAdapterTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvocationHandlerAdapterTest.java
index dee50a814c..e2f9d0dce9 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvocationHandlerAdapterTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvocationHandlerAdapterTest.java
@@ -29,7 +29,7 @@ public void testStaticAdapterWithoutCache() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.bar(FOO), is((Object) instance));
         assertThat(foo.methods.size(), is(1));
         assertThat(instance.bar(FOO), is((Object) instance));
@@ -45,7 +45,7 @@ public void testStaticAdapterWithoutCacheForPrimitiveValue() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        Baz instance = loaded.getLoaded().getConstructor().newInstance();
+        Baz instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.bar(BAZ), is(BAZ * 2L));
         instance.assertZeroCalls();
     }
@@ -57,7 +57,7 @@ public void testStaticAdapterWithMethodCache() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(2));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.bar(FOO), is((Object) instance));
         assertThat(foo.methods.size(), is(1));
         assertThat(instance.bar(FOO), is((Object) instance));
@@ -75,7 +75,7 @@ public void testInstanceAdapterWithoutCache() throws Exception {
         Field field = loaded.getLoaded().getDeclaredField(QUX);
         assertThat(field.getModifiers(), is(Modifier.PUBLIC | Opcodes.ACC_SYNTHETIC));
         field.setAccessible(true);
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Foo foo = new Foo();
         field.set(instance, foo);
         assertThat(instance.bar(FOO), is((Object) instance));
@@ -95,7 +95,7 @@ public void testInstanceAdapterWithMethodCache() throws Exception {
         Field field = loaded.getLoaded().getDeclaredField(QUX);
         assertThat(field.getModifiers(), is(Modifier.PUBLIC | Opcodes.ACC_SYNTHETIC));
         field.setAccessible(true);
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Foo foo = new Foo();
         field.set(instance, foo);
         assertThat(instance.bar(FOO), is((Object) instance));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvokeDynamicTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvokeDynamicTest.java
index 36f42090fe..5cd6ff6993 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvokeDynamicTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/InvokeDynamicTest.java
@@ -85,7 +85,7 @@ public void testBootstrapMethod() throws Exception {
                     InvokeDynamic.bootstrap(method).withoutArguments(),
                     getClass().getClassLoader(),
                     isDeclaredBy(Simple.class));
-            assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+            assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         }
     }
 
@@ -97,7 +97,7 @@ public void testBootstrapConstructor() throws Exception {
                     InvokeDynamic.bootstrap(constructor).withoutArguments(),
                     getClass().getClassLoader(),
                     isDeclaredBy(Simple.class));
-            assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+            assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         }
     }
 
@@ -113,7 +113,7 @@ public void testBootstrapWithArrayArgumentsWithoutArguments() throws Exception {
                         .withoutArguments(),
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         Object[] arguments = (Object[]) field.get(null);
         assertThat(arguments.length, is(0));
     }
@@ -131,7 +131,7 @@ public void testBootstrapWithArrayArgumentsWithArguments() throws Exception {
                         .withoutArguments(),
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         Object[] arguments = (Object[]) field.get(null);
         assertThat(arguments.length, is(8));
         assertThat(arguments[0], is((Object) INTEGER));
@@ -157,7 +157,7 @@ public void testBootstrapWithExplicitArgumentsWithArguments() throws Exception {
                         .withoutArguments(),
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         Object[] arguments = (Object[]) field.get(null);
         assertThat(arguments.length, is(8));
         assertThat(arguments[0], is((Object) INTEGER));
@@ -199,7 +199,7 @@ public void testBootstrapOfMethodsWithParametersPrimitive() throws Exception {
                         .withValue(FOO, CLASS, makeEnum(), makeMethodType(CLASS), makeMethodHandle(), value),
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(),
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(),
                 is("" + BOOLEAN + BYTE + SHORT + CHARACTER + INTEGER + LONG + FLOAT + DOUBLE + CLASS + makeEnum() + makeMethodType(CLASS)
                         + makeMethodHandle() + FOO + CLASS + makeEnum() + makeMethodType(CLASS) + makeMethodHandle() + value));
     }
@@ -218,7 +218,7 @@ public void testBootstrapOfMethodsWithParametersWrapperConstantPool() throws Exc
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(1));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(),
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(),
                 is("" + BOOLEAN + BYTE + SHORT + CHARACTER + INTEGER + LONG + FLOAT + DOUBLE + FOO + CLASS + makeEnum()
                         + makeMethodType(CLASS) + makeMethodHandle() + value));
     }
@@ -238,7 +238,7 @@ public void testBootstrapOfMethodsWithParametersWrapperReference() throws Except
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(14));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(),
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(),
                 is("" + BOOLEAN + BYTE + SHORT + CHARACTER + INTEGER + LONG + FLOAT + DOUBLE + FOO + CLASS + makeEnum()
                         + makeMethodType(CLASS) + makeMethodHandle() + value));
     }
@@ -255,7 +255,7 @@ public void testBootstrapWithFieldCreation() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(1));
-        Simple instance = dynamicType.getLoaded().getConstructor().newInstance();
+        Simple instance = dynamicType.getLoaded().getDeclaredConstructor().newInstance();
         Field field = dynamicType.getLoaded().getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(instance, FOO);
@@ -274,7 +274,7 @@ public void testBootstrapWithFieldUse() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(SimpleWithField.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        SimpleWithField instance = dynamicType.getLoaded().getConstructor().newInstance();
+        SimpleWithField instance = dynamicType.getLoaded().getDeclaredConstructor().newInstance();
         Field field = SimpleWithField.class.getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(instance, FOO);
@@ -306,7 +306,7 @@ public void testBootstrapWithNullValue() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), nullValue(String.class));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), nullValue(String.class));
     }
 
     @Test
@@ -321,7 +321,7 @@ public void testBootstrapWithThisValue() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(Simple.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        Simple simple = dynamicType.getLoaded().getConstructor().newInstance();
+        Simple simple = dynamicType.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(simple.foo(), is(simple.toString()));
     }
 
@@ -337,7 +337,7 @@ public void testBootstrapWithArgument() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(SimpleWithArgument.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(FOO), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(FOO), is(FOO));
     }
 
     @Test(expected = IllegalArgumentException.class)
@@ -376,7 +376,7 @@ public void testChainedInvocation() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(SimpleWithArgument.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(FOO), is(BAZ));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(FOO), is(BAZ));
     }
 
     @Test
@@ -391,7 +391,7 @@ public void testBootstrapWithImplicitArgument() throws Exception {
                 getClass().getClassLoader(),
                 isDeclaredBy(SimpleWithArgument.class));
         assertThat(dynamicType.getLoaded().getDeclaredFields().length, is(0));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(FOO), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(FOO), is(FOO));
     }
 
     @SuppressWarnings("unchecked")
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTest.java
index a86cb92b10..0c5ba9b29a 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTest.java
@@ -78,7 +78,7 @@ public void testStaticMethodInvocationWithoutArguments() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SimpleMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
         assertThat(instance, instanceOf(SimpleMethod.class));
@@ -93,7 +93,7 @@ public void testExternalStaticMethodInvocationWithoutArguments() throws Exceptio
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SimpleMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
         assertThat(instance, instanceOf(SimpleMethod.class));
@@ -108,7 +108,7 @@ public void testInstanceMethodInvocationWithoutArguments() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        InstanceMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        InstanceMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(InstanceMethod.class)));
         assertThat(instance, instanceOf(InstanceMethod.class));
@@ -131,7 +131,7 @@ public void testInvokeOnArgument() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        ArgumentCall instance = loaded.getLoaded().getConstructor().newInstance();
+        ArgumentCall instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(new ArgumentCall.Target(BAR)), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(InstanceMethod.class)));
         assertThat(instance, instanceOf(ArgumentCall.class));
@@ -157,7 +157,7 @@ public void testInvokeOnArgumentDynamic() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        ArgumentCallDynamic instance = loaded.getLoaded().getConstructor().newInstance();
+        ArgumentCallDynamic instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(new ArgumentCallDynamic.Target(BAR)), is(BAR));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(InstanceMethod.class)));
         assertThat(instance, instanceOf(ArgumentCallDynamic.class));
@@ -173,7 +173,7 @@ public void testSuperConstructorInvocationWithoutArguments() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(0));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Object.class)));
         assertThat(instance, instanceOf(Object.class));
     }
@@ -186,7 +186,7 @@ public void testObjectConstruction() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SelfReference instance = loaded.getLoaded().getConstructor().newInstance();
+        SelfReference instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         SelfReference created = instance.foo();
         assertThat(created.getClass(), CoreMatchers.<Class<?>>is(SelfReference.class));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SelfReference.class)));
@@ -205,7 +205,7 @@ public void testSuperInvocation() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SuperMethodInvocation instance = loaded.getLoaded().getConstructor().newInstance();
+        SuperMethodInvocation instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SuperMethodInvocation.class)));
         assertThat(instance, instanceOf(SuperMethodInvocation.class));
         assertThat(instance.foo(), is(FOO));
@@ -220,7 +220,7 @@ public void testWithExplicitArgumentConstantPool() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithExplicitArgument instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithExplicitArgument.class)));
         assertThat(instance, instanceOf(MethodCallWithExplicitArgument.class));
         assertThat(instance.foo(BAR), is(FOO));
@@ -241,7 +241,7 @@ public void testWithExplicitArgumentField() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        MethodCallWithExplicitArgument instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithExplicitArgument.class)));
         assertThat(instance, instanceOf(MethodCallWithExplicitArgument.class));
         assertThat(instance.foo(BAR), is(FOO));
@@ -262,7 +262,7 @@ public void testWithArgument() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithExplicitArgument instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithExplicitArgument.class)));
         assertThat(instance, instanceOf(MethodCallWithExplicitArgument.class));
         assertThat(instance.foo(BAR), is(BAR));
@@ -277,7 +277,7 @@ public void testWithAllArguments() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithExplicitArgument instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithExplicitArgument.class)));
         assertThat(instance, instanceOf(MethodCallWithExplicitArgument.class));
         assertThat(instance.foo(BAR), is(BAR));
@@ -292,7 +292,7 @@ public void testWithAllArgumentsTwoArguments() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithTwoExplicitArguments instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithTwoExplicitArguments instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithTwoExplicitArguments.class)));
         assertThat(instance, instanceOf(MethodCallWithTwoExplicitArguments.class));
         assertThat(instance.foo(FOO, BAR), is(FOO + BAR));
@@ -307,7 +307,7 @@ public void testWithInstanceField() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        MethodCallWithExplicitArgument instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = instance.getClass().getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(instance, FOO);
@@ -335,7 +335,7 @@ public void testWithField() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithField instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithField.class)));
         assertThat(instance, instanceOf(MethodCallWithField.class));
@@ -361,7 +361,7 @@ public void testWithFieldHierarchyVisibility() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, String.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        InvisibleMethodCallWithField instance = loaded.getLoaded().getConstructor().newInstance();
+        InvisibleMethodCallWithField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         ((InvisibleBase) instance).foo = FOO;
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(InvisibleMethodCallWithField.class)));
         assertThat(instance, instanceOf(InvisibleMethodCallWithField.class));
@@ -377,7 +377,7 @@ public void testWithThis() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, MethodCallWithThis.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithThis instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithThis instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithThis.class)));
         assertThat(instance, instanceOf(MethodCallWithThis.class));
         assertThat(instance.foo(null), is(instance));
@@ -392,7 +392,7 @@ public void testWithOwnType() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, Class.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallWithOwnType instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallWithOwnType instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallWithThis.class)));
         assertThat(instance, instanceOf(MethodCallWithOwnType.class));
         assertThat(instance.foo(null), CoreMatchers.<Class<?>>is(loaded.getLoaded()));
@@ -407,7 +407,7 @@ public void testImplementationAppendingMethod() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallAppending instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallAppending instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallAppending.class)));
         assertThat(instance, instanceOf(MethodCallAppending.class));
         assertThat(instance.foo(), is((Object) FOO));
@@ -424,7 +424,7 @@ public void testImplementationAppendingConstructor() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        MethodCallAppending instance = loaded.getLoaded().getConstructor().newInstance();
+        MethodCallAppending instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(MethodCallAppending.class)));
         assertThat(instance, instanceOf(MethodCallAppending.class));
         assertThat(instance.foo(), is((Object) FOO));
@@ -441,7 +441,7 @@ public void testWithExplicitTarget() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        ExplicitTarget instance = loaded.getLoaded().getConstructor().newInstance();
+        ExplicitTarget instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(ExplicitTarget.class)));
         assertThat(instance, instanceOf(ExplicitTarget.class));
         assertThat(instance.foo(), is(target.toString()));
@@ -457,7 +457,7 @@ public void testWithFieldTarget() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        ExplicitTarget instance = loaded.getLoaded().getConstructor().newInstance();
+        ExplicitTarget instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = loaded.getLoaded().getDeclaredField(FOO);
         field.setAccessible(true);
         field.set(instance, target);
@@ -476,7 +476,7 @@ public void testUnloadedType() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SimpleMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is("" + Object.class + String.class));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
         assertThat(instance, instanceOf(SimpleMethod.class));
@@ -493,7 +493,7 @@ public void testJava7Types() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SimpleMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is("" + makeMethodHandle() + makeMethodType(void.class)));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
         assertThat(instance, instanceOf(SimpleMethod.class));
@@ -510,7 +510,7 @@ public void testJava7TypesExplicit() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        SimpleMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is("" + makeMethodHandle() + makeMethodType(void.class)));
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
         assertThat(instance, instanceOf(SimpleMethod.class));
@@ -526,7 +526,7 @@ public void testDefaultMethod() throws Exception {
                 Class.forName(SINGLE_DEFAULT_METHOD));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
@@ -534,7 +534,7 @@ public void testDefaultMethod() throws Exception {
     public void testCallable() throws Exception {
         Traceable traceable = new Traceable();
         Class<? extends SimpleStringMethod> loaded = implement(SimpleStringMethod.class, MethodCall.call(traceable)).getLoaded();
-        assertThat(loaded.getConstructor().newInstance().foo(), is(FOO));
+        assertThat(loaded.getDeclaredConstructor().newInstance().foo(), is(FOO));
         traceable.assertOnlyCall(FOO);
     }
 
@@ -542,7 +542,7 @@ public void testCallable() throws Exception {
     public void testRunnable() throws Exception {
         Traceable traceable = new Traceable();
         Class<? extends SimpleStringMethod> loaded = implement(SimpleStringMethod.class, MethodCall.run(traceable)).getLoaded();
-        assertThat(loaded.getConstructor().newInstance().foo(), nullValue(String.class));
+        assertThat(loaded.getDeclaredConstructor().newInstance().foo(), nullValue(String.class));
         traceable.assertOnlyCall(FOO);
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTypeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTypeTest.java
index c31dcd12df..30ee596e52 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTypeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodCallTypeTest.java
@@ -105,7 +105,7 @@ public void testFieldConstantPool() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, Object.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(definesFieldConstantPool ? 1 : 0));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         assertThat(instance.foo(new Object()), is(value));
@@ -119,7 +119,7 @@ public void testFieldReference() throws Exception {
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, Object.class), not(nullValue(Method.class)));
         assertThat(loaded.getLoaded().getDeclaredConstructors().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(definesFieldReference ? 1 : 0));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         assertThat(instance.foo(new Object()), sameInstance(value));
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationAllArgumentsTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationAllArgumentsTest.java
index 2e3115e352..7489b8747b 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationAllArgumentsTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationAllArgumentsTest.java
@@ -16,7 +16,7 @@
     @Test
     public void testStrictBindable() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOO, BAR), is((Object) (QUX + FOO + BAR)));
     }
 
@@ -28,14 +28,14 @@ public void testStrictNonBindableThrowsException() throws Exception {
     @Test
     public void testSlackNonBindable() throws Exception {
         DynamicType.Loaded<Qux> loaded = implement(Qux.class, MethodDelegation.to(BazSlack.class));
-        Qux instance = loaded.getLoaded().getConstructor().newInstance();
+        Qux instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOOBAR, BAZ), is((Object) (QUX + BAZ)));
     }
 
     @Test
     public void testIncludeSelf() throws Exception {
         DynamicType.Loaded<Qux> loaded = implement(Qux.class, MethodDelegation.to(IncludeSelf.class));
-        Qux instance = loaded.getLoaded().getConstructor().newInstance();
+        Qux instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(QUX, BAZ), is((Object) instance));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationArgumentTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationArgumentTest.java
index 5a88fe35e0..ac4bdc1f26 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationArgumentTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationArgumentTest.java
@@ -19,7 +19,7 @@
     @Test
     public void testArgument() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOO, BAR), is((Object) (QUX + FOO + BAR)));
     }
 
@@ -32,7 +32,7 @@ public void testHierarchyDelegation() throws Exception {
                 .make()
                 .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo();
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationBindingPriorityTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationBindingPriorityTest.java
index 84bd837570..8df38d4626 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationBindingPriorityTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationBindingPriorityTest.java
@@ -16,7 +16,7 @@
     @Test
     public void testBindingPriority() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(FOO));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationChainedTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationChainedTest.java
index 01cf9bd0b0..17d1a60143 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationChainedTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationChainedTest.java
@@ -19,7 +19,7 @@ public void testChainingVoid() throws Exception {
         DynamicType.Loaded<Foo> dynamicType = implement(Foo.class, MethodDelegation.to(voidInterceptor)
                 .filter(isDeclaredBy(VoidInterceptor.class))
                 .andThen(new Implementation.Simple(new TextConstant(FOO), MethodReturn.REFERENCE)));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         assertThat(voidInterceptor.intercepted, is(true));
     }
 
@@ -29,7 +29,7 @@ public void testChainingNonVoid() throws Exception {
         DynamicType.Loaded<Foo> dynamicType = implement(Foo.class, MethodDelegation.to(nonVoidInterceptor)
                 .filter(isDeclaredBy(NonVoidInterceptor.class))
                 .andThen(new Implementation.Simple(new TextConstant(FOO), MethodReturn.REFERENCE)));
-        assertThat(dynamicType.getLoaded().getConstructor().newInstance().foo(), is(FOO));
+        assertThat(dynamicType.getLoaded().getDeclaredConstructor().newInstance().foo(), is(FOO));
         assertThat(nonVoidInterceptor.intercepted, is(true));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationCheckedExceptionTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationCheckedExceptionTest.java
index 143032e576..d1ed42fd11 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationCheckedExceptionTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationCheckedExceptionTest.java
@@ -8,7 +8,7 @@
     public void testUndeclaredCheckedException() throws Exception {
         implement(Foo.class, MethodDelegation.to(Foo.class))
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .bar();
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationConstructionTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationConstructionTest.java
index 0f90dd8d1e..7e31e7624b 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationConstructionTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationConstructionTest.java
@@ -96,7 +96,7 @@ public void testConstruction() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(sourceType)));
         assertThat(instance, instanceOf(sourceType));
         Object value = loaded.getLoaded().getDeclaredMethod(FOO, parameterTypes).invoke(instance, arguments);
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultCallTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultCallTest.java
index ce61ac6a04..4702a1f6c3 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultCallTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultCallTest.java
@@ -40,7 +40,7 @@ public void testRunnableDefaultCall() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) QUX));
     }
@@ -53,7 +53,7 @@ public void testCallableDefaultCall() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) FOO));
     }
@@ -76,7 +76,7 @@ public void testExplicitDefaultCall() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD), Class.forName(CONFLICTING_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) FOO));
     }
@@ -89,7 +89,7 @@ public void testExplicitDefaultCallToOtherInterface() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD), Class.forName(CONFLICTING_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) QUX));
     }
@@ -112,7 +112,7 @@ public void testSerializableProxy() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) FOO));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultTest.java
index 44783c917a..80b956ab23 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationDefaultTest.java
@@ -34,7 +34,7 @@ public void testDefaultInterface() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(DEFAULT_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass().getDeclaredMethod(FOO).invoke(instance), is((Object) (FOO + BAR)));
     }
 
@@ -46,7 +46,7 @@ public void testNoDefaultInterface() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 DelegationNoDefaultInterface.class);
-        DelegationNoDefaultInterface instance = (DelegationNoDefaultInterface) loaded.getLoaded().getConstructor().newInstance();
+        DelegationNoDefaultInterface instance = (DelegationNoDefaultInterface) loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo();
     }
 
@@ -58,7 +58,7 @@ public void testDefaultInterfaceSerializableProxy() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(DEFAULT_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass().getDeclaredMethod(FOO).invoke(instance), is((Object) (FOO + BAR)));
     }
 
@@ -70,7 +70,7 @@ public void testDefaultInterfaceExplicitProxyType() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(DEFAULT_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass().getDeclaredMethod(FOO).invoke(instance), is((Object) (FOO + BAR)));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldProxyTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldProxyTest.java
index 903a82465a..15c076e87e 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldProxyTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldProxyTest.java
@@ -24,7 +24,7 @@ public void setUp() throws Exception {
     public void testExplicitFieldAccess() throws Exception {
         DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(Swap.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        Explicit explicit = loaded.getLoaded().getConstructor().newInstance();
+        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(explicit.foo, is(FOO));
         explicit.swap();
         assertThat(explicit.foo, is(FOO + BAR));
@@ -34,7 +34,7 @@ public void testExplicitFieldAccess() throws Exception {
     public void testExplicitFieldAccessSerializable() throws Exception {
         DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapSerializable.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        Explicit explicit = loaded.getLoaded().getConstructor().newInstance();
+        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(explicit.foo, is(FOO));
         explicit.swap();
         assertThat(explicit.foo, is(FOO + BAR));
@@ -44,7 +44,7 @@ public void testExplicitFieldAccessSerializable() throws Exception {
     public void testExplicitFieldAccessStatic() throws Exception {
         DynamicType.Loaded<ExplicitStatic> loaded = implement(ExplicitStatic.class, MethodDelegation.to(Swap.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        ExplicitStatic explicit = loaded.getLoaded().getConstructor().newInstance();
+        ExplicitStatic explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(ExplicitStatic.foo, is(FOO));
         explicit.swap();
         assertThat(ExplicitStatic.foo, is(FOO + BAR));
@@ -54,7 +54,7 @@ public void testExplicitFieldAccessStatic() throws Exception {
     public void testImplicitFieldGetterAccess() throws Exception {
         DynamicType.Loaded<ImplicitGetter> loaded = implement(ImplicitGetter.class, MethodDelegation.to(GetInterceptor.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        ImplicitGetter implicitGetter = loaded.getLoaded().getConstructor().newInstance();
+        ImplicitGetter implicitGetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(implicitGetter.foo, is(FOO));
         assertThat(implicitGetter.getFoo(), is(FOO + BAR));
         assertThat(implicitGetter.foo, is(FOO + BAR));
@@ -64,7 +64,7 @@ public void testImplicitFieldGetterAccess() throws Exception {
     public void testImplicitFieldSetterAccess() throws Exception {
         DynamicType.Loaded<ImplicitSetter> loaded = implement(ImplicitSetter.class, MethodDelegation.to(SetInterceptor.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        ImplicitSetter implicitSetter = loaded.getLoaded().getConstructor().newInstance();
+        ImplicitSetter implicitSetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(implicitSetter.foo, is(FOO));
         implicitSetter.setFoo(BAR);
         assertThat(implicitSetter.foo, is(FOO + BAR));
@@ -74,7 +74,7 @@ public void testImplicitFieldSetterAccess() throws Exception {
     public void testExplicitFieldAccessImplicitTarget() throws Exception {
         DynamicType.Loaded<ExplicitInherited> loaded = implement(ExplicitInherited.class, MethodDelegation.to(Swap.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        ExplicitInherited explicitInherited = loaded.getLoaded().getConstructor().newInstance();
+        ExplicitInherited explicitInherited = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(((Explicit) explicitInherited).foo, is(FOO));
         assertThat(explicitInherited.foo, is(QUX));
         explicitInherited.swap();
@@ -86,7 +86,7 @@ public void testExplicitFieldAccessImplicitTarget() throws Exception {
     public void testExplicitFieldAccessExplicitTarget() throws Exception {
         DynamicType.Loaded<ExplicitInherited> loaded = implement(ExplicitInherited.class, MethodDelegation.to(SwapInherited.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        ExplicitInherited explicitInherited = loaded.getLoaded().getConstructor().newInstance();
+        ExplicitInherited explicitInherited = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(((Explicit) explicitInherited).foo, is(FOO));
         assertThat(explicitInherited.foo, is(QUX));
         explicitInherited.swap();
@@ -98,7 +98,7 @@ public void testExplicitFieldAccessExplicitTarget() throws Exception {
     public void testIncompatibleGetterTypeThrowsException() throws Exception {
         DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(GetterIncompatible.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        Explicit explicit = loaded.getLoaded().getConstructor().newInstance();
+        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
         explicit.swap();
     }
 
@@ -106,7 +106,7 @@ public void testIncompatibleGetterTypeThrowsException() throws Exception {
     public void testIncompatibleSetterTypeThrowsException() throws Exception {
         DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SetterIncompatible.class)
                 .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
-        Explicit explicit = loaded.getLoaded().getConstructor().newInstance();
+        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
         explicit.swap();
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldValueTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldValueTest.java
index 5e95def2c6..fa7fec09ae 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldValueTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationFieldValueTest.java
@@ -15,7 +15,7 @@
     @Test
     public void testLegalFieldAccess() throws Exception {
         DynamicType.Loaded<SimpleField> loaded = implement(SimpleField.class, MethodDelegation.to(SimpleInterceptor.class));
-        SimpleField instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         instance.foo = BAR;
@@ -25,7 +25,7 @@ public void testLegalFieldAccess() throws Exception {
     @Test
     public void testLegalFieldAccessStatic() throws Exception {
         DynamicType.Loaded<SimpleStaticField> loaded = implement(SimpleStaticField.class, MethodDelegation.to(SimpleInterceptor.class));
-        SimpleStaticField instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleStaticField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         SimpleStaticField.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         SimpleStaticField.foo = BAR;
@@ -40,7 +40,7 @@ public void testNonAssignableFieldAccess() throws Exception {
     @Test
     public void testLegalFieldAccessDynamicTyping() throws Exception {
         DynamicType.Loaded<SimpleStaticField> loaded = implement(SimpleStaticField.class, MethodDelegation.to(DynamicInterceptor.class));
-        SimpleStaticField instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleStaticField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         SimpleStaticField.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         SimpleStaticField.foo = BAR;
@@ -50,7 +50,7 @@ public void testLegalFieldAccessDynamicTyping() throws Exception {
     @Test
     public void testExtendedFieldMostSpecific() throws Exception {
         DynamicType.Loaded<ExtendedField> loaded = implement(ExtendedField.class, MethodDelegation.to(SimpleInterceptor.class));
-        ExtendedField instance = loaded.getLoaded().getConstructor().newInstance();
+        ExtendedField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         instance.foo = BAR;
@@ -60,7 +60,7 @@ public void testExtendedFieldMostSpecific() throws Exception {
     @Test
     public void testExtendedFieldSkipsNonVisible() throws Exception {
         DynamicType.Loaded<ExtendedPrivateField> loaded = implement(ExtendedPrivateField.class, MethodDelegation.to(SimpleInterceptor.class));
-        SimpleField instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         instance.foo = BAR;
@@ -70,7 +70,7 @@ public void testExtendedFieldSkipsNonVisible() throws Exception {
     @Test
     public void testExtendedFieldExplicitType() throws Exception {
         DynamicType.Loaded<ExtendedField> loaded = implement(ExtendedField.class, MethodDelegation.to(ExplicitInterceptor.class));
-        SimpleField instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.foo(), is((Object) FOO));
         instance.foo = BAR;
@@ -80,7 +80,7 @@ public void testExtendedFieldExplicitType() throws Exception {
     @Test
     public void testAccessor() throws Exception {
         DynamicType.Loaded<SimpleFieldAccessor> loaded = implement(SimpleFieldAccessor.class, MethodDelegation.to(SimpleAccessorInterceptor.class));
-        SimpleFieldAccessor instance = loaded.getLoaded().getConstructor().newInstance();
+        SimpleFieldAccessor instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo = FOO;
         assertThat(instance.getFoo(), is((Object) FOO));
         instance.foo = BAR;
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationIgnoreForBindingTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationIgnoreForBindingTest.java
index 26ca9cc219..bf030e336c 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationIgnoreForBindingTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationIgnoreForBindingTest.java
@@ -14,7 +14,7 @@
     @Test
     public void testIgnoreForBinding() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(FOO));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationMorphTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationMorphTest.java
index 398690bccd..4de9740627 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationMorphTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationMorphTest.java
@@ -35,7 +35,7 @@
     public void testMorph() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new SimpleMorph(QUX))
                 .appendParameterBinder(Morph.Binder.install(Morphing.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOO), is(QUX + BAR));
     }
 
@@ -44,7 +44,7 @@ public void testMorphVoid() throws Exception {
         SimpleMorph simpleMorph = new SimpleMorph(QUX);
         DynamicType.Loaded<Bar> loaded = implement(Bar.class, MethodDelegation.to(simpleMorph)
                 .appendParameterBinder(Morph.Binder.install(Morphing.class)));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo();
         instance.assertOnlyCall(FOO);
         simpleMorph.assertOnlyCall(BAR);
@@ -54,7 +54,7 @@ public void testMorphVoid() throws Exception {
     public void testMorphPrimitive() throws Exception {
         DynamicType.Loaded<Qux> loaded = implement(Qux.class, MethodDelegation.to(new PrimitiveMorph(BAZ))
                 .appendParameterBinder(Morph.Binder.install(Morphing.class)));
-        Qux instance = loaded.getLoaded().getConstructor().newInstance();
+        Qux instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(0), is(BAZ * 2L));
     }
 
@@ -62,7 +62,7 @@ public void testMorphPrimitive() throws Exception {
     public void testMorphSerializable() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(SimpleMorphSerializable.class)
                 .appendParameterBinder(Morph.Binder.install(Morphing.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOO), is(QUX + BAR));
     }
 
@@ -76,7 +76,7 @@ public void testMorphIllegal() throws Exception {
     public void testMorphToIncompatibleTypeThrowsException() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new SimpleMorph(new Object()))
                 .appendParameterBinder(Morph.Binder.install(Morphing.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo(QUX);
     }
 
@@ -114,7 +114,7 @@ public void testDefaultMethodExplicit() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(DEFAULT_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass().getDeclaredMethod(FOO, String.class)
                 .invoke(instance, QUX), is((Object) (FOO + BAR)));
     }
@@ -128,7 +128,7 @@ public void testDefaultMethodImplicit() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(DEFAULT_INTERFACE));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass().getDeclaredMethod(FOO, String.class)
                 .invoke(instance, QUX), is((Object) (FOO + BAR)));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOriginTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOriginTest.java
index f805716ce8..6aae6f23da 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOriginTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationOriginTest.java
@@ -33,7 +33,7 @@
     @Test
     public void testOriginClass() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(OriginClass.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), instanceOf(Class.class));
         assertThat(instance.foo(), is((Object) Foo.class));
     }
@@ -41,7 +41,7 @@ public void testOriginClass() throws Exception {
     @Test
     public void testOriginMethodWithoutCache() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(OriginMethod.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Object method = instance.foo();
         assertThat(method, instanceOf(Method.class));
         assertThat(method, is((Object) Foo.class.getDeclaredMethod(FOO)));
@@ -51,7 +51,7 @@ public void testOriginMethodWithoutCache() throws Exception {
     @Test
     public void testOriginMethodWithCache() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(OriginMethodWithCache.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Object method = instance.foo();
         assertThat(method, instanceOf(Method.class));
         assertThat(method, is((Object) Foo.class.getDeclaredMethod(FOO)));
@@ -66,11 +66,11 @@ public void testOriginConstructorWithoutCache() throws Exception {
                 SuperMethodCall.INSTANCE.andThen(MethodDelegation.to(originConstructor)),
                 getClass().getClassLoader(),
                 isConstructor());
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(originConstructor.constructor, instanceOf(Constructor.class));
         assertThat(originConstructor.constructor, is((Constructor) loaded.getLoaded().getDeclaredConstructor()));
         Constructor<?> previous = originConstructor.constructor;
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(originConstructor.constructor, instanceOf(Constructor.class));
         assertThat(originConstructor.constructor, is((Constructor) loaded.getLoaded().getDeclaredConstructor()));
         assertThat(originConstructor.constructor, not(sameInstance((Constructor) previous)));
@@ -84,11 +84,11 @@ public void testOriginConstructorWithCache() throws Exception {
                 SuperMethodCall.INSTANCE.andThen(MethodDelegation.to(originConstructor)),
                 getClass().getClassLoader(),
                 isConstructor());
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(originConstructor.constructor, instanceOf(Constructor.class));
         assertThat(originConstructor.constructor, is((Constructor) loaded.getLoaded().getDeclaredConstructor()));
         Constructor<?> previous = originConstructor.constructor;
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(originConstructor.constructor, instanceOf(Constructor.class));
         assertThat(originConstructor.constructor, sameInstance((Constructor) previous));
     }
@@ -96,9 +96,9 @@ public void testOriginConstructorWithCache() throws Exception {
     @Test
     @JavaVersionRule.Enforce(8)
     public void testOriginExecutableOnMethodWithoutCache() throws Exception {
-        Object origin = Class.forName(ORIGIN_EXECUTABLE).getConstructor().newInstance();
+        Object origin = Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor().newInstance();
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(origin));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Object method = instance.foo();
         assertThat(method, instanceOf(Method.class));
         assertThat(method, is((Object) Foo.class.getDeclaredMethod(FOO)));
@@ -108,9 +108,9 @@ public void testOriginExecutableOnMethodWithoutCache() throws Exception {
     @Test
     @JavaVersionRule.Enforce(8)
     public void testOriginExecutableOnMethodWithCache() throws Exception {
-        Object origin = Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor().newInstance();
+        Object origin = Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor().newInstance();
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(origin));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Object method = instance.foo();
         assertThat(method, instanceOf(Method.class));
         assertThat(method, is((Object) Foo.class.getDeclaredMethod(FOO)));
@@ -121,17 +121,17 @@ public void testOriginExecutableOnMethodWithCache() throws Exception {
     @SuppressWarnings("unchecked")
     @JavaVersionRule.Enforce(8)
     public void testOriginExecutableConstructorWithoutCache() throws Exception {
-        Object originConstructor = Class.forName(ORIGIN_EXECUTABLE).getConstructor().newInstance();
+        Object originConstructor = Class.forName(ORIGIN_EXECUTABLE).getDeclaredConstructor().newInstance();
         Field constructor = Class.forName(ORIGIN_EXECUTABLE).getDeclaredField("executable");
         DynamicType.Loaded<Foo> loaded = implement(Foo.class,
                 SuperMethodCall.INSTANCE.andThen(MethodDelegation.to(originConstructor)),
                 getClass().getClassLoader(),
                 isConstructor());
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(constructor.get(originConstructor), instanceOf(Constructor.class));
         assertThat(constructor.get(originConstructor), is((Object) loaded.getLoaded().getDeclaredConstructor()));
         Object previous = constructor.get(originConstructor);
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(constructor.get(originConstructor), instanceOf(Constructor.class));
         assertThat(constructor.get(originConstructor), is((Object) loaded.getLoaded().getDeclaredConstructor()));
         assertThat(constructor.get(originConstructor), not(sameInstance(previous)));
@@ -141,17 +141,17 @@ public void testOriginExecutableConstructorWithoutCache() throws Exception {
     @SuppressWarnings("unchecked")
     @JavaVersionRule.Enforce(8)
     public void testOriginExecutableConstructorWithCache() throws Exception {
-        Object originConstructor = Class.forName(ORIGIN_EXECUTABLE_CACHED).getConstructor().newInstance();
+        Object originConstructor = Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredConstructor().newInstance();
         Field constructor = Class.forName(ORIGIN_EXECUTABLE_CACHED).getDeclaredField("executable");
         DynamicType.Loaded<Foo> loaded = implement(Foo.class,
                 SuperMethodCall.INSTANCE.andThen(MethodDelegation.to(originConstructor)),
                 getClass().getClassLoader(),
                 isConstructor());
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(constructor.get(originConstructor), instanceOf(Constructor.class));
         assertThat(constructor.get(originConstructor), is((Object) loaded.getLoaded().getDeclaredConstructor()));
         Object previous = constructor.get(originConstructor);
-        loaded.getLoaded().getConstructor().newInstance();
+        loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(constructor.get(originConstructor), instanceOf(Constructor.class));
         assertThat(constructor.get(originConstructor), sameInstance(previous));
     }
@@ -159,7 +159,7 @@ public void testOriginExecutableConstructorWithCache() throws Exception {
     @Test
     public void testOriginString() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(OriginString.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), instanceOf(String.class));
         assertThat(instance.foo(), is((Object) Foo.class.getDeclaredMethod(FOO).toString()));
     }
@@ -169,7 +169,7 @@ public void testOriginString() throws Exception {
     public void testOriginMethodHandle() throws Throwable {
         Class<?> originMethodHandle = Class.forName(ORIGIN_METHOD_HANDLE);
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(originMethodHandle));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), instanceOf((Class<?>) originMethodHandle.getDeclaredField(TYPE).get(null)));
     }
 
@@ -178,7 +178,7 @@ public void testOriginMethodHandle() throws Throwable {
     public void testOriginMethodType() throws Throwable {
         Class<?> originMethodType = Class.forName(ORIGIN_METHOD_TYPE);
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(originMethodType));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), instanceOf((Class<?>) originMethodType.getDeclaredField(TYPE).get(null)));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationPipeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationPipeTest.java
index c340e2ee1a..a409b0b98a 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationPipeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationPipeTest.java
@@ -22,7 +22,7 @@
     public void testPipeToIdenticalType() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new ForwardingInterceptor(new Foo(FOO)))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(QUX), is(FOO + QUX));
     }
 
@@ -30,7 +30,7 @@ public void testPipeToIdenticalType() throws Exception {
     public void testPipeToIdenticalTypeVoid() throws Exception {
         DynamicType.Loaded<Qux> loaded = implement(Qux.class, MethodDelegation.to(new ForwardingInterceptor(new Qux()))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Qux instance = loaded.getLoaded().getConstructor().newInstance();
+        Qux instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo();
         instance.assertZeroCalls();
     }
@@ -39,7 +39,7 @@ public void testPipeToIdenticalTypeVoid() throws Exception {
     public void testPipeToIdenticalTypePrimitive() throws Exception {
         DynamicType.Loaded<Baz> loaded = implement(Baz.class, MethodDelegation.to(new PrimitiveForwardingInterceptor(new Baz()))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Baz instance = loaded.getLoaded().getConstructor().newInstance();
+        Baz instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(BAZ), is(BAZ * 2L));
         instance.assertZeroCalls();
     }
@@ -48,7 +48,7 @@ public void testPipeToIdenticalTypePrimitive() throws Exception {
     public void testPipeToSubtype() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new ForwardingInterceptor(new Bar(FOO)))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(QUX), is(FOO + QUX));
     }
 
@@ -56,7 +56,7 @@ public void testPipeToSubtype() throws Exception {
     public void testPipeSerialization() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new SerializableForwardingInterceptor(new Foo(FOO)))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(QUX), is(FOO + QUX));
     }
 
@@ -64,7 +64,7 @@ public void testPipeSerialization() throws Exception {
     public void testPipeToIncompatibleTypeThrowsException() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(new ForwardingInterceptor(new Object()))
                 .defineParameterBinder(Pipe.Binder.install(ForwardingType.class)));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo(QUX);
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationRuntimeTypeTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationRuntimeTypeTest.java
index fdb2dfc681..67cc80e5dc 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationRuntimeTypeTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationRuntimeTypeTest.java
@@ -14,7 +14,7 @@
     @Test
     public void testRuntimeType() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(FOO), is(FOO));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationStubValueTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationStubValueTest.java
index abb9b81bd2..3fc5cfe6b7 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationStubValueTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationStubValueTest.java
@@ -16,28 +16,28 @@
     @Test
     public void testVoidMethod() throws Exception {
         DynamicType.Loaded<VoidMethod> loaded = implement(VoidMethod.class, MethodDelegation.to(new Interceptor(null)));
-        VoidMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        VoidMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo();
     }
 
     @Test
     public void testReference() throws Exception {
         DynamicType.Loaded<ReferenceMethod> loaded = implement(ReferenceMethod.class, MethodDelegation.to(new Interceptor(null)));
-        ReferenceMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        ReferenceMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), nullValue(Object.class));
     }
 
     @Test
     public void testLongValue() throws Exception {
         DynamicType.Loaded<LongMethod> loaded = implement(LongMethod.class, MethodDelegation.to(new Interceptor(0L)));
-        LongMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        LongMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(0L));
     }
 
     @Test
     public void tesIntegerValue() throws Exception {
         DynamicType.Loaded<IntegerMethod> loaded = implement(IntegerMethod.class, MethodDelegation.to(new Interceptor(0)));
-        IntegerMethod instance = loaded.getLoaded().getConstructor().newInstance();
+        IntegerMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(0));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperCallTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperCallTest.java
index b35ae27ea4..cae4bbf58f 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperCallTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperCallTest.java
@@ -33,7 +33,7 @@
     @Test
     public void testRunnableSuperCall() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(RunnableClass.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.value, is(BAR));
         instance.foo();
         assertThat(instance.value, is(FOO));
@@ -42,14 +42,14 @@ public void testRunnableSuperCall() throws Exception {
     @Test
     public void testCallableSuperCall() throws Exception {
         DynamicType.Loaded<Bar> loaded = implement(Bar.class, MethodDelegation.to(CallableClass.class));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.bar(), is(FOO));
     }
 
     @Test
     public void testVoidToNonVoidSuperCall() throws Exception {
         DynamicType.Loaded<VoidTest> loaded = implement(VoidTest.class, MethodDelegation.to(NonVoidTarget.class));
-        VoidTest instance = loaded.getLoaded().getConstructor().newInstance();
+        VoidTest instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         instance.foo();
         instance.assertOnlyCall(FOO);
     }
@@ -57,14 +57,14 @@ public void testVoidToNonVoidSuperCall() throws Exception {
     @Test
     public void testRuntimeTypeSuperCall() throws Exception {
         DynamicType.Loaded<RuntimeTypeTest> loaded = implement(RuntimeTypeTest.class, MethodDelegation.to(RuntimeTypeTarget.class));
-        RuntimeTypeTest instance = loaded.getLoaded().getConstructor().newInstance();
+        RuntimeTypeTest instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is(FOO));
     }
 
     @Test
     public void testSerializableProxy() throws Exception {
         DynamicType.Loaded<Bar> loaded = implement(Bar.class, MethodDelegation.to(SerializationCheck.class));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.bar(), is(FOO));
     }
 
@@ -76,7 +76,7 @@ public void testDefaultMethodFallback() throws Exception {
                 getClass().getClassLoader(),
                 isMethod().and(not(isDeclaredBy(Object.class))),
                 Class.forName(SINGLE_DEFAULT_METHOD));
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Method method = loaded.getLoaded().getMethod(FOO);
         assertThat(method.invoke(instance), is((Object) FOO));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperTest.java
index a9ee5a6337..f458d44b4c 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationSuperTest.java
@@ -25,55 +25,55 @@
     @Test
     public void testSuperInstance() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Baz.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
     @Test
     public void testSuperInterface() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(FooBar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
     @Test
     public void testSuperInstanceUnsafe() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(QuxBaz.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
     @Test
     public void testBridgeMethodResolution() throws Exception {
         DynamicType.Loaded<Bar> loaded = implement(Bar.class, MethodDelegation.to(GenericBaz.class));
-        Bar instance = loaded.getLoaded().getConstructor().newInstance();
+        Bar instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(BAR), is(BAR + QUX));
     }
 
     @Test(expected = AbstractMethodError.class)
     public void testSuperCallOnAbstractMethod() throws Exception {
         DynamicType.Loaded<FooBarQuxBaz> loaded = implement(FooBarQuxBaz.class, MethodDelegation.to(FooBar.class));
-        loaded.getLoaded().getConstructor().newInstance().qux();
+        loaded.getLoaded().getDeclaredConstructor().newInstance().qux();
     }
 
     @Test
     public void testSerializableProxy() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(SerializationCheck.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
     @Test
     public void testTargetTypeProxy() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(TargetTypeTest.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
     @Test
     public void testExplicitTypeProxy() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(ExplicitTypeTest.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.qux(), is((Object) (FOO + QUX)));
     }
 
@@ -92,7 +92,7 @@ public void testFinalType() throws Exception {
                 .make()
                 .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
                 .getLoaded();
-        assertThat(type.getDeclaredMethod(BAR).invoke(type.getConstructor().newInstance()), is((Object) FOO));
+        assertThat(type.getDeclaredMethod(BAR).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
     }
 
     public interface Qux {
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationTest.java
index 436532add5..539ed785fd 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationTest.java
@@ -97,7 +97,7 @@ public void testStaticMethodBinding() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(sourceType)));
         assertThat(instance, instanceOf(sourceType));
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, parameterTypes).invoke(instance, arguments), (Matcher) matcher);
@@ -107,11 +107,11 @@ public void testStaticMethodBinding() throws Exception {
     @Test
     @SuppressWarnings("unchecked")
     public void testStaticFieldBinding() throws Exception {
-        DynamicType.Loaded<T> loaded = implement(sourceType, MethodDelegation.to(targetType.getConstructor().newInstance()).filter(isDeclaredBy(targetType)));
+        DynamicType.Loaded<T> loaded = implement(sourceType, MethodDelegation.to(targetType.getDeclaredConstructor().newInstance()).filter(isDeclaredBy(targetType)));
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(sourceType)));
         assertThat(instance, instanceOf(sourceType));
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, parameterTypes).invoke(instance, arguments), (Matcher) matcher);
@@ -125,12 +125,12 @@ public void testInstanceFieldBinding() throws Exception {
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         assertThat(loaded.getLoaded().getDeclaredFields().length, is(1));
-        T instance = loaded.getLoaded().getConstructor().newInstance();
+        T instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         Field field = loaded.getLoaded().getDeclaredField(FIELD_NAME);
         assertThat(field.getModifiers(), is(Modifier.PUBLIC));
         assertThat(field.getType(), CoreMatchers.<Class<?>>is(targetType));
         field.setAccessible(true);
-        field.set(instance, targetType.getConstructor().newInstance());
+        field.set(instance, targetType.getDeclaredConstructor().newInstance());
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(sourceType)));
         assertThat(instance, instanceOf(sourceType));
         assertThat(loaded.getLoaded().getDeclaredMethod(FOO, parameterTypes).invoke(instance, arguments), (Matcher) matcher);
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationThisTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationThisTest.java
index 7f0c69a29b..2c91c8a0a1 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationThisTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/MethodDelegationThisTest.java
@@ -12,7 +12,7 @@
     @Test
     public void testThis() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, MethodDelegation.to(Bar.class));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.foo(), is((Object) instance));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/StubMethodTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/StubMethodTest.java
index 037c065e38..d255371fc4 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/StubMethodTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/StubMethodTest.java
@@ -118,7 +118,7 @@ public void testInstrumentedMethod() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, StubMethod.INSTANCE);
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(11));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         assertThat(loaded.getLoaded().getDeclaredMethod(methodName, methodParameterTypes)
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallOtherTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallOtherTest.java
index 2b36a17bc5..5c3dcc4769 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallOtherTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallOtherTest.java
@@ -133,7 +133,7 @@ public void testNoSuper() throws Exception {
     public void testAndThen() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, SuperMethodCall.INSTANCE
                 .andThen(new Implementation.Simple(new TextConstant(FOO), MethodReturn.REFERENCE)));
-        Foo foo = loaded.getLoaded().getConstructor().newInstance();
+        Foo foo = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(foo.foo(), is(FOO));
         foo.assertOnlyCall(FOO);
     }
@@ -148,7 +148,7 @@ public void testUnambiguousDirectDefaultMethod() throws Exception {
                 Class.forName(SINGLE_DEFAULT_METHOD));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
@@ -161,7 +161,7 @@ public void testInheritedDefaultMethod() throws Exception {
                 isMethod().and(not(isDeclaredBy(Object.class))));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(1));
         Method method = loaded.getLoaded().getDeclaredMethod(FOO);
-        Object instance = loaded.getLoaded().getConstructor().newInstance();
+        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(method.invoke(instance), is((Object) FOO));
     }
 
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallTest.java
index c2a4ff4d75..7f37c8dde7 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/SuperMethodCallTest.java
@@ -100,7 +100,7 @@ public void testInstrumentedMethod() throws Exception {
         DynamicType.Loaded<Foo> loaded = implement(Foo.class, SuperMethodCall.INSTANCE);
         assertThat(loaded.getLoadedAuxiliaryTypes().size(), is(0));
         assertThat(loaded.getLoaded().getDeclaredMethods().length, is(11));
-        Foo instance = loaded.getLoaded().getConstructor().newInstance();
+        Foo instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
         assertThat(instance.getClass(), not(CoreMatchers.<Class<?>>is(Foo.class)));
         assertThat(instance, instanceOf(Foo.class));
         assertThat(loaded.getLoaded().getDeclaredMethod(methodName, methodParameterTypes)
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/auxiliary/MethodCallProxySingleArgumentTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/auxiliary/MethodCallProxySingleArgumentTest.java
index 492e6ba324..75337f4b45 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/auxiliary/MethodCallProxySingleArgumentTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/auxiliary/MethodCallProxySingleArgumentTest.java
@@ -69,7 +69,7 @@ public void testRunMethod() throws Exception {
         Class<?> auxiliaryType = proxyOnlyDeclaredMethodOf(targetType);
         Constructor<?> constructor = auxiliaryType.getDeclaredConstructor(targetType, valueType);
         constructor.setAccessible(true);
-        T proxiedInstance = targetType.getConstructor().newInstance();
+        T proxiedInstance = targetType.getDeclaredConstructor().newInstance();
         ((Runnable) constructor.newInstance(proxiedInstance, value)).run();
         proxiedInstance.assertOnlyCall(FOO, value);
     }
@@ -79,7 +79,7 @@ public void testCallMethod() throws Exception {
         Class<?> auxiliaryType = proxyOnlyDeclaredMethodOf(targetType);
         Constructor<?> constructor = auxiliaryType.getDeclaredConstructor(targetType, valueType);
         constructor.setAccessible(true);
-        T proxiedInstance = targetType.getConstructor().newInstance();
+        T proxiedInstance = targetType.getDeclaredConstructor().newInstance();
         assertThat(((Callable<?>) constructor.newInstance(proxiedInstance, value)).call(), is(value));
         proxiedInstance.assertOnlyCall(FOO, value);
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest.java
index e3309e6054..3fb7935989 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantOtherTest.java
@@ -40,7 +40,7 @@ public void testTypeDescription() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo(), is((Object) Object.class));
     }
@@ -55,7 +55,7 @@ public void testNull() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo(), nullValue(Object.class));
     }
@@ -75,7 +75,7 @@ public void testMethodHandleLoaded() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo()), is(JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)));
     }
@@ -95,7 +95,7 @@ public void testMethodHandle() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo()), is(JavaConstant.MethodHandle.ofLoaded(methodHandleLoaded)));
     }
@@ -113,7 +113,7 @@ public void testMethodTypeLoaded() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo()), is(JavaConstant.MethodType.ofLoaded(loadedMethodType)));
     }
@@ -131,7 +131,7 @@ public void testMethodType() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo()), is(JavaConstant.MethodType.ofLoaded(loadedMethodType)));
     }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest.java
index 08e271551f..6df05e9dda 100755
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bind/annotation/TargetMethodAnnotationDriverBinderParameterBinderForFixedValueOfConstantTest.java
@@ -56,7 +56,7 @@ public void testConstant() throws Exception {
                 .make()
                 .load(Foo.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                 .getLoaded()
-                .getConstructor()
+                .getDeclaredConstructor()
                 .newInstance()
                 .foo(), is(value));
     }
