diff --git a/.ci/idea_inspection.bat b/.ci/idea_inspection.bat
index e9cd6ba42c..8f09753997 100755
--- a/.ci/idea_inspection.bat
+++ b/.ci/idea_inspection.bat
@@ -13,7 +13,7 @@ SET INSPECTIONS_PATH=%CD%\config\intellij-idea-inspections.xml
 SET RESULTS_DIR=%CD%\target\inspection-results
 SET NOISE_LVL=v1
 SET IDEA_LOCATION=
-SET IDEA_PROPERTIES=%CD%\config\idea.properties
+SET IDEA_PROPERTIES=%CD%\config\intellij-idea-inspections.properties
 
 ::Check IDEA_PATH env variable
 IF EXIST %IDEA_PATH% SET (
@@ -26,14 +26,21 @@ IF EXIST %IDEA_PATH% SET (
 ::Try to search in path
 FOR /f "delims=" %%i IN ('"where idea.bat"') DO SET IDEA_LOCATION="%%i"
 if [%IDEA_LOCATION%] NEQ [] (
-    goto run 
+    goto run
 ) ELSE (
     echo IntelliJ IDEA was not found in path.
     exit /b
 )
 
 :run
+mkdir %RESULTS_DIR%
+del %RESULTS_DIR%\*.* /s /q
+
 mkdir .idea\scopes
 copy config\intellij-idea-inspection-scope.xml .idea\scopes
 
+::Execute compilation of Checkstyle to generate all source files
+mvn compile
+
+::Launch inspections
 "%IDEA_LOCATION%" inspect %PROJECT_DIR% %INSPECTIONS_PATH% %RESULTS_DIR% -%NOISE_LVL%
diff --git a/.ci/idea_inspection.sh b/.ci/idea_inspection.sh
index 545c58aedc..018e5022f8 100755
--- a/.ci/idea_inspection.sh
+++ b/.ci/idea_inspection.sh
@@ -4,49 +4,45 @@
 # IntelliJ IDEA inspections for checkstyle.
 #
 # Example Mac OS:
-# export IDEA_PATH="/Applications/IntelliJ IDEA.app/Contents/MacOS/idea"
-# bash ./.ci/idea_inspection.sh
+# IDEA_PATH="/Applications/IntelliJ IDEA.app/Contents/MacOS/idea" ./.ci/idea_inspection.sh
 #
 # Example Linux:
-# export IDEA_PATH=/opt/idea-IC-171.4694.70/bin/idea.sh
-# export IDEA_PROPERTIES=$PWD/config/idea.properties
-# ./.ci/idea_inspection.sh
+# IDEA_PATH=/opt/idea-IC-171.4694.70/bin/idea.sh ./.ci/idea_inspection.sh
 #################################################
 
 PROJECT_DIR=$PWD/
 INSPECTIONS_PATH=$PWD/config/intellij-idea-inspections.xml
 RESULTS_DIR=$PWD/target/inspection-results
 NOISE_LVL=v1
-IDEA_LOCATION=
-export IDEA_PROPERTIES=$PWD/config/idea.properties
+# we need to export this variable as it is required for idea.sh script
+export IDEA_PROPERTIES=$PWD/config/intellij-idea-inspections.properties
 
 # Check IDEA_PATH env variable
-
-if [[ ! -z $IDEA_PATH ]]; then
-    IDEA_LOCATION=$IDEA_PATH
-else
+if [[ -z $IDEA_PATH ]]; then
     echo "IDEA_PATH variable not found."
     # Try to search in path
-    IDEA_LOCATION="$(which idea)"
-    if [ -z $IDEA_LOCATION ]; then
+    IDEA_PATH="$(which idea)"
+    if [ -z $IDEA_PATH ]; then
         echo "IntelliJ IDEA was not found in path."
         exit -1
     fi
 fi
 
+#Execute compilation of Checkstyle to generate all source files
+mvn compile
+
 mkdir -p $RESULTS_DIR
 rm -rf $RESULTS_DIR/*
-mkdir -p $PWD/.idea/scopes
-cp $PWD/config/intellij-idea-inspection-scope.xml $PWD/.idea/scopes
 
-echo "Validation is about to start ... progress output will be flushed at end. Validation is in progress ..."
-IDEA_OUTPUT=`exec "$IDEA_LOCATION" inspect $PROJECT_DIR $INSPECTIONS_PATH $RESULTS_DIR -$NOISE_LVL`
+echo "Intellij Idea validation is about to start"
+echo "Progress output will be flushed at end. Validation is in progress ..."
+IDEA_OUTPUT=`exec "$IDEA_PATH" inspect $PROJECT_DIR $INSPECTIONS_PATH $RESULTS_DIR -$NOISE_LVL`
 echo $IDEA_OUTPUT
 
 echo "Checking results ..."
-if [[ $(grep "problems" $RESULTS_DIR/* --exclude="UnusedProperty.xml" --exclude="RedundantSuppression.xml" | cat | wc -l ) > 0 ]]; then
+if [[ $(grep -R "<problems" $RESULTS_DIR/ | cat | wc -l ) > 0 ]]; then
     echo "There are inspection problems. Review results at $RESULTS_DIR folder. Files:"
-    grep -l "problems" $RESULTS_DIR/* --exclude="UnusedProperty.xml" --exclude="RedundantSuppression.xml"
+    grep -Rl "<problems" $RESULTS_DIR/
     exit 1;
 else
     echo "Inpection did not found any problems"
diff --git a/config/idea.properties b/config/idea.properties
deleted file mode 100755
index b44eac4d52..0000000000
--- a/config/idea.properties
+++ /dev/null
@@ -1 +0,0 @@
-idea.exclude.patterns=src/test/resources/**;src/site/resources/js/google-analytics.js;src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java;src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java;
diff --git a/config/intellij-idea-inspection-scope.xml b/config/intellij-idea-inspection-scope.xml
index ae5f878f8e..32cfcbfa91 100755
--- a/config/intellij-idea-inspection-scope.xml
+++ b/config/intellij-idea-inspection-scope.xml
@@ -1,4 +1,4 @@
 <!-- ATTENTION: this file is not used by TeamCity, all excludes should be specified in build configuration -->
 <component name="DependencyValidationManager">
-    <scope name="Checkstyle Inspection Scope" pattern="!file:target//*&amp;&amp;!file:src/test/resources*//**&amp;&amp;!file:src/it/resources*//**&amp;&amp;!file:src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java&amp;&amp;!file:src/site/resources/js/google-analytics.js"/>
+    <scope name="Checkstyle Inspection Scope" pattern="!file:target//*&amp;&amp;!file:src/test/resources*//**&amp;&amp;!file:src/it/resources*//**&amp;&amp;!file:src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java&amp;&amp;!file:src/site/resources/js/google-analytics.js&amp;&amp;!file:config/intellij-idea-inspections.properties"/>
 </component>
diff --git a/config/intellij-idea-inspections.properties b/config/intellij-idea-inspections.properties
new file mode 100755
index 0000000000..482b6cf796
--- /dev/null
+++ b/config/intellij-idea-inspections.properties
@@ -0,0 +1,2 @@
+# this file is used by .ci/idea_inspection.sh and .ci/idea_inspection.bat
+idea.exclude.patterns=.idea/**;src/test/resources/**;src/site/resources/js/google-analytics.js;src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/ParseTreeBuilder.java;src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java;config/intellij-idea-inspections.properties
diff --git a/config/pmd-test.xml b/config/pmd-test.xml
index 4c9dc37537..3586f08431 100755
--- a/config/pmd-test.xml
+++ b/config/pmd-test.xml
@@ -69,8 +69,9 @@
         <!-- pmd cannot find assert if it is located in private method of this class called from the test
         method or method of another class -->
         <properties>
-            <!-- in SuppressionCommentFilterTest, SuppressWithNearbyCommentFilterTest, SuppressionFilterTest, XpathFilterTest
-            pmd does not accept nl.jqno.equalsverifier.EqualsVerifier#.verify() as correctness check method -->
+            <!-- in SuppressionCommentFilterTest, SuppressWithNearbyCommentFilterTest, SuppressionFilterTest,
+            SuppressionXpathFilterTest, XpathFilterTest pmd does not accept nl.jqno.equalsverifier.EqualsVerifier#.verify()
+            as correctness check method -->
             <!-- in AbstractJavadocCheckTest pmd does not find asserts in another class methods called from the test method -->
             <!-- in ImportControlCheckTest, DetailASTTest
                  pmd does not find asserts in private methods of the test class called from the test method -->
@@ -80,6 +81,8 @@
             <property name="violationSuppressXPath" value="//ClassOrInterfaceDeclaration[@Image='SuppressionFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCode']
             | //ClassOrInterfaceDeclaration[@Image='SuppressionCommentFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCodeOfTagClass']
             | //ClassOrInterfaceDeclaration[@Image='SuppressWithNearbyCommentFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCodeOfTagClass']
+            | //ClassOrInterfaceDeclaration[@Image='SuppressionXpathFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCode']
+            | //ClassOrInterfaceDeclaration[@Image='XpathFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCode']
             | //ClassOrInterfaceDeclaration[@Image='AbstractJavadocCheckTest']//MethodDeclarator[@Image='testBlockCommentPositionHasPrivateConstr']
             | //ClassOrInterfaceDeclaration[@Image='ImportControlCheckTest']//MethodDeclarator[@Image='testPkgRegExpInChild']
             | //ClassOrInterfaceDeclaration[@Image='ImportControlCheckTest']//MethodDeclarator[@Image='testPkgRegExpInParent']
@@ -88,7 +91,6 @@
             | //ClassOrInterfaceDeclaration[@Image='AstRegressionTest']//MethodDeclarator[@Image='testImpossibleValid']
             | //ClassOrInterfaceDeclaration[@Image='AllChecksTest']//MethodDeclarator[@Image='testAllModulesAreReferencedInConfigFile']
             | //ClassOrInterfaceDeclaration[@Image='DetailASTTest']//MethodDeclarator[@Image='testTreeStructure']
-            | //ClassOrInterfaceDeclaration[@Image='XpathFilterTest']//MethodDeclarator[@Image='testEqualsAndHashCode']
             "/>
         </properties>
     </rule>
diff --git a/pom.xml b/pom.xml
index ec6a271667..f804b5ae8c 100755
--- a/pom.xml
+++ b/pom.xml
@@ -1030,7 +1030,7 @@
                 <exclude>java.header</exclude>
                 <exclude>java_regexp.header</exclude>
                 <exclude>org.eclipse.jdt.core.prefs</exclude>
-                <exclude>idea.properties</exclude>
+                <exclude>intellij-idea-inspections.properties</exclude>
               </excludes>
             </validationSet>
             <validationSet>
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_de.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_de.properties
index 3e1d84f457..8ca7fc513c 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_de.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/sizes/messages_de.properties
@@ -4,7 +4,7 @@ maxLen.file=Datei ist {0,number,integer} Zeilen lang (Obergrenze ist {1,number,i
 maxLen.method=Methode ist {0,number,integer} Zeilen lang (Obergrenze ist {1,number,integer}).
 maxLineLen=Zeile ist {1,number,integer} Zeichen lang (Obergrenze ist {0,number,integer}).
 maxOuterTypes=Anzahl äußerer Typen beträgt {0,number,integer} (Obergrenze ist {1,number,integer}).
-maxParam=Konstruktor/Methode hat {0,number,integer} Parameter (Obergrenze ist {1,number,integer}).
+maxParam=Konstruktor/Methode hat {1,number,integer} Parameter (Obergrenze ist {0,number,integer}).
 too.many.methods=Klasse hat insgesamt {0,number,integer} Methoden (Obergrenze ist {1,number,integer}).
 too.many.packageMethods=Klasse hat {0,number,integer} Methoden mit Sichtbarkeit ''package'' (Obergrenze ist {1,number,integer}).
 too.many.privateMethods=Klasse hat {0,number,integer} Methoden mit Sichtbarkeit ''private'' (Obergrenze ist {1,number,integer}).
