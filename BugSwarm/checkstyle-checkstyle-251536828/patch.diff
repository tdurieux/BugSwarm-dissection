diff --git a/.gitattributes b/.gitattributes
index 0f971e95d3..36b9bd7eff 100755
--- a/.gitattributes
+++ b/.gitattributes
@@ -1,3 +1,4 @@
-/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineLfAtEndOfFile.java eol=lf
-/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrlfAtEndOfFile.java eol=crlf
+/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineLfAtEndOfFile.java eol=lf
+/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrlfAtEndOfFile.java eol=crlf
 /src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFile.java -text
+/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrAtEndOfFile.java -text
diff --git a/config/checkstyle_non_main_files_suppressions.xml b/config/checkstyle_non_main_files_suppressions.xml
index cb9dd4c9cd..41284ac9a6 100755
--- a/config/checkstyle_non_main_files_suppressions.xml
+++ b/config/checkstyle_non_main_files_suppressions.xml
@@ -20,6 +20,6 @@
      <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]astprinter[\\/].*\.javadoc"/>
 
     <!--Empty file cannot have any new line at the end. -->
-    <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]checks[\\/]InputEmptyFile\.txt"/>
+    <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]checks[\\/]misc[\\/]newlineatendoffile[\\/]InputEmptyFile\.txt"/>
     <suppress checks="NewlineAtEndOfFile" files="[\\/]test[\\/].*[\\/]grammars[\\/]InputRegressionEmptyAst\.txt"/>
 </suppressions>
diff --git a/pom.xml b/pom.xml
index 851010c99a..2276f693b9 100755
--- a/pom.xml
+++ b/pom.xml
@@ -2032,7 +2032,24 @@
               <targetTests>
                 <param>com.puppycrawl.tools.checkstyle.MainTest</param>
               </targetTests>
-              <mutationThreshold>93</mutationThreshold>
+              <excludedMethods>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4399 -->
+                <param>main</param>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4399 -->
+                <param>createListener</param>
+              </excludedMethods>
+              <avoidCallsTo>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4399 -->
+                <avoidCallsTo>com.google.common.io.Closeables</avoidCallsTo>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4399 -->
+                <avoidCallsTo>com.puppycrawl.tools.checkstyle.utils.CommonUtils</avoidCallsTo>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4399 -->
+                <avoidCallsTo>com.puppycrawl.tools.checkstyle.api.RootModule</avoidCallsTo>
+                <!-- add default suppressions -->
+                <avoidCallsTo>org.apache.commons.logging</avoidCallsTo>
+                <avoidCallsTo>java.util.logging</avoidCallsTo>
+              </avoidCallsTo>
+              <mutationThreshold>100</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
@@ -2079,8 +2096,24 @@
                 but currently it does nothing, so we cannot check it. If we remove this destroy we would have
                 to remove all of them as they are chained together, so we just exclude it from pitest check. -->
                 <param>destroy</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>parseJavadocAsParseTree</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>createJavadocNode</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>getNextSibling</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>isPositionGreater</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>getExternalResourceLocations</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>countLinesColumns</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>getExternalResourceLocations</param>
+                <!--till https://github.com/checkstyle/checkstyle/issues/4398 -->
+                <param>parse</param>
               </excludedMethods>
-              <mutationThreshold>94</mutationThreshold>
+              <mutationThreshold>100</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
@@ -2090,7 +2123,7 @@
       </build>
     </profile>
     <profile>
-      <id>pitest-checkstyle-api-filters</id>
+      <id>pitest-checkstyle-api</id>
       <build>
         <plugins>
           <plugin>
@@ -2100,8 +2133,6 @@
             <configuration>
               <targetClasses>
                 <param>com.puppycrawl.tools.checkstyle.api.*</param>
-                <param>com.puppycrawl.tools.checkstyle.filefilters.*</param>
-                <param>com.puppycrawl.tools.checkstyle.filters.*</param>
               </targetClasses>
               <targetTests>
                 <param>com.puppycrawl.tools.checkstyle.api.*</param>
@@ -2113,7 +2144,45 @@
                 <param>com.puppycrawl.tools.checkstyle.checks.javadoc.WriteTagCheckTest</param>
                 <param>com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheckTest</param>
               </targetTests>
-              <mutationThreshold>84</mutationThreshold>
+              <mutationThreshold>88</mutationThreshold>
+              <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
+              <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
+              <threads>${pitest.plugin.threads}</threads>
+            </configuration>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+    <profile>
+      <id>pitest-checkstyle-filters</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.pitest</groupId>
+            <artifactId>pitest-maven</artifactId>
+            <version>${pitest.plugin.version}</version>
+            <configuration>
+              <targetClasses>
+                <param>com.puppycrawl.tools.checkstyle.filefilters.*</param>
+                <param>com.puppycrawl.tools.checkstyle.filters.*</param>
+              </targetClasses>
+              <targetTests>
+                <param>com.puppycrawl.tools.checkstyle.filefilters.*</param>
+                <param>com.puppycrawl.tools.checkstyle.filters.*</param>
+              </targetTests>
+              <excludedMethods>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4396 -->
+                <param>compareTo</param>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4396 -->
+                <param>findNearestMatch</param>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4396 -->
+                <param>tagSuppressions</param>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4396 -->
+                <param>tagSuppressions</param>
+                <!-- till https://github.com/checkstyle/checkstyle/issues/4396 -->
+                <param>startElement</param>
+              </excludedMethods>
+              <mutationThreshold>100</mutationThreshold>
               <timeoutFactor>${pitest.plugin.timeout.factor}</timeoutFactor>
               <timeoutConstant>${pitest.plugin.timeout.constant}</timeoutConstant>
               <threads>${pitest.plugin.threads}</threads>
diff --git a/shippable.yml b/shippable.yml
index f55eb1415a..5529732b05 100755
--- a/shippable.yml
+++ b/shippable.yml
@@ -9,7 +9,8 @@ env:
     - PROFILE="-Ppitest-checkstyle-common,no-validations"
     - PROFILE="-Ppitest-checkstyle-main,no-validations"
     - PROFILE="-Ppitest-checkstyle-tree-walker,no-validations"
-    - PROFILE="-Ppitest-checkstyle-api-filters,no-validations"
+    - PROFILE="-Ppitest-checkstyle-api,no-validations"
+    - PROFILE="-Ppitest-checkstyle-filters,no-validations"
     - PROFILE="-Ppitest-checkstyle-utils,no-validations"
     - PROFILE="-Ppitest-checks-annotation,no-validations"
     - PROFILE="-Ppitest-checks-blocks,no-validations"
diff --git a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
index f13933454f..86a8d9458b 100755
--- a/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/SeparatorWrapTest.java
@@ -83,9 +83,9 @@ public void testSeparatorWrapMethodRef() throws Exception {
     @Test
     public void testEllipsis() throws Exception {
         final String[] expected = {
-            "11:13: " + getCheckMessage(SeparatorWrapCheck.class, "line.previous", ","),
+            "11:13: " + getCheckMessage(SeparatorWrapCheck.class, "line.previous", "..."),
         };
-        
+
         final Configuration checkConfig = getCheckConfig("SeparatorWrap", "SeparatorWrapEllipsis");
         final String filePath = getPath("InputSeparatorWrapEllipsis.java");
 
@@ -96,9 +96,10 @@ public void testEllipsis() throws Exception {
     @Test
     public void testArrayDeclarator() throws Exception {
         final String[] expected = {
-            "9:13: " + getCheckMessage(SeparatorWrapCheck.class, "line.previous", ","),
+            "9:13: " + getCheckMessage(SeparatorWrapCheck.class, "line.previous", "["),
         };
-        final Configuration checkConfig = getCheckConfig("SeparatorWrap", "SeparatorWrapArrayDeclarator");
+        final Configuration checkConfig = getCheckConfig("SeparatorWrap",
+                "SeparatorWrapArrayDeclarator");
         final String filePath = getPath("InputSeparatorWrapArrayDeclarator.java");
 
         final Integer[] warnList = getLinesWithWarn(filePath);
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapArrayDeclarator.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapArrayDeclarator.java
index 42e37a148e..acbcdd9b89 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapArrayDeclarator.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapArrayDeclarator.java
@@ -1,12 +1,12 @@
-package com.puppycrawl.tools.checkstyle.checks.whitespace.separatorwrap;
+package com.google.checkstyle.test.chapter4formatting.rule451wheretobreak;
 
 class InputSeparatorWrapArrayDeclarator {
 
     protected int[] arrayDeclarationWithGoodWrapping = new int[
-            ] {1, 2};
+            ] {1, 2}; // ok
 
     protected int[] arrayDeclarationWithBadWrapping = new int
-            [] {1, 2};
+            [] {1, 2}; // warn
 
 }
 
diff --git a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapEllipsis.java b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapEllipsis.java
index 95e32a4982..d962046689 100755
--- a/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapEllipsis.java
+++ b/src/it/resources/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/InputSeparatorWrapEllipsis.java
@@ -1,14 +1,14 @@
-package com.puppycrawl.tools.checkstyle.checks.whitespace.separatorwrap;
+package com.google.checkstyle.test.chapter4formatting.rule451wheretobreak;
 
 class InputSeparatorWrapEllipsis {
 
-    public void testMethodWithGoodWrapping(String...
+    public void testMethodWithGoodWrapping(String... // ok
             parameters) {
 
     }
 
     public void testMethodWithBadWrapping(String
-            ...parameters) {
+            ...parameters) { // warn
 
     }
 
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
index 7ff3a58c92..a0d2556f13 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java
@@ -333,7 +333,7 @@ public Tag(String text, int line, SuppressWithNearbyCommentFilter filter) {
                     throw new IllegalArgumentException("unable to parse influence from '" + text
                             + "' using " + filter.influenceFormat, ex);
                 }
-                if (influence >= 0) {
+                if (influence >= 1) {
                     firstLine = line;
                     lastLine = line + influence;
                 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
index cdfd276591..1e1e96cfa2 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java
@@ -60,7 +60,10 @@ protected DefaultConfiguration createCheckerConfig(
 
     @Override
     protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator + filename);
+        return super.getPath("checks" + File.separator
+                + "misc" + File.separator
+                + "newlineatendoffile" + File.separator
+                + filename);
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
index a4d263c1ba..ee59ce15c9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
@@ -37,7 +37,8 @@
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
-                + "javadoc" + File.separator + filename);
+                + "javadoc" + File.separator
+                + "javadocpackage" + File.separator + filename);
     }
 
     @Override
@@ -56,8 +57,8 @@ public void testMissing() throws Exception {
         };
         verify(
             createChecker(checkConfig),
-            getPath("InputBadCls.java"),
-            getPath("InputBadCls.java"),
+            getPath("InputJavadocPackageBadCls.java"),
+            getPath("InputJavadocPackageBadCls.java"),
             expected);
     }
 
@@ -70,16 +71,16 @@ public void testMissingWithAllowLegacy() throws Exception {
         };
         verify(
             createChecker(checkConfig),
-            getPath("InputBadCls.java"),
-            getPath("InputBadCls.java"),
+            getPath("InputJavadocPackageBadCls.java"),
+            getPath("InputJavadocPackageBadCls.java"),
             expected);
     }
 
     @Test
     public void testWithMultipleFiles() throws Exception {
         final Configuration checkConfig = createCheckConfig(JavadocPackageCheck.class);
-        final String path1 = getPath("InputNoJavadoc.java");
-        final String path2 = getPath("InputBadTag.java");
+        final String path1 = getPath("InputJavadocPackageNoJavadoc.java");
+        final String path2 = getPath("InputJavadocPackageBadTag.java");
         final String[] expected = {
             "0: " + getCheckMessage(MSG_PACKAGE_INFO),
         };
@@ -97,8 +98,9 @@ public void testBoth() throws Exception {
             "0: " + getCheckMessage(MSG_LEGACY_PACKAGE_HTML),
         };
         verify(createChecker(checkConfig),
-            getPath("bothfiles" + File.separator + "InputIgnored.java"),
-            getPath("bothfiles" + File.separator + "InputIgnored.java"), expected);
+            getPath("bothfiles" + File.separator + "InputJavadocPackageBothIgnored.java"),
+            getPath("bothfiles"
+            + File.separator + "InputJavadocPackageBothIgnored.java"), expected);
     }
 
     @Test
@@ -108,8 +110,8 @@ public void testHtmlDisallowed() throws Exception {
             "0: " + getCheckMessage(MSG_PACKAGE_INFO),
         };
         verify(createChecker(checkConfig),
-            getPath("pkghtml" + File.separator + "InputIgnored.java"),
-            getPath("pkghtml" + File.separator + "InputIgnored.java"), expected);
+            getPath("pkghtml" + File.separator + "InputJavadocPackageHtmlIgnored.java"),
+            getPath("pkghtml" + File.separator + "InputJavadocPackageHtmlIgnored.java"), expected);
     }
 
     @Test
@@ -118,7 +120,7 @@ public void testHtmlAllowed() throws Exception {
         checkConfig.addAttribute("allowLegacy", "true");
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
         verify(createChecker(checkConfig),
-            getPath("pkghtml" + File.separator + "InputIgnored.java"),
+            getPath("pkghtml" + File.separator + "InputJavadocPackageHtmlIgnored.java"),
             getPath("pkghtml" + File.separator + "package-info.java"), expected);
     }
 
@@ -127,9 +129,9 @@ public void testAnnotation() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(JavadocPackageCheck.class);
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
         verify(createChecker(checkConfig),
-            getPath("pkginfo" + File.separator + "annotation"
+            getPath("annotation"
                     + File.separator + "package-info.java"),
-            getPath("pkginfo" + File.separator + "annotation"
+            getPath("annotation"
                     + File.separator + "package-info.java"), expected);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
index aa86c1d16a..a9e6ff6a22 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java
@@ -47,7 +47,8 @@ public void setUp() {
     @Override
     protected String getPath(String filename) throws IOException {
         return super.getPath("checks" + File.separator
-                + "javadoc" + File.separator + filename);
+                + "javadoc" + File.separator
+                + "javadocparagraph" + File.separator + filename);
     }
 
     @Test
@@ -62,7 +63,7 @@ public void testGetRequiredTokens() {
     public void testCorrect() throws Exception {
         final String[] expected = CommonUtils.EMPTY_STRING_ARRAY;
 
-        verify(checkConfig, getPath("InputCorrectJavaDocParagraph.java"), expected);
+        verify(checkConfig, getPath("InputJavaDocParagraphCorrect.java"), expected);
     }
 
     @Test
@@ -105,7 +106,7 @@ public void testIncorrect() throws Exception {
             "81: " + getCheckMessage(MSG_TAG_AFTER),
             "82: " + getCheckMessage(MSG_TAG_AFTER),
         };
-        verify(checkConfig, getPath("InputIncorrectJavaDocParagraph.java"), expected);
+        verify(checkConfig, getPath("InputJavaDocParagraphIncorrect.java"), expected);
     }
 
     @Test
@@ -132,6 +133,6 @@ public void testAllowNewlineParagraph() throws Exception {
             "81: " + getCheckMessage(MSG_TAG_AFTER),
             "82: " + getCheckMessage(MSG_TAG_AFTER),
         };
-        verify(checkConfig, getPath("InputIncorrectJavaDocParagraph.java"), expected);
+        verify(checkConfig, getPath("InputJavaDocParagraphIncorrect.java"), expected);
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
index c71e130e8f..4e1851a096 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -258,6 +258,25 @@ public void testInvalidInfluenceFormat() throws Exception {
         }
     }
 
+    @Test
+    public void testInfluenceFormat() throws Exception {
+        final DefaultConfiguration filterConfig =
+                createFilterConfig(SuppressWithNearbyCommentFilter.class);
+        filterConfig.addAttribute("influenceFormat", "1");
+
+        final String[] suppressed = {
+            "14:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "15:17: Name 'A2' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "16:59: Name 'A3' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "18:17: Name 'B1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "19:17: Name 'B2' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "20:59: Name 'B3' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "80:59: Name 'A2' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+            "81:17: Name 'A1' must match pattern '^[a-z][a-zA-Z0-9]*$'.",
+        };
+        verifySuppressed(filterConfig, suppressed);
+    }
+
     @Test
     public void testInvalidCheckFormat() throws Exception {
         final DefaultConfiguration filterConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/AstRegressionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/AstRegressionTest.java
index 4100fcd1e2..5784e8964f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/AstRegressionTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/AstRegressionTest.java
@@ -152,7 +152,7 @@ public void testCustomAstTree() throws Exception {
     @Test
     public void testNewlineCr() throws Exception {
         verifyAst(super.getPath("/checks/InputNewlineCrAtEndOfFileAst.txt"),
-                super.getPath("/checks/InputNewlineCrAtEndOfFile.java"), true);
+                super.getPath("/checks/InputAstRegressionNewlineCrAtEndOfFile.java"), true);
     }
 
     @Test
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputAstRegressionNewlineCrAtEndOfFile.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputAstRegressionNewlineCrAtEndOfFile.java
new file mode 100755
index 0000000000..46e2b3962f
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputAstRegressionNewlineCrAtEndOfFile.java
@@ -0,0 +1 @@
+////////////////////////////////////////////////////////////////////////////////// Test case file for checkstyle.// Created: 2015////////////////////////////////////////////////////////////////////////////////package com.puppycrawl.tools.checkstyle.checks;/** * Test case for detection of an existing CR newline at EOF, using the  * NewlineAtEndOfFileCheck. * @author Martin Steiger **/public interface InputAstRegressionNewlineCrAtEndOfFile{/** Test with ending with CR newline*/}
\ No newline at end of file
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFileAst.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFileAst.txt
index 9d1e889cc9..30609ef584 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFileAst.txt
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFileAst.txt
@@ -25,7 +25,7 @@ INTERFACE_DEF -> INTERFACE_DEF [12:0]
 |   |   `--BLOCK_COMMENT_END -> */ [11:2]
 |   `--LITERAL_PUBLIC -> public [12:0]
 |--LITERAL_INTERFACE -> interface [12:7]
-|--IDENT -> InputNewlineCrAtEndOfFile [12:17]
+|--IDENT -> InputAstRegressionNewlineCrAtEndOfFile [12:17]
 `--OBJBLOCK -> OBJBLOCK [13:0]
     |--LCURLY -> { [13:0]
     |--BLOCK_COMMENT_BEGIN -> /* [14:0]
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputBadCls.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputBadCls.java
deleted file mode 100755
index 6082756e10..0000000000
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputBadCls.java
+++ /dev/null
@@ -1,6 +0,0 @@
-package com.puppycrawl.tools.checkstyle.checks.javadoc;
-
-class InputBadCls {
-    class X extends Exception {}
-    void m() throws X {}
-}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadCls.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadCls.java
new file mode 100755
index 0000000000..2c0072a599
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadCls.java
@@ -0,0 +1,6 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocpackage;
+
+class InputJavadocPackageBadCls {
+    class X extends Exception {}
+    void m() throws X {}
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadTag.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadTag.java
new file mode 100755
index 0000000000..46aa084581
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageBadTag.java
@@ -0,0 +1,9 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocpackage;
+
+/**
+ * The following is a bad tag.
+ * @mytag Hello
+ */
+public class InputJavadocPackageBadTag
+{
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageNoJavadoc.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageNoJavadoc.java
new file mode 100755
index 0000000000..036c2dcefb
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/InputJavadocPackageNoJavadoc.java
@@ -0,0 +1,120 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocpackage;
+
+public class InputJavadocPackageNoJavadoc //comment test
+{
+    public int i1;
+    protected int i2;
+    int i3;
+    private int i4;
+
+    public void foo1() {}
+    protected void foo2() {}
+    void foo3() {}
+    private void foo4() {}
+
+    protected class ProtectedInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    class PackageInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    private class PrivateInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+}
+
+class PackageClass {
+    public int i1;
+    protected int i2;
+    int i3;
+    private int i4;
+
+    public void foo1() {}
+    protected void foo2() {}
+    void foo3() {}
+    private void foo4() {}
+
+    public class PublicInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    protected class ProtectedInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    class PackageInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    private class PrivateInner {
+        public int i1;
+        protected int i2;
+        int i3;
+        private int i4;
+
+        public void foo1() {}
+        protected void foo2() {}
+        void foo3() {}
+        private void foo4() {}
+    }
+
+    class IgnoredName {
+        // ignore by name
+        private int logger;
+        // no warning, 'serialVersionUID' fields do not require Javadoc
+        private static final long serialVersionUID = 0;
+    }
+
+    /**/
+    void methodWithTwoStarComment() {}
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/annotation/package-info.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/annotation/package-info.java
new file mode 100755
index 0000000000..fbdd526592
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/annotation/package-info.java
@@ -0,0 +1,12 @@
+/**
+ * This is a valid package documentation.  <--- See the period after the
+ * first sentence.
+ *
+ * <p>
+ * hurray for javadocs in html
+ * <br>
+ * with a legacy non-closed br element
+ * </p>
+ */
+@Deprecated
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocpackage.annotation;
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/InputJavadocPackageBothIgnored.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/InputJavadocPackageBothIgnored.java
new file mode 100755
index 0000000000..93c48faaf2
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/InputJavadocPackageBothIgnored.java
@@ -0,0 +1,5 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javapackage.bothfiles;
+
+class InputJavadocPackageBothIgnored
+{
+}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/package-info.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/package-info.java
new file mode 100755
index 0000000000..c8a22909e1
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/package-info.java
@@ -0,0 +1 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.bothfiles;
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/pkghtml/package.html b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/package.html
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/pkghtml/package.html
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/bothfiles/package.html
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/pkghtml/InputIgnored.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/InputJavadocPackageHtmlIgnored.java
similarity index 65%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/pkghtml/InputIgnored.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/InputJavadocPackageHtmlIgnored.java
index 374955c862..f35f19707c 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/pkghtml/InputIgnored.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/InputJavadocPackageHtmlIgnored.java
@@ -1,5 +1,5 @@
 package com.puppycrawl.tools.checkstyle.checks.javadoc.pkghtml;
 
-class InputIgnored
+class InputJavadocPackageHtmlIgnored
 {
 }
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/package.html b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/package.html
new file mode 100755
index 0000000000..739cd584a2
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocpackage/pkghtml/package.html
@@ -0,0 +1 @@
+Ignored
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphCorrect.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphCorrect.java
new file mode 100755
index 0000000000..c4dafe3f50
--- /dev/null
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphCorrect.java
@@ -0,0 +1,112 @@
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocparagraph;
+
+/**
+ * Some Javadoc.
+ *
+ * <p>Some Javadoc.
+ *
+ */
+class InputCorrectJavaDocParagraphCorrect {
+
+    /**
+     * Some Javadoc.
+     *   
+     * <p>{@code function} will never be invoked with a null value.
+     *
+     * @since 8.0
+     */
+    public static final byte NUL = 0;
+       
+    /**
+     * Some Javadoc.
+     *
+     * <p>Some Javadoc.
+     * 
+     * <pre>
+     * class Foo {
+     * 
+     *   void foo() {}
+     * }
+     * </pre>
+     *
+     * @see <a href="http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules">
+     *     Documentation about GWT emulated source</a>
+     */
+    boolean emulated() {return false;}
+    
+    /**
+     * Some Javadoc.
+     * 
+     *<pre>
+     * Test
+     * </pre>
+     * 
+     * <pre>
+     * Test
+     * </pre>
+     */
+    boolean test() {return false;}
+    
+    /**
+     * Some Javadoc.
+     *
+     * <p>Some Javadoc.
+     *
+     */
+     class InnerInputCorrectJavaDocParagraphCheck {
+
+        /**
+         * Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * @since 8.0
+         */
+        public static final byte NUL = 0;
+           
+        /**
+         * Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * @see <a href="http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules">
+         *     Documentation about GWT emulated source</a>
+         */
+        boolean emulated() {return false;}
+    }
+    
+    InnerInputCorrectJavaDocParagraphCheck anon = new InnerInputCorrectJavaDocParagraphCheck() {
+
+    	/**
+         * Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * @since 8.0
+         */
+        public static final byte NUL = 0;
+           
+        /** 
+         * Some Javadoc with space at the end of first line.
+         *
+         * <p>Some Javadoc.
+         *
+         * <p>Some Javadoc.
+         *
+         * @see <a href="http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules">
+         *     Documentation about GWT emulated source</a>
+         */
+        boolean emulated() {return false;}
+    };
+}
+
+/*
+ *  This comment has paragraph without '<p>' tag.
+ *
+ *  It's fine, because this is plain comment.
+ */
+class ClassWithPlainComment {}
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputIncorrectJavaDocParagraph.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphIncorrect.java
similarity index 94%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputIncorrectJavaDocParagraph.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphIncorrect.java
index f827ce4eb5..8ef60a4c13 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/InputIncorrectJavaDocParagraph.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/javadocparagraph/InputJavaDocParagraphIncorrect.java
@@ -1,4 +1,4 @@
-package com.puppycrawl.tools.checkstyle.checks.javadoc;
+package com.puppycrawl.tools.checkstyle.checks.javadoc.javadocparagraph;
 
 
 
@@ -8,7 +8,7 @@
  * /^ WARN/   Some Javadoc.<p> //WARN
  *
  */
-class InputIncorrectJavaDocParagraph {
+class InputJavaDocParagraphIncorrect {
 
     /**
      * Some Javadoc.<P>  //WARN
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputEmptyFile.txt b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputEmptyFile.txt
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputEmptyFile.txt
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputEmptyFile.txt
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFile.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrAtEndOfFile.java
similarity index 100%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrAtEndOfFile.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrAtEndOfFile.java
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrlfAtEndOfFile.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrlfAtEndOfFile.java
similarity index 84%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrlfAtEndOfFile.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrlfAtEndOfFile.java
index 8cdfa10c76..fd93ac6913 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineCrlfAtEndOfFile.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineCrlfAtEndOfFile.java
@@ -2,7 +2,7 @@
 // Test case file for checkstyle.
 // Created: 2015
 ////////////////////////////////////////////////////////////////////////////////
-package com.puppycrawl.tools.checkstyle.checks;
+package com.puppycrawl.tools.checkstyle.checks.misc.newlineatendoffile;
 
 /**
  * Test case for detection of an existing CRLF newline at EOF, using the 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineLfAtEndOfFile.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineLfAtEndOfFile.java
similarity index 84%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineLfAtEndOfFile.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineLfAtEndOfFile.java
index 08ec9c937c..bc8a9f8ceb 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNewlineLfAtEndOfFile.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNewlineLfAtEndOfFile.java
@@ -2,7 +2,7 @@
 // Test case file for checkstyle.
 // Created: 2015
 ////////////////////////////////////////////////////////////////////////////////
-package com.puppycrawl.tools.checkstyle.checks;
+package com.puppycrawl.tools.checkstyle.checks.misc.newlineatendoffile;
 
 /**
  * Test case for detection of an existing LF newline at EOF, using the 
diff --git a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNoNewlineAtEndOfFile.java b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNoNewlineAtEndOfFile.java
similarity index 84%
rename from src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNoNewlineAtEndOfFile.java
rename to src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNoNewlineAtEndOfFile.java
index 218e617279..dbcb78f923 100755
--- a/src/test/resources/com/puppycrawl/tools/checkstyle/checks/InputNoNewlineAtEndOfFile.java
+++ b/src/test/resources/com/puppycrawl/tools/checkstyle/checks/misc/newlineatendoffile/InputNoNewlineAtEndOfFile.java
@@ -2,7 +2,7 @@
 // Test case file for checkstyle.
 // Created: 2003
 ////////////////////////////////////////////////////////////////////////////////
-package com.puppycrawl.tools.checkstyle.checks;
+package com.puppycrawl.tools.checkstyle.checks.misc.newlineatendoffile;
 
 /**
  * Test case for detection of missing newlines at EOF, using the
