diff --git a/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java b/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
index 1f144d8ea9..5f384c70cf 100755
--- a/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
+++ b/dropwizard-auth/src/main/java/io/dropwizard/auth/AuthDynamicFeature.java
@@ -31,17 +31,20 @@
  */
 public class AuthDynamicFeature implements DynamicFeature {
 
-    @Nullable
     private final ContainerRequestFilter authFilter;
 
-    @Nullable
     private final Class<? extends ContainerRequestFilter> authFilterClass;
 
+    // We suppress the null away checks, as adding `@Nullable` to the auth
+    // filter fields, causes Jersey to try and resolve the fields to a concrete
+    // type (which subsequently fails).
+    @SuppressWarnings("NullAway")
     public AuthDynamicFeature(ContainerRequestFilter authFilter) {
         this.authFilter = authFilter;
         this.authFilterClass = null;
     }
 
+    @SuppressWarnings("NullAway")
     public AuthDynamicFeature(Class<? extends ContainerRequestFilter> authFilterClass) {
         this.authFilter = null;
         this.authFilterClass = authFilterClass;
diff --git a/dropwizard-migrations/pom.xml b/dropwizard-migrations/pom.xml
index 09aa532076..e5d66de7a7 100755
--- a/dropwizard-migrations/pom.xml
+++ b/dropwizard-migrations/pom.xml
@@ -55,4 +55,18 @@
         </dependency>
 
     </dependencies>
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <dependencies>
+                    <dependency>
+                        <groupId>org.apache.maven.surefire</groupId>
+                        <artifactId>surefire-junit47</artifactId>
+                        <version>2.21.0</version>
+                    </dependency>
+                </dependencies>
+            </plugin>
+        </plugins>
+    </build>
 </project>
diff --git a/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCalculateChecksumCommandTest.java b/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCalculateChecksumCommandTest.java
index f449767e4c..136ae660f8 100755
--- a/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCalculateChecksumCommandTest.java
+++ b/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbCalculateChecksumCommandTest.java
@@ -1,18 +1,17 @@
 package io.dropwizard.migrations;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import liquibase.change.CheckSum;
-import net.jcip.annotations.NotThreadSafe;
-import net.sourceforge.argparse4j.inf.Namespace;
-import org.junit.Test;
-
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.util.concurrent.atomic.AtomicBoolean;
-
-import static org.assertj.core.api.Assertions.assertThat;
+import liquibase.change.CheckSum;
+import net.jcip.annotations.NotThreadSafe;
+import net.sourceforge.argparse4j.inf.Namespace;
+import org.junit.Test;
 
 @NotThreadSafe
 public class DbCalculateChecksumCommandTest extends AbstractMigrationTest {
@@ -24,7 +23,7 @@
     public void testRun() throws Exception {
         final AtomicBoolean checkSumVerified = new AtomicBoolean();
         migrateCommand.setCheckSumConsumer(checkSum -> {
-            assertThat(checkSum).isEqualTo(CheckSum.parse("7:3a61a7a72c9ce082b7059215975e6e09"));
+            assertThat(checkSum).isEqualTo(CheckSum.parse("8:0f3683b37321ccfb1694a044986de4d9"));
             checkSumVerified.set(true);
         });
         migrateCommand.run(null, new Namespace(ImmutableMap.of("id", ImmutableList.of("2"),
diff --git a/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java b/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
index 194ec17ff2..123bca0965 100755
--- a/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
+++ b/dropwizard-migrations/src/test/java/io/dropwizard/migrations/DbDumpCommandTest.java
@@ -1,22 +1,11 @@
 package io.dropwizard.migrations;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterables;
 import com.google.common.io.Resources;
-import net.jcip.annotations.NotThreadSafe;
-import net.sourceforge.argparse4j.inf.Namespace;
-import org.apache.commons.lang3.StringUtils;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NodeList;
-import org.xml.sax.SAXException;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -29,8 +18,18 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
-import static org.assertj.core.api.Assertions.assertThat;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import net.jcip.annotations.NotThreadSafe;
+import net.sourceforge.argparse4j.inf.Namespace;
+import org.apache.commons.lang3.StringUtils;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
 
 @NotThreadSafe
 public class DbDumpCommandTest extends AbstractMigrationTest {
@@ -192,7 +191,7 @@ private static void assertCreateTable(Element changeSet) {
         final Element idColumn = (Element) columns.item(0);
         assertThat(idColumn.getAttribute("autoIncrement")).isEqualTo("true");
         assertThat(idColumn.getAttribute("name")).isEqualTo("ID");
-        assertThat(idColumn.getAttribute("type")).isEqualTo("INT(10)");
+        assertThat(idColumn.getAttribute("type")).isEqualTo("INT");
         final Element idColumnConstraints = getFirstElement(idColumn, "constraints");
         assertThat(idColumnConstraints.getAttribute("primaryKey")).isEqualTo("true");
         assertThat(idColumnConstraints.getAttribute("primaryKeyName")).isEqualTo("PK_PERSONS");
diff --git a/dropwizard-migrations/src/test/resources/test-db.mv.db b/dropwizard-migrations/src/test/resources/test-db.mv.db
index 9735a0dbe0..305d31ed7b 100755
Binary files a/dropwizard-migrations/src/test/resources/test-db.mv.db and b/dropwizard-migrations/src/test/resources/test-db.mv.db differ
