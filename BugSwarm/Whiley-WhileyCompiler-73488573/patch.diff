diff --git a/modules/wycs/src/wycs/builders/Wyal2WycsBuilder.java b/modules/wycs/src/wycs/builders/Wyal2WycsBuilder.java
index 7f931c084a..178480c7fb 100755
--- a/modules/wycs/src/wycs/builders/Wyal2WycsBuilder.java
+++ b/modules/wycs/src/wycs/builders/Wyal2WycsBuilder.java
@@ -351,6 +351,26 @@ public NameID resolveAsName(String name, WyalFile.Context context)
 		throw new ResolveError("name not found: " + name);
 	}
 
+	public Path.ID resolveAsModule(String name, WyalFile.Context context) throws ResolveError {
+		// Search the imports list to find it.				
+		for (WyalFile.Import imp : context.imports()) {
+			for (Path.ID id : imports(imp.filter)) {
+				try {
+					if(id.last().equals(name)) {
+						return id;
+					}
+				} catch(SyntaxError e) {
+					throw e;
+				} catch (Exception e) {
+					internalFailure(e.getMessage(), context.file().filename(),
+							context, e);
+				}
+			}
+		}
+				
+		throw new ResolveError("module not found: " + name);	
+	}
+	
 	/**
 	 * This function must be called after stubs are created.
 	 * @param name
@@ -388,6 +408,9 @@ public NameID resolveAsName(String name, WyalFile.Context context)
 		// so that we can then choose the best fit.
 		try {
 			WycsFile wf = getModule(nid.module());
+			if(wf == null) {
+				throw new ResolveError("module not found: " + nid.module());
+			}
 			ArrayList<SemanticType.Function> fnTypes = new ArrayList<SemanticType.Function>();
 			for (WycsFile.Declaration d : wf.declarations()) {
 				if (d.name().equals(nid.name())) {
diff --git a/modules/wycs/src/wycs/transforms/TypePropagation.java b/modules/wycs/src/wycs/transforms/TypePropagation.java
index 1f40956b8b..e18aba9651 100755
--- a/modules/wycs/src/wycs/transforms/TypePropagation.java
+++ b/modules/wycs/src/wycs/transforms/TypePropagation.java
@@ -14,6 +14,7 @@
 import wycs.core.SemanticType;
 import wycs.core.Value;
 import wycs.syntax.*;
+import wyfs.lang.Path;
 
 public class TypePropagation implements Transform<WyalFile> {
 
@@ -526,10 +527,14 @@ private SemanticType propagate(Expr.Invoke e,
 				fnType = p.second();
 				binding = p.third();
 			} else {
-				// In this case, a package qualification has been given. Hence,
-				// we know the fully name identifier for this function and we
-				// need only to check it exists and access the relevant
-				// information.
+				if(e.qualification.size() == 1) {
+					e.qualification = builder.resolveAsModule(e.qualification.last(), context);
+				} else {
+					// In this case, a complete package qualification has been given. Hence,
+					// we know the fully name identifier for this function and we
+					// need only to check it exists and access the relevant
+					// information.
+				}				
 				NameID nid = new NameID(e.qualification, e.name);
 				Pair<SemanticType.Function, Map<String, SemanticType>> p = builder
 						.resolveAsFunctionType(nid, argument, ivkGenerics,
diff --git a/modules/wycs/tests/valid/test_list_01.wyal b/modules/wycs/tests/valid/test_list_01.wyal
index 57f68c1cc4..329e868ee3 100755
--- a/modules/wycs/tests/valid/test_list_01.wyal
+++ b/modules/wycs/tests/valid/test_list_01.wyal
@@ -5,4 +5,4 @@ assert:
     if:
         Array.update(xs,ys,0,0)
     then:
-        xs[0] == 0
+        ys[0] == 0
diff --git a/modules/wyil/src/wyil/builders/VcGenerator.java b/modules/wyil/src/wyil/builders/VcGenerator.java
index 15809ea95b..aa20c8de33 100755
--- a/modules/wyil/src/wyil/builders/VcGenerator.java
+++ b/modules/wyil/src/wyil/builders/VcGenerator.java
@@ -35,6 +35,7 @@
 
 import wybs.lang.*;
 import wyfs.lang.Path;
+import wyfs.util.Trie;
 import wyil.attributes.VariableDeclarations;
 import wyil.builders.VcBranch.State;
 import wyil.lang.*;
@@ -63,7 +64,7 @@
 	private final Builder builder;
 	private final TypeExpander expander;
 	private String filename;
-	private WyalFile wycsFile;
+	private WyalFile wyalFile;
 	WyilFile.FunctionOrMethod method;
 
 	public VcGenerator(Builder builder) {
@@ -77,8 +78,9 @@ public VcGenerator(Builder builder) {
 
 	protected WyalFile transform(WyilFile wyilFile) {
 		filename = wyilFile.filename();
-		wycsFile = new WyalFile(wyilFile.id(), filename);
-
+		wyalFile = new WyalFile(wyilFile.id(), filename);
+		addImports();
+		
 		for (WyilFile.Block b : wyilFile.blocks()) {
 			if (b instanceof WyilFile.Constant) {
 				transform((WyilFile.Constant) b, wyilFile);
@@ -90,9 +92,16 @@ protected WyalFile transform(WyilFile wyilFile) {
 			}
 		}
 
-		return wycsFile;
+		return wyalFile;
 	}
 
+	/**
+	 * Add necessary imports from the theorem prover's library.
+	 */
+	private void addImports() {
+		wyalFile.add(wyalFile.new Import(Trie.fromString("wycs/core/Array"), null));
+	}
+	
 	protected void transform(WyilFile.Constant decl, WyilFile wyilFile) {
 		NameID name = new NameID(wyilFile.id(), decl.name());
 	}
@@ -136,7 +145,7 @@ protected void transform(WyilFile.Type typeDecl, WyilFile wyilFile) {
 		TypePattern.Leaf pattern = new TypePattern.Leaf(convert(
 				typeDecl.type(), Collections.EMPTY_LIST), var);
 
-		wycsFile.add(wycsFile.new Type(typeDecl.name(), Collections.EMPTY_LIST,
+		wyalFile.add(wyalFile.new Type(typeDecl.name(), Collections.EMPTY_LIST,
 				pattern, invariant, toWycsAttributes(typeDecl.attributes())));
 	}
 
@@ -227,7 +236,7 @@ protected void transform(WyilFile.FunctionOrMethod method, WyilFile wyilFile) {
 				Expr vc = buildVerificationCondition(
 						new Expr.Constant(Value.Bool(false)), branch,
 						bodyEnvironment, body);
-				wycsFile.add(wycsFile.new Assert("assertion failed", vc,
+				wyalFile.add(wyalFile.new Assert("assertion failed", vc,
 						toWycsAttributes(body.attributes(branch.pc()))));
 				break;
 			}
@@ -255,7 +264,7 @@ protected void transform(WyilFile.FunctionOrMethod method, WyilFile wyilFile) {
 						Expr vc = buildVerificationCondition(nominalTest,
 								branch, bodyEnvironment, body, rawTest);
 						// FIXME: add contextual information here
-						wycsFile.add(wycsFile.new Assert(
+						wyalFile.add(wyalFile.new Assert(
 								"return type invariant not satisfied", vc,
 								wycsAttributes));
 					}
@@ -282,7 +291,7 @@ protected void transform(WyilFile.FunctionOrMethod method, WyilFile wyilFile) {
 						Expr vc = buildVerificationCondition(macro, branch,
 								bodyEnvironment, body, rawTest);
 						// FIXME: add contextual information here
-						wycsFile.add(wycsFile.new Assert(
+						wyalFile.add(wyalFile.new Assert(
 								"postcondition not satisfied", vc,
 								toWycsAttributes(body.attributes(branch.pc()))));
 					}
@@ -484,7 +493,7 @@ protected void transform(WyilFile.FunctionOrMethod method, WyilFile wyilFile) {
 								Pair<String, Expr> p = preconditions[i];
 								Expr vc = buildVerificationCondition(
 										p.second(), branch, environment, block);
-								wycsFile.add(wycsFile.new Assert(p.first(), vc,
+								wyalFile.add(wyalFile.new Assert(p.first(), vc,
 										toWycsAttributes(block
 												.attributes(branch.pc()))));
 							}
@@ -1042,7 +1051,7 @@ private void joinAll(ArrayList<VcBranch> branches) {
 						invariantMacroName, variables);
 				Expr vc = buildVerificationCondition(invariant, activeBranch,
 						environment, block);
-				wycsFile.add(wycsFile.new Assert(
+				wyalFile.add(wyalFile.new Assert(
 						"loop invariant does not hold on entry", vc,
 						toWycsAttributes(block.attributes(invariantPc))));
 			}
@@ -1079,7 +1088,7 @@ private void joinAll(ArrayList<VcBranch> branches) {
 						invariantMacroName, variables);
 				Expr vc = buildVerificationCondition(invariant, activeBranch,
 						environment, block);
-				wycsFile.add(wycsFile.new Assert("loop invariant not restored",
+				wyalFile.add(wyalFile.new Assert("loop invariant not restored",
 						vc, toWycsAttributes(block.attributes(invariantPc))));
 			}
 			// Reposition fall-through
@@ -1193,7 +1202,7 @@ private void buildInvariantMacro(CodeBlock.Index invariantPC,
 		}
 		Expr argument = arguments.size() == 1 ? arguments.get(1)
 				: new Expr.Nary(Expr.Nary.Op.TUPLE, arguments);
-		return new Expr.Invoke(name, wycsFile.id(), Collections.EMPTY_LIST,
+		return new Expr.Invoke(name, wyalFile.id(), Collections.EMPTY_LIST,
 				argument);
 	}
 
@@ -1404,7 +1413,7 @@ public void havocVariables(int[] variables, VcBranch branch) {
 			Codes.AssertOrAssume code, boolean isAssert, VcBranch branch,
 			Type[] environment, Map<String, CodeBlock.Index> labels,
 			AttributedCodeBlock block) {
-		int start = wycsFile.declarations().size();
+		int start = wyalFile.declarations().size();
 		// First, transform the given branch through the assert or assume block.
 		// This will produce one or more exit branches, some of which may have
 		// reached failed states and need to be turned into verification
@@ -1433,8 +1442,8 @@ public void havocVariables(int[] variables, VcBranch branch) {
 			// FIXME: this is something of a hack for now. A better solution would
 			// be to pass a variable recursively down through the call stack which
 			// signaled that no verification conditions should be generated.
-			while(wycsFile.declarations().size() > start) {
-				wycsFile.declarations().remove(wycsFile.declarations().size()-1);
+			while(wyalFile.declarations().size() > start) {
+				wyalFile.declarations().remove(wyalFile.declarations().size()-1);
 			}
 		}
 		
@@ -1783,9 +1792,8 @@ protected Expr updateHelper(Iterator<Codes.LVal> iter, Expr source,
 					.attributes(branch.pc()));
 			Codes.LVal lv = iter.next();
 			if (lv instanceof Codes.RecordLVal) {
+				System.out.println("GOT HERE");
 				Codes.RecordLVal rlv = (Codes.RecordLVal) lv;
-
-				// FIXME: following is broken for open records.
 				ArrayList<String> fields = new ArrayList<String>(rlv.rawType()
 						.fields().keySet());
 				Collections.sort(fields);
@@ -1805,16 +1813,45 @@ protected Expr updateHelper(Iterator<Codes.LVal> iter, Expr source,
 			} else if (lv instanceof Codes.ListLVal) {
 				Codes.ListLVal rlv = (Codes.ListLVal) lv;
 				Expr index = branch.read(rlv.indexOperand);
-				result = updateHelper(iter, new Expr.IndexOf(source, index,
-						attributes), result, branch, block);
-				return new Expr.Ternary(Expr.Ternary.Op.UPDATE, source, index,
-						result, toWycsAttributes(block.attributes(branch.pc())));
+				Expr nSource = havoc(source,branch,block);
+				result = updateHelper(iter, new Expr.IndexOf(source, index, attributes), result, branch, block);
+				Expr arg = new Expr.Nary(Expr.Nary.Op.TUPLE, new Expr[] { source, nSource, index, result },
+						toWycsAttributes(block.attributes(branch.pc())));
+				Expr.Invoke macro = new Expr.Invoke("update", Trie.fromString("Array"),
+						Collections.EMPTY_LIST, arg);
+				branch.assume(macro);
+				return nSource; // broken
 			} else {
 				return source; // TODO
 			}
 		}
 	}
+	
 
+	/**
+	 * Havoc an "expression".  
+	 * 
+	 * @param source
+	 * @param branch
+	 * @param block
+	 * @return
+	 */
+	private Expr havoc(Expr source, VcBranch branch, AttributedCodeBlock block) {
+		if(source instanceof Expr.Variable) {
+			Expr.Variable v = (Expr.Variable) source;
+			int register = determineRegister(v.name,branch.prefixes()); 
+			branch.havoc(register);
+			return branch.read(register);
+		} else {
+			// TODO: Must implement the other cases. At the moment, I'm not sure
+			// the best way to do this though.
+		}
+		// It should be impossible to reach here.
+		internalFailure("unreachable code", filename);
+		return null;
+	}
+
+	
 	/**
 	 * Transform an assignable unary bytecode using a given target operator.
 	 * This must read the operand and then create the appropriate target
@@ -1867,29 +1904,6 @@ protected void transformBinary(Expr.Binary.Op operator,
 		}
 	}
 
-	/**
-	 * Transform an assignable ternary bytecode using a given target operator.
-	 * This must read all operands and then create the appropriate target
-	 * expression. Finally, the result of the bytecode must be written back to
-	 * the enclosing branch.
-	 * 
-	 * @param operator
-	 *            --- The target operator
-	 * @param code
-	 *            --- The bytecode being translated
-	 * @param branch
-	 *            --- The enclosing branch
-	 */
-	protected void transformTernary(Expr.Ternary.Op operator,
-			Code.AbstractNaryAssignable code, VcBranch branch,
-			AttributedCodeBlock block) {
-		Expr one = branch.read(code.operand(0));
-		Expr two = branch.read(code.operand(1));
-		Expr three = branch.read(code.operand(2));
-		branch.write(code.target(), new Expr.Ternary(operator, one, two, three,
-				toWycsAttributes(block.attributes(branch.pc()))));
-	}
-
 	/**
 	 * Transform an assignable nary bytecode using a given target operator. This
 	 * must read all operands and then create the appropriate target expression.
@@ -1998,7 +2012,7 @@ protected void transformNary(Expr.Nary.Op operator,
 	 */
 	protected void buildMacroBlock(String name, CodeBlock.Index root,
 			AttributedCodeBlock block, List<Type> types, boolean isInvariant) {
-		int start = wycsFile.declarations().size();
+		int start = wyalFile.declarations().size();
 		
 		// first, generate a branch for traversing the external block.
 		VcBranch master = new VcBranch(
@@ -2039,14 +2053,14 @@ protected void buildMacroBlock(String name, CodeBlock.Index root,
 		// FIXME: this is something of a hack for now. A better solution would
 		// be for the verification conditions to be returned so that they
 		// can be discussed.
-		while(wycsFile.declarations().size() > start) {
-			wycsFile.declarations().remove(wycsFile.declarations().size()-1);
+		while(wyalFile.declarations().size() > start) {
+			wyalFile.declarations().remove(wyalFile.declarations().size()-1);
 		}
 		//
 		for (VcBranch exitBranch : exitBranches) {
 			if (exitBranch.state() == VcBranch.State.TERMINATED) {
 				Expr body = generateAssumptions(exitBranch, null);
-				wycsFile.add(wycsFile.new Macro(name, Collections.EMPTY_LIST,
+				wyalFile.add(wyalFile.new Macro(name, Collections.EMPTY_LIST,
 						type, body));
 				return;
 			}
@@ -2084,7 +2098,7 @@ protected void buildFunctionBlock(String name, List<Type> params, Type ret) {
 		TypePattern to = new TypePattern.Leaf(convert(ret,
 				Collections.EMPTY_LIST), null);
 
-		wycsFile.add(wycsFile.new Function(name, Collections.EMPTY_LIST, from,
+		wyalFile.add(wyalFile.new Function(name, Collections.EMPTY_LIST, from,
 				to, null));
 	}
 
