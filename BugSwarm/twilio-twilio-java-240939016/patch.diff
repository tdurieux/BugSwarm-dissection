diff --git a/src/main/java/com/twilio/http/NetworkHttpClient.java b/src/main/java/com/twilio/http/NetworkHttpClient.java
index 6f59b57718..e8c60fd276 100755
--- a/src/main/java/com/twilio/http/NetworkHttpClient.java
+++ b/src/main/java/com/twilio/http/NetworkHttpClient.java
@@ -4,6 +4,7 @@
 import com.twilio.Twilio;
 import com.twilio.exception.ApiException;
 import org.apache.http.Header;
+import org.apache.http.HttpEntity;
 import org.apache.http.HttpHeaders;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpVersion;
@@ -56,7 +57,7 @@ public NetworkHttpClient() {
     /**
      * Create a new HTTP Client using custom configuration
      */
-    public NetworkHttpClient(HttpClientBuilder clientBuilder){
+    public NetworkHttpClient(HttpClientBuilder clientBuilder) {
         Collection<Header> headers = Lists.<Header>newArrayList(
                 new BasicHeader("X-Twilio-Client", "java-" + Twilio.VERSION),
                 new BasicHeader(HttpHeaders.USER_AGENT, "twilio-java/" + Twilio.VERSION + " (" + Twilio.JAVA_VERSION + ") custom"),
@@ -77,7 +78,8 @@ public NetworkHttpClient(HttpClientBuilder clientBuilder){
      */
     public Response makeRequest(final Request request) {
 
-        RequestBuilder builder = RequestBuilder.create(request.getMethod().toString())
+        HttpMethod method = request.getMethod();
+        RequestBuilder builder = RequestBuilder.create(method.toString())
             .setUri(request.constructURL().toString())
             .setVersion(HttpVersion.HTTP_1_1)
             .setCharset(StandardCharsets.UTF_8);
@@ -86,7 +88,6 @@ public Response makeRequest(final Request request) {
             builder.addHeader(HttpHeaders.AUTHORIZATION, request.getAuthString());
         }
 
-        HttpMethod method = request.getMethod();
         if (method == HttpMethod.POST) {
             builder.addHeader(HttpHeaders.CONTENT_TYPE, "application/x-www-form-urlencoded");
 
@@ -101,10 +102,10 @@ public Response makeRequest(final Request request) {
 
         try {
             response = client.execute(builder.build());
+            HttpEntity entity = response.getEntity();
             return new Response(
-
                 // Consume the entire HTTP response before returning the stream
-                response.getEntity() == null ? null : new BufferedHttpEntity(response.getEntity()).getContent(),
+                entity == null ? null : new BufferedHttpEntity(entity).getContent(),
                 response.getStatusLine().getStatusCode()
             );
         } catch (IOException e) {
diff --git a/src/test/java/com/twilio/http/NetworkHttpClientTest.java b/src/test/java/com/twilio/http/NetworkHttpClientTest.java
index 34f7f65ef6..4be2204357 100755
--- a/src/test/java/com/twilio/http/NetworkHttpClientTest.java
+++ b/src/test/java/com/twilio/http/NetworkHttpClientTest.java
@@ -5,6 +5,13 @@
 import mockit.Mocked;
 import mockit.NonStrictExpectations;
 import mockit.Tested;
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.StatusLine;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
@@ -14,6 +21,7 @@
 import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.util.Collection;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
@@ -21,55 +29,427 @@
 public class NetworkHttpClientTest {
 
     @Tested
-    private NetworkHttpClient tested;
+    private NetworkHttpClient client;
+
+    private void setupGet(
+        final int statusCode,
+        String content,
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
+
+        new Expectations() {{
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
 
-    @Mocked
-    private Request mockRequest;
+            mockBuilder.build();
+            result = mockClient;
+
+            mockRequest.getMethod();
+            result = HttpMethod.GET;
 
-    @Mocked
-    private URL mockUrl;
+            mockRequest.constructURL();
+            result = mockUrl;
 
-    @Mocked
-    private HttpURLConnection mockConn;
+            mockRequest.requiresAuthentication();
+            result = false;
 
-    @Mocked
-    private OutputStream mockOutputStream;
+            mockClient.execute((HttpUriRequest) any);
+            result = mockResponse;
 
-    @Mocked
-    private OutputStreamWriter mockWriter;
+            mockResponse.getEntity();
+            result = mockEntity;
 
-    @Test
-    public void testGet() throws IOException {
-        String content = "frobozz";
+            mockEntity.isRepeatable();
+            result = true;
+
+            mockEntity.getContentLength();
+            result = 1;
+
+            mockEntity.getContent();
+            result = stream;
+
+            mockResponse.getStatusLine();
+            result = mockStatusLine;
+
+            mockStatusLine.getStatusCode();
+            result = statusCode;
+
+            mockResponse.getEntity();
+            result = null;
+        }};
+    }
+
+    private void setupPost(
+            final int statusCode,
+            String content,
+            @Mocked final Request mockRequest,
+            @Mocked final URL mockUrl,
+            @Mocked final HttpURLConnection mockConn,
+            @Mocked final HttpClientBuilder mockBuilder,
+            @Mocked final CloseableHttpClient mockClient,
+            @Mocked final CloseableHttpResponse mockResponse,
+            @Mocked final StatusLine mockStatusLine,
+            @Mocked final HttpEntity mockEntity,
+            @Mocked final OutputStream mockOutputStream,
+            @Mocked final OutputStreamWriter mockWriter
+    ) throws IOException {
         final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
 
         new Expectations() {{
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
+
+            mockBuilder.build();
+            result = mockClient;
+
+            mockRequest.getMethod();
+            result = HttpMethod.POST;
+
             mockRequest.constructURL();
             result = mockUrl;
+
+            mockRequest.requiresAuthentication();
+            result = false;
+
+            mockRequest.getPostParams();
+
+            mockClient.execute((HttpUriRequest) any);
+            result = mockResponse;
+
+            mockResponse.getEntity();
+            result = mockEntity;
+
+            mockEntity.isRepeatable();
+            result = true;
+
+            mockEntity.getContentLength();
+            result = 1;
+
+            mockEntity.getContent();
+            result = stream;
+
+            mockResponse.getStatusLine();
+            result = mockStatusLine;
+
+            mockStatusLine.getStatusCode();
+            result = statusCode;
+
+            mockResponse.getEntity();
+            result = null;
+
+//            mockUrl.openConnection();
+//            result = mockConn;
+//
+//            mockConn.setAllowUserInteraction(false);
+//            mockConn.addRequestProperty("Accept", "application/json");
+//            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
+//            mockConn.setInstanceFollowRedirects(true);
+//            mockConn.setRequestMethod("POST");
+//            mockConn.setDoOutput(true);
+//            mockConn.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+//            mockConn.connect();
+//
+//            mockRequest.encodeFormBody();
+//            result = "foo=bar&baz=quux";
+//
+//            mockConn.getOutputStream();
+//            result = mockOutputStream;
+//
+//            new OutputStreamWriter(mockOutputStream);
+//            result = mockWriter;
+//
+//            mockWriter.write("foo=bar&baz=quux");
+//            mockWriter.close();
+//
+//            mockConn.getResponseCode();
+//            result = statusCode;
+//
+//            mockConn.getErrorStream();
+//            result = null;
+//
+//            mockConn.getInputStream();
+//            result = stream;
+        }};
+    }
+
+    private void setupDelete(
+            final int statusCode,
+            String content,
+            @Mocked final Request mockRequest,
+            @Mocked final URL mockUrl,
+            @Mocked final HttpURLConnection mockConn,
+            @Mocked final HttpClientBuilder mockBuilder,
+            @Mocked final CloseableHttpClient mockClient,
+            @Mocked final CloseableHttpResponse mockResponse,
+            @Mocked final StatusLine mockStatusLine,
+            @Mocked final HttpEntity mockEntity,
+            @Mocked final OutputStream mockOutputStream,
+            @Mocked final OutputStreamWriter mockWriter
+    ) throws IOException {
+        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
+
+        new Expectations() {{
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
+
+            mockBuilder.build();
+            result = mockClient;
+
             mockRequest.getMethod();
-            result = HttpMethod.GET;
-            mockUrl.openConnection();
-            result = mockConn;
-            mockConn.setAllowUserInteraction(false);
-            mockConn.addRequestProperty("Accept", "application/json");
-            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
-            mockConn.setInstanceFollowRedirects(true);
+            result = HttpMethod.DELETE;
 
-            mockConn.setRequestMethod("GET");
+            mockRequest.constructURL();
+            result = mockUrl;
 
             mockRequest.requiresAuthentication();
             result = false;
-            mockConn.connect();
 
-            mockConn.getResponseCode();
-            result = 200;
-            mockConn.getErrorStream();
+            mockClient.execute((HttpUriRequest) any);
+            result = mockResponse;
+
+            mockResponse.getEntity();
+            result = mockEntity;
+
+            mockEntity.isRepeatable();
+            result = true;
+
+            mockEntity.getContentLength();
+            result = 1;
+
+            mockEntity.getContent();
+            result = stream;
+
+            mockResponse.getStatusLine();
+            result = mockStatusLine;
+
+            mockStatusLine.getStatusCode();
+            result = statusCode;
+
+            mockResponse.getEntity();
             result = null;
-            mockConn.getInputStream();
+
+//            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+//            result = mockBuilder;
+//
+//            mockBuilder.build();
+//            result = mockClient;
+//
+//            mockRequest.getMethod();
+//            result = HttpMethod.DELETE;
+//
+//            mockRequest.constructURL();
+//            result = mockUrl;
+//
+//            mockRequest.requiresAuthentication();
+//            result = false;
+//
+//            mockUrl.openConnection();
+//            result = mockConn;
+//
+//            mockConn.setAllowUserInteraction(false);
+//            mockConn.addRequestProperty("Accept", "application/json");
+//            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
+//            mockConn.setInstanceFollowRedirects(true);
+//            mockConn.setRequestMethod("DELETE");
+//
+//            mockConn.connect();
+//
+//            mockConn.getResponseCode();
+//            result = statusCode;
+//
+//            mockConn.getErrorStream();
+//            result = null;
+//
+//            mockConn.getInputStream();
+//            result = stream;
+        }};
+    }
+
+    private void setupAuthedGet(
+            final int statusCode,
+            String content,
+            @Mocked final Request mockRequest,
+            @Mocked final URL mockUrl,
+            @Mocked final HttpURLConnection mockConn,
+            @Mocked final HttpClientBuilder mockBuilder,
+            @Mocked final CloseableHttpClient mockClient,
+            @Mocked final CloseableHttpResponse mockResponse,
+            @Mocked final StatusLine mockStatusLine,
+            @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
+
+        new Expectations() {{
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
+
+            mockBuilder.build();
+            result = mockClient;
+
+            mockRequest.getMethod();
+            result = HttpMethod.GET;
+
+            mockRequest.constructURL();
+            result = mockUrl;
+
+            mockRequest.requiresAuthentication();
+            result = true;
+
+            mockRequest.getAuthString();
+            result = "foo:bar";
+
+            mockClient.execute((HttpUriRequest) any);
+            result = mockResponse;
+
+            mockResponse.getEntity();
+            result = mockEntity;
+
+            mockEntity.isRepeatable();
+            result = true;
+
+            mockEntity.getContentLength();
+            result = 1;
+
+            mockEntity.getContent();
             result = stream;
+
+            mockResponse.getStatusLine();
+            result = mockStatusLine;
+
+            mockStatusLine.getStatusCode();
+            result = statusCode;
+
+            mockResponse.getEntity();
+            result = null;
+//
+//            mockUrl.openConnection();
+//            result = mockConn;
+//
+//            mockConn.setAllowUserInteraction(false);
+//            mockConn.addRequestProperty("Accept", "application/json");
+//            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
+//            mockConn.setInstanceFollowRedirects(true);
+//            mockConn.setRequestMethod("GET");
+//
+//            mockConn.setRequestProperty("Authorization", "Basic Zm9vOmJhcg==");
+//
+//            mockConn.connect();
+//
+//            mockConn.getResponseCode();
+//            result = statusCode;
+//
+//            mockConn.getErrorStream();
+//            result = null;
+//
+//            mockConn.getInputStream();
+//            result = stream;
         }};
+    }
 
-        NetworkHttpClient client = new NetworkHttpClient();
+    private void setupErrorResponse(
+            final int statusCode,
+            String content,
+            @Mocked final Request mockRequest,
+            @Mocked final URL mockUrl,
+            @Mocked final HttpURLConnection mockConn,
+            @Mocked final HttpClientBuilder mockBuilder,
+            @Mocked final CloseableHttpClient mockClient,
+            @Mocked final CloseableHttpResponse mockResponse,
+            @Mocked final StatusLine mockStatusLine,
+            @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
+
+        new Expectations() {{
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
+
+            mockBuilder.build();
+            result = mockClient;
+
+            mockRequest.getMethod();
+            result = HttpMethod.GET;
+
+            mockRequest.constructURL();
+            result = mockUrl;
+
+            mockRequest.requiresAuthentication();
+            result = true;
+
+            mockRequest.getAuthString();
+            result = "foo:bar";
+
+            mockClient.execute((HttpUriRequest) any);
+            result = mockResponse;
+
+            mockResponse.getEntity();
+            result = mockEntity;
+
+            mockEntity.isRepeatable();
+            result = true;
+
+            mockEntity.getContentLength();
+            result = 1;
+
+            mockEntity.getContent();
+            result = stream;
+
+            mockResponse.getStatusLine();
+            result = mockStatusLine;
+
+            mockStatusLine.getStatusCode();
+            result = statusCode;
+
+            mockResponse.getEntity();
+            result = null;
+
+//            mockConn.setAllowUserInteraction(false);
+//            mockConn.addRequestProperty("Accept", "application/json");
+//            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
+//            mockConn.setInstanceFollowRedirects(true);
+//            mockConn.setRequestMethod("GET");
+//
+//            mockConn.setRequestProperty("Authorization", "Basic Zm9vOmJhcg==");
+//            mockConn.connect();
+//
+//            mockConn.getResponseCode();
+//            result = statusCode;
+//
+//            mockConn.getErrorStream();
+//            result = stream;
+        }};
+    }
+
+    @Test
+    public void testGet(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        setupGet(
+            200,
+            "frobozz",
+            mockRequest,
+            mockUrl,
+            mockBuilder,
+            mockClient,
+            mockResponse,
+            mockStatusLine,
+            mockEntity
+        );
+
+        client = new NetworkHttpClient(mockBuilder);
         Response resp = client.makeRequest(mockRequest);
 
         assertEquals(resp.getStatusCode(), 200);
@@ -77,61 +457,70 @@ public void testGet() throws IOException {
     }
 
     @Test(expected = ApiConnectionException.class)
-    public void testMakeRequestIOException() throws IOException {
-        NetworkHttpClient client = new NetworkHttpClient();
-
+    public void testMakeRequestIOException(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse
+    ) throws IOException {
         new NonStrictExpectations() {{
-            mockUrl.openConnection();
-            result = new IOException();
-        }};
+            mockBuilder.setDefaultHeaders((Collection<Header>) any);
+            result = mockBuilder;
 
-        client.makeRequest(new Request(HttpMethod.GET, "http://www.example.com"));
-        fail("ApiConnectionException was expected");
-    }
+            mockBuilder.build();
+            result = mockClient;
 
-    @Test
-    public void testPost() throws IOException {
-        String content = "frobozz";
-        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
+            mockRequest.getMethod();
+            result = HttpMethod.GET;
 
-        new Expectations() {{
             mockRequest.constructURL();
             result = mockUrl;
-            mockRequest.getMethod();
-            result = HttpMethod.POST;
-            mockUrl.openConnection();
-            result = mockConn;
-            mockConn.setAllowUserInteraction(false);
-            mockConn.addRequestProperty("Accept", "application/json");
-            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
-            mockConn.setInstanceFollowRedirects(true);
-
-            mockConn.setRequestMethod("POST");
 
             mockRequest.requiresAuthentication();
-            result = false;
-            mockConn.setDoOutput(true);
-            mockConn.addRequestProperty("Content-Type", "application/x-www-form-urlencoded");
-            mockConn.connect();
-
-            mockRequest.encodeFormBody();
-            result = "foo=bar&baz=quux";
-            mockConn.getOutputStream();
-            result = mockOutputStream;
-            new OutputStreamWriter(mockOutputStream);
-            result = mockWriter;
-            mockWriter.write("foo=bar&baz=quux");
-            mockWriter.close();
-
-            mockConn.getResponseCode();
-            result = 201;
-            mockConn.getErrorStream();
-            result = null;
-            mockConn.getInputStream();
-            result = stream;
+            result = true;
+
+            mockRequest.getAuthString();
+            result = "foo:bar";
+
+            mockClient.execute((HttpUriRequest) any);
+            result = new ApiConnectionException("foo");
         }};
 
-        NetworkHttpClient client = new NetworkHttpClient();
+        client = new NetworkHttpClient(mockBuilder);
+        client.makeRequest(mockRequest);
+        fail("ApiConnectionException was expected");
+    }
+
+    @Test
+    public void testPost(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpURLConnection mockConn,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity,
+        @Mocked final OutputStream mockOutputStream,
+        @Mocked final OutputStreamWriter mockWriter
+    ) throws IOException {
+        setupPost(
+            201,
+            "frobozz",
+            mockRequest,
+            mockUrl,
+            mockConn,
+            mockBuilder,
+            mockClient,
+            mockResponse,
+            mockStatusLine,
+            mockEntity,
+            mockOutputStream,
+            mockWriter
+        );
+
+        client = new NetworkHttpClient(mockBuilder);
         Response resp = client.makeRequest(mockRequest);
 
         assertEquals(resp.getStatusCode(), 201);
@@ -179,37 +568,37 @@ public void testReliableRequestWithRetries100() throws InterruptedException {
     }
 
     @Test
-    public void testDelete() throws IOException {
+    public void testDelete(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpURLConnection mockConn,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity,
+        @Mocked final OutputStream mockOutputStream,
+        @Mocked final OutputStreamWriter mockWriter
+    ) throws IOException {
         String content = "";
         final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
 
-        new Expectations() {{
-            mockRequest.constructURL();
-            result = mockUrl;
-            mockRequest.getMethod();
-            result = HttpMethod.DELETE;
-            mockUrl.openConnection();
-            result = mockConn;
-            mockConn.setAllowUserInteraction(false);
-            mockConn.addRequestProperty("Accept", "application/json");
-            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
-            mockConn.setInstanceFollowRedirects(true);
-
-            mockConn.setRequestMethod("DELETE");
-
-            mockRequest.requiresAuthentication();
-            result = false;
-            mockConn.connect();
-
-            mockConn.getResponseCode();
-            result = 204;
-            mockConn.getErrorStream();
-            result = null;
-            mockConn.getInputStream();
-            result = stream;
-        }};
-
-        NetworkHttpClient client = new NetworkHttpClient();
+        setupDelete(
+            204,
+            "",
+            mockRequest,
+            mockUrl,
+            mockConn,
+            mockBuilder,
+            mockClient,
+            mockResponse,
+            mockStatusLine,
+            mockEntity,
+            mockOutputStream,
+            mockWriter
+        );
+
+        client = new NetworkHttpClient(mockBuilder);
         Response resp = client.makeRequest(mockRequest);
 
         assertEquals(resp.getStatusCode(), 204);
@@ -217,43 +606,30 @@ public void testDelete() throws IOException {
     }
 
     @Test
-    public void testAuthedGet() throws IOException {
-        String content = "frobozz";
-        final InputStream stream = new ByteArrayInputStream(content.getBytes("UTF-8"));
-
-        new Expectations() {{
-            mockRequest.constructURL();
-            result = mockUrl;
-            mockRequest.getMethod();
-            result = HttpMethod.GET;
-            mockUrl.openConnection();
-            result = mockConn;
-            mockConn.setAllowUserInteraction(false);
-            mockConn.addRequestProperty("Accept", "application/json");
-            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
-            mockConn.setInstanceFollowRedirects(true);
-
-            mockConn.setRequestMethod("GET");
-
-            mockRequest.requiresAuthentication();
-            result = true;
-            mockRequest.getUsername();
-            result = "foo";
-            mockRequest.getPassword();
-            result = "bar";
-            mockConn.setRequestProperty("Authorization", "Basic Zm9vOmJhcg==");
-
-            mockConn.connect();
-
-            mockConn.getResponseCode();
-            result = 200;
-            mockConn.getErrorStream();
-            result = null;
-            mockConn.getInputStream();
-            result = stream;
-        }};
-
-        NetworkHttpClient client = new NetworkHttpClient();
+    public void testAuthedGet(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpURLConnection mockConn,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        setupAuthedGet(
+            200,
+            "frobozz",
+            mockRequest,
+            mockUrl,
+            mockConn,
+            mockBuilder,
+            mockClient,
+            mockResponse,
+            mockStatusLine,
+            mockEntity
+        );
+
+        client = new NetworkHttpClient(mockBuilder);
         Response resp = client.makeRequest(mockRequest);
 
         assertEquals(resp.getStatusCode(), 200);
@@ -261,41 +637,30 @@ public void testAuthedGet() throws IOException {
     }
 
     @Test
-    public void testErrorResponse() throws IOException {
-        String error = "womp";
-        final InputStream stream = new ByteArrayInputStream(error.getBytes("UTF-8"));
-
-        new Expectations() {{
-            mockRequest.constructURL();
-            result = mockUrl;
-            mockRequest.getMethod();
-            result = HttpMethod.GET;
-            mockUrl.openConnection();
-            result = mockConn;
-            mockConn.setAllowUserInteraction(false);
-            mockConn.addRequestProperty("Accept", "application/json");
-            mockConn.addRequestProperty("Accept-Encoding", "utf-8");
-            mockConn.setInstanceFollowRedirects(true);
-
-            mockConn.setRequestMethod("GET");
-
-            mockRequest.requiresAuthentication();
-            result = true;
-            mockRequest.getUsername();
-            result = "foo";
-            mockRequest.getPassword();
-            result = "bar";
-            mockConn.setRequestProperty("Authorization", "Basic Zm9vOmJhcg==");
-
-            mockConn.connect();
-
-            mockConn.getResponseCode();
-            result = 404;
-            mockConn.getErrorStream();
-            result = stream;
-        }};
-
-        NetworkHttpClient client = new NetworkHttpClient();
+    public void testErrorResponse(
+        @Mocked final Request mockRequest,
+        @Mocked final URL mockUrl,
+        @Mocked final HttpURLConnection mockConn,
+        @Mocked final HttpClientBuilder mockBuilder,
+        @Mocked final CloseableHttpClient mockClient,
+        @Mocked final CloseableHttpResponse mockResponse,
+        @Mocked final StatusLine mockStatusLine,
+        @Mocked final HttpEntity mockEntity
+    ) throws IOException {
+        setupErrorResponse(
+            404,
+            "womp",
+            mockRequest,
+            mockUrl,
+            mockConn,
+            mockBuilder,
+            mockClient,
+            mockResponse,
+            mockStatusLine,
+            mockEntity
+        );
+
+        client = new NetworkHttpClient(mockBuilder);
         Response resp = client.makeRequest(mockRequest);
 
         assertEquals(resp.getStatusCode(), 404);
