diff --git a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
index 7c469c10d0..edabbf1034 100755
--- a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
@@ -795,103 +795,6 @@ public void Ensures_Valid_8() {
 		runTest("Ensures_Valid_8");
 	}
 
-	@Test
-	public void For_Valid_1() {
-		runTest("For_Valid_1");
-	}
-
-	@Test
-	public void For_Valid_10() {
-		runTest("For_Valid_10");
-	}
-
-	@Test
-	public void For_Valid_11() {
-		runTest("For_Valid_11");
-	}
-
-	@Test
-	public void For_Valid_12() {
-		runTest("For_Valid_12");
-	}
-
-	@Test
-	public void For_Valid_13() {
-		runTest("For_Valid_13");
-	}
-
-	@Test
-	public void For_Valid_14() {
-		runTest("For_Valid_14");
-	}
-
-	@Test
-	public void For_Valid_15() {
-		runTest("For_Valid_15");
-	}
-
-	@Test
-	public void For_Valid_16() {
-		runTest("For_Valid_16");
-	}
-
-
-	@Ignore("#308") @Test
-	public void For_Valid_17() {
-		runTest("For_Valid_17");
-	}
-
-	@Test
-	public void For_Valid_18() {
-		runTest("For_Valid_18");
-	}
-
-	@Test
-	public void For_Valid_19() {
-		runTest("For_Valid_19");
-	}
-
-	@Test
-	public void For_Valid_20() {
-		runTest("For_Valid_20");
-	}
-
-	@Test
-	public void For_Valid_2() {
-		runTest("For_Valid_2");
-	}
-
-	@Ignore("#308") @Test
-	public void For_Valid_4() {
-		runTest("For_Valid_4");
-	}
-
-	@Ignore("Known Issue") @Test
-	public void For_Valid_5() {
-		runTest("For_Valid_5");
-	}
-
-	@Ignore("Known Issue") @Test
-	public void For_Valid_6() {
-		runTest("For_Valid_6");
-	}
-
-	@Test
-	public void For_Valid_7() {
-		runTest("For_Valid_7");
-	}
-
-	@Test
-	public void For_Valid_8() {
-		runTest("For_Valid_8");
-	}
-
-	@Test
-	public void For_Valid_9() {
-		runTest("For_Valid_9");
-	}
-
-
 	@Ignore("Issue ???") @Test
 	public void FunctionRef_Valid_1() {
 		runTest("FunctionRef_Valid_1");
diff --git a/modules/wyil/src/wyil/util/Interpreter.java b/modules/wyil/src/wyil/util/Interpreter.java
index 47d4aff138..bd8513dcde 100755
--- a/modules/wyil/src/wyil/util/Interpreter.java
+++ b/modules/wyil/src/wyil/util/Interpreter.java
@@ -152,7 +152,7 @@ private Object executeAllWithin(Constant[] frame, Context context) {
 	 *            --- Context in which bytecodes are executed
 	 * @return
 	 */
-	private Object execute(Constant[] frame, Context context) {
+	private Object execute(Constant[] frame, Context context) {		
 		Code bytecode = context.block.get(context.pc);
 		// FIXME: turn this into a switch statement?
 		if (bytecode instanceof Codes.Invariant) {
@@ -198,6 +198,8 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.LengthOf) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.ListOperator) {
 			return execute((Codes.ListOperator) bytecode, frame, context);
+		} else if (bytecode instanceof Codes.Quantify) {
+			return execute((Codes.Quantify) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Loop) {
 			return execute((Codes.Loop) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Move) {
@@ -212,8 +214,6 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.NewTuple) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Nop) {
 			return execute((Codes.Nop) bytecode, frame, context);
-		} else if (bytecode instanceof Codes.Quantify) {
-			return execute((Codes.Quantify) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Return) {
 			return execute((Codes.Return) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.SubList) {
@@ -686,6 +686,27 @@ private Object execute(Codes.FieldLoad bytecode, Constant[] frame,
 		return context.pc.next();
 	}
 
+	private Object execute(Codes.Quantify bytecode, Constant[] frame,
+			Context context) {
+		Constant operand = frame[bytecode.sourceOperand];
+		checkType(operand, context, Constant.List.class);		
+		Constant.List list = (Constant.List) operand;
+		
+		for (Constant value : list.values) {
+			// Assign the index variable
+			frame[bytecode.indexOperand] = value;
+			// Execute loop body for one iteration
+			Object r = executeAllWithin(frame, context);
+			// Now, check whether we fell through to the end or not. If not,
+			// then we must have exited somehow so return to signal that.
+			if (r != null) {
+				return r;
+			}
+		}
+
+		return context.pc.next();
+	}
+	
 	private Object execute(Codes.Goto bytecode, Constant[] frame,
 			Context context) {
 		return context.getLabel(bytecode.target);
diff --git a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
index 55ca0c4b7f..1c64a57090 100755
--- a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
+++ b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
@@ -858,91 +858,6 @@ public void Ensures_Valid_8() {
 		runTest("Ensures_Valid_8");
 	}
 	
-	@Test
-	public void For_Valid_1() {
-		runTest("For_Valid_1");
-	}
-
-	@Test
-	public void For_Valid_10() {
-		runTest("For_Valid_10");
-	}
-
-	@Test
-	public void For_Valid_11() {
-		runTest("For_Valid_11");
-	}
-
-	@Test
-	public void For_Valid_14() {
-		runTest("For_Valid_14");
-	}
-
-	@Test
-	public void For_Valid_15() {
-		runTest("For_Valid_15");
-	}
-
-	@Test
-	public void For_Valid_16() {
-		runTest("For_Valid_16");
-	}
-
-	@Test
-	public void For_Valid_17() {
-		runTest("For_Valid_17");
-	}
-
-	@Test
-	public void For_Valid_18() {
-		runTest("For_Valid_18");
-	}
-
-	@Test
-	public void For_Valid_20() {
-		runTest("For_Valid_20");
-	}
-
-	@Test
-	public void For_Valid_19() {
-		runTest("For_Valid_19");
-	}
-
-	@Test
-	public void For_Valid_2() {
-		runTest("For_Valid_2");
-	}
-	
-	@Test
-	public void For_Valid_4() {
-		runTest("For_Valid_4");
-	}
-
-	@Ignore("Issue ???") @Test
-	public void For_Valid_5() {
-		runTest("For_Valid_5");
-	}
-
-	@Ignore("Issue ???") @Test
-	public void For_Valid_6() {
-		runTest("For_Valid_6");
-	}
-
-	@Test
-	public void For_Valid_7() {
-		runTest("For_Valid_7");
-	}
-
-	@Test
-	public void For_Valid_8() {
-		runTest("For_Valid_8");
-	}
-
-	@Test
-	public void For_Valid_9() {
-		runTest("For_Valid_9");
-	}
-
 	@Test
 	public void FunctionRef_Valid_1() {
 		runTest("FunctionRef_Valid_1");
diff --git a/modules/wyrt/src/whiley/lang/ASCII.whiley b/modules/wyrt/src/whiley/lang/ASCII.whiley
index 1e180a78c7..0203d73f24 100755
--- a/modules/wyrt/src/whiley/lang/ASCII.whiley
+++ b/modules/wyrt/src/whiley/lang/ASCII.whiley
@@ -36,11 +36,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/modules/wyrt/src/whiley/lang/Byte.whiley b/modules/wyrt/src/whiley/lang/Byte.whiley
index 2c7b31f59e..fcc1cc64ac 100755
--- a/modules/wyrt/src/whiley/lang/Byte.whiley
+++ b/modules/wyrt/src/whiley/lang/Byte.whiley
@@ -31,12 +31,14 @@ import uint from whiley.lang.Int
 // convert a byte into a string
 public function toString(byte b) -> string:
     string r = "b"
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (b & 00000001b) == 00000001b:
             r = "1" ++ r
         else:
             r = "0" ++ r
         b = b >> 1
+        i = i + 1
     return r
 
 // Convert a byte into an unsigned int.  This assumes a little endian
@@ -56,10 +58,12 @@ public function toUnsignedInt(byte b) -> uint:
 public function toUnsignedInt([byte] bytes) -> uint:
     int val = 0
     int base = 1
-    for b in bytes:
-        int v = toUnsignedInt(b) * base
+    int i = 0
+    while i < |bytes|:
+        int v = toUnsignedInt(bytes[i]) * base
         val = val + v
         base = base * 256
+        i = i + 1
     return val
 
 // Convert a byte into an unsigned int.  This assumes a little endian
@@ -83,10 +87,12 @@ public function toInt(byte b) -> int:
 public function toInt([byte] bytes) -> int:
     int val = 0
     int base = 1
-    for b in bytes:
-        int v = toUnsignedInt(b) * base
+    int i = 0
+    while i < |bytes|:
+        int v = toUnsignedInt(bytes[i]) * base
         val = val + v
         base = base * 256
+        i = i + 1
     // finally, add the sign
     if val >= (base/2):
         return -(base-val)
diff --git a/modules/wyrt/src/whiley/lang/Int.whiley b/modules/wyrt/src/whiley/lang/Int.whiley
index 5fb04435d6..aed1ed0d60 100755
--- a/modules/wyrt/src/whiley/lang/Int.whiley
+++ b/modules/wyrt/src/whiley/lang/Int.whiley
@@ -114,11 +114,13 @@ public function toUnsignedByte(u8 v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // convert an arbitrary sized unsigned integer into a list of bytes in
@@ -129,20 +131,24 @@ public function toUnsignedBytes(uint v) -> [byte]:
     // do-while is needed here
     byte r = 0b
     byte mask = 00000001b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     bytes = bytes ++ [r]
     while v > 0:
         r = 0b
         mask = 00000001b
-        for i in 0..8:
+        int j = 0
+        while j < 8:
             if (v % 2) == 1:
                 r = r | mask
             v = v / 2
             mask = mask << 1
+            j = j + 1
         bytes = bytes ++ [r]
     return bytes
 
@@ -167,12 +173,14 @@ public function parse(string input) -> int|null:
         negative = false
     // now, parse remaining digits
     int r = 0
-    for i in start .. |input|:
+    int i = start
+    while i < |input|:
         char c = input[i]
         r = r * 10
         if !ASCII.isDigit(c):
             return null
         r = r + ((int) c - '0')
+        i = i + 1
     // done
     if negative:
         return -r
diff --git a/modules/wyrt/src/whiley/lang/Math.whiley b/modules/wyrt/src/whiley/lang/Math.whiley
index 44b68905dc..3786048fa6 100755
--- a/modules/wyrt/src/whiley/lang/Math.whiley
+++ b/modules/wyrt/src/whiley/lang/Math.whiley
@@ -117,8 +117,10 @@ public function pow(int base, int exponent) -> int
 requires exponent > 0:
     //
     int r = 1
-    for i in 0 .. exponent:
+    int i = 0
+    while i < exponent:
         r = r * base
+        i = i + 1
     return r
 
 /**
diff --git a/modules/wyrt/src/whiley/lang/Real.whiley b/modules/wyrt/src/whiley/lang/Real.whiley
index d543d96658..8f74509a35 100755
--- a/modules/wyrt/src/whiley/lang/Real.whiley
+++ b/modules/wyrt/src/whiley/lang/Real.whiley
@@ -39,7 +39,8 @@ public function parse(string input) -> real|null:
     //
     int r = 0
     int dps = 0
-    for i in 0..|input|:
+    int i = 0
+    while i < |input|:
         char c = input[i]
         if c == '.' && dps == 0:
             dps = 1
@@ -49,6 +50,7 @@ public function parse(string input) -> real|null:
             r = r * 10
             r = r + (int) (c - '0')
             dps = dps * 10
+        i = i + 1
     // finally, perform division
     real rr = (real) r
     if dps > 0:
diff --git a/tests/valid/Assume_Valid_1.whiley b/tests/valid/Assume_Valid_1.whiley
index 97d445a976..8e9c6916de 100755
--- a/tests/valid/Assume_Valid_1.whiley
+++ b/tests/valid/Assume_Valid_1.whiley
@@ -1,12 +1,12 @@
-
-
 type nat is (int x) where x >= 0
 
 function sum([nat] list) -> nat:
     int r = 0
-    for l in list where r >= 0:
+    int i = 0
+    while i < |list| where r >= 0:
         assert r >= 0
-        r = r + l
+        r = r + list[i]
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/Cast_Valid_5.whiley b/tests/valid/Cast_Valid_5.whiley
index 68fb429e51..50430b89fa 100755
--- a/tests/valid/Cast_Valid_5.whiley
+++ b/tests/valid/Cast_Valid_5.whiley
@@ -1,5 +1,3 @@
-
-
 type u8 is (int n) where 0 >= n && n <= 255
 
 public function toUnsignedInt(byte b) -> (int r)
@@ -18,11 +16,13 @@ public function toUnsignedByte(u8 v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/Ensures_Valid_3.whiley b/tests/valid/Ensures_Valid_3.whiley
index 08a7eb8a99..085deb9325 100755
--- a/tests/valid/Ensures_Valid_3.whiley
+++ b/tests/valid/Ensures_Valid_3.whiley
@@ -1,20 +1,22 @@
-
-
 function pred([int] xs) -> (bool b)
 ensures b ==> no { z in xs | z < 0 }:
     //
     [int] zs = []
-    for y in xs:
-        if y < 0:
-            zs = zs ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] < 0:
+            zs = zs ++ [xs[i]]
+        i = i + 1
     return |zs| == 0
 
 function countOver([int] xs, int y) -> int
 requires pred(xs):
     [int] tmp = []
-    for x in xs:
-        if x > y:
-            tmp = tmp ++ [x]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > y:
+            tmp = tmp ++ [xs[i]]
+        i = i + 1
     return |tmp|
 
 public export method test() -> void:
diff --git a/tests/valid/Function_Valid_6.whiley b/tests/valid/Function_Valid_6.whiley
index b5dcc31f6b..40894b9770 100755
--- a/tests/valid/Function_Valid_6.whiley
+++ b/tests/valid/Function_Valid_6.whiley
@@ -2,9 +2,11 @@ type fr5nat is (int x) where x >= 0
 
 function g([fr5nat] xs) -> [fr5nat]:
     [fr5nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([fr5nat] x) -> [int]:
diff --git a/tests/valid/Function_Valid_7.whiley b/tests/valid/Function_Valid_7.whiley
index d78bb1dd59..f8a82ddd7b 100755
--- a/tests/valid/Function_Valid_7.whiley
+++ b/tests/valid/Function_Valid_7.whiley
@@ -2,9 +2,11 @@ type fr5nat is int
 
 function g([fr5nat] xs) -> [fr5nat]:
     [fr5nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([fr5nat] x) -> [int]:
diff --git a/tests/valid/Function_Valid_8.whiley b/tests/valid/Function_Valid_8.whiley
index 69eb4cc370..6e09dc3489 100755
--- a/tests/valid/Function_Valid_8.whiley
+++ b/tests/valid/Function_Valid_8.whiley
@@ -2,9 +2,11 @@ type fr6nat is (int x) where x >= 0
 
 function g([fr6nat] xs) -> [fr6nat]:
     [fr6nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([int] x) -> [int]:
diff --git a/tests/valid/Function_Valid_9.whiley b/tests/valid/Function_Valid_9.whiley
index 4ad310159e..80fa82bff4 100755
--- a/tests/valid/Function_Valid_9.whiley
+++ b/tests/valid/Function_Valid_9.whiley
@@ -2,9 +2,11 @@ type fr6nat is int
 
 function g([fr6nat] xs) -> [fr6nat]:
     [fr6nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([int] x) -> [int]:
diff --git a/tests/valid/Lambda_Valid_3.whiley b/tests/valid/Lambda_Valid_3.whiley
index 6610f6692c..f3c0a0568d 100755
--- a/tests/valid/Lambda_Valid_3.whiley
+++ b/tests/valid/Lambda_Valid_3.whiley
@@ -11,11 +11,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/tests/valid/Lambda_Valid_4.whiley b/tests/valid/Lambda_Valid_4.whiley
index db08e428fe..937442ea5a 100755
--- a/tests/valid/Lambda_Valid_4.whiley
+++ b/tests/valid/Lambda_Valid_4.whiley
@@ -15,11 +15,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/tests/valid/ListAppend_Valid_2.whiley b/tests/valid/ListAppend_Valid_2.whiley
index 02706babbf..92ba4540fe 100755
--- a/tests/valid/ListAppend_Valid_2.whiley
+++ b/tests/valid/ListAppend_Valid_2.whiley
@@ -1,9 +1,9 @@
-
-
 function append([int] input) -> [int]:
     [int] rs = []
-    for i in 0 .. |input|:
+    int i = 0
+    while i < |input|:
         rs = rs ++ [input[i]]
+        i = i + 1
     return rs
 
 public export method test() -> void:
diff --git a/tests/valid/ListAppend_Valid_4.whiley b/tests/valid/ListAppend_Valid_4.whiley
index acf0d17eaa..5e363dc69f 100755
--- a/tests/valid/ListAppend_Valid_4.whiley
+++ b/tests/valid/ListAppend_Valid_4.whiley
@@ -1,9 +1,9 @@
-
-
 function append([int] input) -> [int]:
     [int] rs = []
-    for i in 0 .. |input|:
+    int i = 0
+    while i < |input|:
         rs = [input[i]] ++ rs
+        i = i + 1
     return rs
 
 public export method test() -> void:
diff --git a/tests/valid/ListAppend_Valid_6.whiley b/tests/valid/ListAppend_Valid_6.whiley
index c30467f387..569806e390 100755
--- a/tests/valid/ListAppend_Valid_6.whiley
+++ b/tests/valid/ListAppend_Valid_6.whiley
@@ -1,9 +1,12 @@
 
 
 function test([real] xs, [int] ys) -> bool:
-    for x in xs ++ ys:
-        if x is int:
+    [int|real] zs = xs ++ ys
+    int i = 0
+    while i < |zs|:
+        if zs[i] is int:
             return true
+        i = i + 1
     return false
 
 public export method test() -> void:
diff --git a/tests/valid/OpenRecord_Valid_5.whiley b/tests/valid/OpenRecord_Valid_5.whiley
index 0ff944b106..27d8493092 100755
--- a/tests/valid/OpenRecord_Valid_5.whiley
+++ b/tests/valid/OpenRecord_Valid_5.whiley
@@ -9,8 +9,10 @@ function sum(VecPoint vp) -> int:
         return vp.x + vp.y
     else:
         int r = 0
-        for p in vp:
-            r = r + sum(p)
+        int i = 0
+        while i < |vp|:
+            r = r + sum(vp[i])
+            i = i + 1
         return r
 
 public export method test() -> void:
diff --git a/tests/valid/OpenRecord_Valid_6.whiley b/tests/valid/OpenRecord_Valid_6.whiley
index 98b69c17d3..12bd1616f2 100755
--- a/tests/valid/OpenRecord_Valid_6.whiley
+++ b/tests/valid/OpenRecord_Valid_6.whiley
@@ -7,8 +7,10 @@ type VecPoint is [Point] | Point
 function sum(VecPoint vp) -> int:
     if vp is [Point]:
         int r = 0
-        for p in vp:
-            r = r + sum(p)
+        int i = 0
+        while i < |vp|:
+            r = r + sum(vp[i])
+            i = i + 1
         return r
     else:
         return vp.x + vp.y
diff --git a/tests/valid/String_Valid_3.whiley b/tests/valid/String_Valid_3.whiley
index 410ab437d4..10e7363c9b 100755
--- a/tests/valid/String_Valid_3.whiley
+++ b/tests/valid/String_Valid_3.whiley
@@ -1,9 +1,11 @@
 
 
 public function has(int c1, [int] str) -> bool:
-    for c2 in str:
-        if c1 == c2:
+    int i = 0
+    while i < |str|:
+        if c1 == str[i]:
             return true
+        i = i + 1
     return false
 
 public export method test() -> void:
diff --git a/tests/valid/String_Valid_5.whiley b/tests/valid/String_Valid_5.whiley
index 4c8b91af85..d34db8e601 100755
--- a/tests/valid/String_Valid_5.whiley
+++ b/tests/valid/String_Valid_5.whiley
@@ -1,9 +1,7 @@
-
-
 function indexOf(int c1, [int] str) -> int | null:
     int i = 0
-    for c2 in str:
-        if c1 == c2:
+    while i < |str|:
+        if c1 == str[i]:
             return i
         i = i + 1
     return null
diff --git a/tests/valid/UnionType_Valid_3.whiley b/tests/valid/UnionType_Valid_3.whiley
index 21a33b2884..81b99258e8 100755
--- a/tests/valid/UnionType_Valid_3.whiley
+++ b/tests/valid/UnionType_Valid_3.whiley
@@ -3,11 +3,11 @@
 type TYPE is null | int
 
 function f([TYPE] xs, TYPE p) -> int:
-    int r = 0
-    for x in xs:
-        if x == p:
-            return r
-        r = r + 1
+    int i = 0
+    while i < |xs|:
+        if xs[i] == p:
+            return i
+        i = i + 1
     return -1
 
 public export method test() -> void:
