diff --git a/modules/wyc/src/wyc/testing/AllValidTests.java b/modules/wyc/src/wyc/testing/AllValidTests.java
index 4bbbb6d02..2642972ba 100644
--- a/modules/wyc/src/wyc/testing/AllValidTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidTests.java
@@ -789,87 +789,7 @@ public void Ensures_Valid_7() throws IOException {
 	public void Ensures_Valid_8() throws IOException {
 		runTest("Ensures_Valid_8");
 	}
-
-	@Test
-	public void For_Valid_1() throws IOException {
-		runTest("For_Valid_1");
-	}
-
-	@Test
-	public void For_Valid_10() throws IOException {
-		runTest("For_Valid_10");
-	}
-
-	@Test
-	public void For_Valid_11() throws IOException {
-		runTest("For_Valid_11");
-	}
-
-	@Test
-	public void For_Valid_14() throws IOException {
-		runTest("For_Valid_14");
-	}
-
-	@Test
-	public void For_Valid_15() throws IOException {
-		runTest("For_Valid_15");
-	}
-
-	@Test
-	public void For_Valid_16() throws IOException {
-		runTest("For_Valid_16");
-	}
-
-	@Test
-	public void For_Valid_17() throws IOException {
-		runTest("For_Valid_17");
-	}
-
-	@Test
-	public void For_Valid_18() throws IOException {
-		runTest("For_Valid_18");
-	}
-
-	@Test
-	public void For_Valid_19() throws IOException {
-		runTest("For_Valid_19");
-	}
-
-	@Test
-	public void For_Valid_20() throws IOException {
-		runTest("For_Valid_20");
-	}
-
-	@Test
-	public void For_Valid_2() throws IOException {
-		runTest("For_Valid_2");
-	}
-
-	@Test
-	public void For_Valid_4() throws IOException {
-		runTest("For_Valid_4");
-	}
-
-	@Ignore("Issue ???") @Test
-	public void For_Valid_5() throws IOException {
-		runTest("For_Valid_5");
-	}
-
-	@Test
-	public void For_Valid_7() throws IOException {
-		runTest("For_Valid_7");
-	}
-
-	@Test
-	public void For_Valid_8() throws IOException {
-		runTest("For_Valid_8");
-	}
-
-	@Test
-	public void For_Valid_9() throws IOException {
-		runTest("For_Valid_9");
-	}
-
+	
 	@Test
 	public void FunctionRef_Valid_1() throws IOException {
 		runTest("FunctionRef_Valid_1");
diff --git a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
index 7c469c10d..edabbf103 100644
--- a/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
+++ b/modules/wyc/src/wyc/testing/AllValidVerificationTests.java
@@ -795,103 +795,6 @@ public void Ensures_Valid_8() {
 		runTest("Ensures_Valid_8");
 	}
 
-	@Test
-	public void For_Valid_1() {
-		runTest("For_Valid_1");
-	}
-
-	@Test
-	public void For_Valid_10() {
-		runTest("For_Valid_10");
-	}
-
-	@Test
-	public void For_Valid_11() {
-		runTest("For_Valid_11");
-	}
-
-	@Test
-	public void For_Valid_12() {
-		runTest("For_Valid_12");
-	}
-
-	@Test
-	public void For_Valid_13() {
-		runTest("For_Valid_13");
-	}
-
-	@Test
-	public void For_Valid_14() {
-		runTest("For_Valid_14");
-	}
-
-	@Test
-	public void For_Valid_15() {
-		runTest("For_Valid_15");
-	}
-
-	@Test
-	public void For_Valid_16() {
-		runTest("For_Valid_16");
-	}
-
-
-	@Ignore("#308") @Test
-	public void For_Valid_17() {
-		runTest("For_Valid_17");
-	}
-
-	@Test
-	public void For_Valid_18() {
-		runTest("For_Valid_18");
-	}
-
-	@Test
-	public void For_Valid_19() {
-		runTest("For_Valid_19");
-	}
-
-	@Test
-	public void For_Valid_20() {
-		runTest("For_Valid_20");
-	}
-
-	@Test
-	public void For_Valid_2() {
-		runTest("For_Valid_2");
-	}
-
-	@Ignore("#308") @Test
-	public void For_Valid_4() {
-		runTest("For_Valid_4");
-	}
-
-	@Ignore("Known Issue") @Test
-	public void For_Valid_5() {
-		runTest("For_Valid_5");
-	}
-
-	@Ignore("Known Issue") @Test
-	public void For_Valid_6() {
-		runTest("For_Valid_6");
-	}
-
-	@Test
-	public void For_Valid_7() {
-		runTest("For_Valid_7");
-	}
-
-	@Test
-	public void For_Valid_8() {
-		runTest("For_Valid_8");
-	}
-
-	@Test
-	public void For_Valid_9() {
-		runTest("For_Valid_9");
-	}
-
-
 	@Ignore("Issue ???") @Test
 	public void FunctionRef_Valid_1() {
 		runTest("FunctionRef_Valid_1");
diff --git a/modules/wyil/src/wyil/util/Interpreter.java b/modules/wyil/src/wyil/util/Interpreter.java
index 47d4aff13..bd8513dcd 100644
--- a/modules/wyil/src/wyil/util/Interpreter.java
+++ b/modules/wyil/src/wyil/util/Interpreter.java
@@ -152,7 +152,7 @@ private Object executeAllWithin(Constant[] frame, Context context) {
 	 *            --- Context in which bytecodes are executed
 	 * @return
 	 */
-	private Object execute(Constant[] frame, Context context) {
+	private Object execute(Constant[] frame, Context context) {		
 		Code bytecode = context.block.get(context.pc);
 		// FIXME: turn this into a switch statement?
 		if (bytecode instanceof Codes.Invariant) {
@@ -198,6 +198,8 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.LengthOf) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.ListOperator) {
 			return execute((Codes.ListOperator) bytecode, frame, context);
+		} else if (bytecode instanceof Codes.Quantify) {
+			return execute((Codes.Quantify) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Loop) {
 			return execute((Codes.Loop) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Move) {
@@ -212,8 +214,6 @@ private Object execute(Constant[] frame, Context context) {
 			return execute((Codes.NewTuple) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Nop) {
 			return execute((Codes.Nop) bytecode, frame, context);
-		} else if (bytecode instanceof Codes.Quantify) {
-			return execute((Codes.Quantify) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.Return) {
 			return execute((Codes.Return) bytecode, frame, context);
 		} else if (bytecode instanceof Codes.SubList) {
@@ -686,6 +686,27 @@ private Object execute(Codes.FieldLoad bytecode, Constant[] frame,
 		return context.pc.next();
 	}
 
+	private Object execute(Codes.Quantify bytecode, Constant[] frame,
+			Context context) {
+		Constant operand = frame[bytecode.sourceOperand];
+		checkType(operand, context, Constant.List.class);		
+		Constant.List list = (Constant.List) operand;
+		
+		for (Constant value : list.values) {
+			// Assign the index variable
+			frame[bytecode.indexOperand] = value;
+			// Execute loop body for one iteration
+			Object r = executeAllWithin(frame, context);
+			// Now, check whether we fell through to the end or not. If not,
+			// then we must have exited somehow so return to signal that.
+			if (r != null) {
+				return r;
+			}
+		}
+
+		return context.pc.next();
+	}
+	
 	private Object execute(Codes.Goto bytecode, Constant[] frame,
 			Context context) {
 		return context.getLabel(bytecode.target);
diff --git a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
index 55ca0c4b7..1c64a5709 100755
--- a/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
+++ b/modules/wyjc/src/wyjc/testing/RuntimeValidTests.java
@@ -858,91 +858,6 @@ public void Ensures_Valid_8() {
 		runTest("Ensures_Valid_8");
 	}
 	
-	@Test
-	public void For_Valid_1() {
-		runTest("For_Valid_1");
-	}
-
-	@Test
-	public void For_Valid_10() {
-		runTest("For_Valid_10");
-	}
-
-	@Test
-	public void For_Valid_11() {
-		runTest("For_Valid_11");
-	}
-
-	@Test
-	public void For_Valid_14() {
-		runTest("For_Valid_14");
-	}
-
-	@Test
-	public void For_Valid_15() {
-		runTest("For_Valid_15");
-	}
-
-	@Test
-	public void For_Valid_16() {
-		runTest("For_Valid_16");
-	}
-
-	@Test
-	public void For_Valid_17() {
-		runTest("For_Valid_17");
-	}
-
-	@Test
-	public void For_Valid_18() {
-		runTest("For_Valid_18");
-	}
-
-	@Test
-	public void For_Valid_20() {
-		runTest("For_Valid_20");
-	}
-
-	@Test
-	public void For_Valid_19() {
-		runTest("For_Valid_19");
-	}
-
-	@Test
-	public void For_Valid_2() {
-		runTest("For_Valid_2");
-	}
-	
-	@Test
-	public void For_Valid_4() {
-		runTest("For_Valid_4");
-	}
-
-	@Ignore("Issue ???") @Test
-	public void For_Valid_5() {
-		runTest("For_Valid_5");
-	}
-
-	@Ignore("Issue ???") @Test
-	public void For_Valid_6() {
-		runTest("For_Valid_6");
-	}
-
-	@Test
-	public void For_Valid_7() {
-		runTest("For_Valid_7");
-	}
-
-	@Test
-	public void For_Valid_8() {
-		runTest("For_Valid_8");
-	}
-
-	@Test
-	public void For_Valid_9() {
-		runTest("For_Valid_9");
-	}
-
 	@Test
 	public void FunctionRef_Valid_1() {
 		runTest("FunctionRef_Valid_1");
diff --git a/modules/wyrt/src/whiley/lang/ASCII.whiley b/modules/wyrt/src/whiley/lang/ASCII.whiley
index 1e180a78c..0203d73f2 100644
--- a/modules/wyrt/src/whiley/lang/ASCII.whiley
+++ b/modules/wyrt/src/whiley/lang/ASCII.whiley
@@ -36,11 +36,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/modules/wyrt/src/whiley/lang/Byte.whiley b/modules/wyrt/src/whiley/lang/Byte.whiley
index 2c7b31f59..fcc1cc64a 100755
--- a/modules/wyrt/src/whiley/lang/Byte.whiley
+++ b/modules/wyrt/src/whiley/lang/Byte.whiley
@@ -31,12 +31,14 @@ import uint from whiley.lang.Int
 // convert a byte into a string
 public function toString(byte b) -> string:
     string r = "b"
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (b & 00000001b) == 00000001b:
             r = "1" ++ r
         else:
             r = "0" ++ r
         b = b >> 1
+        i = i + 1
     return r
 
 // Convert a byte into an unsigned int.  This assumes a little endian
@@ -56,10 +58,12 @@ public function toUnsignedInt(byte b) -> uint:
 public function toUnsignedInt([byte] bytes) -> uint:
     int val = 0
     int base = 1
-    for b in bytes:
-        int v = toUnsignedInt(b) * base
+    int i = 0
+    while i < |bytes|:
+        int v = toUnsignedInt(bytes[i]) * base
         val = val + v
         base = base * 256
+        i = i + 1
     return val
 
 // Convert a byte into an unsigned int.  This assumes a little endian
@@ -83,10 +87,12 @@ public function toInt(byte b) -> int:
 public function toInt([byte] bytes) -> int:
     int val = 0
     int base = 1
-    for b in bytes:
-        int v = toUnsignedInt(b) * base
+    int i = 0
+    while i < |bytes|:
+        int v = toUnsignedInt(bytes[i]) * base
         val = val + v
         base = base * 256
+        i = i + 1
     // finally, add the sign
     if val >= (base/2):
         return -(base-val)
diff --git a/modules/wyrt/src/whiley/lang/Int.whiley b/modules/wyrt/src/whiley/lang/Int.whiley
index 5fb04435d..aed1ed0d6 100755
--- a/modules/wyrt/src/whiley/lang/Int.whiley
+++ b/modules/wyrt/src/whiley/lang/Int.whiley
@@ -114,11 +114,13 @@ public function toUnsignedByte(u8 v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // convert an arbitrary sized unsigned integer into a list of bytes in
@@ -129,20 +131,24 @@ public function toUnsignedBytes(uint v) -> [byte]:
     // do-while is needed here
     byte r = 0b
     byte mask = 00000001b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     bytes = bytes ++ [r]
     while v > 0:
         r = 0b
         mask = 00000001b
-        for i in 0..8:
+        int j = 0
+        while j < 8:
             if (v % 2) == 1:
                 r = r | mask
             v = v / 2
             mask = mask << 1
+            j = j + 1
         bytes = bytes ++ [r]
     return bytes
 
@@ -167,12 +173,14 @@ public function parse(string input) -> int|null:
         negative = false
     // now, parse remaining digits
     int r = 0
-    for i in start .. |input|:
+    int i = start
+    while i < |input|:
         char c = input[i]
         r = r * 10
         if !ASCII.isDigit(c):
             return null
         r = r + ((int) c - '0')
+        i = i + 1
     // done
     if negative:
         return -r
diff --git a/modules/wyrt/src/whiley/lang/Math.whiley b/modules/wyrt/src/whiley/lang/Math.whiley
index 44b68905d..3786048fa 100755
--- a/modules/wyrt/src/whiley/lang/Math.whiley
+++ b/modules/wyrt/src/whiley/lang/Math.whiley
@@ -117,8 +117,10 @@ public function pow(int base, int exponent) -> int
 requires exponent > 0:
     //
     int r = 1
-    for i in 0 .. exponent:
+    int i = 0
+    while i < exponent:
         r = r * base
+        i = i + 1
     return r
 
 /**
diff --git a/modules/wyrt/src/whiley/lang/Real.whiley b/modules/wyrt/src/whiley/lang/Real.whiley
index d543d9665..8f74509a3 100644
--- a/modules/wyrt/src/whiley/lang/Real.whiley
+++ b/modules/wyrt/src/whiley/lang/Real.whiley
@@ -39,7 +39,8 @@ public function parse(string input) -> real|null:
     //
     int r = 0
     int dps = 0
-    for i in 0..|input|:
+    int i = 0
+    while i < |input|:
         char c = input[i]
         if c == '.' && dps == 0:
             dps = 1
@@ -49,6 +50,7 @@ public function parse(string input) -> real|null:
             r = r * 10
             r = r + (int) (c - '0')
             dps = dps * 10
+        i = i + 1
     // finally, perform division
     real rr = (real) r
     if dps > 0:
diff --git a/tests/valid/Assume_Valid_1.whiley b/tests/valid/Assume_Valid_1.whiley
index 97d445a97..8e9c6916d 100644
--- a/tests/valid/Assume_Valid_1.whiley
+++ b/tests/valid/Assume_Valid_1.whiley
@@ -1,12 +1,12 @@
-
-
 type nat is (int x) where x >= 0
 
 function sum([nat] list) -> nat:
     int r = 0
-    for l in list where r >= 0:
+    int i = 0
+    while i < |list| where r >= 0:
         assert r >= 0
-        r = r + l
+        r = r + list[i]
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/BoolList_Valid_2.whiley b/tests/valid/BoolList_Valid_2.whiley
index b6afebb14..22b222fd9 100644
--- a/tests/valid/BoolList_Valid_2.whiley
+++ b/tests/valid/BoolList_Valid_2.whiley
@@ -1,10 +1,12 @@
 function play([bool] board) -> [bool]:
     [bool] nboard = board
-    for i in 0 .. |board|:
+    int i = 0
+    while i < |board|:
         if isAlive(i, board):
             nboard[i] = true
         else:
             nboard[i] = false
+        i = i + 1
     return nboard
 
 function isAlive(int i, [bool] board) -> bool:
diff --git a/tests/valid/BoolList_Valid_3.whiley b/tests/valid/BoolList_Valid_3.whiley
index 839a77cf1..7fff29519 100644
--- a/tests/valid/BoolList_Valid_3.whiley
+++ b/tests/valid/BoolList_Valid_3.whiley
@@ -4,14 +4,18 @@ type Board is [[bool]]
 
 function update(Board board) -> Board:
     [[bool]] nboard = board
-    for i in 0 .. 3:
-        for j in 0 .. 3:
+    int i = 0
+    while i < 3:
+        int j = 0
+        while j < 3:
             int c = countLiving(board, i, j)
             if board[i][j]:
                 switch c:
                     case 0, 1:
                         nboard[i][j] = false
                     case 2, 3:
+            j = j + 1
+        i = i + 1
     return nboard
 
 function countLiving(Board board, int row, int col) -> int:
diff --git a/tests/valid/Cast_Valid_5.whiley b/tests/valid/Cast_Valid_5.whiley
index 68fb429e5..50430b89f 100644
--- a/tests/valid/Cast_Valid_5.whiley
+++ b/tests/valid/Cast_Valid_5.whiley
@@ -1,5 +1,3 @@
-
-
 type u8 is (int n) where 0 >= n && n <= 255
 
 public function toUnsignedInt(byte b) -> (int r)
@@ -18,11 +16,13 @@ public function toUnsignedByte(u8 v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/ConstrainedList_Valid_21.whiley b/tests/valid/ConstrainedList_Valid_21.whiley
index a92f5e55d..126d83739 100644
--- a/tests/valid/ConstrainedList_Valid_21.whiley
+++ b/tests/valid/ConstrainedList_Valid_21.whiley
@@ -25,8 +25,12 @@ type Cash is ([nat] coins) where |coins| == |Value|
 function Cash([nat] coins) -> Cash
 requires no { c in coins | c >= |Value| }:
     [int] cash = [0, 0, 0, 0, 0, 0, 0, 0]
-    for i in coins where (|cash| == |Value|) && no { c in cash | c < 0 }:
-        cash[i] = cash[i] + 1
+    int i = 0
+    while i < |coins|
+        where (|cash| == |Value|) && no { c in cash | c < 0 }:
+        nat coin = coins[i]
+        cash[coin] = cash[coin] + 1
+        i = i + 1
     return cash
 
 public export method test() -> void:
diff --git a/tests/valid/ConstrainedList_Valid_22.whiley b/tests/valid/ConstrainedList_Valid_22.whiley
index 1b63017fe..b25fda802 100644
--- a/tests/valid/ConstrainedList_Valid_22.whiley
+++ b/tests/valid/ConstrainedList_Valid_22.whiley
@@ -4,10 +4,12 @@ type nat is (int x) where x >= 0
 
 function inc([nat] xs) -> [nat]:
     int i = 0
-    for j in xs where i >= 0:
+    int j = 0
+    while j < |xs| where i >= 0:
         if i < |xs|:
             xs[i] = xs[i] + 1
         i = i + 1
+        j = j + 1
     assert no { x in xs | x < 0 }
     return xs
 
diff --git a/tests/valid/ConstrainedList_Valid_23.whiley b/tests/valid/ConstrainedList_Valid_23.whiley
index e52d3c31b..70ac862d8 100644
--- a/tests/valid/ConstrainedList_Valid_23.whiley
+++ b/tests/valid/ConstrainedList_Valid_23.whiley
@@ -8,14 +8,20 @@ type Matrix is ([[int]] rows)
 function run(Matrix A, Matrix B) -> Matrix
 requires (|A| > 0) && ((|B| > 0) && (|B| == |A[0]|)):
     [[int]] C = []
-    for i in 0 .. |A|:
+    int i = 0
+    while i < |A|:
         [int] row = []
-        for j in 0 .. |B[0]|:
+        int j = 0
+        while j < |B[0]|:
             int r = 0
-            for k in 0 .. |B|:
+            int k = 0 
+            while k < |B|:
                 r = r + (A[i][k] * B[k][j])
+                k = k + 1            
             row = row ++ [r]
+            j = j + 1        
         C = C ++ [row]
+        i = i + 1
     return C
 
 public export method test() -> void:
diff --git a/tests/valid/ConstrainedRecord_Valid_9.whiley b/tests/valid/ConstrainedRecord_Valid_9.whiley
index cf18499ae..98250e8ad 100644
--- a/tests/valid/ConstrainedRecord_Valid_9.whiley
+++ b/tests/valid/ConstrainedRecord_Valid_9.whiley
@@ -20,14 +20,20 @@ requires A.width == B.height
 ensures (C.width == B.width) && (C.height == A.height):
     //
     [[int]] C_data = []
-    for i in 0 .. A.height:
+    int i = 0
+    while i < A.height:
         [int] row = []
-        for j in 0 .. B.width:
+        int j = 0
+        while j < B.width:
             int r = 0
-            for k in 0 .. A.width:
+            int k = 0
+            while k < A.width:
                 r = r + (A.data[i][k] * B.data[k][j])
+                k = k + 1
             row = row ++ [r]
+            j = j + 1
         C_data = C_data ++ [row]
+        i = i + 1
     return Matrix(B.width, A.height, C_data)
 
 public export method test() -> void:
diff --git a/tests/valid/EffectiveList_Valid_1.whiley b/tests/valid/EffectiveList_Valid_1.whiley
index be98875a1..99d03120e 100644
--- a/tests/valid/EffectiveList_Valid_1.whiley
+++ b/tests/valid/EffectiveList_Valid_1.whiley
@@ -4,11 +4,13 @@ type rec is {int y, int x}
 
 function f([int] xs) -> [bool | null]:
     [bool|null] r = []
-    for x in xs:
-        if x < 0:
+    int i = 0
+    while i < |xs|:
+        if xs[i] < 0:
             r = r ++ [true]
         else:
             r = r ++ [null]
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/Ensures_Valid_3.whiley b/tests/valid/Ensures_Valid_3.whiley
index 08a7eb8a9..085deb932 100644
--- a/tests/valid/Ensures_Valid_3.whiley
+++ b/tests/valid/Ensures_Valid_3.whiley
@@ -1,20 +1,22 @@
-
-
 function pred([int] xs) -> (bool b)
 ensures b ==> no { z in xs | z < 0 }:
     //
     [int] zs = []
-    for y in xs:
-        if y < 0:
-            zs = zs ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] < 0:
+            zs = zs ++ [xs[i]]
+        i = i + 1
     return |zs| == 0
 
 function countOver([int] xs, int y) -> int
 requires pred(xs):
     [int] tmp = []
-    for x in xs:
-        if x > y:
-            tmp = tmp ++ [x]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > y:
+            tmp = tmp ++ [xs[i]]
+        i = i + 1
     return |tmp|
 
 public export method test() -> void:
diff --git a/tests/valid/For_Valid_1.whiley b/tests/valid/For_Valid_1.whiley
deleted file mode 100644
index fa5c9a508..000000000
--- a/tests/valid/For_Valid_1.whiley
+++ /dev/null
@@ -1,6 +0,0 @@
-
-
-public export method test() -> void:
-    [int] xs = [1, 2, 3]
-    for st in xs:
-        assume st >= 0
diff --git a/tests/valid/For_Valid_10.whiley b/tests/valid/For_Valid_10.whiley
deleted file mode 100644
index 00eccd38f..000000000
--- a/tests/valid/For_Valid_10.whiley
+++ /dev/null
@@ -1,13 +0,0 @@
-
-
-type listset is [int]
-
-function f(listset ls) -> int:
-    int r = 0
-    for l in ls:
-        r = r + l
-    return r
-
-public export method test() -> void:
-    [int] ls = [1, 2, 3, 4, 5]
-    assume f(ls) == 15
diff --git a/tests/valid/For_Valid_11.whiley b/tests/valid/For_Valid_11.whiley
deleted file mode 100644
index 9a94df459..000000000
--- a/tests/valid/For_Valid_11.whiley
+++ /dev/null
@@ -1,13 +0,0 @@
-
-
-type listdict is [int]
-
-function f(listdict ls) -> int:
-    int r = 0
-    for l in ls:
-        r = r + 1
-    return r
-
-public export method test() -> void:
-    [int] ls = [1, 2, 3, 4, 5]
-    assume f(ls) == 5
diff --git a/tests/valid/For_Valid_14.whiley b/tests/valid/For_Valid_14.whiley
deleted file mode 100644
index 7c4cbdd2b..000000000
--- a/tests/valid/For_Valid_14.whiley
+++ /dev/null
@@ -1,15 +0,0 @@
-
-
-type list is [int]
-
-function f(list ls) -> int:
-    int r = 0
-    for l in ls:
-        r = r + ((int)l)
-    return r
-
-public export method test() -> void:
-    [int] ls = [1, 2, 3, 4, 5, 6, 7, 8]
-    assume f(ls) == 36
-    [int] xs = "Hello World"
-    assume f(xs) == 1052
diff --git a/tests/valid/For_Valid_15.whiley b/tests/valid/For_Valid_15.whiley
deleted file mode 100644
index 31249385b..000000000
--- a/tests/valid/For_Valid_15.whiley
+++ /dev/null
@@ -1,10 +0,0 @@
-
-
-type nat is (int x) where x >= 0
-
-public export method test() -> void:
-    [int] xs = [1, 2, 3]
-    int r = 0
-    for x in xs where r >= 0:
-        r = r + x
-    assume r == 6
diff --git a/tests/valid/For_Valid_16.whiley b/tests/valid/For_Valid_16.whiley
deleted file mode 100644
index 20e588587..000000000
--- a/tests/valid/For_Valid_16.whiley
+++ /dev/null
@@ -1,10 +0,0 @@
-
-
-type nat is int
-
-public export method test() -> void:
-    [int] xs = [1, 2, 3]
-    int r = 0
-    for x in xs:
-        r = r + x
-    assume r == 6
diff --git a/tests/valid/For_Valid_17.whiley b/tests/valid/For_Valid_17.whiley
deleted file mode 100644
index 7f0041ae4..000000000
--- a/tests/valid/For_Valid_17.whiley
+++ /dev/null
@@ -1,15 +0,0 @@
-
-
-type nat is (int x) where x >= 0
-
-function sum([nat] xs) -> (int result)
-ensures result >= 0:
-    //
-    int r = 0
-    for x in xs where r >= 0:
-        r = r + x
-    return r
-
-public export method test() -> void:
-    int z = sum([1, 2, 3, 4, 5])
-    assume z == 15
diff --git a/tests/valid/For_Valid_18.whiley b/tests/valid/For_Valid_18.whiley
deleted file mode 100644
index 31598798b..000000000
--- a/tests/valid/For_Valid_18.whiley
+++ /dev/null
@@ -1,13 +0,0 @@
-
-
-type nat is (int n) where 0 >= n
-
-function sum([nat] xs) -> int:
-    int r = 0
-    for x in xs:
-        r = r + x
-    return r
-
-public export method test() -> void:
-    int z = sum([1, 2, 3, 4, 5])
-    assume z == 15
diff --git a/tests/valid/For_Valid_19.whiley b/tests/valid/For_Valid_19.whiley
deleted file mode 100644
index b2827d280..000000000
--- a/tests/valid/For_Valid_19.whiley
+++ /dev/null
@@ -1,16 +0,0 @@
-
-
-function sum([int] items) -> (int result)
-requires |items| > 0
-ensures result >= 0:
-    //
-    int r = 0 
-    for x in items where r >= 0:
-        if x >= 0:
-            r = r + x
-    return r
-
-public export method test():
-    assume sum([1,2,3]) == 6
-    assume sum([1,-1,2,3]) == 6
-    assume sum([1,-1,2,-2,3]) == 6
diff --git a/tests/valid/For_Valid_2.whiley b/tests/valid/For_Valid_2.whiley
deleted file mode 100644
index b4f37d504..000000000
--- a/tests/valid/For_Valid_2.whiley
+++ /dev/null
@@ -1,14 +0,0 @@
-
-
-type nat is (int x) where x >= 0
-
-function extract([int] ls) -> nat
-requires |ls| > 0:
-    for l in ls:
-        if l < 0:
-            return 0
-    return ls[0]
-
-public export method test() -> void:
-    nat rs = extract([-2, -3, 1, 2, -23, 3, 2345, 4, 5])
-    assume rs == 0
diff --git a/tests/valid/For_Valid_20.whiley b/tests/valid/For_Valid_20.whiley
deleted file mode 100644
index acbc663e3..000000000
--- a/tests/valid/For_Valid_20.whiley
+++ /dev/null
@@ -1,16 +0,0 @@
-
-
-function find([int] items, int item) -> (int result)
-ensures result == -1 || result in items:
-    //
-    int r = 0 
-    for x in items where r >= 0:
-        if x == item:
-            return x
-    return -1
-
-public export method test():
-    assume find([1,2,3],1) == 1
-    assume find([1,2,3],2) == 2
-    assume find([1,2,3],3) == 3
-    assume find([1,2,3],4) == -1
diff --git a/tests/valid/For_Valid_4.whiley b/tests/valid/For_Valid_4.whiley
deleted file mode 100644
index 4e9e1cd3c..000000000
--- a/tests/valid/For_Valid_4.whiley
+++ /dev/null
@@ -1,15 +0,0 @@
-
-
-type pos is (int x) where x > 0
-
-function extract([int] ls) -> pos
-requires |ls| > 1:
-    for l in ls:
-        int x = l - 1
-        if x < 0:
-            return 1
-    return ls[0] + ls[1]
-
-public export method test() -> void:
-    pos rs = extract([-1, -2, 0, 1, 2, 3])
-    assume rs == 1
diff --git a/tests/valid/For_Valid_5.whiley b/tests/valid/For_Valid_5.whiley
deleted file mode 100644
index 728381158..000000000
--- a/tests/valid/For_Valid_5.whiley
+++ /dev/null
@@ -1,13 +0,0 @@
-
-
-function f({(int, real)} xs, int m) -> real:
-    for i, r in xs:
-        if i == m:
-            return r
-    return -1
-
-public export method test() -> void:
-    x = f({(1, 2.2), (5, 3.3)}, 5)
-    assume x == 3.3
-    x = f({(1, 2.2), (5, 3.3)}, 2)
-    assume x == -1.0
diff --git a/tests/valid/For_Valid_7.whiley b/tests/valid/For_Valid_7.whiley
deleted file mode 100644
index e7251a8bb..000000000
--- a/tests/valid/For_Valid_7.whiley
+++ /dev/null
@@ -1,21 +0,0 @@
-
-
-type R1 is {int x}
-
-type R2 is {int y, int x}
-
-function f(bool flag, [int] list) -> int:
-    int r = 0
-    if flag:
-        for pos in list:
-            r = r + pos
-    else:
-        for pos in list:
-            r = r - pos
-    return r
-
-public export method test() -> void:
-    int r1 = f(true, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
-    int r2 = f(false, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
-    assume r1 == 55
-    assume r2 == -55
diff --git a/tests/valid/For_Valid_8.whiley b/tests/valid/For_Valid_8.whiley
deleted file mode 100644
index 85e2d7e71..000000000
--- a/tests/valid/For_Valid_8.whiley
+++ /dev/null
@@ -1,17 +0,0 @@
-
-
-function run(int n, int x) -> bool:
-    bool solution = true
-    for i in 0 .. n:
-        if i == x:
-            solution = false
-            break
-    return solution
-
-public export method test() -> void:
-    bool b1 = run(10, 4)
-    assume b1 == false
-    bool b2 = run(10, -1)
-    assume b2 == true
-    bool b3 = run(10, 11)
-    assume b3 == true
diff --git a/tests/valid/For_Valid_9.whiley b/tests/valid/For_Valid_9.whiley
deleted file mode 100644
index 85e2d7e71..000000000
--- a/tests/valid/For_Valid_9.whiley
+++ /dev/null
@@ -1,17 +0,0 @@
-
-
-function run(int n, int x) -> bool:
-    bool solution = true
-    for i in 0 .. n:
-        if i == x:
-            solution = false
-            break
-    return solution
-
-public export method test() -> void:
-    bool b1 = run(10, 4)
-    assume b1 == false
-    bool b2 = run(10, -1)
-    assume b2 == true
-    bool b3 = run(10, 11)
-    assume b3 == true
diff --git a/tests/valid/Function_Valid_6.whiley b/tests/valid/Function_Valid_6.whiley
index b5dcc31f6..40894b977 100644
--- a/tests/valid/Function_Valid_6.whiley
+++ b/tests/valid/Function_Valid_6.whiley
@@ -2,9 +2,11 @@ type fr5nat is (int x) where x >= 0
 
 function g([fr5nat] xs) -> [fr5nat]:
     [fr5nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([fr5nat] x) -> [int]:
diff --git a/tests/valid/Function_Valid_7.whiley b/tests/valid/Function_Valid_7.whiley
index d78bb1dd5..f8a82ddd7 100644
--- a/tests/valid/Function_Valid_7.whiley
+++ b/tests/valid/Function_Valid_7.whiley
@@ -2,9 +2,11 @@ type fr5nat is int
 
 function g([fr5nat] xs) -> [fr5nat]:
     [fr5nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([fr5nat] x) -> [int]:
diff --git a/tests/valid/Function_Valid_8.whiley b/tests/valid/Function_Valid_8.whiley
index 69eb4cc37..6e09dc348 100644
--- a/tests/valid/Function_Valid_8.whiley
+++ b/tests/valid/Function_Valid_8.whiley
@@ -2,9 +2,11 @@ type fr6nat is (int x) where x >= 0
 
 function g([fr6nat] xs) -> [fr6nat]:
     [fr6nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([int] x) -> [int]:
diff --git a/tests/valid/Function_Valid_9.whiley b/tests/valid/Function_Valid_9.whiley
index 4ad310159..80fa82bff 100644
--- a/tests/valid/Function_Valid_9.whiley
+++ b/tests/valid/Function_Valid_9.whiley
@@ -2,9 +2,11 @@ type fr6nat is int
 
 function g([fr6nat] xs) -> [fr6nat]:
     [fr6nat] ys = []
-    for y in xs:
-        if y > 1:
-            ys = ys ++ [y]
+    int i = 0
+    while i < |xs|:
+        if xs[i] > 1:
+            ys = ys ++ [xs[i]]
+        i = i + 1
     return ys
 
 function f([int] x) -> [int]:
diff --git a/tests/valid/Import_Valid_3.whiley b/tests/valid/Import_Valid_3.whiley
index 8bd08865a..4181bc8e4 100644
--- a/tests/valid/Import_Valid_3.whiley
+++ b/tests/valid/Import_Valid_3.whiley
@@ -3,8 +3,10 @@
 
 function toInt([int] ls) -> int:
     int r = 0
-    for i in ls:
-        r = r + i
+    int i = 0
+    while i < |ls|:
+        r = r + ls[i]
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/Lambda_Valid_3.whiley b/tests/valid/Lambda_Valid_3.whiley
index 6610f6692..f3c0a0568 100644
--- a/tests/valid/Lambda_Valid_3.whiley
+++ b/tests/valid/Lambda_Valid_3.whiley
@@ -11,11 +11,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/tests/valid/Lambda_Valid_4.whiley b/tests/valid/Lambda_Valid_4.whiley
index db08e428f..937442ea5 100644
--- a/tests/valid/Lambda_Valid_4.whiley
+++ b/tests/valid/Lambda_Valid_4.whiley
@@ -15,11 +15,13 @@ public function toByte(char v) -> byte:
     //
     byte mask = 00000001b
     byte r = 0b
-    for i in 0..8:
+    int i = 0
+    while i < 8:
         if (v % 2) == 1:
             r = r | mask
         v = v / 2
         mask = mask << 1
+        i = i + 1
     return r
 
 // Convert an ASCII string into a list of bytes
diff --git a/tests/valid/ListAccess_Valid_8.whiley b/tests/valid/ListAccess_Valid_8.whiley
index a71232c05..47f837f78 100644
--- a/tests/valid/ListAccess_Valid_8.whiley
+++ b/tests/valid/ListAccess_Valid_8.whiley
@@ -12,8 +12,10 @@ public function toUnsignedInt(byte b) -> int:
 
 public function meth([byte] bytes) -> [int]:
     [int] data = []
-    for i in 0 .. |bytes|:
+    int i = 0
+    while i < |bytes|:
         data = data ++ [toUnsignedInt(bytes[i])]
+        i = i + 1
     return data
 
 public export method test() -> void:
diff --git a/tests/valid/ListAppend_Valid_2.whiley b/tests/valid/ListAppend_Valid_2.whiley
index 02706babb..92ba4540f 100644
--- a/tests/valid/ListAppend_Valid_2.whiley
+++ b/tests/valid/ListAppend_Valid_2.whiley
@@ -1,9 +1,9 @@
-
-
 function append([int] input) -> [int]:
     [int] rs = []
-    for i in 0 .. |input|:
+    int i = 0
+    while i < |input|:
         rs = rs ++ [input[i]]
+        i = i + 1
     return rs
 
 public export method test() -> void:
diff --git a/tests/valid/ListAppend_Valid_4.whiley b/tests/valid/ListAppend_Valid_4.whiley
index acf0d17ea..5e363dc69 100644
--- a/tests/valid/ListAppend_Valid_4.whiley
+++ b/tests/valid/ListAppend_Valid_4.whiley
@@ -1,9 +1,9 @@
-
-
 function append([int] input) -> [int]:
     [int] rs = []
-    for i in 0 .. |input|:
+    int i = 0
+    while i < |input|:
         rs = [input[i]] ++ rs
+        i = i + 1
     return rs
 
 public export method test() -> void:
diff --git a/tests/valid/ListAppend_Valid_6.whiley b/tests/valid/ListAppend_Valid_6.whiley
index c30467f38..569806e39 100644
--- a/tests/valid/ListAppend_Valid_6.whiley
+++ b/tests/valid/ListAppend_Valid_6.whiley
@@ -1,9 +1,12 @@
 
 
 function test([real] xs, [int] ys) -> bool:
-    for x in xs ++ ys:
-        if x is int:
+    [int|real] zs = xs ++ ys
+    int i = 0
+    while i < |zs|:
+        if zs[i] is int:
             return true
+        i = i + 1
     return false
 
 public export method test() -> void:
diff --git a/tests/valid/MessageSend_Valid_5.whiley b/tests/valid/MessageSend_Valid_5.whiley
index 8a9112fc7..bcd025363 100644
--- a/tests/valid/MessageSend_Valid_5.whiley
+++ b/tests/valid/MessageSend_Valid_5.whiley
@@ -4,8 +4,10 @@ type Sum is &{int result, [int] items}
 
 method start(Sum this) -> void:
     int sum = 0
-    for i in this->items:
-        sum = sum + i
+    int i = 0
+    while i < |this->items|:
+        sum = sum + this->items[i]
+        i = i + 1
     this->result = sum
 
 method get(Sum this) -> int:
diff --git a/tests/valid/MethodCall_Valid_4.whiley b/tests/valid/MethodCall_Valid_4.whiley
index 56731d6ca..23f265155 100644
--- a/tests/valid/MethodCall_Valid_4.whiley
+++ b/tests/valid/MethodCall_Valid_4.whiley
@@ -1,11 +1,11 @@
-
-
 type Sum is &{int result, [int] items}
 
 method start(Sum this) -> void:
     int sum = 0
-    for i in this->items:
-        sum = sum + i
+    int i = 0
+    while i < |this->items|:
+        sum = sum + this->items[i]
+        i = i + 1
     this->result = sum
 
 method get(Sum this) -> int:
@@ -16,8 +16,10 @@ method create([int] items) -> Sum:
 
 method seqSum([int] items) -> int:
     int r = 0
-    for i in items:
-        r = r + i
+    int i = 0
+    while i < |items|:
+        r = r + items[i]
+        i = i + 1
     return r
 
 method parSum([int] items) -> int:
diff --git a/tests/valid/Method_Valid_1.whiley b/tests/valid/Method_Valid_1.whiley
index d3dc19f2e..2b3f76c39 100644
--- a/tests/valid/Method_Valid_1.whiley
+++ b/tests/valid/Method_Valid_1.whiley
@@ -1,5 +1,3 @@
-
-
 constant BLANK is 0
 constant CROSS is 1
 constant CIRCLE is 2
@@ -13,9 +11,12 @@ function EmptyBoard() -> Board:
 
 public function numPieces(Board board, Piece piece) -> int:
     int count = 0
-    for p in board:
+    int i = 0
+    while i < |board|:
+        Piece p = board[i]
         if p == piece:
             count = count + 1
+        i = i + 1
     return count
 
 method update(Board b) -> Board:
diff --git a/tests/valid/OpenRecord_Valid_5.whiley b/tests/valid/OpenRecord_Valid_5.whiley
index 0ff944b10..27d849309 100644
--- a/tests/valid/OpenRecord_Valid_5.whiley
+++ b/tests/valid/OpenRecord_Valid_5.whiley
@@ -9,8 +9,10 @@ function sum(VecPoint vp) -> int:
         return vp.x + vp.y
     else:
         int r = 0
-        for p in vp:
-            r = r + sum(p)
+        int i = 0
+        while i < |vp|:
+            r = r + sum(vp[i])
+            i = i + 1
         return r
 
 public export method test() -> void:
diff --git a/tests/valid/OpenRecord_Valid_6.whiley b/tests/valid/OpenRecord_Valid_6.whiley
index 98b69c17d..12bd1616f 100644
--- a/tests/valid/OpenRecord_Valid_6.whiley
+++ b/tests/valid/OpenRecord_Valid_6.whiley
@@ -7,8 +7,10 @@ type VecPoint is [Point] | Point
 function sum(VecPoint vp) -> int:
     if vp is [Point]:
         int r = 0
-        for p in vp:
-            r = r + sum(p)
+        int i = 0
+        while i < |vp|:
+            r = r + sum(vp[i])
+            i = i + 1
         return r
     else:
         return vp.x + vp.y
diff --git a/tests/valid/Process_Valid_6.whiley b/tests/valid/Process_Valid_6.whiley
index 841cfb6d4..598daac98 100644
--- a/tests/valid/Process_Valid_6.whiley
+++ b/tests/valid/Process_Valid_6.whiley
@@ -1,5 +1,3 @@
-
-
 type Actor is {int data}
 
 method get(&Actor this) -> int:
@@ -10,16 +8,20 @@ method createActor(int n) -> &Actor:
 
 method createActors(int n) -> [&Actor]:
     [&Actor] row = []
-    for j in 0 .. n:
+    int j = 0
+    while j < n:
         &Actor m = createActor(j)
         row = row ++ [m]
+        j = j + 1
     return row
 
 public export method test() -> void:
     [&Actor] actors = createActors(10)
     int r = 0
     //
-    for i in 0 .. |actors|:
+    int i = 0
+    while i < |actors|:
         r = r + get(actors[i])
+        i = i + 1
     //
     assume r == 45
diff --git a/tests/valid/Range_Valid_1.whiley b/tests/valid/Range_Valid_1.whiley
index 59e6fc82a..481883682 100644
--- a/tests/valid/Range_Valid_1.whiley
+++ b/tests/valid/Range_Valid_1.whiley
@@ -1,11 +1,12 @@
-
-
 type nat is (int x) where x >= 0
 
 function sum(int start, int end) -> nat:
     int r = 0
-    for i in start .. end where r >= 0:
+    [int] xs = start .. end
+    int i = 0
+    while i < |xs| where r >= 0:
         r = r + 1
+        i = i + 1
     return r
 
 public export method test() -> void:
diff --git a/tests/valid/RecursiveType_Valid_24.whiley b/tests/valid/RecursiveType_Valid_24.whiley
index df29858be..890fc34aa 100644
--- a/tests/valid/RecursiveType_Valid_24.whiley
+++ b/tests/valid/RecursiveType_Valid_24.whiley
@@ -2,13 +2,16 @@
 
 type Link is null | [Link]
 
-function maxDepth(Link l) -> int:
-    if l is [Link]:
+function maxDepth(Link links) -> int:
+    if links is [Link]:
         int r = 0
-        for i in l:
-            int t = maxDepth(i)
+        int i = 0
+        while i < |links|:
+            Link l = links[i]
+            int t = maxDepth(l)
             if t > r:
                 r = t
+            i = i + 1
         return r + 1
     else:
         return 0
diff --git a/tests/valid/String_Valid_3.whiley b/tests/valid/String_Valid_3.whiley
index 410ab437d..10e7363c9 100644
--- a/tests/valid/String_Valid_3.whiley
+++ b/tests/valid/String_Valid_3.whiley
@@ -1,9 +1,11 @@
 
 
 public function has(int c1, [int] str) -> bool:
-    for c2 in str:
-        if c1 == c2:
+    int i = 0
+    while i < |str|:
+        if c1 == str[i]:
             return true
+        i = i + 1
     return false
 
 public export method test() -> void:
diff --git a/tests/valid/String_Valid_5.whiley b/tests/valid/String_Valid_5.whiley
index 4c8b91af8..d34db8e60 100644
--- a/tests/valid/String_Valid_5.whiley
+++ b/tests/valid/String_Valid_5.whiley
@@ -1,9 +1,7 @@
-
-
 function indexOf(int c1, [int] str) -> int | null:
     int i = 0
-    for c2 in str:
-        if c1 == c2:
+    while i < |str|:
+        if c1 == str[i]:
             return i
         i = i + 1
     return null
diff --git a/tests/valid/UnionType_Valid_3.whiley b/tests/valid/UnionType_Valid_3.whiley
index 21a33b288..81b99258e 100644
--- a/tests/valid/UnionType_Valid_3.whiley
+++ b/tests/valid/UnionType_Valid_3.whiley
@@ -3,11 +3,11 @@
 type TYPE is null | int
 
 function f([TYPE] xs, TYPE p) -> int:
-    int r = 0
-    for x in xs:
-        if x == p:
-            return r
-        r = r + 1
+    int i = 0
+    while i < |xs|:
+        if xs[i] == p:
+            return i
+        i = i + 1
     return -1
 
 public export method test() -> void:
