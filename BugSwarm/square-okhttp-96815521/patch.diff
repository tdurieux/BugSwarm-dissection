diff --git a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java
index 1d7c3ad19d..4f02f9c0a5 100755
--- a/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java
+++ b/okhttp-android-support/src/main/java/com/squareup/okhttp/internal/huc/JavaApiConverter.java
@@ -212,7 +212,7 @@ static Response createOkResponseForCacheGet(Request request, CacheResponse javaR
     }
 
     Request cacheRequest = new Request.Builder()
-        .url(request.httpUrl())
+        .url(request.url())
         .method(request.method(), null)
         .headers(varyHeaders)
         .build();
@@ -541,7 +541,7 @@ private static ResponseBody createOkBody(final URLConnection urlConnection) {
     private final Response response;
 
     public CacheHttpURLConnection(Response response) {
-      super(response.request().url());
+      super(response.request().url().url());
       this.request = response.request();
       this.response = response;
 
diff --git a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
index 02e77c6724..fae9764623 100755
--- a/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
+++ b/okhttp-android-support/src/test/java/com/squareup/okhttp/internal/huc/JavaApiConverterTest.java
@@ -119,7 +119,7 @@
 
     Response response = JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
     Request cacheRequest = response.request();
-    assertEquals(request.httpUrl(), cacheRequest.httpUrl());
+    assertEquals(request.url(), cacheRequest.url());
     assertEquals(request.method(), cacheRequest.method());
     assertEquals(0, request.headers().size());
 
@@ -199,7 +199,7 @@
 
     Response response = JavaApiConverter.createOkResponseForCacheGet(request, cacheResponse);
     Request cacheRequest = response.request();
-    assertEquals(request.httpUrl(), cacheRequest.httpUrl());
+    assertEquals(request.url(), cacheRequest.url());
     assertEquals(request.method(), cacheRequest.method());
     assertEquals(0, request.headers().size());
 
diff --git a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
index 402eee0a85..0ce0fecef4 100755
--- a/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
+++ b/okhttp-logging-interceptor/src/main/java/com/squareup/okhttp/logging/HttpLoggingInterceptor.java
@@ -151,7 +151,7 @@ public Level getLevel() {
     Connection connection = chain.connection();
     Protocol protocol = connection != null ? connection.getProtocol() : Protocol.HTTP_1_1;
     String requestStartMessage =
-        "--> " + request.method() + ' ' + request.httpUrl() + ' ' + protocol(protocol);
+        "--> " + request.method() + ' ' + request.url() + ' ' + protocol(protocol);
     if (!logHeaders && hasRequestBody) {
       requestStartMessage += " (" + requestBody.contentLength() + "-byte body)";
     }
@@ -205,9 +205,9 @@ public Level getLevel() {
     long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs);
 
     ResponseBody responseBody = response.body();
-    logger.log("<-- " + protocol(response.protocol()) + ' ' + response.code() + ' '
-        + response.message() + " (" + tookMs + "ms"
-        + (!logHeaders ? ", " + responseBody.contentLength() + "-byte body" : "") + ')');
+    logger.log("<-- " + response.code() + ' ' + response.message() + ' '
+        + response.request().urlString() + " (" + tookMs + "ms" + (!logHeaders ? ", "
+        + responseBody.contentLength() + "-byte body" : "") + ')');
 
     if (logHeaders) {
       Headers headers = response.headers();
diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
index dbd1e84c35..255162d106 100755
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
@@ -112,12 +112,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -129,12 +129,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1 (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 0-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -149,12 +149,12 @@ private void setLevel(Level level) {
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
 
     networkLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms, 6-byte body\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)")
         .assertNoMoreLogs();
   }
 
@@ -168,7 +168,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -182,7 +182,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -203,7 +203,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -219,7 +219,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -239,7 +239,7 @@ private void setLevel(Level level) {
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Length: 3")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -254,7 +254,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -282,7 +282,7 @@ private void setLevel(Level level) {
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -298,7 +298,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END POST")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -318,7 +318,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -333,7 +333,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -352,7 +352,7 @@ private void setLevel(Level level) {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -366,7 +366,7 @@ private void setLevel(Level level) {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -393,7 +393,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 " + code + " No Content \\(\\d+ms\\)")
+        .assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -407,7 +407,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 " + code + " No Content \\(\\d+ms\\)")
+        .assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -430,7 +430,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("")
         .assertLogEqual("Hi?")
         .assertLogEqual("--> END POST (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -448,7 +448,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("")
         .assertLogEqual("Hi?")
         .assertLogEqual("--> END POST (3-byte body)")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 0")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
@@ -468,7 +468,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -485,7 +485,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Length: 6")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -508,7 +508,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Transfer-encoding: chunked")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -525,7 +525,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Transfer-encoding: chunked")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
@@ -554,7 +554,7 @@ private void bodyGetNoBody(int code) throws IOException {
         .assertLogEqual("Accept-Encoding: gzip")
         .assertLogMatch("User-Agent: okhttp/.+")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Encoding: gzip")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("Content-Length: \\d+")
@@ -566,7 +566,7 @@ private void bodyGetNoBody(int code) throws IOException {
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
         .assertLogEqual("--> END GET")
-        .assertLogMatch("<-- HTTP/1\\.1 200 OK \\(\\d+ms\\)")
+        .assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)")
         .assertLogEqual("Content-Type: text/plain; charset=utf-8")
         .assertLogMatch("OkHttp-Sent-Millis: \\d+")
         .assertLogMatch("OkHttp-Received-Millis: \\d+")
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
index f70026145e..ff5e8ea9ab 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
@@ -259,7 +259,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals("ABC", in.readUtf8());
 
     // OpenJDK 6 fails on this line, complaining that the connection isn't open yet
-    String suite = response1.handshake().cipherSuite();
+    CipherSuite cipherSuite = response1.handshake().cipherSuite();
     List<Certificate> localCerts = response1.handshake().localCertificates();
     List<Certificate> serverCerts = response1.handshake().peerCertificates();
     Principal peerPrincipal = response1.handshake().peerPrincipal();
@@ -272,7 +272,7 @@ private void testResponseCaching(TransferKind transferKind) throws IOException {
     assertEquals(1, cache.getNetworkCount());
     assertEquals(1, cache.getHitCount());
 
-    assertEquals(suite, response2.handshake().cipherSuite());
+    assertEquals(cipherSuite, response2.handshake().cipherSuite());
     assertEquals(localCerts, response2.handshake().localCertificates());
     assertEquals(serverCerts, response2.handshake().peerCertificates());
     assertEquals(peerPrincipal, response2.handshake().peerPrincipal());
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index 34ca42a7c5..7e947a42d3 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -134,7 +134,7 @@
     Request request = new Request.Builder()
         .url(httpUrl)
         .build();
-    assertEquals(httpUrl, request.httpUrl());
+    assertEquals(httpUrl, request.url());
 
     executeSynchronously(request).assertSuccessful();
   }
@@ -631,7 +631,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertHeader("Content-Type", "text/plain")
         .assertBody("abc");
@@ -783,7 +783,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     });
     Request request = new Request.Builder().url(server.url("/")).build();
     c.newCall(request).enqueue(callback);
-    RecordedResponse response = callback.await(request.httpUrl());
+    RecordedResponse response = callback.await(request.url());
     assertEquals(request, response.request);
   }
 
@@ -874,7 +874,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl()).assertHandshake();
+    callback.await(request.url()).assertHandshake();
   }
 
   @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {
@@ -966,7 +966,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl()).assertBody("abc");
+    callback.await(request.url()).assertBody("abc");
   }
 
   @Test public void noRecoveryFromTlsHandshakeFailureWhenTlsFallbackIsDisabled() throws Exception {
@@ -1070,7 +1070,7 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertBody("abc");
 
@@ -1232,14 +1232,14 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .url(server.url("/"))
         .build();
     client.newCall(request1).enqueue(callback);
-    callback.await(request1.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request1.url()).assertCode(200).assertBody("A");
     assertNull(server.takeRequest().getHeader("If-None-Match"));
 
     Request request2 = new Request.Builder()
         .url(server.url("/"))
         .build();
     client.newCall(request2).enqueue(callback);
-    callback.await(request2.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request2.url()).assertCode(200).assertBody("A");
     assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));
   }
 
@@ -1304,14 +1304,14 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .url(server.url("/"))
         .build();
     client.newCall(request1).enqueue(callback);
-    callback.await(request1.httpUrl()).assertCode(200).assertBody("A");
+    callback.await(request1.url()).assertCode(200).assertBody("A");
     assertNull(server.takeRequest().getHeader("If-None-Match"));
 
     Request request2 = new Request.Builder()
         .url(server.url("/"))
         .build();
     client.newCall(request2).enqueue(callback);
-    callback.await(request2.httpUrl()).assertCode(200).assertBody("B");
+    callback.await(request2.url()).assertCode(200).assertBody("B");
     assertEquals("v1", server.takeRequest().getHeader("If-None-Match"));
   }
 
@@ -1701,9 +1701,9 @@ private InetSocketAddress startNullServer() throws IOException {
     Request requestB = new Request.Builder().url(server.url("/b")).tag("request B").build();
     client.newCall(requestB).enqueue(callback);
 
-    callback.await(requestA.httpUrl()).assertBody("A");
+    callback.await(requestA.url()).assertBody("A");
     // At this point we know the callback is ready, and that it will receive a cancel failure.
-    callback.await(requestB.httpUrl()).assertFailure("Canceled");
+    callback.await(requestB.url()).assertFailure("Canceled");
   }
 
   @Test public void canceledBeforeIOSignalsOnFailure_HTTPS() throws Exception {
@@ -1734,7 +1734,7 @@ private InetSocketAddress startNullServer() throws IOException {
     call.enqueue(callback);
     assertEquals("/a", server.takeRequest().getPath());
 
-    callback.await(requestA.httpUrl()).assertFailure("Canceled", "stream was reset: CANCEL",
+    callback.await(requestA.url()).assertFailure("Canceled", "stream was reset: CANCEL",
         "Socket closed");
   }
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
index 37512195dd..92c31b8e65 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
@@ -380,7 +380,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
         .build();
     client.newCall(request).enqueue(callback);
 
-    callback.await(request.httpUrl())
+    callback.await(request.url())
         .assertCode(200)
         .assertHeader("OkHttp-Intercepted", "yep");
   }
@@ -412,7 +412,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
 
     client.interceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        if (chain.request().url().getPath().equals("/b")) {
+        if (chain.request().url().encodedPath().equals("/b")) {
           Request requestA = new Request.Builder()
               .url(server.url("/a"))
               .build();
@@ -438,7 +438,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
 
     client.interceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        if (chain.request().url().getPath().equals("/b")) {
+        if (chain.request().url().encodedPath().equals("/b")) {
           Request requestA = new Request.Builder()
               .url(server.url("/a"))
               .build();
@@ -446,7 +446,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
           try {
             RecordingCallback callbackA = new RecordingCallback();
             client.newCall(requestA).enqueue(callbackA);
-            callbackA.await(requestA.httpUrl()).assertBody("a");
+            callbackA.await(requestA.url()).assertBody("a");
           } catch (Exception e) {
             throw new RuntimeException(e);
           }
@@ -461,7 +461,7 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
         .build();
     RecordingCallback callbackB = new RecordingCallback();
     client.newCall(requestB).enqueue(callbackB);
-    callbackB.await(requestB.httpUrl()).assertBody("b");
+    callbackB.await(requestB.url()).assertBody("b");
   }
 
   @Test public void applicationkInterceptorThrowsRuntimeExceptionSynchronous() throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
index 129fecf145..06e74c34c2 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordedResponse.java
@@ -17,7 +17,6 @@
 
 import com.squareup.okhttp.ws.WebSocket;
 import java.io.IOException;
-import java.net.URL;
 import java.util.Arrays;
 
 import static org.junit.Assert.assertEquals;
@@ -45,7 +44,7 @@ public RecordedResponse(Request request, Response response, WebSocket webSocket,
     this.failure = failure;
   }
 
-  public RecordedResponse assertRequestUrl(URL url) {
+  public RecordedResponse assertRequestUrl(HttpUrl url) {
     assertEquals(url, request.url());
     return this;
   }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
index f2447ecc64..cc8300e869 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RecordingCallback.java
@@ -49,7 +49,7 @@ public synchronized RecordedResponse await(HttpUrl url) throws Exception {
     while (true) {
       for (Iterator<RecordedResponse> i = responses.iterator(); i.hasNext(); ) {
         RecordedResponse recordedResponse = i.next();
-        if (recordedResponse.request.httpUrl().equals(url)) {
+        if (recordedResponse.request.url().equals(url)) {
           i.remove();
           return recordedResponse;
         }
@@ -65,7 +65,7 @@ public synchronized RecordedResponse await(HttpUrl url) throws Exception {
 
   public synchronized void assertNoResponse(HttpUrl url) throws Exception {
     for (RecordedResponse recordedResponse : responses) {
-      if (recordedResponse.request.httpUrl().equals(url)) {
+      if (recordedResponse.request.url().equals(url)) {
         throw new AssertionError("Expected no response for " + url);
       }
     }
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
index 39da50037c..9b30f89b67 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/RequestTest.java
@@ -20,7 +20,6 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.net.URI;
-import java.net.URL;
 import java.util.Arrays;
 import java.util.Collections;
 import okio.Buffer;
@@ -121,20 +120,20 @@
   @Test public void uninitializedURI() throws Exception {
     Request request = new Request.Builder().url("http://localhost/api").build();
     assertEquals(new URI("http://localhost/api"), request.uri());
-    assertEquals(new URL("http://localhost/api"), request.url());
+    assertEquals(HttpUrl.parse("http://localhost/api"), request.url());
   }
 
   @Test public void newBuilderUrlResetsUrl() throws Exception {
     Request requestWithoutCache = new Request.Builder().url("http://localhost/api").build();
     Request builtRequestWithoutCache = requestWithoutCache.newBuilder().url("http://localhost/api/foo").build();
-    assertEquals(new URL("http://localhost/api/foo"), builtRequestWithoutCache.url());
+    assertEquals(HttpUrl.parse("http://localhost/api/foo"), builtRequestWithoutCache.url());
 
     Request requestWithCache = new Request.Builder().url("http://localhost/api").build();
     // cache url object
     requestWithCache.url();
     Request builtRequestWithCache = requestWithCache.newBuilder().url(
         "http://localhost/api/foo").build();
-    assertEquals(new URL("http://localhost/api/foo"), builtRequestWithCache.url());
+    assertEquals(HttpUrl.parse("http://localhost/api/foo"), builtRequestWithCache.url());
   }
 
   @Test public void cacheControl() throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
index 99010ddc78..9c384a5211 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
@@ -2890,7 +2890,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
 
     assertEquals(Proxy.NO_PROXY, authenticator.onlyProxy());
     Response response = authenticator.onlyResponse();
-    assertEquals("/private", response.request().url().getPath());
+    assertEquals("/private", response.request().url().url().getPath());
     assertEquals(Arrays.asList(new Challenge("Basic", "protected area")), response.challenges());
   }
 
@@ -2909,7 +2909,7 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     assertEquals("oauthed abc123", server.takeRequest().getHeader("Authorization"));
 
     Response response = authenticator.onlyResponse();
-    assertEquals("/private", response.request().url().getPath());
+    assertEquals("/private", response.request().url().url().getPath());
     assertEquals(Arrays.asList(new Challenge("Bearer", "oauthed")), response.challenges());
   }
 
@@ -2928,10 +2928,10 @@ private void reusedConnectionFailsWithPost(TransferKind transferKind, int reques
     assertContent("c", client.open(server.url("/a").url()));
 
     Response challengeResponse = authenticator.responses.get(0);
-    assertEquals("/b", challengeResponse.request().url().getPath());
+    assertEquals("/b", challengeResponse.request().url().url().getPath());
 
     Response redirectedBy = challengeResponse.priorResponse();
-    assertEquals("/a", redirectedBy.request().url().getPath());
+    assertEquals("/a", redirectedBy.request().url().url().getPath());
   }
 
   @Test public void attemptAuthorization20Times() throws Exception {
diff --git a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
index b7b8c723c3..7d1d27f956 100755
--- a/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
+++ b/okhttp-urlconnection/src/main/java/com/squareup/okhttp/internal/huc/HttpURLConnectionImpl.java
@@ -413,7 +413,7 @@ private HttpEngine getResponse() throws IOException {
       }
 
       // The first request was insufficient. Prepare for another...
-      url = followUp.url();
+      url = followUp.url().url();
       requestHeaders = followUp.headers().newBuilder();
 
       // Although RFC 2616 10.3.2 specifies that a HTTP_MOVED_PERM redirect
@@ -429,7 +429,7 @@ private HttpEngine getResponse() throws IOException {
       }
 
       StreamAllocation streamAllocation = httpEngine.close();
-      if (!httpEngine.sameConnection(followUp.httpUrl())) {
+      if (!httpEngine.sameConnection(followUp.url())) {
         streamAllocation.release();
         streamAllocation = null;
       }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/com/squareup/okhttp/Call.java
index 651bd0de94..340c2c6e2d 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java
@@ -146,7 +146,7 @@ private AsyncCall(Callback responseCallback, boolean forWebSocket) {
     }
 
     String host() {
-      return originalRequest.httpUrl().host();
+      return originalRequest.url().host();
     }
 
     Request request() {
@@ -196,7 +196,7 @@ Call get() {
    */
   private String toLoggableString() {
     String string = canceled ? "canceled call" : "call";
-    HttpUrl redactedUrl = originalRequest.httpUrl().resolve("/...");
+    HttpUrl redactedUrl = originalRequest.url().resolve("/...");
     return string + " to " + redactedUrl;
   }
 
@@ -335,7 +335,7 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         throw new ProtocolException("Too many follow-up requests: " + followUpCount);
       }
 
-      if (!engine.sameConnection(followUp.httpUrl())) {
+      if (!engine.sameConnection(followUp.url())) {
         streamAllocation.release();
         streamAllocation = null;
       }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Request.java b/okhttp/src/main/java/com/squareup/okhttp/Request.java
index e099267c94..36822cf409 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/Request.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Request.java
@@ -32,7 +32,6 @@
   private final RequestBody body;
   private final Object tag;
 
-  private volatile URL javaNetUrl; // Lazily initialized.
   private volatile URI javaNetUri; // Lazily initialized.
   private volatile CacheControl cacheControl; // Lazily initialized.
 
@@ -44,15 +43,10 @@ private Request(Builder builder) {
     this.tag = builder.tag != null ? builder.tag : this;
   }
 
-  public HttpUrl httpUrl() {
+  public HttpUrl url() {
     return url;
   }
 
-  public URL url() {
-    URL result = javaNetUrl;
-    return result != null ? result : (javaNetUrl = url.url());
-  }
-
   public URI uri() throws IOException {
     try {
       URI result = javaNetUri;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
index 8d884105d0..9e7f1c162e 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/AuthenticatorAdapter.java
@@ -37,7 +37,7 @@
   @Override public Request authenticate(Proxy proxy, Response response) throws IOException {
     List<Challenge> challenges = response.challenges();
     Request request = response.request();
-    HttpUrl url = request.httpUrl();
+    HttpUrl url = request.url();
     for (int i = 0, size = challenges.size(); i < size; i++) {
       Challenge challenge = challenges.get(i);
       if (!"Basic".equalsIgnoreCase(challenge.getScheme())) continue;
@@ -59,7 +59,7 @@
   @Override public Request authenticateProxy(Proxy proxy, Response response) throws IOException {
     List<Challenge> challenges = response.challenges();
     Request request = response.request();
-    HttpUrl url = request.httpUrl();
+    HttpUrl url = request.url();
     for (int i = 0, size = challenges.size(); i < size; i++) {
       Challenge challenge = challenges.get(i);
       if (!"Basic".equalsIgnoreCase(challenge.getScheme())) continue;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java
index aee0dae500..172b178f10 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/CacheStrategy.java
@@ -253,7 +253,7 @@ private long computeFreshnessLifetime() {
         long delta = expires.getTime() - servedMillis;
         return delta > 0 ? delta : 0;
       } else if (lastModified != null
-          && cacheResponse.request().httpUrl().query() == null) {
+          && cacheResponse.request().url().query() == null) {
         // As recommended by the HTTP RFC and implemented in Firefox, the
         // max age of a document should be defaulted to 10% of the
         // document's age at the time it was served. Default expiration
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
index 6b8b68f5cd..cbde39b39e 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
@@ -160,10 +160,10 @@ public Http2xStream(StreamAllocation streamAllocation, FramedConnection framedCo
     Headers headers = request.headers();
     List<Header> result = new ArrayList<>(headers.size() + 5);
     result.add(new Header(TARGET_METHOD, request.method()));
-    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.httpUrl())));
+    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
     result.add(new Header(VERSION, "HTTP/1.1"));
-    result.add(new Header(TARGET_HOST, Util.hostHeader(request.httpUrl())));
-    result.add(new Header(TARGET_SCHEME, request.httpUrl().scheme()));
+    result.add(new Header(TARGET_HOST, Util.hostHeader(request.url())));
+    result.add(new Header(TARGET_SCHEME, request.url().scheme()));
 
     Set<ByteString> names = new LinkedHashSet<>();
     for (int i = 0, size = headers.size(); i < size; i++) {
@@ -200,9 +200,9 @@ private static String joinOnNull(String first, String second) {
     Headers headers = request.headers();
     List<Header> result = new ArrayList<>(headers.size() + 4);
     result.add(new Header(TARGET_METHOD, request.method()));
-    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.httpUrl())));
-    result.add(new Header(TARGET_AUTHORITY, Util.hostHeader(request.httpUrl()))); // Optional.
-    result.add(new Header(TARGET_SCHEME, request.httpUrl().scheme()));
+    result.add(new Header(TARGET_PATH, RequestLine.requestPath(request.url())));
+    result.add(new Header(TARGET_AUTHORITY, Util.hostHeader(request.url()))); // Optional.
+    result.add(new Header(TARGET_SCHEME, request.url().scheme()));
 
     for (int i = 0, size = headers.size(); i < size; i++) {
       // header names must be lowercase.
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index 7894a65c06..0dd856be35 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -521,7 +521,7 @@ private Request networkRequest(Request request) throws IOException {
     Request.Builder result = request.newBuilder();
 
     if (request.header("Host") == null) {
-      result.header("Host", Util.hostHeader(request.httpUrl()));
+      result.header("Host", Util.hostHeader(request.url()));
     }
 
     if (request.header("Connection") == null) {
@@ -677,8 +677,8 @@ public void readResponse() throws IOException {
         Address address = connection().getRoute().getAddress();
 
         // Confirm that the interceptor uses the connection we've already prepared.
-        if (!request.httpUrl().host().equals(address.url().host())
-            || request.httpUrl().port() != address.url().port()) {
+        if (!request.url().host().equals(address.url().host())
+            || request.url().port() != address.url().port()) {
           throw new IllegalStateException("network interceptor " + caller
               + " must retain the same host and port");
         }
@@ -924,13 +924,13 @@ public Request followUpRequest() throws IOException {
 
         String location = userResponse.header("Location");
         if (location == null) return null;
-        HttpUrl url = userRequest.httpUrl().resolve(location);
+        HttpUrl url = userRequest.url().resolve(location);
 
         // Don't follow redirects to unsupported protocols.
         if (url == null) return null;
 
         // If configured, don't follow redirects between SSL and non-SSL.
-        boolean sameScheme = url.scheme().equals(userRequest.httpUrl().scheme());
+        boolean sameScheme = url.scheme().equals(userRequest.url().scheme());
         if (!sameScheme && !client.getFollowSslRedirects()) return null;
 
         // Redirects don't include a request body.
@@ -965,7 +965,7 @@ public Request followUpRequest() throws IOException {
    * connection used by this engine.
    */
   public boolean sameConnection(HttpUrl followUp) {
-    HttpUrl url = userRequest.httpUrl();
+    HttpUrl url = userRequest.url();
     return url.host().equals(followUp.host())
         && url.port() == followUp.port()
         && url.scheme().equals(followUp.scheme());
@@ -981,7 +981,7 @@ private static Address createAddress(OkHttpClient client, Request request) {
       certificatePinner = client.getCertificatePinner();
     }
 
-    return new Address(request.httpUrl().host(), request.httpUrl().port(), client.getDns(),
+    return new Address(request.url().host(), request.url().port(), client.getDns(),
         client.getSocketFactory(), sslSocketFactory, hostnameVerifier, certificatePinner,
         client.getAuthenticator(), client.getProxy(), client.getProtocols(),
         client.getConnectionSpecs(), client.getProxySelector());
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java
index 1a621a53e7..23bf43c295 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/RequestLine.java
@@ -20,9 +20,9 @@ static String get(Request request, Proxy.Type proxyType) {
     result.append(' ');
 
     if (includeAuthorityInRequestLine(request, proxyType)) {
-      result.append(request.httpUrl());
+      result.append(request.url());
     } else {
-      result.append(requestPath(request.httpUrl()));
+      result.append(requestPath(request.url()));
     }
 
     result.append(" HTTP/1.1");
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java b/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
index 09e88274af..8c4cd49f79 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/io/RealConnection.java
@@ -234,7 +234,7 @@ private void connectTls(int readTimeout, int writeTimeout,
   private void createTunnel(int readTimeout, int writeTimeout) throws IOException {
     // Make an SSL Tunnel on the first message pair of each SSL + proxy connection.
     Request tunnelRequest = createTunnelRequest();
-    HttpUrl url = tunnelRequest.httpUrl();
+    HttpUrl url = tunnelRequest.url();
     String requestLine = "CONNECT " + url.host() + ":" + url.port() + " HTTP/1.1";
     while (true) {
       Http1xStream tunnelConnection = new Http1xStream(null, source, sink);
diff --git a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
index 8c731bebac..b3034b1e82 100755
--- a/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
+++ b/samples/crawler/src/main/java/com/squareup/okhttp/sample/Crawler.java
@@ -106,7 +106,7 @@ public void fetch(HttpUrl url) throws IOException {
     Document document = Jsoup.parse(response.body().string(), url.toString());
     for (Element element : document.select("a[href]")) {
       String href = element.attr("href");
-      HttpUrl link = response.request().httpUrl().resolve(href);
+      HttpUrl link = response.request().url().resolve(href);
       if (link != null) queue.add(link);
     }
   }
diff --git a/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java b/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java
index bcfa6e9aa9..d0c1e4a93f 100755
--- a/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java
+++ b/samples/guide/src/main/java/com/squareup/okhttp/recipes/LoggingInterceptors.java
@@ -32,12 +32,12 @@ public LoggingInterceptors() {
         long t1 = System.nanoTime();
         Request request = chain.request();
         logger.info(String.format("Sending request %s on %s%n%s",
-            request.httpUrl(), chain.connection(), request.headers()));
+            request.uri(), chain.connection(), request.headers()));
         Response response = chain.proceed(request);
 
         long t2 = System.nanoTime();
         logger.info(String.format("Received response for %s in %.1fms%n%s",
-            request.httpUrl(), (t2 - t1) / 1e6d, response.headers()));
+            request.uri(), (t2 - t1) / 1e6d, response.headers()));
         return response;
       }
     });
