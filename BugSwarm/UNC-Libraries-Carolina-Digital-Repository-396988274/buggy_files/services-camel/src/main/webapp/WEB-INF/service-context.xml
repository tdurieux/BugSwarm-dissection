<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://camel.apache.org/schema/spring
        http://camel.apache.org/schema/spring/camel-spring.xsd">

    <context:annotation-config />
    
    <bean name="propertiesURI" class="java.lang.System"
        factory-method="getProperty">
        <constructor-arg index="0" value="config.properties.uri" />
        <constructor-arg index="1" value="classpath:config.properties" />
    </bean>
    
    <bean id="bridgePropertyPlaceholder" class="org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer">
        <property name="location" ref="propertiesURI"/>
    </bean>
    
    <bean id="fcrepoClientFactory" class="edu.unc.lib.dl.fcrepo4.FcrepoClientFactory" factory-method="factory">
        <constructor-arg value="${fcrepo.baseUrl}" />
    </bean>
    
    <bean id="fcrepoClient" class="org.fcrepo.client.FcrepoClient"
            factory-bean="fcrepoClientFactory" factory-method="makeClient">
    </bean>

    <bean id="ldpContainerFactory" class="edu.unc.lib.dl.fcrepo4.LdpContainerFactory">
        <property name="client" ref="fcrepoClient" />
    </bean>
    
    <bean id="repositoryPIDMinter" class="edu.unc.lib.dl.fcrepo4.RepositoryPIDMinter"></bean>

    <bean id="fedoraSparqlUpdateService" class="edu.unc.lib.dl.sparql.FedoraSparqlUpdateService">
        <property name="fcrepoClient" ref="fcrepoClient" />
    </bean>

    <bean id="repositoryObjectFactory" class="edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory">
        <property name="client" ref="fcrepoClient" />
        <property name="ldpFactory" ref="ldpContainerFactory" />
        <property name="pidMinter" ref="repositoryPIDMinter" />
        <property name="repositoryObjectDriver" ref="repositoryObjectDriver" />
        <property name="sparqlUpdateService" ref="fedoraSparqlUpdateService" />
    </bean>

    <bean id="repositoryObjectDriver" class="edu.unc.lib.dl.fcrepo4.RepositoryObjectDriver">
        <property name="client" ref="fcrepoClient" />
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
        <property name="pidMinter" ref="repositoryPIDMinter" />
        <property name="sparqlQueryService" ref="sparqlQueryService" />
    </bean>
    
    <bean id="repositoryObjectLoader" class="edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader" init-method="init">
        <property name="repositoryObjectCacheLoader" ref="repositoryObjectCacheLoader" />
        <property name="cacheTimeToLive" value="${cache.contentPath.timeToLive}" />
        <property name="cacheMaxSize" value="${cache.contentPath.maxSize}" />
    </bean>
    
    <bean id="repositoryObjectCacheLoader" class="edu.unc.lib.dl.fcrepo4.RepositoryObjectCacheLoader">
        <property name="client" ref="fcrepoClient" />
        <property name="repositoryObjectDriver" ref="repositoryObjectDriver" />
        <property name="repositoryObjectFactory" ref="repositoryObjectFactory" />
    </bean>
    
    <bean id="vocabManager" class="edu.unc.lib.dl.util.VocabularyHelperManager">
    </bean>

    <!-- ACL related beans -->
    <bean id="sparqlQueryService" class="edu.unc.lib.dl.sparql.FusekiSparqlQueryServiceImpl">
        <property name="fusekiQueryURL" value="${fuseki.baseUri}" />
    </bean>
    
    <bean id="contentPathFactory" class="edu.unc.lib.dl.fedora.ContentPathFactory"
            init-method="init">
        <property name="cacheMaxSize" value="${cache.contentPath.maxSize}" />
        <property name="cacheTimeToLive" value="${cache.contentPath.timeToLive}" />
        <property name="queryService" ref="sparqlQueryService" />
    </bean>
    
    <bean id="objectAclFactory" class="edu.unc.lib.dl.acl.fcrepo4.ObjectAclFactory"
            init-method="init">
        <property name="cacheMaxSize" value="${cache.objectAcls.maxSize}" />
        <property name="cacheTimeToLive" value="${cache.objectAcls.timeToLive}" />
        <property name="queryService" ref="sparqlQueryService" />
    </bean>
    
    <bean id="objectPermissionEvaluator" class="edu.unc.lib.dl.acl.fcrepo4.ObjectPermissionEvaluator">
        <property name="aclFactory" ref="objectAclFactory" />
    </bean>
    
    <bean id="inheritedPermissionEvaluator" class="edu.unc.lib.dl.acl.fcrepo4.InheritedPermissionEvaluator">
        <property name="objectPermissionEvaluator" ref="objectPermissionEvaluator" />
        <property name="pathFactory" ref="contentPathFactory" />
    </bean>
    
    <bean id="inheritedAclFactory" class="edu.unc.lib.dl.acl.fcrepo4.InheritedAclFactory">
        <property name="objectAclFactory" ref="objectAclFactory" />
        <property name="pathFactory" ref="contentPathFactory" />
        <property name="objectPermissionEvaluator" ref="objectPermissionEvaluator" />
    </bean>
    
    <!-- JMS messaging -->
    <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL"> 
                    <value>${jms.brokerUrl}</value>
                </property>
            </bean>
        </property>
    </bean>
    
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestinationName" value="${cdr.stream}" />
        <property name="pubSubDomain" value="true" />
    </bean>

    <bean id="solrUpdateJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="defaultDestinationName" value="${cdr.solrupdate.stream}" />
        <property name="pubSubDomain" value="false" />
    </bean>
    
    <bean id="abstractMessageSender" class="edu.unc.lib.dl.services.AbstractMessageSender" abstract="true" >
        <property name="jmsTemplate" ref="solrUpdateJmsTemplate" />
    </bean>
    
    <bean id="indexingMessageSender" parent="abstractMessageSender"
        class="edu.unc.lib.dl.services.IndexingMessageSender">
    </bean>

    <!-- Processors -->
    <bean id="cdrEventProcessor" class="edu.unc.lib.dl.services.camel.cdrEvents.CdrEventProcessor">
    </bean>
    
    <bean id="binaryMetadataProcessor" class="edu.unc.lib.dl.services.camel.BinaryMetadataProcessor">
        <property name="baseBinaryPath" value="${fcrepo.binaryBase}" />
    </bean>

    <bean id="addSmallThumbnailProcessor" class="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.dl.model.DatastreamType).THUMBNAIL_SMALL.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.thumbnail.small}" />
    </bean>
    
    <bean id="addLargeThumbnailProcessor" class="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.dl.model.DatastreamType).THUMBNAIL_LARGE.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.thumbnail.large}" />
    </bean>
    
    <bean id="addAccessCopyProcessor" class="edu.unc.lib.dl.services.camel.images.AddDerivativeProcessor">
        <constructor-arg value="#{T(edu.unc.lib.dl.model.DatastreamType).JP2_ACCESS_COPY.getExtension()}" />
        <constructor-arg value="${cdr.enhancement.path.jp2}" />
    </bean>
    
    <bean id="fulltextProcessor" class="edu.unc.lib.dl.services.camel.fulltext.FulltextProcessor">
        <constructor-arg value="${cdr.enhancement.path.fulltext}" />
    </bean>
    
    <bean id="replicationProcessor" class="edu.unc.lib.dl.services.camel.replication.ReplicationProcessor">
        <constructor-arg value="${cdr.replication.locations}" />
        <constructor-arg value="${error.maxRedeliveries}" />
        <constructor-arg value="${error.retryDelay}" />
    </bean>
    
    <bean id="getBinaryProcessor" class="edu.unc.lib.dl.services.camel.GetBinaryProcessor">
        <property name="repositoryObjectLoader" ref="repositoryObjectLoader"/>
        <property name="tempDirectory" value="${services.tempDirectory}" />
    </bean>
    
    <bean id="cleanupBinaryProcessor" class="edu.unc.lib.dl.services.camel.CleanupBinaryProcessor">
    </bean>
    
    <bean id="indexingMessageProcessor" class="edu.unc.lib.dl.services.camel.triplesReindexing.IndexingMessageProcessor">
    </bean>
    
    <bean id="fcrepo" class="org.fcrepo.camel.FcrepoComponent">
        <property name="authUsername" value="${fcrepo.authUsername}"/>
        <property name="authPassword" value="${fcrepo.authPassword}"/>
        <property name="authHost" value="${fcrepo.authHost}"/>
        <property name="baseUrl" value="${fcrepo.baseUrl}"/>
    </bean>

    <camel:camelContext id="FcrepoTriplestoreIndexer">
        <camel:package>org.fcrepo.camel.indexing.triplestore</camel:package>
    </camel:camelContext>
    
    <camel:camelContext id="CdrServiceTriplesReindexing">
        <camel:package>edu.unc.lib.dl.services.camel.triplesReindexing</camel:package>
    </camel:camelContext>

    <camel:camelContext id="CdrServiceImageEnhancements">
        <camel:package>edu.unc.lib.dl.services.camel.images</camel:package>
    </camel:camelContext>
    
    <camel:camelContext id="CdrServiceFulltextExtraction">
        <camel:package>edu.unc.lib.dl.services.camel.fulltext</camel:package>
    </camel:camelContext>
    
    <camel:camelContext id="CdrServiceReplication">
        <camel:package>edu.unc.lib.dl.services.camel.replication</camel:package>
    </camel:camelContext>
    
    <camel:camelContext id="CdrServiceCdrEvents">
        <camel:package>edu.unc.lib.dl.services.camel.cdrEvents</camel:package>
    </camel:camelContext>
    
    <camel:camelContext id="CdrEnhancements">
        <camel:package>edu.unc.lib.dl.services.camel.enhancements</camel:package>
    </camel:camelContext>
    
    <!-- Initialize metaServicesRouter after the routes it depends on -->
    <camel:camelContext id="MetaServicesRouter">
        <camel:package>edu.unc.lib.dl.services.camel.routing</camel:package>
    </camel:camelContext>
</beans>