diff --git a/admin/src/main/webapp/WEB-INF/service-context.xml b/admin/src/main/webapp/WEB-INF/service-context.xml
index 3af8d98521..663f963f9f 100755
--- a/admin/src/main/webapp/WEB-INF/service-context.xml
+++ b/admin/src/main/webapp/WEB-INF/service-context.xml
@@ -120,12 +120,14 @@
     </bean>
     
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg><null /></constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
+            <null />
+        </constructor-arg>
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
     
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
diff --git a/deposit/src/main/webapp/WEB-INF/service-context.xml b/deposit/src/main/webapp/WEB-INF/service-context.xml
index c385799f5a..07c8ba88d2 100755
--- a/deposit/src/main/webapp/WEB-INF/service-context.xml
+++ b/deposit/src/main/webapp/WEB-INF/service-context.xml
@@ -54,14 +54,14 @@
     </bean>
 
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg>
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
             <null />
         </constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
 
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
index 66d8341b0e..b273d7ce79 100755
--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectCacheLoader.java
@@ -108,7 +108,9 @@ private RepositoryObject instantiateRepositoryObject(PID pid, Model model, Strin
         if (resc.hasProperty(Premis.hasEventType)) {
             obj =  new PremisEventObject(pid, repositoryObjectDriver, repoObjFactory);
         } else if (isContentPID(pid)) {
-            if (resc.hasProperty(RDF.type, Cdr.Work)) {
+            if (resc.hasProperty(RDF.type, Cdr.Tombstone)) {
+                obj = new Tombstone(pid, repositoryObjectDriver, repoObjFactory);
+            } else if (resc.hasProperty(RDF.type, Cdr.Work)) {
                 obj = new WorkObject(pid, repositoryObjectDriver, repoObjFactory);
             } else if (resc.hasProperty(RDF.type, Cdr.FileObject)) {
                 obj = new FileObject(pid, repositoryObjectDriver, repoObjFactory);
diff --git a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
index e1e5244827..3a4eae13cd 100755
--- a/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
+++ b/fcrepo-clients/src/main/java/edu/unc/lib/dl/fcrepo4/RepositoryObjectLoader.java
@@ -134,6 +134,14 @@ public DepositRecord getDepositRecord(PID pid) {
         return (DepositRecord) repoObj;
     }
 
+    public Tombstone getTombstone(PID pid) {
+        RepositoryObject repoObj = getRepositoryObject(pid);
+        if (!(repoObj instanceof Tombstone)) {
+            throw new ObjectTypeMismatchException("Object with pid " + pid + " is not a tombstone");
+        }
+        return (Tombstone) repoObj;
+    }
+
     public RepositoryObject getRepositoryObject(PID pid) {
         try {
             return repositoryObjCache.get(pid);
diff --git a/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java b/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
index 5647b488b4..c6407466ad 100755
--- a/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
+++ b/fcrepo-clients/src/test/java/edu/unc/lib/dl/fcrepo4/TransactionalFcrepoClientTest.java
@@ -85,6 +85,7 @@ public void setup() throws Exception {
         when(header.getValue())
             .thenReturn(REQUEST_URI);
         when(httpResponse.getAllHeaders()).thenReturn(new Header[]{header});
+        when(request.getMethod()).thenReturn("GET");
     }
 
     @Test
diff --git a/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java b/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
index cbc49d45cf..531ec07f4a 100755
--- a/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
+++ b/metadata/src/main/java/edu/unc/lib/dl/rdf/Cdr.java
@@ -66,6 +66,10 @@ public static String getURI() {
     public static final Property depositedOnBehalfOf = createProperty(
             "http://cdr.unc.edu/definitions/model#depositedOnBehalfOf" );
 
+    /** Name of a binary file. */
+    public static final Property filename = createProperty(
+            "http://cdr.unc.edu/definitions/model#filename" );
+
     /** Relationship indicating that an ingested object was a part of a given deposit */
     public static final Property hasIngestedObject = createProperty(
             "http://cdr.unc.edu/definitions/model#hasIngestedObject");
@@ -74,9 +78,21 @@ public static String getURI() {
     public static final Property hasManifest = createProperty(
             "http://cdr.unc.edu/definitions/model#hasManifest" );
 
+    /** Relationship indicating a checksum on this binary object */
+    public static final Property hasMessageDigest = createProperty(
+            "http://cdr.unc.edu/definitions/model#hasMessageDigest" );
+
+    /** Relationship indicating the mimetype of this binary object */
+    public static final Property hasMimeType = createProperty(
+            "http://cdr.unc.edu/definitions/model#hasMimeType" );
+
    public static final Property hasMods = createProperty("http://cdr.unc.edu/definitions/model#hasMods");
 
-    /** Identifier indicating the profile of the metadata provided with this object
+   /** The size (e.g., in bytes) of this binary object */
+   public static final Property hasSize = createProperty(
+           "http://cdr.unc.edu/definitions/model#hasSize" );
+
+   /** Identifier indicating the profile of the metadata provided with this object
      *  at deposit time. Used to identify what transformation was used to generate
      *  descriptive metadata from the original metadata.
      */
diff --git a/persistence/pom.xml b/persistence/pom.xml
index 8dc99fec04..b6d8eeb2bf 100755
--- a/persistence/pom.xml
+++ b/persistence/pom.xml
@@ -179,9 +179,8 @@
             <artifactId>jackson-core-asl</artifactId>
         </dependency>
         <dependency>
-            <groupId>net.lariverosc</groupId>
-            <artifactId>jesque-spring</artifactId>
-            <version>1.0.0</version>
+            <groupId>net.greghaines</groupId>
+            <artifactId>jesque</artifactId>
         </dependency>
         <dependency>
             <groupId>com.samskivert</groupId>
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
index e5f0c7e3e6..fff48bdc6d 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJob.java
@@ -50,6 +50,7 @@
 import edu.unc.lib.dl.rdf.Cdr;
 import edu.unc.lib.dl.rdf.Ldp;
 import edu.unc.lib.dl.rdf.Premis;
+import edu.unc.lib.dl.search.solr.model.ObjectPath;
 import edu.unc.lib.dl.search.solr.service.ObjectPathFactory;
 import edu.unc.lib.dl.util.TombstonePropertySelector;
 import io.dropwizard.metrics5.Timer;
@@ -111,21 +112,21 @@ private void destroyTree(RepositoryObject rootOfTree) throws FedoraException, IO
                 destroyTree(member);
             }
         }
+        Resource rootResc = rootOfTree.getResource();
+        Model rootModel = rootResc.getModel();
         if (rootOfTree instanceof FileObject) {
             FileObject file = (FileObject) rootOfTree;
             BinaryObject origFile = file.getOriginalFile();
             if (origFile != null) {
-                addBinaryMetadataToParent(rootOfTree, origFile);
+                addBinaryMetadataToParent(rootModel, origFile);
             }
         }
-        Model rootModel = rootOfTree.getModel();
-        boolean hasLdpContains = rootModel.contains(rootOfTree.getResource(), Ldp.contains);
+        boolean hasLdpContains = rootModel.contains(rootResc, Ldp.contains);
         if (hasLdpContains) {
             deleteNonContentObjects(rootModel);
         }
         // destroy root of sub-tree
-        Model stoneModel = rootOfTree.getModel();
-        stoneModel = convertModelToTombstone(rootOfTree);
+        Model stoneModel = convertModelToTombstone(rootOfTree, rootResc);
         repoObjFactory.createOrTransformObject(rootOfTree.getUri(), stoneModel);
 
         //add premis event to tombstone
@@ -134,28 +135,27 @@ private void destroyTree(RepositoryObject rootOfTree) throws FedoraException, IO
             .write();
     }
 
-    private Model convertModelToTombstone(RepositoryObject destroyedObj)
+    private Model convertModelToTombstone(RepositoryObject destroyedObj, Resource destroyedResc)
             throws IOException, FcrepoOperationFailedException {
-        Model oldModel = destroyedObj.getModel();
-        Resource resc = destroyedObj.getResource();
 
         Model stoneModel = ModelFactory.createDefaultModel();
-        stoneModel.add(oldModel.listStatements(new TombstonePropertySelector(resc)));
-
-        // determine path and store in tombstone model
-        String path = pathFactory.getPath(destroyedObj.getPid()).toNamePath();
-        stoneModel.add(resc, Cdr.historicalPath, path);
-        stoneModel.add(resc, RDF.type, Cdr.Tombstone);
+        stoneModel.add(destroyedResc.getModel().listStatements(new TombstonePropertySelector(destroyedResc)));
+
+        // determine paths and store in tombstone model
+        ObjectPath objPath = pathFactory.getPath(destroyedObj.getPid());
+        String namePath = objPath.toNamePath();
+        stoneModel.add(destroyedResc, Cdr.historicalPath, namePath);
+        String pidPath = objPath.toIdPath();
+        stoneModel.add(destroyedResc, Cdr.historicalIdPath, pidPath);
+        stoneModel.add(destroyedResc, RDF.type, Cdr.Tombstone);
         return stoneModel;
     }
 
-    private void addBinaryMetadataToParent(RepositoryObject parent, BinaryObject child) {
-        Model childModel = child.getModel();
-        Model parentModel = parent.getModel();
-        Resource resc = child.getResource();
+    private void addBinaryMetadataToParent(Model parentModel, BinaryObject child) {
+        Resource childResc = child.getResource();
 
-        TombstonePropertySelector selector = new TombstonePropertySelector(resc);
-        StmtIterator iter = childModel.listStatements(selector);
+        TombstonePropertySelector selector = new TombstonePropertySelector(childResc);
+        StmtIterator iter = childResc.getModel().listStatements(selector);
         while (iter.hasNext()) {
             Statement s = iter.nextStatement();
             if (selector.selects(s)) {
diff --git a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
index 43d56e13f5..93d873b58d 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsService.java
@@ -27,8 +27,10 @@
 import edu.unc.lib.dl.acl.util.Permission;
 import edu.unc.lib.dl.fcrepo4.AdminUnit;
 import edu.unc.lib.dl.fcrepo4.PIDs;
+import edu.unc.lib.dl.fcrepo4.RepositoryObject;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.rdf.CdrAcl;
 
 /**
  * Service that manages the destruction of objects in the repository and their replacement by tombstones
@@ -56,14 +58,17 @@ public void destroyObjects(AgentPrincipals agent, List<String> ids) {
 
         for (String id : ids) {
             PID pid = PIDs.get(id);
-            if (repoObjLoader.getRepositoryObject(pid) instanceof AdminUnit) {
+            RepositoryObject obj = repoObjLoader.getRepositoryObject(pid);
+            if (obj instanceof AdminUnit) {
                 aclService.assertHasAccess("User does not have permission to destroy admin unit", pid,
                         agent.getPrincipals(), Permission.destroyUnit);
             } else {
                 aclService.assertHasAccess("User does not have permission to destroy this object", pid,
                         agent.getPrincipals(), Permission.destroy);
             }
-            objsToDestroy.add(pid);
+            if (obj.getResource().hasProperty(CdrAcl.markedForDeletion)) {
+                objsToDestroy.add(pid);
+            }
         }
         if (!objsToDestroy.isEmpty()) {
             DestroyObjectsJob job = new DestroyObjectsJob(objsToDestroy);
diff --git a/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java b/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
index 3587764304..26d47dcc5b 100755
--- a/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
+++ b/persistence/src/main/java/edu/unc/lib/dl/util/TombstonePropertySelector.java
@@ -24,8 +24,8 @@
 import org.apache.jena.rdf.model.Statement;
 import org.apache.jena.vocabulary.RDF;
 
+import edu.unc.lib.dl.rdf.Cdr;
 import edu.unc.lib.dl.rdf.DcElements;
-import edu.unc.lib.dl.rdf.Ebucore;
 import edu.unc.lib.dl.rdf.Premis;
 
 /**
@@ -37,9 +37,9 @@
 public class TombstonePropertySelector extends SimpleSelector {
 
     List<Property> permittedPredicates = Arrays.asList(
-            DcElements.title, Ebucore.filename, Ebucore.hasMimeType,
-            Premis.hasOriginalName, Premis.hasMessageDigest,
-            Premis.hasSize, RDF.type);
+            DcElements.title, Cdr.filename, Cdr.hasMimeType,
+            Premis.hasOriginalName, Cdr.hasMessageDigest,
+            Cdr.hasSize, RDF.type);
 
     /**
      * Selects only those statements whose predicates match one of the permitted predicates
diff --git a/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java b/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
index 395f99c639..3831b8fbd2 100755
--- a/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
+++ b/persistence/src/test/java/edu/unc/lib/dl/persist/services/destroy/DestroyObjectsJobIT.java
@@ -54,6 +54,7 @@
 import edu.unc.lib.dl.fcrepo4.PremisEventObject;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectFactory;
 import edu.unc.lib.dl.fcrepo4.RepositoryObjectLoader;
+import edu.unc.lib.dl.fcrepo4.Tombstone;
 import edu.unc.lib.dl.fcrepo4.TransactionManager;
 import edu.unc.lib.dl.fcrepo4.WorkObject;
 import edu.unc.lib.dl.fedora.PID;
@@ -116,6 +117,7 @@ public void init() throws Exception {
 
         when(pathFactory.getPath(any(PID.class))).thenReturn(path);
         when(path.toNamePath()).thenReturn("path/to/object");
+        when(path.toIdPath()).thenReturn("pid0/pid1/pid2/pid3");
     }
 
     @Test
@@ -143,14 +145,17 @@ public void destroyObjectsInSameTreeTest() {
         PID folderObjPid = objsToDestroy.get(0);
         verify(spyProxyService).destroyProxy(folderObjPid);
 
-        FileObject fileObj = repoObjLoader.getFileObject(fileObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(workObjPid);
-        FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(workObj.getModel().contains(workObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj.getModel().contains(folderObj.getResource(), RDF.type, Cdr.Tombstone));
-
-        PremisEventObject event = repoObjLoader.getPremisEventObject(folderObj.getPremisLog().listEvents().get(0));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        Tombstone stoneWork = repoObjLoader.getTombstone(workObjPid);
+        Tombstone stoneFolder = repoObjLoader.getTombstone(folderObjPid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.FileObject));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Work));
+        assertTrue(stoneFolder.getModel().contains(stoneFolder.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder.getModel().contains(stoneFolder.getResource(), RDF.type, Cdr.Folder));
+
+        PremisEventObject event = repoObjLoader.getPremisEventObject(stoneFolder.getPremisLog().listEvents().get(0));
         assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
         assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
@@ -165,27 +170,27 @@ public void destroyObjectsInDifferentTreesTest() {
         PID folderObj2Pid = objsToDestroy.get(3);
         PID fileObjPid = objsToDestroy.get(2);
         PID workObjPid = objsToDestroy.get(1);
-        PID folderObjPid = objsToDestroy.get(0);
-        verify(spyProxyService).destroyProxy(folderObjPid);
+        PID folderObj1Pid = objsToDestroy.get(0);
+        verify(spyProxyService).destroyProxy(folderObj1Pid);
         verify(spyProxyService).destroyProxy(folderObj2Pid);
 
-        FileObject fileObj = repoObjLoader.getFileObject(fileObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(workObjPid);
-        FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        FolderObject folderObj2 = repoObjLoader.getFolderObject(folderObj2Pid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(workObj.getModel().contains(workObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj.getModel().contains(folderObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(folderObj2.getModel().contains(folderObj2.getResource(), RDF.type, Cdr.Tombstone));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        Tombstone stoneWork = repoObjLoader.getTombstone(workObjPid);
+        Tombstone stoneFolder1 = repoObjLoader.getTombstone(folderObj1Pid);
+        Tombstone stoneFolder2 = repoObjLoader.getTombstone(folderObj2Pid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneWork.getModel().contains(stoneWork.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder1.getModel().contains(stoneFolder1.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFolder2.getModel().contains(stoneFolder2.getResource(), RDF.type, Cdr.Tombstone));
 
-        PremisEventObject event = repoObjLoader.getPremisEventObject(folderObj.getPremisLog().listEvents().get(0));
+        PremisEventObject event = repoObjLoader.getPremisEventObject(stoneFolder1.getPremisLog().listEvents().get(0));
         assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
         assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
 
-        PremisEventObject event2 = repoObjLoader.getPremisEventObject(folderObj2.getPremisLog().listEvents().get(0));
-        assertTrue(event.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
-        assertTrue(event.getResource().hasProperty(Premis.hasEventDetail,
+        PremisEventObject event2 = repoObjLoader.getPremisEventObject(stoneFolder2.getPremisLog().listEvents().get(0));
+        assertTrue(event2.getResource().hasProperty(Premis.hasEventType, Premis.Deletion));
+        assertTrue(event2.getResource().hasProperty(Premis.hasEventDetail,
                 "Item deleted from repository and replaced by tombstone"));
     }
 
@@ -194,8 +199,8 @@ public void destroyFolderTest() {
         PID folderObjPid = objsToDestroy.get(0);
         initializeJob(Arrays.asList(folderObjPid));
         FolderObject folderObj = repoObjLoader.getFolderObject(folderObjPid);
-        WorkObject workObj = repoObjLoader.getWorkObject(folderObj.getMembers().get(0).getPid());
-        FileObject fileObj = repoObjLoader.getFileObject(workObj.getMembers().get(0).getPid());
+        WorkObject workObj = (WorkObject) folderObj.getMembers().get(0);
+        FileObject fileObj = (FileObject) workObj.getMembers().get(0);
 
         job.run();
 
@@ -218,9 +223,9 @@ public void destroySingleObjectWithPreexistingPremisEventTest() {
         job.run();
 
         verify(spyProxyService).destroyProxy(fileObjPid);
-        fileObj = repoObjLoader.getFileObject(fileObjPid);
-        assertTrue(fileObj.getModel().contains(fileObj.getResource(), RDF.type, Cdr.Tombstone));
-        assertTrue(fileObj.getPremisLog().listEvents().contains(eventPid));
+        Tombstone stoneFile = repoObjLoader.getTombstone(fileObjPid);
+        assertTrue(stoneFile.getModel().contains(stoneFile.getResource(), RDF.type, Cdr.Tombstone));
+        assertTrue(stoneFile.getPremisLog().listEvents().contains(eventPid));
     }
 
     private List<PID> createContentTree() throws Exception {
diff --git a/pom.xml b/pom.xml
index a2c3969ce7..7809da2564 100755
--- a/pom.xml
+++ b/pom.xml
@@ -458,7 +458,7 @@
             <dependency>
                 <groupId>net.greghaines</groupId>
                 <artifactId>jesque</artifactId>
-                <version>2.0.2</version>
+                <version>2.1.2</version>
             </dependency>
             <dependency>
                 <groupId>edu.unc.lib.cdr</groupId>
diff --git a/services/src/main/webapp/WEB-INF/service-context.xml b/services/src/main/webapp/WEB-INF/service-context.xml
index 710ed80058..12c00cbc42 100755
--- a/services/src/main/webapp/WEB-INF/service-context.xml
+++ b/services/src/main/webapp/WEB-INF/service-context.xml
@@ -65,14 +65,14 @@
     </bean>
     
     <bean id="jesqueConfig" class="net.greghaines.jesque.Config">
-        <constructor-arg value="${redis.host:localhost}" />
-        <constructor-arg value="${redis.port:6379}" />
-        <constructor-arg value="2000" />
-        <constructor-arg>
+        <constructor-arg value="${redis.host:localhost}" type="java.lang.String" />
+        <constructor-arg value="${redis.port:6379}" type="int" />
+        <constructor-arg value="2000" type="int" />
+        <constructor-arg type="java.lang.String">
             <null />
         </constructor-arg>
-        <constructor-arg value="resque" />
-        <constructor-arg value="0" />
+        <constructor-arg value="resque" type="java.lang.String" />
+        <constructor-arg value="0" type="int" />
     </bean>
     
     <bean id="jesqueClient" class="net.greghaines.jesque.client.ClientPoolImpl"
diff --git a/services/src/main/webapp/WEB-INF/sword-context.xml b/services/src/main/webapp/WEB-INF/sword-context.xml
index a9fb49fec6..265db3ffec 100755
--- a/services/src/main/webapp/WEB-INF/sword-context.xml
+++ b/services/src/main/webapp/WEB-INF/sword-context.xml
@@ -91,8 +91,6 @@
     </bean>
     
     <bean id="depositReportingUtil" class="edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil">
-        <!-- <property name="tripleStoreQueryService" ref="tripleStoreQueryService" /> -->
-        <!-- <property name="accessClient" ref="accessClient"/> -->
     </bean>
     
     <bean id="collectionListManager" class="edu.unc.lib.dl.cdr.sword.server.managers.CollectionListManagerImpl">
@@ -138,8 +136,6 @@
     </bean>
     
     <bean id="containerManager" class="edu.unc.lib.dl.cdr.sword.server.managers.ContainerManagerImpl">
-        <property name="uipProcessor" ref="fedoraUIPProcessor"/>
-        <property name="depositReportingUtil" ref="depositReportingUtil"/>
     </bean>
     
     <bean id="mediaResourceManager" class="edu.unc.lib.dl.cdr.sword.server.managers.MediaResourceManagerImpl">
@@ -148,7 +144,6 @@
     </bean>
     
     <bean id="statementManager" class="edu.unc.lib.dl.cdr.sword.server.managers.StatementManagerImpl">
-        <property name="depositReportingUtil" ref="depositReportingUtil"/>
     </bean>
     
     <bean id="depositorAccessControlFilter" class="edu.unc.lib.dl.cdr.sword.server.filters.DepositorAccessControlFilter">
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
index b8a5486100..76f9b7148c 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/AbstractDepositHandler.java
@@ -47,7 +47,7 @@
 import edu.unc.lib.dl.util.RedisWorkerConstants.Priority;
 
 /**
- * 
+ *
  * @author bbpennel
  *
  */
@@ -117,7 +117,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
                     "Duplicate request, repository already has deposit " + depositPid);
         }
 
-        Map<String, String> status = new HashMap<String, String>();
+        Map<String, String> status = new HashMap<>();
         status.putAll(extras);
 
         // generic deposit fields
@@ -126,7 +126,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
         status.put(DepositField.fileMimetype.name(), deposit.getMimeType());
         status.put(DepositField.depositorName.name(), owner);
         status.put(DepositField.depositorEmail.name(), GroupsThreadStore.getEmail());
-        status.put(DepositField.containerId.name(), destination.getPid());
+        status.put(DepositField.containerId.name(), destination.getId());
         status.put(DepositField.depositMethod.name(), DepositMethod.SWORD13.getLabel());
         status.put(DepositField.packagingType.name(), type.getUri());
         status.put(DepositField.depositMd5.name(), deposit.getMd5());
@@ -155,7 +155,7 @@ protected void registerDeposit(PID depositPid, PID destination, Deposit deposit,
 
         status.put(DepositField.state.name(), DepositState.unregistered.name());
         status.put(DepositField.actionRequest.name(), DepositAction.register.name());
-        Set<String> nulls = new HashSet<String>();
+        Set<String> nulls = new HashSet<>();
         for (String key : status.keySet()) {
             if (status.get(key) == null) {
                 nulls.add(key);
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
index f853190669..6d94ca886f 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/deposit/CDRMETSDepositHandler.java
@@ -30,6 +30,7 @@
 import org.swordapp.server.SwordConfiguration;
 import org.swordapp.server.SwordError;
 
+import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fedora.PID;
 import edu.unc.lib.dl.util.ErrorURIRegistry;
 import edu.unc.lib.dl.util.MetsHeaderScanner;
@@ -65,7 +66,7 @@ public DepositReceipt doDeposit(PID destination, Deposit deposit, PackagingType
         PID depositPID = scanner.getObjID();
         if (depositPID == null) {
             UUID depositUUID = UUID.randomUUID();
-            depositPID = new PID("uuid:" + depositUUID.toString());
+            depositPID = PIDs.get(depositUUID.toString());
         }
         File dir = makeNewDepositDirectory(depositPID.getUUID());
 
@@ -76,11 +77,11 @@ public DepositReceipt doDeposit(PID destination, Deposit deposit, PackagingType
             FileUtils.moveFile(deposit.getFile(), new File(data, deposit.getFilename()));
         } catch (IOException e) {
             throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-                    "Unable to create your deposit bag: " + depositPID.getPid(), e);
+                    "Unable to create your deposit bag: " + depositPID.getRepositoryPath(), e);
         }
 
         // METS specific fields
-        Map<String, String> status = new HashMap<String, String>();
+        Map<String, String> status = new HashMap<>();
         status.put(DepositField.packageProfile.name(), scanner.getProfile());
         status.put(DepositField.metsType.name(), scanner.getType());
         status.put(DepositField.createTime.name(), scanner.getCreateDate());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
index 839ed9e03b..5508e884b3 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/AbstractFedoraManager.java
@@ -15,17 +15,21 @@
  */
 package edu.unc.lib.dl.cdr.sword.server.managers;
 
+import static edu.unc.lib.dl.acl.util.GroupsThreadStore.getAgentPrincipals;
+import static org.apache.http.HttpStatus.SC_FORBIDDEN;
+
 import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.swordapp.server.AuthCredentials;
+import org.swordapp.server.SwordError;
 
+import edu.unc.lib.dl.acl.service.AccessControlService;
 import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
+import edu.unc.lib.dl.fcrepo4.PIDs;
 import edu.unc.lib.dl.fcrepo4.RepositoryPaths;
-import edu.unc.lib.dl.fedora.DatastreamPID;
 import edu.unc.lib.dl.fedora.PID;
+import edu.unc.lib.dl.util.ErrorURIRegistry;
 
 /**
  *
@@ -38,10 +42,13 @@
     @Autowired
     protected String swordPath;
 
+    @Autowired
+    protected AccessControlService aclService;
+
     protected String readFileAsString(String filePath) throws java.io.IOException {
         LOG.debug("Loading path file " + filePath);
         try (java.io.InputStream inStream = this.getClass().getResourceAsStream(filePath)) {
-            return IOUtils.toString(inStream);
+            return IOUtils.toString(inStream, "UTF-8");
         }
     }
 
@@ -56,20 +63,15 @@ protected PID extractPID(String uri, String basePath) {
         if (pidString.trim().length() == 0) {
             targetPID = RepositoryPaths.getContentRootPid();
         } else {
-            targetPID = new DatastreamPID(pidString);
+            targetPID = PIDs.get(pidString);
         }
         return targetPID;
     }
 
-    protected boolean hasAccess(AuthCredentials auth, PID pid, Permission permission, SwordConfigurationImpl config) {
-        if (config.getAdminDepositor() != null && config.getAdminDepositor().equals(auth.getUsername())) {
-            return true;
+    protected void assertHasAccess(String message, PID pid, Permission permission) throws SwordError {
+        if (!aclService.hasAccess(pid, getAgentPrincipals().getPrincipals(), permission)) {
+            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, SC_FORBIDDEN, message);
         }
-        throw new RuntimeException("Not implemented");
-        //        ObjectAccessControlsBean aclBean = aclService.getObjectAccessControls(pid);
-        //        AccessGroupSet groups = GroupsThreadStore.getGroups();
-        //
-        //        return aclBean.hasPermission(groups, permission);
     }
 
     public String getSwordPath() {
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
index b120ce9cee..03e9ebab74 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionDepositManagerImpl.java
@@ -65,14 +65,10 @@ public DepositReceipt createNew(String collectionURI, Deposit deposit, AuthCrede
         String depositor = auth.getUsername();
         String owner = (auth.getOnBehalfOf() != null) ? auth.getOnBehalfOf() : depositor;
 
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
         PID containerPID = extractPID(collectionURI, SwordConfigurationImpl.COLLECTION_PATH + "/");
 
-        if (!hasAccess(auth, containerPID, Permission.addRemoveContents, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to deposit to container " + containerPID.getPid());
-        }
+        assertHasAccess("Insufficient privileges to deposit to container " + containerPID.getRepositoryPath(),
+                containerPID, Permission.ingest);
 
         // Get the enum for the provided packaging type. Null can be a legitimate type
         PackagingType type = PackagingType.getPackagingType(deposit.getPackaging());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
index 94ac13f796..bba70621ef 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/CollectionListManagerImpl.java
@@ -87,10 +87,8 @@ public Feed listCollectionContents(IRI collectionIRI, AuthCredentials auth, Swor
         }
 
         // Verify access control
-        if (!hasAccess(auth, containerPID, Permission.viewDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to view the collection list for " + containerPID.getPid());
-        }
+        assertHasAccess("Insufficient privileges to view the collection list for " + containerPID.getRepositoryPath(),
+                containerPID, Permission.viewMetadata);
 
         Feed feed = abdera.getFactory().newFeed();
         feed.setId(containerPID.getPid());
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
index 07bb629e9a..802cee8d70 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ContainerManagerImpl.java
@@ -17,9 +17,7 @@
 
 import java.util.Map;
 
-import org.apache.abdera.i18n.iri.IRI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.commons.lang3.NotImplementedException;
 import org.swordapp.server.AuthCredentials;
 import org.swordapp.server.ContainerManager;
 import org.swordapp.server.Deposit;
@@ -29,17 +27,7 @@
 import org.swordapp.server.SwordError;
 import org.swordapp.server.SwordServerException;
 
-import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
-import edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil;
-import edu.unc.lib.dl.fedora.AuthorizationException;
-import edu.unc.lib.dl.fedora.PID;
-import edu.unc.lib.dl.update.AtomPubMetadataUIP;
-import edu.unc.lib.dl.update.UIPException;
-import edu.unc.lib.dl.update.UIPProcessor;
-import edu.unc.lib.dl.update.UpdateException;
 import edu.unc.lib.dl.update.UpdateOperation;
-import edu.unc.lib.dl.util.ErrorURIRegistry;
 
 /**
  *
@@ -48,58 +36,10 @@
  */
 public class ContainerManagerImpl extends AbstractFedoraManager implements ContainerManager {
 
-    private static Logger log = LoggerFactory.getLogger(ContainerManagerImpl.class);
-
-    //    private DigitalObjectManager digitalObjectManager;
-    private UIPProcessor uipProcessor;
-    //    private ManagementClient managementClient;
-    private DepositReportingUtil depositReportingUtil;
-
     private DepositReceipt updateMetadata(String editIRI, Deposit deposit, AuthCredentials auth,
             SwordConfiguration config, UpdateOperation operation) throws SwordError, SwordServerException,
     SwordAuthException {
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.editDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to update metadata for " + targetPID.getPid());
-        }
-
-        AtomPubMetadataUIP uip;
-        try {
-            uip = new AtomPubMetadataUIP(targetPID, auth.getUsername(), operation, deposit.getSwordEntry().getEntry());
-        } catch (UIPException e) {
-            log.warn("An exception occurred while attempting to create metadata UIP for " + targetPID.getPid(), e);
-            throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-                    "An exception occurred while attempting to create metadata UIP for " + editIRI, e);
-        }
-
-        try {
-            uipProcessor.process(uip);
-        } catch (UpdateException e) {
-            if (e.getCause() instanceof AuthorizationException) {
-                throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                        "Failed to authorize update metadata operation", e);
-            }
-            throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-                    "An exception occurred while attempting to update object " + targetPID.getPid(), e);
-        } catch (UIPException e) {
-            log.warn("Failed to process UIP for " + targetPID.getPid(), e);
-            throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-                    "A problem occurred while attempting to perform the requested update operation on "
-                            + editIRI, e);
-        }
-
-        DepositReceipt receipt = new DepositReceipt();
-        receipt.setLocation(new IRI(editIRI));
-        receipt.setEmpty(true);
-
-        // Update the objects in progress status
-        this.setInProgress(targetPID, deposit, receipt);
-
-        return receipt;
+        throw new NotImplementedException("Operation not supported");
     }
 
     @Override
@@ -140,28 +80,7 @@ public DepositReceipt addResources(String editIRI, Deposit deposit, AuthCredenti
     @Override
     public void deleteContainer(String editIRI, AuthCredentials auth, SwordConfiguration config) throws SwordError,
     SwordServerException, SwordAuthException {
-        // Ignoring on-behalf-of for the moment
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        if (!hasAccess(auth, targetPID, Permission.moveToTrash, configImpl)) {
-            log.debug("Insufficient privileges to delete object " + targetPID.getPid());
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to delete object " + targetPID.getPid());
-        }
-
-        //        try {
-        //            this.digitalObjectManager.delete(targetPID, auth.getUsername(), "Deleted by "
-        //              + auth.getUsername());
-        //        } catch (NotFoundException e) {
-        //            throw new SwordError(ErrorURIRegistry.RESOURCE_NOT_FOUND, 404,
-        //                    "Unable to delete the object " + targetPID.getPid()
-        //                    + ".  The object was not found in the repository.");
-        //        } catch (IngestException e) {
-        //            throw new SwordError(ErrorURIRegistry.INGEST_EXCEPTION, 500,
-        //                    "Failed to delete object " + targetPID.getPid(), e);
-        //        }
+        throw new NotImplementedException("Operation not supported");
     }
 
     /**
@@ -170,22 +89,7 @@ public void deleteContainer(String editIRI, AuthCredentials auth, SwordConfigura
     @Override
     public DepositReceipt useHeaders(String editIRI, Deposit deposit, AuthCredentials auth, SwordConfiguration config)
             throws SwordError, SwordServerException, SwordAuthException {
-
-        PID targetPID = extractPID(editIRI, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        DepositReceipt receipt = new DepositReceipt();
-        receipt.setLocation(new IRI(editIRI));
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.editAccessControl, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to update object headers " + targetPID.getPid());
-        }
-
-        this.setInProgress(targetPID, deposit, receipt);
-
-        return receipt;
+        throw new NotImplementedException("Operation not supported");
     }
 
     /**
@@ -205,44 +109,6 @@ public boolean isStatementRequest(String editIRI, Map<String, String> accept, Au
     @Override
     public DepositReceipt getEntry(String editIRIString, Map<String, String> accept, AuthCredentials auth,
             SwordConfiguration configBase) throws SwordServerException, SwordError, SwordAuthException {
-
-        PID targetPID = extractPID(editIRIString, SwordConfigurationImpl.EDIT_PATH + "/");
-
-        SwordConfigurationImpl config = (SwordConfigurationImpl) configBase;
-
-        if (!hasAccess(auth, targetPID, Permission.viewDescription, config)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to get deposit receipt " + targetPID.getPid());
-        }
-
-        DepositReceipt receipt = depositReportingUtil.retrieveDepositReceipt(targetPID, config);
-
-        return receipt;
-    }
-
-    private void setInProgress(PID targetPID, Deposit deposit, DepositReceipt receipt) throws SwordError {
-        //        String state = tripleStoreQueryService.fetchState(targetPID);
-        //        if (deposit.isInProgress() != Boolean.parseBoolean(state)) {
-        //            try {
-        //                log.debug("Updating active state of in-progress item");
-        //                managementClient.addLiteralStatement(targetPID, FedoraProperty.Active.getFragment(),
-        //                        FedoraProperty.Active.getNamespace(), "Active", null);
-        //                receipt.setVerboseDescription(targetPID.getPid() + " is " +
-        //                        ((deposit.isInProgress()) ? "" : "not")
-        //                        + " in-progress");
-        //            } catch (FedoraException e) {
-        //                throw new SwordError(ErrorURIRegistry.UPDATE_EXCEPTION, 500,
-        //                      "Failed to update active state for "
-        //                        + targetPID.getPid());
-        //            }
-        //        }
-    }
-
-    public void setUipProcessor(UIPProcessor uipProcessor) {
-        this.uipProcessor = uipProcessor;
-    }
-
-    public void setDepositReportingUtil(DepositReportingUtil depositReportingUtil) {
-        this.depositReportingUtil = depositReportingUtil;
+        throw new NotImplementedException("Operation not supported");
     }
 }
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
index 5f09eb888b..ec78071f06 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/ServiceDocumentManagerImpl.java
@@ -78,11 +78,8 @@ public ServiceDocument getServiceDocument(String sdUri, AuthCredentials auth, Sw
             pid = RepositoryPaths.getContentRootPid();
         }
 
-        if (!hasAccess(auth, pid, Permission.viewDescription, configImpl)) {
-            LOG.debug("Insufficient privileges to access the service document for " + pid.getPid());
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to access the service document for " + pid.getPid());
-        }
+        assertHasAccess("Insufficient privileges to access the service document for " + pid.getRepositoryPath(),
+                pid, Permission.viewMetadata);
 
         LOG.debug("Retrieving service document for " + pid);
 
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
index 9f7fb8a66f..3acfe19c14 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/managers/StatementManagerImpl.java
@@ -17,8 +17,7 @@
 
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.apache.commons.lang3.NotImplementedException;
 import org.swordapp.server.AuthCredentials;
 import org.swordapp.server.Statement;
 import org.swordapp.server.StatementManager;
@@ -27,12 +26,6 @@
 import org.swordapp.server.SwordError;
 import org.swordapp.server.SwordServerException;
 
-import edu.unc.lib.dl.acl.util.Permission;
-import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
-import edu.unc.lib.dl.cdr.sword.server.util.DepositReportingUtil;
-import edu.unc.lib.dl.fedora.PID;
-import edu.unc.lib.dl.util.ErrorURIRegistry;
-
 /**
  *
  * @author bbpennel
@@ -40,49 +33,11 @@
  */
 public class StatementManagerImpl extends AbstractFedoraManager implements StatementManager {
 
-    private static Logger log = LoggerFactory.getLogger(StatementManagerImpl.class);
-
-    private DepositReportingUtil depositReportingUtil;
-
     @Override
     public Statement getStatement(String iri, Map<String, String> accept,
             AuthCredentials auth, SwordConfiguration config)
                     throws SwordServerException, SwordError, SwordAuthException {
 
-        PID targetPID = extractPID(iri, SwordConfigurationImpl.STATE_PATH + "/");
-
-        SwordConfigurationImpl configImpl = (SwordConfigurationImpl) config;
-
-        if (!hasAccess(auth, targetPID, Permission.viewDescription, configImpl)) {
-            throw new SwordError(ErrorURIRegistry.INSUFFICIENT_PRIVILEGES, 403,
-                    "Insufficient privileges to retrieve statement for " + targetPID.getPid());
-        }
-
-        //        String label = tripleStoreQueryService.lookupLabel(targetPID);
-        //        String lastModifiedString = tripleStoreQueryService.fetchFirstBySubjectAndPredicate(targetPID,
-        //                ContentModelHelper.FedoraProperty.lastModifiedDate.toString());
-        //
-        //        Statement statement = new AtomStatementImpl(iri, "CDR", label, lastModifiedString);
-        //
-        //        if (lastModifiedString != null) {
-        //            try {
-        //                statement.setLastModified(DateTimeUtil.parseUTCToDate(lastModifiedString));
-        //            } catch (ParseException e) {
-        //                log.error("Could not parse last modified", e);
-        //            }
-        //        }
-        //        statement.setOriginalDeposits(depositReportingUtil.getOriginalDeposits(targetPID, configImpl));
-        //
-        //        statement.setResources(new ArrayList<ResourcePart>());
-        //
-        //        statement.setStates(new HashMap<String, String>());
-        //        statement.addState("Activity", tripleStoreQueryService.fetchState(targetPID));
-        //
-        //        return statement;
-        return null;
-    }
-
-    public void setDepositReportingUtil(DepositReportingUtil depositReportingUtil) {
-        this.depositReportingUtil = depositReportingUtil;
+        throw new NotImplementedException("Operation not supported");
     }
 }
diff --git a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
index a03388e248..f2aee41c53 100755
--- a/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
+++ b/sword-server/src/main/java/edu/unc/lib/dl/cdr/sword/server/util/DepositReportingUtil.java
@@ -15,153 +15,19 @@
  */
 package edu.unc.lib.dl.cdr.sword.server.util;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import org.apache.abdera.i18n.iri.IRI;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.swordapp.server.DepositReceipt;
-import org.swordapp.server.OriginalDeposit;
 
 import edu.unc.lib.dl.cdr.sword.server.SwordConfigurationImpl;
 import edu.unc.lib.dl.fedora.PID;
 
 /**
+ * Utility for generating reports of SWORD deposits
  *
  * @author bbpennel
  *
  */
 public class DepositReportingUtil {
-    private static Logger log = LoggerFactory.getLogger(DepositReportingUtil.class);
-
-    //    private TripleStoreQueryService tripleStoreQueryService;
-    //    private AccessClient accessClient;
-
-    public static class OriginalDepositPair {
-        public String originalDepositURI;
-        public String mimetype;
-
-        public OriginalDepositPair(String originalDepositURI, String mimetype) {
-            this.originalDepositURI = originalDepositURI;
-            this.mimetype = mimetype;
-        }
-    }
-
-    public OriginalDepositPair getOriginalDeposit(PID pid, SwordConfigurationImpl config) {
-        //        List<String> originalDeposits = tripleStoreQueryService.fetchBySubjectAndPredicate(pid,
-        //                ContentModelHelper.Relationship.originalDeposit.toString());
-        //
-        //        if (originalDeposits.size() == 0) {
-        //            return null;
-        //        }
-        //
-        //        PID depositPID = new PID(originalDeposits.get(0));
-        //
-        //        Map<String, List<String>> depositTriples = tripleStoreQueryService.fetchAllTriples(depositPID);
-        //
-        //        // Get originalDeposit URI
-        //        List<String> values = depositTriples.get(ContentModelHelper.FedoraProperty.disseminates.toString());
-        //        if (values != null) {
-        //            for (String dissemination : values) {
-        //                if (dissemination.endsWith("/" + Datastream.DATA_MANIFEST.getName())) {
-        //                    return new OriginalDepositPair(config.getSwordPath()
-        //                            + SwordConfigurationImpl.EDIT_MEDIA_PATH
-        //                            + "/" + depositPID.getPid() + "/" + Datastream.DATA_MANIFEST.getName(),
-        //                              "text/xml");
-        //                }
-        //            }
-        //        }
-        //
-        //        // Use the objects datafile as its original deposit URI if there was no manifest
-        //        return new OriginalDepositPair(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/"
-        //                + pid.getPid() + "/" + Datastream.DATA_FILE.getName(),
-        //                tripleStoreQueryService.lookupSourceMimeType(pid));
-        return null;
-    }
-
-    public List<OriginalDeposit> getOriginalDeposits(PID pid, SwordConfigurationImpl config) {
-        List<OriginalDeposit> results = new ArrayList<>();
-
-        //        List<String> originalDeposits = tripleStoreQueryService.fetchBySubjectAndPredicate(pid,
-        //                ContentModelHelper.Relationship.originalDeposit.toString());
-        //
-        //        Date depositedOn = null;
-        //        String depositedBy = null;
-        //        String depositedOnBehalfOf = null;
-        //        String originalDepositURI = null;
-        //        String mimetype = null;
-        //        List<String> packageTypes = null;
-        //        List<String> values = null;
-        //        for (String originalDeposit : originalDeposits) {
-        //            PID depositPID = new PID(originalDeposit);
-        //            Map<String, List<String>> depositTriples =
-        //                tripleStoreQueryService.fetchAllTriples(depositPID);
-        //
-        //            // Get originalDeposit URI
-        //            values = depositTriples.get(ContentModelHelper.FedoraProperty.disseminates.toString());
-        //            if (values != null) {
-        //                for (String dissemination : values) {
-        //                    if (dissemination.endsWith("/" + Datastream.DATA_MANIFEST.getName())) {
-        //                        originalDepositURI = config.getSwordPath()
-        //                                + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/"
-        //                                + depositPID.getPid() + "/" + Datastream.DATA_MANIFEST.getName();
-        //                        mimetype = "text/xml";
-        //                        break;
-        //                    }
-        //                }
-        //            }
-        //
-        //            // Use the objects datafile as its original deposit URI if there was no manifest
-        //            if (originalDepositURI == null) {
-        //                originalDepositURI = config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH
-        //                        + "/" + pid.getPid() + "/" + Datastream.DATA_FILE.getName();
-        //                mimetype = tripleStoreQueryService.lookupSourceMimeType(pid);
-        //            }
-        //
-        //            // Get depositedOn value
-        //            values = depositTriples.get(ContentModelHelper.FedoraProperty.createdDate.toString());
-        //            if (values != null && values.size() > 0) {
-        //                String depositedOnString = depositTriples.get(ContentModelHelper.FedoraProperty
-        //                        .createdDate.toString()).get(0);
-        //                try {
-        //                    depositedOn = DateTimeUtil.parseUTCToDate(depositedOnString);
-        //                } catch (ParseException e) {
-        //                    log.error("Could not parse deposited on", e);
-        //                }
-        //            }
-        //
-        //            // Get package types
-        //            packageTypes = depositTriples.get(ContentModelHelper.CDRProperty.depositPackageType.toString());
-        //            values = depositTriples.get(ContentModelHelper.CDRProperty.depositPackageSubType.toString());
-        //            if (values != null && values.size() > 0) {
-        //                if (packageTypes == null) {
-        //                    packageTypes = new ArrayList<String>();
-        //                }
-        //                packageTypes.addAll(values);
-        //            }
-        //
-        //            // Get deposited by
-        //            values = depositTriples.get(ContentModelHelper.Relationship.depositedBy.toString());
-        //            if (values != null && values.size() > 0) {
-        //                PID depositedByPID = new PID(values.get(0));
-        //                depositedBy = tripleStoreQueryService.fetchFirstBySubjectAndPredicate(depositedByPID,
-        //                        ContentModelHelper.CDRProperty.onyen.toString());
-        //            }
-        //
-        //            // Get on behalf of
-        //            values = depositTriples.get(ContentModelHelper.CDRProperty.depositedOnBehalfOf.toString());
-        //            if (values != null && values.size() > 0) {
-        //                depositedOnBehalfOf = values.get(0);
-        //            }
-        //
-        //            OriginalDeposit deposit = new OriginalDeposit(originalDepositURI, packageTypes,
-        //                    depositedOn, depositedBy, depositedOnBehalfOf);
-        //            deposit.setMediaType(mimetype);
-        //            results.add(deposit);
-        //        }
-        return results;
-    }
 
     /**
      * Generates a DepositReceipt object for the specified PID.  This represents state of the target, how it has
@@ -185,70 +51,12 @@ public DepositReceipt retrieveDepositReceipt(PID targetPID, SwordConfigurationIm
      * @return
      */
     public DepositReceipt retrieveDepositReceipt(DepositReceipt receipt, PID targetPID, SwordConfigurationImpl config) {
-        IRI editIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getPid());
+        IRI editIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getId());
         receipt.setEditIRI(editIRI);
-        IRI swordEditIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getPid());
+        IRI swordEditIRI = new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_PATH + "/" + targetPID.getId());
         receipt.setSwordEditIRI(swordEditIRI);
         receipt.addEditMediaIRI(
-                new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" + targetPID.getPid()));
-
-        //Add in original deposit
-        OriginalDepositPair originalDeposit = getOriginalDeposit(targetPID, config);
-        if (originalDeposit != null) {
-            receipt.setOriginalDeposit(originalDeposit.originalDepositURI, originalDeposit.mimetype);
-        }
-
-        // Add in derived resources representing all of the datastreams on this object
-        //        Map<String,String> disseminators = tripleStoreQueryService.fetchDisseminatorMimetypes(targetPID);
-        //        for (Map.Entry<String,String> disseminator: disseminators.entrySet()) {
-        //            PID disseminatorPID = new PID(disseminator.getKey());
-        //            receipt.addDerivedResource(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" +
-        //                        disseminatorPID.getPid(), disseminator.getValue());
-        //        }
-        //
-        //        receipt.setSplashUri(config.getBasePath() + "record?id=" + targetPID.getPid());
-        //
-        //        receipt.setStatementURI("application/atom+xml;type=feed",
-        //                config.getSwordPath() + SwordConfigurationImpl.STATE_PATH + "/" + targetPID.getPid());
-        //
-        //        try {
-        //            MIMETypedStream metadataStream = null;
-        //            try {
-        //                metadataStream = accessClient.getDatastreamDissemination(targetPID,
-        //                        ContentModelHelper.Datastream.MD_DESCRIPTIVE.getName(), null);
-        //            } catch (NotFoundException notFound) {
-        //                // There was no MODS, which is okay, look for DC next
-        //            }
-        //
-        //            if (metadataStream == null) {
-        //                //If there is a DC stream instead, then add all its children
-        //                try {
-        //                    metadataStream = accessClient.getDatastreamDissemination(targetPID,
-        //                            ContentModelHelper.Datastream.DC.getName(), null);
-        //                    if (metadataStream != null) {
-        //                        Abdera abdera = new Abdera();
-        //                        Parser parser = abdera.getParser();
-        //                        Document<Element> entryDoc = parser.parse(new ByteArrayInputStream(
-        //                                metadataStream.getStream()));
-        //                        for (Element child: entryDoc.getRoot().getElements()) {
-        //                            receipt.addDublinCore(child.getQName().getLocalPart(), child.getText());
-        //                        }
-        //                    }
-        //                } catch (NotFoundException notFound) {
-        //                    // No DC either, so no metadata
-        //                }
-        //            } else {
-        //                // Build MODS as an Abdera entry and add it to the receipt entry.
-        //                Abdera abdera = new Abdera();
-        //                Parser parser = abdera.getParser();
-        //                Document<Element> entryDoc = parser.parse(
-        //                  new ByteArrayInputStream(metadataStream.getStream()));
-        //
-        //                receipt.getWrappedEntry().addExtension(entryDoc.getRoot());
-        //            }
-        //        } catch (FedoraException e) {
-        //            log.error("Error retrieving MD_DESCRIPTIVE for object " + targetPID.getPid(), e);
-        //        }
+                new IRI(config.getSwordPath() + SwordConfigurationImpl.EDIT_MEDIA_PATH + "/" + targetPID.getId()));
 
         return receipt;
     }
