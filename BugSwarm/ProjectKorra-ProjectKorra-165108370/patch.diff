diff --git a/src/com/projectkorra/projectkorra/GeneralMethods.java b/src/com/projectkorra/projectkorra/GeneralMethods.java
index f60cc48ae0..44de079a94 100755
--- a/src/com/projectkorra/projectkorra/GeneralMethods.java
+++ b/src/com/projectkorra/projectkorra/GeneralMethods.java
@@ -1,57 +1,9 @@
 package com.projectkorra.projectkorra;
 
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.PrintWriter;
-import java.lang.reflect.Field;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
-
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.GameMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.World;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.BlockState;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.FallingBlock;
-import org.bukkit.entity.FallingSand;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.entity.TNTPrimed;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginManager;
-import org.bukkit.scheduler.BukkitRunnable;
-import org.bukkit.util.Vector;
+import me.ryanhamshire.GriefPrevention.Claim;
+import me.ryanhamshire.GriefPrevention.GriefPrevention;
+import net.sacredlabyrinth.Phaed.PreciousStones.FieldFlag;
+import net.sacredlabyrinth.Phaed.PreciousStones.PreciousStones;
 
 import com.bekvon.bukkit.residence.Residence;
 import com.bekvon.bukkit.residence.protection.ClaimedResidence;
@@ -92,8 +44,6 @@
 import com.projectkorra.projectkorra.airbending.AirSpout;
 import com.projectkorra.projectkorra.airbending.AirSuction;
 import com.projectkorra.projectkorra.airbending.AirSwipe;
-import com.projectkorra.projectkorra.chiblocking.AcrobatStance;
-import com.projectkorra.projectkorra.chiblocking.WarriorStance;
 import com.projectkorra.projectkorra.configuration.ConfigManager;
 import com.projectkorra.projectkorra.earthbending.EarthBlast;
 import com.projectkorra.projectkorra.earthbending.EarthPassive;
@@ -116,10 +66,58 @@
 import com.sk89q.worldguard.bukkit.WorldGuardPlugin;
 import com.sk89q.worldguard.protection.flags.DefaultFlag;
 
-import me.ryanhamshire.GriefPrevention.Claim;
-import me.ryanhamshire.GriefPrevention.GriefPrevention;
-import net.sacredlabyrinth.Phaed.PreciousStones.FieldFlag;
-import net.sacredlabyrinth.Phaed.PreciousStones.PreciousStones;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.GameMode;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.block.BlockState;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.FallingBlock;
+import org.bukkit.entity.FallingSand;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.TNTPrimed;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginManager;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.util.Vector;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.PrintWriter;
+import java.lang.reflect.Field;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 
 @SuppressWarnings("deprecation")
 public class GeneralMethods {
@@ -568,16 +566,10 @@ public static void displayMovePreview(Player player, CoreAbility ability) {
 		
 		if (ConfigManager.defaultConfig.get().getBoolean("Properties.BendingPreview") == true) {
 			if (ability != null) {
-				
 				if (bPlayer.isOnCooldown(ability)) {
 					displayedMessage = ability.getElement().getColor() + "" + ChatColor.STRIKETHROUGH + ability.getName();
 				} else {
-					if (bPlayer.getStance() instanceof AcrobatStance && ability.getName().equals("AcrobatStance") ||
-							bPlayer.getStance() instanceof WarriorStance && ability.getName().equals("WarriorStance")) {
-						displayedMessage = ability.getElement().getColor() + "" + ChatColor.UNDERLINE + ability.getName();
-					} else {
-						displayedMessage = ability.getElement().getColor() + ability.getName();
-					}
+					displayedMessage = ability.getElement().getColor() + ability.getName();
 				}
 			} else {
 				displayedMessage = "";
@@ -1827,4 +1819,4 @@ public static void writeToDebug(String message) {
 			e.printStackTrace();
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/projectkorra/projectkorra/PKListener.java b/src/com/projectkorra/projectkorra/PKListener.java
index 158123ee8c..905a84f6d8 100755
--- a/src/com/projectkorra/projectkorra/PKListener.java
+++ b/src/com/projectkorra/projectkorra/PKListener.java
@@ -299,7 +299,8 @@ public void onBlockPhysics(BlockPhysicsEvent event) {
 
 		Block block = event.getBlock();
 		
-		if (!WaterManipulation.canPhysicsChange(block) || !EarthPassive.canPhysicsChange(block) || Illumination.getBlocks().containsKey(block) || EarthAbility.getPreventPhysicsBlocks().contains(block)) {
+		if (!WaterManipulation.canPhysicsChange(block) || !EarthPassive.canPhysicsChange(block) 
+				|| Illumination.getBlocks().containsKey(block) || EarthAbility.getPreventPhysicsBlocks().contains(block)) {
 			event.setCancelled(true);
 		}
 		
@@ -1089,22 +1090,22 @@ else if (ChiCombo.isParalyzed(player)) {
 			return;
 		}
 
-//		else if (CoreAbility.hasAbility(player, WaterSpout.class) || CoreAbility.hasAbility(player, AirSpout.class) || CoreAbility.hasAbility(player, SandSpout.class)) {
-//			Vector vel = new Vector();
-//			vel.setX(event.getTo().getX() - event.getFrom().getX());
-//			vel.setY(event.getTo().getY() - event.getFrom().getY());
-//			vel.setZ(event.getTo().getZ() - event.getFrom().getZ());
-//			// You now know the old velocity. Set to match recommended velocity
-//			double currspeed = vel.length();
-//			double maxspeed = .15;
-//			if (currspeed > maxspeed) {
-//				// only if moving set a factor
-//				vel = vel.normalize().multiply(maxspeed);
-//				// apply the new velocity (MAY REQUIRE A SCHEDULED TASK
-//				// INSTEAD!)
-//				event.getPlayer().setVelocity(vel);
-//			}
-//		}
+		else if (CoreAbility.hasAbility(player, WaterSpout.class) || CoreAbility.hasAbility(player, AirSpout.class) || CoreAbility.hasAbility(player, SandSpout.class)) {
+			Vector vel = new Vector();
+			vel.setX(event.getTo().getX() - event.getFrom().getX());
+			vel.setY(event.getTo().getY() - event.getFrom().getY());
+			vel.setZ(event.getTo().getZ() - event.getFrom().getZ());
+			// You now know the old velocity. Set to match recommended velocity
+			double currspeed = vel.length();
+			double maxspeed = .15;
+			if (currspeed > maxspeed) {
+				// only if moving set a factor
+				vel = vel.normalize().multiply(maxspeed);
+				// apply the new velocity (MAY REQUIRE A SCHEDULED TASK
+				// INSTEAD!)
+				event.getPlayer().setVelocity(vel);
+			}
+		}
 
 		else if (Bloodbending.isBloodbent(player)) {
 			double distance1, distance2;
diff --git a/src/com/projectkorra/projectkorra/ProjectKorra.java b/src/com/projectkorra/projectkorra/ProjectKorra.java
index bbde796185..dbf75b6678 100755
--- a/src/com/projectkorra/projectkorra/ProjectKorra.java
+++ b/src/com/projectkorra/projectkorra/ProjectKorra.java
@@ -54,11 +54,11 @@ public void onEnable() {
 		
 		new ConfigManager();
 		new GeneralMethods(this);
+		CoreAbility.registerAbilities();
 		updater = new Updater(this, "http://projectkorra.com/forum/forums/dev-builds.16/index.rss");
 		new Commands(this);
 		new MultiAbilityManager();
 		new ComboManager();
-		CoreAbility.registerAbilities();
 		
 		Preset.loadExternalPresets();
 		
diff --git a/src/com/projectkorra/projectkorra/chiblocking/AcrobatStance.java b/src/com/projectkorra/projectkorra/chiblocking/AcrobatStance.java
index bffe9efaa3..d2741c0f83 100755
--- a/src/com/projectkorra/projectkorra/chiblocking/AcrobatStance.java
+++ b/src/com/projectkorra/projectkorra/chiblocking/AcrobatStance.java
@@ -1,11 +1,9 @@
 package com.projectkorra.projectkorra.chiblocking;
 
 import com.projectkorra.projectkorra.Element;
-import com.projectkorra.projectkorra.GeneralMethods;
 import com.projectkorra.projectkorra.ability.ChiAbility;
 
 import org.bukkit.Location;
-import org.bukkit.Sound;
 import org.bukkit.entity.Player;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
@@ -33,15 +31,11 @@ public AcrobatStance(Player player) {
 			stance.remove();
 			if (stance instanceof AcrobatStance) {
 				bPlayer.setStance(null);
-				GeneralMethods.displayMovePreview(player, this);
-				player.playSound(player.getLocation(), Sound.ENTITY_ENDERDRAGON_SHOOT, 0.5F, 2F);
 				return;
 			}
 		}
 		start();
 		bPlayer.setStance(this);
-		GeneralMethods.displayMovePreview(player, this);
-		player.playSound(player.getLocation(), Sound.ENTITY_ENDERDRAGON_HURT, 0.5F, 2F);
 	}
 
 	@Override
@@ -116,4 +110,4 @@ public void setParalyzeDodgeBoost(double paralyzeDodgeBoost) {
 		this.paralyzeDodgeBoost = paralyzeDodgeBoost;
 	}
 	
-}
\ No newline at end of file
+}
diff --git a/src/com/projectkorra/projectkorra/chiblocking/WarriorStance.java b/src/com/projectkorra/projectkorra/chiblocking/WarriorStance.java
index c3fa3e0416..e9bced9f45 100755
--- a/src/com/projectkorra/projectkorra/chiblocking/WarriorStance.java
+++ b/src/com/projectkorra/projectkorra/chiblocking/WarriorStance.java
@@ -1,15 +1,13 @@
 package com.projectkorra.projectkorra.chiblocking;
 
+import com.projectkorra.projectkorra.Element;
+import com.projectkorra.projectkorra.ability.ChiAbility;
+
 import org.bukkit.Location;
-import org.bukkit.Sound;
 import org.bukkit.entity.Player;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-import com.projectkorra.projectkorra.Element;
-import com.projectkorra.projectkorra.GeneralMethods;
-import com.projectkorra.projectkorra.ability.ChiAbility;
-
 public class WarriorStance extends ChiAbility {
 
 	private int strength;
@@ -28,15 +26,11 @@ public WarriorStance(Player player) {
 			stance.remove();
 			if (stance instanceof WarriorStance) {
 				bPlayer.setStance(null);
-				GeneralMethods.displayMovePreview(player, this);
-				player.playSound(player.getLocation(), Sound.ENTITY_ENDERDRAGON_SHOOT, 0.5F, 2F);
 				return;
 			}
 		}
 		start();
 		bPlayer.setStance(this);
-		GeneralMethods.displayMovePreview(player, this);
-		player.playSound(player.getLocation(), Sound.ENTITY_ENDERDRAGON_HURT, 0.5F, 2F);
 	}
 
 	@Override
@@ -95,4 +89,4 @@ public void setResistance(int resistance) {
 		this.resistance = resistance;
 	}
 	
-}
\ No newline at end of file
+}
diff --git a/src/com/projectkorra/projectkorra/waterbending/WaterSpout.java b/src/com/projectkorra/projectkorra/waterbending/WaterSpout.java
index 4d78d01ddf..8bdf39667f 100755
--- a/src/com/projectkorra/projectkorra/waterbending/WaterSpout.java
+++ b/src/com/projectkorra/projectkorra/waterbending/WaterSpout.java
@@ -36,22 +36,22 @@
 	private TempBlock baseBlock;
 	private boolean canFly;
 	private boolean hadFly;
-
+	
 	public WaterSpout(Player player) {
 		super(player);
-
+	
 		WaterSpout oldSpout = getAbility(player, WaterSpout.class);
 		if (oldSpout != null) {
 			oldSpout.remove();
 			return;
 		}
-
+		
 		this.canBendOnPackedIce = getConfig().getBoolean("Properties.Water.CanBendPackedIce");
 		this.useParticles = getConfig().getBoolean("Abilities.Water.WaterSpout.Particles");
 		this.useBlockSpiral = getConfig().getBoolean("Abilities.Water.WaterSpout.BlockSpiral");
 		this.height = getConfig().getDouble("Abilities.Water.WaterSpout.Height");
 		this.interval = getConfig().getLong("Abilities.Water.WaterSpout.Interval");
-
+		
 		hadFly = player.isFlying();
 		canFly = player.getAllowFlight();
 		maxHeight = getNightFactor(height);
@@ -60,22 +60,22 @@ public WaterSpout(Player player) {
 			return;
 		}
 
-		Block topBlock = GeneralMethods.getTopBlock(player.getLocation(), (int) -getNightFactor(height), (int) -getNightFactor(height));
+		Block topBlock = GeneralMethods.getTopBlock(player.getLocation(), (int)-getNightFactor(height), (int)-getNightFactor(height));
 		if (topBlock == null) {
 			topBlock = player.getLocation().getBlock();
 		}
-
+		
 		if (!isWater(topBlock) && !isIcebendable(topBlock) && !isSnow(topBlock)) {
 			return;
 		} else if (topBlock.getType() == Material.PACKED_ICE && !canBendOnPackedIce) {
 			return;
 		}
-
+		
 		double heightRemoveThreshold = 2;
 		if (!isWithinMaxSpoutHeight(topBlock.getLocation(), heightRemoveThreshold)) {
 			return;
 		}
-
+		
 		new Flight(player);
 		player.setAllowFlight(true);
 		start();
@@ -90,14 +90,13 @@ private void displayWaterSpiral(Location location) {
 		double height = 0;
 		rotation += .4;
 		int i = 0;
-
+		
 		while (height < maxHeight) {
 			i += 20;
 			height += .4;
 			double angle = (i * Math.PI / 180);
 			double x = 1 * Math.cos(angle + rotation);
 			double z = 1 * Math.sin(angle + rotation);
-
 			Location loc = location.clone().getBlock().getLocation().add(.5, .5, .5);
 			loc.add(x, height, z);
 
@@ -122,12 +121,11 @@ public void progress() {
 			blocks.clear();
 			player.setFallDistance(0);
 			player.setSprinting(false);
-			if ((new Random()).nextInt(10) == 0) {
+			if ((new Random()).nextInt(4) == 0) {
 				playWaterbendingSound(player.getLocation());
 			}
 
 			player.removePotionEffect(PotionEffectType.SPEED);
-
 			Location location = player.getLocation().clone().add(0, .2, 0);
 			Block block = location.clone().getBlock();
 			double height = spoutableWaterHeight(location);
@@ -139,17 +137,17 @@ public void progress() {
 					remove();
 					return;
 				}
+				
 				for (int i = 1; i <= height; i++) {
-
 					block = location.clone().add(0, i, 0).getBlock();
-
+					
 					if (!TempBlock.isTempBlock(block)) {
 						blocks.add(new TempBlock(block, Material.STATIONARY_WATER, (byte) 8));
 						AFFECTED_BLOCKS.put(block, block);
 					}
 					rotateParticles(block);
 				}
-
+				
 				displayWaterSpiral(location.clone().add(.5, 0, .5));
 				if (player.getLocation().getBlockY() > block.getY()) {
 					player.setFlying(false);
@@ -176,14 +174,14 @@ public void remove() {
 		player.setAllowFlight(canFly);
 		player.setFlying(hadFly);
 	}
-
+	
 	public void revertBaseBlock() {
 		if (baseBlock != null) {
 			baseBlock.revertBlock();
 			baseBlock = null;
 		}
 	}
-
+	
 	private boolean isWithinMaxSpoutHeight(Location baseBlockLocation, double threshold) {
 		if (baseBlockLocation == null) {
 			return false;
@@ -205,14 +203,13 @@ public void rotateParticles(Block block) {
 
 			Location location = block.getLocation();
 			Location playerLoc = player.getLocation();
-
 			location = new Location(location.getWorld(), playerLoc.getX(), location.getY(), playerLoc.getZ());
 
 			double dy = playerLoc.getY() - block.getY();
 			if (dy > height) {
 				dy = height;
 			}
-
+			
 			float[] directions = { -0.5f, 0.325f, 0.25f, 0.125f, 0.f, 0.125f, 0.25f, 0.325f, 0.5f };
 			int index = angle;
 			angle++;
@@ -236,30 +233,29 @@ private double spoutableWaterHeight(Location location) {
 		if (isNight(player.getWorld())) {
 			newHeight = getNightFactor(newHeight);
 		}
-
+		
 		this.maxHeight = newHeight + 5;
 		Block blocki;
-
+		
 		for (int i = 0; i < maxHeight; i++) {
-
 			blocki = location.clone().add(0, -i, 0).getBlock();
 			if (GeneralMethods.isRegionProtectedFromBuild(this, blocki.getLocation())) {
 				return -1;
 			}
-
+			
 			if (!blocks.contains(blocki)) {
 				if (isWater(blocki)) {
 					if (!TempBlock.isTempBlock(blocki)) {
 						revertBaseBlock();
 					}
-
+					
 					base = blocki;
 					if (i > newHeight) {
 						return newHeight;
 					}
 					return i;
 				}
-
+				
 				if (isIcebendable(blocki) || isSnow(blocki)) {
 					if (isIcebendable(blocki)) {
 						if (blocki.getType() == Material.PACKED_ICE && !canBendOnPackedIce) {
@@ -267,19 +263,19 @@ private double spoutableWaterHeight(Location location) {
 							return -1;
 						}
 					}
-
+					
 					if (!TempBlock.isTempBlock(blocki)) {
 						revertBaseBlock();
 						baseBlock = new TempBlock(blocki, Material.STATIONARY_WATER, (byte) 8);
 					}
-
+					
 					base = blocki;
 					if (i > newHeight) {
 						return newHeight;
 					}
 					return i;
 				}
-
+				
 				if ((blocki.getType() != Material.AIR && (!isPlant(blocki) || !bPlayer.canPlantbend()))) {
 					revertBaseBlock();
 					return -1;
@@ -332,7 +328,7 @@ public boolean isSneakAbility() {
 	public boolean isHarmlessAbility() {
 		return true;
 	}
-
+	
 	public boolean isCanBendOnPackedIce() {
 		return canBendOnPackedIce;
 	}
