diff --git a/doc/whats_new.rst b/doc/whats_new.rst
index 3caa48d60809..f8818243d24a 100644
--- a/doc/whats_new.rst
+++ b/doc/whats_new.rst
@@ -137,7 +137,6 @@ Enhancements
      and :func:`model_selection.cross_val_score` now allow estimators with callable
      kernels which were previously prohibited. :issue:`8005` by `Andreas MÃ¼ller`_ .
 
-
    - Added ability to use sparse matrices in :func:`feature_selection.f_regression`
      with ``center=True``. :issue:`8065` by :user:`Daniel LeJeune <acadiansith>`.
 
diff --git a/sklearn/feature_selection/base.py b/sklearn/feature_selection/base.py
index c4e094da8dc4..f698ad82b496 100644
--- a/sklearn/feature_selection/base.py
+++ b/sklearn/feature_selection/base.py
@@ -153,7 +153,7 @@ def featurewise_scorer(score_func, **kwargs):
     >>> from scipy.stats import spearmanr
     >>> from sklearn.datasets import make_classification
     >>> X, y = make_classification(random_state=0)
-    >>> skb = SelectKBest(featurewise_scorer(spearmanr, nan_policy='propagate'), k=10)
+    >>> skb = SelectKBest(featurewise_scorer(spearmanr, axis=0), k=10)
     >>> skb.fit(X, y) #doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
     SelectKBest(k=10, score_func=...)
     >>> new_X = skb.transform(X)
diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py
index fa31ccfd136a..8f7b6273510a 100644
--- a/sklearn/feature_selection/tests/test_base.py
+++ b/sklearn/feature_selection/tests/test_base.py
@@ -122,8 +122,7 @@ def test_featurewise_scorer():
     X, y = make_classification(random_state=0)
 
     # spearmanr from scipy.stats
-    skb = SelectKBest(featurewise_scorer(spearmanr, nan_policy='propagate'),
-                      k=10)
+    skb = SelectKBest(featurewise_scorer(spearmanr, axis=0), k=10)
     skb.fit(X, y)
     new_X = skb.transform(X)
 
diff --git a/sklearn/gaussian_process/tests/test_kernels.py b/sklearn/gaussian_process/tests/test_kernels.py
index e670e5330889..003c5727da09 100644
--- a/sklearn/gaussian_process/tests/test_kernels.py
+++ b/sklearn/gaussian_process/tests/test_kernels.py
@@ -80,7 +80,7 @@ def test_kernel_theta():
         # Determine kernel parameters that contribute to theta
         init_sign = signature(kernel.__class__.__init__).parameters.values()
         args = [p.name for p in init_sign if p.name != 'self']
-        theta_vars = map(lambda s: s.rstrip("_bounds"),
+        theta_vars = map(lambda s: s[0:-len("_bounds")],
                          filter(lambda s: s.endswith("_bounds"), args))
         assert_equal(
             set(hyperparameter.name
