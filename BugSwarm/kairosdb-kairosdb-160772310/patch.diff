diff --git a/ivy.xml b/ivy.xml
index 41fcc2fea7..99fc914f6c 100755
--- a/ivy.xml
+++ b/ivy.xml
@@ -14,7 +14,7 @@
 		<dependency org="com.google.code.gson" name="gson" rev="2.2.4" />
 		<dependency org="junit" name="junit" rev="4.11" conf="test->default" />
 		<dependency org="org.hamcrest" name="hamcrest-library" rev="1.3" conf="test->default" />
-		<dependency org="org.mockito" name="mockito-core" rev="1.9.5" conf="test->default"/>
+		<dependency org="org.mockito" name="mockito-core" rev="1.10.19" conf="test->default"/>
 		<dependency org="io.netty" name="netty" rev="3.6.5.Final" />
 		<dependency org="com.google.inject" name="guice" rev="3.0" />
 		<dependency org="com.google.inject.extensions" name="guice-multibindings" rev="3.0" />
diff --git a/src/main/java/org/kairosdb/core/CoreModule.java b/src/main/java/org/kairosdb/core/CoreModule.java
index 44f12afb4d..fecbf08c85 100755
--- a/src/main/java/org/kairosdb/core/CoreModule.java
+++ b/src/main/java/org/kairosdb/core/CoreModule.java
@@ -16,11 +16,16 @@
 
 package org.kairosdb.core;
 
+import com.google.common.eventbus.EventBus;
 import com.google.common.net.InetAddresses;
 import com.google.inject.AbstractModule;
 import com.google.inject.Singleton;
 import com.google.inject.TypeLiteral;
+import com.google.inject.matcher.Matchers;
 import com.google.inject.name.Names;
+import com.google.inject.spi.InjectionListener;
+import com.google.inject.spi.TypeEncounter;
+import com.google.inject.spi.TypeListener;
 import org.kairosdb.core.aggregator.*;
 import org.kairosdb.core.datapoints.*;
 import org.kairosdb.core.datastore.GuiceQueryPluginFactory;
@@ -43,6 +48,7 @@
 	public static final String DATAPOINTS_FACTORY_LONG = "kairosdb.datapoints.factory.long";
 	public static final String DATAPOINTS_FACTORY_DOUBLE = "kairosdb.datapoints.factory.double";
 	private Properties m_props;
+	private final EventBus m_eventBus = new EventBus();
 
 	public CoreModule(Properties props)
 	{
@@ -70,6 +76,26 @@ private Class getClassForProperty(String property)
 	@Override
 	protected void configure()
 	{
+		/*
+		This bit of magic makes it so any object that is bound through guice just
+		needs to annotate a method with @Subscribe and they can get events.
+		 */
+		bind(EventBus.class).toInstance(m_eventBus);
+		//Need to register an exception handler
+		bindListener(Matchers.any(), new TypeListener()
+		{
+			public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
+			{
+				typeEncounter.register(new InjectionListener<I>()
+				{
+					public void afterInjection(I i)
+					{
+						m_eventBus.register(i);
+					}
+				});
+			}
+		});
+
 		bind(QueryQueuingManager.class).in(Singleton.class);
 		bind(KairosDatastore.class).in(Singleton.class);
 		bind(AggregatorFactory.class).to(GuiceAggregatorFactory.class).in(Singleton.class);
@@ -112,10 +138,6 @@ protected void configure()
 		String hostname = m_props.getProperty("kairosdb.hostname");
 		bindConstant().annotatedWith(Names.named("HOSTNAME")).to(hostname != null ? hostname: Util.getHostName());
 
-		bind(new TypeLiteral<List<DataPointListener>>()
-		{
-		}).toProvider(DataPointListenerProvider.class);
-
 		//bind datapoint default impls
 		bind(DoubleDataPointFactory.class)
 				.to(getClassForProperty(DATAPOINTS_FACTORY_DOUBLE)).in(Singleton.class);
diff --git a/src/main/java/org/kairosdb/core/DataPointListener.java b/src/main/java/org/kairosdb/core/DataPointListener.java
deleted file mode 100755
index 09cebbdd2a..0000000000
--- a/src/main/java/org/kairosdb/core/DataPointListener.java
+++ /dev/null
@@ -1,18 +0,0 @@
-//
-// DataPointListener.java
-//
-// Copyright 2013, NextPage Inc. All rights reserved.
-//
-
-package org.kairosdb.core;
-
-import java.util.SortedMap;
-
-/**
- Any implementations that take a long time should use a separate thread
- to do any work.  The calling thread is the protocol thread.
- */
-public interface DataPointListener
-{
-	public void dataPoint(String metricName, SortedMap<String, String> tags, DataPoint dataPoint);
-}
diff --git a/src/main/java/org/kairosdb/core/DataPointListenerProvider.java b/src/main/java/org/kairosdb/core/DataPointListenerProvider.java
deleted file mode 100755
index 90f451869f..0000000000
--- a/src/main/java/org/kairosdb/core/DataPointListenerProvider.java
+++ /dev/null
@@ -1,43 +0,0 @@
-//
-// DataPointListenerProvider.java
-//
-// Copyright 2013, NextPage Inc. All rights reserved.
-//
-
-package org.kairosdb.core;
-
-import com.google.inject.*;
-import org.kairosdb.core.aggregator.Aggregator;
-import org.kairosdb.core.aggregator.annotation.AggregatorName;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-public class DataPointListenerProvider implements Provider<List<DataPointListener>>
-{
-	private List<DataPointListener> m_listeners = new ArrayList<DataPointListener>();
-
-	@Inject
-	public DataPointListenerProvider(Injector injector)
-	{
-		Map<Key<?>, Binding<?>> bindings = injector.getAllBindings();
-
-		for (Key<?> key : bindings.keySet())
-		{
-			Class bindingClass = key.getTypeLiteral().getRawType();
-			if (DataPointListener.class.isAssignableFrom(bindingClass))
-			{
-				DataPointListener listener = (DataPointListener)injector.getInstance(bindingClass);
-				m_listeners.add(listener);
-			}
-		}
-	}
-
-	@Override
-	public List<DataPointListener> get()
-	{
-		return (Collections.unmodifiableList(m_listeners));
-	}
-}
diff --git a/src/main/java/org/kairosdb/core/Main.java b/src/main/java/org/kairosdb/core/Main.java
index 99c1e5f275..ba05572754 100755
--- a/src/main/java/org/kairosdb/core/Main.java
+++ b/src/main/java/org/kairosdb/core/Main.java
@@ -21,6 +21,7 @@
 import ch.qos.logback.core.spi.FilterReply;
 import com.beust.jcommander.JCommander;
 import com.beust.jcommander.Parameter;
+import com.google.common.eventbus.EventBus;
 import com.google.gson.Gson;
 import com.google.inject.*;
 import com.google.inject.util.Modules;
@@ -416,6 +417,7 @@ public void runExport(Writer out, List<String> metricNames) throws DatastoreExce
 	public void runImport(InputStream in) throws IOException, DatastoreException
 	{
 		KairosDatastore ds = m_injector.getInstance(KairosDatastore.class);
+		EventBus eventBus = m_injector.getInstance(EventBus.class);
 		KairosDataPointFactory dpFactory = m_injector.getInstance(KairosDataPointFactory.class);
 
 		BufferedReader reader = new BufferedReader(new InputStreamReader(in, UTF_8));
@@ -424,7 +426,7 @@ public void runImport(InputStream in) throws IOException, DatastoreException
 		String line;
 		while ((line = reader.readLine()) != null)
 		{
-			DataPointsParser dataPointsParser = new DataPointsParser(ds, new StringReader(line),
+			DataPointsParser dataPointsParser = new DataPointsParser(eventBus, new StringReader(line),
 					gson, dpFactory);
 
 			ValidationErrors validationErrors = dataPointsParser.parse();
diff --git a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
index 1696f23ad8..63ed5628e7 100755
--- a/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
+++ b/src/main/java/org/kairosdb/core/aggregator/SaveAsAggregator.java
@@ -1,6 +1,7 @@
 package org.kairosdb.core.aggregator;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.inject.Inject;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.aggregator.annotation.AggregatorName;
@@ -10,6 +11,7 @@
 import org.kairosdb.core.groupby.GroupBy;
 import org.kairosdb.core.groupby.GroupByResult;
 import org.kairosdb.core.groupby.TagGroupBy;
+import org.kairosdb.events.DataPointEvent;
 
 import java.util.*;
 
@@ -19,7 +21,7 @@
 @AggregatorName(name = "save_as", description = "Saves the results to a new metric.")
 public class SaveAsAggregator implements Aggregator, GroupByAware
 {
-	private KairosDatastore m_datastore;
+	private final EventBus m_eventBus;
 	private String m_metricName;
 	private Map<String, String> m_tags;
 	private int m_ttl = 0;
@@ -27,9 +29,9 @@
 	private boolean m_addSavedFrom = true;
 
 	@Inject
-	public SaveAsAggregator(KairosDatastore datastore)
+	public SaveAsAggregator(EventBus eventBus)
 	{
-		m_datastore = datastore;
+		m_eventBus = eventBus;
 		m_tags = new HashMap<>();
 	}
 
@@ -129,14 +131,7 @@ public DataPoint next()
 		{
 			DataPoint next = m_innerDataPointGroup.next();
 
-			try
-			{
-				m_datastore.putDataPoint(m_metricName, m_groupTags, next, m_ttl);
-			}
-			catch (DatastoreException e)
-			{
-				throw new RuntimeException("Failure to save data to "+m_metricName, e);
-			}
+			m_eventBus.post(new DataPointEvent(m_metricName, m_groupTags, next, m_ttl));
 
 			return next;
 		}
diff --git a/src/main/java/org/kairosdb/core/blast/BlastServer.java b/src/main/java/org/kairosdb/core/blast/BlastServer.java
index bbf5488a4a..a54ee62791 100755
--- a/src/main/java/org/kairosdb/core/blast/BlastServer.java
+++ b/src/main/java/org/kairosdb/core/blast/BlastServer.java
@@ -1,6 +1,7 @@
 package org.kairosdb.core.blast;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.inject.Inject;
 import org.h2.store.DataReader;
 import org.kairosdb.core.DataPoint;
@@ -10,6 +11,7 @@
 import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.exception.KairosDBException;
+import org.kairosdb.events.DataPointEvent;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
@@ -24,15 +26,15 @@
 public class BlastServer implements KairosDBService, Runnable
 {
 	private Thread m_serverThread;
-	private final KairosDatastore m_datastore;
+	private final EventBus m_evenBus;
 	private final LongDataPointFactory m_longDataPointFactory;
 	private boolean m_keepRunning = true;
 	private ServerSocket m_serverSocket;
 
 	@Inject
-	public BlastServer(KairosDatastore datastore, LongDataPointFactory longDataPointFactory)
+	public BlastServer(EventBus evenBus, LongDataPointFactory longDataPointFactory)
 	{
-		m_datastore = datastore;
+		m_evenBus = evenBus;
 		m_longDataPointFactory = longDataPointFactory;
 	}
 
@@ -83,17 +85,13 @@ public void run()
 
 						DataPoint dp = m_longDataPointFactory.createDataPoint(System.currentTimeMillis(), value);
 
-						m_datastore.putDataPoint(metric, ImmutableSortedMap.of("host", host), dp, 0);
+						m_evenBus.post(new DataPointEvent(metric, ImmutableSortedMap.of("host", host), dp, 0));
 					}
 				}
 				catch (IOException e)
 				{
 					e.printStackTrace();
 				}
-				catch (DatastoreException e)
-				{
-					e.printStackTrace();
-				}
 
 			}
 		}
diff --git a/src/main/java/org/kairosdb/core/datastore/Datastore.java b/src/main/java/org/kairosdb/core/datastore/Datastore.java
index aaf3340fa1..f8b9ffe39b 100755
--- a/src/main/java/org/kairosdb/core/datastore/Datastore.java
+++ b/src/main/java/org/kairosdb/core/datastore/Datastore.java
@@ -18,7 +18,7 @@
 {
 	public void close() throws InterruptedException, DatastoreException;
 
-	public void putDataPoint(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int ttl) throws DatastoreException;
+	//public void putDataPoint(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int ttl) throws DatastoreException;
 
 	public Iterable<String> getMetricNames() throws DatastoreException;
 
diff --git a/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java b/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
index 5e1adcc515..69a8b357e8 100755
--- a/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
+++ b/src/main/java/org/kairosdb/core/datastore/KairosDatastore.java
@@ -22,7 +22,6 @@
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.DataPointListener;
 import org.kairosdb.core.KairosDataPointFactory;
 import org.kairosdb.core.aggregator.Aggregator;
 import org.kairosdb.core.aggregator.LimitAggregator;
@@ -56,7 +55,6 @@
 
 	private final Datastore m_datastore;
 	private final QueryQueuingManager m_queuingManager;
-	private final List<DataPointListener> m_dataPointListeners;
 	private final KairosDataPointFactory m_dataPointFactory;
 
 	private String m_baseCacheDir;
@@ -66,12 +64,11 @@
 	@SuppressWarnings("ResultOfMethodCallIgnored")
 	@Inject
 	public KairosDatastore(Datastore datastore, QueryQueuingManager queuingManager,
-			List<DataPointListener> dataPointListeners, KairosDataPointFactory dataPointFactory,
+			KairosDataPointFactory dataPointFactory,
 			@Named(KEEP_CACHE_FILES) boolean keepCacheFiles)
 			throws DatastoreException
 	{
 		m_datastore = checkNotNull(datastore);
-		m_dataPointListeners = checkNotNull(dataPointListeners);
 		m_queuingManager = checkNotNull(queuingManager);
 		m_dataPointFactory = dataPointFactory;
 
@@ -180,7 +177,7 @@ public void close() throws InterruptedException, DatastoreException
 		m_datastore.close();
 	}
 
-	public void putDataPoint(String metricName,
+	/*public void putDataPoint(String metricName,
 			ImmutableSortedMap<String, String> tags,
 			DataPoint dataPoint) throws DatastoreException
 	{
@@ -193,12 +190,7 @@ public void putDataPoint(String metricName,
 	{
 		//Add to datastore first.
 		m_datastore.putDataPoint(metricName, tags, dataPoint, ttl);
-
-		for (DataPointListener dataPointListener : m_dataPointListeners)
-		{
-			dataPointListener.dataPoint(metricName, tags, dataPoint);
-		}
-	}
+	}*/
 
 
 	public Iterable<String> getMetricNames() throws DatastoreException
diff --git a/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java b/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
index b455c05734..83af46372f 100755
--- a/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
+++ b/src/main/java/org/kairosdb/core/http/rest/MetricsResource.java
@@ -16,6 +16,7 @@
 
 package org.kairosdb.core.http.rest;
 
+import com.google.common.eventbus.EventBus;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonIOException;
@@ -54,6 +55,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.zip.GZIPInputStream;
 
+import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static javax.ws.rs.core.Response.ResponseBuilder;
 
@@ -76,6 +78,7 @@
 	public static final String QUERY_URL = "/datapoints/query";
 
 	private final KairosDatastore datastore;
+	private final EventBus m_eventBus;
 	private final Map<String, DataFormatter> formatters = new HashMap<String, DataFormatter>();
 	private final QueryParser queryParser;
 
@@ -112,10 +115,11 @@
 
 	@Inject
 	public MetricsResource(KairosDatastore datastore, QueryParser queryParser,
-			KairosDataPointFactory dataPointFactory)
+			KairosDataPointFactory dataPointFactory, EventBus eventBus)
 	{
 		this.datastore = checkNotNull(datastore);
 		this.queryParser = checkNotNull(queryParser);
+		m_eventBus = checkNotNull(eventBus);
 		m_kairosDataPointFactory = dataPointFactory;
 		formatters.put("json", new JsonFormatter());
 
@@ -246,7 +250,7 @@ public Response add(InputStream json)
 	{
 		try
 		{
-			DataPointsParser parser = new DataPointsParser(datastore, new InputStreamReader(json, "UTF-8"),
+			DataPointsParser parser = new DataPointsParser(m_eventBus, new InputStreamReader(json, "UTF-8"),
 					gson, m_kairosDataPointFactory);
 			ValidationErrors validationErrors = parser.parse();
 
@@ -479,7 +483,7 @@ public Response runQuery(String json, String remoteAddr) throws Exception
 
 
 			ThreadReporter.submitData(m_longDataPointFactory,
-					m_stringDataPointFactory, datastore);
+					m_stringDataPointFactory, m_eventBus);
 
 			ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(
 					new FileStreamingOutput(respFile));
diff --git a/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java b/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
index 6660361913..c5800ac095 100755
--- a/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
+++ b/src/main/java/org/kairosdb/core/http/rest/json/DataPointsParser.java
@@ -17,6 +17,7 @@
 package org.kairosdb.core.http.rest.json;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonPrimitive;
@@ -24,8 +25,8 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import org.kairosdb.core.KairosDataPointFactory;
-import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.Util;
 import org.kairosdb.util.Validator;
 
@@ -45,7 +46,7 @@
  */
 public class DataPointsParser
 {
-	private final KairosDatastore datastore;
+	private final EventBus m_eventBus;
 	private final Reader inputStream;
 	private final Gson gson;
 	private final KairosDataPointFactory dataPointFactory;
@@ -63,10 +64,10 @@ public int getIngestTime()
 	private int dataPointCount;
 	private int ingestTime;
 
-	public DataPointsParser(KairosDatastore datastore, Reader stream, Gson gson,
+	public DataPointsParser(EventBus eventBus, Reader stream, Gson gson,
 	                        KairosDataPointFactory dataPointFactory)
 	{
-		this.datastore = checkNotNull(datastore);
+		m_eventBus = checkNotNull(eventBus);
 		this.inputStream = checkNotNull(stream);
 		this.gson = gson;
 		this.dataPointFactory = dataPointFactory;
@@ -308,8 +309,8 @@ else if (metric.getValue() != null && !metric.getValue().isJsonNull())
 
 				if (dataPointFactory.isRegisteredType(type))
 				{
-					datastore.putDataPoint(metric.getName(), tags, dataPointFactory.createDataPoint(
-							type, metric.getTimestamp(), metric.getValue()), metric.getTtl());
+					m_eventBus.post(new DataPointEvent(metric.getName(), tags, dataPointFactory.createDataPoint(
+							type, metric.getTimestamp(), metric.getValue()), metric.getTtl()));
 					dataPointCount++;
 				}
 				else
@@ -358,8 +359,8 @@ else if (dataPoint.length < 2)
 							continue;
 						}
 
-						datastore.putDataPoint(metric.getName(), tags,
-								dataPointFactory.createDataPoint(type, timestamp, dataPoint[1]), metric.getTtl());
+						m_eventBus.post(new DataPointEvent(metric.getName(), tags,
+								dataPointFactory.createDataPoint(type, timestamp, dataPoint[1]), metric.getTtl()));
 						dataPointCount ++;
 					}
 					contextCount++;
diff --git a/src/main/java/org/kairosdb/core/reporting/DataPointsMonitor.java b/src/main/java/org/kairosdb/core/reporting/DataPointsMonitor.java
index 31d68d40e2..b17fa9c24b 100755
--- a/src/main/java/org/kairosdb/core/reporting/DataPointsMonitor.java
+++ b/src/main/java/org/kairosdb/core/reporting/DataPointsMonitor.java
@@ -6,13 +6,14 @@
 
 package org.kairosdb.core.reporting;
 
+import com.google.common.eventbus.Subscribe;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.DataPointListener;
 import org.kairosdb.core.DataPointSet;
 import org.kairosdb.core.datapoints.LongDataPointFactory;
 import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
+import org.kairosdb.events.DataPointEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -25,7 +26,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 
-public class DataPointsMonitor implements DataPointListener, KairosMetricReporter
+public class DataPointsMonitor implements KairosMetricReporter
 {
 	public static final Logger logger = LoggerFactory.getLogger(DataPointsMonitor.class);
 	public static final String METRIC_NAME = "kairosdb.metric_counters";
@@ -88,9 +89,11 @@ private void addCounter(String name, int count)
 		return (ret);
 	}
 
-	@Override
-	public void dataPoint(String metricName, SortedMap<String, String> tags, DataPoint dataPoint)
+	@Subscribe
+	public void dataPoint(DataPointEvent event)
 	{
+		String metricName = event.getMetricName();
+
 		if (metricName.startsWith("kairosdb"))
 			return; //Skip our own metrics.
 
diff --git a/src/main/java/org/kairosdb/core/reporting/MetricReporterService.java b/src/main/java/org/kairosdb/core/reporting/MetricReporterService.java
index d0270f44ec..c07e77def1 100755
--- a/src/main/java/org/kairosdb/core/reporting/MetricReporterService.java
+++ b/src/main/java/org/kairosdb/core/reporting/MetricReporterService.java
@@ -16,6 +16,7 @@
 package org.kairosdb.core.reporting;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.kairosdb.core.DataPoint;
@@ -24,6 +25,7 @@
 import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
 import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.scheduler.KairosDBJob;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.Tags;
 import org.quartz.CronScheduleBuilder;
 import org.quartz.JobExecutionContext;
@@ -47,6 +49,7 @@
 	public static final String SCHEDULE_PROPERTY = "kairosdb.reporter.schedule";
 
 	private KairosDatastore m_datastore;
+	private EventBus m_eventBus;
 	private List<KairosMetricReporter> m_reporters;
 	private final String m_hostname;
 	private final String m_schedule;
@@ -55,12 +58,12 @@
 	private LongDataPointFactory m_dataPointFactory = new LongDataPointFactoryImpl();
 
 	@Inject
-	public MetricReporterService(KairosDatastore datastore,
+	public MetricReporterService(EventBus eventBus,
 			List<KairosMetricReporter> reporters,
 			@Named(SCHEDULE_PROPERTY) String schedule,
 			@Named(HOSTNAME) String hostname)
 	{
-		m_datastore = checkNotNull(datastore);
+		m_eventBus = checkNotNull(eventBus);
 		m_hostname = checkNotNullOrEmpty(hostname);
 		m_reporters = reporters;
 		m_schedule = schedule;
@@ -101,8 +104,8 @@ public void execute(JobExecutionContext jobExecutionContext) throws JobExecution
 				{
 					for (DataPoint dataPoint : dataPointSet.getDataPoints())
 					{
-						m_datastore.putDataPoint(dataPointSet.getName(),
-								dataPointSet.getTags(), dataPoint);
+						m_eventBus.post(new DataPointEvent(dataPointSet.getName(),
+								dataPointSet.getTags(), dataPoint, 0));
 					}
 				}
 			}
@@ -111,14 +114,14 @@ public void execute(JobExecutionContext jobExecutionContext) throws JobExecution
 			Runtime runtime = Runtime.getRuntime();
 			ImmutableSortedMap<String, String> tags = Tags.create()
 					.put("host", m_hostname).build();
-			m_datastore.putDataPoint("kairosdb.jvm.free_memory",
-					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.freeMemory()));
-			m_datastore.putDataPoint("kairosdb.jvm.total_memory",
-					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.totalMemory()));
-			m_datastore.putDataPoint("kairosdb.jvm.max_memory",
-					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.maxMemory()));
-			m_datastore.putDataPoint("kairosdb.jvm.thread_count",
-					tags, m_dataPointFactory.createDataPoint(timestamp, getThreadCount()));
+			m_eventBus.post(new DataPointEvent("kairosdb.jvm.free_memory",
+					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.freeMemory()), 0));
+			m_eventBus.post(new DataPointEvent("kairosdb.jvm.total_memory",
+					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.totalMemory()), 0));
+			m_eventBus.post(new DataPointEvent("kairosdb.jvm.max_memory",
+					tags, m_dataPointFactory.createDataPoint(timestamp, runtime.maxMemory()), 0));
+			m_eventBus.post(new DataPointEvent("kairosdb.jvm.thread_count",
+					tags, m_dataPointFactory.createDataPoint(timestamp, getThreadCount()), 0));
 		}
 		catch (Throwable e)
 		{
diff --git a/src/main/java/org/kairosdb/core/reporting/ThreadReporter.java b/src/main/java/org/kairosdb/core/reporting/ThreadReporter.java
index 4c313b1e64..96235eb901 100755
--- a/src/main/java/org/kairosdb/core/reporting/ThreadReporter.java
+++ b/src/main/java/org/kairosdb/core/reporting/ThreadReporter.java
@@ -17,12 +17,14 @@
 package org.kairosdb.core.reporting;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import org.kairosdb.core.DataPoint;
 import org.kairosdb.core.DataPointSet;
 import org.kairosdb.core.datapoints.LongDataPointFactory;
 import org.kairosdb.core.datapoints.StringDataPointFactory;
 import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.Tags;
 
 import java.util.LinkedList;
@@ -187,24 +189,26 @@ public static ReporterDataPoint addDataPoint(String metric, String value, int tt
 
 	public static void submitData(LongDataPointFactory longDataPointFactory,
 			StringDataPointFactory stringDataPointFactory,
-			KairosDatastore datastore) throws DatastoreException
+			EventBus eventBus) throws DatastoreException
 	{
 		while (s_reporterData.getListSize() != 0)
 		{
 			ReporterDataPoint dp = s_reporterData.getNextDataPoint();
+			DataPointEvent dataPointEvent;
 
 			if (dp.isStringValue())
 			{
-				datastore.putDataPoint(dp.getMetricName(), dp.getTags(),
+				dataPointEvent = new DataPointEvent(dp.getMetricName(), dp.getTags(),
 						stringDataPointFactory.createDataPoint(s_reportTime.get(), dp.getStrValue()),
 						dp.getTtl());
 			}
 			else
 			{
-				datastore.putDataPoint(dp.getMetricName(), dp.getTags(),
+				dataPointEvent = new DataPointEvent(dp.getMetricName(), dp.getTags(),
 						longDataPointFactory.createDataPoint(s_reportTime.get(), dp.getValue()),
 						dp.getTtl());
 			}
+			eventBus.post(dataPointEvent);
 		}
 	}
 
diff --git a/src/main/java/org/kairosdb/core/telnet/PutCommand.java b/src/main/java/org/kairosdb/core/telnet/PutCommand.java
index 634872068c..7c8bbc0bf6 100755
--- a/src/main/java/org/kairosdb/core/telnet/PutCommand.java
+++ b/src/main/java/org/kairosdb/core/telnet/PutCommand.java
@@ -17,6 +17,7 @@
 package org.kairosdb.core.telnet;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.jboss.netty.channel.Channel;
@@ -43,10 +44,10 @@
 public class PutCommand extends PutMillisecondCommand
 {
 	@Inject
-	public PutCommand(KairosDatastore datastore, @Named("HOSTNAME") String hostname,
+	public PutCommand(EventBus eventBus, @Named("HOSTNAME") String hostname,
 			LongDataPointFactory longFactory, DoubleDataPointFactory doubleFactory)
 	{
-		super(datastore, hostname, longFactory, doubleFactory);
+		super(eventBus, hostname, longFactory, doubleFactory);
 	}
 
 	@Override
diff --git a/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java b/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
index a962446375..38d1937d4c 100755
--- a/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
+++ b/src/main/java/org/kairosdb/core/telnet/PutMillisecondCommand.java
@@ -17,6 +17,7 @@
 package org.kairosdb.core.telnet;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.jboss.netty.channel.Channel;
@@ -27,6 +28,7 @@
 import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.reporting.KairosMetricReporter;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.Tags;
 import org.kairosdb.util.Util;
 import org.kairosdb.util.ValidationException;
@@ -42,19 +44,19 @@
 
 public class PutMillisecondCommand implements TelnetCommand, KairosMetricReporter
 {
-	private KairosDatastore m_datastore;
+	private final EventBus m_eventBus;
 	private AtomicInteger m_counter = new AtomicInteger();
 	private String m_hostName;
 	private LongDataPointFactory m_longFactory;
 	private DoubleDataPointFactory m_doubleFactory;
 
 	@Inject
-	public PutMillisecondCommand(KairosDatastore datastore, @Named("HOSTNAME") String hostname,
+	public PutMillisecondCommand(EventBus eventBus, @Named("HOSTNAME") String hostname,
 			LongDataPointFactory longFactory, DoubleDataPointFactory doubleFactory)
 	{
 		checkNotNullOrEmpty(hostname);
 		m_hostName = hostname;
-		m_datastore = datastore;
+		m_eventBus = eventBus;
 		m_longFactory = longFactory;
 		m_doubleFactory = doubleFactory;
 	}
@@ -102,7 +104,7 @@ protected void execute(String[] command, long timestamp) throws ValidationExcept
 			tags.put("add", "tag");
 
 		m_counter.incrementAndGet();
-		m_datastore.putDataPoint(metricName, tags.build(), dp);
+		m_eventBus.post(new DataPointEvent(metricName, tags.build(), dp, 0));
 	}
 
 	private void validateTag(int tagCount, String[] tag) throws ValidationException
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
index 6bed60ddc5..5a93541282 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/CassandraDatastore.java
@@ -21,6 +21,7 @@
 import com.datastax.driver.core.Session;
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.SetMultimap;
+import com.google.common.eventbus.Subscribe;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import me.prettyprint.cassandra.model.ConfigurableConsistencyLevel;
@@ -48,6 +49,7 @@
 import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.reporting.ThreadReporter;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.KDataOutput;
 import org.kairosdb.util.MemoryMonitor;
 import org.slf4j.Logger;
@@ -282,7 +284,7 @@ private void putInternalDataPoint(String metricName, ImmutableSortedMap<String,
 	{
 		try
 		{
-			putDataPoint(metricName, tags, dataPoint, 0);
+			putDataPoint(new DataPointEvent(metricName, tags, dataPoint, 0));
 		}
 		catch (DatastoreException e)
 		{
@@ -427,12 +429,14 @@ public void close() throws InterruptedException
 		m_cassandraClient.close();
 	}
 
-	@Override
-	public void putDataPoint(String metricName,
-			ImmutableSortedMap<String, String> tags,
-			DataPoint dataPoint,
-			int ttl) throws DatastoreException
+	@Subscribe
+	public void putDataPoint(DataPointEvent dataPointEvent) throws DatastoreException
 	{
+		String metricName = dataPointEvent.getMetricName();
+		ImmutableSortedMap<String, String> tags = dataPointEvent.getTags();
+		DataPoint dataPoint = dataPointEvent.getDataPoint();
+		int ttl = dataPointEvent.getTtl();
+
 		try
 		{
 			DataPointsRowKey rowKey = null;
diff --git a/src/main/java/org/kairosdb/datastore/cassandra/RowKeyListenerProvider.java b/src/main/java/org/kairosdb/datastore/cassandra/RowKeyListenerProvider.java
index feb7fb3219..c9c7b86611 100755
--- a/src/main/java/org/kairosdb/datastore/cassandra/RowKeyListenerProvider.java
+++ b/src/main/java/org/kairosdb/datastore/cassandra/RowKeyListenerProvider.java
@@ -1,7 +1,6 @@
 package org.kairosdb.datastore.cassandra;
 
 import com.google.inject.*;
-import org.kairosdb.core.DataPointListener;
 
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java b/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
index 462b40d0d9..dcf0a0f80d 100755
--- a/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
+++ b/src/main/java/org/kairosdb/datastore/h2/H2Datastore.java
@@ -17,6 +17,7 @@
 package org.kairosdb.datastore.h2;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.Subscribe;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import com.mchange.v2.c3p0.DataSources;
@@ -29,6 +30,7 @@
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.datastore.h2.orm.*;
 import org.kairosdb.datastore.h2.orm.DataPoint;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.KDataInput;
 import org.kairosdb.util.KDataOutput;
 import org.slf4j.Logger;
@@ -132,14 +134,16 @@ public void close()
 		}
 	}
 
-	@Override
-	public synchronized void putDataPoint(String metricName,
-			ImmutableSortedMap<String, String> tags,
-			org.kairosdb.core.DataPoint dataPoint, int ttl) throws DatastoreException
+	@Subscribe
+	public synchronized void putDataPoint(DataPointEvent event) throws DatastoreException
 	{
 		GenOrmDataSource.attachAndBegin();
 		try
 		{
+			ImmutableSortedMap<String, String> tags = event.getTags();
+			String metricName = event.getMetricName();
+			org.kairosdb.core.DataPoint dataPoint = event.getDataPoint();
+
 			String key = createMetricKey(metricName, tags, dataPoint.getDataStoreDataType());
 			Metric m = Metric.factory.findOrCreate(key);
 			if (m.isNew())
diff --git a/src/main/java/org/kairosdb/datastore/remote/ListenerModule.java b/src/main/java/org/kairosdb/datastore/remote/ListenerModule.java
index 4584d818c6..a8f9ede311 100755
--- a/src/main/java/org/kairosdb/datastore/remote/ListenerModule.java
+++ b/src/main/java/org/kairosdb/datastore/remote/ListenerModule.java
@@ -13,6 +13,5 @@ protected void configure()
 	{
 		bind(RemoteDatastore.class).in(Scopes.SINGLETON);
 		bind(RemoteSendJob.class).in(Scopes.SINGLETON);
-		bind(RemoteListener.class).in(Scopes.SINGLETON);
 	}
 }
diff --git a/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java b/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
index cd9935404e..6667ef18f1 100755
--- a/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
+++ b/src/main/java/org/kairosdb/datastore/remote/RemoteDatastore.java
@@ -19,6 +19,7 @@
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.Multimap;
+import com.google.common.eventbus.Subscribe;
 import com.google.inject.Inject;
 import com.google.inject.name.Named;
 import org.apache.http.HttpResponse;
@@ -38,6 +39,7 @@
 import org.kairosdb.core.datastore.QueryCallback;
 import org.kairosdb.core.datastore.TagSet;
 import org.kairosdb.core.exception.DatastoreException;
+import org.kairosdb.events.DataPointEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -268,16 +270,15 @@ public void close() throws InterruptedException, DatastoreException
 		}
 	}
 
-	@Override
-	public void putDataPoint(String metricName,
-			ImmutableSortedMap<String, String> tags,
-			DataPoint dataPoint, int ttl) throws DatastoreException
+	@Subscribe
+	public void putDataPoint(DataPointEvent event) throws DatastoreException
 	{
-		DataPointKey key = new DataPointKey(metricName, tags, dataPoint.getApiDataType(), ttl);
+		DataPointKey key = new DataPointKey(event.getMetricName(), event.getTags(),
+				event.getDataPoint().getApiDataType(), event.getTtl());
 
 		synchronized (m_mapLock)
 		{
-			m_dataPointMultimap.put(key, dataPoint);
+			m_dataPointMultimap.put(key, event.getDataPoint());
 		}
 	}
 
@@ -398,10 +399,10 @@ public void sendData() throws IOException
 
 			try
 			{
-				putDataPoint(FILE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, fileSize), 0);
-				putDataPoint(WRITE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, m_dataPointCounter), 0);
-				putDataPoint(ZIP_FILE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, zipSize), 0);
-				putDataPoint(TIME_TO_SEND_METRIC, tags, m_longDataPointFactory.createDataPoint(now, timeToSend), 0);
+				putDataPoint(new DataPointEvent(FILE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, fileSize), 0));
+				putDataPoint(new DataPointEvent(WRITE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, m_dataPointCounter), 0));
+				putDataPoint(new DataPointEvent(ZIP_FILE_SIZE_METRIC, tags, m_longDataPointFactory.createDataPoint(now, zipSize), 0));
+				putDataPoint(new DataPointEvent(TIME_TO_SEND_METRIC, tags, m_longDataPointFactory.createDataPoint(now, timeToSend), 0));
 			}
 			catch (DatastoreException e)
 			{
diff --git a/src/main/java/org/kairosdb/datastore/remote/RemoteListener.java b/src/main/java/org/kairosdb/datastore/remote/RemoteListener.java
deleted file mode 100755
index 590ab25ec9..0000000000
--- a/src/main/java/org/kairosdb/datastore/remote/RemoteListener.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package org.kairosdb.datastore.remote;
-
-import com.google.common.collect.ImmutableSortedMap;
-import com.google.inject.Inject;
-import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.DataPointListener;
-import org.kairosdb.core.exception.DatastoreException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.SortedMap;
-
-/**
- Created by bhawkins on 8/29/16.
- */
-public class RemoteListener implements DataPointListener
-{
-	public static final Logger logger = LoggerFactory.getLogger(RemoteListener.class);
-	private final RemoteDatastore m_remoteDatastore;
-
-	@Inject
-	public RemoteListener(RemoteDatastore remoteDatastore)
-	{
-		m_remoteDatastore = remoteDatastore;
-	}
-
-	@Override
-	public void dataPoint(String metricName, SortedMap<String, String> tags, DataPoint dataPoint)
-	{
-		try
-		{
-			m_remoteDatastore.putDataPoint(metricName,
-					ImmutableSortedMap.copyOfSorted(tags), dataPoint, 0);
-		}
-		catch (DatastoreException e)
-		{
-			logger.error("Error writing to remote datastore", e);
-		}
-	}
-}
diff --git a/src/main/java/org/kairosdb/events/DataPointEvent.java b/src/main/java/org/kairosdb/events/DataPointEvent.java
new file mode 100755
index 0000000000..d3560d5711
--- /dev/null
+++ b/src/main/java/org/kairosdb/events/DataPointEvent.java
@@ -0,0 +1,82 @@
+package org.kairosdb.events;
+
+import com.google.common.collect.ImmutableSortedMap;
+import org.kairosdb.core.DataPoint;
+
+import java.util.SortedMap;
+
+/**
+ Created by bhawkins on 9/17/16.
+
+ Any listener that take a long time should use a separate thread
+ to do any work.  The calling thread is the protocol thread.
+ */
+public class DataPointEvent
+{
+	private final String m_metricName;
+	private final ImmutableSortedMap<String, String> m_tags;
+	private final DataPoint m_dataPoint;
+	private final int m_ttl;
+
+	public DataPointEvent(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int ttl)
+	{
+		m_metricName = metricName;
+		m_tags = tags;
+		m_dataPoint = dataPoint;
+		m_ttl = ttl;
+	}
+
+	public DataPointEvent(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint)
+	{
+		m_metricName = metricName;
+		m_tags = tags;
+		m_dataPoint = dataPoint;
+		m_ttl = 0;
+	}
+
+
+	public String getMetricName()
+	{
+		return m_metricName;
+	}
+
+	public ImmutableSortedMap<String, String> getTags()
+	{
+		return m_tags;
+	}
+
+	public DataPoint getDataPoint()
+	{
+		return m_dataPoint;
+	}
+
+	public int getTtl()
+	{
+		return m_ttl;
+	}
+
+	@Override
+	public boolean equals(Object o)
+	{
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+
+		DataPointEvent that = (DataPointEvent) o;
+
+		if (m_ttl != that.m_ttl) return false;
+		if (!m_metricName.equals(that.m_metricName)) return false;
+		if (!m_tags.equals(that.m_tags)) return false;
+		return m_dataPoint.equals(that.m_dataPoint);
+
+	}
+
+	@Override
+	public int hashCode()
+	{
+		int result = m_metricName.hashCode();
+		result = 31 * result + m_tags.hashCode();
+		result = 31 * result + m_dataPoint.hashCode();
+		result = 31 * result + m_ttl;
+		return result;
+	}
+}
diff --git a/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java b/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
index 040f961f51..f47438f618 100755
--- a/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
+++ b/src/test/java/org/kairosdb/core/aggregator/SaveAsAggregatorTest.java
@@ -1,6 +1,7 @@
 package org.kairosdb.core.aggregator;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import org.junit.Before;
 import org.junit.Test;
 import org.kairosdb.core.DataPoint;
@@ -10,18 +11,16 @@
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.groupby.GroupBy;
 import org.kairosdb.core.groupby.TagGroupBy;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.testing.ListDataPointGroup;
+import org.mockito.ArgumentCaptor;
 
 import java.util.Collections;
-import java.util.Map;
-import java.util.TreeMap;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.kairosdb.util.DataPointEventUtil.verifyEvent;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
 
 /**
  Created by bhawkins on 2/9/16.
@@ -30,12 +29,18 @@
 {
 	private SaveAsAggregator m_aggregator;
 	private Datastore m_mockDatastore;
+	private EventBus m_mockEventBus;
+	ArgumentCaptor<DataPointEvent> m_event;
+
 
 	@Before
 	public void setup()
 	{
 		m_mockDatastore = mock(Datastore.class);
-		m_aggregator = new SaveAsAggregator(m_mockDatastore);
+		m_mockEventBus = mock(EventBus.class);
+		m_aggregator = new SaveAsAggregator(m_mockEventBus);
+
+		m_event = ArgumentCaptor.forClass(DataPointEvent.class);
 	}
 
 	@Test
@@ -55,14 +60,14 @@ public void testTtl() throws DatastoreException
 		assertThat(dataPoint.getTimestamp(), equalTo(1L));
 		assertThat(dataPoint.getLongValue(), equalTo(10L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), any(ImmutableSortedMap.class), eq(dataPoint), eq(42));
+		verifyEvent(m_mockEventBus, "testTtl", dataPoint, 42);
 
 		assertThat(results.hasNext(), equalTo(true));
 		dataPoint = results.next();
 		assertThat(dataPoint.getTimestamp(), equalTo(2L));
 		assertThat(dataPoint.getLongValue(), equalTo(20L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), any(ImmutableSortedMap.class), eq(dataPoint), eq(42));
+		verifyEvent(m_mockEventBus, "testTtl", dataPoint, 42);
 
 		results.close();
 	}
@@ -84,14 +89,14 @@ public void testNoTtl() throws DatastoreException
 		assertThat(dataPoint.getTimestamp(), equalTo(1L));
 		assertThat(dataPoint.getLongValue(), equalTo(10L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), any(ImmutableSortedMap.class), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", dataPoint, 0);
 
 		assertThat(results.hasNext(), equalTo(true));
 		dataPoint = results.next();
 		assertThat(dataPoint.getTimestamp(), equalTo(2L));
 		assertThat(dataPoint.getLongValue(), equalTo(20L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), any(ImmutableSortedMap.class), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", dataPoint, 0);
 
 		results.close();
 	}
@@ -119,14 +124,14 @@ public void testNotAddingSavedFrom() throws DatastoreException
 		assertThat(dataPoint.getTimestamp(), equalTo(1L));
 		assertThat(dataPoint.getLongValue(), equalTo(10L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 0);
 
 		assertThat(results.hasNext(), equalTo(true));
 		dataPoint = results.next();
 		assertThat(dataPoint.getTimestamp(), equalTo(2L));
 		assertThat(dataPoint.getLongValue(), equalTo(20L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 0);
 
 		results.close();
 	}
@@ -154,14 +159,14 @@ public void testAddedTags() throws DatastoreException
 		assertThat(dataPoint.getTimestamp(), equalTo(1L));
 		assertThat(dataPoint.getLongValue(), equalTo(10L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 0);
 
 		assertThat(results.hasNext(), equalTo(true));
 		dataPoint = results.next();
 		assertThat(dataPoint.getTimestamp(), equalTo(2L));
 		assertThat(dataPoint.getLongValue(), equalTo(20L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(0));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 0);
 
 		results.close();
 	}
@@ -196,14 +201,14 @@ public void testGroupByTagFilter() throws DatastoreException
 		assertThat(dataPoint.getTimestamp(), equalTo(1L));
 		assertThat(dataPoint.getLongValue(), equalTo(10L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(42));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 42);
 
 		assertThat(results.hasNext(), equalTo(true));
 		dataPoint = results.next();
 		assertThat(dataPoint.getTimestamp(), equalTo(2L));
 		assertThat(dataPoint.getLongValue(), equalTo(20L));
 
-		verify(m_mockDatastore).putDataPoint(eq("testTtl"), eq(verifyMap), eq(dataPoint), eq(42));
+		verifyEvent(m_mockEventBus, "testTtl", verifyMap, dataPoint, 42);
 
 		results.close();
 	}
diff --git a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
index 358ba5568a..79f891608f 100755
--- a/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
+++ b/src/test/java/org/kairosdb/core/datastore/KairosDatastoreTest.java
@@ -18,7 +18,6 @@
 import com.google.common.collect.ImmutableSortedMap;
 import org.junit.Test;
 import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.DataPointListener;
 import org.kairosdb.core.KairosDataPointFactory;
 import org.kairosdb.core.TestDataPointFactory;
 import org.kairosdb.core.aggregator.AggregatorFactory;
@@ -61,7 +60,7 @@ public void test_query_nullMetricInvalid() throws KairosDBException
 	{
 		TestDatastore testds = new TestDatastore();
 		KairosDatastore datastore = new KairosDatastore(testds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
+				new TestDataPointFactory(), false);
 
 		datastore.createQuery(null);
 	}
@@ -71,7 +70,7 @@ public void test_query_sumAggregator() throws KairosDBException
 	{
 		TestDatastore testds = new TestDatastore();
 		KairosDatastore datastore = new KairosDatastore(testds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
+				new TestDataPointFactory(), false);
 		QueryMetric metric = new QueryMetric(1L, 1, "metric1");
 		metric.addAggregator(aggFactory.createAggregator("sum"));
 
@@ -100,7 +99,7 @@ public void test_query_noAggregator() throws KairosDBException
 	{
 		TestDatastore testds = new TestDatastore();
 		KairosDatastore datastore = new KairosDatastore(testds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
+				new TestDataPointFactory(), false);
 		QueryMetric metric = new QueryMetric(1L, 1, "metric1");
 
 		DatastoreQuery dq = datastore.createQuery(metric);
@@ -174,7 +173,7 @@ public void test_cleanCacheDir() throws IOException, DatastoreException
 	{
 		TestDatastore testds = new TestDatastore();
 		KairosDatastore datastore = new KairosDatastore(testds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
+				new TestDataPointFactory(), false);
 
 		// Create files in the cache directory
 		File cacheDir = new File(datastore.getCacheDir());
@@ -196,7 +195,7 @@ public void test_cleanCacheDir() throws IOException, DatastoreException
 	public void test_groupByTypeAndTag_SameTagValue() throws DatastoreException, FormatterException
 	{
 		TestKairosDatastore datastore = new TestKairosDatastore(new TestDatastore(), new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory());
+				new TestDataPointFactory());
 
 		TagGroupBy groupBy = new TagGroupBy("tag1", "tag2");
 		List<DataPointRow> rows = new ArrayList<DataPointRow>();
@@ -227,7 +226,7 @@ public void test_groupByTypeAndTag_SameTagValue() throws DatastoreException, For
 	public void test_groupByTypeAndTag_DifferentTagValues() throws DatastoreException, FormatterException
 	{
 		TestKairosDatastore datastore = new TestKairosDatastore(new TestDatastore(), new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory());
+				new TestDataPointFactory());
 
 		TagGroupBy groupBy = new TagGroupBy("tag1", "tag2");
 		List<DataPointRow> rows = new ArrayList<DataPointRow>();
@@ -258,7 +257,7 @@ public void test_groupByTypeAndTag_DifferentTagValues() throws DatastoreExceptio
 	public void test_groupByTypeAndTag_MultipleTags() throws DatastoreException, FormatterException
 	{
 		TestKairosDatastore datastore = new TestKairosDatastore(new TestDatastore(), new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory());
+				new TestDataPointFactory());
 
 		/*
 		The order of the returned data must be stored first by tag1 and
@@ -316,10 +315,9 @@ public void test_groupByTypeAndTag_MultipleTags() throws DatastoreException, For
 	{
 
 		public TestKairosDatastore(Datastore datastore, QueryQueuingManager queuingManager,
-		                           List<DataPointListener> dataPointListeners,
 		                           KairosDataPointFactory dataPointFactory) throws DatastoreException
 		{
-			super(datastore, queuingManager, dataPointListeners, dataPointFactory, false);
+			super(datastore, queuingManager, dataPointFactory, false);
 		}
 	}
 
@@ -336,13 +334,6 @@ public void close() throws InterruptedException
 		{
 		}
 
-		@Override
-		public void putDataPoint(String metricName,
-				ImmutableSortedMap<String, String> tags,
-				DataPoint dataPoint, int ttl) throws DatastoreException
-		{
-		}
-
 		@Override
 		public Iterable<String> getMetricNames()
 		{
diff --git a/src/test/java/org/kairosdb/core/health/DatastoreQueryHealthCheckTest.java b/src/test/java/org/kairosdb/core/health/DatastoreQueryHealthCheckTest.java
index ee534bc733..d2ada79675 100755
--- a/src/test/java/org/kairosdb/core/health/DatastoreQueryHealthCheckTest.java
+++ b/src/test/java/org/kairosdb/core/health/DatastoreQueryHealthCheckTest.java
@@ -4,6 +4,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
 
 import java.util.Collections;
@@ -16,13 +17,13 @@
 
 public class DatastoreQueryHealthCheckTest
 {
-	private Datastore datastore;
+	private KairosDatastore datastore;
 	private DatastoreQueryHealthCheck healthCheck;
 
 	@Before
 	public void setup() throws DatastoreException
 	{
-		datastore = mock(Datastore.class);
+		datastore = mock(KairosDatastore.class);
 		when(datastore.getMetricNames()).thenReturn(Collections.<String>emptyList());
 
 		healthCheck = new DatastoreQueryHealthCheck(datastore);
diff --git a/src/test/java/org/kairosdb/core/health/HealthCheckResourceTest.java b/src/test/java/org/kairosdb/core/health/HealthCheckResourceTest.java
index e67503d958..13bbc44a7c 100755
--- a/src/test/java/org/kairosdb/core/health/HealthCheckResourceTest.java
+++ b/src/test/java/org/kairosdb/core/health/HealthCheckResourceTest.java
@@ -4,6 +4,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.KairosDatastore;
 import org.kairosdb.core.exception.DatastoreException;
 
 import javax.ws.rs.core.Response;
@@ -19,12 +20,12 @@
 public class HealthCheckResourceTest
 {
 	private HealthCheckResource resourceService;
-	private Datastore datastore;
+	private KairosDatastore datastore;
 
 	@Before
 	public void setup() throws DatastoreException
 	{
-		datastore = mock(Datastore.class);
+		datastore = mock(KairosDatastore.class);
 		when(datastore.getMetricNames()).thenReturn(Collections.<String>emptyList());
 
 		HealthCheckService healthCheckService = new TestHealthCheckService();
diff --git a/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java b/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
index 53fe1e1811..bcf314b7a2 100755
--- a/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/MetricsResourceTest.java
@@ -18,9 +18,14 @@
 import ch.qos.logback.classic.Level;
 import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import com.google.common.io.Resources;
 import com.google.inject.*;
+import com.google.inject.matcher.Matchers;
 import com.google.inject.name.Names;
+import com.google.inject.spi.InjectionListener;
+import com.google.inject.spi.TypeEncounter;
+import com.google.inject.spi.TypeListener;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -62,6 +67,7 @@
 	private static QueryQueuingManager queuingManager;
 	private static Client client;
 	private static WebServer server;
+	private static final EventBus m_eventBus = new EventBus();
 
 	@BeforeClass
 	public static void startup() throws Exception
@@ -78,6 +84,21 @@ public static void startup() throws Exception
 			@Override
 			protected void configure()
 			{
+				bind(EventBus.class).toInstance(m_eventBus);
+				//Need to register an exception handler
+				bindListener(Matchers.any(), new TypeListener()
+				{
+					public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
+					{
+						typeEncounter.register(new InjectionListener<I>()
+						{
+							public void afterInjection(I i)
+							{
+								m_eventBus.register(i);
+							}
+						});
+					}
+				});
 				bind(String.class).annotatedWith(Names.named(WebServer.JETTY_ADDRESS_PROPERTY)).toInstance("0.0.0.0");
 				bind(Integer.class).annotatedWith(Names.named(WebServer.JETTY_PORT_PROPERTY)).toInstance(9001);
 				bind(String.class).annotatedWith(Names.named(WebServer.JETTY_WEB_ROOT_PROPERTY)).toInstance("bogus");
@@ -86,7 +107,6 @@ protected void configure()
 				bind(AggregatorFactory.class).to(TestAggregatorFactory.class);
 				bind(GroupByFactory.class).to(TestGroupByFactory.class);
 				bind(QueryParser.class).in(Singleton.class);
-				bind(new TypeLiteral<List<DataPointListener>>(){}).toProvider(DataPointListenerProvider.class);
 				bind(QueryQueuingManager.class).toInstance(queuingManager);
 				bindConstant().annotatedWith(Names.named("HOSTNAME")).to("HOST");
 				bindConstant().annotatedWith(Names.named("kairosdb.datastore.concurrentQueryThreads")).to(1);
@@ -321,13 +341,6 @@ public void close() throws InterruptedException
 		{
 		}
 
-		@Override
-		public void putDataPoint(String metricName,
-				ImmutableSortedMap<String, String> tags,
-				DataPoint dataPoint, int ttl) throws DatastoreException
-		{
-		}
-
 		@Override
 		public Iterable<String> getMetricNames()
 		{
diff --git a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
index 0205b2c6ae..0b33fdb65c 100755
--- a/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
+++ b/src/test/java/org/kairosdb/core/http/rest/json/DataPointsParserTest.java
@@ -17,14 +17,20 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
+import com.google.common.eventbus.Subscribe;
 import com.google.common.io.Resources;
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 import org.junit.Test;
 import org.kairosdb.core.*;
 import org.kairosdb.core.datapoints.StringDataPoint;
-import org.kairosdb.core.datastore.*;
+import org.kairosdb.core.datastore.Datastore;
+import org.kairosdb.core.datastore.DatastoreMetricQuery;
+import org.kairosdb.core.datastore.QueryCallback;
+import org.kairosdb.core.datastore.TagSet;
 import org.kairosdb.core.exception.DatastoreException;
+import org.kairosdb.events.DataPointEvent;
 
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -46,12 +52,9 @@
 	public void test_emptyJson_Invalid() throws DatastoreException, IOException
 	{
 		String json = "";
+		EventBus eventBus = new EventBus();
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
-
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json), new Gson(),
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json), new Gson(),
 				dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -65,11 +68,9 @@ public void test_nullMetricName_Invalid() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": 456, \"datapoints\": [[1,2]], \"tags\":{\"foo\":\"bar\"}}, {\"datapoints\": [[1,2]], \"tags\":{\"foo\":\"bar\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
+		EventBus eventBus = new EventBus();
 
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -83,10 +84,9 @@ public void test_timestampButNoValue_Invalid() throws DatastoreException, IOExce
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": 1234, \"tags\": {\"foo\":\"bar\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -100,10 +100,8 @@ public void test_valueButNoTimestamp_Invalid() throws DatastoreException, IOExce
 	{
 		String json = "[{\"name\": \"metric1\", \"value\": 1234, \"tags\":{\"foo\":\"bar\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -117,10 +115,8 @@ public void test_timestamp_Zero_Valid() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": 0, \"value\": 1234, \"tags\":{\"foo\":\"bar\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -134,10 +130,8 @@ public void test_Timestamp_Negative_Valid() throws DatastoreException, IOExcepti
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": -1, \"value\": 1234, \"tags\":{\"foo\":\"bar\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -151,10 +145,8 @@ public void test_datapoints_empty_Invalid() throws DatastoreException, IOExcepti
 	{
 		String json = "[{\"name\": \"metric1\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -168,10 +160,8 @@ public void test_datapoints_empty_value_Invalid() throws DatastoreException, IOE
 	{
 		String json = "[{\"name\": \"metric1\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[2,]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -185,10 +175,8 @@ public void test_datapoints_empty_timestamp_Invalid() throws DatastoreException,
 	{
 		String json = "[{\"name\": \"metric1\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -202,10 +190,8 @@ public void test_emptyMetricName_Invalid() throws DatastoreException, IOExceptio
 	{
 		String json = "[{\"name\": \"\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -219,10 +205,8 @@ public void test_metricName_validCharacters() throws DatastoreException, IOExcep
 	{
 		String json = "[{\"name\": \"bad:你好name\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -236,10 +220,8 @@ public void test_emptyTags_Invalid() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metricName\", \"timestamp\": 12345, \"value\": 456, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -253,10 +235,8 @@ public void test_datapoints_timestamp_zero_Valid() throws DatastoreException, IO
 	{
 		String json = "[{\"name\": \"metric1\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[0,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -270,10 +250,8 @@ public void test_datapoints_timestamp_negative_Valid() throws DatastoreException
 	{
 		String json = "[{\"name\": \"metric1\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[-1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -287,10 +265,8 @@ public void test_emptyTagName_Invalid() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"\":\"bar\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -305,10 +281,8 @@ public void test_tagName_invalidCharacters() throws DatastoreException, IOExcept
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"bad:name\":\"bar\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -323,10 +297,8 @@ public void test_emptyTagValue_Invalid() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"foo\":\"\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -340,10 +312,8 @@ public void test_tagValue_invalidCharacters() throws DatastoreException, IOExcep
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"foo\":\"bad:value\"}, \"datapoints\": [[1,2]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -358,10 +328,8 @@ public void test_multipleValidationFailures() throws DatastoreException, IOExcep
 	{
 		String json = "[{\"name\": \"metricName\", \"timestamp\": 456, \"value\":\"\", \"tags\":{\"name\":\"\"}}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -379,10 +347,8 @@ public void test_value_decimal_with_zeros() throws DatastoreException, IOExcepti
 	{
 		String json = "[{\"name\": \"metricName\", \"tags\":{\"foo\":\"bar\"}, \"datapoints\": [[1, \"0.000000\"]]}]";
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		EventBus eventBus = new EventBus();
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -395,10 +361,10 @@ public void test_validJsonWithTimestampValue() throws DatastoreException, IOExce
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": 4321, \"tags\":{\"foo\":\"bar\"}}]";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -421,10 +387,10 @@ public void test_invalidJson() throws DatastoreException, IOException
 	{
 		String json = "[{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": }]";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -446,10 +412,10 @@ public void test_validJsonWithTimestampValueAndDataPoints() throws DatastoreExce
 	{
 		String json = "[{\"name\": \"metric1\", \"time\": 1234, \"value\": 4321, \"datapoints\": [[456, 654]], \"tags\":{\"foo\":\"bar\"}}]";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -476,10 +442,10 @@ public void test_validJsonWithDatapoints() throws DatastoreException, IOExceptio
 	{
 		String json = Resources.toString(Resources.getResource("json-metric-parser-multiple-metric.json"), Charsets.UTF_8);
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -516,10 +482,10 @@ public void test_validJsonWithTypes() throws IOException, DatastoreException
 	{
 		String json = Resources.toString(Resources.getResource("json-metric-parser-metrics-with-type.json"), Charsets.UTF_8);
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -569,10 +535,10 @@ public void test_justObjectNoArray_valid() throws DatastoreException, IOExceptio
 	{
 		String json = "{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": 4321, \"tags\":{\"foo\":\"bar\"}}";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -595,10 +561,10 @@ public void test_stringWithNoType_valid() throws DatastoreException, IOException
 	{
 		String json = "{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": \"The Value\", \"tags\":{\"foo\":\"bar\"}}";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -621,10 +587,10 @@ public void test_stringWithNoTypeAsArray_valid() throws DatastoreException, IOEx
 	{
 		String json = "[{\"name\": \"metric1\",\"datapoints\": [[1234, \"The Value\"]],\"tags\": {\"foo\": \"bar\"}}]";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -647,10 +613,10 @@ public void test_stringContainsInteger_valid() throws DatastoreException, IOExce
 	{
 		String json = "{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": \"123\", \"tags\":{\"foo\":\"bar\"}}";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -673,10 +639,10 @@ public void test_stringContainsDouble_valid() throws DatastoreException, IOExcep
 	{
 		String json = "{\"name\": \"metric1\", \"timestamp\": 1234, \"value\": \"123.3\", \"tags\":{\"foo\":\"bar\"}}";
 
+		EventBus eventBus = new EventBus();
 		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
-		DataPointsParser parser = new DataPointsParser(datastore, new StringReader(json),
+		eventBus.register(fakeds);
+		DataPointsParser parser = new DataPointsParser(eventBus, new StringReader(json),
 				new Gson(), dataPointFactory);
 
 		ValidationErrors validationErrors = parser.parse();
@@ -705,11 +671,9 @@ public void test_parserSpeed() throws DatastoreException, IOException
 		Reader reader = new InputStreamReader(
 				new GZIPInputStream(ClassLoader.getSystemResourceAsStream("large_import.gz")));
 
-		FakeDataStore fakeds = new FakeDataStore();
-		KairosDatastore datastore = new KairosDatastore(fakeds, new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
+		EventBus eventBus = new EventBus();
 
-		DataPointsParser parser = new DataPointsParser(datastore, skipReader,
+		DataPointsParser parser = new DataPointsParser(eventBus, skipReader,
 				new Gson(), dataPointFactory);
 		ValidationErrors validationErrors = parser.parse();
 
@@ -717,7 +681,7 @@ public void test_parserSpeed() throws DatastoreException, IOException
 		System.out.println("No Validation");
 		System.out.println(parser.getIngestTime());
 
-		parser = new DataPointsParser(datastore, reader, new Gson(), dataPointFactory);
+		parser = new DataPointsParser(eventBus, reader, new Gson(), dataPointFactory);
 		validationErrors = parser.parse();
 		System.out.println("With Validation");
 		System.out.println(parser.getIngestTime());
@@ -742,17 +706,17 @@ public void close() throws InterruptedException, DatastoreException
 		{
 		}
 
-		@Override
-		public void putDataPoint(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int tll) throws DatastoreException
+		@Subscribe
+		public void putDataPoint(DataPointEvent event) throws DatastoreException
 		{
-			if ((lastDataPointSet == null) || (!lastDataPointSet.getName().equals(metricName)) ||
-					(!lastDataPointSet.getTags().equals(tags)))
+			if ((lastDataPointSet == null) || (!lastDataPointSet.getName().equals(event.getMetricName())) ||
+					(!lastDataPointSet.getTags().equals(event.getTags())))
 			{
-				lastDataPointSet = new DataPointSet(metricName, tags, Collections.EMPTY_LIST);
+				lastDataPointSet = new DataPointSet(event.getMetricName(), event.getTags(), Collections.EMPTY_LIST);
 				dataPointSetList.add(lastDataPointSet);
 			}
 
-			lastDataPointSet.addDataPoint(dataPoint);
+			lastDataPointSet.addDataPoint(event.getDataPoint());
 		}
 
 		/*@Override
diff --git a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
index 3af1d997b3..93383adafa 100755
--- a/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
+++ b/src/test/java/org/kairosdb/core/telnet/PutCommandTest.java
@@ -15,18 +15,18 @@
  */
 package org.kairosdb.core.telnet;
 
-import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
+import com.google.common.eventbus.Subscribe;
 import org.jboss.netty.channel.*;
 import org.junit.Before;
 import org.junit.Test;
-import org.kairosdb.core.DataPoint;
-import org.kairosdb.core.DataPointListener;
 import org.kairosdb.core.DataPointSet;
 import org.kairosdb.core.TestDataPointFactory;
 import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
 import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
 import org.kairosdb.core.datastore.*;
 import org.kairosdb.core.exception.DatastoreException;
+import org.kairosdb.events.DataPointEvent;
 import org.kairosdb.util.ValidationException;
 
 import java.net.SocketAddress;
@@ -38,30 +38,32 @@
 
 public class PutCommandTest
 {
-	private PutCommand command;
-	private FakeDatastore datastore;
+	private PutCommand m_command;
+	private FakeDatastore m_datastore;
+	private EventBus m_eventBus;
 
 	@Before
 	public void setup() throws DatastoreException
 	{
-		datastore = new FakeDatastore();
-		KairosDatastore kairosDatastore = new KairosDatastore(datastore, new QueryQueuingManager(1, "test"),
-				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
-		command = new PutCommand(kairosDatastore, "test", new LongDataPointFactoryImpl(),
+		m_eventBus = new EventBus();
+		m_datastore = new FakeDatastore();
+		m_eventBus.register(m_datastore);
+
+		m_command = new PutCommand(m_eventBus, "test", new LongDataPointFactoryImpl(),
 				new DoubleDataPointFactoryImpl());
 	}
 
 	@Test
 	public void test() throws DatastoreException, ValidationException
 	{
-		command.execute(new FakeChannel(), new String[]{"telnet", "MetricName", "12345678999", "789", "foo=bar", "fum=barfum"});
-
-		assertThat(datastore.getSet().getName(), equalTo("MetricName"));
-		assertThat(datastore.getSet().getTags().size(), equalTo(2));
-		assertThat(datastore.getSet().getTags().get("foo"), equalTo("bar"));
-		assertThat(datastore.getSet().getTags().get("fum"), equalTo("barfum"));
-		assertThat(datastore.getSet().getDataPoints().get(0).getTimestamp(), equalTo(12345678999L));
-		assertThat(datastore.getSet().getDataPoints().get(0).getLongValue(), equalTo(789L));
+		m_command.execute(new FakeChannel(), new String[]{"telnet", "MetricName", "12345678999", "789", "foo=bar", "fum=barfum"});
+
+		assertThat(m_datastore.getSet().getName(), equalTo("MetricName"));
+		assertThat(m_datastore.getSet().getTags().size(), equalTo(2));
+		assertThat(m_datastore.getSet().getTags().get("foo"), equalTo("bar"));
+		assertThat(m_datastore.getSet().getTags().get("fum"), equalTo("barfum"));
+		assertThat(m_datastore.getSet().getDataPoints().get(0).getTimestamp(), equalTo(12345678999L));
+		assertThat(m_datastore.getSet().getDataPoints().get(0).getLongValue(), equalTo(789L));
 	}
 
 	@Test
@@ -69,7 +71,7 @@ public void test_metricName_empty_invalid() throws DatastoreException, Validatio
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "", "12345678999", "789", "foo=bar", "fum=barfum"});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "", "12345678999", "789", "foo=bar", "fum=barfum"});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -85,7 +87,7 @@ public void test_metricName_empty_invalid() throws DatastoreException, Validatio
 	@Test
 	public void test_metricName_characters_valid() throws DatastoreException, ValidationException
 	{
-		command.execute(new FakeChannel(), new String[]{"telnet", "你好", "12345678999", "789", "foo=bar", "fum=barfum"});
+		m_command.execute(new FakeChannel(), new String[]{"telnet", "你好", "12345678999", "789", "foo=bar", "fum=barfum"});
 	}
 
 	@Test
@@ -93,7 +95,7 @@ public void test_tagName_empty_invalid() throws DatastoreException, ValidationEx
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "=barfum"});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "=barfum"});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -111,7 +113,7 @@ public void test_tagName_characters_invalid() throws DatastoreException, Validat
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum:fi=barfum"});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum:fi=barfum"});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -129,7 +131,7 @@ public void test_tagValue_empty_invalid() throws DatastoreException, ValidationE
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum="});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum="});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -147,7 +149,7 @@ public void test_tagValue_characters_invalid() throws DatastoreException, Valida
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum=bar:fum"});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum=bar:fum"});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -165,7 +167,7 @@ public void test_tag_invalid() throws DatastoreException, ValidationException
 	{
 		try
 		{
-			command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum-barfum"});
+			m_command.execute(new FakeChannel(), new String[]{"telnet", "metricName", "12345678999", "789", "foo=bar", "fum-barfum"});
 			fail("ValidationException expected");
 		}
 		catch (DatastoreException e)
@@ -350,15 +352,13 @@ public void close() throws InterruptedException, DatastoreException
 		{
 		}
 
-		@Override
-		public void putDataPoint(String metricName,
-				ImmutableSortedMap<String, String> tags,
-				DataPoint dataPoint, int ttl) throws DatastoreException
+		@Subscribe
+		public void putDataPoint(DataPointEvent event) throws DatastoreException
 		{
 			if (set == null)
-				set = new DataPointSet(metricName, tags, Collections.EMPTY_LIST);
+				set = new DataPointSet(event.getMetricName(), event.getTags(), Collections.EMPTY_LIST);
 
-			set.addDataPoint(dataPoint);
+			set.addDataPoint(event.getDataPoint());
 		}
 
 		/*@Override
diff --git a/src/test/java/org/kairosdb/core/telnet/TelnetServerTest.java b/src/test/java/org/kairosdb/core/telnet/TelnetServerTest.java
index 4a13ce477f..98040b09f2 100755
--- a/src/test/java/org/kairosdb/core/telnet/TelnetServerTest.java
+++ b/src/test/java/org/kairosdb/core/telnet/TelnetServerTest.java
@@ -17,6 +17,7 @@
 package org.kairosdb.core.telnet;
 
 import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -34,6 +35,7 @@
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.kairosdb.util.DataPointEventUtil.verifyEvent;
 import static org.mockito.Mockito.*;
 
 /**
@@ -47,6 +49,7 @@
 	private static final int TELNET_PORT = 4244;
 	private static final int MAX_COMMAND_LENGTH = 1024;
 	private KairosDatastore m_datastore;
+	private EventBus m_eventBus;
 	private TelnetServer m_server;
 	private TelnetClient m_client;
 	private TestCommandProvider commandProvider;
@@ -54,9 +57,9 @@
 	@Before
 	public void setupDatastore() throws KairosDBException, IOException
 	{
-		m_datastore = mock(KairosDatastore.class);
+		m_eventBus = mock(EventBus.class);
 		commandProvider = new TestCommandProvider();
-		commandProvider.putCommand("put", new PutCommand(m_datastore, "localhost",
+		commandProvider.putCommand("put", new PutCommand(m_eventBus, "localhost",
 				new LongDataPointFactoryImpl(), new DoubleDataPointFactoryImpl()));
 
 		m_server = new TelnetServer(TELNET_PORT, MAX_COMMAND_LENGTH, commandProvider);
@@ -118,8 +121,7 @@ public void test_extraSpaceAfterValue() throws DatastoreException
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(1))
-				.putDataPoint("test.metric", tags, dp);
+		verifyEvent(m_eventBus, "test.metric", tags, dp);
 	}
 
 	@Test
@@ -134,8 +136,7 @@ public void test_extraSpaceAfterMetric() throws DatastoreException
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(1))
-				.putDataPoint("test.metric", tags, dp);
+		verifyEvent(m_eventBus, "test.metric", tags, dp);
 	}
 
 	@Test
@@ -150,8 +151,7 @@ public void test_extraSpaceAfterTime() throws DatastoreException
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(1))
-				.putDataPoint("test.metric", tags, dp);
+		verifyEvent(m_eventBus, "test.metric", tags, dp);
 	}
 
 	@Test
@@ -166,8 +166,7 @@ public void test_tripleSpaceAfterTime() throws DatastoreException
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(1))
-				.putDataPoint("test.metric", tags, dp);
+		verifyEvent(m_eventBus, "test.metric", tags, dp);
 	}
 
 	@Test
@@ -185,15 +184,14 @@ public void test_MaxCommandLengthTooLong() throws DatastoreException
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(0))
-				.putDataPoint(metricName, tags, dp);
+		verifyZeroInteractions(m_eventBus);
 	}
 
 	@Test
 	public void test_MaxCommandLengthSufficient() throws KairosDBException, IOException
 	{
 		TestCommandProvider commandProvider = new TestCommandProvider();
-		commandProvider.putCommand("put", new PutCommand(m_datastore, "localhost",
+		commandProvider.putCommand("put", new PutCommand(m_eventBus, "localhost",
 				new LongDataPointFactoryImpl(), new DoubleDataPointFactoryImpl()));
 		m_server.stop();
 		m_server = new TelnetServer(TELNET_PORT, 3072, commandProvider);
@@ -212,8 +210,7 @@ public void test_MaxCommandLengthSufficient() throws KairosDBException, IOExcept
 				.build();
 		DataPoint dp = new LongDataPoint(now * 1000, 123);
 
-		verify(m_datastore, timeout(5000).times(1))
-				.putDataPoint(metricName, tags, dp);
+		verifyEvent(m_eventBus, metricName, tags, dp);
 	}
 
 	private String createLongString(int length)
diff --git a/src/test/java/org/kairosdb/datastore/DatastoreTestHelper.java b/src/test/java/org/kairosdb/datastore/DatastoreTestHelper.java
index bcab3ffd6a..68e3d0a9b3 100755
--- a/src/test/java/org/kairosdb/datastore/DatastoreTestHelper.java
+++ b/src/test/java/org/kairosdb/datastore/DatastoreTestHelper.java
@@ -20,6 +20,7 @@
 import com.google.common.collect.ImmutableSortedMap;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.TreeMultimap;
+import com.google.common.eventbus.EventBus;
 import junit.framework.TestCase;
 import org.hamcrest.CoreMatchers;
 import org.junit.Test;
@@ -32,6 +33,7 @@
 import org.kairosdb.core.datastore.QueryMetric;
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.core.groupby.TagGroupBy;
+import org.kairosdb.events.DataPointEvent;
 
 import java.util.*;
 
@@ -46,6 +48,7 @@
 public abstract class DatastoreTestHelper
 {
 	protected static KairosDatastore s_datastore;
+	protected static EventBus s_eventBus = new EventBus();
 	protected static final List<String> metricNames = new ArrayList<String>();
 	private static long s_startTime;
 	private static String s_unicodeNameWithSpace = "你好 means hello";
@@ -92,10 +95,10 @@ protected static void loadData() throws DatastoreException
 				.build();
 
 		s_startTime = System.currentTimeMillis();
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 1));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 1000, 2));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 2000, 3));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 3000, 4));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 1)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 1000, 2)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 2000, 3)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 3000, 4)));
 
 
 		tags = ImmutableSortedMap.<String, String>naturalOrder()
@@ -104,10 +107,10 @@ protected static void loadData() throws DatastoreException
 				.put("month", "April")
 				.build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 5));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 1000, 6));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 2000, 7));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 3000, 8));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 5)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 1000, 6)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 2000, 7)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 3000, 8)));
 
 
 		tags = ImmutableSortedMap.<String, String>naturalOrder()
@@ -116,10 +119,10 @@ protected static void loadData() throws DatastoreException
 				.put("month", "April")
 				.build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 9));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 1000, 10));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 2000, 11));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 3000, 12));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 9)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 1000, 10)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 2000, 11)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 3000, 12)));
 
 
 		metricNames.add("metric2");
@@ -130,10 +133,10 @@ protected static void loadData() throws DatastoreException
 				.put("month", "April")
 				.build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 13));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 1000, 14));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 2000, 15));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime + 3000, 16));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 13)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 1000, 14)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 2000, 15)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime + 3000, 16)));
 
 
 		metricNames.add("duplicates");
@@ -142,9 +145,9 @@ protected static void loadData() throws DatastoreException
 				.put("host", "A")
 				.build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 4));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 4)));
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 42));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 42)));
 
 
 		//Testing pre 1970 data points with negative values
@@ -153,11 +156,11 @@ protected static void loadData() throws DatastoreException
 		tags = ImmutableSortedMap.<String, String>naturalOrder()
 				.put("host", "A").build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(-2000000000L, 80));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(-1000000000L, 40));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(-100L, 20));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(0L, 3));
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(2000000000L, 33));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(-2000000000L, 80)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(-1000000000L, 40)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(-100L, 20)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(0L, 3)));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(2000000000L, 33)));
 
 
 		//Adding a metric with unicode and spaces
@@ -167,7 +170,7 @@ protected static void loadData() throws DatastoreException
 				.put("host", s_unicodeName)
 				.put("space", "space is cool").build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 42));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 42)));
 
 
 		//Data that will be deleted in test
@@ -176,7 +179,7 @@ protected static void loadData() throws DatastoreException
 		tags = ImmutableSortedMap.<String, String>naturalOrder()
 				.put("ghost", "tag").build();
 
-		s_datastore.putDataPoint(metricName, tags, new LongDataPoint(s_startTime, 50));
+		s_eventBus.post(new DataPointEvent(metricName, tags, new LongDataPoint(s_startTime, 50)));
 	}
 
 	@Test
diff --git a/src/test/java/org/kairosdb/datastore/cassandra/CassandraDatastoreTest.java b/src/test/java/org/kairosdb/datastore/cassandra/CassandraDatastoreTest.java
index 437e37c549..0be89f980c 100755
--- a/src/test/java/org/kairosdb/datastore/cassandra/CassandraDatastoreTest.java
+++ b/src/test/java/org/kairosdb/datastore/cassandra/CassandraDatastoreTest.java
@@ -27,6 +27,7 @@
 import org.kairosdb.core.exception.DatastoreException;
 import org.kairosdb.datastore.DatastoreMetricQueryImpl;
 import org.kairosdb.datastore.DatastoreTestHelper;
+import org.kairosdb.events.DataPointEvent;
 
 import java.io.IOException;
 import java.util.*;
@@ -58,7 +59,7 @@ private static void putDataPoints(DataPointSet dps) throws DatastoreException
 	{
 		for (DataPoint dataPoint : dps.getDataPoints())
 		{
-			s_datastore.putDataPoint(dps.getName(), dps.getTags(), dataPoint, 0);
+			s_eventBus.post(new DataPointEvent(dps.getName(), dps.getTags(), dataPoint, 0));
 		}
 	}
 
@@ -178,12 +179,14 @@ public static void setupDatastore() throws InterruptedException, DatastoreExcept
 		if (System.getenv("CASSANDRA_HOST") != null)
 			cassandraHost = System.getenv("CASSANDRA_HOST");
 
-		s_datastore = new CassandraDatastore("hostname", new CassandraConfiguration(1, MAX_ROW_READ_SIZE, MAX_ROW_READ_SIZE, MAX_ROW_READ_SIZE,
-				1000, 50000, "kairosdb_test"), new HectorConfiguration(cassandraHost), dataPointFactory);
+		/*s_datastore = new CassandraDatastore("hostname", new CassandraConfiguration(1, MAX_ROW_READ_SIZE, MAX_ROW_READ_SIZE, MAX_ROW_READ_SIZE,
+				1000, 50000, "kairosdb_test"), new HectorConfiguration(cassandraHost), dataPointFactory);*/
 
 		DatastoreTestHelper.s_datastore = new KairosDatastore(s_datastore,
 				new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
+				dataPointFactory, false);
+
+		s_eventBus.register(s_datastore);
 
 		loadCassandraData();
 		loadData();
@@ -454,8 +457,8 @@ public void test_setTTL() throws DatastoreException, InterruptedException
 		set.addDataPoint(new LongDataPoint(5, 6L));
 		putDataPoints(set);
 
-		s_datastore.putDataPoint("ttlMetric", set.getTags(),
-				new LongDataPoint(50, 7L), 1);
+		s_eventBus.post(new DataPointEvent("ttlMetric", set.getTags(),
+				new LongDataPoint(50, 7L), 1));
 
 		Thread.sleep(2000);
 		Map<String, String> tags = new TreeMap<String, String>();
diff --git a/src/test/java/org/kairosdb/datastore/h2/H2DatastoreTest.java b/src/test/java/org/kairosdb/datastore/h2/H2DatastoreTest.java
index 52ad946bbd..2d9031007c 100755
--- a/src/test/java/org/kairosdb/datastore/h2/H2DatastoreTest.java
+++ b/src/test/java/org/kairosdb/datastore/h2/H2DatastoreTest.java
@@ -20,7 +20,6 @@
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.kairosdb.core.DataPointListener;
 import org.kairosdb.core.KairosDataPointFactory;
 import org.kairosdb.core.TestDataPointFactory;
 import org.kairosdb.core.datastore.*;
@@ -65,10 +64,13 @@ private static void deltree(File directory)
 	public static void setupDatabase() throws DatastoreException
 	{
 		KairosDataPointFactory dataPointFactory = new TestDataPointFactory();
+		H2Datastore h2Datastore = new H2Datastore(DB_PATH, dataPointFactory);
 
-		s_datastore = new KairosDatastore(new H2Datastore(DB_PATH, dataPointFactory),
+		s_datastore = new KairosDatastore(h2Datastore,
 				new QueryQueuingManager(1, "hostname"),
-				Collections.<DataPointListener>emptyList(), dataPointFactory, false);
+				dataPointFactory, false);
+
+		s_eventBus.register(h2Datastore);
 
 		loadData();
 	}
diff --git a/src/test/java/org/kairosdb/util/DataPointEventUtil.java b/src/test/java/org/kairosdb/util/DataPointEventUtil.java
new file mode 100755
index 0000000000..a73d570afa
--- /dev/null
+++ b/src/test/java/org/kairosdb/util/DataPointEventUtil.java
@@ -0,0 +1,82 @@
+package org.kairosdb.util;
+
+import com.google.common.collect.ImmutableSortedMap;
+import com.google.common.eventbus.EventBus;
+import org.h2.store.Data;
+import org.kairosdb.core.DataPoint;
+import org.kairosdb.events.DataPointEvent;
+import org.mockito.ArgumentCaptor;
+import org.mockito.ArgumentMatcher;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.core.IsEqual.equalTo;
+import static org.mockito.Matchers.anyObject;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.timeout;
+import static org.mockito.Mockito.verify;
+
+/**
+ Created by bhawkins on 10/3/16.
+ */
+public class DataPointEventUtil
+{
+	private static DataPointEvent verifyPost(EventBus eventBus)
+	{
+		ArgumentCaptor<DataPointEvent> event = ArgumentCaptor.forClass(DataPointEvent.class);
+		verify(eventBus, timeout(5000).times(1)).post(event.capture());
+		reset(eventBus);
+
+		return event.getValue();
+	}
+
+	public static void verifyEvent(EventBus eventBus, String metricName,
+			ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int ttl)
+	{
+		DataPointEvent event = verifyPost(eventBus);
+		assertThat(event.getMetricName(), equalTo(metricName));
+		assertThat(event.getTags(), equalTo(tags));
+		assertThat(event.getDataPoint(), equalTo(dataPoint));
+		assertThat(event.getTtl(), equalTo(ttl));
+	}
+
+	public static void verifyEvent(EventBus eventBus, String metricName,
+			ImmutableSortedMap<String, String> tags, DataPoint dataPoint)
+	{
+		DataPointEvent event = verifyPost(eventBus);
+		assertThat(event.getMetricName(), equalTo(metricName));
+		assertThat(event.getTags(), equalTo(tags));
+		assertThat(event.getDataPoint(), equalTo(dataPoint));
+	}
+
+	public static void verifyEvent(EventBus eventBus,
+			final String metricName,
+			final DataPoint dataPoint,
+			final int ttl)
+	{
+		DataPointEvent event = verifyPost(eventBus);
+		assertThat(event.getMetricName(), equalTo(metricName));
+		assertThat(event.getDataPoint(), equalTo(dataPoint));
+		assertThat(event.getTtl(), equalTo(ttl));
+	}
+
+	public static void verifyEvent(EventBus eventBus, String metricName,
+			DataPoint dataPoint)
+	{
+		DataPointEvent event = verifyPost(eventBus);
+		assertThat(event.getMetricName(), equalTo(metricName));
+		assertThat(event.getDataPoint(), equalTo(dataPoint));
+	}
+
+	private class DataPointEventMatcher extends ArgumentMatcher<DataPointEvent>
+	{
+		@Override
+		public boolean matches(Object argument)
+		{
+			DataPointEvent event = (DataPointEvent)argument;
+			return true;
+			/*return metricName.equals(event.getMetricName()) &&
+					dataPoint.equals(event.getDataPoint()) &&
+					ttl == event.getTtl();*/
+		}
+	}
+}
