diff --git a/src/main/java/wyil/util/type/TypeAlgorithms.java b/src/main/java/wyil/util/type/TypeAlgorithms.java
index 05b659f1a7..ee23aaac69 100755
--- a/src/main/java/wyil/util/type/TypeAlgorithms.java
+++ b/src/main/java/wyil/util/type/TypeAlgorithms.java
@@ -86,7 +86,7 @@ public int compare(Automaton.State s1, Automaton.State s2) {
 				Boolean nid1 = (Boolean) s1.data;
 				Boolean nid2 = (Boolean) s2.data;
 				return nid1.toString().compareTo(nid2.toString());
-			} else if(s1.kind == TypeSystem.K_FUNCTION || s1.kind == TypeSystem.K_METHOD) {
+			} else if(s1.kind == TypeSystem.K_FUNCTION || s1.kind == TypeSystem.K_METHOD || s1.kind == TypeSystem.K_PROPERTY) {
 				TypeSystem.FunctionOrMethodState s1Data = (TypeSystem.FunctionOrMethodState) s1.data;
 				TypeSystem.FunctionOrMethodState s2Data = (TypeSystem.FunctionOrMethodState) s2.data;
 				return s1Data.compareTo(s2Data);
@@ -153,6 +153,7 @@ private static boolean isContractive(int index, BitSet contractives,
 		case TypeSystem.K_ARRAY:
 		case TypeSystem.K_FUNCTION:
 		case TypeSystem.K_METHOD:
+		case TypeSystem.K_PROPERTY:
 			return false;
 		}
 
@@ -254,6 +255,7 @@ private static Inhabitation getStateInhabitation(int index, Automaton automaton,
 		case TypeSystem.K_BYTE:
 		case TypeSystem.K_INT:
 		case TypeSystem.K_FUNCTION:
+		case TypeSystem.K_PROPERTY:
 		case TypeSystem.K_NOMINAL:
 		case TypeSystem.K_META:
 			return Inhabitation.SOME;
@@ -317,6 +319,7 @@ private static boolean setStateInhabitation(int index, Automaton automaton, BitS
 			case TypeSystem.K_REFERENCE:
 			case TypeSystem.K_RECORD:
 			case TypeSystem.K_FUNCTION:
+			case TypeSystem.K_PROPERTY:
 			case TypeSystem.K_METHOD:
 				inhabitationFlags.set(index, newValue == Inhabitation.SOME);
 				break;
@@ -479,6 +482,7 @@ private static boolean simplifyState(int index, Automaton automaton, BitSet inha
 		case TypeSystem.K_INT:
 		case TypeSystem.K_NOMINAL:
 		case TypeSystem.K_FUNCTION:
+		case TypeSystem.K_PROPERTY:
 		case TypeSystem.K_META:
 			return false;
 		case TypeSystem.K_NEGATION:
@@ -550,7 +554,7 @@ private static boolean simplifyCompound(int index, Automaton.State state, Automa
 
 		// Skip some children if the compound is a function
 		int numChildrenToCheck = children.length;
-		if (state.kind == TypeSystem.K_FUNCTION) {
+		if (state.kind == TypeSystem.K_FUNCTION && state.kind == TypeSystem.K_PROPERTY) {
 		  // Only check function parameters for now
 		  // TODO: Work out how to handle function return types properly
 			numChildrenToCheck = (Integer) state.data;
@@ -994,6 +998,7 @@ private static int intersectSameKind(int fromIndex, boolean fromSign, Automaton
 				return intersectUnions(fromIndex,fromSign,from,toIndex,toSign,to,allocations,states);
 			case TypeSystem.K_FUNCTION:
 			case TypeSystem.K_METHOD:
+			case TypeSystem.K_PROPERTY:
 				return intersectFunctionsOrMethods(fromIndex,fromSign,from,toIndex,toSign,to,allocations,states);
 			default: {
 				return intersectPrimitives(fromIndex,fromSign,from,toIndex,toSign,to,allocations,states);
@@ -2045,7 +2050,7 @@ private static int invert(int kind, boolean sign) {
 	 */
 	private static boolean flattenChildren(int index, Automaton.State state,
 			Automaton automaton) {
-		ArrayList<Integer> nchildren = new ArrayList<Integer>();
+		ArrayList<Integer> nchildren = new ArrayList<>();
 		int[] children = state.children;
 		final int kind = state.kind;
 
diff --git a/tests/invalid/Import_Invalid_1.whiley b/tests/invalid/Import_Invalid_1.whiley
index 18fc40df3e..16faa51339 100755
--- a/tests/invalid/Import_Invalid_1.whiley
+++ b/tests/invalid/Import_Invalid_1.whiley
@@ -2,7 +2,7 @@
 function f(int x) -> int[]:
     return toString(x)
 
-import toString from whiley.lang.Any
+import toString from std::ascii
 
 function g(any x) -> int[]:
     return toString(x)
diff --git a/tests/valid/ConstrainedList_Valid_28.whiley b/tests/valid/ConstrainedList_Valid_28.whiley
index 739b6f1762..a1687320f5 100755
--- a/tests/valid/ConstrainedList_Valid_28.whiley
+++ b/tests/valid/ConstrainedList_Valid_28.whiley
@@ -1,5 +1,3 @@
-import whiley.lang.System
-
 // A recursive implementation of the lastIndexOf algorithm
 function lastIndexOf(int[] items, int item, int index) -> (int r)
 // Index is within bounds or one past length
diff --git a/tests/valid/FunctionRef_Valid_12.whiley b/tests/valid/FunctionRef_Valid_12.whiley
index 55f9f6a422..1801e2cf89 100755
--- a/tests/valid/FunctionRef_Valid_12.whiley
+++ b/tests/valid/FunctionRef_Valid_12.whiley
@@ -1,4 +1,3 @@
-import whiley.lang.*
 type SizeGetter is function(Sized) -> int
 type Sized is { SizeGetter getSize }
 
diff --git a/tests/valid/FunctionRef_Valid_13.whiley b/tests/valid/FunctionRef_Valid_13.whiley
index 5cc1361b1e..e47ce25ceb 100755
--- a/tests/valid/FunctionRef_Valid_13.whiley
+++ b/tests/valid/FunctionRef_Valid_13.whiley
@@ -1,4 +1,3 @@
-import whiley.lang.*
 type Sized is { int value }
 type SizeGetter is function(Sized) -> int
 type SizeSetter is function(Sized,int) -> Sized
diff --git a/tests/valid/Switch_Valid_4.whiley b/tests/valid/Switch_Valid_4.whiley
index d480d149fb..d991a00011 100755
--- a/tests/valid/Switch_Valid_4.whiley
+++ b/tests/valid/Switch_Valid_4.whiley
@@ -12,7 +12,7 @@ function f(RGB c) -> int:
     switch c:
         case Red:
             return 123
-        case Switch_Valid_4.Blue:
+        case Switch_Valid_4::Blue:
             return 234
         default:
             return 456
