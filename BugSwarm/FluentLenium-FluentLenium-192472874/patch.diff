diff --git a/fluentlenium-core/src/main/java/org/fluentlenium/core/domain/FluentListImpl.java b/fluentlenium-core/src/main/java/org/fluentlenium/core/domain/FluentListImpl.java
index b29128ec8b..57ea224e0e 100755
--- a/fluentlenium-core/src/main/java/org/fluentlenium/core/domain/FluentListImpl.java
+++ b/fluentlenium-core/src/main/java/org/fluentlenium/core/domain/FluentListImpl.java
@@ -54,17 +54,10 @@
      * @param control        control interface
      * @param instantiator   component instantiator
      */
-    public FluentListImpl(Class<E> componentClass, List<E> list, FluentControl control,
-            ComponentInstantiator instantiator) {
+    public FluentListImpl(final Class<E> componentClass, final List<E> list, FluentControl control,
+            final ComponentInstantiator instantiator) {
         super(componentClass, list, control, instantiator);
-        hookControl = new HookControlImpl<>(this, proxy, control, instantiator, (Supplier<FluentList<E>>) () -> {
-            LocatorHandler locatorHandler = LocatorProxies.getLocatorHandler(proxy);
-            ElementLocator locator = locatorHandler.getLocator();
-            List<WebElement> webElementList = LocatorProxies.createWebElementList(locator);
-            return instantiator.asComponentList(this.getClass(), componentClass, webElementList);
-        });
-        label = new FluentLabelImpl<>(this, list::toString);
-        javascriptActions = new FluentJavascriptActionsImpl<>(this, this.control, new Supplier<FluentWebElement>() {
+        hookControl = new HookControlImpl<>(this, proxy, control, instantiator, new Supplier<FluentList<E>>() {
             @Override
             public FluentList<E> get() {
                 LocatorHandler locatorHandler = LocatorProxies.getLocatorHandler(proxy);
@@ -406,37 +399,65 @@ public FluentListConditions awaitUntilOne() {
 
     @Override
     public List<String> values() {
-        return stream().map(FluentWebElement::value).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.value();
+            }
+        });
     }
 
     @Override
     public List<String> ids() {
-        return stream().map(FluentWebElement::id).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.id();
+            }
+        });
     }
 
     @Override
     public List<String> attributes(final String attribute) {
-        return stream().map(webElement -> webElement.attribute(attribute)).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.attribute(attribute);
+            }
+        });
     }
 
     @Override
     public List<String> names() {
-        return stream().map(FluentWebElement::name).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.name();
+            }
+        });
     }
 
     @Override
     public List<String> tagNames() {
-        return stream().map(FluentWebElement::tagName).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.tagName();
+            }
+        });
     }
 
     @Override
     public List<String> textContents() {
-        return stream().map(FluentWebElement::textContent).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.textContent();
+            }
+        });
     }
 
     @Override
     public List<String> texts() {
-        return stream().map(FluentWebElement::text).collect(Collectors.toList());
+        return Lists.transform(this, new Function<E, String>() {
+            public String apply(E webElement) {
+                return webElement.text();
+            }
+        });
     }
 
     @Override
diff --git a/fluentlenium-core/src/main/java/org/fluentlenium/core/events/EventAdapter.java b/fluentlenium-core/src/main/java/org/fluentlenium/core/events/EventAdapter.java
index 40125be554..e9343092aa 100755
--- a/fluentlenium-core/src/main/java/org/fluentlenium/core/events/EventAdapter.java
+++ b/fluentlenium-core/src/main/java/org/fluentlenium/core/events/EventAdapter.java
@@ -70,14 +70,12 @@ public void afterNavigateRefresh(WebDriver driver) {
 
     @Override
     public void beforeFindBy(By by, WebElement element, WebDriver driver) {
-        listener
-                .beforeFindBy(by, element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
+        listener.beforeFindBy(by, element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
     }
 
     @Override
     public void afterFindBy(By by, WebElement element, WebDriver driver) {
-        listener
-                .afterFindBy(by, element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
+        listener.afterFindBy(by, element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
     }
 
     @Override
@@ -91,17 +89,13 @@ public void afterClickOn(WebElement element, WebDriver driver) {
     }
 
     @Override
-    public void beforeChangeValueOf(WebElement element, WebDriver driver, CharSequence[] charSequence) {
-        this.listener
-                .beforeChangeValueOf(element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver,
-                        charSequence);
+    public void beforeChangeValueOf(WebElement element, WebDriver driver) {
+        listener.beforeChangeValueOf(element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
     }
 
     @Override
-    public void afterChangeValueOf(WebElement element, WebDriver driver, CharSequence[] charSequence) {
-        this.listener
-                .afterChangeValueOf(element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver,
-                        charSequence);
+    public void afterChangeValueOf(WebElement element, WebDriver driver) {
+        listener.afterChangeValueOf(element == null ? null : instantiator.newComponent(FluentWebElement.class, element), driver);
     }
 
     @Override
diff --git a/fluentlenium-core/src/main/java/org/fluentlenium/core/search/Search.java b/fluentlenium-core/src/main/java/org/fluentlenium/core/search/Search.java
index d7b6adbc49..fe74132503 100755
--- a/fluentlenium-core/src/main/java/org/fluentlenium/core/search/Search.java
+++ b/fluentlenium-core/src/main/java/org/fluentlenium/core/search/Search.java
@@ -62,7 +62,7 @@ public Search(SearchContext context, Object container, ComponentInstantiator ins
             }
         }
         List<WebElement> select = selectList(stringBuilder.toString());
-        FluentList fluentList = instantiator.asFluentList(select);
+        final FluentList fluentList = instantiator.asFluentList(select);
         injectControl.injectComponent(fluentList, container, searchContext);
         if (postFilterSelector.isEmpty()) {
             return fluentList;
