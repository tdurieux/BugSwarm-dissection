-- Type checking of union types

[case testUnion1]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    elif isinstance(x, str):
        z = 'a'
        z = x
[builtins fixtures/isinstance.pyi]

[case testUnion2]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    else:
        z = 'a'
        z = x
[builtins fixtures/isinstance.pyi]

[case testUnion3]
from typing import Union
def f(x: Union[int, str]) -> None:
    if isinstance(x, int):
        y = 1
        y = x
    else:
        z = 2
        z = x # E: Incompatible types in assignment (expression has type "str", variable has type "int")
[builtins fixtures/isinstance.pyi]
[out]

[case testUnionAnyIsInstance]
from typing import Any, Union

def func(v: Union[int, Any]) -> None:
    if isinstance(v, int):
        reveal_type(v) # E: Revealed type is 'builtins.int'
    else:
        reveal_type(v) # E: Revealed type is 'Any'
[builtins fixtures/isinstance.pyi]
[out]

[case testUnionAttributeAccess]
from typing import Union

class A: y = 1
class B: y = 2
class C: pass

w = None # type: Union[A, B]
x = None # type: Union[A, C]
y = None # type: int
z = None # type: str

y = w.y
z = w.y       # E: Incompatible types in assignment (expression has type "int", variable has type "str")
w.y = 'a'     # E: Incompatible types in assignment (expression has type "str", variable has type "int")
y = x.y       # E: Some element of union has no attribute "y"
zz = x.y      # E: Some element of union has no attribute "y"
z = zz        # E: Incompatible types in assignment (expression has type "Union[int, Any]", variable has type "str")

[builtins fixtures/isinstance.pyi]

[case testUnionMethodCalls]
from typing import Union

class A:
    def foo(self) -> int: pass
class B:
    def foo(self) -> int: pass
class C:
    def foo(self) -> str: pass

x = None # type: Union[A, B]
y = None # type: Union[A, C]
i = None # type: int

x.foo()
y.foo()
i = x.foo()
i = y.foo()   # E: Incompatible types in assignment (expression has type "Union[int, str]", variable has type "int")

[builtins fixtures/isinstance.pyi]

[case testUnionIndexing]
from typing import Union, List
x = None # type: Union[List[int], str]
x[2]
x[2] + 1 # E: Unsupported operand types for + (likely involving Union)
[builtins fixtures/isinstancelist.pyi]

[case testUnionAsOverloadArg]
from foo import *
x = 0
x = f(1)
x = f('')
s = ''
s = f(int)
s = f(1)    # E: Incompatible types in assignment (expression has type "int", variable has type "str")
x = f(int)  # E: Incompatible types in assignment (expression has type "str", variable has type "int")

[file foo.pyi]
from typing import Union, overload
@overload
def f(x: Union[int, str]) -> int: pass
@overload
def f(x: type) -> str: pass

[case testUnionWithNoneItem]
from typing import Union
def f() -> Union[int, None]: pass
x = 1
x = f()

[case testOptional]
from typing import Optional
def f(x: Optional[int]) -> None: pass
f(1)
f(None)
f('') # E: Argument 1 to "f" has incompatible type "str"; expected "int"

[case testUnionSimplificationGenericFunction]
from typing import TypeVar, Union, List
T = TypeVar('T')
def f(x: List[T]) -> Union[T, int]: pass
def g(y: str) -> None: pass
a = f([1])
g(a) # E: Argument 1 to "g" has incompatible type "int"; expected "str"
[builtins fixtures/list.pyi]

[case testUnionSimplificationGenericClass]
from typing import TypeVar, Union, Generic
T = TypeVar('T')
U = TypeVar('U')
class C(Generic[T, U]):
    def f(self, x: str) -> Union[T, U]: pass
a = C() # type: C[int, int]
b = a.f('a')
a.f(b) # E: Argument 1 to "f" of "C" has incompatible type "int"; expected "str"

[case testUnionOrderEquivalence]
from typing import Union

def foo(): pass

S = str
T = int

if foo():
    def f(x: Union[int, str]) -> None: pass
elif foo():
    def f(x: Union[str, int]) -> None: pass
elif foo():
    def f(x: Union[int, str, int, int, str]) -> None: pass
elif foo():
    def f(x: Union[int, str, float]) -> None: pass  # E: All conditional function variants must have identical signatures
elif foo():
    def f(x: Union[S, T]) -> None: pass
elif foo():
    def f(x: Union[str]) -> None: pass  # E: All conditional function variants must have identical signatures
else:
    def f(x: Union[Union[int, T], Union[S, T], str]) -> None: pass

# Checks bidirectionality of testing. The first definition of g is consistent with
# the second, but not vice-versa.
if foo():
    def g(x: Union[int, str, bytes]) -> None: pass
else:
    def g(x: Union[int, str]) -> None: pass  # E: All conditional function variants must have identical signatures

[case testUnionSimplificationSpecialCases]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

a = None # type: Any

reveal_type(u(C(), None))  # E: Revealed type is '__main__.C*'
reveal_type(u(None, C()))  # E: Revealed type is '__main__.C*'

reveal_type(u(C(), a))  # E: Revealed type is 'Union[Any, __main__.C*]'
reveal_type(u(a, C()))  # E: Revealed type is 'Union[__main__.C*, Any]'

reveal_type(u(C(), C()))  # E: Revealed type is '__main__.C*'
reveal_type(u(a, a))  # E: Revealed type is 'Any'

[case testUnionSimplificationSpecialCase2]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

def f(x: T) -> None:
    reveal_type(u(C(), x)) # E: Revealed type is 'Union[T`-1, __main__.C*]'
    reveal_type(u(x, C())) # E: Revealed type is 'Union[__main__.C*, T`-1]'

[case testUnionSimplificationSpecialCase3]
from typing import Any, TypeVar, Generic, Union

class C(Any): pass

V = TypeVar('V')
T = TypeVar('T')

class M(Generic[V]):
    def get(self, default: T) -> Union[V, T]: ...

def f(x: M[C]) -> None:
    y = x.get(None)
    reveal_type(y) # E: Revealed type is '__main__.C'

[case testUnionSimplificationSpecialCases]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

a = None # type: Any

# Base-class-Any and None, simplify
reveal_type(u(C(), None))  # E: Revealed type is '__main__.C*'
reveal_type(u(None, C()))  # E: Revealed type is '__main__.C*'

# Normal instance type and None, simplify
reveal_type(u(1, None))  # E: Revealed type is 'builtins.int*'
reveal_type(u(None, 1))  # E: Revealed type is 'builtins.int*'

# Normal instance type and base-class-Any, no simplification
reveal_type(u(C(), 1))  # E: Revealed type is 'Union[builtins.int*, __main__.C*]'
reveal_type(u(1, C()))  # E: Revealed type is 'Union[__main__.C*, builtins.int*]'

# Normal instance type and Any, no simplification
reveal_type(u(1, a))  # E: Revealed type is 'Union[Any, builtins.int*]'
reveal_type(u(a, 1))  # E: Revealed type is 'Union[builtins.int*, Any]'

# Any and base-class-Any, no simplificaiton
reveal_type(u(C(), a))  # E: Revealed type is 'Union[Any, __main__.C*]'
reveal_type(u(a, C()))  # E: Revealed type is 'Union[__main__.C*, Any]'

# Two normal instance types, simplify
reveal_type(u(1, object()))  # E: Revealed type is 'builtins.object*'
reveal_type(u(object(), 1))  # E: Revealed type is 'builtins.object*'

# Two normal instance types, no simplification
reveal_type(u(1, ''))  # E: Revealed type is 'Union[builtins.str*, builtins.int*]'
reveal_type(u('', 1))  # E: Revealed type is 'Union[builtins.int*, builtins.str*]'

[case testUnionSimplificationWithDuplicateItems]
from typing import Any, TypeVar, Union

class C(Any): pass

T = TypeVar('T')
S = TypeVar('S')
R = TypeVar('R')
def u(x: T, y: S, z: R) -> Union[R, S, T]: pass

a = None # type: Any

reveal_type(u(1, 1, 1))  # E: Revealed type is 'builtins.int*'
reveal_type(u(C(), C(), None))  # E: Revealed type is '__main__.C*'
reveal_type(u(a, a, 1))  # E: Revealed type is 'Union[builtins.int*, Any]'
reveal_type(u(a, C(), a))  # E: Revealed type is 'Union[Any, __main__.C*]'
reveal_type(u('', 1, 1))  # E: Revealed type is 'Union[builtins.int*, builtins.str*]'

[case testUnionAndBinaryOperation]
from typing import Union
class A: pass
def f(x: Union[int, str, A]):
    x + object() # E: Unsupported left operand type for + (some union) \
        # E: Unsupported operand types for + (likely involving Union)

[case testNarrowingDownNamedTupleUnion]
from typing import NamedTuple, Union

A = NamedTuple('A', [('y', int)])
B = NamedTuple('B', [('x', int)])
C = NamedTuple('C', [('x', int)])

def foo(a: Union[A, B, C]):
    if isinstance(a, (B, C)):
        reveal_type(a) # E: Revealed type is 'Union[Tuple[builtins.int, fallback=__main__.B], Tuple[builtins.int, fallback=__main__.C]]'
        a.x
        a.y # E: Some element of union has no attribute "y"
        b = a # type: Union[B, C]
[builtins fixtures/isinstance.pyi]

[case testSimplifyingUnionAndTypePromotions]
from typing import TypeVar, Union
T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

reveal_type(u(1, 2.3))  # E: Revealed type is 'builtins.float*'
reveal_type(u(2.3, 1))  # E: Revealed type is 'builtins.float*'
reveal_type(u(False, 2.2)) # E: Revealed type is 'builtins.float*'
reveal_type(u(2.2, False)) # E: Revealed type is 'builtins.float*'
[builtins fixtures/primitives.pyi]

[case testSimplifyingUnionWithTypeTypes1]
from typing import TypeVar, Union, Type, Any

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

t_o = None  # type: Type[object]
t_s = None  # type: Type[str]
t_a = None  # type: Type[Any]

# Two identical items
reveal_type(u(t_o, t_o)) # E: Revealed type is 'Type[builtins.object]'
reveal_type(u(t_s, t_s)) # E: Revealed type is 'Type[builtins.str]'
reveal_type(u(t_a, t_a)) # E: Revealed type is 'Type[Any]'
reveal_type(u(type, type)) # E: Revealed type is 'def (x: Any) -> builtins.type'

# One type, other non-type
reveal_type(u(t_s, 1)) # E: Revealed type is 'Union[builtins.int*, Type[builtins.str]]'
reveal_type(u(1, t_s)) # E: Revealed type is 'Union[Type[builtins.str], builtins.int*]'
reveal_type(u(type, 1)) # E: Revealed type is 'Union[builtins.int*, def (x: Any) -> builtins.type]'
reveal_type(u(1, type)) # E: Revealed type is 'Union[def (x: Any) -> builtins.type, builtins.int*]'
reveal_type(u(t_a, 1)) # E: Revealed type is 'Union[builtins.int*, Type[Any]]'
reveal_type(u(1, t_a)) # E: Revealed type is 'Union[Type[Any], builtins.int*]'
reveal_type(u(t_o, 1)) # E: Revealed type is 'Union[builtins.int*, Type[builtins.object]]'
reveal_type(u(1, t_o)) # E: Revealed type is 'Union[Type[builtins.object], builtins.int*]'

[case testSimplifyingUnionWithTypeTypes2]
from typing import TypeVar, Union, Type, Any

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

t_o = None  # type: Type[object]
t_s = None  # type: Type[str]
t_a = None  # type: Type[Any]
t = None    # type: type

# Union with object
reveal_type(u(t_o, object())) # E: Revealed type is 'builtins.object*'
reveal_type(u(object(), t_o)) # E: Revealed type is 'builtins.object*'
reveal_type(u(t_s, object())) # E: Revealed type is 'builtins.object*'
reveal_type(u(object(), t_s)) # E: Revealed type is 'builtins.object*'
reveal_type(u(t_a, object())) # E: Revealed type is 'builtins.object*'
reveal_type(u(object(), t_a)) # E: Revealed type is 'builtins.object*'

# Union between type objects
reveal_type(u(t_o, t_a)) # E: Revealed type is 'Union[Type[Any], Type[builtins.object]]'
reveal_type(u(t_a, t_o)) # E: Revealed type is 'Union[Type[builtins.object], Type[Any]]'
reveal_type(u(t_s, t_o)) # E: Revealed type is 'Type[builtins.object]'
reveal_type(u(t_o, t_s)) # E: Revealed type is 'Type[builtins.object]'
reveal_type(u(t_o, type)) # E: Revealed type is 'Type[builtins.object]'
reveal_type(u(type, t_o)) # E: Revealed type is 'Type[builtins.object]'
reveal_type(u(t_a, t)) # E: Revealed type is 'builtins.type*'
reveal_type(u(t, t_a)) # E: Revealed type is 'builtins.type*'
# The following should arguably not be simplified, but it's unclear how to fix then
# without causing regressions elsewhere.
reveal_type(u(t_o, t)) # E: Revealed type is 'builtins.type*'
reveal_type(u(t, t_o)) # E: Revealed type is 'builtins.type*'

[case testNotSimplifyingUnionWithMetaclass]
from typing import TypeVar, Union, Type, Any

class M(type): pass
class M2(M): pass
class A(metaclass=M): pass

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

a: Any
t_a: Type[A]

reveal_type(u(M(*a), t_a)) # E: Revealed type is 'Union[Type[__main__.A], __main__.M*]'
reveal_type(u(t_a, M(*a))) # E: Revealed type is 'Union[__main__.M*, Type[__main__.A]]'

reveal_type(u(M2(*a), t_a)) # E: Revealed type is 'Union[Type[__main__.A], __main__.M2*]'
reveal_type(u(t_a, M2(*a))) # E: Revealed type is 'Union[__main__.M2*, Type[__main__.A]]'

[case testSimplifyUnionWithCallable]
from typing import TypeVar, Union, Any, Callable

T = TypeVar('T')
S = TypeVar('S')
def u(x: T, y: S) -> Union[S, T]: pass

class C: pass
class D(C): pass

D_C: Callable[[D], C]
A_C: Callable[[Any], C]
D_A: Callable[[D], Any]
C_C: Callable[[C], C]
D_D: Callable[[D], D]
i_C: Callable[[int], C]

# TODO: Test argument names and kinds once we have flexible callable types.

reveal_type(u(D_C, D_C)) # E: Revealed type is 'def (__main__.D) -> __main__.C'

reveal_type(u(A_C, D_C)) # E: Revealed type is 'Union[def (__main__.D) -> __main__.C, def (Any) -> __main__.C]'
reveal_type(u(D_C, A_C)) # E: Revealed type is 'Union[def (Any) -> __main__.C, def (__main__.D) -> __main__.C]'

reveal_type(u(D_A, D_C)) # E: Revealed type is 'Union[def (__main__.D) -> __main__.C, def (__main__.D) -> Any]'
reveal_type(u(D_C, D_A)) # E: Revealed type is 'Union[def (__main__.D) -> Any, def (__main__.D) -> __main__.C]'

reveal_type(u(D_C, C_C)) # E: Revealed type is 'def (__main__.D) -> __main__.C'
reveal_type(u(C_C, D_C)) # E: Revealed type is 'def (__main__.D) -> __main__.C'

reveal_type(u(D_C, D_D)) # E: Revealed type is 'def (__main__.D) -> __main__.C'
reveal_type(u(D_D, D_C)) # E: Revealed type is 'def (__main__.D) -> __main__.C'

reveal_type(u(D_C, i_C)) # E: Revealed type is 'Union[def (builtins.int) -> __main__.C, def (__main__.D) -> __main__.C]'

[case testUnionOperatorMethodSpecialCase]
from typing import Union
class C:
    def __le__(self, x: 'C') -> int: ...
class D:
    def __le__(self, other) -> int: ...
class E:
    def __ge__(self, other: Union[C, D]) -> int: ...

[case testUnionSimplificationWithBoolIntAndFloat]
from typing import List, Union
l = reveal_type([]) # type: List[Union[bool, int, float]] \
    # E: Revealed type is 'builtins.list[builtins.float]'
reveal_type(l) \
    # E: Revealed type is 'builtins.list[Union[builtins.bool, builtins.int, builtins.float]]'
[builtins fixtures/list.pyi]

[case testUnionSimplificationWithBoolIntAndFloat2]
from typing import List, Union
l = reveal_type([]) # type: List[Union[bool, int, float, str]] \
    # E: Revealed type is 'builtins.list[Union[builtins.float, builtins.str]]'
reveal_type(l) \
    # E: Revealed type is 'builtins.list[Union[builtins.bool, builtins.int, builtins.float, builtins.str]]'
[builtins fixtures/list.pyi]

[case testAssignAnyToUnion]
from typing import Union, Any
x: Union[int, str]
a: Any
if bool():
    x = a
    # TODO: Maybe we should infer Any as the type instead.
    reveal_type(x)  # E: Revealed type is 'Union[builtins.int, builtins.str]'
reveal_type(x)  # E: Revealed type is 'Union[builtins.int, builtins.str]'
[builtins fixtures/bool.pyi]

[case testAssignAnyToUnionWithAny]
from typing import Union, Any
x: Union[int, Any]
a: Any
if bool():
    x = a
    reveal_type(x)  # E: Revealed type is 'Any'
reveal_type(x)  # E: Revealed type is 'Union[builtins.int, Any]'
[builtins fixtures/bool.pyi]
