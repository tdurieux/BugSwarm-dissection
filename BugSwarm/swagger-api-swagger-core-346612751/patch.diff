diff --git a/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java b/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java
index a618ee9cfb..ef0ddccef2 100755
--- a/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java
+++ b/modules/swagger-annotations/src/main/java/io/swagger/annotations/ApiOperation.java
@@ -27,7 +27,7 @@
  * Operations with equivalent paths are grouped in a single Operation Object.
  * A combination of a HTTP method and a path creates a unique operation.
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ApiOperation {
     /**
diff --git a/modules/swagger-core/src/test/java/io/swagger/YamlSerializationTest.java b/modules/swagger-core/src/test/java/io/swagger/YamlSerializationTest.java
new file mode 100755
index 0000000000..d17923e617
--- /dev/null
+++ b/modules/swagger-core/src/test/java/io/swagger/YamlSerializationTest.java
@@ -0,0 +1,124 @@
+package io.swagger;
+
+import static org.testng.Assert.assertTrue;
+import static org.testng.AssertJUnit.assertFalse;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import io.swagger.converter.ModelConverters;
+import io.swagger.models.Contact;
+import io.swagger.models.Error;
+import io.swagger.models.Info;
+import io.swagger.models.Model;
+import io.swagger.models.Operation;
+import io.swagger.models.Path;
+import io.swagger.models.Person;
+import io.swagger.models.RefModel;
+import io.swagger.models.Response;
+import io.swagger.models.Scheme;
+import io.swagger.models.Swagger;
+import io.swagger.models.auth.ApiKeyAuthDefinition;
+import io.swagger.models.auth.In;
+import io.swagger.models.parameters.BodyParameter;
+import io.swagger.models.parameters.PathParameter;
+import io.swagger.models.parameters.QueryParameter;
+import io.swagger.models.properties.LongProperty;
+import io.swagger.models.properties.RefProperty;
+import io.swagger.models.properties.StringProperty;
+import io.swagger.util.Yaml;
+import java.util.HashMap;
+import java.util.Map;
+import org.testng.annotations.Test;
+
+/**
+ * Currently, this act as a proof of the shortcoming of the snakeyaml, which cannot persist key longer than 127 well.
+ * Once that was enhanced, the test should pass.
+ *
+ * https://bitbucket.org/asomov/snakeyaml/issues/399/is-there-any-reason-why-checksimplekey-has
+ */
+public class YamlSerializationTest {
+
+  @Test(description = "it should fail to save the key longer than 127, so please do NOT go too deep into the packages!", enabled = false)
+  public void saveLongKey() throws JsonProcessingException {
+    String clazzName = "io.swagger.YamlSerializationTest.Abcdefg.Hijklmn.Opqrst.Uvwxyz.Abcdefg1.Hijklmn1.Opqrst1.Uvwxyz1.Abcdefg2.Hijklmn2.Opqrst2.Uvwxz";
+    final Model personModel = ModelConverters.getInstance().read(Person.class).get(
+        Person.class.getName());
+    final Model errorModel = ModelConverters.getInstance().read(Error.class).get(Error.class.getName());
+    final Info info = new Info()
+        .version("1.0.0")
+        .title("Swagger Petstore");
+
+    final Contact contact = new Contact()
+        .name("Swagger API Team")
+        .email("foo@bar.baz")
+        .url("http://swagger.io");
+
+    info.setContact(contact);
+
+    final Map<String, Object> map = new HashMap<String, Object>();
+    map.put("name", "value");
+    info.setVendorExtension("x-test2", map);
+    info.setVendorExtension("x-test", "value");
+
+    final Swagger swagger = new Swagger()
+        .info(info)
+        .host("petstore.swagger.io")
+        .securityDefinition("api-key", new ApiKeyAuthDefinition("key", In.HEADER))
+        .scheme(Scheme.HTTP)
+        .consumes("application/json")
+        .produces("application/json")
+        .model(clazzName, personModel)
+        .model(Error.class.getName(), errorModel);
+
+    final Operation get = new Operation()
+        .produces("application/json")
+        .summary("finds pets in the system")
+        .description("a longer description")
+        .tag("Pet Operations")
+        .operationId("get pet by id")
+        .deprecated(true);
+
+    get.parameter(new QueryParameter()
+        .name("tags")
+        .description("tags to filter by")
+        .required(false)
+        .property(new StringProperty())
+    );
+
+    get.parameter(new PathParameter()
+        .name("petId")
+        .description("pet to fetch")
+        .property(new LongProperty())
+    );
+
+    final Response response = new Response()
+        .description("pets returned")
+        .schema(new RefProperty().asDefault(clazzName))
+        .example("application/json", "fun!");
+
+    final Response errorResponse = new Response()
+        .description("error response")
+        .schema(new RefProperty().asDefault(Error.class.getName()));
+
+    get.response(200, response)
+        .defaultResponse(errorResponse);
+
+    final Operation post = new Operation()
+        .summary("adds a new pet")
+        .description("you can add a new pet this way")
+        .tag("Pet Operations")
+        .operationId("add pet")
+        .defaultResponse(errorResponse)
+        .parameter(new BodyParameter()
+            .description("the pet to add")
+            .schema(new RefModel().asDefault(clazzName)));
+
+    swagger.path("/pets/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz", new Path().get(get).post(post));
+
+    ObjectMapper mapper =  Yaml.mapper();
+    byte[] str =mapper.writeValueAsBytes(swagger);
+    assertTrue(new String(str).contains("/pets/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz/abcdefghijklmnopqrstuvwxyz:"));
+    assertTrue(new String(str).contains("io.swagger.YamlSerializationTest.Abcdefg.Hijklmn.Opqrst.Uvwxyz.Abcdefg1.Hijklmn1.Opqrst1.Uvwxyz1.Abcdefg2.Hijklmn2.Opqrst2.Uvwxz:"));
+    assertFalse(new String(str).contains(": type: \"object\""));
+  }
+}
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/AllowUsingApiOperationOnTypeTest.java b/modules/swagger-jaxrs/src/test/java/io/swagger/AllowUsingApiOperationOnTypeTest.java
new file mode 100755
index 0000000000..407aa8c712
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/AllowUsingApiOperationOnTypeTest.java
@@ -0,0 +1,29 @@
+package io.swagger;
+
+import io.swagger.jaxrs.Reader;
+import io.swagger.models.Path;
+import io.swagger.models.Swagger;
+import io.swagger.resources.ApiOperationResource;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+public class AllowUsingApiOperationOnTypeTest {
+
+    private static final String USERS_PATH = "/users";
+    private static final String TEST_DESCRIPTION = "Test Uber Description";
+    private static final String META_DATA__DESCRIPTION = "Meta DataUber Description";
+
+    @Test
+    public void testThatApiOperationMightBeInType() {
+        final Swagger swagger = getSwagger(ApiOperationResource.class);
+        final Path usersPath = swagger.getPaths().get(USERS_PATH);
+        Assert.assertNotNull(usersPath);
+        Assert.assertEquals(TEST_DESCRIPTION, usersPath.getGet().getDescription());
+        Assert.assertEquals(META_DATA__DESCRIPTION, usersPath.getGet().getSummary());
+    }
+
+    private Swagger getSwagger(final Class<?> cls) {
+        return new Reader(new Swagger()).read(cls);
+    }
+
+}
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/ApiListingResourceIT.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/ApiListingResourceIT.java
index 2550a06128..c6135bec18 100755
--- a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/ApiListingResourceIT.java
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/ApiListingResourceIT.java
@@ -10,6 +10,7 @@
 
 import java.io.IOException;
 
+import javax.ws.rs.core.MediaType;
 import org.testng.SkipException;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -24,409 +25,409 @@
 public class ApiListingResourceIT {
 
     private static final String EXPECTED_JSON = "{\n"
-            + "  \"definitions\" : {\n"
-            + "    \"Car\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"color\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"manufacture\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"model\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"price\" : {\n"
-            + "          \"format\" : \"int32\",\n"
-            + "          \"type\" : \"integer\"\n"
-            + "        },\n"
-            + "        \"tires\" : {\n"
-            + "          \"items\" : {\n"
-            + "            \"$ref\" : \"#/definitions/Tire\"\n"
-            + "          },\n"
-            + "          \"type\" : \"array\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Car_Detail\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"color\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"manufacture\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"model\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"tires\" : {\n"
-            + "          \"items\" : {\n"
-            + "            \"$ref\" : \"#/definitions/Tire_Detail\"\n"
-            + "          },\n"
-            + "          \"type\" : \"array\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Car_Summary\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"color\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"manufacture\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"model\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Car_Summary-or-Sale\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"color\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"manufacture\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"model\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"price\" : {\n"
-            + "          \"format\" : \"int32\",\n"
-            + "          \"type\" : \"integer\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Tire\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"brand\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"condition\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Tire_Detail\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"brand\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"condition\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    },\n"
-            + "    \"Widget\" : {\n"
-            + "      \"properties\" : {\n"
-            + "        \"a\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"b\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        },\n"
-            + "        \"id\" : {\n"
-            + "          \"type\" : \"string\"\n"
-            + "        }\n"
-            + "      },\n"
-            + "      \"type\" : \"object\"\n"
-            + "    }\n"
-            + "  },\n"
-            + "  \"paths\" : {\n"
-            + "    \"/cars/all\" : {\n"
-            + "      \"get\" : {\n"
-            + "        \"consumes\" : [ \"application/json\" ],\n"
-            + "        \"description\" : \"\",\n"
-            + "        \"operationId\" : \"getAll\",\n"
-            + "        \"parameters\" : [ ],\n"
-            + "        \"produces\" : [ \"application/json\" ],\n"
-            + "        \"responses\" : {\n"
-            + "          \"200\" : {\n"
-            + "            \"description\" : \"Return whole car\",\n"
-            + "            \"schema\" : {\n"
-            + "              \"items\" : {\n"
-            + "                \"$ref\" : \"#/definitions/Car\"\n"
-            + "              },\n"
-            + "              \"type\" : \"array\"\n"
-            + "            }\n"
-            + "          }\n"
-            + "        },\n"
-            + "        \"summary\" : \"Return whole car\",\n"
-            + "        \"tags\" : [ \"cars\" ]\n"
-            + "      }\n"
-            + "    },\n"
-            + "    \"/cars/detail\" : {\n"
-            + "      \"get\" : {\n"
-            + "        \"consumes\" : [ \"application/json\" ],\n"
-            + "        \"description\" : \"\",\n"
-            + "        \"operationId\" : \"getDetails\",\n"
-            + "        \"parameters\" : [ ],\n"
-            + "        \"produces\" : [ \"application/json\" ],\n"
-            + "        \"responses\" : {\n"
-            + "          \"200\" : {\n"
-            + "            \"description\" : \"Return car detail\",\n"
-            + "            \"schema\" : {\n"
-            + "              \"items\" : {\n"
-            + "                \"$ref\" : \"#/definitions/Car_Detail\"\n"
-            + "              },\n"
-            + "              \"type\" : \"array\"\n"
-            + "            }\n"
-            + "          }\n"
-            + "        },\n"
-            + "        \"summary\" : \"Return car detail\",\n"
-            + "        \"tags\" : [ \"cars\" ]\n"
-            + "      }\n"
-            + "    },\n"
-            + "    \"/cars/sale\" : {\n"
-            + "      \"get\" : {\n"
-            + "        \"consumes\" : [ \"application/json\" ],\n"
-            + "        \"description\" : \"\",\n"
-            + "        \"operationId\" : \"getSaleSummaries\",\n"
-            + "        \"parameters\" : [ ],\n"
-            + "        \"produces\" : [ \"application/json\" ],\n"
-            + "        \"responses\" : {\n"
-            + "          \"200\" : {\n"
-            + "            \"description\" : \"successful operation\",\n"
-            + "            \"schema\" : {\n"
-            + "              \"items\" : {\n"
-            + "                \"$ref\" : \"#/definitions/Car_Summary-or-Sale\"\n"
-            + "              },\n"
-            + "              \"type\" : \"array\"\n"
-            + "            }\n"
-            + "          }\n"
-            + "        },\n"
-            + "        \"summary\" : \"Return car sale summary\",\n"
-            + "        \"tags\" : [ \"cars\" ]\n"
-            + "      }\n"
-            + "    },\n"
-            + "    \"/cars/summary\" : {\n"
-            + "      \"get\" : {\n"
-            + "        \"consumes\" : [ \"List\" ],\n"
-            + "        \"description\" : \"\",\n"
-            + "        \"operationId\" : \"getSummaries\",\n"
-            + "        \"parameters\" : [ ],\n"
-            + "        \"produces\" : [ \"application/json\" ],\n"
-            + "        \"responses\" : {\n"
-            + "          \"200\" : {\n"
-            + "            \"description\" : \"successful operation\",\n"
-            + "            \"schema\" : {\n"
-            + "              \"$ref\" : \"#/definitions/Car_Summary\"\n"
-            + "            }\n"
-            + "          }\n"
-            + "        },\n"
-            + "        \"summary\" : \"Return car summaries\",\n"
-            + "        \"tags\" : [ \"cars\" ]\n"
-            + "      }\n"
-            + "    },\n"
-            + "    \"/widgets/{widgetId}\" : {\n"
-            + "      \"get\" : {\n"
-            + "        \"consumes\" : [ \"application/json\" ],\n"
-            + "        \"description\" : \"Returns a pet when ID <= 10.  ID > 10 or nonintegers will simulate API error conditions\",\n"
-            + "        \"operationId\" : \"getWidget\",\n"
-            + "        \"parameters\" : [ {\n"
-            + "          \"in\" : \"path\",\n"
-            + "          \"name\" : \"widgetId\",\n"
-            + "          \"required\" : true,\n"
-            + "          \"type\" : \"string\"\n"
-            + "        } ],\n"
-            + "        \"produces\" : [ \"application/json\" ],\n"
-            + "        \"responses\" : {\n"
-            + "          \"200\" : {\n"
-            + "            \"description\" : \"Returns widget with matching id\"\n"
-            + "          }\n"
-            + "        },\n"
-            + "        \"summary\" : \"Find pet by ID\",\n"
-            + "        \"tags\" : [ \"widgets\" ]\n"
-            + "      }\n"
-            + "    }\n"
-            + "  },\n"
-            + "  \"swagger\" : \"2.0\",\n"
-            + "  \"tags\" : [ {\n"
-            + "    \"name\" : \"cars\"\n"
-            + "  }, {\n"
-            + "    \"name\" : \"widgets\"\n"
-            + "  } ]\n"
-            + "}";
+        + "  \"definitions\" : {\n"
+        + "    \"io.swagger.functional.test.model.Car\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"color\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"manufacture\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"model\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"price\" : {\n"
+        + "          \"format\" : \"int32\",\n"
+        + "          \"type\" : \"integer\"\n"
+        + "        },\n"
+        + "        \"tires\" : {\n"
+        + "          \"items\" : {\n"
+        + "            \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Tire\"\n"
+        + "          },\n"
+        + "          \"type\" : \"array\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Detail\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"color\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"manufacture\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"model\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"tires\" : {\n"
+        + "          \"items\" : {\n"
+        + "            \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Tire_io.swagger.functional.test.view.Detail\"\n"
+        + "          },\n"
+        + "          \"type\" : \"array\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"color\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"manufacture\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"model\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary-or-io.swagger.functional.test.view.Sale\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"color\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"manufacture\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"model\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"price\" : {\n"
+        + "          \"format\" : \"int32\",\n"
+        + "          \"type\" : \"integer\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Tire\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"brand\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"condition\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Tire_io.swagger.functional.test.view.Detail\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"brand\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"condition\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    },\n"
+        + "    \"io.swagger.functional.test.model.Widget\" : {\n"
+        + "      \"properties\" : {\n"
+        + "        \"a\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"b\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        },\n"
+        + "        \"id\" : {\n"
+        + "          \"type\" : \"string\"\n"
+        + "        }\n"
+        + "      },\n"
+        + "      \"type\" : \"object\"\n"
+        + "    }\n"
+        + "  },\n"
+        + "  \"paths\" : {\n"
+        + "    \"/cars/all\" : {\n"
+        + "      \"get\" : {\n"
+        + "        \"consumes\" : [ \"application/json\" ],\n"
+        + "        \"description\" : \"\",\n"
+        + "        \"operationId\" : \"getAll\",\n"
+        + "        \"parameters\" : [ ],\n"
+        + "        \"produces\" : [ \"application/json\" ],\n"
+        + "        \"responses\" : {\n"
+        + "          \"200\" : {\n"
+        + "            \"description\" : \"Return whole car\",\n"
+        + "            \"schema\" : {\n"
+        + "              \"items\" : {\n"
+        + "                \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Car\"\n"
+        + "              },\n"
+        + "              \"type\" : \"array\"\n"
+        + "            }\n"
+        + "          }\n"
+        + "        },\n"
+        + "        \"summary\" : \"Return whole car\",\n"
+        + "        \"tags\" : [ \"cars\" ]\n"
+        + "      }\n"
+        + "    },\n"
+        + "    \"/cars/detail\" : {\n"
+        + "      \"get\" : {\n"
+        + "        \"consumes\" : [ \"application/json\" ],\n"
+        + "        \"description\" : \"\",\n"
+        + "        \"operationId\" : \"getDetails\",\n"
+        + "        \"parameters\" : [ ],\n"
+        + "        \"produces\" : [ \"application/json\" ],\n"
+        + "        \"responses\" : {\n"
+        + "          \"200\" : {\n"
+        + "            \"description\" : \"Return car detail\",\n"
+        + "            \"schema\" : {\n"
+        + "              \"items\" : {\n"
+        + "                \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Detail\"\n"
+        + "              },\n"
+        + "              \"type\" : \"array\"\n"
+        + "            }\n"
+        + "          }\n"
+        + "        },\n"
+        + "        \"summary\" : \"Return car detail\",\n"
+        + "        \"tags\" : [ \"cars\" ]\n"
+        + "      }\n"
+        + "    },\n"
+        + "    \"/cars/sale\" : {\n"
+        + "      \"get\" : {\n"
+        + "        \"consumes\" : [ \"application/json\" ],\n"
+        + "        \"description\" : \"\",\n"
+        + "        \"operationId\" : \"getSaleSummaries\",\n"
+        + "        \"parameters\" : [ ],\n"
+        + "        \"produces\" : [ \"application/json\" ],\n"
+        + "        \"responses\" : {\n"
+        + "          \"200\" : {\n"
+        + "            \"description\" : \"successful operation\",\n"
+        + "            \"schema\" : {\n"
+        + "              \"items\" : {\n"
+        + "                \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary-or-io.swagger.functional.test.view.Sale\"\n"
+        + "              },\n"
+        + "              \"type\" : \"array\"\n"
+        + "            }\n"
+        + "          }\n"
+        + "        },\n"
+        + "        \"summary\" : \"Return car sale summary\",\n"
+        + "        \"tags\" : [ \"cars\" ]\n"
+        + "      }\n"
+        + "    },\n"
+        + "    \"/cars/summary\" : {\n"
+        + "      \"get\" : {\n"
+        + "        \"consumes\" : [ \"List\" ],\n"
+        + "        \"description\" : \"\",\n"
+        + "        \"operationId\" : \"getSummaries\",\n"
+        + "        \"parameters\" : [ ],\n"
+        + "        \"produces\" : [ \"application/json\" ],\n"
+        + "        \"responses\" : {\n"
+        + "          \"200\" : {\n"
+        + "            \"description\" : \"successful operation\",\n"
+        + "            \"schema\" : {\n"
+        + "              \"$ref\" : \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary\"\n"
+        + "            }\n"
+        + "          }\n"
+        + "        },\n"
+        + "        \"summary\" : \"Return car summaries\",\n"
+        + "        \"tags\" : [ \"cars\" ]\n"
+        + "      }\n"
+        + "    },\n"
+        + "    \"/widgets/{widgetId}\" : {\n"
+        + "      \"get\" : {\n"
+        + "        \"consumes\" : [ \"application/json\" ],\n"
+        + "        \"description\" : \"Returns a pet when ID <= 10.  ID > 10 or nonintegers will simulate API error conditions\",\n"
+        + "        \"operationId\" : \"getWidget\",\n"
+        + "        \"parameters\" : [ {\n"
+        + "          \"in\" : \"path\",\n"
+        + "          \"name\" : \"widgetId\",\n"
+        + "          \"required\" : true,\n"
+        + "          \"type\" : \"string\"\n"
+        + "        } ],\n"
+        + "        \"produces\" : [ \"application/json\" ],\n"
+        + "        \"responses\" : {\n"
+        + "          \"200\" : {\n"
+        + "            \"description\" : \"Returns widget with matching id\"\n"
+        + "          }\n"
+        + "        },\n"
+        + "        \"summary\" : \"Find pet by ID\",\n"
+        + "        \"tags\" : [ \"widgets\" ]\n"
+        + "      }\n"
+        + "    }\n"
+        + "  },\n"
+        + "  \"swagger\" : \"2.0\",\n"
+        + "  \"tags\" : [ {\n"
+        + "    \"name\" : \"cars\"\n"
+        + "  }, {\n"
+        + "    \"name\" : \"widgets\"\n"
+        + "  } ]\n"
+        + "}";
     private static final String EXPECTED_YAML = "---\n"
-            + "definitions:\n"
-            + "  Car:\n"
-            + "    properties:\n"
-            + "      color:\n"
-            + "        type: \"string\"\n"
-            + "      manufacture:\n"
-            + "        type: \"string\"\n"
-            + "      model:\n"
-            + "        type: \"string\"\n"
-            + "      price:\n"
-            + "        format: \"int32\"\n"
-            + "        type: \"integer\"\n"
-            + "      tires:\n"
-            + "        items:\n"
-            + "          $ref: \"#/definitions/Tire\"\n"
-            + "        type: \"array\"\n"
-            + "    type: \"object\"\n"
-            + "  Car_Detail:\n"
-            + "    properties:\n"
-            + "      color:\n"
-            + "        type: \"string\"\n"
-            + "      manufacture:\n"
-            + "        type: \"string\"\n"
-            + "      model:\n"
-            + "        type: \"string\"\n"
-            + "      tires:\n"
-            + "        items:\n"
-            + "          $ref: \"#/definitions/Tire_Detail\"\n"
-            + "        type: \"array\"\n"
-            + "    type: \"object\"\n"
-            + "  Car_Summary:\n"
-            + "    properties:\n"
-            + "      color:\n"
-            + "        type: \"string\"\n"
-            + "      manufacture:\n"
-            + "        type: \"string\"\n"
-            + "      model:\n"
-            + "        type: \"string\"\n"
-            + "    type: \"object\"\n"
-            + "  Car_Summary-or-Sale:\n"
-            + "    properties:\n"
-            + "      color:\n"
-            + "        type: \"string\"\n"
-            + "      manufacture:\n"
-            + "        type: \"string\"\n"
-            + "      model:\n"
-            + "        type: \"string\"\n"
-            + "      price:\n"
-            + "        format: \"int32\"\n"
-            + "        type: \"integer\"\n"
-            + "    type: \"object\"\n"
-            + "  Tire:\n"
-            + "    properties:\n"
-            + "      brand:\n"
-            + "        type: \"string\"\n"
-            + "      condition:\n"
-            + "        type: \"string\"\n"
-            + "    type: \"object\"\n"
-            + "  Tire_Detail:\n"
-            + "    properties:\n"
-            + "      brand:\n"
-            + "        type: \"string\"\n"
-            + "      condition:\n"
-            + "        type: \"string\"\n"
-            + "    type: \"object\"\n"
-            + "  Widget:\n"
-            + "    properties:\n"
-            + "      a:\n"
-            + "        type: \"string\"\n"
-            + "      b:\n"
-            + "        type: \"string\"\n"
-            + "      id:\n"
-            + "        type: \"string\"\n"
-            + "    type: \"object\"\n"
-            + "paths:\n"
-            + "  /cars/all:\n"
-            + "    get:\n"
-            + "      consumes:\n"
-            + "      - \"application/json\"\n"
-            + "      description: \"\"\n"
-            + "      operationId: \"getAll\"\n"
-            + "      parameters: []\n"
-            + "      produces:\n"
-            + "      - \"application/json\"\n"
-            + "      responses:\n"
-            + "        200:\n"
-            + "          description: \"Return whole car\"\n"
-            + "          schema:\n"
-            + "            items:\n"
-            + "              $ref: \"#/definitions/Car\"\n"
-            + "            type: \"array\"\n"
-            + "      summary: \"Return whole car\"\n"
-            + "      tags:\n"
-            + "      - \"cars\"\n"
-            + "  /cars/detail:\n"
-            + "    get:\n"
-            + "      consumes:\n"
-            + "      - \"application/json\"\n"
-            + "      description: \"\"\n"
-            + "      operationId: \"getDetails\"\n"
-            + "      parameters: []\n"
-            + "      produces:\n"
-            + "      - \"application/json\"\n"
-            + "      responses:\n"
-            + "        200:\n"
-            + "          description: \"Return car detail\"\n"
-            + "          schema:\n"
-            + "            items:\n"
-            + "              $ref: \"#/definitions/Car_Detail\"\n"
-            + "            type: \"array\"\n"
-            + "      summary: \"Return car detail\"\n"
-            + "      tags:\n"
-            + "      - \"cars\"\n"
-            + "  /cars/sale:\n"
-            + "    get:\n"
-            + "      consumes:\n"
-            + "      - \"application/json\"\n"
-            + "      description: \"\"\n"
-            + "      operationId: \"getSaleSummaries\"\n"
-            + "      parameters: []\n"
-            + "      produces:\n"
-            + "      - \"application/json\"\n"
-            + "      responses:\n"
-            + "        200:\n"
-            + "          description: \"successful operation\"\n"
-            + "          schema:\n"
-            + "            items:\n"
-            + "              $ref: \"#/definitions/Car_Summary-or-Sale\"\n"
-            + "            type: \"array\"\n"
-            + "      summary: \"Return car sale summary\"\n"
-            + "      tags:\n"
-            + "      - \"cars\"\n"
-            + "  /cars/summary:\n"
-            + "    get:\n"
-            + "      consumes:\n"
-            + "      - \"List\"\n"
-            + "      description: \"\"\n"
-            + "      operationId: \"getSummaries\"\n"
-            + "      parameters: []\n"
-            + "      produces:\n"
-            + "      - \"application/json\"\n"
-            + "      responses:\n"
-            + "        200:\n"
-            + "          description: \"successful operation\"\n"
-            + "          schema:\n"
-            + "            $ref: \"#/definitions/Car_Summary\"\n"
-            + "      summary: \"Return car summaries\"\n"
-            + "      tags:\n"
-            + "      - \"cars\"\n"
-            + "  /widgets/{widgetId}:\n"
-            + "    get:\n"
-            + "      consumes:\n"
-            + "      - \"application/json\"\n"
-            + "      description: \"Returns a pet when ID <= 10.  ID > 10 or nonintegers will simulate\\\n"
-            + "        \\ API error conditions\"\n"
-            + "      operationId: \"getWidget\"\n"
-            + "      parameters:\n"
-            + "      - in: \"path\"\n"
-            + "        name: \"widgetId\"\n"
-            + "        required: true\n"
-            + "        type: \"string\"\n"
-            + "      produces:\n"
-            + "      - \"application/json\"\n"
-            + "      responses:\n"
-            + "        200:\n"
-            + "          description: \"Returns widget with matching id\"\n"
-            + "      summary: \"Find pet by ID\"\n"
-            + "      tags:\n"
-            + "      - \"widgets\"\n"
-            + "swagger: \"2.0\"\n"
-            + "tags:\n"
-            + "- name: \"cars\"\n"
-            + "- name: \"widgets\"\n";
+        + "definitions:\n"
+        + "  io.swagger.functional.test.model.Car:\n"
+        + "    properties:\n"
+        + "      color:\n"
+        + "        type: \"string\"\n"
+        + "      manufacture:\n"
+        + "        type: \"string\"\n"
+        + "      model:\n"
+        + "        type: \"string\"\n"
+        + "      price:\n"
+        + "        format: \"int32\"\n"
+        + "        type: \"integer\"\n"
+        + "      tires:\n"
+        + "        items:\n"
+        + "          $ref: \"#/definitions/io.swagger.functional.test.model.Tire\"\n"
+        + "        type: \"array\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Detail:\n"
+        + "    properties:\n"
+        + "      color:\n"
+        + "        type: \"string\"\n"
+        + "      manufacture:\n"
+        + "        type: \"string\"\n"
+        + "      model:\n"
+        + "        type: \"string\"\n"
+        + "      tires:\n"
+        + "        items:\n"
+        + "          $ref: \"#/definitions/io.swagger.functional.test.model.Tire_io.swagger.functional.test.view.Detail\"\n"
+        + "        type: \"array\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary:\n"
+        + "    properties:\n"
+        + "      color:\n"
+        + "        type: \"string\"\n"
+        + "      manufacture:\n"
+        + "        type: \"string\"\n"
+        + "      model:\n"
+        + "        type: \"string\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary-or-io.swagger.functional.test.view.Sale:\n"
+        + "    properties:\n"
+        + "      color:\n"
+        + "        type: \"string\"\n"
+        + "      manufacture:\n"
+        + "        type: \"string\"\n"
+        + "      model:\n"
+        + "        type: \"string\"\n"
+        + "      price:\n"
+        + "        format: \"int32\"\n"
+        + "        type: \"integer\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Tire:\n"
+        + "    properties:\n"
+        + "      brand:\n"
+        + "        type: \"string\"\n"
+        + "      condition:\n"
+        + "        type: \"string\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Tire_io.swagger.functional.test.view.Detail:\n"
+        + "    properties:\n"
+        + "      brand:\n"
+        + "        type: \"string\"\n"
+        + "      condition:\n"
+        + "        type: \"string\"\n"
+        + "    type: \"object\"\n"
+        + "  io.swagger.functional.test.model.Widget:\n"
+        + "    properties:\n"
+        + "      a:\n"
+        + "        type: \"string\"\n"
+        + "      b:\n"
+        + "        type: \"string\"\n"
+        + "      id:\n"
+        + "        type: \"string\"\n"
+        + "    type: \"object\"\n"
+        + "paths:\n"
+        + "  /cars/all:\n"
+        + "    get:\n"
+        + "      consumes:\n"
+        + "      - \"application/json\"\n"
+        + "      description: \"\"\n"
+        + "      operationId: \"getAll\"\n"
+        + "      parameters: []\n"
+        + "      produces:\n"
+        + "      - \"application/json\"\n"
+        + "      responses:\n"
+        + "        200:\n"
+        + "          description: \"Return whole car\"\n"
+        + "          schema:\n"
+        + "            items:\n"
+        + "              $ref: \"#/definitions/io.swagger.functional.test.model.Car\"\n"
+        + "            type: \"array\"\n"
+        + "      summary: \"Return whole car\"\n"
+        + "      tags:\n"
+        + "      - \"cars\"\n"
+        + "  /cars/detail:\n"
+        + "    get:\n"
+        + "      consumes:\n"
+        + "      - \"application/json\"\n"
+        + "      description: \"\"\n"
+        + "      operationId: \"getDetails\"\n"
+        + "      parameters: []\n"
+        + "      produces:\n"
+        + "      - \"application/json\"\n"
+        + "      responses:\n"
+        + "        200:\n"
+        + "          description: \"Return car detail\"\n"
+        + "          schema:\n"
+        + "            items:\n"
+        + "              $ref: \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Detail\"\n"
+        + "            type: \"array\"\n"
+        + "      summary: \"Return car detail\"\n"
+        + "      tags:\n"
+        + "      - \"cars\"\n"
+        + "  /cars/sale:\n"
+        + "    get:\n"
+        + "      consumes:\n"
+        + "      - \"application/json\"\n"
+        + "      description: \"\"\n"
+        + "      operationId: \"getSaleSummaries\"\n"
+        + "      parameters: []\n"
+        + "      produces:\n"
+        + "      - \"application/json\"\n"
+        + "      responses:\n"
+        + "        200:\n"
+        + "          description: \"successful operation\"\n"
+        + "          schema:\n"
+        + "            items:\n"
+        + "              $ref: \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary-or-io.swagger.functional.test.view.Sale\"\n"
+        + "            type: \"array\"\n"
+        + "      summary: \"Return car sale summary\"\n"
+        + "      tags:\n"
+        + "      - \"cars\"\n"
+        + "  /cars/summary:\n"
+        + "    get:\n"
+        + "      consumes:\n"
+        + "      - \"List\"\n"
+        + "      description: \"\"\n"
+        + "      operationId: \"getSummaries\"\n"
+        + "      parameters: []\n"
+        + "      produces:\n"
+        + "      - \"application/json\"\n"
+        + "      responses:\n"
+        + "        200:\n"
+        + "          description: \"successful operation\"\n"
+        + "          schema:\n"
+        + "            $ref: \"#/definitions/io.swagger.functional.test.model.Car_io.swagger.functional.test.view.Summary\"\n"
+        + "      summary: \"Return car summaries\"\n"
+        + "      tags:\n"
+        + "      - \"cars\"\n"
+        + "  /widgets/{widgetId}:\n"
+        + "    get:\n"
+        + "      consumes:\n"
+        + "      - \"application/json\"\n"
+        + "      description: \"Returns a pet when ID <= 10.  ID > 10 or nonintegers will simulate\\\n"
+        + "        \\ API error conditions\"\n"
+        + "      operationId: \"getWidget\"\n"
+        + "      parameters:\n"
+        + "      - in: \"path\"\n"
+        + "        name: \"widgetId\"\n"
+        + "        required: true\n"
+        + "        type: \"string\"\n"
+        + "      produces:\n"
+        + "      - \"application/json\"\n"
+        + "      responses:\n"
+        + "        200:\n"
+        + "          description: \"Returns widget with matching id\"\n"
+        + "      summary: \"Find pet by ID\"\n"
+        + "      tags:\n"
+        + "      - \"widgets\"\n"
+        + "swagger: \"2.0\"\n"
+        + "tags:\n"
+        + "- name: \"cars\"\n"
+        + "- name: \"widgets\"\n";
     private static final int jettyPort = System.getProperties().containsKey("jetty.port") ? Integer
             .parseInt(System.getProperty("jetty.port")) : -1;
 
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Car.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Car.java
new file mode 100755
index 0000000000..badc235206
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Car.java
@@ -0,0 +1,34 @@
+package io.swagger.functional.test.model;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonView;
+import io.swagger.functional.test.view.Detail;
+import io.swagger.functional.test.view.Sale;
+import io.swagger.functional.test.view.Summary;
+import java.util.Arrays;
+import java.util.List;
+
+public class Car {
+
+  @JsonView(Summary.class)
+  @JsonProperty("manufacture")
+  private String made = "Honda";
+
+  @JsonView({Summary.class, Detail.class})
+  private String model = "Accord Hybrid";
+
+  @JsonView({Detail.class})
+  @JsonProperty
+  private List<Tire> tires = Arrays.asList(new Tire());
+
+  @JsonView({Sale.class})
+  @JsonProperty
+  private int price = 40000;
+
+  // always in
+  private String color = "White";
+
+  public String getColor() {
+    return color;
+  }
+}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Tire.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Tire.java
new file mode 100755
index 0000000000..28c4863dff
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/model/Tire.java
@@ -0,0 +1,17 @@
+package io.swagger.functional.test.model;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonView;
+import io.swagger.functional.test.view.Detail;
+import io.swagger.functional.test.view.Summary;
+
+public class Tire {
+
+  @JsonView(Summary.class)
+  @JsonProperty("brand")
+  private String made = "Michelin";
+
+  @JsonView(Detail.class)
+  @JsonProperty
+  private String condition = "new";
+}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/resources/CarResource.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/resources/CarResource.java
index 54580ec9e5..cea05932a7 100755
--- a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/resources/CarResource.java
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/resources/CarResource.java
@@ -1,12 +1,14 @@
 package io.swagger.functional.test.resources;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonView;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-
+import io.swagger.functional.test.model.Car;
+import io.swagger.functional.test.view.Detail;
+import io.swagger.functional.test.view.Sale;
+import io.swagger.functional.test.view.Summary;
 import java.util.Arrays;
 import java.util.List;
 import javax.ws.rs.Consumes;
@@ -21,88 +23,41 @@
 @Consumes("application/json")
 public class CarResource {
 
-    private static class View {
-
-        interface Summary {
-        }
-
-        interface Detail extends View.Summary {
-        }
-
-        interface Sale {
-        }
-    }
-
-    private static class Car {
-
-        @JsonView(View.Summary.class)
-        @JsonProperty("manufacture")
-        private String made = "Honda";
-
-        @JsonView({View.Summary.class, View.Detail.class})
-        private String model = "Accord Hybrid";
-
-        @JsonView({View.Detail.class})
-        @JsonProperty
-        private List<Tire> tires = Arrays.asList(new Tire());
-
-        @JsonView({View.Sale.class})
-        @JsonProperty
-        private int price = 40000;
-
-        // always in
-        private String color = "White";
-
-        public String getColor() {
-            return color;
-        }
-    }
-
-    private static class Tire {
-        @JsonView(View.Summary.class)
-        @JsonProperty("brand")
-        private String made = "Michelin";
-
-        @JsonView(View.Detail.class)
-        @JsonProperty
-        private String condition = "new";
-    }
-
-    @GET
-    @Path("/summary")
-    @JsonView({View.Summary.class})
-    @ApiOperation(value = "Return car summaries", response = Car.class, consumes = "List")
-    public Response getSummaries() {
-        return Response.ok(Arrays.asList(new Car())).build();
-    }
-
-    @GET
-    @Path("/detail")
-    @JsonView({View.Detail.class})
-    @ApiResponses(value = {
-            @ApiResponse(code = 200, message = "Return car detail", response = Car.class, responseContainer = "List")
-    })
-    @ApiOperation(value = "Return car detail")
-    public List<Car> getDetails() {
-        return Arrays.asList(new Car());
-    }
-
-    @GET
-    @Path("/sale")
-    @JsonView({View.Summary.class, View.Sale.class})
-    @ApiOperation(value = "Return car sale summary")
-    public List<Car> getSaleSummaries() {
-        return Arrays.asList(new Car());
-    }
-
-    @GET
-    @Path("/all")
-    @ApiResponses(value = {
-            @ApiResponse(code = 200, message = "Return whole car", response = Car.class, responseContainer = "List")
-    })
-    @ApiOperation(value = "Return whole car")
-    public List<Car> getAll() {
-        return Arrays.asList(new Car());
-    }
+  @GET
+  @Path("/summary")
+  @JsonView({Summary.class})
+  @ApiOperation(value = "Return car summaries", response = Car.class, consumes = "List")
+  public Response getSummaries() {
+    return Response.ok(Arrays.asList(new Car())).build();
+  }
+
+  @GET
+  @Path("/detail")
+  @JsonView({Detail.class})
+  @ApiResponses(value = {
+      @ApiResponse(code = 200, message = "Return car detail", response = Car.class, responseContainer = "List")
+  })
+  @ApiOperation(value = "Return car detail")
+  public List<Car> getDetails() {
+    return Arrays.asList(new Car());
+  }
+
+  @GET
+  @Path("/sale")
+  @JsonView({Summary.class, Sale.class})
+  @ApiOperation(value = "Return car sale summary")
+  public List<Car> getSaleSummaries() {
+    return Arrays.asList(new Car());
+  }
+
+  @GET
+  @Path("/all")
+  @ApiResponses(value = {
+      @ApiResponse(code = 200, message = "Return whole car", response = Car.class, responseContainer = "List")
+  })
+  @ApiOperation(value = "Return whole car")
+  public List<Car> getAll() {
+    return Arrays.asList(new Car());
+  }
 
 }
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Detail.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Detail.java
new file mode 100755
index 0000000000..11b00f5fc8
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Detail.java
@@ -0,0 +1,3 @@
+package io.swagger.functional.test.view;
+
+public interface Detail extends Summary {}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Sale.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Sale.java
new file mode 100755
index 0000000000..b6d33425e4
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Sale.java
@@ -0,0 +1,3 @@
+package io.swagger.functional.test.view;
+
+public interface Sale {}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Summary.java b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Summary.java
new file mode 100755
index 0000000000..af0280adb3
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/functional/test/view/Summary.java
@@ -0,0 +1,3 @@
+package io.swagger.functional.test.view;
+
+public interface Summary {}
\ No newline at end of file
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiOperationResource.java b/modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiOperationResource.java
new file mode 100755
index 0000000000..82880232de
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/resources/ApiOperationResource.java
@@ -0,0 +1,17 @@
+package io.swagger.resources;
+
+import io.swagger.annotations.Api;
+
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+
+@Api
+@Path("/")
+public class ApiOperationResource {
+    @GET
+    @Path("/users")
+    @Uber(description = "Test Uber Description")
+    public String getResponse() {
+        return "Response";
+    }
+}
diff --git a/modules/swagger-jaxrs/src/test/java/io/swagger/resources/Uber.java b/modules/swagger-jaxrs/src/test/java/io/swagger/resources/Uber.java
new file mode 100755
index 0000000000..ee5b90240c
--- /dev/null
+++ b/modules/swagger-jaxrs/src/test/java/io/swagger/resources/Uber.java
@@ -0,0 +1,57 @@
+package io.swagger.resources;
+
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.Authorization;
+import io.swagger.annotations.AuthorizationScope;
+import io.swagger.annotations.Extension;
+import io.swagger.annotations.ExtensionProperty;
+import io.swagger.annotations.ResponseHeader;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.METHOD)
+@ApiOperation(
+        value = "Meta DataUber Description",
+        notes = "Test Uber Description",
+        consumes = "multipart/form-data",
+        produces = "multipart/form-data",
+        httpMethod = "GET",
+        nickname = "users",
+        protocols = "ws, wss",
+        tags = {"operation_tag1", "operation_tag2"},
+        authorizations = {
+                @Authorization(
+                        value = "operation_auth",
+                        scopes = {
+                                @AuthorizationScope(
+                                        scope = "operation_auth_scope",
+                                        description = "operation_auth_description")})},
+        response = String.class,
+        responseContainer = "list",
+        responseHeaders = {
+                @ResponseHeader(
+                        name = "operation_response_header1",
+                        description = "operation_response_header_description1",
+                        response = Class.class),
+                @ResponseHeader(
+                        name = "operation_response_header2",
+                        description = "operation_response_header_description2",
+                        response = Class.class),
+                @ResponseHeader(
+                        name = "operation_response_header3",
+                        description = "operation_response_header_description3",
+                        response = Class.class)},
+        responseReference = "#test",
+        extensions = {
+                @Extension(properties = {
+                        @ExtensionProperty(name = "name", value = "value")
+                })}
+)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Uber {
+    String description() default "";
+
+}
diff --git a/modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/AllowUsingApiOperationOnTypeTest.java b/modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/AllowUsingApiOperationOnTypeTest.java
new file mode 100755
index 0000000000..5db1b6f36f
--- /dev/null
+++ b/modules/swagger-servlet/src/test/java/io/swagger/servlet/extensions/AllowUsingApiOperationOnTypeTest.java
@@ -0,0 +1,21 @@
+package io.swagger.servlet.extensions;
+
+import io.swagger.models.Swagger;
+import io.swagger.servlet.Reader;
+import io.swagger.servlet.resources.ApiOperationResource;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+import java.util.Collections;
+
+public class AllowUsingApiOperationOnTypeTest {
+
+    private static final String USERS_PATH = "/users";
+
+    @Test
+    public void testThatApiOperationMightBeInType() {
+        final Swagger swagger = new Swagger();
+        Reader.read(swagger, Collections.<Class<?>>singleton(ApiOperationResource.class));
+        Assert.assertNotNull(swagger.getPaths().get(USERS_PATH));
+    }
+}
diff --git a/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ApiOperationResource.java b/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ApiOperationResource.java
new file mode 100755
index 0000000000..32195035ce
--- /dev/null
+++ b/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/ApiOperationResource.java
@@ -0,0 +1,9 @@
+package io.swagger.servlet.resources;
+
+public class ApiOperationResource {
+
+    @Uber(description = "Description")
+    public String getResponse() {
+        return "Response";
+    }
+}
diff --git a/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/Uber.java b/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/Uber.java
new file mode 100755
index 0000000000..d2b413027b
--- /dev/null
+++ b/modules/swagger-servlet/src/test/java/io/swagger/servlet/resources/Uber.java
@@ -0,0 +1,57 @@
+package io.swagger.servlet.resources;
+
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.Authorization;
+import io.swagger.annotations.AuthorizationScope;
+import io.swagger.annotations.Extension;
+import io.swagger.annotations.ExtensionProperty;
+import io.swagger.annotations.ResponseHeader;
+import io.swagger.servlet.models.SampleData;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(ElementType.METHOD)
+@ApiOperation(
+        value = "Meta Uber Annotation",
+        notes = "Test description",
+        consumes = "multipart/form-data",
+        produces = "multipart/form-data",
+        httpMethod = "GET",
+        nickname = "users",
+        protocols = "ws, wss",
+        tags = {"operation_tag1", "operation_tag2"},
+        authorizations = {
+                @Authorization(
+                        value = "operation_auth",
+                        scopes = {
+                                @AuthorizationScope(
+                                        scope = "operation_auth_scope",
+                                        description = "operation_auth_description")})},
+        response = String.class,
+        responseContainer = "list",
+        responseHeaders = {
+                @ResponseHeader(
+                        name = "operation_response_header1",
+                        description = "operation_response_header_description1",
+                        response = SampleData.class),
+                @ResponseHeader(
+                        name = "operation_response_header2",
+                        description = "operation_response_header_description2"),
+                @ResponseHeader(
+                        name = "operation_response_header3",
+                        description = "operation_response_header_description3",
+                        response = Class.class)},
+        responseReference = "#test",
+        extensions = {
+                @Extension(properties = {
+                        @ExtensionProperty(name = "name", value = "value")
+                })}
+)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Uber {
+    String description() default "";
+
+}
