diff --git a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
index 8a070146e..dbd1e84c3 100644
--- a/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
+++ b/okhttp-logging-interceptor/src/test/java/com/squareup/okhttp/logging/HttpLoggingInterceptorTest.java
@@ -20,6 +20,7 @@
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.Response;
 import com.squareup.okhttp.logging.HttpLoggingInterceptor.Level;
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
@@ -143,7 +144,8 @@ private void setLevel(Level level) {
     server.enqueue(new MockResponse()
         .setBody("Hello!")
         .setHeader("Content-Type", PLAIN));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -160,7 +162,8 @@ private void setLevel(Level level) {
     setLevel(Level.HEADERS);
 
     server.enqueue(new MockResponse());
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -191,7 +194,9 @@ private void setLevel(Level level) {
     setLevel(Level.HEADERS);
 
     server.enqueue(new MockResponse());
-    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();
+    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();
+    Response response = client.newCall(request).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
@@ -226,7 +231,9 @@ private void setLevel(Level level) {
     setLevel(Level.HEADERS);
 
     server.enqueue(new MockResponse());
-    client.newCall(request().post(RequestBody.create(null, "Hi?")).build()).execute();
+    Request request = request().post(RequestBody.create(null, "Hi?")).build();
+    Response response = client.newCall(request).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
@@ -268,7 +275,8 @@ private void setLevel(Level level) {
         sink.writeUtf8("Hi!");
       }
     };
-    client.newCall(request().post(body).build()).execute();
+    Response response = client.newCall(request().post(body).build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
@@ -304,7 +312,8 @@ private void setLevel(Level level) {
     server.enqueue(new MockResponse()
         .setBody("Hello!")
         .setHeader("Content-Type", PLAIN));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -337,7 +346,8 @@ private void setLevel(Level level) {
     setLevel(Level.BODY);
 
     server.enqueue(new MockResponse());
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -377,7 +387,8 @@ private void setLevel(Level level) {
   private void bodyGetNoBody(int code) throws IOException {
     server.enqueue(new MockResponse()
         .setStatus("HTTP/1.1 " + code + " No Content"));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -408,7 +419,9 @@ private void bodyGetNoBody(int code) throws IOException {
     setLevel(Level.BODY);
 
     server.enqueue(new MockResponse());
-    client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute();
+    Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build();
+    Response response = client.newCall(request).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> POST " + url + " HTTP/1.1")
@@ -449,7 +462,8 @@ private void bodyGetNoBody(int code) throws IOException {
     server.enqueue(new MockResponse()
         .setBody("Hello!")
         .setHeader("Content-Type", PLAIN));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -488,7 +502,8 @@ private void bodyGetNoBody(int code) throws IOException {
     server.enqueue(new MockResponse()
         .setChunkedBody("Hello!", 2)
         .setHeader("Content-Type", PLAIN));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     applicationLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
@@ -529,7 +544,8 @@ private void bodyGetNoBody(int code) throws IOException {
         .setHeader("Content-Type", PLAIN)
         .setBody(new Buffer().write(ByteString.decodeBase64(
             "H4sIAAAAAAAAAPNIzcnJ11HwQKIAdyO+9hMAAAA="))));
-    client.newCall(request().build()).execute();
+    Response response = client.newCall(request().build()).execute();
+    response.body().close();
 
     networkLogs
         .assertLogEqual("--> GET " + url + " HTTP/1.1")
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index d766ec40a..eeabe9d9f 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -570,7 +570,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
         .build();
 
     Call call = client.newCall(request);
-    call.execute();
+    Response response = call.execute();
+    response.body().close();
 
     try {
       call.execute();
@@ -748,6 +749,8 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
       long elapsedNanos = System.nanoTime() - startNanos;
       long elapsedMillis = TimeUnit.NANOSECONDS.toMillis(elapsedNanos);
       assertTrue(String.format("Timed out: %sms", elapsedMillis), elapsedMillis < 500);
+    } finally {
+      bodySource.close();
     }
   }
 
@@ -1005,13 +1008,16 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
 
   @Test public void setFollowSslRedirectsFalse() throws Exception {
     enableTls();
-    server.enqueue(new MockResponse().setResponseCode(301).addHeader("Location: http://square.com"));
+    server.enqueue(new MockResponse()
+        .setResponseCode(301)
+        .addHeader("Location: http://square.com"));
 
     client.setFollowSslRedirects(false);
 
     Request request = new Request.Builder().url(server.url("/")).build();
     Response response = client.newCall(request).execute();
     assertEquals(301, response.code());
+    response.body().close();
   }
 
   @Test public void matchingPinnedCertificate() throws Exception {
@@ -1026,12 +1032,14 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
     for (Certificate certificate : response1.handshake().peerCertificates()) {
       certificatePinnerBuilder.add(server.getHostName(), CertificatePinner.pin(certificate));
     }
+    response1.body().close();
 
     // Make another request with certificate pinning. It should complete normally.
     client.setCertificatePinner(certificatePinnerBuilder.build());
     Request request2 = new Request.Builder().url(server.url("/")).build();
     Response response2 = client.newCall(request2).execute();
     assertNotSame(response2.handshake(), response1.handshake());
+    response2.body().close();
   }
 
   @Test public void unmatchingPinnedCertificate() throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
index 55470af01..e70c9087a 100644
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/InterceptorTest.java
@@ -391,7 +391,8 @@ private void asyncInterceptors(List<Interceptor> interceptors) throws Exception
 
     client.interceptors().add(new Interceptor() {
       @Override public Response intercept(Chain chain) throws IOException {
-        chain.proceed(chain.request());
+        Response response1 = chain.proceed(chain.request());
+        response1.body().close();
         return chain.proceed(chain.request());
       }
     });
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Call.java b/okhttp/src/main/java/com/squareup/okhttp/Call.java
index a55216c84..651bd0de9 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/Call.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Call.java
@@ -281,9 +281,11 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         throw new IOException("Canceled");
       }
 
+      boolean releaseConnection = true;
       try {
         engine.sendRequest();
         engine.readResponse();
+        releaseConnection = false;
       } catch (RequestException e) {
         // The attempt to interpret the request failed. Give up.
         throw e.getCause();
@@ -291,6 +293,7 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         // The attempt to connect via a route failed. The request will not have been sent.
         HttpEngine retryEngine = engine.recover(e);
         if (retryEngine != null) {
+          releaseConnection = false;
           engine = retryEngine;
           continue;
         }
@@ -300,12 +303,19 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         // An attempt to communicate with a server failed. The request may have been sent.
         HttpEngine retryEngine = engine.recover(e, null);
         if (retryEngine != null) {
+          releaseConnection = false;
           engine = retryEngine;
           continue;
         }
 
         // Give up; recovery is not possible.
         throw e;
+      } finally {
+        // We're throwing an unchecked exception. Release any resources.
+        if (releaseConnection) {
+          StreamAllocation streamAllocation = engine.close();
+          streamAllocation.release();
+        }
       }
 
       Response response = engine.getResponse();
@@ -318,11 +328,13 @@ Response getResponse(Request request, boolean forWebSocket) throws IOException {
         return response;
       }
 
+      StreamAllocation streamAllocation = engine.close();
+
       if (++followUpCount > MAX_FOLLOW_UPS) {
+        streamAllocation.release();
         throw new ProtocolException("Too many follow-up requests: " + followUpCount);
       }
 
-      StreamAllocation streamAllocation = engine.close();
       if (!engine.sameConnection(followUp.httpUrl())) {
         streamAllocation.release();
         streamAllocation = null;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
index 3db462929..b43f0d3c7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
@@ -248,7 +248,7 @@ public Source newUnknownLengthSource() throws IOException {
     if (state != STATE_OPEN_RESPONSE_BODY) throw new IllegalStateException("state: " + state);
     if (streamAllocation == null) throw new IllegalStateException("streamAllocation == null");
     state = STATE_READING_RESPONSE_BODY;
-    streamAllocation.noNewStreamsOnConnection();
+    streamAllocation.noNewStreams();
     return new UnknownLengthSource();
   }
 
@@ -368,7 +368,7 @@ protected final void unexpectedEndOfInput() {
 
       state = STATE_CLOSED;
       if (streamAllocation != null) {
-        streamAllocation.noNewStreamsOnConnection();
+        streamAllocation.noNewStreams();
         streamAllocation.streamFinished(Http1xStream.this);
       }
     }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
index bc7ae109e..fcb7384a7 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/HttpEngine.java
@@ -444,7 +444,7 @@ public StreamAllocation close() {
       closeQuietly(userResponse.body());
     } else {
       // If this engine never achieved a response body, its stream allocation is dead.
-      streamAllocation.noNewStreams();
+      streamAllocation.connectionFailed();
     }
 
     return streamAllocation;
@@ -751,7 +751,7 @@ private Response readNetworkResponse() throws IOException {
 
     if ("close".equalsIgnoreCase(networkResponse.request().header("Connection"))
         || "close".equalsIgnoreCase(networkResponse.header("Connection"))) {
-      streamAllocation.noNewStreamsOnConnection();
+      streamAllocation.noNewStreams();
     }
 
     return networkResponse;
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
index 7305bd7d5..56750a948 100644
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
@@ -128,7 +128,7 @@ private RealConnection findHealthyConnection(int connectTimeout, int readTimeout
       if (connection.isHealthy(doExtensiveHealthChecks)) {
         return candidate;
       }
-      deallocate(true, false, true);
+      connectionFailed();
     }
   }
 
@@ -210,13 +210,7 @@ public void release() {
   }
 
   /** Forbid new streams from being created on the connection that hosts this allocation. */
-  public void noNewStreamsOnConnection() {
-    deallocate(true, false, false);
-  }
-
-  /** Forbid new streams from being created on this allocation. */
   public void noNewStreams() {
-    // TODO(jwilson): fix this for HTTP/2 to not nuke the socket connection.
     deallocate(true, false, false);
   }
 
@@ -285,6 +279,11 @@ private void connectionFailed(IOException e) {
         }
       }
     }
+    connectionFailed();
+  }
+
+  /** Finish the current stream and prevent new streams from being created. */
+  public void connectionFailed() {
     deallocate(true, false, true);
   }
 
