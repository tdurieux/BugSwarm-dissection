diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingDefinition.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingDefinition.java
index dfd9856dd3..28c8f2b041 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingDefinition.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingDefinition.java
@@ -6,6 +6,12 @@
   String getName();
   String getDescription();
 
+  /**
+   * State for new workflow if no state is given.
+   * TODO is this actually needed at all?
+   */
+  WorkflowProcessingState getDefaultInitialState();
+
   /**
    * Generic error state where to go if WorkflowProcessingState doesn't define error state.
    * @return
@@ -17,4 +23,8 @@
    * @return
    */
   List<WorkflowProcessingState> getStates();
+
+  WorkflowProcessingState getState(String stateName);
+
+  WorkflowProcessingSettings getSettings();
 }
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingInstance.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingInstance.java
index 45bb1b40cd..92d083fea7 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingInstance.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingInstance.java
@@ -22,7 +22,7 @@
 
   /**
    * In case of retry, this will show next when state execution is attempted for the next time.
-   * If you return null, you'll get binary backoff algorithm.
+   * If null is returned, default retry time strategy is used from the engine.
    * @return
    */
   DateTime nextRetryTime();
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingSettings.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingSettings.java
new file mode 100755
index 0000000000..d33690b169
--- /dev/null
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingSettings.java
@@ -0,0 +1,30 @@
+package com.nitorcreations.nflow.engine.processing;
+
+public interface WorkflowProcessingSettings {
+  // TODO WorkflowProcessingInstance.getMaxRetries()
+  // WorkflowProcessingInstance.getNextRetryTime()
+  // handle everything here. But these fields are part of e.g. REST API
+  // TODO maybe replace settings with Map<String, String> ?
+
+  /**
+   * Minimum delay on execution retry after an error. Unit is milliseconds.
+   */
+  //int getMinErrorTransitionDelay();
+  /**
+   * Maximum delay on execution retry after an error. Unit is milliseconds.
+   */
+  //int getMaxErrorTransitionDelay();
+  /**
+   * Length of forced delay to break execution of a step that is considered to be busy looping. Unit is milliseconds.
+   */
+  //int getShortTransitionDelay();
+  /**
+   * Immediate transition delay.
+   */
+  //int getImmediateTransitionDelay();
+  /**
+   * Maximum retry attempts.
+   */
+  //int getMaxRetries();
+
+}
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingState.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingState.java
index f13b45d6df..8d64f1c1c9 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingState.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/WorkflowProcessingState.java
@@ -37,11 +37,11 @@
    * Max number of consecutive retries in state
    * @return max number of retries.
    */
-  int getRetryCountLimit();
+  int getMaxRetries();
 
   /**
    * Warn if execution time exeeds this value.
    * @return limit in seconds.
    */
-  int getExecutionTimeoutWarningLimit();
+  int getMaxExecutionTime();
 }
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNfloWorkflowProcessingDefinition.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNfloWorkflowProcessingDefinition.java
index 9db20f1afb..6cced593df 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNfloWorkflowProcessingDefinition.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNfloWorkflowProcessingDefinition.java
@@ -1,6 +1,7 @@
 package com.nitorcreations.nflow.engine.processing.nflow;
 
 import com.nitorcreations.nflow.engine.processing.WorkflowProcessingDefinition;
+import com.nitorcreations.nflow.engine.processing.WorkflowProcessingSettings;
 import com.nitorcreations.nflow.engine.processing.WorkflowProcessingState;
 import com.nitorcreations.nflow.engine.workflow.definition.AbstractWorkflowDefinition;
 import com.nitorcreations.nflow.engine.workflow.definition.WorkflowState;
@@ -11,11 +12,14 @@
 public class StandardNfloWorkflowProcessingDefinition implements WorkflowProcessingDefinition
 {
   private final AbstractWorkflowDefinition<? extends WorkflowState> definition;
-  public StandardNfloWorkflowProcessingDefinition(AbstractWorkflowDefinition<? extends WorkflowState> definition) {
+  private final WorkflowProcessingSettings settings;
+
+  public StandardNfloWorkflowProcessingDefinition(AbstractWorkflowDefinition<? extends WorkflowState> definition,
+                                                  WorkflowProcessingSettings settings) {
     this.definition = definition;
+    this.settings = settings;
   }
 
-
   @Override
   public String getName() {
     return definition.getName();
@@ -26,10 +30,19 @@ public String getDescription() {
     return definition.getDescription();
   }
 
+  /**
+   * State for new workflow if no state is given.
+   */
+  @Override
+  public WorkflowProcessingState getDefaultInitialState() {
+    // TODO
+    return getState(definition.getInitialState());
+  }
+
   @Override
   public WorkflowProcessingState getGenericErrorState() {
     // TODO
-    return null;
+    return getState(definition.getErrorState());
   }
 
   @Override
@@ -37,4 +50,25 @@ public WorkflowProcessingState getGenericErrorState() {
     // TODO loop over definition.getStates() and create WorkflowProcessingState objects
     return Collections.emptyList();
   }
+
+  @Override
+  public WorkflowProcessingState getState(String stateName) {
+    // TODO Lookup from hashmap
+    for(WorkflowProcessingState state : getStates()) {
+      if(state.getName().equals(stateName)) {
+        return state;
+      }
+    }
+    throw new IllegalArgumentException("unknown state " + stateName);
+  }
+
+  @Override
+  public WorkflowProcessingSettings getSettings() {
+    return settings;
+  }
+
+  public WorkflowProcessingState getState(WorkflowState state) {
+    return getState(state.name());
+  }
+
 }
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingFactory.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingFactory.java
index ea4a5ff022..219877fd07 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingFactory.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingFactory.java
@@ -4,6 +4,7 @@
 import com.nitorcreations.nflow.engine.processing.AbstractWorkflowProcessingFactory;
 import com.nitorcreations.nflow.engine.processing.WorkflowProcessingDefinition;
 import com.nitorcreations.nflow.engine.processing.WorkflowProcessingInstance;
+import com.nitorcreations.nflow.engine.processing.WorkflowProcessingSettings;
 import com.nitorcreations.nflow.engine.service.WorkflowDefinitionService;
 import com.nitorcreations.nflow.engine.workflow.definition.AbstractWorkflowDefinition;
 import com.nitorcreations.nflow.engine.workflow.definition.WorkflowState;
@@ -21,7 +22,9 @@ public StandardNflowWorkflowProcessingFactory(WorkflowDefinitionService workflow
   @Override
   public WorkflowProcessingInstance createInstance(WorkflowInstance instance) {
     AbstractWorkflowDefinition<? extends WorkflowState> definition = workflowDefinitions.getWorkflowDefinition(instance.type);
-    WorkflowProcessingDefinition processDefinition = new StandardNfloWorkflowProcessingDefinition();
+    // TODO workflowSettings
+    WorkflowProcessingSettings settings = new WorkflowProcessingSettings() {};
+    WorkflowProcessingDefinition processDefinition = new StandardNfloWorkflowProcessingDefinition(definition, settings);
     return new StandardNflowWorkflowProcessingInstance(instance, processDefinition, definition, objectMapper);
   }
 
diff --git a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingInstance.java b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingInstance.java
index 32d8e2185d..8c6982d67f 100755
--- a/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingInstance.java
+++ b/nflow-engine/src/main/java/com/nitorcreations/nflow/engine/processing/nflow/StandardNflowWorkflowProcessingInstance.java
@@ -40,7 +40,7 @@ public WorkflowProcessingDefinition getWorkflowDefinition() {
 
   @Override
   public WorkflowProcessingState getCurrentState() {
-    return getWorkflowProcessingState(instance.state);
+    return processingDefinition.getState(instance.state);
   }
 
   @Override
@@ -50,7 +50,7 @@ public NextProcessingAction executeState(StateExecution stateExecution) {
     Object[] args = objectMapper.createArguments((StateExecutionImpl)stateExecution, method);
     NextAction nextAction = (NextAction) invokeMethod(method.method, definition, args);
     // TODO handle changes to StateVars
-    WorkflowProcessingState state = getWorkflowProcessingState(nextAction.getNextState().name());
+    WorkflowProcessingState state = processingDefinition.getState(nextAction.getNextState().name());
 
     // TODO handle exceptions etc
     // TODO ugly cast for StateExecutionImpl
@@ -59,16 +59,6 @@ public NextProcessingAction executeState(StateExecution stateExecution) {
     return NextProcessingAction.moveToStateAfter(state, nextAction.getActivation(), nextAction.getReason());
   }
 
-  private WorkflowProcessingState getWorkflowProcessingState(String name) {
-    // TODO maybe WorkflowProcessingDefinition.getState(name) ???
-    for(WorkflowProcessingState state : getWorkflowDefinition().getStates()) {
-      if(state.getName().equals(name)) {
-        return state;
-      }
-    }
-    throw new IllegalArgumentException("unknown state " + name);
-  }
-
   @Override
   public int getRetryCount() {
     return instance.retries;
