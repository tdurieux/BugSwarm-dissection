diff --git a/src/main/java/org/testng/ITestResult.java b/src/main/java/org/testng/ITestResult.java
index 78ba7e47cf..4fdc7ed8d9 100755
--- a/src/main/java/org/testng/ITestResult.java
+++ b/src/main/java/org/testng/ITestResult.java
@@ -11,87 +11,85 @@
  */
 public interface ITestResult extends IAttributes, Comparable<ITestResult> {
 
-  //
   // Test status
-  //
-  public static final int SUCCESS = 1;
-  public static final int FAILURE = 2;
-  public static final int SKIP = 3;
-  public static final int SUCCESS_PERCENTAGE_FAILURE = 4;
-  public static final int STARTED= 16;
+  int SUCCESS = 1;
+  int FAILURE = 2;
+  int SKIP = 3;
+  int SUCCESS_PERCENTAGE_FAILURE = 4;
+  int STARTED= 16;
 
   /**
    * @return The status of this result, using one of the constants
    * above.
    */
-  public int getStatus();
-  public void setStatus(int status);
+  int getStatus();
+  void setStatus(int status);
 
   /**
    * @return The test method this result represents.
    */
-  public ITestNGMethod getMethod();
+  ITestNGMethod getMethod();
 
   /**
    * @return The parameters this method was invoked with.
    */
-  public Object[] getParameters();
-  public void setParameters(Object[] parameters);
+  Object[] getParameters();
+  void setParameters(Object[] parameters);
 
   /**
    * @return The test class used this object is a result for.
    */
-  public IClass getTestClass();
+  IClass getTestClass();
 
   /**
    * @return The throwable that was thrown while running the
    * method, or null if no exception was thrown.
    */
-  public Throwable getThrowable();
-  public void setThrowable(Throwable throwable);
+  Throwable getThrowable();
+  void setThrowable(Throwable throwable);
 
   /**
    * @return the start date for this test, in milliseconds.
    */
-  public long getStartMillis();
+  long getStartMillis();
 
   /**
    * @return the end date for this test, in milliseconds.
    */
-  public long getEndMillis();
-  public void setEndMillis(long millis);
+  long getEndMillis();
+  void setEndMillis(long millis);
 
   /**
    * @return The name of this TestResult, typically identical to the name
    * of the method.
    */
-  public String getName();
+  String getName();
 
   /**
    * @return true if if this test run is a SUCCESS
    */
-  public boolean isSuccess();
+  boolean isSuccess();
 
   /**
    * @return The host where this suite was run, or null if it was run locally.  The
    * returned string has the form:  host:port
    */
-  public String getHost();
+  String getHost();
 
   /**
    * The instance on which this method was run.
    */
-  public Object getInstance();
+  Object getInstance();
 
   /**
    * If this result's related instance implements ITest or use @Test(testName=...), returns its test name, otherwise returns null.
    */
-  public String getTestName();
+  String getTestName();
 
-  public String getInstanceName();
+  String getInstanceName();
   
   /**
    * @return the {@link ITestContext} for this test result.
    */
-  public ITestContext getTestContext();
+  ITestContext getTestContext();
 }
diff --git a/src/main/java/org/testng/internal/TestResult.java b/src/main/java/org/testng/internal/TestResult.java
index 05594009fa..ef0f0ad9de 100755
--- a/src/main/java/org/testng/internal/TestResult.java
+++ b/src/main/java/org/testng/internal/TestResult.java
@@ -51,15 +51,6 @@ public TestResult(IClass testClass,
     init(testClass, instance, method, throwable, start, end, context);
   }
 
-  /**
-   *
-   * @param testClass
-   * @param instance
-   * @param method
-   * @param throwable
-   * @param start
-   * @param end
-   */
   public void init (IClass testClass,
       Object instance,
       ITestNGMethod method,
@@ -88,11 +79,9 @@ public void init (IClass testClass,
     } else {
       if (m_instance instanceof ITest) {
         m_name = ((ITest) m_instance).getTestName();
-      }
-      else if (testClass.getTestName() != null) {
+      } else if (testClass.getTestName() != null) {
         m_name = testClass.getTestName();
-      }
-      else {
+      } else {
         String string = m_instance.toString();
         // Only display toString() if it's been overridden by the user
         m_name = getMethod().getMethodName();
@@ -104,18 +93,13 @@ else if (testClass.getTestName() != null) {
                 : string;
             m_name = m_name + " on " + m_instanceName;
           }
-        }
-        catch(NoSuchMethodException ignore) {
+        } catch(NoSuchMethodException ignore) {
           // ignore
         }
       }
     }
   }
 
-  private static void ppp(String s) {
-    System.out.println("[TestResult] " + s);
-  }
-
   @Override
   public void setEndMillis(long millis) {
     m_endMillis = millis;
@@ -224,10 +208,6 @@ public long getStartMillis() {
     return m_startMillis;
   }
 
-//  public List<String> getOutput() {
-//    return m_output;
-//  }
-
   @Override
   public String toString() {
     List<String> output = Reporter.getOutput(this);
@@ -243,7 +223,7 @@ public String toString() {
     return result;
   }
 
-  private String toString(int status) {
+  private static String toString(int status) {
     switch(status) {
       case SUCCESS: return "SUCCESS";
       case FAILURE: return "FAILURE";
@@ -277,14 +257,9 @@ public void setParameters(Object[] parameters) {
         Method clone;
         try {
           clone = parameters[i].getClass().getDeclaredMethod("clone");
-        } catch (NoSuchMethodException e) {
-          // Cannot append: method available in Object
-          throw new RuntimeException(e);
-        }
-        try {
           clone.setAccessible(true);
           m_parameters[i] = clone.invoke(parameters[i]);
-        } catch (InvocationTargetException | IllegalAccessException | SecurityException e) {
+        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | SecurityException e) {
           m_parameters[i] = parameters[i];
         }
       } else {
diff --git a/src/main/java/org/testng/internal/Utils.java b/src/main/java/org/testng/internal/Utils.java
index cc735592cb..de15d38f79 100755
--- a/src/main/java/org/testng/internal/Utils.java
+++ b/src/main/java/org/testng/internal/Utils.java
@@ -395,31 +395,13 @@ public static void error(String errorMessage) {
     System.err.println("[Error] " + errorMessage);
   }
 
-  /**
-   * @return The number of methods invoked, taking into account the number
-   * of instances.
-   */
-//  public static int calculateInvokedMethodCount(IResultMap map) {
-//    return calculateInvokedMethodCount(
-//        (ITestNGMethod[]) map.getAllMethods().toArray(new ITestNGMethod[map.size()]));
-//  }
-
   public static int calculateInvokedMethodCount(ITestNGMethod[] methods) {
     return methods.length;
-//    int result = 0;
-//
-//    for (ITestNGMethod method : methods) {
-//      int instanceCount = method.getInvocationCount();
-//      result += instanceCount;
-//    }
-//
-//    return result;
-  }
-
-//  public static int calculateInvokedMethodCount(Map<ITestNGMethod, ITestResult> methods) {
-//    return calculateInvokedMethodCount(methods.keySet().toArray(new ITestNGMethod[methods.values()
-//                                                                .size()]));
-//  }
+  }
+
+  public static int calculateInvokedMethodCount(List<ITestNGMethod> methods) {
+    return methods.size();
+  }
 
   /**
    * Tokenize the string using the separator.
diff --git a/src/main/java/org/testng/reporters/TextReporter.java b/src/main/java/org/testng/reporters/TextReporter.java
index ed144000a3..41a3706ac4 100755
--- a/src/main/java/org/testng/reporters/TextReporter.java
+++ b/src/main/java/org/testng/reporters/TextReporter.java
@@ -8,6 +8,7 @@
 import org.testng.TestListenerAdapter;
 import org.testng.internal.Utils;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -17,9 +18,9 @@
  * @author <a href='mailto:the_mindstorm@evolva.ro'>Alexandru Popescu</a>
  */
 public class TextReporter extends TestListenerAdapter {
-  private int m_verbose = 0;
-  private String m_testName = null;
 
+  private final int m_verbose;
+  private final String m_testName;
 
   public TextReporter(String testName, int verbose) {
     m_testName = testName;
@@ -33,28 +34,22 @@ public void onFinish(ITestContext context) {
     }
   }
 
-  private ITestNGMethod[] resultsToMethods(List<ITestResult> results) {
-    ITestNGMethod[] result = new ITestNGMethod[results.size()];
-    int i = 0;
+  private static List<ITestNGMethod> resultsToMethods(List<ITestResult> results) {
+    List<ITestNGMethod> result = new ArrayList<>(results.size());
     for (ITestResult tr : results) {
-      result[i++] = tr.getMethod();
+      result.add(tr.getMethod());
     }
 
     return result;
   }
 
   private void logResults() {
-    //
     // Log Text
-    //
-    for(Object o : getConfigurationFailures()) {
-      ITestResult tr = (ITestResult) o;
+    for (ITestResult tr : getConfigurationFailures()) {
       Throwable ex = tr.getThrowable();
-      String stackTrace= "";
-      if (ex != null) {
-        if (m_verbose >= 2) {
-          stackTrace= Utils.stackTrace(ex, false)[0];
-        }
+      String stackTrace = "";
+      if (ex != null && m_verbose >= 2) {
+        stackTrace = Utils.stackTrace(ex, false)[0];
       }
 
       logResult("FAILED CONFIGURATION",
@@ -66,8 +61,7 @@ private void logResults() {
       );
     }
 
-    for(Object o : getConfigurationSkips()) {
-      ITestResult tr = (ITestResult) o;
+    for (ITestResult tr : getConfigurationSkips()) {
       logResult("SKIPPED CONFIGURATION",
           Utils.detailedMethodName(tr.getMethod(), false),
           tr.getMethod().getDescription(),
@@ -77,38 +71,33 @@ private void logResults() {
       );
     }
 
-    for(Object o : getPassedTests()) {
-      ITestResult tr = (ITestResult) o;
+    for (ITestResult tr : getPassedTests()) {
       logResult("PASSED", tr, null);
     }
 
-    for(Object o : getFailedTests()) {
-      ITestResult tr = (ITestResult) o;
+    for (ITestResult tr : getFailedTests()) {
       Throwable ex = tr.getThrowable();
       String stackTrace= "";
-      if (ex != null) {
-        if (m_verbose >= 2) {
-          stackTrace= Utils.stackTrace(ex, false)[0];
-        }
+      if (ex != null && m_verbose >= 2) {
+        stackTrace= Utils.stackTrace(ex, false)[0];
       }
 
       logResult("FAILED", tr, stackTrace);
     }
 
-    for(Object o : getSkippedTests()) {
-      ITestResult tr = (ITestResult) o;
+    for (ITestResult tr : getSkippedTests()) {
       Throwable throwable = tr.getThrowable();
       logResult("SKIPPED", tr, throwable != null ? Utils.stackTrace(throwable, false)[0] : null);
     }
 
-    ITestNGMethod[] ft = resultsToMethods(getFailedTests());
-    StringBuffer logBuf= new StringBuffer("\n===============================================\n");
+    List<ITestNGMethod> ft = resultsToMethods(getFailedTests());
+    StringBuilder logBuf = new StringBuilder("\n===============================================\n");
     logBuf.append("    ").append(m_testName).append("\n");
     logBuf.append("    Tests run: ").append(Utils.calculateInvokedMethodCount(getAllTestMethods()))
         .append(", Failures: ").append(Utils.calculateInvokedMethodCount(ft))
         .append(", Skips: ").append(Utils.calculateInvokedMethodCount(resultsToMethods(getSkippedTests())));
-    int confFailures= getConfigurationFailures().size();
-    int confSkips= getConfigurationSkips().size();
+    int confFailures = getConfigurationFailures().size();
+    int confSkips = getConfigurationSkips().size();
     if(confFailures > 0 || confSkips > 0) {
       logBuf.append("\n").append("    Configuration Failures: ").append(confFailures)
           .append(", Skips: ").append(confSkips);
@@ -117,17 +106,13 @@ private void logResults() {
     logResult("", logBuf.toString());
   }
 
-  private String getName() {
-    return m_testName;
-  }
-
   private void logResult(String status, ITestResult tr, String stackTrace) {
     logResult(status, tr.getName(), tr.getMethod().getDescription(), stackTrace,
         tr.getParameters(), tr.getMethod().getMethod().getParameterTypes());
   }
 
   private void logResult(String status, String message) {
-    StringBuffer buf= new StringBuffer();
+    StringBuilder buf = new StringBuilder();
     if(isStringNotBlank(status)) {
       buf.append(status).append(": ");
     }
@@ -138,23 +123,22 @@ private void logResult(String status, String message) {
 
   private void logResult(String status, String name,
           String description, String stackTrace,
-          Object[] params, Class[] paramTypes) {
-    StringBuffer msg= new StringBuffer(name);
+          Object[] params, Class<?>[] paramTypes) {
+    StringBuilder msg = new StringBuilder(name);
 
-    if(null != params && params.length > 0) {
+    if (null != params && params.length > 0) {
       msg.append("(");
 
       // The error might be a data provider parameter mismatch, so make
       // a special case here
       if (params.length != paramTypes.length) {
-        msg.append(name + ": Wrong number of arguments were passed by " +
-                "the Data Provider: found " + params.length + " but " +
-                "expected " + paramTypes.length
-                + ")");
-      }
-      else {
-        for(int i= 0; i < params.length; i++) {
-          if(i > 0) {
+        msg.append(name).append(": Wrong number of arguments were passed by ")
+                .append("the Data Provider: found ").append(params.length).append(" but ")
+                .append("expected ").append(paramTypes.length)
+                .append(")");
+      } else {
+        for (int i= 0; i < params.length; i++) {
+          if (i > 0) {
             msg.append(", ");
           }
           msg.append(Utils.toString(params[i], paramTypes[i]));
@@ -163,21 +147,17 @@ private void logResult(String status, String name,
         msg.append(")");
       }
     }
-    if (! Utils.isStringEmpty(description)) {
+    if (!Utils.isStringEmpty(description)) {
       msg.append("\n");
       for (int i = 0; i < status.length() + 2; i++) {
         msg.append(" ");
       }
       msg.append(description);
     }
-    if ( ! Utils.isStringEmpty(stackTrace)) {
+    if (!Utils.isStringEmpty(stackTrace)) {
       msg.append("\n").append(stackTrace);
     }
 
     logResult(status, msg.toString());
   }
-
-  public void ppp(String s) {
-    System.out.println("[TextReporter " + getName() + "] " + s);
-  }
 }
