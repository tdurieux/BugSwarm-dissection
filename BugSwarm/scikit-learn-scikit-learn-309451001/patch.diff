diff --git a/sklearn/ensemble/_gradient_boosting.pyx b/sklearn/ensemble/_gradient_boosting.pyx
index 9bf1e92901..cd749eae8e 100755
--- a/sklearn/ensemble/_gradient_boosting.pyx
+++ b/sklearn/ensemble/_gradient_boosting.pyx
@@ -208,7 +208,7 @@ def predict_stages(np.ndarray[object, ndim=2] estimators,
                              " expected, got {!r}".format(type(X)))
         _predict_regression_tree_stages_sparse(estimators, X, scale, out)
     else:
-        if not isinstance(X, np.ndarray) and np.isfortran(X):
+        if not isinstance(X, np.ndarray) or np.isfortran(X):
             raise ValueError("X should be C-ordered np.ndarray,"
                              " got {}".format(type(X)))
 
diff --git a/sklearn/ensemble/tests/test_gradient_boosting.py b/sklearn/ensemble/tests/test_gradient_boosting.py
index 3bcf80d9e6..4c59b33e67 100755
--- a/sklearn/ensemble/tests/test_gradient_boosting.py
+++ b/sklearn/ensemble/tests/test_gradient_boosting.py
@@ -401,9 +401,14 @@ def test_check_inputs_predict_stages():
     clf.fit(x, y)
     score = np.zeros((y.shape)).reshape(-1, 1)
     assert_raise_message(ValueError,
-                         "X should be in np.ndarray or csr_matrix format",
+                         "When X is a sparse matrix, a CSR format is expected",
                          predict_stages, clf.estimators_, x_sparse_csc,
                          clf.learning_rate, score)
+    x_fortran = np.asfortranarray(x)
+    assert_raise_message(ValueError,
+                         "X should be C-ordered np.ndarray",
+                         predict_stages, clf.estimators_, x_fortran,
+                         clf.learning_rate, score)
 
 
 def test_check_max_features():
