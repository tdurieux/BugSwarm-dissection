diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java
index 1be9a92332..ac4d66a6eb 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/ClassFileLocator.java
@@ -298,7 +298,10 @@ public static ClassFileLocator of(ClassLoader classLoader) {
          */
         public static Resolution read(Class<?> type) {
             try {
-                return locate(type.getClassLoader(), TypeDescription.ForLoadedType.getName(type));
+                ClassLoader classLoader = type.getClassLoader();
+                return locate(classLoader == null
+                        ? ClassLoader.getSystemClassLoader()
+                        : classLoader, TypeDescription.ForLoadedType.getName(type));
             } catch (IOException exception) {
                 throw new IllegalStateException("Cannot read class file for " + type, exception);
             }
@@ -815,19 +818,6 @@ protected static boolean isDelegating(ClassLoader classLoader) {
                     return classLoader != null && classLoader.getClass().getName().equals(DELEGATING_CLASS_LOADER_NAME);
                 }
 
-                /**
-                 * Normalizes a type name if it is loaded by an anonymous class loader.
-                 *
-                 * @param typeName The name as returned by {@link Class#getName()}.
-                 * @return The non-anonymous name of the given class.
-                 */
-                private static String nonAnonymous(String typeName) {
-                    int anonymousLoaderIndex = typeName.indexOf('/');
-                    return anonymousLoaderIndex == -1
-                            ? typeName
-                            : typeName.substring(0, anonymousLoaderIndex);
-                }
-
                 @Override
                 @SuppressWarnings("unchecked")
                 public Class<?> locate(String name) throws ClassNotFoundException {
@@ -841,7 +831,7 @@ private static String nonAnonymous(String typeName) {
                         return super.locate(name);
                     }
                     Class<?> type = classes.get(ONLY);
-                    return nonAnonymous(type.getName()).equals(name)
+                    return TypeDescription.ForLoadedType.getName(type).equals(name)
                             ? type
                             : super.locate(name);
                 }
@@ -1041,11 +1031,7 @@ public Explicit(ClassLoadingDelegate fallbackDelegate, Collection<? extends Clas
                     this.fallbackDelegate = fallbackDelegate;
                     this.types = new HashMap<String, Class<?>>();
                     for (Class<?> type : types) {
-                        String typeName = type.getName();
-                        int anonymousLoaderIndex = typeName.indexOf('/');
-                        this.types.put(anonymousLoaderIndex == -1
-                                ? typeName
-                                : typeName.substring(0, anonymousLoaderIndex), type);
+                        this.types.put(TypeDescription.ForLoadedType.getName(type), type);
                     }
                 }
 
diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategy.java b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategy.java
index 1c26f4cd5a..3554551e67 100755
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategy.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/dynamic/loading/ClassReloadingStrategy.java
@@ -152,10 +152,7 @@ public static ClassReloadingStrategy fromInstalledAgent() {
     public Map<TypeDescription, Class<?>> load(ClassLoader classLoader, Map<TypeDescription, byte[]> types) {
         Map<String, Class<?>> availableTypes = new HashMap<String, Class<?>>(preregisteredTypes);
         for (Class<?> type : instrumentation.getInitiatedClasses(classLoader)) {
-            int anonymousLoaderIndex = type.getName().indexOf('/');
-            availableTypes.put(anonymousLoaderIndex == -1
-                    ? type.getName()
-                    : type.getName().substring(0, anonymousLoaderIndex), type);
+            availableTypes.put(TypeDescription.ForLoadedType.getName(type), type);
         }
         Map<Class<?>, ClassDefinition> classDefinitions = new ConcurrentHashMap<Class<?>, ClassDefinition>();
         Map<TypeDescription, Class<?>> loadedClasses = new HashMap<TypeDescription, Class<?>>();
@@ -237,11 +234,7 @@ public ClassReloadingStrategy enableBootstrapInjection(File folder) {
     public ClassReloadingStrategy preregistered(Class<?>... type) {
         Map<String, Class<?>> preregisteredTypes = new HashMap<String, Class<?>>(this.preregisteredTypes);
         for (Class<?> aType : type) {
-            String typeName = aType.getName();
-            int anonymousLoaderIndex = typeName.indexOf('/');
-            preregisteredTypes.put(anonymousLoaderIndex == -1
-                    ? typeName
-                    : typeName.substring(0, anonymousLoaderIndex), aType);
+            preregisteredTypes.put(TypeDescription.ForLoadedType.getName(aType), aType);
         }
         return new ClassReloadingStrategy(instrumentation, strategy, bootstrapInjection, preregisteredTypes);
     }
@@ -310,10 +303,7 @@ public void reset(Instrumentation instrumentation, ClassFileLocator classFileLoc
                     throws IOException, UnmodifiableClassException, ClassNotFoundException {
                 Map<Class<?>, ClassDefinition> classDefinitions = new HashMap<Class<?>, ClassDefinition>(types.size());
                 for (Class<?> type : types) {
-                    int anonymousLoaderIndex = type.getName().indexOf('/');
-                    classDefinitions.put(type, new ClassDefinition(type, classFileLocator.locate(anonymousLoaderIndex == -1
-                            ? type.getName()
-                            : type.getName().substring(0, anonymousLoaderIndex)).resolve()));
+                    classDefinitions.put(type, new ClassDefinition(type, classFileLocator.locate(TypeDescription.ForLoadedType.getName(type)).resolve()));
                 }
                 apply(instrumentation, classDefinitions);
             }
