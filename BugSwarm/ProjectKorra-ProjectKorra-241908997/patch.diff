diff --git a/src/com/projectkorra/projectkorra/BendingPlayer.java b/src/com/projectkorra/projectkorra/BendingPlayer.java
index 3690f49927..6b220d2a6b 100755
--- a/src/com/projectkorra/projectkorra/BendingPlayer.java
+++ b/src/com/projectkorra/projectkorra/BendingPlayer.java
@@ -121,7 +121,6 @@ public void addCooldown(String ability, long cooldown) {
 				return;
 			}
 			
-			int slot = player.getInventory().getHeldItemSlot() + 1;
 			String abilityName = event.getAbility();
 			BendingPlayer bPlayer = BendingPlayer.getBendingPlayer(player);
 
@@ -671,13 +670,13 @@ public void removeCooldown(String ability) {
 		if (Bukkit.getPlayer(uuid) == null) {
 			return;
 		}
+		
 		PlayerCooldownChangeEvent event = new PlayerCooldownChangeEvent(Bukkit.getPlayer(uuid), ability, 0, Result.REMOVED);
 		Bukkit.getServer().getPluginManager().callEvent(event);
 		if (!event.isCancelled()) {
 			this.cooldowns.remove(ability);
 
 			Player player = event.getPlayer();
-			int slot = player.getInventory().getHeldItemSlot() + 1;
 			String abilityName = event.getAbility();
 			BendingPlayer bPlayer = BendingPlayer.getBendingPlayer(player);
 
diff --git a/src/com/projectkorra/projectkorra/GeneralMethods.java b/src/com/projectkorra/projectkorra/GeneralMethods.java
index 87baf6eb00..a4f758e16f 100755
--- a/src/com/projectkorra/projectkorra/GeneralMethods.java
+++ b/src/com/projectkorra/projectkorra/GeneralMethods.java
@@ -113,7 +113,6 @@
 import com.projectkorra.projectkorra.event.BindChangeEvent;
 import com.projectkorra.projectkorra.firebending.FireBlast;
 import com.projectkorra.projectkorra.firebending.FireShield;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo;
 import com.projectkorra.projectkorra.firebending.combustion.Combustion;
 import com.projectkorra.projectkorra.object.Preset;
 import com.projectkorra.projectkorra.storage.DBConnection;
@@ -258,11 +257,11 @@ public static boolean blockAbilities(Player player, List<String> abilitiesToBloc
 			} else if (ability.equalsIgnoreCase("AirSweep")) {
 				//hasBlocked = AirCombo.removeAroundPoint(player, "AirSweep", loc, radius) || hasBlocked;
 			} else if (ability.equalsIgnoreCase("FireKick")) {
-				hasBlocked = FireCombo.removeAroundPoint(player, "FireKick", loc, radius) || hasBlocked;
+				//hasBlocked = FireCombo.removeAroundPoint(player, "FireKick", loc, radius) || hasBlocked;
 			} else if (ability.equalsIgnoreCase("FireSpin")) {
-				hasBlocked = FireCombo.removeAroundPoint(player, "FireSpin", loc, radius) || hasBlocked;
+				//hasBlocked = FireCombo.removeAroundPoint(player, "FireSpin", loc, radius) || hasBlocked;
 			} else if (ability.equalsIgnoreCase("FireWheel")) {
-				hasBlocked = FireCombo.removeAroundPoint(player, "FireWheel", loc, radius) || hasBlocked;
+				//hasBlocked = FireCombo.removeAroundPoint(player, "FireWheel", loc, radius) || hasBlocked;
 			}
 		}
 		return hasBlocked;
diff --git a/src/com/projectkorra/projectkorra/PKListener.java b/src/com/projectkorra/projectkorra/PKListener.java
index b628bd7688..5a93e1594e 100755
--- a/src/com/projectkorra/projectkorra/PKListener.java
+++ b/src/com/projectkorra/projectkorra/PKListener.java
@@ -6,7 +6,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.UUID;
 
 import org.bukkit.Bukkit;
@@ -150,7 +149,6 @@
 import com.projectkorra.projectkorra.firebending.HeatControl.HeatControlType;
 import com.projectkorra.projectkorra.firebending.Illumination;
 import com.projectkorra.projectkorra.firebending.WallOfFire;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo;
 import com.projectkorra.projectkorra.firebending.combustion.Combustion;
 import com.projectkorra.projectkorra.firebending.lightning.Lightning;
 import com.projectkorra.projectkorra.firebending.util.FireDamageTimer;
@@ -185,6 +183,7 @@
 
 	ProjectKorra plugin;
 
+	private static final HashMap<Entity, Ability> BENDING_ENTITY_DEATH = new HashMap<>(); // Entities killed by Bending.
 	private static final HashMap<Player, String> BENDING_PLAYER_DEATH = new HashMap<>(); // Player killed by Bending.
 	private static final List<UUID> RIGHT_CLICK_INTERACT = new ArrayList<UUID>(); // Player right click block.
 	private static final ArrayList<UUID> TOGGLED_OUT = new ArrayList<>(); // Stands for toggled = false while logging out.
@@ -479,46 +478,53 @@ public void onEntityDeath(EntityDeathEvent event) {
 			armor.revert();
 		}
 
-		for (FireCombo fc : CoreAbility.getAbilities(event.getEntity().getKiller(), FireCombo.class)) {
-			if (!fc.getAffectedEntities().contains(event.getEntity()))
-				continue;
-			List<ItemStack> drops = event.getDrops();
-			List<ItemStack> newDrops = new ArrayList<>();
-			for (int i = 0; i < drops.size(); i++) {
-				ItemStack cooked = drops.get(i);
-				Material material = drops.get(i).getType();
-				switch (material) {
-					case RAW_BEEF:
-						cooked = new ItemStack(Material.COOKED_BEEF, 1);
-						break;
-					case RAW_FISH:
-						ItemStack salmon = new ItemStack(Material.RAW_FISH, 1, (short) 1);
-						if (drops.get(i).getDurability() == salmon.getDurability()) {
-							cooked = new ItemStack(Material.COOKED_FISH, 1, (short) 1);
-						} else {
-							cooked = new ItemStack(Material.COOKED_FISH, 1);
+		CoreAbility[] cookingFireCombos = { CoreAbility.getAbility("JetBlast"), CoreAbility.getAbility("FireWheel"), CoreAbility.getAbility("FireSpin"), CoreAbility.getAbility("FireKick") };
+		
+		if (BENDING_ENTITY_DEATH.containsKey(event.getEntity())) {
+			CoreAbility coreAbility = (CoreAbility) BENDING_ENTITY_DEATH.get(event.getEntity());
+			for (CoreAbility fireCombo : cookingFireCombos) {
+				if (coreAbility.getName().equalsIgnoreCase(fireCombo.getName())) {
+					List<ItemStack> drops = event.getDrops();
+					List<ItemStack> newDrops = new ArrayList<>();
+					for (int i = 0; i < drops.size(); i++) {
+						ItemStack cooked = drops.get(i);
+						Material material = drops.get(i).getType();
+						switch (material) {
+						case RAW_BEEF:
+							cooked = new ItemStack(Material.COOKED_BEEF, 1);
+							break;
+						case RAW_FISH:
+							ItemStack salmon = new ItemStack(Material.RAW_FISH, 1, (short) 1);
+							if (drops.get(i).getDurability() == salmon.getDurability()) {
+								cooked = new ItemStack(Material.COOKED_FISH, 1, (short) 1);
+							} else {
+								cooked = new ItemStack(Material.COOKED_FISH, 1);
+							}
+							break;
+						case RAW_CHICKEN:
+							cooked = new ItemStack(Material.COOKED_CHICKEN, 1);
+							break;
+						case PORK:
+							cooked = new ItemStack(Material.GRILLED_PORK, 1);
+							break;
+						case MUTTON:
+							cooked = new ItemStack(Material.COOKED_MUTTON);
+							break;
+						case RABBIT:
+							cooked = new ItemStack(Material.COOKED_RABBIT);
+							break;
+						default:
+							break;
 						}
-						break;
-					case RAW_CHICKEN:
-						cooked = new ItemStack(Material.COOKED_CHICKEN, 1);
-						break;
-					case PORK:
-						cooked = new ItemStack(Material.GRILLED_PORK, 1);
-						break;
-					case MUTTON:
-						cooked = new ItemStack(Material.COOKED_MUTTON);
-						break;
-					case RABBIT:
-						cooked = new ItemStack(Material.COOKED_RABBIT);
-						break;
-					default:
-						break;
-				}
 
-				newDrops.add(cooked);
+						newDrops.add(cooked);
+					}
+					event.getDrops().clear();
+					event.getDrops().addAll(newDrops);
+
+					break;
+				}
 			}
-			event.getDrops().clear();
-			event.getDrops().addAll(newDrops);
 		}
 	}
 
@@ -705,7 +711,9 @@ public void onInventoryClick(InventoryClickEvent event) {
 	}
 
 	@EventHandler(priority = EventPriority.NORMAL)
-	public void onPlayerBendingDeath(EntityBendingDeathEvent event) {
+	public void onEntityBendingDeath(EntityBendingDeathEvent event) {
+		BENDING_ENTITY_DEATH.put(event.getEntity(), event.getAbility());
+		
 		if (ConfigManager.languageConfig.get().getBoolean("DeathMessages.Enabled") && event.getEntity() instanceof Player) {
 			Ability ability = event.getAbility();
 			if (ability == null) {
diff --git a/src/com/projectkorra/projectkorra/ability/EarthAbility.java b/src/com/projectkorra/projectkorra/ability/EarthAbility.java
index 1c76c56292..cce54313a7 100755
--- a/src/com/projectkorra/projectkorra/ability/EarthAbility.java
+++ b/src/com/projectkorra/projectkorra/ability/EarthAbility.java
@@ -6,7 +6,6 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.bukkit.ChatColor;
-import org.bukkit.Effect;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Sound;
diff --git a/src/com/projectkorra/projectkorra/ability/util/AbilityLoader.java b/src/com/projectkorra/projectkorra/ability/util/AbilityLoader.java
index 6580402822..f76838310e 100755
--- a/src/com/projectkorra/projectkorra/ability/util/AbilityLoader.java
+++ b/src/com/projectkorra/projectkorra/ability/util/AbilityLoader.java
@@ -20,7 +20,6 @@
 
 import sun.reflect.ReflectionFactory;
 
-@SuppressWarnings("restriction")
 public class AbilityLoader<T> {
 	
 	private final Plugin plugin;
diff --git a/src/com/projectkorra/projectkorra/ability/util/AddonAbilityLoader.java b/src/com/projectkorra/projectkorra/ability/util/AddonAbilityLoader.java
index f9415d8700..61f0035718 100755
--- a/src/com/projectkorra/projectkorra/ability/util/AddonAbilityLoader.java
+++ b/src/com/projectkorra/projectkorra/ability/util/AddonAbilityLoader.java
@@ -5,7 +5,6 @@
 import com.projectkorra.projectkorra.event.AbilityLoadEvent;
 import com.projectkorra.projectkorra.util.FileExtensionFilter;
 
-import org.bukkit.event.Listener;
 import org.bukkit.plugin.Plugin;
 
 import java.io.File;
diff --git a/src/com/projectkorra/projectkorra/ability/util/CollisionInitializer.java b/src/com/projectkorra/projectkorra/ability/util/CollisionInitializer.java
index 7f0a994787..026b7eea69 100755
--- a/src/com/projectkorra/projectkorra/ability/util/CollisionInitializer.java
+++ b/src/com/projectkorra/projectkorra/ability/util/CollisionInitializer.java
@@ -33,9 +33,9 @@
 import com.projectkorra.projectkorra.firebending.FireManipulation;
 import com.projectkorra.projectkorra.firebending.FireShield;
 import com.projectkorra.projectkorra.firebending.WallOfFire;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireKick;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireSpin;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireWheel;
+import com.projectkorra.projectkorra.firebending.combo.FireKick;
+import com.projectkorra.projectkorra.firebending.combo.FireSpin;
+import com.projectkorra.projectkorra.firebending.combo.FireWheel;
 import com.projectkorra.projectkorra.firebending.combustion.Combustion;
 import com.projectkorra.projectkorra.firebending.lightning.Lightning;
 import com.projectkorra.projectkorra.waterbending.OctopusForm;
diff --git a/src/com/projectkorra/projectkorra/ability/util/ComboManager.java b/src/com/projectkorra/projectkorra/ability/util/ComboManager.java
index 316b23f0a6..d3793957e9 100755
--- a/src/com/projectkorra/projectkorra/ability/util/ComboManager.java
+++ b/src/com/projectkorra/projectkorra/ability/util/ComboManager.java
@@ -20,11 +20,11 @@
 import com.projectkorra.projectkorra.airbending.combo.Twister;
 import com.projectkorra.projectkorra.chiblocking.combo.Immobilize;
 import com.projectkorra.projectkorra.configuration.ConfigManager;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireKick;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireSpin;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireWheel;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.JetBlast;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.JetBlaze;
+import com.projectkorra.projectkorra.firebending.combo.FireKick;
+import com.projectkorra.projectkorra.firebending.combo.FireSpin;
+import com.projectkorra.projectkorra.firebending.combo.FireWheel;
+import com.projectkorra.projectkorra.firebending.combo.JetBlast;
+import com.projectkorra.projectkorra.firebending.combo.JetBlaze;
 import com.projectkorra.projectkorra.util.ClickType;
 import com.projectkorra.projectkorra.util.ReflectionHandler;
 import com.projectkorra.projectkorra.waterbending.combo.IceBullet;
@@ -66,7 +66,7 @@ public ComboManager() {
 			fireSpin.add(new AbilityInformation("FireShield", ClickType.SHIFT_UP));
 			COMBO_ABILITIES.put("FireSpin", new ComboAbilityInfo("FireSpin", fireSpin, FireSpin.class));
 			DESCRIPTIONS.put("FireSpin", ConfigManager.languageConfig.get().getString("Abilities.Fire.Combo.FireSpin.Description"));
-			INSTRUCTIONS.put("FireSpin", "FireBlast > FireBlast > FireShield > (Tap Shift).");
+			INSTRUCTIONS.put("FireSpin", "FireBlast > FireBlast > FireShield (Left Click) > FireShield (Tap Shift).");
 		}
 
 		if (ConfigManager.defaultConfig.get().getBoolean("Abilities.Fire.FireCombo.JetBlast.Enabled")) {
diff --git a/src/com/projectkorra/projectkorra/airbending/combo/AirSweep.java b/src/com/projectkorra/projectkorra/airbending/combo/AirSweep.java
index 20ce02d0fe..f9e3ade0a0 100755
--- a/src/com/projectkorra/projectkorra/airbending/combo/AirSweep.java
+++ b/src/com/projectkorra/projectkorra/airbending/combo/AirSweep.java
@@ -18,7 +18,7 @@
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
 import com.projectkorra.projectkorra.attribute.Attribute;
 import com.projectkorra.projectkorra.avatar.AvatarState;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireComboStream;
+import com.projectkorra.projectkorra.firebending.combo.FireComboStream;
 import com.projectkorra.projectkorra.util.DamageHandler;
 
 public class AirSweep extends AirAbility implements ComboAbility {
@@ -142,7 +142,7 @@ public void progress() {
 			for (double i = 0; i < 30; i++) {
 				Vector vec = GeneralMethods.getDirection(player.getLocation(), origin.clone().add(origToDest.clone().multiply(i / 30)));
 
-				FireComboStream fs = new FireComboStream(null, vec, player.getLocation(), range, speed, "AirSweep");
+				FireComboStream fs = new FireComboStream(player, this, vec, player.getLocation(), range, speed);
 				fs.setDensity(1);
 				fs.setSpread(0F);
 				fs.setUseNewParticles(true);
@@ -195,7 +195,7 @@ public void manageAirVectors() {
 						}
 						if (damage != 0) {
 							if (entity instanceof LivingEntity) {
-								if (fstream.getAbility().equalsIgnoreCase("AirSweep")) {
+								if (fstream.getAbility().getName().equalsIgnoreCase("AirSweep")) {
 									DamageHandler.damageEntity(entity, damage, this);
 								} else {
 									DamageHandler.damageEntity(entity, damage, this);
diff --git a/src/com/projectkorra/projectkorra/command/BindCommand.java b/src/com/projectkorra/projectkorra/command/BindCommand.java
index 97c7a9f81c..82284b6bad 100755
--- a/src/com/projectkorra/projectkorra/command/BindCommand.java
+++ b/src/com/projectkorra/projectkorra/command/BindCommand.java
@@ -4,7 +4,9 @@
 import com.projectkorra.projectkorra.Element;
 import com.projectkorra.projectkorra.Element.SubElement;
 import com.projectkorra.projectkorra.GeneralMethods;
+import com.projectkorra.projectkorra.ability.ComboAbility;
 import com.projectkorra.projectkorra.ability.CoreAbility;
+import com.projectkorra.projectkorra.ability.PassiveAbility;
 import com.projectkorra.projectkorra.configuration.ConfigManager;
 
 import org.bukkit.ChatColor;
@@ -28,6 +30,7 @@
 	private String noElement;
 	private String noElementAE;
 	private String noSubElement;
+	private String unbindable;
 
 	public BindCommand() {
 		super("bind", "/bending bind <Ability> [Slot]", ConfigManager.languageConfig.get().getString("Commands.Bind.Description"), new String[] { "bind", "b" });
@@ -39,6 +42,7 @@ public BindCommand() {
 		this.noElement = ConfigManager.languageConfig.get().getString("Commands.Bind.NoElement");
 		this.noElementAE = ConfigManager.languageConfig.get().getString("Commands.Bind.NoElementAE");
 		this.noSubElement = ConfigManager.languageConfig.get().getString("Commands.Bind.NoSubElement");
+		this.unbindable = ConfigManager.languageConfig.get().getString("Commands.Bind.Unbindable");
 	}
 
 	@Override
@@ -51,7 +55,10 @@ public void execute(CommandSender sender, List<String> args) {
 		if (coreAbil == null || coreAbil.isHiddenAbility() || !coreAbil.isEnabled()) {
 			GeneralMethods.sendBrandingMessage(sender, ChatColor.RED + abilityDoesntExist.replace("{ability}", args.get(0)));
 			return;
-		}
+		} else if (coreAbil instanceof PassiveAbility || coreAbil instanceof ComboAbility) {
+			GeneralMethods.sendBrandingMessage(sender, ChatColor.RED + unbindable.replace("{ability}", args.get(0)));
+			return;
+		} 
 
 		// bending bind [Ability]
 		if (args.size() == 1) {
diff --git a/src/com/projectkorra/projectkorra/configuration/ConfigManager.java b/src/com/projectkorra/projectkorra/configuration/ConfigManager.java
index 02b1b7883a..a03a1a3121 100755
--- a/src/com/projectkorra/projectkorra/configuration/ConfigManager.java
+++ b/src/com/projectkorra/projectkorra/configuration/ConfigManager.java
@@ -2,7 +2,6 @@
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.List;
 
 import org.bukkit.configuration.file.FileConfiguration;
 
@@ -215,6 +214,7 @@ public static void configCheck(ConfigType type) {
 			config.addDefault("Commands.Bind.NoElement", "You are not a {element}!");
 			config.addDefault("Commands.Bind.NoElementAE", "You are not an {element}!");
 			config.addDefault("Commands.Bind.NoSubElement", "You don't have access to {subelement}!");
+			config.addDefault("Commands.Bind.Unbindable", "{ability} cannot be bound!");
 
 			config.addDefault("Commands.Add.Description", "This command will allow the user to add an element to the targeted <Player>, or themselves if the target is not specified. This command is typically reserved for server administrators.");
 			config.addDefault("Commands.Add.SuccessfullyAddedCFW", "You are now also a {element}.");
@@ -1250,25 +1250,31 @@ public static void configCheck(ConfigType type) {
 			config.addDefault("Abilities.Fire.FireCombo.FireKick.Range", 7.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireKick.Damage", 3.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireKick.Cooldown", 6000);
+			config.addDefault("Abilities.Fire.FireCombo.FireKick.Speed", 1);
 			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Enabled", true);
 			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Range", 7);
 			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Damage", 3.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Knockback", 3.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Cooldown", 5000);
+			config.addDefault("Abilities.Fire.FireCombo.FireSpin.Speed", 0.3);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Enabled", true);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Range", 20.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Damage", 4.0);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Speed", 0.55);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Cooldown", 6000);
 			config.addDefault("Abilities.Fire.FireCombo.FireWheel.FireTicks", 2.5);
+			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Height", 2);
+			config.addDefault("Abilities.Fire.FireCombo.FireWheel.Radius", 1.0);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlast.Enabled", true);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlast.Speed", 1.2);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlast.Cooldown", 6000);
+			config.addDefault("Abilities.Fire.FireCombo.JetBlast.Duration", 5000);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.Enabled", true);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.Speed", 1.1);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.Damage", 4);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.Cooldown", 6000);
 			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.FireTicks", 2.5);
+			config.addDefault("Abilities.Fire.FireCombo.JetBlaze.Duration", 5000);
 
 			config.addDefault("Abilities.Chi.Passive.Acrobatics.Enabled", true);
 			config.addDefault("Abilities.Chi.Passive.Acrobatics.FallReductionFactor", 0.5);
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireCombo.java b/src/com/projectkorra/projectkorra/firebending/combo/FireCombo.java
deleted file mode 100755
index 7157b22076..0000000000
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireCombo.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.projectkorra.projectkorra.firebending.combo;
-
-import org.bukkit.entity.Player;
-
-import com.projectkorra.projectkorra.ability.ComboAbility;
-import com.projectkorra.projectkorra.ability.FireAbility;
-
-public abstract class FireCombo extends FireAbility implements ComboAbility {
-
-	public FireCombo(Player player) {
-		super(player);
-	}
-
-	@Override
-	public boolean isHarmlessAbility() {
-		// TODO Auto-generated method stub
-		return false;
-	}
-	
-	@Override
-	public boolean isCollidable() {
-		return false;
-	}
-	
-	@Override
-	public boolean isSneakAbility() {
-		return false;
-	}
-
-}
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireComboLegacy.java b/src/com/projectkorra/projectkorra/firebending/combo/FireComboLegacy.java
deleted file mode 100755
index 0ef5e254b1..0000000000
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireComboLegacy.java
+++ /dev/null
@@ -1,855 +0,0 @@
-package com.projectkorra.projectkorra.firebending.combo;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.bukkit.Effect;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.Sound;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.scheduler.BukkitRunnable;
-import org.bukkit.util.Vector;
-
-import com.projectkorra.projectkorra.GeneralMethods;
-import com.projectkorra.projectkorra.ProjectKorra;
-import com.projectkorra.projectkorra.ability.ComboAbility;
-import com.projectkorra.projectkorra.ability.ElementalAbility;
-import com.projectkorra.projectkorra.ability.FireAbility;
-import com.projectkorra.projectkorra.ability.WaterAbility;
-import com.projectkorra.projectkorra.ability.util.Collision;
-import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
-import com.projectkorra.projectkorra.avatar.AvatarState;
-import com.projectkorra.projectkorra.command.Commands;
-import com.projectkorra.projectkorra.firebending.FireJet;
-import com.projectkorra.projectkorra.firebending.util.FireDamageTimer;
-import com.projectkorra.projectkorra.util.ClickType;
-import com.projectkorra.projectkorra.util.DamageHandler;
-import com.projectkorra.projectkorra.util.ParticleEffect;
-
-/*
- * TODO: Combo classes should eventually be rewritten so that each combo is
- * treated as an individual ability. In the mean time, we will just place "fake"
- * classes so that CoreAbility will register each ability.
- */
-public class FireComboLegacy extends FireAbility implements ComboAbility {
-
-	private boolean firstTime;
-	private int progressCounter;
-	private long time;
-	private long cooldown;
-	private double damage;
-	private double speed;
-	private double range;
-	private double knockback;
-	private double fireTicks;
-	private double height;
-	private double radius;
-	private ClickType clickType;
-	private String ability;
-	private Location origin;
-	private Location location;
-	private Location destination;
-	private Vector direction;
-	private ArrayList<LivingEntity> affectedEntities;
-	private ArrayList<FireComboStream> tasks;
-
-	public FireComboLegacy(Player player, String ability) {
-		super(player);
-		this.ability = ability;
-
-		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
-			return;
-		}
-
-		this.firstTime = true;
-		this.time = System.currentTimeMillis();
-		this.affectedEntities = new ArrayList<>();
-		this.tasks = new ArrayList<>();
-
-		if (ability.equalsIgnoreCase("FireKick")) {
-			this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.FireKick.Damage");
-			this.range = getConfig().getDouble("Abilities.Fire.FireCombo.FireKick.Range");
-			this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireKick.Cooldown");
-			this.speed = 1;
-		} else if (ability.equalsIgnoreCase("FireSpin")) {
-			this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Damage");
-			this.range = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Range");
-			this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireSpin.Cooldown");
-			this.knockback = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Knockback");
-			this.speed = 0.3;
-		} else if (ability.equalsIgnoreCase("FireWheel")) {
-			this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.Damage");
-			this.range = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.Range");
-			this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.Speed");
-			this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireWheel.Cooldown");
-			this.fireTicks = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.FireTicks");
-			this.height = 2;
-			this.radius = 1;
-		} else if (ability.equalsIgnoreCase("JetBlast")) {
-			this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlast.Speed");
-			this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.JetBlast.Cooldown");
-		} else if (ability.equalsIgnoreCase("JetBlaze")) {
-			this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.Damage");
-			this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.Speed");
-			this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.JetBlaze.Cooldown");
-			this.fireTicks = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.FireTicks");
-		}
-
-		if (bPlayer.isAvatarState()) {
-			this.cooldown = 0;
-			this.damage = AvatarState.getValue(damage);
-			this.range = AvatarState.getValue(range);
-		}
-		start();
-	}
-
-	/**
-	 * Returns all of the FireCombos created by a specific player but filters
-	 * the abilities based on shift or click.
-	 */
-	public static ArrayList<FireComboLegacy> getFireCombo(Player player, ClickType type) {
-		ArrayList<FireComboLegacy> list = new ArrayList<FireComboLegacy>();
-		for (FireComboLegacy lf : getAbilities(player, FireComboLegacy.class)) {
-			if (lf.clickType == type) {
-				list.add(lf);
-			}
-		}
-		return list;
-	}
-
-	/**
-	 * This method was used for the old collision detection system. Please see
-	 * {@link Collision} for the new system.
-	 */
-	@Deprecated
-	public static boolean removeAroundPoint(Player player, String ability, Location loc, double radius) {
-		boolean removed = false;
-		for (FireComboLegacy combo : getAbilities(FireComboLegacy.class)) {
-			if (combo.getPlayer().equals(player)) {
-				continue;
-			}
-
-			if (ability.equalsIgnoreCase("FireKick") && combo.ability.equalsIgnoreCase("FireKick")) {
-				for (FireComboStream fs : combo.tasks) {
-					if (fs.getLocation() != null && fs.getLocation().getWorld() == loc.getWorld() && Math.abs(fs.getLocation().distanceSquared(loc)) <= radius * radius) {
-						fs.remove();
-						removed = true;
-					}
-				}
-			} else if (ability.equalsIgnoreCase("FireSpin") && combo.ability.equalsIgnoreCase("FireSpin")) {
-				for (FireComboStream fs : combo.tasks) {
-					if (fs.getLocation() != null && fs.getLocation().getWorld().equals(loc.getWorld())) {
-						if (Math.abs(fs.getLocation().distanceSquared(loc)) <= radius * radius) {
-							fs.remove();
-							removed = true;
-						}
-					}
-				}
-			} else if (ability.equalsIgnoreCase("FireWheel") && combo.ability.equalsIgnoreCase("FireWheel")) {
-				if (combo.location != null && Math.abs(combo.location.distanceSquared(loc)) <= radius * radius) {
-					combo.remove();
-					removed = true;
-				}
-			}
-		}
-		return removed;
-	}
-
-	public void collision(LivingEntity entity, Vector direction, FireComboStream fstream) {
-		if (GeneralMethods.isRegionProtectedFromBuild(player, "Blaze", entity.getLocation())) {
-			return;
-		}
-		entity.getLocation().getWorld().playSound(entity.getLocation(), Sound.ENTITY_VILLAGER_HURT, 0.3f, 0.3f);
-
-		if (ability.equalsIgnoreCase("FireKick")) {
-			if (!affectedEntities.contains(entity)) {
-				affectedEntities.add(entity);
-				DamageHandler.damageEntity(entity, damage, this);
-				fstream.remove();
-			}
-		} else if (ability.equalsIgnoreCase("FireSpin")) {
-			if (entity instanceof Player) {
-				if (Commands.invincible.contains(((Player) entity).getName())) {
-					return;
-				}
-			}
-			if (!affectedEntities.contains(entity)) {
-				affectedEntities.add(entity);
-				double newKnockback = bPlayer.isAvatarState() ? knockback + 0.5 : knockback;
-				DamageHandler.damageEntity(entity, damage, this);
-				entity.setVelocity(direction.normalize().multiply(newKnockback));
-				fstream.remove();
-			}
-		} else if (ability.equalsIgnoreCase("JetBlaze")) {
-			if (!affectedEntities.contains(entity)) {
-				affectedEntities.add(entity);
-				DamageHandler.damageEntity(entity, damage, this);
-				entity.setFireTicks((int) (fireTicks * 20));
-				new FireDamageTimer(entity, player);
-			}
-		} else if (ability.equalsIgnoreCase("FireWheel")) {
-			if (!affectedEntities.contains(entity)) {
-				affectedEntities.add(entity);
-				DamageHandler.damageEntity(entity, damage, this);
-				entity.setFireTicks((int) (fireTicks * 20));
-				new FireDamageTimer(entity, player);
-				this.remove();
-			}
-		}
-	}
-
-	@Override
-	public void progress() {
-		progressCounter++;
-		for (int i = 0; i < tasks.size(); i++) {
-			BukkitRunnable br = tasks.get(i);
-			if (br instanceof FireComboStream) {
-				FireComboStream fs = (FireComboStream) br;
-				if (fs.isCancelled()) {
-					tasks.remove(fs);
-				}
-			}
-		}
-
-		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
-			remove();
-			return;
-		}
-
-		if (ability.equalsIgnoreCase("FireKick")) {
-			if (destination == null) {
-				if (bPlayer.isOnCooldown("FireKick") && !bPlayer.isAvatarState()) {
-					remove();
-					return;
-				}
-
-				bPlayer.addCooldown("FireKick", cooldown);
-				Vector eyeDir = player.getEyeLocation().getDirection().normalize().multiply(range);
-				destination = player.getEyeLocation().add(eyeDir);
-
-				player.getWorld().playSound(player.getLocation(), Sound.ENTITY_HORSE_JUMP, 0.5f, 0f);
-				player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 1f);
-				for (int i = -30; i <= 30; i += 5) {
-					Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
-					vec = GeneralMethods.rotateXZ(vec, i);
-
-					FireComboStream fs = new FireComboStream(this, vec, player.getLocation(), range, speed, "FireKick");
-					fs.setSpread(0.2F);
-					fs.setDensity(5);
-					fs.setUseNewParticles(true);
-					if (tasks.size() % 3 != 0) {
-						fs.setCollides(false);
-					}
-					fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
-					tasks.add(fs);
-					player.getWorld().playSound(player.getLocation(), Sound.ITEM_FLINTANDSTEEL_USE, 0.5f, 1f);
-				}
-				location = tasks.get(0).getLocation();
-			} else if (tasks.size() == 0) {
-				remove();
-				return;
-			}
-		} else if (ability.equalsIgnoreCase("FireSpin")) {
-			if (destination == null) {
-				if (bPlayer.isOnCooldown("FireSpin") && !bPlayer.isAvatarState()) {
-					remove();
-					return;
-				}
-				bPlayer.addCooldown("FireSpin", cooldown);
-				destination = player.getEyeLocation().add(range, 0, range);
-				player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 0.5f);
-
-				for (int i = 0; i <= 360; i += 5) {
-					Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
-					vec = GeneralMethods.rotateXZ(vec, i - 180);
-					vec.setY(0);
-
-					FireComboStream fs = new FireComboStream(this, vec, player.getLocation().clone().add(0, 1, 0), range, speed, "FireSpin");
-					fs.setSpread(0.0F);
-					fs.setDensity(1);
-					fs.setUseNewParticles(true);
-					if (tasks.size() % 10 != 0) {
-						fs.setCollides(false);
-					}
-					fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
-					tasks.add(fs);
-				}
-			}
-
-			if (tasks.size() == 0) {
-				remove();
-				return;
-			}
-		} else if (ability.equalsIgnoreCase("JetBlast")) {
-			if (System.currentTimeMillis() - time > 5000) {
-				remove();
-				return;
-			} else if (hasAbility(player, FireJet.class)) {
-				if (firstTime) {
-					if (bPlayer.isOnCooldown("JetBlast") && !bPlayer.isAvatarState()) {
-						remove();
-						return;
-					}
-
-					bPlayer.addCooldown("JetBlast", cooldown);
-					firstTime = false;
-					float spread = 0F;
-					ParticleEffect.LARGE_EXPLODE.display(player.getLocation(), spread, spread, spread, 0, 1);
-					player.getWorld().playSound(player.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 15, 0F);
-				}
-				FireJet fj = getAbility(player, FireJet.class);
-				fj.setSpeed(speed);
-				FireComboStream fs = new FireComboStream(this, player.getVelocity().clone().multiply(-1), player.getLocation(), 3, 0.5, "JetBlast");
-
-				fs.setDensity(1);
-				fs.setSpread(0.9F);
-				fs.setUseNewParticles(true);
-				fs.setCollides(false);
-				fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
-				tasks.add(fs);
-			}
-		} else if (ability.equalsIgnoreCase("JetBlaze")) {
-			if (firstTime) {
-				if (bPlayer.isOnCooldown("JetBlaze") && !bPlayer.isAvatarState()) {
-					remove();
-					return;
-				}
-				bPlayer.addCooldown("JetBlaze", cooldown);
-				firstTime = false;
-			} else if (System.currentTimeMillis() - time > 5000) {
-				remove();
-				return;
-			} else if (hasAbility(player, FireJet.class)) {
-				direction = player.getVelocity().clone().multiply(-1);
-				FireJet fj = getAbility(player, FireJet.class);
-				fj.setSpeed(speed);
-
-				FireComboStream fs = new FireComboStream(this, direction, player.getLocation(), 5, 1, "JetBlaze");
-				fs.setDensity(8);
-				fs.setSpread(1.0F);
-				fs.setUseNewParticles(true);
-				fs.setCollisionRadius(3);
-				fs.setParticleEffect(ParticleEffect.LARGE_SMOKE);
-				if (progressCounter % 5 != 0) {
-					fs.setCollides(false);
-				}
-				fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
-				tasks.add(fs);
-				if (progressCounter % 4 == 0) {
-					player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 1, 0F);
-				}
-			}
-		} else if (ability.equalsIgnoreCase("FireWheel")) {
-			if (location == null) {
-				if (bPlayer.isOnCooldown("FireWheel") && !bPlayer.isAvatarState()) {
-					remove();
-					return;
-				}
-				bPlayer.addCooldown("FireWheel", cooldown);
-				origin = player.getLocation();
-
-				if (GeneralMethods.getTopBlock(player.getLocation(), 3, 3) == null) {
-					remove();
-					return;
-				}
-
-				location = player.getLocation();
-				direction = player.getEyeLocation().getDirection().clone().normalize();
-				direction.setY(0);
-			} else if (location.distanceSquared(origin) > range * range) {
-				remove();
-				return;
-			}
-
-			Block topBlock = GeneralMethods.getTopBlock(location, 2, -4);
-			if (topBlock.getType().equals(Material.SNOW)) {
-
-				topBlock = topBlock.getLocation().add(0, -1, 0).getBlock();
-			}
-			if (topBlock == null || (WaterAbility.isWaterbendable(player, ability, topBlock) && !isPlant(topBlock))) {
-
-				remove();
-				return;
-			} else if (topBlock.getType() == Material.FIRE || ElementalAbility.isPlant(topBlock)) {
-				topBlock = topBlock.getLocation().add(0, -1, 0).getBlock();
-			}
-			location.setY(topBlock.getY() + height);
-			FireComboStream fs = new FireComboStream(this, direction, location.clone().add(0, -1, 0), 5, 1, "FireWheel");
-
-			fs.setDensity(0);
-			fs.setSinglePoint(true);
-			fs.setCollisionRadius(1.5);
-			fs.setCollides(true);
-			fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
-			tasks.add(fs);
-
-			for (double i = -180; i <= 180; i += 3) {
-				Location tempLoc = location.clone();
-				Vector newDir = direction.clone().multiply(radius * Math.cos(Math.toRadians(i)));
-				tempLoc.add(newDir);
-				tempLoc.setY(tempLoc.getY() + (radius * Math.sin(Math.toRadians(i))));
-				ParticleEffect.FLAME.display(tempLoc, 0, 0, 0, 0, 1);
-			}
-
-			location = location.add(direction.clone().multiply(speed));
-			location.getWorld().playSound(location, Sound.BLOCK_FIRE_AMBIENT, 1, 1);
-		}
-	}
-
-	/**
-	 * Removes this instance of FireCombo, cleans up any blocks that are
-	 * remaining in totalBlocks, and cancels any remaining tasks.
-	 */
-	@Override
-	public void remove() {
-		super.remove();
-		for (BukkitRunnable task : tasks) {
-			task.cancel();
-		}
-	}
-
-	public static class FireComboStream extends BukkitRunnable {
-		private boolean useNewParticles;
-		private boolean cancelled;
-		private boolean collides;
-		private boolean singlePoint;
-		private int density;
-		private int checkCollisionDelay;
-		private int checkCollisionCounter;
-		private float spread;
-		private double collisionRadius;
-		private double speed;
-		private double distance;
-		ParticleEffect particleEffect;
-		private FireComboLegacy fireCombo;
-		private Vector direction;
-		private Location initialLocation;
-		private Location location;
-		private String ability;
-
-		public FireComboStream(FireComboLegacy fireCombo, Vector direction, Location location, double distance, double speed, String ability) {
-			this.useNewParticles = false;
-			this.cancelled = false;
-			this.collides = true;
-			this.singlePoint = false;
-			this.density = 1;
-			this.checkCollisionDelay = 1;
-			this.checkCollisionCounter = 0;
-			this.spread = 0;
-			this.collisionRadius = 2;
-			this.particleEffect = ParticleEffect.FLAME;
-			this.fireCombo = fireCombo;
-			this.direction = direction;
-			this.speed = speed;
-			this.initialLocation = location.clone();
-			this.location = location.clone();
-			this.distance = distance;
-			this.ability = ability;
-		}
-
-		@Override
-		public void run() {
-			Block block = location.getBlock();
-			if (block.getRelative(BlockFace.UP).getType() != Material.AIR && !ElementalAbility.isPlant(block)) {
-				remove();
-				return;
-			}
-			for (int i = 0; i < density; i++) {
-				if (useNewParticles) {
-					particleEffect.display(location, spread, spread, spread, 0, 1);
-				} else {
-					location.getWorld().playEffect(location, Effect.MOBSPAWNER_FLAMES, 0, 15);
-				}
-			}
-
-			location.add(direction.normalize().multiply(speed));
-			if (initialLocation.distanceSquared(location) > distance * distance) {
-				remove();
-				return;
-			} else if (collides && checkCollisionCounter % checkCollisionDelay == 0) {
-				for (Entity entity : GeneralMethods.getEntitiesAroundPoint(location, collisionRadius)) {
-					if (entity instanceof LivingEntity && !entity.equals(fireCombo.getPlayer())) {
-						fireCombo.collision((LivingEntity) entity, direction, this);
-					}
-				}
-			}
-
-			checkCollisionCounter++;
-			if (singlePoint) {
-				remove();
-			}
-		}
-
-		@Override
-		public void cancel() {
-			remove();
-		}
-
-		public Vector getDirection() {
-			return this.direction.clone();
-		}
-
-		public Location getLocation() {
-			return this.location;
-		}
-
-		public String getAbility() {
-			return this.ability;
-		}
-
-		public boolean isCancelled() {
-			return cancelled;
-		}
-
-		public void remove() {
-			super.cancel();
-			this.cancelled = true;
-		}
-
-		public void setCheckCollisionDelay(int delay) {
-			this.checkCollisionDelay = delay;
-		}
-
-		public void setCollides(boolean b) {
-			this.collides = b;
-		}
-
-		public void setCollisionRadius(double radius) {
-			this.collisionRadius = radius;
-		}
-
-		public void setDensity(int density) {
-			this.density = density;
-		}
-
-		public void setParticleEffect(ParticleEffect effect) {
-			this.particleEffect = effect;
-		}
-
-		public void setSinglePoint(boolean b) {
-			this.singlePoint = b;
-		}
-
-		public void setSpread(float spread) {
-			this.spread = spread;
-		}
-
-		public void setUseNewParticles(boolean b) {
-			useNewParticles = b;
-		}
-	}
-
-	@Override
-	public String getName() {
-		return ability != null ? ability : "FireCombo";
-	}
-
-	@Override
-	public Location getLocation() {
-		return location != null ? location : origin;
-	}
-
-	@Override
-	public long getCooldown() {
-		return cooldown;
-	}
-
-	@Override
-	public boolean isSneakAbility() {
-		return true;
-	}
-
-	@Override
-	public boolean isHarmlessAbility() {
-		return false;
-	}
-
-	@Override
-	public boolean isCollidable() {
-		// Override in subclasses
-		return false;
-	}
-
-	@Override
-	public List<Location> getLocations() {
-		ArrayList<Location> locations = new ArrayList<>();
-		for (FireComboStream stream : tasks) {
-			locations.add(stream.getLocation());
-		}
-		return locations;
-	}
-
-	@Override
-	public String getInstructions() {
-		return null;
-	}
-
-	@Override
-	public Object createNewComboInstance(Player player) {
-		return null;
-	}
-
-	@Override
-	public ArrayList<AbilityInformation> getCombination() {
-		return null;
-	}
-
-	public void handleCollisionFireStreams(Collision collision) {
-		if (collision.isRemovingFirst()) {
-			ArrayList<FireComboStream> newTasks = new ArrayList<>();
-			double collisionDistanceSquared = Math.pow(getCollisionRadius() + collision.getAbilitySecond().getCollisionRadius(), 2);
-			// Remove all of the streams that are by this specific ourLocation.
-			// Don't just do a single stream at a time or this algorithm becomes O(n^2) with
-			// Collision's detection algorithm.
-			for (FireComboStream stream : tasks) {
-				if (stream.getLocation().distanceSquared(collision.getLocationSecond()) > collisionDistanceSquared) {
-					newTasks.add(stream);
-				} else {
-					stream.cancel();
-				}
-			}
-			tasks = newTasks;
-		}
-	}
-
-	public boolean isHiddenAbility() {
-		return true;
-	}
-
-	public boolean isFirstTime() {
-		return firstTime;
-	}
-
-	public void setFirstTime(boolean firstTime) {
-		this.firstTime = firstTime;
-	}
-
-	public int getProgressCounter() {
-		return progressCounter;
-	}
-
-	public void setProgressCounter(int progressCounter) {
-		this.progressCounter = progressCounter;
-	}
-
-	public long getTime() {
-		return time;
-	}
-
-	public void setTime(long time) {
-		this.time = time;
-	}
-
-	public double getDamage() {
-		return damage;
-	}
-
-	public void setDamage(double damage) {
-		this.damage = damage;
-	}
-
-	public double getSpeed() {
-		return speed;
-	}
-
-	public void setSpeed(double speed) {
-		this.speed = speed;
-	}
-
-	public double getRange() {
-		return range;
-	}
-
-	public void setRange(double range) {
-		this.range = range;
-	}
-
-	public double getKnockback() {
-		return knockback;
-	}
-
-	public void setKnockback(double knockback) {
-		this.knockback = knockback;
-	}
-
-	public double getFireTicks() {
-		return fireTicks;
-	}
-
-	public void setFireTicks(double fireTicks) {
-		this.fireTicks = fireTicks;
-	}
-
-	public double getHeight() {
-		return height;
-	}
-
-	public void setHeight(double height) {
-		this.height = height;
-	}
-
-	public double getRadius() {
-		return radius;
-	}
-
-	public void setRadius(double radius) {
-		this.radius = radius;
-	}
-
-	public ClickType getClickType() {
-		return clickType;
-	}
-
-	public void setClickType(ClickType clickType) {
-		this.clickType = clickType;
-	}
-
-	public String getAbility() {
-		return ability;
-	}
-
-	public void setAbility(String ability) {
-		this.ability = ability;
-	}
-
-	public Location getOrigin() {
-		return origin;
-	}
-
-	public void setOrigin(Location origin) {
-		this.origin = origin;
-	}
-
-	public Location getDestination() {
-		return destination;
-	}
-
-	public void setDestination(Location destination) {
-		this.destination = destination;
-	}
-
-	public Vector getDirection() {
-		return direction;
-	}
-
-	public void setDirection(Vector direction) {
-		this.direction = direction;
-	}
-
-	public ArrayList<LivingEntity> getAffectedEntities() {
-		return affectedEntities;
-	}
-
-	public ArrayList<FireComboStream> getTasks() {
-		return tasks;
-	}
-
-	public void setTasks(ArrayList<FireComboStream> tasks) {
-		this.tasks = tasks;
-	}
-
-	public void setCooldown(long cooldown) {
-		this.cooldown = cooldown;
-	}
-
-	public void setLocation(Location location) {
-		this.location = location;
-	}
-
-	// Combo subclasses need to be static to be reflectively called in ComboManager
-	public static class FireKick extends FireComboLegacy {
-
-		public FireKick(Player player) {
-			super(player, "FireKick");
-		}
-
-		@Override
-		public String getName() {
-			return "FireKick";
-		}
-
-		@Override
-		public boolean isCollidable() {
-			return true;
-		}
-
-		@Override
-		public void handleCollision(Collision collision) {
-			handleCollisionFireStreams(collision);
-		}
-
-	}
-
-	public static class FireSpin extends FireComboLegacy {
-
-		public FireSpin(Player player) {
-			super(player, "FireSpin");
-		}
-
-		@Override
-		public String getName() {
-			return "FireSpin";
-		}
-
-		@Override
-		public boolean isCollidable() {
-			return true;
-		}
-
-		@Override
-		public void handleCollision(Collision collision) {
-			handleCollisionFireStreams(collision);
-		}
-
-	}
-
-	public static class FireWheel extends FireComboLegacy {
-
-		public FireWheel(Player player) {
-			super(player, "FireWheel");
-		}
-
-		@Override
-		public String getName() {
-			return "FireWheel";
-		}
-
-		@Override
-		public boolean isCollidable() {
-			return true;
-		}
-
-	}
-
-	public static class JetBlast extends FireComboLegacy {
-
-		public JetBlast(Player player) {
-			super(player, "JetBlast");
-		}
-
-		@Override
-		public String getName() {
-			return "JetBlast";
-		}
-
-	}
-
-	public static class JetBlaze extends FireComboLegacy {
-
-		public JetBlaze(Player player) {
-			super(player, "JetBlaze");
-		}
-
-		@Override
-		public String getName() {
-			return "JetBlaze";
-		}
-
-	}
-
-}
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireComboStream.java b/src/com/projectkorra/projectkorra/firebending/combo/FireComboStream.java
index e19516f81c..ea03448b11 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireComboStream.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/FireComboStream.java
@@ -3,30 +3,33 @@
 import org.bukkit.Effect;
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.Sound;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.util.Vector;
 
+import com.projectkorra.projectkorra.BendingPlayer;
 import com.projectkorra.projectkorra.GeneralMethods;
+import com.projectkorra.projectkorra.ability.CoreAbility;
 import com.projectkorra.projectkorra.ability.ElementalAbility;
-import com.projectkorra.projectkorra.ability.FireAbility;
+import com.projectkorra.projectkorra.command.Commands;
+import com.projectkorra.projectkorra.firebending.util.FireDamageTimer;
+import com.projectkorra.projectkorra.util.DamageHandler;
 import com.projectkorra.projectkorra.util.ParticleEffect;
 
-@Deprecated
 /***
  * Is only here for legacy purposes. All fire combos
  * used to use a form of this stream for all their
  * progress methods. If someone else was reliant on
  * that, they can use this ability instead.
  */
-public class FireComboStream extends FireAbility {
-
-	public FireCombo baseAbility;
-	
+public class FireComboStream extends BukkitRunnable  {
 	private boolean useNewParticles;
+	private boolean cancelled;
 	private boolean collides;
 	private boolean singlePoint;
 	private int density;
@@ -36,19 +39,20 @@
 	private double collisionRadius;
 	private double speed;
 	private double distance;
+	private double damage;
+	private double fireTicks;
+	private double knockback;
 	ParticleEffect particleEffect;
-	private FireComboLegacy fireCombo;
+	private Player player;
+	private BendingPlayer bPlayer;
+	private CoreAbility coreAbility;
 	private Vector direction;
 	private Location initialLocation;
 	private Location location;
-	private FireStreamCollision collision;
 	
-	public FireComboStream(Player player, FireCombo base, Vector direction, Location location, double distance, double speed) {
-		super(player);
-		
-		this.baseAbility = base;
-		
+	public FireComboStream(Player player, CoreAbility coreAbility, Vector direction, Location location, double distance, double speed) {
 		this.useNewParticles = false;
+		this.cancelled = false;
 		this.collides = true;
 		this.singlePoint = false;
 		this.density = 1;
@@ -57,15 +61,18 @@ public FireComboStream(Player player, FireCombo base, Vector direction, Location
 		this.spread = 0;
 		this.collisionRadius = 2;
 		this.particleEffect = ParticleEffect.FLAME;
+		this.player = player;
+		this.bPlayer = BendingPlayer.getBendingPlayer(player);
+		this.coreAbility = coreAbility;
 		this.direction = direction;
 		this.speed = speed;
 		this.initialLocation = location.clone();
 		this.location = location.clone();
 		this.distance = distance;
 	}
-
+	
 	@Override
-	public void progress() {
+	public void run() {
 		Block block = location.getBlock();
 		if (block.getRelative(BlockFace.UP).getType() != Material.AIR && !ElementalAbility.isPlant(block)) {
 			remove();
@@ -85,10 +92,8 @@ public void progress() {
 			return;
 		} else if (collides && checkCollisionCounter % checkCollisionDelay == 0) {
 			for (Entity entity : GeneralMethods.getEntitiesAroundPoint(location, collisionRadius)) {
-				if (entity instanceof LivingEntity && !entity.equals(fireCombo.getPlayer())) {
-					if (collision != null) {
-						collision.run();
-					}
+				if (entity instanceof LivingEntity && !entity.equals(coreAbility.getPlayer())) {
+					collision((LivingEntity) entity, direction, coreAbility);
 				}
 			}
 		}
@@ -98,43 +103,82 @@ public void progress() {
 			remove();
 		}
 	}
-
-	@Override
-	public boolean isSneakAbility() {
-		return false;
+	
+	public void collision(LivingEntity entity, Vector direction, CoreAbility coreAbility) {
+		if (GeneralMethods.isRegionProtectedFromBuild(player, "Blaze", entity.getLocation())) {
+			return;
+		}
+		entity.getLocation().getWorld().playSound(entity.getLocation(), Sound.ENTITY_VILLAGER_HURT, 0.3f, 0.3f);
+
+		if (coreAbility.getName().equalsIgnoreCase("FireKick")) {
+			FireKick fireKick = CoreAbility.getAbility(player, FireKick.class);
+			
+			if (!fireKick.getAffectedEntities().contains(entity)) {
+				fireKick.getAffectedEntities().add(entity);
+				DamageHandler.damageEntity(entity, damage, coreAbility);
+				coreAbility.remove();
+			}
+		} else if (coreAbility.getName().equalsIgnoreCase("FireSpin")) {
+			FireSpin fireSpin = (FireSpin) CoreAbility.getAbility(player, FireSpin.class);
+			
+			if (entity instanceof Player) {
+				if (Commands.invincible.contains(((Player) entity).getName())) {
+					return;
+				}
+			}
+			if (!fireSpin.getAffectedEntities().contains(entity)) {
+				fireSpin.getAffectedEntities().add(entity);
+				double newKnockback = bPlayer.isAvatarState() ? knockback + 0.5 : knockback;
+				DamageHandler.damageEntity(entity, damage, coreAbility);
+				entity.setVelocity(direction.normalize().multiply(newKnockback));
+				coreAbility.remove();
+			}
+		} else if (coreAbility.getName().equalsIgnoreCase("JetBlaze")) {
+			JetBlaze jetBlaze = (JetBlaze) CoreAbility.getAbility(player, JetBlaze.class);
+			
+			if (!jetBlaze.getAffectedEntities().contains(entity)) {
+				jetBlaze.getAffectedEntities().add(entity);
+				DamageHandler.damageEntity(entity, damage, coreAbility);
+				entity.setFireTicks((int) (fireTicks * 20));
+				new FireDamageTimer(entity, player);
+			}
+		} else if (coreAbility.getName().equalsIgnoreCase("FireWheel")) {
+			FireWheel fireWheel = (FireWheel) CoreAbility.getAbility(player, FireWheel.class);
+			
+			if (!fireWheel.getAffectedEntities().contains(entity)) {
+				fireWheel.getAffectedEntities().add(entity);
+				DamageHandler.damageEntity(entity, damage, coreAbility);
+				entity.setFireTicks((int) (fireTicks * 20));
+				new FireDamageTimer(entity, player);
+				this.remove();
+			}
+		}
 	}
-
+	
 	@Override
-	public long getCooldown() {
-		return 0;
+	public void cancel() {
+		remove();
 	}
 
-	@Override
-	public String getName() {
-		return "FireComboStream";
+	public Vector getDirection() {
+		return this.direction.clone();
 	}
 
-	@Override
 	public Location getLocation() {
-		return location;
+		return this.location;
 	}
-	
-	@Override
-	public boolean isHiddenAbility() {
-		return true;
+
+	public boolean isCancelled() {
+		return cancelled;
 	}
 
-	@Override
-	public boolean isHarmlessAbility() {
-		return false;
+	public void remove() {
+		super.cancel();
+		this.cancelled = true;
 	}
 	
-	public Vector getDirection() {
-		return this.direction.clone();
-	}
-
-	public FireCombo getBaseAbility() {
-		return this.baseAbility;
+	public CoreAbility getAbility() {
+		return coreAbility;
 	}
 
 	public void setCheckCollisionDelay(int delay) {
@@ -152,6 +196,18 @@ public void setCollisionRadius(double radius) {
 	public void setDensity(int density) {
 		this.density = density;
 	}
+	
+	public void setDamage(double damage) {
+		this.damage = damage;
+	}
+	
+	public void setKnockback(double knockback) {
+		this.knockback = knockback;
+	}
+	
+	public void setFireTicks(double fireTicks) {
+		this.fireTicks = fireTicks;
+	}
 
 	public void setParticleEffect(ParticleEffect effect) {
 		this.particleEffect = effect;
@@ -168,23 +224,4 @@ public void setSpread(float spread) {
 	public void setUseNewParticles(boolean b) {
 		useNewParticles = b;
 	}
-	
-	public abstract class FireStreamCollision implements Runnable {
-		
-		protected FireComboStream stream;
-		public FireStreamCollision(FireComboStream stream) {
-			this.stream = stream;
-		}
-		@Override
-		public abstract void run();
-		
-	}
-	
-	public FireStreamCollision getCollision() {
-		return collision;
-	}
-	
-	public void setCollision(FireStreamCollision collision) {
-		this.collision = collision;
-	}
 }
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireKick.java b/src/com/projectkorra/projectkorra/firebending/combo/FireKick.java
index dffb2dce9a..9f3d18230d 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireKick.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/FireKick.java
@@ -1,145 +1,171 @@
 package com.projectkorra.projectkorra.firebending.combo;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import org.bukkit.Location;
-import org.bukkit.Material;
 import org.bukkit.Sound;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.util.Vector;
 
 import com.projectkorra.projectkorra.GeneralMethods;
-import com.projectkorra.projectkorra.ability.ElementalAbility;
+import com.projectkorra.projectkorra.ProjectKorra;
+import com.projectkorra.projectkorra.ability.ComboAbility;
+import com.projectkorra.projectkorra.ability.FireAbility;
+import com.projectkorra.projectkorra.ability.util.Collision;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
 import com.projectkorra.projectkorra.avatar.AvatarState;
-import com.projectkorra.projectkorra.util.ClickType;
-import com.projectkorra.projectkorra.util.DamageHandler;
-import com.projectkorra.projectkorra.util.ParticleEffect;
 
-public class FireKick extends FireCombo {
+public class FireKick extends FireAbility implements ComboAbility {
 
-	private int moveCounter;
 	private long cooldown;
 	private double damage;
 	private double speed;
 	private double range;
 	private Location location;
 	private Location destination;
-	private Vector direction;
 	private ArrayList<LivingEntity> affectedEntities;
-	private Map<Vector, Location> streams;
-	private Location origin;
+	private ArrayList<BukkitRunnable> tasks;
 	
 	public FireKick(Player player) {
 		super(player);
-		
+
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
+			return;
+		}
+
+		this.affectedEntities = new ArrayList<>();
+		this.tasks = new ArrayList<>();
+			
 		this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.FireKick.Damage");
 		this.range = getConfig().getDouble("Abilities.Fire.FireCombo.FireKick.Range");
 		this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireKick.Cooldown");
-		
+		this.speed = getConfig().getLong("Abilities.Fire.FireCombo.FireKick.Speed");;
+			
 		if (bPlayer.isAvatarState()) {
 			this.cooldown = 0;
 			this.damage = AvatarState.getValue(damage);
 			this.range = AvatarState.getValue(range);
 		}
-		
-		this.streams = new HashMap<Vector, Location>();
-		this.affectedEntities = new ArrayList<LivingEntity>();
-		
-		if (bPlayer.isOnCooldown("FireKick") && !bPlayer.isAvatarState()) {
-			remove();
-			return;
-		}
 
-		bPlayer.addCooldown(this);
-		this.origin = player.getLocation();
-		Vector eyeDir = player.getEyeLocation().getDirection().normalize().multiply(range);
-		destination = player.getEyeLocation().add(eyeDir);
-
-		player.getWorld().playSound(player.getLocation(), Sound.ENTITY_HORSE_JUMP, 0.5f, 0f);
-		player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 1f);
-		for (int i = -30; i <= 30; i += 5) {
-			Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
-			vec = GeneralMethods.rotateXZ(vec, i);
-			streams.put(vec, player.getLocation());
-			player.getWorld().playSound(player.getLocation(), Sound.ITEM_FLINTANDSTEEL_USE, 0.5f, 1f);
-		}
-		
 		start();
 	}
 
-	@Override
-	public Object createNewComboInstance(Player player) {
-		return new FireKick(player);
-	}
+		@Override
+		public String getName() {
+			return "FireKick";
+		}
 
-	@Override
-	public ArrayList<AbilityInformation> getCombination() {
-		ArrayList<AbilityInformation> fireKick = new ArrayList<>();
-		fireKick.add(new AbilityInformation("FireBlast", ClickType.LEFT_CLICK));
-		fireKick.add(new AbilityInformation("FireBlast", ClickType.LEFT_CLICK));
-		fireKick.add(new AbilityInformation("FireBlast", ClickType.SHIFT_DOWN));
-		fireKick.add(new AbilityInformation("FireBlast", ClickType.LEFT_CLICK));
-		return fireKick;
-	}
-	
-	@Override
-	public String getInstructions() {
-		return "FireBlast > FireBlast > (Hold Shift) > FireBlast.";
-	}
+		@Override
+		public boolean isCollidable() {
+			return true;
+		}
 
 	@Override
 	public void progress() {
-		if (!bPlayer.canBendIgnoreBinds(this)) {
+		for (int i = 0; i < tasks.size(); i++) {
+			BukkitRunnable br = tasks.get(i);
+			if (br instanceof FireComboStream) {
+				FireComboStream fs = (FireComboStream) br;
+				if (fs.isCancelled()) {
+					tasks.remove(fs);
+				}
+			}
+		}
+
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
 			remove();
 			return;
 		}
-		
-		for (Vector vec : streams.keySet()) {
-			Location loc = streams.get(vec);
-			Block block = loc.getBlock();
-			if (block.getRelative(BlockFace.UP).getType() != Material.AIR && !ElementalAbility.isPlant(block)) {
-				streams.remove(vec);
-				continue;
+
+		if (destination == null) {
+			if (bPlayer.isOnCooldown("FireKick") && !bPlayer.isAvatarState()) {
+				remove();
+				return;
 			}
-			
-			ParticleEffect.FLAME.display(loc, 0.2F, 0.2F, 0.2F, 0, 5);
-
-			loc.add(direction.normalize().multiply(speed));
-			if (origin.distanceSquared(loc) > range * range) {
-				streams.remove(vec);
-				continue;
-			} else if (moveCounter % 3 != 0) {
-				for (Entity entity : GeneralMethods.getEntitiesAroundPoint(location, 2)) {
-					if (entity instanceof LivingEntity && !entity.equals(this.getPlayer())) {
-						entity.getLocation().getWorld().playSound(entity.getLocation(), Sound.ENTITY_VILLAGER_HURT, 0.3f, 0.3f);
-						if (!affectedEntities.contains(entity)) {
-							affectedEntities.add((LivingEntity) entity);
-							DamageHandler.damageEntity(entity, damage, this);
-							streams.remove(vec);
-						}
-					}
+
+			bPlayer.addCooldown("FireKick", cooldown);
+			Vector eyeDir = player.getEyeLocation().getDirection().normalize().multiply(range);
+			destination = player.getEyeLocation().add(eyeDir);
+
+			player.getWorld().playSound(player.getLocation(), Sound.ENTITY_HORSE_JUMP, 0.5f, 0f);
+			player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 1f);
+			for (int i = -30; i <= 30; i += 5) {
+				Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
+				vec = GeneralMethods.rotateXZ(vec, i);
+
+				FireComboStream fs = new FireComboStream(player, this, vec, player.getLocation(), range, speed);
+				fs.setSpread(0.2F);
+				fs.setDensity(5);
+				fs.setUseNewParticles(true);
+				fs.setDamage(damage);
+				if (tasks.size() % 3 != 0) {
+					fs.setCollides(false);
 				}
+				fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
+				tasks.add(fs);
+				player.getWorld().playSound(player.getLocation(), Sound.ITEM_FLINTANDSTEEL_USE, 0.5f, 1f);
 			}
-
-			moveCounter++;
-		}
-		
-		if (streams.size() == 0) {
+		} else if (tasks.size() == 0) {
 			remove();
 			return;
 		}
+
+	}
+
+	@Override
+	public void remove() {
+		super.remove();
+		for (BukkitRunnable task : tasks) {
+			task.cancel();
+		}
+	}
+	
+	@Override
+	public void handleCollision(Collision collision) {
+		if (collision.isRemovingFirst()) {
+			ArrayList<BukkitRunnable> newTasks = new ArrayList<>();
+			double collisionDistanceSquared = Math.pow(getCollisionRadius() + collision.getAbilitySecond().getCollisionRadius(), 2);
+			// Remove all of the streams that are by this specific ourLocation.
+			// Don't just do a single stream at a time or this algorithm becomes O(n^2) with
+			// Collision's detection algorithm.
+			for (BukkitRunnable task : getTasks()) {
+				if (task instanceof FireComboStream) {
+					FireComboStream stream = (FireComboStream) task;
+					if (stream.getLocation().distanceSquared(collision.getLocationSecond()) > collisionDistanceSquared) {
+						newTasks.add(stream);
+					} else {
+						stream.cancel();
+					}
+				} else {
+					newTasks.add(task);
+				}
+			}
+			setTasks(newTasks);
+		}
 	}
 
+	@Override
+	public List<Location> getLocations() {
+		ArrayList<Location> locations = new ArrayList<>();
+		for (BukkitRunnable task : getTasks()) {
+			if (task instanceof FireComboStream) {
+				FireComboStream stream = (FireComboStream) task;
+				locations.add(stream.getLocation());
+			}
+		}
+		return locations;
+	}
+	
 	@Override
 	public boolean isSneakAbility() {
+		return true;
+	}
+
+	@Override
+	public boolean isHarmlessAbility() {
 		return false;
 	}
 
@@ -149,20 +175,29 @@ public long getCooldown() {
 	}
 
 	@Override
-	public String getName() {
-		return "FireKick";
+	public Location getLocation() {
+		return location;
 	}
 
 	@Override
-	public Location getLocation() {
-		return player.getLocation();
+	public Object createNewComboInstance(Player player) {
+		return null;
 	}
-	
+
 	@Override
-	public List<Location> getLocations() {
-		List<Location> locs = new ArrayList<Location>();
-		locs.addAll(streams.values());
-		return locs;
+	public ArrayList<AbilityInformation> getCombination() {
+		return null;
+	}
+
+	public ArrayList<LivingEntity> getAffectedEntities() {
+		return affectedEntities;
+	}
+	
+	public ArrayList<BukkitRunnable> getTasks() {
+		return tasks;
 	}
 
-}
+	public void setTasks(ArrayList<BukkitRunnable> tasks) {
+		this.tasks = tasks;
+	}
+}
\ No newline at end of file
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireSpin.java b/src/com/projectkorra/projectkorra/firebending/combo/FireSpin.java
index 179f372fe6..38c7a252ba 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireSpin.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/FireSpin.java
@@ -1,126 +1,163 @@
 package com.projectkorra.projectkorra.firebending.combo;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import org.bukkit.Location;
-import org.bukkit.Material;
 import org.bukkit.Sound;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
+import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.util.Vector;
 
 import com.projectkorra.projectkorra.GeneralMethods;
-import com.projectkorra.projectkorra.ability.ElementalAbility;
+import com.projectkorra.projectkorra.ProjectKorra;
+import com.projectkorra.projectkorra.ability.ComboAbility;
+import com.projectkorra.projectkorra.ability.FireAbility;
+import com.projectkorra.projectkorra.ability.util.Collision;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
-import com.projectkorra.projectkorra.util.ClickType;
-import com.projectkorra.projectkorra.util.DamageHandler;
-import com.projectkorra.projectkorra.util.ParticleEffect;
+import com.projectkorra.projectkorra.avatar.AvatarState;
 
-public class FireSpin extends FireCombo {
+public class FireSpin extends FireAbility implements ComboAbility {
 
-	private int movementCounter;
 	private long cooldown;
 	private double damage;
 	private double speed;
 	private double range;
 	private double knockback;
-	private Location origin;
-	private Location location;
 	private Location destination;
-	private Vector direction;
 	private ArrayList<LivingEntity> affectedEntities;
-	private Map<Vector, Location> streams;
+	private ArrayList<BukkitRunnable> tasks;
 	
 	public FireSpin(Player player) {
 		super(player);
-		
+
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
+			return;
+		}
+
+		this.affectedEntities = new ArrayList<>();
+		this.tasks = new ArrayList<>();
+
 		this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Damage");
 		this.range = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Range");
 		this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireSpin.Cooldown");
 		this.knockback = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Knockback");
-		this.speed = 0.3;
-		
-		this.streams = new HashMap<Vector, Location>();
-		this.affectedEntities = new ArrayList<LivingEntity>();
-		
-		if (bPlayer.isOnCooldown("FireSpin") && !bPlayer.isAvatarState()) {
-			remove();
-			return;
-		}
-		bPlayer.addCooldown(this);
-		destination = player.getEyeLocation().add(range, 0, range);
-		player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 0.5f);
-
-		for (int i = 0; i <= 360; i += 5) {
-			Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
-			vec = GeneralMethods.rotateXZ(vec, i - 180);
-			vec.setY(0);
-			
-			streams.put(vec, player.getLocation());
+		this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.FireSpin.Speed");
+
+		if (bPlayer.isAvatarState()) {
+			this.cooldown = 0;
+			this.damage = AvatarState.getValue(damage);
+			this.range = AvatarState.getValue(range);
 		}
 		
 		start();
 	}
 
-	@Override
-	public Object createNewComboInstance(Player player) {
-		return new FireSpin(player);
-	}
-
-	@Override
-	public ArrayList<AbilityInformation> getCombination() {
-		ArrayList<AbilityInformation> fireSpin = new ArrayList<AbilityInformation>();
-		fireSpin.add(new AbilityInformation("FireBlast", ClickType.LEFT_CLICK));
-		fireSpin.add(new AbilityInformation("FireBlast", ClickType.LEFT_CLICK));
-		fireSpin.add(new AbilityInformation("FireShield", ClickType.LEFT_CLICK));
-		fireSpin.add(new AbilityInformation("FireShield", ClickType.SHIFT_DOWN));
-		fireSpin.add(new AbilityInformation("FireShield", ClickType.SHIFT_UP));
-		return fireSpin;
-	}
-
 	@Override
 	public void progress() {
-		for (Vector vec : streams.keySet()) {
-			Block block = location.getBlock();
-			if (block.getRelative(BlockFace.UP).getType() != Material.AIR && !ElementalAbility.isPlant(block)) {
-				streams.remove(vec);
-				continue;
-			}
-			ParticleEffect.FLAME.display(location, 0.0F, 0.0F, 0.0F, 0, 1);
-			
-
-			location.add(direction.normalize().multiply(speed));
-			if (origin.distanceSquared(location) > range * range) {
-				streams.remove(vec);
-				continue;
-			} else if (movementCounter % 10 != 0) {
-				for (Entity entity : GeneralMethods.getEntitiesAroundPoint(location, 2)) {
-					if (entity instanceof LivingEntity && !entity.equals(this.getPlayer())) {
-						if (!affectedEntities.contains(entity)) {
-							affectedEntities.add((LivingEntity) entity);
-							double newKnockback = bPlayer.isAvatarState() ? knockback + 0.5 : knockback;
-							DamageHandler.damageEntity(entity, damage, this);
-							entity.setVelocity(direction.normalize().multiply(newKnockback));
-							streams.remove(vec);
-						}
-					}
+		for (int i = 0; i < tasks.size(); i++) {
+			BukkitRunnable br = tasks.get(i);
+			if (br instanceof FireComboStream) {
+				FireComboStream fs = (FireComboStream) br;
+				if (fs.isCancelled()) {
+					tasks.remove(fs);
 				}
 			}
+		}
 
-			movementCounter++;
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
+			remove();
+			return;
 		}
 		
-		if (streams.size() == 0) {
+		if (destination == null) {
+			if (bPlayer.isOnCooldown("FireSpin") && !bPlayer.isAvatarState()) {
+				remove();
+				return;
+			}
+			bPlayer.addCooldown("FireSpin", cooldown);
+			destination = player.getEyeLocation().add(range, 0, range);
+			player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 0.5f, 0.5f);
+
+			for (int i = 0; i <= 360; i += 5) {
+				Vector vec = GeneralMethods.getDirection(player.getLocation(), destination.clone());
+				vec = GeneralMethods.rotateXZ(vec, i - 180);
+				vec.setY(0);
+
+				FireComboStream fs = new FireComboStream(player, this, vec, player.getLocation().clone().add(0, 1, 0), range, speed);
+				fs.setSpread(0.0F);
+				fs.setDensity(1);
+				fs.setUseNewParticles(true);
+				fs.setDamage(damage);
+				fs.setKnockback(knockback);
+				if (tasks.size() % 10 != 0) {
+					fs.setCollides(false);
+				}
+				fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
+				tasks.add(fs);
+			}
+		}
+
+		if (tasks.size() == 0) {
 			remove();
 			return;
 		}
 	}
+	
+	@Override
+	public void remove() {
+		super.remove();
+		for (BukkitRunnable task : tasks) {
+			task.cancel();
+		}
+	}
+	
+	@Override
+	public void handleCollision(Collision collision) {
+		if (collision.isRemovingFirst()) {
+			ArrayList<BukkitRunnable> newTasks = new ArrayList<>();
+			double collisionDistanceSquared = Math.pow(getCollisionRadius() + collision.getAbilitySecond().getCollisionRadius(), 2);
+			// Remove all of the streams that are by this specific ourLocation.
+			// Don't just do a single stream at a time or this algorithm becomes O(n^2) with
+			// Collision's detection algorithm.
+			for (BukkitRunnable task : getTasks()) {
+				if (task instanceof FireComboStream) {
+					FireComboStream stream = (FireComboStream) task;
+					if (stream.getLocation().distanceSquared(collision.getLocationSecond()) > collisionDistanceSquared) {
+						newTasks.add(stream);
+					} else {
+						stream.cancel();
+					}
+				} else {
+					newTasks.add(task);
+				}
+			}
+			setTasks(newTasks);
+		}
+	}
+
+	@Override
+	public List<Location> getLocations() {
+		ArrayList<Location> locations = new ArrayList<>();
+		for (BukkitRunnable task : getTasks()) {
+			if (task instanceof FireComboStream) {
+				FireComboStream stream = (FireComboStream) task;
+				locations.add(stream.getLocation());
+			}
+		}
+		return locations;
+	}
+	
+	@Override
+	public Object createNewComboInstance(Player player) {
+		return null;
+	}
+
+	@Override
+	public ArrayList<AbilityInformation> getCombination() {
+		return null;
+	}
 
 	@Override
 	public boolean isSneakAbility() {
@@ -141,12 +178,21 @@ public String getName() {
 	public Location getLocation() {
 		return player.getLocation();
 	}
-	
+
 	@Override
-	public List<Location> getLocations() {
-		List<Location> locs = new ArrayList<Location>();
-		locs.addAll(streams.values());
-		return locs;
+	public boolean isHarmlessAbility() {
+		return false;
+	}
+
+	public ArrayList<LivingEntity> getAffectedEntities() {
+		return affectedEntities;
+	}
+	
+	public ArrayList<BukkitRunnable> getTasks() {
+		return tasks;
 	}
 
+	public void setTasks(ArrayList<BukkitRunnable> tasks) {
+		this.tasks = tasks;
+	}
 }
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/FireWheel.java b/src/com/projectkorra/projectkorra/firebending/combo/FireWheel.java
index 33daa27c8c..55659d1e4f 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/FireWheel.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/FireWheel.java
@@ -1,7 +1,6 @@
 package com.projectkorra.projectkorra.firebending.combo;
 
 import java.util.ArrayList;
-import java.util.List;
 
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -13,16 +12,17 @@
 import org.bukkit.util.Vector;
 
 import com.projectkorra.projectkorra.GeneralMethods;
+import com.projectkorra.projectkorra.ability.ComboAbility;
 import com.projectkorra.projectkorra.ability.ElementalAbility;
+import com.projectkorra.projectkorra.ability.FireAbility;
 import com.projectkorra.projectkorra.ability.WaterAbility;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
 import com.projectkorra.projectkorra.avatar.AvatarState;
 import com.projectkorra.projectkorra.firebending.util.FireDamageTimer;
-import com.projectkorra.projectkorra.util.ClickType;
 import com.projectkorra.projectkorra.util.DamageHandler;
 import com.projectkorra.projectkorra.util.ParticleEffect;
 
-public class FireWheel extends FireCombo {
+public class FireWheel extends FireAbility implements ComboAbility {
 
 	private Location origin;
 	private Location location;
@@ -34,7 +34,7 @@
 	private double speed;
 	private double fireTicks;
 	private double damage;
-	private List<LivingEntity> affectedEntities;
+	private ArrayList<LivingEntity> affectedEntities;
 
 	public FireWheel(Player player) {
 		super(player);
@@ -49,8 +49,8 @@ public FireWheel(Player player) {
 		this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.Speed");
 		this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.FireWheel.Cooldown");
 		this.fireTicks = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.FireTicks");
-		this.height = 2;
-		this.radius = 1;
+		this.height = getConfig().getInt("Abilities.Fire.FireCombo.FireWheel.Height");
+		this.radius = getConfig().getDouble("Abilities.Fire.FireCombo.FireWheel.Radius");
 		
 		bPlayer.addCooldown(this);
 		origin = player.getLocation();
@@ -70,22 +70,18 @@ public FireWheel(Player player) {
 			this.damage = AvatarState.getValue(damage);
 			this.range = AvatarState.getValue(range);
 		}
+		
 		start();
 	}
 
 	@Override
 	public Object createNewComboInstance(Player player) {
-		return new FireWheel(player);
+		return null;
 	}
 
 	@Override
 	public ArrayList<AbilityInformation> getCombination() {
-		ArrayList<AbilityInformation> fireWheel = new ArrayList<>();
-		fireWheel.add(new AbilityInformation("FireShield", ClickType.SHIFT_DOWN));
-		fireWheel.add(new AbilityInformation("FireShield", ClickType.RIGHT_CLICK_BLOCK));
-		fireWheel.add(new AbilityInformation("FireShield", ClickType.RIGHT_CLICK_BLOCK));
-		fireWheel.add(new AbilityInformation("Blaze", ClickType.SHIFT_UP));
-		return fireWheel;
+		return null;
 	}
 
 	@Override
@@ -146,4 +142,17 @@ public Location getLocation() {
 		return location;
 	}
 
+	@Override
+	public boolean isSneakAbility() {
+		return true;
+	}
+
+	@Override
+	public boolean isHarmlessAbility() {
+		return false;
+	}
+
+	public ArrayList<LivingEntity> getAffectedEntities() {
+		return affectedEntities;
+	}
 }
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/JetBlast.java b/src/com/projectkorra/projectkorra/firebending/combo/JetBlast.java
index 53588ec238..ed3930d2e1 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/JetBlast.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/JetBlast.java
@@ -6,72 +6,89 @@
 import org.bukkit.Sound;
 import org.bukkit.entity.Player;
 
+import com.projectkorra.projectkorra.ProjectKorra;
+import com.projectkorra.projectkorra.ability.ComboAbility;
+import com.projectkorra.projectkorra.ability.FireAbility;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
+import com.projectkorra.projectkorra.avatar.AvatarState;
 import com.projectkorra.projectkorra.firebending.FireJet;
-import com.projectkorra.projectkorra.util.ClickType;
 import com.projectkorra.projectkorra.util.ParticleEffect;
 
-public class JetBlast extends FireCombo {
+public class JetBlast extends FireAbility implements ComboAbility {
 
-	private double speed;
+	private boolean firstTime;
+	private long time;
 	private long cooldown;
+	private double damage;
+	private double speed;
+	private double range;
+	private ArrayList<FireComboStream> tasks;
 	private long duration;
 	
 	public JetBlast(Player player) {
 		super(player);
-		
-		if (bPlayer.isOnCooldown("JetBlast") && !bPlayer.isAvatarState()) {
-			remove();
+
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
 			return;
 		}
-		
+
+		this.firstTime = true;
+		this.time = System.currentTimeMillis();
+		this.tasks = new ArrayList<>();
+
 		this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlast.Speed");
 		this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.JetBlast.Cooldown");
 		this.duration = getConfig().getLong("Abilities.Fire.FireCombo.JetBlast.Duration");
 
-		bPlayer.addCooldown(this);
-		ParticleEffect.LARGE_EXPLODE.display(player.getLocation(), 0.0F, 0.0F, 0.0F, 0, 1);
-		player.getWorld().playSound(player.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 15, 0F);
+		if (bPlayer.isAvatarState()) {
+			this.cooldown = 0;
+			this.damage = AvatarState.getValue(damage);
+			this.range = AvatarState.getValue(range);
+		}
 		
 		start();
 	}
 
 	@Override
 	public Object createNewComboInstance(Player player) {
-		return new JetBlast(player);
+		return null;
 	}
 
 	@Override
 	public ArrayList<AbilityInformation> getCombination() {
-		ArrayList<AbilityInformation> jetBlast = new ArrayList<>();
-		jetBlast.add(new AbilityInformation("FireJet", ClickType.SHIFT_DOWN));
-		jetBlast.add(new AbilityInformation("FireJet", ClickType.SHIFT_UP));
-		jetBlast.add(new AbilityInformation("FireJet", ClickType.SHIFT_DOWN));
-		jetBlast.add(new AbilityInformation("FireJet", ClickType.SHIFT_UP));
-		jetBlast.add(new AbilityInformation("FireShield", ClickType.SHIFT_DOWN));
-		jetBlast.add(new AbilityInformation("FireShield", ClickType.SHIFT_UP));
-		jetBlast.add(new AbilityInformation("FireJet", ClickType.LEFT_CLICK));
-		return jetBlast;
+		return null;
 	}
 
 	@Override
 	public void progress() {
-		if (System.currentTimeMillis() - getStartTime() > duration) {
+		if (System.currentTimeMillis() - time > duration) {
 			remove();
 			return;
-		}
-		
-		FireJet fireJet = getAbility(player, FireJet.class);
-		if (fireJet != null) {
-			fireJet.setSpeed(speed);
+		} else if (hasAbility(player, FireJet.class)) {
+			if (firstTime) {
+				if (bPlayer.isOnCooldown("JetBlast") && !bPlayer.isAvatarState()) {
+					remove();
+					return;
+				}
+
+				bPlayer.addCooldown("JetBlast", cooldown);
+				firstTime = false;
+				float spread = 0F;
+				ParticleEffect.LARGE_EXPLODE.display(player.getLocation(), spread, spread, spread, 0, 1);
+				player.getWorld().playSound(player.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 15, 0F);
+			}
+			FireJet fj = getAbility(player, FireJet.class);
+			fj.setSpeed(speed);
 			
-			ParticleEffect.FLAME.display(player.getEyeLocation().getDirection().clone().normalize().multiply(-0.1), 0.3f, player.getLocation(), 80);
-		} else {
-			remove();
-			return;
-		}
-		
+			FireComboStream fs = new FireComboStream(player, this, player.getVelocity().clone().multiply(-1), player.getLocation(), 3, 0.5);
 
+			fs.setDensity(1);
+			fs.setSpread(0.9F);
+			fs.setUseNewParticles(true);
+			fs.setCollides(false);
+			fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
+			tasks.add(fs);
+		}
 	}
 
 	@Override
@@ -94,4 +111,9 @@ public Location getLocation() {
 		return player.getLocation();
 	}
 
+	@Override
+	public boolean isHarmlessAbility() {
+		return false;
+	}
+
 }
diff --git a/src/com/projectkorra/projectkorra/firebending/combo/JetBlaze.java b/src/com/projectkorra/projectkorra/firebending/combo/JetBlaze.java
index cea77facf3..286f33970a 100755
--- a/src/com/projectkorra/projectkorra/firebending/combo/JetBlaze.java
+++ b/src/com/projectkorra/projectkorra/firebending/combo/JetBlaze.java
@@ -4,101 +4,100 @@
 
 import org.bukkit.Location;
 import org.bukkit.Sound;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
+import org.bukkit.util.Vector;
 
-import com.projectkorra.projectkorra.GeneralMethods;
+import com.projectkorra.projectkorra.ProjectKorra;
+import com.projectkorra.projectkorra.ability.ComboAbility;
+import com.projectkorra.projectkorra.ability.FireAbility;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
+import com.projectkorra.projectkorra.avatar.AvatarState;
 import com.projectkorra.projectkorra.firebending.FireJet;
-import com.projectkorra.projectkorra.firebending.util.FireDamageTimer;
-import com.projectkorra.projectkorra.util.ClickType;
-import com.projectkorra.projectkorra.util.DamageHandler;
 import com.projectkorra.projectkorra.util.ParticleEffect;
 
-public class JetBlaze extends FireCombo {
+public class JetBlaze extends FireAbility implements ComboAbility {
 
-	private double speed;
+	private boolean firstTime;
+	private int progressCounter;
+	private long time;
 	private long cooldown;
-	private long duration;
-	private ArrayList<LivingEntity> affectedEntities;
 	private double damage;
+	private double speed;
+	private double range;
 	private double fireTicks;
-	private int progressCounter;
+	private Vector direction;
+	private ArrayList<LivingEntity> affectedEntities;
+	private ArrayList<FireComboStream> tasks;
+	private long duration;
 	
 	public JetBlaze(Player player) {
 		super(player);
-		
-		if (bPlayer.isOnCooldown("JetBlaze") && !bPlayer.isAvatarState()) {
-			remove();
+
+		if (!bPlayer.canBendIgnoreBindsCooldowns(this)) {
 			return;
 		}
-		
-		this.affectedEntities = new ArrayList<LivingEntity>();
-		
+
+		this.firstTime = true;
+		this.time = System.currentTimeMillis();
+		this.affectedEntities = new ArrayList<>();
+		this.tasks = new ArrayList<>();
+
+		this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.Damage");
+		this.duration = getConfig().getLong("Abilities.Fire.FireCombo.JetBlaze.Duration");
 		this.speed = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.Speed");
 		this.cooldown = getConfig().getLong("Abilities.Fire.FireCombo.JetBlaze.Cooldown");
-		this.duration = getConfig().getLong("Abilities.Fire.FireCombo.JetBlaze.Duration");
-		this.damage = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.Damage");
 		this.fireTicks = getConfig().getDouble("Abilities.Fire.FireCombo.JetBlaze.FireTicks");
 		
-		bPlayer.addCooldown(this);
+		if (bPlayer.isAvatarState()) {
+			this.cooldown = 0;
+			this.damage = AvatarState.getValue(damage);
+			this.range = AvatarState.getValue(range);
+		}
 		
 		start();
 	}
 
 	@Override
 	public Object createNewComboInstance(Player player) {
-		return new JetBlaze(player);
+		return null;
 	}
 
 	@Override
 	public ArrayList<AbilityInformation> getCombination() {
-		ArrayList<AbilityInformation> jetBlaze = new ArrayList<>();
-		jetBlaze.add(new AbilityInformation("FireJet", ClickType.SHIFT_DOWN));
-		jetBlaze.add(new AbilityInformation("FireJet", ClickType.SHIFT_UP));
-		jetBlaze.add(new AbilityInformation("FireJet", ClickType.SHIFT_DOWN));
-		jetBlaze.add(new AbilityInformation("FireJet", ClickType.SHIFT_UP));
-		jetBlaze.add(new AbilityInformation("Blaze", ClickType.SHIFT_DOWN));
-		jetBlaze.add(new AbilityInformation("Blaze", ClickType.SHIFT_UP));
-		jetBlaze.add(new AbilityInformation("FireJet", ClickType.LEFT_CLICK));
-		return jetBlaze;
+		return null;
 	}
 
 	@Override
 	public void progress() {
-		if (System.currentTimeMillis() - getStartTime() > duration) {
+		if (firstTime) {
+			if (bPlayer.isOnCooldown("JetBlaze") && !bPlayer.isAvatarState()) {
+				remove();
+				return;
+			}
+			bPlayer.addCooldown("JetBlaze", cooldown);
+			firstTime = false;
+		} else if (System.currentTimeMillis() - time > duration) {
 			remove();
 			return;
-		}
-		
-		FireJet fireJet = getAbility(player, FireJet.class);
-		if (fireJet != null) {
-			fireJet.setSpeed(speed);
-			
-			ParticleEffect.SMOKE_LARGE.display(1.0F, 1.0F, 1.0F, 1.0F, 8, player.getLocation(), 80);
-			ParticleEffect.FLAME.display(1.0F, 1.0F, 1.0F, 1.0F, 8, player.getLocation(), 80);
-			
-			for (Entity entity : GeneralMethods.getEntitiesAroundPoint(player.getLocation(), 2)) {
-				if (entity instanceof LivingEntity && !entity.equals(player)) {
-					if (!affectedEntities.contains(entity)) {
-						affectedEntities.add((LivingEntity) entity);
-						DamageHandler.damageEntity(entity, damage, this);
-						entity.setFireTicks((int) (fireTicks * 20));
-						new FireDamageTimer(entity, player);
-					}
-				}
-			}
-			
+		} else if (hasAbility(player, FireJet.class)) {
+			direction = player.getVelocity().clone().multiply(-1);
+			FireJet fj = getAbility(player, FireJet.class);
+			fj.setSpeed(speed);
+
+			FireComboStream fs = new FireComboStream(player, this, direction, player.getLocation(), 5, 1);
+			fs.setDensity(8);
+			fs.setSpread(1.0F);
+			fs.setUseNewParticles(true);
+			fs.setCollisionRadius(3);
+			fs.setParticleEffect(ParticleEffect.LARGE_SMOKE);
+			fs.setDamage(damage);
+			fs.setFireTicks(fireTicks);
+			fs.runTaskTimer(ProjectKorra.plugin, 0, 1L);
+			tasks.add(fs);
 			if (progressCounter % 4 == 0) {
 				player.getWorld().playSound(player.getLocation(), Sound.ENTITY_CREEPER_PRIMED, 1, 0F);
 			}
-			
-			progressCounter++;
-
-		} else {
-			remove();
-			return;
 		}
 	}
 
@@ -114,7 +113,7 @@ public long getCooldown() {
 
 	@Override
 	public String getName() {
-		return "JetBlast";
+		return "JetBlaze";
 	}
 
 	@Override
@@ -122,4 +121,12 @@ public Location getLocation() {
 		return player.getLocation();
 	}
 
+	@Override
+	public boolean isHarmlessAbility() {
+		return false;
+	}
+	
+	public ArrayList<LivingEntity> getAffectedEntities() {
+		return affectedEntities;
+	}
 }
diff --git a/src/com/projectkorra/projectkorra/waterbending/combo/IceBullet.java b/src/com/projectkorra/projectkorra/waterbending/combo/IceBullet.java
index 9a4e897c71..08fda4a3b7 100755
--- a/src/com/projectkorra/projectkorra/waterbending/combo/IceBullet.java
+++ b/src/com/projectkorra/projectkorra/waterbending/combo/IceBullet.java
@@ -24,7 +24,7 @@
 import com.projectkorra.projectkorra.ability.util.Collision;
 import com.projectkorra.projectkorra.ability.util.ComboManager.AbilityInformation;
 import com.projectkorra.projectkorra.avatar.AvatarState;
-import com.projectkorra.projectkorra.firebending.combo.FireCombo.FireComboStream;
+import com.projectkorra.projectkorra.firebending.combo.FireComboStream;
 import com.projectkorra.projectkorra.util.BlockSource;
 import com.projectkorra.projectkorra.util.ClickType;
 import com.projectkorra.projectkorra.util.DamageHandler;
@@ -51,6 +51,7 @@
 	private double animationSpeed;
 	private long cooldown;
 	private long time;
+	private String name;
 	private AbilityState state;
 	private Location origin;
 	private Location location;
@@ -59,7 +60,7 @@
 	private ArrayList<BukkitRunnable> tasks;
 	private ConcurrentHashMap<Block, TempBlock> affectedBlocks;
 	
-	public IceBullet(Player player, String name) {
+	public IceBullet(Player player) {
 		super(player);
 		
 		this.time = System.currentTimeMillis();
@@ -78,6 +79,7 @@ public IceBullet(Player player, String name) {
 		this.maxShots = getConfig().getInt("Abilities.Water.WaterCombo.IceBullet.MaxShots");
 		this.animationSpeed = getConfig().getDouble("Abilities.Water.WaterCombo.IceBullet.AnimationSpeed");
 		this.speed = 1;
+		this.name = getName();
 		
 		double aug = getNightFactor(player.getWorld());
 		if (aug > 1) {
@@ -99,23 +101,6 @@ public IceBullet(Player player, String name) {
 			this.knockback = knockback * 1.3;
 		}
 
-		if (name.equalsIgnoreCase("IceBulletLeftClick") || name.equalsIgnoreCase("IceBulletRightClick")) {
-			Collection<IceBullet> bullets = CoreAbility.getAbilities(player, IceBullet.class);
-			if (bullets.size() == 0) {
-				return;
-			}
-			for (IceBullet bullet : bullets) {
-				if (name.equalsIgnoreCase("IceBulletLeftClick")) {
-					if (bullet.leftClicks <= bullet.rightClicks) {
-						bullet.leftClicks += 1;
-					}
-				} else if (bullet.leftClicks >= bullet.rightClicks) {
-					bullet.rightClicks += 1;
-				}
-			}
-			return;
-		}
-
 		start();
 	}
 
@@ -168,7 +153,8 @@ public void handleCollision(Collision collision) {
 	public static class IceBulletLeftClick extends IceBullet {
 
 		public IceBulletLeftClick(Player player) {
-			super(player, "IceBulletLeftClick");
+			super(player);
+			setName("IceBulletLeftClick");
 		}
 
 		@Override
@@ -181,7 +167,8 @@ public String getName() {
 	public static class IceBulletRightClick extends IceBullet {
 
 		public IceBulletRightClick(Player player) {
-			super(player, "IceBulletRightClick");
+			super(player);
+			setName("IceBulletRightClick");
 		}
 
 		@Override
@@ -269,6 +256,24 @@ public void progress() {
 			remove();
 			return;
 		}
+		
+		if (name.equalsIgnoreCase("IceBulletLeftClick") || name.equalsIgnoreCase("IceBulletRightClick")) {
+			Collection<IceBullet> bullets = CoreAbility.getAbilities(player, IceBullet.class);
+			if (bullets.size() == 0) {
+				return;
+			}
+			for (IceBullet bullet : bullets) {
+				if (name.equalsIgnoreCase("IceBulletLeftClick")) {
+					if (bullet.leftClicks <= bullet.rightClicks) {
+						bullet.leftClicks += 1;
+					}
+				} else if (bullet.leftClicks >= bullet.rightClicks) {
+					bullet.rightClicks += 1;
+				}
+			}
+			return;
+		}
+
 
 		if (origin == null) {
 			if (bPlayer.isOnCooldown("IceBullet") && !bPlayer.isAvatarState()) {
@@ -319,7 +324,7 @@ public void progress() {
 						shots++;
 						Vector vec = player.getEyeLocation().getDirection().normalize();
 						Location loc = player.getEyeLocation().add(vec.clone().multiply(radius + 1.3));
-						FireComboStream fs = new FireComboStream(null, vec, loc, range, speed, "IceBullet");
+						FireComboStream fs = new FireComboStream(player, this, vec, loc, range, speed);
 
 						fs.setDensity(10);
 						fs.setSpread(0.1F);
@@ -541,4 +546,8 @@ public void setCooldown(long cooldown) {
 	public void setLocation(Location location) {
 		this.location = location;
 	}
+	
+	public void setName(String name) {
+		this.name = name;
+	}
 }
