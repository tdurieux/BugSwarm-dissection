diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
index 03531184a7..f70026145e 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CacheTest.java
@@ -1007,7 +1007,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
 
     assertEquals("A", get(server.url("/")).body().string());
     assertEquals("A", get(server.url("/")).body().string());
-    assertEquals(1, client.getConnectionPool().getConnectionCount());
+    assertEquals(1, client.getConnectionPool().getIdleConnectionCount());
   }
 
   @Test public void expiresDateBeforeModifiedDate() throws Exception {
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
index 94a1ae15af..6d27939abe 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/CallTest.java
@@ -837,25 +837,28 @@ private void postBodyRetransmittedAfterAuthorizationFail(String body) throws Exc
   }
 
   @Test public void recoverWhenRetryOnConnectionFailureIsTrue() throws Exception {
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));
+    server.enqueue(new MockResponse().setBody("seed connection pool"));
+    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));
     server.enqueue(new MockResponse().setBody("retry success"));
 
     client.setDns(new DoubleInetAddressDns());
     assertTrue(client.getRetryOnConnectionFailure());
 
     Request request = new Request.Builder().url(server.url("/")).build();
-    Response response = client.newCall(request).execute();
-    assertEquals("retry success", response.body().string());
+    executeSynchronously(request).assertBody("seed connection pool");
+    executeSynchronously(request).assertBody("retry success");
   }
 
   @Test public void noRecoverWhenRetryOnConnectionFailureIsFalse() throws Exception {
-    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));
+    server.enqueue(new MockResponse().setBody("seed connection pool"));
+    server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST));
     server.enqueue(new MockResponse().setBody("unreachable!"));
 
     client.setDns(new DoubleInetAddressDns());
     client.setRetryOnConnectionFailure(false);
 
     Request request = new Request.Builder().url(server.url("/")).build();
+    executeSynchronously(request).assertBody("seed connection pool");
     try {
       // If this succeeds, too many requests were made.
       client.newCall(request).execute();
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
index 31b85a8f28..576c8b5d8e 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/URLConnectionTest.java
@@ -1276,7 +1276,7 @@ private void testClientConfiguredGzipContentEncodingAndConnectionReuse(TransferK
 
     HttpURLConnection connection = client.open(server.getUrl("/"));
     assertContent("{}", connection);
-    assertEquals(0, client.client().getConnectionPool().getConnectionCount());
+    assertEquals(0, client.client().getConnectionPool().getIdleConnectionCount());
   }
 
   @Test public void earlyDisconnectDoesntHarmPoolingWithChunkedEncoding() throws Exception {
@@ -1958,7 +1958,7 @@ private void redirectToAnotherOriginServer(boolean https) throws Exception {
 
     assertContent("This is the 2nd server!", client.open(server.getUrl("/a")));
 
-    assertEquals(Arrays.asList(server.getUrl("/a").toURI(), server2.getUrl("/b").toURI()),
+    assertEquals(Arrays.asList(server.getUrl("/").toURI(), server2.getUrl("/").toURI()),
         proxySelectionRequests);
   }
 
diff --git a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
index 65c6db02ff..8560e0ffad 100755
--- a/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
+++ b/okhttp-tests/src/test/java/com/squareup/okhttp/internal/http/RouteSelectorTest.java
@@ -52,14 +52,14 @@
       ConnectionSpec.CLEARTEXT);
 
   private static final int proxyAPort = 1001;
-  private static final String proxyAHost = "proxyA";
+  private static final String proxyAHost = "proxya";
   private static final Proxy proxyA =
-      new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyAHost, proxyAPort));
+      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyAHost, proxyAPort));
   private static final int proxyBPort = 1002;
-  private static final String proxyBHost = "proxyB";
+  private static final String proxyBHost = "proxyb";
   private static final Proxy proxyB =
-      new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyBHost, proxyBPort));
-  private String uriHost = "hostA";
+      new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyBHost, proxyBPort));
+  private String uriHost = "hosta";
   private int uriPort = 1003;
 
   private SocketFactory socketFactory;
@@ -71,12 +71,11 @@
   private final List<Protocol> protocols = Arrays.asList(Protocol.HTTP_1_1);
   private final FakeDns dns = new FakeDns();
   private final RecordingProxySelector proxySelector = new RecordingProxySelector();
-  private RouteDatabase routeDatabase;
+  private RouteDatabase routeDatabase = new RouteDatabase();
 
   @Before public void setUp() throws Exception {
     socketFactory = SocketFactory.getDefault();
     hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
-    routeDatabase = new RouteDatabase();
   }
 
   @Test public void singleRoute() throws Exception {
diff --git a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
index 172d586986..66bf7c2f4c 100755
--- a/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
+++ b/okhttp-urlconnection/src/test/java/com/squareup/okhttp/UrlConnectionCacheTest.java
@@ -855,7 +855,7 @@ private void assertNonIdentityEncodingCached(MockResponse response) throws Excep
 
     assertEquals("A", readAscii(client.open(server.getUrl("/"))));
     assertEquals("A", readAscii(client.open(server.getUrl("/"))));
-    assertEquals(1, client.client().getConnectionPool().getConnectionCount());
+    assertEquals(1, client.client().getConnectionPool().getIdleConnectionCount());
   }
 
   @Test public void expiresDateBeforeModifiedDate() throws Exception {
diff --git a/okhttp/src/main/java/com/squareup/okhttp/Address.java b/okhttp/src/main/java/com/squareup/okhttp/Address.java
index 23e92f5804..9efdf28050 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/Address.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/Address.java
@@ -53,7 +53,7 @@ public Address(String uriHost, int uriPort, Dns dns, SocketFactory socketFactory
       CertificatePinner certificatePinner, Authenticator authenticator, Proxy proxy,
       List<Protocol> protocols, List<ConnectionSpec> connectionSpecs, ProxySelector proxySelector) {
     this.url = new HttpUrl.Builder()
-        .scheme(socketFactory != null ? "https" : "http")
+        .scheme(sslSocketFactory != null ? "https" : "http")
         .host(uriHost)
         .port(uriPort)
         .build();
diff --git a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
index 21690b3a9b..ee3f9ba885 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/ConnectionPool.java
@@ -17,9 +17,13 @@
 package com.squareup.okhttp;
 
 import com.squareup.okhttp.internal.RouteDatabase;
+import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.io.RealConnection;
 import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.Deque;
+import java.util.Iterator;
+import java.util.List;
 
 /**
  * Manages reuse of HTTP and SPDY connections for reduced network latency. HTTP
@@ -80,7 +84,21 @@ public static ConnectionPool getDefault() {
     return systemDefault;
   }
 
-  /** Returns total number of connections in the pool. */
+  /** Returns the number of idle connections in the pool. */
+  public synchronized int getIdleConnectionCount() {
+    int total = 0;
+    for (RealConnection connection : connections) {
+      if (connection.allocationCount == 0) total++;
+    }
+    return total;
+  }
+
+  /**
+   * Returns total number of connections in the pool. Note that prior to OkHttp 2.7 this included
+   * only idle connections and SPDY connections. In OkHttp 2.7 this includes all connections, both
+   * active and inactive. Use {@link #getIdleConnectionCount()} to count connections not currently
+   * in use.
+   */
   public synchronized int getConnectionCount() {
     return connections.size();
   }
@@ -123,8 +141,27 @@ public synchronized void put(RealConnection connection) {
     connections.add(connection);
   }
 
-  /** Close and remove all connections in the pool. */
+  // TODO(jwilson): reduce visibility.
+  public synchronized void remove(RealConnection connection) {
+    connections.remove(connection);
+  }
+
+  /** Close and remove all idle connections in the pool. */
   public void evictAll() {
-    throw new UnsupportedOperationException("TODO");
+    List<RealConnection> evictedConnections = new ArrayList<>();
+    synchronized (this) {
+      for (Iterator<RealConnection> i = connections.iterator(); i.hasNext(); ) {
+        RealConnection connection = i.next();
+        if (connection.allocationCount == 0) {
+          connection.noNewStreams = true;
+          evictedConnections.add(connection);
+          i.remove();
+        }
+      }
+    }
+
+    for (RealConnection connection : evictedConnections) {
+      Util.closeQuietly(connection.getSocket());
+    }
   }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
index a2c0a8fe56..3db4629297 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http1xStream.java
@@ -22,6 +22,7 @@
 import com.squareup.okhttp.ResponseBody;
 import com.squareup.okhttp.internal.Internal;
 import com.squareup.okhttp.internal.Util;
+import com.squareup.okhttp.internal.io.RealConnection;
 import java.io.EOFException;
 import java.io.IOException;
 import java.net.ProtocolException;
@@ -66,6 +67,7 @@
   private static final int STATE_READING_RESPONSE_BODY = 5;
   private static final int STATE_CLOSED = 6;
 
+  /** The stream allocation that owns this stream. May be null for HTTPS proxy tunnels. */
   private final StreamAllocation streamAllocation;
   private final BufferedSource source;
   private final BufferedSink sink;
@@ -98,8 +100,8 @@ public Http1xStream(StreamAllocation streamAllocation, BufferedSource source, Bu
   }
 
   @Override public void cancel() {
-    // TODO.
-    throw new UnsupportedOperationException("TODO");
+    RealConnection connection = streamAllocation.connection();
+    if (connection != null) connection.cancel();
   }
 
   /**
@@ -244,6 +246,7 @@ public Source newChunkedSource(HttpEngine httpEngine) throws IOException {
 
   public Source newUnknownLengthSource() throws IOException {
     if (state != STATE_OPEN_RESPONSE_BODY) throw new IllegalStateException("state: " + state);
+    if (streamAllocation == null) throw new IllegalStateException("streamAllocation == null");
     state = STATE_READING_RESPONSE_BODY;
     streamAllocation.noNewStreamsOnConnection();
     return new UnknownLengthSource();
@@ -355,13 +358,19 @@ protected final void endOfInput() throws IOException {
       detachTimeout(timeout);
 
       state = STATE_CLOSED;
-      streamAllocation.streamFinished(Http1xStream.this);
+      if (streamAllocation != null) {
+        streamAllocation.streamFinished(Http1xStream.this);
+      }
     }
 
     protected final void unexpectedEndOfInput() {
+      if (state == STATE_CLOSED) return;
+
       state = STATE_CLOSED;
-      streamAllocation.noNewStreamsOnConnection();
-      streamAllocation.streamFinished(Http1xStream.this);
+      if (streamAllocation != null) {
+        streamAllocation.noNewStreamsOnConnection();
+        streamAllocation.streamFinished(Http1xStream.this);
+      }
     }
   }
 
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
index f1889069a7..040e258b3b 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/Http2xStream.java
@@ -35,8 +35,10 @@
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import okio.ByteString;
+import okio.ForwardingSource;
 import okio.Okio;
 import okio.Sink;
+import okio.Source;
 
 import static com.squareup.okhttp.internal.framed.Header.RESPONSE_STATUS;
 import static com.squareup.okhttp.internal.framed.Header.TARGET_AUTHORITY;
@@ -103,11 +105,13 @@
       ENCODING,
       UPGRADE);
 
+  private final StreamAllocation streamAllocation;
   private final FramedConnection framedConnection;
   private HttpEngine httpEngine;
   private FramedStream stream;
 
-  public Http2xStream(FramedConnection framedConnection) {
+  public Http2xStream(StreamAllocation streamAllocation, FramedConnection framedConnection) {
+    this.streamAllocation = streamAllocation;
     this.framedConnection = framedConnection;
   }
 
@@ -271,10 +275,22 @@ private static String joinOnNull(String first, String second) {
   }
 
   @Override public ResponseBody openResponseBody(Response response) throws IOException {
-    return new RealResponseBody(response.headers(), Okio.buffer(stream.getSource()));
+    Source source = new StreamFinishingSource(stream.getSource());
+    return new RealResponseBody(response.headers(), Okio.buffer(source));
   }
 
   @Override public void cancel() {
     if (stream != null) stream.closeLater(ErrorCode.CANCEL);
   }
+
+  class StreamFinishingSource extends ForwardingSource {
+    public StreamFinishingSource(Source delegate) {
+      super(delegate);
+    }
+
+    @Override public void close() throws IOException {
+      streamAllocation.streamFinished(Http2xStream.this);
+      super.close();
+    }
+  }
 }
diff --git a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
index 5bd7c419ff..a48ec0494d 100755
--- a/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
+++ b/okhttp/src/main/java/com/squareup/okhttp/internal/http/StreamAllocation.java
@@ -20,6 +20,7 @@
 import com.squareup.okhttp.Route;
 import com.squareup.okhttp.internal.Internal;
 import com.squareup.okhttp.internal.RouteDatabase;
+import com.squareup.okhttp.internal.Util;
 import com.squareup.okhttp.internal.io.RealConnection;
 import java.io.IOException;
 import java.io.InterruptedIOException;
@@ -33,6 +34,41 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
 /**
+ * This class coordinates the relationship between three entities:
+ *
+ * <ul>
+ *   <li><strong>Connections:</strong> physical socket connections to remote servers. These are
+ *       potentially slow to establish so it is necessary to be able to cancel a connection
+ *       currently being connected.
+ *   <li><strong>Streams:</strong> logical HTTP request/response pairs that are layered on
+ *       connections. Each connection has its own allocation limit, which defines how many
+ *       concurrent streams that connection can carry. HTTP/1.x connections can carry 1 stream
+ *       at a time, SPDY and HTTP/2 typically carry multiple.
+ *   <li><strong>Calls:</strong> a logical sequence of streams, typically an initial request and
+ *       its follow up requests. We prefer to keep all streams of a single call on the same
+ *       connection for better behavior and locality.
+ * </ul>
+ *
+ * <p>Instances of this class act on behalf of the call, using one or more streams over one or
+ * more connections. This class has APIs to release each of the above resources:
+ *
+ * <ul>
+ *   <li>{@linkplain #noNewStreams() noNewStreams()} prevents the connection from being used for
+ *       new streams in the future. Use this after a {@code Connection: close} header, or when the
+ *       connection may be inconsistent.
+ *   <li>{@linkplain #streamFinished streamFinished()} releases the active stream from this
+ *       allocation. Note that only one stream may be active at a given time, so it is necessary to
+ *       call {@linkplain #streamFinished streamFinished()} before creating a subsequent stream with
+ *       {@linkplain #newStream newStream()}.
+ *   <li>{@linkplain #release() release()} removes the call's hold on the connection. Note that this
+ *       won't immediately free the connection if there is a stream still lingering. That happens
+ *       when a call is complete but its response body has yet to be fully consumed.
+ * </ul>
+ *
+ * <p>This class supports {@linkplain #cancel asynchronous canceling}. This is intended to have
+ * the smallest blast radius possible. If an HTTP/2 stream is active, canceling will cancel that
+ * stream but not the other streams sharing its connection. But if the TLS handshake is still in
+ * progress then canceling may break the entire connection.
  */
 public final class StreamAllocation {
   public final Address address;
@@ -59,7 +95,7 @@ public HttpStream newStream(int connectTimeout, int readTimeout, int writeTimeou
 
       HttpStream resultStream;
       if (resultConnection.framedConnection != null) {
-        resultStream = new Http2xStream(resultConnection.framedConnection);
+        resultStream = new Http2xStream(this, resultConnection.framedConnection);
       } else {
         resultConnection.getSocket().setSoTimeout(readTimeout);
         resultConnection.source.timeout().timeout(readTimeout, MILLISECONDS);
@@ -90,11 +126,7 @@ private RealConnection findHealthyConnection(int connectTimeout, int readTimeout
       if (connection.isHealthy(doExtensiveHealthChecks)) {
         return candidate;
       }
-      synchronized (connectionPool) {
-        connection.noNewStreams = true;
-        connection.allocationCount--;
-        connection = null;
-      }
+      deallocate(true, false, true);
     }
   }
 
@@ -157,12 +189,8 @@ public void streamFinished(HttpStream stream) {
       if (stream == null || stream != this.stream) {
         throw new IllegalStateException("expected " + this.stream + " but was " + stream);
       }
-      this.stream = null;
-      if (released) {
-        connection.allocationCount--;
-        connection = null;
-      }
     }
+    deallocate(false, false, true);
   }
 
   public HttpStream stream() {
@@ -175,37 +203,58 @@ private RouteDatabase routeDatabase() {
     return Internal.instance.routeDatabase(connectionPool);
   }
 
-  public RealConnection connection() {
+  public synchronized RealConnection connection() {
     return connection;
   }
 
   public void release() {
-    synchronized (connectionPool) {
-      if (this.released) {
-        throw new IllegalStateException("already released");
-      }
-      released = true;
-      if (this.stream == null) {
-        connection.allocationCount--;
-        connection = null;
-      }
-    }
+    deallocate(false, true, false);
   }
 
   /** Forbid new streams from being created on the connection that hosts this allocation. */
   public void noNewStreamsOnConnection() {
-    synchronized (connectionPool) {
-      connection.noNewStreams = true;
-    }
+    deallocate(true, false, false);
   }
 
   /** Forbid new streams from being created on this allocation. */
   public void noNewStreams() {
+    // TODO(jwilson): fix this for HTTP/2 to not nuke the socket connection.
+    deallocate(true, false, false);
+  }
+
+  /**
+   * Releases resources held by this allocation. If sufficient resources are allocated, the
+   * connection will be detached or closed.
+   */
+  private void deallocate(boolean noNewStreams, boolean released, boolean streamFinished) {
+    RealConnection connectionToClose = null;
     synchronized (connectionPool) {
+      if (streamFinished) {
+        this.stream = null;
+      }
+      if (released) {
+        this.released = true;
+      }
       if (connection != null) {
-        connection.noNewStreams = true;
+        if (noNewStreams) {
+          connection.noNewStreams = true;
+        }
+        if (this.stream == null && (this.released || connection.noNewStreams)) {
+          connection.allocationCount--;
+          if (connection.streamCount > 0) {
+            routeSelector = null;
+          }
+          if (connection.noNewStreams && connection.allocationCount == 0) {
+            connectionPool.remove(connection);
+            connectionToClose = connection;
+          }
+          connection = null;
+        }
       }
     }
+    if (connectionToClose != null) {
+      Util.closeQuietly(connectionToClose.getSocket());
+    }
   }
 
   public void cancel() {
@@ -225,19 +274,18 @@ public void cancel() {
 
   private void connectionFailed(IOException e) {
     synchronized (connectionPool) {
-      if (connection.streamCount == 0 && routeSelector != null) {
-        Route failedRoute = connection.getRoute();
-        routeSelector.connectFailed(failedRoute, e);
+      if (routeSelector != null) {
+        if (connection.streamCount == 0) {
+          // Record the failure on a fresh route.
+          Route failedRoute = connection.getRoute();
+          routeSelector.connectFailed(failedRoute, e);
+        } else {
+          // We saw a failure on a recycled connection, reset this allocation with a fresh route.
+          routeSelector = null;
+        }
       }
-      connection.noNewStreams = true;
-      connection.allocationCount--;
-      connection = null;
-      stream = null;
-
-      // If we saw a failure on a recycled connection, start with a fresh route.
-      // TODO(jwilson): confirm that this helps tests to pass!
-      routeSelector = null;
     }
+    deallocate(true, false, true);
   }
 
   public boolean recover(RouteException e) {
@@ -255,7 +303,14 @@ public boolean recover(RouteException e) {
 
   public boolean recover(IOException e, Sink requestBodyOut) {
     if (connection != null) {
+      int streamCount = connection.streamCount;
       connectionFailed(e);
+
+      if (streamCount == 1) {
+        // This isn't a recycled connection.
+        // TODO(jwilson): find a better way for this.
+        return false;
+      }
     }
 
     boolean canRetryRequestBody = requestBodyOut == null || requestBodyOut instanceof RetryableSink;
