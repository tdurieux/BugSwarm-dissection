diff --git a/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/CallBackScheduledConsumer.java b/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/CallBackScheduledConsumer.java
index 9ac523ae18..6d6c037f34 100755
--- a/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/CallBackScheduledConsumer.java
+++ b/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/CallBackScheduledConsumer.java
@@ -94,23 +94,38 @@ public void execute(JobExecutionContext context)
     {
         try
         {
+            boolean isRecovering = managedResourceRecoveryManager.isRecovering();
             boolean isSuccessful = messageProvider.invoke(context);
-            if(this.getConfiguration().isEager() && isSuccessful)
-            {
-                Trigger trigger = context.getTrigger();
 
-                // potentially more data so use eager trigger
-                if(isSuccessful)
+            // we were recovering, but are now ok so restore eager or business trigger
+            if(isRecovering)
+            {
+                if(this.getConfiguration().isEager() && isSuccessful)
                 {
-                    invokeEagerSchedule(trigger);
+                    invokeEagerSchedule(context.getTrigger());
                 }
-                // no more data and if callback is from an eager trigger then switch back to the business trigger
-                else if(isEagerCallback(trigger))
+                else
                 {
-                    scheduleAsBusinessTrigger(trigger);
+                    scheduleAsBusinessTrigger(context.getTrigger());
                 }
+            }
+            else
+            {
+                if(this.getConfiguration().isEager())
+                {
+                    // potentially more data so use eager trigger
+                    if(isSuccessful)
+                    {
+                        invokeEagerSchedule(context.getTrigger());
+                    }
+                    // no more data and if callback is from an eager trigger then switch back to the business trigger
+                    else if(isEagerCallback(context.getTrigger()))
+                    {
+                        scheduleAsBusinessTrigger(context.getTrigger());
+                    }
 
-                // else do not change the business trigger
+                    // else do not change the business trigger
+                }
             }
         }
         catch (ForceTransactionRollbackException thrownByRecoveryManager)
diff --git a/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumer.java b/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumer.java
index 3b7540fc7f..8ceab486c1 100755
--- a/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumer.java
+++ b/ikasaneip/component/endpoint/quartz-schedule/src/main/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumer.java
@@ -59,6 +59,7 @@
 
 import java.text.ParseException;
 import java.util.Date;
+import java.util.List;
 import java.util.TimeZone;
 
 import static org.quartz.CronScheduleBuilder.cronSchedule;
@@ -207,7 +208,13 @@ public boolean isRunning()
                 return false;
             }
             JobKey jobKey = jobDetail.getKey();
-            return this.scheduler.checkExists(jobKey);
+            List<? extends Trigger> triggers = this.scheduler.getTriggersOfJob(jobKey);
+            if(triggers.isEmpty())
+            {
+                return false;
+            }
+
+            return true;
         }
         catch (SchedulerException e)
         {
@@ -224,25 +231,39 @@ public void execute(JobExecutionContext context)
     {
         try
         {
+            boolean isRecovering = managedResourceRecoveryManager.isRecovering();
             T t = (T) messageProvider.invoke(context);
             this.invoke(t);
 
-            if(this.getConfiguration().isEager())
+            // we were recovering, but are now ok so restore eager or business trigger
+            if(isRecovering)
             {
-                Trigger trigger = context.getTrigger();
-
-                // potentially more data so use eager trigger
-                if(t != null)
+                if(this.getConfiguration().isEager() && t != null)
                 {
-                    invokeEagerSchedule(trigger);
+                    invokeEagerSchedule(context.getTrigger());
                 }
-                // no more data and if callback is from an eager trigger then switch back to the business trigger
-                else if(isEagerCallback(trigger))
+                else
                 {
-                    scheduleAsBusinessTrigger(trigger);
+                    scheduleAsBusinessTrigger(context.getTrigger());
+                }
+            }
+            else
+            {
+                if(this.getConfiguration().isEager())
+                {
+                    // potentially more data so use eager trigger
+                    if(t != null)
+                    {
+                        invokeEagerSchedule(context.getTrigger());
+                    }
+                    // no more data and if callback is from an eager trigger then switch back to the business trigger
+                    else if(isEagerCallback(context.getTrigger()))
+                    {
+                        scheduleAsBusinessTrigger(context.getTrigger());
+                    }
+
+                    // else do not change the business trigger
                 }
-
-                // else do not change the business trigger
             }
         }
         catch (ForceTransactionRollbackException thrownByRecoveryManager)
@@ -292,8 +313,6 @@ protected void invokeEagerSchedule(Trigger trigger) throws SchedulerException
      */
     public void invoke(T message)
     {
-        boolean isRecovering = managedResourceRecoveryManager.isRecovering();
-
         if (message != null)
         {
             FlowEvent<?, ?> flowEvent = createFlowEvent(message);
@@ -306,26 +325,6 @@ public void invoke(T message)
                 logger.debug("'null' returned from MessageProvider. Flow not invoked");
             }
         }
-
-        if(isRecovering)
-        {
-            // We need to restart the business schedule PRIOR to cancelling the recovery
-            // otherwise the change in state on cancelling recovery reports the
-            // consumer as stopped as the business schedule isn't active.
-            // Starting it before the cancelAll should not cause any issues
-            // as we only allow one quartz callback at a time and so will get
-            // blocked until this recovery schedule has completed.
-
-            // only start this consumer if its not currently running or purposefully paused.
-            if(!this.isRunning() && !this.isPaused())
-            {
-                // clear any jobDetail based recovery jobs and triggers
-                this.stop();
-
-                // restore the business scheduled job and triggers
-                this.start();
-            }
-        }
     }
 
     /**
@@ -348,44 +347,20 @@ protected boolean isPaused()
 	@Override
 	public void onResubmission(T event)
 	{
-        boolean isRecovering = managedResourceRecoveryManager.isRecovering();
-
         if (event != null)
         {
             FlowEvent<?, ?> flowEvent = createFlowEvent(event);
-
             Resubmission resubmission = this.resubmissionEventFactory.newResubmissionEvent(flowEvent);
-            
             this.eventListener.invoke(resubmission);
         }
         else
         {
             if(logger.isDebugEnabled())
             {
-                logger.debug("'null' returned from MessageProvider. Flow not invoked");
+                logger.debug("'null' value resubmitted. Flow not invoked");
             }
         }
-
-        if(isRecovering)
-        {
-            // cancelAll the recovery schedule if still active
-            // could be the flow has already cancelled this, so check
-            if(managedResourceRecoveryManager.isRecovering())
-            {
-                managedResourceRecoveryManager.cancel();
-            }
-
-            // only start this consumer if its not currently running or purposefully paused.
-            if(!this.isRunning() && !this.isPaused())
-            {
-                // clear any jobDetail based recovery jobs and triggers
-                this.stop();
-
-                // restore the business scheduled job and triggers
-                this.start();
-            }
-        }
-	}
+    }
 
     @Override
     public void setResubmissionEventFactory(ResubmissionEventFactory resubmissionEventFactory)
diff --git a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackMessageProviderImplTest.java b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackMessageProviderImplTest.java
index ba56da3197..d4e7a79034 100755
--- a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackMessageProviderImplTest.java
+++ b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackMessageProviderImplTest.java
@@ -136,7 +136,7 @@ public void test_successful_callbackMessageProvider_callback_to_consumer() throw
                 exactly(1).of(scheduler).scheduleJob(mockJobDetail, trigger);
                 will(returnValue(new Date()));
 
-                exactly(3).of(mockManagedResourceRecoveryManager).isRecovering();
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
                 will(returnValue(false));
 
                 // create flowEvent and call flow
diff --git a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackScheduledConsumerTest.java b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackScheduledConsumerTest.java
index 298678f017..40f1a8c31b 100755
--- a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackScheduledConsumerTest.java
+++ b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/CallbackScheduledConsumerTest.java
@@ -291,6 +291,9 @@ public void test_execute_when_messageProvider_returns_true_and_not_in_recovery()
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockCallBackMessageProvider).invoke(jobExecutionContext);
                 will(returnValue(true));
 
@@ -324,6 +327,9 @@ public void test_execute_when_messageProvider_returns_false_and_not_in_recovery(
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockCallBackMessageProvider).invoke(jobExecutionContext);
                 will(returnValue(false));
 
@@ -361,6 +367,9 @@ public void test_execute_when_messageProvider_returns_true_and_not_in_recovery_a
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockCallBackMessageProvider).invoke(jobExecutionContext);
                 will(returnValue(true));
 
@@ -377,7 +386,7 @@ public void test_execute_when_messageProvider_returns_true_and_not_in_recovery_a
                 exactly(1).of(trigger).getTriggerBuilder();
                 will(returnValue(triggerBuilder));
 
-                exactly(1).of(triggerBuilder).usingJobData("eagerCallback", new Integer(1));
+                exactly(1).of(triggerBuilder).usingJobData("eagerCallbackCount", new Integer(1));
                 will(returnValue(triggerBuilder));
                 exactly(1).of(triggerBuilder).startNow();
                 will(returnValue(triggerBuilder));
@@ -424,6 +433,9 @@ public void test_execute_when_messageProvider_returns_true_and_not_in_recovery_a
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockCallBackMessageProvider).invoke(jobExecutionContext);
                 will(returnValue(true));
 
@@ -440,7 +452,7 @@ public void test_execute_when_messageProvider_returns_true_and_not_in_recovery_a
                 exactly(1).of(trigger).getTriggerBuilder();
                 will(returnValue(triggerBuilder));
 
-                exactly(1).of(triggerBuilder).usingJobData("eagerCallback", new Integer(1));
+                exactly(1).of(triggerBuilder).usingJobData("eagerCallbackCount", new Integer(1));
                 will(returnValue(triggerBuilder));
                 exactly(1).of(triggerBuilder).startNow();
                 will(returnValue(triggerBuilder));
@@ -486,6 +498,9 @@ public void test_execute_when_messageProvider_throws_exception() throws Schedule
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockCallBackMessageProvider).invoke(jobExecutionContext);
                 will(throwException(rt));
                 exactly(1).of(mockManagedResourceRecoveryManager).recover(rt);
diff --git a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumerTest.java b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumerTest.java
index 7d27b4da81..0c13df1976 100755
--- a/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumerTest.java
+++ b/ikasaneip/component/endpoint/quartz-schedule/src/test/java/org/ikasan/component/endpoint/quartz/consumer/ScheduledConsumerTest.java
@@ -382,6 +382,8 @@ public void test_execute_when_messageProvider_message_is_null_when_in_recovery_a
     {
         final MessageProvider mockMessageProvider = mockery.mock( MessageProvider.class);
         final JobKey jobKey = new JobKey("flowName", "moduleName");
+        final TriggerKey triggerKey = new TriggerKey("flowName", "moduleName");
+        final JobDataMap jobDataMap = new JobDataMap();
 
         // expectations
         mockery.checking(new Expectations()
@@ -390,7 +392,7 @@ public void test_execute_when_messageProvider_message_is_null_when_in_recovery_a
                 exactly(1).of(consumerConfiguration).isEager();
                 will(returnValue(false));
 
-                exactly(2).of(mockManagedResourceRecoveryManager).isRecovering();
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
                 will(returnValue(true));
 
                 exactly(1).of(mockMessageProvider).invoke(jobExecutionContext);
@@ -409,24 +411,22 @@ public void test_execute_when_messageProvider_message_is_null_when_in_recovery_a
                 exactly(1).of(triggerBuilder).build();
                 will(returnValue(trigger));
 
-                // cancelAll recovery
-                exactly(1).of(mockManagedResourceRecoveryManager).cancel();
+                exactly(1).of(jobExecutionContext).getTrigger();
+                will(returnValue(trigger));
 
-                // nope, consumer is not running
-                exactly(1).of(scheduler).isShutdown();
-                will(returnValue(false));
-                exactly(1).of(scheduler).isInStandbyMode();
-                will(returnValue(false));
-                exactly(1).of(mockJobDetail).getKey();
-                will(returnValue(jobKey));
-                exactly(1).of(scheduler).checkExists(jobKey);
-                will(returnValue(false));
+                exactly(1).of(trigger).getTriggerBuilder();
+                will(returnValue(triggerBuilder));
 
-                // start consumer
-                exactly(1).of(mockJobDetail).getKey();
-                will(returnValue(jobKey));
+                exactly(1).of(trigger).getJobDataMap();
+                will(returnValue(jobDataMap));
 
-                exactly(1).of(scheduler).scheduleJob(mockJobDetail, trigger);
+                exactly(2).of(trigger).getKey();
+                will(returnValue(triggerKey));
+
+                exactly(1).of(scheduler).checkExists(triggerKey);
+                will(returnValue(true));
+
+                exactly(1).of(scheduler).rescheduleJob(triggerKey, trigger);
                 will(returnValue(new Date()));
 
             }
@@ -459,6 +459,9 @@ public void test_execute_when_messageProvider_throws_exception() throws Schedule
         mockery.checking(new Expectations()
         {
             {
+                exactly(1).of(mockManagedResourceRecoveryManager).isRecovering();
+                will(returnValue(false));
+
                 exactly(1).of(mockMessageProvider).invoke(jobExecutionContext);
                 will(throwException(rt));
                 exactly(1).of(mockManagedResourceRecoveryManager).recover(rt);
@@ -527,7 +530,7 @@ public void test_execute_when_messageProvider_message_is_not_null_and_consumer_i
                 exactly(1).of(trigger).getTriggerBuilder();
                 will(returnValue(triggerBuilder));
 
-                exactly(1).of(triggerBuilder).usingJobData("eagerCallback", new Integer(1));
+                exactly(1).of(triggerBuilder).usingJobData("eagerCallbackCount", new Integer(1));
                 will(returnValue(triggerBuilder));
                 exactly(1).of(triggerBuilder).startNow();
                 will(returnValue(triggerBuilder));
@@ -590,7 +593,7 @@ public void test_execute_when_messageProvider_message_is_not_null_and_consumer_i
                 exactly(1).of(trigger).getTriggerBuilder();
                 will(returnValue(triggerBuilder));
 
-                exactly(1).of(triggerBuilder).usingJobData("eagerCallback", new Integer(1));
+                exactly(1).of(triggerBuilder).usingJobData("eagerCallbackCount", new Integer(1));
                 will(returnValue(triggerBuilder));
                 exactly(1).of(triggerBuilder).startNow();
                 will(returnValue(triggerBuilder));
diff --git a/ikasaneip/test/src/main/java/org/ikasan/testharness/flow/rule/IkasanStandaloneFlowTestRule.java b/ikasaneip/test/src/main/java/org/ikasan/testharness/flow/rule/IkasanStandaloneFlowTestRule.java
index c45fd19256..8b68665be3 100755
--- a/ikasaneip/test/src/main/java/org/ikasan/testharness/flow/rule/IkasanStandaloneFlowTestRule.java
+++ b/ikasaneip/test/src/main/java/org/ikasan/testharness/flow/rule/IkasanStandaloneFlowTestRule.java
@@ -45,6 +45,7 @@
 import org.ikasan.component.endpoint.quartz.consumer.ScheduledConsumer;
 import org.ikasan.component.endpoint.quartz.consumer.ScheduledConsumerConfiguration;
 import org.ikasan.flow.event.DefaultReplicationFactory;
+import org.ikasan.scheduler.ScheduledComponent;
 import org.ikasan.spec.flow.Flow;
 import org.ikasan.spec.module.Module;
 import org.ikasan.testharness.flow.FlowObserver;
@@ -57,6 +58,7 @@
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
+import org.quartz.JobDetail;
 import org.quartz.JobExecutionContext;
 import org.quartz.SchedulerException;
 import org.quartz.Trigger;
@@ -442,7 +444,8 @@ public void fireScheduledConsumer()
         ScheduledConsumer consumer = (ScheduledConsumer) getComponent(scheduledConsumerName);
         try
         {
-            Trigger trigger = newTrigger().withIdentity("name", "group").build();
+            JobDetail jobDetail = ((ScheduledComponent<JobDetail>)consumer).getJobDetail();
+            Trigger trigger = newTrigger().withIdentity("name", "group").forJob(jobDetail).build();
             consumer.scheduleAsEagerTrigger(trigger, 0);
         }
         catch (SchedulerException se)
