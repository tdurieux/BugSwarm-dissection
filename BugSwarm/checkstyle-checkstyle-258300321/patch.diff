diff --git a/.travis.yml b/.travis.yml
index 8b3bc2d430..d6c5a12a01 100755
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,6 @@
 language: java
 sudo: false
+dist: precise
 
 cache:
   apt: true
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
index ad29a2bed0..3fb7720b80 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavadocDetailNodeParser.java
@@ -23,6 +23,8 @@
 import org.antlr.v4.runtime.BailErrorStrategy;
 import org.antlr.v4.runtime.BaseErrorListener;
 import org.antlr.v4.runtime.CommonTokenStream;
+import org.antlr.v4.runtime.InputMismatchException;
+import org.antlr.v4.runtime.Parser;
 import org.antlr.v4.runtime.ParserRuleContext;
 import org.antlr.v4.runtime.RecognitionException;
 import org.antlr.v4.runtime.Recognizer;
@@ -72,12 +74,6 @@
      */
     public static final String MSG_KEY_PARSE_ERROR = "javadoc.parse.error";
 
-    /**
-     * Unrecognized error from antlr parser.
-     */
-    public static final String MSG_KEY_UNRECOGNIZED_ANTLR_ERROR =
-            "javadoc.unrecognized.antlr.error";
-
     /** Symbols with which javadoc starts. */
     private static final String JAVADOC_START = "/**";
 
@@ -124,19 +120,11 @@ public ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst) {
                                 + JAVADOC_START.length());
             result.setTree(tree);
         }
-        catch (ParseCancellationException | IllegalArgumentException ex) {
+        catch (ParseCancellationException | IllegalArgumentException ignored) {
             // If syntax error occurs then message is printed by error listener
             // and parser throws this runtime exception to stop parsing.
             // Just stop processing current Javadoc comment.
-            ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
-
-            // There are cases when antlr error listener does not handle syntax error
-            if (parseErrorMessage == null) {
-                parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),
-                        MSG_KEY_UNRECOGNIZED_ANTLR_ERROR,
-                        javadocCommentAst.getColumnNo(), ex.getMessage());
-            }
-
+            final ParseErrorMessage parseErrorMessage = errorListener.getErrorMessage();
             result.setParseErrorMessage(parseErrorMessage);
         }
 
@@ -173,7 +161,7 @@ private ParseTree parseJavadocAsParseTree(String blockComment) {
 
         // This strategy stops parsing when parser error occurs.
         // By default it uses Error Recover Strategy which is slow and useless.
-        parser.setErrorHandler(new BailErrorStrategy());
+        parser.setErrorHandler(new JavadocParserErrorStrategy());
 
         return parser.javadoc();
     }
@@ -628,4 +616,22 @@ public String getMessageKey() {
         }
     }
 
+    /**
+     * <a href="http://www.antlr.org/api/Java/org/antlr/v4/runtime/BailErrorStrategy.html">
+     * BailErrorStrategy</a> is used to make ANTLR generated parser bail out on the first error
+     * in parser and not attempt any recovery methods but it doesn't report error to the
+     * listeners. This class is to ensure proper error reporting.
+     *
+     * @see DescriptiveErrorListener
+     * @see <a href="http://www.antlr.org/api/Java/org/antlr/v4/runtime/ANTLRErrorStrategy.html">
+     *     ANTLRErrorStrategy</a>
+     */
+    private static class JavadocParserErrorStrategy extends BailErrorStrategy {
+        @Override
+        public Token recoverInline(Parser recognizer) {
+            reportError(recognizer, new InputMismatchException(recognizer));
+            return super.recoverInline(recognizer);
+        }
+    }
+
 }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
index f27682f1f1..460fcdc0ec 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java
@@ -70,11 +70,6 @@
      */
     public static final String MSG_KEY_PARSE_ERROR =
             JavadocDetailNodeParser.MSG_KEY_PARSE_ERROR;
-    /**
-     * Unrecognized error from antlr parser.
-     */
-    public static final String MSG_KEY_UNRECOGNIZED_ANTLR_ERROR =
-            JavadocDetailNodeParser.MSG_KEY_UNRECOGNIZED_ANTLR_ERROR;
 
     /**
      * Key is "line:column". Value is {@link DetailNode} tree. Map is stored in {@link ThreadLocal}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties
index 01ed85a422..4ee83eef0d 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Javadoc comment at column {0} has parse error. Details:
 javadoc.return.expected=Expected an @return tag.
 javadoc.unclosedHtml=Unclosed HTML tag found: {0}
 javadoc.unknownTag=Unknown tag ''{0}''.
-javadoc.unrecognized.antlr.error=Javadoc comment at column {0} has parse error. Unrecognized error from ANTLR parser: {1}
 javadoc.unusedTag=Unused {0} tag for ''{1}''.
 javadoc.unusedTagGeneral=Unused Javadoc tag.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_de.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_de.properties
index 7d38769bd5..1e354e58ba 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_de.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_de.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Der Javadoc-Kommentar an Position {0} führt zu einem P
 javadoc.return.expected=Fehlender @return-Tag.
 javadoc.unclosedHtml=Nicht geschlossenen HTML-Tag gefunden: {0}
 javadoc.unknownTag=Unbekannter Tag ''{0}''.
-javadoc.unrecognized.antlr.error=Der Javadoc-Kommentar an Position {0} führt zu einem Parserfehler. Unbekannter Fehler des ANTLR-Parsers: {1}
 javadoc.unusedTag=Nicht verwendeter Tag {0} für ''{1}''.
 javadoc.unusedTagGeneral=Nicht verwendeter Javadoc-Tag.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_es.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_es.properties
index bcf101b580..5cba800409 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_es.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_es.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Javadoc comentario en la columna {0} tiene parse error.
 javadoc.return.expected=Se esperaba la etiqueta @return.
 javadoc.unclosedHtml=Se encontró una etiqueta HTML sin cerrar: {0}
 javadoc.unknownTag=Desconocido etiqueta ''{0}''.
-javadoc.unrecognized.antlr.error=Javadoc comentario en la columna {0} tiene parse error. Error no reconocido del analizador antlr: {1}
 javadoc.unusedTag=Etiqueta {0} no usada en ''{1}''.
 javadoc.unusedTagGeneral=Etiqueta Javadoc no usada.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fi.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fi.properties
index 80dab9e689..f3d6d76a24 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fi.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fi.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Javadoc kommentti sarakkeessa {0} on Jäsennysvirhe. Ti
 javadoc.return.expected=@return-tagi puuttuu.
 javadoc.unclosedHtml=Unclosed HTML-koodi löytyy: {0}
 javadoc.unknownTag=Tuntematon tag ''{0}''.
-javadoc.unrecognized.antlr.error=Javadoc kommentti sarakkeessa {0} on Jäsennysvirhe. Tunnistamaton virheen ANTLR jäsennin: {1}
 javadoc.unusedTag=Tuntematon tagi ''{1}'':lle: {0}.
 javadoc.unusedTagGeneral=Tuntematon Javadoc-tagi.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties
index be38f6eddb..3b4b40a0ff 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_fr.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Le commentaire Javadoc à la colonne {0} ne peut être
 javadoc.return.expected=Balise javadoc @return manquante.
 javadoc.unclosedHtml=Balise HTML trouvée dans la javadoc : {0}
 javadoc.unknownTag=Balise inconnue ''{0}''.
-javadoc.unrecognized.antlr.error=Le commentaire Javadoc à la colonne {0} ne peut être analysé. Erreur inconnue du parseur ANTLR : {1}
 javadoc.unusedTag=Balise javadoc {0} inutilisée pour ''{1}''.
 javadoc.unusedTagGeneral=Balise javadoc inutilisée.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_ja.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_ja.properties
index 1618f5617a..2ee37c8403 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_ja.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_ja.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error={0} 桁目の Javadoc コメントでパースエラー
 javadoc.return.expected=@return タグが必要です。
 javadoc.unclosedHtml=閉じていない HTML タグが見つかりました: {0}
 javadoc.unknownTag=不明なタグ ''{0}''。
-javadoc.unrecognized.antlr.error={0} 桁目の Javadoc コメントでパースエラーが発生しました。 ANTLRパーサーからの未知のエラー: {1}
 javadoc.unusedTag=''{1}'' に対する使用されない {0} タグです。
 javadoc.unusedTagGeneral=使用されない Javadoc タグです。
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_pt.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_pt.properties
index 9726bf55d3..4841d860d5 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_pt.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_pt.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Javadoc comentário na coluna {0} tem analisar erro. De
 javadoc.return.expected=Esperava uma marca @return.
 javadoc.unclosedHtml=Marca HTML não fechada entrada: {0}
 javadoc.unknownTag=Desconhecido tag ''{0}''.
-javadoc.unrecognized.antlr.error=Javadoc comentário na coluna {0} tem analisar erro. Erro não reconhecido de analisador ANTLR: {1}
 javadoc.unusedTag=Marca {0} não utilizada por ''{1}''.
 javadoc.unusedTagGeneral=Marca Javadoc não utilizada.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_tr.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_tr.properties
index e1c594a964..455471059c 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_tr.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_tr.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Sütununda Javadoc comment {0} hatası ayrıştırmak v
 javadoc.return.expected=@return etiketi eksik.
 javadoc.unclosedHtml=Kapatılmamış bir HTML etiketi bulundu: {0}
 javadoc.unknownTag=Bilinmeyen etiket: ''{0}''.
-javadoc.unrecognized.antlr.error=Sütununda Javadoc comment {0} hatası ayrıştırmak vardır. ANTLR çözümleyici Tanınmayan hata: {1}
 javadoc.unusedTag=''{1}'' için kullanılmayan {0} etiketi mevcut.
 javadoc.unusedTagGeneral=Kullanılmayan Javadoc etiketi.
 javadoc.writeTag={0}={1}
diff --git a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_zh.properties b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_zh.properties
index 4b863dd0dc..453b85c691 100755
--- a/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_zh.properties
+++ b/src/main/resources/com/puppycrawl/tools/checkstyle/checks/javadoc/messages_zh.properties
@@ -20,7 +20,6 @@ javadoc.parse.rule.error=Javadoc 第 {0} 个字符解析错误。解析 {2} ，
 javadoc.return.expected=需要一个 Javadoc注释 @return 。
 javadoc.unclosedHtml=未关闭的 HTML 标签： {0} 。
 javadoc.unknownTag=未知标签 ''{0}'' 。
-javadoc.unrecognized.antlr.error=Javadoc 第 {0} 个字符解析错误。ANTLR 解析器未知错误： {1}
 javadoc.unusedTag=''{1}'' 的无用标签 {0} 。
 javadoc.unusedTagGeneral=无用标签。
 javadoc.writeTag={0}={1}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/BaseFileSetCheckTestSupport.java b/src/test/java/com/puppycrawl/tools/checkstyle/BaseFileSetCheckTestSupport.java
index 345533d674..634d72d7ee 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/BaseFileSetCheckTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/BaseFileSetCheckTestSupport.java
@@ -21,7 +21,12 @@
 
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 
-public class BaseFileSetCheckTestSupport extends BaseCheckTestSupport {
+public class BaseFileSetCheckTestSupport extends AbstractModuleTestSupport {
+    @Override
+    protected String getPackageLocation() {
+        return "";
+    }
+
     @Override
     protected DefaultConfiguration createCheckerConfig(
         Configuration config) {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
index d8084a7944..4158376df0 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinterTest.java
@@ -37,10 +37,11 @@
 import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 
-public class DetailNodeTreeStringPrinterTest {
+public class DetailNodeTreeStringPrinterTest extends AbstractPathTestSupport {
 
-    private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/astprinter/" + filename;
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/astprinter";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
index 9d9c99fc7a..008179e947 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java
@@ -170,9 +170,10 @@ public void testVersionPrint()
             throws Exception {
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Checkstyle version: null" + System.lineSeparator(),
+            assertEquals("Unexpected ouput log",
+                    "Checkstyle version: null" + System.lineSeparator(),
                     systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-v");
     }
@@ -184,8 +185,8 @@ public void testWrongArgument()
         exit.checkAssertionAfterwards(() -> {
             final String usage = "Unrecognized option: -w" + EOL
                     + USAGE;
-            assertEquals(usage, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", usage, systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-w");
     }
@@ -195,9 +196,10 @@ public void testNoConfigSpecified()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Must specify a config XML file." + System.lineSeparator(),
+            assertEquals("Unexpected ouput log",
+                    "Must specify a config XML file." + System.lineSeparator(),
                     systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main(getPath("InputMain.java"));
     }
@@ -207,9 +209,9 @@ public void testNonExistingTargetFile()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Files to process must be specified, found 0."
+            assertEquals("Unexpected ouput log", "Files to process must be specified, found 0."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", "/google_checks.xml", "NonExistingFile.java");
     }
@@ -219,10 +221,10 @@ public void testNonExistingConfigFile()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Could not find config XML file "
+            assertEquals("Unexpected ouput log", "Could not find config XML file "
                         + "'src/main/resources/non_existing_config.xml'." + EOL,
                     systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", "src/main/resources/non_existing_config.xml",
                 getPath("InputMain.java"));
@@ -232,9 +234,9 @@ public void testNonExistingConfigFile()
     public void testNonExistingOutputFormat() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Invalid output format. "
+            assertEquals("Unexpected ouput log", "Invalid output format. "
                     + "Found 'xmlp' but expected 'plain' or 'xml'." + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", "/google_checks.xml", "-f", "xmlp",
                 getPath("InputMain.java"));
@@ -246,11 +248,11 @@ public void testNonExistingClass() throws Exception {
         exit.checkAssertionAfterwards(() -> {
             final String expectedExceptionMessage = errorCounterOneMessage.getMessage()
                     + EOL;
-            assertEquals(expectedExceptionMessage, systemOut.getLog());
+            assertEquals("Unexpected ouput log", expectedExceptionMessage, systemOut.getLog());
 
             final String cause = "com.puppycrawl.tools.checkstyle.api.CheckstyleException:"
                     + " cannot initialize module TreeWalker - ";
-            assertTrue(systemErr.getLog().startsWith(cause));
+            assertTrue("Unexpected system error log", systemErr.getLog().startsWith(cause));
         });
 
         Main.main("-c", getPath("InputMainConfig-non-existing-classname.xml"),
@@ -261,10 +263,10 @@ public void testNonExistingClass() throws Exception {
     public void testExistingTargetFile() throws Exception {
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(auditStartMessage.getMessage() + EOL
+            assertEquals("Unexpected ouput log", auditStartMessage.getMessage() + EOL
                     + auditFinishMessage.getMessage() + EOL,
                     systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 getPath("InputMain.java"));
@@ -279,12 +281,12 @@ public void testExistingTargetFileXmlOutput() throws Exception {
                     ResourceBundle.getBundle("checkstylecompilation", Locale.ROOT);
             final String version = compilationProperties
                 .getString("checkstyle.compile.version");
-            assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + EOL
+            assertEquals("Unexpected ouput log", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + EOL
                     + "<checkstyle version=\"" + version + "\">" + EOL
                     + "<file name=\"" + expectedPath + "\">" + EOL
                     + "</file>" + EOL
                     + "</checkstyle>" + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 "-f", "xml",
@@ -295,9 +297,9 @@ public void testExistingTargetFileXmlOutput() throws Exception {
     public void testExistingTargetFilePlainOutput() throws Exception {
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(auditStartMessage.getMessage() + EOL
+            assertEquals("Unexpected ouput log", auditStartMessage.getMessage() + EOL
                     + auditFinishMessage.getMessage() + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 "-f", "plain",
@@ -316,7 +318,7 @@ public void testExistingTargetFileWithViolations() throws Exception {
                     "name.invalidPattern", new String[] {"InputMainInner", "^[a-z0-9]*$"},
                     null, getClass(), null);
             final String expectedPath = getFilePath("InputMain.java");
-            assertEquals(auditStartMessage.getMessage() + EOL
+            assertEquals("Unexpected ouput log", auditStartMessage.getMessage() + EOL
                             + "[WARN] " + expectedPath + ":3:14: "
                             + invalidPatternMessageMain.getMessage()
                             + " [TypeName]" + EOL
@@ -324,7 +326,7 @@ public void testExistingTargetFileWithViolations() throws Exception {
                             + invalidPatternMessageMainInner.getMessage()
                             + " [TypeName]" + EOL
                             + auditFinishMessage.getMessage() + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname2.xml"),
                 getPath("InputMain.java"));
@@ -347,14 +349,14 @@ public void testExistingTargetFileWithError()
                     "name.invalidPattern", new String[] {"InputMainInner", "^[a-z0-9]*$"},
                     null, getClass(), null);
             final String expectedPath = getFilePath("InputMain.java");
-            assertEquals(auditStartMessage.getMessage() + EOL
+            assertEquals("Unexpected ouput log", auditStartMessage.getMessage() + EOL
                     + "[ERROR] " + expectedPath + ":3:14: "
                     + invalidPatternMessageMain.getMessage() + " [TypeName]" + EOL
                     + "[ERROR] " + expectedPath + ":5:7: "
                     + invalidPatternMessageMainInner.getMessage() + " [TypeName]" + EOL
                     + auditFinishMessage.getMessage() + EOL
                     + errorCounterTwoMessage.getMessage() + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c",
                 getPath("InputMainConfig-classname2-error.xml"),
@@ -366,8 +368,8 @@ public void testExistingTargetFilePlainOutputToNonExistingFile()
             throws Exception {
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 "-f", "plain",
@@ -380,8 +382,8 @@ public void testExistingTargetFilePlainOutputToFile()
             throws Exception {
         final File file = temporaryFolder.newFile("file.output");
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 "-f", "plain",
@@ -392,12 +394,12 @@ public void testExistingTargetFilePlainOutputToFile()
     @Test
     public void testCreateNonExistingOutputFile() throws Exception {
         final String outputFile = temporaryFolder.getRoot().getCanonicalPath() + "nonexisting.out";
-        assertFalse(new File(outputFile).exists());
+        assertFalse("File must not exist", new File(outputFile).exists());
         Main.main("-c", getPath("InputMainConfig-classname.xml"),
                 "-f", "plain",
                 "-o", outputFile,
                 getPath("InputMain.java"));
-        assertTrue(new File(outputFile).exists());
+        assertTrue("File must exist", new File(outputFile).exists());
     }
 
     @Test
@@ -408,9 +410,9 @@ public void testExistingTargetFilePlainOutputProperties() throws Exception {
 
         //exit.expectSystemExitWithStatus(0);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(auditStartMessage.getMessage() + EOL
+            assertEquals("Unexpected ouput log", auditStartMessage.getMessage() + EOL
                     + auditFinishMessage.getMessage() + EOL, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname-prop.xml"),
                 "-p", getPath("InputMainMycheckstyle.properties"),
@@ -425,9 +427,9 @@ public void testExistingTargetFilePlainOutputNonexistingProperties()
             throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Could not find file 'nonexisting.properties'."
+            assertEquals("Unexpected ouput log", "Could not find file 'nonexisting.properties'."
                     + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", getPath("InputMainConfig-classname-prop.xml"),
                 "-p", "nonexisting.properties",
@@ -440,10 +442,10 @@ public void testExistingIncorrectConfigFile()
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(() -> {
             final String output = errorCounterOneMessage.getMessage() + EOL;
-            assertEquals(output, systemOut.getLog());
+            assertEquals("Unexpected ouput log", output, systemOut.getLog());
             final String errorOutput = "com.puppycrawl.tools.checkstyle.api."
                 + "CheckstyleException: unable to parse configuration stream - ";
-            assertTrue(systemErr.getLog().startsWith(errorOutput));
+            assertTrue("Unexpected system error log", systemErr.getLog().startsWith(errorOutput));
         });
         Main.main("-c", getPath("InputMainConfig-Incorrect.xml"),
             getPath("InputMain.java"));
@@ -455,11 +457,11 @@ public void testExistingIncorrectChildrenInConfigFile()
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(() -> {
             final String output = errorCounterOneMessage.getMessage() + EOL;
-            assertEquals(output, systemOut.getLog());
+            assertEquals("Unexpected ouput log", output, systemOut.getLog());
             final String errorOutput = "com.puppycrawl.tools.checkstyle.api."
                     + "CheckstyleException: cannot initialize module RegexpSingleline"
                     + " - RegexpSingleline is not allowed as a child in RegexpSingleline";
-            assertTrue(systemErr.getLog().startsWith(errorOutput));
+            assertTrue("Unexpected system error log", systemErr.getLog().startsWith(errorOutput));
         });
         Main.main("-c", getPath("InputMainConfig-incorrectChildren.xml"),
             getPath("InputMain.java"));
@@ -471,11 +473,11 @@ public void testExistingIncorrectChildrenInConfigFile2()
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(() -> {
             final String output = errorCounterOneMessage.getMessage() + EOL;
-            assertEquals(output, systemOut.getLog());
+            assertEquals("Unexpected ouput log", output, systemOut.getLog());
             final String errorOutput = "com.puppycrawl.tools.checkstyle.api."
                     + "CheckstyleException: cannot initialize module TreeWalker"
                     + " - JavadocVariable is not allowed as a child in JavadocMethod";
-            assertTrue(systemErr.getLog().startsWith(errorOutput));
+            assertTrue("Unexpected system error log", systemErr.getLog().startsWith(errorOutput));
         });
         Main.main("-c", getPath("InputMainConfig-incorrectChildren2.xml"),
             getPath("InputMain.java"));
@@ -503,11 +505,13 @@ public void testLoadPropertiesIoException() throws Exception {
             fail("Exception was expected");
         }
         catch (InvocationTargetException ex) {
-            assertTrue(ex.getCause() instanceof CheckstyleException);
+            assertTrue("Invalid error cause",
+                    ex.getCause() instanceof CheckstyleException);
             // We do separate validation for message as in Windows
             // disk drive letter appear in message,
             // so we skip that drive letter for compatibility issues
-            assertTrue(ex.getCause().getLocalizedMessage().contains(":invalid"));
+            assertTrue("Invalid error message",
+                    ex.getCause().getLocalizedMessage().contains(":invalid"));
         }
     }
 
@@ -524,8 +528,10 @@ public void testCreateListenerIllegalStateException() throws Exception {
             final LocalizedMessage loadPropertiesMessage = new LocalizedMessage(0,
                     Definitions.CHECKSTYLE_BUNDLE, "Main.createListener",
                     new String[] {"myformat", "plain", "xml"}, null, getClass(), null);
-            assertEquals(loadPropertiesMessage.getMessage(), ex.getCause().getLocalizedMessage());
-            assertTrue(ex.getCause() instanceof IllegalStateException);
+            assertEquals("Invalid error message",
+                    loadPropertiesMessage.getMessage(), ex.getCause().getLocalizedMessage());
+            assertTrue("Invalid error cause",
+                    ex.getCause() instanceof IllegalStateException);
         }
     }
 
@@ -547,8 +553,10 @@ public void testCreateListenerWithLocationIllegalStateException() throws Excepti
             final LocalizedMessage createListenerMessage = new LocalizedMessage(0,
                     Definitions.CHECKSTYLE_BUNDLE, "Main.createListener",
                     new String[] {"myformat", "plain", "xml"}, null, getClass(), null);
-            assertEquals(createListenerMessage.getMessage(), ex.getCause().getLocalizedMessage());
-            assertTrue(ex.getCause() instanceof IllegalStateException);
+            assertEquals("Invalid error message",
+                    createListenerMessage.getMessage(), ex.getCause().getLocalizedMessage());
+            assertTrue("Invalid error cause",
+                    ex.getCause() instanceof IllegalStateException);
         }
         finally {
             // method creates output folder
@@ -587,8 +595,8 @@ public void testExistingDirectoryWithViolations() throws Exception {
             }
             sb.append(auditFinishMessage.getMessage())
                     .append(EOL);
-            assertEquals(sb.toString(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", sb.toString(), systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-c", getPath("InputMainConfig-filelength.xml"),
@@ -607,7 +615,7 @@ public void testListFilesNotFile() throws Exception {
         when(fileMock.isFile()).thenReturn(false);
 
         final List<File> result = (List<File>) method.invoke(null, fileMock, null);
-        assertEquals(0, result.size());
+        assertEquals("Invalid result size", 0, result.size());
     }
 
     @Test
@@ -623,7 +631,7 @@ public void testListFilesDirectoryWithNull() throws Exception {
 
         final List<File> result = (List<File>) method.invoke(null, fileMock,
                 new ArrayList<Pattern>());
-        assertEquals(0, result.size());
+        assertEquals("Invalid result size", 0, result.size());
     }
 
     @Test
@@ -632,13 +640,14 @@ public void testFileReferenceDuringException() throws Exception {
         exit.checkAssertionAfterwards(() -> {
             final String expectedExceptionMessage = auditStartMessage.getMessage() + EOL
                             + errorCounterOneMessage.getMessage() + EOL;
-            assertEquals(expectedExceptionMessage, systemOut.getLog());
+            assertEquals("Unexpected ouput log", expectedExceptionMessage, systemOut.getLog());
 
             final String exceptionFirstLine = "com.puppycrawl.tools.checkstyle.api."
                     + "CheckstyleException: Exception was thrown while processing "
                     + new File(getNonCompilablePath("InputMainIncorrectClass.java")).getPath()
                     + EOL;
-            assertTrue(systemErr.getLog().startsWith(exceptionFirstLine));
+            assertTrue("Unexpected system error log",
+                    systemErr.getLog().startsWith(exceptionFirstLine));
         });
 
         // We put xml as source to cause parse excepion
@@ -651,9 +660,9 @@ public void testPrintTreeOnMoreThanOneFile() throws Exception {
 
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Printing AST is allowed for only one file."
+            assertEquals("Unexpected ouput log", "Printing AST is allowed for only one file."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-t", getPath(""));
@@ -690,8 +699,8 @@ public void testPrintTreeOption() throws Exception {
             + "    `--RCURLY -> } [6:0]" + EOL;
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(expected, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", expected, systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-t", getPath("InputMain.java"));
     }
@@ -730,8 +739,8 @@ public void testPrintTreeCommentsOption() throws Exception {
             + "    `--RCURLY -> } [6:0]" + EOL;
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(expected, systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", expected, systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-T", getPath("InputMain.java"));
     }
@@ -743,8 +752,10 @@ public void testPrintTreeJavadocOption() throws Exception {
             .replaceAll("\\\\r\\\\n", "\\\\n");
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(expected, systemOut.getLog().replaceAll("\\\\r\\\\n", "\\\\n"));
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log",
+                    expected, systemOut.getLog().replaceAll("\\\\r\\\\n", "\\\\n"));
+            assertEquals("Unexpected system error log",
+                    "", systemErr.getLog());
         });
         Main.main("-j", getPath("InputMainJavadocComment.javadoc"));
     }
@@ -756,8 +767,9 @@ public void testPrintFullTreeOption() throws Exception {
             StandardCharsets.UTF_8).replaceAll("\\\\r\\\\n", "\\\\n");
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals(expected, systemOut.getLog().replaceAll("\\\\r\\\\n", "\\\\n"));
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log",
+                    expected, systemOut.getLog().replaceAll("\\\\r\\\\n", "\\\\n"));
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-J", getPath("InputMainAstTreeStringPrinterJavadoc.java"));
     }
@@ -767,9 +779,9 @@ public void testConflictingOptionsTvsC() throws Exception {
 
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Option '-t' cannot be used with other options."
+            assertEquals("Unexpected ouput log", "Option '-t' cannot be used with other options."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-c", "/google_checks.xml", "-t", getPath(""));
@@ -780,9 +792,9 @@ public void testConflictingOptionsTvsP() throws Exception {
 
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Option '-t' cannot be used with other options."
+            assertEquals("Unexpected ouput log", "Option '-t' cannot be used with other options."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-p", getPath("InputMainMycheckstyle.properties"), "-t", getPath(""));
@@ -793,9 +805,9 @@ public void testConflictingOptionsTvsF() throws Exception {
 
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Option '-t' cannot be used with other options."
+            assertEquals("Unexpected ouput log", "Option '-t' cannot be used with other options."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-f", "plain", "-t", getPath(""));
@@ -807,9 +819,9 @@ public void testConflictingOptionsTvsO() throws Exception {
 
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Option '-t' cannot be used with other options."
+            assertEquals("Unexpected ouput log", "Option '-t' cannot be used with other options."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
 
         Main.main("-o", file.getCanonicalPath(), "-t", getPath(""));
@@ -817,7 +829,8 @@ public void testConflictingOptionsTvsO() throws Exception {
 
     @Test
     public void testDebugOption() throws Exception {
-        exit.checkAssertionAfterwards(() -> assertNotEquals("", systemErr.getLog()));
+        exit.checkAssertionAfterwards(() -> assertNotEquals("Unexpected system error log",
+                        "", systemErr.getLog()));
         Main.main("-c", "/google_checks.xml", getPath("InputMain.java"), "-d");
     }
 
@@ -825,9 +838,9 @@ public void testDebugOption() throws Exception {
     public void testExcludeOption() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Files to process must be specified, found 0."
+            assertEquals("Unexpected ouput log", "Files to process must be specified, found 0."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-c", "/google_checks.xml", getFilePath(""), "-e", getFilePath(""));
     }
@@ -836,9 +849,9 @@ public void testExcludeOption() throws Exception {
     public void testExcludeRegexpOption() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Files to process must be specified, found 0."
+            assertEquals("Unexpected ouput log", "Files to process must be specified, found 0."
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected ouput log", "", systemErr.getLog());
         });
         Main.main("-c", "/google_checks.xml", getFilePath(""), "-x", ".");
     }
@@ -853,7 +866,7 @@ public void testExcludeDirectoryNotMatch() throws Exception {
 
         final List<File> result = (List<File>) method.invoke(null, new File(getFilePath("")),
                 list);
-        assertNotEquals(0, result.size());
+        assertNotEquals("Invalid result size", 0, result.size());
     }
 
     @Test
@@ -861,9 +874,9 @@ public void testCustomRootModule() throws Exception {
         TestRootModuleChecker.reset();
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
-            assertTrue(TestRootModuleChecker.isProcessed());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
+            assertTrue("Invalid Checker state", TestRootModuleChecker.isProcessed());
         });
         Main.main("-c", getPath("InputMainConfig-custom-root-module.xml"),
                 getPath("InputMain.java"));
@@ -884,11 +897,12 @@ public void testCustomSimpleRootModule() throws Exception {
                             + "TestRootModuleCheckerCheck, " + checkstylePackage
                             + "TestRootModuleCheckerCheck"},
                     null, getClass(), null);
-            assertEquals(errorCounterOneMessage.getMessage() + EOL,
+            assertEquals("Unexpected ouput log", errorCounterOneMessage.getMessage() + EOL,
                     systemOut.getLog());
-            assertTrue(systemErr.getLog().startsWith(checkstylePackage + "api.CheckstyleException: "
+            assertTrue("Unexpected system error log",
+                    systemErr.getLog().startsWith(checkstylePackage + "api.CheckstyleException: "
                     + unableToInstantiateExceptionMessage.getMessage()));
-            assertFalse(TestRootModuleChecker.isProcessed());
+            assertFalse("Invalid checker state", TestRootModuleChecker.isProcessed());
         });
         Main.main("-c", getPath("InputMainConfig-custom-simple-root-module.xml"),
                 getPath("InputMain.java"));
@@ -899,11 +913,11 @@ public void testExecuteIgnoredModule() throws Exception {
         exit.expectSystemExitWithStatus(-2);
         exit.checkAssertionAfterwards(() -> {
             final String expectedExceptionMessage = errorCounterOneMessage.getMessage() + EOL;
-            assertEquals(expectedExceptionMessage, systemOut.getLog());
+            assertEquals("Unexpected ouput log", expectedExceptionMessage, systemOut.getLog());
 
             final String cause = "com.puppycrawl.tools.checkstyle.api.CheckstyleException:"
                     + " cannot initialize module TreeWalker - ";
-            assertTrue(systemErr.getLog().startsWith(cause));
+            assertTrue("Unexpected system error log", systemErr.getLog().startsWith(cause));
         });
 
         Main.main("-c", getPath("InputMainConfig-non-existing-classname-ignore.xml"),
@@ -915,9 +929,9 @@ public void testExecuteIgnoredModule() throws Exception {
     public void testInvalidCheckerThreadsNumber() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Invalid Checker threads number"
+            assertEquals("Unexpected ouput log", "Invalid Checker threads number"
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-C", "invalid", "-c", "/google_checks.xml", getPath("InputMain.java"));
     }
@@ -926,9 +940,9 @@ public void testInvalidCheckerThreadsNumber() throws Exception {
     public void testInvalidTreeWalkerThreadsNumber() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Invalid TreeWalker threads number"
+            assertEquals("Unexpected ouput log", "Invalid TreeWalker threads number"
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-W", "invalid", "-c", "/google_checks.xml", getPath("InputMain.java"));
     }
@@ -937,9 +951,9 @@ public void testInvalidTreeWalkerThreadsNumber() throws Exception {
     public void testZeroCheckerThreadsNumber() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("Checker threads number must be greater than zero"
+            assertEquals("Unexpected ouput log", "Checker threads number must be greater than zero"
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-C", "0", "-c", "/google_checks.xml", getPath("InputMain.java"));
     }
@@ -948,9 +962,10 @@ public void testZeroCheckerThreadsNumber() throws Exception {
     public void testZeroTreeWalkerThreadsNumber() throws Exception {
         exit.expectSystemExitWithStatus(-1);
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("TreeWalker threads number must be greater than zero"
+            assertEquals("Unexpected ouput log",
+                    "TreeWalker threads number must be greater than zero"
                 + System.lineSeparator(), systemOut.getLog());
-            assertEquals("", systemErr.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
         });
         Main.main("-W", "0", "-c", "/google_checks.xml", getPath("InputMain.java"));
     }
@@ -960,14 +975,16 @@ public void testCheckerThreadsNumber() throws Exception {
         TestRootModuleChecker.reset();
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
-            assertTrue(TestRootModuleChecker.isProcessed());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
+            assertTrue("Invalid checker state", TestRootModuleChecker.isProcessed());
             final DefaultConfiguration config =
                     (DefaultConfiguration) TestRootModuleChecker.getConfig();
             final ThreadModeSettings multiThreadModeSettings = config.getThreadModeSettings();
-            assertEquals(4, multiThreadModeSettings.getCheckerThreadsNumber());
-            assertEquals(1, multiThreadModeSettings.getTreeWalkerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    4, multiThreadModeSettings.getCheckerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    1, multiThreadModeSettings.getTreeWalkerThreadsNumber());
         });
         Main.main("-C", "4", "-c", getPath("InputMainConfig-custom-root-module.xml"),
             getPath("InputMain.java"));
@@ -978,14 +995,16 @@ public void testTreeWalkerThreadsNumber() throws Exception {
         TestRootModuleChecker.reset();
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
-            assertTrue(TestRootModuleChecker.isProcessed());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
+            assertTrue("Invalid checker state", TestRootModuleChecker.isProcessed());
             final DefaultConfiguration config =
                     (DefaultConfiguration) TestRootModuleChecker.getConfig();
             final ThreadModeSettings multiThreadModeSettings = config.getThreadModeSettings();
-            assertEquals(1, multiThreadModeSettings.getCheckerThreadsNumber());
-            assertEquals(4, multiThreadModeSettings.getTreeWalkerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    1, multiThreadModeSettings.getCheckerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    4, multiThreadModeSettings.getTreeWalkerThreadsNumber());
         });
         Main.main("-W", "4", "-c", getPath("InputMainConfig-custom-root-module.xml"),
             getPath("InputMain.java"));
@@ -996,20 +1015,22 @@ public void testModuleNameInSingleThreadMode() throws Exception {
         TestRootModuleChecker.reset();
 
         exit.checkAssertionAfterwards(() -> {
-            assertEquals("", systemOut.getLog());
-            assertEquals("", systemErr.getLog());
-            assertTrue(TestRootModuleChecker.isProcessed());
+            assertEquals("Unexpected ouput log", "", systemOut.getLog());
+            assertEquals("Unexpected system error log", "", systemErr.getLog());
+            assertTrue("Invalid checker state", TestRootModuleChecker.isProcessed());
             final DefaultConfiguration config =
                     (DefaultConfiguration) TestRootModuleChecker.getConfig();
             final ThreadModeSettings multiThreadModeSettings =
                 config.getThreadModeSettings();
-            assertEquals(1, multiThreadModeSettings.getCheckerThreadsNumber());
-            assertEquals(1, multiThreadModeSettings.getTreeWalkerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    1, multiThreadModeSettings.getCheckerThreadsNumber());
+            assertEquals("Invalid checker thread number",
+                    1, multiThreadModeSettings.getTreeWalkerThreadsNumber());
             final Configuration checkerConfiguration = config
                 .getChildren()[0];
-            assertEquals("Checker", checkerConfiguration.getName());
+            assertEquals("Invalid checker name", "Checker", checkerConfiguration.getName());
             final Configuration treeWalkerConfig = checkerConfiguration.getChildren()[0];
-            assertEquals("TreeWalker", treeWalkerConfig.getName());
+            assertEquals("Invalid checker childs name", "TreeWalker", treeWalkerConfig.getName());
         });
         Main.main("-C", "1", "-W", "1", "-c", getPath("InputMainConfig-multi-thread-mode.xml"),
             getPath("InputMain.java"));
@@ -1025,7 +1046,8 @@ public void testModuleNameInMultiThreadMode() throws Exception {
             fail("An exception is expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("Multi thread mode for Checker module is not implemented",
+            assertEquals("Invalid error message",
+                    "Multi thread mode for Checker module is not implemented",
                 ex.getMessage());
         }
     }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
index 992c4cb3f8..27fcf5a49f 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -63,10 +63,16 @@
 import com.puppycrawl.tools.checkstyle.internal.TestUtils;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
-public class TreeWalkerTest extends BaseCheckTestSupport {
+public class TreeWalkerTest extends AbstractModuleTestSupport {
+
     @Rule
     public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle";
+    }
+
     @Test
     public void testProperFileExtension() throws Exception {
         final DefaultConfiguration checkConfig =
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
index 0b9d6420c3..4144c30ea6 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java
@@ -42,34 +42,35 @@
     @Test
     public void testScopeValueOf() {
         final Scope scope = Scope.valueOf("PRIVATE");
-        assertEquals(Scope.PRIVATE, scope);
+        assertEquals("Invalid scope", Scope.PRIVATE, scope);
     }
 
     @Test
     public void testMisc() {
         final Scope scope = Scope.getInstance("public");
-        assertNotNull(scope);
-        assertEquals("public", scope.toString());
-        assertEquals("public", scope.getName());
+        assertNotNull("Scope must not be null", scope);
+        assertEquals("Invalid scope toString", "public", scope.toString());
+        assertEquals("Invalid scope name", "public", scope.getName());
 
         try {
             Scope.getInstance("unknown");
             fail("exception expected");
         }
         catch (IllegalArgumentException ex) {
-            assertEquals("No enum constant com.puppycrawl.tools.checkstyle.api.Scope.UNKNOWN",
+            assertEquals("Invalid error message",
+                    "No enum constant com.puppycrawl.tools.checkstyle.api.Scope.UNKNOWN",
                     ex.getMessage());
         }
     }
 
     @Test
     public void testMixedCaseSpaces() {
-        assertEquals(Scope.NOTHING, Scope.getInstance("NothinG "));
-        assertEquals(Scope.PUBLIC, Scope.getInstance(" PuBlic"));
-        assertEquals(Scope.PROTECTED, Scope.getInstance(" ProteCted"));
-        assertEquals(Scope.PACKAGE, Scope.getInstance("    PackAge "));
-        assertEquals(Scope.PRIVATE, Scope.getInstance("privaTe   "));
-        assertEquals(Scope.ANONINNER, Scope.getInstance("AnonInner"));
+        assertEquals("Invalid scope", Scope.NOTHING, Scope.getInstance("NothinG "));
+        assertEquals("Invalid scope", Scope.PUBLIC, Scope.getInstance(" PuBlic"));
+        assertEquals("Invalid scope", Scope.PROTECTED, Scope.getInstance(" ProteCted"));
+        assertEquals("Invalid scope", Scope.PACKAGE, Scope.getInstance("    PackAge "));
+        assertEquals("Invalid scope", Scope.PRIVATE, Scope.getInstance("privaTe   "));
+        assertEquals("Invalid scope", Scope.ANONINNER, Scope.getInstance("AnonInner"));
     }
 
     @Test
@@ -79,12 +80,12 @@ public void testMixedCaseSpacesWithDifferentLocales() {
         try {
             for (Locale differentLocale : differentLocales) {
                 Locale.setDefault(differentLocale);
-                assertEquals(Scope.NOTHING, Scope.getInstance("NothinG "));
-                assertEquals(Scope.PUBLIC, Scope.getInstance(" PuBlic"));
-                assertEquals(Scope.PROTECTED, Scope.getInstance(" ProteCted"));
-                assertEquals(Scope.PACKAGE, Scope.getInstance("    PackAge "));
-                assertEquals(Scope.PRIVATE, Scope.getInstance("privaTe   "));
-                assertEquals(Scope.ANONINNER, Scope.getInstance("AnonInner"));
+                assertEquals("Invalid scope", Scope.NOTHING, Scope.getInstance("NothinG "));
+                assertEquals("Invalid scope", Scope.PUBLIC, Scope.getInstance(" PuBlic"));
+                assertEquals("Invalid scope", Scope.PROTECTED, Scope.getInstance(" ProteCted"));
+                assertEquals("Invalid scope", Scope.PACKAGE, Scope.getInstance("    PackAge "));
+                assertEquals("Invalid scope", Scope.PRIVATE, Scope.getInstance("privaTe   "));
+                assertEquals("Invalid scope", Scope.ANONINNER, Scope.getInstance("AnonInner"));
             }
         }
         finally {
@@ -94,61 +95,61 @@ public void testMixedCaseSpacesWithDifferentLocales() {
 
     @Test
     public void testIsInAnonInner() {
-        assertTrue(Scope.NOTHING.isIn(Scope.ANONINNER));
-        assertTrue(Scope.PUBLIC.isIn(Scope.ANONINNER));
-        assertTrue(Scope.PROTECTED.isIn(Scope.ANONINNER));
-        assertTrue(Scope.PACKAGE.isIn(Scope.ANONINNER));
-        assertTrue(Scope.PRIVATE.isIn(Scope.ANONINNER));
-        assertTrue(Scope.ANONINNER.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.PUBLIC.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.PROTECTED.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.PACKAGE.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.PRIVATE.isIn(Scope.ANONINNER));
+        assertTrue("Invalid subscope", Scope.ANONINNER.isIn(Scope.ANONINNER));
     }
 
     @Test
     public void testIsInPrivate() {
-        assertTrue(Scope.NOTHING.isIn(Scope.PRIVATE));
-        assertTrue(Scope.PUBLIC.isIn(Scope.PRIVATE));
-        assertTrue(Scope.PROTECTED.isIn(Scope.PRIVATE));
-        assertTrue(Scope.PACKAGE.isIn(Scope.PRIVATE));
-        assertTrue(Scope.PRIVATE.isIn(Scope.PRIVATE));
-        assertFalse(Scope.ANONINNER.isIn(Scope.PRIVATE));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.PRIVATE));
+        assertTrue("Invalid subscope", Scope.PUBLIC.isIn(Scope.PRIVATE));
+        assertTrue("Invalid subscope", Scope.PROTECTED.isIn(Scope.PRIVATE));
+        assertTrue("Invalid subscope", Scope.PACKAGE.isIn(Scope.PRIVATE));
+        assertTrue("Invalid subscope", Scope.PRIVATE.isIn(Scope.PRIVATE));
+        assertFalse("Invalid subscope", Scope.ANONINNER.isIn(Scope.PRIVATE));
     }
 
     @Test
     public void testIsInPackage() {
-        assertTrue(Scope.NOTHING.isIn(Scope.PACKAGE));
-        assertTrue(Scope.PUBLIC.isIn(Scope.PACKAGE));
-        assertTrue(Scope.PROTECTED.isIn(Scope.PACKAGE));
-        assertTrue(Scope.PACKAGE.isIn(Scope.PACKAGE));
-        assertFalse(Scope.PRIVATE.isIn(Scope.PACKAGE));
-        assertFalse(Scope.ANONINNER.isIn(Scope.PACKAGE));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.PACKAGE));
+        assertTrue("Invalid subscope", Scope.PUBLIC.isIn(Scope.PACKAGE));
+        assertTrue("Invalid subscope", Scope.PROTECTED.isIn(Scope.PACKAGE));
+        assertTrue("Invalid subscope", Scope.PACKAGE.isIn(Scope.PACKAGE));
+        assertFalse("Invalid subscope", Scope.PRIVATE.isIn(Scope.PACKAGE));
+        assertFalse("Invalid subscope", Scope.ANONINNER.isIn(Scope.PACKAGE));
     }
 
     @Test
     public void testIsInProtected() {
-        assertTrue(Scope.NOTHING.isIn(Scope.PROTECTED));
-        assertTrue(Scope.PUBLIC.isIn(Scope.PROTECTED));
-        assertTrue(Scope.PROTECTED.isIn(Scope.PROTECTED));
-        assertFalse(Scope.PACKAGE.isIn(Scope.PROTECTED));
-        assertFalse(Scope.PRIVATE.isIn(Scope.PROTECTED));
-        assertFalse(Scope.ANONINNER.isIn(Scope.PROTECTED));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.PROTECTED));
+        assertTrue("Invalid subscope", Scope.PUBLIC.isIn(Scope.PROTECTED));
+        assertTrue("Invalid subscope", Scope.PROTECTED.isIn(Scope.PROTECTED));
+        assertFalse("Invalid subscope", Scope.PACKAGE.isIn(Scope.PROTECTED));
+        assertFalse("Invalid subscope", Scope.PRIVATE.isIn(Scope.PROTECTED));
+        assertFalse("Invalid subscope", Scope.ANONINNER.isIn(Scope.PROTECTED));
     }
 
     @Test
     public void testIsInPublic() {
-        assertTrue(Scope.NOTHING.isIn(Scope.PUBLIC));
-        assertTrue(Scope.PUBLIC.isIn(Scope.PUBLIC));
-        assertFalse(Scope.PROTECTED.isIn(Scope.PUBLIC));
-        assertFalse(Scope.PACKAGE.isIn(Scope.PUBLIC));
-        assertFalse(Scope.PRIVATE.isIn(Scope.PUBLIC));
-        assertFalse(Scope.ANONINNER.isIn(Scope.PUBLIC));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.PUBLIC));
+        assertTrue("Invalid subscope", Scope.PUBLIC.isIn(Scope.PUBLIC));
+        assertFalse("Invalid subscope", Scope.PROTECTED.isIn(Scope.PUBLIC));
+        assertFalse("Invalid subscope", Scope.PACKAGE.isIn(Scope.PUBLIC));
+        assertFalse("Invalid subscope", Scope.PRIVATE.isIn(Scope.PUBLIC));
+        assertFalse("Invalid subscope", Scope.ANONINNER.isIn(Scope.PUBLIC));
     }
 
     @Test
     public void testIsInNothing() {
-        assertTrue(Scope.NOTHING.isIn(Scope.NOTHING));
-        assertFalse(Scope.PUBLIC.isIn(Scope.NOTHING));
-        assertFalse(Scope.PROTECTED.isIn(Scope.NOTHING));
-        assertFalse(Scope.PACKAGE.isIn(Scope.NOTHING));
-        assertFalse(Scope.PRIVATE.isIn(Scope.NOTHING));
-        assertFalse(Scope.ANONINNER.isIn(Scope.NOTHING));
+        assertTrue("Invalid subscope", Scope.NOTHING.isIn(Scope.NOTHING));
+        assertFalse("Invalid subscope", Scope.PUBLIC.isIn(Scope.NOTHING));
+        assertFalse("Invalid subscope", Scope.PROTECTED.isIn(Scope.NOTHING));
+        assertFalse("Invalid subscope", Scope.PACKAGE.isIn(Scope.NOTHING));
+        assertFalse("Invalid subscope", Scope.PRIVATE.isIn(Scope.NOTHING));
+        assertFalse("Invalid subscope", Scope.ANONINNER.isIn(Scope.NOTHING));
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
index 333a998b77..49084f3c8a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -26,7 +26,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
@@ -59,11 +58,8 @@ public void setUp() {
     }
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "misc" + File.separator
-                + "uniqueproperties" + File.separator
-                + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/misc/uniqueproperties";
     }
 
     /* Additional test for jacoco, since valueOf()
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheckTest.java
index 0af2b56ea3..0c4647d6f1 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheckTest.java
@@ -73,8 +73,8 @@ public void testLambdaExpression() throws Exception {
     @Test
     public void testTokensNotNull() {
         final InnerAssignmentCheck check = new InnerAssignmentCheck();
-        Assert.assertNotNull(check.getAcceptableTokens());
-        Assert.assertNotNull(check.getDefaultTokens());
-        Assert.assertNotNull(check.getRequiredTokens());
+        Assert.assertNotNull("Unexpected acceptable tokenks", check.getAcceptableTokens());
+        Assert.assertNotNull("Unexpected default tokens", check.getDefaultTokens());
+        Assert.assertNotNull("Unexpected required tokens", check.getRequiredTokens());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
index e7051efed1..b6a6dbb757 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java
@@ -26,7 +26,6 @@
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.anyObject;
 
-import java.io.File;
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -54,11 +53,8 @@
     public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "header" + File.separator
-                + "header" + File.separator
-                + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/header/header";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
index 54018b7933..7e59620825 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheckTest.java
@@ -31,7 +31,6 @@
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 import java.io.File;
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.net.URI;
@@ -59,9 +58,8 @@
 @PrepareForTest(Closeables.class)
 public class RegexpHeaderCheckTest extends BaseFileSetCheckTestSupport {
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "header" + File.separator + "regexpheader" + File.separator + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/header/regexpheader";
     }
 
     /**
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpTest.java
index 1c157da340..847f4bca31 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlRegExpTest.java
@@ -44,47 +44,47 @@ public void setUp() {
 
     @Test
     public void testLocateFinest() {
-        assertEquals(icRoot, icRoot
+        assertEquals("Unxpected response", icRoot, icRoot
                 .locateFinest("com.kazgroup.courtlink.domain"));
-        assertEquals(icCommon, icRoot
+        assertEquals("Unxpected response", icCommon, icRoot
                 .locateFinest("com.kazgroup.courtlink.common.api"));
-        assertNull(icRoot.locateFinest("com"));
+        assertNull("Unxpected response", icRoot.locateFinest("com"));
     }
 
     @Test
     public void testCheckAccess() {
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common",
                 "org.springframework.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common",
                 "org.luiframework.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common",
                 "de.springframework.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common",
                 "de.luiframework.something"));
-        assertEquals(AccessResult.ALLOWED, icCommon
+        assertEquals("Unxpected access result", AccessResult.ALLOWED, icCommon
                 .checkAccess("com.kazgroup.courtlink.common",
                         "org.apache.commons.something"));
-        assertEquals(AccessResult.ALLOWED, icCommon
+        assertEquals("Unxpected access result", AccessResult.ALLOWED, icCommon
                 .checkAccess("com.kazgroup.courtlink.common",
                         "org.lui.commons.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "org.apache.commons"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "org.lui.commons"));
-        assertEquals(AccessResult.ALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.ALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "org.hibernate.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "com.badpackage.something"));
-        assertEquals(AccessResult.DISALLOWED, icRoot.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icRoot.checkAccess(
                 "com.kazgroup.courtlink", "org.hibernate.something"));
     }
 
     @Test
     public void testUnknownPkg() {
-        assertNull(icRoot.locateFinest("net.another"));
+        assertNull("Unxpected response", icRoot.locateFinest("net.another"));
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java
index fd960f20f1..34151a0aa5 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlTest.java
@@ -44,39 +44,40 @@ public void setUp() {
 
     @Test
     public void testLocateFinest() {
-        assertEquals(icRoot, icRoot
+        assertEquals("Unxpected response", icRoot, icRoot
                 .locateFinest("com.kazgroup.courtlink.domain"));
-        assertEquals(icCommon, icRoot
+        assertEquals("Unxpected response", icCommon, icRoot
                 .locateFinest("com.kazgroup.courtlink.common.api"));
-        assertNull(icRoot.locateFinest("com"));
+        assertNull("Unxpected response", icRoot.locateFinest("com"));
     }
 
     @Test
     public void testEnsureTrailingDot() {
-        assertNull(icRoot.locateFinest("com.kazgroup.courtlinkkk"));
-        assertNull(icRoot.locateFinest("com.kazgroup.courtlink/common.api"));
+        assertNull("Unxpected response", icRoot.locateFinest("com.kazgroup.courtlinkkk"));
+        assertNull("Unxpected response",
+                icRoot.locateFinest("com.kazgroup.courtlink/common.api"));
     }
 
     @Test
     public void testCheckAccess() {
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common",
                 "org.springframework.something"));
-        assertEquals(AccessResult.ALLOWED, icCommon
+        assertEquals("Unxpected access result", AccessResult.ALLOWED, icCommon
                 .checkAccess("com.kazgroup.courtlink.common",
                         "org.apache.commons.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "org.apache.commons"));
-        assertEquals(AccessResult.ALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.ALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "org.hibernate.something"));
-        assertEquals(AccessResult.DISALLOWED, icCommon.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icCommon.checkAccess(
                 "com.kazgroup.courtlink.common", "com.badpackage.something"));
-        assertEquals(AccessResult.DISALLOWED, icRoot.checkAccess(
+        assertEquals("Unxpected access result", AccessResult.DISALLOWED, icRoot.checkAccess(
                 "com.kazgroup.courtlink", "org.hibernate.something"));
     }
 
     @Test
     public void testUnknownPkg() {
-        assertNull(icRoot.locateFinest("net.another"));
+        assertNull("Unxpected response", icRoot.locateFinest("net.another"));
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgImportRuleTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgImportRuleTest.java
index c11a47e3b1..fb703cbe6a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgImportRuleTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgImportRuleTest.java
@@ -29,76 +29,76 @@
     @Test
     public void testPkgImportRule() {
         final PkgImportRule rule = new PkgImportRule(true, false, "pkg", false, false);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkga"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkga"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
     }
 
     @Test
     public void testPkgImportRuleExactMatch() {
         final PkgImportRule rule = new PkgImportRule(true, false, "pkg", true, false);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
     }
 
     @Test
     public void testPkgImportRuleRegexpSimple() {
         final PkgImportRule rule = new PkgImportRule(true, false, "pkg", false, true);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkga"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkga"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
     }
 
     @Test
     public void testPkgImportRuleExactMatchRegexpSimple() {
         final PkgImportRule rule = new PkgImportRule(true, false, "pkg", true, true);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
     }
 
     @Test
     public void testPkgImportRuleRegexp() {
         final PkgImportRule rule = new PkgImportRule(true, false, "(pkg|hallo)", false, true);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkga"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("halloa"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("hallo.a"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("hallo.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("hallo"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkga"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("halloa"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("hallo.a"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("hallo.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("hallo"));
     }
 
     @Test
     public void testPkgImportRuleExactMatchRegexp() {
         final PkgImportRule rule = new PkgImportRule(true, false, "(pkg|hallo)", true, true);
-        assertNotNull(rule);
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("asda"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("p"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("pkg"));
-        assertEquals(AccessResult.ALLOWED, rule.verifyImport("hallo.a"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("hallo.a.b"));
-        assertEquals(AccessResult.UNKNOWN, rule.verifyImport("hallo"));
+        assertNotNull("Rule must not be null", rule);
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("asda"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("p"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("pkg.a"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("pkg"));
+        assertEquals("Invalid access result", AccessResult.ALLOWED, rule.verifyImport("hallo.a"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("hallo.a.b"));
+        assertEquals("Invalid access result", AccessResult.UNKNOWN, rule.verifyImport("hallo"));
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
index e369d56c27..9fed668251 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -22,7 +22,6 @@
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_MISSED_HTML_CLOSE;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_PARSE_RULE_ERROR;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_WRONG_SINGLETON_TAG;
-import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_KEY_UNRECOGNIZED_ANTLR_ERROR;
 import static java.util.Arrays.asList;
 import static java.util.Collections.singletonList;
 
@@ -101,7 +100,8 @@ public void testWithMultipleChecks() throws Exception {
     public void testAntlrError() throws Exception {
         final DefaultConfiguration checkConfig = createCheckConfig(TempCheck.class);
         final String[] expected = {
-            "3: " + getCheckMessage(MSG_KEY_UNRECOGNIZED_ANTLR_ERROR, 0, null),
+            "4: " + getCheckMessage(MSG_JAVADOC_PARSE_RULE_ERROR, 49,
+                    "mismatched input 'get' expecting <EOF>", "JAVADOC"),
         };
         verify(checkConfig, getPath("InputAbstractJavadocInvalidAtSeeReference.java"), expected);
     }
@@ -115,7 +115,8 @@ public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInTwoFiles() thr
             "8: " + getCheckMessage(MSG_JAVADOC_WRONG_SINGLETON_TAG, 35, "img")
         ));
         expectedMessages.put(getPath("InputAbstractJavadocInvalidAtSeeReference.java"),
-            singletonList("3: " + getCheckMessage(MSG_KEY_UNRECOGNIZED_ANTLR_ERROR, 0, null)
+            singletonList("4: " + getCheckMessage(MSG_JAVADOC_PARSE_RULE_ERROR, 49,
+                    "mismatched input 'get' expecting <EOF>", "JAVADOC")
         ));
         verify(createChecker(checkConfig), new File[] {
             new File(getPath("InputAbstractJavadocParsingErrors.java")),
@@ -129,7 +130,8 @@ public void testCheckReuseAfterParseErrorWithFollowingAntlrErrorInSingleFile()
         final DefaultConfiguration checkConfig = createCheckConfig(TempCheck.class);
         final String[] expected = {
             "4: " + getCheckMessage(MSG_JAVADOC_MISSED_HTML_CLOSE, 4, "unclosedTag"),
-            "7: " + getCheckMessage(MSG_KEY_UNRECOGNIZED_ANTLR_ERROR, 4, null),
+            "8: " + getCheckMessage(MSG_JAVADOC_PARSE_RULE_ERROR, 53,
+                    "mismatched input 'get' expecting <EOF>", "JAVADOC"),
         };
         verify(checkConfig,
             getPath("InputAbstractJavadocUnclosedTagAndInvalidAtSeeReference.java"), expected);
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtilsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtilsTest.java
index 224fdb04e5..da925c859b 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtilsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtilsTest.java
@@ -49,7 +49,7 @@ public void testExtractInlineTags() {
             " */"};
         final List<TagInfo> tags = InlineTagUtils.extractInlineTags(text);
 
-        assertEquals(4, tags.size());
+        assertEquals("Unexpected tags size", 4, tags.size());
 
         assertTag(tags.get(0), "link", "List", 2, 4);
         assertTag(tags.get(1), "link", "List link text", 2, 19);
@@ -67,7 +67,7 @@ public void testMultiLineLinkTag() {
 
         final List<TagInfo> tags = InlineTagUtils.extractInlineTags(text);
 
-        assertEquals(1, tags.size());
+        assertEquals("Unexpected tags size", 1, tags.size());
         assertTag(tags.get(0), "link", "foo bar baz", 2, 4);
     }
 
@@ -80,7 +80,7 @@ public void testCollapseWhitespace() {
 
         final List<TagInfo> tags = InlineTagUtils.extractInlineTags(text);
 
-        assertEquals(1, tags.size());
+        assertEquals("Unexpected tags size", 1, tags.size());
         assertTag(tags.get(0), "code", "foo bar baz", 2, 4);
     }
 
@@ -92,7 +92,7 @@ public void extractInlineTags() {
 
         final List<TagInfo> tags = InlineTagUtils.extractInlineTags(source);
 
-        assertEquals(1, tags.size());
+        assertEquals("Unexpected tags size", 1, tags.size());
 
         final TagInfo tag = tags.get(0);
         assertTag(tag, "link", "foo", 1, 3);
@@ -105,7 +105,7 @@ public void testBadInputExtractInlineTagsLineFeed() {
             fail("IllegalArgumentException expected");
         }
         catch (IllegalArgumentException ex) {
-            assertTrue(ex.getMessage().contains("newline"));
+            assertTrue("Unexpected error message", ex.getMessage().contains("newline"));
         }
     }
 
@@ -116,14 +116,14 @@ public void testBadInputExtractInlineTagsCarriageReturn() {
             fail("IllegalArgumentException expected");
         }
         catch (IllegalArgumentException ex) {
-            assertTrue(ex.getMessage().contains("newline"));
+            assertTrue("Invalid error message", ex.getMessage().contains("newline"));
         }
     }
 
     private static void assertTag(TagInfo tag, String name, String value, int line, int col) {
-        assertEquals(name, tag.getName());
-        assertEquals(value, tag.getValue());
-        assertEquals(line, tag.getPosition().getLine());
-        assertEquals(col, tag.getPosition().getColumn());
+        assertEquals("Unexpected tags name", name, tag.getName());
+        assertEquals("Unexpected tags value", value, tag.getValue());
+        assertEquals("Unexpected tags position", line, tag.getPosition().getLine());
+        assertEquals("Unexpected tags position", col, tag.getPosition().getColumn());
     }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
index 61d0b08753..bdbea2f68e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java
@@ -25,7 +25,6 @@
 import static com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.MSG_STACKOVERFLOW;
 
 import java.io.File;
-import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 
@@ -50,11 +49,8 @@ public void setUp() {
     }
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "regexp" + File.separator
-                + "regexpmultiline" + File.separator
-                + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/regexp/regexpmultiline";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
index 9d35b02190..8c2cf79c6a 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
@@ -25,7 +25,6 @@
 import static org.junit.Assert.fail;
 
 import java.io.File;
-import java.io.IOException;
 import java.util.regex.Pattern;
 
 import org.junit.Test;
@@ -37,11 +36,8 @@
 
 public class RegexpOnFilenameCheckTest extends BaseFileSetCheckTestSupport {
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "regexp" + File.separator
-                + "regexponfilename" + File.separator
-                + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/regexp/regexponfilename";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
index ede05458a5..c7539a87c9 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java
@@ -22,9 +22,6 @@
 import static com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.MSG_REGEXP_EXCEEDED;
 import static com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector.MSG_REGEXP_MINIMUM;
 
-import java.io.File;
-import java.io.IOException;
-
 import org.junit.Before;
 import org.junit.Test;
 
@@ -41,11 +38,8 @@ public void setUp() {
     }
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("checks" + File.separator
-                + "regexp" + File.separator
-                + "regexpsingleline" + File.separator
-                + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/checks/regexp/regexpsingleline";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
index 5b07c4d541..fc6246b712 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java
@@ -37,6 +37,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.sun.javadoc.RootDoc;
 import com.sun.tools.javac.util.Context;
 import com.sun.tools.javac.util.ListBuffer;
@@ -44,9 +45,10 @@
 import com.sun.tools.javadoc.Messager;
 import com.sun.tools.javadoc.ModifierFilter;
 
-public class TokenTypesDocletTest {
-    private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/doclets/" + filename;
+public class TokenTypesDocletTest extends AbstractPathTestSupport {
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/doclets";
     }
 
     @Test
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllBlockCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllBlockCommentsTest.java
index 4edbc79bf2..354fb63c00 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllBlockCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllBlockCommentsTest.java
@@ -19,8 +19,6 @@
 
 package com.puppycrawl.tools.checkstyle.grammars.comments;
 
-import java.io.File;
-import java.io.IOException;
 import java.util.Arrays;
 import java.util.LinkedHashSet;
 import java.util.Set;
@@ -28,23 +26,21 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.puppycrawl.tools.checkstyle.AstTreeStringPrinter;
-import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
-public class AllBlockCommentsTest extends BaseCheckTestSupport {
+public class AllBlockCommentsTest extends AbstractModuleTestSupport {
     private static final Set<String> ALL_COMMENTS = new LinkedHashSet<>();
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("grammars" + File.separator
-                + "comments" + File.separator + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/grammars/comments";
     }
 
     @Test
@@ -55,13 +51,6 @@ public void testAllBlockComments() throws Exception {
         Assert.assertTrue("All comments should be empty", ALL_COMMENTS.isEmpty());
     }
 
-    @Test
-    public void testAstTree() throws Exception {
-        verifyAst(getPath("InputFullOfBlockCommentsAst.txt"),
-                getPath("InputFullOfBlockComments.java"),
-                AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);
-    }
-
     private static class BlockCommentListenerCheck extends AbstractCheck {
         @Override
         public boolean isCommentNodesRequired() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllSinglelineCommentsTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllSinglelineCommentsTest.java
index 80b13619c5..75ad4a4a01 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllSinglelineCommentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/AllSinglelineCommentsTest.java
@@ -19,31 +19,27 @@
 
 package com.puppycrawl.tools.checkstyle.grammars.comments;
 
-import java.io.File;
-import java.io.IOException;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.puppycrawl.tools.checkstyle.AstTreeStringPrinter;
-import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
-public class AllSinglelineCommentsTest extends BaseCheckTestSupport {
+public class AllSinglelineCommentsTest extends AbstractModuleTestSupport {
     private static final Set<String> ALL_COMMENTS = new LinkedHashSet<>();
 
     private static final String LINE_SEPARATOR = System.getProperty("line.separator");
 
     @Override
-    protected String getPath(String filename) throws IOException {
-        return super.getPath("grammars" + File.separator
-                + "comments" + File.separator + filename);
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/grammars/comments";
     }
 
     @Test
@@ -55,13 +51,6 @@ public void testAllBlockComments() throws Exception {
         Assert.assertTrue("All comments should be empty", ALL_COMMENTS.isEmpty());
     }
 
-    @Test
-    public void testAstTree() throws Exception {
-        verifyAst(getPath("InputFullOfSinglelineCommentsAst.txt"),
-                getPath("InputFullOfSinglelineComments.java"),
-                AstTreeStringPrinter.PrintOptions.WITH_COMMENTS);
-    }
-
     private static class SinglelineCommentListenerCheck extends AbstractCheck {
         @Override
         public boolean isCommentNodesRequired() {
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java
index 71fd05874c..b90d5192ac 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/CodeSelectorPresentationTest.java
@@ -28,12 +28,12 @@
 import org.junit.Test;
 
 import com.google.common.collect.ImmutableList;
-import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
+import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.gui.MainFrameModel.ParseMode;
 
-public class CodeSelectorPresentationTest {
+public class CodeSelectorPresentationTest extends AbstractPathTestSupport {
 
     private MainFrameModel model;
 
@@ -42,7 +42,7 @@
     private ImmutableList<Integer> linesToPosition;
 
     @Before
-    public void loadFile() throws CheckstyleException {
+    public void loadFile() throws Exception {
         model = new MainFrameModel();
         model.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         model.openFile(new File(getPath("InputJavadocAttributesAndMethods.java")));
@@ -50,8 +50,9 @@ public void loadFile() throws CheckstyleException {
         linesToPosition = ImmutableList.copyOf(convertLinesToPosition(model.getLinesToPosition()));
     }
 
-    private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/gui/" + filename;
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/gui";
     }
 
     /** Converts lineToPosition from multicharacter to one character line separator
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModelTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModelTest.java
index 0229a83124..1e2d6b923e 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModelTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/MainFrameModelTest.java
@@ -26,6 +26,7 @@
 import static org.junit.Assert.fail;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.Locale;
 
 import org.junit.Before;
@@ -36,11 +37,12 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.powermock.reflect.Whitebox;
 
+import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.gui.MainFrameModel.ParseMode;
 
 @RunWith(PowerMockRunner.class)
-public class MainFrameModelTest {
+public class MainFrameModelTest extends AbstractPathTestSupport {
 
     private static final String FILE_NAME_TEST_DATA = "InputJavadocAttributesAndMethods.java";
     private static final String FILE_NAME_NON_JAVA = "NotJavaFile.notjava";
@@ -50,8 +52,9 @@
     private MainFrameModel model;
     private File testData;
 
-    private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/gui/" + filename;
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/gui";
     }
 
     private static String getNonCompilablePath(String filename) {
@@ -59,7 +62,7 @@ private static String getNonCompilablePath(String filename) {
     }
 
     @Before
-    public void prepareTestData() {
+    public void prepareTestData() throws IOException {
         model = new MainFrameModel();
         testData = new File(getPath(FILE_NAME_TEST_DATA));
     }
@@ -84,7 +87,7 @@ public void testParseModeEnum() {
     }
 
     @Test
-    public void testShouldAcceptFile() {
+    public void testShouldAcceptFile() throws IOException {
         final File directory = PowerMockito.mock(File.class);
         PowerMockito.when(directory.isDirectory()).thenReturn(true);
         assertTrue(MainFrameModel.shouldAcceptFile(directory));
@@ -102,7 +105,7 @@ public void testShouldAcceptFile() {
     }
 
     @Test
-    public void testOpenFileWithParseModePlainJava() throws CheckstyleException {
+    public void testOpenFileWithParseModePlainJava() throws Exception {
         // Default parse mode: Plain Java
         model.openFile(testData);
         verifyCorrectTestDataInFrameModel();
@@ -112,7 +115,7 @@ public void testOpenFileWithParseModePlainJava() throws CheckstyleException {
     }
 
     @Test
-    public void testOpenFileWithParseModeJavaWithComments() throws CheckstyleException {
+    public void testOpenFileWithParseModeJavaWithComments() throws Exception {
         model.setParseMode(ParseMode.JAVA_WITH_COMMENTS);
         model.openFile(testData);
 
@@ -120,7 +123,7 @@ public void testOpenFileWithParseModeJavaWithComments() throws CheckstyleExcepti
     }
 
     @Test
-    public void testOpenFileWithParseModeJavaWithJavadocAndComments() throws CheckstyleException {
+    public void testOpenFileWithParseModeJavaWithJavadocAndComments() throws Exception {
         model.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         model.openFile(testData);
 
@@ -152,7 +155,7 @@ public void testOpenFileWithUnknownParseMode() throws CheckstyleException {
     }
 
     @Test
-    public void testOpenFileNullParameter() throws CheckstyleException {
+    public void testOpenFileNullParameter() throws Exception {
         model.openFile(testData);
 
         model.openFile(null);
@@ -162,7 +165,7 @@ public void testOpenFileNullParameter() throws CheckstyleException {
     }
 
     @Test
-    public void testOpenFileNonExistentFile() {
+    public void testOpenFileNonExistentFile() throws IOException {
         final File nonExistentFile = new File(getPath(FILE_NAME_NON_EXISTENT));
 
         try {
@@ -197,7 +200,7 @@ public void testOpenFileNonCompilableFile() {
         }
     }
 
-    private void verifyCorrectTestDataInFrameModel() {
+    private void verifyCorrectTestDataInFrameModel() throws IOException {
         assertEquals(testData, model.getCurrentFile());
 
         final String expectedTitle = "Checkstyle GUI : " + FILE_NAME_TEST_DATA;
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java
index 80b23dcfc6..965f46f994 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeTablePresentationTest.java
@@ -26,6 +26,7 @@
 import org.junit.Test;
 
 import antlr.collections.AST;
+import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
@@ -36,12 +37,13 @@
 import com.puppycrawl.tools.checkstyle.gui.MainFrameModel.ParseMode;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
-public class ParseTreeTablePresentationTest {
+public class ParseTreeTablePresentationTest extends AbstractPathTestSupport {
 
     private DetailAST tree;
 
-    public static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/gui/" + filename;
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/gui";
     }
 
     private static DetailAST parseFile(File file) throws Exception {
@@ -60,13 +62,13 @@ public void loadTree() throws Exception {
     public void testRoot() {
         final Object root = new ParseTreeTablePresentation(tree).getRoot();
         final int childCount = new ParseTreeTablePresentation(null).getChildCount(root);
-        Assert.assertEquals(1, childCount);
+        Assert.assertEquals("Invalid child count", 1, childCount);
     }
 
     @Test
     public void testChildCount() {
         final int childCount = new ParseTreeTablePresentation(null).getChildCount(tree);
-        Assert.assertEquals(5, childCount);
+        Assert.assertEquals("Invalid child count", 5, childCount);
     }
 
     @Test
@@ -74,14 +76,15 @@ public void testChildCountInJavaAndJavadocMode() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final int childCount = parseTree.getChildCount(tree);
-        Assert.assertEquals(5, childCount);
+        Assert.assertEquals("Invalid child count", 5, childCount);
     }
 
     @Test
     public void testChild() {
         final Object child = new ParseTreeTablePresentation(null).getChild(tree, 1);
-        Assert.assertTrue(child instanceof DetailAST);
-        Assert.assertEquals(TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());
+        Assert.assertTrue("Invalid child type", child instanceof DetailAST);
+        Assert.assertEquals("Invalid child token type",
+                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());
     }
 
     @Test
@@ -89,8 +92,9 @@ public void testChildInJavaAndJavadocMode() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final Object child = parseTree.getChild(tree, 1);
-        Assert.assertTrue(child instanceof DetailAST);
-        Assert.assertEquals(TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());
+        Assert.assertTrue("Invalid child type", child instanceof DetailAST);
+        Assert.assertEquals("Invalid child token type",
+                TokenTypes.BLOCK_COMMENT_BEGIN, ((AST) child).getType());
     }
 
     @Test
@@ -99,7 +103,7 @@ public void testCommentChildCount() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_COMMENTS);
         final int javadocCommentChildCount = parseTree.getChildCount(commentContentNode);
-        Assert.assertEquals(0, javadocCommentChildCount);
+        Assert.assertEquals("Invalid child count", 0, javadocCommentChildCount);
     }
 
     @Test
@@ -109,7 +113,7 @@ public void testCommentChildCountInJavaAndJavadocMode() {
         final DetailAST commentContentNode = tree.getLastChild().getLastChild()
                 .getPreviousSibling().getLastChild().getFirstChild().getFirstChild();
         final int commentChildCount = parseTree.getChildCount(commentContentNode);
-        Assert.assertEquals(0, commentChildCount);
+        Assert.assertEquals("Invalid child count", 0, commentChildCount);
     }
 
     @Test
@@ -119,7 +123,7 @@ public void testCommentChildInJavaAndJavadocMode() {
         final DetailAST commentContentNode = tree.getLastChild().getLastChild()
                 .getPreviousSibling().getLastChild().getFirstChild().getFirstChild();
         final Object commentChild = parseTree.getChild(commentContentNode, 0);
-        Assert.assertNull(commentChild);
+        Assert.assertNull("Child must be null", commentChild);
     }
 
     @Test
@@ -127,10 +131,10 @@ public void testJavadocCommentChildCount() {
         final DetailAST commentContentNode = tree.getFirstChild().getNextSibling().getFirstChild();
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         final int commentChildCount = parseTree.getChildCount(commentContentNode);
-        Assert.assertEquals(0, commentChildCount);
+        Assert.assertEquals("Invalid child count", 0, commentChildCount);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final int javadocCommentChildCount = parseTree.getChildCount(commentContentNode);
-        Assert.assertEquals(1, javadocCommentChildCount);
+        Assert.assertEquals("Invalid child count", 1, javadocCommentChildCount);
     }
 
     @Test
@@ -139,12 +143,14 @@ public void testJavadocCommentChild() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final Object child = parseTree.getChild(commentContentNode, 0);
-        Assert.assertTrue(child instanceof DetailNode);
-        Assert.assertEquals(JavadocTokenTypes.JAVADOC, ((DetailNode) child).getType());
+        Assert.assertTrue("Invalid child type", child instanceof DetailNode);
+        Assert.assertEquals("Invalid child token type",
+                JavadocTokenTypes.JAVADOC, ((DetailNode) child).getType());
         // get Child one more time to test cache of PModel
         final Object childSame = parseTree.getChild(commentContentNode, 0);
-        Assert.assertTrue(childSame instanceof DetailNode);
-        Assert.assertEquals(JavadocTokenTypes.JAVADOC, ((DetailNode) childSame).getType());
+        Assert.assertTrue("Invalid child type", childSame instanceof DetailNode);
+        Assert.assertEquals("Invalid child token type",
+                JavadocTokenTypes.JAVADOC, ((DetailNode) childSame).getType());
     }
 
     @Test
@@ -153,10 +159,11 @@ public void testJavadocChildCount() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final Object javadoc = parseTree.getChild(commentContentNode, 0);
-        Assert.assertTrue(javadoc instanceof DetailNode);
-        Assert.assertEquals(JavadocTokenTypes.JAVADOC, ((DetailNode) javadoc).getType());
+        Assert.assertTrue("Invalid child type", javadoc instanceof DetailNode);
+        Assert.assertEquals("Invalid child token type",
+                JavadocTokenTypes.JAVADOC, ((DetailNode) javadoc).getType());
         final int javadocChildCount = parseTree.getChildCount(javadoc);
-        Assert.assertEquals(5, javadocChildCount);
+        Assert.assertEquals("Invalid child count", 5, javadocChildCount);
     }
 
     @Test
@@ -165,26 +172,30 @@ public void testJavadocChild() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final Object javadoc = parseTree.getChild(commentContentNode, 0);
-        Assert.assertTrue(javadoc instanceof DetailNode);
-        Assert.assertEquals(JavadocTokenTypes.JAVADOC, ((DetailNode) javadoc).getType());
+        Assert.assertTrue("Invalid child type", javadoc instanceof DetailNode);
+        Assert.assertEquals("Invalid child token type",
+                JavadocTokenTypes.JAVADOC, ((DetailNode) javadoc).getType());
         final Object javadocChild = parseTree.getChild(javadoc, 2);
-        Assert.assertTrue(javadocChild instanceof DetailNode);
-        Assert.assertEquals(JavadocTokenTypes.TEXT, ((DetailNode) javadocChild).getType());
+        Assert.assertTrue("Invalid child type", javadocChild instanceof DetailNode);
+        Assert.assertEquals("Invalid child token type",
+                JavadocTokenTypes.TEXT, ((DetailNode) javadocChild).getType());
     }
 
     @Test
     public void testGetIndexOfChild() {
         DetailAST ithChild = tree.getFirstChild();
-        Assert.assertNotNull(ithChild);
+        Assert.assertNotNull("Child must not be null", ithChild);
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
         int index = 0;
         while (ithChild != null) {
-            Assert.assertEquals(index, parseTree.getIndexOfChild(tree, ithChild));
+            Assert.assertEquals("Invalud child index",
+                    index, parseTree.getIndexOfChild(tree, ithChild));
             ithChild = ithChild.getNextSibling();
             index++;
         }
 
-        Assert.assertEquals(-1, parseTree.getIndexOfChild(tree, new DetailAST()));
+        Assert.assertEquals("Invalud child index",
+                -1, parseTree.getIndexOfChild(tree, new DetailAST()));
     }
 
     /**
@@ -227,7 +238,7 @@ public void testGetValueAt() {
             Assert.fail("IllegalStateException expected");
         }
         catch (IllegalStateException ex) {
-            Assert.assertEquals("Unknown column", ex.getMessage());
+            Assert.assertEquals("Invalid error message", "Unknown column", ex.getMessage());
         }
 
     }
@@ -245,8 +256,8 @@ public void testGetValueAtDetailNode() {
         parseTree.setParseMode(ParseMode.JAVA_WITH_JAVADOC_AND_COMMENTS);
         final Object child = parseTree.getChild(commentContentNode, 0);
 
-        Assert.assertFalse(parseTree.isLeaf(child));
-        Assert.assertTrue(parseTree.isLeaf(tree.getFirstChild()));
+        Assert.assertFalse("Child has not to be leaf", parseTree.isLeaf(child));
+        Assert.assertTrue("Child has to be leaf", parseTree.isLeaf(tree.getFirstChild()));
 
         final Object treeModel = parseTree.getValueAt(child, 0);
         final String type = (String) parseTree.getValueAt(child, 1);
@@ -255,18 +266,18 @@ public void testGetValueAtDetailNode() {
         final String text = (String) parseTree.getValueAt(child, 4);
         final String expectedText = "JAVADOC";
 
-        Assert.assertNull(treeModel);
-        Assert.assertEquals("JAVADOC", type);
-        Assert.assertEquals(1, line);
-        Assert.assertEquals(3, column);
-        Assert.assertEquals(expectedText, text);
+        Assert.assertNull("Tree model must be null", treeModel);
+        Assert.assertEquals("Invalid type", "JAVADOC", type);
+        Assert.assertEquals("Invalid line", 1, line);
+        Assert.assertEquals("Invalid column", 3, column);
+        Assert.assertEquals("Invalid text", expectedText, text);
 
         try {
             parseTree.getValueAt(child, parseTree.getColumnCount());
             Assert.fail("IllegalStateException expected");
         }
         catch (IllegalStateException ex) {
-            Assert.assertEquals("Unknown column", ex.getMessage());
+            Assert.assertEquals("Invalid error message", "Unknown column", ex.getMessage());
         }
 
     }
@@ -274,28 +285,28 @@ public void testGetValueAtDetailNode() {
     @Test
     public void testColumnMethods() {
         final ParseTreeTablePresentation parseTree = new ParseTreeTablePresentation(null);
-        Assert.assertSame(ParseTreeTableModel.class, parseTree.getColumnClass(0));
-        Assert.assertSame(String.class, parseTree.getColumnClass(1));
-        Assert.assertSame(Integer.class, parseTree.getColumnClass(2));
-        Assert.assertSame(Integer.class, parseTree.getColumnClass(3));
-        Assert.assertSame(String.class, parseTree.getColumnClass(4));
+        Assert.assertSame("Invalid type", ParseTreeTableModel.class, parseTree.getColumnClass(0));
+        Assert.assertSame("Invalid type", String.class, parseTree.getColumnClass(1));
+        Assert.assertSame("Invalid type", Integer.class, parseTree.getColumnClass(2));
+        Assert.assertSame("Invalid type", Integer.class, parseTree.getColumnClass(3));
+        Assert.assertSame("Invalid type", String.class, parseTree.getColumnClass(4));
 
         try {
             parseTree.getColumnClass(parseTree.getColumnCount());
             Assert.fail("IllegalStateException expected");
         }
         catch (IllegalStateException ex) {
-            Assert.assertEquals("Unknown column", ex.getMessage());
+            Assert.assertEquals("Invalid error message", "Unknown column", ex.getMessage());
         }
 
-        Assert.assertFalse(parseTree.isCellEditable(1));
+        Assert.assertFalse("Invalid cell editable status", parseTree.isCellEditable(1));
 
-        Assert.assertEquals(5, parseTree.getColumnCount());
-        Assert.assertEquals("Tree", parseTree.getColumnName(0));
-        Assert.assertEquals("Type", parseTree.getColumnName(1));
-        Assert.assertEquals("Line", parseTree.getColumnName(2));
-        Assert.assertEquals("Column", parseTree.getColumnName(3));
-        Assert.assertEquals("Text", parseTree.getColumnName(4));
+        Assert.assertEquals("Invalid column count", 5, parseTree.getColumnCount());
+        Assert.assertEquals("Invalid column name", "Tree", parseTree.getColumnName(0));
+        Assert.assertEquals("Invalid column name", "Type", parseTree.getColumnName(1));
+        Assert.assertEquals("Invalid column name", "Line", parseTree.getColumnName(2));
+        Assert.assertEquals("Invalid column name", "Column", parseTree.getColumnName(3));
+        Assert.assertEquals("Invalid column name", "Text", parseTree.getColumnName(4));
 
     }
 
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java
index b05ce838c4..aa646ae030 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java
@@ -28,11 +28,12 @@
 
 import org.junit.Test;
 
+import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.internal.TestUtils;
 
-public class BlockCommentPositionTest {
+public class BlockCommentPositionTest extends AbstractPathTestSupport {
 
     @Test
     public void testJavaDocsRecognition() throws Exception {
@@ -82,9 +83,9 @@ private static int getJavadocsCount(DetailAST detailAST,
         return matchFound;
     }
 
-    private static String getPath(String filename) {
-        return "src/test/resources/com/puppycrawl/tools/checkstyle/utils/blockcommentposition/"
-                + filename;
+    @Override
+    protected String getPackageLocation() {
+        return "com/puppycrawl/tools/checkstyle/utils/blockcommentposition";
     }
 
     private static final class BlockCommentPositionTestMetadata {
diff --git a/src/xdocs/config_javadoc.xml b/src/xdocs/config_javadoc.xml
index 0a8c3e65b7..30c2d321fa 100755
--- a/src/xdocs/config_javadoc.xml
+++ b/src/xdocs/config_javadoc.xml
@@ -114,10 +114,6 @@
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
@@ -716,10 +712,6 @@ public boolean isSomething()
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
@@ -1054,10 +1046,6 @@ public boolean isSomething()
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
@@ -1497,10 +1485,6 @@ public boolean isSomething()
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
@@ -1610,10 +1594,6 @@ public boolean isSomething()
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
@@ -1770,10 +1750,6 @@ public class TestClass {
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.parse.rule.error%22">
             javadoc.parse.rule.error</a>
           </li>
-          <li>
-            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unrecognized.antlr.error%22">
-            javadoc.unrecognized.antlr.error</a>
-          </li>
           <li>
             <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.wrong.singleton.html.tag%22">
             javadoc.wrong.singleton.html.tag</a>
diff --git a/wercker.yml b/wercker.yml
index 48c489c91c..64db94cd29 100755
--- a/wercker.yml
+++ b/wercker.yml
@@ -169,6 +169,21 @@ build:
           echo "build is skipped ..."
         fi
 
+  # NoErrorTest - sevntu-checks
+  - script:
+      name: NoErrorTest - sevntu-checks
+      code: |
+        if [[ $SKIP_CI == 'false' ]]; then
+          set -e
+          CS_POM_VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive org.codehaus.mojo:exec-maven-plugin:1.3.1:exec)
+          echo CS_version: ${CS_POM_VERSION}
+          for i in 1 2 3 4 5; do git clone https://github.com/sevntu-checkstyle/sevntu.checkstyle && break || sleep 15; done
+          cd sevntu.checkstyle/sevntu-checks
+          mvn -Pno-validations verify  -Dcheckstyle.skip=false -Dcheckstyle.version=${CS_POM_VERSION} -Dcheckstyle.configLocation=../../config/checkstyle_checks.xml
+        else
+          echo "build is skipped ..."
+        fi
+
   # NoExceptiontest - Apache Struts (oraclejdk8)
   - script:
       name: NoExceptiontest - Apache Struts
