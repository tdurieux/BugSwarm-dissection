diff --git a/abjad/__init__.py b/abjad/__init__.py
index fb25e927a3..8c11120736 100755
--- a/abjad/__init__.py
+++ b/abjad/__init__.py
@@ -108,11 +108,14 @@
 from abjad._version import __version_info__, __version__
 del _version
 
-def f(argument):
+def f(argument, strict=False):
     if hasattr(argument, '_publish_storage_format'):
         print(format(argument, 'storage'))
     else:
-        print(format(argument, 'lilypond'))
+        if strict is True:
+            print(format(argument, 'lilypond:strict'))
+        else:
+            print(format(argument, 'lilypond'))
 
 from abjad import demos
 from abjad import ly
diff --git a/abjad/tools/indicatortools/Clef.py b/abjad/tools/indicatortools/Clef.py
index d18d1298ef..03092c49cc 100755
--- a/abjad/tools/indicatortools/Clef.py
+++ b/abjad/tools/indicatortools/Clef.py
@@ -59,6 +59,23 @@ class Clef(AbjadValueObject):
                 c''8
             }
 
+    ..  container:: example
+
+        Clefs can be tagged:
+
+        >>> staff = abjad.Staff("c'4 d' e' f'")
+        >>> abjad.attach(abjad.Clef('treble'), staff[0], tag='SEGMENT')
+        >>> abjad.show(staff) # doctest: +SKIP
+
+        >>> abjad.f(staff)
+        \new Staff {
+            \clef "treble" % SEGMENT
+            c'4
+            d'4
+            e'4
+            f'4
+        }
+
     '''
 
     ### CLASS VARIABLES ###
diff --git a/abjad/tools/indicatortools/SystemBreak.py b/abjad/tools/indicatortools/SystemBreak.py
index 6684de6478..b20d90aff2 100755
--- a/abjad/tools/indicatortools/SystemBreak.py
+++ b/abjad/tools/indicatortools/SystemBreak.py
@@ -50,7 +50,8 @@ def __init__(self, tag=None):
     def _get_lilypond_format(self):
         string = r'\break'
         if self.tag is not None:
-            string += f' % {self.tag}'
+            string += ' % '
+            string += self.tag
         return string
 
     def _get_lilypond_format_bundle(self, component=None):
diff --git a/abjad/tools/scoretools/Chord.py b/abjad/tools/scoretools/Chord.py
index 3592334880..23b48d64fa 100755
--- a/abjad/tools/scoretools/Chord.py
+++ b/abjad/tools/scoretools/Chord.py
@@ -283,8 +283,9 @@ def _get_compact_representation_with_tie(self):
             #return self._get_body()[0]
             return self._get_compact_representation()
 
-    def _get_lilypond_format(self):
-        return super(Chord, self)._get_lilypond_format()
+    # TODO: remove?
+    def _get_lilypond_format(self, strict=False):
+        return super(Chord, self)._get_lilypond_format(strict=strict)
 
     def _get_sounding_pitches(self):
         from abjad.tools import instrumenttools
diff --git a/abjad/tools/scoretools/Cluster.py b/abjad/tools/scoretools/Cluster.py
index 416d523352..6095bd1e43 100755
--- a/abjad/tools/scoretools/Cluster.py
+++ b/abjad/tools/scoretools/Cluster.py
@@ -44,6 +44,6 @@ def _format_open_brackets_slot(self, bundle):
         result.append([contributor, contributions])
         return tuple(result)
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._update_now(indicators=True)
-        return self._format_component()
+        return self._format_component(strict=strict)
diff --git a/abjad/tools/scoretools/Component.py b/abjad/tools/scoretools/Component.py
index 86f7c5a083..a0d917cf14 100755
--- a/abjad/tools/scoretools/Component.py
+++ b/abjad/tools/scoretools/Component.py
@@ -77,6 +77,8 @@ def __format__(self, format_specification=''):
         import abjad
         if format_specification in ('', 'lilypond'):
             return self._get_lilypond_format()
+        elif format_specification == 'lilypond:strict':
+            return self._get_lilypond_format(strict=True)
         elif format_specification == 'storage':
             return abjad.StorageFormatManager(self).get_storage_format()
         return str(self)
@@ -228,16 +230,15 @@ def _format_close_brackets_slot(self, bundle):
     def _format_closing_slot(self, bundle):
         pass
 
-    def _format_component(self, pieces=False):
+    def _format_component(self, pieces=False, strict=False):
         import abjad
         result = []
-        manager = abjad.LilyPondFormatManager
-        bundle = manager.bundle_format_contributions(self)
+        bundle = abjad.LilyPondFormatManager.bundle_format_contributions(self)
         result.extend(self._format_absolute_before_slot(bundle))
         result.extend(self._format_before_slot(bundle))
         result.extend(self._format_open_brackets_slot(bundle))
         result.extend(self._format_opening_slot(bundle))
-        result.extend(self._format_contents_slot(bundle))
+        result.extend(self._format_contents_slot(bundle, strict=strict))
         result.extend(self._format_closing_slot(bundle))
         result.extend(self._format_close_brackets_slot(bundle))
         result.extend(self._format_after_slot(bundle))
@@ -250,7 +251,7 @@ def _format_component(self, pieces=False):
         else:
             return '\n'.join(contributions)
 
-    def _format_contents_slot(self, bundle):
+    def _format_contents_slot(self, bundle, strict=False):
         pass
 
     def _format_open_brackets_slot(self, bundle):
@@ -323,17 +324,22 @@ def _get_effective(self, prototype=None, unwrap=True, n=0):
                     return indicator
                 else:
                     return
-        # update indicators of entire score tree if necessary
-        self._update_now(indicators=True)
         # gather candidate wrappers
+        self._update_now(indicators=True)
         candidate_wrappers = {}
         for parent in abjad.inspect(self).get_parentage(
-            include_self=True, grace_notes=True):
+            include_self=True,
+            grace_notes=True,
+            ):
             for wrapper in parent._dependent_wrappers:
+                if wrapper.is_annotation:
+                    continue
                 if isinstance(wrapper.indicator, prototype):
                     offset = wrapper.start_offset
                     candidate_wrappers.setdefault(offset, []).append(wrapper)
             for wrapper in parent._indicator_wrappers:
+                if wrapper.is_annotation:
+                    continue
                 if wrapper.context is not None:
                     continue
                 if isinstance(wrapper.indicator, prototype):
@@ -470,9 +476,9 @@ def _get_indicators(self, prototype=None, unwrap=True):
         result = tuple(result)
         return result
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._update_now(indicators=True)
-        return self._format_component()
+        return self._format_component(strict=strict)
 
     def _get_lineage(self):
         import abjad
diff --git a/abjad/tools/scoretools/Container.py b/abjad/tools/scoretools/Container.py
index fbee639784..6fb738685a 100755
--- a/abjad/tools/scoretools/Container.py
+++ b/abjad/tools/scoretools/Container.py
@@ -117,6 +117,39 @@ class Container(Component):
         >>> isinstance(container, collections.Sequence)
         False
 
+    ..  container:: example
+
+        Conventional (nonstrict) formatting positions format contributions to
+        the right of leaves:
+
+        >>> staff = abjad.Staff("c'4 d' e' f'")
+        >>> abjad.attach(abjad.Articulation('^'), staff[0])
+        >>> abjad.attach(abjad.Markup('Allegro', direction=abjad.Up), staff[0])
+        >>> abjad.attach(abjad.StemTremolo(), staff[0])
+        >>> abjad.show(staff) # doctest: +SKIP
+
+        >>> abjad.f(staff)
+        \new Staff {
+            c'4 :16 -\marcato ^ \markup { Allegro }
+            d'4
+            e'4
+            f'4
+        }
+
+        Strict formatting positions contributions strictly one-per-line. Use to
+        comment-tag output line right ends:
+
+        >>> abjad.f(staff, strict=True)
+        \new Staff {
+            c'4
+            :16
+            -\marcato
+            ^ \markup { Allegro }
+            d'4
+            e'4
+            f'4
+        }
+
     '''
 
     ### CLASS VARIABLES ###
@@ -494,18 +527,29 @@ def _format_closing_slot(self, bundle):
         result.append(('comments', bundle.closing.comments))
         return self._format_slot_contributions_with_indent(result)
 
-    def _format_content_pieces(self):
+    def _format_content_pieces(self, strict=False):
         import abjad
         indent = abjad.LilyPondFormatManager.indent
         result = []
+        format_specification = 'lilypond'
+        if strict:
+            format_specification += ':strict'
         for component in self.components:
-            result.extend(format(component).split('\n'))
+            string = component.__format__(
+                format_specification=format_specification
+                )
+            parts = string.split('\n')
+            result.extend(parts)
         result = [indent + _ for _ in result]
         return result
 
-    def _format_contents_slot(self, bundle):
+    def _format_contents_slot(self, bundle, strict=False):
         result = []
-        result.append([('contents', '_contents'), self._format_content_pieces()])
+        result.append(
+            [
+                ('contents', '_contents'),
+                self._format_content_pieces(strict=strict)
+                ])
         return tuple(result)
 
     def _format_open_brackets_slot(self, bundle):
diff --git a/abjad/tools/scoretools/Context.py b/abjad/tools/scoretools/Context.py
index 02ebda13e9..0c9a905447 100755
--- a/abjad/tools/scoretools/Context.py
+++ b/abjad/tools/scoretools/Context.py
@@ -168,9 +168,9 @@ def _format_remove_commands(self):
     def _get_format_pieces(self):
         return self._format_component(pieces=True)
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._update_now(indicators=True)
-        return self._format_component()
+        return self._format_component(strict=strict)
 
     def _get_repr_kwargs_names(self):
         if self.context_name == type(self).__name__:
diff --git a/abjad/tools/scoretools/GraceContainer.py b/abjad/tools/scoretools/GraceContainer.py
index d3749bfba1..a2269ddd29 100755
--- a/abjad/tools/scoretools/GraceContainer.py
+++ b/abjad/tools/scoretools/GraceContainer.py
@@ -168,6 +168,6 @@ def _format_open_brackets_slot(self, bundle):
         result.append([('grace_brackets', 'open'), [r'\grace {']])
         return tuple(result)
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._update_now(indicators=True)
-        return self._format_component()
+        return self._format_component(strict=strict)
diff --git a/abjad/tools/scoretools/Inspection.py b/abjad/tools/scoretools/Inspection.py
index 5ddfb870d7..9a0ef08352 100755
--- a/abjad/tools/scoretools/Inspection.py
+++ b/abjad/tools/scoretools/Inspection.py
@@ -114,22 +114,56 @@ def get_annotation(self, name, default=None):
 
         ..  container:: example
 
-            >>> note = abjad.Note("c'4")
-            >>> abjad.annotate(note, 'bow_direction', abjad.Down)
-            >>> abjad.inspect(note).get_annotation('bow_direction')
-            Down
+            >>> staff = abjad.Staff("c'4 e' e' f'")
+            >>> abjad.annotate(staff[0], 'default_instrument', abjad.Cello())
+            >>> abjad.show(staff) # doctest: +SKIP
+
+            ..  docs::
 
-            Returns none when no annotation is found:
+                >>> abjad.f(staff)
+                \new Staff {
+                    c'4
+                    e'4
+                    e'4
+                    f'4
+                }
+
+            >>> string = 'default_instrument'
+            >>> abjad.inspect(staff[0]).get_annotation(string)
+            Cello()
+
+            >>> abjad.inspect(staff[1]).get_annotation(string) is None
+            True
+
+            >>> abjad.inspect(staff[2]).get_annotation(string) is None
+            True
 
-            >>> abjad.inspect(note).get_annotation('bow_fraction') is None
+            >>> abjad.inspect(staff[3]).get_annotation(string) is None
             True
 
             Returns default when no annotation is found:
 
-            >>> abjad.inspect(note).get_annotation('bow_fraction', 2)
-            2
+            >>> abjad.inspect(staff[3]).get_annotation(string, abjad.Violin())
+            Violin()
 
-        Returns annotation or default.
+        ..  container:: example
+
+            Regression: annotation is not picked up as effective indicator:
+
+            >>> prototype = abjad.Instrument
+            >>> abjad.inspect(staff[0]).get_effective(prototype) is None
+            True
+
+            >>> abjad.inspect(staff[1]).get_effective(prototype) is None
+            True
+
+            >>> abjad.inspect(staff[2]).get_effective(prototype) is None
+            True
+
+            >>> abjad.inspect(staff[3]).get_effective(prototype) is None
+            True
+
+        Returns annotation (or default).
         '''
         if hasattr(self.client, '_get_annotation'):
             annotation = self.client._get_annotation(name)
@@ -321,11 +355,8 @@ def get_effective(self, prototype=None, unwrap=True, n=0):
             Gets effective clef:
 
             >>> staff = abjad.Staff("c'4 d' e' f'")
-            >>> clef = abjad.Clef('alto')
-            >>> abjad.attach(clef, staff[0])
-            >>> note = abjad.Note("fs'16")
-            >>> container = abjad.AcciaccaturaContainer([note])
-            >>> abjad.attach(container, staff[-1])
+            >>> abjad.attach(abjad.Clef('alto'), staff[0])
+            >>> abjad.attach(abjad.AcciaccaturaContainer("fs'16"), staff[-1])
             >>> abjad.show(staff) # doctest: +SKIP
 
             ..  docs::
@@ -343,8 +374,7 @@ def get_effective(self, prototype=None, unwrap=True, n=0):
                 }
 
             >>> for component in abjad.iterate(staff).components():
-            ...     agent = abjad.inspect(component)
-            ...     clef = agent.get_effective(abjad.Clef)
+            ...     clef = abjad.inspect(component).get_effective(abjad.Clef)
             ...     print(component, clef)
             ...
             Staff("c'4 d'4 e'4 f'4") Clef('alto')
@@ -354,6 +384,129 @@ def get_effective(self, prototype=None, unwrap=True, n=0):
             fs'16 Clef('alto')
             f'4 Clef('alto')
 
+        ..  container:: example
+
+            Arbitrary objects (like strings) can be contexted:
+
+            >>> staff = abjad.Staff("c'8 d'8 e'8 f'8")
+            >>> abjad.attach('color', staff[1], context='Staff')
+            >>> abjad.show(staff) # doctest: +SKIP
+
+            ..  docs::
+
+                >>> abjad.f(staff)
+                \new Staff {
+                    c'8
+                    d'8
+                    e'8
+                    f'8
+                }
+
+            >>> for component in abjad.iterate(staff).components():
+            ...     string = abjad.inspect(component).get_effective(str)
+            ...     print(component, repr(string))
+            ...
+            Staff("c'8 d'8 e'8 f'8") None
+            c'8 None
+            d'8 'color'
+            e'8 'color'
+            f'8 'color'
+
+        ..  container:: example
+
+            Scans forwards or backwards when `n` is set: 
+
+            >>> staff = abjad.Staff("c'8 d'8 e'8 f'8 g'8")
+            >>> abjad.attach('red', staff[0], context='Staff')
+            >>> abjad.attach('blue', staff[2], context='Staff')
+            >>> abjad.attach('yellow', staff[4], context='Staff')
+            >>> abjad.show(staff) # doctest: +SKIP
+
+            ..  docs::
+
+                >>> abjad.f(staff)
+                \new Staff {
+                    c'8
+                    d'8
+                    e'8
+                    f'8
+                    g'8
+                }
+                
+            >>> for n in (-1, 0, 1):
+            ...     color = abjad.inspect(staff[0]).get_effective(str, n=n)
+            ...     print(n, repr(color))
+            ...
+            -1 None
+            0 'red'
+            1 'blue'
+
+            >>> for n in (-1, 0, 1):
+            ...     color = abjad.inspect(staff[1]).get_effective(str, n=n)
+            ...     print(n, repr(color))
+            ...
+            -1 None
+            0 'red'
+            1 'blue'
+
+            >>> for n in (-1, 0, 1):
+            ...     color = abjad.inspect(staff[2]).get_effective(str, n=n)
+            ...     print(n, repr(color))
+            ...
+            -1 'red'
+            0 'blue'
+            1 'yellow'
+
+            >>> for n in (-1, 0, 1):
+            ...     color = abjad.inspect(staff[3]).get_effective(str, n=n)
+            ...     print(n, repr(color))
+            ...
+            -1 'red'
+            0 'blue'
+            1 'yellow'
+
+            >>> for n in (-1, 0, 1):
+            ...     color = abjad.inspect(staff[4]).get_effective(str, n=n)
+            ...     print(n, repr(color))
+            ...
+            -1 'blue'
+            0 'yellow'
+            1 None
+
+        ..  container:: example
+
+            Synthetic offsets works this way:
+
+            >>> staff = abjad.Staff("c'8 d'8 e'8 f'8")
+            >>> abjad.attach(
+            ...     'red',
+            ...     staff[-1],
+            ...     context='Staff',
+            ...     synthetic_offset=-1,
+            ...     )
+            >>> abjad.attach('blue', staff[0], context='Staff')
+            >>> abjad.show(staff) # doctest: +SKIP
+
+            ..  docs::
+
+                >>> abjad.f(staff)
+                \new Staff {
+                    c'8
+                    d'8
+                    e'8
+                    f'8
+                }
+
+            Entire staff is effectively blue:
+
+            >>> abjad.inspect(staff).get_effective(str)
+            'blue'
+
+            The (synthetic) offset just prior to (start of) staff is red:
+
+            >>> abjad.inspect(staff).get_effective(str, n=-1)
+            'red'
+
         Returns indicator or none.
         '''
         if hasattr(self.client, '_get_effective'):
@@ -1342,6 +1495,8 @@ def report_modifications(self):
 
         ..  container:: example
 
+            Reports container modifications:
+
             >>> container = abjad.Container("c'8 d'8 e'8 f'8")
             >>> abjad.override(container).note_head.color = 'red'
             >>> abjad.override(container).note_head.style = 'harmonic'
@@ -1371,28 +1526,77 @@ def report_modifications(self):
                 \revert NoteHead.style
             }
 
+        ..  container:: example
+
+            Reports leaf modifications:
+
+            >>> container = abjad.Container("c'8 d'8 e'8 f'8")
+            >>> abjad.attach(abjad.Clef('alto'), container[0])
+            >>> abjad.override(container[0]).note_head.color = 'red'
+            >>> abjad.override(container[0]).stem.color = 'red'
+            >>> abjad.show(container) # doctest: +SKIP
+
+            ..  docs::
+
+                >>> abjad.f(container)
+                {
+                    \once \override NoteHead.color = #red
+                    \once \override Stem.color = #red
+                    \clef "alto"
+                    c'8
+                    d'8
+                    e'8
+                    f'8
+                }
+
+            >>> report = abjad.inspect(container[0]).report_modifications()
+            >>> print(report)
+            slot absolute before:
+            slot 1:
+                grob overrides:
+                    \once \override NoteHead.color = #red
+                    \once \override Stem.color = #red
+            slot 3:
+                commands:
+                    \clef "alto"
+            slot 4:
+                leaf body:
+                    c'8
+            slot 5:
+            slot 7:
+            slot absolute after:
+
         Returns string.
         '''
         import abjad
-        manager = abjad.LilyPondFormatManager
-        client = self.client
-        bundle = manager.bundle_format_contributions(client)
-        result = []
-        result.extend(client._get_format_contributions_for_slot(
-            'before', bundle))
-        result.extend(client._get_format_contributions_for_slot(
-            'open brackets', bundle))
-        result.extend(client._get_format_contributions_for_slot(
-            'opening', bundle))
-        result.append('    %%%%%% %s components omitted %%%%%%' % len(client))
-        result.extend(client._get_format_contributions_for_slot(
-            'closing', bundle))
-        result.extend(client._get_format_contributions_for_slot(
-            'close brackets', bundle))
-        result.extend(client._get_format_contributions_for_slot(
-            'after', bundle))
-        result = '\n'.join(result)
-        return result
+        if isinstance(self.client, abjad.Container):
+            bundle = abjad.LilyPondFormatManager.bundle_format_contributions(
+                self.client
+                )
+            result = []
+            for slot in ('before', 'open brackets', 'opening'):
+                lines = self.client._get_format_contributions_for_slot(
+                    slot,
+                    bundle,
+                    )
+                result.extend(lines)
+            line = '    %%% {} components omitted %%%'
+            line = line.format(len(self.client))
+            result.append(line)
+            for slot in ('closing', 'close brackets', 'after'):
+                lines = self.client._get_format_contributions_for_slot(
+                    slot,
+                    bundle,
+                    )
+                result.extend(lines)
+            result = '\n'.join(result)
+            return result
+        elif isinstance(self.client, abjad.Leaf):
+            return self.client._report_format_contributions()
+        else:
+            message = 'only defined for components: {}.'
+            message = message.format(self.client)
+            return message
 
     def tabulate_wellformedness(
         self,
diff --git a/abjad/tools/scoretools/Leaf.py b/abjad/tools/scoretools/Leaf.py
index a3f02482da..3961fd195d 100755
--- a/abjad/tools/scoretools/Leaf.py
+++ b/abjad/tools/scoretools/Leaf.py
@@ -170,9 +170,9 @@ def _format_closing_slot(self, bundle):
         result.append(('comments', bundle.closing.comments))
         return result
 
-    def _format_contents_slot(self, bundle):
+    def _format_contents_slot(self, bundle, strict=False):
         result = []
-        result.append(self._format_leaf_body(bundle))
+        result.append(self._format_leaf_body(bundle, strict=strict))
         return result
 
     def _format_grace_body(self):
@@ -183,7 +183,7 @@ def _format_grace_body(self):
                 result.append(format(grace))
         return ['grace body', result]
 
-    def _format_leaf_body(self, bundle):
+    def _format_leaf_body(self, bundle, strict=False):
         import abjad
         indent = abjad.LilyPondFormatManager.indent
         result = self._format_leaf_nucleus()[1]
@@ -195,13 +195,17 @@ def _format_leaf_body(self, bundle):
         result.extend(bundle.right.spanner_stops)
         result.extend(bundle.right.spanner_starts)
         result.extend(bundle.right.comments)
-        result = [' '.join(result)]
+        if not strict:
+            result = [' '.join(result)]
         markup = bundle.right.markup
         if markup:
-            if len(markup) == 1:
-                result[0] += ' {}'.format(markup[0])
+            if not strict:
+                if len(markup) == 1:
+                    result[0] += ' {}'.format(markup[0])
+                else:
+                    result.extend(indent + '{}'.format(_) for _ in markup)
             else:
-                result.extend(indent + '{}'.format(_) for _ in markup)
+                result.extend('{}'.format(_) for _ in markup)
         trill_pitches = bundle.right.trill_pitches
         if trill_pitches:
             assert len(trill_pitches) == 1, repr(trill_pitches)
@@ -315,7 +319,7 @@ def _process_contribution_packet(self, contribution_packet):
                     result += contribution
         return result
 
-    def _report_format_contributors(self):
+    def _report_format_contributions(self, strict=False):
         import abjad
         manager = abjad.LilyPondFormatManager
         indent = manager.indent
@@ -332,8 +336,8 @@ def _report_format_contributors(self):
         report += self._process_contribution_packet(packet)
         report += 'slot 4:\n'
         report += indent + 'leaf body:\n'
-        string = self._format_contents_slot(bundle)[0][1][0]
-        report += (indent * 2) + string + '\n'
+        string = self._format_contents_slot(bundle, strict=strict)[0][1][0]
+        report += (2 * indent) + string + '\n'
         report += 'slot 5:\n'
         packet = self._format_closing_slot(bundle)
         report += self._process_contribution_packet(packet)
diff --git a/abjad/tools/scoretools/Measure.py b/abjad/tools/scoretools/Measure.py
index 9be1e39f0d..c973c958ad 100755
--- a/abjad/tools/scoretools/Measure.py
+++ b/abjad/tools/scoretools/Measure.py
@@ -295,7 +295,7 @@ def _duration_to_time_signature(
         else:
             return abjad.TimeSignature(duration)
 
-    def _format_content_pieces(self):
+    def _format_content_pieces(self, strict=False):
         import abjad
         result = []
         if (self.has_non_power_of_two_denominator and
@@ -309,12 +309,13 @@ def _format_content_pieces(self):
                 self.implied_prolation.denominator,
                 )
             result.append(string)
-            pieces = Container._format_content_pieces(self)
+            pieces = Container._format_content_pieces(self, strict=strict)
             pieces = [indent + _ for _ in pieces]
             result.extend(pieces)
             result.append(indent + '}')
         else:
-            result.extend(Container._format_content_pieces(self))
+            result.extend(
+                Container._format_content_pieces(self, strict=strict))
         return result
 
     def _format_opening_slot(self, bundle):
@@ -350,9 +351,9 @@ def _get_format_specification(self):
             storage_format_kwargs_names=names,
             )
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._check_duration()
-        return self._format_component()
+        return self._format_component(strict=strict)
 
     def _get_preprolated_duration(self):
         time_signature_prolation = 1
diff --git a/abjad/tools/scoretools/Tuplet.py b/abjad/tools/scoretools/Tuplet.py
index 663dfa4350..51904f3810 100755
--- a/abjad/tools/scoretools/Tuplet.py
+++ b/abjad/tools/scoretools/Tuplet.py
@@ -263,9 +263,9 @@ def _get_format_specification(self):
             storage_format_kwargs_names=[],
             )
 
-    def _get_lilypond_format(self):
+    def _get_lilypond_format(self, strict=False):
         self._update_now(indicators=True)
-        return self._format_component()
+        return self._format_component(strict=strict)
 
     def _get_multiplier_fraction_string(self):
         import abjad
diff --git a/abjad/tools/systemtools/IndicatorWrapper.py b/abjad/tools/systemtools/IndicatorWrapper.py
index ed9268d3ac..0745200799 100755
--- a/abjad/tools/systemtools/IndicatorWrapper.py
+++ b/abjad/tools/systemtools/IndicatorWrapper.py
@@ -35,6 +35,7 @@ class IndicatorWrapper(AbjadValueObject):
         '_name',
         '_piecewise_spanner',
         '_synthetic_offset',
+        '_tag',
         )
 
     _publish_storage_format = True
@@ -51,6 +52,7 @@ def __init__(
         name=None,
         piecewise_spanner=None,
         synthetic_offset=None,
+        tag=None,
         ):
         import abjad
         assert not isinstance(indicator, type(self)), repr(indicator)
@@ -81,6 +83,9 @@ def __init__(
         if synthetic_offset is not None:
             synthetic_offset = abjad.Offset(synthetic_offset)
         self._synthetic_offset = synthetic_offset
+        if tag is not None:
+            assert isinstance(tag, str), repr(tag)
+        self._tag = tag
 
     ### SPECIAL METHODS ###
 
@@ -166,6 +171,51 @@ def __copy__(self):
                 is_piecewise=True,
                 )
 
+        ..  container:: example
+
+            Preserves tag:
+
+            >>> old_staff = abjad.Staff("c'4 d'4 e'4 f'4")
+            >>> abjad.attach(abjad.Clef('alto'), old_staff[0], tag='SEGMENT')
+            >>> abjad.f(old_staff)
+            \new Staff {
+                \clef "alto" % SEGMENT
+                c'4
+                d'4
+                e'4
+                f'4
+            }
+
+            >>> leaf = old_staff[0]
+            >>> wrapper = abjad.inspect(leaf).get_indicator(unwrap=False)
+            >>> abjad.f(wrapper)
+            abjad.IndicatorWrapper(
+                component=abjad.Note('\\clef "alto" % SEGMENT\nc\'4'),
+                context='Staff',
+                indicator=abjad.Clef('alto'),
+                tag='SEGMENT',
+                )
+
+            >>> new_staff = abjad.mutate(old_staff).copy()
+            >>> abjad.f(new_staff)
+            \new Staff {
+                \clef "alto" % SEGMENT
+                c'4
+                d'4
+                e'4
+                f'4
+            }
+
+            >>> leaf = new_staff[0]
+            >>> wrapper = abjad.inspect(leaf).get_indicator(unwrap=False)
+            >>> abjad.f(wrapper)
+            abjad.IndicatorWrapper(
+                component=abjad.Note('\\clef "alto" % SEGMENT\nc\'4'),
+                context='Staff',
+                indicator=abjad.Clef('alto'),
+                tag='SEGMENT',
+                )
+
         Copies indicator and context.
 
         Does not copy start component.
@@ -184,6 +234,7 @@ def __copy__(self):
             is_piecewise=self.is_piecewise,
             name=self.name,
             synthetic_offset=self.synthetic_offset,
+            tag=self.tag,
             )
         return new
 
@@ -248,7 +299,10 @@ def _get_format_pieces(self):
         if self.is_annotation:
             return result
         if hasattr(self.indicator, '_get_lilypond_format_bundle'):
-            return self.indicator._get_lilypond_format_bundle(self.component)
+            bundle = self.indicator._get_lilypond_format_bundle(self.component)
+            if self.tag:
+                bundle.tag_format_contributions(self.tag)
+            return bundle
         try:
             context = self._get_effective_context()
             lilypond_format = self.indicator._get_lilypond_format(
@@ -447,3 +501,13 @@ def synthetic_offset(self):
         Returns offset or none.
         '''
         return self._synthetic_offset
+
+    @property
+    def tag(self):
+        r'''Gets tag.
+
+        Tag is optional.
+
+        Returns string or none.
+        '''
+        return self._tag
diff --git a/abjad/tools/systemtools/LilyPondFormatBundle.py b/abjad/tools/systemtools/LilyPondFormatBundle.py
index b2ea5e1765..9c9eab96e0 100755
--- a/abjad/tools/systemtools/LilyPondFormatBundle.py
+++ b/abjad/tools/systemtools/LilyPondFormatBundle.py
@@ -28,14 +28,14 @@ class LilyPondFormatBundle(AbjadObject):
     ### INITIALIZER ###
 
     def __init__(self):
-        from abjad.tools import systemtools
-        self._absolute_after = systemtools.SlotContributions()
-        self._absolute_before = systemtools.SlotContributions()
-        self._before = systemtools.SlotContributions()
-        self._after = systemtools.SlotContributions()
-        self._opening = systemtools.SlotContributions()
-        self._closing = systemtools.SlotContributions()
-        self._right = systemtools.SlotContributions()
+        import abjad
+        self._absolute_after = abjad.SlotContributions()
+        self._absolute_before = abjad.SlotContributions()
+        self._before = abjad.SlotContributions()
+        self._after = abjad.SlotContributions()
+        self._opening = abjad.SlotContributions()
+        self._closing = abjad.SlotContributions()
+        self._right = abjad.SlotContributions()
         self._context_settings = []
         self._grob_overrides = []
         self._grob_reverts = []
@@ -43,7 +43,7 @@ def __init__(self):
     ### PRIVATE METHODS ###
 
     def _get_format_specification(self):
-        from abjad.tools import systemtools
+        import abjad
         slot_contribution_names = (
             'absolute_before',
             'absolute_after',
@@ -62,7 +62,7 @@ def _get_format_specification(self):
             if getattr(self, x).has_contributions]
         names.extend(x for x in grob_contribution_names
             if getattr(self, x))
-        return systemtools.FormatSpecification(
+        return abjad.FormatSpecification(
             client=self,
             storage_format_kwargs_names=names,
             )
@@ -107,6 +107,23 @@ def make_immutable(self):
         self._grob_overrides = tuple(sorted(set(self.grob_overrides)))
         self._grob_reverts = tuple(sorted(set(self.grob_reverts)))
 
+    def tag_format_contributions(self, tag):
+        r'''Tags format contributions with string `tag`.
+
+        Returns none.
+        '''
+        self.absolute_before.tag(tag)
+        self.absolute_after.tag(tag)
+        self.before.tag(tag)
+        self.after.tag(tag)
+        self.opening.tag(tag)
+        self.closing.tag(tag)
+        self.right.tag(tag)
+        tag = ' % ' + tag
+        self._context_settings = [_ + tag for _ in self.context_settings]
+        self._grob_overrides = [_ + tag for _ in self.grob_overrides]
+        self._grob_reverts = [_ + tag for _ in self.grob_reverts]
+
     def update(self, format_bundle):
         r'''Updates format bundle with all format contributions in
         `format_bundle`.
diff --git a/abjad/tools/systemtools/LilyPondFormatManager.py b/abjad/tools/systemtools/LilyPondFormatManager.py
index dad245e481..d72f40e28c 100755
--- a/abjad/tools/systemtools/LilyPondFormatManager.py
+++ b/abjad/tools/systemtools/LilyPondFormatManager.py
@@ -95,17 +95,16 @@ def _collect_indicators(component):
 
     @staticmethod
     def _populate_context_setting_format_contributions(component, bundle):
+        import abjad
         result = []
-        from abjad.tools.topleveltools import setting
-        from abjad.tools import scoretools
         manager = LilyPondFormatManager
-        if isinstance(component, scoretools.Context):
-            for name, value in vars(setting(component)).items():
+        if isinstance(component, abjad.Context):
+            for name, value in vars(abjad.setting(component)).items():
                 string = manager.format_lilypond_context_setting_in_with_block(
                     name, value)
                 result.append(string)
         else:
-            contextualizer = setting(component)
+            contextualizer = abjad.setting(component)
             variables = vars(contextualizer)
             for name, value in variables.items():
                 # if we've found a leaf context namespace
@@ -166,6 +165,7 @@ def _populate_indicator_format_contributions(component, bundle):
             context_wrappers,
             noncontext_wrappers,
             ) = LilyPondFormatManager._collect_indicators(component)
+        # HERE: TODO:
         manager._populate_markup_format_contributions(
             component,
             bundle,
@@ -192,7 +192,7 @@ def _populate_markup_format_contributions(
         down_markup,
         neutral_markup,
         ):
-        from abjad.tools import markuptools
+        import abjad
         for markup_list in (up_markup, down_markup, neutral_markup):
             if not markup_list:
                 continue
@@ -202,9 +202,8 @@ def _populate_markup_format_contributions(
                     direction = '-'
                 markup_list = markup_list[:]
                 markup_list.sort(key=lambda x: -x.stack_priority)
-                markup_list = [
-                    markuptools.Markup.line([_]) for _ in markup_list]
-                markup = markuptools.Markup.column(
+                markup_list = [abjad.Markup.line([_]) for _ in markup_list]
+                markup = abjad.Markup.column(
                     markup_list,
                     direction=direction,
                     )
@@ -212,7 +211,7 @@ def _populate_markup_format_contributions(
                 bundle.right.markup.extend(format_pieces)
             else:
                 if markup_list[0].direction is None:
-                    markup = markuptools.Markup(markup_list[0], direction='-')
+                    markup = abjad.Markup(markup_list[0], direction='-')
                     format_pieces = markup._get_format_pieces()
                     bundle.right.markup.extend(format_pieces)
                 else:
@@ -270,9 +269,9 @@ def bundle_format_contributions(component):
 
         Returns LilyPond format bundle.
         '''
-        from abjad.tools import systemtools
+        import abjad
         manager = LilyPondFormatManager
-        bundle = systemtools.LilyPondFormatBundle()
+        bundle = abjad.LilyPondFormatBundle()
         manager._populate_indicator_format_contributions(component, bundle)
         manager._populate_spanner_format_contributions(component, bundle)
         manager._populate_context_setting_format_contributions(
@@ -440,33 +439,6 @@ def make_lilypond_tweak_string(attribute, value, grob=None):
         result = result.format(grob, attribute, value)
         return result
 
-    @staticmethod
-    def report_component_format_contributions(component, verbose=False):
-        r'''Reports `component` format contributions.
-
-        ..  container:: example
-
-            >>> staff = abjad.Staff("c'4 [ ( d'4 e'4 f'4 ] )")
-            >>> abjad.override(staff[0]).note_head.color = 'red'
-
-            >>> manager = abjad.LilyPondFormatManager
-            >>> print(manager.report_component_format_contributions(staff[0]))
-            slot absolute before:
-            slot 1:
-                grob overrides:
-                    \once \override NoteHead.color = #red
-            slot 3:
-            slot 4:
-                leaf body:
-                    c'4 [ (
-            slot 5:
-            slot 7:
-            slot absolute after:
-
-        Returns string.
-        '''
-        return component._report_format_contributors()
-
     @staticmethod
     def report_spanner_format_contributions(spanner):
         r'''Reports spanner format contributions for every leaf in `spanner`.
diff --git a/abjad/tools/systemtools/SlotContributions.py b/abjad/tools/systemtools/SlotContributions.py
index 76c91ea95d..1ed35fc294 100755
--- a/abjad/tools/systemtools/SlotContributions.py
+++ b/abjad/tools/systemtools/SlotContributions.py
@@ -163,6 +163,21 @@ def make_immutable(self):
         self._stem_tremolos = tuple(self.stem_tremolos)
         self._trill_pitches = tuple(self.trill_pitches)
 
+    def tag(self, tag):
+        r'''Tags contributions.
+        '''
+        tag = ' % ' + tag
+        self._articulations = [_ + tag for _ in self.articulations]
+        self._commands = [_ + tag for _ in self.commands]
+        self._comments = [_ + tag for _ in self.comments]
+        self._indicators = [_ + tag for _ in self.indicators]
+        self._markup = [_ + tag for _ in self.markup]
+        self._spanners = [_ + tag for _ in self.spanners]
+        self._spanner_starts = [_ + tag for _ in self.spanner_starts]
+        self._spanner_stops = [_ + tag for _ in self.spanner_stops]
+        self._stem_tremolos = [_ + tag for _ in self.stem_tremolos]
+        self._trill_pitches = [_ + tag for _ in self.trill_pitches]
+
     def update(self, slot_contributions):
         r'''Updates contributions.
         '''
diff --git a/abjad/tools/topleveltools/attach.py b/abjad/tools/topleveltools/attach.py
index b9aff2cf87..5728df43e9 100755
--- a/abjad/tools/topleveltools/attach.py
+++ b/abjad/tools/topleveltools/attach.py
@@ -6,6 +6,7 @@ def attach(
     is_annotation=None,
     name=None,
     synthetic_offset=None,
+    tag=None,
     ):
     r'''Attaches `indicator` to component, selection or spanner `argument`.
 
@@ -109,11 +110,11 @@ def _is_acceptable(argument):
             indicator._name = name
             leaves = []
             try:
-                for x in argument:
-                    if isinstance(x, abjad.Leaf):
-                        leaves.append(x)
+                for item in argument:
+                    if isinstance(item, abjad.Leaf):
+                        leaves.append(item)
                     else:
-                        leaves.extend(abjad.iterate(x).leaves())
+                        leaves.extend(abjad.iterate(item).leaves())
             except TypeError:
                 leaves.append(argument)
             indicator._attach(leaves)
@@ -134,6 +135,7 @@ def _is_acceptable(argument):
         name = name or indicator.name
         context = context or indicator.context
         synthetic_offset = synthetic_offset or indicator.synthetic_offset
+        tag = tag or indicator.tag
         indicator._detach()
         indicator = indicator.indicator
 
@@ -148,5 +150,6 @@ def _is_acceptable(argument):
         is_piecewise=is_piecewise,
         name=name,
         synthetic_offset=synthetic_offset,
+        tag=tag,
         )
     wrapper._bind_to_component(component)
