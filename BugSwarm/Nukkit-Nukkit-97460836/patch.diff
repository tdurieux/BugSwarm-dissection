diff --git a/src/main/java/cn/nukkit/inventory/CraftingManager.java b/src/main/java/cn/nukkit/inventory/CraftingManager.java
index ffeeaf8fd0..335471877d 100755
--- a/src/main/java/cn/nukkit/inventory/CraftingManager.java
+++ b/src/main/java/cn/nukkit/inventory/CraftingManager.java
@@ -337,6 +337,16 @@ public CraftingManager() {
                 "III",
                 "III"
         )).setIngredient("I", Item.get(Item.IRON_INGOT, 0, 1)));
+
+        this.registerRecipe((new BigShapedRecipe(Item.get(Item.GLASS_BOTTLE, 0, 3),
+                "I I",
+                " I "
+        )).setIngredient("I", Item.get(Item.GLASS, 0, 1)));
+
+        this.registerRecipe((new BigShapedRecipe(Item.get(Item.BREWING_STAND, 0, 1),
+                " I ",
+                "CCC"
+        )).setIngredient("C", Item.get(Item.COBBLESTONE, 0, 1)).setIngredient("I", Item.get(Item.BLAZE_ROD, 0, 1)));
     }
 
     protected void registerFurnace() {
@@ -362,7 +372,7 @@ protected void registerFurnace() {
         this.registerRecipe(new FurnaceRecipe(Item.get(Item.HARDENED_CLAY, 0, 1), Item.get(Item.CLAY_BLOCK, 0, 1)));
     }
 
-    public void registerBrewing(){
+    protected void registerBrewing(){
         for(int ingredient : new int[]{Item.NETHER_WART, Item.GOLD_NUGGET, Item.GHAST_TEAR, Item.GLOWSTONE_DUST, Item.REDSTONE_DUST, Item.GUNPOWDER, Item.MAGMA_CREAM, Item.BLAZE_POWDER, Item.GOLDEN_CARROT, Item.SPIDER_EYE, Item.FERMENTED_SPIDER_EYE, Item.GLISTERING_MELON, Item.SUGAR, Item.RAW_FISH}){
             cn.nukkit.tile.BrewingStand.ingredients.add(ingredient); //temporally solution for ingredients
         }
diff --git a/src/main/java/cn/nukkit/tile/BrewingStand.java b/src/main/java/cn/nukkit/tile/BrewingStand.java
index f624f2c564..6894c4c3af 100755
--- a/src/main/java/cn/nukkit/tile/BrewingStand.java
+++ b/src/main/java/cn/nukkit/tile/BrewingStand.java
@@ -11,6 +11,8 @@
 import cn.nukkit.nbt.tag.ListTag;
 import cn.nukkit.network.protocol.ContainerSetDataPacket;
 import cn.nukkit.Server;
+
+import java.util.ArrayList;
 import java.util.List;
 
 public class BrewingStand extends Spawnable implements InventoryHolder, Container, Nameable{
@@ -19,7 +21,7 @@
 
     public static final int MAX_BREW_TIME = 400;
 
-    public static List<Integer> ingredients;
+    public static List<Integer> ingredients = new ArrayList<>();
 
     public BrewingStand(FullChunk chunk, CompoundTag nbt){
         super(chunk, nbt);
@@ -86,9 +88,9 @@ public int getSize(){
     }
 
     protected int getSlotIndex(int index) {
-        ListTag<CompoundTag> list = (ListTag<CompoundTag>) this.namedTag.getList("Items");
+        ListTag<CompoundTag> list = this.namedTag.getList("Items", new ListTag<>());
         for (int i = 0; i < list.size(); i++) {
-            if (list.list.get(i).getByte("Slot") == index) {
+            if (list.get(i).getByte("Slot") == index) {
                 return i;
             }
         }
@@ -119,14 +121,14 @@ public void setItem(int index, Item item) {
 
         if (item.getId() == Item.AIR || item.getCount() <= 0) {
             if (i >= 0) {
-                this.namedTag.getList("Items").list.remove(i);
+                this.namedTag.getList("Items").getAll().remove(i);
             }
         } else if (i < 0) {
-            i = this.namedTag.getList("Items").list.size();
+            i = this.namedTag.getList("Items").getAll().size();
             i = Math.max(i, this.getSize());
-            ((ListTag<CompoundTag>) this.namedTag.getList("Items")).list.add(i, d);
+            (this.namedTag.getList("Items", new ListTag<>())).add(i, d);
         } else {
-            ((ListTag<CompoundTag>) this.namedTag.getList("Items")).list.add(i, d);
+            (this.namedTag.getList("Items", new ListTag<>())).add(i, d);
         }
     }
 
@@ -213,7 +215,7 @@ public CompoundTag getSpawnCompound(){
                 .putInt("x", (int) this.x)
                 .putInt("y", (int) this.y)
                 .putInt("z", (int) this.z)
-                .putShort("BrewTime", (int) MAX_BREW_TIME);
+                .putShort("BrewTime", MAX_BREW_TIME);
 
         if(this.hasName()){
             nbt.put("CustomName", namedTag.get("CustomName"));
