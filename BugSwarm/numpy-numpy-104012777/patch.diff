diff --git a/numpy/core/src/private/npy_config.h b/numpy/core/src/private/npy_config.h
index eb9c1e19d3..3d14706096 100755
--- a/numpy/core/src/private/npy_config.h
+++ b/numpy/core/src/private/npy_config.h
@@ -70,17 +70,13 @@
 #endif /* defined(_MSC_VER) && defined(__INTEL_COMPILER) */
 
 
-/* Disable broken gnu trig functions on linux */
-#if defined(__linux__) && defined(__GNUC__)
-
+/* Disable broken gnu trig functions */
 #if defined(HAVE_FEATURES_H)
 #include <features.h>
-#define TRIG_OK __GLIBC_PREREQ(2, 16)
-#else
-#define TRIG_OK 0
-#endif
 
-#if !TRIG_OK
+#if defined(__GLIBC__)
+#if !__GLIBC_PREREQ(2, 16)
+
 #undef HAVE_CASIN
 #undef HAVE_CASINF
 #undef HAVE_CASINL
@@ -99,9 +95,10 @@
 #undef HAVE_CACOSH
 #undef HAVE_CACOSHF
 #undef HAVE_CACOSHL
-#endif
-#undef TRIG_OK
 
-#endif /* defined(__linux__) && defined(__GNUC__) */
+#endif /* __GLIBC_PREREQ(2, 16) */
+#endif /* defined(__GLIBC_PREREQ) */
+
+#endif /* defined(HAVE_FEATURES_H) */
 
 #endif
diff --git a/numpy/random/mtrand/mtrand.pyx b/numpy/random/mtrand/mtrand.pyx
index 8a03c43a25..8a5b364df8 100755
--- a/numpy/random/mtrand/mtrand.pyx
+++ b/numpy/random/mtrand/mtrand.pyx
@@ -600,11 +600,12 @@ def _rand_bool(low, high, size, rngstate):
                 rk_random_bool(off, rng, cnt, out, state)
             return array
     else:
+        i = 0
         lo = <ndarray>low
         hi = <ndarray>high
 
         if size is None:
-            multi = <broadcast>np.broadcast(lo, hi)
+            multi = <broadcast>np.broadcast(lo, hi, [0])
             array = <ndarray>np.empty(multi.shape, dtype=np.bool_)
         else:
             array = <ndarray>np.empty(size, dtype=np.bool_)
@@ -614,16 +615,13 @@ def _rand_bool(low, high, size, rngstate):
 
         array_data = <npy_bool *>PyArray_DATA(array)
 
-        with nogil:
-            for i in range(multi.size):
-                low_data = <int *>PyArray_MultiIter_DATA(multi, 0)
-                high_data = <int *>PyArray_MultiIter_DATA(multi, 1)
-                rng = <npy_uint8>(high_data[0] - low_data[0])
-                off = <npy_uint8>(<npy_int8>low_data[0])
-                rk_random_bool(off, rng, 1, &buf, state)
-                array_data[i] = buf
+        for low_data, high_data, array_elt in multi:
+            rng = <npy_bool>(int(high_data) - int(low_data))
+            off = <npy_bool>(<npy_bool>low_data)
 
-                PyArray_MultiIter_NEXT(multi)
+            rk_random_bool(off, rng, 1, &buf, state)
+            array_data[i] = buf
+            i += 1
 
         return array
 
@@ -877,11 +875,12 @@ def _rand_int64(low, high, size, rngstate):
                 rk_random_uint64(off, rng, cnt, out, state)
             return array
     else:
+        i = 0
         lo = <ndarray>low
         hi = <ndarray>high
 
         if size is None:
-            multi = <broadcast>np.broadcast(lo, hi)
+            multi = <broadcast>np.broadcast(lo, hi, [0])
             array = <ndarray>np.empty(multi.shape, dtype=np.int64)
         else:
             array = <ndarray>np.empty(size, dtype=np.int64)
@@ -891,16 +890,13 @@ def _rand_int64(low, high, size, rngstate):
 
         array_data = <npy_uint64 *>PyArray_DATA(array)
 
-        with nogil:
-            for i in range(multi.size):
-                low_data = <int *>PyArray_MultiIter_DATA(multi, 0)
-                high_data = <int *>PyArray_MultiIter_DATA(multi, 1)
-                rng = <npy_uint64>(high_data[0] - low_data[0])
-                off = <npy_uint64>(<npy_int64>low_data[0])
-                rk_random_uint64(off, rng, 1, &buf, state)
-                array_data[i] = buf
+        for low_data, high_data, array_elt in multi:
+            rng = <npy_uint64>(int(high_data) - int(low_data))
+            off = <npy_uint64>(<npy_int64>low_data)
 
-                PyArray_MultiIter_NEXT(multi)
+            rk_random_uint64(off, rng, 1, &buf, state)
+            array_data[i] = buf
+            i += 1
 
         return array
 
