diff --git a/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst b/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
index 748ffd571d..fb998b6e6e 100755
--- a/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
+++ b/source_en/ArchitectureInDetail/WebApplicationDetail/ExceptionHandling.rst
@@ -1632,8 +1632,8 @@ Method to handle exception at use case level
     servlet container since \ ``NestedServletException``\ which wraps the fatal error get handled unintentionally.
     For details, refer to \ :ref:`"Regarding handling of fatal errors using @ExceptionHandler and SystemExceptionResolver"<exception-handling-class-fatalerror-warning>`\.
 
-    In such a case, in order to notify fatal error to the servlet container, \ ``NestedServletException``\  is handled by the method which assigns \ ``@ExceptionHandler``\  by adding it to
-    <exception-handling-how-to-use-application-configuration-app-label>`\  which excludes NestedServletException from handling by \ :ref:`SystemExceptionResolver, and then is thrown again.
+    In such a case, in order to notify fatal error to the servlet container, \ :ref: NestedServletException is excluded from handling by SystemExceptionResolver<exception-handling-how-to-use-application-configuration-app-label>
+    and \  NestedServletException \  is handled by the method which assigns \ @ExceptionHandler \  and then is thrown again.
     Implementation example is as below.
 
      .. code-block:: java
