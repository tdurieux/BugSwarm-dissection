diff --git a/config/checkstyle_checks.xml b/config/checkstyle_checks.xml
index 2d4e38e506..f58dd9c4ea 100755
--- a/config/checkstyle_checks.xml
+++ b/config/checkstyle_checks.xml
@@ -380,4 +380,31 @@
   <module name="Translation">
     <property name="requiredTranslations" value="de, fr, fi, es, pt, ja, tr"/>
   </module>
+  <module name="SuppressWarningsFilter"/>
+  <module name="SeverityMatchFilter">
+    <!--
+      report all violations except ignore
+    -->
+    <property name="severity" value="ignore"/>
+    <property name="acceptOnMatch" value="false"/>
+  </module>
+  <module name="SuppressWithNearbyCommentFilter">
+    <!--
+      Use suppressions.xml for suppressions, this is only example.
+      checkFormat will prevent suppression comments from being valid.
+    -->
+    <property name="checkFormat" value="IGNORETHIS"/>
+    <property name="commentFormat" value="SUPPRESS CHECKSTYLE, (\w+)"/>
+    <property name="messageFormat" value="$1"/>
+    <property name="influenceFormat" value="-1"/>
+  </module>
+  <module name="SuppressionCommentFilter">
+    <!--
+      Use suppressions.xml for suppressions, this is only example.
+      checkFormat will prevent suppression comments from being valid.
+    -->
+    <property name="checkFormat" value="IGNORETHIS"/>
+    <property name="offCommentFormat" value="CSOFF\: .*"/>
+    <property name="onCommentFormat" value="CSON\: .*"/>
+  </module>
 </module>
diff --git a/config/suppressions.xml b/config/suppressions.xml
index 311af6aa7a..fe18472f24 100755
--- a/config/suppressions.xml
+++ b/config/suppressions.xml
@@ -37,7 +37,7 @@
               files="AbstractClassNameCheckTest.java|AbstractTypeAwareCheckTest.java|AbstractJavadocCheckTest.java|AbstractViolationReporterTest.java"/>
 
     <!-- Tone down the checking for test code -->
-    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="322"/>
+    <suppress checks="CyclomaticComplexity" files="[\\/]XDocsPagesTest\.java" lines="320"/>
     <suppress checks="EmptyBlock" files=".*[\\/]src[\\/]test[\\/]"/>
     <suppress checks="ImportControl" files=".*[\\/]src[\\/](test|it)[\\/]"/>
     <suppress checks="Javadoc" files=".*[\\/]src[\\/](test|it)[\\/]"/>
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
index 9f54c756b1..40c3e35776 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java
@@ -20,13 +20,15 @@
 package com.puppycrawl.tools.checkstyle.checks.annotation;
 
 import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.commons.lang3.ArrayUtils;
 
+import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
 import com.puppycrawl.tools.checkstyle.utils.AnnotationUtility;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 
 /**
  * <p>
@@ -38,7 +40,7 @@
  * </p>
  *
  * <p>
- * The {@link AbstractFormatCheck#setFormat warnings} property is a
+ * The {@link #setFormat warnings} property is a
  * regex pattern.  Any warning being suppressed matching
  * this pattern will be flagged.
  * </p>
@@ -47,7 +49,7 @@
  * By default, any warning specified will be disallowed on
  * all legal TokenTypes unless otherwise specified via
  * the
- * {@link com.puppycrawl.tools.checkstyle.api.Check#setTokens(String[]) tokens}
+ * {@link Check#setTokens(String[]) tokens}
  * property.
  *
  * Also, by default warnings that are empty strings or all
@@ -89,7 +91,7 @@
  * </pre>
  * @author Travis Schneeberger
  */
-public class SuppressWarningsCheck extends AbstractFormatCheck {
+public class SuppressWarningsCheck extends Check {
     /**
      * A key is pointing to the warning message text in "messages.properties"
      * file.
@@ -107,12 +109,20 @@
     private static final String FQ_SUPPRESS_WARNINGS =
         "java.lang." + SUPPRESS_WARNINGS;
 
+    /** The format string of the regexp. */
+    private String format = "^$|^\\s+$";
+
+    /** The regexp to match against. */
+    private Pattern regexp = Pattern.compile(format);
+
     /**
-     * Ctor that specifies the default for the format property
-     * as specified in the class javadocs.
+     * Set the format to the specified regular expression.
+     * @param format a {@code String} value
+     * @throws org.apache.commons.beanutils.ConversionException unable to parse format
      */
-    public SuppressWarningsCheck() {
-        super("^$|^\\s+$");
+    public final void setFormat(String format) {
+        this.format = format;
+        regexp = CommonUtils.createPattern(format);
     }
 
     @Override
@@ -234,7 +244,7 @@ private static DetailAST getSuppressWarnings(DetailAST ast) {
      */
     private void logMatch(final int lineNo,
         final int colNum, final String warningText) {
-        final Matcher matcher = getRegexp().matcher(warningText);
+        final Matcher matcher = regexp.matcher(warningText);
         if (matcher.matches()) {
             log(lineNo, colNum,
                     MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, warningText);
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
index e0da67bd91..fa2cf38de6 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java
@@ -254,7 +254,7 @@ private void insertVariable(DetailAST ast) {
         final Map<String, DetailAST> scope = scopeStack.peek().scope;
         final DetailAST astNode = ast.findFirstToken(TokenTypes.IDENT);
         scope.put(astNode.getText(), astNode);
-        if (ast.getType() != TokenTypes.PARAMETER_DEF && !isInitialized(astNode)) {
+        if (!isInitialized(astNode)) {
             scopeStack.peek().uninitializedVariables.add(astNode);
         }
     }
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
index 26184214af..bb9f6598a3 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -23,13 +23,15 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import java.util.regex.Pattern;
 
 import com.google.common.collect.Sets;
+import com.puppycrawl.tools.checkstyle.api.Check;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import com.puppycrawl.tools.checkstyle.checks.AbstractFormatCheck;
 import com.puppycrawl.tools.checkstyle.utils.CheckUtils;
+import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtils;
 
 /**
@@ -89,7 +91,7 @@
  * @author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
  * @author <a href="mailto:andreyselkin@gmail.com">Andrei Selkin</a>
  */
-public final class IllegalTypeCheck extends AbstractFormatCheck {
+public final class IllegalTypeCheck extends Check {
 
     /**
      * A key is pointing to the warning message text in "messages.properties"
@@ -97,8 +99,6 @@
      */
     public static final String MSG_KEY = "illegal.type";
 
-    /** Default value of pattern for illegal class name. */
-    private static final String DEFAULT_FORMAT = "^(.*[\\.])?Abstract.*$";
     /** Abstract classes legal by default. */
     private static final String[] DEFAULT_LEGAL_ABSTRACT_NAMES = {};
     /** Types illegal by default. */
@@ -132,6 +132,12 @@
     /** Check methods and fields with only corresponding modifiers. */
     private List<Integer> memberModifiers;
 
+    /** The format string of the regexp. */
+    private String format = "^(.*[\\.])?Abstract.*$";
+
+    /** The regexp to match against. */
+    private Pattern regexp = Pattern.compile(format);
+
     /**
      * Controls whether to validate abstract class names.
      */
@@ -139,12 +145,21 @@
 
     /** Creates new instance of the check. */
     public IllegalTypeCheck() {
-        super(DEFAULT_FORMAT);
         setIllegalClassNames(DEFAULT_ILLEGAL_TYPES);
         setLegalAbstractClassNames(DEFAULT_LEGAL_ABSTRACT_NAMES);
         setIgnoredMethodNames(DEFAULT_IGNORED_METHOD_NAMES);
     }
 
+    /**
+     * Set the format to the specified regular expression.
+     * @param format a {@code String} value
+     * @throws org.apache.commons.beanutils.ConversionException unable to parse format
+     */
+    public void setFormat(String format) {
+        this.format = format;
+        regexp = CommonUtils.createPattern(format);
+    }
+
     /**
      * Sets whether to validate abstract class names.
      * @param validateAbstractClassNames whether abstract class names must be ignored.
@@ -325,7 +340,7 @@ private boolean isMatchingClassName(String className) {
                 || illegalClassNames.contains(shortName)
                 || validateAbstractClassNames
                     && !legalAbstractClassNames.contains(className)
-                    && getRegexp().matcher(className).find();
+                    && regexp.matcher(className).find();
     }
 
     /**
diff --git a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
index c8ccf233f6..e2f388c918 100755
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java
@@ -37,7 +37,8 @@
  * </p>
  *
  * <p>
- * Import statements (lines matching pattern {@code ^import .*}) are not verified by this check.
+ * Package statements and import statements (lines matching pattern
+ * {@code ^(package|import) .*}), and are not verified by this check.
  * </p>
  * <p>
  * The default maximum allowable line length is 80 characters. To change the
@@ -84,8 +85,8 @@
     /** Default maximum number of columns in a line. */
     private static final int DEFAULT_MAX_COLUMNS = 80;
 
-    /** Pattern matching import and import static statements. */
-    private static final Pattern IMPORT_PATTERN = Pattern.compile("^import .*");
+    /** Patterns matching package, import, and import static statements. */
+    private static final Pattern IGNORE_PATTERN = Pattern.compile("^(package|import) .*");
 
     /** The maximum number of columns in a line. */
     private int max = DEFAULT_MAX_COLUMNS;
@@ -124,7 +125,7 @@ public void beginTree(DetailAST rootAST) {
             final int realLength = CommonUtils.lengthExpandedTabs(
                 line, line.length(), getTabWidth());
 
-            if (realLength > max && !IMPORT_PATTERN.matcher(line).find()
+            if (realLength > max && !IGNORE_PATTERN.matcher(line).find()
                 && !ignorePattern.matcher(line).find()) {
                 log(i + 1, MSG_KEY, max, realLength);
             }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
index 7e53d5dbb1..091e063206 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java
@@ -191,13 +191,6 @@ public void testAllCheckstyleModulesInCheckstyleConfig() throws Exception {
         final Set<String> configChecks = getCheckStyleChecksReferencedInConfig(CONFIG_PATH);
 
         for (String moduleName : getSimpleNames(getCheckstyleModules())) {
-            if ("SuppressionCommentFilter".equals(moduleName)
-                || "SeverityMatchFilter".equals(moduleName)
-                || "SuppressWithNearbyCommentFilter".equals(moduleName)
-                || "SuppressWarningsFilter".equals(moduleName)) {
-                continue;
-            }
-
             Assert.assertTrue("checkstyle_checks.xml is missing module: " + moduleName,
                     configChecks.contains(moduleName));
         }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
index 20b4e4b067..0ffb433da3 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java
@@ -109,11 +109,9 @@
     private static final Set<String> FILESET_PROPERTIES = getProperties(AbstractFileSetCheck.class);
 
     private static final List<String> UNDOCUMENTED_PROPERTIES = Arrays.asList(
-            "SuppressWarningsCheck.compileFlags",
             "SuppressWithNearbyCommentFilter.fileContents",
             "IllegalTokenTextCheck.compileFlags",
             "ReturnCountCheck.compileFlags",
-            "IllegalTypeCheck.compileFlags",
             "MutableExceptionCheck.compileFlags",
             "AbstractClassNameCheck.compileFlags",
             "ClassTypeParameterNameCheck.compileFlags",
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
new file mode 100755
index 0000000000..75ffd85d03
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheckTest.java
@@ -0,0 +1,289 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.annotation;
+
+import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_INCORRECT_STYLE;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_PARENS_MISSING;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_PARENS_PRESENT;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck.MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.beanutils.ConversionException;
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class AnnotationUseStyleCheckTest extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "annotation" + File.separator + filename);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testElementStyleValueOf() {
+        final AnnotationUseStyleCheck.ElementStyle option =
+            AnnotationUseStyleCheck.ElementStyle.valueOf("COMPACT");
+        assertEquals(AnnotationUseStyleCheck.ElementStyle.COMPACT, option);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testTrailingArrayCommaValueOf() {
+        final AnnotationUseStyleCheck.TrailingArrayComma option =
+            AnnotationUseStyleCheck.TrailingArrayComma.valueOf("ALWAYS");
+        assertEquals(AnnotationUseStyleCheck.TrailingArrayComma.ALWAYS, option);
+    }
+
+    /* Additional test for jacoco, since valueOf()
+     * is generated by javac and jacoco reports that
+     * valueOf() is uncovered.
+     */
+    @Test
+    public void testClosingParensValueOf() {
+        final AnnotationUseStyleCheck.ClosingParens option =
+            AnnotationUseStyleCheck.ClosingParens.valueOf("ALWAYS");
+        assertEquals(AnnotationUseStyleCheck.ClosingParens.ALWAYS, option);
+    }
+
+    /**
+     * Test that annotation parens are always present.
+     */
+    @Test
+    public void testParensAlways() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ALWAYS");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = {
+            "3: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_MISSING),
+            "18: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_MISSING),
+            "23: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_MISSING),
+        };
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    /**
+     * Test that annotation parens are never present.
+     */
+    @Test
+    public void testParensNever() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "NEVER");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = {
+            "13: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_PRESENT),
+            "30: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_PRESENT),
+            "33: " + getCheckMessage(MSG_KEY_ANNOTATION_PARENS_PRESENT),
+        };
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    @Test
+    public void testStyleExpanded() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "EXPANDED");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = {
+            "5: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "12: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "20: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "26: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "39: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "41: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+            "58: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "EXPANDED"),
+        };
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    @Test
+    public void testStyleCompact() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "COMPACT");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = {
+            "43: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT"),
+            "47: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT"),
+        };
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    @Test
+    public void testStyleCompactNoArray() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "COMPACT_NO_ARRAY");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = {
+            "5: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT_NO_ARRAY"),
+            "20: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT_NO_ARRAY"),
+            "41: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT_NO_ARRAY"),
+            "43: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT_NO_ARRAY"),
+            "47: " + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, "COMPACT_NO_ARRAY"),
+        };
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    @Test
+    public void testCommaAlwaysViolations() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "ALWAYS");
+        final String[] expected = {
+            "3:20: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "6:30: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "10:40: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "13:44: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "16:54: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "24:37: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "24:65: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "26:21: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "26:30: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "29:39: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "29:49: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "32:21: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+            "32:56: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),
+        };
+
+        verify(checkConfig, getPath("InputAnnotationUseNoTrailingComma.java"), expected);
+    }
+
+    @Test
+    public void testCommaAlwaysNoViolations() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "ALWAYS");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputAnnotationUseWithTrailingComma.java"), expected);
+    }
+
+    @Test
+    public void testCommaNeverViolations() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "NEVER");
+        final String[] expected = {
+            "9:32: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "13:42: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "16:46: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "19:56: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "27:38: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "27:67: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "33:39: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+            "33:50: " + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_PRESENT),
+        };
+
+        verify(checkConfig, getPath("InputAnnotationUseWithTrailingComma.java"), expected);
+    }
+
+    @Test
+    public void testCommaNeverNoViolations() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "NEVER");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputAnnotationUseNoTrailingComma.java"), expected);
+    }
+
+    @Test
+    public void testEverythingMixed() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "ignore");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputDifferentUseStyles.java"), expected);
+    }
+
+    @Test
+    public void testAnnotationsWithoutDefaultValues() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "NEVER");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputAnnotationsUseStyleParams.java"), expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final AnnotationUseStyleCheck constantNameCheckObj = new AnnotationUseStyleCheck();
+        final int[] actual = constantNameCheckObj.getAcceptableTokens();
+        final int[] expected = {TokenTypes.ANNOTATION };
+        Assert.assertArrayEquals(expected, actual);
+    }
+
+    @Test
+    public void testGetOption() throws Exception {
+        final AnnotationUseStyleCheck check = new AnnotationUseStyleCheck();
+        try {
+            check.setElementStyle("SHOULD_PRODUCE_ERROR");
+        }
+        catch (ConversionException ex) {
+            assertTrue(ex.getMessage().startsWith("unable to parse"));
+            return;
+        }
+
+        Assert.fail();
+    }
+
+    @Test
+    public void testStyleNotInList() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AnnotationUseStyleCheck.class);
+        checkConfig.addAttribute("closingParens", "ignore");
+        checkConfig.addAttribute("elementStyle", "COMPACT_NO_ARRAY");
+        checkConfig.addAttribute("trailingArrayComma", "ignore");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputAnnotationUseStyle.java"), expected);
+
+    }
+
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
new file mode 100755
index 0000000000..e36b839718
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheckTest.java
@@ -0,0 +1,172 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.annotation;
+
+import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_ANNOTATION_MISSING_DEPRECATED;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_JAVADOC_DUPLICATE_TAG;
+import static com.puppycrawl.tools.checkstyle.checks.annotation.MissingDeprecatedCheck.MSG_KEY_JAVADOC_MISSING;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class MissingDeprecatedCheckTest extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "annotation" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        final MissingDeprecatedCheck checkObj = new  MissingDeprecatedCheck();
+        final int[] expected = {
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ANNOTATION_DEF,
+            TokenTypes.ENUM_DEF,
+            TokenTypes.METHOD_DEF,
+            TokenTypes.CTOR_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ENUM_CONSTANT_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+        };
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    /**
+     * Tests that members that are only deprecated via javadoc are flagged.
+     */
+    @Test
+    public void testBadDeprecatedAnnotation() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "12: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "19: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "26: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "31: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "38: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "43: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "51: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "56: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+        };
+
+        verify(checkConfig, getPath("InputBadDeprecatedAnnotation.java"), expected);
+    }
+
+    /**
+     * Tests that members that are only deprecated via the annotation are flagged.
+     */
+    @Test
+    public void testBadDeprecatedJavadoc() throws Exception {
+
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = {
+            "5: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "11: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "16: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "23: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "29: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "38: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "40: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "48: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "55: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+        };
+
+        verify(checkConfig, getPath("InputBadDeprecatedJavadoc.java"), expected);
+    }
+
+    /**
+     * Tests various special deprecation conditions such as duplicate or empty tags.
+     */
+    @Test
+    public void testSpecialCaseDeprecated() throws Exception {
+
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = {
+            "5: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+            "12: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+            "14: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "17: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "19: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+            "24: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "32: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "33: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+            "33: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "42: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+            "42: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "50: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "51: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+        };
+
+        verify(checkConfig, getPath("InputSpecialCaseDeprecated.java"), expected);
+    }
+
+    /**
+     * Tests that good forms of deprecation are not flagged.
+     */
+    @Test
+    public void testGoodDeprecated() throws Exception {
+
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputGoodDeprecated.java"), expected);
+    }
+
+    @Test
+    public void testTwoInJavadocWithoutAnnotation() throws Exception {
+
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "8: " + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, "@deprecated"),
+            "12: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+        };
+
+        verify(checkConfig, getPath("InputMissingDeprecated1.java"), expected);
+    }
+
+    @Test
+    public void testEmptyJavadocLine() throws Exception {
+
+        final DefaultConfiguration checkConfig = createCheckConfig(MissingDeprecatedCheck.class);
+
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_KEY_JAVADOC_MISSING),
+            "11: " + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),
+        };
+
+        verify(checkConfig, getPath("InputMissingDeprecated2.java"), expected);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java
new file mode 100755
index 0000000000..a383b1cf3f
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationCheckTest.java
@@ -0,0 +1,85 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.annotation;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class PackageAnnotationCheckTest extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "annotation" + File.separator + filename);
+    }
+
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "annotation" + File.separator + filename);
+    }
+
+    /**
+     * This tests a package annotation that is in the package-info.java file.
+     */
+    @Test
+    public void testGoodPackageAnnotation() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(PackageAnnotationCheck.class);
+
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getNonCompilablePath("package-info.java"), expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final PackageAnnotationCheck constantNameCheckObj = new PackageAnnotationCheck();
+        final int[] actual = constantNameCheckObj.getAcceptableTokens();
+        final int[] expected = {TokenTypes.PACKAGE_DEF };
+        Assert.assertArrayEquals(expected, actual);
+    }
+
+    @Test
+    public void testAnnotationNotInPackageInfo() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(PackageAnnotationCheck.class);
+
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+
+        verify(checkConfig, getPath("InputPackageAnnotation.java"), expected);
+    }
+
+    @Test
+    public void testWithoutAnnotation() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(PackageAnnotationCheck.class);
+
+        final String[] expected = {
+            "0: Package annotations must be in the package-info.java info.",
+        };
+
+        verify(checkConfig, getNonCompilablePath("InputPackageAnnotation2.java"), expected);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
new file mode 100755
index 0000000000..f1d287b774
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheckTest.java
@@ -0,0 +1,119 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.imports;
+
+import static com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class AvoidStarImportCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "imports" + File.separator + filename);
+    }
+
+    @Test
+    public void testDefaultOperation()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStarImportCheck.class);
+        final String[] expected = {
+            "7: " + getCheckMessage(MSG_KEY, "com.puppycrawl.tools.checkstyle.checks.imports.*"),
+            "9: " + getCheckMessage(MSG_KEY, "java.io.*"),
+            "10: " + getCheckMessage(MSG_KEY, "java.lang.*"),
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.*"),
+        };
+
+        verify(checkConfig, getPath("InputAvoidStarImport.java"),
+                expected);
+    }
+
+    @Test
+    public void testExcludes()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStarImportCheck.class);
+        checkConfig.addAttribute("excludes",
+            "java.io,java.lang,javax.swing.WindowConstants.*, javax.swing.WindowConstants");
+        // allow the java.io/java.lang,javax.swing.WindowConstants star imports
+        final String[] expected2 = {
+            "7: " + getCheckMessage(MSG_KEY, "com.puppycrawl.tools.checkstyle.checks.imports.*"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.*"),
+        };
+        verify(checkConfig, getPath("InputAvoidStarImport.java"),
+                expected2);
+    }
+
+    @Test
+    public void testAllowClassImports() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AvoidStarImportCheck.class);
+        checkConfig.addAttribute("allowClassImports", "true");
+        // allow all class star imports
+        final String[] expected2 = {
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.*"), };
+        verify(checkConfig, getPath("InputAvoidStarImport.java"), expected2);
+    }
+
+    @Test
+    public void testAllowStaticMemberImports() throws Exception {
+        final DefaultConfiguration checkConfig = createCheckConfig(AvoidStarImportCheck.class);
+        checkConfig.addAttribute("allowStaticMemberImports", "true");
+        // allow all static star imports
+        final String[] expected2 = {
+            "7: " + getCheckMessage(MSG_KEY, "com.puppycrawl.tools.checkstyle.checks.imports.*"),
+            "9: " + getCheckMessage(MSG_KEY, "java.io.*"),
+            "10: " + getCheckMessage(MSG_KEY, "java.lang.*"),
+        };
+        verify(checkConfig, getPath("InputAvoidStarImport.java"), expected2);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final AvoidStarImportCheck testCheckObject =
+                new AvoidStarImportCheck();
+        final int[] actual = testCheckObject.getAcceptableTokens();
+        final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+        assertArrayEquals(expected, actual);
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        final AvoidStarImportCheck testCheckObject =
+                new AvoidStarImportCheck();
+        final int[] actual = testCheckObject.getRequiredTokens();
+        final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};
+
+        assertArrayEquals(expected, actual);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
new file mode 100755
index 0000000000..2db80505d9
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheckTest.java
@@ -0,0 +1,175 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.imports;
+
+import static com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck.MSG_KEY;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class AvoidStaticImportCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "imports" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        final AvoidStaticImportCheck checkObj = new AvoidStaticImportCheck();
+        final int[] expected = {TokenTypes.STATIC_IMPORT};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testDefaultOperation()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStaticImportCheck.class);
+        final String[] expected = {
+            "23: " + getCheckMessage(MSG_KEY, "java.io.File.listRoots"),
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "27: " + getCheckMessage(MSG_KEY, "java.io.File.createTempFile"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.pathSeparator"),
+            "29: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass"),
+            "30: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass.one"),
+        };
+
+        verify(checkConfig, getPath("InputAvoidStaticImport.java"), expected);
+    }
+
+    @Test
+    public void testStarExcludes()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStaticImportCheck.class);
+        checkConfig.addAttribute("excludes", "java.io.File.*,sun.net.ftpclient.FtpClient.*");
+        // allow the "java.io.File.*" AND "sun.net.ftpclient.FtpClient.*" star imports
+        final String[] expected = {
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "29: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass"),
+            "30: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass.one"),
+        };
+        verify(checkConfig, getPath("InputAvoidStaticImport.java"), expected);
+    }
+
+    @Test
+    public void testMemberExcludes()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStaticImportCheck.class);
+        checkConfig.addAttribute("excludes", "java.io.File.listRoots");
+        // allow the java.io.File.listRoots member imports
+        final String[] expected = {
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "27: " + getCheckMessage(MSG_KEY, "java.io.File.createTempFile"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.pathSeparator"),
+            "29: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass"),
+            "30: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass.one"),
+        };
+        verify(checkConfig, getPath("InputAvoidStaticImport.java"), expected);
+    }
+
+    @Test
+    public void testBogusMemberExcludes()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStaticImportCheck.class);
+
+        // should NOT mask anything
+        checkConfig.addAttribute(
+            "excludes",
+            "java.io.File.listRoots.listRoots, javax.swing.WindowConstants, javax.swing.*,"
+            + "sun.net.ftpclient.FtpClient.*FtpClient, sun.net.ftpclient.FtpClientjunk,"
+            + " java.io.File.listRootsmorejunk");
+        final String[] expected = {
+            "23: " + getCheckMessage(MSG_KEY, "java.io.File.listRoots"),
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "27: " + getCheckMessage(MSG_KEY, "java.io.File.createTempFile"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.pathSeparator"),
+            "29: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass"),
+            "30: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass.one"),
+        };
+        verify(checkConfig, getPath("InputAvoidStaticImport.java"), expected);
+    }
+
+    @Test
+    public void testInnerClassMemberExcludesStar()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(AvoidStaticImportCheck.class);
+
+        // should mask com.puppycrawl.tools.checkstyle.imports.InputAvoidStaticImportNestedClass.
+        // InnerClass.one
+        checkConfig.addAttribute(
+            "excludes",
+            "com.puppycrawl.tools.checkstyle.checks.imports."
+                + "InputAvoidStaticImportNestedClass.InnerClass.*");
+        final String[] expected = {
+            "23: " + getCheckMessage(MSG_KEY, "java.io.File.listRoots"),
+            "25: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "26: " + getCheckMessage(MSG_KEY, "javax.swing.WindowConstants.*"),
+            "27: " + getCheckMessage(MSG_KEY, "java.io.File.createTempFile"),
+            "28: " + getCheckMessage(MSG_KEY, "java.io.File.pathSeparator"),
+            "29: " + getCheckMessage(MSG_KEY,
+                "com.puppycrawl.tools.checkstyle.checks.imports."
+                    + "InputAvoidStaticImportNestedClass.InnerClass"),
+        };
+        verify(checkConfig, getPath("InputAvoidStaticImport.java"), expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final AvoidStaticImportCheck testCheckObject =
+                new AvoidStaticImportCheck();
+        final int[] actual = testCheckObject.getAcceptableTokens();
+        final int[] expected = {TokenTypes.STATIC_IMPORT};
+
+        assertArrayEquals(expected, actual);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
new file mode 100755
index 0000000000..3f08002ec8
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheckTest.java
@@ -0,0 +1,190 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.modifier;
+
+import static com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck.MSG_KEY;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class RedundantModifierCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "modifier" + File.separator + filename);
+    }
+
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "modifier" + File.separator + filename);
+    }
+
+    @Test
+    public void testClassesInsideOfInterfaces() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "11:5: " + getCheckMessage(MSG_KEY, "static"),
+            "17:5: " + getCheckMessage(MSG_KEY, "public"),
+            "20:5: " + getCheckMessage(MSG_KEY, "public"),
+            "26:5: " + getCheckMessage(MSG_KEY, "static"),
+        };
+        verify(checkConfig, getPath("InputModifierClassesInsideOfInterfaces.java"), expected);
+    }
+
+    @Test
+    public void testIt() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "54:12: " + getCheckMessage(MSG_KEY, "static"),
+            "57:9: " + getCheckMessage(MSG_KEY, "public"),
+            "63:9: " + getCheckMessage(MSG_KEY, "abstract"),
+            "66:9: " + getCheckMessage(MSG_KEY, "public"),
+            //"69:9: Redundant 'abstract' modifier.",
+            "72:9: " + getCheckMessage(MSG_KEY, "final"),
+            "79:13: " + getCheckMessage(MSG_KEY, "final"),
+            "88:12: " + getCheckMessage(MSG_KEY, "final"),
+            "99:1: " + getCheckMessage(MSG_KEY, "abstract"),
+            "116:5: " + getCheckMessage(MSG_KEY, "public"),
+            "117:5: " + getCheckMessage(MSG_KEY, "final"),
+            "118:5: " + getCheckMessage(MSG_KEY, "static"),
+            "120:5: " + getCheckMessage(MSG_KEY, "public"),
+            "121:5: " + getCheckMessage(MSG_KEY, "abstract"),
+        };
+        verify(checkConfig, getPath("InputModifier.java"), expected);
+    }
+
+    @Test
+    public void testStaticMethodInInterface()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getNonCompilablePath("InputStaticModifierInInterface.java"), expected);
+    }
+
+    @Test
+    public void testFinalInInterface()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "3:9: " + getCheckMessage(MSG_KEY, "final"),
+        };
+        verify(checkConfig, getNonCompilablePath("InputFinalInDefaultMethods.java"), expected);
+    }
+
+    @Test
+    public void testEnumConstructorIsImplicitlyPrivate() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "10:5: " + getCheckMessage(MSG_KEY, "private"),
+        };
+        verify(checkConfig, getPath("InputRedundantConstructorModifier.java"), expected);
+    }
+
+    @Test
+    public void testInnerTypeInInterfaceIsImplicitlyStatic() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "8:5: " + getCheckMessage(MSG_KEY, "static"),
+            "12:5: " + getCheckMessage(MSG_KEY, "static"),
+        };
+        verify(checkConfig, getPath("InputRedundantStaticModifierInInnerTypeOfInterface.java"),
+            expected);
+    }
+
+    @Test
+    public void testNotPublicClassConstructorHasNotPublicModifier() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+
+        final String[] expected = {
+            "18:5: "  + getCheckMessage(MSG_KEY, "public"),
+        };
+        verify(checkConfig, getPath("InputRedundantPublicModifierInNotPublicClass.java"), expected);
+    }
+
+    @Test
+    public void testNestedClassConsInPublicInterfaceHasValidPublicModifier() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+
+        final String[] expected = {
+            "18:33: " + getCheckMessage(MSG_KEY, "public"),
+            "22:41: " + getCheckMessage(MSG_KEY, "public"),
+            "33:33: " + getCheckMessage(MSG_KEY, "public"),
+            "41:33: " + getCheckMessage(MSG_KEY, "public"),
+        };
+
+        verify(checkConfig,
+                getPath("InputNestedClassInPublicInterfaceRedundantModifiers.java"),
+                expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
+        final int[] actual = redundantModifierCheckObj.getAcceptableTokens();
+        final int[] expected = {
+            TokenTypes.METHOD_DEF,
+            TokenTypes.VARIABLE_DEF,
+            TokenTypes.ANNOTATION_FIELD_DEF,
+            TokenTypes.INTERFACE_DEF,
+            TokenTypes.CTOR_DEF,
+            TokenTypes.CLASS_DEF,
+            TokenTypes.ENUM_DEF,
+        };
+        Assert.assertArrayEquals(expected, actual);
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        final RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();
+        final int[] actual = redundantModifierCheckObj.getRequiredTokens();
+        final int[] expected = ArrayUtils.EMPTY_INT_ARRAY;
+        Assert.assertArrayEquals(expected, actual);
+    }
+
+    @Test
+    public void testNestedStaticEnum() throws Exception {
+        final DefaultConfiguration checkConfig =
+                createCheckConfig(RedundantModifierCheck.class);
+        final String[] expected = {
+            "4:5: " + getCheckMessage(MSG_KEY, "static"),
+            "8:9: " + getCheckMessage(MSG_KEY, "static"),
+            "12:9: " + getCheckMessage(MSG_KEY, "static"),
+        };
+        verify(checkConfig, getPath("InputRedundantStaticModifierInNestedEnum.java"), expected);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
new file mode 100755
index 0000000000..5de40a3eb5
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ClassTypeParameterNameCheckTest.java
@@ -0,0 +1,177 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.naming;
+
+import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class ClassTypeParameterNameCheckTest
+    extends BaseCheckTestSupport {
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "naming" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetInterfaceRequiredTokens() {
+        final InterfaceTypeParameterNameCheck checkObj =
+            new InterfaceTypeParameterNameCheck();
+        final int[] expected = {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetMethodRequiredTokens() {
+        final MethodTypeParameterNameCheck checkObj =
+            new MethodTypeParameterNameCheck();
+        final int[] expected = {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testGetClassRequiredTokens() {
+        final ClassTypeParameterNameCheck checkObj =
+            new ClassTypeParameterNameCheck();
+        final int[] expected = {TokenTypes.TYPE_PARAMETER};
+        assertArrayEquals(expected, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testClassDefault()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(ClassTypeParameterNameCheck.class);
+
+        final String pattern = "^[A-Z]$";
+
+        final String[] expected = {
+            "5:38: " + getCheckMessage(MSG_INVALID_PATTERN, "t", pattern),
+            "13:14: " + getCheckMessage(MSG_INVALID_PATTERN, "foo", pattern),
+            "27:24: " + getCheckMessage(MSG_INVALID_PATTERN, "foo", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testMethodDefault()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(MethodTypeParameterNameCheck.class);
+
+        final String pattern = "^[A-Z]$";
+
+        final String[] expected = {
+            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
+            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
+            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
+            "23:6: " + getCheckMessage(MSG_INVALID_PATTERN, "foo", pattern),
+            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testInterfaceDefault()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(InterfaceTypeParameterNameCheck.class);
+
+        final String pattern = "^[A-Z]$";
+
+        final String[] expected = {
+            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testClassFooName()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(ClassTypeParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^foo$");
+
+        final String pattern = "^foo$";
+
+        final String[] expected = {
+            "5:38: " + getCheckMessage(MSG_INVALID_PATTERN, "t", pattern),
+            "33:18: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testMethodFooName()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(MethodTypeParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^foo$");
+
+        final String pattern = "^foo$";
+
+        final String[] expected = {
+            "7:13: " + getCheckMessage(MSG_INVALID_PATTERN, "TT", pattern),
+            "9:6: " + getCheckMessage(MSG_INVALID_PATTERN, "e_e", pattern),
+            "19:6: " + getCheckMessage(MSG_INVALID_PATTERN, "Tfo$o2T", pattern),
+            "28:10: " + getCheckMessage(MSG_INVALID_PATTERN, "_fo", pattern),
+            "35:6: " + getCheckMessage(MSG_INVALID_PATTERN, "E", pattern),
+            "37:14: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
+            //"40:14: Name 'EE' must match pattern '^foo$'.",
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testInterfaceFooName()
+        throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(InterfaceTypeParameterNameCheck.class);
+        checkConfig.addAttribute("format", "^foo$");
+
+        final String pattern = "^foo$";
+
+        final String[] expected = {
+            "48:15: " + getCheckMessage(MSG_INVALID_PATTERN, "Input", pattern),
+            "52:24: " + getCheckMessage(MSG_INVALID_PATTERN, "T", pattern),
+        };
+        verify(checkConfig, getPath("InputTypeParameterName.java"), expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final AbstractTypeParameterNameCheck typeParameterNameCheckObj =
+            new ClassTypeParameterNameCheck();
+        final int[] actual = typeParameterNameCheckObj.getAcceptableTokens();
+        final int[] expected = {
+            TokenTypes.TYPE_PARAMETER,
+        };
+        assertArrayEquals(expected, actual);
+    }
+}
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
index 2e0f2063ff..ec447e8f77 100755
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheckTest.java
@@ -38,6 +38,12 @@ protected String getPath(String filename) throws IOException {
                 + "sizes" + File.separator + filename);
     }
 
+    @Override
+    protected String getNonCompilablePath(String filename) throws IOException {
+        return super.getNonCompilablePath("checks" + File.separator
+                + "sizes" + File.separator + filename);
+    }
+
     @Test
     public void testGetRequiredTokens() {
         final LineLengthCheck checkObj = new LineLengthCheck();
@@ -89,4 +95,15 @@ public void shouldNotLogLongImportStatements() throws Exception {
         };
         verify(checkConfig, getPath("InputLongImportStatements.java"), expected);
     }
+
+    @Test
+    public void shouldNotLogLongPackageStatements() throws Exception {
+        final DefaultConfiguration checkConfig =
+            createCheckConfig(LineLengthCheck.class);
+        checkConfig.addAttribute("max", "80");
+        final String[] expected = {
+            "6: " + getCheckMessage(MSG_KEY, 80, 88),
+        };
+        verify(checkConfig, getNonCompilablePath("InputLongPackageStatement.java"), expected);
+    }
 }
diff --git a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
new file mode 100755
index 0000000000..4305a37c09
--- /dev/null
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheckTest.java
@@ -0,0 +1,289 @@
+////////////////////////////////////////////////////////////////////////////////
+// checkstyle: Checks Java source code for adherence to a set of rules.
+// Copyright (C) 2001-2015 the original author or authors.
+//
+// This library is free software; you can redistribute it and/or
+// modify it under the terms of the GNU Lesser General Public
+// License as published by the Free Software Foundation; either
+// version 2.1 of the License, or (at your option) any later version.
+//
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+// Lesser General Public License for more details.
+//
+// You should have received a copy of the GNU Lesser General Public
+// License along with this library; if not, write to the Free Software
+// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+////////////////////////////////////////////////////////////////////////////////
+
+package com.puppycrawl.tools.checkstyle.checks.whitespace;
+
+import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck.WS_NOT_FOLLOWED;
+import static com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck.WS_NOT_PRECEDED;
+import static org.junit.Assert.assertArrayEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.Before;
+import org.junit.Test;
+
+import com.puppycrawl.tools.checkstyle.BaseCheckTestSupport;
+import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
+import com.puppycrawl.tools.checkstyle.api.TokenTypes;
+
+public class WhitespaceAroundCheckTest
+    extends BaseCheckTestSupport {
+    private DefaultConfiguration checkConfig;
+
+    @Before
+    public void setUp() {
+        checkConfig = createCheckConfig(WhitespaceAroundCheck.class);
+    }
+
+    @Override
+    protected String getPath(String filename) throws IOException {
+        return super.getPath("checks" + File.separator
+                + "whitespace" + File.separator + filename);
+    }
+
+    @Test
+    public void testGetRequiredTokens() {
+        final WhitespaceAroundCheck checkObj = new WhitespaceAroundCheck();
+        assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, checkObj.getRequiredTokens());
+    }
+
+    @Test
+    public void testIt()
+        throws Exception {
+        final String[] expected = {
+            "16:22: " + getCheckMessage(WS_NOT_PRECEDED, "="),
+            "16:23: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "18:24: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "26:14: " + getCheckMessage(WS_NOT_PRECEDED, "="),
+            "27:10: " + getCheckMessage(WS_NOT_PRECEDED, "="),
+            "27:11: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "28:10: " + getCheckMessage(WS_NOT_PRECEDED, "+="),
+            "28:12: " + getCheckMessage(WS_NOT_FOLLOWED, "+="),
+            "29:13: " + getCheckMessage(WS_NOT_FOLLOWED, "-="),
+            "37:21: " + getCheckMessage(WS_NOT_FOLLOWED, "synchronized"),
+            "39:12: " + getCheckMessage(WS_NOT_FOLLOWED, "try"),
+            "39:12: " + getCheckMessage(WS_NOT_PRECEDED, "{"),
+            "41:14: " + getCheckMessage(WS_NOT_FOLLOWED, "catch"),
+            "41:34: " + getCheckMessage(WS_NOT_PRECEDED, "{"),
+            "58:11: " + getCheckMessage(WS_NOT_FOLLOWED, "if"),
+            "76:19: " + getCheckMessage(WS_NOT_FOLLOWED, "return"),
+            "97:29: " + getCheckMessage(WS_NOT_PRECEDED, "?"),
+            "97:30: " + getCheckMessage(WS_NOT_FOLLOWED, "?"),
+            "97:34: " + getCheckMessage(WS_NOT_PRECEDED, ":"),
+            "97:35: " + getCheckMessage(WS_NOT_FOLLOWED, ":"),
+            "98:15: " + getCheckMessage(WS_NOT_PRECEDED, "=="),
+            "98:17: " + getCheckMessage(WS_NOT_FOLLOWED, "=="),
+            "104:20: " + getCheckMessage(WS_NOT_FOLLOWED, "*"),
+            "104:21: " + getCheckMessage(WS_NOT_PRECEDED, "*"),
+            "119:18: " + getCheckMessage(WS_NOT_PRECEDED, "%"),
+            "120:20: " + getCheckMessage(WS_NOT_FOLLOWED, "%"),
+            "121:18: " + getCheckMessage(WS_NOT_PRECEDED, "%"),
+            "121:19: " + getCheckMessage(WS_NOT_FOLLOWED, "%"),
+            "123:18: " + getCheckMessage(WS_NOT_PRECEDED, "/"),
+            "124:20: " + getCheckMessage(WS_NOT_FOLLOWED, "/"),
+            "125:18: " + getCheckMessage(WS_NOT_PRECEDED, "/"),
+            "125:19: " + getCheckMessage(WS_NOT_FOLLOWED, "/"),
+            "153:15: " + getCheckMessage(WS_NOT_FOLLOWED, "assert"),
+            "156:20: " + getCheckMessage(WS_NOT_PRECEDED, ":"),
+            "156:21: " + getCheckMessage(WS_NOT_FOLLOWED, ":"),
+            "262:14: " + getCheckMessage(WS_NOT_FOLLOWED, "}"),
+        };
+        verify(checkConfig, getPath("InputWhitespace.java"), expected);
+    }
+
+    @Test
+    public void testIt2()
+        throws Exception {
+        final String[] expected = {
+            "153:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "154:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "155:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "156:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "157:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+            "158:27: " + getCheckMessage(WS_NOT_FOLLOWED, "="),
+        };
+        verify(checkConfig, getPath("InputSimple.java"), expected);
+    }
+
+    @Test
+    public void testIt3()
+        throws Exception {
+        final String[] expected = {
+            "37:14: " + getCheckMessage(WS_NOT_FOLLOWED, "while"),
+            "54:12: " + getCheckMessage(WS_NOT_FOLLOWED, "for"),
+            // + ":58:23: ';' is not followed by whitespace.",
+            //  + ":58:29: ';' is not followed by whitespace.",
+            "111:27: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "111:27: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "114:40: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "114:40: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+        };
+        verify(checkConfig, getPath("InputBraces.java"), expected);
+    }
+
+    @Test
+    public void testIt4()
+        throws Exception {
+        checkConfig.addAttribute("allowEmptyMethods", "true");
+        checkConfig.addAttribute("allowEmptyConstructors", "true");
+        final String[] expected = {
+            "37:14: " + getCheckMessage(WS_NOT_FOLLOWED, "while"),
+            "54:12: " + getCheckMessage(WS_NOT_FOLLOWED, "for"),
+        };
+        verify(checkConfig, getPath("InputBraces.java"), expected);
+    }
+
+    @Test
+    public void testGenericsTokensAreFlagged()
+        throws Exception {
+        final String[] expected = {
+            "6:67: " + getCheckMessage(WS_NOT_PRECEDED, "&"),
+            "6:68: " + getCheckMessage(WS_NOT_FOLLOWED, "&"),
+        };
+        verify(checkConfig, getPath("InputGenerics.java"), expected);
+    }
+
+    @Test
+    public void test1322879And1649038() throws Exception {
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputWhitespaceAround.java"),
+               expected);
+    }
+
+    @Test
+    public void testIgnoreEnhancedForColon() throws Exception {
+        checkConfig.addAttribute("ignoreEnhancedForColon", "false");
+        final String[] expected = {
+            "19:20: " + getCheckMessage(WS_NOT_PRECEDED, ":"),
+        };
+        verify(checkConfig, getPath("InputWhitespaceAround.java"),
+               expected);
+    }
+
+    @Test
+    public void testEmptyTypes() throws Exception {
+        checkConfig.addAttribute("allowEmptyTypes", "true");
+        final String[] expected = {
+            "29:95: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "29:95: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "30:33: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "30:33: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "31:21: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "31:21: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+        };
+        verify(checkConfig, getPath("InputEmptyTypesAndCycles.java"),
+               expected);
+    }
+
+    @Test
+    public void testEmptyLoops() throws Exception {
+        checkConfig.addAttribute("allowEmptyLoops", "true");
+        final String[] expected = {
+            "40:65: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "40:65: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "42:17: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "42:17: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "44:20: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "44:20: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "50:44: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "50:44: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+            "60:18: " + getCheckMessage(WS_NOT_FOLLOWED, "{"),
+            "60:18: " + getCheckMessage(WS_NOT_PRECEDED, "}"),
+        };
+        verify(checkConfig, getPath("InputEmptyTypesAndCycles.java"),
+               expected);
+    }
+
+    @Test
+    public void testSwitchWhitespaceAround() throws Exception {
+        final String[] expected = {
+            "6:15: " + getCheckMessage(WS_NOT_FOLLOWED, "switch"),
+        };
+        verify(checkConfig, getPath("InputSwitchWhitespaceAround.java"), expected);
+    }
+
+    @Test
+    public void testDoWhileWhitespaceAround() throws Exception {
+        final String[] expected = {
+            "9:16: " + getCheckMessage(WS_NOT_FOLLOWED, "while"),
+        };
+        verify(checkConfig, getPath("InputDoWhileWhitespaceAround.java"), expected);
+    }
+
+    @Test
+    public void allowEmptyMethods() throws Exception {
+        checkConfig.addAttribute("allowEmptyMethods", "true");
+        final String[] expected = ArrayUtils.EMPTY_STRING_ARRAY;
+        verify(checkConfig, getPath("InputWhitespaceAround.java"), expected);
+    }
+
+    @Test
+    public void testGetAcceptableTokens() {
+        final WhitespaceAroundCheck whitespaceAroundCheckObj = new WhitespaceAroundCheck();
+        final int[] actual = whitespaceAroundCheckObj.getAcceptableTokens();
+        final int[] expected = {
+            TokenTypes.ASSIGN,
+            TokenTypes.BAND,
+            TokenTypes.BAND_ASSIGN,
+            TokenTypes.BOR,
+            TokenTypes.BOR_ASSIGN,
+            TokenTypes.BSR,
+            TokenTypes.BSR_ASSIGN,
+            TokenTypes.BXOR,
+            TokenTypes.BXOR_ASSIGN,
+            TokenTypes.COLON,
+            TokenTypes.DIV,
+            TokenTypes.DIV_ASSIGN,
+            TokenTypes.DO_WHILE,
+            TokenTypes.EQUAL,
+            TokenTypes.GE,
+            TokenTypes.GT,
+            TokenTypes.LAND,
+            TokenTypes.LCURLY,
+            TokenTypes.LE,
+            TokenTypes.LITERAL_CATCH,
+            TokenTypes.LITERAL_DO,
+            TokenTypes.LITERAL_ELSE,
+            TokenTypes.LITERAL_FINALLY,
+            TokenTypes.LITERAL_FOR,
+            TokenTypes.LITERAL_IF,
+            TokenTypes.LITERAL_RETURN,
+            TokenTypes.LITERAL_SWITCH,
+            TokenTypes.LITERAL_SYNCHRONIZED,
+            TokenTypes.LITERAL_TRY,
+            TokenTypes.LITERAL_WHILE,
+            TokenTypes.LOR,
+            TokenTypes.LT,
+            TokenTypes.MINUS,
+            TokenTypes.MINUS_ASSIGN,
+            TokenTypes.MOD,
+            TokenTypes.MOD_ASSIGN,
+            TokenTypes.NOT_EQUAL,
+            TokenTypes.PLUS,
+            TokenTypes.PLUS_ASSIGN,
+            TokenTypes.QUESTION,
+            TokenTypes.RCURLY,
+            TokenTypes.SL,
+            TokenTypes.SLIST,
+            TokenTypes.SL_ASSIGN,
+            TokenTypes.SR,
+            TokenTypes.SR_ASSIGN,
+            TokenTypes.STAR,
+            TokenTypes.STAR_ASSIGN,
+            TokenTypes.LITERAL_ASSERT,
+            TokenTypes.TYPE_EXTENSION_AND,
+            TokenTypes.WILDCARD_TYPE,
+            TokenTypes.GENERIC_START,
+            TokenTypes.GENERIC_END,
+        };
+        assertArrayEquals(expected, actual);
+    }
+}
diff --git a/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java
new file mode 100755
index 0000000000..a14b0640f8
--- /dev/null
+++ b/src/test/resources-noncompilable/com/puppycrawl/tools/checkstyle/checks/sizes/InputLongPackageStatement.java
@@ -0,0 +1,8 @@
+package com.nameofcompany.nameofdivision.nameofproject.systemtests.parallel.areaoftest.featuretested.flowtested;
+
+public class InputLongImportStatements {
+    @Override
+    public String toString() {
+        return "This is very long line that should be logged because it is not package";
+    }
+}
diff --git a/src/xdocs/config_filters.xml b/src/xdocs/config_filters.xml
index 12f29003ff..32832a2bca 100755
--- a/src/xdocs/config_filters.xml
+++ b/src/xdocs/config_filters.xml
@@ -73,6 +73,12 @@
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L384-L390">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -528,6 +534,12 @@ HashSet hashSet; // Warning here: Declaring variables, return values or paramete
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L401-L409">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -713,6 +725,12 @@ public static final int [] array; // @cs.suppress ConstantName | NoWhitespaceAft
             </source>
         </subsection>
         <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L391-L400">
+            Checkstyle Style</a>
+          </li>
+        </ul>
         </subsection>
         <subsection name="Package">
             <p> com.puppycrawl.tools.checkstyle.filters </p>
@@ -774,6 +792,12 @@ private int [] ARRAY; // should NOT fail MemberNameCheck and NoWhitespaceAfterCh
           </source>
       </subsection>
       <subsection name="Example of Usage">
+        <ul>
+          <li>
+            <a href="https://github.com/checkstyle/checkstyle/blob/master/config/checkstyle_checks.xml#L383">
+            Checkstyle Style</a>
+          </li>
+        </ul>
       </subsection>
       <subsection name="Package">
         <p> com.puppycrawl.tools.checkstyle.filters </p>
diff --git a/src/xdocs/config_sizes.xml b/src/xdocs/config_sizes.xml
index 64bd09a1ae..9936f6ed08 100755
--- a/src/xdocs/config_sizes.xml
+++ b/src/xdocs/config_sizes.xml
@@ -245,7 +245,7 @@
             property <code>tabWidth</code> for <code>LineLength</code> alone.
           </li>
           <li>
-            Import statements (lines matching pattern <code>^import .*</code>) are not verified by
+            Package and import statements (lines matching pattern <code>^(package|import) .*</code>) are not verified by
             this check.
           </li>
         </ul>
