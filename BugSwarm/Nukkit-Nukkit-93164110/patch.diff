diff --git a/src/main/java/cn/nukkit/Nukkit.java b/src/main/java/cn/nukkit/Nukkit.java
index 88f1cf5a0a..2fb2ae72d0 100755
--- a/src/main/java/cn/nukkit/Nukkit.java
+++ b/src/main/java/cn/nukkit/Nukkit.java
@@ -32,7 +32,7 @@
     public final static String PATH = System.getProperty("user.dir") + "/";
     public final static String DATA_PATH = System.getProperty("user.dir") + "/";
     public final static String PLUGIN_PATH = DATA_PATH + "plugins";
-    public final static Long START_TIME = System.currentTimeMillis();
+    public static long START_TIME = System.currentTimeMillis();
     public static boolean ANSI = true;
     public static boolean shortTitle = false;
     public static int DEBUG = 1;
@@ -60,6 +60,7 @@ public static void main(String[] args) {
             }
             Server server = new Server(logger, PATH, DATA_PATH, PLUGIN_PATH);
         } catch (Exception e) {
+            e.printStackTrace();
             logger.logException(e);
         }
 
diff --git a/src/main/java/cn/nukkit/Server.java b/src/main/java/cn/nukkit/Server.java
index a46a723ec3..5f02bfed8b 100755
--- a/src/main/java/cn/nukkit/Server.java
+++ b/src/main/java/cn/nukkit/Server.java
@@ -55,10 +55,7 @@
 import cn.nukkit.tile.*;
 import cn.nukkit.utils.*;
 
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
+import java.io.*;
 import java.nio.ByteOrder;
 import java.util.*;
 
@@ -190,18 +187,46 @@ public Server(MainLogger logger, final String filePath, String dataPath, String
         this.pluginPath = new File(pluginPath).getAbsolutePath() + "/";
 
         this.console = new CommandReader();
-
         //todo: VersionString 现在不必要
 
-        this.logger.info("Loading " + TextFormat.GREEN + "nukkit.yml" + TextFormat.WHITE + "...");
         if (!new File(this.dataPath + "nukkit.yml").exists()) {
+            this.getLogger().info(TextFormat.GREEN + "Welcome! Please choose a language first!");
             try {
-                Utils.writeFile(this.dataPath + "nukkit.yml", this.getClass().getClassLoader().getResourceAsStream("nukkit.yml"));
+                String[] lines = Utils.readFile(this.getClass().getClassLoader().getResourceAsStream("lang/language.list")).split("\n");
+                for (String line : lines) {
+                    this.getLogger().info(line);
+                }
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+
+            String fallback = "eng";
+            String language = null;
+            while (language == null) {
+                String lang = this.console.readLine();
+                InputStream conf = this.getClass().getClassLoader().getResourceAsStream("lang/" + lang + "/lang.ini");
+                if (conf != null) {
+                    language = lang;
+                }
+            }
 
+            InputStream advacedConf = this.getClass().getClassLoader().getResourceAsStream("lang/" + language + "/nukkit.yml");
+            if (advacedConf == null) {
+                advacedConf = this.getClass().getClassLoader().getResourceAsStream("lang/" + fallback + "/nukkit.yml");
+            }
+
+            try {
+                Utils.writeFile(this.dataPath + "nukkit.yml", advacedConf);
             } catch (IOException e) {
-                e.printStackTrace();
+                throw new RuntimeException(e);
             }
+
+            Nukkit.START_TIME = System.currentTimeMillis();//reset it!
         }
+
+        this.console.start();
+
+        this.logger.info("Loading " + TextFormat.GREEN + "nukkit.yml" + TextFormat.WHITE + "...");
         this.config = new Config(this.dataPath + "nukkit.yml", Config.YAML);
 
         this.logger.info("Loading " + TextFormat.GREEN + "server properties" + TextFormat.WHITE + "...");
diff --git a/src/main/java/cn/nukkit/command/CommandReader.java b/src/main/java/cn/nukkit/command/CommandReader.java
index 8d243c4e3c..f433cc862d 100755
--- a/src/main/java/cn/nukkit/command/CommandReader.java
+++ b/src/main/java/cn/nukkit/command/CommandReader.java
@@ -3,7 +3,6 @@
 import cn.nukkit.InterruptibleThread;
 import cn.nukkit.Server;
 import cn.nukkit.event.server.ServerCommandEvent;
-import cn.nukkit.utils.MainLogger;
 import jline.console.ConsoleReader;
 import jline.console.CursorBuffer;
 
@@ -37,20 +36,23 @@ public CommandReader() {
             Server.getInstance().getLogger().error("Unable to start Console Reader");
         }
         this.setName("Console");
-        this.start();
+    }
+
+    public String readLine() {
+        try {
+            reader.resetPromptLine("", "", 0);
+            return this.reader.readLine("> ");
+        } catch (IOException e) {
+            Server.getInstance().getLogger().logException(e);
+            return "";
+        }
     }
 
     public void run() {
-        MainLogger logger = Server.getInstance().getLogger();
         Long lastLine = System.currentTimeMillis();
         while (true) {
-            String line = "";
-            try {
-                reader.resetPromptLine("", "", 0);
-                line = this.reader.readLine("> ");
-            } catch (IOException e) {
-                logger.logException(e);
-            }
+            String line = readLine();
+
             if (!line.trim().equals("")) {
                 //todo 将即时执行指令改为每tick执行
                 try {
@@ -101,4 +103,7 @@ public void removePromptLine() {
         }
     }
 
+    public ConsoleReader getReader() {
+        return reader;
+    }
 }
diff --git a/src/main/java/cn/nukkit/entity/Entity.java b/src/main/java/cn/nukkit/entity/Entity.java
index 54440c3336..b17e259030 100755
--- a/src/main/java/cn/nukkit/entity/Entity.java
+++ b/src/main/java/cn/nukkit/entity/Entity.java
@@ -478,8 +478,8 @@ public void saveNBT() {
             ListTag<CompoundTag> list = new ListTag<>("ActiveEffects");
             for (Effect effect : this.effects.values()) {
                 list.add(new CompoundTag(String.valueOf(effect.getId()))
-                                .putByte("Id", effect.getId())
-                                .putByte("Amplifier", effect.getAmplifier())
+                                .putByte("Id", (byte) effect.getId())
+                                .putByte("Amplifier", (byte) effect.getAmplifier())
                                 .putInt("Duration", effect.getDuration())
                                 .putBoolean("Ambient", false)
                                 .putBoolean("ShowParticles", effect.isVisible())
diff --git a/src/main/java/cn/nukkit/lang/BaseLang.java b/src/main/java/cn/nukkit/lang/BaseLang.java
index a919e6bff1..6c7836f4b1 100755
--- a/src/main/java/cn/nukkit/lang/BaseLang.java
+++ b/src/main/java/cn/nukkit/lang/BaseLang.java
@@ -35,11 +35,11 @@ public BaseLang(String lang, String path, String fallback) {
 
         if (path == null) {
             path = "lang/";
-            this.lang = this.loadLang(this.getClass().getClassLoader().getResourceAsStream(path + this.langName + ".ini"));
-            this.fallbackLang = this.loadLang(this.getClass().getClassLoader().getResourceAsStream(path + fallback + ".ini"));
+            this.lang = this.loadLang(this.getClass().getClassLoader().getResourceAsStream(path + this.langName + "/lang.ini"));
+            this.fallbackLang = this.loadLang(this.getClass().getClassLoader().getResourceAsStream(path + fallback + "/lang.ini"));
         } else {
-            this.lang = this.loadLang(path + this.langName + ".ini");
-            this.fallbackLang = this.loadLang(path + fallback + ".ini");
+            this.lang = this.loadLang(path + this.langName + "/lang.ini");
+            this.fallbackLang = this.loadLang(path + fallback + "/lang.ini");
         }
 
 
