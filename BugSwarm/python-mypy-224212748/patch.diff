diff --git a/mypy/experiments.py b/mypy/experiments.py
index 11706c6fd6..03a4cebbbc 100755
--- a/mypy/experiments.py
+++ b/mypy/experiments.py
@@ -3,6 +3,7 @@
 STRICT_OPTIONAL = False
 find_occurrences = None  # type: Optional[Tuple[str, str]]
 
+
 @contextmanager
 def strict_optional_set(value: bool) -> Iterator[None]:
     global STRICT_OPTIONAL
diff --git a/mypy/semanal.py b/mypy/semanal.py
index 2ed5a64c0c..05f93247c1 100755
--- a/mypy/semanal.py
+++ b/mypy/semanal.py
@@ -3463,7 +3463,8 @@ def visit_file(self, file: MypyFile, fnam: str, mod_id: str, options: Options) -
             if mod_id == 'builtins':
                 literal_types = [
                     ('None', NoneTyp()),
-                    # reveal_type is a mypy-only function that gives an error with the type of its arg
+                    # reveal_type is a mypy-only function that gives an error with
+                    # the type of its arg
                     ('reveal_type', AnyType()),
                 ]  # type: List[Tuple[str, Type]]
 
diff --git a/mypy/types.py b/mypy/types.py
index 62e37cfeb5..2a5152e220 100755
--- a/mypy/types.py
+++ b/mypy/types.py
@@ -1066,9 +1066,7 @@ def has_readable_member(self, name: str) -> bool:
                    for x in self.relevant_items())
 
     def relevant_items(self) -> List[Type]:
-        """Returns all Union items relevant to current context.  In particular,
-        removes NoneTypes from Unions in non-strict-Optional code
-        """
+        """Removes NoneTypes from Unions when strict Optional checking is off."""
         if experiments.STRICT_OPTIONAL:
             return self.items
         else:
diff --git a/test-data/unit/cmdline.test b/test-data/unit/cmdline.test
index 50410cd950..a78bc1b2cb 100755
--- a/test-data/unit/cmdline.test
+++ b/test-data/unit/cmdline.test
@@ -247,9 +247,9 @@ mypy.ini: [mypy]: ignore_missing_imports: Not a boolean: nah
 [file mypy.ini]
 [[mypy]
 [[mypy-*]
-strict_optional = True
+python_version = 3.4
 [out]
-mypy.ini: [mypy-*]: Per-module sections should only specify per-module flags (strict_optional)
+mypy.ini: [mypy-*]: Per-module sections should only specify per-module flags (python_version)
 
 [case testCoberturaParser]
 # cmd: mypy --cobertura-xml-report build pkg
diff --git a/test-data/unit/semanal-types.test b/test-data/unit/semanal-types.test
index 4c3033191d..ee164c6a97 100755
--- a/test-data/unit/semanal-types.test
+++ b/test-data/unit/semanal-types.test
@@ -1407,7 +1407,7 @@ MypyFile:1(
     f
     Args(
       Var(x))
-    def (x: builtins.int)
+    def (x: Union[builtins.int, builtins.None])
     Block:2(
       PassStmt:2())))
 
@@ -1421,7 +1421,7 @@ MypyFile:1(
     f
     Args(
       Var(x))
-    def (x: Union[builtins.int, builtins.str])
+    def (x: Union[builtins.int, builtins.None, builtins.str])
     Block:2(
       PassStmt:2())))
 
@@ -1448,7 +1448,7 @@ MypyFile:1(
   AssignmentStmt:2(
     NameExpr(x [__main__.x])
     IntExpr(1)
-    builtins.int))
+    Union[builtins.int, builtins.None]))
 
 [case testInvalidOptionalType]
 from typing import Optional
