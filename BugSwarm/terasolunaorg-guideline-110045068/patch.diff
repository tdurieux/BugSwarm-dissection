diff --git a/source/ArchitectureInDetail/DataAccessJpa.rst b/source/ArchitectureInDetail/DataAccessJpa.rst
index 846b2d20b6..e0272e3136 100755
--- a/source/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source/ArchitectureInDetail/DataAccessJpa.rst
@@ -4207,7 +4207,7 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'") // (1)
+    @Where(clause = "is_logical_delete = false") // (1)
     public class Order implements Serializable {
         // ...
         @Id
@@ -4243,6 +4243,60 @@ Repositoryインタフェースのメソッド呼び出し時に実行されるJ
     * - | (2)
       - | ``@Where`` アノテーションで指定した条件が追加されている。
 
+ .. note:: **Dialect 拡張について**
+
+    ``@Where`` アノテーション内でSQL固有のキーワードを指定する場合、HibernateがSQL固有のキーワードを一般的な文字列として認識されてしまい、期待したSQLへ変換されないケースがある。
+    SQL固有のキーワードを利用する場合に、 ``Dialect`` を拡張して使用する必要がある。
+
+- 標準的なキーワード ``true`` 、``false`` 、``unknown`` などを登録するための ``Dialect`` を拡張する
+
+ .. code-block:: java
+
+    package com.example.infra.hibernate;
+    
+    public class ExtendedPostgreSQL9Dialect extends PostgreSQL9Dialect { // (1)
+        public ExtendedPostgreSQL9Dialect() {
+            super();
+            // (2)
+            registerKeyword("true");
+            registerKeyword("false");
+            registerKeyword("unknown");
+        }
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :widths: 10 90
+    :header-rows: 1
+    
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Hibernate 4.3のデフォルトの状態では、SQLのキーワードを正しく認識できない場合がある。例えば、PostgreSQL向けのキーワードを管理する ``org.hibernate.dialect.PostgreSQL9Dialect`` にはキーワードとしてBOOLEAN型の ``true`` 、``false`` 、``unknown`` などが登録されていないため、一般的な文字列として認識されてしまい、正しいSQLへ変換されない。
+        | そのため、必要に応じて ``org.hibernate.dialect.Dialect`` を拡張し、キーワードを登録する必要がある。
+    * - | (2)
+      - | ``@Where`` で利用する可能性のあるSQLキーワードを登録する。
+
+- 拡張したDialectを設定する
+
+ .. code-block:: xml
+
+    <bean id="jpaVendorAdapter"
+        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
+        <property name="databasePlatform" value="com.example.infra.hibernate.ExtendedPostgreSQL9Dialect"/> // (3)
+        // ...
+    </bean>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :widths: 10 90
+    :header-rows: 1
+    
+    * - 項番
+      - 説明
+    * - | (3)
+      - | 拡張した ``Dialect`` を ``EntityManager`` である ``JpaVendorAdapter`` の ``databasePlatform`` プロパティの値に設定する。
+
  .. note:: **指定可能なクラスについて**
 
     ``@Where`` アノテーションは、 ``@Entity`` が付与されているクラスでのみ有効である。
@@ -4264,7 +4318,7 @@ Repositoryインタフェースのメソッド呼び出して取得したEntity
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'")
+    @Where(clause = "is_logical_delete = false")
     public class Order implements Serializable {
         // ...
         @Id
@@ -4272,7 +4326,7 @@ Repositoryインタフェースのメソッド呼び出して取得したEntity
 
         @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
         @OrderBy
-        @Where(clause="is_logical_delete = 'false'") // (1)
+        @Where(clause="is_logical_delete = false") // (1)
         private Set<OrderItem> orderItems;
         // ...
 
diff --git a/source/ArchitectureInDetail/DoubleSubmitProtection.rst b/source/ArchitectureInDetail/DoubleSubmitProtection.rst
index 601bc95abc..928ad685af 100755
--- a/source/ArchitectureInDetail/DoubleSubmitProtection.rst
+++ b/source/ArchitectureInDetail/DoubleSubmitProtection.rst
@@ -1159,7 +1159,7 @@ PRG(Post-Redirect-Get)パターンの適用
 
  .. note::
     
-    \ ``<form:form>``\タグでを使用すると、CSRFトークンチェックで必要となるパラメータも自動的に埋め込まれる。 CSRFトークンチェックで必要となるパラメータについては、\ :ref:`csrf_formformtag-use`\ を参照されたい。
+    \ ``<form:form>``\タグでを使用すると、CSRFトークンチェックで必要となるパラメータも自動的に埋め込まれる。 CSRFトークンチェックで必要となるパラメータについては、\ :ref:`csrf_htmlformtag-use`\ を参照されたい。
 
  .. note::
     
@@ -1518,7 +1518,7 @@ HTTPレスポンスヘッダの\ ``Cache-Control``\ の設定により、ブラ
 
 この場合でも二重送信自体は防止されているため、問題はない。
 バージョン5.0.0.RELEASE以降の\ :doc:`雛形プロジェクト <../ImplementationAtEachLayer/CreateWebApplicationProject>`\ では、
-\ :ref:`Spring Securityの機能 <SpringSecurityAppendixSecHeaders>`\ でキャッシュが無効になる設定が行われている。
+\ :ref:`Spring Securityの機能 <SpringSecurityLinkageWithBrowser>`\ でキャッシュが無効になる設定が行われている。
 
 もしこの画面の表示が出る代わりにトランザクショントークンエラー画面を表示したい場合は、
 \ ``<sec:cache-control />``\ の設定を除外する必要があるが、セキュリティ観点では\ ``<sec:cache-control />``\ を設定しておくことを推奨する。
diff --git a/source/ArchitectureInDetail/Logging.rst b/source/ArchitectureInDetail/Logging.rst
index 7a9bdb365c..48e512de4f 100755
--- a/source/ArchitectureInDetail/Logging.rst
+++ b/source/ArchitectureInDetail/Logging.rst
@@ -815,7 +815,7 @@ logback.xmlの\ ``<pattern>``\ に\ ``%X{X-Track}``\ および、\ ``%X{USER}``\
 
          .. code-block:: xml
 
-             <sec:http auto-config="true">
+             <sec:http>
                  <!-- omitted -->
                  <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/> <!-- (1) -->
                  <!-- omitted -->
diff --git a/source/ArchitectureInDetail/MessageManagement.rst b/source/ArchitectureInDetail/MessageManagement.rst
index 1546e85c9f..e01657eb27 100755
--- a/source/ArchitectureInDetail/MessageManagement.rst
+++ b/source/ArchitectureInDetail/MessageManagement.rst
@@ -1458,11 +1458,11 @@ ResultMessagesを使用しない結果メッセージの表示
                 <legend>Login Form</legend>
                 <div>
                     <label for="username">Username: </label><input
-                        type="text" id="username" name="j_username">
+                        type="text" id="username" name="username">
                 </div>
                 <div>
                     <label for="username">Password:</label><input
-                        type="password" id="password" name="j_password">
+                        type="password" id="password" name="password">
                 </div>
                 <div>
                     <input type="submit" value="Login" />
diff --git a/source/ArchitectureInDetail/REST.rst b/source/ArchitectureInDetail/REST.rst
index 4aac4da350..f27d4c033b 100755
--- a/source/ArchitectureInDetail/REST.rst
+++ b/source/ArchitectureInDetail/REST.rst
@@ -4612,6 +4612,399 @@ CSRF対策
 
 |
 
+
+.. _RESTHowToExtend:
+
+How to extend
+--------------------------------------------------------------------------------
+
+
+
+.. _RESTAppendixJsonview:
+
+@JsonViewを使用したレスポンスの出力制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+| \ ``@JsonView``\ を使用することによって、Resourceオブジェクト内のプロパティーをグループ分けすることができる。
+| この機能はSpring FrameworkがJacksonの機能をサポートすることにより実現している。
+| 詳細は、\ `JacksonJsonViews <http://wiki.fasterxml.com/JacksonJsonViews>`_\ を参照されたい。
+
+| Controllerにてグループを指定することで、指定したグループに所属するプロパティーのみ出力することができる。
+| 1つのプロパティーは、複数のグループに所属することも可能である。
+|
+| 以下は、Memberリソースを「概要」と「詳細」の２つのフォーマットで扱う際の実装例である。
+| 「概要フォーマット」はMemberリソースの主要項目を、「詳細フォーマット」はMemberリソースの全項目を出力する。
+
+* :file:`MemberResource.java`
+
+ .. code-block:: java
+
+    package org.terasoluna.examples.rest.api.member;
+    
+    import java.io.Serializable;
+    
+    import org.joda.time.DateTime;
+    import org.joda.time.LocalDate;
+
+    import com.fasterxml.jackson.annotation.JsonView;
+    
+    public class MemberResource implements Serializable {
+    
+        private static final long serialVersionUID = 1L;
+
+        // (1)
+        interface Summary {
+        }
+
+        // (2)
+        interface Detail {
+        }
+
+        // (3)
+        @JsonView({Summary.class, Detail.class})
+        private String memberId;
+
+        @JsonView({Summary.class, Detail.class})
+        private String firstName;
+
+        @JsonView({Summary.class, Detail.class})
+        private String lastName;
+
+        // (4)
+        @JsonView(Detail.class)
+        private String genderCode;
+
+        @JsonView(Detail.class)
+        private LocalDate dateOfBirth;
+
+        @JsonView(Detail.class)
+        private String emailAddress;
+
+        @JsonView(Detail.class)
+        private String telephoneNumber;
+
+        @JsonView(Detail.class)
+        private String zipCode;
+
+        @JsonView(Detail.class)
+        private String address;
+
+        // (5)
+        private DateTime createdAt;
+
+        private DateTime lastModifiedAt;
+
+        // omitted setter and getter
+    
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 出力制御するグループを指定するためのマーカーインターフェースを定義している。
+        | 上記例では、概要出力時に指定するグループを定義している。
+    * - | (2)
+      - | 出力制御するグループを指定するためのマーカーインターフェースを定義している。
+        | 上記例では、詳細出力時に指定するグループを定義している。
+    * - | (3)
+      - | 複数のグループで出力したい項目には、引数を配列にして複数のマーカーインターフェースを渡すことで、複数のグループに所属させることができる。
+        | 上記例の場合、概要と詳細の両方のグループに所属させたい項目であるため、2つのマーカーインターフェースを引数にしている。
+    * - | (4)
+      - | 単一のグループで出力したい項目には、マーカーインターフェースを引数にすることで、
+        | 該当のグループに所属させることができる。
+        | この場合は要素が1つため、配列にする必要はない。
+        | 上記例の場合、詳細のみのグループに所属させたい項目であるため、1つのマーカーインターフェースを引数にしている。
+    * - | (5)
+      - | グループに所属しない項目には\ ``@JsonView``\ を設定しない。
+        | グループに所属しない項目を出力するかどうかは設定によって変えることができる。
+        | 設定方法については後述する。
+
+|
+
+
+* :file:`MemberRestController.java`
+
+ .. code-block:: java
+
+    package org.terasoluna.examples.rest.api.member;
+    
+    import java.util.ArrayList;
+    import java.util.List;
+    
+    import javax.inject.Inject;
+    
+    import org.dozer.Mapper;
+    import org.springframework.http.HttpStatus;
+    import org.springframework.web.bind.annotation.PathVariable;
+    import org.springframework.web.bind.annotation.RequestBody;
+    import org.springframework.web.bind.annotation.RequestMapping;
+    import org.springframework.web.bind.annotation.RequestMethod;
+    import org.springframework.web.bind.annotation.ResponseStatus;
+    import org.springframework.web.bind.annotation.RestController;
+    import org.terasoluna.examples.rest.domain.model.Member;
+    import org.terasoluna.examples.rest.domain.service.member.MemberService;
+    
+    import com.fasterxml.jackson.annotation.JsonView;
+    
+    @RequestMapping("members")
+    @RestController
+    public class MemberRestController {
+    
+        @Inject
+        MemberService memberService;
+    
+        @Inject
+        Mapper beanMapper;
+        
+        // (1)
+        @JsonView(Summary.class)
+        @RequestMapping(value = "{memberId}", params = "format=summary", method = RequestMethod.GET)
+        @ResponseStatus(HttpStatus.OK)
+        public MemberResource getMemberSummary(@PathVariable("memberId") String memberId) {
+
+            Member member = memberService.getMember(memberId);
+
+            MemberResource responseResource = beanMapper.map(member,
+                    MemberResource.class);
+
+            return responseResource;
+        }
+        
+        // (2)
+        @JsonView(Detail.class)
+        @RequestMapping(value = "{memberId}", params = "format=detail", method = RequestMethod.GET)
+        @ResponseStatus(HttpStatus.OK)
+        public MemberResource getMemberDetail(@PathVariable("memberId") String memberId) {
+
+            Member member = memberService.getMember(memberId);
+
+            MemberResource responseResource = beanMapper.map(member,
+                    MemberResource.class);
+
+            return responseResource;
+        }
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``@JsonView``\ を付けて、出力したいグループのマーカーインターフェースを設定する。
+        | 概要を出力するメソッドに\ ``Summary``\ マーカーインターフェースを設定する。
+    * - | (2)
+      - | 詳細を出力するメソッドに\ ``Detail``\ マーカーインターフェースを設定する。
+
+
+|
+
+| 出力されるボディは、Controllerで指定したグループに所属するプロパティーのみ出力される。
+| 出力例は以下の通りとなる。
+
+* Summary
+
+ .. code-block:: java
+
+    {
+      "memberId" : "M000000001",
+      "firstName" : "John",
+      "lastName" : "Smith",
+      "createdAt" : "2014-03-14T11:02:41.477Z",
+      "lastModifiedAt" : "2014-03-14T11:02:41.477Z"
+    }
+
+
+|
+
+* Detail
+
+ .. code-block:: java
+
+    {
+      "memberId" : "M000000001",
+      "firstName" : "John",
+      "lastName" : "Smith",
+      "genderCode" : "1",
+      "dateOfBirth" : "2013-03-14",
+      "emailAddress" : "user1394794959984@test.com",
+      "telephoneNumber" : "09012345678",
+      "zipCode" : "1710051",
+      "address" : "Tokyo",
+      "createdAt" : "2014-03-14T11:02:41.477Z",
+      "lastModifiedAt" : "2014-03-14T11:02:41.477Z"
+    }
+
+
+|
+
+| \ ``@JsonView``\ を付けなかったプロパティーは、\ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ の設定を有効にすれば出力され、無効にすれば出力されない。
+| 上記の出力例は、\ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を有効にした場合の出力例である。
+| \ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を有効にする場合は、以下のように設定する。
+
+ .. code-block:: xml
+ 
+   <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
+       <!-- ... -->
+       
+       <!-- (1) -->
+       <property name="featuresToEnable">
+           <array>
+               <util:constant static-field="com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"/>
+           </array>
+       </property>
+   </bean>
+
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``featuresToEnable``\ 要素に\ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を定義することで設定が有効となる。
+    
+
+|
+
+
+| \ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を無効にする場合は、以下のように設定する。
+
+ .. code-block:: xml
+ 
+   <bean id="objectMapper" class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
+       <!-- ... -->
+       
+       <!-- (1) -->
+       <property name="featuresToDisable">
+           <array>
+               <util:constant static-field="com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION"/>
+           </array>
+       </property>
+   </bean>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``featuresToDisable``\ 要素に\ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を定義することで設定が無効となる。
+    
+
+| \ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ が無効の場合、先ほどの出力例は、以下のように出力内容が変更される。
+
+* Summary
+
+ .. code-block:: java
+
+    {
+      "memberId" : "M000000001",
+      "firstName" : "John",
+      "lastName" : "Smith"
+    }
+
+
+|
+
+* Detail
+
+ .. code-block:: java
+
+    {
+      "memberId" : "M000000001",
+      "firstName" : "John",
+      "lastName" : "Smith",
+      "genderCode" : "1",
+      "dateOfBirth" : "2013-03-14",
+      "emailAddress" : "user1394794959984@test.com",
+      "telephoneNumber" : "09012345678",
+      "zipCode" : "1710051",
+      "address" : "Tokyo"
+    }
+
+|
+    
+    
+.. warning::
+ 
+    \ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ を指定しない場合のデフォルト値は、\ ``ObjectMapper``\ の設定方法によって異なるデフォルト値となるため注意が必要である。
+    \ :ref:`RESTHowToUseApplicationSettingsOfSpringMVC`\ でも記述しているが、\ ``ObjectMapper``\ のBean定義方法を\ ``ObjectMapper``\ を直接Bean定義するスタイルにすると、デフォルト値が有効になる。\ ``Jackson2ObjectMapperFactoryBean``\ を利用すると、デフォルト値は無効になる。設定を明示するため、どちらのスタイルで設定する場合においても、\ ``MapperFeature.DEFAULT_VIEW_INCLUSION``\ の指定を記述することを推奨する。
+    
+
+
+    
+.. note::
+  \ ``@JsonView``\ は以下の2つの機能を使用して作成されている。これらは、Controller内の\ ``@RequestMapping``\ が付けられた処理メソッドで、Objectとのマッピング前後に共通的な処理を実装したい場合に、使用することができる機能である。
+  
+  * \ ``org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice``\ 
+  * \ ``org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice``\
+
+  \ ``@ControllerAdvice``\ をこれらのインタフェースの実装クラスにつけることで適用することができる。\ ``@ControllerAdvice``\ の詳細は、\ :ref:`application_layer_controller_advice`\を参照されたい。
+  
+  \ ``RequestBodyAdvice``\ は下記のメソッドを実装することができる。
+
+
+  * :file:`org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice`
+
+   .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+   .. list-table::
+      :header-rows: 1
+      :widths: 10 20 70
+
+      * - 項番
+        - メソッド名
+        - 概要
+      * - | (1)
+        - | supports
+        - | このAdviceが送信されたリクエストに対して適用されるかどうか決定する。\ ``true``\ だと適用される。
+      * - | (2)
+        - | handleEmptyBody
+        - | リクエストボディの内容をControllerで使用するオブジェクトに反映する前かつ、ボディが空の場合に呼び出される。
+      * - | (3)
+        - | beforeBodyRead
+        - | リクエストボディの内容をControllerで使用するオブジェクトに反映する前に呼び出される。
+      * - | (4)
+        - | afterBodyRead
+        - | リクエストボディの内容をControllerで使用するオブジェクトに反映した後に呼び出される。
+
+  上記すべてのタイミングで処理を記述する必要がない場合は、上記のsupports以外のメソッドが何もしない状態で実装された\ ``org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter``\ を継承し、必要な部分だけオーバーライドすることで、簡単に実装することができる。
+
+
+
+
+  \ ``ResponseBodyAdvice``\ は下記のメソッドを実装することができる。
+
+  * :file:`org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice`
+
+   .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+   .. list-table::
+      :header-rows: 1
+      :widths: 10 20 70
+
+      * - 項番
+        - メソッド名
+        - 概要
+      * - | (1)
+        - | supports
+        - | このAdviceが送信されたリクエストに対して適用されるかどうか決定する。\ ``true``\ だと適用される。
+      * - | (2)
+        - | beforeBodyWrite
+        - | Contorollerでの処理終了後、レスポンスに返り値を反映する前に呼び出される。
+
+|
+
+
 .. _RESTAppendix:
 
 Appendix
@@ -5335,14 +5728,16 @@ RESTful Web Service向けのリクエストに対して、CSRF対策の処理が
     <!-- (1) -->
     <sec:http
         pattern="/api/v1/**"
-        auto-config="true"
         create-session="stateless">
+        <sec:http-basic/>
         <sec:csrf disabled="true"/>
     </sec:http>
 
-    <sec:http auto-config="true">
+    <sec:http>
         <sec:access-denied-handler ref="accessDeniedHandler"/>
         <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
+        <sec:form-login/>
+        <sec:logout/>
         <sec:session-management />
     </sec:http>
 
diff --git a/source/ArchitectureInDetail/SOAP.rst b/source/ArchitectureInDetail/SOAP.rst
index 3cebd0eb7b..e39f4121e8 100755
--- a/source/ArchitectureInDetail/SOAP.rst
+++ b/source/ArchitectureInDetail/SOAP.rst
@@ -749,13 +749,9 @@ webプロジェクト内にWebServiceインターフェースの実装クラス
 .. code-block:: xml
 
     <sec:http pattern="/ws/**"
-              auto-config="true"
-              use-expressions="true"
               create-session="stateless">
-       <sec:headers />
-       <sec:csrf disabled="true">
-       <!-- (1) -->
-       <sec:http-basic />
+       <sec:csrf disabled="true" />
+       <sec:http-basic />  <!-- (1) -->
     </sec:http>
 
     <!-- (2) -->
@@ -853,11 +849,9 @@ webプロジェクト内にWebServiceインターフェースの実装クラス
 
     <!-- (1) -->
     <sec:http pattern="/ws/**"
-        auto-config="true"
-        use-expressions="true"
         create-session="stateless">
-        <sec:headers />
-        <sec:csrf disabled="true">
+        <sec:http-basic />
+        <sec:csrf disabled="true" />
     </sec:http>
 
 .. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
diff --git a/source/Introduction/ChangeLog.rst b/source/Introduction/ChangeLog.rst
index 2716bdd6a3..d333bbaea1 100755
--- a/source/Introduction/ChangeLog.rst
+++ b/source/Introduction/ChangeLog.rst
@@ -478,7 +478,6 @@
         * :doc:`../ArchitectureInDetail/Utilities/Dozer`
         * :doc:`../Security/SpringSecurity`
         * :doc:`../Security/Authentication`
-        * :doc:`../Security/PasswordHashing`
         * :doc:`../Security/Authorization`
         * :doc:`../Security/CSRF`
         * :doc:`../Appendix/CreateProjectFromBlank`
diff --git a/source/Introduction/CriteriaBasedMapping.rst b/source/Introduction/CriteriaBasedMapping.rst
index e1cec04e7d..2f86e355e6 100755
--- a/source/Introduction/CriteriaBasedMapping.rst
+++ b/source/Introduction/CriteriaBasedMapping.rst
@@ -43,7 +43,7 @@
    * - A6
      - `Sensitive Data Exposure <https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure>`_
      - * \ :doc:`../ArchitectureInDetail/PropertyManagement`\ 
-       * \ :doc:`../Security/PasswordHashing`\  (パスワードハッシュにのみ言及)
+       * \ :ref:`SpringSecurityAuthenticationPasswordHashing`\  (パスワードハッシュにのみ言及)
    * - A7
      - `Missing Function Level Access Control <https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control>`_
      - * \ :doc:`../Security/Authorization`\ 
diff --git a/source/Overview/FrameworkStack.rst b/source/Overview/FrameworkStack.rst
index 303ccfa445..70c03b25dd 100755
--- a/source/Overview/FrameworkStack.rst
+++ b/source/Overview/FrameworkStack.rst
@@ -84,7 +84,7 @@ Viewのレイアウトを共通化する場合は、
     悪意のある攻撃者からWebアプリケーションを守るための仕組みについては、
 
     * :doc:`../Security/CSRF`
-    * :ref:`SpringSecurityAppendixSecHeaders`
+    * :doc:`../Security/LinkageWithBrowser`
 
     を参照されたい。
 
diff --git a/source/Security/Authentication.rst b/source/Security/Authentication.rst
index 38ffbe0193..4bed04d9d2 100755
--- a/source/Security/Authentication.rst
+++ b/source/Security/Authentication.rst
@@ -1,3 +1,5 @@
+.. _SpringSecurityAuthentication:
+
 認証
 ================================================================================
 
@@ -6,1010 +8,1756 @@
  .. contents:: 目次
     :local:
 
+.. _SpringSecurityAuthenticationOverview:
+
 Overview
 --------------------------------------------------------------------------------
-本節では、Spring Securityで提供している認証機能を説明する。
+本節では、Spring Securityが提供している認証機能について説明する。
 
-Spring Securityでは、設定ファイルの記述のみで、ユーザ認証を実装することができる。
-Spring Securityで提供している認証方式として、DB認証、LDAP認証、CAS認証、JAAS認証、X509認証、Basic認証がサポートされているが、本ガイドラインでは、DB認証についてのみ説明する。
+認証処理は、アプリケーションを利用するユーザーの正当性を確認するための処理である。
 
-.. tip::
-  DB認証以外の詳細は、各認証方式の公式ドキュメントを参照されたい。
+ユーザーの正当性を確認するためのもっとも標準的な方法は、アプリケーションを使用できるユーザーをデータストアに登録しておき、
+利用者が入力した認証情報（ユーザー名とパスワードなど）と照合する方法である。
+ユーザーの情報を登録しておくデータストアにはリレーショナルデータベースを利用するのが一般的だが、ディレクトリサービスや外部システムなどを利用するケースもある。
 
-  * \ `LDAP Authentication <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#ldap>`_\
-  * \ `CAS Authentication <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#cas>`_\
-  * \ `Java Authentication and Authorization Service (JAAS) Provider <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#jaas>`_\
-  * \ `X.509 Authentication <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#x509>`_\
-  * \ `Basic and Digest Authentication <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#basic>`_\
+また、利用者に認証情報を入力してもらう方式もいくつか存在する。
+HTMLの入力フォームを使う方式やRFCで定められているHTTP標準の認証方式(Basic認証やDigest認証など)を利用するのが一般的だが、
+OpenID認証やシングルサインオン認証などの認証方式を利用するケースもある。
 
-Login
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+本節では、HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う実装例を紹介しながら、
+Spring Securityの認証機能の使い方を説明する。
+
+|
 
-Spring Securityによるログイン処理の流れを以下に示す。
-
-.. figure:: ./images/Authentication_Login_overview.png
-   :alt: Authentication(Login)
-   :width: 80%
-   :align: center
-
-#. 認証処理を指定したリクエストを受信すると、認証フィルタが起動する。
-#. 認証フィルタは、リクエストからユーザ、パスワードを抽出し、認証情報を生成する。
-   生成した認証情報をパラメータとし、認証マネージャの認証処理を実行する。
-#. 認証マネージャは、指定された認証プロバイダの認証処理を実行する。
-   認証プロバイダは、データソース（DBやLDAP）からユーザ情報を取得し、パスワード照合等のユーザ認証を行う。
-   認証成功時には、認証済みの情報を保持する認証情報を作成し、
-   認証マネージャに返す。認証失敗の場合は、認証失敗例外を送出する。
-#. 認証マネージャは、受け取った認証情報を認証フィルタに返す。
-#. 認証フィルタは、受け取った認証情報（認証済み）をセッションに格納する。
-#. 認証成功時は、認証前のセッション情報を初期化し、新たにセッション情報を作成する。
-#. 指定された認証成功/失敗時のパスへリダイレクトする。セッションIDをクライアントに返却する。
-
-Logout
+認証処理のアーキテクチャ
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Spring Securityによるログアウト処理の流れを以下に示す。
+Spring Securityは、以下のような流れで認証処理を行う。
 
-.. figure:: ./images/Authentication_Logout_overview.png
-   :alt: Authentication(Logout)
-   :width: 80%
-   :align: center
+.. figure:: ./images_Authentication/AuthenticationArchitecture.png
+    :width: 100%
 
+    **認証処理のアーキテクチャ**
 
-#. 指定されたログアウト処理へのリクエストを受信すると、ログアウトフィルタが起動する。
-#. ログアウトフィルタはセッション情報を破棄する。
-   また、クライアントのクッキー（図中のCookie）を破棄するようなレスポンスを設定する。
-#. 指定されたログアウト時のパスへ、リダイレクトする。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-\
- .. note::
-  ログアウト後、残存するセッション情報が第三者に利用されることによるなりすましを防ぐため、
-  セッション情報は、ログアウト時に\ ``org.springframework.security.web.session.ConcurrentSessionFilter``\ で破棄される。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、認証処理を行うパスに対して資格情報（ユーザー名とパスワード）を指定してリクエストを送信する。
+    * - | (2)
+      - | Authentication Filterは、リクエストから資格情報を取得して、\ ``AuthenticationManager``\ クラスの認証処理を呼び出す。
+    * - | (3)
+      - | \ ``ProviderManager``\ (デフォルトで使用される\ ``AuthenticationManager``\ の実装クラス)は、実際の認証処理を\ ``AuthenticationProvider``\ インタフェースの実装クラスに委譲する。
 
 |
 
-How to use
---------------------------------------------------------------------------------
-| 認証機能を使用するために、Spring Securityの設定ファイルに記述する内容を以下に示す。
-| 基本設定については、\ :doc:`SpringSecurity`\ を参照されたい。
-
-\ ``<sec:http>``\ 要素の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 以下の設定例のように、spring-security.xmlの\ ``<http>``\ 要素の\ ``auto-config``\ 属性を\ ``true``\ とすることで、
-| Spring Securityの認証機能の基本的な設定を、省略することができる。
+.. _SpringSecurityAuthenticationFilter:
 
-.. code-block:: xml
+Authentication Filter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-  <beans xmlns="http://www.springframework.org/schema/beans"
-      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-      xmlns:sec="http://www.springframework.org/schema/security"
-      xmlns:context="http://www.springframework.org/schema/context"
-      xsi:schemaLocation="http://www.springframework.org/schema/security
-          http://www.springframework.org/schema/security/spring-security.xsd
-          http://www.springframework.org/schema/beans
-          http://www.springframework.org/schema/beans/spring-beans.xsd
-          http://www.springframework.org/schema/context
-          http://www.springframework.org/schema/context/spring-context.xsd">
-      <sec:http auto-config="true" use-expressions="true">  <!-- (1) -->
-        <!-- omitted -->
-      </sec:http>
-  </beans>
+Authentication Filterは、認証方式に対する実装を提供するサーブレットフィルタである。
+Spring Securityがサポートしている主な認証方式は以下の通り。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供している主なAuthentication Filter**
+    :header-rows: 1
+    :widths: 25 75
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``auto-config="true"``\ と設定することで、
-       | \ ``<form-login>``\ 、\ ``<http-basic>``\ 、\ ``<logout>``\ 要素を設定しなくても有効になる。
+    * - クラス名
+      - 説明
+    * - | \ ``UsernamePasswordAuthenticationFilter``\
+      - | フォーム認証用のサーブレットフィルタクラスで、HTTPリクエストのパラメータから資格情報を取得する。
+    * - | \ ``BasicAuthenticationFilter``\
+      - | Basic認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
+    * - | \ ``DigestAuthenticationFilter``\
+      - | Digest認証用のサーブレットフィルタクラスで、HTTPリクエストの認証ヘッダから資格情報を取得する。
+    * - | \ ``RememberMeAuthenticationFilter``\
+      - | Remember Me認証用のサーブレットフィルタクラスで、HTTPリクエストのCookieから資格情報を取得する。
+        | Remember Me認証を有効にすると、ブラウザを閉じたりセッションタイムアウトが発生しても、ログイン状態を保つことができる。
+
+これらのサーブレットフィルタは、 :ref:`SpringSecurityProcess`\ で紹介したAuthentication Filterの１つである。
 
 .. note::
 
-  \ ``<form-login>``\ 、\ ``<http-basic>``\ 、\ ``<logout>``\ 要素について説明する。
-
-    .. tabularcolumns:: |p{0.15\linewidth}|p{0.85\linewidth}|
-    .. list-table::
-       :header-rows: 1
-       :widths: 15 85
-
-       * - 要素名
-         - 説明
-       * - | \ ``<form-login>``\ 
-         - | \ ``org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter``\ が有効になる。
-           | UsernamePasswordAuthenticationFilterは、ユーザ名、パスワードをPOST時に、リクエストから取り出し、認証を行うFilterである。
-           | 詳細は、\ :ref:`form-login`\ を参照されたい。
-       * - | \ ``<http-basic>``\ 
-         - | \ ``org.springframework.security.web.authentication.www.BasicAuthenticationFilter``\ が有効になる。
-           | BasicAuthenticationFilterは、Basic認証の処理を実施するFilterであり、RFC1945に準拠して実装されている。
-           | 詳細な利用方法は、\ `BasicAuthenticationFilter JavaDoc <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/apidocs/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.html>`_\ を参照されたい。
-       * - | \ ``<logout>``\ 
-         - | \ ``org.springframework.security.web.authentication.logout.LogoutFilter``\ ,
-           | \ ``org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler``\ が有効になる。
-           | LogoutFilterは、ログアウト時に呼ばれるFilterであり、
-           | \ ``org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices``\ (Cookieの削除) や、
-           | SecurityContextLogoutHandler(セッションの無効化)を呼び出している。
-           | 詳細は、\ :ref:`form-logout`\ を参照されたい。
-
-.. _form-login:
+    Spring Securityによってサポートされていない認証方式を実現する必要がある場合は、
+    認証方式を実現するための\ ``Authentication Filter``\ を作成し、Spring Securityに組み込むことで実現することが可能である。
 
-\ ``<sec:form-login>``\ 要素の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 本節では、\ ``<sec:form-login>``\ 要素の設定方法を説明する。
 |
-| form-login要素の属性について、以下に示す。
-
-spring-security.xml
 
-.. code-block:: xml
+AuthenticationManager
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-  <beans xmlns="http://www.springframework.org/schema/beans"
-      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-      xmlns:sec="http://www.springframework.org/schema/security"
-      xmlns:context="http://www.springframework.org/schema/context"
-      xsi:schemaLocation="http://www.springframework.org/schema/security
-          http://www.springframework.org/schema/security/spring-security.xsd
-          http://www.springframework.org/schema/beans
-          http://www.springframework.org/schema/beans/spring-beans.xsd
-          http://www.springframework.org/schema/context
-          http://www.springframework.org/schema/context/spring-context.xsd">
-    <sec:http auto-config="true" use-expressions="true">
-      <sec:form-login login-page="/login"
-          default-target-url="/"
-          login-processing-url="/authentication"
-          always-use-default-target="false"
-          authentication-failure-url="/login?error=true"
-          authentication-failure-handler-ref="authenticationFailureHandler"
-          authentication-success-handler-ref="authenticationSuccessHandler" /> <!-- 属性の指定順番で(1)～(7) -->
-    </sec:http>
-  </beans>
+\ ``AuthenticationManager``\ は、認証処理を実行するためのインタフェースである。
+Spring Securityが提供するデフォルト実装(\ ``ProviderManager``\ )では、
+実際の認証処理は\ ``AuthenticationProvider``\ に委譲し、\ ``AuthenticationProvider``\ で行われた認証処理の処理結果をハンドリングする仕組みになっている。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+|
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``login-page``\ 属性にログインフォーム画面のパスを指定する。
-       | 指定がない場合、「/spring_security_login」がデフォルトのパスになり、Spring Securityが用意しているログイン画面が使用される。
-       | 「未認証ユーザ」が「認証ユーザ」しかアクセスできないページにアクセスした際に、本パスにリダイレクトされる。
+AuthenticationProvider
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-       | **本ガイドラインでは、上記のデフォルト値「/spring_security_login」を使用せず、システム独自の値に変更することを推奨する。**\ この例では"/login"を指定している。
-   * - | (2)
-     - | \ ``default-target-url``\ 属性に認証成功時の遷移先パスを指定する。
-       | 指定がない場合、「/」が、デフォルトのパスになる。
+\ ``AuthenticationProvider``\ は、認証処理の実装を提供するためのインタフェースである。
+Spring Securityが提供している主な\ ``AuthenticationProvider``\の実装クラスは以下の通り。
 
-       | \ ``authentication-success-handler-ref``\ 属性の指定がある場合、本設定は使用されない。
-   * - | (3)
-     - | \ ``login-processing-url``\ 属性に認証処理を行うパスを指定する。
-       | 指定がない場合、「/j_spring_security_check」がデフォルトのパスになる。
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供している主なAuthenticationProvider**
+    :header-rows: 1
+    :widths: 25 75
 
-       | **本ガイドラインでは、上記のデフォルト値「/j_spring_security_check」を使用せず、システム独自の値に変更することを推奨する。**\ この例では"/authentication"を指定している。
-   * - | (4)
-     - | \ ``always-use-default-target``\ 属性に、ログイン成功後に\ ``default-target-url``\ に指定したパスに常に遷移するかどうかを設定する。
-       | \ ``true``\ が指定されている場合、\ ``default-target-url``\ に指定したパスに常に遷移する。
-       | \ ``false``\ (デフォルト)が指定されている場合、「ログイン前にアクセスしようとした保護ページを表示するためのパス」又は「\ ``default-target-url``\ に指定したパス」のいずれかに遷移する。
+    * - クラス名
+      - 説明
+    * - | \ ``DaoAuthenticationProvider``\
+      - | データストアに登録しているユーザーの資格情報とユーザーの状態をチェックして認証処理を行う実装クラス。
+        | チェックで必要となる資格情報とユーザーの状態は\ ``UserDetails``\ というインタフェースを実装しているクラスから取得する。
 
-       | \ ``authentication-success-handler-ref``\ 属性の指定がある場合、本設定は使用されない。
-   * - | (5)
-     - | \ ``authentication-failure-url``\ に認証失敗時の遷移先を設定する。
-       | 指定がない場合、\ ``login-page``\ 属性に指定したパスが適用される。
+.. note::
 
-       | \ ``authentication-failure-handler-ref``\ 属性の指定がある場合、本設定は使用されない。
-   * - | (6)
-     - | \ ``authentication-failure-handler-ref``\ 属性に認証失敗時に呼ばれる、ハンドラクラスを指定する。
-       | 詳細は、\ :ref:`authentication-failure-handler-ref`\ を参照されたい。
-   * - | (7)
-     - | \ ``authentication-success-handler-ref``\ 属性に認証成功時に呼ばれる、ハンドラクラスを指定する。
+    Spring Securityが提供していない認証処理を実現する必要がある場合は、
+    認証処理を実現するための\ ``AuthenticationProvider``\を作成し、Spring Securityに組み込むことで実現することが可能である。
 
-上記以外の属性については、\ `Spring Security Reference -The Security Namespace(<form-login>)- <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#nsa-form-login>`_\ を参照されたい。
+|
 
-.. warning:: **Spring Security のデフォルト値「/spring_security_login, /j_spring_security_check」の使用を推奨しない理由**
+.. _howtouse_springsecurity:
 
-  デフォルト値を使用している場合、そのアプリケーションが、Spring Securityを使用していることについて、露見してしまう。
-  そのため、Spring Securityの脆弱性が発見された場合、脆弱性をついた攻撃を受けるリスクが高くなる。
-  前述のリスクを避けるためにも、デフォルト値を使用しないことを推奨する。
+How to use
+--------------------------------------------------------------------------------
 
-.. _form-login-JSP:
+認証機能を使用するために必要となるbean定義例や実装方法について説明する。
 
-ログインフォームの作成
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 認証時に使用するログインフォームをJSPで作成する。
+本項では :ref:`SpringSecurityAuthenticationOverview`\ で説明したとおり、
+HTMLの入力フォームで入力した認証情報とリレーショナルデータベースに格納されているユーザー情報を照合して認証処理を行う方法について説明する。
 
-* src/main/webapp/WEB-INF/views/login.jsp
+.. _form-login:
 
-  .. code-block:: jsp
+フォーム認証
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-      <form:form action="${pageContext.request.contextPath}/authentication" method="post"><!-- (1) -->
-          <!-- omitted -->
-          <input type="text" id="username" name="j_username"><!-- (2) -->
-          <input type="password" id="password" name="j_password"><!-- (3) -->
-          <input type="submit" value="Login">
-      </form:form>
+Spring Securityは、以下のような流れでフォーム認証を行う。
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
+.. figure:: ./images_Authentication/AuthenticationForm.png
+    :width: 100%
 
-     * - 項番
-       - 説明
-     * - | (1)
-       - | formのaction属性に認証処理を行うための遷移先を指定する。
-         | 遷移先のパスはlogin-processing-url属性で指定した、/authentication を指定すること。
-         | ${pageContext.request.contextPath}/authenticationにアクセスすることで認証処理が実行される。
-         | HTTPメソッドは、「POST」を指定すること。
-     * - | (2)
-       - | 認証処理において、「ユーザID」として扱われる要素。
-         | name属性には、Spring Securityのデフォルト値である「j_username」を指定すること。
-     * - | (3)
-       - | 認証処理において、「パスワード」として扱われる要素。
-         | name属性には、Spring Securityのデフォルト値である「j_password」を指定すること。
+    **フォーム認証の仕組み**
 
-  認証エラーメッセージを表示する場合は以下のコードをJSPに追加する。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-  .. code-block:: jsp
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、フォーム認証を行うパスに対して資格情報（ユーザー名とパスワード）をリクエストパラメータとして送信する。
+    * - | (2)
+      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、リクエストパラメータから資格情報を取得して、\ ``AuthenticationManager``\ の認証処理を呼び出す。
+    * - | (3)
+      - | \ ``UsernamePasswordAuthenticationFilter``\ クラスは、\ ``AuthenticationManager``\ から返却された認証結果をハンドリングする。
+        | 認証処理が成功した場合は \ ``AuthenticationSuccessHandler``\ のメソッドを、認証処理が失敗した場合は\ ``AuthenticationFailureHandler``\ のメソッドを呼び出し画面遷移を行う。
 
-      <c:if test="${param.error}"><!-- (1) -->
-          <t:messagesPanel
-              messagesAttributeName="SPRING_SECURITY_LAST_EXCEPTION"/><!-- (2) -->
-      </c:if>
+|
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
+.. _form-login-usage:
 
-     * - 項番
-       - 説明
-     * - | (1)
-       - | リクエストパラメータに設定されたエラーメッセージの判定を行う。
-         | form-login要素のauthentication-failure-url属性に設定された値や、
-         | 認証エラーハンドラの"defaultFailureUrl"に設定された値によって、判定処理を変更する必要があるので注意すること。
-         | 本例では、authentication-failure-url="/login?error=true"のような設定がある場合の、例を示している。
-     * - | (2)
-       - | 認証エラー時に出力させる例外メッセージを出力する。
-         | 共通ライブラリで提供している\ ``org.terasoluna.gfw.web.message.MessagesPanelTag``\ を指定して出力させることを推奨する。
-         | 「\ ``<t:messagesPanel>``\ 」タグの使用方法は、\ :doc:`../ArchitectureInDetail/MessageManagement`\ を参照されたい。
+フォーム認証の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
+フォーム認証を使用する場合は、以下のようなbean定義を行う。
 
- .. note:: **認証エラーの例外オブジェクトにJSPからアクセスする際に必要な設定について**
+* spring-security.xmlの定義例
 
-    認証エラーの例外オブジェクトは、セッションスコープに\ ``"SPRING_SECURITY_LAST_EXCEPTION"``\ という属性名で格納されている。
-    JSPからセッションスコープに格納されているオブジェクトにアクセスするためには、JSPの\ ``page``\ ディレクティブの\ ``session``\ 属性を\ ``true``\ にする必要がある。
+.. code-block:: xml
 
-    * ``src/main/webapp/WEB-INF/views/common/include.jsp``
+    <sec:http>
+        <sec:form-login />    <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
 
-     .. code-block:: jsp
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
 
-        <%@ page session="true"%>
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``<sec:form-login>``\ タグを定義することで、フォーム認証が有効になる。
 
-    ブランクプロジェクトのデフォルト設定では、JSPからセッションスコープにアクセスできないようになっている。
-    これは、安易にセッションが使用されないようにするためである。
+.. tip:: **auto-config属性について**
 
+    \ ``<sec:http>``\ には、フォーム認証(\ ``<sec:form-login>``\ タグ)、Basic認証(\ ``<sec:http-basic>``\ タグ)、ログアウト(\ ``<sec:logout>``\ タグ)に対するコンフィギュレーションを自動で行うか否かを指定する\ ``auto-config``\ 属性が用意されている。
+    デフォルト値は\ ``false``\ (自動でコンフィギュレーションしない)となっており、Spring Securityのリファレンスドキュメントでもデフォルト値の使用が推奨されている。
 
-* spring-mvc.xml
+    本ガイドラインでも、明示的にタグを指定するスタイルを推奨する。
 
-  ログインフォームを表示するControllerを定義する。
+     .. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+     .. list-table::
+         :header-rows: 1
+         :widths: 25 75
 
-  .. code-block:: xml
+         * - 要素名
+           - 説明
+         * - | ``<form-login>``\
+           - | フォーム認証処理を行うSecurity Filter(\ ``UsernamePasswordAuthenticationFilter``\ )が適用される。
+         * - | \ ``<http-basic>``\
+           - | RFC1945に準拠したBasic認証を行うSecurity Filter(\ ``BasicAuthenticationFilter``\ )が適用される。
+             | 詳細な利用方法は、\ `BasicAuthenticationFilterのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/web/authentication/www/BasicAuthenticationFilter.html>`_\ を参照されたい。
+         * - | \ ``<logout>``\
+           - | ログアウト処理を行うSecurity Filter(\ ``LogoutFilter``\ )が適用される。
+             | ログアウト処理の詳細については、「\ :ref:`SpringSecurityAuthenticationLogout`\ 」を参照されたい。
 
-    <mvc:view-controller path="/login" view-name="login" /><!-- (1) -->
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-
-     * - 項番
-       - 説明
-     * - | (1)
-       - | "/login"にアクセスされたら、view名として"login"を返却するだけのControllerを定義する。\ ``InternalResourceViewResolver``\ によってsrc/main/webapp/WEB-INF/views/login.jspが出力される。
-         | この単純なコントローラはJavaによる実装が不要である。
-         
-   
-  .. tip::
-   
-      上記の設定は次のControllerと同義である。
-      
-        .. code-block:: java
-        
-          @Controller
-          @RequestMapping("/login")
-          public class LoginController {
-          
-              @RequestMapping
-              public String index() {
-                  return "login";
-              }
-          }
+    なお、 ``auto-config``\を定義しない場合は、認証機能が不要であっても、フォーム認証(\ ``<sec:form-login>``\ タグ)、もしくはBasic認証(\ ``<sec:http-basic>``\ タグ)を定義する必要がある。
+    これは、ひとつの\ ``SecurityFilterChain``\(\ ``<sec:http>``\)内には、ひとつ以上のAuthentication FilterのBean定義が必要であるという、Spring Securityの仕様をみたすためである。
 
-      単純にview名を返すだけのメソッドが一つだけあるControllerが必要であれば、\ ``<mvc:view-controller>``\ を使用すればよい。
 
+.. _form-login-default-operation:
 
-ログインフォームの属性名変更
+デフォルトの動作
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-「j_username」、「j_password」は、Spring Securityのデフォルト値である。\ ``<form-login>``\ 要素の設定で、任意の値に変更することができる。
-
-* spring-security.xml
+Spring Securityのデフォルトの動作では、\ ``"/login"``\ に対してGETメソッドでアクセスするとSpring Securityが用意しているデフォルトのログインフォームが表示され、
+ログインボタンを押下すると\ ``"/login"``\ に対してPOSTメソッドでアクセスして認証処理を行う。
 
+|
 
-  \ ``username``\ 、\ ``password``\ の属性
+.. _SpringSecurityAuthenticationLoginForm:
 
-  .. code-block:: xml
+ログインフォームの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+Spring Securityはフォーム認証用のログインフォームをデフォルトで提供しているが、そのまま利用するケースは少ない。
+ここでは、自身で作成したログインフォームをSpring Securityに適用する方法を説明する。
 
-    <sec:http auto-config="true" use-expressions="true">
-      <sec:form-login
-          username-parameter="username"
-          password-parameter="password" /> <!-- 属性の指定順番で(1)～(2) -->
-      <!-- omitted -->
-    </sec:http>
+まず、ログインフォームを表示するためのJSPを作成する。
+ここでは、Spring MVCでリクエストをうけてログインフォームを表示する際の実装例になっている。
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
+* ログインフォームを表示するためのJSPの作成例(xxx-web/src/main/webapp/WEB-INF/views/login/loginForm.jsp)
 
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``username-parameter``\ 属性で\ ``username``\ の入力フィールドの\ ``name``\ 属性を、「username」に変更している。
-     * - | (2)
-       - |  \ ``password-parameter``\ 属性で\ ``password``\ の入力フィールドの\ ``name``\ 属性を、「password」に変更している。
+.. code-block:: jsp
 
-.. _AuthenticationProviderConfiguration:
+    <%@ page contentType="text/html;charset=UTF-8" pageEncoding="UTF-8" %>
+    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    <div id="wrapper">
+        <h3>Login Screen</h3>
+        <%-- (1) --%>
+        <c:if test="${param.error}">
+            <t:messagesPanel messagesType="error"
+                messagesAttributeName="SPRING_SECURITY_LAST_EXCEPTION"/> <%-- (2) --%>
+        </c:if>
+        <form:form action="${pageContext.request.contextPath}/login" method="post"> <%-- (3) --%>
+            <table>
+                <tr>
+                    <td><label for="username">User Name</label></td>
+                    <td><input type="text" id="username" name="username"></td>
+                </tr>
+                <tr>
+                    <td><label for="password">Password</label></td>
+                    <td><input type="password" id="password" name="password"></td>
+                </tr>
+                <tr>
+                    <td>&nbsp;</td>
+                    <td><button>Login</button></td>
+                </tr>
+            </table>
+        </form:form>
+    </div>
+    <%-- omitted --%>
 
-認証処理の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring Securityで認証処理を設定するために、\ ``AuthenticationProvider``\ と\ ``UserDetailsService``\ を定義する。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-\ ``AuthenticationProvider``\ は、次の役割を担う。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認証エラーを表示するためのエリア。
+    * - | (2)
+      - | 認証エラー時に出力させる例外メッセージを出力する。
+        | 共通ライブラリで提供している\ ``<t:messagesPanel>``\ タグを使用して出力することを推奨する。
+        | \ ``<t:messagesPanel>``\ タグの使用方法については、「\ :doc:`../ArchitectureInDetail/MessageManagement`\ 」を参照されたい。
+        | なお、認証エラーが発生した場合は、セッション又はリクエストスコープに\ ``"SPRING_SECURITY_LAST_EXCEPTION"``\ という属性名で例外オブジェクトが格納される。
+    * - | (3)
+      - | ユーザー名とパスワードを入力するためのログインフォーム。
+        | ここではユーザー名を\ ``username``\、パスワードを\ ``passowrd``\ というリクエストパラメータで送信する。
+        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
+        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
 
-* 認証に成功した場合、認証ユーザー情報を返却する
-* 認証に失敗した場合、例外をスローする
+|
 
-\ ``UserDetailsService``\ は、認証ユーザー情報を永続化層から取得する役割を担う。
+つぎに、作成したログインフォームをSpring Securityに適用する。
 
-それぞれデフォルトで用意されているものを使用してもよいし、独自拡張して使用しても良い。
-組み合わせも自由である。
+* spring-security.xmlの定義例
 
+.. code-block:: xml
 
-\ ``AuthenticationProvider``\ クラスの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+    <sec:http>
+      <sec:form-login 
+          login-page="/login/loginForm"
+          login-processing-url="/login" 
+          authentication-failure-url="/login/loginForm?error" /> <!-- (1)(2)(3) -->
+      <sec:intercept-url pattern="/login/**" access="permitAll"/>  <!-- (4) -->
+      <sec:intercept-url pattern="/**" access="isAuthenticated()"/> <!-- (5) -->
+    </sec:http>
 
-| \ ``AuthenticationProvider``\ の実装として、DB認証を行うためのプロバイダ\ ``org.springframework.security.authentication.dao.DaoAuthenticationProvider``\ を使用する方法を説明する。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-* spring-security.xml
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``loginPage``\ 属性にログインフォームを表示するためのパスを指定する。
+        | 匿名ユーザーが認証を必要とするWebリソースにアクセスした場合は、この属性に指定したパスにリダイレクトしてログインフォームを表示する。
+        | ここでは、Spring MVCでリクエストを受けてログインフォームを表示している。
+        | 詳細は 「:ref:`spring-security-authentication-mvc`」を参照されたい。
+    * - | (2)
+      - | \ ``loginProcessingUrl``\ 属性に認証処理を行うためのパスを指定する。
+        | デフォルトのパスも\ ``"/login"``\ であるが、ここでは明示的に指定することとする。
+    * - | (3)
+      - | \ ``authentication-failure-url``\ 属性に認証失敗時に遷移するパスを指定する。
+    * - | (4)
+      - | ログインフォームが格納されている\ ``/login``\ パス配下に対し、すべてのユーザーがアクセスできる権限を付与する。
+        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
+    * - | (5)
+      - | アプリケーションで扱うWebリソースに対してアクセス権を付与する。
+        | 上記例では、Webアプリケーションのルートパスの配下に対して、認証済みユーザーのみがアクセスできる権限を付与している。
+        | Webリソースに対してアクセスポリシーの指定方法については、「\ :ref:`SpringSecurityAuthorization`\ 」を参照されたい。
 
-  .. code-block:: xml
+.. note:: **Spring Security 4.0における変更**
 
-      <sec:authentication-manager><!-- (1) -->
-          <sec:authentication-provider user-service-ref="userDetailsService"><!-- (2) -->
-              <sec:password-encoder ref="passwordEncoder" /><!-- (3) -->
-          </sec:authentication-provider>
-      </sec:authentication-manager>
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
+    * username-parameter
+    * password-parameter
+    * login-processing-url
+    * authentication-failure-url 
 
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``<sec:authentication-manager>``\ 要素内に\ ``<sec:authentication-provider>``\ 要素を定義する。複数指定して、認証方法を組み合わせることが可能であるが、ここでは説明しない。
-     * - | (2)
-       - | \ ``<sec:authentication-provider>``\ 要素で\ ``AuthenticationProvider``\ を定義する。デフォルトで、\ ``DaoAuthenticationProvider``\ が有効になる。これ以外の\ ``AuthenticationProvider``\ を指定する場合は\ `ref属性で、対象のAuthenticationProviderのBean IDを指定する <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#nsa-authentication-provider>`_\ 。
-         |
-         | \ ``user-service-ref``\ 属性に、認証ユーザ情報を取得する\ ``UserDetailsService``\ のBean Idを指定する。\ ``DaoAuthenticationProvider``\ を使用する場合、この設定は必須である。
-         | 詳細は、\ :ref:`userDetailsService`\ を参照されたい。
-     * - | (3)
-       - | パスワード照合時に、フォームから入力されたパスワードのエンコードを行うクラスのBean IDを指定する。
-         | 指定がない場合に、「平文」でパスワードが扱われる。詳細は、\ :doc:`PasswordHashing`\ を参照されたい。
+|
 
+.. _SpringSecurityAuthenticationScreenFlowOnSuccess:
 
-| 「ユーザーID」と「パスワード」だけで永続化層からデータを取得し、認証するという要件であればこの\ ``DaoAuthenticationProvider``\ を使用すれば良い。
-| 永続化層からのデータ取得方法は次に説明する\ ``UserDetailsService``\ で決める。
+認証成功時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-.. _userDetailsService:
+Spring Securityは、認証成功時のレスポンスを制御するためのコンポーネントとして、
+\ ``AuthenticationSuccessHandler``\ というインタフェースと実装クラスを提供している。
 
-\ ``UserDetailsService``\ クラスの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| \ ``AuthenticationProvider``\ の\ ``userDetailsService``\ プロパティに指定したBeanを設定する。
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationSuccessHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
 
-\ ``UserDetailsService``\ は次のメソッドをもつインタフェースである。
+    * - 実装クラス
+      - 説明
+    * - | \ ``SavedRequestAwareAuthenticationSuccessHandler``\
+      - | 認証前にアクセスを試みたURLにリダイレクトを行う実装クラス。
+        | **デフォルトで使用される実装クラス。**
+    * - | \ ``SimpleUrlAuthenticationSuccessHandler``\
+      - | \ ``defaultTargetUrl``\ にリダイレクト又はフォワードを行う実装クラス。
 
-.. code-block:: java
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-  UserDetails loadUserByUsername(String username) throws UsernameNotFoundException
+Spring Securityのデフォルトの動作では、認証前にアクセスを拒否したリクエストをHTTPセッションに保存しておいて、
+認証が成功した際にアクセスを拒否したリクエストを復元してリダイレクトする。
+認証したユーザーにリダイレクト先へのアクセス権があればページが表示され、アクセス権がなければ認可エラーとなる。
+この動作を実現するために使用されるのが、\ ``SavedRequestAwareAuthenticationSuccessHandler``\ クラスである。
 
-このインタフェースを実装すれば、任意の保存場所から認証ユーザー情報を取得することができる。
+ログインフォームを明示的に表示してから認証処理を行った後の遷移先はSpring Securityのデフォルトの設定では、
+Webアプリケーションのルートパス(\ ``"/"``\ )となっているため、認証成功時はWebアプリケーションのルートパスにリダイレクトされる。
 
-ここでは、JDBCを使用して、DBからユーザ情報を取得する \ ``org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl``\ を説明する。
+|
 
-\ ``JdbcDaoImpl``\ を使用するにはspring-security.xmlに以下のBean定義を行えば良い。
+.. _SpringSecurityAuthenticationScreenFlowOnFailure:
 
-.. code-block:: xml
+認証失敗時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-  <!-- omitted -->
+Spring Securityは、認証失敗時のレスポンスを制御するためのコンポーネントとして、
+\ ``AuthenticationFailureHandler``\ というインタフェースと実装クラスを提供している。
 
-  <bean id="userDetailsService"
-    class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
-    <property name="dataSource" ref="dataSource"/>
-  </bean>
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationFailureHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
 
-| \ ``JdbcDaoImpl``\ は、認証ユーザー情報と認可情報を取得するためのデフォルトSQLを定義しており、これらに対応したテーブルが用意されていることが前提となっている。前提としているテーブル定義は\ `Spring Security Reference -Security Database Schema- <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#appendix-schema>`_\ を参照されたい。
-| 既存のテーブルからユーザー情報、認可情報を取得したい場合は、発行されるSQLを既存のテーブルに合わせて修正すればよい。
-| 使用するSQLは以下の3つである。
+    * - 実装クラス
+      - 説明
+    * - | \ ``SimpleUrlAuthenticationFailureHandler``\
+      - | 指定したパス(\ ``defaultTargetUrl``\ )にリダイレクト又はフォワードを行う実装クラス。
+    * - | \ ``ExceptionMappingAuthenticationFailureHandler``\
+      - | 認証例外と遷移先のURLをマッピングすることができる実装クラス。
+        | Spring Securityはエラー原因毎に発生する例外クラスが異なるため、この実装クラスを使用するとエラーの種類毎に遷移先を切り替えることが可能である。
+    * - | \ ``DelegatingAuthenticationFailureHandler``\
+      - | 認証例外と\ ``AuthenticationFailureHandler``\ をマッピングすることができる実装クラス。 
+        | \ ``ExceptionMappingAuthenticationFailureHandler``\ と似ているが、認証例外毎に\ ``AuthenticationFailureHandler``\ を指定できるので、より柔軟な振る舞いをサポートすることができる。
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-*  \ `ユーザ情報取得クエリ <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/apidocs/constant-values.html#org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.DEF_USERS_BY_USERNAME_QUERY>`_\
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトする。
 
-  | ユーザ情報取得クエリに合致するテーブルを作成することで、後述する設定ファイルへのクエリ指定が不要となる。
-  | 「username」、「password」、「enabled」フィールドは必須であるが、
-  | 後述する設定ファイルへのクエリ指定で、別名を付与することにより、テーブル名、カラム名が一致しなくても問題ない。
-  | 例えば次のようなSQLを設定すれば「email」カラムを「username」として使用することができ、「enabled」は常に\ ``true``\ となる。
+例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?error"``\ にリダイレクトされる。
+  
+.. note:: **定義方法による挙動の差異** 
 
-  .. code-block:: sql
+    Java Configを使用した場合は上記動作となるが、XMLを使用してBean定義を行うと\ ``"error"``\ パラメータが付与されない。
+    Java Configと同じ動作にするためには、\ ``authentication-failure-url``\ 属性に遷移先のパスを明示的に指定する必要がある。
+    これはSpring Securityのバグで、4.0.4.RELEASE以降のバージョンで解決される。
 
-    SELECT email AS username, pwd AS password, true AS enabled FROM customer WHERE email = ?
+|
 
-  | \ :ref:`form-login-JSP`\ で前述した、「ユーザID」がクエリのパラメータに指定される。
+DB認証
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-* \ `ユーザ権限取得クエリ <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/apidocs/constant-values.html#org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.DEF_AUTHORITIES_BY_USERNAME_QUERY>`_\
+Spring Securityは、以下のような流れでDB認証を行う。
 
-  | ユーザに対する認可情報を取得するクエリである。
+.. figure:: ./images_Authentication/AuthenticationDatabase.png
+    :width: 100%
 
-* \ `グループ権限取得クエリ <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/apidocs/constant-values.html#org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl.DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY>`_\
+    **DB認証の仕組み**
 
-  | ユーザーが所属するグループの認可情報を取得するクエリである。グループ権限はデフォルトでは無効になっており、本ガイドラインでも扱わない。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-| 以下に、DBの定義例、Spring Securityの設定ファイル例を示す。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityはクライアントからの認証依頼を受け、\ ``DaoAuthenticationProvider``\ の認証処理を呼び出す。
+    * - | (2)
+      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ のユーザー情報取得処理を呼び出す。
+    * - | (3)
+      - | ``UserDetailsService``\ の実装クラスは、データストアからユーザー情報を取得する。
+    * - | (4)
+      - | ``UserDetailsService``\ の実装クラスは、データストアから取得したユーザー情報から\ ``UserDetails``\ を生成する。
+    * - | (5)
+      - | \ ``DaoAuthenticationProvider``\ は、\ ``UserDetailsService``\ から返却された\ ``UserDetails``\ とクライアントが指定した認証情報との照合を行い、クライアントが指定したユーザーの正当性をチェックする。
 
-| テーブルの定義について
-| DB認証処理を実装するにあたり、必要となるテーブルを定義する。
-| 前述した、デフォルトのユーザ情報取得クエリ合致するテーブルとなっている。
-| そのため、下記が最低限必要となるテーブルの定義となる（物理名は仮称）。
 
-テーブル名: account
+.. note:: **Spring Securityが提供するDB認証**
 
-.. tabularcolumns:: |p{0.15\linewidth}|p{0.15\linewidth}|p{0.10\linewidth}|p{0.60\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 15 15 10 60
+    Spring Securityは、ユーザー情報をリレーショナルデータベースからJDBC経由で取得するための実装クラスを提供している。
 
-   * - 論理名
-     - 物理名
-     - 型
-     - 説明
-   * - ユーザID
-     - username
-     - 文字列
-     - ユーザを一意に識別するためのユーザID。
-   * - パスワード
-     - password
-     - 文字列
-     - ユーザパスワード。ハッシュ化された状態で格納する。
-   * - 有効フラグ
-     - enabled
-     - 真偽値
-     - 無効ユーザ、有効ユーザを表すフラグ。「false」に設定されたユーザは無効ユーザとして、認証エラーとなる。
-   * - 権限名
-     - authority
-     - 文字列
-     - 認可機能を必要としない場合は不要。
-
-\ ``JdbcDaoImpl``\ をカスタマイズして設定する例を以下に示す。
+    * \ ``org.springframework.security.core.userdetails.User``\ (\ ``UserDetails``\ の実装クラス)
+    * \ ``org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl`` \ (\ ``UserDetailsService``\ の実装クラス)
 
-.. code-block:: xml
+    これらの実装クラスは最低限の認証処理(パスワードの照合、有効ユーザーの判定)しか行わないため、そのまま利用できるケースは少ない。
+    そのため、本ガイドラインでは、\ ``UserDetails``\ と\ ``UserDetailsService``\ の実装クラスを作成する方法について説明する。
 
-  <!-- omitted -->
-
-  <bean id="userDetailsService"
-    class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
-    <property name="rolePrefix" value="ROLE_" /><!-- (1) -->
-    <property name="dataSource" ref="dataSource" />
-    <property name="enableGroups" value="false" /><!-- (2) -->
-    <property name="usersByUsernameQuery"
-      value="SELECT username, password, enabled FROM account WHERE username = ?" /><!-- (3) -->
-    <property name="authoritiesByUsernameQuery"
-      value="SELECT username, authority FROM account WHERE username = ?" /><!-- (4) -->
-  </bean>
+|
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+UserDetailsの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | 権限名のprefixを指定する。DB上に格納されている権限名が"USER"の場合、この認証ユーザーオブジェクトが持つ権限名は"ROLE_USER"になる。
-       | 認可機能と命名規則を合わせて設定する必要がある。認可機能の詳細は、\ :doc:`Authorization`\ を参照されたい。
-   * - | (2)
-     - | 認可機能において、「グループ権限」の概念を用いる場合に指定する。
-       | 本ガイドラインでは扱わない。
-   * - | (3)
-     - | ユーザ情報を取得するクエリを設定する。取得するデータは、「ユーザID」、「パスワード」、「有効フラグ」の順とする。
-       | 「有効フラグ」による認証判定を行わない場合には、「有効フラグ」のSELECT結果を「true」固定とする。
-       | なお、ユーザを一意に取得できるクエリを記述すること。複数件数取得された場合には、１件目のレコードがユーザとして使われる。
-   * - | (4)
-     - | ユーザの権限を取得するクエリを設定する。取得するデータは、「ユーザID」、「権限ID」の順とする。
-       | 認可の機能を使用しない場合は、「権限ID」は任意の固定値でよい。
+\ ``UserDetails``\ は、認証処理で必要となる資格情報(ユーザー名とパスワード)とユーザーの状態を提供するためのインタフェースで、以下のメソッドが定義されている。
+\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、アプリケーションの要件に合わせて\ ``UserDetails``\ の実装クラスを作成する。
 
-.. note::
-  クエリを変更するだけでは実現できない認証を行う場合、\ ``UserDetailsService``\ を拡張して実現する必要がある。
-  拡張方法については、\ :ref:`extendsuserdetailsservice`\ を参照されたい。
+*UserDetailsインタフェース*
 
-\ ``UserDetails``\ クラスの利用方法
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+.. code-block:: java
 
+    public interface UserDetails extends Serializable {
+        String getUsername(); // (1)
+        String getPassword(); // (2)
+        boolean isEnabled(); // (3)
+        boolean isAccountNonLocked(); // (4)
+        boolean isAccountNonExpired(); // (5)
+        boolean isCredentialsNonExpired(); // (6)
+        Collection<? extends GrantedAuthority> getAuthorities(); // (7)
+    }
 
-| 認証に成功した後に\ ``UserDetailsService``\ が作成した\ ``UserDetails``\ の利用方法について、説明する。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.25\linewidth}|p{0.65\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 25 65
 
+    * - 項番
+      - メソッド名
+      - 説明
+    * - | (1)
+      - | \ ``getUsername``\
+      - | ユーザー名を返却する。
+    * - | (2)
+      - | \ ``getPassword``\
+      - | 登録されているパスワードを返却する。
+        | このメソッドで返却したパスワードとクライアントから指定されたパスワードが一致しない場合は、\ ``DaoAuthenticationProvider``\ は\ ``BadCredentialsException``\ を発生させる。
+    * - | (3)
+      - | \ ``isEnabled``\
+      - | 有効なユーザーかを判定する。有効な場合は\ ``true``\ を返却する。
+        | 無効なユーザーの場合は、\ ``DaoAuthenticationProvider``\ は\ ``DisabledException``\ を発生させる。
+    * - | (4)
+      - | \ ``isAccountNonLocked``\
+      - | アカウントのロック状態を判定する。ロックされていない場合は\ ``true``\ を返却する。
+        | アカウントがロックされている場合は、\ ``DaoAuthenticationProvider``\ は\ ``LockedException``\ を発生させる。
+    * - | (5)
+      - | \ ``isAccountNonExpired``\
+      - | アカウントの有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
+        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``AccountExpiredException``\ を発生させる。
+    * - | (6)
+      - | \ ``isCredentialsNonExpired``\
+      - | 資格情報の有効期限の状態を判定する。有効期限内の場合は\ ``true``\ を返却する。
+        | 有効期限切れの場合は、\ ``DaoAuthenticationProvider``\ は\ ``CredentialsExpiredException``\ を発生させる。
+    * - | (7)
+      - | \ ``getAuthorities``\
+      - | ユーザーに与えられている権限リストを返却する。
+        | このメソッドは認可処理で使用される。
 
-Javaクラスで\ ``UserDetails``\ オブジェクトを利用する
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+.. note:: **認証例外による遷移先の切り替え**
 
-| 認証に成功した後、\ ``UserDetails``\ クラスは
-| \ ``org.springframework.security.core.context.SecurityContextHolder``\ に格納される。
+    \ ``DaoAuthenticationProvider``\ が発生させる例外毎に画面遷移を切り替えたい場合は、
+    \ ``AuthenticationFailureHandler``\ として\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用すると実現することができる。
 
-\ ``SecurityContextHolder``\ から\ ``UserDetails``\ を取得する例を示す。
+    例として、ユーザーのパスワードの有効期限が切れた際にパスワード変更画面に遷移させたい場合は、
+    \ ``ExceptionMappingAuthenticationFailureHandler``\ を使って\ ``CredentialsExpiredException``\ をハンドリングすると画面遷移を切り替えることができる。
+    
+    詳細は、:ref:`SpringSecurityAuthenticationCustomizingScreenFlowOnFailure`\ を参照されたい。
 
-.. code-block:: java
+.. note:: **Spring Securityが提供する資格情報**
 
-  public static String getUsername() {
-      Authentication authentication = SecurityContextHolder.getContext()
-              .getAuthentication(); // (1)
-      if (authentication != null) {
-          Object principal = authentication.getPrincipal(); // (2)
-          if (principal instanceof UserDetails) {
-              return ((UserDetails) principal).getUsername(); // (3)
-          }
-          return (String) principal.toString();
-      }
-      return null;
-  }
+    Spring Securityは、資格情報(ユーザー名とパスワード)とユーザーの状態を保持するための実装クラス(\ ``org.springframework.security.core.userdetails.User``\ )を提供してるが、
+    このクラスは認証処理に必要な情報しか保持することができない。
+    一般的なアプリケーションでは、認証処理で使用しないユーザーの情報（ユーザーの氏名など）も必要になるケースが多いため、\ ``User``\ クラスをそのまま利用できるケースは少ない。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+|
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``SecurityContextHolder``\ から\ ``org.springframework.security.core.Authentication``\ オブジェクトを取得する。
-   * - | (2)
-     - | \ ``Authentication``\ オブジェクトから\ ``UserDetails``\ オブジェクトを取得する。
-   * - | (3)
-     - | \ ``UserDetails``\ オブジェクトから、ユーザ名を取得する。
+ここでは、アカウントの情報を保持する\ ``UserDetails``\ の実装クラスを作成する。 
+本例は\ ``User``\ を継承することでも実現することができるが、\ ``UserDetails``\  を実装する方法の例として紹介している。
 
+* UserDetailsの実装クラスの作成例
 
-\ ``SecurityContextHolder``\ から\ ``UserDetails``\ オブジェクトを取得する方法は、どこからでもstaticメソッドで利用可能であり、
-便利な反面、モジュール結合度を高めてしまう。テストも実施しづらい。
 
-| \ ``UserDetails``\ オブジェクトは\ ``@AuthenticationPrincipal``\ を利用することで取得可能である。
-| \ ``@AuthenticationPrincipal``\を利用するためには\ ``org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver``\ を\ ``<mvc:argument-resolvers>``\ に設定する必要がある。
+.. code-block:: java
 
-- :file:`spring-mvc.xml`
+    public class AccountUserDetails implements UserDetails { // (1)
 
-.. code-block:: xml
-   :emphasize-lines: 5-6
+        private final Account account;
+        private final Collection<GrantedAuthority> authorities;
 
-    <mvc:annotation-driven>
-        <mvc:argument-resolvers>
-            <bean
-                class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
-            <bean
-                class="org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver" />
-        </mvc:argument-resolvers>
-    </mvc:annotation-driven>
+        public AccountUserDetails(
+            Account account, Collection<GrantedAuthority> authorities) {
+            // (2)
+            this.account = account;
+            this.authorities = authorities;
+        }
 
+        // (3)
+        public String getPassword() {
+            return account.getPassword();
+        }
+        public String getUsername() {
+            return account.getUsername();
+        }
+        public boolean isEnabled() {
+            return account.isEnabled();
+        }
+        public Collection<GrantedAuthority> getAuthorities() {
+            return authorities;
+        }
 
-Spring MVCのController内では以下のように\ ``SecurityContextHolder``\ を使用せずに\ ``UserDetails``\ オブジェクトを取得できる。
+        // (4)
+        public boolean isAccountNonExpired() {
+            return true;
+        }
+        public boolean isAccountNonLocked() {
+            return true;
+        }
+        public boolean isCredentialsNonExpired() {
+            return true;
+        }
 
-.. code-block:: java
+        // (5)
+        public Account getAccount() {
+            return account;
+        }
 
-    @RequestMapping(method = RequestMethod.GET)
-    public String view(@AuthenticationPrincipal SampleUserDetails userDetails, // (1)
-            Model model) {
-        // get account object
-        Account account = userDetails.getAccount(); // (2)
-        model.addAttribute(account);
-        return "account/view";
     }
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``@AuthenticationPrincipal``\ を利用してログインしているユーザ情報を取得する。
-   * - | (2)
-     - | \ ``SampleUserDetails``\ から\ アカウント情報を取得する。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``UserDetails``\ インタフェースを実装したクラスを作成する。
+    * - | (2)
+      - | ユーザー情報と権限情報をプロパティに保持する。
+    * - | (3)
+      - | \ ``UserDetails``\ インタフェースに定義されているメソッドを実装する。
+    * - | (4)
+      - | 本節の例では、「アカウントのロック」「アカウントの有効期限切れ」「資格情報の有効期限切れ」に対するチェックは未実装であるが、要件に合わせて実装されたい。
+    * - | (5)
+      - | 認証処理成功後の処理でアカウント情報にアクセスできるようにするために、getterメソッドを用意する。
 
-.. note::
+|
 
-    \ ``@AuthenticationPrincipal``\アノテーションをつける引数の型は\ ``UserDetails``\型を継承したクラスである必要がある。
-    通常は\ :ref:`extendsuserdetailsservice`\ で作成する\ ``UserDetails``\継承クラスを使用すればよい。
+Spring Securityは、\ ``UserDetails``\ の実装クラスとして\ ``User``\ クラスを提供している。
+\ ``User``\ クラスを継承すると資格情報とユーザーの状態を簡単に保持することができる。
 
-    \ ``SampleUserDetails``\ クラスは\ :doc:`Tutorial`\ で作成するクラスである。詳細は\ :ref:`Tutorial_CreateAuthService`\ を参照されたい。
+* Userクラスを継承したUserDetails実装クラスの作成例
 
-\ **Controller内でUserDetailsオブジェクトにアクセスする場合はこちらの方法を推奨する**\ 。
+.. code-block:: java
 
-.. note::
+    public class AccountUserDetails extends User {
 
-  ServiceクラスではControllerが取得した\ ``UserDetails``\ オブジェクトの情報を使用し、\ ``SecurityContextHolder``\ は使用しないことを推奨する。
+        private final Account account;
 
-  \ ``SecurityContextHolder``\ は\ ``UserDetails``\ オブジェクトを引数で渡せないメソッド内でのみ利用することが望ましい。
+        public AccountUserDetails(Account account, boolean accountNonExpired,
+                boolean credentialsNonExpired, boolean accountNonLocked,
+                Collection<GrantedAuthority> authorities) {
+            super(account.getUsername(), account.getPassword(),
+                    account.isEnabled(), true, true, true, authorities);
+            this.account = account;
+        }
 
-JSPで\ ``UserDetails``\ にアクセスする
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+        public Account getAccount() {
+            return account;
+        }
+    }
 
-| Spring Securityでは、JSPで認証情報を利用するための仕組みとして、JSP taglibを提供している。このtaglibを使うために以下の宣言が必要である。
+|
 
-.. code-block:: jsp
+.. _SpringSecurityAuthenticationUserDetailsService:
 
-  <%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec"%>
+UserDetailsServiceの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-.. note::
+\ ``UserDetailsService``\ は、認証処理で必要となる資格情報とユーザーの状態をデータストア
+から取得するためのインタフェースで、以下のメソッドが定義されている。
+\ ``AuthenticationProvider``\ として\ ``DaoAuthenticationProvider``\ を使用する場合は、
+アプリケーションの要件に合わせて\ ``UserDetailsService``\ の実装クラスを作成する。
 
-  \ `TERASOLUNA Server Framework for Java (5.x)の雛形 <https://github.com/terasolunaorg/terasoluna-gfw-web-blank>`_\ を使用している場合はWEB-INF/views/common/include.jspに設定済みである。
+* UserDetailsServiceインタフェース
 
-| 認証ユーザ名をJSPで表示する場合を例に、使用方法を示す。
+.. code-block:: java
 
-.. code-block:: jsp
+    public interface UserDetailsService {
+        UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
+    }
 
-  <sec:authentication property="principal.username" /><!-- (1) -->
+|
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+ここでは、データベースからアカウント情報を検索して、\ ``UserDetails``\ のインスタンス
+を生成するためのサービスクラスを作成する。
+本サンプルでは、\ ``SharedService``\ を使用して、アカウント情報を取得している。
+\ ``SharedService``\ については、:ref:`service-label`\ を参照されたい。
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:authentication>`` \ タグで\ ``Authentication``\ オブジェクトにアクセスでき、\ ``property``\ 属性に指定したプロパティアクセスできる。この例では\ ``getPrincipal().getUsername()``\ の結果を出力する。
+* AccountSharedServiceインタフェースの作成例
 
+.. code-block:: java
+
+    public interface AccountSharedService {
+        Account findOne(String username);
+    }
 
+* AccountSharedServiceの実装クラスの作成例
 
-.. code-block:: jsp
+.. code-block:: java
 
-  <sec:authentication property="principal" var="userDetails" /> <!-- (1) -->
+    // (1)
+    @Service
+    @Transactional
+    public class AccountSharedServiceImpl implements AccountSharedService {
+        @Inject
+        AccountRepository accountRepository;
 
-  ${f:h(userDetails.username)} <!-- (2) -->
+        // (2)
+        @Override
+        public Account findOne(String username) {
+            Account account = accountRepository.findOneByUsername(username);
+            if (account == null) {
+                throw new ResourceNotFoundException("The given account is not found! username="
+                        + username);
+            }
+            return account;
+        }
+    }
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AccountSharedService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
+        | 上記例では、コンポーネントスキャン機能を使って\ ``AccountSharedServiceImpl``\ をDIコンテナに登録している。
+    * - |  (2)
+      - | データベースからアカウント情報を検索する。
+        | アカウント情報が見つからない場合は、共通ライブラリの例外である\ ``ResourceNotFoundException``\ を発生させる。
+        | Repositoryの作成例については、「:doc:`Tutorial`」を参照されたい。
+
+* UserDetailsServiceの実装クラスの作成例
+
+.. code-block:: java
+
+    // (1)
+    @Service
+    @Transactional
+    public class AccountUserDetailsService implements UserDetailsService {
+        @Inject
+        AccountSharedService accountSharedService;
+
+        public UserDetails loadUserByUsername(String username)
+                throws UsernameNotFoundException {
+
+            try {
+                Account account = accountSharedService.findOne(username);
+                // (2)
+                return new AccountUserDetails(account, getAuthorities(account));
+            } catch (ResourceNotFoundException e) {
+                // (3)
+                throw new UsernameNotFoundException("user not found", e);
+            }
+        }
+
+        // (4)
+        private Collection<GrantedAuthority> getAuthorities(Account account) {
+            if (account.isAdmin()) {
+                return AuthorityUtils.createAuthorityList("ROLE_USER", "ROLE_ADMIN");
+            } else {
+                return AuthorityUtils.createAuthorityList("ROLE_USER");
+            }
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``UserDetailsService``\ インタフェースを実装したクラスを作成し、\ ``@Service``\ を付与する。
+        | 上記例では、コンポーネントスキャン機能を使って\ ``UserDetailsService``\ をDIコンテナに登録している。
+    * - | (2)
+      - | \ ``AccountSharedService``\ を使用してアカウント情報を取得する。
+        | アカウント情報が見つかった場合は、\ ``UserDetails``\ を生成する。
+        | 上記例では、ユーザー名、パスワード、ユーザーの有効状態をアカウント情報から取得している。
+    * - | (3)
+      - | アカウント情報が見つからない場合は、\ ``UsernameNotFoundException``\ を発生させる。
+    * - | (4)
+      - | ユーザーが保持する権限(ロール)情報を生成する。ここで生成した権限(ロール)情報は、認可処理で使用される。
+
+.. note:: **認可で使用する権限情報**
+
+    Spring Securityの認可処理は、\ ``"ROLE_"``\ で始まる権限情報をロールとして扱う。
+    そのため、ロールを使用してリソースへのアクセス制御を行う場合は、 ロールとして扱う権限情報に\ ``"ROLE_"``\ プレフィックスを付与する必要がある。
+
+.. note:: **認証例外情報の隠蔽**
+
+    Spring Securityのデフォルトの動作では、\ ``UsernameNotFoundException``\ は\ ``BadCredentialsException``\ という例外に変換してからエラー処理を行う。
+    \ ``BadCredentialsException``\ は、クライアントから指定された資格情報のいずれかの項目に誤りがあることを通知するための例外であり、具体的なエラー理由がクライアントに通知されることはない。
+
+|
+
+.. _AuthenticationProviderConfiguration:
+
+DB認証の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+作成した\ ``UserDetailsService``\ を使用して認証処理を行うためには、
+\ ``DaoAuthenticationProvider``\ を有効化して、作成した\ ``UserDetailsService``\ を適用する必要がある。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:authentication-manager> <!-- (1) -->
+        <sec:authentication-provider user-service-ref="accountUserDetailsService"> <!-- (2) -->
+            <sec:password-encoder ref="passwordEncoder" /> <!-- (3) -->
+        </sec:authentication-provider>
+    </sec:authentication-manager>
+
+    <bean id="passwordEncoder"
+        class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> <!-- (4) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationManager``\ をbean定義する。
+    * - | (2)
+      - | \ ``<sec:authentication-manager>``\ 要素内に ``<sec:authentication-provider>``\ 要素を定義する。
+        | ``user-service-ref``\ 属性に「:ref:`SpringSecurityAuthenticationUserDetailsService`」で作成した ``AccountUserDetailsService``\ のbeanを指定する。
+        | 本定義により、デフォルト設定の\ ``DaoAuthenticationProvider``\ が有効になる。
+    * - | (3)
+      - | パスワード照合時に使用する\ ``PasswordEncoder``\ のbeanを指定する。
+    * - | (4)
+      - | パスワード照合時に使用する\ ``PasswordEncoder``\ をBean定義する。
+        | 上記例では、パスワードをBCryptアルゴリズムでハッシュ化する\ ``BCryptPasswordEncoder``\ を定義している。
+        | パスワードのハッシュ化については、「:ref:`SpringSecurityAuthenticationPasswordHashing`」を参照されたい。
+
+|
+
+.. _SpringSecurityAuthenticationPasswordHashing:
+
+パスワードのハッシュ化
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+パスワードをデータベースなどに保存する場合は、パスワードそのものではなくパスワードの
+ハッシュ値を保存するのが一般的である。
+
+Spring Securityは、パスワードをハッシュ化するためのインタフェースと実装クラスを
+提供しており、認証機能と連携して動作する。
+
+Spring Securityが提供するインタフェースには、以下の2種類がある。
+
+* \ ``org.springframework.security.crypto.password.PasswordEncoder``\
+* \ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
+
+どちらも\ ``PasswordEncoder``\ という名前のインタフェースであるが、
+\ ``org.springframework.security.authentication.encoding``\ パッケージの\ ``PasswordEncoder``\
+は非推奨になっている。
+パスワードのハッシュ化要件に制約がない場合は、\ ``org.springframework.security.crypto.password``\
+パッケージの\ ``PasswordEncoder``\ インタフェースの実装クラスを使用することを推奨する。
+
+.. note::
+
+    非推奨の\ ``PasswordEncoder``\ の利用方法については、
+    「:ref:`AuthenticationHowToExtendUsingDeprecatedPasswordEncoder`」を参照されたい。
+
+|
+
+*org.springframework.security.crypto.password.PasswordEncoderのメソッド定義*
+
+.. code-block:: java
+
+    public interface PasswordEncoder {
+        String encode(CharSequence rawPassword);
+        boolean matches(CharSequence rawPassword, String encodedPassword);
+    }
+
+.. tabularcolumns:: |p{0.15\linewidth}|p{0.85\linewidth}|
+.. list-table:: **PasswordEncoderに定義されているメソッド**
+    :header-rows: 1
+    :widths: 15 85
+
+    * - メソッド名
+      - 説明
+    * - | \ ``encode``\
+      - | パスワードをハッシュ化するためのメソッド。
+        | アカウントの登録処理やパスワード変更処理などでデータストアに保存するパスワードをハッシュ化する際に使用できる。
+    * - | \ ``matches``\
+      - | 平文のパスワードとハッシュ化されたパスワードを照合するためのメソッド。
+        | このメソッドはSpring Securityの認証処理でも利用されるが、パスワード変更処理などで現在のパスワードや過去に使用していたパスワードと照合する際にも使用できる。
+
+|
+
+Spring Securityは、\ ``PasswordEncoder``\ インタフェースの実装クラスとして、以下のクラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **PasswordEncoderの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``BCryptPasswordEncoder``\
+      - | BCryptアルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
+        | **パスワードのハッシュ化要件に制約がない場合は、このクラスを使用することを推奨する。**
+        | 詳細は、\ `BCryptPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html>`_\ を参照されたい。
+    * - | \ ``StandardPasswordEncoder``\
+      - | SHA-256アルゴリズムを使用してパスワードのハッシュ化及び照合を行う実装クラス。
+        | 詳細は、\ `StandardPasswordEncoderのJavaDoc <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/crypto/password/StandardPasswordEncoder.html>`_\ を参照されたい。
+    * - | \ ``NoOpPasswordEncoder``\
+      - | ハッシュ化しない実装クラス。
+        | テスト用のクラスなであり、実際のアプリケーションで使用することはない。
+
+本節では、Spring Securityが利用を推奨している\ ``BCryptPasswordEncoder``\ の使い方について説明する。
+
+|
+
+BCryptPasswordEncoder
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``BCryptPasswordEncoder``\ は、BCryptアルゴリズムを使用してパスワードのハッシュ化及びパスワードの照合を行う実装クラスである。
+:ref:`ソルト<SpringSecurityAuthenticationPasswordHashSalt>` には16バイトの乱数(\ ``java.security.SecureRandom``\ )が使用され、
+デフォルトでは1,024(2の10乗)回 :ref:`ストレッチング<SpringSecurityAuthenticationPasswordHashStength>` を行う。
+
+* applicationContext.xmlの定義例
+
+.. code-block:: xml
+
+  <bean id="passwordEncoder"
+      class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" > <!-- (1) -->
+      <constructor-arg name="strength" value="11" /> <!-- (2) -->
+  </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | passwordEncoderのクラスに\ ``BCryptPasswordEncoder``\ を指定する。
+    * - | (2)
+      - | コンストラクタの引数に、ハッシュ化のストレッチング回数のラウンド数を指定する。
+        | 本引数は省略可能であり、指定できる値は\ ``4``\から\ ``31``\ である。
+        | なお、未指定時のデフォルト値は\ ``10``\ である。
+        | 本ガイドラインでは説明を省略するが、コンストラクタ引数として\ ``java.security.SecureRandom.SecureRandom``\ を指定することも可能である。
+
+.. warning:: **SecureRandomの使用について**
+  
+    Linux環境で\ ``SecureRandom``\ を使用する場合、処理の遅延やタイムアウトが発生する場合がある。
+    これは使用する乱数生成器に左右される事象であり、以下のJava Bug Databaseに説明がある。
+  
+    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
+  
+    JDK 7のb20以降のバージョンでは、修正されている。
+  
+    * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6521844
+  
+    本事象が発生する場合は、JVMのシステムプロパティに以下の設定を追加することで回避することができる。
+  
+    * ``-Djava.security.egd=file:/dev/./urandom``
+
+|
+
+\ ``BCryptPasswordEncoder``\ を使用して処理を行うクラスでは、\ ``PasswordEncoder``\ をDIコンテナからインジェクションして使用する。
+
+.. code-block:: java
+
+    @Service
+    @Transactional
+    public class AccountServiceImpl implements AccountService {
+
+        @Inject
+        AccountRepository accountRepository;
+
+        @Inject
+        PasswordEncoder passwordEncoder; // (1)
+
+        public Account register(Account account, String rawPassword) {
+            // omitted
+            String encodedPassword = passwordEncoder.encode(rawPassword); // (2)
+            account.setPassword(encodedPassword);
+            // omitted
+            return accountRepository.save(account);
+        }
+
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``PasswordEncoder``\ をインジェクションする。
+    * - | (2)
+      - | インジェクションした\ ``PasswordEncoder``\ のメソッドを呼び出す。
+        | ここでは、データストアに保存するパスワードをハッシュ化していいる。
+
+.. _SpringSecurityAuthenticationPasswordHashSalt:
+
+.. note:: **ソルト**
+
+    ハッシュ化対象のデータに追加する文字列のことである。
+    ソルトをパスワードに付与することで、実際のパスワードより桁数が長くなるため、レインボークラックなどのパスワード解析を困難にすることができる。
+    なお、**ソルトはユーザーごとに異なる値（ランダム値等）を設定することを推奨する。**
+    これは、同じソルトを使用していると、ハッシュ値からハッシュ化前の文字列(パスワード)がわかってしまう可能性があるためである。
+
+.. _SpringSecurityAuthenticationPasswordHashStength:
+
+.. note:: **ストレッチング**
+
+    ハッシュ関数の計算を繰り返し行うことで、保管するパスワードに関する情報を繰り返し暗号化することである。
+    パスワードの総当たり攻撃への対策として、パスワード解析に必要な時間を延ばすために行う。
+    しかし、ストレッチングはシステムの性能に影響を与えるので、システムの性能を考慮してストレッチング回数を決める必要がある。
+
+    Spring Securityのデフォルトでは1,024(2の10乗)回ストレッチングを行うが、この回数はコンストラクタ引数(\ ``strength``\ )で変更することができる。
+    \ ``strength``\ には4(16回)から31(2,147,483,648回)を指定することが可能である。
+    ストレッチング回数が多いほどパスワードの強度は増すが、計算量が多くなるため性能にあたえる影響も大きくなる。
+
+|
+
+.. _SpringSecurityAuthenticationEvent:
+
+認証イベントのハンドリング
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、Spring Frameworkが提供しているイベント通知の仕組みを利用して、
+認証処理の処理結果を他のコンポーネントと連携する仕組みを提供している。
+
+この仕組みを利用すると、以下のようなセキュリティ要件をSpring Securityの認証機能に組み込むことが可能である。
+
+* 認証成功、失敗などの認証履歴をデータベースやログに保存する。
+* パスワードを連続して間違った場合にアカウントをロックする。
+
+認証イベントの通知は、以下のような仕組みで行われる。
+
+.. figure:: ./images_Authentication/AuthenticationEventNotification.png
+    :width: 100%
+
+    **イベント通知の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityの認証機能は、認証結果(認証情報や認証例外)を
+        | \ ``AuthenticationEventPublisher``\ に渡して認証イベントの通知依頼を行う。
+    * - | (2)
+      - | \ ``AuthenticationEventPublisher``\ インタフェースのデフォルトの実装クラスは
+        | \ 認証結果に対応する認証イベントクラスのインスタンスを生成し、\ ``ApplicationEventPublisher``\ に渡してイベントの通知依頼を行う。
+    * - | (3)
+      - | \ ``ApplicationEventPublisher``\ インタフェースの実装クラスは、\ ``ApplicationListener``\ インタフェースの実装クラスにイベントを通知する。
+    * - | (4)
+      - | ``ApplicationListener``\ の実装クラスの一つである\ ``ApplicationListenerMethodAdaptor``\ は、
+        | \ ``@org.springframework.context.event.EventListener``\ が付与されているメソッドを呼び出してイベントを通知する。
+
+.. note:: **メモ**
+
+    Spring 4.1までは\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取る必要があったが、
+    Spring 4.2からはPOJOに\ ``@EventListener``\ を付与したメソッドを実装するだけでイベントを受け取ることが可能である。
+    なお、Spring 4.2以降でも、従来通り\ ``ApplicationListener``\ インタフェースの実装クラスを作成してイベントを受け取ることもで可能である。
+
+Spring Security使用しているイベントは、認証が成功したことを通知するイベントと認証が失敗したことを通知するイベントの2種類に分類される。
+以下にSpring Securityが用意しているイベントクラスを説明する。
+
+|
+
+認証成功イベント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証が成功した時にSpring Securityが通知する主なイベントは以下の3つである。
+この3つのイベントは途中でエラーが発生しなければ、以下の順番ですべて通知される。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **認証が成功したことを通知するイベントクラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - イベントクラス
+      - 説明
+    * - \ ``AuthenticationSuccessEvent``\
+      - \ ``AuthenticationProvider``\ による認証処理が成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、クライアントが正しい認証情報を指定したことを検知することが可能である。
+        なお、このイベントをハンドリングした後の後続処理でエラーが発生する可能性がある点に注意されたい。
+    * - \ ``SessionFixationProtectionEvent``\
+      - セッション固定攻撃対策の処理(セッションIDの変更処理)が成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、変更後のセッションIDを検知することがで可能になる。
+    * - \ ``InteractiveAuthenticationSuccessEvent``\
+      - 認証処理がすべて成功したことを通知するためのイベントクラス。
+        このイベントをハンドリングすると、画面遷移を除くすべての認証処理が成功したことを検知することが可能になる。
+
+|
+
+認証失敗イベント
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証が失敗した時にSpring Securityが通知する主なイベントは以下の通り。
+認証に失敗した場合は、いずれか一つのイベントが通知される。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **認証が失敗したことを通知するイベントクラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - イベントクラス
+      - 説明
+    * - | \ ``AuthenticationFailureBadCredentialsEvent``\
+      - | \ ``BadCredentialsException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureDisabledEvent``\
+      - | \ ``DisabledException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureLockedEvent``\
+      - | \ ``LockedException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureExpiredEvent``\
+      - | \ ``AccountExpiredException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureCredentialsExpiredEvent``\
+      - | \ ``CredentialsExpiredException``\ が発生したことを通知するためのイベントクラス。
+    * - | \ ``AuthenticationFailureServiceExceptionEvent``\
+      - | \ ``AuthenticationServiceException``\ が発生したことを通知するためのイベントクラス。
+
+|
+
+イベントリスナの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+認証イベントの通知を受け取って処理を行いたい場合は、\ ``@EventListener``\ を付与したメソッドを実装したクラスを作成し、DIコンテナに登録する。
+
+* イベントリスナクラスの実装例
+
+.. code-block:: java
+
+    @Component
+    public class AuthenticationEventListeners {
+
+        private static final Logger log =
+                LoggerFactory.getLogger(AuthenticationEventListeners.class);
+
+    @EventListener // (1) 
+    public void handleBadCredentials( 
+        AuthenticationFailureBadCredentialsEvent event) { // (2) 
+        log.info("Bad credentials is detected. username : {}", event.getAuthentication().getName()); 
+        // omitted 
+    } 
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ``@EventListener``\ をメソッドに付与したメソッドを作成する。
+    * - | (2)
+      - | メソッドの引数にハンドリングしたい認証イベントクラスを指定する。
+
+上記例では、クライアントが指定した認証情報に誤りがあった場合に通知される\ ``AuthenticationFailureBadCredentialsEvent``\ をハンドリングするクラスを作成する例としているが、
+他のイベントも同じ要領でハンドリングすることが可能である。
+
+|
+
+.. _SpringSecurityAuthenticationLogout:
+
+ログアウト
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、以下のような流れでログアウト処理を行いう。
+
+.. figure:: ./images_Authentication/AuthenticationLogout.png
+    :width: 100%
+
+    **ログアウト処理の仕組み**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、ログアウト処理を行うためのパスにリクエストを送信する。
+    * - | (2)
+      - | \ ``LogoutFilter``\ は、\ ``LogoutHandler``\ のメソッドを呼び出し、実際のログアウト処理を行う。
+    * - | (3)
+      - | \ ``LogoutFilter``\ は、\ ``LogoutSuccessHandler``\ のメソッドを呼び出し、画面遷移を行う。
+
+|
+
+\ ``LogoutHandler``\ の実装クラスは複数存在し、それぞれ以下の役割をもっている。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **主なLogoutHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SecurityContextLogoutHandler``\
+      - | ログインユーザーの認証情報のクリアとセッションの破棄を行うクラス。
+    * - | \ ``CookieClearingLogoutHandler``\
+      - | 指定したクッキーを削除するためのレスポンスを行うクラス。
+    * - | \ ``CsrfLogoutHandler``\
+      - | CSRF対策用トークンの破棄を行うクラス。
+
+これらの\ ``LogoutHandler``\ は、Spring Securityが提供しているbean定義をサポートするクラスが自動で\ ``LogoutFilter``\ に設定する仕組みになっているため、
+基本的にはアプリケーションの開発者が直接意識する必要はない。
+また、:ref:`Remember Me認証機能<SpringSecurityAuthenticationRememberMe>` を有効にすると、Remember Me認証用のTokenを破棄するための\ ``LogoutHandler``\ の実装クラスも設定される。
+
+|
+
+ログアウト処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ログアウト処理を適用するためには、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout /> <!-- (1) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+
+   * - 項番
+     - 説明
+   * - | (1)
+     - | \ ``<sec:logout>``\ タグを定義することで、ログアウト処理が有効となる。
+
+.. note:: **Spring Security 4.0における変更**
+
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
+
+    * logout-url 
+
+.. tip:: **Cookieの削除**
+
+   本ガイドラインでは説明を割愛するが、 \ ``<sec:logout>``\ タグには、ログアウト時に指定したCookieを削除するための\ ``delete-cookies``\ 属性が存在する。
+   ただし、この属性を使用しても正常にCookieが削除できないケースが報告されている。
+
+   詳細はSpring Securityの以下のJIRAを参照されたい。
+
+   * https://jira.spring.io/browse/SEC-2091
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、\ ``"/logout"``\ というパスにリクエストを送るとログアウト処理が行われる。
+ログアウト処理では、「ログインユーザーの認証情報のクリア」「セッションの破棄」が行われる。
+
+また、
+
+* CSRF対策を行っている場合は、「CSRF対策用トークンの破棄」
+* Remember Me認証機能を使用している場合は、「Remember Me認証用のTokenの破棄」
+
+も行われる
+
+.. _SpringSecurityAuthenticationLogoutForm:
+
+* ログアウト処理を呼び出すためのJSPの実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    <form:form action="${pageContext.request.contextPath}/logout" method="post"> <%-- (1) --%>
+        <button>ログアウト</button>
+    </form:form>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ログアウト用のフォームを作成する。
+        | また、\ ``<form:form>``\ を使用することで、CSRF対策用のトークン値がリクエストパラメータで送信される。
+        | CSRF対策については、「:ref:`SpringSecurityCsrf`」で説明する。
+
+.. note:: **CSRFトークンの送信**
+
+    CSRF対策を有効にしている場合は、CSRF対策用のトークンをPOSTメソッドを使って送信する必要がる。
+
+|
+
+ログアウト成功時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、ログアウト成功時のレスポンスを制御するためのコンポーネントとして、
+\ ``LogoutSuccessHandler``\ というインタフェースと実装クラスを提供している。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **AuthenticationFailureHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - 実装クラス
+      - 説明
+    * - | \ ``SimpleUrlLogoutSuccessHandler``\
+      - | 指定したパス(\ ``defaultTargetUrl``\ )にリダイレクトを行う実装クラス。
+
+
+デフォルトの動作
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"logout"``\
+というクエリパラメータが付与されたURLにリダイレクトする。
+
+例として、ログインフォームを表示するためのパスが\ ``"/login"``\ の場合は\ ``"/login?logout"``\
+にリダイレクトされる。
+
+|
+
+.. _SpringSecurityAuthenticationAccess:
+
+認証情報へのアクセス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証されたユーザーの認証情報は、Spring Securityのデフォルト実装ではセッションに格納される。
+セッションに格納された認証情報は、リクエスト毎に\ ``SecurityContextPersistenceFilter``\ クラスによって\ ``SecurityContextHolder``\ というクラスに格納され、同一スレッド内であればどこからでもアクセスすることができるようになる。
+
+ここでは、認証情報から\ ``UserDetails``\ を取得し、取得した\ ``UserDetails``\ が保持している情報にアクセスする方法を説明する。
+
+Javaからのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+一般的な業務アプリケーションでは、「いつ」「誰が」「どのデータに」「どのようなアクセスをしたか」を記録する監査ログを取得することがある。
+このような要件を実現する際の「誰が」は、認証情報から取得することができる。
+
+* Javaから認証情報へアクセスする実装例
+
+.. code-block:: java
+
+    Authentication authentication =
+            SecurityContextHolder.getContext().getAuthentication(); // (1)
+    String userUuid = null;
+    if (authentication.getPrincipal() instanceof AccountUserDetails) {
+        AccountUserDetails userDetails =
+                AccountUserDetails.class.cast(authentication.getPrincipal()); // (2)
+        userUuid = userDetails.getAccount().getUserUuid(); // (3)
+    }
+    if (log.isInfoEnabled()) {
+        log.info("type:Audit\tuserUuid:{}\tresource:{}\tmethod:{}",
+                userUuid, httpRequest.getRequestURI(), httpRequest.getMethod());
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``SecurityContextHolder``\ から認証情報(\ ``Authentication``\ オブジェクト) を取得する。
+    * - | (2)
+      - | \ ``Authentication#getPrincipal()``\ メソッドを呼び出して、\ ``UserDetails``\ オブジェクトを取得する。
+        | 認証済みでない場合(匿名ユーザーの場合)は、匿名ユーザーであることを示す文字列が返却されるため注意されたい。
+    * - | (3)
+      - | \ ``UserDetails``\ から処理に必要な情報を取得する。
+        | ここでは、ユーザーを一意に識別するための値(UUID)を取得している。
+
+.. warning:: **認証情報へのアクセスと結合度**
+
+    Spring Securityのデフォルト実装では、認証情報をスレッドローカルの変数に格納しているため、リクエストを受けたスレッドと同じスレッドであればどこからでもアクセス可能である。
+    この仕組みは便利ではあるが、認証情報を必要とするクラスが\ ``SecurityContextHolder``\ クラスに直接依存してしまうため、乱用するとコンポーネントの疎結合性が低下するので注意が必要である。
+
+    Spring Securityでは、Spring MVCの機能と連携してコンポーネント間の疎結合性を保つための仕組みを別途提供している。
+    Spring MVCとの連携方法については、「:ref:`SpringSecurityAuthenticationIntegrationWithSpringMVC`」で説明する。
+    **本ガイドラインではSpring MVCとの連携を使用して認証情報を取得することを推奨する。**
+
+|
+
+JSPからのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+一般的なWebアプリケーションでは、ログインユーザーのユーザー情報などを画面に表示することがある。
+このような要件を実現する際のログインユーザーのユーザー情報は、認証情報から取得することができる。
+
+* JSPから認証情報へアクセスする実装例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+    <%-- omitted --%>
+    ようこそ、
+    <sec:authentication property="principal.account.lastName"/> <%-- (1) --%>
+    さん。
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityから提供されている\ ``<sec:authentication>``\ タグを使用して、認証情報(\ ``Authentication``\ オブジェクト) を取得する。
+        | \ ``property``\ 属性にアクセスしたいプロパティへのパスを指定する。
+        | ネストしているオブジェクトへアクセスしたい場合は、プロパティ名を\ ``"."``\ でつなげればよい。
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``property``\ 属性に指定したプロパティを\ ``var``\ 属性にした名前で変数に格納できる。
-   * - | (2)
-     - | (1)で変数に格納した後はJSP内で\ ``UserDetails``\ にアクセスできる。
+.. tip:: **認証情報の表示方法**
 
-.. note::
+    ここでは、認証情報が保持するユーザー情報を表示する際の実装例を説明したが、\ ``var``\ 属性と\ ``scope``\ 属性を組み合わせて任意のスコープ変数に値を格納することも可能である。
+    ログインユーザーの状態によって表示内容を切り替えたい場合は、ユーザー情報を変数に格納しておき、JSTLのタグライブラリなどを使って表示を切り替えることが可能である。
 
-  Controller内で\ ``UserDetails``\ を取得して\ ``Model``\ に追加することもできるが、JSPに表示する際はJSPタグを使用すればよい。
+    上記の例は、以下のように記述することでも実現することができる。
+    本例では、\ ``scope``\ 属性を省略しているため、\ ``page``\スコープが適用される。
 
+        .. code-block:: jsp
 
-.. note::
-  
-  :ref:`userDetailsService`\ で説明した\ ``JdbcDaoImpl``\ が生成する\ ``UserDetails``\ は「ユーザーID」や「権限」といった最低限の情報しか保持していない。
-  画面の表示項目として「ユーザー姓名」など他のユーザー情報が必要な場合は\ ``UserDetails``\ と \ ``UserDetailsService``\ を拡張する必要がある。
-  拡張方法については、\ :ref:`extendsuserdetailsservice`\ を参照されたい。
+            <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+            <%-- omitted --%>
+            <sec:authentication var="principal" property="principal"/>
+            <%-- omitted --%>
+            ようこそ、
+            ${f:h(principal.account.lastName)}
+            さん。
+
+|
 
+.. _SpringSecurityAuthenticationIntegrationWithSpringMVC:
 
-.. _authentication(spring_security)_how_to_use_sessionmanagement:
+認証処理とSpring MVCの連携
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Spring Securityにおけるセッション管理
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| ログイン時のセッション情報の生成方式や、例外発生時の設定を行う方法について説明する。
-| \ ``<session-management>``\ タグを指定することで、セッションの管理方法をカスタマイズする事ができる。
+Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
+ここでは、認証処理と連携するためのコンポーネントの使い方を説明する。
+
+認証情報へのアクセス
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-| 以下にspring-security.xmlの設定例を示す。
+Spring Securityは、認証情報(\ ``UserDetails``\ )をSpring MVCのコントローラーのメソッドに引き渡すためのコンポーネントとして、\ ``AuthenticationPrincipalArgumentResolver``\ クラスを提供している。
+\ ``AuthenticationPrincipalArgumentResolver``\ を使用すると、コントローラーのメソッド引数として\ ``UserDetails``\ インタフェースまたはその実装クラスのインスタンスを受け取ることができるため、コンポーネントの疎結合性を高めることができる。
 
+認証情報(\ ``UserDetails``\ )をコントローラーの引数として受け取るためには、まず\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する必要がある。
+\ ``AuthenticationPrincipalArgumentResolver``\ を適用するためのbean定義は以下の通りである。
+\ なお、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ には\ ``AuthenticationPrincipalArgumentResolver``\ が設定済みである。
+
+* spring-mvc.xmlの定義例
 
 .. code-block:: xml
 
-  <sec:http auto-config="true" create-session="ifRequired" ><!-- (1) -->
-    <!-- omitted -->
-    <sec:session-management
-      invalid-session-url="/"
-      session-authentication-error-url="/"
-      session-fixation-protection="migrateSession" /><!-- 属性の指定順番で(2)～(4) -->
-    <!-- omitted -->
-  </sec:http>
+    <mvc:annotation-driven>
+        <mvc:argument-resolvers>
+            <!-- omitted -->
+            <!-- (1) -->
+            <bean class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
+            <!-- omitted -->
+        </mvc:argument-resolvers>
+  </mvc:annotation-driven>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<http>``\ タグの\ ``create-session``\ 属性には、セッションの作成方針を指定する。
-       | 以下の値を指定することができる。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``HandlerMethodArgumentResolver``\ の実装クラスとして、\ ``AuthenticationPrincipalArgumentResolver``\ をSpring MVCに適用する。
 
-       * | \ ``always``\ :
-         | Spring Securityは、既存のセッションがない場合にセッションを新規作成する、セッションが存在すれば、再利用する。
+|
 
-       * | \ ``ifRequired``\ : (デフォルト)
-         | Spring Securityは、セッションが必要であれば作成する。セッションがすでにあれば、作成せずに再利用する。
+認証情報(\ ``UserDetails``\ )をコントローラーのメソッドで受け取る際は、以下のようなメソッドを作成する。
 
-       * | \ ``never``\ :
-         | Spring Securityは、セッションを作成しないが、セッションが存在すれば、再利用する。
+* 認証情報(UserDetails)を受け取るメソッドの作成例
 
-       * | \ ``stateless``\ :
-         | Spring Securityは、セッションを作成しない、セッションが存在しても使用しない。そのため、毎回認証を行う必要がある。
-   * - | (2)
-     - | \ ``invalid-session-url``\ 属性には、無効なセッションIDがリクエストされた(セッションタイムアウトが発生した)場合に遷移するパスを指定する。
-       | 指定しない場合、セッションの存在チェックは実行されずに後続処理が呼び出される。
-       | 詳細は、「:ref:`authentication_session-timeout`」を参照されたい。
-   * - | (3)
-     - | \ ``session-authentication-error-url``\ 属性には、\ ``org.springframework.security.web.authentication.session.SessionAuthenticationStrategy``\ で例外が発生した場合に遷移するパスを指定する。
-       | 指定しない場合、レスポンスコードに「401 Unauthorized」が設定され、エラー応答が行われる。
-       |
-       | 本設定は、\ ``<form-login>``\ タグを使用して認証を行う場合は使用されない。\ ``SessionAuthenticationStrategy``\ で発生した例外は、\ ``<form-login>``\ タグの\ ``authentication-failure-url``\ 属性 又は\ ``authentication-failure-handler-ref``\ 属性の定義に応じてハンドリングされる。
-   * - | (4)
-     - | \ ``session-fixation-protection``\ 属性には、認証成功時のセッション管理方式を指定する。
-       | 以下の値を指定することができる。
+.. code-block:: java
 
-       * | \ ``none``\ ：
-         | ログイン前のセッションをそのまま利用する。
+    @RequestMapping("account")
+    @Controller
+    public class AccountController {
 
-       * | \ ``migrateSession``\ ： (Servlet 3.0以前のコンテナ上でのデフォルト)
-         | ログイン前のセッションを破棄して新しいセッションを新たに作成し、ログイン前のセッションに格納していた情報を引き継ぐ。
+        public String view(
+                @AuthenticationPrincipal AccountUserDetails userDetails, // (1)
+                Model model) {
+            model.addAttribute(userDetails.getAccount());
+            return "profile";
+        }
 
-       * | \ ``changeSessionId``\ ： (Servlet 3.1以降のコンテナ上でのデフォルト)
-         | Servlet 3.1から追加された\ ``javax.servlet.http.HttpServletRequest#changeSessionId()``\ メソッドを使用してセッションIDを変更する。
+    }
 
-       * | \ ``newSession``\ ：
-         | ログイン前のセッションを破棄して新しいセッションを新たに作成し、ログイン前のセッションに格納していた情報は引き継がない。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-       | 本機能の目的は、新しいセッションIDをログイン毎に割り振ることで、\ `セッション・フィクセーション攻撃 <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#ns-session-fixation>`_\を防ぐことにある。そのため、明確な意図がない限り、デフォルト値を使用することを推奨する。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認証情報(\ ``UserDetails``\ ) を受け取るための引数を宣言し、\ ``@org.springframework.security.core.annotation.AuthenticationPrincipal``\を引数アノテーションとして指定する。
+        | \ ``AuthenticationPrincipalArgumentResolver``\ は、\ ``@AuthenticationPrincipal``\ が付与されている引数に認証情報(\ ``UserDetails``\ )が設定される。
 
 |
 
-.. _authentication_session-timeout:
+.. _SpringSecurityAuthenticationHowToExtend:
 
-セッションタイムアウトの検出
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+How to extend
+--------------------------------------------------------------------------------
 
-セッションタイムアウトを検出したい場合は、
-\ ``invalid-session-url``\ 属性にセッションタイムアウトが発生した際に遷移するパスを指定すればよい。
+本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
 
-\ ``invalid-session-url``\ 属性を指定すると、
-\ ``http``\ 要素の\ ``pattern``\ 属性に指定したパスパターンに一致する全てのリクエストに対して、
-セッションの存在チェック(リクエストされたセッションIDの存在チェック)が行われる。
+Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントを紹介することはできないため、ここでは代表的なカスタマイズポイントに絞って説明を行う。
 
-.. note::
+|
 
-    セッションタイムアウトを検出するパスと検出しないパスが混在する場合は、\ ``http``\ 要素を複数定義する必要がある。
-    \ ``http``\ 要素を複数定義すると、設定が冗長になりメンテナンス性が低下する事があるので注意が必要である。
+.. _SpringSecurityAuthenticationCustomizingForm:
 
-    セッションタイムアウトを検出するために設定が冗長になる場合は、適用パスや除外パスの指定ができるカスタムフィルタを作成することを検討してほしい。
-    カスタムフィルタを作成する際には、Spring Securityから提供されている以下のクラスを利用又は参考にするとよい。
+フォーム認証のカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-    * | ``org.springframework.security.web.session.SessionManagementFilter``
-      | セッションの存在チェック(リクエストされたセッションIDの存在チェック)を行う処理が実装されている。
+フォーム認証処理のカスタマイズポイントを説明する。
 
-    * | ``org.springframework.security.web.session.SimpleRedirectInvalidSessionStrategy``
-      | セッションタイムアウト(無効なセッションID)を検出した後の処理が実装されている。
-      | デフォルトでは、セッションを生成した後に指定されたパスへリダイレクトする。
+認証パスの変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-    * | ``org.springframework.security.web.util.matcher.RequestMatcher``
-      | リクエストのマッチング判定を行うためのインタフェースであり、適用パスや除外パスの判定処理で利用できる。
-      | 同じパッケージ内にいくつかの便利な実装クラスが提供されている。
+Spring Securityのデフォルトでは、認証処理を実行するためのパスは「\ ``"/login"``\」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
 
-.. note::
+* spring-security.xmlの定義例
 
-    \ ``<csrf>``\ 要素を指定して\ :doc:`CSRF`\ を行っている場合は、CSRF対策機能によってセッションタイムアウトが検出されるケースがある。
+.. code-block:: xml
 
-    以下に、CSRF対策機能によってセッションタイムアウトが検出される条件を示す。
+  <sec:http>
+    <sec:form-login login-processing-url="/authentication" /> <!-- (1) --> 
+    <!-- omitted -->
+  </sec:http>
 
-    * CSRFトークンの保存先をHTTPセッション(デフォルト)にしている。
-    * HTTPセッションからCSRFトークンが取得できない。
-    * \ :ref:`CSRFトークンのチェック対象になっているリクエスト <csrf_default-add-token-method>` \ である。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-    CSRF対策機能によってセッションタイムアウトが検出された場合は、以下のいずれかの動作となる。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``login-processing-url``\ 属性に認証処理を行うためのパスを指定する。
 
-    * \ ``invalid-session-url``\ 属性の指定がある場合は、セッションを生成した後に\ ``invalid-session-url``\ に指定したパスへリダイレクトされる。
-    * \ ``invalid-session-url``\ 属性の指定がない場合は、\ ``<access-denied-handler>``\ 要素に指定した\ ``org.springframework.security.web.access.AccessDeniedHandler``\ の定義に従ったハンドリングが行われる。
+.. note::
 
-    \ ``AccessDeniedHandler``\ の定義方法については、「:ref:`csrf_spring-security-setting`」を参照されたい。
+    認証処理のパスを変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` のリクエスト先も変更する必要がある。
 
 |
 
-.. _authentication_control-user-samatime-session:
-
-Concurrent Session Controlの利用設定
+資格情報を送るリクエストパラメータ名の変更
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Spring Securityでは、1ユーザが同時にログインできるセッション数を制御する機能(\ `Concurrent Session Control <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#concurrent-sessions>`_\ )を提供している。
-| ここでいうユーザとは、\ ``Authentication.getPrincipal()``\ で取得される、認証ユーザーオブジェクトのことである。
+
+Spring Securityのデフォルトでは、資格情報(ユーザー名とパスワード)を送るためのリクエストパラメータは「\ ``username``\」と「\ ``password``\ 」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+  <sec:http>
+      <sec:form-login
+          username-parameter="uid"
+          password-parameter="pwd" /> <!-- (1) (2) -->
+      <!-- omitted -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``username-parameter``\ 属性にユーザー名のリクエストパラメータ名を指定する。
+    * - | (2)
+      - | \ ``password-parameter``\ 属性にパスワードのリクエストパラメータ名を指定する。
 
 .. note::
 
-   この機能はアプリケーションサーバが1台構成、またはセッションサーバやクラスタによるセッションレプリケーションを実施している（つまり、全てのアプリケーションが同じセッション領域を利用している）場合に有効である。
-   複数台または複数インスタンスで構成していて、セッション領域が別々に存在する場合は、本機能では同時ログインを制御できないので注意すること。
+    リクエストパラメータ名を変更した場合は、:ref:`ログインフォーム<SpringSecurityAuthenticationLoginForm>` 内の項目名も変更する必要がある。
 
 |
 
-| 最大セッション数を超えた場合の制御方法は、次のパターンが存在する。業務要件によって使い分けること。
+認証成功時のレスポンスのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+認証成功時のレスポンスのカスタマイズポイントを説明する。
 
-#. 1ユーザの最大セッション数を超過した場合、最も使用されていないユーザを無効にする (後勝ち)
-#. 1ユーザの最大セッション数を超過した場合、新規ログインを受け付けない (先勝ち)
+デフォルト遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-どちらの場合も、この機能を有効にするためにはweb.xmlに以下の設定を追加する必要がある。
+ログインフォームを自分で表示して認証処理を行った後の遷移先(デフォルトURL)は、
+Webアプリケーションのルートパス(\ ``"/"``\ )だが、以下のようなbean定義を行うことで変更することが可能である。
 
-.. _HttpSessionEventPublisher-ref:
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
-    <listener>
-      <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class><!-- (1) -->
-    </listener>
+  <sec:http>
+      <sec:form-login default-target-url="/menu" /> <!-- (1) -->
+  </sec:http>
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Concurrent Session Control を使用するに当たり、\ ``org.springframework.security.web.session.HttpSessionEventPublisher``\ を、listenerに定義する必要がある。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``default-target-url``\ 属性に認証成功時に遷移するデフォルトのパスを指定する。
 
-.. _authentication_concurrency-control:
+|
 
-\ ``<sec:concurrency-control>``\ の設定
+遷移先の固定化
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-Concurrent Session Controlを利用する場合は、
-\ ``<sec:session-management>``\ 要素の子要素として\ `<sec:concurrency-control> <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#ns-concurrent-sessions>`_\ 要素を指定する。
+Spring Securityのデフォルトの動作では、未認証時に認証が必要なページへのリクエストを受信した場合は、受信したリクエストを一旦HTTPセッションに保存し、認証ページに遷移する。
+認証成功時にリクエストを復元してリダイレクトするが、以下のようなbean定義を行うことで常に同じ画面に遷移させることが可能である。
+
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
-  <sec:http auto-config="true" >
-    <sec:session-management>
-        <sec:concurrency-control
-            error-if-maximum-exceeded="true"
-            max-sessions="2"
-            expired-url="/expiredSessionError.jsp" /><!-- 属性の指定順番で(1)～(3) -->
-    </sec:session-management>
+  <sec:http>
+      <sec:form-login
+          default-target-url="/menu"
+          always-use-default-target="true" /> <!-- (1) -->
   </sec:http>
 
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.20\linewidth}|p{0.30\linewidth}|p{0.10\linewidth}|p{0.30\linewidth}|
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 20 30 10 30
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 属性名
-     - 説明
-     - デフォルト値
-     - デフォルト値説明
-   * - | (1)
-     - | \ ``error-if-maximum-exceeded``\
-     - | ログイン可能な最大セッション数を超えている状態でログイン要求があった場合の挙動を指定する。
-       | \ ``true``\ を設定した場合、認証エラーを発生させて、新規ログインを受け付けない。（先勝ち）
-     - | false
-     - | ログインが可能となり、最も使用されていない(最終アクセス時刻が最も古い)セッションが無効化される。無効化されたセッションを利用しているクライアントからリクエストが発生した場合は、\ ``expired-url``\属性で指定したURLへ遷移する。（後勝ち）
-   * - | (2)
-     - | \ ``max-sessions``\
-     - | 1ユーザでログイン可能な最大セッション数を指定する。
-       | 2を設定した場合、同じユーザで2つのセッションでログインが可能となる。
-     - | 1
-     - | デフォルトは1セッションのみ
-   * - | (3)
-     - | \ ``expired-url``\
-     - | 無効化されたセッションを利用しているクライアントからリクエストが発生した場合に遷移するURL。
-     - | 無し
-     - | セッションが無効化されたことを通知する固定メッセージが応答される。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``always-use-default-target``\ 属性に\ ``true``\ を指定する。
 
-.. _authentication_session-authentication-strategy-ref:
+|
 
-.. note::
+AuthenticationSuccessHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
+以下のようなbean定義を行うことで\ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスを直接適用することができる。
 
-    認証処理用のフィルタ(FORM_LOGIN_FILTER)をカスタマイズする場合は、
-    \ ``<sec:concurrency-control>``\ 要素の指定に加えて、以下の２つの\ ``SessionAuthenticationStrategy``\ クラスを有効化する必要がある。
+* spring-security.xmlの定義例
 
-    * | ``org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy``
-      | 認証成功後にログインユーザ毎のセッション数をチェックするクラス。
+.. code-block:: xml
+
+  <bean id="authenticationSuccessHandler" class="com.example.app.security.handler.MyAuthenticationSuccessHandler"> <!-- (1) -->
+
+  <sec:http>
+      <sec:form-login authentication-success-handler-ref="authenticationSuccessHandler" /> <!-- (2) -->
+  </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-    * | ``org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy``
-      | 認証に成功したセッションをセッション管理領域に登録するクラス。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationSuccessHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | ``authentication-success-handler-ref``\ 属性に定義した\ ``authenticationSuccessHandler``\ を指定する。
 
-    version 1.0.x.RELEASEで依存しているSpring Security 3.1では、\ ``org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy``\ というクラスが提供されていたが、
-    Spring Security 3.2より非推奨のAPIになっている。
-    Spring Security 3.1からSpring Security 3.2以降にバージョンアップする場合は、以下のクラスを組み合わせて使用するように変更する必要がある。
+.. warning:: **AuthenticationSuccessHandlerの責務**
 
-    * ``ConcurrentSessionControlAuthenticationStrategy`` (Spring Security 3.2で追加)
-    * ``RegisterSessionAuthenticationStrategy`` (Spring Security 3.2で追加)
-    * ``org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy``
+    \ ``AuthenticationSuccessHandler``\ は、認証成功時におけるWeb層の処理(主に画面遷移に関する処理)を行うためのインタフェースである。
+    そのため、認証失敗回数のクリアなどのビジネスルールに依存する処理（ビジネスロジック）をこのインタフェースの実装クラスを経由して呼び出すべきではない。
 
-    具体的な定義方法については、
-    `Spring Security Reference -Web Application Security (Concurrency Control)- <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#concurrent-sessions>`_ のサンプルコードを参考にされたい。
+    ビジネスルールに依存する処理の呼び出しは、前節で紹介している「:ref:`SpringSecurityAuthenticationEvent`」の仕組みを使用されたい。
 
 |
 
-.. _authentication-failure-handler-ref:
+.. _SpringSecurityAuthenticationCustomizingScreenFlowOnFailure:
 
-認証エラー時のハンドラクラスの設定
+認証失敗時のレスポンスのカスタマイズ
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-|  \ ``<sec:form-login>``\ 要素の\ ``authentication-failure-handler-ref``\ 属性に
-| \ ``org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler``\ クラスの設定をし、
-| 認証エラー時に送出される例外と、それに対応した遷移先を指定できる。
-| 指定する遷移先は、未認証ユーザがアクセス可能であること。
 
-spring-security.xml
+認証失敗時のレスポンスのカスタマイズポイントを説明する。
+
+遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの動作では、ログインフォームを表示するためのパスに\ ``"error"``\ というクエリパラメータが付与されたURLにリダイレクトするが、
+以下のようなbean定義を行うことで変更することが可能である。
+
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
-    <sec:http auto-config="true" use-expressions="true">
-      <sec:form-login login-page="/login"
-          authentication-failure-handler-ref="authenticationFailureHandler"
-          authentication-success-handler-ref="authenticationSuccessHandler" />
-    </sec:http>
+  <sec:http>
+      <sec:form-login authentication-failure-url="/loginFailure" /> <!-- (1) -->
+  </sec:http>
 
-    <bean id="authenticationFailureHandler"
-    class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
-    <property name="defaultFailureUrl" value="/login/defaultError" /><!-- (1) -->
-      <property name="exceptionMappings"><!-- (2) -->
-        <props>
-          <prop key=
-            "org.springframework.security.authentication.BadCredentialsException"><!-- (3) -->
-              /login/badCredentials
-          </prop>
-          <prop key=
-            "org.springframework.security.core.userdetails.UsernameNotFoundException"><!-- (4) -->
-              /login/usernameNotFound
-          </prop>
-          <prop key=
-            "org.springframework.security.authentication.DisabledException"><!-- (5) -->
-              /login/disabled
-          </prop>
-          <prop key=
-            "org.springframework.security.authentication.ProviderNotFoundException"><!-- (6) -->
-              /login/providerNotFound
-          </prop>
-          <prop key=
-            "org.springframework.security.authentication.AuthenticationServiceException"><!-- (7) -->
-              /login/authenticationService
-          </prop>
-          <!-- omitted -->
-        </props>
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - |  (1)
+      - | \ ``authentication-failure-url``\ 属性に認証失敗時に遷移するパスを指定する。
+
+|
+
+AuthenticationFailureHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、
+以下のようなbean定義を行うことで\ ``AuthenticationFailureHandler``\ インタフェースの実装クラスを直接適用することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+   <!-- (1) -->
+  <bean id="authenticationFailureHandler"
+      class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler" />
+      <property name="defaultFailureUrl" value="/login/systemError" /> <!-- (2) -->
+      <property name="exceptionMappings"> <!-- (3) -->
+          <props>
+              <prop key="org.springframework.security.authentication.BadCredentialsException"> <!-- (4) -->
+                  /login/badCredentials
+              </prop>
+              <prop key="org.springframework.security.core.userdetails.UsernameNotFoundException"> <!-- (5) -->
+                  /login/usernameNotFound
+              </prop>
+              <prop key="org.springframework.security.authentication.DisabledException"> <!-- (6) -->
+                  /login/disabled
+              </prop>
+              <!-- omitted -->
+          </props>
       </property>
-    </bean>
+  </bean>
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+  <sec:http>
+      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" /> <!-- (7) -->
+  </sec:http>
+
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 20 80
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | エラー時のデフォルトの遷移先パスを指定する。
-       | 後述する\ ``exceptionMappings``\ プロパティに定義していない例外が発生した場合、本プロパティで指定した遷移先に遷移する。
-   * - | (2)
-     - | catchする例外と、例外発生時の遷移先を、リスト形式で指定する。
-       | keyに例外クラスを指定し、値に遷移先を設定する。
+    * - | 項番
+      - | 説明
+    * - | (1)
+      - | \ ``AuthenticationFailureHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | \ ``defaultFailureUrl``\ 属性にデフォルトの遷移先のURLを指定する。
+        | 下記(4)-(6)の定義に合致しない例外が発生した際は、本設定の遷移先に遷移する。
+    * - | (3)
+      - | \ ``exceptionMappings``\ プロパティにハンドルする\ ``org.springframework.security.authentication.AuthenticationServiceException``\ の実装クラスと例外発生時の遷移先を \ ``Map``\ 形式で設定する。
+        | キーに\ ``org.springframework.security.authentication.AuthenticationServiceException``\ 実装クラスを設定し、値に遷移先URLを設定する。
+    * - | (4)
+      - | \ ``BadCredentialsException``\ 
+        | パスワード照合失敗による認証エラー時にスローされる。
+    * - | (5)
+      - | \ ``UsernameNotFoundException``\ 
+        | 不正ユーザーID（存在しないユーザーID）による認証エラー時にスローされる。
+        | ``org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider``\ を
+        | 継承したクラスを認証プロバイダに指定している場合、``hideUserNotFoundExceptions``\ プロパティを\ ``false``\ に変更しないと本例外は、\ ``BadCredentialsException``\ に変更される。
+    * - | (6)
+      - | \  ``DisabledException``\
+        | 無効ユーザーIDによる認証エラー時にスローされる。
+    * - | (7)
+      - | \ ``authentication-failure-handler-ref``\ 属性に\ ``authenticationFailureHandler``\ を設定する。
 
-.. note::
+.. note:: **例外発生時の制御**
 
     \ ``exceptionMappings``\ プロパティに定義した例外が発生した場合、例外にマッピングした遷移先にリダイレクトされるが、
     発生した例外オブジェクトがセッションスコープに格納されないため、Spring Securityが生成したエラーメッセージを画面に表示する事ができない。
@@ -1021,391 +1769,340 @@ spring-security.xml
     * ``useForward``
     * ``allowSessionCreation``
 
+|
 
-.. _SpringSecurity-Exception:
-
-Spring Securityがスローする代表的な例外を、以下に記述する。
-
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.25\linewidth}|p{0.25\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 25 65
-
-   * - 項番
-     - エラーの種類
-     - 説明
-   * - | (3)
-     - \ ``BadCredentialsException``\ 
-     - パスワード照合失敗による認証エラー時にスローされる。
-   * - | (4)
-     - \ ``UsernameNotFoundException``\ 
-     - | 不正ユーザID（存在しないユーザID）による認証エラー時にスローされる。
-       | \ ``org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider``\ を継承したクラスを認証プロバイダに指定している場合、
-       | \ ``hideUserNotFoundExceptions``\ を\ ``false``\ に変更しないと上記例外は、\ ``BadCredentialsException``\ に変更される。
-   * - | (5)
-     - \ ``DisabledException``\ 
-     - 無効ユーザIDによる認証エラー時に、スローされる。
-   * - | (6)
-     - \ ``ProviderNotFoundException``\ 
-     - | 認証プロバイダクラス未検出エラー時にスローされる。
-       | 設定誤り等の理由から、認証プロバイダクラスが不正な場合に発生する。
-   * - | (7)
-     - \ ``AuthenticationServiceException``\ 
-     - | 認証サービスエラー時にスローされる。
-       | DB接続エラー等、認証サービス内で何らかのエラーが発生した際に発生する。
-
-.. warning::
+ログアウト処理のカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-  本例では、\ ``UsernameNotFoundException``\ をハンドリングして遷移させているが、
-  ユーザIDが存在しないことを利用者に知らせると、特定のIDの存在有無が判明するため、セキュリティの観点上望ましくない。
-  そのため、ユーザに通知するメッセージには、例外の種類によって区別をしない画面遷移、メッセージにした方がよい。
+ログアウト処理のカスタマイズポイントを説明する。
 
-.. _form-logout:
+ログアウトパスの変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-\ ``<sec:logout>``\ 要素の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 本節では、\ ``<sec:logout>``\ 要素の設定方法を説明する。
+Spring Securityのデフォルトでは、ログアウト処理を実行するためのパスは「\ ``"/logout"``\」であるが、
+以下のようなbean定義を行うことで変更することが可能である。
 
-spring-security.xml
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
-  <sec:http auto-config="true" use-expressions="true">
-    <!-- omitted -->
-    <sec:logout
-        logout-url="/logout"
-        logout-success-url="/"
-        invalidate-session="true"
-        delete-cookies="JSESSIONID"
-        success-handler-ref="logoutSuccessHandler"
-      /> <!-- 属性の指定順番で(1)～(5) -->
-    <!-- omitted -->
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout logout-url="/auth/logout" /> <!-- (1) -->
+      <!-- omitted -->
   </sec:http>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``logout-url``\ 属性に、ログアウト処理を実行するためのパスを指定する。
-       | 指定がない場合、「/j_spring_security_logout」がデフォルトのパスになる。
-
-       | **本ガイドラインでは、上記のデフォルト値「/j_spring_security_logout」を使用せず、システム独自の値に変更することを推奨する。** この例では”/logout”を指定している。
-   * - | (2)
-     - | \ ``logout-success-url``\ 属性に、ログアウト後の遷移先パスを指定する。
-       | 指定がない場合、「/」がデフォルトのパスになる。
+    :header-rows: 1
+    :widths: 10 90
 
-       | 本属性を指定した場合、\ ``success-handler-ref``\ 属性を指定すると起動時にエラーとなる。
-   * - | (3)
-     - | \ ``invalidate-session``\ 属性に、ログアウト時にセッションを破棄するかを設定する。
-       | デフォルトは\ ``true``\ である。
-       | \ ``true``\ の場合、ログアウト時にセッションが破棄される。
-   * - | (4)
-     - | \ ``delete-cookies``\ 属性に、ログアウト時に削除するクッキー名を列挙する。
-       | 複数記述する場合は「,」で区切る。
-   * - | (5)
-     - | \ ``success-handler-ref``\ 属性に、ログアウト成功後に呼び出すハンドラクラスを指定する。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``logout-url``\ 属性を設定し、ログアウト処理を行うパスを指定する。
 
-       | 本属性を指定した場合、\ ``logout-success-url``\ 属性を指定すると起動時にエラーとなる。
+.. note::
 
-.. warning:: **Spring Security のデフォルト値「/j_spring_security_logout」の使用を推奨しない理由**
+    ログアウトパスを変更した場合は、:ref:`ログアウトフォーム<SpringSecurityAuthenticationLogoutForm>` のリクエスト先も変更する必要がある。
 
-    デフォルト値を使用している場合、そのアプリケーションが、Spring Securityを使用していることについて、露見してしまう。
-    そのため、Spring Securityの脆弱性が発見された場合、脆弱性をついた攻撃を受けるリスクが高くなる。
-    前述のリスクを避けるためにも、デフォルト値を使用しないことを推奨する。
+.. tip:: **システムエラー発生時の振る舞い**
+    システムエラーが発生した場合は、業務継続不可となるケースが多いと考えられる。
+    システムエラー発生後、業務を継続させたくない場合は、以下のような対策を講じることを推奨する。
+    
+      * システムエラー発生時にセッション情報をクリアする。
+      * システムエラー発生時に認証情報をクリアする。
+    
+    ここでは、共通ライブラリの例外ハンドリング機能を使用してシステム例外発生時に認証情報をクリアする例を説明する。
+    例外ハンドリング機能の詳細についは「\ :doc:`../ArchitectureInDetail/ExceptionHandling`\」を参照されたい。
 
-.. note::
+      .. code-block:: java
 
-    \ :doc:`./CSRF`\ で説明している\ ``<sec:csrf>``\ を利用している場合は、CSRFトークンチェックが行われるため、\ **ログアウトのリクエストをPOSTで送信し、CSRFトークンも送信する必要がある**\ 。
-    CSRFトークンを埋め込む方法を以下に記述する。
+        // (1)
+        public class LogoutSystemExceptionResolver extends SystemExceptionResolver {
+            // (2)
+            @Override
+            protected ModelAndView doResolveException(HttpServletRequest request,
+                    HttpServletResponse response, java.lang.Object handler,
+                    java.lang.Exception ex) {
 
-    * \ :ref:`csrf_formformtag-use`\
+                // SystemExceptionResolverの処理を行う
+                ModelAndView resulut = super.doResolveException(request, response,
+                        handler, ex);
 
-        .. code-block:: jsp
-           :emphasize-lines: 1,4
+                // 認証情報をクリアする (2)
+                SecurityContextHolder.clearContext();
 
-            <form:form method="POST"
-              action="${pageContext.request.contextPath}/logout">
-              <input type="submit" value="Logout" />
-            </form:form>
+                return resulut;
+            }
+        }
 
-        この場合は以下のようなHTMLが出力される。CSRFトークンがhiddenで設定されている。
+      .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+      .. list-table::
+          :header-rows: 1
+          :widths: 10 90
+      
+          * - 項番
+            - 説明
+          * - | (1)
+            - | \ ``org.terasoluna.gfw.web.exception.SystemExceptionResolver.SystemExceptionResolver``\ を拡張する。
+          * - | (2)
+            - | \ 認証情報をクリアする。
 
-        .. code-block:: html
+    なお、認証情報をクリアする方法以外にも、セッションをクリアすることでも、同様の要件を満たすことができる。
+    プロジェクトの要件に合わせて実装されたい。
 
-            <form id="command" action="/your-context-path/logout" method="POST">
-              <input type="submit" value="Logout" />
-              <input type="hidden" name="_csrf" value="5826038f-0a84-495b-a851-c363e501b73b" />
-            </form>
+|
 
-    * \ :ref:`csrf_formtag-use`\
+.. _SpringSecurityLogoutCustomizingScreenFlowOnSuccess:
 
-        .. code-block:: jsp
-           :emphasize-lines: 3
+ログアウト成功時のレスポンスのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-            <form  method="POST"
-              action="${pageContext.request.contextPath}/logout">
-              <sec:csrfInput/>
-              <input type="submit" value="Logout" />
-            </form>
+ログアウト処理成功時のレスポンスのカスタマイズポイントを説明する。
 
-        この場合も同様に以下のようなHTMLが出力される。CSRFトークンがhiddenで設定されている。
+遷移先の変更
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-        .. code-block:: html
+* spring-security.xmlの定義例
 
-            <form  method="POST"
-              action="/your-context-path/logout">
-              <input type="hidden" name="_csrf" value="5826038f-0a84-495b-a851-c363e501b73b" />
-              <input type="submit" value="Logout" />
-            </form>
+.. code-block:: xml
 
+  <sec:http>
+    <!-- omitted -->
+    <sec:logout logout-success-url="/logoutSuccess" /> <!-- (1) -->
+    <!-- omitted -->
+  </sec:http>
 
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-\ ``<sec:remember-me>``\ 要素の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``logout-success-url``\ 属性を設定し、ログアウト成功時に遷移するパスを指定する。
 
-| 「\ `Remeber Me <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#remember-me>`_\ 」とは、websiteに頻繁にアクセスするユーザの利便性を、高めるための機能の一つとして、
-| ログイン状態を保持する機能である。
-| 本機能は、ユーザがログイン状態を保持することを許可していた場合、ブラウザを閉じた後も
-| cookieにログイン情報を保持し、ユーザ名、パスワードを再入力しなくともログインすることができる機能である。
+|
 
-| \ ``<sec:remember-me>``\ 要素の属性について、以下に示す。
+LogoutSuccessHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-spring-security.xml
+* spring-security.xmlの定義例
 
 .. code-block:: xml
+  
+  <!-- (1) -->
+  <bean id="logoutSuccessHandler" class="com.example.app.security.handler.MyLogoutSuccessHandler" /> 
 
-  <sec:http auto-config="true" use-expressions="true">
-    <!-- omitted -->
-    <sec:remember-me key="terasoluna-tourreservation-km/ylnHv"
-            token-validity-seconds="#{30 * 24 * 60 * 60}" />  <!-- 属性の指定順番で(1)～(2) -->
-    <!-- omitted -->
+  <sec:http>
+      <!-- omitted -->
+      <sec:logout success-handler-ref="logoutSuccessHandler" /> <!-- (2) -->
+      <!-- omitted -->
   </sec:http>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``key``\ 属性に、Remeber Me用のcookieを保持しておくためのユニークなキーを指定する。
-       | 指定が無い場合、ユニークなキーを起動時に生成するため、起動時間向上を考えた場合指定しておくことを推奨する。
-   * - | (2)
-     - | 「\ ``token-validity-seconds``\ 属性に、Remeber Me用のcookieの有効時間を秒単位で指定する。この例では30日間を設定している。
-       | 指定が無い場合、デフォルトで14日間が有効期限になる。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``LogoutSuccessHandler``\ インタフェースの実装クラスをbean定義する。
+    * - | (2)
+      - | ``success-handler-ref``\ 属性に\ ``LogoutSuccessHandler``\ を設定する。
 
-上記以外の属性については、\ `Spring Security Reference -The Security Namespace(<remember-me>)- <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#nsa-remember-me>`_\ を参照されたい。
+|
 
-ログインフォームには以下のように「Remeber Me」機能を有効にするためのフラグを用意する必要がある。
+.. _SpringSecurityAuthenticationCustomizingMessage:
 
-.. code-block:: jsp
-  :emphasize-lines: 7-9
+エラーメッセージのカスタマイズ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-  <form method="post"
-    action="${pageContext.request.contextPath}/authentication">
-      <!-- omitted -->
-      <label for="_spring_security_remember_me">Remember Me : </label>
-      <input name="_spring_security_remember_me"
-        id="_spring_security_remember_me" type="checkbox"
-        checked="checked"> <!-- (1) -->
-      <input type="submit" value="LOGIN">
-      <!-- omitted -->
-  </form>
+認証に失敗した場合、Spring Securityが用意しているエラーメッセージが表示されるが、
+このエラーメッセージは変更することが可能である。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+メッセージ変更方法の詳細については、\ :doc:`../ArchitectureInDetail/MessageManagement`\ を参照されたい。
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | HTTPパラメータに、\ ``_spring_security_remember_me``\ を設定することで、
-       | \ ``true``\ でリクエストされた場合、次回の認証を回避することができる。
+システムエラー時のメッセージ
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-How to extend
---------------------------------------------------------------------------------
+認証処理の中で予期しないエラー（システムエラーなど）が発生した場合、\ ``InternalAuthenticationServiceException``\ という例外が発生する。
+\ ``InternalAuthenticationServiceException``\ が保持するメッセージには、原因例外のメッセージが設定されるため、画面にそのまま表示するのは適切ではない。
 
-.. _extendsuserdetailsservice:
+例えばユーザー情報をデーターベースから取得する時にDBアクセスエラーが発生した場合、\ ``SQLException``\ が保持する例外メッセージが画面に表示されることになる。
+システムエラーの例外メッセージを画面に表示させないためには、\ ``ExceptionMappingAuthenticationFailureHandler``\ を使用して\ ``InternalAuthenticationServiceException``\ をハンドリングし、
+システムエラーが発生したことを通知するためのパスに遷移させるなどの対応が必要となる。
 
-\ ``UserDetailsService``\ の拡張
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 認証時にユーザID、パスワード以外の情報も取得したい場合、
+* spring-security.xmlの定義例
 
-* \ ``org.springframework.security.core.userdetails.UserDetails``\ 
-* \ ``org.springframework.security.core.userdetails.userDetailsService``\ 
+.. code-block:: xml
 
-を実装する必要がある。
+    <bean id="authenticationFailureHandler"
+        class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
+        <property name="defaultFailureUrl" value="/login?error" />
+        <property name="exceptionMappings">
+            <props>
+                <prop key="org.springframework.security.authentication.InternalAuthenticationServiceException">
+                    /login?systemError
+                </prop>
+                <!-- omitted -->
+            </props>
+        </property>
+    </bean>
 
-ログインユーザーの氏名や所属部署などの付属情報を常に画面のヘッダーに表示させる必要がある場合、毎リクエストでDBから取得するのは非効率的である。
-\ ``UserDetails``\ オブジェクトに保持させて、\ ``SecurityContext``\ や\ ``<sec:authentication>``\ タグからアクセスできようにするにはこの拡張が必要である。
+  <sec:http>
+      <sec:form-login authentication-failure-handler-ref="authenticationFailureHandler" />
+  </sec:http>
 
-\ ``UserDetails``\ の拡張
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-認証情報以外に顧客情報も保持する\ ``ReservationUserDetails``\ クラスを作成する。
+|
 
-.. code-block:: java
+ここでは、システムエラーが発生したことを識別するためのクエリパラメータ(\ ``systemError``\ )を付けてログインフォームに遷移させている。
+遷移先に指定したログインフォームでは、クエリパラメータに\ ``systemError``\ が指定されている場合は、認証例外のメッセージを表示するのではなく、
+固定のエラーメッセージを表示するようにしている。
 
-  public class ReservationUserDetails extends User { // (1)
-      // omitted
+* ログインフォームの実装例
 
-      private final Customer customer; // (2)
+.. code-block:: jsp
 
-      private static final List<? extends GrantedAuthority> DEFAULT_AUTHORITIES = Collections
-              .singletonList(new SimpleGrantedAuthority("ROLE_USER"));         // (3)
+    <c:choose>
+        <c:when test="${param.containsKey('error')}">
+            <span style="color: red;">
+                <c:out value="${SPRING_SECURITY_LAST_EXCEPTION.message}"/>
+            </span>
+        </c:when>
+        <c:when test="${param.containsKey('systemError')}">
+            <span style="color: red;">
+                System Error occurred.
+            </span>
+        </c:when>
+    </c:choose>
 
-      public ReservationUserDetails(Customer customer) {
-          super(customer.getCustomerCode(),
-                  customer.getCustomerPassword(), true, true, true, true, DEFAULT_AUTHORITIES); // (4)
-          this.customer = customer;
-      }
+.. note::
 
-      public Customer getCustomer() { // (5)
-          return customer;
-      }
-  }
+    ここでは、ログインフォームに遷移させる場合の実装例を紹介したが、システムエラー画面に遷移させてもよい。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+|
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``UserDetails``\ のデフォルトクラスである、\ ``org.springframework.security.core.userdetails.User``\ クラスを継承する。
-   * - | (2)
-     - | 認証情報および顧客情報をもつDomainObjectクラスを保持する。
-   * - | (3)
-     - | 認可情報を、\ ``org.springframework.security.core.authority.SimpleGrantedAuthority``\ のコンストラクタで作成する。ここでは"ROLE_USER"という権限を与える。
-       |
-       | 本実装は簡易実装であり、本来は認可情報はDB上の別のテーブルから取得すべきである。
-   * - | (4)
-     - | スーパークラスのコンストラクタに、DomainObjectが持つユーザID、パスワードを設定する。
-   * - | (5)
-     - | \ ``UserDetails``\ 経由で顧客情報にアクセスするためのメソッド。
+.. _SpringSecurityAuthenticationBeanValidation:
 
-.. note::
+認証時の入力チェック
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-  \ ``User``\ クラスを継承するだけでは、業務要件を実現できない場合、\ ``UserDetails``\ インタフェースを実装すればよい。
+DBサーバへの負荷軽減等で、認証ページおける、あきらかな入力誤りに対しては、事前にチェックを行いたい場合がある。
+このような場合は、Bean Validationを使用した入力チェックも可能である。
 
-独自\ ``UserDetailsService``\ の実装
+Bean Validationによる入力チェック
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| \ ``UserDetailsService``\ を実装したReservationUserDetailsServiceクラスを作成する。
-| 本例では、\ ``Customer``\ オブジェクトを取得する処理を実装した\ ``CustomerSharedService``\ クラスをインジェクションして、DBから顧客情報を取得している。
-
-.. code-block:: java
 
-  public class ReservationUserDetailsService implements UserDetailsService {
-      @Inject
-      CustomerSharedService customerSharedService;
+以下にBean Validationを使用した入力チェックの例を説明する。
+Bean Validationに関する詳細は \ :doc:`../ArchitectureInDetail/Validation`\ を参照すること。
 
-      @Override
-      public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
-          Customer customer = customerSharedService.findOne(username);
-          // omitted
-          return new ReservationUserDetails(customer);
-      }
+* フォームクラスの実装例
 
-  }
+.. code-block:: java
 
-使用方法
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-作成した\ ``ReservationUserDetailsService``\ 、\ ``ReservationUserDetails``\ の使用方法を説明する。
+    public class LoginForm implements Serializable {
 
-* spring-security.xml
+        // omitted
+        @NotEmpty // (1)
+        private String username;
 
-  .. code-block:: xml
+        @NotEmpty // (1)
+        private String password;
+        // omitted
 
-    <sec:authentication-manager>
-        <sec:authentication-provider user-service-ref="userDetailsService"><!-- (1) -->
-            <sec:password-encoder ref="passwordEncoder" />
-        </sec:authentication-provider>
-    </sec:authentication-manager>
+    }
 
-    <bean id="userDetailsService"
-        class="com.example.domain.service.userdetails.ReservationUserDetailsService"><!-- (2) -->
-    </bean>
-    <!-- omitted -->
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 本例では、\ ``username``\ 、\ ``password``\ をそれぞれ必須入力としている。
 
-     * - 項番
-       - 説明
-     * - | (1)
-       - | \ ``ReservationUserDetailsService``\ のBean IDをref属性に定義する。
-     * - | (2)
-       - | \ ``ReservationUserDetailsService``\ をBean定義する。
 
-* JSP
+* コントローラクラスの実装例
 
-  \ ``<sec:authentication>``\ タグを使用して\ ``Customer``\ オブジェクトにアクセスする。
+.. code-block:: java
 
-  .. code-block:: jsp
+    @ModelAttribute
+    public LoginForm setupForm() { // (1)
+        return new LoginForm();
+    }
 
-     <sec:authentication property="principal.customer" var="customer"/><!-- (1) -->
-     ${f:h(customer.customerName)}<!-- (1) -->
+    @RequestMapping(value = "login")
+    public String login(@Validated LoginForm form, BindingResult result) {
+        // omitted
+        if (result.hasErrors()) {
+            // omitted
+        }
+        return "forward:/authenticate"; // (2)
+    }
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
     :header-rows: 1
     :widths: 10 90
 
     * - 項番
       - 説明
     * - | (1)
-      - | \ ``ReservationUserDetails``\ がもつ\ ``Customer``\ オブジェクトを変数に格納する。
+      - | \ ``LoginForm``\ を初期化する。
     * - | (2)
-      - | 変数に格納した\ ``Customer``\ オブジェクトの任意のプロパティを表示する。
-        | \ ``f:h()``\ については、\ :doc:`XSS`\ を参照されたい。
+      - | forwardで\ ``<sec:form-login>``\ 要素の\ ``login-processing-url``\ 属性に指定したパスに **Forward** する。
+        | 認証に関する設定は、\ :ref:`SpringSecurityAuthenticationCustomizingForm`\を参照すること。
 
-* Controller
+加えて、Forwardによる遷移でもSpring Securityの処理が行われるよう、認証パスをSpring Securityサーブレットフィルタに追加する。
 
-  .. code-block:: java
+* web.xmlの設定例
 
-    @RequestMapping(method = RequestMethod.GET)
-    public String view(@AuthenticationPrincipal ReservationUserDetails userDetails, Model model) {
-        // get Customer
-        Customer customer = userDetails.getCustomer(); // (1)
-        // omitted ...
-    }
+.. code-block:: xml
+
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>
+            org.springframework.web.filter.DelegatingFilterProxy
+        </filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+    <!-- (1) -->
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/authenticate</url-pattern>
+        <dispatcher>FORWARD</dispatcher>
+    </filter-mapping>    
 
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
     :header-rows: 1
     :widths: 10 90
 
     * - 項番
       - 説明
     * - | (1)
-      - | \ ``ReservationUserDetails``\ から、ログイン中の\ ``Customer``\ オブジェクトを取得する。
-        | このオブジェクトをServiceクラスに渡して業務処理を行う。
-
-.. note::
-
-  顧客情報が変更された場合、一度ログアウトしないと\ ``ReservationUserDetails``\ がもつ\ ``Customer``\ オブジェクトは変更されない。
-  
-  頻繁に変更されうる情報や、ログインユーザー以外のユーザー(管理者など)によって変更される情報は保持しない方がよい。
+      - | Forwardで認証するためのパターンを指定する
+        | ここでは認証パスである\ ``"/authenticate"``\ を指定している。
 
 |
 
-\ ``AuthenticationProvider``\ の拡張
+認証処理の拡張
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-Spring Securityから提供されている\ `認証プロバイダ <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/apidocs/org/springframework/security/authentication/AuthenticationProvider.html>`_\ で対応できない業務要件がある場合、
+Spring Securityから提供されている\ `認証プロバイダ <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/apidocs/org/springframework/security/authentication/AuthenticationProvider.html>`_\ で対応できない認証要件がある場合は、
 \ ``org.springframework.security.authentication.AuthenticationProvider``\ インタフェースを実装したクラスを作成する必要がある。
 
-ここでは、ユーザ名、パスワード、\ **会社識別子(独自の認証パラメータ)**\ の3つのパラメータを使用してDB認証を行うための拡張例を示す。
+ここでは、ユーザー名、パスワード、\ **会社識別子(独自の認証パラメータ)**\ の3つのパラメータを使用してDB認証を行うための拡張例を示す。
 
-.. figure:: ./images/Authentication_HowToExtends_LoginForm.png
+.. figure:: ./images_Authentication/Authentication_HowToExtends_LoginForm.png
    :alt: Authentication_HowToExtends_LoginForm
    :width: 50%
 
@@ -1419,33 +2116,29 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
     * - 項番
       - 説明
     * - | (1)
-      - ユーザ名、パスワード、会社識別子(独自の認証パラメータ)を保持する\ ``org.springframework.security.core.Authentication``\ インタフェースの実装クラス。
-
-        ここでは、\ ``org.springframework.security.authentication.UsernamePasswordAuthenticationToken``\ クラスを継承して作成する。
+      - | ユーザー名、パスワード、会社識別子を保持する\ ``org.springframework.security.core.Authentication``\ インタフェースの実装クラス。
+        | ここでは、\ ``org.springframework.security.authentication.UsernamePasswordAuthenticationToken``\ クラスを継承して作成する。
     * - | (2)
-      - ユーザ名、パスワード、会社識別子(独自の認証パラメータ)を使用してDB認証を行う\ ``org.springframework.security.authentication.AuthenticationProvider``\ の実装クラス。
-
-        ここでは、\ ``org.springframework.security.authentication.dao.DaoAuthenticationProvider``\ クラスを継承して作成する。
+      - | ユーザー名、パスワード、会社識別子を使用してDB認証を行う\ ``org.springframework.security.authentication.AuthenticationProvider``\ の実装クラス。
+        | ここでは、\ ``org.springframework.security.authentication.dao.DaoAuthenticationProvider``\ クラスを継承して作成する。
     * - | (3)
-      - ユーザ名、パスワード、会社識別子(独自の認証パラメータ)をリクエストパラメータから取得して、\ ``AuthenticationManager``\ (\ ``AuthenticationProvider``\ )に渡す\ ``Authentication``\ を生成するためのサーブレットフィルタクラス。
-
-        ここでは、\ ``org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter``\ クラスを継承して作成する。
+      - | ユーザー名、パスワード、会社識別子をリクエストパラメータから取得して、\ ``AuthenticationManager``\ (\ ``AuthenticationProvider``\ )に渡す\ ``Authentication``\ を生成するためのAuthentication Filterクラス。
+        | ここでは、\ ``org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter``\ クラスを継承して作成する。
 
-.. tip::
+.. note::
 
     ここでは、認証用のパラメータとして独自のパラメータを追加する例にしているため、
-    \ ``Authentication``\ インタフェースの実装クラスと\ ``Authentication``\ を生成するためのサーブレットフィルタクラスの拡張が必要となる。
+    \ ``Authentication``\ インタフェースの実装クラスと\ ``Authentication``\ を生成するためのAuthentication Filterクラスの拡張が必要となる。
 
-    ユーザ名とパスワードのみで認証する場合は、\ ``AuthenticationProvider``\ インタフェースの実装クラスを作成するだけで、
+    ユーザー名とパスワードのみで認証する場合は、\ ``AuthenticationProvider``\ インタフェースの実装クラスを作成するだけで、
     認証処理を拡張することができる。
 
 |
 
-\ ``UsernamePasswordAuthenticationToken``\ の拡張
+Authenticationインターフェースの実装クラスの作成
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-ここでは、\ ``UsernamePasswordAuthenticationToken``\ クラスを継承し、
-ユーザ名とパスワードに加えて、会社識別子(独自の認証パラメータ)を保持するクラスを作成する。
+\ ``UsernamePasswordAuthenticationToken``\ クラスを継承し、ユーザー名とパスワードに加えて、会社識別子(独自の認証パラメータ)を保持するクラスを作成する。
 
 .. code-block:: java
 
@@ -1462,7 +2155,6 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
         public CompanyIdUsernamePasswordAuthenticationToken(
                 Object principal, Object credentials, String companyId) {
             super(principal, credentials);
-
             this.companyId = companyId;
         }
 
@@ -1488,20 +2180,19 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
    * - 項番
      - 説明
    * - | (1)
-     - 会社識別子を保持するフィールドを作成する。
+     - | 会社識別子を保持するフィールドを作成する。
    * - | (2)
-     - 認証前の情報(リクエストパラメータで指定された情報)を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
+     - | 認証前の情報(リクエストパラメータで指定された情報)を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
    * - | (3)
      - | 認証済みの情報を保持するインスタンスを作成する際に使用するコンストラクタを作成する。
        | 親クラスのコンストラクタの引数に認可情報を渡すことで、認証済みの状態となる。
 
 |
 
-\ ``DaoAuthenticationProvide``\ の拡張
+AuthenticationProviderインターフェースの実装クラスの作成
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-ここでは、\ ``DaoAuthenticationProvider``\ クラスを継承し、
-ユーザ名、パスワード、会社識別子を使用してDB認証を行うクラスを作成する。
+\ ``DaoAuthenticationProvider``\ クラスを継承し、ユーザー名、パスワード、会社識別子を使用してDB認証を行うクラスを作成する。
 
 .. code-block:: java
 
@@ -1521,10 +2212,9 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
 
             // (2)
             CompanyIdUsernamePasswordAuthenticationToken companyIdUsernamePasswordAuthentication =
-                (CompanyIdUsernamePasswordAuthenticationToken) authentication;
+                    (CompanyIdUsernamePasswordAuthenticationToken) authentication;
             String requestedCompanyId = companyIdUsernamePasswordAuthentication.getCompanyId();
-            String companyId = ((SampleUserDetails) userDetails)
-                    .getAccount().getCompanyId();
+            String companyId = ((SampleUserDetails) userDetails).getAccount().getCompanyId();
             if (!companyId.equals(requestedCompanyId)) {
                 throw new BadCredentialsException(messages.getMessage(
                         "AbstractUserDetailsAuthenticationProvider.badCredentials",
@@ -1560,35 +2250,32 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
    * - 項番
      - 説明
    * - | (1)
-     - 親クラスのメソッドを呼び出し、Spring Securityが提供しているチェック処理を実行する。
-
-       このタイミングでパスワード認証が行われる。
+     - | 親クラスのメソッドを呼び出し、Spring Securityが提供しているチェック処理を実行する。
+       | この処理にはパスワード認証処理も含まれる。
    * - | (2)
-     - パスワード認証が成功した場合は、会社識別子(独自の認証パラメータ)の妥当性をチェックする。
-
-       上記例では、リクエストされた会社識別子とテーブルに保持している会社識別子が一致するかをチェックしている。
+     - | パスワード認証が成功した場合は、会社識別子(独自の認証パラメータ)の妥当性をチェックする。
+       | 上記例では、リクエストされた会社識別子とテーブルに保持している会社識別子が一致するかをチェックしている。
    * - | (3)
-     - パスワード認証及び独自の認証処理が成功した場合は、認証済み状態の\ ``CompanyIdUsernamePasswordAuthenticationToken``\ を作成して返却する。
+     - | パスワード認証及び独自の認証処理が成功した場合は、認証済み状態の\ ``CompanyIdUsernamePasswordAuthenticationToken``\ を作成して返却する。
    * - | (4)
-     - \ ``CompanyIdUsernamePasswordAuthenticationToken``\ にキャスト可能な\ ``Authentication``\ が指定された場合に、
-       本クラスを使用して認証処理を行うようにする。
+     - | \ ``CompanyIdUsernamePasswordAuthenticationToken``\ にキャスト可能な\ ``Authentication``\ が指定された場合に、本クラスを使用して認証処理を行うようにする。
 
-.. tip::
+.. note::
 
-    ユーザの存在チェック、ユーザの状態チェック(無効ユーザ、ロック中ユーザ、利用期限切れユーザなどのチェック)は、
-    \ ``additionalAuthenticationChecks``\ メソッドが呼び出される前に、親クラスの処理として行われる。
+    ユーザーの存在チェック、ユーザーの状態チェック(無効ユーザー、ロック中ユーザー、利用期限切れユーザーなどのチェック)は、
+    \ ``additionalAuthenticationChecks``\ メソッドが呼び出される前に親クラスの処理として行われる。
 
 |
 
 .. _authentication_custom_usernamepasswordauthenticationfilter:
 
-\ ``UsernamePasswordAuthenticationFilter``\ の拡張
+Authentication Filterの作成
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-ここでは、\ ``UsernamePasswordAuthenticationFilter``\ クラスを継承し、
-認証情報(ユーザ名、パスワード、会社識別子)を\ ``AuthenticationProvider``\ に引き渡すためのサーブレットフィルタクラスを作成する。
+\ ``UsernamePasswordAuthenticationFilter``\ クラスを継承し、
+認証情報(ユーザー名、パスワード、会社識別子)を\ ``AuthenticationProvider``\ に引き渡すためのAuthentication Filterクラスを作成する。
 
-\ ``attemptAuthentication``\ メソッドの実装は、\ ``UsernamePasswordAuthenticationFilter``\ クラスのメソッドをコピーして、カスタマイズしたものである。
+\ ``attemptAuthentication``\ メソッドの実装は、\ ``UsernamePasswordAuthenticationFilter``\ クラスのメソッドをコピーしてカスタマイズしたものである。
 
 .. code-block:: java
 
@@ -1629,7 +2316,7 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
 
         // (3)
         protected String obtainCompanyId(HttpServletRequest request) {
-            return request.getParameter("companyid");
+            return request.getParameter("companyId");
         }
     }
 
@@ -1641,37 +2328,58 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
    * - 項番
      - 説明
    * - | (1)
-     - リクエストパラメータから取得した認証情報(ユーザ名、パスワード、会社識別子)より、\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンスを生成する。
+     - | リクエストパラメータから取得した認証情報(ユーザー名、パスワード、会社識別子)より、\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンスを生成する。
    * - | (2)
-     - リクエストパラメータで指定された認証情報(\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンス)を指定して、
-       \ ``org.springframework.security.authentication.AuthenticationManager``\ の\ ``authenticate``\ メソッドを呼び出す。
-
-       \ ``AuthenticationManager``\ のメソッドを呼び出すと、\ ``AuthenticationProvider``\ の認証処理が呼び出される仕組みになっている。
+     - | リクエストパラメータで指定された認証情報(\ ``CompanyIdUsernamePasswordAuthenticationToken``\ のインスタンス)を指定して、\ ``org.springframework.security.authentication.AuthenticationManager``\ の\ ``authenticate``\ メソッドを呼び出す。
+       | 
+       | \ ``AuthenticationManager``\ のメソッドを呼び出すと、\ ``AuthenticationProvider``\ の認証処理が呼び出される。
    * - | (3)
-     - 会社識別子は、\ ``"companyid"``\ というリクエストパラメータより取得する。
+     - | 会社識別子は、\ ``"companyId"``\ というリクエストパラメータより取得する。
+
+|
 
-.. note:: **認証情報の入力チェックについて**
+ログインフォームの修正
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-    DBサーバへの負荷軽減等で、あきらかな入力誤りに対しては、事前にチェックを行いたい場合がある。
-    その場合は、\ :ref:`authentication_custom_usernamepasswordauthenticationfilter`\ のように、
-    \ ``UsernamePasswordAuthenticationFilter``\ を拡張することで、入力チェック処理を行うことができる。
+\ :ref:`SpringSecurityAuthenticationLoginForm`\ で作成したログインフォーム(JSP)に対して、会社識別子を追加する。
 
-    なお、上記例では入力チェックは行っていない。
+.. code-block:: jsp
 
-.. todo::
+    <form:form action="${pageContext.request.contextPath}/login" method="post">
+        <!-- omitted -->
+            <tr>
+                <td><label for="username">User Name</label></td>
+                <td><input type="text" id="username" name="username"></td>
+            </tr>
+            <tr>
+                <td><label for="companyId">Company Id</label></td>
+                <td><input type="text" id="companyId" name="companyId"></td> <!-- (1) -->
+            </tr>
+            <tr>
+                <td><label for="password">Password</label></td>
+                <td><input type="password" id="password" name="password"></td>
+            </tr>
+        <!-- omitted -->
+    </form:form>
 
-    認証情報の入力チェックは、Controllerクラスでリクエストをハンドリングして、Bean Validationを使用して行う事も可能である。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-    Bean Validationを使用した入力チェックの方法については、今後追加する予定である。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 会社識別子の入力フィールド名に\ ``"companyId"``\ を指定する。
 
 |
 
 拡張した認証処理の適用
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-ユーザ名、パスワード、会社識別子(独自の認証パラメータ)を使用したDB認証機能をSpring Securityに適用する。
+ユーザー名、パスワード、会社識別子(独自の認証パラメータ)を使用したDB認証機能をSpring Securityに適用する。
 
-``spring-security.xml``
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
@@ -1679,16 +2387,13 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
 
     <!-- (1) -->
     <sec:http
-        auto-config="false"
-        use-expressions="true"
         entry-point-ref="loginUrlAuthenticationEntryPoint">
 
         <!-- omitted -->
 
         <!-- (2) -->
         <sec:custom-filter
-            position="FORM_LOGIN_FILTER"
-            ref="companyIdUsernamePasswordAuthenticationFilter" />
+            position="FORM_LOGIN_FILTER" ref="companyIdUsernamePasswordAuthenticationFilter" />
 
         <!-- omitted -->
 
@@ -1696,8 +2401,7 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
 
         <sec:logout
             logout-url="/logout"
-            logout-success-url="/login"
-            delete-cookies="JSESSIONID" />
+            logout-success-url="/login" />
 
         <!-- omitted -->
 
@@ -1777,231 +2481,329 @@ Spring Securityから提供されている\ `認証プロバイダ <http://docs.
     * - 項番
       - 説明
     * - | (1)
-      - \ ``custom-filter``\ 要素を使用して"FORM_LOGIN_FILTER"を差し替える場合は、\ ``http``\ 要素の属性に、以下の設定を行う必要がある。
+      - | (2)の\ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える場合は、\ ``<sec:http>``\ タグの属性に以下の設定を行う必要がある。
 
         * 自動設定を使用することができないため、\ ``auto-config="false"``\ を指定するか、\ ``auto-config``\ 属性を削除する。
-        * \ ``form-login``\ 要素を使用できないため、\ ``entry-point-ref``\ 属性を使用して、使用する\ ``AuthenticationEntryPoint``\ を明示的に指定する。
-    * - | (2)
-      - \ ``custom-filter``\ 要素を使用して"FORM_LOGIN_FILTER"を差し替える。
+        * \ ``<sec:form-login>``\ タグが使用できないため、\ ``entry-point-ref``\ 属性を使用して\ ``AuthenticationEntryPoint``\ を明示的に指定する。
 
-        \ ``custom-filter``\ 要素の\ ``position``\ 属性に\ ``"FORM_LOGIN_FILTER"``\を指定し、\ ``ref``\ 属性に拡張したサーブレットフィルタのbean IDを指定する。
+    * - | (2)
+      - | \ ``<sec:custom-filter>``\ タグを使用して\ ``"FORM_LOGIN_FILTER"``\ を差し替える。
+        | 
+        | \ ``<sec:custom-filter>``\ タグの\ ``position``\ 属性に\ ``"FORM_LOGIN_FILTER"``\を指定し、\ ``ref``\ 属性に拡張したAuthentication Filterのbeanを指定する。
     * - | (3)
-      - \ ``http``\ 要素の\ ``entry-point-ref``\ 属性に指定する\ ``AuthenticationEntryPoint``\ のbeanを定義する。
-
-        ここでは、\ ``form-login``\ 要素を指定した際の使用される\ ``org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint``\ クラスのbeanを定義している。
+      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に使用する\ ``AuthenticationEntryPoint``\ のbeanを指定する。
+        | 
+        | ここでは、\ ``<sec:form-login>``\ タグを指定した際に使用される\ ``org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint``\ クラスのbeanを指定している。
     * - | (4)
-      - "FORM_LOGIN_FILTER"として使用するサーブレットフィルタのbeanを定義する。
-
-        ここでは、拡張したサーブレットフィルタクラス(\ ``CompanyIdUsernamePasswordAuthenticationFilter``\ )のbeanを定義している。
+      - | \ ``"FORM_LOGIN_FILTER"``\ として使用するAuthentication Filterクラスのbeanを定義する。
+        | 
+        | ここでは、拡張したAuthentication Filterクラス(\ ``CompanyIdUsernamePasswordAuthenticationFilter``\ )のbeanを定義している。
     * - | (5)
-      - \ ``requiresAuthenticationRequestMatcher``\ プロパティに、認証処理を行うリクエストを検出するための\ ``RequestMatcher``\ インスタンスを指定する。
-
-        ここでは、\ ``/authentication``\ というパスにリクエストがあった場合に認証処理を行うように設定している。
-        これは、\ ``form-login``\ 要素の\ ``login-processing-url``\ 属性に\ ``"/authentication"``\ を指定したのと同義である。
+      - | \ ``requiresAuthenticationRequestMatcher``\ プロパティに、認証処理を行うリクエストを検出するための\ ``RequestMatcher``\ インスタンスを指定する。
+        | 
+        | ここでは、\ ``"/authentication"``\ というパスにリクエストがあった場合に認証処理を行うように設定している。
+        | これは、\ ``<sec:form-login>``\ タグの\ ``login-processing-url``\ 属性に\ ``"/authentication"``\ を指定したのと同義である。
     * - | (6)
-      - \ ``authenticationManager``\ プロパティに、\ ``authentication-manager``\ 要素の\ ``alias``\ 属性に設定した値を指定する。
-
-        \ ``authentication-manager``\ 要素の\ ``alias``\ 属性を指定すると、
-        Spring Securityが生成した\ ``AuthenticationManager``\ のbeanを、他のbeanへDIすることができる様になる。
+      - | \ ``authenticationManager``\ プロパティに、\ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性に設定した値を指定する。
+        | 
+        | \ ``<sec:authentication-manager>``\ タグの\ ``alias``\ 属性を指定すると、
+        | Spring Securityが生成した\ ``AuthenticationManager``\ のbeanを、他のbeanへDIすることができる様になる。
     * - | (6')
-      - Spring Securityが生成する\ ``AuthenticationManager``\ に対して、拡張した\ ``AuthenticationProvider``\ (\ ``CompanyIdUsernamePasswordAuthenticationProvider``\ )を設定する。
+      - | Spring Securityが生成する\ ``AuthenticationManager``\ に対して、拡張した\ ``AuthenticationProvider``\ (\ ``CompanyIdUsernamePasswordAuthenticationProvider``\ )を設定する。
     * - | (7)
-      - \ ``sessionAuthenticationStrategy``\ プロパティに、認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを指定する。
-
+      - | \ ``sessionAuthenticationStrategy``\ プロパティに、認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを指定する。
+        | 
     * - | (7')
-      - 認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを定義する。
-
-        ここでは、Spring Securityから提供されている、
-
+      - | 認証成功時のセッションの取扱いを制御するコンポーネント(\ ``SessionAuthenticationStrategy``\ )のbeanを定義する。
+        | 
+        | ここでは、Spring Securityから提供されている、
+         
         * CSRFトークンを作り直すコンポーネント(\ ``CsrfAuthenticationStrategy``\ )
         * セッション・フィクセーション攻撃を防ぐために新しいセッションを生成するコンポーネント(\ ``SessionFixationProtectionStrategy``\ )
-
-        を有効化している。
+        
+        | を有効化している。
     * - | (8)
       - | \ ``authenticationFailureHandler``\ プロパティに、認証失敗時に呼ばれるハンドラクラスを指定する。
     * - | (9)
       - | \ ``authenticationSuccessHandler``\ プロパティに、認証成功時に呼ばれるハンドラクラスを指定する。
 
-.. note::
+.. note:: **auto-configについて**
 
-    \ ``auto-config="false"``\ を指定した場合、\ ``<sec:http-basic>``\ 要素と\ ``<sec:logout>``\ 要素は、明示的に定義しないと有効にならない。
+    \ ``auto-config="false"``\ を指定又は指定を省略した際にBasic認証処理とログアウト処理を有効化したい場合は、\ ``<sec:http-basic>``\ タグと\ ``<sec:logout>``\ タグを明示的に定義する必要がある。
 
 |
 
-ログインフォームの作成
+.. _AuthenticationHowToExtendUsingDeprecatedPasswordEncoder:
+
+非推奨パッケージのPasswordEncoderの利用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+セキュリティ要件によっては、前述した\ ``PasswordEncoder``\ を実装したクラスでは実現できない場合がある。
+特に、既存のアカウント情報で使用しているハッシュ化要件を踏襲する必要がある場合は、前述の\ ``PasswordEncoder``\ では要件を満たせないことがある。
+
+具体的には、既存のハッシュ化要件が以下のようなケースである。
+
+* アルゴリズムがSHA-512である。
+* ストレッチング回数が1000回である。
+* ソルトがアカウントテーブルのカラムに格納されており、\ ``PasswordEncoder``\ の外から渡す必要がある。
+
+このようなケースでは、\ ``org.springframework.security.crypto.password.PasswordEncoder``\ インタフェースの実装クラスではなく、
+\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスの使用することで要件を満たすことができる。
+
+.. warning::
+
+    Spring Security 3.1.4以前では、\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
+    を実装したクラスをハッシュ化に使用していたが、3.1.4以降では非推奨となっている。
+
+|
+
+ShaPasswordEncoderの利用
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-ここでは、\ :ref:`form-login-JSP`\ で紹介した画面(JSP)に対して、会社識別子を追加する。
+本ガイドラインでは、\ ``ShaPasswordEncoder``\ を例に、非推奨パッケージの\ ``PasswordEncoder``\ の利用について説明する。
 
-.. code-block:: jsp
-    :emphasize-lines: 5-6
+ハッシュ化要件が以下のケースの場合は、\ ``ShaPasswordEncoder``\ を利用することで要件を満たすことができる。
 
-    <form:form action="${pageContext.request.contextPath}/authentication" method="post">
-        <!-- omitted -->
-        <span>User Id</span><br>
-        <input type="text" id="username" name="j_username"><br>
-        <span>Company Id</span><br>
-        <input type="text" id="companyid" name="companyid"><br>  <!-- (1) -->
-        <span>Password</span><br>
-        <input type="password" id="password" name="j_password"><br>
-        <!-- omitted -->
-    </form:form>
+* アルゴリズムがSHA-512
+* ストレッチング回数を1000回
+
+|
 
+まず、\ ``ShaPasswordEncoder``\ のbeanを定義する。
+
+* applicationContext.xmlの定義例
+
+.. code-block:: xml
+  
+    <bean id ="passwordEncoder"
+        class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"> <!-- (1) -->
+        <constructor-arg value="512" /> <!-- (2) -->
+        <property name="iterations" value="1000" /> <!-- (3) -->
+    </bean>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``org.springframework.security.authentication.encoding.ShaPasswordEncoder``\ のbeanを定義する。
+    * - | (2)
+      - | SHAアルゴリズムの種類を指定する。
+        | 指定可能な値は、「\ ``1``\ 、\ ``256``\ 、\ ``384``\ 、\ ``512``\ 」である。
+        | 省略した場合は、「\ ``1``\ 」となる。
+    * - | (3)
+      - | ハッシュ化時のストレッチング回数を指定する。
+        | 省略した場合は、1回となる。
+
+|
+
+次に、\ ``ShaPasswordEncoder``\ をSpring Securityの認証処理(\ ``DaoAuthenticationProvider``\ )に適用する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+  
+    <bean id="authenticationProvider"
+        class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
+        <!-- omitted -->
+        <property name="saltSource" ref="saltSource" /> <!-- (1) -->
+        <property name="userDetailsService" ref="userDetailsService" />
+        <property name="passwordEncoder" ref="passwordEncoder" /> <!-- (2) -->
+    </bean>
+  
+    <bean id="saltSource"
+        class="org.springframework.security.authentication.dao.ReflectionSaltSource"> <!-- (3) -->
+        <property name="userPropertyToUse" value="username" /> <!-- (4) -->
+    </bean>
+  
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
     :header-rows: 1
     :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``saltSource``\ プロパティに\ ``org.springframework.security.authentication.dao.SaltSource``\ インタフェースの実装クラスのbeanを指定する。
+        | \ ``SaltSource``\ は、ソルトを\ ``UserDetails``\ から取得するためのインタフェースである。
+    * - | (2)
+      - | \ ``passwordEncoder``\ プロパティに\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスのbeanを指定する。
+        | 上記例では、\ ``ShaPasswordEncoder``\ のbeanを指定している。
+    * - | (3)
+      - | \ ``SaltSource``\ のbeanを定義する。
+        | 上記例では、リフレクションを使用して\ ``UserDetails``\ のプロパティからソルトを取得するクラス(\ ``ReflectionSaltSource``\ )を利用している。
+    * - | (4)
+      - | ソルトが格納されている\ ``UserDetails``\ のプロパティを指定する。
+        | 上記例では、\ ``UserDetails``\ の\ ``username``\ プロパティの値をソルトとして使用する。
+
+|
+
+アプリケーションの処理で非推奨の\ ``PasswordEncoder``\ を使用する場合は、\ ``PasswordEncoder``\ をインジェクションして使用する。
 
+* Javaクラスの実装例
+
+.. code-block:: java
+  
+    @Inject
+    PasswordEncoder passwordEncoder;
+  
+    public String register(Customer customer, String rawPassword, String userSalt) {
+        // omitted
+        String password = passwordEncoder.encodePassword(rawPassword, userSalt); // (1)
+        customer.setPassword(password);
+        // omitted
+    }
+  
+    public boolean matches(Customer customer, String rawPassword, String userSalt) {
+        return passwordEncoder.isPasswordValid(customer.getPassword(), rawPassword, userSalt); // (2)
+    }
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
     * - 項番
       - 説明
     * - | (1)
-      - | 会社識別子の入力フィールド名に、\ ``"companyid"``\ を指定する。
+      - | パスワードをハッシュ化する場合は、\ ``encodePassword``\ メソッドを使用する。
+        | メソッドの引数には、パスワード、ソルト文字列の順で指定する。
+    * - | (2)
+      - | パスワードを照合する場合ば、\ ``isPasswordValid``\ メソッドを使用する。
+        | メソッドの引数には、ハッシュ化済みのパスワード、平文のパスワード、ソルト文字列の順で指定する。
 
 |
 
 Appendix
 --------------------------------------------------------------------------------
 
-遷移先の指定が可能な認証成功ハンドラ
+.. _spring-security-authentication-mvc:
+
+Spring MVCでリクエストを受けてログインフォームを表示する
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring MVCでリクエストを受けてログインフォームを表示する方法を説明する。
+
+* spring-mvc.xmlの定義例
 
-Spring Securityを使用した認証では、認証に成功した場合は、
+ログインフォームを表示するControllerの定義例。
 
-* bean定義ファイル(\ ``spring-security.xml``\ )に記述したパス(\ ``<form-login>``\ 要素の\ ``default-target-url``\ 属性に指定したパス)
-* ログイン前にアクセスした「認証が必要な保護ページ」を表示するためのパス
+.. code-block:: java
+
+    @Controller
+    @RequestMapping("/login")
+    public class LoginController { // (1)
+
+        @RequestMapping
+        public String index() {
+            return "login";
+        }
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-に遷移する。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | view名として"login"を返却する。\ ``InternalResourceViewResolver``\ によってsrc/main/webapp/WEB-INF/views/login.jspが出力される。
 
-共通ライブラリでは、Spring Securityが提供している機能に加えて、
-遷移先のパスをリクエストパラメータで指定できるクラス(\ ``org.terasoluna.gfw.security.web.redirect.RedirectAuthenticationHandler``\ )を提供している。
+本例のように、単純にview名を返すだけのメソッドが一つだけあるControllerであれば、\ ``<mvc:view-controller>``\ を使用して代用することも可能である。  
 
-\ ``RedirectAuthenticationHandler``\ は、以下のような仕組みを実現するために作成されたクラスである。
+* \ ``<mvc:view-controller>``\ を使用したControllerの定義例。
 
-* ページを表示するためにログインを行う必要がある
-* ログイン後の遷移先のページをJSP側(遷移元のJSP)で指定したい
+.. code-block:: xml
 
-.. figure:: ./images/Authentication_Appendix_ScreenFlow.png
-   :alt: Authentication_Appendix_Screen_Flow
-   :width: 70%
-   :align: center
+    <mvc:view-controller path="/login" view-name="login" /><!-- (1) -->
 
-   **Picture - Screen_Flow**
+|
 
-| \ ``RedirectAuthenticationHandler``\ の使用例を、下記に示す。
+.. _SpringSecurityAuthenticationRememberMe:
 
-**遷移元画面のJSPの記述例**
+Remember Me認証の利用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-.. code-block:: jsp
+「\ `Remember Me認証 <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me>`_\ 」とは、
+Webサイトに頻繁にアクセスするユーザーの利便性を高めるための機能の一つで、ログイン状態を通常のライフサイクルより長く保持するための機能である。
+本機能を使用すると、ブラウザを閉じた後やセッションタイムが発生した後でも、Cookieに保持しているRemember Me認証用のTokenを使用して、
+ユーザ名とパスワードを再入力することなく自動でログインすることができる。
+なお、本機能は、ユーザーがログイン状態を保持することを許可した場合のみ有効となる。
 
-  <form:form action="${pageContext.request.contextPath}/login" method="get">
-      <!-- omitted -->
-    <input type="hidden" name="redirectTo"
-      value="${pageContext.request.contextPath}/reservetour/read?
-      ${f:query(reserveTourForm)}&page.page=${f:h(param['page.page'])}
-      &page.size=${f:h(param['page.size'])}" />  <!-- (1) -->
-  </form:form>
+Spring Securityは、「`Hash-Based Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-hash-token>`_ 方式のRemember Me認証」と「`Persistent Token <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#remember-me-persistent-token>`_ 方式のRemember Me認証」をサポートしており、
+デフォルトではHash-Based Token方式が使用される。
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+|
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | hidden項目として、「ログイン成功後に遷移するページのURL」を設定する。
-       | hidden項目のフィールド名(リクエストパラメータ名)は「\ ``redirectTo``\ 」を指定する。
-       |
-       | フィールド名(リクエストパラメータ名)は、\ ``RedirectAuthenticationHandler``\ の\ ``targetUrlParameter``\ プロパティの値と一致させる必要がある。
+Remember Me認証を利用する場合は、\ ``<sec:remember-me>``\ タグを追加する。
 
-**ログイン画面のJSPの記述例**
+* spring-security.xmlの定義例
 
-.. code-block:: jsp
+.. code-block:: xml
 
-  <form:form action="${pageContext.request.contextPath}/authentication" method="post">
-       <!-- omitted -->
-       <input type="submit"
-         value="Login">
-       <input type="hidden" name="redirectTo" value="${f:h(param.redirectTo)}" />  <!-- (1) -->
-       <!-- omitted -->
-  </form:form>
+    <sec:http>
+        <!-- omitted -->
+        <sec:remember-me key="terasoluna-tourreservation-km/ylnHv"
+            token-validity-seconds="#{30 * 24 * 60 * 60}" />  <!-- (1) (2) -->
+        <!-- omitted -->
+    </sec:http>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | hidden項目として、遷移元画面からリクエストパラメータで渡された「ログイン成功後に遷移するページのURL」を設定する。
-       | hidden項目のフィールド名(リクエストパラメータ名)は「\ ``redirectTo``\ 」を指定する。
-       |
-       | フィールド名(リクエストパラメータ名)は、\ ``RedirectAuthenticationHandler``\ の\ ``targetUrlParameter``\ プロパティの値と一致させる必要がある。
+    :header-rows: 1
+    :widths: 10 90
 
-**Spring Security 設定ファイル**
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``key``\ 属性に、Remember Me認証用のTokenを生成したアプリケーションを識別するキー値を指定する。
+        | キー値の指定が無い場合、アプリケーションの起動毎にユニークな値が生成される。
+        | なお、Hash-Based Tokenが保持しているキー値とサーバーで保持しているキー値が異なる場合、無効なTokenとして扱われる。
+        | つまり、アプリケーションを再起動する前に生成したHash-Based Tokenを有効なTokenとして扱いたい場合は、\ ``key``\ 属性の指定は必須である。
+    * - | (2)
+      - | \ ``token-validity-seconds``\ 属性に、Remember Me認証用のTokenの有効時間を秒単位で指定する。
+        | 指定が無い場合、デフォルトで14日間が有効時間になる。
+        | 上記例では、有効時間として30日間を設定している。
 
-.. code-block:: xml
+上記以外の属性については、\ `Spring Security Reference -The Security Namespace (<remember-me>) - <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-remember-me>`_\ を参照されたい。
 
-  <sec:http auto-config="true">
-      <!-- omitted -->
-      <!-- (1) -->
-      <sec:form-login
-          login-page="/login"
-          login-processing-url="/authentication"
-          authentication-failure-handler-ref="authenticationFailureHandler"
-          authentication-success-handler-ref="authenticationSuccessHandler" />
-      <!-- omitted -->
-  </sec:http>
+.. note:: **Spring Security 4.0における変更**
 
-  <!-- (2) -->
-  <bean id="authenticationSuccessHandler"
-      class="org.terasoluna.gfw.security.web.redirect.RedirectAuthenticationHandler">
-  </bean>
+    Spring Security 4.0から、以下の設定のデフォルト値が変更されている
 
-  <!-- (3) -->
-  <bean id="authenticationFailureHandler"
-      class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
-      <property name="defaultFailureUrl" value="/login?error=true"/> <!-- (4) -->
-      <property name="useForward" value="true"/> <!-- (5) -->
-  </bean>
+    * remember-me-parameter
+    * remember-me-cookie
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+|
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``authentication-failure-handler-ref``\ (認証エラー時のハンドラ設定)と\ ``authentication-success-handler-ref``\ (認証成功時のハンドラ設定)のBeanIdを指定する。
-   * - | (2)
-     - | \ ``authentication-success-handler-ref``\ から参照されるbeanとして\ ``org.terasoluna.gfw.security.web.redirect.RedirectAuthenticationHandler``\ を定義する。
-   * - | (3)
-     - | \ ``authentication-failure-handler-ref``\ から参照されるbeanとして\ ``org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler``\ を定義する。
-   * - | (4)
-     - | 認証失敗時の遷移先パスを指定する。
-       | 上記例では、ログイン画面のパスと認証エラー後の遷移であることを示すクエリ(\ ``error=true``\ )を設定している。
-   * - | (5)
-     - | **本機能を使用する場合はuseForwardをtrueに指定する必要がある。**
-       | \ ``true``\に指定することで、認証失敗時に表示する画面(ログイン画面)に遷移する際に、RedirectではなくForwardが使用される。
+ログインフォームには、「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を用意する。
 
-       | これは、認証処理を行うリクエストのリクエストパラメータの中に「ログイン成功後に遷移するページのURL」を含める必要があるためである。
-       | Redirectを使用して認証エラー画面を表示してしまうと、「ログイン成功後に遷移するページのURL」がリクエストパラメータから引き継ぎことが出来ないため、ログインが成功しても指定した画面に遷移することが出来ない。
-       | この事象を回避するためには、Forwardを使用して「ログイン成功後に遷移するページのURL」をリクエストパラメータから引き継げるようにしておく必要がある。
+* ログインフォームのJSPの実装例
 
-.. tip::
+.. code-block:: jsp
 
-  \ ``RedirectAuthenticationHandler``\ は、オープンリダイレクタ脆弱性対策が施されているため、
-  「http://google.com」のような外部サイトへ遷移をすることはできない。
-  外部サイトへ移動したい場合は、\ ``org.springframework.security.web.RedirectStrategy``\ を実装したクラスを作成し、
-  \ ``RedirectAuthenticationHandler``\ の\ ``targetUrlParameterRedirectStrategy``\ プロパティにインジェクションすることで実現する事ができる。
+    <form:form action="${pageContext.request.contextPath}/login" method="post">
+            <!-- omitted -->
+            <tr>
+                <td><label for="remember-me">Remember Me : </label></td>
+                <td><input name="remember-me" id="remember-me" type="checkbox" checked="checked"></td> <!-- (1) -->
+            </tr>
+            <!-- omitted -->
+    </form:form>
 
-  拡張する際の注意点としては、\ ``redirectTo``\ の値を改竄されても問題が発生しないようにする必要がある。
-  たとえば、以下のような対策が考えられる。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-  * 遷移先のURLを直接指定するのではなく、ページ番号などのIDを指定してIDに対応するURLにリダイレクトする。
-  * 遷移先のURLをチェックし、ホワイトリストに一致するURLのみリダイレクトする。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 「Remember Me認証」機能の利用有無を指定するためのフラグ(チェックボックス項目)を追加し、フィールド名(リクエストパラメータ名)には\ ``remember_me``\ を指定する。
+        | チェックボックスをチェック状態にしてから認証処理を実行すると、以降のリクエストから「Remember Me認証」機能が適用される。
 
 .. raw:: latex
 
diff --git a/source/Security/Authorization.rst b/source/Security/Authorization.rst
index 2404d6fbc5..a2e9fcd7bf 100755
--- a/source/Security/Authorization.rst
+++ b/source/Security/Authorization.rst
@@ -1,3 +1,5 @@
+.. _SpringSecurityAuthorization:
+
 認可
 ================================================================================
 
@@ -8,135 +10,379 @@
 
 Overview
 --------------------------------------------------------------------------------
-| 本節では、Spring Securityで提供している認可機能を説明する。
+本節では、Spring Securityが提供している認可機能について説明する。
 
-| Spring Securityのアクセス認可機能を利用して実現するため、Spring Securityの認証機能を用いることを前提とする。
-| Spring Securityを利用した認証方法については、\ :doc:`Authentication`\ を参照されたい。
+認可処理は、アプリケーションの利用者がアクセスできるリソースを制御するための処理である。
+利用者がアクセスできるリソースを制御するためのもっとも標準的な方法は、
+リソース(又はリソースの集合)毎にアクセスポリシーを定義してき、利用者がリソースにアクセスしようとした時にアクセスポリシーを調べて制御する方法である。
 
-| アクセス認可の対象のリソースは、以下の3項目である。
+アクセスポリシーには、どのリソースにどのユーザーからのアクセスを許可するかを定義する。
+Spring Securityでは、以下の3つのリソースに対してアクセスポリシーを定義することができる。
 
-#. Web(リクエストURL)
+* Webリソース
+* Javaメソッド
+* ドメインオブジェクト \ [#fSpringSecurityAuthorization1]_\
+* JSPの画面項目
 
-   * 特定のURLにアクセスするために必要な権限を設定できる
+本節では、「Webリソース」「Javaメソッド」「JSPの画面項目」のアクセスに対して認可処理を適用するための実装例(定義例)を紹介しながら、Spring Securityの認可機能について説明する。
 
-#. 画面項目(JSP）
+.. [#fSpringSecurityAuthorization1] ドメインオブジェクトのアクセスに対する認可処理については、 \ `Spring Security Reference -Domain Object Security (ACLs)- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#domain-acls>`_\ を参照されたい。
 
-   * 画面中の特定の要素を表示するために必要な権限を設定できる
+|
 
-#. メソッド
+認可処理のアーキテクチャ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-   * 特定のメソッドを実行するために必要な権限を設定できる
+Spring Securityは、以下のような流れで認可処理を行う。
 
-| Spring Securityでは、設定ファイルやアノテーションでアクセス認可情報を記述し、機能を実現している。
+.. figure:: ./images_Authorization/AuthorizationArchitecture.png
+    :width: 100%
 
+    **認可処理のアーキテクチャ**
 
-アクセス認可(リクエストURL)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-.. figure:: ./images/Authorization_Filter_overview.png
-   :alt: Authorization(リクエストURL)
-   :width: 60%
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、任意のリソースにアクセスする。
+    * - | (2)
+      - | \ ``FilterSecurityInterceptor``\ クラスは、\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出し、リソースへのアクセス権の有無をチェックする。
+    * - | (3)
+      - | \ ``AffirmativeBased``\ クラス(デフォルトで使用される\ ``AccessDecisionManager``\ の実装クラス)は、\ ``AccessDecisionVoter``\ インタフェースのメソッドを呼び出し、アクセス権の有無を投票させる。
+    * - | (4)
+      - | \ ``FilterSecurityInterceptor``\ は、\ ``AccessDecisionManager``\ によってアクセス権が付与された場合に限り、リソースへアクセスする。
 
-   **Picture - Authorization(リクエストURL)**
+|
+
+ExceptionTranslationFilter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-#. ユーザのリクエストに対し、Spring Securityのフィルタチェーンが割り込み処理を行う。
-#. 認可制御の対象となるURLとリクエストのマッチングを行い、アクセス認可マネージャにアクセス認可の判断を問い合わせる。
-#. アクセス認可マネージャが、ユーザの権限とアクセス認可情報をチェックし、
-   必要なロールが割り当てられていない場合は、アクセス拒否例外をスローする。
-#. 必要なロールが割り当てられている場合は、処理を継続する。
+\ ``ExceptionTranslationFilter``\ は、認可処理(\ ``AccessDecisionManager``\ )で発生した例外をハンドリングし、クライアントへ適切なレスポンスを行うためのSecurity Filterである。
+デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
 
 |
 
-アクセス認可(JSP)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+FilterSecurityInterceptor
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``FilterSecurityInterceptor``\ は、HTTPリクエストに対して認可処理を適用するためのSecurity Filterで、実際の認可処理は\ ``AccessDecisionManager``\ に委譲する。
+\ ``AccessDecisionManager``\ インタフェースのメソッドを呼び出す際には、クライアントがアクセスしようとしたリソースに指定されているアクセスポリシーを連携する。
 
-.. figure:: ./images/Authorization_Jsp_overview.png
-   :alt: Authorization(JSP)
-   :width: 60%
+|
+
+AccessDecisionManager
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-   **Picture - Authorization(JSP)**
+\ ``AccessDecisionManager``\ は、アクセスしようとしたリソースに対してアクセス権があるかチェックを行うためのインタフェースである。
 
-#. JSPから生成されたサーブレットが、アクセス認可マネージャに問い合わせる。
-#. アクセス認可マネージャが、ユーザの権限とアクセス認可情報をチェックし、
-   必要なロールが割り当てられていない場合は、タグの内部を評価しない。
-#. 必要なロールが割り当てられている場合は、タグの内部を評価する。
+Spring Securityが提供する実装クラスは3種類存在するが、いずれも\ ``AccessDecisionVoter``\というインタフェースのメソッドを呼び出してアクセス権を付与するか否かを判定させている。
+\ ``AccessDecisionVoter``\ は「付与」「拒否」「棄権」のいずれかを投票し、\ ``AccessDecisionManager``\ の実装クラスが投票結果を集約して最終的なアクセス権を判断する。
+アクセス権がないと判断した場合は、\ ``AccessDeniedException``\ を発生させアクセスを拒否する。
+
+なお、すべての投票結果が「棄権」であった場合、Spring Securityのでデフォルトでは、「アクセス権なし」と判定される。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDecisionManagerの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``AffirmativeBased``\
+      - | \ ``AccessDecisionVoter``\ に投票させ、「付与」が１件投票された時点でアクセス権を与える実装クラス。
+        | **デフォルトで使用される実装クラス。**
+    * - | \ ``ConsensusBased``\
+      - | 全ての\ ``AccessDecisionVoter``\ に投票させ、「付与」の投票数が多い場合にアクセス権を与える実装クラス。
+        | 「付与」「拒否」が１件以上、且つ同数の場合、Spring Securityのデフォルトでは、「アクセス権あり」と判定される。
+    * - | \ ``UnanimousBased``\
+      - | \ ``AccessDecisionVoter``\ に投票させ、「拒否」が１件投票された時点で **アクセス権を与えない** 実装クラス。
+
+.. note:: **AccessDecisionVoterの選択**
+
+    使用する\ ``AccessDecisionVoter``\ が1つの場合はどの実装クラスを使っても動作に違いはない。
+    複数の\ ``AccessDecisionVoter``\ を使用する場合は、要件に合わせて実装クラスを選択されたい。
 
 |
 
-アクセス認可(Method)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+AccessDecisionVoter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AccessDecisionVoter``\ は、アクセスしようとしたリソースに指定されているアクセスポリシーを参照してアクセス権を付与するかを投票するためのインタフェースである。
+
+Spring Securityが提供する主な実装クラスは以下の通り。
 
-.. figure:: ./images/Authorization_Method_overview.png
-   :alt: Authorization(Method)
-   :width: 60%
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDecisionVoterの主な実装クラス**
+    :header-rows: 1
+    :widths: 25 75
 
-   **Picture - Authorization(Method)**
+    * - クラス名
+      - 説明
+    * - | \ ``WebExpressionVoter``\
+      - | SpEL経由で認証情報(\ ``Authentication``\ )が保持する権限情報とリクエスト情報(\ ``HttpServletRequest``\ )を参照して投票を行う実装クラス。
+    * - | \ ``RoleVoter``\
+      - | 利用者が持つロールを参照して投票を行う実装クラス。
+    * - | \ ``RoleHierarchyVoter``\
+      - | 利用者が持つ階層化されたロールを参照して投票を行う実装クラス。
+    * - | \ ``AuthenticatedVoter``\
+      - | 認証状態を参照して投票を行う実装クラス。
 
-#. Springコンテナがアクセス認可情報をもとに、対象のオブジェクトに対してインターセプタを生成、割り込みさせる。
-#. インターセプタは設定されたロールをもとにアクセス認可マネージャに問い合わせる。
-#. アクセス認可マネージャが、ユーザが持つ権限とアクセス認可情報をチェックし、
-   必要なロールが割り当てられていない場合はアクセス拒否例外をスローする。
-#. 必要なロールが割り当てられている場合は、処理を継続する（設定により、処理を実行した後に権限をチェックすることもできる）。
+.. note:: **デフォルトで適用されるAccessDecisionVoter**
+
+    デフォルトで適用される\ ``AccessDecisionVoter``\ インタフェースの実装クラスは、Spring Security 4.0から\ ``WebExpressionVoter``\ に統一されている。
+    \ ``WebExpressionVoter``\ は、\ ``RoleVoter``\ 、\ ``RoleHierarchyVoter``\ 、\ ``AuthenticatedVoter``\ を使用した時と同じことが実現できるため、
+    本ガイドラインでも、デフォルトの\ ``WebExpressionVoter``\ を使って認可処理を行う前提で説明を行う。
 
 |
 
 How to use
 --------------------------------------------------------------------------------
-| アクセス認可(リクエストURL)、アクセス認可(JSP)、アクセス認可(Method)の使用方法について説明する。
 
-アクセス認可(リクエストURL)
+認可機能を使用するために必要となるbean定義例(アクセスポリシーの指定方法)や実装方法について説明する。
+
+|
+
+.. _SpringSecurityAuthorizationPolicy:
+
+アクセスポリシーの記述方法
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| アクセス認可(リクエストURL)機能を使用するために、Spring Securityの設定ファイルに記述する内容を以下に示す。
-| 基本設定については、\ :doc:`SpringSecurity`\ を参照されたい。
 
-.. _authorization-intercept-url:
+アクセスポリシーの記述方法を説明する。
 
-\ ``<sec:intercept-url>``\ 要素の設定
+Spring Securityは、アクセスポリシーを指定する記述方法としてSpring Expression Language(SpEL)をサポートしている。
+SpELを使わない方法もあるが、本ガイドラインではExpressionを使ってアクセスポリシーを指定する方法で説明を行う。
+SpELの使い方については本節でも紹介するが、より詳しい使い方を知りたい場合は \ `Spring Framework Reference Documentation -Spring Expression Language (SpEL)- <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/htmlsingle/#expressions>`_\ を参照されたい。
+
+|
+
+Built-InのCommon Expressions
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| \ ``<sec:http>``\ 要素の子要素である\ ``<sec:intercept-url>``\ 要素に制御対象とするURL、認可するロールを記述することで、
-| URLのパス単位で認可制御を行うことができる。
 
-| 以下に、設定例を記載する。
+Spring Securityが用意している共通的なExpressionは以下の通り。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **Spring Securityが提供している共通的なExpression**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - Expression
+      - 説明
+    * - | \ ``hasRole(String role)``\
+      - | ログインユーザーが、引数に指定したロールを保持している場合に\ ``true``\ を返却する。
+    * - | \ ``hasAnyRole(String... roles)``\
+      - | ログインユーザー、が引数に指定したロールのいずれかを保持している場合に\ ``true``\ を返却する。
+    * - | \ ``isAnonymous()``\
+      - | ログインしていない匿名ユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``isRememberMe()``\
+      - | Remember Me認証によってログインしたユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``isAuthenticated()``\
+      - | ログイン中の場合に\ ``true``\ を返却する。
+    * - | \ ``isFullyAuthenticated()``\
+      - | Remember Me認証ではなく通常の認証プロセスによってログインしたユーザーの場合に\ ``true``\ を返却する。
+    * - | \ ``permitAll``\
+      - | 常に\ ``true``\ を返却する。
+    * - | \ ``denyAll``\
+      - | 常に\ ``false``\ を返却する。
+    * - | \ ``principal``\
+      - | 認証されたユーザーのユーザー情報(\ ``UserDetails``\ インタフェースを実装したクラスのオブジェクト)を返却する。
+    * - | \ ``authentication``\
+      - | 認証されたユーザーの認証情報(\ ``Authentication``\ インタフェースを実装したクラスのオブジェクト)を返却する。
+
+.. note:: **Expressionを使用した認証情報へのアクセス**
+
+    Expressionとして\ ``principal``\ や\ ``authentication``\ を使用すると、ログインユーザーのユーザー情報や認証情報を参照することができるため、ロール以外の属性を使ってアクセスポリシーを設定することが可能になる。
+
+.. note:: **ロール名のプレフィックス** 
+
+    Spring Security 3.2までは、ロール名には\ ``"ROLE_"`` \ プレフィックスを指定する必要があったが、Spring Security 4.0から\ ``"ROLE_"`` \ プレフィックスの指定が不要となっている。 
+
+    例）
+
+    * Spring Secuirty 3.2以前 : \ ``hasRole('ROLE_USER')``\ 
+    * Spring Security 4.0以降 : \ ``hasRole('USER')``\ 
+
+|
 
-* spring-security.xml
+Built-InのWeb Expressions
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityが用意しているWebアプリケーション向けExpressionは以下の通り。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **Spring Securityが提供するWebアプリケーション向けExpression**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - Expression
+      - 説明
+    * - | \ ``hasIpAddress(String ipAddress)``\
+      - | リクエスト元のIPアドレスが、引数に指定したIPアドレス体系に一致する場合に\ ``true``\ を返却する。
+
+演算子の使用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+演算子を使用した判定も行うことができる。
+以下の例では、ロールと、リクエストされたIPアドレス両方に合致した場合、アクセス可能となる。
+
+* spring-security.xmlの定義例
 
   .. code-block:: xml
   
-    <sec:http auto-config="true" use-expressions="true">
-        <sec:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
+    <sec:http>
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN') and hasIpAddress('192.168.10.1')"/>
         <!-- omitted -->
     </sec:http>
   
+  **使用可能な演算子一覧**
+  
   .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
   .. list-table::
      :header-rows: 1
      :widths: 20 80
   
-     * - | 属性名
-       - | 説明
-     * - | \ ``pattern``\ 
-       - | アクセス認可を行う対象のURLパターンを記述する。ワイルドカード「*」、「**」が使用できる。
-         | 「*」では、同一階層のみが対象であるのに対し、「**」では、指定階層以下の全URLが、認可設定の対象となる。
-     * - | \ ``access``\ 
-       - | Spring EL式でのアクセス制御式や、アクセス可能なロールを指定する。
-     * - | \ ``method``\ 
-       - | HTTPメソッド（GETやPOST等）を指定する。指定したメソッドのみに関して、URLパターンとマッチングを行う。
-         | 指定しない場合は、任意のHTTPメソッドに適用される。主にRESTを利用したWebサービスの利用時に活用できる。
-     * - | \ ``requires-channel``\ 
-       - | 「http」、もしくは「https」を指定する。指定したプロトコルでのアクセスを強制する。
-         | 指定しない場合、どちらでもアクセスできる。
+     * - 演算子
+       - 説明
+     * - | \ ``[式1] and [式2]``\ 
+       - | 式1、式2が、どちらも真の場合に、真を返す。
+     * - | \ ``[式1] or [式2]``\ 
+       - | いずれかの式が、真の場合に、真を返す。
+     * - | \ ``![式]``\ 
+       - | 式が真の場合は偽を、偽の場合は真を返す。
+
+|
+
+Webリソースへの認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、サーブレットフィルタの仕組みを利用してWebリソース(HTTPリクエスト)に対して認可処理を行う。
+
+認可処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Webリソースに対して認可処理を適用する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:intercept-url pattern="/**" access="isAuthenticated()" />  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:intercept-url>``\ タグに、HTTPリクエストに対してアクセスポリシーを定義する。
+        | ここでは、SpELを使用して「Webアプリケーション配下の全てのリクエストに対して認証済みのユーザーのみアクセスを許可する」というアクセスポリシーを定義している。
+
+.. note:: **use-expressionsのデフォルト定義**
+
+    Spring Security 4.0から、\ ``<sec:http>``\  タグの\ ``use-expressions``\ 属性のデフォルト値が\ ``true``\ に変更になっているため、\ ``true``\を使用する場合に明示的な記述は不要となった。
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+bean定義ファイルを使用して、Webリソースに対してアクセスポリシーを定義する方法について説明する。
+
+アクセスポリシーを適用するWebリソースの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
 
-  | 上記以外の属性については、\ `<intercept-url> <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#nsa-intercept-url>`_\ を参照されたい。
+まず、アクセスポリシーを適用するリソース(HTTPリクエスト)を指定する。
+アクセスポリシーを適用するリソースの指定は、\ ``<sec:intercept-url>``\ タグの以下の属性を使用する。
+
+.. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+.. list-table:: **アクセスポリシーを適用するリソースを指定するための属性**
+    :header-rows: 1
+    :widths: 20 80
+
+    * - 属性名
+      - 説明
+    * - | \ ``pattern``\
+      - | Ant形式又は正規表現で指定したパスパターンに一致するリソースを適用対象にするための属性。
+    * - | \ ``method``\
+      - | 指定したHTTPメソッド(GET,POSTなど)を使ってアクセスがあった場合に適用対象にするための属性。
+    * - | \ ``requires-channel``\ 
+      - | 「http」、もしくは「https」を指定する。指定したプロトコルでのアクセスを強制するための属性。
+        | 指定しない場合、どちらでもアクセス可能である。
+
+上記以外の属性については、\ `<intercept-url> <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-intercept-url>`_\ を参照されたい。
+
+* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
+
+.. code-block:: xml
+
+    <sec:http >
+        <sec:intercept-url pattern="/admin/accounts/**" access="..."/>
+        <sec:intercept-url pattern="/admin/**" access="..."/>
+        <sec:intercept-url pattern="/**" access="..."/>
+        <!-- omitted -->
+    </sec:http>
+
+
+Spring Securityは定義した順番でリクエストとのマッチング処理を行い、最初にマッチした定義を適用する。
+そのため、bean定義ファイルを使用してアクセスポリシーを指定する場合も定義順番には注意が必要である。
+
+.. tip:: **パスパターンの解釈**
+
+    Spring Securityのデフォルトの動作では、パスパターンはAnt形式で解釈する。
+    パスパターンを正規表現で指定したい場合は、\ ``<sec:http>``\ タグの\ ``request-matcher``\ 属性に
+    \ ``"regex"``\ を指定すること。
+
+      .. code-block:: xml
+
+          <sec:http request-matcher="regex">
+              <sec:intercept-url pattern="/admin/accounts/.*" access=hasRole('ACCOUNT_MANAGER')" />
+              <!-- omitted -->
+          </sec:http>
+
+アクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+つぎに、アクセスポリシーを指定する。
+アクセスポリシーの指定は、\ ``<sec:intercept-url>``\ タグの\ ``access``\ 属性に指定する。
+
+* \ ``<sec:intercept-url>``\ タグ\ ``access``\ 属性の定義例（\ ``spring-security.xml``\ ）
+
+  .. code-block:: xml
+  
+    <sec:http>
+        <sec:intercept-url pattern="/admin/accounts/**" access="hasRole('ACCOUNT_MANAGER')"/>
+        <sec:intercept-url pattern="/admin/configurations/**" access="hasIpAddress('127.0.0.1') and hasRole('CONFIGURATION_MANAGER')" />
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
+        <!-- omitted -->
+    </sec:http>
+  
+  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
+  .. list-table:: **アクセスポリシーを指定するための属性**
+     :header-rows: 1
+     :widths: 20 80
+  
+     * - 属性名
+       - 説明
+     * - | \ ``access``\ 
+       - | SpELでのアクセス制御式や、アクセス可能なロールを指定する。
 
 | ログインユーザーに「ROLE_USER」「ROLE_ADMIN」というロールがある場合を例に、設定例を示す。
 
-* spring-security.xml
+* \ ``<sec:intercept-url>``\ タグ\ ``pattern``\ 属性の定義例（spring-security.xml）
 
   .. code-block:: xml
   
-    <sec:http auto-config="true" use-expressions="true">
-        <sec:intercept-url pattern="/reserve/*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" /> <!-- (1) -->
-        <sec:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')" /> <!-- (2) -->
+    <sec:http>
+        <sec:intercept-url pattern="/reserve/**" access="hasAnyRole('USER','ADMIN')" /> <!-- (1) -->
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" /> <!-- (2) -->
         <sec:intercept-url pattern="/**" access="denyAll" /> <!-- (3) -->
         <!-- omitted -->
     </sec:http>
@@ -146,34 +392,34 @@ How to use
      :header-rows: 1
      :widths: 10 90
   
-     * - | 項番
-       - | 説明
+     * - 項番
+       - 説明
      * - | (1)
-       - | 「/reserve/\*」にアクセスするためには、「ROLE_USER」もしくは「ROLE_ADMIN」ロールが必要である。
+       - | 「/reserve/\**」にアクセスするためには、「ROLE_USER」もしくは「ROLE_ADMIN」ロールが必要である。
          | \ ``hasAnyRole``\ については、後述する。
      * - | (2)
-       - | 「/admin/\*」にアクセスするためには、「ROLE_ADMIN」ロールが必要である。
+       - | 「/admin/\**」にアクセスするためには、「ROLE_ADMIN」ロールが必要である。
          | \ ``hasRole``\ については、後述する。
      * - | (3)
        - | \ ``denyAll``\ を全てのパターンに設定し、
-         | 権限設定が記述されていないURLに対してはどのユーザもアクセス出来ない設定としている。
+         | 権限設定が記述されていないURLに対してはどのユーザーもアクセス出来ない設定としている。
          | \ ``denyAll``\ については、後述する。
 
-  .. note::    **URLパターンの記述順序について**
+  .. note:: **URLパターンの記述順序について**
 
-     クライアントからのリクエストに対して、intercept-urlで記述されているパターンに、上から順にマッチさせ、
-     マッチしたパターンに対してアクセス認可を行う。そのため、パターンの記述は、必ず、より限定されたパターンから記述すること。
+     クライアントからのリクエストに対して、intercept-urlで記述されているパターンに、上から順にマッチさせ、マッチしたパターンに対してアクセス認可を行う。
+     そのため、パターンの記述は、必ず、より限定されたパターンから記述すること。
 
-| \ ``<sec:http>``\ 属性に\ ``use-expressions="true"``\ の設定をしたことで、Spring EL式が有効になる。
-| \ ``access``\ 属性に記述したSpring EL式は真偽値で評価され、式が真の場合に、アクセスが認可される。
-| 以下に、使用例を示す。
+\ Spring Securiyではデフォルトで、SpELが有効になっている。 
+\ ``access``\ 属性に記述したSpELは真偽値で評価され、式が真の場合に、アクセスが認可される。
+以下に使用例を示す。
 
-* spring-security.xml
+* spring-security.xmlの定義例
 
   .. code-block:: xml
   
-    <sec:http auto-config="true" use-expressions="true">
-        <sec:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>  <!-- (1) -->
+    <sec:http>
+        <sec:intercept-url pattern="/admin/**" access="hasRole('ADMIN')"/>  <!-- (1) -->
         <!-- omitted -->
     </sec:http>
   
@@ -185,386 +431,662 @@ How to use
      * - 項番
        - 説明
      * - | (1)
-       - | \ ``hasRole('ロール名')``\ を指定することで、ログインユーザが指定したロールを保持していれば真を返す。
+       - | \ ``hasRole('ロール名')``\ を指定することで、ログインユーザーが指定したロールを保持していれば真を返す。
   
   .. _spring-el:
   
-  | **使用可能なExpression一覧例**
-  
-  .. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 30 70
-  
-     * - 属性名
-       - 説明
-     * - | \ ``hasRole('ロール名')``\ 
-       - | ユーザが指定したロールを保持していれば、真を返す。
-     * - | \ ``hasAnyRole('ロール1','ロール2')``\ 
-       - | ユーザが指定したいずれかのロールを保持していれば、真を返す。
-     * - | \ ``permitAll``\ 
-       - | 常に真を返す。認証されていない場合も、アクセスできることに注意する。
-     * - | \ ``denyAll``\ 
-       - | 常に偽を返す。
-     * - | \ ``isAnonymous()``\ 
-       - | 匿名ユーザであれば、真を返す。
-     * - | \ ``isAuthenticated()``\ 
-       - | 認証されたユーザならば、真を返す。
-     * - | \ ``isFullyAuthenticated()``\ 
-       - | 匿名ユーザ、もしくはRememberMe機能での認証であれば、偽を返す。
-     * - | \ ``hasIpAddress('IPアドレス')``\ 
-       - | リクエストURL、およびJSPタグへのアクセス認可のみで、有効となる。
-         | 指定のIPアドレスからのリクエストであれば、真を返す。
-  
-  | その他、使用可能なSpring EL式は、 \ `Common built-in expressions <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#el-common-built-in>`_\ を参照されたい。
-  
-  | 演算子を使用した判定も行うことができる。
-  | 以下の例では、ロールと、リクエストされたIPアドレス両方に合致した場合、アクセス可能となる。
+使用可能な主なExpressionは、:ref:`SpringSecurityAuthorizationPolicy` を参照されたい。
 
-* spring-security.xml
+|
 
-  .. code-block:: xml
-  
-    <sec:http auto-config="true" use-expressions="true">
-        <sec:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN') and hasIpAddress('192.168.10.1')"/>
+メソッドへの認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、Spring AOPの仕組みを利用してDIコンテナで管理しているBeanのメソッド呼び出しに対して認可処理を行う。
+
+メソッドに対する認可処理は、ドメイン層(サービス層)のメソッド呼び出しに対して行うことを想定して提供されている。
+メソッドに対する認可処理を使用すると、ドメインオブジェクトのプロパティを参照することができるため、きめの細かいアクセスポリシーの定義を行うことが可能になる。
+
+|
+
+AOPの有効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッドへの認可処理を使用する場合は、メソッド呼び出しに対して認可処理を行うためのコンポーネント(AOP)を有効化する必要がある。
+AOPを有効化すると、アクセスポリシーをメソッドのアノテーションに定義できるようになる。
+
+Spring Securityは、以下のアノテーションをサポートしている。
+
+* \ ``@PreAuthorize``\ 、\ ``@PostAuthorize``\ 、\ ``@PreFilter``\ 、\ ``@PostFilter``\
+* JSR-250 (\ ``javax.annotation.security``\ パッケージ)のアノテーション(\ ``@RolesAllowed``\ など)
+* \ ``@Secured``\
+
+本ガイドラインでは、アクセスポリシーをExpressionで使用することができる\ ``@PreAuthorize``\、\ ``@PostAuthorize``\ を使用する方法を説明する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:global-method-security pre-post-annotations="enabled" /> <!-- (1) (2) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:global-method-security>``\ タグを付与すると、メソッド呼び出しに対する認可処理を行うAOPが有効になる。
+    * - | (2)
+      - | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定する。
+        | \ ``pre-post-annotations``\ 属性に\ ``true``\ を指定すると、Expressionを指定してアクセスポリシーを定義できるアノテーションが有効になる。
+
+|
+
+認可処理の適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッドに対して認可処理を適用する際は、アクセスポリシーを指定するアノテーションを使用して、メソッド毎にアクセスポリシーを定義する。
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+メソッド実行前に適用するアクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+メソッドの実行前に適用するアクセスポリシーを指定する場合は、\ ``@PreAuthorize``\ を使用する。
+
+\ ``@PreAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行が許可される。
+下記例では、管理者以外は、他人のアカウント情報にアクセスできないように定義している。
+
+* \ ``@PreAuthorize``\ の定義例
+
+.. code-block:: java
+
+    // (1) (2)
+    @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
+    public Account findOne(String username) {
+        return accountRepository.findOne(username);
+    }
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | 認可処理を適用したいメソッドに、\ ``@PreAuthorize``\ を付与する。
+    * - | (2)
+      - | \ ``value``\ 属性に、メソッドに対してアクセスポリシーを定義する。
+        | ここでは、「管理者の場合は全てのアカウントへのアクセスを許可する」「管理者以外の場合は自身のアカウントへのアクセスのみ許可する」というアクセスポリシーを定義している。
+
+ここでポイントになるのは、Expressionの中からメソッドの引数にアクセスしている部分である。
+具体的には、「\ ``#username``\ 」の部分が引数にアクセスしている部分である。
+Expression内で「# + 引数名」形式のExpressionを指定することで、メソッドの引数にアクセスすることができる。
+
+.. tip:: **引数名を指定するアノテーション**
+
+    Spring Securityは、クラスに出力されているデバッグ情報から引数名を解決する仕組み
+    になっているが、アノテーション(\ ``@org.springframework.security.access.method.P``\ )
+    を使用して明示的に引数名を指定することもできる。
+
+    以下のケースにあてはまる場合は、アノテーションを使用して明示的に変数名を指定する。
+
+    * クラスに変数のデバッグ情報を出力しない
+    * Expressionの中から実際の変数名とは別の名前を使ってアクセスしたい (例えば短縮した名前)
+
+      .. code-block:: java
+
+          @PreAuthorize("hasRole('ADMIN') or (#username == principal.username)")
+          public Account findOne(@P("username") String username) {
+              return accountRepository.findOne(username);
+          }
+    
+    なお、\ ``#username``\ と、メソッドの引数である \ ``username``\ の名称が一致している場合は \ ``@P``\ を省略することが可能である。
+    ただし、Spring Securityは引数名の解決を、実装クラスの引数名を使用して行っているため ``@PreAuthorize`` アノテーションをインターフェースに定義している場合には、
+    **実装クラスの引数名を、 @PreAuthorize 内で指定した #username と一致させる必要がある** ので、注意されたい。
+
+    JDK 8 から追加されたコンパイルオプション(\ ``-parameters``\ )を使用すると、メソッドパラメータにリフレクション用のメタデータが生成されるため、アノテーションを指定しなくても引数名が解決される。
+
+メソッド実行後に適用するアクセスポリシーの指定
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
+
+メソッドの実行後に適用するアクセスポリシーを指定する場合は、\ ``@PostAuthorize``\ を使用する。
+
+\ ``@PostAuthorize``\ の\ ``value``\ 属性に指定したExpressionの結果が\ ``true``\ になるとメソッドの実行結果が呼び出し元に返却される。
+下記例では、所属する部署が違うユーザーのアカウント情報にアクセスできないように定義している。
+
+* \ ``@PostAuthorize``\ の定義例
+
+.. code-block:: java
+
+    @PreAuthorize("...")
+    @PostAuthorize("(returnObject == null) " +
+            "or (returnObject.departmentCode == principal.account.departmentCode)")
+    public Account findOne(String username) {
+        return accountRepository.findOne(username);
+    }
+
+ここでポイントになるのは、Expressionの中からメソッドの返り値にアクセスしている部分である。
+具体的には、「\ ``returnObject.departmentCode``\ 」の部分が返り値にアクセスしている部分である。
+Expression内で「\ ``returnObject``\ 」を指定すると、メソッドの返り値にアクセスすることができる。
+
+|
+
+JSPの画面項目への認可
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、JSPタグライブラリを使用してJSPの画面項目に対して認可処理を適用することができる。
+
+ここでは最もシンプルな定義を例に、JSPの画面項目のアクセスに対して認可処理を適用する方法について説明する。
+
+|
+
+アクセスポリシーの定義
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+JSPタグライブラリを使用してJSPの画面項目に対してアクセスポリシーを定義する際は、表示を許可する条件(アクセスポリシー)をJSPに定義する。
+
+* アクセスポリシー定義例
+
+.. code-block:: jsp
+
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <!-- (1) -->
+    <sec:authorize access="hasRole('ADMIN')"> <!-- (2) -->
+        <h2>Admin Menu</h2>
         <!-- omitted -->
-    </sec:http>
-  
-  | **使用可能な演算子一覧**
-  
-  .. tabularcolumns:: |p{0.20\linewidth}|p{0.80\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 20 80
-  
-     * - 演算子
-       - 説明
-     * - | \ ``[式1] and [式2]``\ 
-       - | 式1、式2が、どちらも真の場合に、真を返す。
-     * - | \ ``[式1] or [式2]``\ 
-       - | いずれかの式が、真の場合に、真を返す。
-     * - | \ ``![式]``\ 
-       - | 式が真の場合は偽を、偽の場合は真を返す。
+    </sec:authorize>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
+    * - 項番
+      - 説明
+    * - | (1)
+      - | アクセスポリシーを適用したい部分を\ ``<sec:authorize>``\ タグで囲む。
+    * - | (2)
+      - | \ ``access``\ 属性にアクセスポリシーを定義する。ここでは、「管理者の場合は表示を許可する」というアクセスポリシーを定義している。
 
-アクセス認可制御を行わないURLの設定
+|
+
+Webリソースに指定したアクセスポリシーとの連動
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| トップページやログイン画面、cssファイルへのパスなど、認証が必要のないURLに対しては、
-| http要素のpattern属性、およびsecurity属性を利用する。
 
-  * spring-security.xml
-  
-  .. code-block:: xml
-  
-    <sec:http pattern="/css/*" security="none"/>  <!-- 属性の指定順番で(1)～(2) -->
-    <sec:http pattern="/login" security="none"/>
-    <sec:http auto-config="true" use-expressions="true">
+ボタンやリンクなど(サーバーへのリクエストを伴う画面項目)に対してアクセスポリシーを定義する際は、リクエスト先のWebリソースに定義されているアクセスポリシーと連動させる。
+Webリソースに指定したアクセスポリシーと連動させる場合は、\ ``<sec:authorize>``\ タグの\ ``url``\ 属性を使用する。
+
+\ ``url``\ 属性に指定したWebリソースにアクセスできる場合に限り\ ``<sec:authorize>``\ タグの中に実装したJSPの処理が実行される。
+
+* Webリソースに定義されているアクセスポリシーとの連携例
+
+.. code-block:: jsp
+
+    <ul>
+        <!-- (1) -->
+        <sec:authorize url="/admin/accounts"> <!-- (2) -->
+            <li>
+                <a href="<c:url value='/admin/accounts' />">Account Management</a>
+            </li>
+        </sec:authorize>
+    </ul>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ボタンやリンクを出力する部分を\ ``<sec:authorize>``\ タグで囲む。
+    * - | (2)
+      - | \ ``<sec:authorize>``\ タグの\ ``url``\ 属性にWebリソースへアクセスするためのURLを指定する。
+        | ここでは、「\ ``"/admin/accounts"``\ というURLが割り振られているWebリソースにアクセス可能な場合は表示を許可する」というアクセスポリシーを定義しており、Webリソースに定義されているアクセスポリシーを直接意識する必要がない。
+
+.. note:: **HTTPメソッドによるポリシーの指定**
+
+    Webリソースのアクセスポリシーの定義をする際に、HTTPメソッドによって異なるアクセスポリシーを指定している場合は、\ ``<sec:authorize>``\ タグの\ ``method``\ 属性を指定して、連動させる定義を特定すること。
+
+.. warning:: **表示制御に関する留意点**
+
+    ボタンやリンクなどの表示制御を行う場合は、必ずWebリソースに定義されているアクセスポリシーと連動させること。
+
+    ボタンやリンクに対して直接アクセスポリシーの指定を行い、Webリソース自体にアクセスポリシーを定義していないと、
+    URLを直接してアクセスするような不正なアクセスを防ぐことができない。
+
+|
+
+認可処理の判定結果を変数に格納
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``<sec:authorize>``\ タグを使って呼び出した認可処理の判定結果は、変数に格納して使いまわすことができる。
+
+* JSPの実装例
+
+.. code-block:: jsp
+
+    <sec:authorize url="/admin/accounts"
+                   var="hasAccountsAuthority"/> <!-- (1) -->
+
+    <c:if test="${hasAccountsAuthority}"> <!-- (2) -->
         <!-- omitted -->
-    </sec:http>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | \ ``pattern``\ 属性に設定を行う対象のURLパターンを記述する。\ ``pattern``\ 属性を記述しない場合、すべてのパターンにマッチする。
-     * - | (2)
-       - | \ ``security``\ 属性に\ ``none``\ を指定することで、\ ``pattern``\ 属性に記述されたパスは、Spring Securityフィルタチェインを回避することができる。
+    </c:if>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - |  (1)
+      - | \ ``var``\ 属性に判定結果を格納するための変数名を指定する。
+        | アクセスが許可された場合は、変数に\ ``true``\ が設定される。
+    * - | (2)
+      - | 変数の値を参照して表示処理を実装する。
+
+|
+
+認可エラー時のレスポンス
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、リソースへのアクセスを拒否した場合、以下のような流れでエラーをハンドリングしてレスポンスの制御を行う。
+
+.. figure:: ./images_Authorization/AuthorizationAccessDeniedHandling.png
+    :width: 100%
 
+    **認可エラーのハンドリングの仕組み**
 
-URLパターンでの例外処理
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityは、リソースやメソッドへのアクセスを拒否するために、\ ``AccessDeniedException``\ を発生させる。
+    * - | (2)
+      - | \ ``ExceptionTranslationFilter``\ クラスは、\ ``AccessDeniedException``\ をキャッチし、\ ``AccessDeniedHandler``\ または\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+    * - | (3)
+      - | 認証済みのユーザーからのアクセスの場合は、\ ``AccessDeniedHandler``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+    * - | (4)
+      - | 未認証のユーザーからのアクセスの場合は、\ ``AuthenticationEntryPoint``\ インタフェースのメソッドを呼び出してエラー応答を行う。
+
+|
+
+AccessDeniedHandler
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 認可されていないURLにアクセスした場合、\ ``org.springframework.security.access.AccessDeniedException``\ がスローされる。
-| デフォルトの設定では、\ ``org.springframework.security.web.access.ExceptionTranslationFilter``\ に設定された
-| \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl``\ が、エラーコード403を返却する。
-| http要素に、アクセス拒否時のエラーページを設定することで、アクセス拒否時に指定のエラーページに遷移させることができる。
 
-* spring-security.xml
+\ ``AccessDeniedHandler``\ インタフェースは、認証済みのユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
+Spring Securityは、\ ``AccessDeniedHandler``\ インタフェースの実装クラスとして以下のクラスを提供している。
 
-  .. code-block:: xml
-  
-    <sec:http auto-config="true" use-expressions="true">
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供するAccessDeniedHandlerの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``AccessDeniedHandlerImpl``\
+      - | HTTPレスポンスコードに403(Forbidden)を設定し、指定されたエラーページに遷移する。
+        | エラーページの指定がない場合は、HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``InvalidSessionAccessDeniedHandler``\
+      - | \ ``InvalidSessionStrategy``\ インタフェースの実装クラスに処理を委譲する。
+        | このクラスは、CSRF対策とセッション管理機能を使用してセッションタイムアウトを検知する設定を有効にした際に、CSRFトークンがセッションに存在しない(つまりセッションタイムアウトが発生している)場合に使用される。
+    * - | \ ``DelegatingAccessDeniedHandler``\
+      - | \ ``AccessDeniedException``\ と\ ``AccessDeniedHandler``\ インタフェースの実装クラスのマッピングを行い、発生した\ ``AccessDeniedException``\に対応する\ ``AccessDeniedHandler``\ インタフェースの実装クラスに処理を委譲する。
+        | \ ``InvalidSessionAccessDeniedHandler``\ はこの仕組みを利用して呼び出されている。
+
+
+Spring Securityのデフォルトの設定では、エラーページの指定がない\ ``AccessDeniedHandlerImpl``\ が使用される。
+
+|
+
+AuthenticationEntryPoint
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``AuthenticationEntryPoint``\ インタフェースは、未認証のユーザーからのアクセスを拒否した際のエラー応答を行うためのインタフェースである。
+Spring Securityは、\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスとして以下のクラスを提供している。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **Spring Securityが提供する主なAuthenticationEntryPointの実装クラス**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - クラス名
+      - 説明
+    * - | \ ``LoginUrlAuthenticationEntryPoint``\
+      - | フォーム認証用のログインフォームを表示する。
+    * - | \ ``BasicAuthenticationEntryPoint``\
+      - | Basic認証用のエラー応答を行う。
+        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてBasic認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``DigestAuthenticationEntryPoint``\
+      - | Digest認証用のエラー応答を行う。
+        | 具体的には、HTTPレスポンスコードに401(Unauthorized)を、レスポンスヘッダとしてDigest認証用の「\ ``WWW-Authenticate``\ 」ヘッダを設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``Http403ForbiddenEntryPoint``\
+      - | HTTPレスポンスコードに403(Forbidden)を設定してエラー応答(\ ``HttpServletResponse#sendError``\ )を行う。
+    * - | \ ``DelegatingAuthenticationEntryPoint``\
+      - | \ ``RequestMatcher``\ と\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスのマッピングを行い、HTTPリクエストに対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスに処理を委譲する。
+
+Spring Securityのデフォルトの設定では、認証方式に対応する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される。
+
+|
+
+.. _SpringSecurityAuthorizationOnError:
+
+
+認可エラー時の遷移先
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityのデフォルトの設定だと、認証済みのユーザーからのアクセスを拒否した際は、アプリケーションサーバのエラーページが表示される。
+アプリケーションサーバーのエラーページを表示してしまうと、システムのセキュリティを低下させる要因になるのため、適切なエラー画面を表示することを推奨する。
+エラーページの指定は、以下のようなbean定義を行うことで可能である。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler
+            error-page="/WEB-INF/views/common/error/accessDeniedError.jsp" /> <!-- (1) -->
         <!-- omitted -->
-        <sec:access-denied-handler error-page="/accessDeneidPage" />  <!-- (1) -->
     </sec:http>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | \ ``<sec:access-denied-handler>``\ 要素の\ ``error-page``\ 属性に、遷移先のパスを指定する。
 
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-アクセス認可(JSP)
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 画面表示項目を制御するには、Spring Securityが提供しているカスタムJSPタグ\ ``<sec:authorize>``\ を利用する。
-| ``<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>``
-| のタグライブラリの使用宣言設定をされていることが、前提条件である。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:access-denied-handler>``\ タグの\ ``error-page``\ 属性に認可エラー用のエラーページを指定する。
 
-* \ ``<sec:authorize>``\ タグの属性一覧
+.. tip:: **サーブレットコンテナのエラーページ機能の利用**
 
-  .. tabularcolumns:: |p{0.15\linewidth}|p{0.85\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 15 85
-  
-     * - | 属性名
-       - | 説明
-     * - | \ ``access``\ 
-       - | アクセス制御式を記述する。真であれば、タグ内が評価される。
-     * - | \ ``url``\ 
-       - | 設定したURLに対して権限が与えられている場合に、タグ内が評価される。リンクの表示の制御等に利用する。
-     * - | \ ``method``\ 
-       - | HTTPメソッド（GETやPOST等）を指定する。 url属性と合わせて利用し、指定したメソッドのみに関して、
-         | 指定したURLパターンとマッチングを行う。指定しない場合、GETが適用される。
-     * - | \ ``ifAllGranted``\ 
-       - | 設定したロールが全て与えられている場合に、タグ内が評価される。ロール階層機能は効かない。
-     * - | \ ``ifAnyGranted``\ 
-       - | 設定したロールについて、いずれかが与えられている場合に、タグ内が評価される。ロール階層機能は効かない。
-     * - | \ ``ifNotGranted``\ 
-       - | 設定されたロールが与えられていない場合、タグの中身が評価される。ロール階層機能は効かない。
-     * - | \ ``var``\ 
-       - | タグの評価結果を格納するpageスコープの変数を宣言する。同等の権限チェックをページ内で行う場合に利用する。
-
-| 以下に、\ ``<sec:authorize>``\ タグの使用例を示す。
-
-* spring-security.xml
-
-  .. code-block:: jsp
-  
-    <div>
-      <sec:authorize access="hasRole('ROLE_USER')">  <!-- (1) -->
-          <p>This screen is for ROLE_USER</p>
-      </sec:authorize>
-      <sec:authorize url="/admin/menu">  <!-- (2) -->
-          <p>
-            <a href="/admin/menu">Go to admin screen</a>
-          </p>
-      </sec:authorize>
-    </div>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | 「ROLE_USER」を持つ場合のみ、タグ内が表示される。
-     * - | (2)
-       - | 「/admin/menu」に対してアクセスが認可されている場合、タグ内が表示される。
+    認可エラーのエラーページは、サーブレットコンテナのエラーページ機能を使って指定することもできる。
+
+    サーブレットコンテナのエラーページ機能を使う場合は、\ ``web.xml``\ の\ \ ``<error-page>``\ タグを使用してエラーページを指定する。
 
-  .. warning::
+     .. code-block:: xml
 
-     \ ``<sec:authorize>``\ タグによる認可処理は、\ **画面表示の制御でしかない**\ ため、特定の権限でリンクを表示されなくても、URLが推測されれば、直接リンク先のURLにアクセスできてしまう。
-     そのため、必ず、前述の「アクセス認可(リクエストURL)」、もしくは、後述の「アクセス認可(Method)」を併用して、本質的な認可制御をに行うこと。
+         <error-page>
+             <error-code>403</error-code>
+             <location>/WEB-INF/views/common/error/accessDeniedError.jsp</location>
+         </error-page>
+
+How to extend
+--------------------------------------------------------------------------------
 
+本節では、Spring Securityが用意しているカスタマイズポイントや拡張方法について説明する。
 
-アクセス認可(Method)
+Spring Securityは、多くのカスタマイズポイントを提供しているため、すべてのカスタマイズポイントは紹介しない。
+本節では代表的なカスタマイズポイントに絞って説明を行う。
+
+|
+
+認可エラー時のレスポンス (認証済みユーザー編)
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| メソッドに対して、認可制御ができる。
-| SpringのDIコンテナで管理されているBeanが、認可の対象となる。
 
-| 前述の2つの認可方法はアプリケーション層での認可制御であったが、
-| メソッドレベルの認可制御はドメイン層(Serviceクラス)に対して行う。
-| 制御したいメソッドに対して\ ``org.springframework.security.access.prepost.PreAuthorize``\ アノテーションを設定すればよい。
+ここでは、認証済みユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
 
-* spring-security.xml
+.. _SpringSecurityAuthorizationAccessDeniedHandler:
 
-  .. code-block:: xml
-  
-    <sec:global-method-security pre-post-annotations="enabled"/>  <!-- (1) -->
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | \ ``<sec:global-method-security>``\ 要素の\ ``pre-post-annotations``\ 属性を\ ``enabled``\ に指定する。
-         | デフォルトは\ ``disabled``\ である。
+AccessDeniedHandlerの適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-* Javaコード
+Spring Securityが提供しているデフォルトの動作をカスタマイズする仕組みだけでは要件をみたせない場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを直接適用することができる。
 
-  .. code-block:: java
+例えば、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、エラーページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
+そのような場合は、\ ``AccessDeniedHandler``\ インタフェースの実装クラスを作成してSpring Securityに適用することで実現することができる。
 
-    @Service
-    @Transactional
-    public class UserServiceImpl implements UserService {
-        // omitted
+* AccessDeniedHandlerインタフェースの実装クラスの作成例
 
-        @PreAuthorize("hasRole('ROLE_ADMIN')") // (1)
-        @Override
-        public User create(User user) {
-           // omitted
-        }
+.. code-block:: java
+
+    public class JsonDelegatingAccessDeniedHandler implements AccessDeniedHandler {
 
+        private final RequestMatcher jsonRequestMatcher;
+        private final AccessDeniedHandler delegateHandler;
 
-        @PreAuthorize("isAuthenticated()")
-        @Override
-        public User update(User user) {
-           // omitted
+        public JsonDelegatingAccessDeniedHandler(
+                RequestMatcher jsonRequestMatcher, AccessDeniedHandler delegateHandler) {
+            this.jsonRequestMatcher = jsonRequestMatcher;
+            this.delegateHandler = delegateHandler;
         }
+
+        public void handle(HttpServletRequest request, HttpServletResponse response,
+                           AccessDeniedException accessDeniedException)
+                throws IOException, ServletException {
+            if (jsonRequestMatcher.matches(request)) {
+                // response error information of JSON format
+                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
+                // omitted
+            } else {
+                // response error page of HTML format
+                delegateHandler.handle(
+                        request, response, accessDeniedException);
+            }
+        }
+
     }
 
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - | 項番
-       - | 説明
-     * - | (1)
-       - | アクセス制御式を記述する。メソッドを実行する前に式が評価され、真であれば、メソッドが実行される。
-         | 偽であれば、\ ``org.springframework.security.access.AccessDeniedException``\ がスローされる。
-         | 設定可能な値は、\ :ref:`authorization-intercept-url`\ で述べたExpressionや、および
-         | \ `Spring Expression Language (SpEL) <http://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/html/expressions.html>`_\ で記述された式である。
+* spring-security.xmlの定義例
 
-  .. tip::
-  
-    上記の設定では\ ``org.springframework.security.access.prepost.PreAuthorize``\ 以外にも、以下のアノテーションを使用できる。
-  
-    * \ ``org.springframework.security.access.prepost.PostAuthorize``\ 
-    * \ ``org.springframework.security.access.prepost.PreFilter``\ 
-    * \ ``org.springframework.security.access.prepost.PostFilter``\ 
-  
-    これらの詳細は\ `Spring Security マニュアル <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#el-pre-post-annotations>`_\ を参照されたい。
+.. code-block:: xml
 
-  .. note::
+    <!-- (1) -->
+    <bean id="accessDeniedHandler"
+          class="com.example.web.security.JsonDelegatingAccessDeniedHandler">
+        <constructor-arg>
+            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                <constructor-arg value="/api/**"/>
+            </bean>
+        </constructor-arg>
+        <constructor-arg>
+            <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                <property name="errorPage"
+                          value="/WEB-INF/views/common/error/accessDeniedError.jsp"/>
+            </bean>
+        </constructor-arg>
+    </bean>
 
-    Spring SecurityではJava標準であるJSR-250の\ ``javax.annotation.security.RolesAllowed``\ アノテーションによる認可制御も可能であるが、
-    \ ``@RolesAllowed``\ ではSpELによる記述ができない。\ ``@PreAuthorize``\ であればSpELを用いて、spring-security.xmlの設定と同じ記法で認可制御
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler ref="accessDeniedHandler" />  <!-- (2) -->
+        <!-- omitted -->
+    </sec:http>
 
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-  .. note::
-  
-    リクエストパスに対する認可制御はControllerのメソッドにアノテーションをつけるのではなく、spring-security.xmlに設定を行うことを推奨する。
-    
-    ServiceがWeb経由でしか実行されず、リクエストパスのすべてのパターンが認可制御されているのであればServiceの認可制御は行わなくても良い。
-    Serviceがどこから実行されるか分からず、認可制御が必要な場合にアノテーションを使用するとよい。
+    * - 項番
+      - 説明
+    * - \ (1)
+      - \ ``AccessDeniedHandler``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
+    * - \ (2)
+      - \ ``<sec:access-denied-handler>``\ タグの\ ``ref``\ 属性に\ ``AccessDeniedHandler``\ のbeanを指定する。
 
-How to extend
---------------------------------------------------------------------------------
+|
 
-ロール階層機能
+認可エラー時のレスポンス (未認証ユーザー編)
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| ロールに階層関係を設定することができる。
-| 上位に設定したロールは、下位ロールに認可されたすべてのアクセスが可能となる。
-| ロールの関係が複雑な場合は、階層機能を検討されたい。
 
-| ROLE_ADMINを上位ロール、ROLE_USERを下位ロールとして階層関係を設定する例で説明する。
+ここでは、未認証ユーザーからのアクセスを拒否した際の動作をカスタマイズする方法を説明する。
 
-.. figure:: ./images/Authorization_RoleHierarchy.png
-   :alt: RoleHierarchy
-   :width: 30%
-   :align: center
-
-   **Picture - RoleHierarchy**
+リクエスト毎にAuthenticationEntryPointを適用
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-| このとき、下記のようにアクセス認可を設定すると、
-| 「ROLE_ADMIN」のロールを持つユーザも、「/user/\*」のURLにアクセスできる。
+認証済みユーザーと同様に、Ajaxのリクエスト(REST APIなど)で認可エラーが発生した場合は、ログインページ(HTML)ではなくJSON形式でエラー情報を応答することが求められるケースがある。
+そのような場合は、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをSpring Securityに適用することで実現することができる。
 
-**Spring Security 設定ファイル**
+* spring-security.xmlの定義例
 
 .. code-block:: xml
 
-  <sec:http auto-config="true" use-expressions="true">
-      <sec:intercept-url pattern="/user/*" access="hasAnyRole('ROLE_USER')" />
-      <!-- omitted -->
-  </sec:http>
+    <!-- (1) -->
+    <bean id="authenticationEntryPoint"
+          class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
+        <constructor-arg>
+            <map>
+                <entry>
+                    <key>
+                        <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                            <constructor-arg value="/api/**"/>
+                        </bean>
+                    </key>
+                    <bean class="com.example.web.security.JsonAuthenticationEntryPoint"/>
+                </entry>
+            </map>
+        </constructor-arg>
+        <property name="defaultEntryPoint">
+            <bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
+                <constructor-arg value="/login"/>
+            </bean>
+        </property>
+    </bean>
+
+    <sec:http entry-point-ref="authenticationEntryPoint"> <!-- (2) -->
+        <!-- omitted -->
+    </sec:http>
 
-| アクセス認可(リクエストURL)、アクセス認可(JSP)、アクセス認可(Method)のそれぞれで設定方法が異なるため、
-| 使用方法について、以降で説明する。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスをbean定義してDIコンテナに登録する。
+        | ここでは、Spring Securityが提供している\ ``DelegatingAuthenticationEntryPoint``\ クラスを利用して、リクエストのパターン毎に\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスを適用している。
+    * - | (2)
+      - | \ ``<sec:http>``\ タグの\ ``entry-point-ref``\ 属性に\ ``AuthenticationEntryPoint``\ のbeanを指定する。
+
+.. note:: **デフォルトで適用されるAuthenticationEntryPoint**
+
+    リクエストに対応する\ \ ``AuthenticationEntryPoint``\ インタフェースの実装クラスの指定がない場合は、Spring Securityがデフォルトで定義する\ ``AuthenticationEntryPoint``\ インタフェースの実装クラスが使用される仕組みになっている。
+    認証方式としてフォーム認証を使用する場合は、\ ``LoginUrlAuthenticationEntryPoint``\ クラスが使用されログインフォームが表示される。
+
+|
+
+ロールの階層化
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+認可処理では、ロールに階層関係を設けることができる。
 
-共通設定
+上位に指定したロールは、下位のロールにアクセスが許可されているリソースにもアクセスすることができる。
+ロールの関係が複雑な場合は、階層関係も設けることも検討されたい。
+
+例えば、「ROLE_ADMIN」が上位ロール、「ROLE_USER」が下位ロールという階層関係を設けた場合、
+下記のようアクセスポリシーを設定すると、「ROLE_ADMIN」権限を持つユーザーは、
+\ ``"/user"``\ 配下のパス(「ROLE_USER」権限を持つユーザーがアクセスできるパス)にアクセスすることができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <sec:intercept-url pattern="/user/**" access="hasAnyRole('USER')" />
+        <!-- omitted -->
+    </sec:http>
+
+|
+
+階層関係の設定
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 共通で必要な設定について述べる。
-| 階層関係を管理する\ ``org.springframework.security.access.hierarchicalroles.RoleHierarchy`` クラスのBean定義を行う。
 
-* spring-security.xml
+ロールの階層関係は、\ ``org.springframework.security.access.hierarchicalroles.RoleHierarchy``\ インタフェースの実装クラスで解決する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
 
-  .. code-block:: xml
-  
     <bean id="roleHierarchy"
         class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> <!-- (1) -->
-        <property name="hierarchy">
-            <value> <!-- (2) -->
+        <property name="hierarchy"> <!-- (2) -->
+            <value>
                 ROLE_ADMIN > ROLE_STAFF
                 ROLE_STAFF > ROLE_USER
             </value>
         </property>
     </bean>
   
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
      :header-rows: 1
      :widths: 10 90
   
-     * - | 項番
-       - | 説明
+     * - 項番
+       - 説明
      * - | (1)
-       - | \ ``RoleHierarchy``\ のデフォルト ``org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl`` クラスを指定する。
+       - | \ ``org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl`` クラスを指定する。
+         | \ ``RoleHierarchyImpl``\ は、Spring Securityが提供するデフォルトの実装クラスである。
      * - | (2)
        - | \ ``hierarchy``\ プロパティに階層関係を定義する。
-         | 書式:
-         | [上位ロール] > [下位ロール]
-         | 例では、STAFFはUSERに認可されたすべてのリソースに、アクセスできる。
-         | ADMINはUSER、STAFFに認可されたすべてのリソースに、アクセスできる。
+         |
+         | 書式: [上位ロール] > [下位ロール]
+         |
+         | 上記例では、
+         | STAFFは、USERに認可されたリソースにもアクセス可能である。
+         | ADMINは、USERとSTAFFに認可されたリソースにもアクセス可能である。
 
+|
 
-アクセス認可(リクエストURL)、アクセス認可(JSP)での使用方法
+Webリソースの認可処理への適用
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| リクエストURL、JSPに対するロール階層の設定について述べる。
 
-* spring-security.xml
+ロールの階層化を、WebリソースとJSPの画面項目に対する認可処理に適用する方法を説明する。
 
-  .. code-block:: xml
+* spring-security.xmlの定義例
+
+.. code-block:: xml
   
+    <!-- (1) -->
     <bean id="webExpressionHandler"
-        class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">  <!-- (1) -->
+        class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
         <property name="roleHierarchy" ref="roleHierarchy"/>  <!-- (2) -->
     </bean>
   
-    <sec:http auto-config="true" use-expression="true">
+    <sec:http>
         <!-- omitted -->
         <sec:expression-handler ref="webExpressionHandler" />  <!-- (3) -->
     </sec:http>
   
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
      :header-rows: 1
      :widths: 10 90
   
      * - | 項番
        - | 説明
      * - | (1)
-       - | クラスに\ ``org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler``\ を指定する。
+       - | \ ``org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler``\ のBeanを定義する。
      * - | (2)
-       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ のBean IDをプロパティに設定する。
+       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
      * - | (3)
-       - | \ ``expression-handler``\ 要素に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ を実装したハンドラクラスのBean IDを指定する。
+       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
 
+|
 
-アクセス認可(Method)での使用方法
+メソッドの認可処理への適用
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| Serviceのメソッドにアノテーションをつけて認可制御を行う場合のロール階層設定について説明する。
 
+ロールの階層化を、Javaメソッドに対する認可処理に適用する方法を説明する。
 
-* spring-security.xml
+* spring-security.xmlの定義例
 
-  .. code-block:: xml
+.. code-block:: xml
   
     <bean id="methodExpressionHandler"
         class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler"> <!-- (1) -->
@@ -575,19 +1097,19 @@ How to extend
         <sec:expression-handler ref="methodExpressionHandler" /> <!-- (3) -->
     </sec:global-method-security>
   
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
      :header-rows: 1
      :widths: 10 90
   
-     * - | 項番
-       - | 説明
+     * - 項番
+       - 説明
      * - | (1)
-       - | クラスに\ ``org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler``\ を指定する。
+       - | \ ``org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler``\ のBeanを定義する。
      * - | (2)
-       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ のBean IDをプロパティに設定する。
+       - | \ ``roleHierarchy``\ プロパティに\ ``RoleHierarchy``\ インタフェースの実装クラスのBeanを指定する。
      * - | (3)
-       - | \ ``expression-handler``\ 要素に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ を実装したハンドラクラスのBean IDを指定する。
+       - | \ ``<sec:expression-handler>``\ タグの\ ``ref``\ 属性に、\ ``org.springframework.security.access.expression.SecurityExpressionHandler``\ インタフェースの実装クラスのBeanを指定する。
 
 .. raw:: latex
 
diff --git a/source/Security/CSRF.rst b/source/Security/CSRF.rst
index bf04657097..5b07fd7dcd 100755
--- a/source/Security/CSRF.rst
+++ b/source/Security/CSRF.rst
@@ -1,3 +1,5 @@
+.. _SpringSecurityCsrf:
+
 CSRF対策
 ================================================================================
 
@@ -9,224 +11,106 @@ CSRF対策
 Overview
 --------------------------------------------------------------------------------
 
-| Cross site request forgeries(以下、CSRFと略す）とは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
-| ユーザが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
+本節では、Spring Securityが提供しているCross site request forgeries(以下、CSRFと略す）対策の機能について説明する。
+
+CSRFとは、Webサイトにスクリプトや自動転送(HTTPリダイレクト)を実装することにより、
+ユーザーが、ログイン済みの別のWebサイト上で、意図しない何らかの操作を行わせる攻撃手法のことである。
 
-| サーバ側でCSRFを防ぐには、以下の方法が知られている。
+サーバ側でCSRFを防ぐには、以下の方法が知られている。
 
 * 秘密情報(トークン)の埋め込み
 * パスワードの再入力
-* Referのチェック
-
-| OWASPでは、トークンパターンを使用する方法が\ `推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
-
-.. figure:: ./images/csrf_check_other_site.png
-   :alt: csrf check other site
-   :width: 60%
-   :align: center
-
-   **Picture - csrf check other site**
-
-.. note::
+* Refererのチェック
 
-  **OWASPとは**
+CSRF対策機能は、攻撃者が用意したWebページから送られてくる偽造リクエストを不正なリクエストとして扱うための機能である。
+CSRF対策が行われていないWebアプリケーションを利用すると、以下のような方法で攻撃を受ける可能性がある。
 
-  Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する
-  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
+* 利用者は、CSRF対策が行われていないWebアプリケーションにログインする。
+* 利用者は、攻撃者からの巧みな誘導によって、攻撃者が用意したWebページを開いてしまう。
+* 攻撃者が用意したWebページは、フォームの自動送信などのテクニックを使用して、偽造したリクエストをCSRF対策が行われていないWebアプリケーションに対して送信する。
+* CSRF対策が行われていないWebアプリケーションは、攻撃者が偽造したリクエストを正規のリクエストとして処理してしまう。
 
-    https://www.owasp.org/index.php/Main_Page
-
-| CSRFを回避する方法は、前述したように複数あるが、固定トークンを使用するライブラリを、Spring Securityが提供している。
-| セッション毎に1つの固定トークンを用い、すべてのリクエストについて、同じ値を使用している。
-
-| デフォルトではHTTPメソッドが、GET,HEAD,TRACE,OPTIONS以外の場合、
-| リクエストに含まれるCSRFトークンをチェックし、値が一致しない場合は、エラー(HTTP Status:403[Forbidden])とする。
-
-.. figure:: ./images/csrf_check_kind.png
-   :alt: csrf check other kind
-   :width: 50%
-   :align: center
-
-**Picture - csrf check other kind**
 
 .. tip::
 
-  CSRFトークンチェックは、別サイトからの不正な更新リクエストをチェックし、エラーとするものである。
-  ユーザに順序性（一連の業務フロー）を守らせ、チェックするためには、\ :ref:`double-submit_transactiontokencheck`\ を参照されたい。
-
-|
-
-How to use
---------------------------------------------------------------------------------
+    OWASP\ [#fSpringSecurityCSRF1]_\では、\ `トークンパターンを使用する方法が推奨されている。 <https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#General_Recommendation:_Synchronizer_Token_Pattern>`_\
+    
+      .. [#fSpringSecurityCSRF1] Open Web Application Security Projectの略称であり、信頼できるアプリケーションや、セキュリティに関する  効果的なアプローチなどを検証、提唱する、国際的な非営利団体である。
+       https://www.owasp.org/index.php/Main_Page
 
-Spring Securityの設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-Spring SecurityのCSRF機能を使用するための設定を説明する。
-\ :ref:`Spring Security の How to use <howtouse_springsecurity>`\ で設定したweb.xmlを前提とする。
+.. note:: **ログイン時におけるCSRF対策**
 
-.. _csrf_spring-security-setting:
+    CSRF対策はログイン中のリクエストだけではなく、ログイン処理でも行う必要がある。
+    ログイン処理に対してCSRF対策を怠った場合、攻撃者が用意したアカウントを使って知らぬ間にログインさせられ、ログイン中に行った操作履歴などを盗まれる可能性がある。
 
-spring-security.xmlの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-追加で設定が必要な箇所を、ハイライトしている。
+Spring SecurityのCSRF対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
+Spring Securityは、セッション単位にランダムに生成される固定トークン値(CSRFトークン)を払い出し、払い出されたCSRFトークンをリクエストパラメータ(HTMLフォームのhidden項目)として送信する。
+これにより正規のWebページからのリクエストなのか、攻撃者が用意したWebページからのリクエストなのかを判断する仕組みを採用している。
 
-.. code-block:: xml
-   :emphasize-lines: 3-4,8-
-
-    <sec:http auto-config="true" use-expressions="true" >
-        <!-- omitted -->
-        <sec:csrf />  <!-- (1) -->
-        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (2) -->
-        <!-- omitted -->
-    </sec:http>
-
-    <bean id="accessDeniedHandler"
-        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (3) -->
-        <constructor-arg index="0">  <!-- (4) -->
-            <map>
-                <entry
-                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">  <!-- (5) -->
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (5) -->
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />  <!-- (5) -->
-                    </bean>
-                </entry>
-                <entry
-                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">  <!-- (6) -->
-                    <bean
-                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (6) -->
-                        <property name="errorPage"
-                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />  <!-- (6) -->
-                    </bean>
-                </entry>
-            </map>
-        </constructor-arg>
-        <constructor-arg index="1">  <!-- (7) -->
-            <bean
-                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">  <!-- (8) -->
-                <property name="errorPage"
-                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />  <!-- (8) -->
-            </bean>
-        </constructor-arg>
-    </bean>
+.. figure:: ./images_CSRF/Csrf.png
+    :width: 100%
 
+    **Spring SecurityのCSRF対策の仕組み**
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
-
-   * - 項番
-     - 説明
-   * - | (1)
-     - | \ ``<sec:http>``\ 要素に\ ``<sec:csrf>``\ 要素を定義することで、Spring Security のCSRFトークンチェック機能を利用できるようになる。
-       | デフォルトでチェックされるHTTPメソッドについては、\ :ref:`こちら<csrf_default-add-token-method>`\ を参照されたい。
-       | 詳細については、\ `Spring Securityのレファレンスドキュメント <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#csrf-configure>`_\ を参照されたい。
-   * - | (2)
-     - | \ ``AccessDeniedException``\ を継承したExceptionが発生した場合、Exceptionの種類毎に表示するviewを切り替えるためにHandlerを定義する。
-       | 全て同じ画面で良い場合は ``error-page`` 属性に遷移先のjspを指定することで可能となる。
-       | Spring Securityの機能でハンドリングしない場合は、\ :ref:`こちら<csrf_403-webxml-setting>`\ を参照されたい。
-   * - | (3)
-     - | エラーページを切り替えるためにSpring Securityで用意されているHandlerのclassに \ ``org.springframework.security.web.access.DelegatingAccessDeniedHandler``\ を指定する。
-   * - | (4)
-     - | コンストラクタの第1引数でデフォルト以外のException（\ ``AccessDeniedException``\ を継承したException）の種類毎に表示を変更する画面をMap形式で設定する。
-   * - | (5)
-     - | keyに \ ``AccessDeniedException``\ を継承したException を指定する。
-       | 実装クラスとして、Spring Securityで用意されている \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
-       | propertyのnameにerrorPageを指定し、valueに表示するviewを指定する。
-   * - | (6)
-     - | (5)とExceptionの種類が違う場合に表示の変更を定義する。
-   * - | (7)
-     - | コンストラクタの第2引数でデフォルト（\ ``AccessDeniedException``\ とコンストラクタの第1引数で指定していない\ ``AccessDeniedException``\を継承したException）の場合のviewを指定する。
-   * - | (8)
-     - | 実装クラスとして、Spring Securityで用意されている \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
-       | propertyのnameにerrorPageを指定し、valueに表示するviewを指定する。
-
-|
-
-.. tabularcolumns:: |p{0.40\linewidth}|p{0.60\linewidth}|
-.. list-table:: \ ``AccessDeniedException``\ を継承したCSRF対策により発生するExceptionの種類
-   :header-rows: 1
-   :widths: 40 60
-
-   * - Exception
-     - 発生理由
-   * - | org.springframework.security.web.csrf.
-       | InvalidCsrfTokenException
-     - | クライアントからリクエストしたCSRFトークンとサーバで保持しているCSRFトークンが一致しない場合に発生する。
-   * - | org.springframework.security.web.csrf.
-       | MissingCsrfTokenException
-     - | CSRFトークンがサーバに存在しない場合に発生する。
-       | デフォルトの設定ではCSRFトークンをHTTPセッションに保持するため、CSRFトークンが存在しないということはHTTPセッションが破棄された(セッションタイムアウトが発生した)ことを意味する。
-       |
-       | \ ``<sec:csrf>``\ 要素の \ ``token-repository-ref``\ 属性でCSRFトークンの保存先をキャッシュサーバやDBなどに変更した場合は、CSRFトークンを保存先から削除した場合に\ ``MissingCsrfTokenException``\ が発生する。
-       | これは、トークンの保存先をHTTPセッションにしていない場合は、本機能を使ってセッションタイムアウトの検知が出来ない事を意味している。
-
-.. note::
-
-    CSRFトークンの保存先としてHTTPセッションを使用する場合は、
-    CSRFトークンのチェック対象のリクエストに対してセッションタイムアウトを検出することができる。
-
-    セッションタイムアウト検知後の動作は、\ ``<session-management>``\ 要素の\ ``invalid-session-url``\ 属性の指定によって異なる。
-
-    * \ ``invalid-session-url``\ 属性の指定がある場合は、セッションを生成した後に\ ``invalid-session-url``\ に指定したパスへリダイレクトされる。
-    * \ ``invalid-session-url``\ 属性の指定がない場合は、\ ``<access-denied-handler>``\ 要素に指定した\ ``org.springframework.security.web.access.AccessDeniedHandler``\ の定義に従ったハンドリングが行われる。
-
-    CSRFトークンのチェック対象外のリクエストに対してセッションタイムアウトを検出する必要がある場合は、
-    \ ``<session-management>``\ 要素の\ ``invalid-session-url``\ 属性を指定して検出すればよい。
-    詳細は、「:ref:`authentication_session-timeout`」を参照されたい。
-
-|
-
-.. _csrf_403-webxml-setting:
-
-.. note::
-
-  **<sec:access-denied-handler>の設定を省略した場合のエラーハンドリングについて**
-
-  web.xmlに以下の設定を行うことで、任意のページに遷移させることができる。
-
-  **web.xml**
-
-    .. code-block:: xml
-
-        <error-page>
-            <error-code>403</error-code>  <!-- (1) -->
-            <location>/WEB-INF/views/common/error/accessDeniedError.jsp</location>  <!-- (2) -->
-        </error-page>
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (2)
+      - | Spring Securityは、CSRFトークンを生成しHTTPセッションに格納する。
+        | 生成したCSRFトークンは、HTMLフォームのhiddenタグを使ってクライアントと連携する。
+    * - | (3)
+      - | クライアントは、HTMLフォーム内のボタンを押下してアプリケーションサーバーにリクエストを送信する。
+        | HTMLフォーム内のhidden項目にCSRFトークンが埋め込まれているため、CSRFトークン値はリクエストパラメータとして送信される。
+    * - | (4)
+      - | Spring Securityは、HTTPのPOSTメソッドを使ってアクセスされた際は、リクエストパラメータに指定されたCSRFトークン値とHTTPセッション内に保持しているCSRFトークン値が同じ値であることをチェックする。
+        | トークン値が一致しない場合は、不正なリクエスト(攻撃者からのリクエスト)としてエラーを発生させる。
+    * - | (5)
+      - | クライアントは、HTTPのGETメソッドを使用してアプリケーションサーバにアクセスする。
+    * - | (6)
+      - | Spring Securityは、GETメソッドを使ってアクセスされた際は、CSRFトークン値のチェックは行わない。
+
+.. note:: **Ajax使用時のCSRFトークン**
+
+    Spring Securityは、リクエストヘッダにCSRFトークン値を設定することができるため、Ajax向けのリクエストなどに対してCSRF対策を行うことが可能である。
+
+.. _csrf_ckeck-target:
+
+トークンチェックの対象リクエスト
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-    .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-    .. list-table::
-       :header-rows: 1
-       :widths: 10 90
+Spring Securityのデフォルト実装では、以下のHTTPメソッドを使用したリクエストに対して、CSRFトークンチェックを行う。
 
-       * - 項番
-         - 説明
-       * - | (1)
-         - | error-code要素に、ステータスコード403を設定する。
-       * - | (2)
-         - | location要素に、遷移先のパスを設定する。
+* POST
+* PUT
+* DELETE
+* PATCH
 
-.. _csrf_change-httpstatus403:
+.. note:: **CSRFトークンチェックを行わない理由**
 
-.. note::
+    GET, HEAD, OPTIONS, TRACE メソッドがチェック対象外となっている理由は、これらのメソッドがアプリケーションの状態を変更するようなリクエストを実行するためのメソッドではないためである。
 
-  **ステータスコード403以外を返却したい場合**
+.. _csrf_spring-security-setting:
 
-  リクエストに含まれるCSRFトークンが一致しない場合、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを
-  実装した、独自のAccessDeniedHandlerを作成する必要がある。
+How to use
+--------------------------------------------------------------------------------
 
-.. _csrf_spring-mvc-setting:
+CSRF対策機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-spring-mvc.xmlの設定
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用し、Springのタグライブラリの\ ``<form:form>``\ タグを使うことで、自動的にCSRFトークンを、hiddenに埋め込むことができる。
 
+* spring-mvc.xmlの設定例
+
 .. code-block:: xml
-   :emphasize-lines: 1-2,5-6
 
     <bean id="requestDataValueProcessor"
         class="org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor"> <!-- (1)  -->
@@ -248,74 +132,88 @@ CSRFトークン用の\ ``RequestDataValueProcessor``\ 実装クラスを利用
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``org.terasoluna.gfw.web.mvc.support.RequestDataValueProcessor``\ を複数定義可能な
+     - | \ 共通ライブラリから提供されている、\ ``org.springframework.web.servlet.support.RequestDataValueProcessor``\ を複数定義可能な
        | \ ``org.terasoluna.gfw.web.mvc.support.CompositeRequestDataValueProcessor``\ をbean定義する。
    * - | (2)
      - | コンストラクタの第1引数に、\ ``org.springframework.security.web.servlet.support.csrf.CsrfRequestDataValueProcessor``\ のbean定義を設定する。
 
-.. note::
+Spring Security 4.0からは、上記設定により、デフォルトでCSRF対策機能が有効となる。このため、CSRF対策機能を適用したくない場合は、明示的に無効化する必要がある。 
 
-  CSRFトークンの生成及びチェックは \ ``<sec:csrf />``\ の設定で有効になる \ ``CsrfFilter``\ により行われるので、開発者はControllerで特にCSRF対策は意識しなくてよい。
+CSRF対策機能を使用しない場合は、以下のようなbean定義を行う。
 
-.. _csrf_form-tag-token-send:
+* spring-security.xmlの定義例
 
-フォームによるCSRFトークンの送信
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:csrf disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
+        <!-- omitted -->
+    </sec:http>
 
-JSPで、フォームからCSRFトークンを送信するには
+CSRFトークン値の連携
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-* \ ``<form:form>``\ タグを使用してCSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを自動的に追加する
-* \ ``<sec:csrfInput/>``\ タグを使用してCSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを明示的に追加する
+Spring Securityは、CSRFトークン値をクライアントとサーバー間で連携する方法として、以下の2種類の方法を提供している。
 
-のどちらかを行う必要がある。
+* HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する
+* HTMLのmetaタグとしてCSRFトークンの情報を出力し、Ajax通信時にリクエストヘッダにトークン値を設定して連携する
 
-.. _csrf_formformtag-use:
+.. _csrf_formtag-use:
 
-CSRFトークンを自動で埋め込む方法
+Spring MVCを使用した連携
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-\ :ref:`spring-mvc.xmlの設定<csrf_spring-mvc-setting>`\ の通り、\ ``CsrfRequestDataValueProcessor``\ が定義されている場合、
-\ ``<form:form>``\ タグを使うことで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが、自動的に追加される。
+Spring Securityは、Spring MVCと連携するためのコンポーネントをいくつか提供している。
+ここでは、CSRF対策機能と連携するためのコンポーネントの使い方を説明する。
 
-JSPで、CSRFトークンを意識する必要はない。
+hidden項目の自動出力
+''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 
-.. code-block:: jsp
+HTMLフォームを作成する際は、以下のようなJSPの実装を行う。
 
-    <form:form method="POST"
-      action="${pageContext.request.contextPath}/csrfTokenCheckExample">
-      <input type="submit" name="second" value="second" />
-    </form:form>
+* JSPの実装例
 
-以下のようなHTMLが、出力される。
+.. code-block:: jsp
 
-.. code-block:: html
+    <%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
 
-    <form action="/terasoluna/csrfTokenCheckExample" method="POST">
-      <input type="submit" name="second" value="second" />
-      <input type="hidden" name="_csrf" value="dea86ae8-58ea-4310-bde1-59805352dec7" /> <!-- (1) -->
-    </form>
+    <c:url var="loginUrl" value="/login"/>
+    <form:form action="${loginUrl}"> <!-- (1) -->
+        <!-- omitted -->
+    </form:form>
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | Spring Securityのデフォルト実装では、\ ``name``\ 属性に\ ``_csrf``\ が設定されている \ ``<input type="hidden">``\ タグが追加され、CSRFトークンが埋め込まれる。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLフォームを作成する際は、Spring MVCから提供されている\ ``<form:form>``\ 要素を使用する。
 
+Spring MVCから提供されている\ ``<form:form>``\ 要素を使うと、以下のようなHTMLフォームが作成される。
 
-CSRFトークンはログインのタイミングで生成される。
+* HTMLの出力例
 
-.. tip::
+.. code-block:: html
 
-    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、
-    \ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象のHTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、
-    CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+    <form id="command" action="/login" method="post">
+        <!-- omitted -->
+        <!-- Spring MVCの機能と連携して出力されたCSRFトークン値のhidden項目 -->
+        <div>
+            <input type="hidden"
+                   name="_csrf" value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        </div>
+    </form>
+
+.. tip:: **出力されるCSRFトークンチェック値**
 
-    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、
-    CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
+    Spring 4上で\ ``CsrfRequestDataValueProcessor``\ を使用すると、\ ``<form:form>``\ タグの\ ``method``\ 属性に指定した値がCSRFトークンチェック対象の
+    HTTPメソッド(Spring Securityのデフォルト実装ではGET,HEAD,TRACE,OPTIONS以外のHTTPメソッド)と一致する場合に限り、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+
+    例えば、以下の例のように \ ``method``\ 属性にGETメソッドを指定した場合は、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグは出力されない。
 
         .. code-block:: jsp
 
@@ -329,110 +227,203 @@ CSRFトークンはログインのタイミングで生成される。
 
     に対応している事を意味しており、セキュアなWebアプリケーション構築の手助けとなる。
 
-.. _csrf_formtag-use:
+.. _csrf_htmlformtag-use:
 
-CSRFトークンを明示的に埋め込む方法
+HTMLフォーム使用時の連携
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-\ ``<form:form>``\ タグを使用しない場合は、明示的に、\ ``<sec:csrfInput/>``\ タグを追加する必要がある。
+\ :ref:`Spring MVCと連携<csrf_formtag-use>` せずに、HTMLフォームを使用してCSRFトークン値を連携することも可能である。
+HTMLフォームを使ってリクエストを送信する場合は、HTMLフォームのhidden項目としてCSRFトークン値を出力し、リクエストパラメータとして連携する。
 
-\ ``<sec:csrfInput/>``\ タグを使用すると、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが出力される。
+* JSPの実装例
 
 .. code-block:: jsp
 
-    <form method="POST"
-      action="${pageContext.request.contextPath}/csrfTokenCheckExample">
-        <input type="submit" name="second" value="second" />
-        <sec:csrfInput/>  <!-- (1) -->
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <form action="<c:url value="/login" />" method="post">
+        <!-- omitted -->
+        <sec:csrfInput /> <!-- (1) -->
+        <!-- omitted -->
     </form>
 
-以下のようなHTMLが、出力される。
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<form>``\ 要素の中に\ ``<sec:csrfInput>``\ 要素を指定する。
+
+Spring Securityから提供されている\ ``<sec:csrfInput>``\ 要素を指定すると、以下のようなhidden項目が出力される。
+HTMLフォーム内にhidden項目を出力することで、CSRFトークン値がリクエストパラメータとして連携される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストパラメータ名は\ ``_csrf``\ になる。
+
+* HTMLの出力例
 
 .. code-block:: html
 
-    <form action="/terasoluna/csrfTokenCheckExample" method="POST">
-      <input type="submit" name="second" value="second" />
-      <input type="hidden" name="_csrf" value="dea86ae8-58ea-4310-bde1-59805352dec7"/>  <!-- (2) -->
+    <form action="/login" method="post">
+        <!-- omitted -->
+        <!-- CSRFトークン値のhidden項目 -->
+        <input type="hidden"
+               name="_csrf"
+               value="63845086-6b57-4261-8440-97a3c6fa6b99" />
+        <!-- omitted -->
     </form>
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+.. warning:: **GETメソッド使用時の注意点**
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグを出力するために、\ ``<sec:csrfInput/>``\ タグを指定する。
-   * - | (2)
-     - | Spring Securityのデフォルト実装では、\ ``name``\ 属性に\ ``_csrf``\ が設定されている \ ``<input type="hidden">``\ タグが追加され、CSRFトークンが埋め込まれる。
+    HTTPメソッドとしてGETを使用する場合、\ ``<sec:csrfInput>``\ 要素を指定しないこと。
+    \ ``<sec:csrfInput>``\ 要素を指定してしまうと、URLにCSRFトークン値が含まれてしまうため、CSRFトークン値が盗まれるリスクが高くなる。
 
-.. _csrf_default-add-token-method:
+.. _csrf_ajax-token-setting:
 
-.. note::
+Ajax使用時の連携
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-  CSRFトークンチェック対象のリクエスト(デフォルトでは、HTTPメソッドが、GET, HEAD, TRACE, OPTIONS以外の場合)で、CSRFトークンがない、または
-  サーバー上に保存されているトークン値と、送信されたトークン値が異なる場合は、\ ``AccessDeniedHandler``\ によりアクセス拒否処理が行われ、HttpStatusの403が返却される。
-  \ :ref:`spring-security.xmlの設定 <csrf_spring-security-setting>`\ を記述している場合は、指定したエラーページに遷移する。
+Ajaxを使ってリクエストを送信する場合は、HTMLのmetaタグとしてCSRFトークンの情報を出力し、metaタグから取得したトークン値をAjax通信時のリクエストヘッダに設定して連携する。
 
+まず、Spring Securityから提供されているJSPタグライブラリを使用して、HTMLのmetaタグにCSRFトークンの情報を出力する。
 
-.. _csrf_ajax-token-setting:
+* JSPの実装例
 
-AjaxによるCSRFトークンの送信
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``<sec:csrf />``\ の設定で有効になる \ ``CsrfFilter``\ は、前述のようにリクエストパラメータからCSRFトークンを取得するだけでなく、
-| HTTPリクエストヘッダーからもCSRFトークンを取得する。
-| Ajaxを利用する場合はHTTPヘッダーに、CSRFトークンを設定することを推奨する。JSON形式でリクエストを送る場合にも対応できるためである。
+.. code-block:: jsp
 
-.. note::
+    <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
+
+    <head>
+        <!-- omitted -->
+        <sec:csrfMetaTags /> <!-- (1) -->
+        <!-- omitted -->
+    </head>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
 
-  HTTPヘッダ、リクエストパラメータの両方からCSRFトークンが送信する場合は、HTTPヘッダの値が優先される。
+    * - 項番
+      - 説明
+    * - | (1)
+      - | HTMLの\ ``<head>``\ 要素内に\ ``<sec:csrfMetaTags>``\ 要素を指定する。
 
-| \ :doc:`../ArchitectureInDetail/Ajax`\ で使用した例を用いて、説明を行う。追加で設定が必要な箇所を、ハイライトしている。
+\ ``<sec:csrfMetaTags>``\ 要素を指定すると、以下のようなmetaタグが出力される。
+デフォルトでは、CSRFトークン値を連携するためのリクエストヘッダ名は\ ``X-CSRF-TOKEN``\ となる。
 
-**jspの実装例**
+* HTMLの出力例
 
-.. code-block:: jsp
-   :emphasize-lines: 3-4
+.. code-block:: html
 
-    <!-- omitted -->
     <head>
-      <sec:csrfMetaTags />  <!-- (1) -->
-      <!-- omitted -->
+        <!-- omitted -->
+        <meta name="_csrf_parameter" content="_csrf" />
+        <meta name="_csrf_header" content="X-CSRF-TOKEN" /> <!-- ヘッダ名 -->
+        <meta name="_csrf"
+              content="63845086-6b57-4261-8440-97a3c6fa6b99" /> <!-- トークン値 -->
+        <!-- omitted -->
     </head>
-    <!-- omitted -->
 
-.. code-block:: jsp
-   :emphasize-lines: 3-7
-
-    <script type="text/javascript">
-    var contextPath = "${pageContext.request.contextPath}";
-    var token = $("meta[name='_csrf']").attr("content");  <!-- (2) -->
-    var header = $("meta[name='_csrf_header']").attr("content");  <!-- (3) -->
-    $(document).ajaxSend(function(e, xhr, options) {
-        xhr.setRequestHeader(header, token);  <!-- (4) -->
-    });
+つぎに、JavaScriptを使ってmetaタグからCSRFトークンの情報を取得し、Ajax通信時のリクエストヘッダ
+にCSRFトークン値を設定する。(ここではjQueryを使った実装例となっている)
+
+* JavaScriptの実装例
 
-    $(function() {
-        $('#calcButton').on('click', function() {
-            var $form = $('#calcForm'),
-                 $result = $('#result');
-            $.ajax({
-                url : contextPath + '/sample/calc',
-                type : 'POST',
-                data: $form.serialize(),
-            }).done(function(data) {
-                $result.html('add: ' + data.addResult + '<br>'
-                             + 'subtract: ' + data.subtractResult + '<br>'
-                             + 'multipy: ' + data.multipyResult + '<br>'
-                             + 'divide: ' + data.divideResult + '<br>'); // (5)
-            }).fail(function(data) {
-                // error handling
-                alert(data.statusText);
-            });
+.. code-block:: javascript
+
+    $(function () {
+        var headerName = $("meta[name='_csrf_header']").attr("content"); // (1)
+        var tokenValue = $("meta[name='_csrf']").attr("content"); // (2)
+        $(document).ajaxSend(function(e, xhr, options) {
+            xhr.setRequestHeader(headerName, tokenValue); // (3)
         });
     });
-    </script>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | CSRFトークン値を連携するためのリクエストヘッダ名を取得する。
+    * - | (2)
+      - | CSRFトークン値を取得する。
+    * - | (3)
+      - | リクエストヘッダにCSRFトークン値を設定する。
+
+.. _csrf_token-error-response:
+
+トークンチェックエラー時の遷移先の制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+トークンチェックエラー時の遷移先の制御を行うためには、CSRFトークンチェックエラーに発生する例外である \ ``AccessDeniedException``\ をハンドリングして、その例外に対応した遷移先を指定する。
+
+CSRFのトークンチェックエラー時に発生する例外は以下の通りである。
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **CSRFトークンチェックで使用される例外クラス**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - クラス名
+      - 説明
+    * - | \ ``InvalidCsrfTokenException``\
+      - | クライアントから送られたトークン値と、サーバー側で保持しているトークン値が一致しない場合に使用する例外クラス（主に不正なリクエスト）。
+    * - | \ ``MissingCsrfTokenException``\
+      - | サーバー側にトークン値が保存されていない場合に使用する例外クラス（主にセッション切れ）。
+
+\ ``DelegatingAccessDeniedHandler``\クラスを使用して上記の例外をハンドリングし、それぞれに \ ``AccessDeniedHandler``\ インタフェースの実装クラスを割り当てることで、例外毎の遷移先を設定することが可能である。
+
+CSRFトークンチェックエラー時に専用のエラー画面（JSP）に遷移させたい場合は、以下のようなBean定義を行う。(以下の定義例は、`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ からの抜粋である)
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:access-denied-handler ref="accessDeniedHandler"/>  <!-- (1) -->
+        <!-- omitted -->
+    </sec:http>
+
+    <bean id="accessDeniedHandler"
+        class="org.springframework.security.web.access.DelegatingAccessDeniedHandler">  <!-- (2) -->
+        <constructor-arg index="0">  <!-- (3) -->
+            <map>
+                <!-- (4) -->
+                <entry
+                    key="org.springframework.security.web.csrf.InvalidCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/invalidCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+                <!-- (5) -->
+                <entry
+                    key="org.springframework.security.web.csrf.MissingCsrfTokenException">
+                    <bean
+                        class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                        <property name="errorPage"
+                            value="/WEB-INF/views/common/error/missingCsrfTokenError.jsp" />
+                    </bean>
+                </entry>
+            </map>
+        </constructor-arg>
+        <!-- (6) -->
+        <constructor-arg index="1">
+            <bean
+                class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
+                <property name="errorPage"
+                    value="/WEB-INF/views/common/error/accessDeniedError.jsp" />
+            </bean>
+        </constructor-arg>
+    </bean>
+
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
@@ -442,34 +433,48 @@ AjaxによるCSRFトークンの送信
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``<sec:csrfMetaTags />``\ タグを設定することにより、デフォルトでは、以下の\ ``meta``\ タグが出力される。
-
-       * \ ``<meta name="_csrf_parameter" content="_csrf" />``\
-       * \ ``<meta name="_csrf_header" content="X-CSRF-TOKEN" />``\
-       * \ ``<meta name="_csrf" content="dea86ae8-58ea-4310-bde1-59805352dec7" />``\ (\ ``content``\ 属性の値はランダムなUUIDが設定される)
+     - | \ ``<sec:access-denied-handler>``\ タグのref属性に、Exception毎の制御を行うための\ ``AccessDeniedHandler``\ のBean名を指定する。
+       | エラー時遷移先が全て同じ画面である場合は ``error-page`` 属性に遷移先を指定すればよい。
+       | \ ``<sec:access-denied-handler>``\でハンドリングしない場合は、\ :ref:`SpringSecurityAuthorizationOnError`\ を参照されたい。
    * - | (2)
-     - | \ ``<meta name="_csrf">``\ タグに設定されたCSRFトークンを取得する。
+     - | \ ``DelegatingAccessDeniedHandler``\ を使用して、発生した例外（ \ ``AccessDeniedException``\ サブクラス ） と例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）を定義する。
    * - | (3)
-     - | \ ``<meta name="_csrf_header">``\ タグに設定されたCSRFヘッダ名を取得する。
+     - | コンストラクタの第1引数で、個別に遷移先を指定したい例外（ \ ``AccessDeniedException``\ サブクラス ）と、対応する例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）をMap形式で定義する。
    * - | (4)
-     - | リクエストヘッダーに、\ ``<meta>``\ タグから取得したヘッダ名(デフォルト:X-CSRF-TOKEN)、CSRFトークンの値を設定する。
+     - | \ ``key``\ に \ ``AccessDeniedException``\ のサブクラスを指定する。
+       | \ ``value`` として、\ ``AccessDeniedHandler``\ の実装クラスである、 \ ``org.springframework.security.web.access.AccessDeniedHandlerImpl`` を指定する。
+       | \ ``property``\ の \ ``name``\ に \ ``errorPage``\ を指定し、\ ``value``\ に表示するviewを指定する。
+       | マッピングするExceptionに関しては、:ref:`csrf_token-error-response` を参照されたい。
    * - | (5)
-     - | この書き方はXSSの可能性があるので、実際にJavaScriptコードを書くときは気を付けること。
-       | 今回の例では\ ``data.addResult``\ 、\ ``data.subtractResult``\ 、\ ``data.multipyResult``\ 、\ ``data.divideResult``\ の全てが数値型であるため、問題ない。
+     - | (4)のExceptionと異なるExceptionを制御したい場合に定義する。
+       | 本例では \ ``InvalidCsrfTokenException``\ 、\ ``MissingCsrfTokenException``\ それぞれに異なる遷移先を設定している。
+   * - | (6)
+     - | コンストラクタの第2引数で、デフォルト例外（(4)(5)で指定していない \ ``AccessDeniedException``\のサブクラス）時の例外ハンドラ（ \ ``AccessDeniedHandler``\ 実装クラス ）と遷移先を指定する。
+
 
-JSONでリクエストを送信する場合も、同様にHTTPヘッダを設定すればよい。
+.. note:: **無効なセッションを使ったリクエストの検知**
 
-.. todo::
+    セッション管理機能の「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効にしている場合は、\ ``MissingCsrfTokenException``\ に対して「:ref:`SpringSecuritySessionDetectInvalidSession`」処理と連動する\ ``AccessDeniedHandler``\ インタフェースの実装クラスが適用される。
 
-  \ :doc:`../ArchitectureInDetail/Ajax`\ 対応する例がなくなっているため、例を直す。
+    そのため、\ ``MissingCsrfTokenException``\ が発生すると、「:ref:`SpringSecuritySessionDetectInvalidSession`」処理を有効化する際に指定したパス(\ ``invalid-session-url``\ )にリダイレクトする。
+
+.. note::
+
+  **ステータスコード403以外を返却したい場合**
+
+  リクエストに含まれるCSRFトークンが一致しない場合に、ステータスコード403以外を返却したい場合は、\ ``org.springframework.security.web.access.AccessDeniedHandler``\ インタフェースを実装した、独自のAccessDeniedHandlerを作成する必要がある。
+
+|
+
+Appendix
+--------------------------------------------------------------------------------
 
 マルチパートリクエスト(ファイルアップロード)時の留意点
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-| 一般的に、ファイルアップロードなどマルチパートリクエストを送る場合、formから送信される値を\ ``Filter``\ では取得できない。
-| そのため、これまでの説明だけでは、マルチパートリクエスト時に\ ``CsrfFileter``\ がCSRFトークンを取得できず、不正なリクエストと見なされてしまう。
+ファイルアップロードなど、マルチパートリクエストを送信する場合、formから送信されるCSRFトークンを\ ``springSecurityFilterChain``\ 内では取得できないため、CSRFトークンエラーが発生する。
 
-そのため、以下のどちらかの方法によって、対策する必要がある。
+そのため、マルチパートリクエストを送信する場合は、以下の方法によって、CSRFトークンを取得できるようにする必要がある。
 
 * \ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用する
 * クエリのパラメータでCSRFトークンを送信する
@@ -485,35 +490,33 @@ JSONでリクエストを送信する場合も、同様にHTTPヘッダを設定
 
 MultipartFilterを使用する方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 通常、マルチパートリクエストの場合、formから送信された値は\ ``Filter``\ 内で取得できない。
-| \ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用することで、マルチパートリクエストでも、\ ``Filter``\ 内で、
-| formから送信された値を取得することができる。
-
-
-.. warning::
+\ ``org.springframework.web.multipart.support.MultipartFilter``\ を使用することで、マルチパートリクエストでも、\ ``springSecurityFilterChain``\ 内で、formから送信されたCSRFトークンを取得することができる。
 
-    \ ``MultipartFilter``\ を使用した場合、\ ``springSecurityFilterChain``\による認証・認可処理が行われる前にアップロード処理が行われるため、
-    認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容してしまう。
+.. warning:: **MultipartFilterを使用する際の留意点**
 
+    \ ``MultipartFilter``\ を使用した場合、\ ``springSecurityFilterChain``\による認証・認可処理が行われる前にアップロード処理が行われるため、認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を許容してしまうことになる。
 
-\ ``MultipartFilter``\ を使用するには、以下のように設定すればよい。
+\ ``MultipartFilter``\ を使用するには、以下のように設定する。
 
-**web.xmlの設定例**
+* web.xmlの設定例
 
 .. code-block:: xml
 
+    <!-- (1) -->
     <filter>
         <filter-name>MultipartFilter</filter-name>
-        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class> <!-- (1) -->
-    </filter>
-    <filter>
-        <filter-name>springSecurityFilterChain</filter-name> <!-- (2) -->
-        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
     </filter>
     <filter-mapping>
         <filter-name>MultipartFilter</filter-name>
         <servlet-name>/*</servlet-name>
     </filter-mapping>
+
+    <!-- (2) -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+    </filter>
     <filter-mapping>
         <filter-name>springSecurityFilterChain</filter-name>
         <url-pattern>/*</url-pattern>
@@ -531,12 +534,13 @@ MultipartFilterを使用する方法
    * - | (2)
      - | \ ``springSecurityFilterChain``\ より前に、\ ``MultipartFilter``\ を定義すること。
 
-**JSPの実装例**
+* JSPの実装例
 
 .. code-block:: jsp
 
+    <!-- (1) -->
     <form:form action="${pageContext.request.contextPath}/fileupload"
-        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data">  <!-- (1) -->
+        method="post" modelAttribute="fileUploadForm" enctype="multipart/form-data">  
         <table>
             <tr>
                 <td width="65%"><form:input type="file" path="uploadFile" /></td>
@@ -555,36 +559,30 @@ MultipartFilterを使用する方法
    * - 項番
      - 説明
    * - | (1)
-     - | spring-mvc.xmlの設定の通り、\ ``CsrfRequestDataValueProcessor``\ が定義されている場合、
-       | \ ``<form:form>``\ タグを使うことで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが自動的に追加されるため、
-       | JSPの実装で、CSRFトークンを意識する必要はない。
+     - | \ ``<form:form>``\ タグを使用することで、CSRFトークンが埋め込まれた\ ``<input type="hidden">``\ タグが自動的に追加されるため、JSPの実装でCSRFトークンを意識する必要はない。
        |
-       | **<form> タグを使用する場合**
-       | \ :ref:`csrf_formtag-use`\ でCSRFトークンを設定すること。
+       | **<html> タグを使用する場合**
+       | :ref:`csrf_htmlformtag-use`\ を参照して、CSRFトークンを設定すること。
 
 
 クエリパラメータでCSRFトークンを送る方法
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を防ぎたい場合は、
-\ ``MultipartFilter``\ は使用せず、クエリパラメータでCSRFトークンを送る必要がある。
+認証又は認可されていないユーザーからのアップロード(一時ファイル作成)を防ぎたい場合は、\ ``MultipartFilter``\ は使用せず、クエリパラメータでCSRFトークンを送る必要がある。
 
-.. warning::
+.. warning:: **クエリパラメータでCSRFトークンを送る際の留意点**
 
-    この方法でCSRFトークンを送った場合、
+    この方法でCSRFトークンを送信した場合、以下の危険性があるため、\ ``MultipartFilter``\ を使用する方法と比べると、攻撃者にCSRFトークンを悪用されるリスクが高くなる。
+    なお、Spring Securityのデフォルト実装では、CSRFトークンの値としてランダムなUUIDを生成しているため、仮にCSRFトークンが漏洩してもセッションハイジャックされる事はないという点を補足しておく。
 
     * ブラウザのアドレスバーにCSRFトークンが表示される
     * ブックマークした場合、ブックマークにCSRFトークンが記録される
     * WebサーバのアクセスログにCSRFトークンが記録される
 
-    ため、\ ``MultipartFilter``\ を使用する方法と比べると、攻撃者にCSRFトークンを悪用されるリスクが高くなる。
-
-    Spring Securityのデフォルト実装では、CSRFトークンの値としてランダムなUUIDを生成しているため、
-    仮にCSRFトークンが漏洩してもセッションハイジャックされる事はないという点を補足しておく。
 
 以下に、CSRFトークンをクエリパラメータとして送る実装例を示す。
 
-**JSPの実装例**
+* JSPの実装例
 
 .. code-block:: jsp
 
@@ -608,9 +606,7 @@ MultipartFilterを使用する方法
    * - 項番
      - 説明
    * - | (1)
-     - | \ ``<form:form>``\ タグのaction属性に、以下のクエリを付与する必要がある。
-       | \ ``?${f:h(_csrf.parameterName)}=${f:h(_csrf.token)}``\
-       | \ ``<form>``\ タグを使用する場合も、同様の設定が必要である。
+     - | \ ``<form:form>``\ タグのaction属性に、CSRFトークンのパラメータ名と、CSRFトークン値をクエリパラメタとして付加する。
 
 .. raw:: latex
 
diff --git a/source/Security/LinkageWithBrowser.rst b/source/Security/LinkageWithBrowser.rst
new file mode 100755
index 0000000000..e0937c9d22
--- /dev/null
+++ b/source/Security/LinkageWithBrowser.rst
@@ -0,0 +1,323 @@
+.. _SpringSecurityLinkageWithBrowser:
+
+ブラウザのセキュリティ対策機能との連携
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+
+本節では、ブラウザが提供しているセキュリティ対策機能との連携方法について説明する。
+
+主要なWebブラウザは、ブラウザが提供する機能が悪用されないようにするために、いくつかのセキュリティ対策機能を提供している。
+ブラウザが提供するセキュリティ対策機能の一部は、サーバ側でHTTPのレスポンスヘッダを出力することで動作を制御することができる。
+
+Spring Securityは、セキュリティ関連のレスポンスヘッダを出力する機能を用意することで、Webアプリケーションのセキュリティを強化する仕組みを提供している。
+
+.. note:: **セキュリティリスク**
+
+    セキュリティ関連のレスポンスヘッダを出力しても、セキュリティへのリスクが100%なくなるわけではない。
+    あくまで、セキュリティリスクを減らすためのサポート機能と考えておくこと。
+
+    なお、セキュリティヘッダのサポート状況はブラウザによってことなる。
+
+.. note:: **HTTPヘッダの上書き**
+
+    後述の設定を行ったとしても、アプリケーションにより、HTTPヘッダが上書きされる可能性は存在する。
+
+デフォルトでサポートしているセキュリティヘッダ
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityがデフォルトでサポートしているレスポンスヘッダは以下の5つである。
+
+* Cache-Control (Pragma, Expires)
+* X-Frame-Options
+* X-Content-Type-Options
+* X-XSS-Protection
+* Strict-Transport-Security
+
+.. tip:: **ブラウザのサポート状況**
+
+    これらのヘッダに対する処理は、一部のブラウザではサポートされていない。ブラウザの公式サイトまたは以下のページを参照されたい。
+
+    * https://www.owasp.org/index.php/HTTP_Strict_Transport_Security (Strict-Transport-Security)
+    * https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet (X-Frame-Options)
+    * https://www.owasp.org/index.php/List_of_useful_HTTP_headers (X-Content-Type-Options, X-XSS-Protection)
+
+
+Cache-Control
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Cache-Controlヘッダは、コンテンツのキャッシュ方法を指示するためのヘッダである。
+保護されたコンテンツがブラウザにキャッシュされないようにすることで、権限のないユーザーが保護されたコンテンツを閲覧できてしまうリスクを減らすことができる。
+
+コンテンツがキャッシュされないようにするためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例
+
+.. code-block:: text
+
+    Cache-Control: no-cache, no-store, max-age=0, must-revalidate
+    Pragma: no-cache
+    Expires: 0
+
+.. note:: **Cache-Controlヘッダの上書き**
+
+    Spring MVCのControllerクラスが \ ``@SessionAttribute`` \のフォームクラスを定義している、もしくは、
+    リクエストハンドラで \ ``@SessionAttribute`` \属性のModelを使用してる場合は、 Cache-Controlヘッダが上書きされる。
+
+.. note:: **HTTP1.0互換のブラウザ**
+
+    Spring SecurityはHTTP1.0互換のブラウザもサポートするために、PragmaヘッダとExpiresヘッダも出力する。
+
+
+X-Frame-Options
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-Frame-Optionsヘッダは、フレーム(\ ``<frame>``\ または\ ``<iframe>``\ 要素) 内でのコンテンツの表示を許可するか否かを指示するためのヘッダである。
+フレーム内でコンテンツが表示されないようすることで、クリックジャッキングと呼ばれる攻撃手法を使って機密情報を盗みとられるリスクをなくすことができる。
+
+フレーム内での表示を拒否するためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    X-Frame-Options: DENY
+
+なお、X-Frame-Optionsヘッダには、出力例以外のオプションを指定することができる。
+
+X-Content-Type-Options
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-Content-Type-Optionsヘッダは、コンテンツの種類の決定方法を指示するためのヘッダである。
+一部のブラウザでは、Content-Typeヘッダの値を無視してコンテンツの内容をみて決定する。
+コンテンツの種類の決定する際にコンテンツの内容を見ないようにすることで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
+
+コンテンツの種類の決定する際にコンテンツの内容を見ないようにするためには、以下のヘッダを出力する。
+
+* レスポンスヘッダの出力例
+
+.. code-block:: text
+
+    X-Content-Type-Options: nosniff
+
+
+X-XSS-Protection
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+X-XSS-Protectionヘッダは、ブラウザのXSSフィルター機能を使って有害スクリプトを検出する方法を指示するためのヘッダである。
+XSSフィルター機能を有効にして有害なスクリプトを検知するとこで、クロスサイトスクリプティングを使った攻撃を受けるリスクを減らすことができる。
+
+XSSフィルター機能を有効にして有害なスクリプトを検知するためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    X-XSS-Protection: 1; mode=block
+
+なお、X-XSS-Protectionヘッダには、出力例以外のオプションを指定することができる。
+
+Strict-Transport-Security
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Strict-Transport-Securityヘッダーは、HTTPSを使ってアクセスした後にHTTPを使ってアクセスしようとした際に、HTTPSに置き換えてからアクセスすることを指示するためヘッダである。
+HTTPSでアクセスした後にHTTPが使われないようにすることで、中間者攻撃と呼ばれる攻撃手法を使って悪意のあるサイトに誘導されるリスクを減らすことができる。
+
+HTTPSでアクセスした後にHTTPが使われないようにするためには、以下のようなヘッダを出力する。
+
+* レスポンスヘッダの出力例(Spring Securityのデフォルト出力)
+
+.. code-block:: text
+
+    Strict-Transport-Security: max-age=31536000 ; includeSubDomains
+
+.. note:: **Strict-Transport-Security**
+
+    Spring Securityのデフォルト実装では、Strict-Transport-Securityヘッダは、アプリケーションサーバに対してHTTPSを使ってアクセスがあった場合のみ出力される。
+    なお、Strict-Transport-Securityヘッダ値は、オプションを指定することで変更することができる。
+
+
+How to use
+--------------------------------------------------------------------------------
+
+セキュリティヘッダ出力機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+前述のセキュリティヘッダ出力機能を適用する方法をする。
+
+セキュリティヘッダ出力機能は、Spring 3.2から追加された機能でSpring Security 4.0からデフォルトで適用されるようになっている。 
+そのため、セキュリティヘッダ出力機能を有効にするための特別な定義は不要である。 
+なお、セキュリティヘッダ出力機能を適用したくない場合は、明示的に無効化する必要がある。 
+
+セキュリティヘッダ出力機能を無効化する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:headers disabled="true"/> <!-- disabled属性にtrueを設定して無効化 -->
+        <!-- omitted -->
+    </sec:http>
+
+
+セキュリティヘッダの選択
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+出力するセキュリティヘッダを選択したい場合は、以下のようなbean定義を行う。
+ここではSpring Securityが提供しているすべてのセキュリティヘッダを出力する例になっているが、実際には必要なものだけ指定すること。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:headers defaults-disabled="true"> <!-- (1) -->
+        <sec:cache-control/> <!-- (2) -->
+        <sec:frame-options/> <!-- (3) -->
+        <sec:content-type-options/> <!-- (4) -->
+        <sec:xss-protection/> <!-- (5) -->
+        <sec:hsts/> <!-- (6) -->
+    </sec:headers>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | まずデフォルトで適用されるヘッダ出力を行うコンポーネント登録を無効化する。
+    * - | (2)
+      - | Cache-Control(Pragma, Expires)ヘッダを出力するコンポーネントを登録する。
+    * - | (3)
+      - | Frame-Optionsヘッダを出力するコンポーネントを登録する。
+    * - | (4)
+      - | X-Content-Type-Optionsヘッダを出力するコンポーネントを登録する。
+    * - | (5)
+      - | X-XSS-Protectionヘッダを出力するコンポーネントを登録する。
+    * - | (6)
+      - | Strict-Transport-Securityヘッダを出力するコンポーネントを登録する。
+
+
+また、不要なものだけ無効化する方法も存在する。 
+
+* spring-security.xmlの定義例
+    
+.. code-block:: xml 
+
+    <sec:headers>
+        <sec:cache-control disabled="true"/> <!-- disabled属性にtrueを設定して無効化 --> 
+    </sec:headers>
+
+上記の例だと、Cache-Control関連のヘッダだけが出力されなくなる。 
+
+セキュリティヘッダの詳細については\ `公式リファレンス <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#default-security-headers>`_\ を参照されたい。
+
+
+セキュリティヘッダのオプション指定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+以下のヘッダでは、Spring Securityがデフォルトで出力する内容を変更することができる。
+
+* X-Frame-Options
+* X-XSS-Protection
+* Strict-Transport-Security
+
+Spring Securityのbean定義を変更することで、各要素の属性にオプション\ [#fSpringSecurityLinkageWithBrowser2]_\ を指定することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:frame-options policy="SAMEORIGIN" />
+
+.. [#fSpringSecurityLinkageWithBrowser2] 各要素で指定できるオプションは http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#nsa-headers を参照されたい。
+
+カスタムヘッダの出力
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityがデフォルトで用意していないヘッダを出力することもできる。
+
+以下のヘッダを出力するケースの例を説明する。
+
+.. code-block:: text
+
+    X-WebKit-CSP: default-src 'self'
+
+上記のヘッダを出力する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+      <sec:headers>
+          <sec:header name="X-WebKit-CSP" value="default-src 'self'"/>
+      </sec:headers>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``name``\ 属性にヘッダ名を\ ``value``\ 属性にヘッダ値を指定する。
+
+リクエストパターン毎のセキュリティヘッダの出力
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、\ ``RequestMatcher``\ インタフェースの仕組みを利用して、リクエストのパターン毎にセキュリティヘッダの出力を制御することも可能である。
+
+例えば、保護対象のコンテンツが\ ``/secure/``\ というパスの配下に格納されていて、保護対象のコンテンツへアクセスした時だけCache-Controlヘッダを出力する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <bean id="secureCacheControlHeadersWriter"
+          class="org.springframework.security.web.header.writers.DelegatingRequestMatcherHeaderWriter">
+        <constructor-arg>
+            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
+                <constructor-arg value="/secure/**"/>
+            </bean>
+        </constructor-arg>
+        <constructor-arg>
+            <bean class="org.springframework.security.web.header.writers.CacheControlHeadersWriter"/>
+        </constructor-arg>
+    </bean>
+
+    <sec:http>
+        <!-- omitted -->
+        <sec:headers>
+            <sec:header ref="secureCacheControlHeadersWriter"/> <!-- (2) -->
+        </sec:headers>
+        <!-- omitted -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``RequestMatcher``\ と\ ``HeadersWriter``\ インタフェースの実装クラスを指定して\ ``DelegatingRequestMatcherHeaderWriter``\ クラスのbeanを定義する。
+    * - | (2)
+      - | \ ``<sec:headers>``\ 要素の子要素として\ ``<sec:header>`` を追加し、\ ``ref``\ 属性に(1)で定義した\ ``HeaderWriter``\ のbeanを指定する。
+
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/PasswordHashing.rst b/source/Security/PasswordHashing.rst
deleted file mode 100755
index 07b6eb9014..0000000000
--- a/source/Security/PasswordHashing.rst
+++ /dev/null
@@ -1,418 +0,0 @@
-パスワードハッシュ化
-================================================================================
-
-.. only:: html
-
- .. contents:: 目次
-    :local:
-
-Overview
---------------------------------------------------------------------------------
-| パスワードのハッシュ化は、セキュアなアプリケーションを設計する上で考慮しなければならない点の一つである。
-| 通常のシステムでパスワードを平文で登録することはありえなく、ハッシュ化は必須であるが、
-| 強度が弱いアルゴリズムを選択した場合は「オフライン総あたり攻撃」や「レインボークラック」などにより
-| 容易にハッシュ化元データを解析されてしまう。
-| 
-| Spring Securityは、パスワードのハッシュ化の仕組みとして\ ``org.springframework.security.crypto.password.PasswordEncoder``\ インタフェースが用意している。
-| その実装クラスとして、
-
-* \ ``org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder``\ 
-* \ ``org.springframework.security.crypto.password.StandardPasswordEncoder``\ 
-
-| などが、提供されている。
-| 
-| \ ``PasswordEncoder``\ の仕組みとして、\ ``encode(String rawPassword)``\ メソッドでハッシュ化を行い、
-| \ ``matches(String rawPassword, String encodedPassword)``\ メソッドで照合を行う。
-
-.. figure:: ./images/PasswordEncoder_class.png
-   :alt: PasswordEncoder Class Diagram
-   :width: 80%
-   :align: center
-
-   **Picture - PasswordEncoder Class Diagram**
-
-|
-
-How to use
---------------------------------------------------------------------------------
-| 本節では、Spring Securityから提供されている、PasswordEncoderの実装クラスの使用方法について説明する。
-
-**PasswordEncoderの実装クラス一覧**
-
-.. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 50 50
-
-   * - PasswordEncoderの実装クラス
-     - 概要
-   * - | \ ``org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder``\
-     - | "bcrypt"アルゴリズムでハッシュ化を行うエンコーダ
-   * - | \ ``org.springframework.security.crypto.password.StandardPasswordEncoder``\
-     - | "SHA-256"アルゴリズム + 1024回のストレッチでハッシュ化を行うエンコーダ
-   * - | \ ``org.springframework.security.crypto.password.NoOpPasswordEncoder``\
-     - | ハッシュ化を行わないエンコーダ（テスト用）
-
-ハッシュ化に関する要件がない場合は、\ ``BCryptPasswordEncoder``\ を使用することを推奨する。
-ただし、\ ``BCryptPasswordEncoder``\ は対攻撃性を高めるために計算時間が多いため、
-認証時の性能要件を満たせない場合は\ ``StandardPasswordEncoder``\ を検討すること。
-
-既存のシステムとの関係上、ハッシュ化するアルゴリズムや、ソルトに対して制限がある場合については、
-後述する\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ インタフェースの実装クラスを使用すること。
-詳細は、\ :ref:`authenticationPasswordEncoder`\ を参照されたい。
-
-BCryptPasswordEncoder
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``BCryptPasswordEncoder``\ とは、\ ``PasswordEncoder``\ を実装した、パスワードのハッシュ化を提供しているクラスである。
-| ランダムな16バイトのソルトを使用した、bcryptアルゴリズムを使用したエンコーダーである。
-
-.. note::
-
-  Bcryptアルゴリズムは、汎用的なアルゴリズムより意図的に計算量を増やしている。そのため、汎用アルゴリズム(SHA、MD5など)より、
-  「オフライン総あたり攻撃」に強い特性を持っている。
-
-.. _BCryptPasswordEncoder:
-
-BCryptPasswordEncoderの設定例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-* applicationContext.xml
-
-  .. code-block:: xml
-  
-    <bean id="passwordEncoder"
-        class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />    <!-- (1) -->
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | passwordEncoderのクラスに\ ``BCryptPasswordEncoder``\ を指定する。
-         |
-         | コンストラクタの引数に、ソルトのハッシュ化のラウンド数を指定できる。指定できる値は、4～31までである。
-         | 指定値を大きくすることにより、強度は増すが、計算数が指数関数的に増大するので、性能面に注意すること。
-         | 指定しない場合、「10」が設定される。
-       
-  .. tip::
-  
-    How to extendで後述するが、DaoAuthenticationProvider は、\ ``org.springframework.security.crypto.password.PasswordEncoder``\ の実装クラス、
-    \ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ の実装クラス両方を設定することができる。
-    そのため、従来のPasswordEncoder(authenticationパッケージ)から、新PasswordEncoderに移行する際も、ユーザのパスワード移行が完了後、
-    DaoAuthenticationProviderのpasswordEncoderを変更するだけで対応できる。
-  
-  .. warning::
-  
-    \ ``DaoAuthenticationProvider``\ を認証プロバイダで設定している場合、\ ``UsernameNotFoundException``\ がスローされた場合、利用者にユーザが存在しないことを悟らせないために、
-    \ ``UsernameNotFoundException``\ がスローされた後、意図的にパスワードをハッシュ化している。(サイドチャネル攻撃対策)
-  
-    上記のハッシュ化に用いる値を作成するために、アプリケーション起動時に、\ ``encode``\ メソッドを内部で1回実行している。
-  
-  .. warning::
-  
-    Linux環境でSecureRandomを使用している場合、処理の遅延や、タイムアウトが発生する場合がある。
-    本問題の原因は乱数生成に関わるものであり、以下のJava Bug Databaseに説明がある。
-  
-    http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6202721
-  
-    JDK 7のb20以降のバージョンでは、修正されている。
-  
-    http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6521844
-  
-    本問題が発生する場合、JVMの起動引数に以下を設定することで、回避することができる。
-  
-    -Djava.security.egd=file:///dev/urandom
-
-* Javaクラス
-
-  .. code-block:: java
-  
-        @Inject
-        PasswordEncoder passwordEncoder;  // (1)
-  
-        public String register(Customer customer, String rawPassword) {
-            // omitted
-            // Password Hashing
-            String password = passwordEncoder.encode(rawPassword); // (2)
-            customer.setPassword(password);
-            // omitted
-        }
-  
-        public boolean matches(Customer customer, String rawPassword) {
-            return passwordEncoder.matches(rawPassword, customer.getPassword()); // (3)
-        }
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | Bean定義した、\ ``PasswordEncoder``\ をインジェクションする。
-     * - | (2)
-       - | パスワードをハッシュ化する例
-         | encodeメソッドの引数に平文のパスワードを指定することで、ハッシュ化されたパスワードが戻り値となる。
-     * - | (3)
-       - | パスワードを照合する例
-         | matchesメソッドは、第1引数に平文のパスワード、第2引数にハッシュ化されたパスワードを指定することで、
-         | 一致しているかチェックできるメソッドである。
-
-StandardPasswordEncoder
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``StandardPasswordEncoder``\ はハッシュ化のアルゴリズムとして、SHA-256を利用し、1024回のストレッチを行う。
-| また、ランダムに生成される8バイトのソルトを付与している。
-
-
-| 以下に、\ ``StandardPasswordEncoder``\ の\ ``encode(String rawPassword)``\ メソッド、
-| \ ``matches(String rawPassword, String encodedPassword)``\ メソッドの仕組みを説明する。
-
-**encode(String rawPassword)メソッド**
-
-.. figure:: ./images/standard_password_encoder_encode.png
-   :alt: encode method
-   :width: 50%
-   :align: center
-
-   **Picture - encode method**
-
-| ランダムに生成される8バイトのソルト + 秘密鍵 + 引数に指定された、パスワードでハッシュ化される。
-| 上記でハッシュ化された値に、ハッシュ化に用いたソルトを先頭に付与した値が、メソッドの戻り値となる。
-
-**matches(String rawPassword, String encodedPassword)メソッド**
-
-.. figure:: ./images/standard_password_encoder_matches.png
-   :alt: matches method
-   :width: 60%
-   :align: center
-
-   **Picture - matches method**
-
-| 引数で渡された、encodedPasswordの先頭のsaltをsplitし、salt + secret + rawPassword でハッシュ化した値と
-| encodedPasswordの先頭saltを除いた値とで比較処理を行う。
-
-\
-
-StandardPasswordEncoderの設定例
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-* applicationContext.xml
-
-  .. code-block:: xml
-  
-    <bean id="passwordEncoder"
-      class="org.springframework.security.crypto.password.StandardPasswordEncoder">
-      <!-- from properties file -->
-      <constructor-arg value="${passoword.encoder.secret}"/> <!-- (1) -->
-    </bean>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | ハッシュ化用の秘密鍵(secret)を指定する。
-         | 指定した場合、ハッシュ化処理において、「内部で生成されるソルト」 + 「指定した秘密鍵」 +「パスワード」でハッシュ化される。
-         | 秘密鍵(secret)を指定しない場合、レインボーテーブルを用いた攻撃方法に対する強度が下がるため、指定することを推奨する。
-         |
-         | **秘密鍵(secret)について**
-         | 秘密鍵(secret)は、機密情報として扱うこと。
-         | そのため、Spring Securityの設定ファイルに直接指定せずプロパティファイルや、環境変数などから取得する。
-         | 本例では、プロパティファイルから取得する例が有効になっている。また本番環境ではプロパティファイルの格納場所にも注意する。
-
-  .. tip::
-
-    **秘密鍵(secret)を環境変数から取得する場合**
-
-    StandardPasswordEncoderのbean定義の、\ ``<constructor-arg>``\ に以下の設定を行うことで取得できる。
-
-      .. code-block:: xml
-      
-        <bean id="passwordEncoder"
-          class="org.springframework.security.crypto.password.StandardPasswordEncoder">
-          <!-- from environment variable -->
-          <constructor-arg value="#{systemEnvironment['PASSWORD_ENCODER_SECRET']}" /> <!-- (1) -->
-        </bean>
-      
-      .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-      .. list-table::
-         :header-rows: 1
-         :widths: 10 90
-         
-         * - 項番
-           - 説明
-         * - | (1)
-           - | 環境変数:PASSWORD_ENCODER_SECRETから値を取得する。
-
-
-
-  | Javaクラス例は\ ``BCryptPasswordEncoder``\ と同様のため、\ :ref:`BCryptPasswordEncoder`\ を参照されたい。
-
-NoOpPasswordEncoder
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| \ ``NoOpPasswordEncoder``\ は、指定した値をそのままの文字列で返却するエンコーダーである。
-| 単体テスト時など、ハッシュ化されていない文字列を使用したい場合以外に使用してはいけない。
-
-| 設定例は、BCryptPasswordEncoderと同様のため、省略する。
-
-.. _authenticationPasswordEncoder:
-
-How to extend
---------------------------------------------------------------------------------
-| 業務要件によっては、前述した\ ``PasswordEncoder``\ を実装したクラスでは実現できない場合がある。
-| 特に、既存のアカウント情報で使用しているハッシュ化方式を踏襲したい場合などは、前述の\ ``PasswordEncoder``\ では要件を満たせないことが多い。
-
-たとえば、既存のハッシュ方式が、以下のような場合が考えられる。
- * アルゴリズムがSHA-512である。
- * ストレッチ回数が1000回である。
- * ソルトはアカウントテーブルのカラムに格納されており、\ ``PasswordEncoder``\ の外から渡す必要がある。
-
-| その場合、\ ``org.springframework.security.crypto.password.PasswordEncoder``\ を実装したクラスではなく、
-| 異なるパッケージの\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ を実装したクラスの使用を推奨する。
-
-\
-
- .. warning::
-
-     Spring Security 3.1.4以前では、\ ``org.springframework.security.authentication.encoding.PasswordEncoder``\
-     を実装したクラスをハッシュ化に使用していたが、3.1.4以降ではDeprecatedとなっている。
-     そのため、Springが推奨しているパターンとは異なる。
-
-ShaPasswordEncoderを使用した例
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 業務要件が以下の場合、
-| アルゴリズムはSHA-512を使用し、ストレッチを1000回を行う。
-| \ :doc:`Authentication`\ で説明した、
-| DaoAuthenticationProviderを使用した、認証処理を例に説明する。
-
-* applicationContext.xml
-
-  .. code-block:: xml
-  
-    <bean id ="passwordEncoder"
-        class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"> <!-- (1) -->
-        <constructor-arg value="512" /> <!-- (2) -->
-        <property name="iterations" value="1000" /> <!-- (3) -->
-    </bean>
-  
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | passwordEncoderには、\ ``org.springframework.security.authentication.encoding.ShaPasswordEncoder``\ を指定する。
-         | passwordEncoderに指定する、クラスは使用するアルゴリズムに合わせて変更すること。
-     * - | (2)
-       - | コンストラクタの引数に、SHAアルゴリズムの種類を設定する
-         | 指定可能な値は、「1、256、384、512」である。省略した場合は、「1」が設定される。
-     * - | (3)
-       - | ハッシュ化時のストレッチングの回数を指定する。
-         | 省略した場合は、0回となる。
-
-* spring-mvc.xml
-
-  .. code-block:: xml
-  
-    <bean id="authenticationProvider"
-        class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
-        <!-- omitted -->
-        <property name="saltSource" ref="saltSource" /> <!-- (1) -->
-        <property name="userDetailsService" ref="userDetailsService" />
-        <property name="passwordEncoder" ref="passwordEncoder" /> <!-- (2) -->
-    </bean>
-  
-    <bean id="saltSource"
-        class="org.springframework.security.authentication.dao.ReflectionSaltSource"> <!-- (3) -->
-        <property name="userPropertyToUse" value="username" /> <!-- (4) -->
-    </bean>
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | ソルトを外部定義したい場合、\ ``org.springframework.security.authentication.dao.SaltSource``\ を
-         | 実装したクラスのBeanIdを設定する。
-         | 本例では、 ユーザ情報クラスに設定された値をリフレクションで取得する、
-         | \ ``org.springframework.security.authentication.dao.ReflectionSaltSource``\ を定義している。
-     * - | (2)
-       - | passwordEncoderには、\ ``org.springframework.security.authentication.encoding.ShaPasswordEncoder``\ を指定する。
-         | passwordEncoderに指定する、クラスは使用するアルゴリズムに合わせて変更すること。
-     * - | (3)
-       - | ソルトの作成方法を決める\ ``org.springframework.security.authentication.dao.SaltSource``\ を指定する。
-         | ここでは\ ``UserDetails``\ オブジェクトのプロパティをリフレクションで取得する\ ``ReflectionSaltSource``\ を使用する。
-     * - | (4)
-       - | \ ``UserDetails``\ オブジェクトの\ ``usernamte``\ プロパティをsaltとして使用する。
-
-* Javaクラス
-
-  .. code-block:: java
-  
-      @Inject
-      PasswordEncoder passwordEncoder;
-  
-      public String register(Customer customer, String rawPassword, String userSalt) {
-          // omitted
-          String password = passwordEncoder.encodePassword(rawPassword,
-                  userSalt); // (1)
-          customer.setPassword(password);
-          // omitted
-      }
-  
-      public boolean matches(Customer customer, String rawPassword, String userSalt) {
-          return passwordEncoder.isPasswordValid(customer.getPassword(),
-                     rawPassword, userSalt); // (2)
-      }
-  
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-  
-     * - 項番
-       - 説明
-     * - | (1)
-       - | パスワードをハッシュ化する場合、
-         | \ ``org.springframework.security.authentication.encoding.PasswordEncoder``\ を実装したクラスでは、
-         | \ ``encodePassword``\ メソッドの引数にパスワードと、ソルト文字列を指定する。
-     * - | (2)
-       - | パスワードを照合する場合、
-         | \ ``isPasswordValid``\ メソッドを使用し、引数にハッシュ化されたパスワード、
-         | 平文のパスワード、ソルト文字列を指定することで、ハッシュ化されたパスワードと平文のパスワードを比較する。
-
-Appendix
---------------------------------------------------------------------------------
-
-.. note::    **ストレッチとは**
-
-  ハッシュ関数の計算を繰り返し行うことで、保管するパスワードに関する情報を繰り返し暗号化することである。
-  パスワードの総当たり攻撃への対策として、パスワード解析に必要な時間を延ばすために行う。
-  しかし、ストレッチはシステムの性能に影響を与えるので、システムの性能を考慮してストレッチ回数を決める必要がある。
-
-
-.. note::    **ソルトとは**
-
-  暗号化する元となるデータに追加する文字列である。
-  ソルトをパスワードに付与することで、見かけ上、パスワード長を長くし、レインボークラックなどのパスワード解析を困難にするために利用する。
-  なお、複数のユーザに対して同一のソルトを利用していると、同一パスワードを設定しているユーザが存在した時に、
-  ハッシュ値から同一のパスワードである事が分かってしまう。
-  そのため、ソルトはユーザごとに異なる値（ランダム値等）を設定することを推奨する。
-
-.. raw:: latex
-
-   \newpage
-
diff --git a/source/Security/SecureLoginDemo.rst b/source/Security/SecureLoginDemo.rst
index d4dc3e3dd9..43dad7fdda 100755
--- a/source/Security/SecureLoginDemo.rst
+++ b/source/Security/SecureLoginDemo.rst
@@ -4510,19 +4510,16 @@ Overview
    * - 項番
      - 説明
    * - | (1)
-     - | 検証器は\ ``org.passay.PasswordValidator`` \のインスタンスである、検証器を作成する。検証器には\ ``org.passay.Rule`` \インタフェースを実装したクラスのインスタンスである検証規則を一つ以上設定する。
+     - | \ ``org.passay.PasswordData`` \のインスタンスを作成し、入力チェック対象のパスワードに関する情報を設定する。
+       | \ ``PasswordData`` \は、パスワード、ユーザ名に加え、過去に使用したパスワードのリスト等をプロパティとして持つことができる。
+       | 過去に使用したパスワード等は\ ``org.passay.PasswordData.Reference`` \のインスタンスとして保持する。
    * - | (2)
-     - | 入力チェック対象に関する情報を \ ``org.passay.PasswordData`` \ のインスタンスに設定する。
-       | \ ``PasswordData`` \は、パスワード、ユーザ名、過去に使用したパスワードのリスト等をプロパティとして持つ。
-       | 過去に使用したパスワードは\ ``org.passay.PasswordData.Reference`` \のインスタンスとして保持する。
+     - | 検証規則に従い、検証器を用いて\ ``PasswordData`` \に対する入力チェックを行う。
+       | 検証規則は\ ``org.passay.Rule`` \の実装クラスのインスタンスとして作成する。検証器は\ ``org.passay.PasswordValidator`` \のインスタンスであり、複数の検証規則をプロパティとして持つことができる。
    * - | (3)
-     - | \ ``PasswordValidator`` \ の \ ``validate`` \ メソッドに、\ ``PasswordData`` \を引数として渡し、パスワード入力チェックを実行する。
-   * - | (3')
-     - | \ ``PasswordValidator`` \ の \ ``validate`` \の結果は、\ ``org.passay.RuleResult`` \ として返される。
+     - | 検証器による入力チェックの結果として\ ``org.passay.RuleResult`` \のインスタンスが作成される。
    * - | (4)
-     - | \ ``RuleResult`` \ の \ ``isValid`` \ メソッドを用いて、パスワード入力チェックの結果を真理値として得る。
-   * - | (5)
-     - | パスワード入力チェックの結果がエラーであった場合、\ ``PasswordValidator`` \ の \ ``getMessages`` \ メソッドに、\ ``RuleResult`` \を引数として渡すことで、エラーメッセージが取得できる。
+     - | \ ``RuleResult`` \ からパスワード入力チェックの結果を\ ``boolean`` \として得ることができる。また、検証器を使って\ ``RuleResult`` \からエラーメッセージが取得できる。
 
 Passayが提供している検証規則のクラスの一部を以下の表に示す。
 
@@ -4754,10 +4751,10 @@ How to use
    * - | (1)
      - | \ ``PasswordGenerator`` \の\ ``generatePassword`` \メソッドに、生成するパスワードの長さと生成規則を引数として渡すと、生成規則を満たしたパスワードが生成される。
 
-  .. tip::
+.. tip::
      
-     Bean定義したコレクションをDIする際には、\ ``@Inject`` \ + \ ``@Named`` \では期待した動作をしない。
-     そのため、代わりに\ ``@Resource`` \を使用してBean名でDIする。
+   Bean定義したコレクションをDIする際には、\ ``@Inject`` \ + \ ``@Named`` \では期待した動作をしない。
+   そのため、代わりに\ ``@Resource`` \を使用してBean名でDIする。
 
 .. raw:: latex
 
diff --git a/source/Security/SessionManagement.rst b/source/Security/SessionManagement.rst
new file mode 100755
index 0000000000..a72a0bdadb
--- /dev/null
+++ b/source/Security/SessionManagement.rst
@@ -0,0 +1,566 @@
+.. _SpringSecuritySessionManagement:
+
+セッション管理
+================================================================================
+
+.. only:: html
+
+ .. contents:: 目次
+    :local:
+
+Overview
+--------------------------------------------------------------------------------
+
+本節では、「Webアプリケーションでセッションを扱う際に必要となるセキュリティ対策」及び「Spring Securityが提供しているセッション関連の機能」について説明する。
+
+.. _SpringSecuritySessionManagementSecurityMeasure:
+
+セッション利用時のセキュリティ対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Webアプリケーションでセッションを扱う場合、一般的には以下の攻撃に対して対策が必要となる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | セッションハイジャック攻撃
+      - | 通信の盗聴、規則性からの類推、クロスサイトスクリプティングなどを駆使してセッションIDを盗みとり、盗みとったセッションIDをつかっているユーザーになりすましてシステムを利用する攻撃。
+    * - | セッション固定攻撃
+      - | 攻撃者が事前に払い出したセッションIDを他人に使わせてシステムにログインさせ、攻撃者がログインしたユーザーになりすましてシステムを利用する攻撃。
+
+セッションハイジャック攻撃への対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッションハイジャック攻撃への対策は、セッションIDが盗み取られないようにするしかない。
+いったん盗み取られてしまうと、アプリケーションサーバは正規のユーザーからのリクエストなのか、
+攻撃者からのリクエストなのかを判断することができない。
+
+このようなセッションハイジャック攻撃からアプリケーションを守るためには、以下のような対策が必要である。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッションハイジャック攻撃への対策**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | 推測困難なセッションIDの生成する
+      - | 連番など推測できる値をセッションIDに使用せず、推測が困難な(セキュアな)ランダム値を使用する。
+        | 基本的にはアプリケーションサーバが提供するセッションIDの生成機構を利用すればよい。
+    * - | HTTPSを使って通信を暗号化する
+      - | 盗まれると困る情報をやりとりする通信は、HTTPSプロトコルを使って暗号化する。
+        | 通信の盗聴はフリーのソフトなどを使って簡単に行うことができため、盗聴されても解読されないように暗号化しておくことが重要である。
+    * - | セッションIDはCookieを使って連携する
+      - | クライアントとサーバーとの間でセッションIDを連携する際は、Cookieを使って連携するように設定し、URL Rewriting機能を無効化する。
+    * - | Cookieの\ ``HttpOnly``\ 属性を指定する
+      - | Cookieの\ ``HttpOnly``\ 属性を指定すると、JavaScriptからCookieにアクセスすることができなくため、クロスサイトスクリプティングを使ってセッションIDを盗むことができなくなる。
+    * - | Cookieに\ ``Secure``\ 属性を指定する
+      - | Cookieに\ ``Secure``\ 属性を指定すると、HTTPS通信の時だけCookieをサーバーに送信するため、誤ってHTTP通信を使ってしまった時にセッションIDが盗み取られるリスクを減らすことができる。
+
+.. note:: **URL Rewriting**
+
+    URL Rewritingは、Cookieを使用できないクライアントとセッションを維持するための仕組みである。
+    具体的には、URLのリクエストパラメータの中にセッションIDを含めることでクライアントとサーバーの間でセッションIDを連携する。
+
+    * URL Rewritingが行われたURL例
+
+        .. code-block:: guess
+
+            http://localhost:8080/;jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646
+
+    \ ``jsessionid=7E6EDE4D3317FC5F14FD912BEAC96646``\ の部分がURL RewritingされたセッションIDになる。
+    ServletのAPI仕様では、以下のメソッドを呼び出すとURL Rewritingが行われる可能性があり、JSTLやSpringが提供しているJSPタグライブラリの中でもこれらのメソッドを呼び出している。
+
+    * \ ``HttpServletResponse#encodeURL(String)``\
+    * \ ``HttpServletResponse#encodeRedirectURL(String)``\
+
+URL Rewritingが行われるとURL内にセッションIDが露出してしまうため、セッションIDを盗まれるリスクが高くなる。
+そのため、Cookieを使うことができるクライアントのみをサポートする場合は、サーブレットコンテナのURL Rewriting機能を無効化することを推奨する。
+
+|
+
+セッション固定攻撃への対策
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッション固定攻撃からアプリケーションを守るためには、以下のような対策が必要になる。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッション固定攻撃への対策**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - 対策
+      - 説明
+    * - | URL Rewriting機能を無効化する
+      - | URL Rewriting機能を無効化すると、攻撃者が事前に払い出したセッションIDが使われず、新たにセッションが開始される。
+    * - | ログイン後にセッションIDを変更する
+      - | ログイン後にセッションIDを変更することで、攻撃者が事前に払い出したセッションIDが使用できなくなる。
+
+|
+
+Spring Securityが提供するセッション管理機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityでは、セッションについて、主に以下の機能が提供されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セッションに関する提供機能**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 機能
+      - 説明
+    * - | セキュリティ対策
+      - | セッションハイジャック攻撃等のセッションIDを使用した攻撃への対策機能。
+    * - | ライフサイクル制御
+      - | セッションの生成～破棄までのライフサイクルを制御する機能。
+    * - | タイムアウト制御
+      - | タイムアウトにより、セッションを破棄する機能。
+    * - | 多重ログイン制御
+      - | 同一ユーザーによる多重ログイン時のセッションを制御する機能。
+
+.. _authentication(spring_security)_how_to_use_sessionmanagement:
+
+How to use
+--------------------------------------------------------------------------------
+
+セッションハイジャック攻撃への対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+ここではURL Rewriting機能を無効化し、Cookieを使用してセッションIDを連携する方法を説明する。、
+
+Spring SecurityによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring SecurityはURL Rewritingを無効化するための仕組みを提供しており、この機能はデフォルトで適用されている。
+Cookieを使えないクライアントをサポートする必要がある場合は、URL Rewritingを許可するようにBean定義する。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http disable-url-rewriting="false"> <!-- falseを指定してURL Rewritingを有効化 -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Spring Securityのデフォルトでは、\ ``disable-url-rewriting``\ の値は \ ``true``\であるため、URL Rewritingは行われない。
+        | URL Rewritingを有効にする際は、\ ``<sec:http>``\ 要素の \ ``disable-url-rewriting``\ 属性に\ ``false``\ を設定する。
+
+サーブレットコンテナによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Servletの標準仕様の仕組みを使ってセッションをセキュアに扱うことが可能である。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <session-config>
+        <cookie-config>
+            <http-only>true</http-only> <!-- (1)  -->
+        </cookie-config>
+        <tracking-mode>COOKIE</tracking-mode> <!-- (2) -->
+    </session-config>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | Cookieに\ ``HttpOnly``\ 属性を付与する場合は、\ ``<http-only>``\ 要素に\ ``true``\ を指定する。
+        | 使用するアプリケーションサーバによっては、デフォルト値が\ ``true``\ になっている。
+    * - | (3)
+      - | URL Rewriting機能を無効化する場合は、\ ``<tracking-mode>``\ 要素に\ ``COOKIE``\ を指定する。
+
+上記の定義例からは省略しているが、\ ``<cookie-config>``\ に \ ``<secure>true</secure>``\を追加することで、 Cookieに\ ``Secure``\ 属性を付与することができる。
+ただし、cookieのsecure化は、\ ``web.xml``\ で指定するのではなく、クライアントとHTTPS通信を行うミドルウェア(SSLアクセラレータやWebサーバーなど)で付与する方法を検討されたい。
+
+実際のシステム開発の現場において、ローカルの開発環境でHTTPSを使うケースはほとんどない。
+また、本番環境においても、HTTPSを使うのはSSLアクセラレータやWebサーバーとの通信までで、アプリケーションサーバへの通信はHTTPで行うケースも少なくない。
+このような環境下で\ ``Secure``\ 属性の指定を\ ``web.xml``\ で行ってしまうと、実行環境毎に\ ``web.xml``\ や\ ``web-fragment.xml``\ を用意することになり、ファイルの管理が煩雑になるため推奨されない。
+
+
+.. _SpringSecuritySessionManagementSetup:
+
+セッション管理機能の適用
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityのセッション管理機能を適用する方法を説明する。
+Spring Securityのセッション管理機能の処理を使用する場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http>
+        <!-- ommited -->
+        <sec:session-management /> <!-- (1) -->
+        <!-- ommited -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:http>``\ 要素の子要素として\ ``<sec:session-management>``\ 要素を指定する。
+        | \ ``<sec:session-management>``\ 要素を指定すると、セッション管理機能が適用される。
+
+|
+
+セッション固定攻撃への対策
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、セッション固定攻撃対策として、ログイン成功時にセッションIDを変更するためのオプションを4つ用意している。
+
+.. tabularcolumns:: |p{0.30\linewidth}|p{0.70\linewidth}|
+.. list-table:: **セッション固定攻撃への対策のオプション**
+    :header-rows: 1
+    :widths: 30 70
+
+    * - オプション
+      - 説明
+    * - | \ ``changeSessionId``\
+      - | Servlet 3.1で追加された\ ``HttpServletRequest#changeSessionId()``\ を使用してセッションIDを変更する。
+        | (これはServlet 3.1以上のコンテナ上でのデフォルトの動作である)
+    * - | \ ``migrateSession``\
+      - | ログイン前に使用していたセッションを破棄し、新たにセッションを作成する。
+        | このオプションを使用すると、ログイン前にセッションに格納されていたオブジェクトは新しいセッションに引き継がれる。
+        | (Servlet 3.0以下のコンテナ上でのデフォルトの動作の動作である)
+    * - | \ ``newSession``\
+      - | このオプションは\ ``migrateSession``\ と同じ方法でセッションIDを変更するが、ログイン前に格納されていたオブジェクトは新しいセッションに引き継がれない。
+    * - | \ ``none``\
+      - | Spring Securityは、セッションIDを変更しない。
+
+デフォルトの動作を変更したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management
+            session-fixation-protection="newSession"/> <!-- (1) -->
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | ``<sec:session-management>``\ 要素の\ ``session-fixation-protection``\ 属性にセッション固定攻撃の対策方法を指定する。
+
+.. _SpringSecuritySessionManagementLifecycle:
+
+セッションのライフサイクル制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、リクエストを跨いで認証情報などのオブジェクトを共有するための手段としてHTTPセッションを使用しており、Spring Securityの処理の中でセッションのライフサイクル(セッションの作成と破棄)を制御している。
+
+.. note:: **セッション情報の格納先**
+
+    Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
+
+セッションの作成
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityの処理の中でどのような方針でセッションを作成して利用するかは、以下のオプションから選択することができる。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セッションの作成方針**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - オプション
+      - 説明
+    * - | \ ``always``\
+      - | セッションが存在しない場合は、無条件に新たなセッションを生成する。
+        | このオプションを指定すると、Spring Securityの処理でセッションを使わないケースでもセッションが作成される。
+    * - | \ ``ifRequired``\
+      - | セッションが存在しない場合は、セッションにオブジェクトを格納するタイミングで新たなセッションを作成して利用する。(デフォルトの動作)
+    * - | \ ``never``\
+      - | セッションが存在しない場合は、セッションの生成及び利用は行わない。
+        | ただし、既にセッションが存在している場合はセッションを利用する。
+    * - | \ ``stateless``\
+      - | セッションの有無に関係なく、セッションの生成及び利用は行わない。
+
+デフォルトの振る舞いを変更したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http create-session="stateless"> <!-- (1) -->
+        <!-- ommited -->
+    </sec:http>
+
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | \ (1)
+      - | \ ``<sec:http>``\ 要素の\ ``create-session``\ 属性に、変更したいセッションの作成方針を指定する。
+
+セッションの破棄
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、以下のタイミングでセッションを破棄する。
+
+* ログアウト処理が実行されたタイミング
+* 認証処理が成功したタイミング (セッション固定攻撃対策として\ ``migrateSession``\ 又は\ ``newSession``\ が適用されるとセッションが破棄される)
+
+.. _SpringSecuritySessionManagementTimeout:
+
+セッションタイムアウトの制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+セッションにオブジェクトを格納する場合、適切なセッションタイムアウト値を指定して、一定時間操作がないユーザーとのセッションを自動で破棄するようにするのが一般的である。
+
+セッションタイムアウトの指定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+セッションタイムアウトは、サーブレットコンテナに対して指定する。
+アプリケーションサーバーによっては、サーバー独自の指定方法を用意しているケースもあるが、ここでは、Servlet標準仕様で定められた指定方法を説明する。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <session-config>
+        <session-timeout>60</session-timeout> <!-- (1) -->
+        <!-- ommited -->
+    </session-config>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<session-timeout>``\ 要素に適切なタイムアウト値(分単位)を指定する。
+        |  タイムアウト値を指定しない場合は、サーブレットコンテナが用意しているデフォルト値が適用される。
+        | また、0以下の値を指定するとサーブレットコンテナのセッションタイム機能が無効化される。
+
+.. _SpringSecuritySessionDetectInvalidSession:
+
+無効なセッションを使ったリクエストの検知
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Securityは、無効なセッションを使ったリクエストを検知する機能を提供している。
+無効なセッションとして扱われるリクエストの大部分は、セッションタイムアウト後のリクエストである。
+デフォルトではこの機能は無効になっているが、以下のようなbean定義を行うことで有効化することができる。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management
+            invalid-session-url="/error/invalidSession"/>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:session-management>``\ 要素の\ ``invalid-session-url``\ 属性に、無効なセッションを使ったリクエストを検知した際のリダイレクト先のパスを指定する。
+
+除外パスの指定
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+無効なセッションを使ったリクエストを検知する機能を有効にすると、Spring Securityのサーブレットフィルタを通過するすべてのリクエストに対してチェックが行われる。
+そのため、セッションが無効な状態でアクセスしても問題がないページにアクセスした場合もチェックが行われる。
+
+この動作を変更したい場合は、チェック対象から除外したいパスに対して個別にbean定義を行うことで実現することが可能である。
+例として、トップページを開くためのパス(\ ``"/"``\ )を除外パスに指定したい場合は、以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <!-- (1) -->
+    <sec:http pattern="/"> <!-- (2) -->
+        <sec:session-management />
+    </sec:http>
+
+    <!-- (3) -->
+    <sec:http>
+        <!-- ommited -->
+        <sec:session-management
+                invalid-session-url="/error/invalidSession"/>
+        <!-- ommited -->
+    </sec:http>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | トップページを開くためのパス(\ ``"/"``\ )に適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を新たに追加する。
+    * - | (2)
+      - | (1)の\ ``<sec:http>``\ 要素を使って生成した\ ``SecurityFilterChain``\ を適用するパスパターンを指定する。
+        | 指定可能なパスパターンはAnt形式のパス表記と正規表現の２つの形式であり、デフォルトではAnt形式のパスとして扱われる。
+        | また、パスパターンではなく\ ``RequestMatcher``\ オブジェクトを直接指定することも可能である。
+    * - | (3)
+      - | 個別定義していないパスに適用する\ ``SecurityFilterChain``\ を作成するための\ ``<sec:http>``\ 要素を定義する。
+        | この定義は、個別定義用の\ ``<sec:http>``\ 要素より下に定義すること。
+        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
+
+|
+
+.. _SpringSecuritySessionManagementConcurrency:
+
+多重ログインの制御
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Spring Securityは、同じユーザー名(ログインID)を使った多重ログインを制御する機能を提供している。
+デフォルトではこの機能は無効になってるが、:ref:`SpringSecurityHowToUseSessionManagementConcurrency` を行うことで有効化することができる。
+
+.. warning:: **多重ログイン制御における制約**
+
+    Spring Securityが提供しているデフォルト実装では、ユーザー毎のセッション情報をアプリケーションサーバーのメモリ内で管理しているため、以下の2つの制約がある。
+
+    ひとつめの制約として、複数のアプリケーションサーバーを同時に起動するシステムでは、デフォルト実装を利用することができないことが挙げられる。
+    複数のアプリケーションサーバーを同時に使用する場合は、ユーザー毎のセッション情報をデータベースやキーバリューストア(キャッシュサーバー)などの共有領域で管理する実装クラスの作成が必要になる。
+
+    ふたつめの制約は、アプリケーションサーバーを停止または再起動時した際に、セッション情報が復元されると、正常動作しない可能性があるという点である。
+    使用するアプリケーションサーバーによっては、停止または再起動時のセッション状態を復元する機能をもっているため、実際のセッション状態とSpring Securityが管理しているセッション情報に不整合が生じることになる。
+    このような不整合が生まれる可能性がある場合は、以下のいずれかの対応が必要になる。
+
+    * アプリケーションサーバ側のセッション状態が復元されないようにする。
+    * Spring Security側のセッション情報を復元する仕組みを実装する。
+    * HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納する。
+
+本節では、Spring Securityのデフォルト実装を使用する方法を紹介する。
+Spring Securityが用意しているデフォルト実装ではHTTPセッションを使用するが、HTTPセッション以外(データベースやキーバリューストアなど)にオブジェクトを格納することも可能なアーキテクチャになっている。
+ただし、ここで紹介する方法は **上記Warningの制約が残っている実装方法であるため** 、適用する際は注意されたい。
+
+.. Todo::
+   インメモリを使用しない実装方法に関しては、今後追加予定である。
+
+.. _SpringSecurityHowToUseSessionManagementConcurrency:
+
+セッションのライフサイクル検知の有効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+多重ログインを制御する機能は、:ref:`セッションのライフサイクル(セッションの生成と破棄)を検知する仕組み<SpringSecuritySessionManagementLifecycle>` を利用してユーザー毎のセッション状態を管理している。
+このため、多重ログインの制御機能を使用する際は、Spring Securityから提供されている\ ``HttpSessionEventPublisher``\ クラスをサーブレットコンテナに登録する必要がある。
+
+* web.xmlの定義例
+
+.. code-block:: xml
+
+    <listener>
+        <!-- (1) -->
+        <listener-class>
+            org.springframework.security.web.session.HttpSessionEventPublisher
+        </listener-class>
+    </listener>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | サーブレットリスナとして\ ``HttpSessionEventPublisher``\ を登録する。
+
+多重ログインの禁止(先勝ち)
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、認証エラーを発生させて多重ログインを防ぐ場合は、以下のようなbean定義を行う。
+
+* bean定義ファイルの定義例
+
+.. code-block:: xml
+
+    <sec:session-management>
+        <sec:concurrency-control
+                max-sessions="1"
+                error-if-maximum-exceeded="true"/> <!-- (1) (2) -->
+    </sec:session-management>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - \ ``<sec:concurrency-control>``\ 要素の\ ``max-sessions``\ 属性に、同時にログイン
+        を許可するセッション数を指定する。
+        多重ログインを防ぎたい場合は、通常\ ``1``\ を指定する。
+    * - \ (2)
+      - \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、
+        同時にログインできるセッション数を超えた時の動作を指定する。
+        既にログインしているユーザーを有効なユーザーとして扱う場合は、\ ``true``\
+        を指定する。
+
+多重ログインの禁止(後勝ち)
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+同じユーザー名(ログインID)を使って既にログインしているユーザーがいる場合に、
+既にログインしているユーザーを無効化することで多重ログインを防ぐ場合は、
+以下のようなbean定義を行う。
+
+* spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:session-management>
+        <sec:concurrency-control
+                max-sessions="1"
+                error-if-maximum-exceeded="false"
+                expired-url="/error/expire"/> <!-- (1) (2) -->
+    </sec:session-management>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``<sec:concurrency-control>``\ 要素の\ ``error-if-maximum-exceeded``\ 属性に、同時にログインできるセッション数を超えた時の動作を指定する。
+        | 新たにログインしたユーザーを有効なユーザーとして扱う場合は、\ ``false``\ を指定する。
+    * - | (2)
+      - | \ ``<sec:concurrency-control>``\ 要素の\ ``expired-url``\ 属性に、無効化されたユーザーからのリクエストを検知した際のリダイレクト先のパスを指定する。
+        | これは\ ``<sec:http>``\ 要素の定義順番が\ ``SecurityFilterChain``\ の優先順位となるためである。
+
+.. raw:: latex
+
+   \newpage
+
diff --git a/source/Security/SpringSecurity.rst b/source/Security/SpringSecurity.rst
index 48da5c7374..5380ac4b02 100755
--- a/source/Security/SpringSecurity.rst
+++ b/source/Security/SpringSecurity.rst
@@ -1,3 +1,5 @@
+.. _SpringSecurityOverview:
+
 Spring Security概要
 ================================================================================
 
@@ -6,57 +8,337 @@ Spring Security概要
  .. contents:: 目次
     :local:
 
-Overview
+
+Spring Securityは、アプリケーションにセキュリティ対策機能を実装する際に使用するフレームワークである。 
+Spring Securityはスタンドアロンなアプリケーションでも利用できるが、サーブレットコンテナにデプロイするWebアプリケーションに対してセキュリティ対策を行う際に利用するのが一般的である。
+本章では、Spring Securityが提供する機能のうち、一般的なWebアプリケーションでの利用頻度が高いと思われる機能にしぼって説明する。
+
+.. tip:: **ガイドラインで紹介していない機能**
+
+    Spring Securityは、本ガイドラインで紹介していない機能も多く提供している。
+    Spring Securityが提供するすべての機能を知りたい場合は、\ `Spring Security Reference <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
+
+.. note:: **Spring Securityのバージョン**
+
+    本ガイドラインでは、Spring Securityのバージョンは4.0以上を使用することを前提としている。
+    Spring Securityが4.0にバージョンアップするにあたり、様々な変更が適用されており、以降で記述されるサンプルについても、Spring Security 4を使用したサンプルとなっている。
+
+    変更内容については\ `Migrating from Spring Security 3.x to 4.x (XML Configuration) <http://docs.spring.io/spring-security/site/migrate/current/3-to-4/html5/migrate-3-to-4-xml.html>`_\ を参照されたい。
+
+.. _SpringSecurityFunctionalities:
+
+Spring Securityの機能
 --------------------------------------------------------------------------------
 
-| Spring Securityとは、アプリケーションのセキュリティを担う「認証」、「認可」の2つを
-| 主な機能として提供している。
-| 認証機能とは、なりすましによる不正アクセスに対抗するため、ユーザを識別する機能である。
-| 認可機能とは、認証された（ログイン中の）ユーザの権限に応じて、
-| システムのリソースに対するアクセス制御を行う機能である。
-| また、HTTPヘッダーを付与する機能を有する。
+セキュリティ対策の基本機能
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring Securityは、セキュリティ対策の基本機能として以下の機能を提供している。
 
-| Spring Securityの概要図を、以下に示す。
+\
 
-.. figure:: ./images/spring_security_overview.png
-   :alt: Spring Security Overview
-   :width: 80%
-   :align: center
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セキュリティ対策の基本機能**
+    :header-rows: 1
+    :widths: 25 75
 
-   **Picture - Spring Security Overview**
+    * - 機能
+      - 説明
+    * - :ref:`認証機能<SpringSecurityAuthentication>` 
+      - アプリケーションを利用するユーザーの正当性を確認する機能。
+    * - :ref:`認可機能<SpringSecurityAuthorization>`
+      - アプリケーションが提供するリソースや処理に対してアクセスを制御する機能。
 
-| Spring Securityは、認証、認可のプロセスを何層にも連なる
-| ServletFilter の集まりで実現している。
-| また、パスワードハッシュ機能や、JSPの認可タグライブラリなども提供している。
+|
 
-認証
+セキュリティ対策の強化機能
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 認証とは、正当性を確認する行為であり、ネットワークやサーバへ接続する際に
-| ユーザ名とパスワードの組み合わせを使って、利用ユーザにその権利があるかどうかや、
-| その人が利用ユーザ本人であるかどうかを確認することである。
-| Spring Securityでの使用方法は、\ :doc:`Authentication`\ を参照されたい。
+Spring Securityでは認証と認可という基本的な機能に加え、Webアプリケーションのセキュリティを強化するための機能をいくつか提供している。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **セキュリティ対策の強化機能**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - 機能
+      - 説明
+    * - :ref:`セッション管理機能<SpringSecuritySessionManagement>` 
+      - セッションハイジャック攻撃やセッション固定攻撃からユーザーを守る機能、
+        セッションのライフサイクル(生成、破棄、タイムアウト)を制御するための機能。
+    * - :ref:`CSRF対策機能<SpringSecurityCSRF>`
+      - クロスサイトリクエストフォージェリ(CSRF)攻撃からユーザーを守るための機能。
+    * - :ref:`セキュリティヘッダ出力機能<SpringSecurityLinkageWithBrowser>`
+      - Webブラウザのセキュリティ対策機能と連携し、ブラウザの機能を悪用した攻撃からユーザーを守るための機能。
+
+|
+
+.. _SpringSecurityArchitecture:
+
+Spring Securityのアーキテクチャ
+--------------------------------------------------------------------------------
+各機能の詳細な説明を行う前に、Spring Securityのアーキテクチャ概要とSpring Securityを構成する主要なコンポーネントの役割を説明する。
 
-パスワードハッシュ
+.. note::
+
+    ここで説明する内容は、Spring Securityが提供するデフォルトの動作をそのまま利用する場合や、
+    Spring Securityのコンフィギュレーションをサポートする仕組みを利用する場合は、開発者が直接意識する必要ない。
+    そのため、まず各機能の使い方を知りたい場合は、本節を読み飛ばしても問題はない。
+    
+    ただし、ここで説明する内容は、Spring Securityのデフォルトの動作をカスタマイズする際に必要になるので、
+    アプリケーションのアーキテクトは一読しておくことを推奨する。
+
+|
+
+Spring Securityのモジュール
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 平文のパスワードから、ハッシュ関数を用いて計算されたハッシュ値を、元のパスワードと置き換えることである。
-| Spring Securityでの使用方法は、\ :doc:`PasswordHashing`\ を参照されたい。
 
-認可
+まずフレームワークスタックとなっているSpring Securityの提供モジュールを紹介する。
+
+フレームワークスタックモジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+フレームワークスタックモジュールは、以下の通りである。
+本ガイドラインでもこれらのモジュールを使用してセキュリティ対策を行う方法について説明する。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **フレームワークスタックモジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-core``\
+      - 認証と認可機能を実現するために必要となるコアなコンポーネントが格納されている。
+        このモジュールに含まれるコンポーネントは、スタンドアロン環境で実行するアプリケーションでも使用することができる。
+    * - \ ``spring-security-web``\
+      - Webアプリケーションのセキュリティ対策を実現するために必要となるコンポーネントが格納されている。
+        このモジュールに含まれるコンポーネントは、Web層(サーブレットAPIなど)に依存する処理を行う。
+    * - \ ``spring-security-config``\
+      - 各モジュールから提供されているコンポーネントのセットアップをサポートするためのコンポーネント(コンフィギュレーションをサポートするクラスやXMLネームスペースを解析するクラスなど)が格納されている。
+        このモジュールを使用すると、Spring Securityのbean定義を簡単に行うことができる。
+    * - \ ``spring-security-taglibs``\
+      - 認証情報や認可機能にアクセスするためのJSPタグライブラリが格納されている。
+    * - \ ``spring-security-acl``\
+      - EntityなどのドメインオブジェクトをAccess Control List(ACL)を使用して認可制御するために必要となるコンポーネントが格納されている。
+        本モジュールは依存関係の都合上、フレームワークスタックに含まれているモジュールであるため、本ガイドラインにおいて使用方法の説明は行わない。
+
+要件に合わせて使用するモジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+フレームワークスタックではないが、一般的に利用される認証方法などをサポートするために、
+以下のようなモジュールも提供されている。
+セキュリティ要件に応じて、これらのモジュールの使用も検討されたい。
+
+\
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **要件に合わせて使用するモジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-remoting``\
+      - JNDI経由でDNSにアクセス、Basic認証が必要なWebサイトにアクセス、Spring Securityを使用してセキュリティ対策しているメソッドにRMI経由でアクセスする際に必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-aspects``\
+      - Javaのメソッドに対して認可機能を適用する際にAspectJの機能を使用する際に必要となるコンポーネントが格納されています。
+        このモジュールは、AOPとしてSpring AOPを使う場合は不要である。
+    * - \ ``spring-security-messaging``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - SpringのWeb Socket機能に対してセキュリティ対策を追加するためのコンポーネントが格納されている。 
+    * - \ ``spring-security-data``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - Spring Dataの機能から認証情報にアクセスできるようにするためのコンポーネントが格納されている。 
+    * - \ ``spring-security-ldap``\
+      - Lightweight Directory Access Protocol(LDAP)を使用した認証を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-openid``\
+      - OpenID\ [#fSpringSecurityArchitecture1]_\ を使用した認証を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-cas``\
+      - Central Authentication Service(CAS)\ [#fSpringSecurityArchitecture2]_\ と連携するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-crypto``\
+      - 暗号化、キーの生成、ハッシュアルゴリズムを利用したパスワードエンコーディングを行うためのコンポーネントが格納されている。
+        このモジュールに含まれるクラスは、フレームワークスタックモジュールである\ ``spring-security-core``\にも含まれている。
+
+テスト用のモジュール
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring Security 4.0からはテストを支援するためのモジュールが追加されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}| 
+.. list-table:: **テスト用のモジュール** 
+    :header-rows: 1 
+    :widths: 25 75 
+  
+    * - モジュール名 
+      - 説明 
+    * - \ ``spring-security-test``\ \ [#fSpringSecurityArchitecture5]_\ 
+      - Spring Securityに依存しているクラスのテストを支援するためのコンポーネントが格納されている。 
+        このモジュールを使用すると、JUnitテスト時に必要となる認証情報を簡単にセットアップすることができる。 
+        また、Spring MVCのテスト用コンポーネント(\ ``MockMvc``\ )と連携して使用するコンポーネントも含まれている。 
+
+要件に合わせて利用する関連モジュール群
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+また、いくつかの関連モジュールも提供されている。
+
+.. tabularcolumns:: |p{0.25\linewidth}|p{0.75\linewidth}|
+.. list-table:: **要件に合わせて利用する主な関連モジュール群**
+    :header-rows: 1
+    :widths: 25 75
+
+    * - モジュール名
+      - 説明
+    * - \ ``spring-security-oauth2``\ \ [#fSpringSecurityArchitecture3]_\
+      - OAuth 2.0\ [#fSpringSecurityArchitecture4]_\ の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
+    * - \ ``spring-security-oauth``\ \ [#fSpringSecurityArchitecture3]_\
+      - OAuth 1.0の仕組みを使用してAPIの認可を実現するために必要となるコンポーネントが格納されている。
+
+|
+
+.. [#fSpringSecurityArchitecture1] OpenIDは、簡単に言うと「1つのIDで複数のサイトにログインできるようする」ための仕組みである。
+.. [#fSpringSecurityArchitecture2] CASは、OSSとして提供されているシングルサインオン用のサーバーコンポーネントである。詳細は https://www.apereo.org/cas を参照されたい。
+.. [#fSpringSecurityArchitecture3] 詳細は http://projects.spring.io/spring-security-oauth/ を参照されたい。
+.. [#fSpringSecurityArchitecture4] OAuth 2.0は、OAuth 1.0が抱えていた課題(署名と認証フローの複雑さ、モバイルやデスクトップのクライアントアプリの未対応など)を改善したバージョンで、OAuth 1.0との後方互換性はない。
+.. [#fSpringSecurityArchitecture5] Spring Security 4.0から追加されたモジュールである。
+
+|
+
+.. _SpringSecurityProcess:
+
+フレームワーク処理
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| 認可とは、認証された利用者がリソースにアクセスしようとしたとき、
-| アクセス制御処理でその利用者がそのリソースの使用を許可されていることを調べることである。
-| Spring Securityでの使用方法は、\ :doc:`Authorization`\ を参照されたい。
 
-.. _howtouse_springsecurity:
+Spring Securityは、サーブレットフィルタの仕組みを使用してWebアプリケーションのセキュリティ対策を行うアーキテクチャを採用しており、以下のような流れで処理を実行している。
+
+.. figure:: ./images_SpringSecurity/Architecture.png
+    :width: 100%
+
+    **Spring Securityのフレームワークアーキテクチャ**
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - クライアントは、Webアプリケーションに対してリクエストを送る。
+    * - \ (2)
+      - Spring Securityの\ ``FilterChainProxy``\ クラス(サーブレットフィルタ)がリクエストを受け取り、
+        \ ``HttpFirewall``\ インタフェースのメソッドを呼び出して\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込む。
+    * - \ (3)
+      - \ ``FilterChainProxy``\ クラスは、Spring Securityが提供しているセキュリティ対策用のSecurity Filter(サーブレットフィルタ)クラスに処理を委譲する。
+    * - \ (4)
+      - Security Filterは複数のクラスで構成されており、サーブレットフィルタの処理が正常に終了すると後続のサーブレットフィルタが呼び出される。
+    * - \ (5)
+      - 最後のSecurity Filterの処理が正常に終了した場合、後続処理(サーブレットフィルタやサーブレットなど)を呼びだし、Webアプリケーション内のリソースへアクセスする。
+    * - \ (6)
+      - \ ``FilterChainProxy``\ クラスは、Webアプリケーションから返却されたリソースをクライアントへレスポンスする。
+
+|
+
+Webアプリケーション向けのフレームワーク処理を構成する主要なコンポーネントは以下の通りである。
+詳細は \ `Spring Security Reference -The Security Filter Chain- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#security-filter-chain>`_\ を参照されたい。
+
+
+FilterChainProxy
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``FilterChainProxy``\ クラスは、Webアプリケーション向けのフレームワーク処理のエントリーポイントとなるサーブレットフィルタクラスである。
+このクラスはフレームワーク処理の全体の流れを制御するクラスであり、具体的なセキュリティ対策処理はSecurity Filterに委譲している。
+
+HttpFirewall
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``HttpFirewall``\ インタフェースは、\ ``HttpServletRequest``\ と\ ``HttpServletResponse``\ に対してファイアフォール機能を組み込むためのインタフェースである。
+デフォルトでは、\ ``DefaultHttpFirewall``\ クラスが使用され、ディレクトリトラバーサル攻撃やHTTPレスポンス分割攻撃に対するチェックなどが実装されている。
+
+SecurityFilterChain
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+\ ``SecurityFilterChain``\ インタフェースは、\ ``FilterChainProxy``\ が受け取ったリクエストに対して、適用するSecurity Filterのリストを管理するためのインタフェースである。
+デフォルトでは\ ``DefaultSecurityFilterChain``\ クラスが使用され、適用するSecurity Filterのリストを、リクエストURLのパターン毎に管理する。
+
+たとえば、以下のようなbean定義を行うと、URLに応じて異なる内容のセキュリティ対策を適用することができる。
+
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
+
+.. code-block:: xml
+
+    <sec:http pattern="/api/**">
+        <!-- ... -->
+    </sec:http>
+
+    <sec:http pattern="/ui/**">
+        <!-- ... -->
+    </sec:http>
+
+Security Filter
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Security Filterクラスは、フレームワーク機能やセキュリティ対策機能を実現する上で必要となる処理を提供するサーブレットフィルタクラスである。
+
+Spring Securityは、複数のSecurity Filterを連鎖させることでWebアプリケーションのセキュリティ対策を行う仕組みになっている。
+ここでは、認証と認可機能を実現するために必要となるコアなクラスを紹介する。
+詳細は \ `Spring Security Reference -Core Security Filters- <http://docs.spring.io/spring-security/site/docs/4.0.3.RELEASE/reference/htmlsingle/#core-web-filters>`_\ を参照されたい。
+
+.. _SpringSecurityTableSecurityFilter:
+
+.. tabularcolumns:: |p{0.35\linewidth}|p{0.65\linewidth}|
+.. list-table:: **コアなSecurity Filter**
+    :header-rows: 1
+    :widths: 35 65
+
+    * - クラス名
+      - 説明
+    * - \ ``SecurityContextPersistenceFilter``\
+      - 認証情報をリクエストを跨いで共有するための処理を提供するクラス。
+        デフォルトの実装では、\ ``HttpSession``\ に認証情報を格納することで、リクエストをまたいで認証情報を共有している。
+    * - \ ``UsernamePasswordAuthenticationFilter``\
+      - リクエストパラメータで指定されたユーザー名とパスワードを使用して認証処理を行うクラス。
+        フォーム認証を行う際に使用する。
+    * - \ ``LogoutFilter``\
+      - ログアウト処理を行うクラス。
+    * - \ ``FilterSecurityInterceptor``\
+      - HTTPリクエスト(\ ``HttpServletRequest``\ )に対して認可処理を実行するためのクラス。
+    * - \ ``ExceptionTranslationFilter``\
+      - \ ``FilterSecurityInterceptor``\ で発生した例外をハンドリングし、クライアントへ返却するレスポンスを制御するクラス。
+        デフォルトの実装では、未認証ユーザーからのアクセスの場合は認証を促すレスポンス、
+        認証済みのユーザーからのアクセスの場合は認可エラーを通知するレスポンスを返却する。
 
-How to use
+|
+
+.. _SpringSecuritySetup:
+
+
+Spring Securityのセットアップ
 --------------------------------------------------------------------------------
 
-| Spring Securityを使用するために、以下の設定を定義する必要がある。
+WebアプリケーションにSpring Securityを適用するためのセットアップ方法について説明する。
+
+ここでは、WebアプリケーションにSpring Securityを適用し、Spring Securityが提供しているデフォルトのログイン画面を表示させる最もシンプルなセットアップ方法を説明する。
+実際のアプリケーション開発で必要となるカスタマイズ方法や拡張方法については、次節以降で順次説明する。
+
+.. note::
+
+    開発プロジェクトを\ `ブランンクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\ から作成すると、ここで説明する各設定はセットアップ済みの状態になっている。
+    開発プロジェクトの作成方法については、「:doc:`../ImplementationAtEachLayer/CreateWebApplicationProject`」を参照されたい。
+
+|
+
+.. _SpringSecuritySetupDependency:
 
-pom.xmlの設定
+依存ライブラリの適用
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| Spring Securityを使用する場合、以下のdependencyを、pom.xmlに追加する必要がある。
+
+まず、Spring Securityを依存関係として使用している共通ライブラリを適用する。
+Spring Securityと共通ライブラリの関連については、:ref:`frameworkstack_common_library` を参照されたい。
+
+本ガイドラインでは、Mavenを使って開発プロジェクトを作成していることを前提とする。
+
+* xxx-domain/pom.xmlの設定例
 
 .. code-block:: xml
 
@@ -65,6 +347,10 @@ pom.xmlの設定
         <artifactId>terasoluna-gfw-security-core</artifactId>  <!-- (1) -->
     </dependency>
 
+* xxx-web/pom.xmlの設定例
+
+.. code-block:: xml
+
     <dependency>
         <groupId>org.terasoluna.gfw</groupId>
         <artifactId>terasoluna-gfw-security-web</artifactId>  <!-- (2) -->
@@ -72,255 +358,210 @@ pom.xmlの設定
 
 .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
 .. list-table::
-   :header-rows: 1
-   :widths: 10 90
+    :header-rows: 1
+    :widths: 10 90
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | terasoluna-gfw-security-coreは、webに依存しないため、ドメイン層のプロジェクトから使用する場合は、
-       | terasoluna-gfw-security-coreのみをdependencyに追加すること。
-   * - | (2)
-     - | terasoluan-gfw-webはwebに関連する機能を提供する。terasoluna-gfw-security-coreにも依存しているため、
-       | Webプロジェクトは、terasoluna-gfw-security-webのみをdependencyに追加すること。
-
-Web.xmlの設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-.. code-block:: xml
-   :emphasize-lines: 5,13-20
+    * - 項番
+      - 説明
+    * - \ (1)
+      - ドメイン層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-coreをdependencyに追加する。
+    * - \ (2)
+      - アプリケーション層のプロジェクトでSpring Securityの機能を使用する場合は、terasoluna-gfw-security-webをdependencyに追加する。
 
-    <context-param>
-      <param-name>contextConfigLocation</param-name>
-      <param-value>  <!-- (1) -->
-          classpath*:META-INF/spring/applicationContext.xml
-          classpath*:META-INF/spring/spring-security.xml
-      </param-value>
-    </context-param>
-    <listener>
-      <listener-class>
-        org.springframework.web.context.ContextLoaderListener
-      </listener-class>
-    </listener>
-    <filter>
-      <filter-name>springSecurityFilterChain</filter-name>  <!-- (2) -->
-      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  <!-- (3) -->
-    </filter>
-    <filter-mapping>
-      <filter-name>springSecurityFilterChain</filter-name>
-      <url-pattern>/*</url-pattern>  <!-- (4) -->
-    </filter-mapping>
 
-.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-.. list-table::
-   :header-rows: 1
-   :widths: 10 90
+.. note::
 
-   * - 項番
-     - 説明
-   * - | (1)
-     - | contextConfigLocationには、applicationContext.xmlに加えて、
-       | クラスパスにSpring Security設定ファイルを追加する。本ガイドラインでは、「spring-security.xml」とする。
-   * - | (2)
-     - | filter-nameには、Spring Securityの内部で使用されるBean名、「springSecurityFilterChain」 で定義すること。
-   * - | (3)
-     - 各種機能を有効にするための、Spring Securityのフィルタ設定。
-   * - | (4)
-     - 全てのリクエストに対して設定を有効にする。
-
-spring-security.xmlの設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+    本ガイドラインでは、Spring IO Platformを使用してライブラリのバージョンを管理する前提で記載しているため、\ ``<version>``\ 要素は省略している。
 
-| web.xmlにおいて指定したパスに、spring-security.xmlを配置する。
-| 通常はsrc/main/resources/META-INF/spring/spring-security.xmlに設定する。
-| 以下の例は、雛形のみであるため、詳細な説明は、次章以降を参照されたい。
+|
 
-* spring-mvc.xml
+bean定義ファイルの作成
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Spring Securityのコンポーネントをbean定義するため、以下のようなXMLファイルを作成する。（`ブランクプロジェクト <https://github.com/terasolunaorg/terasoluna-gfw-web-multi-blank>`_\より抜粋）
 
-  .. code-block:: xml
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
 
+.. code-block:: xml
+
+    <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
-        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-        xmlns:sec="http://www.springframework.org/schema/security"
-        xmlns:context="http://www.springframework.org/schema/context"
-        xsi:schemaLocation="http://www.springframework.org/schema/security
-            http://www.springframework.org/schema/security/spring-security.xsd
+           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+           xmlns:sec="http://www.springframework.org/schema/security"
+           xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
-            http://www.springframework.org/schema/context
-            http://www.springframework.org/schema/context/spring-context.xsd">
-        <sec:http  use-expressions="true">  <!-- (1) -->
-        <!-- omitted -->
+            http://www.springframework.org/schema/security
+            http://www.springframework.org/schema/security/spring-security.xsd
+           "> <!-- (1) -->
+
+        <sec:http> <!-- (2) -->
+            <sec:form-login /> <!-- (3) -->
+            <sec:logout /> <!-- (4) -->
+            <sec:access-denied-handler ref="accessDeniedHandler"/> <!-- (5) -->
+            <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/> <!-- (6) -->
+            <sec:session-management /> <!-- (7) -->
         </sec:http>
-    </beans>
-
-  .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-  .. list-table::
-     :header-rows: 1
-     :widths: 10 90
-
-     * - 項番
-       - 説明
-     * - | (1)
-       - | use-expressions="true"と記載することで、アクセス属性のSpring EL式を有効することができる。
-
-  \
-
-      .. note::
-          use-expressions="true" で有効になるSpring EL式は、以下を参照されたい。
 
-          \ `Expression-Based Access Control <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#el-access>`_\
+        <sec:authentication-manager /> <!-- (8) -->
 
-Appendix
---------------------------------------------------------------------------------
-
-.. _SpringSecurityAppendixSecHeaders:
-
-セキュアなHTTPヘッダー付与の設定
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+        <bean id="accessDeniedHandler" class="org.springframework.security.web.access.DelegatingAccessDeniedHandler"> <!-- (9) -->
+            <!-- omitted -->
+        </bean>
 
-以下のようにspring-security.xmlの\ ``<sec:http>``\ の内の\ ``<sec:headers>``\ 要素を設定することで、HTTPレスポンスに自動でセキュリティに関するヘッダを設定することができる。
-これらのHTTPレスポンスヘッダをつけることにより、Webブラウザが攻撃を検知して対処できる。
-必須の設定ではないが、セキュリティ強化のために設定しておくことを推奨する。
+        <bean id="userIdMDCPutFilter" class="org.terasoluna.gfw.security.web.logging.UserIdMDCPutFilter">  <!-- (10) -->
+            <!-- omitted -->
+        </bean>
 
-.. code-block:: xml
+    </beans>
 
-    <sec:http use-expressions="true">
-      <!-- omitted -->
-      <sec:headers />
-      <!-- omitted -->
-    </sec:http>
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+
+
+    * - 項番
+      - 説明
+    * - \ (1)
+      - Spring Securityから提供されているXMLネームスペースを有効する。
+        上記例では、\ ``sec``\ という名前を割り当てている。
+        XMLネームスペースを使用すると、Spring Securityのコンポーネントのbean定義を簡単に行うことができる。
+    * - \ (2)
+      - \ ``<sec:http>``\ タグを定義する。
+        \ ``<sec:http>``\ タグを定義すると、Spring Securityを利用するために必要となるコンポーネントのbean定義が自動的に行われる。
+    * - \ (3)
+      - \ ``<sec:form-login>``\ タグを定義し、フォーム認証を使用したログインに関する設定行う。
+        \ 詳細は :ref:`form-login` を参照されたい
+    * - \ (4)
+      - \ ``<sec:logout>``\ タグ を定義し、ログアウトに関する設定を行う。
+        \ 詳細は :ref:`SpringSecurityAuthenticationLogout` を参照されたい。
+    * - \ (5)
+      - \ ``<sec:access-denied-handler>``\ タグを定義し、アクセスエラー時の制御を行うための設定を定義する。
+        \ 詳細は :ref:`SpringSecurityAuthorizationAccessDeniedHandler` 、 :ref:`SpringSecurityAuthorizationOnError` を参照されたい。
+    * - \ (6)
+      - ログ出力するユーザ情報をMDCに格納するための共通ライブラリのフィルタを定義する。
+    * - \ (7)
+      - \ ``<sec:session-management>``\ タグ を定義し、セッション管理に関する設定を行う。
+        \ 詳細は :ref:`SpringSecuritySessionManagement` を参照されたい
+    * - \ (8)
+      - \ ``<sec:authentication-manager>``\ タグを定義して、認証機能用のコンポーネントをbean定義する。
+        このタグを定義しておかないとサーバ起動時にエラーが発生する。
+    * - \ (9)
+      - \ アクセスエラー時のエラーハンドリングを行うコンポーネントをbean定義する。
+    * - \ (10)
+      - \ ログ出力するユーザ情報をMDCにする共通ライブラリのコンポーネントをbean定義する。
+
+
+.. note:: **静的リソースへのアクセス**
+
+    JSPでCSS等の静的リソースを使用している場合は、それらを格納するフォルダにアクセス権を付与する必要がある。
+    詳細は、:ref:`SpringSecurityNotApply` を参照されたい。 
 
-本設定で、以下の項目に関するHTTPレスポンスヘッダが設定される。
+|
 
-* Cache-Control
-* X-Content-Type-Options
-* Strict-Transport-Security
-* X-Frame-Options
-* X-XSS-Protection
+作成したbean定義ファイルを使用してSpringのDIコンテナを生成するように定義する。
 
-.. tabularcolumns:: |p{0.2\linewidth}|p{0.5\linewidth}||p{0.3\linewidth}|
-.. list-table:: 
-   :header-rows: 1
-   :widths: 20 50 30
-
-   * - HTTPヘッダ名
-     - 設定が不適切(未設定含む)な場合の問題
-     - 適切に設定した場合の挙動
-   * - | \ ``Cache-Control``\ 
-     - | あるユーザーがログインして閲覧できるコンテンツがキャッシュされ、ログアウト後に別ユーザーも閲覧できてしまう場合がある。
-     - | コンテンツをキャッシュしないように指示をして、ブラウザがサーバの情報を常に取得するようにする。
-   * - | \ ``X-Content-Type-Options``\ 
-     - | ブラウザが、Content-Typeで内容を決めずにコンテンツの中身を調べて動作させる内容を判断してしまい、想定しないScriptが実行されてしまう場合がある。
-     - | ブラウザが、Content-Typeで内容を決めずにコンテンツの中身を調べて動作させる内容を判断しないようにする。MIMEタイプが一致しない場合、Scriptが実行されることを制限する。
-   * - | \ ``Strict-Transport-Security``\ 
-     - | セキュアなページにHTTPSでアクセスされることを期待しているにも関わらず、HTTPでアクセスされた際に、HTTP由来の攻撃を受ける可能性がある。(例: 中間攻撃者がユーザーのHTTPリクエストを傍受し、悪意のあるサイトへリダイレクトさせる。)
-     - | 一度正規のWebサイトへHTTPSでアクセスすれば、ブラウザは自動的にHTTPSのみを用いるよう理解して、悪意のあるサイトへ誘導されるという中間者攻撃の実行を防ぐ。
-   * - | \ ``X-Frame-Options``\ 
-     - | 悪意あるWebサイトAの画面を透過処理で見えなくし、代わりに\ ``<iframe>``\ タグで他の正常なサイトBを埋め込むと、攻撃者はユーザにサイトBのつもりでサイトAにアクセスさせることができる。
-       | この状況において、サイトAの送信ボタンとサイトBのリンクの位置を重ねると、攻撃者はユーザーに、正常なサイトBのリンクをクリックしたつもりでサイトAによる悪意のあるリクエストを送信させることができる。(\ `Clickjacking <https://www.owasp.org/index.php/Clickjacking>`_\ )
-     - | 自身の作成したWebサイト(=サイトB)が他のWebサイト(=サイトA)に\ ``<iframe>``\ タグを利用して読み込まれないようにする。
-   * - | \ ``X-XSS-Protection``\ 
-     - | ブラウザに実装されているXSSフィルターによる有害スクリプトの判定が無効化される。
-     - | ブラウザに実装されているXSSフィルターが、有害なスクリプトとを判断して実行するかどうかをユーザに問い合わせる、または無効にする(挙動はブラウザによって異なる)。
-
-
-
-上記設定は以下の(1)から(5)のように個別設定も可能である。必要に応じて取捨選択されたい。
+* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
 
 .. code-block:: xml
 
-    <sec:http use-expressions="true">
-      <!-- omitted -->
-      <sec:headers>
-        <sec:cache-control />  <!-- (1) -->
-        <sec:content-type-options />  <!-- (2) -->
-        <sec:hsts />  <!-- (3) -->
-        <sec:frame-options />  <!-- (4) -->
-        <sec:xss-protection />  <!-- (5) -->
-      </sec:headers>
-      <!-- omitted -->
-    </sec:http>
+    <!-- (1) -->
+    <listener>
+        <listener-class>
+            org.springframework.web.context.ContextLoaderListener
+        </listener-class>
+    </listener>
+    <!-- (2) -->
+    <context-param>
+        <param-name>contextConfigLocation</param-name>
+        <param-value>
+            classpath*:META-INF/spring/applicationContext.xml
+            classpath*:META-INF/spring/spring-security.xml
+        </param-value>
+    </context-param>
 
-.. tabularcolumns:: |p{0.05\linewidth}|p{0.45\linewidth}|p{0.40\linewidth}|p{0.10\linewidth}|
-.. list-table:: Spring Security によるHTTPヘッダー付与
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
    :header-rows: 1
-   :widths: 5 45 40 10
+   :widths: 10 90
 
    * - 項番
      - 説明
-     - デフォルトで出力されるHTTPレスポンスヘッダ
-     - 属性有無
-   * - | (1)
-     - | クライアントにデータをキャッシュしないように指示する。
-     - | \ ``Cache-Control:no-cache, no-store, max-age=0, must-revalidate``\ 
-       | \ ``Pragma: no-cache``\ 
-       | \ ``Expires: 0``\ 
-     - | 無し
-   * - | (2)
-     - | コンテントタイプを無視して、クライアント側がコンテンツ内容により、自動的に処理方法を決めないように指示する。
-     - | \ ``X-Content-Type-Options:nosniff``\ 
-     - | 無し
-   * - | (3)
-     - | HTTPSでアクセスしたサイトでは、HTTPSの接続を続けるように指示する。（HTTPでのサイトの場合、無視され、ヘッダ項目として付与されない。）
-     - | \ ``Strict-Transport-Security:max-age=31536000 ; includeSubDomains``\ 
-     - | 有り
-   * - | (4)
-     - | コンテンツをiframe内部に表示の可否を指示する。
-     - | \ ``X-Frame-Options:DENY``\ 
-     - | 有り
-   * - | (5)
-     - | \ `XSS攻撃 <https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>`_\ を検出できるフィルターが実装されているブラウザに対して、XSSフィルター機能を有効にする指示をする。
-     - | \ ``X-XSS-Protection:1; mode=block``\ 
-     - | 有り
+   * - \(1)
+     -  サーブレットコンテナのリスナクラスとして、\ ``ContextLoaderListener``\ クラスを指定する。
+   * - \(2)
+     -  サーブレットコンテナの\ ``contextClass``\ パラメータに、\ ``applicationContext.xml``\ に加えて、Spring Security用のbean定義ファイルを追加する。
 
 |
 
-個別設定した場合は属性を設定可能である。設定可能な属性をいくつか説明する。
+サーブレットフィルタの設定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+最後に、Spring Securityが提供しているサーブレットフィルタクラス(\ ``FilterChainProxy``\) をサーブレットコンテナに登録する。
 
-.. tabularcolumns:: |p{0.05\linewidth}|p{0.20\linewidth}|p{0.30\linewidth}|p{0.20\linewidth}|p{0.25\linewidth}|
-.. list-table:: 設定可能な属性
-   :header-rows: 1
-   :widths: 5 20 30 20 25
+* xxx-web/src/main/webapp/WEB-INF/web.xmlの設定例
+
+.. code-block:: xml
 
+    <!-- (1) -->
+    <filter>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <filter-class>
+            org.springframework.web.filter.DelegatingFilterProxy
+        </filter-class>
+    </filter>
+    <!-- (2) -->
+    <filter-mapping>
+        <filter-name>springSecurityFilterChain</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+   :header-rows: 1
+   :widths: 10 90
+   
    * - 項番
-     - オプション
      - 説明
-     - 指定例
-     - 出力されるHTTPレスポンスヘッダ
-   * - | (3)
-     - | \ ``max-age-seconds``\ 
-     - | 該当サイトに対してHTTPSのみでアクセスすることを記憶する秒数（デフォルトは365日）
-     - | \ ``<sec:hsts max-age-seconds="1000" />``\ 
-     - | \ ``Strict-Transport-Security:max-age=1000 ; includeSubDomains``\ 
-   * - | (3)
-     - | \ ``include-subdomains``\ 
-     - | サブドメインに対しての適用指示。デフォルト値は\ ``true``\ である。\ ``false``\ を指定すると出力されなくなる。
-     - | \ ``<sec:hsts include-subdomains="false" />``\ 
-     - | \ ``Strict-Transport-Security:max-age=31536000``\ 
-   * - | (4)
-     - | \ ``policy``\ 
-     - | コンテンツをiframe内部に表示する許可方法を指示する。デフォルト値は\ ``DENY``\ （フレーム内に表示するのを全面禁止）である。\ ``SAMEORIGIN``\ (同サイト内ページのみフレームに読み込みを許可する)にも変更可能である。
-     - | \ ``<sec:frame-options policy="SAMEORIGIN" />``\ 
-     - | \ ``X-Frame-Options:SAMEORIGIN``\ 
-   * - | (5)
-     - | \ ``enabled,block``\ 
-     - | \ ``false``\ を指定して、XSSフィルターを無効にすることが可能となるが、有効化を推奨する。
-     - | \ ``<sec:xss-protection enabled="false" block="false" />``\ 
-     - | \ ``X-XSS-Protection:0``\ 
+   * - \ (1)
+     - Spring Frameworkから提供されている\ ``DelegatingFilterProxy``\ を使用して、
+       SpringのDIコンテナで管理されているbean(\ ``FilterChainProxy``\ )をサーブレットコンテナに登録する。
+       サーブレットフィルタの名前には、SpringのDIコンテナで管理されているbeanのbean名(\ ``springSecurityFilterChain``\ )を指定する。
+   * - \ (2)
+     -  Spring Securityを適用するURLのパターンを指定する。
+        上記例では、すべてのリクエストに対してSpring Securityを適用する。
 
+|
 
-.. note::
+.. _SpringSecurityNotApply:
 
-    これらのヘッダに対する処理は、一部のブラウザではサポートされていない。ブラウザの公式サイトまたは以下のページを参照されたい。
+セキュリティ対策を適用しないため設定
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-    * https://www.owasp.org/index.php/HTTP_Strict_Transport_Security (Strict-Transport-Security)
-    * https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet (X-Frame-Options)
-    * https://www.owasp.org/index.php/List_of_useful_HTTP_headers (X-Content-Type-Options, X-XSS-Protection)
+セキュリティ対策が不要なリソースのパス(cssファイルやimageファイルにアクセスするためのパスなど)に対しては、
+\ ``<sec:http>``\ タグを使用して、Spring Securityのセキュリティ機能(Security Filter)が適用されないように制御することができる。
 
+* xxx-web/src/main/resources/META-INF/spring/spring-security.xmlの定義例
 
-詳細については\ `公式リファレンス <http://docs.spring.io/spring-security/site/docs/3.2.7.RELEASE/reference/htmlsingle/#default-security-headers>`_\ を参照されたい。
+.. code-block:: xml
+  
+    <sec:http pattern="/resources/**" security="none"/>  <!-- (1) (2) -->
+    <sec:http>
+        <!-- omitted -->
+    </sec:http>
+  
+.. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+.. list-table::
+    :header-rows: 1
+    :widths: 10 90
+  
+    * - 項番
+      - 説明
+    * - | (1)
+      - | \ ``pattern``\ 属性にセキュリティ機能を適用しないパスのパターンを指定する。
+    * - | (2)
+      - | \ ``security``\ 属性に\ ``none``\ を指定する。
+        | \ ``none``\ を指定すると、Spring Securityのセキュリティ機能(Security Filter)が適用されない。
 
-    
 .. raw:: latex
 
    \newpage
diff --git a/source/Security/Tutorial.rst b/source/Security/Tutorial.rst
index f982c5bde4..c33969796f 100755
--- a/source/Security/Tutorial.rst
+++ b/source/Security/Tutorial.rst
@@ -611,7 +611,7 @@ Spring Securityの設定
      - | ログインフォームを表示するためのURL
    * - | /login.jsp?error=true
      - | 認証エラー時に遷移するページ(ログインページ)を表示するためのURL
-   * - | /authenticate
+   * - | /login
      - | 認証処理を行うためのURL
    * - | /logout
      - | ログアウト処理を行うためのURL
@@ -639,32 +639,21 @@ Spring Securityの設定
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
         <sec:http pattern="/resources/**" security="none"/>
-        <sec:http auto-config="true" use-expressions="true">
-            <sec:headers>
-                <sec:cache-control />
-                <sec:content-type-options />
-                <sec:hsts />
-                <sec:frame-options />
-                <sec:xss-protection />
-            </sec:headers>
-            <sec:csrf />
+        <sec:http>
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
             <sec:session-management />
             <!-- (1) -->
             <sec:form-login
                 login-page="/login.jsp"
-                authentication-failure-url="/login.jsp?error=true"
-                login-processing-url="/authenticate" />
+                authentication-failure-url="/login.jsp?error=true" />
             <!-- (2) -->
             <sec:logout
-                logout-url="/logout"
                 logout-success-url="/"
                 delete-cookies="JSESSIONID" />
             <!-- (3) -->
             <sec:intercept-url pattern="/login.jsp" access="permitAll" />
             <sec:intercept-url pattern="/**" access="isAuthenticated()" />
-
         </sec:http>
 
         <sec:authentication-manager>
@@ -730,7 +719,6 @@ Spring Securityの設定
 
         * \ ``login-page``\ 属性にログインフォームを表示するためのURL
         * \ ``authentication-failure-url``\ 属性に認証エラー時に遷移するページを表示するためのURL
-        * \ ``login-processing-url``\ 属性に認証処理を行うためのURL
 
         を設定する。
     * - | (2)
@@ -738,7 +726,6 @@ Spring Securityの設定
 
         \ ``<sec:logout>``\ タグには、
 
-        * \ ``logout-url``\ 属性にログアウト処理を行うためのURL
         * \ ``logout-success-url``\ 属性にログアウト後に遷移するページを表示するためのURL(本チュートリアルではウェルカムページを表示するためのURL)
         * \ ``delete-cookies``\ 属性にログアウト時に削除するCookie名(本チュートリアルではセッションIDのCookie名)
 
@@ -765,14 +752,6 @@ Spring Securityの設定
 
         本チュートリアルでは、\ ``applicationContext.xml``\ に定義されている\ ``org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder``\ を利用する。
 
-.. note::
-
-    認証処理とログアウト処理を行うためのURLについては、Spring Securityが提供しているデフォルトのURLを変更している。
-
-    これは、これらのURLの中にSpring Securityを使用している事がわかる文字列(\ ``spring_security``\ )が含まれているためである。
-    デフォルトのURLをそのまま使用した場合、Spring Securityにセキュリティ上の脆弱性が発覚した場合に、
-    悪意のあるユーザからの攻撃を受けやすくなるという点に注意してほしい。
-
 |
 
 ログインページの作成
@@ -802,17 +781,17 @@ Spring Securityの設定
             </c:if>
 
             <!-- (3) -->
-            <form:form action="${pageContext.request.contextPath}/authenticate">
+            <form:form action="${pageContext.request.contextPath}/login">
                 <table>
                     <tr>
-                        <td><label for="j_username">User:</label></td>
-                        <td><input type="text" id="j_username"
-                            name="j_username" value='demo'>(demo)</td><!-- (4) -->
+                        <td><label for="username">User:</label></td>
+                        <td><input type="text" id="username"
+                            name="username" value='demo'>(demo)</td><!-- (4) -->
                     </tr>
                     <tr>
-                        <td><label for="j_password">Password:</label></td>
-                        <td><input type="password" id="j_password"
-                            name="j_password" value="demo" />(demo)</td><!-- (5) -->
+                        <td><label for="password">Password:</label></td>
+                        <td><input type="password" id="password"
+                            name="password" value="demo" />(demo)</td><!-- (5) -->
                     </tr>
                     <tr>
                         <td>&nbsp;</td>
@@ -832,24 +811,24 @@ Spring Securityの設定
     * - 項番
       - 説明
     * - | (1)
-      - 認証が失敗した場合、\ ``"/login.jsp?error=true"``\ が呼び出し、ログインページを表示する。
+      - 認証が失敗した場合、\ ``"/login.jsp?error=true"``\ が呼び出され、ログインページを表示する。
         そのため、認証エラー後の表示の時のみエラーメッセージが表示されるように\ ``<c:if>``\ タグを使用する。
     * - | (2)
       - 共通ライブラリから提供されている\ ``<t:messagesPanel>``\ タグを使用してエラーメッセージを表示する。
 
         認証が失敗した場合、認証エラーの例外オブジェクトが\ ``"SPRING_SECURITY_LAST_EXCEPTION"``\ という属性名でセッションスコープに格納される。
     * - | (3)
-      - \ ``<form:form>``\ タグの\ ``action``\ 属性に、認証処理用のURL(\ ``"/authenticate"``\ )と設定する。
+      - \ ``<form:form>``\ タグの\ ``action``\ 属性に、認証処理用のURL(\ ``"/login"``\ )を設定する。このURLはSpring Securityのデフォルトである。
 
         認証処理に必要なパラメータ(ユーザー名とパスワード)をPOSTメソッドを使用して送信する。
     * - | (4)
       - ユーザー名を指定するテキストボックスを作成する。
 
-        Spring Securityのデフォルトのパラメータ名は\ ``j_username``\ である。
+        Spring Securityのデフォルトのパラメータ名は\ ``username``\ である。
     * - | (5)
       - パスワードを指定するテキストボックス(パスワード用のテキストボックス)を作成する。
 
-        Spring Securityのデフォルトのパラメータ名は\ ``j_password``\ である。
+        Spring Securityのデフォルトのパラメータ名は\ ``password``\ である。
 
 |
 
@@ -1000,7 +979,7 @@ JSPからログインユーザーのアカウント情報へアクセス
     * - | (1)
       - \ ``<form:form>``\ タグを使用して、ログアウト用のフォームを追加する。
 
-        \ ``action``\ 属性には、ログアウト処理用のURL(\ ``"/logout"``\ )を指定して、Logoutボタンを追加する。
+        \ ``action``\ 属性には、ログアウト処理用のURL(\ ``"/logout"``\ )を指定して、Logoutボタンを追加する。このURLはSpring Securityのデフォルトである。
 
 |
 
@@ -1021,7 +1000,7 @@ Controllerからログインユーザーのアカウント情報へアクセス
   
     package com.example.security.app.account;
 
-    import org.springframework.security.web.bind.annotation.AuthenticationPrincipal;
+    import org.springframework.security.core.annotation.AuthenticationPrincipal;
     import org.springframework.stereotype.Controller;
     import org.springframework.ui.Model;
     import org.springframework.web.bind.annotation.RequestMapping;
@@ -1142,7 +1121,7 @@ spring-security.xml
 作成したブランクプロジェクトの\ ``src/main/resources/META-INF/spring/spring-security.xml``\ は、以下のような設定となっている。
 
 .. code-block:: xml
-    :emphasize-lines: 9,12,20,22,24,26,30,33,66
+    :emphasize-lines: 9,12,14,16,18,20,24,27,60
 
     <?xml version="1.0" encoding="UTF-8"?>
     <beans xmlns="http://www.springframework.org/schema/beans"
@@ -1154,17 +1133,11 @@ spring-security.xml
 
         <!-- (1) -->
         <sec:http pattern="/resources/**" security="none"/>
-        <sec:http auto-config="true" use-expressions="true">
+        <sec:http>
             <!-- (2) -->
-            <sec:headers>
-                <sec:cache-control />
-                <sec:content-type-options />
-                <sec:hsts />
-                <sec:frame-options />
-                <sec:xss-protection />
-            </sec:headers>
+            <sec:form-login/>
             <!-- (3) -->
-            <sec:csrf />
+            <sec:logout/>
             <!-- (4) -->
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <!-- (5) -->
@@ -1227,14 +1200,12 @@ spring-security.xml
       - \ ``<sec:http>``\ タグを使用してHTTPアクセスに対して認証・認可を制御する。
 
         ブランクプロジェクトのデフォルトの設定では、静的リソース(js, css, imageファイルなど)にアクセスするためのURLを認証・認可の対象外にしている。
-    * - | (2)
-      - \ ``<sec:headers>``\ タグを使用して、セキュリティ対策用のレスポンスヘッダの付与を制御する。
-
-        使用方法については、「:ref:`SpringSecurityAppendixSecHeaders`」を参照されたい。
-    * - | (3)
-      - \ ``<sec:csrf>``\ タグを使用して、CSRF対策を制御する。
-
-        使用方法については、「:doc:`../Security/CSRF`」を参照されたい。
+    * - \ (2)
+      - \ ``<sec:form-login>``\ タグを使用して、フォーム認証を使用したログインに関する動作を制御する。
+        \ 使用方法については、「:ref:`form-login`」 を参照されたい
+    * - \ (3)
+      - \ ``<sec:logout>``\ タグ を使用して、ログアウトに関する動作を制御する。
+        \ 使用方法については、「:ref:`SpringSecurityAuthenticationLogout`」 を参照されたい。
     * - | (4)
       - \ ``<sec:access-denied-handler>``\ タグを使用して、アクセスを拒否した後の動作を制御する。
 
@@ -1251,13 +1222,12 @@ spring-security.xml
     * - | (6)
       - \ ``<sec:session-management>``\ タグを使用して、Spring Securityのセッション管理方法を制御する。
 
-        使用方法については、「:ref:`authentication(spring_security)_how_to_use_sessionmanagement`」を参照されたい。
+        使用方法については、「:ref:`SpringSecuritySessionManagementSetup`」を参照されたい。
     * - | (7)
       - \ ``<sec:authentication-manager>``\ タグを使用して、認証処理を制御する。
 
         使用方法については、「:ref:`AuthenticationProviderConfiguration`」を参照されたい。
 
-
 |
 
 spring-mvc.xml
@@ -1291,7 +1261,7 @@ Spring Securityと関係のない設定については、説明を割愛する
                     class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
                 <!-- (1) -->
                 <bean
-                    class="org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver" />
+                    class="org.springframework.security.web.method.annotation.AuthenticationPrincipalArgumentResolver" />
             </mvc:argument-resolvers>
         </mvc:annotation-driven>
 
diff --git a/source/Security/XSS.rst b/source/Security/XSS.rst
index 86344bfb21..6a365cd64f 100755
--- a/source/Security/XSS.rst
+++ b/source/Security/XSS.rst
@@ -6,41 +6,39 @@ XSS対策
  .. contents:: 目次
     :local:
 
+.. _SpringSecurityXSS:
+
 Overview
 --------------------------------------------------------------------------------
-| クロスサイトスクリプティング(以下、XSSと略す)とは、アプリケーションのセキュリティ上の不備を意図的に利用し、
-| サイト間を横断して悪意のあるスクリプトを混入させることである。
-| 例えば、ウェブアプリケーションが入力したデータ（フォーム入力など）を、適切にエスケープしないまま、HTML上に出力することにより、
 
-| 入力値に存在するタグなどの文字が、そのままHTMLとして解釈される。
-| 悪意のある値が入力された状態で、スクリプトを起動させることにより、クッキーの改ざんや、
-| クッキーの値を取得することによる、セッションハイジャックなどの攻撃が行えてしまう。
+クロスサイトスクリプティング(以下、XSSと略す)について説明する。
+クロスサイトスクリプティングとは、アプリケーションのセキュリティ上の不備を意図的に利用し、サイト間を横断して悪意のあるスクリプトを混入させることである。
+例えば、ウェブアプリケーションが入力したデータ（フォーム入力など）を、適切にエスケープしないまま、HTML上に出力することにより、入力値に存在するタグなどの文字が、そのままHTMLとして解釈される。
+悪意のある値が入力された状態で、スクリプトを起動させることにより、クッキーの改ざんや、クッキーの値を取得することによる、セッションハイジャックなどの攻撃が行えてしまう。
 
 Stored, Reflected XSS Attacks
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-XSS攻撃は、大きく分けて二つのカテゴリに分けられる。
+
+XSS攻撃は、大きく二つのカテゴリに分けられる。
 
 **Stored XSS Attacks**
 
-| Stored XSS Attacksとは、悪意のあるコードが、永久的にターゲットサーバ上(データベース等)に格納されていることである。
-| ユーザは、格納されている情報を要求するときに、サーバから悪意のあるスクリプトを取得し、実行してしまう。
+Stored XSS Attacksとは、悪意のあるコードが、永久的にターゲットサーバ上(データベース等)に格納されていることである。
+ユーザーは、格納されている情報を要求するときに、サーバから悪意のあるスクリプトを取得し、実行してしまう。
 
 **Reflected XSS Attacks**
 
-| Reflected attacksとは、リクエストの一部としてサーバに送信された悪意のあるコードが、
-| エラーメッセージ、検索結果、その他いろいろなレスポンスからリフレクションされることである。
-| ユーザが、悪意のあるリンクをクリックするか、特別に細工されたフォームを送信すると、
-| 挿入されたコードは、ユーザのブラウザに、攻撃を反映した結果を返却する。
-| その結果、信頼できるサーバからきた値のため、ブラウザは悪意のあるコードを実行してしまう。
+Reflected attacksとは、リクエストの一部としてサーバに送信された悪意のあるコードが、エラーメッセージ、検索結果、その他いろいろなレスポンスからリフレクションされることである。
+ユーザーが、悪意のあるリンクをクリックするか、特別に細工されたフォームを送信すると、挿入されたコードは、ユーザーのブラウザに、攻撃を反映した結果を返却する。
+その結果、信頼できるサーバからきた値のため、ブラウザは悪意のあるコードを実行してしまう。
 
 Stored XSS Attacks、Reflected XSS Attacksともに、出力値をエスケープすることで防ぐことができる。
 
-|
-
 How to use
---------------------------------------------------------------------------------
-| ユーザーの入力を、そのまま出力している場合、XSSの脆弱性にさらされている。
-| したがって、XSSの脆弱性に対する対抗措置として、HTMLのマークアップ言語で、特定の意味を持つ文字をエスケープする必要がある。
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+ユーザーの入力を、そのまま出力している場合、XSSの脆弱性にさらされている。
+したがって、XSSの脆弱性に対する対抗措置として、HTMLのマークアップ言語で、特定の意味を持つ文字をエスケープする必要がある。
 
 必要に応じて、3種類のエスケープを使い分けること。
 
@@ -54,33 +52,35 @@ How to use
 
 Output Escaping
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| XSSの脆弱性への対応としては、HTML特殊文字をエスケープすることが基本である。
-| エスケープが必要なHTML上の特殊文字の例と、エスケープ後の例は、以下の通りである。
+
+XSSの脆弱性への対応としては、HTML特殊文字をエスケープすることが基本である。
+エスケープが必要なHTML上の特殊文字の例と、エスケープ後の例は、以下の通りである。
 
 .. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
 .. list-table::
    :header-rows: 1
    :widths: 50 50
 
-   * - エスケープ前
-     - エスケープ後
-   * - ``&``
-     - ``&amp;``
-   * - ``<``
-     - ``&lt;``
-   * - ``>``
-     - ``&gt;``
-   * - ``"``
-     - ``&quot;``
-   * - ``'``
-     - ``&#39;``
-
-| XSSを防ぐために、文字列として出力するすべての表示項目に、\ ``f:h()``\ を使用することを必須とする。
-| 入力値を、別画面に再出力するアプリケーションを例に、説明する。|
+   * - | エスケープ前
+     - | エスケープ後
+   * - | ``&``
+     - | ``&amp;``
+   * - | ``<``
+     - | ``&lt;``
+   * - | ``>``
+     - | ``&gt;``
+   * - | ``"``
+     - | ``&quot;``
+   * - | ``'``
+     - | ``&#39;``
+
+XSSを防ぐために、文字列として出力するすべての表示項目に、\ ``f:h()``\ を使用すること。
+入力値を、別画面に再出力するアプリケーションを例に、説明する。
 
 出力値をエスケープしない脆弱性のある例
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| 本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
+
+本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
 
 **出力画面の実装**
 
@@ -103,9 +103,9 @@ Output Escaping
    * - | (1)
      - | customerFormのフィールドである、jobをエスケープせず出力している。
 
-| 入力画面のJobフィールドに、<script>タグを入力する。
+入力画面のJobフィールドに、<script>タグを入力する。
 
-.. figure:: ./images/xss_screen_input_html_tag.png
+.. figure:: ./images_XSS/xss_screen_input_html_tag.png
    :alt: input_html_tag
    :width: 80%
    :align: center
@@ -114,7 +114,7 @@ Output Escaping
 
 | <script>タグとして認識され、ダイアログボックスが表示されてしまう。
 
-.. figure:: ./images/xss_screen_no_escape_result.png
+.. figure:: ./images_XSS/xss_screen_no_escape_result.png
    :alt: no_escape_result
    :width: 60%
    :align: center
@@ -126,6 +126,7 @@ Output Escaping
 出力値をf:h()関数でエスケープする例
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
+
 **出力画面の実装**
 
 .. code-block:: jsp
@@ -147,9 +148,9 @@ Output Escaping
    * - | (1)
      - | EL式の\ ``f:h()``\ を使用することにより、エスケープして出力している。
 
-| 入力画面のJobフィールドに<script>タグを入力する。
+入力画面のJobフィールドに<script>タグを入力する。
 
-.. figure:: ./images/xss_screen_input_html_tag.png
+.. figure:: ./images_XSS/xss_screen_input_html_tag.png
    :alt: input_html_tag
    :width: 80%
    :align: center
@@ -158,7 +159,7 @@ Output Escaping
 
 | 特殊文字がエスケープされることにより、 <script>タグとして認識されず、入力値がそのまま出力される。
 
-.. figure:: ./images/xss_screen_escape_result.png
+.. figure:: ./images_XSS/xss_screen_escape_result.png
    :alt: escape_result
    :width: 60%
    :align: center
@@ -176,25 +177,19 @@ Output Escaping
     </tr>
     <!-- omitted -->
 
-\
+.. tip:: **java.util.Date継承クラスのフォーマット**
 
-    .. tip::
+    java.util.Date継承クラスをフォーマットして表示する場合は、JSTLの\ ``<fmt:formatDate>``\ を用いることを推奨する。
+    以下に、設定例を示す。
 
-        **java.util.Date継承クラスのフォーマット**
+        .. code-block:: jsp
 
-        java.util.Date継承クラスをフォーマットして表示する場合は、JSTLの\ ``<fmt:formatDate>``\ を用いることを推奨する。
-        以下に、設定例を示す。
+            <fmt:formatDate value="${form.date}" pattern="yyyyMMdd" />
 
-            .. code-block:: jsp
-
-                <fmt:formatDate value="${form.date}" pattern="yyyyMMdd" />
-
-        valueの値に前述した \ ``f:h()``\ を使用して値を設定すると、Stringになってしまい、\ ``javax.el.ELException``\ がスローされるため、そのまま\ ``${form.date}``\ を使用している。
-        しかし、yyyyMMddにフォーマットするため、XSSの心配はない。
+    valueの値に前述した \ ``f:h()``\ を使用して値を設定すると、Stringになってしまい、\ ``javax.el.ELException``\ がスローされるため、そのまま\ ``${form.date}``\ を使用している。
+    しかし、yyyyMMddにフォーマットするため、XSSの心配はない。
 
-\
-
-    .. tip::
+.. tip::
 
         **java.lang.Number継承クラス、またはjava.lang.Numberにパースできる文字列**
 
@@ -211,38 +206,42 @@ Output Escaping
 
 JavaScript Escaping
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| XSSの脆弱性への対応としては、JavaScript特殊文字をエスケープすることが基本である。
-| ユーザからの入力をもとに、JavaScriptの文字列リテラルを動的に生成する場合に、エスケープが必要となる。
 
-| エスケープが必要なJavaScriptの特殊文字の例と、エスケープ後の例は、以下のとおりである。
+XSSの脆弱性への対応としては、JavaScript特殊文字をエスケープすることが基本である。
+ユーザーからの入力をもとに、JavaScriptの文字列リテラルを動的に生成する場合に、エスケープが必要となる。
+
+エスケープが必要なJavaScriptの特殊文字の例と、エスケープ後の例は、以下のとおりである。
 
 .. tabularcolumns:: |p{0.50\linewidth}|p{0.50\linewidth}|
 .. list-table::
    :header-rows: 1
    :widths: 50 50
 
-   * - エスケープ前
-     - エスケープ後
-   * - ``'``
-     - ``\'``
-   * - ``"``
-     - ``\"``
-   * - ``\``
-     - ``\\``
-   * - ``/``
-     - ``\/``
-   * - ``<``
-     - ``\x3c``
-   * - ``>``
-     - ``\x3e``
-   * - ``0x0D(復帰)``
-     - ``\r``
-   * - ``0x0A(改行)``
-     - ``\n``
+   * - | エスケープ前
+     - | エスケープ後
+   * - | ``'``
+     - | ``\'``
+   * - | ``"``
+     - | ``\"``
+   * - | ``\``
+     - | ``\\``
+   * - | ``/``
+     - | ``\/``
+   * - | ``<``
+     - | ``\x3c``
+   * - | ``>``
+     - | ``\x3e``
+   * - | ``0x0D(復帰)``
+     - | ``\r``
+   * - | ``0x0A(改行)``
+     - | ``\n``
 
 出力値をエスケープしない脆弱性のある例
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| XSS問題が発生する例を、以下に示す。
+
+XSS問題が発生する例を、以下に示す。
+
+本例は、あくまで参考例として載せているだけなので、以下のような実装は、決して行わないこと。
 
 .. code-block:: html
 
@@ -260,13 +259,12 @@ JavaScript Escaping
 
    * - 属性名
      - 値
-   * - warnCode
-     - ``<script></script><script>alert('XSS Attack!');</script><\/script>``
+   * - | warnCode
+     - | ``<script></script><script>alert('XSS Attack!');</script><\/script>``
 
-| 上記例のように、ユーザーの入力を導出元としてコードを出力するなど、
-| JavaScriptの要素を動的に生成する場合、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
+上記例のように、ユーザーの入力を導出元としてコードを出力するなど、JavaScriptの要素を動的に生成する場合、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
 
-.. figure:: ./images/javascript_xss_screen_no_escape_result.png
+.. figure:: ./images_XSS/javascript_xss_screen_no_escape_result.png
    :alt: javascript_xss_screen_no_escape_result
    :width: 30%
    :align: center
@@ -282,19 +280,16 @@ JavaScript Escaping
         document.write(aaa);
     </script>
 
-\
+.. tip::
 
-    .. tip::
-
-        業務要件上必要でない限り、JavaScriptの要素をユーザからの入力値に依存して動的に生成する仕様は、
-        任意のスクリプトが埋め込まれてしまう可能性があるため、別の方式を検討する、または、極力避けるべきである。
+    業務要件上必要でない限り、JavaScriptの要素をユーザーからの入力値に依存して動的に生成する仕様は、任意のスクリプトが埋め込まれてしまう可能性があるため、別の方式を検討する、または、極力避けるべきである。
 
 .. _xss_how_to_use_js_function_example:
 
 出力値をf:js()関数でエスケープする例
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-| XSSを防ぐために、ユーザの入力値、が設定される値にEL式の関数、\ ``f:js()``\ の使用を推奨する。
+XSSを防ぐために、ユーザーの入力値、が設定される値にEL式の関数、\ ``f:js()``\ の使用を推奨する。
 
 使用例を、下記に示す。
 
@@ -328,16 +323,14 @@ JavaScript Escaping
 
 Event handler Escaping
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-| javascript のイベントハンドラの値をエスケープする場合、\ ``f:h()``\ や、\ ``f:js()``\ を使用するのではなく、
-| \ ``f:hjs()``\ を使用すること。\ ``${f:h(f:js())}``\ と同義である。
 
-| 理由としては、 \ ``<input type="submit" onclick="callback('xxxx');">``\ のようなイベントハンドラの値に
-| \ ``"');alert("XSS Attack");// "``\ を指定された場合、別のスクリプトを挿入できてしまうため、
-| 文字参照形式にエスケープ後、HTMLエスケープを行う必要がある。
+javascript のイベントハンドラの値をエスケープする場合、\ ``f:h()``\ や、\ ``f:js()``\ を使用するのではなく、\ ``f:hjs()``\ を使用すること。\ ``${f:h(f:js())}``\ と同義である。
+
+理由としては、 \ ``<input type="submit" onclick="callback('xxxx');">``\ のようなイベントハンドラの値に\ ``"');alert("XSS Attack");// "``\ を指定された場合、別のスクリプトを挿入できてしまうため、文字参照形式にエスケープ後、HTMLエスケープを行う必要がある。
 
 出力値をエスケープしない脆弱性のある例
 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-| XSS問題が発生する例を、以下に示す。
+XSS問題が発生する例を、以下に示す。
 
 .. code-block:: jsp
 
@@ -350,13 +343,13 @@ Event handler Escaping
 
    * - 属性名
      - 値
-   * - warnCode
+   * - | warnCode
      - | ``'); alert('XSS Attack!'); //``
        | 上記の値が設定されてしまうことで、意図せず文字列リテラルが閉じられ、XSSの脆弱性が生じる。
 
-| マウスオーバ時、XSSのダイアログボックスが表示されてしまう。
+マウスオーバ時、XSSのダイアログボックスが表示されてしまう。
 
-.. figure:: ./images/eventhandler_xss_screen_no_escape_result.png
+.. figure:: ./images_XSS/eventhandler_xss_screen_no_escape_result.png
    :alt: eventhandler_xss_screen_no_escape_result
    :width: 50%
    :align: center
@@ -393,9 +386,9 @@ Event handler Escaping
    * - | (1)
      - | EL式の\ ``f:hjs()``\ を使用することにより、エスケープして引数としている。
 
-| マウスオーバ時、XSSのダイアログは出力されない。
+マウスオーバ時、XSSのダイアログは出力されない。
 
-.. figure:: ./images/eventhandler_xss_screen_escape_result.png
+.. figure:: ./images_XSS/eventhandler_xss_screen_escape_result.png
    :alt: eventhandler_xss_screen_escape_result
    :width: 50%
    :align: center
diff --git a/source/Security/images/AccessDenied.png b/source/Security/images/AccessDenied.png
deleted file mode 100755
index d9e538e8f6..0000000000
Binary files a/source/Security/images/AccessDenied.png and /dev/null differ
diff --git a/source/Security/images/Authentication_Appendix_ScreenFlow.png b/source/Security/images/Authentication_Appendix_ScreenFlow.png
deleted file mode 100755
index e58b7d45aa..0000000000
Binary files a/source/Security/images/Authentication_Appendix_ScreenFlow.png and /dev/null differ
diff --git a/source/Security/images/Authentication_Login_overview.png b/source/Security/images/Authentication_Login_overview.png
deleted file mode 100755
index fb2b446752..0000000000
Binary files a/source/Security/images/Authentication_Login_overview.png and /dev/null differ
diff --git a/source/Security/images/Authentication_Logout_overview.png b/source/Security/images/Authentication_Logout_overview.png
deleted file mode 100755
index 6d7599cb0c..0000000000
Binary files a/source/Security/images/Authentication_Logout_overview.png and /dev/null differ
diff --git a/source/Security/images/Authentication_overview.png b/source/Security/images/Authentication_overview.png
deleted file mode 100755
index 5c76d6a243..0000000000
Binary files a/source/Security/images/Authentication_overview.png and /dev/null differ
diff --git a/source/Security/images/Authorization_Filter_overview.png b/source/Security/images/Authorization_Filter_overview.png
deleted file mode 100755
index 8409bcc8d2..0000000000
Binary files a/source/Security/images/Authorization_Filter_overview.png and /dev/null differ
diff --git a/source/Security/images/Authorization_Jsp_overview.png b/source/Security/images/Authorization_Jsp_overview.png
deleted file mode 100755
index bd945ec986..0000000000
Binary files a/source/Security/images/Authorization_Jsp_overview.png and /dev/null differ
diff --git a/source/Security/images/Authorization_Method_overview.png b/source/Security/images/Authorization_Method_overview.png
deleted file mode 100755
index 87a9f9bdfd..0000000000
Binary files a/source/Security/images/Authorization_Method_overview.png and /dev/null differ
diff --git a/source/Security/images/Authorization_overview.png b/source/Security/images/Authorization_overview.png
deleted file mode 100755
index 3747af5bc0..0000000000
Binary files a/source/Security/images/Authorization_overview.png and /dev/null differ
diff --git a/source/Security/images/NotAcceptable.png b/source/Security/images/NotAcceptable.png
deleted file mode 100755
index d6966cfc98..0000000000
Binary files a/source/Security/images/NotAcceptable.png and /dev/null differ
diff --git a/source/Security/images/PasswordEncoder_class.png b/source/Security/images/PasswordEncoder_class.png
deleted file mode 100755
index 9f7e7613d4..0000000000
Binary files a/source/Security/images/PasswordEncoder_class.png and /dev/null differ
diff --git a/source/Security/images/SecureLogin_passay.png b/source/Security/images/SecureLogin_passay.png
index eb556bd5d8..b425dcb34c 100755
Binary files a/source/Security/images/SecureLogin_passay.png and b/source/Security/images/SecureLogin_passay.png differ
diff --git a/source/Security/images/csrf_check_kind.png b/source/Security/images/csrf_check_kind.png
deleted file mode 100755
index e6fb9dd323..0000000000
Binary files a/source/Security/images/csrf_check_kind.png and /dev/null differ
diff --git a/source/Security/images/csrf_check_other_site.png b/source/Security/images/csrf_check_other_site.png
deleted file mode 100755
index 219a50913e..0000000000
Binary files a/source/Security/images/csrf_check_other_site.png and /dev/null differ
diff --git a/source/Security/images/csrf_token_value.png b/source/Security/images/csrf_token_value.png
deleted file mode 100755
index 5e5da605a9..0000000000
Binary files a/source/Security/images/csrf_token_value.png and /dev/null differ
diff --git a/source/Security/images/login_flow.png b/source/Security/images/login_flow.png
deleted file mode 100755
index a21daeb50f..0000000000
Binary files a/source/Security/images/login_flow.png and /dev/null differ
diff --git a/source/Security/images/spring_security_overview.png b/source/Security/images/spring_security_overview.png
deleted file mode 100755
index cce541c641..0000000000
Binary files a/source/Security/images/spring_security_overview.png and /dev/null differ
diff --git a/source/Security/images/standard_password_encoder_encode.png b/source/Security/images/standard_password_encoder_encode.png
deleted file mode 100755
index 094ed9df66..0000000000
Binary files a/source/Security/images/standard_password_encoder_encode.png and /dev/null differ
diff --git a/source/Security/images/standard_password_encoder_matches.png b/source/Security/images/standard_password_encoder_matches.png
deleted file mode 100755
index 5a75569b57..0000000000
Binary files a/source/Security/images/standard_password_encoder_matches.png and /dev/null differ
diff --git a/source/Security/images/xss_screen_no_escape_result.png b/source/Security/images/xss_screen_no_escape_result.png
deleted file mode 100755
index 257b310890..0000000000
Binary files a/source/Security/images/xss_screen_no_escape_result.png and /dev/null differ
diff --git a/source/Security/images_Authentication/AuthenticationArchitecture.png b/source/Security/images_Authentication/AuthenticationArchitecture.png
new file mode 100755
index 0000000000..47b4f6f0d7
Binary files /dev/null and b/source/Security/images_Authentication/AuthenticationArchitecture.png differ
diff --git a/source/Security/images_Authentication/AuthenticationDatabase.png b/source/Security/images_Authentication/AuthenticationDatabase.png
new file mode 100755
index 0000000000..5459c6037d
Binary files /dev/null and b/source/Security/images_Authentication/AuthenticationDatabase.png differ
diff --git a/source/Security/images_Authentication/AuthenticationEventNotification.png b/source/Security/images_Authentication/AuthenticationEventNotification.png
new file mode 100755
index 0000000000..33d3e1e1ef
Binary files /dev/null and b/source/Security/images_Authentication/AuthenticationEventNotification.png differ
diff --git a/source/Security/images_Authentication/AuthenticationForm.png b/source/Security/images_Authentication/AuthenticationForm.png
new file mode 100755
index 0000000000..cfa85c00d3
Binary files /dev/null and b/source/Security/images_Authentication/AuthenticationForm.png differ
diff --git a/source/Security/images_Authentication/AuthenticationLogout.png b/source/Security/images_Authentication/AuthenticationLogout.png
new file mode 100755
index 0000000000..df3f55a7f8
Binary files /dev/null and b/source/Security/images_Authentication/AuthenticationLogout.png differ
diff --git a/source/Security/images_Authentication/Authentication_Appendix_ScreenFlow.png b/source/Security/images_Authentication/Authentication_Appendix_ScreenFlow.png
new file mode 100755
index 0000000000..df620536c0
Binary files /dev/null and b/source/Security/images_Authentication/Authentication_Appendix_ScreenFlow.png differ
diff --git a/source/Security/images/Authentication_HowToExtends_LoginForm.png b/source/Security/images_Authentication/Authentication_HowToExtends_LoginForm.png
similarity index 100%
rename from source/Security/images/Authentication_HowToExtends_LoginForm.png
rename to source/Security/images_Authentication/Authentication_HowToExtends_LoginForm.png
diff --git a/source/Security/images_Authentication/materialAuthentication.pptx b/source/Security/images_Authentication/materialAuthentication.pptx
index 1f81e61181..4db73474f7 100755
Binary files a/source/Security/images_Authentication/materialAuthentication.pptx and b/source/Security/images_Authentication/materialAuthentication.pptx differ
diff --git a/source/Security/images_Authorization/AuthorizationAccessDeniedHandling.png b/source/Security/images_Authorization/AuthorizationAccessDeniedHandling.png
new file mode 100755
index 0000000000..ce3a15b0ad
Binary files /dev/null and b/source/Security/images_Authorization/AuthorizationAccessDeniedHandling.png differ
diff --git a/source/Security/images_Authorization/AuthorizationArchitecture.png b/source/Security/images_Authorization/AuthorizationArchitecture.png
new file mode 100755
index 0000000000..857f7f75e4
Binary files /dev/null and b/source/Security/images_Authorization/AuthorizationArchitecture.png differ
diff --git a/source/Security/images/Authorization_RoleHierarchy.png b/source/Security/images_Authorization/Authorization_RoleHierarchy.png
similarity index 100%
rename from source/Security/images/Authorization_RoleHierarchy.png
rename to source/Security/images_Authorization/Authorization_RoleHierarchy.png
diff --git a/source/Security/images_Authorization/materialAuthorization.pptx b/source/Security/images_Authorization/materialAuthorization.pptx
index f0d450e08d..c44a079ad5 100755
Binary files a/source/Security/images_Authorization/materialAuthorization.pptx and b/source/Security/images_Authorization/materialAuthorization.pptx differ
diff --git a/source/Security/images_CSRF/Csrf.png b/source/Security/images_CSRF/Csrf.png
new file mode 100755
index 0000000000..0815796b25
Binary files /dev/null and b/source/Security/images_CSRF/Csrf.png differ
diff --git a/source/Security/images_CSRF/materialCSRF.pptx b/source/Security/images_CSRF/materialCSRF.pptx
index 234f6a8c23..29a29f06e7 100755
Binary files a/source/Security/images_CSRF/materialCSRF.pptx and b/source/Security/images_CSRF/materialCSRF.pptx differ
diff --git a/source/Security/images_PasswordHashing/materialPasswordHashing.pptx b/source/Security/images_PasswordHashing/materialPasswordHashing.pptx
deleted file mode 100755
index f3347de475..0000000000
Binary files a/source/Security/images_PasswordHashing/materialPasswordHashing.pptx and /dev/null differ
diff --git a/source/Security/images_SecureLoginDemo/materialSecureLoginDemo.pptx b/source/Security/images_SecureLoginDemo/materialSecureLoginDemo.pptx
index 43a0963271..95d37e07e4 100755
Binary files a/source/Security/images_SecureLoginDemo/materialSecureLoginDemo.pptx and b/source/Security/images_SecureLoginDemo/materialSecureLoginDemo.pptx differ
diff --git a/source/Security/images_SessionManagement/SpringSecuritySessionManagement.pptx b/source/Security/images_SessionManagement/SpringSecuritySessionManagement.pptx
new file mode 100755
index 0000000000..e7b0b50330
Binary files /dev/null and b/source/Security/images_SessionManagement/SpringSecuritySessionManagement.pptx differ
diff --git a/source/Security/images_SessionManagement/SpringSecuritySessionManagementConcurrency.png b/source/Security/images_SessionManagement/SpringSecuritySessionManagementConcurrency.png
new file mode 100755
index 0000000000..4c3a7fd90b
Binary files /dev/null and b/source/Security/images_SessionManagement/SpringSecuritySessionManagementConcurrency.png differ
diff --git a/source/Security/images_SpringSecurity/Architecture.png b/source/Security/images_SpringSecurity/Architecture.png
new file mode 100755
index 0000000000..ab537bfe5a
Binary files /dev/null and b/source/Security/images_SpringSecurity/Architecture.png differ
diff --git a/source/Security/images_SpringSecurity/DefaultLoginPage.png b/source/Security/images_SpringSecurity/DefaultLoginPage.png
new file mode 100755
index 0000000000..81c37e063a
Binary files /dev/null and b/source/Security/images_SpringSecurity/DefaultLoginPage.png differ
diff --git a/source/Security/images_SpringSecurity/materialSpringSecurity.pptx b/source/Security/images_SpringSecurity/materialSpringSecurity.pptx
index 7c247c9752..6fc89b92f6 100755
Binary files a/source/Security/images_SpringSecurity/materialSpringSecurity.pptx and b/source/Security/images_SpringSecurity/materialSpringSecurity.pptx differ
diff --git a/source/Security/images/eventhandler_xss_screen_escape_result.png b/source/Security/images_XSS/eventhandler_xss_screen_escape_result.png
similarity index 100%
rename from source/Security/images/eventhandler_xss_screen_escape_result.png
rename to source/Security/images_XSS/eventhandler_xss_screen_escape_result.png
diff --git a/source/Security/images/eventhandler_xss_screen_no_escape_result.png b/source/Security/images_XSS/eventhandler_xss_screen_no_escape_result.png
similarity index 100%
rename from source/Security/images/eventhandler_xss_screen_no_escape_result.png
rename to source/Security/images_XSS/eventhandler_xss_screen_no_escape_result.png
diff --git a/source/Security/images/javascript_xss_screen_no_escape_result.png b/source/Security/images_XSS/javascript_xss_screen_no_escape_result.png
similarity index 100%
rename from source/Security/images/javascript_xss_screen_no_escape_result.png
rename to source/Security/images_XSS/javascript_xss_screen_no_escape_result.png
diff --git a/source/Security/images_XSS/materialXSS.pptx b/source/Security/images_XSS/materialAppendix.pptx
similarity index 100%
rename from source/Security/images_XSS/materialXSS.pptx
rename to source/Security/images_XSS/materialAppendix.pptx
diff --git a/source/Security/images/xss_screen_escape_result.png b/source/Security/images_XSS/xss_screen_escape_result.png
similarity index 100%
rename from source/Security/images/xss_screen_escape_result.png
rename to source/Security/images_XSS/xss_screen_escape_result.png
diff --git a/source/Security/images/xss_screen_input_html_tag.png b/source/Security/images_XSS/xss_screen_input_html_tag.png
similarity index 100%
rename from source/Security/images/xss_screen_input_html_tag.png
rename to source/Security/images_XSS/xss_screen_input_html_tag.png
diff --git a/source/Security/images_XSS/xss_screen_no_escape_result.png b/source/Security/images_XSS/xss_screen_no_escape_result.png
new file mode 100755
index 0000000000..cc10ee1f09
Binary files /dev/null and b/source/Security/images_XSS/xss_screen_no_escape_result.png differ
diff --git a/source/Security/index.rst b/source/Security/index.rst
index 6d06631b8e..9d56b847fd 100755
--- a/source/Security/index.rst
+++ b/source/Security/index.rst
@@ -7,10 +7,11 @@ TERASOLUNA Server Framework for Java (5.x)によるセキュリティ対策
    SpringSecurity
    Tutorial
    Authentication
-   PasswordHashing
    Authorization
-   XSS
+   SessionManagement
    CSRF
+   LinkageWithBrowser
+   XSS
    Encryption
    SecureLoginDemo
 
diff --git a/source/TutorialREST/index.rst b/source/TutorialREST/index.rst
index 0092256071..8bd1c40c90 100755
--- a/source/TutorialREST/index.rst
+++ b/source/TutorialREST/index.rst
@@ -659,12 +659,14 @@ REST API用のSpring Securityの定義追加
         <!-- (1) -->
         <sec:http
             pattern="/api/v1/**"
-            auto-config="true"
             create-session="stateless">
+            <sec:http-basic />
             <sec:csrf disabled="true"/>
         </sec:http>
 
-        <sec:http auto-config="true">
+        <sec:http>
+            <sec:form-login />
+            <sec:logout />
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
             <sec:session-management />
diff --git a/source/TutorialTodo/index.rst b/source/TutorialTodo/index.rst
index f56f7cc316..e748334d4a 100755
--- a/source/TutorialTodo/index.rst
+++ b/source/TutorialTodo/index.rst
@@ -4201,7 +4201,9 @@ spring-security.xml
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
         <sec:http pattern="/resources/**" security="none"/>
-        <sec:http auto-config="true">
+        <sec:http>
+            <sec:form-login />
+            <sec:logout />
             <sec:access-denied-handler ref="accessDeniedHandler"/>
             <sec:custom-filter ref="userIdMDCPutFilter" after="ANONYMOUS_FILTER"/>
             <sec:session-management />
diff --git a/source_en/ArchitectureInDetail/DataAccessJpa.rst b/source_en/ArchitectureInDetail/DataAccessJpa.rst
index f1aa59e0f9..a80032e639 100755
--- a/source_en/ArchitectureInDetail/DataAccessJpa.rst
+++ b/source_en/ArchitectureInDetail/DataAccessJpa.rst
@@ -4288,7 +4288,7 @@ The method to add common conditions for JPQL which is executed at the time of ca
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'") // (1)
+    @Where(clause = "is_logical_delete = false") // (1)
     public class Order implements Serializable {
         // ...
         @Id
@@ -4324,6 +4324,60 @@ The method to add common conditions for JPQL which is executed at the time of ca
     * - | (2)
       - | The condition specified with ``@Where`` annotation is added.
 
+ .. note:: **About Dialect extension**
+
+    If SQL specific keywords are specified in ``@Where`` annotation, Hibernate may recognize SQL specific keywords as a common string value and as a result expected SQL may not get generated.
+    It is necessary to extend the ``Dialect`` in case of SQL specific keywords are used in ``@Where`` annotation.
+
+- Extending ``Dialect`` to register standard keywords such as ``true``, ``false`` and ``unknown``.
+
+ .. code-block:: java
+
+    package com.example.infra.hibernate;
+    
+    public class ExtendedPostgreSQL9Dialect extends PostgreSQL9Dialect { // (1)
+        public ExtendedPostgreSQL9Dialect() {
+            super();
+            // (2)
+            registerKeyword("true");
+            registerKeyword("false");
+            registerKeyword("unknown");
+        }
+    }
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :widths: 10 90
+    :header-rows: 1
+    
+    * - Sr. No.
+      - Description
+    * - | (1)
+      - | By default Hiberanate-4.3 may not correctly process some of the SQL keywords. The BOOLEAN type keywords such as ``true``, ``false`` and ``unknown`` are not registered in PostgreSQL dialect ``org.hibernate.dialect.PostgreSQL9Dialect``. Therefore such keywords are recognized as a common string value and as a result incorrect SQL may get generated.
+        | It is necessary to extend ``org.hibernate.dialect.Dialect`` dialect in order to register such keywords.
+    * - | (2)
+      - | Register the SQL keywords that are likely to be used in ``@Where`` annotation.
+
+- Settings of extended Dialect
+
+ .. code-block:: xml
+
+    <bean id="jpaVendorAdapter"
+        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
+        <property name="databasePlatform" value="com.example.infra.hibernate.ExtendedPostgreSQL9Dialect"/> // (3)
+        // ...
+    </bean>
+
+ .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+ .. list-table::
+    :widths: 10 90
+    :header-rows: 1
+    
+    * - Sr. No.
+      - Description
+    * - | (3)
+      - | The extended ``Dialect`` is set as the value of ``databasePlatform`` property in ``JpaVendorAdapter`` of ``EntityManager``.
+      
  .. note:: **Class that can be specified**
 
     ``@Where`` annotation is valid only in the class with ``@Entity``.
@@ -4345,7 +4399,7 @@ The method for adding common conditions for JPQL is shown below. JPQL is used fo
 
     @Entity
     @Table(name = "t_order")
-    @Where(clause = "is_logical_delete = 'false'")
+    @Where(clause = "is_logical_delete = false")
     public class Order implements Serializable {
         // ...
         @Id
@@ -4353,7 +4407,7 @@ The method for adding common conditions for JPQL is shown below. JPQL is used fo
 
         @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, orphanRemoval = true)
         @OrderBy
-        @Where(clause="is_logical_delete = 'false'") // (1)
+        @Where(clause="is_logical_delete = false") // (1)
         private Set<OrderItem> orderItems;
         // ...
 
diff --git a/source_en/ArchitectureInDetail/MessageManagement.rst b/source_en/ArchitectureInDetail/MessageManagement.rst
index c876b76bef..0fd7df6956 100755
--- a/source_en/ArchitectureInDetail/MessageManagement.rst
+++ b/source_en/ArchitectureInDetail/MessageManagement.rst
@@ -1453,11 +1453,11 @@ Apart from \ ``ResultMessages``\  object, \ ``<t:messagesPanel>``\  tag can also
                 <legend>Login Form</legend>
                 <div>
                     <label for="username">Username: </label><input
-                        type="text" id="username" name="j_username">
+                        type="text" id="username" name="username">
                 </div>
                 <div>
                     <label for="username">Password:</label><input
-                        type="password" id="password" name="j_password">
+                        type="password" id="password" name="password">
                 </div>
                 <div>
                     <input type="submit" value="Login" />
diff --git a/source_en/Overview/FrameworkStack.rst b/source_en/Overview/FrameworkStack.rst
index 5b938ee8e5..8106305dd6 100755
--- a/source_en/Overview/FrameworkStack.rst
+++ b/source_en/Overview/FrameworkStack.rst
@@ -29,20 +29,20 @@ DI Container
 Spring Framework is used as DI Container.
 
 
-* `Spring Framework 4.1 <http://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/html/beans.html>`_
+* `Spring Framework 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/beans.html>`_
 
 MVC Framework
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 Spring MVC is used as Web MVC Framework.
 
-* `Spring MVC 4.1 <http://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/html/mvc.html>`_
+* `Spring MVC 4.2 <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html>`_
 
 O/R Mapper
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 This guideline assumes the use of **any one of the below**.
 
-* `MyBatis 3.2 <http://mybatis.github.io/mybatis-3/>`_
+* `MyBatis 3.3 <http://mybatis.github.io/mybatis-3/>`_
 
   * \ `MyBatis-Spring <http://mybatis.github.io/spring/>`_  is used as library for coordinating with Spring Framework.
 
@@ -74,7 +74,7 @@ Security
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 Spring Security is used as the framework for Authentication and Authorization.
 
-* `Spring Security 3.2 <http://projects.spring.io/spring-security/>`_
+* `Spring Security 4.0 <http://projects.spring.io/spring-security/>`_
 
 .. tip::
 
@@ -93,9 +93,9 @@ Validation
 
 * For Single item input check, \ `BeanValidation 1.1 <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\  is used.
 
-  * For implementation, \ `Hibernate Validator 5.1 <http://docs.jboss.org/hibernate/validator/5.1/reference/en-US/html/>`_\  is used.
+  * For implementation, \ `Hibernate Validator 5.2 <http://docs.jboss.org/hibernate/validator/5.2/reference/en-US/html/>`_\  is used.
 
-* For correlated items check, \ `BeanValidation <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\  or \ `Spring Validation <http://docs.spring.io/spring/docs/4.1.7.RELEASE/spring-framework-reference/html/validation.html>`_  is used.
+* For correlated items check, \ `BeanValidation <http://download.oracle.com/otn-pub/jcp/bean_validation-1_1-fr-eval-spec/bean-validation-specification.pdf>`_\  or \ `Spring Validation <http://docs.spring.io/spring/docs/4.2.4.RELEASE/spring-framework-reference/html/validation.html>`_  is used.
 
   * Refer to \ :doc:`../ArchitectureInDetail/Validation`\  for determining the proper use. 
 
@@ -117,7 +117,7 @@ Common Library
 OSS Versions
 --------------------------------------------------------------------------------
 
-List of OSS being used in version 5.0.1.RELEASE.
+List of OSS being used in version 5.1.0.RELEASE.
 
 .. tip::
 
@@ -133,7 +133,7 @@ List of OSS being used in version 5.0.1.RELEASE.
     dependencies resolved and 
     OSS version to be used in the TERASOLUNA Server Framework for Java (5.x) is following the rule of Spring IO platform definition.
 
-    Furthermore, Spring IO platform version is `1.1.3.RELEASE <http://docs.spring.io/platform/docs/1.1.3.RELEASE/reference/htmlsingle/>`_  specified in version 5.0.1.RELEASE.
+    Furthermore, Spring IO platform version is `2.0.1.RELEASE <http://docs.spring.io/platform/docs/2.0.1.RELEASE/reference/htmlsingle/>`_  specified in version 5.1.0.RELEASE.
 
 .. tabularcolumns:: |p{0.15\linewidth}|p{0.27\linewidth}|p{0.25\linewidth}|p{0.15\linewidth}|p{0.05\linewidth}|p{0.08\linewidth}|
 .. list-table::
@@ -150,121 +150,121 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Spring
       - org.springframework
       - spring-aop
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-aspects
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-beans
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-context
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-context-support
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-core
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-expression
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-jdbc
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-orm
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-tx
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-web
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework
       - spring-webmvc
-      - 4.1.7.RELEASE
+      - 4.2.4.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.data
       - spring-data-commons
-      - 1.9.3.RELEASE
+      - 1.11.2.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.security
       - spring-security-acl
-      - 3.2.7.RELEASE
+      - 4.0.3.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.security
       - spring-security-config
-      - 3.2.7.RELEASE
+      - 4.0.3.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.security
       - spring-security-core
-      - 3.2.7.RELEASE
+      - 4.0.3.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.security
       - spring-security-taglibs
-      - 3.2.7.RELEASE
+      - 4.0.3.RELEASE
       - \*
       -
     * - Spring
       - org.springframework.security
       - spring-security-web
-      - 3.2.7.RELEASE
+      - 4.0.3.RELEASE
       - \*
       -
     * - MyBatis3
       - org.mybatis
       - mybatis
-      - 3.2.8
+      - 3.3.0
       -
       - \*1
     * - MyBatis3
       - org.mybatis
       - mybatis-spring
-      - 1.2.2
+      - 1.2.3
       -
       - \*1
     * - JPA(Hibernate)
@@ -282,13 +282,13 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - JPA(Hibernate)
       - org.hibernate
       - hibernate-core
-      - 4.3.10.Final
+      - 4.3.11.Final
       - \*
       - \*2
     * - JPA(Hibernate)
       - org.hibernate
       - hibernate-entitymanager
-      - 4.3.10.Final
+      - 4.3.11.Final
       - \*
       - \*2
     * - JPA(Hibernate)
@@ -330,7 +330,7 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - JPA(Hibernate)
       - org.springframework.data
       - spring-data-jpa
-      - 1.7.3.RELEASE
+      - 1.9.2.RELEASE
       - \*
       - \*2
     * - DI
@@ -348,13 +348,13 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - AOP
       - org.aspectj
       - aspectjrt
-      - 1.8.6
+      - 1.8.7
       - \*
       -
     * - AOP
       - org.aspectj
       - aspectjweaver
-      - 1.8.6
+      - 1.8.7
       - \*
       -
     * - Log output
@@ -378,37 +378,37 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Log output
       - org.slf4j
       - jcl-over-slf4j
-      - 1.7.12
+      - 1.7.13
       - \*
       -
     * - Log output
       - org.slf4j
       - slf4j-api
-      - 1.7.12
+      - 1.7.13
       - \*
       -
     * - JSON
       - com.fasterxml.jackson.core
       - jackson-annotations
-      - 2.4.6
+      - 2.6.4
       - \*
       -
     * - JSON
       - com.fasterxml.jackson.core
       - jackson-core
-      - 2.4.6
+      - 2.6.4
       - \*
       -
     * - JSON
       - com.fasterxml.jackson.core
       - jackson-databind
-      - 2.4.6
+      - 2.6.4
       - \*
       -
     * - JSON
       - com.fasterxml.jackson.datatype
       - jackson-datatype-joda
-      - 2.4.6
+      - 2.6.4
       - \*
       -
     * - Input check
@@ -420,19 +420,19 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Input check
       - org.hibernate
       - hibernate-validator
-      - 5.1.3.Final
+      - 5.2.2.Final
       - \*
       -
     * - Input check
       - org.jboss.logging
       - jboss-logging
-      - 3.1.3.GA
+      - 3.3.0.Final
       - \*
       - \*4
     * - Input check
       - com.fasterxml
       - classmate
-      - 1.0.0
+      - 1.1.0
       - \*
       - \*4
     * - Bean conversion
@@ -462,7 +462,7 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Date operation
       - joda-time
       - joda-time
-      - 2.5
+      - 2.8.2
       - \*
       -
     * - Date operation
@@ -486,13 +486,13 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Connection pool
       - org.apache.commons
       - commons-dbcp2
-      - 2.0.1
+      - 2.1.1
       - \*
       - \*3
     * - Connection pool
       - org.apache.commons
       - commons-pool2
-      - 2.2
+      - 2.4.2
       - \*
       - \*3
     * - Tiles
@@ -564,7 +564,7 @@ List of OSS being used in version 5.0.1.RELEASE.
     * - Utility
       - commons-collections
       - commons-collections
-      - 3.2.1
+      - 3.2.2
       - \*
       - \*3
     * - Utility
