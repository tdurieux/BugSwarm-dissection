diff --git a/README.md b/README.md
index e6e2d9b6..c7d09488 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-<img src="http://www.orbit.cloud/img/orbit-logo-black.png" alt="Orbit Logo" width="200px"/>
+<img src="https://www.orbit.cloud/img/orbit-logo-black.png" alt="Orbit Logo" width="200px"/>
 
 [![Release](https://img.shields.io/github/release/orbit/orbit.svg)](https://github.com/orbit/orbit/releases)
 [![Maven Central](https://img.shields.io/maven-central/v/cloud.orbit/orbit-runtime.svg)](https://repo1.maven.org/maven2/cloud/orbit/)
@@ -9,7 +9,7 @@
 
 Orbit is a framework to write distributed systems using virtual actors on the JVM. It allows developers to write highly distributed and scalable applications while greatly simplifying clustering, discovery, networking, state management, actor lifetime and more.
 
-<a href="https://github.com/orbit/orbit/wiki/Duke's-Choice-Award-2016"><img src="http://www.orbit.cloud/img/dca/dca_logo.png" alt="Duke's Choice Award Logo" width="200px" /></a><br />
+<a href="https://github.com/orbit/orbit/wiki/Duke's-Choice-Award-2016"><img src="https://www.orbit.cloud/img/dca/dca_logo.png" alt="Duke's Choice Award Logo" width="200px" /></a><br />
 Orbit received the 2016 Duke's Choice Award for Open Source, read [here](https://github.com/orbit/orbit/wiki/Duke's-Choice-Award-2016) for more information. 
 
 Full Documentation
diff --git a/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultResponseCachingExtension.java b/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultResponseCachingExtension.java
index 961a16e7..e4f83160 100644
--- a/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultResponseCachingExtension.java
+++ b/actors/runtime/src/main/java/cloud/orbit/actors/runtime/DefaultResponseCachingExtension.java
@@ -205,8 +205,8 @@ private String generateParameterHash(Object[] params)
         try
         {
             final MessageDigest md = messageDigest.newDigest();
-            md.digest(messageSerializer.serializeMessage(runtime, new Message().withPayload(params)));
-            return String.format("%032X", new BigInteger(1, md.digest()));
+            final byte[] hashValue = md.digest(messageSerializer.serializeMessage(runtime, new Message().withPayload(params)));
+            return String.format("%032X", new BigInteger(1, hashValue));
         }
         catch (Exception e)
         {
diff --git a/commons/src/main/java/cloud/orbit/concurrent/Task.java b/commons/src/main/java/cloud/orbit/concurrent/Task.java
index 7955c22a..4a85f26c 100644
--- a/commons/src/main/java/cloud/orbit/concurrent/Task.java
+++ b/commons/src/main/java/cloud/orbit/concurrent/Task.java
@@ -64,8 +64,6 @@
  */
 public class Task<T> extends CompletableFuture<T>
 {
-    private static final Void NIL = null;
-
     private static Executor commonPool = ExecutorUtils.newScalingThreadPool(100);
     private static ScheduledExecutorService schedulerExecutor = new ScheduledThreadPoolExecutor(10, runnable -> {
         Thread thread = Executors.defaultThreadFactory().newThread(runnable);
@@ -74,6 +72,23 @@
         return thread;
     });
 
+    private final static Task<Void> COMPLETED_TASK = new Task<Void>() {
+        @Override
+        public void obtrudeValue(final Void value)
+        {
+            throw new UnsupportedOperationException("obtrudeValue not supported");
+        }
+
+        @Override
+        public void obtrudeException(final Throwable ex)
+        {
+            throw new UnsupportedOperationException("obtrudeException not supported");
+        }
+    };
+    static {
+        COMPLETED_TASK.internalComplete(null);
+    }
+
     // TODO: make all callbacks async by default and using the current executor
     // what "current executor' means will have to be defined.
     // the idea is to use a framework supplied executor to serve
@@ -379,9 +394,7 @@ public void run()
 
     public static Task<Void> done()
     {
-        final Task<Void> task = new Task<>();
-        task.internalComplete(NIL);
-        return task;
+        return COMPLETED_TASK;
     }
 
     @Override
