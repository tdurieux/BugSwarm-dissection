diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8296eca13f..78c3bf1feb 100755
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -4,10 +4,16 @@
 
 ### jannovar-cli
 
+* CLI changes such that one VCF input and one VCF output path can be used only
+* Replacing apache commons-cli with argparse4j for a more modern and usable CLI
 * Consistently writing out HUGO symbols for gene names, using the `hgnc_complete_set.txt` information downloaded when building the annotation DB
 * Upgrading from ENSEMBL-74 to ENSEMBL-75 for annotation database files
 * Removing support for old Jannovar-style annotations (#241)
 
+### jannovar-htsjdk
+
+* Properly annotating Mendelian inheritance for intergenic variants
+
 ### jannovar-core
 
 * downloading `hgnc_complete_set.txt` together with data sets, `TranscriptModel` objects now consistently contain additional IDs
diff --git a/jannovar-cli/pom.xml b/jannovar-cli/pom.xml
index a2c55c832f..05890de289 100755
--- a/jannovar-cli/pom.xml
+++ b/jannovar-cli/pom.xml
@@ -1,189 +1,195 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
 
-	<artifactId>jannovar-cli</artifactId>
-	<packaging>jar</packaging>
+    <artifactId>jannovar-cli</artifactId>
+    <packaging>jar</packaging>
 
-	<name>${project.groupId}:${project.artifactId}</name>
-	<description>jannovar-cli is the command line interface for Jannovar</description>
-	<url>http://charite.github.io/jannovar/</url>
+    <name>${project.groupId}:${project.artifactId}</name>
+    <description>jannovar-cli is the command line interface for Jannovar</description>
+    <url>http://charite.github.io/jannovar/</url>
 
-	<parent>
-		<groupId>de.charite.compbio</groupId>
-		<artifactId>Jannovar</artifactId>
-		<version>0.18-SNAPSHOT</version>
-	</parent>
+    <parent>
+        <groupId>de.charite.compbio</groupId>
+        <artifactId>Jannovar</artifactId>
+        <version>0.18-SNAPSHOT</version>
+    </parent>
 
-	<properties>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-	</properties>
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
 
-	<dependencies>
-		<!-- Simple logging for console -->
-		<dependency>
-			<groupId>org.slf4j</groupId>
-			<artifactId>slf4j-simple</artifactId>
-			<version>1.7.12</version>
-		</dependency>
-		<!--commons-cli used for parsing the command line -->
-		<dependency>
-			<groupId>commons-cli</groupId>
-			<artifactId>commons-cli</artifactId>
-			<version>1.3.1</version>
-		</dependency>
-		<dependency>
-			<groupId>com.github.samtools</groupId>
-			<artifactId>htsjdk</artifactId>
-			<version>${htsjdk.version}</version>
-			<exclusions>
-				<exclusion>
-					<groupId>org.tukaani</groupId>
-					<artifactId>xz</artifactId>
-				</exclusion>
-			</exclusions>
-		</dependency>
-		<dependency>
-			<groupId>com.google.guava</groupId>
-			<artifactId>guava</artifactId>
-			<version>19.0</version>
-		</dependency>
-		<dependency>
-			<groupId>org.ini4j</groupId>
-			<artifactId>ini4j</artifactId>
-			<version>0.5.1</version>
-		</dependency>
+    <dependencies>
+        <!-- Simple logging for console -->
+        <dependency>
+            <groupId>org.slf4j</groupId>
+            <artifactId>slf4j-simple</artifactId>
+            <version>1.7.12</version>
+        </dependency>
+
+        <!-- argparse4j used for parsing the command line -->
+        <dependency>
+            <groupId>net.sourceforge.argparse4j</groupId>
+            <artifactId>argparse4j</artifactId>
+            <version>0.7.0</version>
+        </dependency>
+
+        <dependency>
+            <groupId>com.github.samtools</groupId>
+            <artifactId>htsjdk</artifactId>
+            <version>${htsjdk.version}</version>
+            <exclusions>
+                <exclusion>
+                    <groupId>org.tukaani</groupId>
+                    <artifactId>xz</artifactId>
+                </exclusion>
+            </exclusions>
+        </dependency>
+        <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>19.0</version>
+        </dependency>
+        <dependency>
+            <groupId>org.ini4j</groupId>
+            <artifactId>ini4j</artifactId>
+            <version>0.5.1</version>
+        </dependency>
         <!-- Jannovar modules -->
-		<dependency>
-			<groupId>de.charite.compbio</groupId>
-			<artifactId>jannovar-core</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>de.charite.compbio</groupId>
-			<artifactId>jannovar-htsjdk</artifactId>
-			<version>${project.version}</version>
-		</dependency>
+        <dependency>
+            <groupId>de.charite.compbio</groupId>
+            <artifactId>jannovar-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>de.charite.compbio</groupId>
+            <artifactId>jannovar-htsjdk</artifactId>
+            <version>${project.version}</version>
+        </dependency>
         <dependency>
             <groupId>de.charite.compbio</groupId>
             <artifactId>jannovar-vardbs</artifactId>
             <version>${project.version}</version>
         </dependency>
-		<!-- Logging -->
-		<dependency>
-			<groupId>org.apache.logging.log4j</groupId>
-			<artifactId>log4j-api</artifactId>
-			<version>${log4j.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>org.apache.logging.log4j</groupId>
-			<artifactId>log4j-core</artifactId>
-			<version>${log4j.version}</version>
-		</dependency>
-	</dependencies>
+        <!-- Logging -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+            <version>${log4j.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>${log4j.version}</version>
+        </dependency>
+    </dependencies>
 
-	<build>
-		<resources>
-			<resource>
-				<directory>src/main/resources</directory>
-				<!--Use filtering so that maven will replace placeholders with values 
-					from the pom e.g. ${project.version} -->
-				<filtering>true</filtering>
-			</resource>
-		</resources>
-		<plugins>
-			<!-- Make an executable jar and specify the main class and classpath -->
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-jar-plugin</artifactId>
-				<version>2.5</version>
-				<configuration>
-					<archive>
-						<manifest>
-							<addClasspath>true</addClasspath>
-							<classpathPrefix>lib/</classpathPrefix>
-							<!-- set useUniqueVersions=false in order that the classpath has the 
-								SNAPSHOT instead of the build number prefixed to the dependency -->
-							<useUniqueVersions>false</useUniqueVersions>
-							<mainClass>de.charite.compbio.jannovar.Jannovar</mainClass>
-						</manifest>
-					</archive>
-					<compilerArgument>-Xlint:all</compilerArgument>
-					<showWarnings>true</showWarnings>
-					<showDeprecation>true</showDeprecation>
-				</configuration>
-			</plugin>
-			<!-- More JAR building -->
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-shade-plugin</artifactId>
-				<version>2.2</version>
-				<executions>
-					<execution>
-						<phase>package</phase>
-						<goals>
-							<goal>shade</goal>
-						</goals>
-						<configuration>
-							<transformers>
-								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
-									<mainClass>de.charite.compbio.jannovar.Jannovar</mainClass>
-								</transformer>
-							</transformers>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<!-- Specify the resources which need to be made accessible to the user -->
-			<plugin>
-				<artifactId>maven-resources-plugin</artifactId>
-				<version>2.6</version>
-				<executions>
-					<execution>
-						<id>copy-resources</id>
-						<phase>validate</phase>
-						<goals>
-							<goal>copy-resources</goal>
-						</goals>
-						<configuration>
-							<outputDirectory>${project.build.directory}/resources</outputDirectory>
-							<resources>
-								<resource>
-									<directory>src/resources</directory>
-									<!--Use filtering so that maven will replace placeholders with values 
-										from the pom e.g. ${project.version} -->
-									<filtering>true</filtering>
-									<includes>
-										<include>application.properties</include>
-										<include>example.settings</include>
-										<include>test.settings</include>
-										<include>log4j2.xml</include>
-									</includes>
-								</resource>
-							</resources>
-						</configuration>
-					</execution>
-				</executions>
-			</plugin>
-			<!--This plugin assembles the various elements together into a redistributable 
-				zip/tar.gz file -->
-			<plugin>
-				<artifactId>maven-assembly-plugin</artifactId>
-				<version>2.4</version>
-				<configuration>
-					<descriptors>
-						<descriptor>src/assembly/dep.xml</descriptor>
-					</descriptors>
-				</configuration>
-				<executions>
-					<execution>
-						<id>make-assembly</id> <!-- this is used for inheritance merges -->
-						<phase>package</phase> <!-- bind to the packaging phase -->
-						<goals>
-							<goal>single</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-		</plugins>
-	</build>
+    <build>
+        <resources>
+            <resource>
+                <directory>src/main/resources</directory>
+                <!--Use filtering so that maven will replace placeholders 
+                    with values from the pom e.g. ${project.version} -->
+                <filtering>true</filtering>
+            </resource>
+        </resources>
+        <plugins>
+            <!-- Make an executable jar and specify the main class and classpath -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-jar-plugin</artifactId>
+                <version>2.5</version>
+                <configuration>
+                    <archive>
+                        <manifest>
+                            <addClasspath>true</addClasspath>
+                            <classpathPrefix>lib/</classpathPrefix>
+                            <!-- set useUniqueVersions=false in order that 
+                                the classpath has the SNAPSHOT instead of the build number prefixed to the 
+                                dependency -->
+                            <useUniqueVersions>false</useUniqueVersions>
+                            <mainClass>de.charite.compbio.jannovar.Jannovar</mainClass>
+                        </manifest>
+                    </archive>
+                    <compilerArgument>-Xlint:all</compilerArgument>
+                    <showWarnings>true</showWarnings>
+                    <showDeprecation>true</showDeprecation>
+                </configuration>
+            </plugin>
+            <!-- More JAR building -->
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>2.2</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <transformers>
+                                <transformer
+                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+                                    <mainClass>de.charite.compbio.jannovar.Jannovar</mainClass>
+                                </transformer>
+                            </transformers>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <!-- Specify the resources which need to be made accessible to 
+                the user -->
+            <plugin>
+                <artifactId>maven-resources-plugin</artifactId>
+                <version>2.6</version>
+                <executions>
+                    <execution>
+                        <id>copy-resources</id>
+                        <phase>validate</phase>
+                        <goals>
+                            <goal>copy-resources</goal>
+                        </goals>
+                        <configuration>
+                            <outputDirectory>${project.build.directory}/resources</outputDirectory>
+                            <resources>
+                                <resource>
+                                    <directory>src/resources</directory>
+                                    <!--Use filtering so that maven will 
+                                        replace placeholders with values from the pom e.g. ${project.version} -->
+                                    <filtering>true</filtering>
+                                    <includes>
+                                        <include>application.properties</include>
+                                        <include>example.settings</include>
+                                        <include>test.settings</include>
+                                        <include>log4j2.xml</include>
+                                    </includes>
+                                </resource>
+                            </resources>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <!--This plugin assembles the various elements together into 
+                a redistributable zip/tar.gz file -->
+            <plugin>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>2.4</version>
+                <configuration>
+                    <descriptors>
+                        <descriptor>src/assembly/dep.xml</descriptor>
+                    </descriptors>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
+                        <phase>package</phase> <!-- bind to the packaging phase -->
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
 </project>
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/Jannovar.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/Jannovar.java
index f817fd6c7a..31fc4b46c4 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/Jannovar.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/Jannovar.java
@@ -1,112 +1,59 @@
 package de.charite.compbio.jannovar;
 
-/** Command line functions from apache */
-import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
-import de.charite.compbio.jannovar.cmd.HelpRequestedException;
+import java.util.function.BiFunction;
+
+import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
 import de.charite.compbio.jannovar.cmd.JannovarCommand;
-import de.charite.compbio.jannovar.cmd.annotate_pos.AnnotatePositionCommand;
-import de.charite.compbio.jannovar.cmd.annotate_vcf.AnnotateVCFCommand;
-import de.charite.compbio.jannovar.cmd.db_list.DatabaseListCommand;
-import de.charite.compbio.jannovar.cmd.download.DownloadCommand;
-import de.charite.compbio.jannovar.reference.TranscriptModel;
+import de.charite.compbio.jannovar.cmd.annotate_pos.JannovarAnnotatePosOptions;
+import de.charite.compbio.jannovar.cmd.annotate_vcf.JannovarAnnotateVCFOptions;
+import de.charite.compbio.jannovar.cmd.db_list.JannovarDBListOptions;
+import de.charite.compbio.jannovar.cmd.download.JannovarDownloadOptions;
+import net.sourceforge.argparse4j.ArgumentParsers;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.ArgumentParserException;
+import net.sourceforge.argparse4j.inf.Namespace;
+import net.sourceforge.argparse4j.inf.Subparsers;
 
 /**
- * This is the driver class for a program called Jannovar. It has two purposes
- * <OL>
- * <LI>Take the UCSC files knownGene.txt, kgXref.txt, knownGeneMrna.txt, and knownToLocusLink.txt, and to create
- * corresponding {@link TranscriptModel} objects and to serialize them. The resulting serialized file can be used both
- * by this program itself (see next item) or by the main Exomizer program to annotated VCF file.
- * <LI>Using the serialized file of {@link TranscriptModel} objects (see above item) annotate a VCF file using
- * annovar-type program logic. Note that this functionality is also used by the main Exomizer program and thus this
- * program can be used as a stand-alone annotator ("Jannovar") or as a way of testing the code for the Exomizer.
- * </OL>
- * <P>
- * To run the "Jannovar" executable:
- * <P>
- * {@code java -Xms1G -Xmx1G -jar Jannovar.jar -V xyz.vcf -D $SERIAL}
- * <P>
- * This will annotate a VCF file. The results of de.charite.compbio.jannovar annotation are shown in the form
- *
- * <PRE>
- * Annotation {original VCF line}
- * </PRE>
- * <P>
- * Just a reminder, to set up annovar to do this, use the following commands.
- *
- * <PRE>
- *   perl annotate_variation.pl --downdb knownGene --buildver hg19 humandb/
- * </PRE>
- *
- * then, to annotate a VCF file called BLA.vcf, we first need to convert it to Annovar input format and run the main
- * annovar program as follows.
- *
- * <PRE>
- * $ perl convert2annovar.pl BLA.vcf -format vcf4 &gt; BLA.av
- * $ perl annotate_variation.pl -buildver hg19 --geneanno BLA.av --dbtype knowngene humandb/
- * </PRE>
- *
- * This will create two files with all variants and a special file with exonic variants.
- * <p>
- * There are three ways of using this program.
- * <ol>
- * <li>To create a serialized version of the UCSC gene definition data. In this case, the command-line flag <b>- S</b>
- * is provide as is the path to the four UCSC files. Then, {@code anno.serialize()} is true and a file <b>ucsc.ser</b>
- * is created.
- * <li>To deserialize the serialized data (<b>ucsc.ser</b>). In this case, the flag <b>- D</b> must be used.
- * <li>To simply read in the UCSC data without creating a serialized file.
- * </ol>
- * Whichever of the three versions is chosen, the user may additionally pass the path to a VCF file using the <b>-v</b>
- * flag. If so, then this file will be annotated using the UCSC data, and a new version of the file will be written to a
- * file called test.vcf.jannovar (assuming the original file was named test.vcf). The
+ * This is the driver class for a program called Jannovar.
  *
  * @author <a href="mailto:peter.robinson@charite.de">Peter N Robinson</a>
  * @author <a href="mailto:marten.jaeger@charite.de">Marten Jaeger</a>
  * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
  */
 public final class Jannovar {
-	/** Configuration for the Jannovar program. */
-	JannovarOptions options = null;
+
+	/** the version of the program */
+	public static final String JANNOVAR_VERSION = "0.17";
 
 	public static void main(String argv[]) {
-		if (argv.length == 0) {
-			// No arguments, print top level help and exit.
-			printTopLevelHelp();
-			System.exit(1);
-		}
-		
-		String[] newArgs = new String[argv.length - 1];
-		for (int i = 0; i < newArgs.length; i++) {
-			newArgs[i] = argv[i + 1];
-		}
+		// Setup command line parser
+		ArgumentParser parser = ArgumentParsers.newArgumentParser("jannovar-cli");
+		parser.version(JANNOVAR_VERSION);
+		parser.description("Jannovar CLI performs a series of VCF annotation tasks, including predicted "
+				+ "molecular impact of variants and annotation of compatible Mendelian inheritance.");
+		Subparsers subParsers = parser.addSubparsers();
+		JannovarAnnotatePosOptions.setupParser(subParsers);
+		JannovarAnnotateVCFOptions.setupParser(subParsers);
+		JannovarDBListOptions.setupParser(subParsers);
+		JannovarDownloadOptions.setupParser(subParsers);
+		parser.defaultHelp(true);
+		parser.epilog("You can find out more at http://jannovar.rtfd.org");
 
-		// Create the corresponding command.
-		JannovarCommand cmd = null;
+		// Parse command line arguments
+		Namespace args = null;
 		try {
-			if (argv[0].equals("download")) {
-				cmd = new DownloadCommand(newArgs);
-			} else if (argv[0].equals("db-list")) {
-				cmd = new DatabaseListCommand(newArgs);
-			} else if (argv[0].equals("annotate")) {
-				cmd = new AnnotateVCFCommand(newArgs);
-			} else if (argv[0].equals("annotate-pos")) {
-				cmd = new AnnotatePositionCommand(newArgs);
-			} else {
-				System.err.println("unrecognized command " + argv[0]);
-				printTopLevelHelp();
-			}
-		} catch (CommandLineParsingException e) {
-			System.err.println("ERROR: problem with parsing command line options: " + e.getMessage());
-			System.err.println("");
-			System.err.println("Use --help for obtaining usage instructions.");
-		} catch (HelpRequestedException e) {
-			return; // no error, user wanted help
+			args = parser.parseArgs(argv);
+		} catch (ArgumentParserException e) {
+			parser.handleError(e);
+			System.exit(1);
 		}
 
-		// Stop if no command could be created.
+		BiFunction<String[], Namespace, JannovarCommand> factory = args.get("cmd");
+		JannovarCommand cmd = factory.apply(argv, args);
 		if (cmd == null)
 			System.exit(1);
-
-		// Execute the command.
 		try {
 			cmd.run();
 		} catch (JannovarException e) {
@@ -116,28 +63,4 @@ public static void main(String argv[]) {
 		}
 	}
 
-	/**
-	 * Print top level help (without any command).
-	 */
-	private static void printTopLevelHelp() {
-		System.err.println("Program: de.charite.compbio.jannovar (functional annotation of VCF files)");
-		System.err.println("Version: " + JannovarOptions.JANNOVAR_VERSION);
-		System.err.println("Contact: Peter N Robinson <peter.robinson@charite.de>");
-		System.err.println("");
-		System.err.println("Usage: java -jar de.charite.compbio.jannovar.jar <command> [options]");
-		System.err.println("");
-		System.err.println("Command: download      download transcript database");
-		System.err.println("         db-list       list downloadable databases");
-		System.err.println("         annotate      functional annotation of VCF files");
-		System.err.println("         annotate-pos  functional annotation of genomic change");
-		System.err.println("");
-		System.err.println("Example: java -jar de.charite.compbio.jannovar.jar download -d hg19/ucsc");
-		System.err.println("         java -jar de.charite.compbio.jannovar.jar db-list");
-		System.err
-				.println("         java -jar de.charite.compbio.jannovar.jar annotate -d data/hg19_ucsc.ser -i variants.vcf");
-		System.err
-				.println("         java -jar de.charite.compbio.jannovar.jar annotate-pos -d data/hg19_ucsc.ser -c 'chr1:12345C>A'");
-		System.err.println("");
-	}
-
 }
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationCommand.java
index 874a179d39..a1d1b7b427 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationCommand.java
@@ -24,25 +24,19 @@
 	/** Map of Chromosomes, used in the annotation. */
 	protected ImmutableMap<Integer, Chromosome> chromosomeMap = null;
 
-	public JannovarAnnotationCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
-		super(argv);
-	}
-
 	/**
-	 * Deserialize the transcript definition file, as configured in {@link #options}.
-	 *
-	 * To run Jannovar, the user must pass a transcript definition file with the -D flag. This can be one of the files
-	 * ucsc.ser, ensembl.ser, or refseq.ser (or a comparable file) containing a serialized version of the
-	 * TranscriptModel objects created to contain info about the transcript definitions (exon positions etc.) extracted
-	 * from UCSC, Ensembl, or Refseq and necessary for annotation.
+	 * Deserialize the transcript definition file from {@link pathToDataFile}.
 	 *
+	 * @param pathToDataFile
+	 *            String with the path to the data file to deserialize
 	 * @throws JannovarException
 	 *             when there is a problem with the deserialization
 	 * @throws HelpRequestedException
 	 *             when the user requested the help page
 	 */
-	protected void deserializeTranscriptDefinitionFile() throws JannovarException, HelpRequestedException {
-		this.jannovarData = new JannovarDataSerializer(this.options.dataFile).load();
+	protected void deserializeTranscriptDefinitionFile(String pathToDataFile)
+			throws JannovarException, HelpRequestedException {
+		this.jannovarData = new JannovarDataSerializer(pathToDataFile).load();
 		this.refDict = this.jannovarData.getRefDict();
 		this.chromosomeMap = this.jannovarData.getChromosomes();
 	}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationOptions.java
new file mode 100755
index 0000000000..6e24e6fddc
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarAnnotationOptions.java
@@ -0,0 +1,74 @@
+package de.charite.compbio.jannovar.cmd;
+
+import net.sourceforge.argparse4j.inf.Namespace;
+
+/**
+ * Configuration for the annotation commands
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarAnnotationOptions extends JannovarBaseOptions {
+
+	/** Whether to use 3 letter amino acid code instead of 1 letter */
+	private boolean useThreeLetterAminoAcidCode = false;
+
+	/** Whether or not to shift variants towards the 3' end of the transcript */
+	private boolean nt3PrimeShifting = false;
+
+	/** Show all effects */
+	private boolean showAll = false;
+
+	/** Path to database file */
+	private String databaseFilePath = null;
+
+	@Override
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		super.setFromArgs(args);
+
+		useThreeLetterAminoAcidCode = args.getBoolean("3_letter_amino_acids");
+		nt3PrimeShifting = !args.getBoolean("3_prime_shifting");
+		databaseFilePath = args.getString("database");
+		showAll = args.getBoolean("show_all");
+	}
+
+	public boolean isUseThreeLetterAminoAcidCode() {
+		return useThreeLetterAminoAcidCode;
+	}
+
+	public void setUseThreeLetterAminoAcidCode(boolean useThreeLetterAminoAcidCode) {
+		this.useThreeLetterAminoAcidCode = useThreeLetterAminoAcidCode;
+	}
+
+	public boolean isNt3PrimeShifting() {
+		return nt3PrimeShifting;
+	}
+
+	public void setNt3PrimeShifting(boolean nt3PrimeShifting) {
+		this.nt3PrimeShifting = nt3PrimeShifting;
+	}
+
+	public String getDatabaseFilePath() {
+		return databaseFilePath;
+	}
+
+	public void setDatabaseFilePath(String databaseFilePath) {
+		this.databaseFilePath = databaseFilePath;
+	}
+
+	public boolean isShowAll() {
+		return showAll;
+	}
+
+	public void setShowAll(boolean showAll) {
+		this.showAll = showAll;
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarAnnotationOptions [useThreeLetterAminoAcidCode=" + useThreeLetterAminoAcidCode
+				+ ", nt3PrimeShifting=" + nt3PrimeShifting + ", showAll=" + showAll + ", databaseFilePath="
+				+ databaseFilePath + ", isReportProgress()=" + isReportProgress() + ", getHttpProxy()=" + getHttpProxy()
+				+ ", getHttpsProxy()=" + getHttpsProxy() + ", getFtpProxy()=" + getFtpProxy() + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarBaseOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarBaseOptions.java
new file mode 100755
index 0000000000..0b8d9a1eca
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarBaseOptions.java
@@ -0,0 +1,128 @@
+package de.charite.compbio.jannovar.cmd;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+
+import net.sourceforge.argparse4j.impl.Arguments;
+import net.sourceforge.argparse4j.inf.ArgumentGroup;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.Namespace;
+
+/**
+ * Base option class for global Jannovar options
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarBaseOptions {
+
+	/** Whether or not to print progress */
+	private boolean reportProgress = true;
+
+	/** proxy for HTTP */
+	private URL httpProxy = null;
+
+	/** proxy for HTTPS */
+	private URL httpsProxy = null;
+
+	/** proxy for FTP */
+	private URL ftpProxy = null;
+
+	/** Verbosity */
+	private int verbosity = 1;
+
+	/**
+	 * Setup global {@link ArgumentParser}
+	 * 
+	 * @param parser
+	 *            {@link ArgumentParser} to setup
+	 */
+	public static void setupParser(ArgumentParser parser) {
+		ArgumentGroup verboseGroup = parser.addArgumentGroup("Verbosity Options");
+		verboseGroup.addArgument("--report-no-progress").help("Disable progress report, more quiet mode")
+				.dest("report_progress").setDefault(true).action(Arguments.storeFalse());
+		verboseGroup.addArgument("-v", "--verbose").help("Enable verbose mode").dest("verbose").setDefault(false)
+				.action(Arguments.storeTrue());
+		verboseGroup.addArgument("-vv", "--very-verbose").help("Enable very verbose mode").dest("very_verbose")
+				.setDefault(false).action(Arguments.storeTrue());
+
+		ArgumentGroup proxyGroup = parser.addArgumentGroup("Proxy Options");
+		proxyGroup.description("Configuration related to Proxy, note that environment variables *_proxy "
+				+ "and *_PROXY are also interpreted");
+		proxyGroup.addArgument("--http-proxy").help("Set HTTP proxy to use, if any");
+		proxyGroup.addArgument("--https-proxy").help("Set HTTPS proxy to use, if any");
+		proxyGroup.addArgument("--ftp-proxy").help("Set FTP proxy to use, if any");
+	}
+
+	/**
+	 * Get values from {@link Namespace} object
+	 * 
+	 * @param args
+	 *            {@link Namespace} to get the option values from
+	 * @throws CommandLineParsingException
+	 *             on problems parsing a given URL
+	 */
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		if (args.getBoolean("verbose"))
+			this.verbosity = 2;
+		if (args.getBoolean("very_verbose"))
+			this.verbosity = 3;
+
+		try {
+			if (args.getString("http_proxy") != null)
+				this.httpProxy = new URL(args.getString("http_proxy"));
+			if (args.getString("https_proxy") != null)
+				this.httpsProxy = new URL(args.getString("https_proxy"));
+			if (args.getString("ftp_proxy") != null)
+				this.ftpProxy = new URL(args.getString("ftp_proxy"));
+		} catch (MalformedURLException e) {
+			throw new CommandLineParsingException("Problem parsing URL", e);
+		}
+	}
+
+	public boolean isReportProgress() {
+		return reportProgress;
+	}
+
+	public void setReportProgress(boolean reportProgress) {
+		this.reportProgress = reportProgress;
+	}
+
+	public URL getHttpProxy() {
+		return httpProxy;
+	}
+
+	public void setHttpProxy(URL httpProxy) {
+		this.httpProxy = httpProxy;
+	}
+
+	public URL getHttpsProxy() {
+		return httpsProxy;
+	}
+
+	public void setHttpsProxy(URL httpsProxy) {
+		this.httpsProxy = httpsProxy;
+	}
+
+	public URL getFtpProxy() {
+		return ftpProxy;
+	}
+
+	public void setFtpProxy(URL ftpProxy) {
+		this.ftpProxy = ftpProxy;
+	}
+
+	public int getVerbosity() {
+		return verbosity;
+	}
+
+	public void setVerbosity(int verbosity) {
+		this.verbosity = verbosity;
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarBaseOptions [reportProgress=" + reportProgress + ", httpProxy=" + httpProxy + ", httpsProxy="
+				+ httpsProxy + ", ftpProxy=" + ftpProxy + ", verbosity=" + verbosity + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarCommand.java
index 16fca1f68c..b13088e128 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarCommand.java
@@ -5,10 +5,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 
-import com.google.common.collect.ImmutableList;
-
 import de.charite.compbio.jannovar.JannovarException;
-import de.charite.compbio.jannovar.JannovarOptions;
 
 /**
  * Super class for all commands, i.e. the classes implementing one Jannovar execution step.
@@ -17,34 +14,10 @@
  */
 public abstract class JannovarCommand {
 
-	/** Configuration to use for the command execution. */
-	protected JannovarOptions options;
-	/** Verbosity level: (0) quiet, (1) normal, (2) verbose, (3) very verbose */
-	protected int verbosity = 1;
-	/** command line arguments */
-	protected final ImmutableList<String> args;
-
-	/**
-	 * Initialize the JannovarCommand.
-	 *
-	 * @param argv
-	 *            command line arguments to use
-	 * @throws CommandLineParsingException
-	 *             on problems with the command line
-	 * @throws HelpRequestedException
-	 *             if the user requested help through the command line parameters
-	 */
-	public JannovarCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
-		this.options = parseCommandLine(argv);
-		this.verbosity = options.verbosity;
-		this.args = ImmutableList.copyOf(argv);
-		setLogLevel();
-	}
-
 	/**
 	 * Set log level, depending on this.verbosity.
 	 */
-	private void setLogLevel() {
+	protected void setLogLevel(int verbosity) {
 		LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
 		Configuration conf = ctx.getConfiguration();
 
@@ -58,20 +31,6 @@ else if (verbosity <= 2)
 		ctx.updateLoggers(conf);
 	}
 
-	/**
-	 * Function for parsing the command line.
-	 *
-	 * @param argv
-	 *            command line to parse, as in the program's main function
-	 * @return {@link JannovarOptions} with the programs' configuration
-	 * @throws CommandLineParsingException
-	 *             on problems with the command line
-	 * @throws HelpRequestedException
-	 *             when the user requested the help page
-	 */
-	protected abstract JannovarOptions parseCommandLine(String[] argv) throws CommandLineParsingException,
-			HelpRequestedException;
-
 	/**
 	 * Function for the execution of the command.
 	 *
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarDBOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarDBOptions.java
new file mode 100755
index 0000000000..400e492d8e
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/JannovarDBOptions.java
@@ -0,0 +1,40 @@
+package de.charite.compbio.jannovar.cmd;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import net.sourceforge.argparse4j.inf.Namespace;
+
+/**
+ * Configuration for database-related commands in Jannovar
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarDBOptions extends JannovarBaseOptions {
+
+	/** paths to INI files ot use for parsing */
+	public List<String> dataSourceFiles = new ArrayList<>();
+
+	public List<String> getDataSourceFiles() {
+		return dataSourceFiles;
+	}
+
+	public void setDataSourceFiles(List<String> dataSourceFiles) {
+		this.dataSourceFiles = dataSourceFiles;
+	}
+
+	@Override
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		super.setFromArgs(args);
+
+		dataSourceFiles = args.getList("data_source_list");
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarDBOptions [dataSourceFiles=" + dataSourceFiles + ", isReportProgress()=" + isReportProgress()
+				+ ", getHttpProxy()=" + getHttpProxy() + ", getHttpsProxy()=" + getHttpsProxy() + ", getFtpProxy()="
+				+ getFtpProxy() + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/AnnotatePositionCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/AnnotatePositionCommand.java
index cf19ae1491..3462ef3bf6 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/AnnotatePositionCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/AnnotatePositionCommand.java
@@ -3,10 +3,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.cli.ParseException;
-
 import de.charite.compbio.jannovar.JannovarException;
-import de.charite.compbio.jannovar.JannovarOptions;
 import de.charite.compbio.jannovar.annotation.AllAnnotationListTextGenerator;
 import de.charite.compbio.jannovar.annotation.AnnotationException;
 import de.charite.compbio.jannovar.annotation.BestAnnotationListTextGenerator;
@@ -15,13 +12,13 @@
 import de.charite.compbio.jannovar.annotation.VariantAnnotator;
 import de.charite.compbio.jannovar.annotation.builders.AnnotationBuilderOptions;
 import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
-import de.charite.compbio.jannovar.cmd.HelpRequestedException;
 import de.charite.compbio.jannovar.cmd.JannovarAnnotationCommand;
 import de.charite.compbio.jannovar.hgvs.AminoAcidCode;
 import de.charite.compbio.jannovar.reference.GenomePosition;
 import de.charite.compbio.jannovar.reference.GenomeVariant;
 import de.charite.compbio.jannovar.reference.PositionType;
 import de.charite.compbio.jannovar.reference.Strand;
+import net.sourceforge.argparse4j.inf.Namespace;
 
 /**
  * Allows the annotation of a single position.
@@ -32,8 +29,12 @@
  */
 public class AnnotatePositionCommand extends JannovarAnnotationCommand {
 
-	public AnnotatePositionCommand(String argv[]) throws CommandLineParsingException, HelpRequestedException {
-		super(argv);
+	/** Configuration */
+	private JannovarAnnotatePosOptions options;
+
+	public AnnotatePositionCommand(String argv[], Namespace args) throws CommandLineParsingException {
+		this.options = new JannovarAnnotatePosOptions();
+		this.options.setFromArgs(args);
 	}
 
 	/**
@@ -42,20 +43,22 @@ public AnnotatePositionCommand(String argv[]) throws CommandLineParsingException
 	 * For example, the change <tt>chr1:909238G&gt;C</tt> could be converted to
 	 * <tt>PLEKHN1:NM_032129.2:c.1460G&gt;C,p.(Arg487Pro)</tt>.
 	 *
+	 * @param options
+	 *            configuration for the command
 	 * @throws AnnotationException
 	 *             on problems in the annotation process
 	 */
 	@Override
 	public void run() throws JannovarException {
 		System.err.println("Options");
-		options.print(System.err);
+		System.err.println(options.toString());
 
 		System.err.println("Deserializing transcripts...");
-		deserializeTranscriptDefinitionFile();
+		deserializeTranscriptDefinitionFile(options.getDatabaseFilePath());
 
 		final VariantAnnotator annotator = new VariantAnnotator(refDict, chromosomeMap, new AnnotationBuilderOptions());
 		System.out.println("#change\teffect\thgvs_annotation");
-		for (String chromosomalChange : options.chromosomalChanges) {
+		for (String chromosomalChange : options.getGenomicChanges()) {
 			// Parse the chromosomal change string into a GenomeChange object.
 			final GenomeVariant genomeChange = parseGenomeChange(chromosomalChange);
 
@@ -73,12 +76,12 @@ public void run() throws JannovarException {
 			final String annotation;
 			final String effect;
 			VariantAnnotationsTextGenerator textGenerator;
-			if (options.showAll)
+			if (options.isShowAll())
 				textGenerator = new AllAnnotationListTextGenerator(annoList, 0, 1);
 			else
 				textGenerator = new BestAnnotationListTextGenerator(annoList, 0, 1);
 			annotation = textGenerator.buildHGVSText(
-					options.useThreeLetterAminoAcidCode ? AminoAcidCode.THREE_LETTER : AminoAcidCode.ONE_LETTER);
+					options.isUseThreeLetterAminoAcidCode() ? AminoAcidCode.THREE_LETTER : AminoAcidCode.ONE_LETTER);
 			effect = textGenerator.buildEffectText();
 
 			System.out.println(String.format("%s\t%s\t%s", chromosomalChange.toString(), effect, annotation));
@@ -103,15 +106,4 @@ private GenomeVariant parseGenomeChange(String changeStr) throws JannovarExcepti
 		return new GenomeVariant(new GenomePosition(refDict, Strand.FWD, chr, pos, PositionType.ONE_BASED), ref, alt);
 	}
 
-	@Override
-	protected JannovarOptions parseCommandLine(String[] argv)
-			throws CommandLineParsingException, HelpRequestedException {
-		AnnotatePositionCommandLineParser parser = new AnnotatePositionCommandLineParser();
-		try {
-			return parser.parse(argv);
-		} catch (ParseException e) {
-			throw new CommandLineParsingException("Problem with command line parsing.", e);
-		}
-	}
-
 }
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/JannovarAnnotatePosOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/JannovarAnnotatePosOptions.java
new file mode 100755
index 0000000000..0838499398
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_pos/JannovarAnnotatePosOptions.java
@@ -0,0 +1,86 @@
+package de.charite.compbio.jannovar.cmd.annotate_pos;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.BiFunction;
+
+import de.charite.compbio.jannovar.UncheckedJannovarException;
+import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
+import de.charite.compbio.jannovar.cmd.JannovarAnnotationOptions;
+import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
+import net.sourceforge.argparse4j.impl.Arguments;
+import net.sourceforge.argparse4j.inf.ArgumentGroup;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.Namespace;
+import net.sourceforge.argparse4j.inf.Subparser;
+import net.sourceforge.argparse4j.inf.Subparsers;
+
+/**
+ * Options for the <tt>annotate-pos</tt> comman
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarAnnotatePosOptions extends JannovarAnnotationOptions {
+
+	/** List of Strings with genomic changes to parse */
+	private List<String> genomicChanges = new ArrayList<>();
+
+	/**
+	 * Setup {@link ArgumentParser}
+	 * 
+	 * @param subParsers
+	 *            {@link Subparsers} to setup
+	 */
+	public static void setupParser(Subparsers subParsers) {
+		BiFunction<String[], Namespace, AnnotatePositionCommand> handler = (argv, args) -> {
+			try {
+				return new AnnotatePositionCommand(argv, args);
+			} catch (CommandLineParsingException e) {
+				throw new UncheckedJannovarException("Could not parse command line", e);
+			}
+		};
+
+		Subparser subParser = subParsers.addParser("annotate-pos", true)
+				.help("annotate genomic changes given on the command line").setDefault("cmd", handler);
+		subParser.description("Perform annotation of genomic changes given on the command line");
+		subParser.addArgument("-d", "--database").help("Path to database .ser file").required(true);
+		subParser.addArgument("-c", "--genomic-change").help("Genomic change to annotate, you can give multiple ones")
+				.action(Arguments.append()).required(true);
+
+		ArgumentGroup optionalGroup = subParser.addArgumentGroup("Optional Arguments");
+		optionalGroup.addArgument("--show-all").help("Show all effects").setDefault(false);
+		optionalGroup.addArgument("--no-3-prime-shifting").help("Disable shifting towards 3' of transcript")
+				.dest("3_prime_shifting").setDefault(true).action(Arguments.storeFalse());
+		optionalGroup.addArgument("--3-letter-amino-acids").help("Enable usage of 3 letter amino acid codes")
+				.setDefault(false).action(Arguments.storeTrue());
+		
+		subParser.epilog("Example: java -jar Jannovar.jar annotate-pos -d hg19_refseq.ser -c 'chr1:12345C>A'");
+
+		JannovarBaseOptions.setupParser(subParser);
+	}
+
+	@Override
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		super.setFromArgs(args);
+
+		genomicChanges = args.getList("genomic_change");
+	}
+
+	public List<String> getGenomicChanges() {
+		return genomicChanges;
+	}
+
+	public void setGenomicChanges(List<String> genomicChanges) {
+		this.genomicChanges = genomicChanges;
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarAnnotatePosOptions [genomicChanges=" + genomicChanges + ", isUseThreeLetterAminoAcidCode()="
+				+ isUseThreeLetterAminoAcidCode() + ", isNt3PrimeShifting()=" + isNt3PrimeShifting()
+				+ ", getDatabaseFilePath()=" + getDatabaseFilePath() + ", isReportProgress()=" + isReportProgress()
+				+ ", getHttpProxy()=" + getHttpProxy() + ", getHttpsProxy()=" + getHttpsProxy() + ", getFtpProxy()="
+				+ getFtpProxy() + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotateVCFCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotateVCFCommand.java
index b5d0483dc7..096ab976cc 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotateVCFCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotateVCFCommand.java
@@ -4,12 +4,10 @@
 import java.io.IOException;
 import java.util.stream.Stream;
 
-import org.apache.commons.cli.ParseException;
+import com.google.common.collect.ImmutableList;
 
 import de.charite.compbio.jannovar.JannovarException;
-import de.charite.compbio.jannovar.JannovarOptions;
 import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
-import de.charite.compbio.jannovar.cmd.HelpRequestedException;
 import de.charite.compbio.jannovar.cmd.JannovarAnnotationCommand;
 import de.charite.compbio.jannovar.mendel.IncompatiblePedigreeException;
 import de.charite.compbio.jannovar.mendel.bridge.MendelVCFHeaderExtender;
@@ -31,6 +29,7 @@
 import htsjdk.variant.variantcontext.VariantContext;
 import htsjdk.variant.vcf.VCFFileReader;
 import htsjdk.variant.vcf.VCFHeader;
+import net.sourceforge.argparse4j.inf.Namespace;
 
 /**
  * Run annotation steps (read in VCF, write out VCF or Jannovar file format).
@@ -40,11 +39,19 @@
  */
 public class AnnotateVCFCommand extends JannovarAnnotationCommand {
 
+	/** Raw command line arguments */
+	private String[] argv = null;
+
 	/** Progress reporting */
 	private ProgressReporter progressReporter = null;
 
-	public AnnotateVCFCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
-		super(argv);
+	/** Configuration */
+	private JannovarAnnotateVCFOptions options;
+
+	public AnnotateVCFCommand(String[] argv, Namespace args) throws CommandLineParsingException {
+		this.argv = argv;
+		this.options = new JannovarAnnotateVCFOptions();
+		this.options.setFromArgs(args);
 	}
 
 	/**
@@ -57,93 +64,93 @@ public AnnotateVCFCommand(String[] argv) throws CommandLineParsingException, Hel
 	@Override
 	public void run() throws JannovarException {
 		System.err.println("Options");
-		options.print(System.err);
-
-		deserializeTranscriptDefinitionFile();
-
-		for (String vcfPath : options.vcfFilePaths) {
-			// initialize the VCF reader
-			try (VCFFileReader vcfReader = new VCFFileReader(new File(vcfPath), false)) {
-				if (this.options.verbosity >= 1) {
-					final SAMSequenceDictionary seqDict = VCFFileReader.getSequenceDictionary(new File(vcfPath));
-					final GenomeRegionListFactoryFromSAMSequenceDictionary factory = new GenomeRegionListFactoryFromSAMSequenceDictionary();
-					this.progressReporter = new ProgressReporter(factory.construct(seqDict), 60);
-					this.progressReporter.printHeader();
-					this.progressReporter.start();
-				}
-
-				VCFHeader vcfHeader = vcfReader.getFileHeader();
-
-				System.err.println("Annotating VCF...");
-				final long startTime = System.nanoTime();
-
-				Stream<VariantContext> stream = vcfReader.iterator().stream();
-
-				// If configured, annotate using dbSNP VCF file (extend header to use for writing out)
-				if (options.pathVCFDBSNP != null) {
-					DBAnnotationOptions dbSNPOptions = DBAnnotationOptions.createDefaults();
-					dbSNPOptions.setIdentifierPrefix(options.prefixDBSNP);
-					DBVariantContextAnnotator dbSNPAnno = new DBVariantContextAnnotatorFactory()
-							.constructDBSNP(options.pathVCFDBSNP, options.pathFASTARef, dbSNPOptions);
-					dbSNPAnno.extendHeader(vcfHeader);
-					stream = stream.map(dbSNPAnno::annotateVariantContext);
-				}
-
-				// If configured, annotate using ExAC VCF file (extend header to use for writing out)
-				if (options.pathVCFExac != null) {
-					DBAnnotationOptions exacOptions = DBAnnotationOptions.createDefaults();
-					exacOptions.setIdentifierPrefix(options.prefixExac);
-					DBVariantContextAnnotator exacAnno = new DBVariantContextAnnotatorFactory()
-							.constructExac(options.pathVCFExac, options.pathFASTARef, exacOptions);
-					exacAnno.extendHeader(vcfHeader);
-					stream = stream.map(exacAnno::annotateVariantContext);
-				}
-
-				// If configured, annotate using UK10K VCF file (extend header to use for writing out)
-				if (options.pathVCFUK10K != null) {
-					DBAnnotationOptions exacOptions = DBAnnotationOptions.createDefaults();
-					exacOptions.setIdentifierPrefix(options.prefixUK10K);
-					DBVariantContextAnnotator uk10kAnno = new DBVariantContextAnnotatorFactory()
-							.constructUK10K(options.pathVCFUK10K, options.pathFASTARef, exacOptions);
-					uk10kAnno.extendHeader(vcfHeader);
-					stream = stream.map(uk10kAnno::annotateVariantContext);
-				}
-
-				// Extend header with INHERITANCE filter
-				if (options.pathPedFile != null) {
-					System.err.println("Extending header with INHERITANCE...");
-					new MendelVCFHeaderExtender().extendHeader(vcfHeader, "");
-				}
-
-				// Write result to output file
-				try (AnnotatedVCFWriter writer = new AnnotatedVCFWriter(refDict, vcfHeader, chromosomeMap, vcfPath,
-						options, args); VariantContextProcessor sink = buildMendelianProcessors(writer);) {
-					// Make current VC available to progress printer
-					if (this.progressReporter != null)
-						stream = stream.peek(vc -> this.progressReporter.setCurrentVC(vc));
-
-					stream.forEachOrdered(sink::put);
-
-					System.err.println("Wrote annotations to \"" + writer.getOutFileName() + "\"");
-					final long endTime = System.nanoTime();
-					System.err.println(String.format("Annotation and writing took %.2f sec.",
-							(endTime - startTime) / 1000.0 / 1000.0 / 1000.0));
-				} catch (IOException e) {
-					throw new JannovarException("Problem opening file", e);
-				}
-			} catch (IncompatiblePedigreeException e) {
-				System.err
-						.println("VCF file " + vcfPath + " is not compatible to pedigree file " + options.pathPedFile);
-			} catch (VariantContextFilterException e) {
-				System.err.println("There was a problem annotating the VCF file");
-				System.err.println("The error message was as follows.  The stack trace below the error "
-						+ "message can help the developers debug the problem.\n");
-				System.err.println(e.getMessage());
-				System.err.println("\n");
-				e.printStackTrace(System.err);
-				return;
+		System.err.println(options.toString());
+
+		System.err.println("Deserializing transcripts...");
+		deserializeTranscriptDefinitionFile(options.getDatabaseFilePath());
+
+		final String vcfPath = options.getPathInputVCF();
+
+		try (VCFFileReader vcfReader = new VCFFileReader(new File(vcfPath), false)) {
+			if (this.options.getVerbosity() >= 1) {
+				final SAMSequenceDictionary seqDict = VCFFileReader.getSequenceDictionary(new File(vcfPath));
+				final GenomeRegionListFactoryFromSAMSequenceDictionary factory = new GenomeRegionListFactoryFromSAMSequenceDictionary();
+				this.progressReporter = new ProgressReporter(factory.construct(seqDict), 60);
+				this.progressReporter.printHeader();
+				this.progressReporter.start();
+			}
+
+			VCFHeader vcfHeader = vcfReader.getFileHeader();
+
+			System.err.println("Annotating VCF...");
+			final long startTime = System.nanoTime();
+
+			Stream<VariantContext> stream = vcfReader.iterator().stream();
+
+			// If configured, annotate using dbSNP VCF file (extend header to use for writing out)
+			if (options.pathVCFDBSNP != null) {
+				DBAnnotationOptions dbSNPOptions = DBAnnotationOptions.createDefaults();
+				dbSNPOptions.setIdentifierPrefix(options.prefixDBSNP);
+				DBVariantContextAnnotator dbSNPAnno = new DBVariantContextAnnotatorFactory()
+						.constructDBSNP(options.pathVCFDBSNP, options.pathFASTARef, dbSNPOptions);
+				dbSNPAnno.extendHeader(vcfHeader);
+				stream = stream.map(dbSNPAnno::annotateVariantContext);
+			}
+
+			// If configured, annotate using ExAC VCF file (extend header to use for writing out)
+			if (options.pathVCFExac != null) {
+				DBAnnotationOptions exacOptions = DBAnnotationOptions.createDefaults();
+				exacOptions.setIdentifierPrefix(options.prefixExac);
+				DBVariantContextAnnotator exacAnno = new DBVariantContextAnnotatorFactory()
+						.constructExac(options.pathVCFExac, options.pathFASTARef, exacOptions);
+				exacAnno.extendHeader(vcfHeader);
+				stream = stream.map(exacAnno::annotateVariantContext);
 			}
+
+			// If configured, annotate using UK10K VCF file (extend header to use for writing out)
+			if (options.pathVCFUK10K != null) {
+				DBAnnotationOptions exacOptions = DBAnnotationOptions.createDefaults();
+				exacOptions.setIdentifierPrefix(options.prefixUK10K);
+				DBVariantContextAnnotator uk10kAnno = new DBVariantContextAnnotatorFactory()
+						.constructUK10K(options.pathVCFUK10K, options.pathFASTARef, exacOptions);
+				uk10kAnno.extendHeader(vcfHeader);
+				stream = stream.map(uk10kAnno::annotateVariantContext);
+			}
+
+			// Extend header with INHERITANCE filter
+			if (options.pathPedFile != null) {
+				System.err.println("Extending header with INHERITANCE...");
+				new MendelVCFHeaderExtender().extendHeader(vcfHeader, "");
+			}
+
+			// Write result to output file
+			try (AnnotatedVCFWriter writer = new AnnotatedVCFWriter(refDict, vcfHeader, chromosomeMap, vcfPath, options,
+					ImmutableList.copyOf(argv)); VariantContextProcessor sink = buildMendelianProcessors(writer);) {
+				// Make current VC available to progress printer
+				if (this.progressReporter != null)
+					stream = stream.peek(vc -> this.progressReporter.setCurrentVC(vc));
+
+				stream.forEachOrdered(sink::put);
+
+				System.err.println("Wrote annotations to \"" + options.getPathOutputVCF() + "\"");
+				final long endTime = System.nanoTime();
+				System.err.println(String.format("Annotation and writing took %.2f sec.",
+						(endTime - startTime) / 1000.0 / 1000.0 / 1000.0));
+			} catch (IOException e) {
+				throw new JannovarException("Problem opening file", e);
+			}
+		} catch (IncompatiblePedigreeException e) {
+			System.err.println("VCF file " + vcfPath + " is not compatible to pedigree file " + options.pathPedFile);
+		} catch (VariantContextFilterException e) {
+			System.err.println("There was a problem annotating the VCF file");
+			System.err.println("The error message was as follows.  The stack trace below the error "
+					+ "message can help the developers debug the problem.\n");
+			System.err.println(e.getMessage());
+			System.err.println("\n");
+			e.printStackTrace(System.err);
+			return;
 		}
+
 		if (progressReporter != null)
 			progressReporter.done();
 	}
@@ -191,15 +198,4 @@ private void checkPedigreeCompatibility(Pedigree pedigree, VCFHeader vcfHeader)
 			throw new IncompatiblePedigreeException("The VCF file is not compatible with the pedigree!");
 	}
 
-	@Override
-	protected JannovarOptions parseCommandLine(String[] argv)
-			throws CommandLineParsingException, HelpRequestedException {
-		AnnotateVCFCommandLineParser parser = new AnnotateVCFCommandLineParser();
-		try {
-			return parser.parse(argv);
-		} catch (ParseException e) {
-			throw new CommandLineParsingException("Could not parse the command line.", e);
-		}
-	}
-
 }
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotatedVCFWriter.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotatedVCFWriter.java
index be89a123ef..9f70594933 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotatedVCFWriter.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/AnnotatedVCFWriter.java
@@ -1,19 +1,18 @@
 package de.charite.compbio.jannovar.cmd.annotate_vcf;
 
-import java.io.File;
+import java.io.Closeable;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import de.charite.compbio.jannovar.JannovarOptions;
+import de.charite.compbio.jannovar.Jannovar;
 import de.charite.compbio.jannovar.data.Chromosome;
 import de.charite.compbio.jannovar.data.ReferenceDictionary;
 import de.charite.compbio.jannovar.htsjdk.InvalidCoordinatesException;
 import de.charite.compbio.jannovar.htsjdk.VariantContextAnnotator;
 import de.charite.compbio.jannovar.htsjdk.VariantContextWriterConstructionHelper;
-import de.charite.compbio.jannovar.impl.util.PathUtil;
 import htsjdk.variant.variantcontext.VariantContext;
 import htsjdk.variant.variantcontext.writer.VariantContextWriter;
 import htsjdk.variant.vcf.VCFHeader;
@@ -22,7 +21,7 @@
 /**
  * Annotate variant in {@link VariantContext} and write out through HTSJDK (i.e. in VCF/BCF format).
  */
-public class AnnotatedVCFWriter extends AnnotatedVariantWriter {
+public class AnnotatedVCFWriter implements Closeable {
 
 	/** {@link ReferenceDictionary} object to use for information about the genome. */
 	@SuppressWarnings("unused")
@@ -31,11 +30,8 @@
 	/** VCF header to use */
 	private VCFHeader vcfHeader;
 
-	/** path to VCF file to process */
-	private final String vcfPath;
-
 	/** configuration to use */
-	private final JannovarOptions options;
+	private final JannovarAnnotateVCFOptions options;
 
 	/** the {@link VariantContextAnnotator} to use. */
 	private final VariantContextAnnotator annotator;
@@ -48,21 +44,20 @@
 	private final ImmutableList<String> args;
 
 	public AnnotatedVCFWriter(ReferenceDictionary refDict, VCFHeader vcfHeader,
-			ImmutableMap<Integer, Chromosome> chromosomeMap, String vcfPath, JannovarOptions options,
+			ImmutableMap<Integer, Chromosome> chromosomeMap, String vcfPath, JannovarAnnotateVCFOptions options,
 			ImmutableList<String> args) {
 		this.refDict = refDict;
 		this.vcfHeader = vcfHeader;
 		this.annotator = new VariantContextAnnotator(refDict, chromosomeMap, new VariantContextAnnotator.Options(
-				!options.showAll, options.escapeAnnField, options.nt3PrimeShifting));
-		this.vcfPath = vcfPath;
+				!options.isShowAll(), options.isEscapeAnnField(), options.isNt3PrimeShifting()));
 		this.options = options;
 		this.args = args;
 
 		ImmutableSet<VCFHeaderLine> additionalLines = ImmutableSet.of(
-				new VCFHeaderLine("jannovarVersion", JannovarOptions.JANNOVAR_VERSION),
+				new VCFHeaderLine("jannovarVersion", Jannovar.JANNOVAR_VERSION),
 				new VCFHeaderLine("jannovarCommand", Joiner.on(' ').join(args)));
-		this.out = VariantContextWriterConstructionHelper.openVariantContextWriter(vcfHeader, getOutFileName(),
-				additionalLines);
+		this.out = VariantContextWriterConstructionHelper.openVariantContextWriter(vcfHeader,
+				options.getPathOutputVCF(), additionalLines);
 	}
 
 	/**
@@ -72,39 +67,6 @@ public VCFHeader getVCFHeader() {
 		return vcfHeader;
 	}
 
-	/**
-	 * Create and return output file name.
-	 *
-	 * The output file name is the same as the input, with the extension ".EXT" replaced by ".jv.EXT" where EXT is one
-	 * of "vcf.gz", "vcf", and "bcf". If the extension is different from these values, ".jv.vcf.gz" is appended to the
-	 * input file name.
-	 *
-	 * When <code>options.outVCFFolder</code> is set then the file is written to this folder.
-	 *
-	 * @return output file name, depending on this.options
-	 */
-	@Override
-	public String getOutFileName() {
-		File f = new File(vcfPath);
-		String outname = f.getName();
-		if (options.outVCFFolder != null)
-			outname = PathUtil.join(options.outVCFFolder, outname);
-		else if (f.getParent() != null)
-			outname = PathUtil.join(f.getParent(), outname);
-
-		String suffix = ".vcf.gz";
-		for (String x : new String[] { ".vcf.gz", ".vcf", ".bcf" })
-			if (outname.endsWith(x))
-				suffix = x;
-
-		int i = outname.toLowerCase().lastIndexOf(suffix);
-		if (i < 0)
-			return outname + options.outputInfix + ".vcf.gz";
-		else
-			return outname.substring(0, i) + options.outputInfix + suffix;
-	}
-
-	@Override
 	public void put(VariantContext vc) {
 		try {
 			vc = annotator.applyAnnotations(vc, annotator.buildAnnotations(vc));
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFOptions.java
new file mode 100755
index 0000000000..7d58165e73
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFOptions.java
@@ -0,0 +1,163 @@
+package de.charite.compbio.jannovar.cmd.annotate_vcf;
+
+import java.util.function.BiFunction;
+
+import de.charite.compbio.jannovar.UncheckedJannovarException;
+import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
+import de.charite.compbio.jannovar.cmd.JannovarAnnotationOptions;
+import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
+import net.sourceforge.argparse4j.impl.Arguments;
+import net.sourceforge.argparse4j.inf.ArgumentGroup;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.Namespace;
+import net.sourceforge.argparse4j.inf.Subparser;
+import net.sourceforge.argparse4j.inf.Subparsers;
+
+/**
+ * Options for annotating VCF files
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarAnnotateVCFOptions extends JannovarAnnotationOptions {
+
+	/** Whether or not to escape ANN field */
+	private boolean escapeAnnField = true;
+
+	/** Path to input VCF file */
+	private String pathInputVCF = null;
+
+	/** Path to output VCF file */
+	private String pathOutputVCF = null;
+
+	/** Path to dbSNP VCF file to use for the annotation */
+	public String pathVCFDBSNP = null;
+
+	/** Prefix to use for dbSNP VCF INFO Fields */
+	public String prefixDBSNP = null;
+
+	/** Path to the reference FAI-indexed FASTA file (required for dbSNP/ExAC/UK10K-based annotation */
+	public String pathFASTARef = null;
+
+	/** Path to ExAC VCF file to use for the annotation */
+	public String pathVCFExac;
+
+	/** Prefix to use for ExAC VCF INFO Fields */
+	public String prefixExac;
+
+	/** Path to UK10K VCF file to use for the annotation */
+	public String pathVCFUK10K;
+
+	/** Prefix to use for UK10K VCF INFO Fields */
+	public String prefixUK10K;
+
+	/** Path to pedigree file */
+	public String pathPedFile;
+
+	/**
+	 * Setup {@link ArgumentParser}
+	 * 
+	 * @param subParsers
+	 *            {@link Subparsers} to setup
+	 */
+	public static void setupParser(Subparsers subParsers) {
+		BiFunction<String[], Namespace, AnnotateVCFCommand> handler = (argv, args) -> {
+			try {
+				return new AnnotateVCFCommand(argv, args);
+			} catch (CommandLineParsingException e) {
+				throw new UncheckedJannovarException("Could not parse command line", e);
+			}
+		};
+
+		Subparser subParser = subParsers.addParser("annotate-vcf", true).help("annotate VCF files").setDefault("cmd",
+				handler);
+		subParser.description("Perform annotation of a single VCF file");
+
+		subParser.addArgument("-i", "--input-vcf").help("Path to input VCF file").required(true);
+		subParser.addArgument("-o", "--output-vcf").help("Path to output VCF file").required(true);
+		subParser.addArgument("-d", "--database").help("Path to database .ser file").required(true);
+
+		ArgumentGroup annotationGroup = subParser.addArgumentGroup("Annotation Arguments (optional)");
+		annotationGroup.addArgument("--pedigree-file").help("Pedigree file to use for Mendelian inheritance annotation")
+				.required(false);
+		annotationGroup.addArgument("--ref-fasta")
+				.help("Path to FAI-indexed reference FASTA file, required for dbSNP/ExAC/UK10K-based annotation");
+		annotationGroup.addArgument("--dbsnp-vcf").help("Path to dbSNP VCF file, activates dbSNP annotation")
+				.required(false);
+		annotationGroup.addArgument("--dbsnp-prefix").help("Prefix for dbSNP annotations").setDefault("DBSNP_")
+				.required(false);
+		annotationGroup.addArgument("--exac-vcf").help("Path to ExAC VCF file, activates ExAC annotation")
+				.required(false);
+		annotationGroup.addArgument("--exac-prefix").help("Prefix for ExAC annotations").setDefault("EXAC_")
+				.required(false);
+		annotationGroup.addArgument("--uk10k-vcf").help("Path to UK10K VCF file, activates UK10K annotation")
+				.required(false);
+		annotationGroup.addArgument("--uk10k-prefix").help("Prefix for UK10K annotations").setDefault("UK10K_")
+				.required(false);
+
+		ArgumentGroup optionalGroup = subParser.addArgumentGroup("Other, optional Arguments");
+		optionalGroup.addArgument("--no-escape-ann-field").help("Disable escaping of INFO/ANN field in VCF output")
+				.dest("escape_ann_field").setDefault(true).action(Arguments.storeFalse());
+		optionalGroup.addArgument("--show-all").help("Show all effects").setDefault(false);
+		optionalGroup.addArgument("--no-3-prime-shifting").help("Disable shifting towards 3' of transcript")
+				.dest("3_prime_shifting").setDefault(true).action(Arguments.storeFalse());
+		optionalGroup.addArgument("--3-letter-amino-acids").help("Enable usage of 3 letter amino acid codes")
+				.setDefault(false).action(Arguments.storeTrue());
+
+		JannovarBaseOptions.setupParser(subParser);
+	}
+
+	@Override
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		super.setFromArgs(args);
+
+		escapeAnnField = args.getBoolean("escape_ann_field");
+		pathInputVCF = args.getString("input_vcf");
+		pathOutputVCF = args.getString("output_vcf");
+		pathPedFile = args.getString("pedigree_file");
+
+		pathFASTARef = args.getString("ref_fasta");
+		pathVCFDBSNP = args.getString("dbsnp_vcf");
+		prefixDBSNP = args.getString("dbsnp_prefix");
+		pathVCFExac = args.getString("exac_vcf");
+		prefixExac = args.getString("exac_prefix");
+		pathVCFUK10K = args.getString("uk10k_vcf");
+		prefixUK10K = args.getString("uk10k_prefix");
+	}
+
+	public String getPathInputVCF() {
+		return pathInputVCF;
+	}
+
+	public void setPathInputVCF(String pathInputVCF) {
+		this.pathInputVCF = pathInputVCF;
+	}
+
+	public String getPathOutputVCF() {
+		return pathOutputVCF;
+	}
+
+	public void setPathOutputVCF(String pathOutputVCF) {
+		this.pathOutputVCF = pathOutputVCF;
+	}
+
+	public boolean isEscapeAnnField() {
+		return escapeAnnField;
+	}
+
+	public void setEscapeAnnField(boolean escapeAnnField) {
+		this.escapeAnnField = escapeAnnField;
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarAnnotateVCFOptions [escapeAnnField=" + escapeAnnField + ", pathInputVCF=" + pathInputVCF
+				+ ", pathOutputVCF=" + pathOutputVCF + ", pathVCFDBSNP=" + pathVCFDBSNP + ", prefixDBSNP=" + prefixDBSNP
+				+ ", pathFASTARef=" + pathFASTARef + ", pathVCFExac=" + pathVCFExac + ", prefixExac=" + prefixExac
+				+ ", pathVCFUK10K=" + pathVCFUK10K + ", prefixUK10K=" + prefixUK10K + ", pathPedFile=" + pathPedFile
+				+ ", isUseThreeLetterAminoAcidCode()=" + isUseThreeLetterAminoAcidCode() + ", isNt3PrimeShifting()="
+				+ isNt3PrimeShifting() + ", getDatabaseFilePath()=" + getDatabaseFilePath() + ", isReportProgress()="
+				+ isReportProgress() + ", getHttpProxy()=" + getHttpProxy() + ", getHttpsProxy()=" + getHttpsProxy()
+				+ ", getFtpProxy()=" + getFtpProxy() + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/DatabaseListCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/DatabaseListCommand.java
index e70c0659b9..717c99b7a3 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/DatabaseListCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/DatabaseListCommand.java
@@ -1,19 +1,20 @@
 package de.charite.compbio.jannovar.cmd.db_list;
 
-import org.apache.commons.cli.ParseException;
-
 import de.charite.compbio.jannovar.JannovarException;
-import de.charite.compbio.jannovar.JannovarOptions;
 import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
-import de.charite.compbio.jannovar.cmd.HelpRequestedException;
 import de.charite.compbio.jannovar.cmd.JannovarCommand;
 import de.charite.compbio.jannovar.datasource.DataSourceFactory;
 import de.charite.compbio.jannovar.datasource.DatasourceOptions;
+import net.sourceforge.argparse4j.inf.Namespace;
 
 public class DatabaseListCommand extends JannovarCommand {
 
-	public DatabaseListCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
-		super(argv);
+	/** Configuration */
+	private JannovarDBListOptions options;
+
+	public DatabaseListCommand(String argv[], Namespace args) throws CommandLineParsingException {
+		this.options = new JannovarDBListOptions();
+		this.options.setFromArgs(args);
 	}
 
 	/**
@@ -22,25 +23,15 @@ public DatabaseListCommand(String[] argv) throws CommandLineParsingException, He
 	@Override
 	public void run() throws JannovarException {
 		System.err.println("Options");
-		options.print(System.err);
+		System.err.println(options.toString());
 
-		DatasourceOptions dsOptions = new DatasourceOptions(options.httpProxy, options.httpsProxy, options.ftpProxy,
-				options.printProgressBars);
+		DatasourceOptions dsOptions = new DatasourceOptions(options.getHttpProxy(), options.getHttpsProxy(),
+				options.getFtpProxy(), options.isReportProgress());
 
-		DataSourceFactory factory = new DataSourceFactory(dsOptions, options.dataSourceFiles);
+		DataSourceFactory factory = new DataSourceFactory(dsOptions, options.getDataSourceFiles());
 		System.err.println("Available data sources:\n");
 		for (String name : factory.getNames())
 			System.err.println(String.format("    %s", name));
 	}
 
-	@Override
-	protected JannovarOptions parseCommandLine(String[] argv) throws CommandLineParsingException,
-			HelpRequestedException {
-		try {
-			return new DatabaseListCommandLineParser().parse(argv);
-		} catch (ParseException e) {
-			throw new CommandLineParsingException("Could not parse command line", e);
-		}
-	}
-
 }
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/JannovarDBListOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/JannovarDBListOptions.java
new file mode 100755
index 0000000000..cf63bb186f
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/db_list/JannovarDBListOptions.java
@@ -0,0 +1,51 @@
+package de.charite.compbio.jannovar.cmd.db_list;
+
+import java.util.function.BiFunction;
+
+import com.google.common.collect.Lists;
+
+import de.charite.compbio.jannovar.UncheckedJannovarException;
+import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
+import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
+import de.charite.compbio.jannovar.cmd.JannovarDBOptions;
+import net.sourceforge.argparse4j.impl.Arguments;
+import net.sourceforge.argparse4j.inf.ArgumentGroup;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.Namespace;
+import net.sourceforge.argparse4j.inf.Subparser;
+import net.sourceforge.argparse4j.inf.Subparsers;
+
+/**
+ * Configuration for the <tt>db-list</tt> command
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarDBListOptions extends JannovarDBOptions {
+
+	/**
+	 * Setup {@link ArgumentParser}
+	 * 
+	 * @param subParsers
+	 *            {@link Subparsers} to setup
+	 */
+	public static void setupParser(Subparsers subParsers) {
+		BiFunction<String[], Namespace, DatabaseListCommand> handler = (argv, args) -> {
+			try {
+				return new DatabaseListCommand(argv, args);
+			} catch (CommandLineParsingException e) {
+				throw new UncheckedJannovarException("Could not parse command line", e);
+			}
+		};
+
+		Subparser subParser = subParsers.addParser("db-list", true).help("list databases available for download")
+				.setDefault("cmd", handler);
+		subParser.description("List databases available for download");
+
+		ArgumentGroup optionalGroup = subParser.addArgumentGroup("Optional Arguments");
+		optionalGroup.addArgument("-s", "--data-source-list").help("INI file with data source list")
+				.setDefault(Lists.newArrayList("bundle:///default_sources.ini")).action(Arguments.append());
+
+		JannovarBaseOptions.setupParser(subParser);
+	}
+
+}
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/DownloadCommand.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/DownloadCommand.java
index 8f3a886a8c..b853c9c640 100755
--- a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/DownloadCommand.java
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/DownloadCommand.java
@@ -1,17 +1,14 @@
 package de.charite.compbio.jannovar.cmd.download;
 
-import org.apache.commons.cli.ParseException;
-
 import de.charite.compbio.jannovar.JannovarException;
-import de.charite.compbio.jannovar.JannovarOptions;
 import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
-import de.charite.compbio.jannovar.cmd.HelpRequestedException;
 import de.charite.compbio.jannovar.cmd.JannovarCommand;
 import de.charite.compbio.jannovar.data.JannovarData;
 import de.charite.compbio.jannovar.data.JannovarDataSerializer;
 import de.charite.compbio.jannovar.datasource.DataSourceFactory;
 import de.charite.compbio.jannovar.datasource.DatasourceOptions;
 import de.charite.compbio.jannovar.impl.util.PathUtil;
+import net.sourceforge.argparse4j.inf.Namespace;
 
 /**
  * Implementation of download step in Jannovar.
@@ -20,8 +17,11 @@
  */
 public final class DownloadCommand extends JannovarCommand {
 
-	public DownloadCommand(String[] argv) throws CommandLineParsingException, HelpRequestedException {
-		super(argv);
+	private JannovarDownloadOptions options;
+
+	public DownloadCommand(String argv[], Namespace args) throws CommandLineParsingException {
+		this.options = new JannovarDownloadOptions();
+		this.options.setFromArgs(args);
 	}
 
 	/**
@@ -30,30 +30,21 @@ public DownloadCommand(String[] argv) throws CommandLineParsingException, HelpRe
 	@Override
 	public void run() throws JannovarException {
 		System.err.println("Options");
-		options.print(System.err);
+		System.err.println(options.toString());
 
-		DatasourceOptions dsOptions = new DatasourceOptions(options.httpProxy, options.httpsProxy, options.ftpProxy,
-				options.printProgressBars);
+		DatasourceOptions dsOptions = new DatasourceOptions(options.getHttpProxy(), options.getHttpsProxy(),
+				options.getFtpProxy(), options.isReportProgress());
 
 		DataSourceFactory factory = new DataSourceFactory(dsOptions, options.dataSourceFiles);
-		for (String name : options.dataSourceNames) {
+		for (String name : options.getDatabaseNames()) {
 			System.err.println("Downloading/parsing for data source \"" + name + "\"");
-			JannovarData data = factory.getDataSource(name).getDataFactory()
-					.build(options.downloadPath, options.printProgressBars);
-			String filename = PathUtil.join(options.downloadPath, name.replace('/', '_').replace('\\', '_') + ".ser");
+			JannovarData data = factory.getDataSource(name).getDataFactory().build(options.getDownloadDir(),
+					options.isReportProgress());
+			String filename = PathUtil.join(options.getDownloadDir(),
+					name.replace('/', '_').replace('\\', '_') + ".ser");
 			JannovarDataSerializer serializer = new JannovarDataSerializer(filename);
 			serializer.save(data);
 		}
 	}
 
-	@Override
-	protected JannovarOptions parseCommandLine(String[] argv) throws CommandLineParsingException,
-	HelpRequestedException {
-		try {
-			return new DownloadCommandLineParser().parse(argv);
-		} catch (ParseException e) {
-			throw new CommandLineParsingException("Could not parse the command line.", e);
-		}
-	}
-
 }
diff --git a/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/JannovarDownloadOptions.java b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/JannovarDownloadOptions.java
new file mode 100755
index 0000000000..d2ef8782a5
--- /dev/null
+++ b/jannovar-cli/src/main/java/de/charite/compbio/jannovar/cmd/download/JannovarDownloadOptions.java
@@ -0,0 +1,94 @@
+package de.charite.compbio.jannovar.cmd.download;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.BiFunction;
+
+import com.google.common.collect.Lists;
+
+import de.charite.compbio.jannovar.UncheckedJannovarException;
+import de.charite.compbio.jannovar.cmd.CommandLineParsingException;
+import de.charite.compbio.jannovar.cmd.JannovarBaseOptions;
+import de.charite.compbio.jannovar.cmd.JannovarDBOptions;
+import net.sourceforge.argparse4j.impl.Arguments;
+import net.sourceforge.argparse4j.inf.ArgumentGroup;
+import net.sourceforge.argparse4j.inf.ArgumentParser;
+import net.sourceforge.argparse4j.inf.Namespace;
+import net.sourceforge.argparse4j.inf.Subparser;
+import net.sourceforge.argparse4j.inf.Subparsers;
+
+/**
+ * Configuration for the <tt>download</tt> command
+ * 
+ * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
+ */
+public class JannovarDownloadOptions extends JannovarDBOptions {
+
+	/** Path to download directory */
+	private String downloadDir = null;
+
+	/** Names of the databases to download */
+	private List<String> databaseNames = new ArrayList<>();
+
+	/**
+	 * Setup {@link ArgumentParser}
+	 * 
+	 * @param subParsers
+	 *            {@link Subparsers} to setup
+	 */
+	public static void setupParser(Subparsers subParsers) {
+		BiFunction<String[], Namespace, DownloadCommand> handler = (argv, args) -> {
+			try {
+				return new DownloadCommand(argv, args);
+			} catch (CommandLineParsingException e) {
+				throw new UncheckedJannovarException("Could not parse command line", e);
+			}
+		};
+
+		Subparser subParser = subParsers.addParser("download", true).help("download transcript databases")
+				.setDefault("cmd", handler);
+		subParser.description("Download transcript database");
+
+		subParser.addArgument("-d", "--database").help("Name of database to download, can be given multiple times")
+				.setDefault(new ArrayList<String>()).action(Arguments.append()).required(true);
+
+		ArgumentGroup optionalGroup = subParser.addArgumentGroup("Optional Arguments");
+		optionalGroup.addArgument("-s", "--data-source-list").help("INI file with data source list")
+				.setDefault(Lists.newArrayList("bundle:///default_sources.ini")).action(Arguments.append());
+		optionalGroup.addArgument("--download-dir").help("Path to download directory").setDefault("data");
+
+		JannovarBaseOptions.setupParser(subParser);
+	}
+
+	@Override
+	public void setFromArgs(Namespace args) throws CommandLineParsingException {
+		super.setFromArgs(args);
+
+		downloadDir = args.getString("download_dir");
+		databaseNames = args.getList("database");
+	}
+
+	public String getDownloadDir() {
+		return downloadDir;
+	}
+
+	public void setDownloadDir(String downloadDir) {
+		this.downloadDir = downloadDir;
+	}
+
+	public List<String> getDatabaseNames() {
+		return databaseNames;
+	}
+
+	public void setDatabaseNames(List<String> databaseNames) {
+		this.databaseNames = databaseNames;
+	}
+
+	@Override
+	public String toString() {
+		return "JannovarDownloadOptions [downloadDir=" + downloadDir + ", getDataSourceFiles()=" + getDataSourceFiles()
+				+ ", isReportProgress()=" + isReportProgress() + ", getHttpProxy()=" + getHttpProxy()
+				+ ", getHttpsProxy()=" + getHttpsProxy() + ", getFtpProxy()=" + getFtpProxy() + "]";
+	}
+
+}
diff --git a/jannovar-cli/src/test/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFTest.java b/jannovar-cli/src/test/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFTest.java
index 82a258b359..e70b4db9a9 100755
--- a/jannovar-cli/src/test/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFTest.java
+++ b/jannovar-cli/src/test/java/de/charite/compbio/jannovar/cmd/annotate_vcf/JannovarAnnotateVCFTest.java
@@ -14,6 +14,7 @@
 import com.google.common.base.Joiner;
 import com.google.common.io.Files;
 
+import de.charite.compbio.jannovar.Jannovar;
 import de.charite.compbio.jannovar.JannovarException;
 
 /**
@@ -37,10 +38,12 @@ public void setUp() throws URISyntaxException {
 	public void testOnSmallExample() throws JannovarException, URISyntaxException, IOException {
 		final File outFolder = tmpFolder.newFolder();
 		final String inputFilePath = this.getClass().getResource("/small.vcf").toURI().getPath();
-		String[] argv = new String[] { "annotate", "-o", outFolder.toString(), "-d", pathToSmallSer, "-i",
-				inputFilePath };
+		String[] argv = new String[] { "annotate-vcf", "-o", outFolder.toString() + "/small.jv.vcf", "-d",
+				pathToSmallSer, "-i", inputFilePath };
 		System.err.println(Joiner.on(" ").join(argv));
-		new AnnotateVCFCommand(argv).run();
+
+		Jannovar.main(argv);
+
 		File f = new File(outFolder.getAbsolutePath() + File.separator + "small.jv.vcf");
 		Assert.assertTrue(f.exists());
 
@@ -57,10 +60,12 @@ public void testOnSmallExample() throws JannovarException, URISyntaxException, I
 	public void testOnTrailingSemicolons() throws JannovarException, URISyntaxException, IOException {
 		final File outFolder = tmpFolder.newFolder();
 		final String inputFilePath = this.getClass().getResource("/semicolons.vcf").toURI().getPath();
-		String[] argv = new String[] { "annotate", "-o", outFolder.toString(), "-d", pathToSmallSer, "-i",
-				inputFilePath };
+		String[] argv = new String[] { "annotate-vcf", "-o", outFolder.toString() + "/semicolons.jv.vcf", "-d",
+				pathToSmallSer, "-i", inputFilePath };
 		System.err.println(Joiner.on(" ").join(argv));
-		new AnnotateVCFCommand(argv).run();
+
+		Jannovar.main(argv);
+
 		File f = new File(outFolder.getAbsolutePath() + File.separator + "semicolons.jv.vcf");
 		Assert.assertTrue(f.exists());
 
diff --git a/jannovar-core/src/main/java/de/charite/compbio/jannovar/datasource/DataSourceFactory.java b/jannovar-core/src/main/java/de/charite/compbio/jannovar/datasource/DataSourceFactory.java
index 72c9da9002..30a4a0312a 100755
--- a/jannovar-core/src/main/java/de/charite/compbio/jannovar/datasource/DataSourceFactory.java
+++ b/jannovar-core/src/main/java/de/charite/compbio/jannovar/datasource/DataSourceFactory.java
@@ -4,6 +4,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.List;
 
 import org.ini4j.Ini;
 import org.ini4j.InvalidFileFormatException;
@@ -31,8 +32,7 @@
 	 * @throws InvalidDataSourceException
 	 *             on problems with the data source config file
 	 */
-	public DataSourceFactory(DatasourceOptions options, ImmutableList<String> iniFilePaths)
-			throws InvalidDataSourceException {
+	public DataSourceFactory(DatasourceOptions options, List<String> iniFilePaths) throws InvalidDataSourceException {
 		this.options = options;
 
 		ImmutableList.Builder<Ini> inisBuilder = new ImmutableList.Builder<Ini>();
@@ -48,8 +48,8 @@ public DataSourceFactory(DatasourceOptions options, ImmutableList<String> iniFil
 				try {
 					is = new FileInputStream(iniFilePath);
 				} catch (FileNotFoundException e) {
-					throw new InvalidDataSourceException("Problem opening data source file " + iniFilePath + ": "
-							+ e.getMessage());
+					throw new InvalidDataSourceException(
+							"Problem opening data source file " + iniFilePath + ": " + e.getMessage());
 				}
 			}
 			Ini ini = new Ini();
