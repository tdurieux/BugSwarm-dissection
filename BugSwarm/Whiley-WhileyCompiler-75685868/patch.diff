diff --git a/modules/wyrt/src/whiley/io/File.whiley b/modules/wyrt/src/whiley/io/File.whiley
index 4c5c18ee77..55576a7675 100755
--- a/modules/wyrt/src/whiley/io/File.whiley
+++ b/modules/wyrt/src/whiley/io/File.whiley
@@ -34,12 +34,12 @@ import string from whiley.lang.ASCII
 public type Reader is  {
 
     // Read all bytes of this file in one go.
-    method readAll() -> [byte],
+    method readAll() -> byte[],
 
     // Reads at most a given number of bytes from the file.  This
     // operation may block if the number requested is greater than that
     // available.
-    method read(uint) -> [byte],
+    method read(uint) -> byte[],
 
     // Check whether the end-of-stream has been reached and, hence,
     // that there are no further bytes which can be read.
@@ -72,7 +72,7 @@ type Writer is whiley.io.Writer.Writer
 public method Writer(string fileName) -> Writer:
     NativeFile this = NativeFileWriter(fileName)
     return {
-        write: &([byte] data -> write(this,data)),
+        write: &(byte[] data -> write(this,data)),
         close: &( -> close(this)),
         flush: &( -> flush(this))
     }
@@ -101,10 +101,10 @@ private native method available(NativeFile f) -> uint
 private native method hasMore(NativeFile f) -> bool
 
 // read at most max bytes from native file
-private native method read(NativeFile f, int max) -> [byte]
+private native method read(NativeFile f, int max) -> byte[]
 
 // read as many bytes as possible from native file
-private native method read(NativeFile f) -> [byte]
+private native method read(NativeFile f) -> byte[]
 
 // write entire contents of native file
-private native method write(NativeFile f, [byte] data)
+private native method write(NativeFile f, byte[] data)
diff --git a/modules/wyrt/src/whiley/io/Reader.whiley b/modules/wyrt/src/whiley/io/Reader.whiley
index 6502e12200..d4b444e7a5 100755
--- a/modules/wyrt/src/whiley/io/Reader.whiley
+++ b/modules/wyrt/src/whiley/io/Reader.whiley
@@ -41,7 +41,7 @@ public type Reader is {
     // Reads at most a given number of bytes from the stream.  This
     // operation may block if the number requested is greater than that
     // available.
-    method read(uint) -> [byte],
+    method read(uint) -> byte[],
 
     // Check whether the end-of-stream has been reached and, hence,
     // that there are no further bytes which can be read.
diff --git a/modules/wyrt/src/whiley/io/Writer.whiley b/modules/wyrt/src/whiley/io/Writer.whiley
index 7b24e04b49..d393765d1c 100755
--- a/modules/wyrt/src/whiley/io/Writer.whiley
+++ b/modules/wyrt/src/whiley/io/Writer.whiley
@@ -38,7 +38,7 @@ import string from whiley.lang.ASCII
 public type Writer is {
 
     // Writes a given list of bytes to the output stream.
-    method write([byte]) -> uint,
+    method write(byte[]) -> uint,
 
     // Flush this output stream thereby forcing those items written
     // thus far to the output device.
diff --git a/modules/wyrt/src/whiley/lang/ASCII.whiley b/modules/wyrt/src/whiley/lang/ASCII.whiley
index a4c73622c9..e145d312f5 100755
--- a/modules/wyrt/src/whiley/lang/ASCII.whiley
+++ b/modules/wyrt/src/whiley/lang/ASCII.whiley
@@ -29,7 +29,7 @@ package whiley.lang
 public type char is (int x) where 0 <= x && x <= 255
 
 // Define string as sequence of ASCII characters
-public type string is [char]
+public type string is char[]
 
 // Convert an ASCII character into a byte.
 public function toByte(char v) -> byte:
@@ -46,8 +46,8 @@ public function toByte(char v) -> byte:
     return r
 
 // Convert an ASCII string into a list of bytes
-public function toBytes(string s) -> [byte]:
-    [byte] r = [0b; |s|]
+public function toBytes(string s) -> byte[]:
+    byte[] r = [0b; |s|]
     int i = 0
     while i < |s| where i >= 0:
         r[i] = toByte(s[i])
@@ -55,7 +55,7 @@ public function toBytes(string s) -> [byte]:
     return r
 
 // Convert a list of bytes into an ASCII string
-public function fromBytes([byte] data) -> string:
+public function fromBytes(byte[] data) -> string:
     string r = [0; |data|]
     int i = 0
     while i < |data| where i >= 0:
diff --git a/modules/wyrt/src/whiley/lang/Byte.whiley b/modules/wyrt/src/whiley/lang/Byte.whiley
index fa72aaa02e..cb88327f24 100755
--- a/modules/wyrt/src/whiley/lang/Byte.whiley
+++ b/modules/wyrt/src/whiley/lang/Byte.whiley
@@ -55,7 +55,7 @@ public function toUnsignedInt(byte b) -> uint:
 
 // Convert a byte array into an unsigned int assuming a little endian
 // form for both individual bytes, and the array as a whole
-public function toUnsignedInt([byte] bytes) -> uint:
+public function toUnsignedInt(byte[] bytes) -> uint:
     int val = 0
     int base = 1
     int i = 0
@@ -84,7 +84,7 @@ public function toInt(byte b) -> int:
 
 // Convert a byte array into a signed int assuming a little endian
 // form for both individual bytes, and the array as a whole
-public function toInt([byte] bytes) -> int:
+public function toInt(byte[] bytes) -> int:
     int val = 0
     int base = 1
     int i = 0
diff --git a/modules/wyrt/src/whiley/lang/List.whiley b/modules/wyrt/src/whiley/lang/List.whiley
index 9fbfcc06ba..289ca03e6e 100755
--- a/modules/wyrt/src/whiley/lang/List.whiley
+++ b/modules/wyrt/src/whiley/lang/List.whiley
@@ -26,8 +26,8 @@
 package whiley.lang
 
 // Increase up to a given size
-public function enlarge([int] list, int size, int element) -> [int]:
-    [int] nlist = [0; size]
+public function enlarge(int[] list, int size, int element) -> int[]:
+    int[] nlist = [0; size]
     int i = 0
     while i < size where i >= 0:
         nlist[i] = list[i]
@@ -36,7 +36,7 @@ public function enlarge([int] list, int size, int element) -> [int]:
 
 // find first index in list which matches character.  If no match,
 // then return null.
-public function indexOf([int] items, int c) -> int|null:
+public function indexOf(int[] items, int c) -> int|null:
     int i = 0
     while i < |items|:
         if items[i] == c:
@@ -44,7 +44,7 @@ public function indexOf([int] items, int c) -> int|null:
         i = i + 1
     return null
 
-public function indexOf([int] items, int c, int start) -> int|null:
+public function indexOf(int[] items, int c, int start) -> int|null:
     //
     int i = start
     while i < |items|:
@@ -55,7 +55,7 @@ public function indexOf([int] items, int c, int start) -> int|null:
 
 // find last index in list which matches character.  If no match,
 // then return null.
-public function lastIndexOf([int] items, int c) -> int|null:
+public function lastIndexOf(int[] items, int c) -> int|null:
     //
     int i = |items|
     while i > 0:
@@ -65,7 +65,7 @@ public function lastIndexOf([int] items, int c) -> int|null:
     return null
 
 // replace all occurrences of "old" with "new" in list "items".
-public function replace([int] items, int old, int n) -> [int]:
+public function replace(int[] items, int old, int n) -> int[]:
     //
     int i = 0
     while i < |items|:
diff --git a/modules/wyrt/src/whiley/lang/Stack.whiley b/modules/wyrt/src/whiley/lang/Stack.whiley
index 22623b4950..226e709a73 100755
--- a/modules/wyrt/src/whiley/lang/Stack.whiley
+++ b/modules/wyrt/src/whiley/lang/Stack.whiley
@@ -26,7 +26,7 @@
 package whiley.lang
 
 public type Stack is {
-    [int] items,
+    int[] items,
     int length
 }
 
diff --git a/modules/wyrt/src/whiley/lang/System.whiley b/modules/wyrt/src/whiley/lang/System.whiley
index 400a65c7d2..eb8d75ae7d 100755
--- a/modules/wyrt/src/whiley/lang/System.whiley
+++ b/modules/wyrt/src/whiley/lang/System.whiley
@@ -34,5 +34,5 @@ public type PrintWriter is {
 
 public type Console is {
     PrintWriter out,
-    [ASCII.string] args
+    ASCII.string[] args
 }
