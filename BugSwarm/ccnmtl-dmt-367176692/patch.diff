diff --git a/dmt/api/tests/test_views.py b/dmt/api/tests/test_views.py
index 9e8729dc..f5d874b0 100644
--- a/dmt/api/tests/test_views.py
+++ b/dmt/api/tests/test_views.py
@@ -423,7 +423,9 @@ def test_post_sends_email_even_when_owner_is_assignee(self):
         )
         self.assertEqual(
             mail.outbox[0].to,
-            [self.owner.email, self.project.caretaker_user.userprofile.email])
+            [self.owner.email,
+             self.project.caretaker_user.userprofile.email,
+             self.project.project_manager_user.userprofile.email])
 
     def test_post_redirects_client(self):
         redirect_url = 'http://example.com'
diff --git a/dmt/main/filters.py b/dmt/main/filters.py
index 72168977..fd1f1ef5 100644
--- a/dmt/main/filters.py
+++ b/dmt/main/filters.py
@@ -30,13 +30,17 @@ class Meta:
 class ProjectFilter(FilterSet):
     class Meta:
         model = Project
-        fields = ['name', 'projnum', 'caretaker_user', 'description']
+        fields = ['name', 'projnum', 'caretaker_user',
+                  'project_manager_user', 'description']
 
     name = CharFilter(label='Project Name', lookup_expr='icontains')
     projnum = NumberFilter(label='Project Number')
     caretaker_user = ModelChoiceFilter(
         queryset=User.objects.filter(
             ~Q(username__startswith='grp_')).order_by('username'))
+    project_manager_user = ModelChoiceFilter(
+        queryset=User.objects.filter(
+            ~Q(username__startswith='grp_')).order_by('username'))
     description = CharFilter(lookup_expr='icontains')
 
     @property
diff --git a/dmt/main/forms.py b/dmt/main/forms.py
index 97d644d7..456174fc 100644
--- a/dmt/main/forms.py
+++ b/dmt/main/forms.py
@@ -1,14 +1,17 @@
-import re
 from datetime import timedelta
+import re
+
 from django import forms
-from django.utils import timezone
 from django.contrib.admin.widgets import FilteredSelectMultiple
 from django.contrib.auth.models import User
 from django.db.models.functions import Lower
 from django.forms import ModelForm, TextInput, URLInput
+from django.utils import timezone
+from django.utils.encoding import smart_unicode
 from django_markwhat.templatetags.markup import commonmark
 from extra_views import InlineFormSet
 from simpleduration import Duration, InvalidDuration
+
 from dmt.main.models import (
     Comment,
     StatusUpdate, Node, UserProfile, Project, Milestone, Item,
@@ -55,8 +58,26 @@ class Meta:
         }
 
 
+class UserFullnameChoiceField(forms.ModelChoiceField):
+    # https://stackoverflow.com/questions/3966483/
+    # django-show-get-full-name-instead-or-username-in-model-form
+
+    def label_from_instance(self, obj):
+        return smart_unicode(obj.get_full_name())
+
+
 class ProjectCreateForm(ModelForm):
     target_date = forms.CharField(label='Proposed release date')
+    caretaker_user = UserFullnameChoiceField(
+        queryset=User.objects.filter(
+            userprofile__status='active', userprofile__grp=False).order_by(
+                'userprofile__fullname'),
+        required=True)
+    project_manager_user = UserFullnameChoiceField(
+        queryset=User.objects.filter(
+            userprofile__status='active', userprofile__grp=False).order_by(
+                'userprofile__fullname'),
+        required=True)
 
     class Meta:
         def now():
@@ -67,7 +88,9 @@ def four_weeks_from_now():
                 .strftime("%Y-%m-%d")
 
         model = Project
-        fields = ['name', 'description', 'pub_view', 'target_date',
+        fields = ['name', 'description', 'pub_view',
+                  'caretaker_user', 'project_manager_user',
+                  'target_date',
                   'wiki_category', 'category', 'start_date',
                   'due_date', 'launch_date']
         widgets = {
@@ -120,6 +143,9 @@ def __init__(self, *args, **kwargs):
         self.fields['caretaker_user'].choices = [
             (user.user.pk, user.fullname) for user in
             self.instance.all_personnel_in_project()]
+        self.fields['project_manager_user'].choices = [
+            (user.user.pk, user.fullname) for user in
+            self.instance.all_personnel_in_project()]
         self.fields['start_date'].value = self.instance.start_date
         self.fields['due_date'].value = self.instance.due_date
         self.fields['launch_date'].value = self.instance.launch_date
diff --git a/dmt/main/migrations/0068_project_project_manager_user.py b/dmt/main/migrations/0068_project_project_manager_user.py
new file mode 100644
index 00000000..fbdf0dd1
--- /dev/null
+++ b/dmt/main/migrations/0068_project_project_manager_user.py
@@ -0,0 +1,23 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.12 on 2018-04-12 18:28
+from __future__ import unicode_literals
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('main', '0067_auto_20180328_1546'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='project',
+            name='project_manager_user',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_manager', to=settings.AUTH_USER_MODEL),
+        ),
+    ]
diff --git a/dmt/main/models.py b/dmt/main/models.py
index a371744d..e62f271b 100644
--- a/dmt/main/models.py
+++ b/dmt/main/models.py
@@ -526,6 +526,8 @@ class Project(models.Model):
     projnum = models.IntegerField("Project number", null=True, blank=True)
     pub_view = models.BooleanField("Reportable", default=False)
     caretaker_user = models.ForeignKey(User, null=True)
+    project_manager_user = models.ForeignKey(User, null=True,
+                                             related_name='project_manager')
     description = models.TextField(blank=True)
     url = models.CharField("Project URL", max_length=255, blank=True)
     info_url = models.CharField("Information URL", max_length=255, blank=True)
@@ -632,6 +634,7 @@ def add_personnel(self, user, auth='guest'):
     def remove_personnel(self, user):
         WorksOn.objects.filter(project=self, user=user.user).delete()
         self.ensure_caretaker_in_personnel()
+        self.ensure_project_manager_in_personnel()
 
     def ensure_caretaker_in_personnel(self):
         """ if the caretaker is not in the list of project personnel,
@@ -640,6 +643,13 @@ def ensure_caretaker_in_personnel(self):
                                   user=self.caretaker_user).count() < 1:
             self.add_manager(self.caretaker_user.userprofile)
 
+    def ensure_project_manager_in_personnel(self):
+        """ if the project manager exists and is not in the list
+            of project personnel, add them """
+        if (self.project_manager_user and WorksOn.objects.filter(
+                project=self, user=self.project_manager_user).count() < 1):
+            self.add_manager(self.project_manager_user.userprofile)
+
     def all_users_not_in_project(self):
         already_in = set(
             [w.user.userprofile
@@ -1064,6 +1074,7 @@ def attachments(self):
 
 def project_save_hook(sender, instance, created, **kwargs):
     instance.ensure_caretaker_in_personnel()
+    instance.ensure_project_manager_in_personnel()
 
 
 post_save.connect(project_save_hook, sender=Project)
@@ -1458,6 +1469,8 @@ def setup_default_notification(self):
 
     def add_project_notification(self):
         self.add_subscriber(self.milestone.project.caretaker_user.userprofile)
+        self.add_subscriber(
+            self.milestone.project.project_manager_user.userprofile)
 
     def add_subscriber(self, user):
         if user.status == "inactive":
diff --git a/dmt/main/tests/factories.py b/dmt/main/tests/factories.py
index 76c2d3ea..c8d9e9a3 100644
--- a/dmt/main/tests/factories.py
+++ b/dmt/main/tests/factories.py
@@ -50,6 +50,7 @@ class Meta:
     name = factory.Sequence(lambda n: 'Test Project {0}'.format(n))
     pub_view = True
     caretaker_user = factory.SubFactory(UserFactory)
+    project_manager_user = factory.SubFactory(UserFactory)
 
 
 class MilestoneFactory(factory.DjangoModelFactory):
diff --git a/dmt/main/tests/test_models.py b/dmt/main/tests/test_models.py
index b41f9022..c63cb977 100644
--- a/dmt/main/tests/test_models.py
+++ b/dmt/main/tests/test_models.py
@@ -409,7 +409,7 @@ def test_add_project_notification(self):
         self.assertEqual(Notify.objects.count(), 0)
         i = ItemFactory()
         i.add_project_notification()
-        self.assertEqual(Notify.objects.count(), 1)
+        self.assertEqual(Notify.objects.count(), 2)
         n = Notify.objects.first()
         self.assertEqual(n.item, i)
         self.assertEqual(n.user, i.milestone.project.caretaker_user)
@@ -622,14 +622,28 @@ def test_add_milestone_valid_target_date(self):
 
     def test_managers_empty(self):
         p = ProjectFactory()
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
 
     def test_ensure_caretaker_in_personnel(self):
         p = ProjectFactory()
         WorksOn.objects.filter(project=p, user=p.caretaker_user).delete()
-        self.assertEqual(p.managers(), [])
+        self.assertEqual(p.managers(), [p.project_manager_user.userprofile])
         p.ensure_caretaker_in_personnel()
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
+
+    def test_ensure_project_manager_in_personnel(self):
+        p = ProjectFactory()
+        WorksOn.objects.filter(
+            project=p, user=p.project_manager_user).delete()
         self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        p.ensure_project_manager_in_personnel()
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
 
     def test_developers_empty(self):
         p = ProjectFactory()
@@ -658,7 +672,8 @@ def test_managers(self):
         u = UserProfileFactory()
         p.add_manager(u)
         self.assertEqual(set(p.managers()),
-                         set([u, p.caretaker_user.userprofile]))
+                         set([u, p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
 
     def test_developers(self):
         p = ProjectFactory()
@@ -677,29 +692,36 @@ def test_only_one_role_allowed(self):
         u = UserProfileFactory()
         p.add_manager(u)
         self.assertEqual(set(p.managers()),
-                         set([u, p.caretaker_user.userprofile]))
+                         set([u, p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [])
         self.assertEqual(p.guests(), [])
+
         p.add_developer(u)
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [u])
         self.assertEqual(p.guests(), [])
+
         p.add_guest(u)
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [])
         self.assertEqual(p.guests(), [u])
 
-        p.add_manager(u)
-        self.assertEqual(set(p.managers()),
-                         set([u, p.caretaker_user.userprofile]))
-        self.assertEqual(p.developers(), [])
-        self.assertEqual(p.guests(), [])
         p.add_developer(u)
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [u])
         self.assertEqual(p.guests(), [])
+
         p.add_guest(u)
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(set(p.managers()),
+                         set([p.caretaker_user.userprofile,
+                              p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [])
         self.assertEqual(p.guests(), [u])
 
@@ -707,10 +729,15 @@ def test_remove_personnel(self):
         p = ProjectFactory()
         u = UserProfileFactory()
         p.add_manager(u)
-        self.assertEqual(set(p.managers()),
-                         set([u, p.caretaker_user.userprofile]))
+        self.assertEqual(
+            set(p.managers()),
+            set([u, p.caretaker_user.userprofile,
+                 p.project_manager_user.userprofile]))
         p.remove_personnel(u)
-        self.assertEqual(p.managers(), [p.caretaker_user.userprofile])
+        self.assertEqual(
+            set(p.managers()),
+            set([p.caretaker_user.userprofile,
+                 p.project_manager_user.userprofile]))
         self.assertEqual(p.developers(), [])
         self.assertEqual(p.guests(), [])
 
@@ -735,7 +762,8 @@ def test_personnel_in_project_sorts_groups_first(self):
         p.add_manager(u)
         p.add_manager(g.grp)
         r = p.personnel_in_project()
-        self.assertEqual(set(r), set([g.grp, u, p.caretaker_user.userprofile]))
+        self.assertEqual(set(r), set([g.grp, u, p.caretaker_user.userprofile,
+                                      p.project_manager_user.userprofile]))
 
     def test_add_item_created_by(self):
         m = MilestoneFactory()
diff --git a/dmt/main/tests/test_views.py b/dmt/main/tests/test_views.py
index 6a0ac6fc..a1014505 100644
--- a/dmt/main/tests/test_views.py
+++ b/dmt/main/tests/test_views.py
@@ -480,7 +480,9 @@ def test_create_project_post(self):
             'category': test_category,
             'start_date': test_start_date,
             'due_date': test_due_date,
-            'launch_date': test_launch_date
+            'launch_date': test_launch_date,
+            'caretaker_user': self.u.pk,
+            'project_manager_user': self.u.pk
         })
         self.assertEqual(r.status_code, 302)
         url = r.url
@@ -556,7 +558,9 @@ def test_create_project_post_adds_final_release_milestone(self):
                      'category': 'MOOC',
                      'start_date': '2020-04-28',
                      'due_date': '2020-04-28',
-                     'launch_date': '2020-04-28'})
+                     'launch_date': '2020-04-28',
+                     'caretaker_user': self.u.pk,
+                     'project_manager_user': self.u.pk})
         p = Project.objects.get(name='Test project name')
         self.assertEqual(
             Milestone.objects.filter(project=p, name='Final Release').count(),
@@ -572,13 +576,15 @@ def test_create_project_post_adds_someday_milestone(self):
                      'category': 'MOOC',
                      'start_date': '2020-04-28',
                      'due_date': '2020-04-28',
-                     'launch_date': '2020-04-28'})
+                     'launch_date': '2020-04-28',
+                     'caretaker_user': self.u.pk,
+                     'project_manager_user': self.u.pk})
         p = Project.objects.get(name='Test project name')
         self.assertEqual(
             Milestone.objects.filter(project=p, name='Someday/Maybe').count(),
             1)
 
-    def test_create_project_post_adds_current_user_to_personnel(self):
+    def test_create_project_post_adds_users_to_personnel(self):
         self.c.post(reverse('project_create'),
                     {'name': 'Test project name',
                      'description': 'description',
@@ -588,7 +594,9 @@ def test_create_project_post_adds_current_user_to_personnel(self):
                      'category': 'MOOC',
                      'start_date': '2020-04-28',
                      'due_date': '2020-04-28',
-                     'launch_date': '2020-04-28'})
+                     'launch_date': '2020-04-28',
+                     'caretaker_user': self.u.pk,
+                     'project_manager_user': self.u.pk})
         p = Project.objects.get(name='Test project name')
         self.assertTrue(self.u.userprofile in p.personnel_in_project())
 
diff --git a/dmt/main/views.py b/dmt/main/views.py
index 719324ac..883c9dc2 100644
--- a/dmt/main/views.py
+++ b/dmt/main/views.py
@@ -707,7 +707,6 @@ class ProjectCreateView(LoggedInMixin, CreateView):
     form_class = ProjectCreateForm
 
     def form_valid(self, form):
-        form.instance.caretaker_user = self.request.user
         form.instance.save()
 
         try:
diff --git a/dmt/templates/main/project_filter.html b/dmt/templates/main/project_filter.html
index 3e5cfe69..1c5dc0ef 100644
--- a/dmt/templates/main/project_filter.html
+++ b/dmt/templates/main/project_filter.html
@@ -37,6 +37,7 @@ <h1 class="page-title">All Projects</h1>
             <th>Start Date</th>
             <th>Due Date</th>
             <th>Launch Date</th>
+            <th>Project Manager</th>
             <th>Caretaker</th>
         </tr>
     </thead>
@@ -50,6 +51,9 @@ <h1 class="page-title">All Projects</h1>
             <td>{{project.start_date | date:"Y/m/d"}}</td>
             <td>{{project.due_date | date:"Y/m/d"}}</td>
             <td>{{project.launch_date | date:"Y/m/d"}}</td>
+            <td><a href="/user/{{project.project_manager_user.username}}/">
+                    {{project.project_manager_user.userprofile.fullname}}
+                </a></td>
             <td><a href="/user/{{project.caretaker_user.username}}/">
                     {{project.caretaker_user.userprofile.fullname}}
                 </a></td>
diff --git a/requirements.txt b/requirements.txt
index c30fa0ed..66f586d9 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -11,7 +11,7 @@ pycodestyle==2.3.1
 flake8==3.5.0
 
 mccabe==0.6.1
-certifi==2018.1.18
+certifi==2018.4.16
 
 pyparsing==2.2.0
 backports.ssl_match_hostname==3.5.0.1
@@ -25,7 +25,7 @@ traitlets==4.3.2
 ipython_genutils==0.2.0
 decorator==4.2.1
 ptyprocess==0.5.2
-pexpect==4.4.0
+pexpect==4.5.0
 scandir==1.7
 pathlib2==2.3.0
 pickleshare==0.7.4
@@ -69,11 +69,11 @@ six==1.11.0
 python-dateutil==2.7.2
 pytz==2018.4
 simpleduration==0.1.0
-ipaddress==1.0.19
+ipaddress==1.0.21
 text-unidecode==1.2  # for faker
 Faker==0.8.13
 factory_boy==2.10.0
-ldap3==2.4.1
+ldap3==2.5
 anyjson==0.3.3
 
 vine==1.1.4
@@ -87,7 +87,7 @@ enum34==1.1.6
 billiard==3.5.0.3
 parse-type==0.4.2
 parse==1.8.2
-wsgi_intercept==1.6.0
+wsgi_intercept==1.7.0
 mechanize==0.3.6
 recordtype==1.1
 urlparse2==1.1.1
@@ -95,7 +95,7 @@ sqlparse==0.2.4
 requirements/src/whitelistaffilmapper-0.1.0-py2-none-any.whl
 boto==2.48.0
 unicodecsv==0.14.1
-XlsxWriter==1.0.3
+XlsxWriter==1.0.4
 splinter==0.7.7
 shortuuid==0.5.0
 contextlib2==0.5.5
@@ -111,12 +111,12 @@ rcssmin==1.0.6  # django-compressor
 rjsmin==1.0.12  # django-compressor
 django-compressor==2.2
 django-statsd-mozilla==0.4.0
-raven==6.6.0
+raven==6.7.0
 django-debug-toolbar==1.9.1
 django-waffle==0.14.0
 django-jenkins==0.110.0
 django-smoketest==1.1.0
-django-extensions==2.0.6
+django-extensions==2.0.7
 typing==3.6.4 # needed for django-extensions
 django-stagingcontext==0.1.0
 django-ga-context==0.1.0
@@ -133,7 +133,7 @@ django-bootstrap3==9.1.0
 django-emoji==2.2.0
 django-braces==1.12.0
 oauthlib==2.0.7
-django-oauth-toolkit==1.0.0
+django-oauth-toolkit==1.1.0
 django-extra-views==0.10.0
 bleach==2.1.3
 webencodings==0.5.1
